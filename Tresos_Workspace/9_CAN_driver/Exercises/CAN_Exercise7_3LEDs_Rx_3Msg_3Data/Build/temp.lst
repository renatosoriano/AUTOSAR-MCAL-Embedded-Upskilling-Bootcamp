
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000e37 	.word	0x00000e37
  10:	00000e39 	.word	0x00000e39
  14:	00000e3b 	.word	0x00000e3b
  18:	00000e3d 	.word	0x00000e3d
	...
  2c:	00000e3f 	.word	0x00000e3f
  30:	00000e41 	.word	0x00000e41
  34:	00000000 	.word	0x00000000
  38:	00000e43 	.word	0x00000e43
  3c:	00000e45 	.word	0x00000e45
  40:	00000e47 	.word	0x00000e47
  44:	00000e47 	.word	0x00000e47
  48:	00000e47 	.word	0x00000e47
  4c:	00000e47 	.word	0x00000e47
  50:	00000e47 	.word	0x00000e47
  54:	00000e47 	.word	0x00000e47
  58:	00000e47 	.word	0x00000e47
  5c:	00000e47 	.word	0x00000e47
  60:	00000e47 	.word	0x00000e47
  64:	00000e47 	.word	0x00000e47
  68:	00000e47 	.word	0x00000e47
  6c:	00000e47 	.word	0x00000e47
  70:	00000e47 	.word	0x00000e47
  74:	00000e47 	.word	0x00000e47
  78:	00000e47 	.word	0x00000e47
  7c:	00000e47 	.word	0x00000e47
  80:	00000e47 	.word	0x00000e47
  84:	00000e47 	.word	0x00000e47
  88:	00000e47 	.word	0x00000e47
  8c:	00000e47 	.word	0x00000e47
  90:	00000e47 	.word	0x00000e47
  94:	00000e47 	.word	0x00000e47
  98:	00000e47 	.word	0x00000e47
  9c:	00000e47 	.word	0x00000e47
  a0:	00000e47 	.word	0x00000e47
  a4:	00000e47 	.word	0x00000e47
  a8:	00000e47 	.word	0x00000e47
  ac:	00000e47 	.word	0x00000e47
  b0:	00000e47 	.word	0x00000e47
  b4:	00000e47 	.word	0x00000e47
  b8:	00000e47 	.word	0x00000e47
  bc:	00000e47 	.word	0x00000e47
  c0:	00000e47 	.word	0x00000e47
  c4:	00000e47 	.word	0x00000e47
  c8:	00000e47 	.word	0x00000e47
  cc:	00000e47 	.word	0x00000e47
  d0:	00000e47 	.word	0x00000e47
  d4:	00000e47 	.word	0x00000e47
  d8:	00000e47 	.word	0x00000e47
  dc:	00000e47 	.word	0x00000e47
  e0:	00000e47 	.word	0x00000e47
  e4:	00000e47 	.word	0x00000e47
  e8:	00000e47 	.word	0x00000e47
  ec:	00000e47 	.word	0x00000e47
  f0:	00000e47 	.word	0x00000e47
  f4:	00000e47 	.word	0x00000e47
  f8:	00000e47 	.word	0x00000e47
  fc:	00000e47 	.word	0x00000e47
 100:	00000e47 	.word	0x00000e47
 104:	00000e47 	.word	0x00000e47
 108:	00000e47 	.word	0x00000e47
 10c:	00000e47 	.word	0x00000e47
 110:	00000e47 	.word	0x00000e47
 114:	00000e47 	.word	0x00000e47
 118:	00000e47 	.word	0x00000e47
 11c:	00000e47 	.word	0x00000e47
 120:	00000e47 	.word	0x00000e47
 124:	00000e47 	.word	0x00000e47
 128:	00000e47 	.word	0x00000e47
 12c:	00000e47 	.word	0x00000e47
 130:	00000e47 	.word	0x00000e47
 134:	00000e47 	.word	0x00000e47
 138:	00000e47 	.word	0x00000e47
 13c:	00000e47 	.word	0x00000e47
 140:	00000e47 	.word	0x00000e47
 144:	00000e47 	.word	0x00000e47
 148:	00000e47 	.word	0x00000e47
 14c:	00000e47 	.word	0x00000e47
 150:	00000e47 	.word	0x00000e47
 154:	00000e47 	.word	0x00000e47
 158:	00000e47 	.word	0x00000e47
 15c:	00000e47 	.word	0x00000e47
 160:	00000e47 	.word	0x00000e47
 164:	00000e47 	.word	0x00000e47
 168:	00000e47 	.word	0x00000e47
 16c:	00000e47 	.word	0x00000e47
 170:	00000e47 	.word	0x00000e47
 174:	00000e47 	.word	0x00000e47
 178:	00000e47 	.word	0x00000e47
 17c:	00000e47 	.word	0x00000e47
 180:	00000e47 	.word	0x00000e47
 184:	00000e47 	.word	0x00000e47
 188:	00000e47 	.word	0x00000e47
 18c:	00000e47 	.word	0x00000e47
 190:	00000e47 	.word	0x00000e47
 194:	00000e47 	.word	0x00000e47
 198:	00000e47 	.word	0x00000e47
 19c:	00000e47 	.word	0x00000e47
 1a0:	00000e47 	.word	0x00000e47
 1a4:	00000e47 	.word	0x00000e47
 1a8:	00000e47 	.word	0x00000e47
 1ac:	00000e47 	.word	0x00000e47
 1b0:	00000e47 	.word	0x00000e47
 1b4:	00000e47 	.word	0x00000e47
 1b8:	00000e47 	.word	0x00000e47
 1bc:	00000e47 	.word	0x00000e47
 1c0:	00000e47 	.word	0x00000e47
 1c4:	00000e47 	.word	0x00000e47
 1c8:	00000e47 	.word	0x00000e47
 1cc:	00000e47 	.word	0x00000e47
 1d0:	00000e47 	.word	0x00000e47
 1d4:	00000e47 	.word	0x00000e47
 1d8:	00000e47 	.word	0x00000e47
 1dc:	00000e47 	.word	0x00000e47
 1e0:	00000e47 	.word	0x00000e47
 1e4:	00000e47 	.word	0x00000e47
 1e8:	00000e47 	.word	0x00000e47
 1ec:	00000e47 	.word	0x00000e47
 1f0:	00000e47 	.word	0x00000e47
 1f4:	00000e47 	.word	0x00000e47
 1f8:	00000e47 	.word	0x00000e47
 1fc:	00000e47 	.word	0x00000e47
 200:	00000e47 	.word	0x00000e47
 204:	00000e47 	.word	0x00000e47
 208:	00000e47 	.word	0x00000e47
 20c:	00000e47 	.word	0x00000e47
 210:	00000e47 	.word	0x00000e47
 214:	00000e47 	.word	0x00000e47
 218:	00000e47 	.word	0x00000e47
 21c:	00000e47 	.word	0x00000e47
 220:	00000e47 	.word	0x00000e47
 224:	00000e47 	.word	0x00000e47
 228:	00000e47 	.word	0x00000e47
 22c:	00000e47 	.word	0x00000e47
 230:	00000e47 	.word	0x00000e47
 234:	00000e47 	.word	0x00000e47
 238:	00000e47 	.word	0x00000e47
 23c:	00000e47 	.word	0x00000e47
 240:	00000e47 	.word	0x00000e47
 244:	00000e47 	.word	0x00000e47
 248:	00000e47 	.word	0x00000e47
 24c:	00000e47 	.word	0x00000e47
 250:	00000e47 	.word	0x00000e47
 254:	00000e47 	.word	0x00000e47
 258:	00000e47 	.word	0x00000e47
 25c:	00000e47 	.word	0x00000e47
 260:	00000e47 	.word	0x00000e47
 264:	00000e47 	.word	0x00000e47
 268:	00000e47 	.word	0x00000e47
 26c:	00000e47 	.word	0x00000e47
 270:	00000e47 	.word	0x00000e47
 274:	00000e47 	.word	0x00000e47
 278:	00000e47 	.word	0x00000e47
 27c:	00000e47 	.word	0x00000e47
 280:	00000e47 	.word	0x00000e47
 284:	00000e47 	.word	0x00000e47
 288:	00000e47 	.word	0x00000e47
 28c:	00000e47 	.word	0x00000e47
 290:	00000e47 	.word	0x00000e47
 294:	00000e47 	.word	0x00000e47
 298:	00000e47 	.word	0x00000e47
 29c:	00000e47 	.word	0x00000e47
 2a0:	00000e47 	.word	0x00000e47
 2a4:	00000e47 	.word	0x00000e47
 2a8:	00000e47 	.word	0x00000e47
 2ac:	00000e47 	.word	0x00000e47
 2b0:	00000e47 	.word	0x00000e47
 2b4:	00000e47 	.word	0x00000e47
 2b8:	00000e47 	.word	0x00000e47
 2bc:	00000e47 	.word	0x00000e47
 2c0:	00000e47 	.word	0x00000e47
 2c4:	00000e47 	.word	0x00000e47
 2c8:	00000e47 	.word	0x00000e47
 2cc:	00000e47 	.word	0x00000e47
 2d0:	00000e47 	.word	0x00000e47
 2d4:	00000e47 	.word	0x00000e47
 2d8:	00000e47 	.word	0x00000e47
 2dc:	00000e47 	.word	0x00000e47
 2e0:	00000e47 	.word	0x00000e47
 2e4:	00000e47 	.word	0x00000e47
 2e8:	00000e47 	.word	0x00000e47
 2ec:	00000e47 	.word	0x00000e47
 2f0:	00000e47 	.word	0x00000e47
 2f4:	00000e47 	.word	0x00000e47
 2f8:	00000e47 	.word	0x00000e47
 2fc:	00000e47 	.word	0x00000e47
 300:	00000e47 	.word	0x00000e47
 304:	00000e47 	.word	0x00000e47
 308:	00000e47 	.word	0x00000e47
 30c:	00000e47 	.word	0x00000e47

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fc0f 	bl	ca4 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fcce 	bl	e2c <startup_go_to_user_mode>
     490:	f000 fac2 	bl	a18 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91d0 	.word	0x1fff91d0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fc19 	bl	dd0 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 fac0 	bl	1e48 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 fa70 	bl	1db0 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 fa80 	bl	1de2 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CanIf_ControllerBusOff>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerBusOff(uint8 ControllerId)
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
     904:	bf00      	nop
     906:	b002      	add	sp, #8
     908:	4770      	bx	lr

0000090a <CanIf_ControllerModeIndication>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerModeIndication(uint8 ControllerId, Can_ControllerStateType ControllerMode )
{
     90a:	b082      	sub	sp, #8
     90c:	4603      	mov	r3, r0
     90e:	9100      	str	r1, [sp, #0]
     910:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ControllerMode;
}
     914:	bf00      	nop
     916:	b002      	add	sp, #8
     918:	4770      	bx	lr

0000091a <CanIf_TxConfirmation>:

/*CanIf callback function implementation to set the flag when a message is transmited
this function is called by the interrupt function three times, once every message has
been transmitted. In reality this function is already implemented in CanIf layer*/
void CanIf_TxConfirmation( PduIdType CanTxPduId )
{
     91a:	b082      	sub	sp, #8
     91c:	4603      	mov	r3, r0
     91e:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void)CanTxPduId;
}
     922:	bf00      	nop
     924:	b002      	add	sp, #8
     926:	4770      	bx	lr

00000928 <CanIf_RxIndication>:

/*CanIf callback function implementation to set the flag when a message is received
this function is called by the CAN interrupt.
In reality this function is already implemented in CanIf layer*/
void CanIf_RxIndication(const Can_HwType* Mailbox, const PduInfoType* PduInfoPtr )
{
     928:	b084      	sub	sp, #16
     92a:	9001      	str	r0, [sp, #4]
     92c:	9100      	str	r1, [sp, #0]
    (void)Mailbox;

    /* CanId is stored in Mailbox->CanId */
    if(Mailbox->CanId == 0x154)
     92e:	9b01      	ldr	r3, [sp, #4]
     930:	681b      	ldr	r3, [r3, #0]
     932:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
     936:	d11d      	bne.n	974 <CanIf_RxIndication+0x4c>
    {
        CANIDRx = Mailbox->CanId;
     938:	9b01      	ldr	r3, [sp, #4]
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	4a33      	ldr	r2, [pc, #204]	; (a0c <CanIf_RxIndication+0xe4>)
     93e:	6013      	str	r3, [r2, #0]
        /* The received message is store in PduInfoPtr->SduDataPtr */
        for(uint8 i = 0; i < 8 ; i++)
     940:	2300      	movs	r3, #0
     942:	f88d 300f 	strb.w	r3, [sp, #15]
     946:	e00e      	b.n	966 <CanIf_RxIndication+0x3e>
        {
            Can_au8Sdu8bytes[i] = PduInfoPtr->SduDataPtr[i];
     948:	9b00      	ldr	r3, [sp, #0]
     94a:	681a      	ldr	r2, [r3, #0]
     94c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     950:	441a      	add	r2, r3
     952:	f89d 300f 	ldrb.w	r3, [sp, #15]
     956:	7811      	ldrb	r1, [r2, #0]
     958:	4a2d      	ldr	r2, [pc, #180]	; (a10 <CanIf_RxIndication+0xe8>)
     95a:	54d1      	strb	r1, [r2, r3]
        for(uint8 i = 0; i < 8 ; i++)
     95c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     960:	3301      	adds	r3, #1
     962:	f88d 300f 	strb.w	r3, [sp, #15]
     966:	f89d 300f 	ldrb.w	r3, [sp, #15]
     96a:	2b07      	cmp	r3, #7
     96c:	d9ec      	bls.n	948 <CanIf_RxIndication+0x20>
        }
        LEDFlag = 1;
     96e:	4b29      	ldr	r3, [pc, #164]	; (a14 <CanIf_RxIndication+0xec>)
     970:	2201      	movs	r2, #1
     972:	701a      	strb	r2, [r3, #0]
    }

    /* CanId is stored in Mailbox->CanId */
    if(Mailbox->CanId == 0x233)
     974:	9b01      	ldr	r3, [sp, #4]
     976:	681b      	ldr	r3, [r3, #0]
     978:	f240 2233 	movw	r2, #563	; 0x233
     97c:	4293      	cmp	r3, r2
     97e:	d11d      	bne.n	9bc <CanIf_RxIndication+0x94>
    {
        CANIDRx = Mailbox->CanId;
     980:	9b01      	ldr	r3, [sp, #4]
     982:	681b      	ldr	r3, [r3, #0]
     984:	4a21      	ldr	r2, [pc, #132]	; (a0c <CanIf_RxIndication+0xe4>)
     986:	6013      	str	r3, [r2, #0]
        /* The received message is store in PduInfoPtr->SduDataPtr */
        for(uint8 i = 0; i < 8 ; i++)
     988:	2300      	movs	r3, #0
     98a:	f88d 300e 	strb.w	r3, [sp, #14]
     98e:	e00e      	b.n	9ae <CanIf_RxIndication+0x86>
        {
            Can_au8Sdu8bytes[i] = PduInfoPtr->SduDataPtr[i];
     990:	9b00      	ldr	r3, [sp, #0]
     992:	681a      	ldr	r2, [r3, #0]
     994:	f89d 300e 	ldrb.w	r3, [sp, #14]
     998:	441a      	add	r2, r3
     99a:	f89d 300e 	ldrb.w	r3, [sp, #14]
     99e:	7811      	ldrb	r1, [r2, #0]
     9a0:	4a1b      	ldr	r2, [pc, #108]	; (a10 <CanIf_RxIndication+0xe8>)
     9a2:	54d1      	strb	r1, [r2, r3]
        for(uint8 i = 0; i < 8 ; i++)
     9a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
     9a8:	3301      	adds	r3, #1
     9aa:	f88d 300e 	strb.w	r3, [sp, #14]
     9ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
     9b2:	2b07      	cmp	r3, #7
     9b4:	d9ec      	bls.n	990 <CanIf_RxIndication+0x68>
        }
        LEDFlag = 2;
     9b6:	4b17      	ldr	r3, [pc, #92]	; (a14 <CanIf_RxIndication+0xec>)
     9b8:	2202      	movs	r2, #2
     9ba:	701a      	strb	r2, [r3, #0]
    }

    /* CanId is stored in Mailbox->CanId */
    if(Mailbox->CanId == 0x382)
     9bc:	9b01      	ldr	r3, [sp, #4]
     9be:	681b      	ldr	r3, [r3, #0]
     9c0:	f240 3282 	movw	r2, #898	; 0x382
     9c4:	4293      	cmp	r3, r2
     9c6:	d11d      	bne.n	a04 <CanIf_RxIndication+0xdc>
    {
        CANIDRx = Mailbox->CanId;
     9c8:	9b01      	ldr	r3, [sp, #4]
     9ca:	681b      	ldr	r3, [r3, #0]
     9cc:	4a0f      	ldr	r2, [pc, #60]	; (a0c <CanIf_RxIndication+0xe4>)
     9ce:	6013      	str	r3, [r2, #0]
        /* The received message is store in PduInfoPtr->SduDataPtr */
        for(uint8 i = 0; i < 8 ; i++)
     9d0:	2300      	movs	r3, #0
     9d2:	f88d 300d 	strb.w	r3, [sp, #13]
     9d6:	e00e      	b.n	9f6 <CanIf_RxIndication+0xce>
        {
            Can_au8Sdu8bytes[i] = PduInfoPtr->SduDataPtr[i];
     9d8:	9b00      	ldr	r3, [sp, #0]
     9da:	681a      	ldr	r2, [r3, #0]
     9dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
     9e0:	441a      	add	r2, r3
     9e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
     9e6:	7811      	ldrb	r1, [r2, #0]
     9e8:	4a09      	ldr	r2, [pc, #36]	; (a10 <CanIf_RxIndication+0xe8>)
     9ea:	54d1      	strb	r1, [r2, r3]
        for(uint8 i = 0; i < 8 ; i++)
     9ec:	f89d 300d 	ldrb.w	r3, [sp, #13]
     9f0:	3301      	adds	r3, #1
     9f2:	f88d 300d 	strb.w	r3, [sp, #13]
     9f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
     9fa:	2b07      	cmp	r3, #7
     9fc:	d9ec      	bls.n	9d8 <CanIf_RxIndication+0xb0>
        }
        LEDFlag = 3;
     9fe:	4b05      	ldr	r3, [pc, #20]	; (a14 <CanIf_RxIndication+0xec>)
     a00:	2203      	movs	r2, #3
     a02:	701a      	strb	r2, [r3, #0]
    }
}
     a04:	bf00      	nop
     a06:	b004      	add	sp, #16
     a08:	4770      	bx	lr
     a0a:	bf00      	nop
     a0c:	1fff8b4c 	.word	0x1fff8b4c
     a10:	1fff8b40 	.word	0x1fff8b40
     a14:	1fff8b48 	.word	0x1fff8b48

00000a18 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     a18:	b500      	push	{lr}
     a1a:	b083      	sub	sp, #12
    EcuM_Init();
     a1c:	f000 f88e 	bl	b3c <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     a20:	f000 fba4 	bl	116c <SEGGER_RTT_Init>

    uint32 blinkingtime = 0;
     a24:	2300      	movs	r3, #0
     a26:	9301      	str	r3, [sp, #4]

    /* Set the specified baudrate */
    if (Can_43_FLEXCAN_SetBaudrate(CanController_0, CAN_BAUDRATE_500kbps_ID ) == E_OK) {
     a28:	2102      	movs	r1, #2
     a2a:	2000      	movs	r0, #0
     a2c:	f006 fbae 	bl	718c <Can_43_FLEXCAN_SetBaudrate>
     a30:	4603      	mov	r3, r0
     a32:	2b00      	cmp	r3, #0
     a34:	d104      	bne.n	a40 <main+0x28>
        SEGGER_RTT_printf( 0, "CAN baud rate set successfully. \n" );
     a36:	4937      	ldr	r1, [pc, #220]	; (b14 <main+0xfc>)
     a38:	2000      	movs	r0, #0
     a3a:	f000 feff 	bl	183c <SEGGER_RTT_printf>
     a3e:	e003      	b.n	a48 <main+0x30>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN baud rate. \n" );
     a40:	4935      	ldr	r1, [pc, #212]	; (b18 <main+0x100>)
     a42:	2000      	movs	r0, #0
     a44:	f000 fefa 	bl	183c <SEGGER_RTT_printf>

    /* The CAN module notifies the upper layer (CanIf_ControllerModeIndication) after 
    a successful state transition about the new state. The monitoring whether the 
    requested state is achieved is part of an upper layer module and is not part of 
    the Can module. */
    if (Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED ) == E_OK) {
     a48:	2101      	movs	r1, #1
     a4a:	2000      	movs	r0, #0
     a4c:	f006 fbd6 	bl	71fc <Can_43_FLEXCAN_SetControllerMode>
     a50:	4603      	mov	r3, r0
     a52:	2b00      	cmp	r3, #0
     a54:	d104      	bne.n	a60 <main+0x48>
        SEGGER_RTT_printf( 0, "CAN controller state machine set successfully. \n" );
     a56:	4931      	ldr	r1, [pc, #196]	; (b1c <main+0x104>)
     a58:	2000      	movs	r0, #0
     a5a:	f000 feef 	bl	183c <SEGGER_RTT_printf>
     a5e:	e003      	b.n	a68 <main+0x50>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN controller state machine. \n" );
     a60:	492f      	ldr	r1, [pc, #188]	; (b20 <main+0x108>)
     a62:	2000      	movs	r0, #0
     a64:	f000 feea 	bl	183c <SEGGER_RTT_printf>
    }

    while( 1u )
    {

        if(LEDFlag == 1)
     a68:	4b2e      	ldr	r3, [pc, #184]	; (b24 <main+0x10c>)
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	2b01      	cmp	r3, #1
     a6e:	d116      	bne.n	a9e <main+0x86>
        {
            LEDFlag = 0;
     a70:	4b2c      	ldr	r3, [pc, #176]	; (b24 <main+0x10c>)
     a72:	2200      	movs	r2, #0
     a74:	701a      	strb	r2, [r3, #0]
            /* Use the first and second byte received to determine the time for blinking */
            /* 
            Payload used for testing: 0x00 0x00 0x00 0x00 0x00 0x00 0x32 0x64 
            Byte 0: 0x64 (100), Byte 1: 0x32 (50), blinking time: 0x96 (150) ms
            */
            blinkingtime = (uint32)(Can_au8Sdu8bytes[7] + Can_au8Sdu8bytes[6]);
     a76:	4b2c      	ldr	r3, [pc, #176]	; (b28 <main+0x110>)
     a78:	79db      	ldrb	r3, [r3, #7]
     a7a:	461a      	mov	r2, r3
     a7c:	4b2a      	ldr	r3, [pc, #168]	; (b28 <main+0x110>)
     a7e:	799b      	ldrb	r3, [r3, #6]
     a80:	4413      	add	r3, r2
     a82:	9301      	str	r3, [sp, #4]
            //SEGGER_RTT_printf( 0, "[Debug] Byte 0: 0x%x, Byte 1: 0x%x, blinking time: 0x%x ms \n", Can_au8Sdu8bytes[7], Can_au8Sdu8bytes[6], blinkingtime );
            SEGGER_RTT_printf( 0, "CAN msg 0x%x received at 500kbps to blink BLUE LED for: %d ms \n", CANIDRx, blinkingtime );
     a84:	4b29      	ldr	r3, [pc, #164]	; (b2c <main+0x114>)
     a86:	681a      	ldr	r2, [r3, #0]
     a88:	9b01      	ldr	r3, [sp, #4]
     a8a:	4929      	ldr	r1, [pc, #164]	; (b30 <main+0x118>)
     a8c:	2000      	movs	r0, #0
     a8e:	f000 fed5 	bl	183c <SEGGER_RTT_printf>
            HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     a92:	2000      	movs	r0, #0
     a94:	f000 f8de 	bl	c54 <HwIoAb_Leds_TurnToggle>
            Delay(blinkingtime);
     a98:	9801      	ldr	r0, [sp, #4]
     a9a:	f7ff ff09 	bl	8b0 <Delay>
        }
        if(LEDFlag == 2)
     a9e:	4b21      	ldr	r3, [pc, #132]	; (b24 <main+0x10c>)
     aa0:	781b      	ldrb	r3, [r3, #0]
     aa2:	2b02      	cmp	r3, #2
     aa4:	d116      	bne.n	ad4 <main+0xbc>
        {
            LEDFlag = 0;
     aa6:	4b1f      	ldr	r3, [pc, #124]	; (b24 <main+0x10c>)
     aa8:	2200      	movs	r2, #0
     aaa:	701a      	strb	r2, [r3, #0]
            /* Use the first and second byte received to determine the time for blinking */
            /* 
            Payload used for testing: 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 
            Byte 0: 0xFF (255), Byte 1: 0xFF (255), blinking time: 0x01FE (510) ms
            */
            blinkingtime = (uint32)(Can_au8Sdu8bytes[7] + Can_au8Sdu8bytes[6]);
     aac:	4b1e      	ldr	r3, [pc, #120]	; (b28 <main+0x110>)
     aae:	79db      	ldrb	r3, [r3, #7]
     ab0:	461a      	mov	r2, r3
     ab2:	4b1d      	ldr	r3, [pc, #116]	; (b28 <main+0x110>)
     ab4:	799b      	ldrb	r3, [r3, #6]
     ab6:	4413      	add	r3, r2
     ab8:	9301      	str	r3, [sp, #4]
            //SEGGER_RTT_printf( 0, "[Debug] Byte 0: 0x%x, Byte 1: 0x%x, blinking time: 0x%x ms \n", Can_au8Sdu8bytes[7], Can_au8Sdu8bytes[6], blinkingtime );
            SEGGER_RTT_printf( 0, "CAN msg 0x%x received at 500kbps to blink RED LED for: %d ms \n", CANIDRx, blinkingtime );
     aba:	4b1c      	ldr	r3, [pc, #112]	; (b2c <main+0x114>)
     abc:	681a      	ldr	r2, [r3, #0]
     abe:	9b01      	ldr	r3, [sp, #4]
     ac0:	491c      	ldr	r1, [pc, #112]	; (b34 <main+0x11c>)
     ac2:	2000      	movs	r0, #0
     ac4:	f000 feba 	bl	183c <SEGGER_RTT_printf>
            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     ac8:	2001      	movs	r0, #1
     aca:	f000 f8c3 	bl	c54 <HwIoAb_Leds_TurnToggle>
            Delay(blinkingtime);
     ace:	9801      	ldr	r0, [sp, #4]
     ad0:	f7ff feee 	bl	8b0 <Delay>
        }
        if(LEDFlag == 3)
     ad4:	4b13      	ldr	r3, [pc, #76]	; (b24 <main+0x10c>)
     ad6:	781b      	ldrb	r3, [r3, #0]
     ad8:	2b03      	cmp	r3, #3
     ada:	d1c5      	bne.n	a68 <main+0x50>
        {
            LEDFlag = 0;
     adc:	4b11      	ldr	r3, [pc, #68]	; (b24 <main+0x10c>)
     ade:	2200      	movs	r2, #0
     ae0:	701a      	strb	r2, [r3, #0]
            /* Use the first and second byte received to determine the time for blinking */
            /* 
            Payload used for testing: 0x00 0x00 0x00 0x00 0x00 0xFF 0xE6 0xFA 
            Byte 0: 0xFA (250), Byte 1: 0xE6 (230), Byte 2: 0xFF (255), blinking time: 0x02DF (735) ms
            */
            blinkingtime = (uint32)(Can_au8Sdu8bytes[7] + Can_au8Sdu8bytes[6] + Can_au8Sdu8bytes[5]);
     ae2:	4b11      	ldr	r3, [pc, #68]	; (b28 <main+0x110>)
     ae4:	79db      	ldrb	r3, [r3, #7]
     ae6:	461a      	mov	r2, r3
     ae8:	4b0f      	ldr	r3, [pc, #60]	; (b28 <main+0x110>)
     aea:	799b      	ldrb	r3, [r3, #6]
     aec:	4413      	add	r3, r2
     aee:	4a0e      	ldr	r2, [pc, #56]	; (b28 <main+0x110>)
     af0:	7952      	ldrb	r2, [r2, #5]
     af2:	4413      	add	r3, r2
     af4:	9301      	str	r3, [sp, #4]
            //SEGGER_RTT_printf( 0, "[Debug] Byte 0: 0x%x, Byte 1: 0x%x, Byte 2: 0x%x, blinking time: 0x%x ms \n", Can_au8Sdu8bytes[7], Can_au8Sdu8bytes[6], Can_au8Sdu8bytes[5], blinkingtime );
            SEGGER_RTT_printf( 0, "CAN msg 0x%x received at 500kbps to blink GREEN LED for: %d ms \n", CANIDRx, blinkingtime );
     af6:	4b0d      	ldr	r3, [pc, #52]	; (b2c <main+0x114>)
     af8:	681a      	ldr	r2, [r3, #0]
     afa:	9b01      	ldr	r3, [sp, #4]
     afc:	490e      	ldr	r1, [pc, #56]	; (b38 <main+0x120>)
     afe:	2000      	movs	r0, #0
     b00:	f000 fe9c 	bl	183c <SEGGER_RTT_printf>
            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     b04:	2002      	movs	r0, #2
     b06:	f000 f8a5 	bl	c54 <HwIoAb_Leds_TurnToggle>
            Delay(blinkingtime);
     b0a:	9801      	ldr	r0, [sp, #4]
     b0c:	f7ff fed0 	bl	8b0 <Delay>
        if(LEDFlag == 1)
     b10:	e7aa      	b.n	a68 <main+0x50>
     b12:	bf00      	nop
     b14:	0000f384 	.word	0x0000f384
     b18:	0000f3a8 	.word	0x0000f3a8
     b1c:	0000f3c8 	.word	0x0000f3c8
     b20:	0000f3fc 	.word	0x0000f3fc
     b24:	1fff8b48 	.word	0x1fff8b48
     b28:	1fff8b40 	.word	0x1fff8b40
     b2c:	1fff8b4c 	.word	0x1fff8b4c
     b30:	0000f42c 	.word	0x0000f42c
     b34:	0000f46c 	.word	0x0000f46c
     b38:	0000f4ac 	.word	0x0000f4ac

00000b3c <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     b3c:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     b3e:	480d      	ldr	r0, [pc, #52]	; (b74 <__BSS_SRAM_SIZE+0x24>)
     b40:	f004 fec2 	bl	58c8 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     b44:	2000      	movs	r0, #0
     b46:	f004 ff13 	bl	5970 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     b4a:	2000      	movs	r0, #0
     b4c:	f004 ff34 	bl	59b8 <Mcu_SetMode>
    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     b50:	2000      	movs	r0, #0
     b52:	f001 f924 	bl	1d9e <OsIf_Init>
    
    /* Enable and setup interrupts in use by the Can Driver */
    Platform_Init( NULL_PTR );
     b56:	2000      	movs	r0, #0
     b58:	f001 f81e 	bl	1b98 <Platform_Init>

    /* Apply all the Pin Port microcontroller configuration */
    Port_Init( &Port_Config );
     b5c:	4806      	ldr	r0, [pc, #24]	; (b78 <__BSS_SRAM_SIZE+0x28>)
     b5e:	f005 fab5 	bl	60cc <Port_Init>

    /* Init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode */
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     b62:	4806      	ldr	r0, [pc, #24]	; (b7c <__BSS_SRAM_SIZE+0x2c>)
     b64:	f006 faa4 	bl	70b0 <Can_43_FLEXCAN_Init>

    /* Initializing IO Hardware Abstractions with the module ID 0 */
    IoHwAb_Init0( NULL_PTR );
     b68:	2000      	movs	r0, #0
     b6a:	f000 f889 	bl	c80 <IoHwAb_Init0>
}
     b6e:	bf00      	nop
     b70:	bd08      	pop	{r3, pc}
     b72:	bf00      	nop
     b74:	00010310 	.word	0x00010310
     b78:	000107e0 	.word	0x000107e0
     b7c:	0000fe84 	.word	0x0000fe84

00000b80 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     b80:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b82:	f3ef 8310 	mrs	r3, PRIMASK
     b86:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b88:	4623      	mov	r3, r4
}
     b8a:	4618      	mov	r0, r3
     b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
     b90:	4770      	bx	lr

00000b92 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     b92:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b94:	f3ef 8310 	mrs	r3, PRIMASK
     b98:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b9a:	4623      	mov	r3, r4
}
     b9c:	4618      	mov	r0, r3
     b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
     ba2:	4770      	bx	lr

00000ba4 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     ba4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     ba6:	f3ef 8310 	mrs	r3, PRIMASK
     baa:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     bac:	4623      	mov	r3, r4
}
     bae:	4618      	mov	r0, r3
     bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
     bb4:	4770      	bx	lr

00000bb6 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     bb6:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     bb8:	f3ef 8310 	mrs	r3, PRIMASK
     bbc:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     bbe:	4623      	mov	r3, r4
}
     bc0:	4618      	mov	r0, r3
     bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
     bc6:	4770      	bx	lr

00000bc8 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     bc8:	b084      	sub	sp, #16
     bca:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     bcc:	4b16      	ldr	r3, [pc, #88]	; (c28 <HwIoAb_Buttons_Init+0x60>)
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	2203      	movs	r2, #3
     bd2:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     bd4:	4b14      	ldr	r3, [pc, #80]	; (c28 <HwIoAb_Buttons_Init+0x60>)
     bd6:	681b      	ldr	r3, [r3, #0]
     bd8:	9a01      	ldr	r2, [sp, #4]
     bda:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     bdc:	2300      	movs	r3, #0
     bde:	f88d 300f 	strb.w	r3, [sp, #15]
     be2:	e012      	b.n	c0a <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     be4:	4b10      	ldr	r3, [pc, #64]	; (c28 <HwIoAb_Buttons_Init+0x60>)
     be6:	681a      	ldr	r2, [r3, #0]
     be8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bec:	4413      	add	r3, r2
     bee:	2200      	movs	r2, #0
     bf0:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     bf2:	4b0d      	ldr	r3, [pc, #52]	; (c28 <HwIoAb_Buttons_Init+0x60>)
     bf4:	681a      	ldr	r2, [r3, #0]
     bf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bfa:	4413      	add	r3, r2
     bfc:	2200      	movs	r2, #0
     bfe:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     c00:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c04:	3301      	adds	r3, #1
     c06:	f88d 300f 	strb.w	r3, [sp, #15]
     c0a:	4b07      	ldr	r3, [pc, #28]	; (c28 <HwIoAb_Buttons_Init+0x60>)
     c0c:	681b      	ldr	r3, [r3, #0]
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	f89d 200f 	ldrb.w	r2, [sp, #15]
     c14:	429a      	cmp	r2, r3
     c16:	d3e5      	bcc.n	be4 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     c18:	4b03      	ldr	r3, [pc, #12]	; (c28 <HwIoAb_Buttons_Init+0x60>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	2201      	movs	r2, #1
     c1e:	739a      	strb	r2, [r3, #14]
}
     c20:	bf00      	nop
     c22:	b004      	add	sp, #16
     c24:	4770      	bx	lr
     c26:	bf00      	nop
     c28:	1fff8b38 	.word	0x1fff8b38

00000c2c <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
     c2c:	b082      	sub	sp, #8
     c2e:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
     c30:	4b07      	ldr	r3, [pc, #28]	; (c50 <HwIoAb_Leds_Init+0x24>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	220b      	movs	r2, #11
     c36:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
     c38:	4b05      	ldr	r3, [pc, #20]	; (c50 <HwIoAb_Leds_Init+0x24>)
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	9a01      	ldr	r2, [sp, #4]
     c3e:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
     c40:	4b03      	ldr	r3, [pc, #12]	; (c50 <HwIoAb_Leds_Init+0x24>)
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	2201      	movs	r2, #1
     c46:	721a      	strb	r2, [r3, #8]
}
     c48:	bf00      	nop
     c4a:	b002      	add	sp, #8
     c4c:	4770      	bx	lr
     c4e:	bf00      	nop
     c50:	1fff8b3c 	.word	0x1fff8b3c

00000c54 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
     c54:	b500      	push	{lr}
     c56:	b083      	sub	sp, #12
     c58:	4603      	mov	r3, r0
     c5a:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
     c5e:	4b07      	ldr	r3, [pc, #28]	; (c7c <HwIoAb_Leds_TurnToggle+0x28>)
     c60:	681b      	ldr	r3, [r3, #0]
     c62:	685a      	ldr	r2, [r3, #4]
     c64:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c68:	009b      	lsls	r3, r3, #2
     c6a:	4413      	add	r3, r2
     c6c:	881b      	ldrh	r3, [r3, #0]
     c6e:	4618      	mov	r0, r3
     c70:	f005 ff6b 	bl	6b4a <Dio_FlipChannel>
}
     c74:	bf00      	nop
     c76:	b003      	add	sp, #12
     c78:	f85d fb04 	ldr.w	pc, [sp], #4
     c7c:	1fff8b3c 	.word	0x1fff8b3c

00000c80 <IoHwAb_Init0>:
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) 
{
     c80:	b500      	push	{lr}
     c82:	b083      	sub	sp, #12
     c84:	9001      	str	r0, [sp, #4]
    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     c86:	4805      	ldr	r0, [pc, #20]	; (c9c <IoHwAb_Init0+0x1c>)
     c88:	f7ff ff9e 	bl	bc8 <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
     c8c:	4804      	ldr	r0, [pc, #16]	; (ca0 <IoHwAb_Init0+0x20>)
     c8e:	f7ff ffcd 	bl	c2c <HwIoAb_Leds_Init>
    /* Pots init */
    //HwIoAb_Pots_Init( NULL_PTR );
    /* Buzzer init */
    //HwIoAb_Buzzer_Init( NULL_PTR );
}
     c92:	bf00      	nop
     c94:	b003      	add	sp, #12
     c96:	f85d fb04 	ldr.w	pc, [sp], #4
     c9a:	bf00      	nop
     c9c:	0000fd20 	.word	0x0000fd20
     ca0:	0000fd38 	.word	0x0000fd38

00000ca4 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     ca4:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     ca6:	2300      	movs	r3, #0
     ca8:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     caa:	2300      	movs	r3, #0
     cac:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     cae:	2300      	movs	r3, #0
     cb0:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     cb2:	2300      	movs	r3, #0
     cb4:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     cb6:	4b44      	ldr	r3, [pc, #272]	; (dc8 <init_data_bss+0x124>)
     cb8:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     cba:	4b44      	ldr	r3, [pc, #272]	; (dcc <init_data_bss+0x128>)
     cbc:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     cbe:	9b05      	ldr	r3, [sp, #20]
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     cc4:	9b05      	ldr	r3, [sp, #20]
     cc6:	3304      	adds	r3, #4
     cc8:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     cca:	9b05      	ldr	r3, [sp, #20]
     ccc:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     cce:	2300      	movs	r3, #0
     cd0:	9309      	str	r3, [sp, #36]	; 0x24
     cd2:	e03d      	b.n	d50 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cd6:	4613      	mov	r3, r2
     cd8:	005b      	lsls	r3, r3, #1
     cda:	4413      	add	r3, r2
     cdc:	009b      	lsls	r3, r3, #2
     cde:	461a      	mov	r2, r3
     ce0:	9b03      	ldr	r3, [sp, #12]
     ce2:	4413      	add	r3, r2
     ce4:	685b      	ldr	r3, [r3, #4]
     ce6:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cea:	4613      	mov	r3, r2
     cec:	005b      	lsls	r3, r3, #1
     cee:	4413      	add	r3, r2
     cf0:	009b      	lsls	r3, r3, #2
     cf2:	461a      	mov	r2, r3
     cf4:	9b03      	ldr	r3, [sp, #12]
     cf6:	4413      	add	r3, r2
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cfe:	4613      	mov	r3, r2
     d00:	005b      	lsls	r3, r3, #1
     d02:	4413      	add	r3, r2
     d04:	009b      	lsls	r3, r3, #2
     d06:	461a      	mov	r2, r3
     d08:	9b03      	ldr	r3, [sp, #12]
     d0a:	4413      	add	r3, r2
     d0c:	689b      	ldr	r3, [r3, #8]
     d0e:	4619      	mov	r1, r3
     d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d12:	4613      	mov	r3, r2
     d14:	005b      	lsls	r3, r3, #1
     d16:	4413      	add	r3, r2
     d18:	009b      	lsls	r3, r3, #2
     d1a:	461a      	mov	r2, r3
     d1c:	9b03      	ldr	r3, [sp, #12]
     d1e:	4413      	add	r3, r2
     d20:	685b      	ldr	r3, [r3, #4]
     d22:	1acb      	subs	r3, r1, r3
     d24:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     d26:	2300      	movs	r3, #0
     d28:	9308      	str	r3, [sp, #32]
     d2a:	e00a      	b.n	d42 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     d2c:	9a00      	ldr	r2, [sp, #0]
     d2e:	9b08      	ldr	r3, [sp, #32]
     d30:	441a      	add	r2, r3
     d32:	9901      	ldr	r1, [sp, #4]
     d34:	9b08      	ldr	r3, [sp, #32]
     d36:	440b      	add	r3, r1
     d38:	7812      	ldrb	r2, [r2, #0]
     d3a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     d3c:	9b08      	ldr	r3, [sp, #32]
     d3e:	3301      	adds	r3, #1
     d40:	9308      	str	r3, [sp, #32]
     d42:	9a08      	ldr	r2, [sp, #32]
     d44:	9b06      	ldr	r3, [sp, #24]
     d46:	429a      	cmp	r2, r3
     d48:	d3f0      	bcc.n	d2c <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d4c:	3301      	adds	r3, #1
     d4e:	9309      	str	r3, [sp, #36]	; 0x24
     d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d52:	9b07      	ldr	r3, [sp, #28]
     d54:	429a      	cmp	r2, r3
     d56:	d3bd      	bcc.n	cd4 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     d58:	9b04      	ldr	r3, [sp, #16]
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     d5e:	9b04      	ldr	r3, [sp, #16]
     d60:	3304      	adds	r3, #4
     d62:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     d64:	9b04      	ldr	r3, [sp, #16]
     d66:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     d68:	2300      	movs	r3, #0
     d6a:	9309      	str	r3, [sp, #36]	; 0x24
     d6c:	e024      	b.n	db8 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d70:	00db      	lsls	r3, r3, #3
     d72:	9a02      	ldr	r2, [sp, #8]
     d74:	4413      	add	r3, r2
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d7c:	00db      	lsls	r3, r3, #3
     d7e:	9a02      	ldr	r2, [sp, #8]
     d80:	4413      	add	r3, r2
     d82:	685b      	ldr	r3, [r3, #4]
     d84:	4619      	mov	r1, r3
     d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d88:	00db      	lsls	r3, r3, #3
     d8a:	9a02      	ldr	r2, [sp, #8]
     d8c:	4413      	add	r3, r2
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	1acb      	subs	r3, r1, r3
     d92:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     d94:	2300      	movs	r3, #0
     d96:	9308      	str	r3, [sp, #32]
     d98:	e007      	b.n	daa <init_data_bss+0x106>
        {
            ram[j] = 0U;
     d9a:	9a01      	ldr	r2, [sp, #4]
     d9c:	9b08      	ldr	r3, [sp, #32]
     d9e:	4413      	add	r3, r2
     da0:	2200      	movs	r2, #0
     da2:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     da4:	9b08      	ldr	r3, [sp, #32]
     da6:	3301      	adds	r3, #1
     da8:	9308      	str	r3, [sp, #32]
     daa:	9a08      	ldr	r2, [sp, #32]
     dac:	9b06      	ldr	r3, [sp, #24]
     dae:	429a      	cmp	r2, r3
     db0:	d3f3      	bcc.n	d9a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     db4:	3301      	adds	r3, #1
     db6:	9309      	str	r3, [sp, #36]	; 0x24
     db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     dba:	9b07      	ldr	r3, [sp, #28]
     dbc:	429a      	cmp	r2, r3
     dbe:	d3d6      	bcc.n	d6e <init_data_bss+0xca>
        }
    }
}
     dc0:	bf00      	nop
     dc2:	bf00      	nop
     dc4:	b00a      	add	sp, #40	; 0x28
     dc6:	4770      	bx	lr
     dc8:	00010850 	.word	0x00010850
     dcc:	0001086c 	.word	0x0001086c

00000dd0 <sys_m4_cache_init>:
{
     dd0:	b084      	sub	sp, #16
     dd2:	4603      	mov	r3, r0
     dd4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     dd8:	2300      	movs	r3, #0
     dda:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     dde:	f89d 3007 	ldrb.w	r3, [sp, #7]
     de2:	2b00      	cmp	r3, #0
     de4:	d118      	bne.n	e18 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     de6:	4b10      	ldr	r3, [pc, #64]	; (e28 <sys_m4_cache_init+0x58>)
     de8:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     dec:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     dee:	4b0e      	ldr	r3, [pc, #56]	; (e28 <sys_m4_cache_init+0x58>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	4a0d      	ldr	r2, [pc, #52]	; (e28 <sys_m4_cache_init+0x58>)
     df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     df8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     dfa:	bf00      	nop
     dfc:	4b0a      	ldr	r3, [pc, #40]	; (e28 <sys_m4_cache_init+0x58>)
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     e08:	d0f8      	beq.n	dfc <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     e0a:	4b07      	ldr	r3, [pc, #28]	; (e28 <sys_m4_cache_init+0x58>)
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	4a06      	ldr	r2, [pc, #24]	; (e28 <sys_m4_cache_init+0x58>)
     e10:	f043 0301 	orr.w	r3, r3, #1
     e14:	6013      	str	r3, [r2, #0]
     e16:	e002      	b.n	e1e <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     e18:	2301      	movs	r3, #1
     e1a:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     e1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     e22:	4618      	mov	r0, r3
     e24:	b004      	add	sp, #16
     e26:	4770      	bx	lr
     e28:	e0082000 	.word	0xe0082000

00000e2c <startup_go_to_user_mode>:
}
     e2c:	bf00      	nop
     e2e:	4770      	bx	lr

00000e30 <Sys_GetCoreID>:
    return 0U;
     e30:	2300      	movs	r3, #0
}
     e32:	4618      	mov	r0, r3
     e34:	4770      	bx	lr

00000e36 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     e36:	e7fe      	b.n	e36 <HardFault_Handler>

00000e38 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     e38:	e7fe      	b.n	e38 <MemManage_Handler>

00000e3a <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     e3a:	e7fe      	b.n	e3a <BusFault_Handler>

00000e3c <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     e3c:	e7fe      	b.n	e3c <UsageFault_Handler>

00000e3e <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     e3e:	e7fe      	b.n	e3e <SVC_Handler>

00000e40 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     e40:	e7fe      	b.n	e40 <DebugMon_Handler>

00000e42 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     e42:	e7fe      	b.n	e42 <PendSV_Handler>

00000e44 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     e44:	e7fe      	b.n	e44 <SysTick_Handler>

00000e46 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     e46:	e7fe      	b.n	e46 <undefined_handler>

00000e48 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     e48:	b500      	push	{lr}
     e4a:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     e4c:	4b26      	ldr	r3, [pc, #152]	; (ee8 <_DoInit+0xa0>)
     e4e:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     e50:	22a8      	movs	r2, #168	; 0xa8
     e52:	2100      	movs	r1, #0
     e54:	9800      	ldr	r0, [sp, #0]
     e56:	f000 fd13 	bl	1880 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     e5a:	9b00      	ldr	r3, [sp, #0]
     e5c:	2203      	movs	r2, #3
     e5e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     e60:	9b00      	ldr	r3, [sp, #0]
     e62:	2203      	movs	r2, #3
     e64:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     e66:	9b00      	ldr	r3, [sp, #0]
     e68:	4a20      	ldr	r2, [pc, #128]	; (eec <_DoInit+0xa4>)
     e6a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     e6c:	9b00      	ldr	r3, [sp, #0]
     e6e:	4a20      	ldr	r2, [pc, #128]	; (ef0 <_DoInit+0xa8>)
     e70:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     e72:	9b00      	ldr	r3, [sp, #0]
     e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
     e78:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     e7a:	9b00      	ldr	r3, [sp, #0]
     e7c:	2200      	movs	r2, #0
     e7e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     e80:	9b00      	ldr	r3, [sp, #0]
     e82:	2200      	movs	r2, #0
     e84:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     e86:	9b00      	ldr	r3, [sp, #0]
     e88:	2200      	movs	r2, #0
     e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     e8c:	9b00      	ldr	r3, [sp, #0]
     e8e:	4a17      	ldr	r2, [pc, #92]	; (eec <_DoInit+0xa4>)
     e90:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     e92:	9b00      	ldr	r3, [sp, #0]
     e94:	4a17      	ldr	r2, [pc, #92]	; (ef4 <_DoInit+0xac>)
     e96:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     e98:	9b00      	ldr	r3, [sp, #0]
     e9a:	2210      	movs	r2, #16
     e9c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     e9e:	9b00      	ldr	r3, [sp, #0]
     ea0:	2200      	movs	r2, #0
     ea2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     ea4:	9b00      	ldr	r3, [sp, #0]
     ea6:	2200      	movs	r2, #0
     ea8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     eaa:	9b00      	ldr	r3, [sp, #0]
     eac:	2200      	movs	r2, #0
     eae:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     eb0:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     eb4:	2300      	movs	r3, #0
     eb6:	9301      	str	r3, [sp, #4]
     eb8:	e00c      	b.n	ed4 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     eba:	9b01      	ldr	r3, [sp, #4]
     ebc:	f1c3 030f 	rsb	r3, r3, #15
     ec0:	4a0d      	ldr	r2, [pc, #52]	; (ef8 <_DoInit+0xb0>)
     ec2:	5cd1      	ldrb	r1, [r2, r3]
     ec4:	9a00      	ldr	r2, [sp, #0]
     ec6:	9b01      	ldr	r3, [sp, #4]
     ec8:	4413      	add	r3, r2
     eca:	460a      	mov	r2, r1
     ecc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     ece:	9b01      	ldr	r3, [sp, #4]
     ed0:	3301      	adds	r3, #1
     ed2:	9301      	str	r3, [sp, #4]
     ed4:	9b01      	ldr	r3, [sp, #4]
     ed6:	2b0f      	cmp	r3, #15
     ed8:	d9ef      	bls.n	eba <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     eda:	f3bf 8f5f 	dmb	sy
}
     ede:	bf00      	nop
     ee0:	b003      	add	sp, #12
     ee2:	f85d fb04 	ldr.w	pc, [sp], #4
     ee6:	bf00      	nop
     ee8:	1fff91d4 	.word	0x1fff91d4
     eec:	0000f4f0 	.word	0x0000f4f0
     ef0:	1fff927c 	.word	0x1fff927c
     ef4:	1fff967c 	.word	0x1fff967c
     ef8:	0001082c 	.word	0x0001082c

00000efc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     efc:	b500      	push	{lr}
     efe:	b08b      	sub	sp, #44	; 0x2c
     f00:	9003      	str	r0, [sp, #12]
     f02:	9102      	str	r1, [sp, #8]
     f04:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     f06:	2300      	movs	r3, #0
     f08:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     f0a:	9b03      	ldr	r3, [sp, #12]
     f0c:	68db      	ldr	r3, [r3, #12]
     f0e:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     f10:	9b03      	ldr	r3, [sp, #12]
     f12:	691b      	ldr	r3, [r3, #16]
     f14:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     f16:	9a06      	ldr	r2, [sp, #24]
     f18:	9b07      	ldr	r3, [sp, #28]
     f1a:	429a      	cmp	r2, r3
     f1c:	d905      	bls.n	f2a <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     f1e:	9a06      	ldr	r2, [sp, #24]
     f20:	9b07      	ldr	r3, [sp, #28]
     f22:	1ad3      	subs	r3, r2, r3
     f24:	3b01      	subs	r3, #1
     f26:	9309      	str	r3, [sp, #36]	; 0x24
     f28:	e007      	b.n	f3a <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     f2a:	9b03      	ldr	r3, [sp, #12]
     f2c:	689a      	ldr	r2, [r3, #8]
     f2e:	9906      	ldr	r1, [sp, #24]
     f30:	9b07      	ldr	r3, [sp, #28]
     f32:	1acb      	subs	r3, r1, r3
     f34:	4413      	add	r3, r2
     f36:	3b01      	subs	r3, #1
     f38:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     f3a:	9b03      	ldr	r3, [sp, #12]
     f3c:	689a      	ldr	r2, [r3, #8]
     f3e:	9b07      	ldr	r3, [sp, #28]
     f40:	1ad3      	subs	r3, r2, r3
     f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f44:	4293      	cmp	r3, r2
     f46:	bf28      	it	cs
     f48:	4613      	movcs	r3, r2
     f4a:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f4e:	9b01      	ldr	r3, [sp, #4]
     f50:	4293      	cmp	r3, r2
     f52:	bf28      	it	cs
     f54:	4613      	movcs	r3, r2
     f56:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     f58:	9b03      	ldr	r3, [sp, #12]
     f5a:	685a      	ldr	r2, [r3, #4]
     f5c:	9b07      	ldr	r3, [sp, #28]
     f5e:	4413      	add	r3, r2
     f60:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f64:	9902      	ldr	r1, [sp, #8]
     f66:	9805      	ldr	r0, [sp, #20]
     f68:	f000 fc7c 	bl	1864 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     f6c:	9a08      	ldr	r2, [sp, #32]
     f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f70:	4413      	add	r3, r2
     f72:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     f74:	9a02      	ldr	r2, [sp, #8]
     f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f78:	4413      	add	r3, r2
     f7a:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     f7c:	9a01      	ldr	r2, [sp, #4]
     f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f80:	1ad3      	subs	r3, r2, r3
     f82:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     f84:	9a07      	ldr	r2, [sp, #28]
     f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f88:	4413      	add	r3, r2
     f8a:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     f8c:	9b03      	ldr	r3, [sp, #12]
     f8e:	689b      	ldr	r3, [r3, #8]
     f90:	9a07      	ldr	r2, [sp, #28]
     f92:	429a      	cmp	r2, r3
     f94:	d101      	bne.n	f9a <_WriteBlocking+0x9e>
      WrOff = 0u;
     f96:	2300      	movs	r3, #0
     f98:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     f9a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     f9e:	9b03      	ldr	r3, [sp, #12]
     fa0:	9a07      	ldr	r2, [sp, #28]
     fa2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d1b2      	bne.n	f10 <_WriteBlocking+0x14>
  return NumBytesWritten;
     faa:	9b08      	ldr	r3, [sp, #32]
}
     fac:	4618      	mov	r0, r3
     fae:	b00b      	add	sp, #44	; 0x2c
     fb0:	f85d fb04 	ldr.w	pc, [sp], #4

00000fb4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     fb4:	b500      	push	{lr}
     fb6:	b089      	sub	sp, #36	; 0x24
     fb8:	9003      	str	r0, [sp, #12]
     fba:	9102      	str	r1, [sp, #8]
     fbc:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     fbe:	9b03      	ldr	r3, [sp, #12]
     fc0:	68db      	ldr	r3, [r3, #12]
     fc2:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     fc4:	9b03      	ldr	r3, [sp, #12]
     fc6:	689a      	ldr	r2, [r3, #8]
     fc8:	9b07      	ldr	r3, [sp, #28]
     fca:	1ad3      	subs	r3, r2, r3
     fcc:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     fce:	9a06      	ldr	r2, [sp, #24]
     fd0:	9b01      	ldr	r3, [sp, #4]
     fd2:	429a      	cmp	r2, r3
     fd4:	d911      	bls.n	ffa <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     fd6:	9b03      	ldr	r3, [sp, #12]
     fd8:	685a      	ldr	r2, [r3, #4]
     fda:	9b07      	ldr	r3, [sp, #28]
     fdc:	4413      	add	r3, r2
     fde:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     fe0:	9a01      	ldr	r2, [sp, #4]
     fe2:	9902      	ldr	r1, [sp, #8]
     fe4:	9804      	ldr	r0, [sp, #16]
     fe6:	f000 fc3d 	bl	1864 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     fea:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     fee:	9a07      	ldr	r2, [sp, #28]
     ff0:	9b01      	ldr	r3, [sp, #4]
     ff2:	441a      	add	r2, r3
     ff4:	9b03      	ldr	r3, [sp, #12]
     ff6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     ff8:	e01f      	b.n	103a <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     ffa:	9b06      	ldr	r3, [sp, #24]
     ffc:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     ffe:	9b03      	ldr	r3, [sp, #12]
    1000:	685a      	ldr	r2, [r3, #4]
    1002:	9b07      	ldr	r3, [sp, #28]
    1004:	4413      	add	r3, r2
    1006:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1008:	9a05      	ldr	r2, [sp, #20]
    100a:	9902      	ldr	r1, [sp, #8]
    100c:	9804      	ldr	r0, [sp, #16]
    100e:	f000 fc29 	bl	1864 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1012:	9a01      	ldr	r2, [sp, #4]
    1014:	9b06      	ldr	r3, [sp, #24]
    1016:	1ad3      	subs	r3, r2, r3
    1018:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    101a:	9b03      	ldr	r3, [sp, #12]
    101c:	685b      	ldr	r3, [r3, #4]
    101e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1020:	9a02      	ldr	r2, [sp, #8]
    1022:	9b06      	ldr	r3, [sp, #24]
    1024:	4413      	add	r3, r2
    1026:	9a05      	ldr	r2, [sp, #20]
    1028:	4619      	mov	r1, r3
    102a:	9804      	ldr	r0, [sp, #16]
    102c:	f000 fc1a 	bl	1864 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1030:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1034:	9b03      	ldr	r3, [sp, #12]
    1036:	9a05      	ldr	r2, [sp, #20]
    1038:	60da      	str	r2, [r3, #12]
}
    103a:	bf00      	nop
    103c:	b009      	add	sp, #36	; 0x24
    103e:	f85d fb04 	ldr.w	pc, [sp], #4

00001042 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1042:	b086      	sub	sp, #24
    1044:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1046:	9b01      	ldr	r3, [sp, #4]
    1048:	691b      	ldr	r3, [r3, #16]
    104a:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    104c:	9b01      	ldr	r3, [sp, #4]
    104e:	68db      	ldr	r3, [r3, #12]
    1050:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1052:	9a04      	ldr	r2, [sp, #16]
    1054:	9b03      	ldr	r3, [sp, #12]
    1056:	429a      	cmp	r2, r3
    1058:	d808      	bhi.n	106c <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    105a:	9b01      	ldr	r3, [sp, #4]
    105c:	689a      	ldr	r2, [r3, #8]
    105e:	9b03      	ldr	r3, [sp, #12]
    1060:	1ad2      	subs	r2, r2, r3
    1062:	9b04      	ldr	r3, [sp, #16]
    1064:	4413      	add	r3, r2
    1066:	3b01      	subs	r3, #1
    1068:	9305      	str	r3, [sp, #20]
    106a:	e004      	b.n	1076 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    106c:	9a04      	ldr	r2, [sp, #16]
    106e:	9b03      	ldr	r3, [sp, #12]
    1070:	1ad3      	subs	r3, r2, r3
    1072:	3b01      	subs	r3, #1
    1074:	9305      	str	r3, [sp, #20]
  }
  return r;
    1076:	9b05      	ldr	r3, [sp, #20]
}
    1078:	4618      	mov	r0, r3
    107a:	b006      	add	sp, #24
    107c:	4770      	bx	lr
	...

00001080 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1080:	b500      	push	{lr}
    1082:	b089      	sub	sp, #36	; 0x24
    1084:	9003      	str	r0, [sp, #12]
    1086:	9102      	str	r1, [sp, #8]
    1088:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    108a:	9b02      	ldr	r3, [sp, #8]
    108c:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    108e:	9b03      	ldr	r3, [sp, #12]
    1090:	1c5a      	adds	r2, r3, #1
    1092:	4613      	mov	r3, r2
    1094:	005b      	lsls	r3, r3, #1
    1096:	4413      	add	r3, r2
    1098:	00db      	lsls	r3, r3, #3
    109a:	4a20      	ldr	r2, [pc, #128]	; (111c <SEGGER_RTT_WriteNoLock+0x9c>)
    109c:	4413      	add	r3, r2
    109e:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    10a0:	9b05      	ldr	r3, [sp, #20]
    10a2:	695b      	ldr	r3, [r3, #20]
    10a4:	2b02      	cmp	r3, #2
    10a6:	d029      	beq.n	10fc <SEGGER_RTT_WriteNoLock+0x7c>
    10a8:	2b02      	cmp	r3, #2
    10aa:	d82e      	bhi.n	110a <SEGGER_RTT_WriteNoLock+0x8a>
    10ac:	2b00      	cmp	r3, #0
    10ae:	d002      	beq.n	10b6 <SEGGER_RTT_WriteNoLock+0x36>
    10b0:	2b01      	cmp	r3, #1
    10b2:	d013      	beq.n	10dc <SEGGER_RTT_WriteNoLock+0x5c>
    10b4:	e029      	b.n	110a <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    10b6:	9805      	ldr	r0, [sp, #20]
    10b8:	f7ff ffc3 	bl	1042 <_GetAvailWriteSpace>
    10bc:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    10be:	9a04      	ldr	r2, [sp, #16]
    10c0:	9b01      	ldr	r3, [sp, #4]
    10c2:	429a      	cmp	r2, r3
    10c4:	d202      	bcs.n	10cc <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    10c6:	2300      	movs	r3, #0
    10c8:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    10ca:	e021      	b.n	1110 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    10cc:	9b01      	ldr	r3, [sp, #4]
    10ce:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    10d0:	9a01      	ldr	r2, [sp, #4]
    10d2:	9906      	ldr	r1, [sp, #24]
    10d4:	9805      	ldr	r0, [sp, #20]
    10d6:	f7ff ff6d 	bl	fb4 <_WriteNoCheck>
    break;
    10da:	e019      	b.n	1110 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    10dc:	9805      	ldr	r0, [sp, #20]
    10de:	f7ff ffb0 	bl	1042 <_GetAvailWriteSpace>
    10e2:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    10e4:	9a01      	ldr	r2, [sp, #4]
    10e6:	9b04      	ldr	r3, [sp, #16]
    10e8:	4293      	cmp	r3, r2
    10ea:	bf28      	it	cs
    10ec:	4613      	movcs	r3, r2
    10ee:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    10f0:	9a07      	ldr	r2, [sp, #28]
    10f2:	9906      	ldr	r1, [sp, #24]
    10f4:	9805      	ldr	r0, [sp, #20]
    10f6:	f7ff ff5d 	bl	fb4 <_WriteNoCheck>
    break;
    10fa:	e009      	b.n	1110 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    10fc:	9a01      	ldr	r2, [sp, #4]
    10fe:	9906      	ldr	r1, [sp, #24]
    1100:	9805      	ldr	r0, [sp, #20]
    1102:	f7ff fefb 	bl	efc <_WriteBlocking>
    1106:	9007      	str	r0, [sp, #28]
    break;
    1108:	e002      	b.n	1110 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    110a:	2300      	movs	r3, #0
    110c:	9307      	str	r3, [sp, #28]
    break;
    110e:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1110:	9b07      	ldr	r3, [sp, #28]
}
    1112:	4618      	mov	r0, r3
    1114:	b009      	add	sp, #36	; 0x24
    1116:	f85d fb04 	ldr.w	pc, [sp], #4
    111a:	bf00      	nop
    111c:	1fff91d4 	.word	0x1fff91d4

00001120 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1120:	b500      	push	{lr}
    1122:	b089      	sub	sp, #36	; 0x24
    1124:	9003      	str	r0, [sp, #12]
    1126:	9102      	str	r1, [sp, #8]
    1128:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    112a:	4b0f      	ldr	r3, [pc, #60]	; (1168 <SEGGER_RTT_Write+0x48>)
    112c:	9307      	str	r3, [sp, #28]
    112e:	9b07      	ldr	r3, [sp, #28]
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	b2db      	uxtb	r3, r3
    1134:	2b53      	cmp	r3, #83	; 0x53
    1136:	d001      	beq.n	113c <SEGGER_RTT_Write+0x1c>
    1138:	f7ff fe86 	bl	e48 <_DoInit>
  SEGGER_RTT_LOCK();
    113c:	f3ef 8311 	mrs	r3, BASEPRI
    1140:	f04f 0120 	mov.w	r1, #32
    1144:	f381 8811 	msr	BASEPRI, r1
    1148:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    114a:	9a01      	ldr	r2, [sp, #4]
    114c:	9902      	ldr	r1, [sp, #8]
    114e:	9803      	ldr	r0, [sp, #12]
    1150:	f7ff ff96 	bl	1080 <SEGGER_RTT_WriteNoLock>
    1154:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1156:	9b06      	ldr	r3, [sp, #24]
    1158:	f383 8811 	msr	BASEPRI, r3
  return Status;
    115c:	9b05      	ldr	r3, [sp, #20]
}
    115e:	4618      	mov	r0, r3
    1160:	b009      	add	sp, #36	; 0x24
    1162:	f85d fb04 	ldr.w	pc, [sp], #4
    1166:	bf00      	nop
    1168:	1fff91d4 	.word	0x1fff91d4

0000116c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    116c:	b508      	push	{r3, lr}
  _DoInit();
    116e:	f7ff fe6b 	bl	e48 <_DoInit>
}
    1172:	bf00      	nop
    1174:	bd08      	pop	{r3, pc}

00001176 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1176:	b500      	push	{lr}
    1178:	b085      	sub	sp, #20
    117a:	9001      	str	r0, [sp, #4]
    117c:	460b      	mov	r3, r1
    117e:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1182:	9b01      	ldr	r3, [sp, #4]
    1184:	689b      	ldr	r3, [r3, #8]
    1186:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1188:	9b03      	ldr	r3, [sp, #12]
    118a:	1c5a      	adds	r2, r3, #1
    118c:	9b01      	ldr	r3, [sp, #4]
    118e:	685b      	ldr	r3, [r3, #4]
    1190:	429a      	cmp	r2, r3
    1192:	d80f      	bhi.n	11b4 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1194:	9b01      	ldr	r3, [sp, #4]
    1196:	681a      	ldr	r2, [r3, #0]
    1198:	9b03      	ldr	r3, [sp, #12]
    119a:	4413      	add	r3, r2
    119c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    11a0:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    11a2:	9b03      	ldr	r3, [sp, #12]
    11a4:	1c5a      	adds	r2, r3, #1
    11a6:	9b01      	ldr	r3, [sp, #4]
    11a8:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    11aa:	9b01      	ldr	r3, [sp, #4]
    11ac:	68db      	ldr	r3, [r3, #12]
    11ae:	1c5a      	adds	r2, r3, #1
    11b0:	9b01      	ldr	r3, [sp, #4]
    11b2:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    11b4:	9b01      	ldr	r3, [sp, #4]
    11b6:	689a      	ldr	r2, [r3, #8]
    11b8:	9b01      	ldr	r3, [sp, #4]
    11ba:	685b      	ldr	r3, [r3, #4]
    11bc:	429a      	cmp	r2, r3
    11be:	d115      	bne.n	11ec <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    11c0:	9b01      	ldr	r3, [sp, #4]
    11c2:	6918      	ldr	r0, [r3, #16]
    11c4:	9b01      	ldr	r3, [sp, #4]
    11c6:	6819      	ldr	r1, [r3, #0]
    11c8:	9b01      	ldr	r3, [sp, #4]
    11ca:	689b      	ldr	r3, [r3, #8]
    11cc:	461a      	mov	r2, r3
    11ce:	f7ff ffa7 	bl	1120 <SEGGER_RTT_Write>
    11d2:	4602      	mov	r2, r0
    11d4:	9b01      	ldr	r3, [sp, #4]
    11d6:	689b      	ldr	r3, [r3, #8]
    11d8:	429a      	cmp	r2, r3
    11da:	d004      	beq.n	11e6 <_StoreChar+0x70>
      p->ReturnValue = -1;
    11dc:	9b01      	ldr	r3, [sp, #4]
    11de:	f04f 32ff 	mov.w	r2, #4294967295
    11e2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    11e4:	e002      	b.n	11ec <_StoreChar+0x76>
      p->Cnt = 0u;
    11e6:	9b01      	ldr	r3, [sp, #4]
    11e8:	2200      	movs	r2, #0
    11ea:	609a      	str	r2, [r3, #8]
}
    11ec:	bf00      	nop
    11ee:	b005      	add	sp, #20
    11f0:	f85d fb04 	ldr.w	pc, [sp], #4

000011f4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    11f4:	b500      	push	{lr}
    11f6:	b08b      	sub	sp, #44	; 0x2c
    11f8:	9003      	str	r0, [sp, #12]
    11fa:	9102      	str	r1, [sp, #8]
    11fc:	9201      	str	r2, [sp, #4]
    11fe:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1200:	9b02      	ldr	r3, [sp, #8]
    1202:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1204:	2301      	movs	r3, #1
    1206:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1208:	2301      	movs	r3, #1
    120a:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    120c:	e007      	b.n	121e <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    120e:	9a08      	ldr	r2, [sp, #32]
    1210:	9b01      	ldr	r3, [sp, #4]
    1212:	fbb2 f3f3 	udiv	r3, r2, r3
    1216:	9308      	str	r3, [sp, #32]
    Width++;
    1218:	9b07      	ldr	r3, [sp, #28]
    121a:	3301      	adds	r3, #1
    121c:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    121e:	9a08      	ldr	r2, [sp, #32]
    1220:	9b01      	ldr	r3, [sp, #4]
    1222:	429a      	cmp	r2, r3
    1224:	d2f3      	bcs.n	120e <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1226:	9a00      	ldr	r2, [sp, #0]
    1228:	9b07      	ldr	r3, [sp, #28]
    122a:	429a      	cmp	r2, r3
    122c:	d901      	bls.n	1232 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    122e:	9b00      	ldr	r3, [sp, #0]
    1230:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1234:	f003 0301 	and.w	r3, r3, #1
    1238:	2b00      	cmp	r3, #0
    123a:	d128      	bne.n	128e <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    123c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    123e:	2b00      	cmp	r3, #0
    1240:	d025      	beq.n	128e <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1244:	f003 0302 	and.w	r3, r3, #2
    1248:	2b00      	cmp	r3, #0
    124a:	d006      	beq.n	125a <_PrintUnsigned+0x66>
    124c:	9b00      	ldr	r3, [sp, #0]
    124e:	2b00      	cmp	r3, #0
    1250:	d103      	bne.n	125a <_PrintUnsigned+0x66>
        c = '0';
    1252:	2330      	movs	r3, #48	; 0x30
    1254:	f88d 301b 	strb.w	r3, [sp, #27]
    1258:	e002      	b.n	1260 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    125a:	2320      	movs	r3, #32
    125c:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1260:	e00c      	b.n	127c <_PrintUnsigned+0x88>
        FieldWidth--;
    1262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1264:	3b01      	subs	r3, #1
    1266:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1268:	f89d 301b 	ldrb.w	r3, [sp, #27]
    126c:	4619      	mov	r1, r3
    126e:	9803      	ldr	r0, [sp, #12]
    1270:	f7ff ff81 	bl	1176 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1274:	9b03      	ldr	r3, [sp, #12]
    1276:	68db      	ldr	r3, [r3, #12]
    1278:	2b00      	cmp	r3, #0
    127a:	db07      	blt.n	128c <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    127c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    127e:	2b00      	cmp	r3, #0
    1280:	d005      	beq.n	128e <_PrintUnsigned+0x9a>
    1282:	9a07      	ldr	r2, [sp, #28]
    1284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1286:	429a      	cmp	r2, r3
    1288:	d3eb      	bcc.n	1262 <_PrintUnsigned+0x6e>
    128a:	e000      	b.n	128e <_PrintUnsigned+0x9a>
          break;
    128c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    128e:	9b03      	ldr	r3, [sp, #12]
    1290:	68db      	ldr	r3, [r3, #12]
    1292:	2b00      	cmp	r3, #0
    1294:	db55      	blt.n	1342 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1296:	9b00      	ldr	r3, [sp, #0]
    1298:	2b01      	cmp	r3, #1
    129a:	d903      	bls.n	12a4 <_PrintUnsigned+0xb0>
        NumDigits--;
    129c:	9b00      	ldr	r3, [sp, #0]
    129e:	3b01      	subs	r3, #1
    12a0:	9300      	str	r3, [sp, #0]
    12a2:	e009      	b.n	12b8 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    12a4:	9a02      	ldr	r2, [sp, #8]
    12a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12a8:	fbb2 f3f3 	udiv	r3, r2, r3
    12ac:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    12ae:	9a05      	ldr	r2, [sp, #20]
    12b0:	9b01      	ldr	r3, [sp, #4]
    12b2:	429a      	cmp	r2, r3
    12b4:	d200      	bcs.n	12b8 <_PrintUnsigned+0xc4>
          break;
    12b6:	e005      	b.n	12c4 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    12b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12ba:	9a01      	ldr	r2, [sp, #4]
    12bc:	fb02 f303 	mul.w	r3, r2, r3
    12c0:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    12c2:	e7e8      	b.n	1296 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    12c4:	9a02      	ldr	r2, [sp, #8]
    12c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12c8:	fbb2 f3f3 	udiv	r3, r2, r3
    12cc:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    12ce:	9b05      	ldr	r3, [sp, #20]
    12d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12d2:	fb02 f303 	mul.w	r3, r2, r3
    12d6:	9a02      	ldr	r2, [sp, #8]
    12d8:	1ad3      	subs	r3, r2, r3
    12da:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    12dc:	4a1b      	ldr	r2, [pc, #108]	; (134c <_PrintUnsigned+0x158>)
    12de:	9b05      	ldr	r3, [sp, #20]
    12e0:	4413      	add	r3, r2
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	4619      	mov	r1, r3
    12e6:	9803      	ldr	r0, [sp, #12]
    12e8:	f7ff ff45 	bl	1176 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    12ec:	9b03      	ldr	r3, [sp, #12]
    12ee:	68db      	ldr	r3, [r3, #12]
    12f0:	2b00      	cmp	r3, #0
    12f2:	db08      	blt.n	1306 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    12f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12f6:	9b01      	ldr	r3, [sp, #4]
    12f8:	fbb2 f3f3 	udiv	r3, r2, r3
    12fc:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    12fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1300:	2b00      	cmp	r3, #0
    1302:	d1df      	bne.n	12c4 <_PrintUnsigned+0xd0>
    1304:	e000      	b.n	1308 <_PrintUnsigned+0x114>
        break;
    1306:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    130a:	f003 0301 	and.w	r3, r3, #1
    130e:	2b00      	cmp	r3, #0
    1310:	d017      	beq.n	1342 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1314:	2b00      	cmp	r3, #0
    1316:	d014      	beq.n	1342 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1318:	e00a      	b.n	1330 <_PrintUnsigned+0x13c>
          FieldWidth--;
    131a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    131c:	3b01      	subs	r3, #1
    131e:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1320:	2120      	movs	r1, #32
    1322:	9803      	ldr	r0, [sp, #12]
    1324:	f7ff ff27 	bl	1176 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1328:	9b03      	ldr	r3, [sp, #12]
    132a:	68db      	ldr	r3, [r3, #12]
    132c:	2b00      	cmp	r3, #0
    132e:	db07      	blt.n	1340 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1332:	2b00      	cmp	r3, #0
    1334:	d005      	beq.n	1342 <_PrintUnsigned+0x14e>
    1336:	9a07      	ldr	r2, [sp, #28]
    1338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    133a:	429a      	cmp	r2, r3
    133c:	d3ed      	bcc.n	131a <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    133e:	e000      	b.n	1342 <_PrintUnsigned+0x14e>
            break;
    1340:	bf00      	nop
}
    1342:	bf00      	nop
    1344:	b00b      	add	sp, #44	; 0x2c
    1346:	f85d fb04 	ldr.w	pc, [sp], #4
    134a:	bf00      	nop
    134c:	00010840 	.word	0x00010840

00001350 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1350:	b500      	push	{lr}
    1352:	b089      	sub	sp, #36	; 0x24
    1354:	9005      	str	r0, [sp, #20]
    1356:	9104      	str	r1, [sp, #16]
    1358:	9203      	str	r2, [sp, #12]
    135a:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    135c:	9b04      	ldr	r3, [sp, #16]
    135e:	2b00      	cmp	r3, #0
    1360:	bfb8      	it	lt
    1362:	425b      	neglt	r3, r3
    1364:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1366:	2301      	movs	r3, #1
    1368:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    136a:	e007      	b.n	137c <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    136c:	9b03      	ldr	r3, [sp, #12]
    136e:	9a06      	ldr	r2, [sp, #24]
    1370:	fb92 f3f3 	sdiv	r3, r2, r3
    1374:	9306      	str	r3, [sp, #24]
    Width++;
    1376:	9b07      	ldr	r3, [sp, #28]
    1378:	3301      	adds	r3, #1
    137a:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    137c:	9b03      	ldr	r3, [sp, #12]
    137e:	9a06      	ldr	r2, [sp, #24]
    1380:	429a      	cmp	r2, r3
    1382:	daf3      	bge.n	136c <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1384:	9a02      	ldr	r2, [sp, #8]
    1386:	9b07      	ldr	r3, [sp, #28]
    1388:	429a      	cmp	r2, r3
    138a:	d901      	bls.n	1390 <_PrintInt+0x40>
    Width = NumDigits;
    138c:	9b02      	ldr	r3, [sp, #8]
    138e:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1392:	2b00      	cmp	r3, #0
    1394:	d00a      	beq.n	13ac <_PrintInt+0x5c>
    1396:	9b04      	ldr	r3, [sp, #16]
    1398:	2b00      	cmp	r3, #0
    139a:	db04      	blt.n	13a6 <_PrintInt+0x56>
    139c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    139e:	f003 0304 	and.w	r3, r3, #4
    13a2:	2b00      	cmp	r3, #0
    13a4:	d002      	beq.n	13ac <_PrintInt+0x5c>
    FieldWidth--;
    13a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13a8:	3b01      	subs	r3, #1
    13aa:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    13ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    13ae:	f003 0302 	and.w	r3, r3, #2
    13b2:	2b00      	cmp	r3, #0
    13b4:	d002      	beq.n	13bc <_PrintInt+0x6c>
    13b6:	9b02      	ldr	r3, [sp, #8]
    13b8:	2b00      	cmp	r3, #0
    13ba:	d01c      	beq.n	13f6 <_PrintInt+0xa6>
    13bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    13be:	f003 0301 	and.w	r3, r3, #1
    13c2:	2b00      	cmp	r3, #0
    13c4:	d117      	bne.n	13f6 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    13c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13c8:	2b00      	cmp	r3, #0
    13ca:	d014      	beq.n	13f6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    13cc:	e00a      	b.n	13e4 <_PrintInt+0x94>
        FieldWidth--;
    13ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13d0:	3b01      	subs	r3, #1
    13d2:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    13d4:	2120      	movs	r1, #32
    13d6:	9805      	ldr	r0, [sp, #20]
    13d8:	f7ff fecd 	bl	1176 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    13dc:	9b05      	ldr	r3, [sp, #20]
    13de:	68db      	ldr	r3, [r3, #12]
    13e0:	2b00      	cmp	r3, #0
    13e2:	db07      	blt.n	13f4 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    13e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13e6:	2b00      	cmp	r3, #0
    13e8:	d005      	beq.n	13f6 <_PrintInt+0xa6>
    13ea:	9a07      	ldr	r2, [sp, #28]
    13ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13ee:	429a      	cmp	r2, r3
    13f0:	d3ed      	bcc.n	13ce <_PrintInt+0x7e>
    13f2:	e000      	b.n	13f6 <_PrintInt+0xa6>
          break;
    13f4:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    13f6:	9b05      	ldr	r3, [sp, #20]
    13f8:	68db      	ldr	r3, [r3, #12]
    13fa:	2b00      	cmp	r3, #0
    13fc:	db4a      	blt.n	1494 <_PrintInt+0x144>
    if (v < 0) {
    13fe:	9b04      	ldr	r3, [sp, #16]
    1400:	2b00      	cmp	r3, #0
    1402:	da07      	bge.n	1414 <_PrintInt+0xc4>
      v = -v;
    1404:	9b04      	ldr	r3, [sp, #16]
    1406:	425b      	negs	r3, r3
    1408:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    140a:	212d      	movs	r1, #45	; 0x2d
    140c:	9805      	ldr	r0, [sp, #20]
    140e:	f7ff feb2 	bl	1176 <_StoreChar>
    1412:	e008      	b.n	1426 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1416:	f003 0304 	and.w	r3, r3, #4
    141a:	2b00      	cmp	r3, #0
    141c:	d003      	beq.n	1426 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    141e:	212b      	movs	r1, #43	; 0x2b
    1420:	9805      	ldr	r0, [sp, #20]
    1422:	f7ff fea8 	bl	1176 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1426:	9b05      	ldr	r3, [sp, #20]
    1428:	68db      	ldr	r3, [r3, #12]
    142a:	2b00      	cmp	r3, #0
    142c:	db32      	blt.n	1494 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    142e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1430:	f003 0302 	and.w	r3, r3, #2
    1434:	2b00      	cmp	r3, #0
    1436:	d01f      	beq.n	1478 <_PrintInt+0x128>
    1438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    143a:	f003 0301 	and.w	r3, r3, #1
    143e:	2b00      	cmp	r3, #0
    1440:	d11a      	bne.n	1478 <_PrintInt+0x128>
    1442:	9b02      	ldr	r3, [sp, #8]
    1444:	2b00      	cmp	r3, #0
    1446:	d117      	bne.n	1478 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    144a:	2b00      	cmp	r3, #0
    144c:	d014      	beq.n	1478 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    144e:	e00a      	b.n	1466 <_PrintInt+0x116>
            FieldWidth--;
    1450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1452:	3b01      	subs	r3, #1
    1454:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1456:	2130      	movs	r1, #48	; 0x30
    1458:	9805      	ldr	r0, [sp, #20]
    145a:	f7ff fe8c 	bl	1176 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    145e:	9b05      	ldr	r3, [sp, #20]
    1460:	68db      	ldr	r3, [r3, #12]
    1462:	2b00      	cmp	r3, #0
    1464:	db07      	blt.n	1476 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1468:	2b00      	cmp	r3, #0
    146a:	d005      	beq.n	1478 <_PrintInt+0x128>
    146c:	9a07      	ldr	r2, [sp, #28]
    146e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1470:	429a      	cmp	r2, r3
    1472:	d3ed      	bcc.n	1450 <_PrintInt+0x100>
    1474:	e000      	b.n	1478 <_PrintInt+0x128>
              break;
    1476:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1478:	9b05      	ldr	r3, [sp, #20]
    147a:	68db      	ldr	r3, [r3, #12]
    147c:	2b00      	cmp	r3, #0
    147e:	db09      	blt.n	1494 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1480:	9904      	ldr	r1, [sp, #16]
    1482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1484:	9301      	str	r3, [sp, #4]
    1486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1488:	9300      	str	r3, [sp, #0]
    148a:	9b02      	ldr	r3, [sp, #8]
    148c:	9a03      	ldr	r2, [sp, #12]
    148e:	9805      	ldr	r0, [sp, #20]
    1490:	f7ff feb0 	bl	11f4 <_PrintUnsigned>
      }
    }
  }
}
    1494:	bf00      	nop
    1496:	b009      	add	sp, #36	; 0x24
    1498:	f85d fb04 	ldr.w	pc, [sp], #4

0000149c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    149c:	b500      	push	{lr}
    149e:	b0a3      	sub	sp, #140	; 0x8c
    14a0:	9005      	str	r0, [sp, #20]
    14a2:	9104      	str	r1, [sp, #16]
    14a4:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    14a6:	ab06      	add	r3, sp, #24
    14a8:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    14aa:	2340      	movs	r3, #64	; 0x40
    14ac:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    14ae:	2300      	movs	r3, #0
    14b0:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    14b2:	9b05      	ldr	r3, [sp, #20]
    14b4:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    14b6:	2300      	movs	r3, #0
    14b8:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    14ba:	9b04      	ldr	r3, [sp, #16]
    14bc:	781b      	ldrb	r3, [r3, #0]
    14be:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    14c2:	9b04      	ldr	r3, [sp, #16]
    14c4:	3301      	adds	r3, #1
    14c6:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    14c8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14cc:	2b00      	cmp	r3, #0
    14ce:	f000 819c 	beq.w	180a <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    14d2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14d6:	2b25      	cmp	r3, #37	; 0x25
    14d8:	f040 818b 	bne.w	17f2 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    14dc:	2300      	movs	r3, #0
    14de:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    14e0:	2301      	movs	r3, #1
    14e2:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    14e4:	9b04      	ldr	r3, [sp, #16]
    14e6:	781b      	ldrb	r3, [r3, #0]
    14e8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    14ec:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14f0:	3b23      	subs	r3, #35	; 0x23
    14f2:	2b0d      	cmp	r3, #13
    14f4:	d83e      	bhi.n	1574 <SEGGER_RTT_vprintf+0xd8>
    14f6:	a201      	add	r2, pc, #4	; (adr r2, 14fc <SEGGER_RTT_vprintf+0x60>)
    14f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14fc:	00001565 	.word	0x00001565
    1500:	00001575 	.word	0x00001575
    1504:	00001575 	.word	0x00001575
    1508:	00001575 	.word	0x00001575
    150c:	00001575 	.word	0x00001575
    1510:	00001575 	.word	0x00001575
    1514:	00001575 	.word	0x00001575
    1518:	00001575 	.word	0x00001575
    151c:	00001555 	.word	0x00001555
    1520:	00001575 	.word	0x00001575
    1524:	00001535 	.word	0x00001535
    1528:	00001575 	.word	0x00001575
    152c:	00001575 	.word	0x00001575
    1530:	00001545 	.word	0x00001545
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1534:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1536:	f043 0301 	orr.w	r3, r3, #1
    153a:	931e      	str	r3, [sp, #120]	; 0x78
    153c:	9b04      	ldr	r3, [sp, #16]
    153e:	3301      	adds	r3, #1
    1540:	9304      	str	r3, [sp, #16]
    1542:	e01a      	b.n	157a <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1544:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1546:	f043 0302 	orr.w	r3, r3, #2
    154a:	931e      	str	r3, [sp, #120]	; 0x78
    154c:	9b04      	ldr	r3, [sp, #16]
    154e:	3301      	adds	r3, #1
    1550:	9304      	str	r3, [sp, #16]
    1552:	e012      	b.n	157a <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1554:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1556:	f043 0304 	orr.w	r3, r3, #4
    155a:	931e      	str	r3, [sp, #120]	; 0x78
    155c:	9b04      	ldr	r3, [sp, #16]
    155e:	3301      	adds	r3, #1
    1560:	9304      	str	r3, [sp, #16]
    1562:	e00a      	b.n	157a <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1564:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1566:	f043 0308 	orr.w	r3, r3, #8
    156a:	931e      	str	r3, [sp, #120]	; 0x78
    156c:	9b04      	ldr	r3, [sp, #16]
    156e:	3301      	adds	r3, #1
    1570:	9304      	str	r3, [sp, #16]
    1572:	e002      	b.n	157a <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1574:	2300      	movs	r3, #0
    1576:	9320      	str	r3, [sp, #128]	; 0x80
    1578:	bf00      	nop
        }
      } while (v);
    157a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    157c:	2b00      	cmp	r3, #0
    157e:	d1b1      	bne.n	14e4 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1580:	2300      	movs	r3, #0
    1582:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1584:	9b04      	ldr	r3, [sp, #16]
    1586:	781b      	ldrb	r3, [r3, #0]
    1588:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    158c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1590:	2b2f      	cmp	r3, #47	; 0x2f
    1592:	d912      	bls.n	15ba <SEGGER_RTT_vprintf+0x11e>
    1594:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1598:	2b39      	cmp	r3, #57	; 0x39
    159a:	d80e      	bhi.n	15ba <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    159c:	9b04      	ldr	r3, [sp, #16]
    159e:	3301      	adds	r3, #1
    15a0:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    15a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    15a4:	4613      	mov	r3, r2
    15a6:	009b      	lsls	r3, r3, #2
    15a8:	4413      	add	r3, r2
    15aa:	005b      	lsls	r3, r3, #1
    15ac:	461a      	mov	r2, r3
    15ae:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15b2:	4413      	add	r3, r2
    15b4:	3b30      	subs	r3, #48	; 0x30
    15b6:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    15b8:	e7e4      	b.n	1584 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    15ba:	2300      	movs	r3, #0
    15bc:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    15be:	9b04      	ldr	r3, [sp, #16]
    15c0:	781b      	ldrb	r3, [r3, #0]
    15c2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    15c6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15ca:	2b2e      	cmp	r3, #46	; 0x2e
    15cc:	d11d      	bne.n	160a <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    15ce:	9b04      	ldr	r3, [sp, #16]
    15d0:	3301      	adds	r3, #1
    15d2:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    15d4:	9b04      	ldr	r3, [sp, #16]
    15d6:	781b      	ldrb	r3, [r3, #0]
    15d8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    15dc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15e0:	2b2f      	cmp	r3, #47	; 0x2f
    15e2:	d912      	bls.n	160a <SEGGER_RTT_vprintf+0x16e>
    15e4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15e8:	2b39      	cmp	r3, #57	; 0x39
    15ea:	d80e      	bhi.n	160a <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    15ec:	9b04      	ldr	r3, [sp, #16]
    15ee:	3301      	adds	r3, #1
    15f0:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    15f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    15f4:	4613      	mov	r3, r2
    15f6:	009b      	lsls	r3, r3, #2
    15f8:	4413      	add	r3, r2
    15fa:	005b      	lsls	r3, r3, #1
    15fc:	461a      	mov	r2, r3
    15fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1602:	4413      	add	r3, r2
    1604:	3b30      	subs	r3, #48	; 0x30
    1606:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1608:	e7e4      	b.n	15d4 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    160a:	9b04      	ldr	r3, [sp, #16]
    160c:	781b      	ldrb	r3, [r3, #0]
    160e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1612:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1616:	2b6c      	cmp	r3, #108	; 0x6c
    1618:	d003      	beq.n	1622 <SEGGER_RTT_vprintf+0x186>
    161a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    161e:	2b68      	cmp	r3, #104	; 0x68
    1620:	d107      	bne.n	1632 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1622:	9b04      	ldr	r3, [sp, #16]
    1624:	3301      	adds	r3, #1
    1626:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1628:	9b04      	ldr	r3, [sp, #16]
    162a:	781b      	ldrb	r3, [r3, #0]
    162c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1630:	e7ef      	b.n	1612 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1632:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1636:	2b25      	cmp	r3, #37	; 0x25
    1638:	f000 80d0 	beq.w	17dc <SEGGER_RTT_vprintf+0x340>
    163c:	2b25      	cmp	r3, #37	; 0x25
    163e:	f2c0 80d3 	blt.w	17e8 <SEGGER_RTT_vprintf+0x34c>
    1642:	2b78      	cmp	r3, #120	; 0x78
    1644:	f300 80d0 	bgt.w	17e8 <SEGGER_RTT_vprintf+0x34c>
    1648:	2b58      	cmp	r3, #88	; 0x58
    164a:	f2c0 80cd 	blt.w	17e8 <SEGGER_RTT_vprintf+0x34c>
    164e:	3b58      	subs	r3, #88	; 0x58
    1650:	2b20      	cmp	r3, #32
    1652:	f200 80c9 	bhi.w	17e8 <SEGGER_RTT_vprintf+0x34c>
    1656:	a201      	add	r2, pc, #4	; (adr r2, 165c <SEGGER_RTT_vprintf+0x1c0>)
    1658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    165c:	0000174d 	.word	0x0000174d
    1660:	000017e9 	.word	0x000017e9
    1664:	000017e9 	.word	0x000017e9
    1668:	000017e9 	.word	0x000017e9
    166c:	000017e9 	.word	0x000017e9
    1670:	000017e9 	.word	0x000017e9
    1674:	000017e9 	.word	0x000017e9
    1678:	000017e9 	.word	0x000017e9
    167c:	000017e9 	.word	0x000017e9
    1680:	000017e9 	.word	0x000017e9
    1684:	000017e9 	.word	0x000017e9
    1688:	000016e1 	.word	0x000016e1
    168c:	00001705 	.word	0x00001705
    1690:	000017e9 	.word	0x000017e9
    1694:	000017e9 	.word	0x000017e9
    1698:	000017e9 	.word	0x000017e9
    169c:	000017e9 	.word	0x000017e9
    16a0:	000017e9 	.word	0x000017e9
    16a4:	000017e9 	.word	0x000017e9
    16a8:	000017e9 	.word	0x000017e9
    16ac:	000017e9 	.word	0x000017e9
    16b0:	000017e9 	.word	0x000017e9
    16b4:	000017e9 	.word	0x000017e9
    16b8:	000017e9 	.word	0x000017e9
    16bc:	000017b9 	.word	0x000017b9
    16c0:	000017e9 	.word	0x000017e9
    16c4:	000017e9 	.word	0x000017e9
    16c8:	00001771 	.word	0x00001771
    16cc:	000017e9 	.word	0x000017e9
    16d0:	00001729 	.word	0x00001729
    16d4:	000017e9 	.word	0x000017e9
    16d8:	000017e9 	.word	0x000017e9
    16dc:	0000174d 	.word	0x0000174d
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    16e0:	9b03      	ldr	r3, [sp, #12]
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	1d19      	adds	r1, r3, #4
    16e6:	9a03      	ldr	r2, [sp, #12]
    16e8:	6011      	str	r1, [r2, #0]
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    16ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
    16f0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    16f4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    16f8:	ab16      	add	r3, sp, #88	; 0x58
    16fa:	4611      	mov	r1, r2
    16fc:	4618      	mov	r0, r3
    16fe:	f7ff fd3a 	bl	1176 <_StoreChar>
        break;
    1702:	e072      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1704:	9b03      	ldr	r3, [sp, #12]
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	1d19      	adds	r1, r3, #4
    170a:	9a03      	ldr	r2, [sp, #12]
    170c:	6011      	str	r1, [r2, #0]
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1712:	a816      	add	r0, sp, #88	; 0x58
    1714:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1716:	9301      	str	r3, [sp, #4]
    1718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    171a:	9300      	str	r3, [sp, #0]
    171c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    171e:	220a      	movs	r2, #10
    1720:	9920      	ldr	r1, [sp, #128]	; 0x80
    1722:	f7ff fe15 	bl	1350 <_PrintInt>
        break;
    1726:	e060      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1728:	9b03      	ldr	r3, [sp, #12]
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	1d19      	adds	r1, r3, #4
    172e:	9a03      	ldr	r2, [sp, #12]
    1730:	6011      	str	r1, [r2, #0]
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1736:	9920      	ldr	r1, [sp, #128]	; 0x80
    1738:	a816      	add	r0, sp, #88	; 0x58
    173a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    173c:	9301      	str	r3, [sp, #4]
    173e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1740:	9300      	str	r3, [sp, #0]
    1742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1744:	220a      	movs	r2, #10
    1746:	f7ff fd55 	bl	11f4 <_PrintUnsigned>
        break;
    174a:	e04e      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    174c:	9b03      	ldr	r3, [sp, #12]
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	1d19      	adds	r1, r3, #4
    1752:	9a03      	ldr	r2, [sp, #12]
    1754:	6011      	str	r1, [r2, #0]
    1756:	681b      	ldr	r3, [r3, #0]
    1758:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    175a:	9920      	ldr	r1, [sp, #128]	; 0x80
    175c:	a816      	add	r0, sp, #88	; 0x58
    175e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1760:	9301      	str	r3, [sp, #4]
    1762:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1764:	9300      	str	r3, [sp, #0]
    1766:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1768:	2210      	movs	r2, #16
    176a:	f7ff fd43 	bl	11f4 <_PrintUnsigned>
        break;
    176e:	e03c      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1770:	9b03      	ldr	r3, [sp, #12]
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	1d19      	adds	r1, r3, #4
    1776:	9a03      	ldr	r2, [sp, #12]
    1778:	6011      	str	r1, [r2, #0]
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    177e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1780:	2b00      	cmp	r3, #0
    1782:	d101      	bne.n	1788 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1784:	4b2c      	ldr	r3, [pc, #176]	; (1838 <SEGGER_RTT_vprintf+0x39c>)
    1786:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1788:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1790:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1792:	3301      	adds	r3, #1
    1794:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1796:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    179a:	2b00      	cmp	r3, #0
    179c:	d00a      	beq.n	17b4 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    179e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    17a2:	ab16      	add	r3, sp, #88	; 0x58
    17a4:	4611      	mov	r1, r2
    17a6:	4618      	mov	r0, r3
    17a8:	f7ff fce5 	bl	1176 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    17ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
    17ae:	2b00      	cmp	r3, #0
    17b0:	daea      	bge.n	1788 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    17b2:	e01a      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
              break;
    17b4:	bf00      	nop
        break;
    17b6:	e018      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    17b8:	9b03      	ldr	r3, [sp, #12]
    17ba:	681b      	ldr	r3, [r3, #0]
    17bc:	1d19      	adds	r1, r3, #4
    17be:	9a03      	ldr	r2, [sp, #12]
    17c0:	6011      	str	r1, [r2, #0]
    17c2:	681b      	ldr	r3, [r3, #0]
    17c4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    17c6:	9920      	ldr	r1, [sp, #128]	; 0x80
    17c8:	a816      	add	r0, sp, #88	; 0x58
    17ca:	2300      	movs	r3, #0
    17cc:	9301      	str	r3, [sp, #4]
    17ce:	2308      	movs	r3, #8
    17d0:	9300      	str	r3, [sp, #0]
    17d2:	2308      	movs	r3, #8
    17d4:	2210      	movs	r2, #16
    17d6:	f7ff fd0d 	bl	11f4 <_PrintUnsigned>
        break;
    17da:	e006      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    17dc:	ab16      	add	r3, sp, #88	; 0x58
    17de:	2125      	movs	r1, #37	; 0x25
    17e0:	4618      	mov	r0, r3
    17e2:	f7ff fcc8 	bl	1176 <_StoreChar>
        break;
    17e6:	e000      	b.n	17ea <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    17e8:	bf00      	nop
      }
      sFormat++;
    17ea:	9b04      	ldr	r3, [sp, #16]
    17ec:	3301      	adds	r3, #1
    17ee:	9304      	str	r3, [sp, #16]
    17f0:	e006      	b.n	1800 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    17f2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    17f6:	ab16      	add	r3, sp, #88	; 0x58
    17f8:	4611      	mov	r1, r2
    17fa:	4618      	mov	r0, r3
    17fc:	f7ff fcbb 	bl	1176 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1800:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1802:	2b00      	cmp	r3, #0
    1804:	f6bf ae59 	bge.w	14ba <SEGGER_RTT_vprintf+0x1e>
    1808:	e000      	b.n	180c <SEGGER_RTT_vprintf+0x370>
      break;
    180a:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    180c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    180e:	2b00      	cmp	r3, #0
    1810:	dd0c      	ble.n	182c <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1812:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1814:	2b00      	cmp	r3, #0
    1816:	d005      	beq.n	1824 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1818:	9a18      	ldr	r2, [sp, #96]	; 0x60
    181a:	ab06      	add	r3, sp, #24
    181c:	4619      	mov	r1, r3
    181e:	9805      	ldr	r0, [sp, #20]
    1820:	f7ff fc7e 	bl	1120 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1824:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1826:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1828:	4413      	add	r3, r2
    182a:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    182c:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    182e:	4618      	mov	r0, r3
    1830:	b023      	add	sp, #140	; 0x8c
    1832:	f85d fb04 	ldr.w	pc, [sp], #4
    1836:	bf00      	nop
    1838:	0000f4fc 	.word	0x0000f4fc

0000183c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    183c:	b40e      	push	{r1, r2, r3}
    183e:	b500      	push	{lr}
    1840:	b084      	sub	sp, #16
    1842:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1844:	ab06      	add	r3, sp, #24
    1846:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1848:	ab02      	add	r3, sp, #8
    184a:	461a      	mov	r2, r3
    184c:	9905      	ldr	r1, [sp, #20]
    184e:	9801      	ldr	r0, [sp, #4]
    1850:	f7ff fe24 	bl	149c <SEGGER_RTT_vprintf>
    1854:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1856:	9b03      	ldr	r3, [sp, #12]
}
    1858:	4618      	mov	r0, r3
    185a:	b004      	add	sp, #16
    185c:	f85d eb04 	ldr.w	lr, [sp], #4
    1860:	b003      	add	sp, #12
    1862:	4770      	bx	lr

00001864 <memcpy>:
    1864:	440a      	add	r2, r1
    1866:	4291      	cmp	r1, r2
    1868:	f100 33ff 	add.w	r3, r0, #4294967295
    186c:	d100      	bne.n	1870 <memcpy+0xc>
    186e:	4770      	bx	lr
    1870:	b510      	push	{r4, lr}
    1872:	f811 4b01 	ldrb.w	r4, [r1], #1
    1876:	f803 4f01 	strb.w	r4, [r3, #1]!
    187a:	4291      	cmp	r1, r2
    187c:	d1f9      	bne.n	1872 <memcpy+0xe>
    187e:	bd10      	pop	{r4, pc}

00001880 <memset>:
    1880:	4402      	add	r2, r0
    1882:	4603      	mov	r3, r0
    1884:	4293      	cmp	r3, r2
    1886:	d100      	bne.n	188a <memset+0xa>
    1888:	4770      	bx	lr
    188a:	f803 1b01 	strb.w	r1, [r3], #1
    188e:	e7f9      	b.n	1884 <memset+0x4>

00001890 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1890:	b086      	sub	sp, #24
    1892:	9003      	str	r0, [sp, #12]
    1894:	9102      	str	r1, [sp, #8]
    1896:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1898:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    189c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    18a0:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    18a2:	9b01      	ldr	r3, [sp, #4]
    18a4:	2b00      	cmp	r3, #0
    18a6:	d007      	beq.n	18b8 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    18a8:	9b03      	ldr	r3, [sp, #12]
    18aa:	3310      	adds	r3, #16
    18ac:	009b      	lsls	r3, r3, #2
    18ae:	9a05      	ldr	r2, [sp, #20]
    18b0:	4413      	add	r3, r2
    18b2:	681a      	ldr	r2, [r3, #0]
    18b4:	9b01      	ldr	r3, [sp, #4]
    18b6:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    18b8:	9b03      	ldr	r3, [sp, #12]
    18ba:	3310      	adds	r3, #16
    18bc:	009b      	lsls	r3, r3, #2
    18be:	9a05      	ldr	r2, [sp, #20]
    18c0:	4413      	add	r3, r2
    18c2:	9a02      	ldr	r2, [sp, #8]
    18c4:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    18c6:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    18ca:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    18ce:	bf00      	nop
    18d0:	b006      	add	sp, #24
    18d2:	4770      	bx	lr

000018d4 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    18d4:	b082      	sub	sp, #8
    18d6:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	f003 021f 	and.w	r2, r3, #31
    18de:	4905      	ldr	r1, [pc, #20]	; (18f4 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    18e0:	9b01      	ldr	r3, [sp, #4]
    18e2:	095b      	lsrs	r3, r3, #5
    18e4:	2001      	movs	r0, #1
    18e6:	fa00 f202 	lsl.w	r2, r0, r2
    18ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    18ee:	bf00      	nop
    18f0:	b002      	add	sp, #8
    18f2:	4770      	bx	lr
    18f4:	e000e100 	.word	0xe000e100

000018f8 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    18f8:	b082      	sub	sp, #8
    18fa:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    18fc:	9b01      	ldr	r3, [sp, #4]
    18fe:	f003 021f 	and.w	r2, r3, #31
    1902:	4906      	ldr	r1, [pc, #24]	; (191c <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1904:	9b01      	ldr	r3, [sp, #4]
    1906:	095b      	lsrs	r3, r3, #5
    1908:	2001      	movs	r0, #1
    190a:	fa00 f202 	lsl.w	r2, r0, r2
    190e:	3320      	adds	r3, #32
    1910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1914:	bf00      	nop
    1916:	b002      	add	sp, #8
    1918:	4770      	bx	lr
    191a:	bf00      	nop
    191c:	e000e100 	.word	0xe000e100

00001920 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1920:	b084      	sub	sp, #16
    1922:	9001      	str	r0, [sp, #4]
    1924:	460b      	mov	r3, r1
    1926:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    192a:	2304      	movs	r3, #4
    192c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1930:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1934:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1938:	fa02 f103 	lsl.w	r1, r2, r3
    193c:	4a04      	ldr	r2, [pc, #16]	; (1950 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    193e:	9b01      	ldr	r3, [sp, #4]
    1940:	b2c9      	uxtb	r1, r1
    1942:	4413      	add	r3, r2
    1944:	460a      	mov	r2, r1
    1946:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    194a:	bf00      	nop
    194c:	b004      	add	sp, #16
    194e:	4770      	bx	lr
    1950:	e000e100 	.word	0xe000e100

00001954 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1954:	b084      	sub	sp, #16
    1956:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1958:	2304      	movs	r3, #4
    195a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    195e:	4a09      	ldr	r2, [pc, #36]	; (1984 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1960:	9b01      	ldr	r3, [sp, #4]
    1962:	4413      	add	r3, r2
    1964:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1968:	b2db      	uxtb	r3, r3
    196a:	461a      	mov	r2, r3
    196c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1970:	fa42 f303 	asr.w	r3, r2, r3
    1974:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1978:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    197c:	4618      	mov	r0, r3
    197e:	b004      	add	sp, #16
    1980:	4770      	bx	lr
    1982:	bf00      	nop
    1984:	e000e100 	.word	0xe000e100

00001988 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1988:	b082      	sub	sp, #8
    198a:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    198c:	9b01      	ldr	r3, [sp, #4]
    198e:	f003 021f 	and.w	r2, r3, #31
    1992:	4906      	ldr	r1, [pc, #24]	; (19ac <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1994:	9b01      	ldr	r3, [sp, #4]
    1996:	095b      	lsrs	r3, r3, #5
    1998:	2001      	movs	r0, #1
    199a:	fa00 f202 	lsl.w	r2, r0, r2
    199e:	3360      	adds	r3, #96	; 0x60
    19a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    19a4:	bf00      	nop
    19a6:	b002      	add	sp, #8
    19a8:	4770      	bx	lr
    19aa:	bf00      	nop
    19ac:	e000e100 	.word	0xe000e100

000019b0 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    19b0:	b500      	push	{lr}
    19b2:	b085      	sub	sp, #20
    19b4:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    19b6:	2300      	movs	r3, #0
    19b8:	9303      	str	r3, [sp, #12]
    19ba:	e05d      	b.n	1a78 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19bc:	9b01      	ldr	r3, [sp, #4]
    19be:	6859      	ldr	r1, [r3, #4]
    19c0:	9a03      	ldr	r2, [sp, #12]
    19c2:	4613      	mov	r3, r2
    19c4:	005b      	lsls	r3, r3, #1
    19c6:	4413      	add	r3, r2
    19c8:	009b      	lsls	r3, r3, #2
    19ca:	440b      	add	r3, r1
    19cc:	681b      	ldr	r3, [r3, #0]
    19ce:	4618      	mov	r0, r3
    19d0:	f000 f899 	bl	1b06 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19d4:	9b01      	ldr	r3, [sp, #4]
    19d6:	6859      	ldr	r1, [r3, #4]
    19d8:	9a03      	ldr	r2, [sp, #12]
    19da:	4613      	mov	r3, r2
    19dc:	005b      	lsls	r3, r3, #1
    19de:	4413      	add	r3, r2
    19e0:	009b      	lsls	r3, r3, #2
    19e2:	440b      	add	r3, r1
    19e4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19e6:	9b01      	ldr	r3, [sp, #4]
    19e8:	6859      	ldr	r1, [r3, #4]
    19ea:	9a03      	ldr	r2, [sp, #12]
    19ec:	4613      	mov	r3, r2
    19ee:	005b      	lsls	r3, r3, #1
    19f0:	4413      	add	r3, r2
    19f2:	009b      	lsls	r3, r3, #2
    19f4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19f6:	795b      	ldrb	r3, [r3, #5]
    19f8:	4619      	mov	r1, r3
    19fa:	f000 f869 	bl	1ad0 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19fe:	9b01      	ldr	r3, [sp, #4]
    1a00:	6859      	ldr	r1, [r3, #4]
    1a02:	9a03      	ldr	r2, [sp, #12]
    1a04:	4613      	mov	r3, r2
    1a06:	005b      	lsls	r3, r3, #1
    1a08:	4413      	add	r3, r2
    1a0a:	009b      	lsls	r3, r3, #2
    1a0c:	440b      	add	r3, r1
    1a0e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a10:	9b01      	ldr	r3, [sp, #4]
    1a12:	6859      	ldr	r1, [r3, #4]
    1a14:	9a03      	ldr	r2, [sp, #12]
    1a16:	4613      	mov	r3, r2
    1a18:	005b      	lsls	r3, r3, #1
    1a1a:	4413      	add	r3, r2
    1a1c:	009b      	lsls	r3, r3, #2
    1a1e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a20:	689b      	ldr	r3, [r3, #8]
    1a22:	2200      	movs	r2, #0
    1a24:	4619      	mov	r1, r3
    1a26:	f000 f831 	bl	1a8c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a2a:	9b01      	ldr	r3, [sp, #4]
    1a2c:	6859      	ldr	r1, [r3, #4]
    1a2e:	9a03      	ldr	r2, [sp, #12]
    1a30:	4613      	mov	r3, r2
    1a32:	005b      	lsls	r3, r3, #1
    1a34:	4413      	add	r3, r2
    1a36:	009b      	lsls	r3, r3, #2
    1a38:	440b      	add	r3, r1
    1a3a:	791b      	ldrb	r3, [r3, #4]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d00c      	beq.n	1a5a <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a40:	9b01      	ldr	r3, [sp, #4]
    1a42:	6859      	ldr	r1, [r3, #4]
    1a44:	9a03      	ldr	r2, [sp, #12]
    1a46:	4613      	mov	r3, r2
    1a48:	005b      	lsls	r3, r3, #1
    1a4a:	4413      	add	r3, r2
    1a4c:	009b      	lsls	r3, r3, #2
    1a4e:	440b      	add	r3, r1
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	4618      	mov	r0, r3
    1a54:	f000 f828 	bl	1aa8 <IntCtrl_Ip_EnableIrq>
    1a58:	e00b      	b.n	1a72 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	6859      	ldr	r1, [r3, #4]
    1a5e:	9a03      	ldr	r2, [sp, #12]
    1a60:	4613      	mov	r3, r2
    1a62:	005b      	lsls	r3, r3, #1
    1a64:	4413      	add	r3, r2
    1a66:	009b      	lsls	r3, r3, #2
    1a68:	440b      	add	r3, r1
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	4618      	mov	r0, r3
    1a6e:	f000 f825 	bl	1abc <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a72:	9b03      	ldr	r3, [sp, #12]
    1a74:	3301      	adds	r3, #1
    1a76:	9303      	str	r3, [sp, #12]
    1a78:	9b01      	ldr	r3, [sp, #4]
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	9a03      	ldr	r2, [sp, #12]
    1a7e:	429a      	cmp	r2, r3
    1a80:	d39c      	bcc.n	19bc <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1a82:	2300      	movs	r3, #0
}
    1a84:	4618      	mov	r0, r3
    1a86:	b005      	add	sp, #20
    1a88:	f85d fb04 	ldr.w	pc, [sp], #4

00001a8c <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1a8c:	b500      	push	{lr}
    1a8e:	b085      	sub	sp, #20
    1a90:	9003      	str	r0, [sp, #12]
    1a92:	9102      	str	r1, [sp, #8]
    1a94:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1a96:	9a01      	ldr	r2, [sp, #4]
    1a98:	9902      	ldr	r1, [sp, #8]
    1a9a:	9803      	ldr	r0, [sp, #12]
    1a9c:	f7ff fef8 	bl	1890 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1aa0:	bf00      	nop
    1aa2:	b005      	add	sp, #20
    1aa4:	f85d fb04 	ldr.w	pc, [sp], #4

00001aa8 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1aa8:	b500      	push	{lr}
    1aaa:	b083      	sub	sp, #12
    1aac:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1aae:	9801      	ldr	r0, [sp, #4]
    1ab0:	f7ff ff10 	bl	18d4 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1ab4:	bf00      	nop
    1ab6:	b003      	add	sp, #12
    1ab8:	f85d fb04 	ldr.w	pc, [sp], #4

00001abc <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1abc:	b500      	push	{lr}
    1abe:	b083      	sub	sp, #12
    1ac0:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1ac2:	9801      	ldr	r0, [sp, #4]
    1ac4:	f7ff ff18 	bl	18f8 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1ac8:	bf00      	nop
    1aca:	b003      	add	sp, #12
    1acc:	f85d fb04 	ldr.w	pc, [sp], #4

00001ad0 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1ad0:	b500      	push	{lr}
    1ad2:	b083      	sub	sp, #12
    1ad4:	9001      	str	r0, [sp, #4]
    1ad6:	460b      	mov	r3, r1
    1ad8:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1adc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ae0:	4619      	mov	r1, r3
    1ae2:	9801      	ldr	r0, [sp, #4]
    1ae4:	f7ff ff1c 	bl	1920 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1ae8:	bf00      	nop
    1aea:	b003      	add	sp, #12
    1aec:	f85d fb04 	ldr.w	pc, [sp], #4

00001af0 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1af0:	b500      	push	{lr}
    1af2:	b083      	sub	sp, #12
    1af4:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1af6:	9801      	ldr	r0, [sp, #4]
    1af8:	f7ff ff2c 	bl	1954 <IntCtrl_Ip_GetPriorityPrivileged>
    1afc:	4603      	mov	r3, r0
}
    1afe:	4618      	mov	r0, r3
    1b00:	b003      	add	sp, #12
    1b02:	f85d fb04 	ldr.w	pc, [sp], #4

00001b06 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1b06:	b500      	push	{lr}
    1b08:	b083      	sub	sp, #12
    1b0a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1b0c:	9801      	ldr	r0, [sp, #4]
    1b0e:	f7ff ff3b 	bl	1988 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1b12:	bf00      	nop
    1b14:	b003      	add	sp, #12
    1b16:	f85d fb04 	ldr.w	pc, [sp], #4
    1b1a:	bf00      	nop

00001b1c <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1b1c:	b500      	push	{lr}
    1b1e:	b083      	sub	sp, #12
    1b20:	9001      	str	r0, [sp, #4]
    1b22:	460b      	mov	r3, r1
    1b24:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1b28:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d003      	beq.n	1b38 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1b30:	9801      	ldr	r0, [sp, #4]
    1b32:	f7ff ffb9 	bl	1aa8 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1b36:	e002      	b.n	1b3e <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1b38:	9801      	ldr	r0, [sp, #4]
    1b3a:	f7ff ffbf 	bl	1abc <IntCtrl_Ip_DisableIrq>
}
    1b3e:	bf00      	nop
    1b40:	b003      	add	sp, #12
    1b42:	f85d fb04 	ldr.w	pc, [sp], #4

00001b46 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1b46:	b500      	push	{lr}
    1b48:	b083      	sub	sp, #12
    1b4a:	9001      	str	r0, [sp, #4]
    1b4c:	460b      	mov	r3, r1
    1b4e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1b52:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b56:	4619      	mov	r1, r3
    1b58:	9801      	ldr	r0, [sp, #4]
    1b5a:	f7ff ffb9 	bl	1ad0 <IntCtrl_Ip_SetPriority>
}
    1b5e:	bf00      	nop
    1b60:	b003      	add	sp, #12
    1b62:	f85d fb04 	ldr.w	pc, [sp], #4

00001b66 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1b66:	b500      	push	{lr}
    1b68:	b083      	sub	sp, #12
    1b6a:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1b6c:	9801      	ldr	r0, [sp, #4]
    1b6e:	f7ff ffbf 	bl	1af0 <IntCtrl_Ip_GetPriority>
    1b72:	4603      	mov	r3, r0
}
    1b74:	4618      	mov	r0, r3
    1b76:	b003      	add	sp, #12
    1b78:	f85d fb04 	ldr.w	pc, [sp], #4

00001b7c <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1b7c:	b500      	push	{lr}
    1b7e:	b085      	sub	sp, #20
    1b80:	9003      	str	r0, [sp, #12]
    1b82:	9102      	str	r1, [sp, #8]
    1b84:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1b86:	9a01      	ldr	r2, [sp, #4]
    1b88:	9902      	ldr	r1, [sp, #8]
    1b8a:	9803      	ldr	r0, [sp, #12]
    1b8c:	f7ff ff7e 	bl	1a8c <IntCtrl_Ip_InstallHandler>
}
    1b90:	bf00      	nop
    1b92:	b005      	add	sp, #20
    1b94:	f85d fb04 	ldr.w	pc, [sp], #4

00001b98 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1b98:	b500      	push	{lr}
    1b9a:	b085      	sub	sp, #20
    1b9c:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1b9e:	2300      	movs	r3, #0
    1ba0:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1ba4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1ba8:	4a05      	ldr	r2, [pc, #20]	; (1bc0 <Platform_Init+0x28>)
    1baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bae:	681b      	ldr	r3, [r3, #0]
    1bb0:	4618      	mov	r0, r3
    1bb2:	f000 f8c7 	bl	1d44 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1bb6:	bf00      	nop
    1bb8:	b005      	add	sp, #20
    1bba:	f85d fb04 	ldr.w	pc, [sp], #4
    1bbe:	bf00      	nop
    1bc0:	0001033c 	.word	0x0001033c

00001bc4 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1bc4:	b500      	push	{lr}
    1bc6:	b085      	sub	sp, #20
    1bc8:	9001      	str	r0, [sp, #4]
    1bca:	460b      	mov	r3, r1
    1bcc:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1bd0:	2300      	movs	r3, #0
    1bd2:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1bd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bda:	4619      	mov	r1, r3
    1bdc:	9801      	ldr	r0, [sp, #4]
    1bde:	f7ff ff9d 	bl	1b1c <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1be2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1be6:	4618      	mov	r0, r3
    1be8:	b005      	add	sp, #20
    1bea:	f85d fb04 	ldr.w	pc, [sp], #4

00001bee <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1bee:	b500      	push	{lr}
    1bf0:	b085      	sub	sp, #20
    1bf2:	9001      	str	r0, [sp, #4]
    1bf4:	460b      	mov	r3, r1
    1bf6:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1bfa:	2300      	movs	r3, #0
    1bfc:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1c00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c04:	4619      	mov	r1, r3
    1c06:	9801      	ldr	r0, [sp, #4]
    1c08:	f7ff ff9d 	bl	1b46 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1c0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c10:	4618      	mov	r0, r3
    1c12:	b005      	add	sp, #20
    1c14:	f85d fb04 	ldr.w	pc, [sp], #4

00001c18 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1c18:	b500      	push	{lr}
    1c1a:	b085      	sub	sp, #20
    1c1c:	9001      	str	r0, [sp, #4]
    1c1e:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c20:	2300      	movs	r3, #0
    1c22:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1c26:	9801      	ldr	r0, [sp, #4]
    1c28:	f7ff ff9d 	bl	1b66 <Platform_Ipw_GetIrqPriority>
    1c2c:	4603      	mov	r3, r0
    1c2e:	461a      	mov	r2, r3
    1c30:	9b00      	ldr	r3, [sp, #0]
    1c32:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1c34:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c38:	4618      	mov	r0, r3
    1c3a:	b005      	add	sp, #20
    1c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c40 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1c40:	b500      	push	{lr}
    1c42:	b087      	sub	sp, #28
    1c44:	9003      	str	r0, [sp, #12]
    1c46:	9102      	str	r1, [sp, #8]
    1c48:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c4a:	2300      	movs	r3, #0
    1c4c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1c50:	9a01      	ldr	r2, [sp, #4]
    1c52:	9902      	ldr	r1, [sp, #8]
    1c54:	9803      	ldr	r0, [sp, #12]
    1c56:	f7ff ff91 	bl	1b7c <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1c5a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1c5e:	4618      	mov	r0, r3
    1c60:	b007      	add	sp, #28
    1c62:	f85d fb04 	ldr.w	pc, [sp], #4
    1c66:	bf00      	nop

00001c68 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1c68:	b500      	push	{lr}
    1c6a:	b085      	sub	sp, #20
    1c6c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1c6e:	2300      	movs	r3, #0
    1c70:	9303      	str	r3, [sp, #12]
    1c72:	e05d      	b.n	1d30 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1c74:	9b01      	ldr	r3, [sp, #4]
    1c76:	6859      	ldr	r1, [r3, #4]
    1c78:	9a03      	ldr	r2, [sp, #12]
    1c7a:	4613      	mov	r3, r2
    1c7c:	005b      	lsls	r3, r3, #1
    1c7e:	4413      	add	r3, r2
    1c80:	009b      	lsls	r3, r3, #2
    1c82:	440b      	add	r3, r1
    1c84:	681b      	ldr	r3, [r3, #0]
    1c86:	4618      	mov	r0, r3
    1c88:	f7ff ff3d 	bl	1b06 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1c8c:	9b01      	ldr	r3, [sp, #4]
    1c8e:	6859      	ldr	r1, [r3, #4]
    1c90:	9a03      	ldr	r2, [sp, #12]
    1c92:	4613      	mov	r3, r2
    1c94:	005b      	lsls	r3, r3, #1
    1c96:	4413      	add	r3, r2
    1c98:	009b      	lsls	r3, r3, #2
    1c9a:	440b      	add	r3, r1
    1c9c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1c9e:	9b01      	ldr	r3, [sp, #4]
    1ca0:	6859      	ldr	r1, [r3, #4]
    1ca2:	9a03      	ldr	r2, [sp, #12]
    1ca4:	4613      	mov	r3, r2
    1ca6:	005b      	lsls	r3, r3, #1
    1ca8:	4413      	add	r3, r2
    1caa:	009b      	lsls	r3, r3, #2
    1cac:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cae:	795b      	ldrb	r3, [r3, #5]
    1cb0:	4619      	mov	r1, r3
    1cb2:	f7ff ff0d 	bl	1ad0 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cb6:	9b01      	ldr	r3, [sp, #4]
    1cb8:	6859      	ldr	r1, [r3, #4]
    1cba:	9a03      	ldr	r2, [sp, #12]
    1cbc:	4613      	mov	r3, r2
    1cbe:	005b      	lsls	r3, r3, #1
    1cc0:	4413      	add	r3, r2
    1cc2:	009b      	lsls	r3, r3, #2
    1cc4:	440b      	add	r3, r1
    1cc6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1cc8:	9b01      	ldr	r3, [sp, #4]
    1cca:	6859      	ldr	r1, [r3, #4]
    1ccc:	9a03      	ldr	r2, [sp, #12]
    1cce:	4613      	mov	r3, r2
    1cd0:	005b      	lsls	r3, r3, #1
    1cd2:	4413      	add	r3, r2
    1cd4:	009b      	lsls	r3, r3, #2
    1cd6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cd8:	689b      	ldr	r3, [r3, #8]
    1cda:	2200      	movs	r2, #0
    1cdc:	4619      	mov	r1, r3
    1cde:	f7ff fed5 	bl	1a8c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1ce2:	9b01      	ldr	r3, [sp, #4]
    1ce4:	6859      	ldr	r1, [r3, #4]
    1ce6:	9a03      	ldr	r2, [sp, #12]
    1ce8:	4613      	mov	r3, r2
    1cea:	005b      	lsls	r3, r3, #1
    1cec:	4413      	add	r3, r2
    1cee:	009b      	lsls	r3, r3, #2
    1cf0:	440b      	add	r3, r1
    1cf2:	791b      	ldrb	r3, [r3, #4]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d00c      	beq.n	1d12 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	6859      	ldr	r1, [r3, #4]
    1cfc:	9a03      	ldr	r2, [sp, #12]
    1cfe:	4613      	mov	r3, r2
    1d00:	005b      	lsls	r3, r3, #1
    1d02:	4413      	add	r3, r2
    1d04:	009b      	lsls	r3, r3, #2
    1d06:	440b      	add	r3, r1
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	4618      	mov	r0, r3
    1d0c:	f7ff fecc 	bl	1aa8 <IntCtrl_Ip_EnableIrq>
    1d10:	e00b      	b.n	1d2a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d12:	9b01      	ldr	r3, [sp, #4]
    1d14:	6859      	ldr	r1, [r3, #4]
    1d16:	9a03      	ldr	r2, [sp, #12]
    1d18:	4613      	mov	r3, r2
    1d1a:	005b      	lsls	r3, r3, #1
    1d1c:	4413      	add	r3, r2
    1d1e:	009b      	lsls	r3, r3, #2
    1d20:	440b      	add	r3, r1
    1d22:	681b      	ldr	r3, [r3, #0]
    1d24:	4618      	mov	r0, r3
    1d26:	f7ff fec9 	bl	1abc <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1d2a:	9b03      	ldr	r3, [sp, #12]
    1d2c:	3301      	adds	r3, #1
    1d2e:	9303      	str	r3, [sp, #12]
    1d30:	9b01      	ldr	r3, [sp, #4]
    1d32:	681b      	ldr	r3, [r3, #0]
    1d34:	9a03      	ldr	r2, [sp, #12]
    1d36:	429a      	cmp	r2, r3
    1d38:	d39c      	bcc.n	1c74 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1d3a:	2300      	movs	r3, #0
}
    1d3c:	4618      	mov	r0, r3
    1d3e:	b005      	add	sp, #20
    1d40:	f85d fb04 	ldr.w	pc, [sp], #4

00001d44 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1d44:	b500      	push	{lr}
    1d46:	b085      	sub	sp, #20
    1d48:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1d4a:	2300      	movs	r3, #0
    1d4c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1d50:	9b01      	ldr	r3, [sp, #4]
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d007      	beq.n	1d68 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1d58:	9b01      	ldr	r3, [sp, #4]
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	4618      	mov	r0, r3
    1d5e:	f7ff ff83 	bl	1c68 <Platform_Ipw_InitIntCtrl>
    1d62:	4603      	mov	r3, r0
    1d64:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1d68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d6c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1d6e:	bf00      	nop
    1d70:	b005      	add	sp, #20
    1d72:	f85d fb04 	ldr.w	pc, [sp], #4

00001d76 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1d76:	2300      	movs	r3, #0
}
    1d78:	4618      	mov	r0, r3
    1d7a:	4770      	bx	lr

00001d7c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1d7c:	b082      	sub	sp, #8
    1d7e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1d80:	2301      	movs	r3, #1
}
    1d82:	4618      	mov	r0, r3
    1d84:	b002      	add	sp, #8
    1d86:	4770      	bx	lr

00001d88 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1d88:	b082      	sub	sp, #8
    1d8a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1d8c:	bf00      	nop
    1d8e:	b002      	add	sp, #8
    1d90:	4770      	bx	lr

00001d92 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1d92:	b082      	sub	sp, #8
    1d94:	9001      	str	r0, [sp, #4]
    return Micros;
    1d96:	9b01      	ldr	r3, [sp, #4]
}
    1d98:	4618      	mov	r0, r3
    1d9a:	b002      	add	sp, #8
    1d9c:	4770      	bx	lr

00001d9e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1d9e:	b500      	push	{lr}
    1da0:	b083      	sub	sp, #12
    1da2:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1da4:	f000 f86c 	bl	1e80 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1da8:	bf00      	nop
    1daa:	b003      	add	sp, #12
    1dac:	f85d fb04 	ldr.w	pc, [sp], #4

00001db0 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1db0:	b500      	push	{lr}
    1db2:	b085      	sub	sp, #20
    1db4:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1db6:	2300      	movs	r3, #0
    1db8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1dba:	9b01      	ldr	r3, [sp, #4]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d003      	beq.n	1dc8 <OsIf_GetCounter+0x18>
    1dc0:	9b01      	ldr	r3, [sp, #4]
    1dc2:	2b01      	cmp	r3, #1
    1dc4:	d004      	beq.n	1dd0 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1dc6:	e007      	b.n	1dd8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1dc8:	f7ff ffd5 	bl	1d76 <OsIf_Timer_Dummy_GetCounter>
    1dcc:	9003      	str	r0, [sp, #12]
            break;
    1dce:	e003      	b.n	1dd8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1dd0:	f000 f872 	bl	1eb8 <OsIf_Timer_System_GetCounter>
    1dd4:	9003      	str	r0, [sp, #12]
            break;
    1dd6:	bf00      	nop
    }

    return Value;
    1dd8:	9b03      	ldr	r3, [sp, #12]
}
    1dda:	4618      	mov	r0, r3
    1ddc:	b005      	add	sp, #20
    1dde:	f85d fb04 	ldr.w	pc, [sp], #4

00001de2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1de2:	b500      	push	{lr}
    1de4:	b085      	sub	sp, #20
    1de6:	9001      	str	r0, [sp, #4]
    1de8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1dea:	2300      	movs	r3, #0
    1dec:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1dee:	9b00      	ldr	r3, [sp, #0]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d003      	beq.n	1dfc <OsIf_GetElapsed+0x1a>
    1df4:	9b00      	ldr	r3, [sp, #0]
    1df6:	2b01      	cmp	r3, #1
    1df8:	d005      	beq.n	1e06 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1dfa:	e009      	b.n	1e10 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1dfc:	9801      	ldr	r0, [sp, #4]
    1dfe:	f7ff ffbd 	bl	1d7c <OsIf_Timer_Dummy_GetElapsed>
    1e02:	9003      	str	r0, [sp, #12]
            break;
    1e04:	e004      	b.n	1e10 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1e06:	9801      	ldr	r0, [sp, #4]
    1e08:	f000 f864 	bl	1ed4 <OsIf_Timer_System_GetElapsed>
    1e0c:	9003      	str	r0, [sp, #12]
            break;
    1e0e:	bf00      	nop
    }

    return Value;
    1e10:	9b03      	ldr	r3, [sp, #12]
}
    1e12:	4618      	mov	r0, r3
    1e14:	b005      	add	sp, #20
    1e16:	f85d fb04 	ldr.w	pc, [sp], #4

00001e1a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1e1a:	b500      	push	{lr}
    1e1c:	b083      	sub	sp, #12
    1e1e:	9001      	str	r0, [sp, #4]
    1e20:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1e22:	9b00      	ldr	r3, [sp, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d003      	beq.n	1e30 <OsIf_SetTimerFrequency+0x16>
    1e28:	9b00      	ldr	r3, [sp, #0]
    1e2a:	2b01      	cmp	r3, #1
    1e2c:	d004      	beq.n	1e38 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e2e:	e007      	b.n	1e40 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1e30:	9801      	ldr	r0, [sp, #4]
    1e32:	f7ff ffa9 	bl	1d88 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1e36:	e003      	b.n	1e40 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1e38:	9801      	ldr	r0, [sp, #4]
    1e3a:	f000 f85b 	bl	1ef4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1e3e:	bf00      	nop
    }
}
    1e40:	bf00      	nop
    1e42:	b003      	add	sp, #12
    1e44:	f85d fb04 	ldr.w	pc, [sp], #4

00001e48 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1e48:	b500      	push	{lr}
    1e4a:	b085      	sub	sp, #20
    1e4c:	9001      	str	r0, [sp, #4]
    1e4e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1e50:	2300      	movs	r3, #0
    1e52:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e54:	9b00      	ldr	r3, [sp, #0]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d003      	beq.n	1e62 <OsIf_MicrosToTicks+0x1a>
    1e5a:	9b00      	ldr	r3, [sp, #0]
    1e5c:	2b01      	cmp	r3, #1
    1e5e:	d005      	beq.n	1e6c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e60:	e009      	b.n	1e76 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1e62:	9801      	ldr	r0, [sp, #4]
    1e64:	f7ff ff95 	bl	1d92 <OsIf_Timer_Dummy_MicrosToTicks>
    1e68:	9003      	str	r0, [sp, #12]
            break;
    1e6a:	e004      	b.n	1e76 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1e6c:	9801      	ldr	r0, [sp, #4]
    1e6e:	f000 f84f 	bl	1f10 <OsIf_Timer_System_MicrosToTicks>
    1e72:	9003      	str	r0, [sp, #12]
            break;
    1e74:	bf00      	nop
    }

    return Value;
    1e76:	9b03      	ldr	r3, [sp, #12]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	b005      	add	sp, #20
    1e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00001e80 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1e80:	b500      	push	{lr}
    1e82:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1e84:	2300      	movs	r3, #0
    1e86:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1e88:	4a09      	ldr	r2, [pc, #36]	; (1eb0 <OsIf_Timer_System_Init+0x30>)
    1e8a:	9b01      	ldr	r3, [sp, #4]
    1e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e90:	685a      	ldr	r2, [r3, #4]
    1e92:	4908      	ldr	r1, [pc, #32]	; (1eb4 <OsIf_Timer_System_Init+0x34>)
    1e94:	9b01      	ldr	r3, [sp, #4]
    1e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1e9a:	4a06      	ldr	r2, [pc, #24]	; (1eb4 <OsIf_Timer_System_Init+0x34>)
    1e9c:	9b01      	ldr	r3, [sp, #4]
    1e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ea2:	4618      	mov	r0, r3
    1ea4:	f000 f868 	bl	1f78 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1ea8:	bf00      	nop
    1eaa:	b003      	add	sp, #12
    1eac:	f85d fb04 	ldr.w	pc, [sp], #4
    1eb0:	00010334 	.word	0x00010334
    1eb4:	1fff8b50 	.word	0x1fff8b50

00001eb8 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1eb8:	b500      	push	{lr}
    1eba:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1ebc:	2300      	movs	r3, #0
    1ebe:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ec0:	2300      	movs	r3, #0
    1ec2:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1ec4:	f000 f86c 	bl	1fa0 <OsIf_Timer_System_Internal_GetCounter>
    1ec8:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1eca:	9b01      	ldr	r3, [sp, #4]
}
    1ecc:	4618      	mov	r0, r3
    1ece:	b003      	add	sp, #12
    1ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ed4 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1ed4:	b500      	push	{lr}
    1ed6:	b085      	sub	sp, #20
    1ed8:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1eda:	2300      	movs	r3, #0
    1edc:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1ede:	2300      	movs	r3, #0
    1ee0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1ee2:	9801      	ldr	r0, [sp, #4]
    1ee4:	f000 f864 	bl	1fb0 <OsIf_Timer_System_Internal_GetElapsed>
    1ee8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1eea:	9b03      	ldr	r3, [sp, #12]
}
    1eec:	4618      	mov	r0, r3
    1eee:	b005      	add	sp, #20
    1ef0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ef4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1ef4:	b084      	sub	sp, #16
    1ef6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ef8:	2300      	movs	r3, #0
    1efa:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1efc:	4903      	ldr	r1, [pc, #12]	; (1f0c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1efe:	9b03      	ldr	r3, [sp, #12]
    1f00:	9a01      	ldr	r2, [sp, #4]
    1f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1f06:	bf00      	nop
    1f08:	b004      	add	sp, #16
    1f0a:	4770      	bx	lr
    1f0c:	1fff8b50 	.word	0x1fff8b50

00001f10 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f12:	b087      	sub	sp, #28
    1f14:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1f16:	2100      	movs	r1, #0
    1f18:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1f1a:	2100      	movs	r1, #0
    1f1c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1f1e:	9901      	ldr	r1, [sp, #4]
    1f20:	2000      	movs	r0, #0
    1f22:	460e      	mov	r6, r1
    1f24:	4607      	mov	r7, r0
    1f26:	4812      	ldr	r0, [pc, #72]	; (1f70 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1f28:	9904      	ldr	r1, [sp, #16]
    1f2a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1f2e:	2000      	movs	r0, #0
    1f30:	460c      	mov	r4, r1
    1f32:	4605      	mov	r5, r0
    1f34:	fb04 f007 	mul.w	r0, r4, r7
    1f38:	fb06 f105 	mul.w	r1, r6, r5
    1f3c:	4401      	add	r1, r0
    1f3e:	fba6 2304 	umull	r2, r3, r6, r4
    1f42:	4419      	add	r1, r3
    1f44:	460b      	mov	r3, r1
    1f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f52:	4a08      	ldr	r2, [pc, #32]	; (1f74 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1f54:	f04f 0300 	mov.w	r3, #0
    1f58:	f7fe fb24 	bl	5a4 <__aeabi_uldivmod>
    1f5c:	4602      	mov	r2, r0
    1f5e:	460b      	mov	r3, r1
    1f60:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1f64:	9b02      	ldr	r3, [sp, #8]
    1f66:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1f68:	9b05      	ldr	r3, [sp, #20]
}
    1f6a:	4618      	mov	r0, r3
    1f6c:	b007      	add	sp, #28
    1f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f70:	1fff8b50 	.word	0x1fff8b50
    1f74:	000f4240 	.word	0x000f4240

00001f78 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1f78:	b082      	sub	sp, #8
    1f7a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1f7c:	4b07      	ldr	r3, [pc, #28]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f7e:	2200      	movs	r2, #0
    1f80:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1f82:	4b06      	ldr	r3, [pc, #24]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f84:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1f88:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1f8a:	4b04      	ldr	r3, [pc, #16]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f8c:	2200      	movs	r2, #0
    1f8e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1f90:	4b02      	ldr	r3, [pc, #8]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f92:	2205      	movs	r2, #5
    1f94:	601a      	str	r2, [r3, #0]
}
    1f96:	bf00      	nop
    1f98:	b002      	add	sp, #8
    1f9a:	4770      	bx	lr
    1f9c:	e000e010 	.word	0xe000e010

00001fa0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1fa0:	4b02      	ldr	r3, [pc, #8]	; (1fac <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1fa2:	689b      	ldr	r3, [r3, #8]
    1fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1fa8:	4618      	mov	r0, r3
    1faa:	4770      	bx	lr
    1fac:	e000e010 	.word	0xe000e010

00001fb0 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1fb0:	b084      	sub	sp, #16
    1fb2:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1fb4:	4b10      	ldr	r3, [pc, #64]	; (1ff8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1fb6:	689b      	ldr	r3, [r3, #8]
    1fb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1fbc:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1fbe:	2300      	movs	r3, #0
    1fc0:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1fc2:	9b01      	ldr	r3, [sp, #4]
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	9a02      	ldr	r2, [sp, #8]
    1fc8:	429a      	cmp	r2, r3
    1fca:	d909      	bls.n	1fe0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1fcc:	9b01      	ldr	r3, [sp, #4]
    1fce:	681a      	ldr	r2, [r3, #0]
    1fd0:	9b02      	ldr	r3, [sp, #8]
    1fd2:	1ad3      	subs	r3, r2, r3
    1fd4:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1fd8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1fdc:	9303      	str	r3, [sp, #12]
    1fde:	e004      	b.n	1fea <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1fe0:	9b01      	ldr	r3, [sp, #4]
    1fe2:	681a      	ldr	r2, [r3, #0]
    1fe4:	9b02      	ldr	r3, [sp, #8]
    1fe6:	1ad3      	subs	r3, r2, r3
    1fe8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1fea:	9b01      	ldr	r3, [sp, #4]
    1fec:	9a02      	ldr	r2, [sp, #8]
    1fee:	601a      	str	r2, [r3, #0]

    return dif;
    1ff0:	9b03      	ldr	r3, [sp, #12]
}
    1ff2:	4618      	mov	r0, r3
    1ff4:	b004      	add	sp, #16
    1ff6:	4770      	bx	lr
    1ff8:	e000e010 	.word	0xe000e010

00001ffc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1ffc:	b082      	sub	sp, #8
    1ffe:	9001      	str	r0, [sp, #4]
    2000:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2002:	bf00      	nop
    2004:	b002      	add	sp, #8
    2006:	4770      	bx	lr

00002008 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2008:	b500      	push	{lr}
    200a:	b085      	sub	sp, #20
    200c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    200e:	4b24      	ldr	r3, [pc, #144]	; (20a0 <Clock_Ip_UpdateDriverContext+0x98>)
    2010:	2201      	movs	r2, #1
    2012:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2014:	4b23      	ldr	r3, [pc, #140]	; (20a4 <Clock_Ip_UpdateDriverContext+0x9c>)
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	2102      	movs	r1, #2
    201a:	4618      	mov	r0, r3
    201c:	f003 fc32 	bl	5884 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2020:	2300      	movs	r3, #0
    2022:	f88d 300f 	strb.w	r3, [sp, #15]
    2026:	e015      	b.n	2054 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2028:	f89d 300f 	ldrb.w	r3, [sp, #15]
    202c:	9a01      	ldr	r2, [sp, #4]
    202e:	334a      	adds	r3, #74	; 0x4a
    2030:	00db      	lsls	r3, r3, #3
    2032:	4413      	add	r3, r2
    2034:	6858      	ldr	r0, [r3, #4]
    2036:	f89d 300f 	ldrb.w	r3, [sp, #15]
    203a:	9a01      	ldr	r2, [sp, #4]
    203c:	334a      	adds	r3, #74	; 0x4a
    203e:	00db      	lsls	r3, r3, #3
    2040:	4413      	add	r3, r2
    2042:	689b      	ldr	r3, [r3, #8]
    2044:	4619      	mov	r1, r3
    2046:	f001 fadc 	bl	3602 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    204a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    204e:	3301      	adds	r3, #1
    2050:	f88d 300f 	strb.w	r3, [sp, #15]
    2054:	9b01      	ldr	r3, [sp, #4]
    2056:	7bdb      	ldrb	r3, [r3, #15]
    2058:	f89d 200f 	ldrb.w	r2, [sp, #15]
    205c:	429a      	cmp	r2, r3
    205e:	d3e3      	bcc.n	2028 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2060:	f000 f824 	bl	20ac <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2064:	2301      	movs	r3, #1
    2066:	f88d 300f 	strb.w	r3, [sp, #15]
    206a:	e00e      	b.n	208a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    206c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2070:	9b01      	ldr	r3, [sp, #4]
    2072:	327e      	adds	r2, #126	; 0x7e
    2074:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2078:	490b      	ldr	r1, [pc, #44]	; (20a8 <Clock_Ip_UpdateDriverContext+0xa0>)
    207a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    207e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2080:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2084:	3301      	adds	r3, #1
    2086:	f88d 300f 	strb.w	r3, [sp, #15]
    208a:	9b01      	ldr	r3, [sp, #4]
    208c:	7cdb      	ldrb	r3, [r3, #19]
    208e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2092:	429a      	cmp	r2, r3
    2094:	d3ea      	bcc.n	206c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2096:	bf00      	nop
    2098:	bf00      	nop
    209a:	b005      	add	sp, #20
    209c:	f85d fb04 	ldr.w	pc, [sp], #4
    20a0:	1fff8b10 	.word	0x1fff8b10
    20a4:	1fff8b54 	.word	0x1fff8b54
    20a8:	1fff8b60 	.word	0x1fff8b60

000020ac <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    20ac:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    20ae:	4b23      	ldr	r3, [pc, #140]	; (213c <Clock_Ip_CallEmptyCallbacks+0x90>)
    20b0:	781b      	ldrb	r3, [r3, #0]
    20b2:	f083 0301 	eor.w	r3, r3, #1
    20b6:	b2db      	uxtb	r3, r3
    20b8:	2b00      	cmp	r3, #0
    20ba:	d03d      	beq.n	2138 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    20bc:	4b1f      	ldr	r3, [pc, #124]	; (213c <Clock_Ip_CallEmptyCallbacks+0x90>)
    20be:	2201      	movs	r2, #1
    20c0:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    20c2:	4b1f      	ldr	r3, [pc, #124]	; (2140 <Clock_Ip_CallEmptyCallbacks+0x94>)
    20c4:	685b      	ldr	r3, [r3, #4]
    20c6:	2100      	movs	r1, #0
    20c8:	2000      	movs	r0, #0
    20ca:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    20cc:	4b1c      	ldr	r3, [pc, #112]	; (2140 <Clock_Ip_CallEmptyCallbacks+0x94>)
    20ce:	689b      	ldr	r3, [r3, #8]
    20d0:	2057      	movs	r0, #87	; 0x57
    20d2:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20d4:	4b1b      	ldr	r3, [pc, #108]	; (2144 <Clock_Ip_CallEmptyCallbacks+0x98>)
    20d6:	681b      	ldr	r3, [r3, #0]
    20d8:	2000      	movs	r0, #0
    20da:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    20dc:	4b1a      	ldr	r3, [pc, #104]	; (2148 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	2000      	movs	r0, #0
    20e2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    20e4:	4b19      	ldr	r3, [pc, #100]	; (214c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    20e6:	681b      	ldr	r3, [r3, #0]
    20e8:	2000      	movs	r0, #0
    20ea:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20ec:	4b18      	ldr	r3, [pc, #96]	; (2150 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    20ee:	685b      	ldr	r3, [r3, #4]
    20f0:	2000      	movs	r0, #0
    20f2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    20f4:	4b16      	ldr	r3, [pc, #88]	; (2150 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    20f6:	689b      	ldr	r3, [r3, #8]
    20f8:	2057      	movs	r0, #87	; 0x57
    20fa:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20fc:	4b15      	ldr	r3, [pc, #84]	; (2154 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    20fe:	681b      	ldr	r3, [r3, #0]
    2100:	2000      	movs	r0, #0
    2102:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2104:	4b13      	ldr	r3, [pc, #76]	; (2154 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2106:	685b      	ldr	r3, [r3, #4]
    2108:	2100      	movs	r1, #0
    210a:	2057      	movs	r0, #87	; 0x57
    210c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    210e:	4b12      	ldr	r3, [pc, #72]	; (2158 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	2000      	movs	r0, #0
    2114:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2116:	4b11      	ldr	r3, [pc, #68]	; (215c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2118:	685b      	ldr	r3, [r3, #4]
    211a:	2000      	movs	r0, #0
    211c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    211e:	4b0f      	ldr	r3, [pc, #60]	; (215c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2120:	689b      	ldr	r3, [r3, #8]
    2122:	2057      	movs	r0, #87	; 0x57
    2124:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2126:	4b0e      	ldr	r3, [pc, #56]	; (2160 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2128:	685b      	ldr	r3, [r3, #4]
    212a:	2000      	movs	r0, #0
    212c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    212e:	4b0d      	ldr	r3, [pc, #52]	; (2164 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2130:	681b      	ldr	r3, [r3, #0]
    2132:	2100      	movs	r1, #0
    2134:	2000      	movs	r0, #0
    2136:	4798      	blx	r3
    }
}
    2138:	bf00      	nop
    213a:	bd08      	pop	{r3, pc}
    213c:	1fff8b58 	.word	0x1fff8b58
    2140:	0000fba0 	.word	0x0000fba0
    2144:	0000fab4 	.word	0x0000fab4
    2148:	0000faf0 	.word	0x0000faf0
    214c:	0000faf8 	.word	0x0000faf8
    2150:	0000fb20 	.word	0x0000fb20
    2154:	0000fb2c 	.word	0x0000fb2c
    2158:	0000fb64 	.word	0x0000fb64
    215c:	0000fbb0 	.word	0x0000fbb0
    2160:	0000fbdc 	.word	0x0000fbdc
    2164:	0000fbd8 	.word	0x0000fbd8

00002168 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2168:	b500      	push	{lr}
    216a:	b085      	sub	sp, #20
    216c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    216e:	9b01      	ldr	r3, [sp, #4]
    2170:	7adb      	ldrb	r3, [r3, #11]
    2172:	9303      	str	r3, [sp, #12]
    2174:	e01f      	b.n	21b6 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2176:	9b03      	ldr	r3, [sp, #12]
    2178:	1e5a      	subs	r2, r3, #1
    217a:	9b01      	ldr	r3, [sp, #4]
    217c:	320d      	adds	r2, #13
    217e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2182:	495a      	ldr	r1, [pc, #360]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    2184:	4613      	mov	r3, r2
    2186:	00db      	lsls	r3, r3, #3
    2188:	4413      	add	r3, r2
    218a:	440b      	add	r3, r1
    218c:	3301      	adds	r3, #1
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	461a      	mov	r2, r3
    2192:	4b57      	ldr	r3, [pc, #348]	; (22f0 <Clock_Ip_ResetClockConfiguration+0x188>)
    2194:	5c9b      	ldrb	r3, [r3, r2]
    2196:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2198:	4a56      	ldr	r2, [pc, #344]	; (22f4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    219a:	9b02      	ldr	r3, [sp, #8]
    219c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    21a0:	9a03      	ldr	r2, [sp, #12]
    21a2:	3a01      	subs	r2, #1
    21a4:	320d      	adds	r2, #13
    21a6:	00d2      	lsls	r2, r2, #3
    21a8:	9901      	ldr	r1, [sp, #4]
    21aa:	440a      	add	r2, r1
    21ac:	4610      	mov	r0, r2
    21ae:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    21b0:	9b03      	ldr	r3, [sp, #12]
    21b2:	3b01      	subs	r3, #1
    21b4:	9303      	str	r3, [sp, #12]
    21b6:	9b03      	ldr	r3, [sp, #12]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d1dc      	bne.n	2176 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    21bc:	9b01      	ldr	r3, [sp, #4]
    21be:	7b9b      	ldrb	r3, [r3, #14]
    21c0:	9303      	str	r3, [sp, #12]
    21c2:	e026      	b.n	2212 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    21c4:	9b03      	ldr	r3, [sp, #12]
    21c6:	3b01      	subs	r3, #1
    21c8:	9a01      	ldr	r2, [sp, #4]
    21ca:	3324      	adds	r3, #36	; 0x24
    21cc:	011b      	lsls	r3, r3, #4
    21ce:	4413      	add	r3, r2
    21d0:	3304      	adds	r3, #4
    21d2:	681a      	ldr	r2, [r3, #0]
    21d4:	4945      	ldr	r1, [pc, #276]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    21d6:	4613      	mov	r3, r2
    21d8:	00db      	lsls	r3, r3, #3
    21da:	4413      	add	r3, r2
    21dc:	440b      	add	r3, r1
    21de:	3301      	adds	r3, #1
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	461a      	mov	r2, r3
    21e4:	4b44      	ldr	r3, [pc, #272]	; (22f8 <Clock_Ip_ResetClockConfiguration+0x190>)
    21e6:	5c9b      	ldrb	r3, [r3, r2]
    21e8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    21ea:	4944      	ldr	r1, [pc, #272]	; (22fc <Clock_Ip_ResetClockConfiguration+0x194>)
    21ec:	9a02      	ldr	r2, [sp, #8]
    21ee:	4613      	mov	r3, r2
    21f0:	005b      	lsls	r3, r3, #1
    21f2:	4413      	add	r3, r2
    21f4:	009b      	lsls	r3, r3, #2
    21f6:	440b      	add	r3, r1
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	9a03      	ldr	r2, [sp, #12]
    21fc:	3a01      	subs	r2, #1
    21fe:	3224      	adds	r2, #36	; 0x24
    2200:	0112      	lsls	r2, r2, #4
    2202:	9901      	ldr	r1, [sp, #4]
    2204:	440a      	add	r2, r1
    2206:	3204      	adds	r2, #4
    2208:	4610      	mov	r0, r2
    220a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    220c:	9b03      	ldr	r3, [sp, #12]
    220e:	3b01      	subs	r3, #1
    2210:	9303      	str	r3, [sp, #12]
    2212:	9b03      	ldr	r3, [sp, #12]
    2214:	2b00      	cmp	r3, #0
    2216:	d1d5      	bne.n	21c4 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	7a9b      	ldrb	r3, [r3, #10]
    221c:	9303      	str	r3, [sp, #12]
    221e:	e02a      	b.n	2276 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2220:	9b03      	ldr	r3, [sp, #12]
    2222:	1e5a      	subs	r2, r3, #1
    2224:	9901      	ldr	r1, [sp, #4]
    2226:	4613      	mov	r3, r2
    2228:	009b      	lsls	r3, r3, #2
    222a:	4413      	add	r3, r2
    222c:	00db      	lsls	r3, r3, #3
    222e:	440b      	add	r3, r1
    2230:	3340      	adds	r3, #64	; 0x40
    2232:	681a      	ldr	r2, [r3, #0]
    2234:	492d      	ldr	r1, [pc, #180]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    2236:	4613      	mov	r3, r2
    2238:	00db      	lsls	r3, r3, #3
    223a:	4413      	add	r3, r2
    223c:	440b      	add	r3, r1
    223e:	3301      	adds	r3, #1
    2240:	781b      	ldrb	r3, [r3, #0]
    2242:	461a      	mov	r2, r3
    2244:	4b2e      	ldr	r3, [pc, #184]	; (2300 <Clock_Ip_ResetClockConfiguration+0x198>)
    2246:	5c9b      	ldrb	r3, [r3, r2]
    2248:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    224a:	492e      	ldr	r1, [pc, #184]	; (2304 <Clock_Ip_ResetClockConfiguration+0x19c>)
    224c:	9a02      	ldr	r2, [sp, #8]
    224e:	4613      	mov	r3, r2
    2250:	009b      	lsls	r3, r3, #2
    2252:	4413      	add	r3, r2
    2254:	009b      	lsls	r3, r3, #2
    2256:	440b      	add	r3, r1
    2258:	6819      	ldr	r1, [r3, #0]
    225a:	9b03      	ldr	r3, [sp, #12]
    225c:	1e5a      	subs	r2, r3, #1
    225e:	4613      	mov	r3, r2
    2260:	009b      	lsls	r3, r3, #2
    2262:	4413      	add	r3, r2
    2264:	00db      	lsls	r3, r3, #3
    2266:	3340      	adds	r3, #64	; 0x40
    2268:	9a01      	ldr	r2, [sp, #4]
    226a:	4413      	add	r3, r2
    226c:	4618      	mov	r0, r3
    226e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2270:	9b03      	ldr	r3, [sp, #12]
    2272:	3b01      	subs	r3, #1
    2274:	9303      	str	r3, [sp, #12]
    2276:	9b03      	ldr	r3, [sp, #12]
    2278:	2b00      	cmp	r3, #0
    227a:	d1d1      	bne.n	2220 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    227c:	9b01      	ldr	r3, [sp, #4]
    227e:	7a5b      	ldrb	r3, [r3, #9]
    2280:	9303      	str	r3, [sp, #12]
    2282:	e02b      	b.n	22dc <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2284:	9b03      	ldr	r3, [sp, #12]
    2286:	1e5a      	subs	r2, r3, #1
    2288:	9901      	ldr	r1, [sp, #4]
    228a:	4613      	mov	r3, r2
    228c:	009b      	lsls	r3, r3, #2
    228e:	4413      	add	r3, r2
    2290:	009b      	lsls	r3, r3, #2
    2292:	440b      	add	r3, r1
    2294:	332c      	adds	r3, #44	; 0x2c
    2296:	681a      	ldr	r2, [r3, #0]
    2298:	4914      	ldr	r1, [pc, #80]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    229a:	4613      	mov	r3, r2
    229c:	00db      	lsls	r3, r3, #3
    229e:	4413      	add	r3, r2
    22a0:	440b      	add	r3, r1
    22a2:	3301      	adds	r3, #1
    22a4:	781b      	ldrb	r3, [r3, #0]
    22a6:	461a      	mov	r2, r3
    22a8:	4b17      	ldr	r3, [pc, #92]	; (2308 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    22aa:	5c9b      	ldrb	r3, [r3, r2]
    22ac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    22ae:	4917      	ldr	r1, [pc, #92]	; (230c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    22b0:	9a02      	ldr	r2, [sp, #8]
    22b2:	4613      	mov	r3, r2
    22b4:	009b      	lsls	r3, r3, #2
    22b6:	4413      	add	r3, r2
    22b8:	009b      	lsls	r3, r3, #2
    22ba:	440b      	add	r3, r1
    22bc:	6819      	ldr	r1, [r3, #0]
    22be:	9b03      	ldr	r3, [sp, #12]
    22c0:	1e5a      	subs	r2, r3, #1
    22c2:	4613      	mov	r3, r2
    22c4:	009b      	lsls	r3, r3, #2
    22c6:	4413      	add	r3, r2
    22c8:	009b      	lsls	r3, r3, #2
    22ca:	3328      	adds	r3, #40	; 0x28
    22cc:	9a01      	ldr	r2, [sp, #4]
    22ce:	4413      	add	r3, r2
    22d0:	3304      	adds	r3, #4
    22d2:	4618      	mov	r0, r3
    22d4:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    22d6:	9b03      	ldr	r3, [sp, #12]
    22d8:	3b01      	subs	r3, #1
    22da:	9303      	str	r3, [sp, #12]
    22dc:	9b03      	ldr	r3, [sp, #12]
    22de:	2b00      	cmp	r3, #0
    22e0:	d1d0      	bne.n	2284 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    22e2:	bf00      	nop
    22e4:	bf00      	nop
    22e6:	b005      	add	sp, #20
    22e8:	f85d fb04 	ldr.w	pc, [sp], #4
    22ec:	0000f5a4 	.word	0x0000f5a4
    22f0:	0000f574 	.word	0x0000f574
    22f4:	0000fbdc 	.word	0x0000fbdc
    22f8:	0000f554 	.word	0x0000f554
    22fc:	0000fb20 	.word	0x0000fb20
    2300:	0000f564 	.word	0x0000f564
    2304:	0000fbb0 	.word	0x0000fbb0
    2308:	0000f524 	.word	0x0000f524
    230c:	0000faf8 	.word	0x0000faf8

00002310 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2310:	b500      	push	{lr}
    2312:	b085      	sub	sp, #20
    2314:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2316:	2301      	movs	r3, #1
    2318:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    231a:	9801      	ldr	r0, [sp, #4]
    231c:	f000 f818 	bl	2350 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2320:	4b0a      	ldr	r3, [pc, #40]	; (234c <Clock_Ip_Init+0x3c>)
    2322:	781b      	ldrb	r3, [r3, #0]
    2324:	2b00      	cmp	r3, #0
    2326:	d00a      	beq.n	233e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2328:	f000 fb74 	bl	2a14 <Clock_Ip_GetPllStatus>
    232c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    232e:	9b02      	ldr	r3, [sp, #8]
    2330:	2b00      	cmp	r3, #0
    2332:	d106      	bne.n	2342 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2334:	f000 fbf2 	bl	2b1c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2338:	2300      	movs	r3, #0
    233a:	9303      	str	r3, [sp, #12]
    233c:	e001      	b.n	2342 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    233e:	2300      	movs	r3, #0
    2340:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2342:	9b03      	ldr	r3, [sp, #12]
}
    2344:	4618      	mov	r0, r3
    2346:	b005      	add	sp, #20
    2348:	f85d fb04 	ldr.w	pc, [sp], #4
    234c:	1fff8b5c 	.word	0x1fff8b5c

00002350 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2350:	b510      	push	{r4, lr}
    2352:	b084      	sub	sp, #16
    2354:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2356:	4a9f      	ldr	r2, [pc, #636]	; (25d4 <Clock_Ip_InitClock+0x284>)
    2358:	9b01      	ldr	r3, [sp, #4]
    235a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    235c:	2101      	movs	r1, #1
    235e:	9801      	ldr	r0, [sp, #4]
    2360:	f003 fa90 	bl	5884 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2364:	4b9b      	ldr	r3, [pc, #620]	; (25d4 <Clock_Ip_InitClock+0x284>)
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	2b00      	cmp	r3, #0
    236a:	d030      	beq.n	23ce <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    236c:	2300      	movs	r3, #0
    236e:	9303      	str	r3, [sp, #12]
    2370:	e027      	b.n	23c2 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2372:	9901      	ldr	r1, [sp, #4]
    2374:	9a03      	ldr	r2, [sp, #12]
    2376:	4613      	mov	r3, r2
    2378:	009b      	lsls	r3, r3, #2
    237a:	4413      	add	r3, r2
    237c:	009b      	lsls	r3, r3, #2
    237e:	440b      	add	r3, r1
    2380:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2384:	681a      	ldr	r2, [r3, #0]
    2386:	4994      	ldr	r1, [pc, #592]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2388:	4613      	mov	r3, r2
    238a:	00db      	lsls	r3, r3, #3
    238c:	4413      	add	r3, r2
    238e:	440b      	add	r3, r1
    2390:	3301      	adds	r3, #1
    2392:	781b      	ldrb	r3, [r3, #0]
    2394:	461a      	mov	r2, r3
    2396:	4b91      	ldr	r3, [pc, #580]	; (25dc <Clock_Ip_InitClock+0x28c>)
    2398:	5c9b      	ldrb	r3, [r3, r2]
    239a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    239c:	4a90      	ldr	r2, [pc, #576]	; (25e0 <Clock_Ip_InitClock+0x290>)
    239e:	9b02      	ldr	r3, [sp, #8]
    23a0:	011b      	lsls	r3, r3, #4
    23a2:	4413      	add	r3, r2
    23a4:	6819      	ldr	r1, [r3, #0]
    23a6:	9a03      	ldr	r2, [sp, #12]
    23a8:	4613      	mov	r3, r2
    23aa:	009b      	lsls	r3, r3, #2
    23ac:	4413      	add	r3, r2
    23ae:	009b      	lsls	r3, r3, #2
    23b0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    23b4:	9a01      	ldr	r2, [sp, #4]
    23b6:	4413      	add	r3, r2
    23b8:	4618      	mov	r0, r3
    23ba:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    23bc:	9b03      	ldr	r3, [sp, #12]
    23be:	3301      	adds	r3, #1
    23c0:	9303      	str	r3, [sp, #12]
    23c2:	9b01      	ldr	r3, [sp, #4]
    23c4:	7c9b      	ldrb	r3, [r3, #18]
    23c6:	461a      	mov	r2, r3
    23c8:	9b03      	ldr	r3, [sp, #12]
    23ca:	4293      	cmp	r3, r2
    23cc:	d3d1      	bcc.n	2372 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    23ce:	9801      	ldr	r0, [sp, #4]
    23d0:	f7ff feca 	bl	2168 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    23d4:	2300      	movs	r3, #0
    23d6:	9303      	str	r3, [sp, #12]
    23d8:	e029      	b.n	242e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    23da:	9901      	ldr	r1, [sp, #4]
    23dc:	9a03      	ldr	r2, [sp, #12]
    23de:	4613      	mov	r3, r2
    23e0:	005b      	lsls	r3, r3, #1
    23e2:	4413      	add	r3, r2
    23e4:	009b      	lsls	r3, r3, #2
    23e6:	440b      	add	r3, r1
    23e8:	3314      	adds	r3, #20
    23ea:	681a      	ldr	r2, [r3, #0]
    23ec:	497a      	ldr	r1, [pc, #488]	; (25d8 <Clock_Ip_InitClock+0x288>)
    23ee:	4613      	mov	r3, r2
    23f0:	00db      	lsls	r3, r3, #3
    23f2:	4413      	add	r3, r2
    23f4:	440b      	add	r3, r1
    23f6:	3301      	adds	r3, #1
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	461a      	mov	r2, r3
    23fc:	4b79      	ldr	r3, [pc, #484]	; (25e4 <Clock_Ip_InitClock+0x294>)
    23fe:	5c9b      	ldrb	r3, [r3, r2]
    2400:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2402:	4979      	ldr	r1, [pc, #484]	; (25e8 <Clock_Ip_InitClock+0x298>)
    2404:	9a02      	ldr	r2, [sp, #8]
    2406:	4613      	mov	r3, r2
    2408:	005b      	lsls	r3, r3, #1
    240a:	4413      	add	r3, r2
    240c:	009b      	lsls	r3, r3, #2
    240e:	440b      	add	r3, r1
    2410:	6819      	ldr	r1, [r3, #0]
    2412:	9a03      	ldr	r2, [sp, #12]
    2414:	4613      	mov	r3, r2
    2416:	005b      	lsls	r3, r3, #1
    2418:	4413      	add	r3, r2
    241a:	009b      	lsls	r3, r3, #2
    241c:	3310      	adds	r3, #16
    241e:	9a01      	ldr	r2, [sp, #4]
    2420:	4413      	add	r3, r2
    2422:	3304      	adds	r3, #4
    2424:	4618      	mov	r0, r3
    2426:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2428:	9b03      	ldr	r3, [sp, #12]
    242a:	3301      	adds	r3, #1
    242c:	9303      	str	r3, [sp, #12]
    242e:	9b01      	ldr	r3, [sp, #4]
    2430:	7a1b      	ldrb	r3, [r3, #8]
    2432:	461a      	mov	r2, r3
    2434:	9b03      	ldr	r3, [sp, #12]
    2436:	4293      	cmp	r3, r2
    2438:	d3cf      	bcc.n	23da <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    243a:	2300      	movs	r3, #0
    243c:	9303      	str	r3, [sp, #12]
    243e:	e02a      	b.n	2496 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2440:	9901      	ldr	r1, [sp, #4]
    2442:	9a03      	ldr	r2, [sp, #12]
    2444:	4613      	mov	r3, r2
    2446:	009b      	lsls	r3, r3, #2
    2448:	4413      	add	r3, r2
    244a:	009b      	lsls	r3, r3, #2
    244c:	440b      	add	r3, r1
    244e:	332c      	adds	r3, #44	; 0x2c
    2450:	681a      	ldr	r2, [r3, #0]
    2452:	4961      	ldr	r1, [pc, #388]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2454:	4613      	mov	r3, r2
    2456:	00db      	lsls	r3, r3, #3
    2458:	4413      	add	r3, r2
    245a:	440b      	add	r3, r1
    245c:	3301      	adds	r3, #1
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	461a      	mov	r2, r3
    2462:	4b62      	ldr	r3, [pc, #392]	; (25ec <Clock_Ip_InitClock+0x29c>)
    2464:	5c9b      	ldrb	r3, [r3, r2]
    2466:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2468:	4961      	ldr	r1, [pc, #388]	; (25f0 <Clock_Ip_InitClock+0x2a0>)
    246a:	9a02      	ldr	r2, [sp, #8]
    246c:	4613      	mov	r3, r2
    246e:	009b      	lsls	r3, r3, #2
    2470:	4413      	add	r3, r2
    2472:	009b      	lsls	r3, r3, #2
    2474:	440b      	add	r3, r1
    2476:	3304      	adds	r3, #4
    2478:	6819      	ldr	r1, [r3, #0]
    247a:	9a03      	ldr	r2, [sp, #12]
    247c:	4613      	mov	r3, r2
    247e:	009b      	lsls	r3, r3, #2
    2480:	4413      	add	r3, r2
    2482:	009b      	lsls	r3, r3, #2
    2484:	3328      	adds	r3, #40	; 0x28
    2486:	9a01      	ldr	r2, [sp, #4]
    2488:	4413      	add	r3, r2
    248a:	3304      	adds	r3, #4
    248c:	4618      	mov	r0, r3
    248e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2490:	9b03      	ldr	r3, [sp, #12]
    2492:	3301      	adds	r3, #1
    2494:	9303      	str	r3, [sp, #12]
    2496:	9b01      	ldr	r3, [sp, #4]
    2498:	7a5b      	ldrb	r3, [r3, #9]
    249a:	461a      	mov	r2, r3
    249c:	9b03      	ldr	r3, [sp, #12]
    249e:	4293      	cmp	r3, r2
    24a0:	d3ce      	bcc.n	2440 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    24a2:	9801      	ldr	r0, [sp, #4]
    24a4:	f7ff fdb0 	bl	2008 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    24a8:	2300      	movs	r3, #0
    24aa:	9303      	str	r3, [sp, #12]
    24ac:	e028      	b.n	2500 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    24ae:	9901      	ldr	r1, [sp, #4]
    24b0:	9a03      	ldr	r2, [sp, #12]
    24b2:	4613      	mov	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	4413      	add	r3, r2
    24b8:	009b      	lsls	r3, r3, #2
    24ba:	440b      	add	r3, r1
    24bc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    24c0:	681a      	ldr	r2, [r3, #0]
    24c2:	4945      	ldr	r1, [pc, #276]	; (25d8 <Clock_Ip_InitClock+0x288>)
    24c4:	4613      	mov	r3, r2
    24c6:	00db      	lsls	r3, r3, #3
    24c8:	4413      	add	r3, r2
    24ca:	440b      	add	r3, r1
    24cc:	3301      	adds	r3, #1
    24ce:	781b      	ldrb	r3, [r3, #0]
    24d0:	461a      	mov	r2, r3
    24d2:	4b48      	ldr	r3, [pc, #288]	; (25f4 <Clock_Ip_InitClock+0x2a4>)
    24d4:	5c9b      	ldrb	r3, [r3, r2]
    24d6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    24d8:	4a47      	ldr	r2, [pc, #284]	; (25f8 <Clock_Ip_InitClock+0x2a8>)
    24da:	9b02      	ldr	r3, [sp, #8]
    24dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    24e0:	9a03      	ldr	r2, [sp, #12]
    24e2:	4613      	mov	r3, r2
    24e4:	009b      	lsls	r3, r3, #2
    24e6:	4413      	add	r3, r2
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    24ee:	9a01      	ldr	r2, [sp, #4]
    24f0:	4413      	add	r3, r2
    24f2:	3304      	adds	r3, #4
    24f4:	9903      	ldr	r1, [sp, #12]
    24f6:	4618      	mov	r0, r3
    24f8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    24fa:	9b03      	ldr	r3, [sp, #12]
    24fc:	3301      	adds	r3, #1
    24fe:	9303      	str	r3, [sp, #12]
    2500:	9b01      	ldr	r3, [sp, #4]
    2502:	7c5b      	ldrb	r3, [r3, #17]
    2504:	461a      	mov	r2, r3
    2506:	9b03      	ldr	r3, [sp, #12]
    2508:	4293      	cmp	r3, r2
    250a:	d3d0      	bcc.n	24ae <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    250c:	2300      	movs	r3, #0
    250e:	9303      	str	r3, [sp, #12]
    2510:	e026      	b.n	2560 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2512:	9901      	ldr	r1, [sp, #4]
    2514:	9a03      	ldr	r2, [sp, #12]
    2516:	4613      	mov	r3, r2
    2518:	005b      	lsls	r3, r3, #1
    251a:	4413      	add	r3, r2
    251c:	009b      	lsls	r3, r3, #2
    251e:	440b      	add	r3, r1
    2520:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2524:	681a      	ldr	r2, [r3, #0]
    2526:	492c      	ldr	r1, [pc, #176]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2528:	4613      	mov	r3, r2
    252a:	00db      	lsls	r3, r3, #3
    252c:	4413      	add	r3, r2
    252e:	440b      	add	r3, r1
    2530:	3301      	adds	r3, #1
    2532:	781b      	ldrb	r3, [r3, #0]
    2534:	461a      	mov	r2, r3
    2536:	4b31      	ldr	r3, [pc, #196]	; (25fc <Clock_Ip_InitClock+0x2ac>)
    2538:	5c9b      	ldrb	r3, [r3, r2]
    253a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    253c:	4a30      	ldr	r2, [pc, #192]	; (2600 <Clock_Ip_InitClock+0x2b0>)
    253e:	9b02      	ldr	r3, [sp, #8]
    2540:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2544:	9a03      	ldr	r2, [sp, #12]
    2546:	4613      	mov	r3, r2
    2548:	005b      	lsls	r3, r3, #1
    254a:	4413      	add	r3, r2
    254c:	009b      	lsls	r3, r3, #2
    254e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2552:	9a01      	ldr	r2, [sp, #4]
    2554:	4413      	add	r3, r2
    2556:	4618      	mov	r0, r3
    2558:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    255a:	9b03      	ldr	r3, [sp, #12]
    255c:	3301      	adds	r3, #1
    255e:	9303      	str	r3, [sp, #12]
    2560:	9b01      	ldr	r3, [sp, #4]
    2562:	7b5b      	ldrb	r3, [r3, #13]
    2564:	461a      	mov	r2, r3
    2566:	9b03      	ldr	r3, [sp, #12]
    2568:	4293      	cmp	r3, r2
    256a:	d3d2      	bcc.n	2512 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    256c:	2300      	movs	r3, #0
    256e:	9303      	str	r3, [sp, #12]
    2570:	e026      	b.n	25c0 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2572:	9901      	ldr	r1, [sp, #4]
    2574:	9a03      	ldr	r2, [sp, #12]
    2576:	4613      	mov	r3, r2
    2578:	005b      	lsls	r3, r3, #1
    257a:	4413      	add	r3, r2
    257c:	009b      	lsls	r3, r3, #2
    257e:	440b      	add	r3, r1
    2580:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2584:	681a      	ldr	r2, [r3, #0]
    2586:	4914      	ldr	r1, [pc, #80]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2588:	4613      	mov	r3, r2
    258a:	00db      	lsls	r3, r3, #3
    258c:	4413      	add	r3, r2
    258e:	440b      	add	r3, r1
    2590:	3301      	adds	r3, #1
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	461a      	mov	r2, r3
    2596:	4b1b      	ldr	r3, [pc, #108]	; (2604 <Clock_Ip_InitClock+0x2b4>)
    2598:	5c9b      	ldrb	r3, [r3, r2]
    259a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    259c:	4a1a      	ldr	r2, [pc, #104]	; (2608 <Clock_Ip_InitClock+0x2b8>)
    259e:	9b02      	ldr	r3, [sp, #8]
    25a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    25a4:	9a03      	ldr	r2, [sp, #12]
    25a6:	4613      	mov	r3, r2
    25a8:	005b      	lsls	r3, r3, #1
    25aa:	4413      	add	r3, r2
    25ac:	009b      	lsls	r3, r3, #2
    25ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    25b2:	9a01      	ldr	r2, [sp, #4]
    25b4:	4413      	add	r3, r2
    25b6:	4618      	mov	r0, r3
    25b8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    25ba:	9b03      	ldr	r3, [sp, #12]
    25bc:	3301      	adds	r3, #1
    25be:	9303      	str	r3, [sp, #12]
    25c0:	9b01      	ldr	r3, [sp, #4]
    25c2:	7b1b      	ldrb	r3, [r3, #12]
    25c4:	461a      	mov	r2, r3
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	4293      	cmp	r3, r2
    25ca:	d3d2      	bcc.n	2572 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    25cc:	2300      	movs	r3, #0
    25ce:	9303      	str	r3, [sp, #12]
    25d0:	e044      	b.n	265c <Clock_Ip_InitClock+0x30c>
    25d2:	bf00      	nop
    25d4:	1fff8b54 	.word	0x1fff8b54
    25d8:	0000f5a4 	.word	0x0000f5a4
    25dc:	0000f594 	.word	0x0000f594
    25e0:	0000fba0 	.word	0x0000fba0
    25e4:	0000f534 	.word	0x0000f534
    25e8:	0000fb64 	.word	0x0000fb64
    25ec:	0000f524 	.word	0x0000f524
    25f0:	0000faf8 	.word	0x0000faf8
    25f4:	0000f584 	.word	0x0000f584
    25f8:	0000fbd8 	.word	0x0000fbd8
    25fc:	0000f514 	.word	0x0000f514
    2600:	0000faf0 	.word	0x0000faf0
    2604:	0000f504 	.word	0x0000f504
    2608:	0000fab4 	.word	0x0000fab4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    260c:	9901      	ldr	r1, [sp, #4]
    260e:	9a03      	ldr	r2, [sp, #12]
    2610:	4613      	mov	r3, r2
    2612:	005b      	lsls	r3, r3, #1
    2614:	4413      	add	r3, r2
    2616:	009b      	lsls	r3, r3, #2
    2618:	440b      	add	r3, r1
    261a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    261e:	681a      	ldr	r2, [r3, #0]
    2620:	49ac      	ldr	r1, [pc, #688]	; (28d4 <Clock_Ip_InitClock+0x584>)
    2622:	4613      	mov	r3, r2
    2624:	00db      	lsls	r3, r3, #3
    2626:	4413      	add	r3, r2
    2628:	440b      	add	r3, r1
    262a:	3301      	adds	r3, #1
    262c:	781b      	ldrb	r3, [r3, #0]
    262e:	461a      	mov	r2, r3
    2630:	4ba9      	ldr	r3, [pc, #676]	; (28d8 <Clock_Ip_InitClock+0x588>)
    2632:	5c9b      	ldrb	r3, [r3, r2]
    2634:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2636:	4aa9      	ldr	r2, [pc, #676]	; (28dc <Clock_Ip_InitClock+0x58c>)
    2638:	9b02      	ldr	r3, [sp, #8]
    263a:	00db      	lsls	r3, r3, #3
    263c:	4413      	add	r3, r2
    263e:	6859      	ldr	r1, [r3, #4]
    2640:	9a03      	ldr	r2, [sp, #12]
    2642:	4613      	mov	r3, r2
    2644:	005b      	lsls	r3, r3, #1
    2646:	4413      	add	r3, r2
    2648:	009b      	lsls	r3, r3, #2
    264a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    264e:	9a01      	ldr	r2, [sp, #4]
    2650:	4413      	add	r3, r2
    2652:	4618      	mov	r0, r3
    2654:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2656:	9b03      	ldr	r3, [sp, #12]
    2658:	3301      	adds	r3, #1
    265a:	9303      	str	r3, [sp, #12]
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	7b5b      	ldrb	r3, [r3, #13]
    2660:	461a      	mov	r2, r3
    2662:	9b03      	ldr	r3, [sp, #12]
    2664:	4293      	cmp	r3, r2
    2666:	d3d1      	bcc.n	260c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2668:	2300      	movs	r3, #0
    266a:	9303      	str	r3, [sp, #12]
    266c:	e029      	b.n	26c2 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    266e:	9901      	ldr	r1, [sp, #4]
    2670:	9a03      	ldr	r2, [sp, #12]
    2672:	4613      	mov	r3, r2
    2674:	009b      	lsls	r3, r3, #2
    2676:	4413      	add	r3, r2
    2678:	00db      	lsls	r3, r3, #3
    267a:	440b      	add	r3, r1
    267c:	3340      	adds	r3, #64	; 0x40
    267e:	681a      	ldr	r2, [r3, #0]
    2680:	4994      	ldr	r1, [pc, #592]	; (28d4 <Clock_Ip_InitClock+0x584>)
    2682:	4613      	mov	r3, r2
    2684:	00db      	lsls	r3, r3, #3
    2686:	4413      	add	r3, r2
    2688:	440b      	add	r3, r1
    268a:	3301      	adds	r3, #1
    268c:	781b      	ldrb	r3, [r3, #0]
    268e:	461a      	mov	r2, r3
    2690:	4b93      	ldr	r3, [pc, #588]	; (28e0 <Clock_Ip_InitClock+0x590>)
    2692:	5c9b      	ldrb	r3, [r3, r2]
    2694:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2696:	4993      	ldr	r1, [pc, #588]	; (28e4 <Clock_Ip_InitClock+0x594>)
    2698:	9a02      	ldr	r2, [sp, #8]
    269a:	4613      	mov	r3, r2
    269c:	009b      	lsls	r3, r3, #2
    269e:	4413      	add	r3, r2
    26a0:	009b      	lsls	r3, r3, #2
    26a2:	440b      	add	r3, r1
    26a4:	3304      	adds	r3, #4
    26a6:	6819      	ldr	r1, [r3, #0]
    26a8:	9a03      	ldr	r2, [sp, #12]
    26aa:	4613      	mov	r3, r2
    26ac:	009b      	lsls	r3, r3, #2
    26ae:	4413      	add	r3, r2
    26b0:	00db      	lsls	r3, r3, #3
    26b2:	3340      	adds	r3, #64	; 0x40
    26b4:	9a01      	ldr	r2, [sp, #4]
    26b6:	4413      	add	r3, r2
    26b8:	4618      	mov	r0, r3
    26ba:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    26bc:	9b03      	ldr	r3, [sp, #12]
    26be:	3301      	adds	r3, #1
    26c0:	9303      	str	r3, [sp, #12]
    26c2:	9b01      	ldr	r3, [sp, #4]
    26c4:	7a9b      	ldrb	r3, [r3, #10]
    26c6:	461a      	mov	r2, r3
    26c8:	9b03      	ldr	r3, [sp, #12]
    26ca:	4293      	cmp	r3, r2
    26cc:	d3cf      	bcc.n	266e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    26ce:	2300      	movs	r3, #0
    26d0:	9303      	str	r3, [sp, #12]
    26d2:	e029      	b.n	2728 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    26d4:	9901      	ldr	r1, [sp, #4]
    26d6:	9a03      	ldr	r2, [sp, #12]
    26d8:	4613      	mov	r3, r2
    26da:	009b      	lsls	r3, r3, #2
    26dc:	4413      	add	r3, r2
    26de:	009b      	lsls	r3, r3, #2
    26e0:	440b      	add	r3, r1
    26e2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26e6:	681a      	ldr	r2, [r3, #0]
    26e8:	497a      	ldr	r1, [pc, #488]	; (28d4 <Clock_Ip_InitClock+0x584>)
    26ea:	4613      	mov	r3, r2
    26ec:	00db      	lsls	r3, r3, #3
    26ee:	4413      	add	r3, r2
    26f0:	440b      	add	r3, r1
    26f2:	3301      	adds	r3, #1
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	461a      	mov	r2, r3
    26f8:	4b7b      	ldr	r3, [pc, #492]	; (28e8 <Clock_Ip_InitClock+0x598>)
    26fa:	5c9b      	ldrb	r3, [r3, r2]
    26fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    26fe:	4a7b      	ldr	r2, [pc, #492]	; (28ec <Clock_Ip_InitClock+0x59c>)
    2700:	9b02      	ldr	r3, [sp, #8]
    2702:	011b      	lsls	r3, r3, #4
    2704:	4413      	add	r3, r2
    2706:	3304      	adds	r3, #4
    2708:	681c      	ldr	r4, [r3, #0]
    270a:	9a03      	ldr	r2, [sp, #12]
    270c:	4613      	mov	r3, r2
    270e:	009b      	lsls	r3, r3, #2
    2710:	4413      	add	r3, r2
    2712:	009b      	lsls	r3, r3, #2
    2714:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2718:	9a01      	ldr	r2, [sp, #4]
    271a:	4413      	add	r3, r2
    271c:	9903      	ldr	r1, [sp, #12]
    271e:	4618      	mov	r0, r3
    2720:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2722:	9b03      	ldr	r3, [sp, #12]
    2724:	3301      	adds	r3, #1
    2726:	9303      	str	r3, [sp, #12]
    2728:	9b01      	ldr	r3, [sp, #4]
    272a:	7c9b      	ldrb	r3, [r3, #18]
    272c:	461a      	mov	r2, r3
    272e:	9b03      	ldr	r3, [sp, #12]
    2730:	4293      	cmp	r3, r2
    2732:	d3cf      	bcc.n	26d4 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2734:	2300      	movs	r3, #0
    2736:	9303      	str	r3, [sp, #12]
    2738:	e02a      	b.n	2790 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    273a:	9901      	ldr	r1, [sp, #4]
    273c:	9a03      	ldr	r2, [sp, #12]
    273e:	4613      	mov	r3, r2
    2740:	009b      	lsls	r3, r3, #2
    2742:	4413      	add	r3, r2
    2744:	009b      	lsls	r3, r3, #2
    2746:	440b      	add	r3, r1
    2748:	332c      	adds	r3, #44	; 0x2c
    274a:	681a      	ldr	r2, [r3, #0]
    274c:	4961      	ldr	r1, [pc, #388]	; (28d4 <Clock_Ip_InitClock+0x584>)
    274e:	4613      	mov	r3, r2
    2750:	00db      	lsls	r3, r3, #3
    2752:	4413      	add	r3, r2
    2754:	440b      	add	r3, r1
    2756:	3301      	adds	r3, #1
    2758:	781b      	ldrb	r3, [r3, #0]
    275a:	461a      	mov	r2, r3
    275c:	4b64      	ldr	r3, [pc, #400]	; (28f0 <Clock_Ip_InitClock+0x5a0>)
    275e:	5c9b      	ldrb	r3, [r3, r2]
    2760:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2762:	4964      	ldr	r1, [pc, #400]	; (28f4 <Clock_Ip_InitClock+0x5a4>)
    2764:	9a02      	ldr	r2, [sp, #8]
    2766:	4613      	mov	r3, r2
    2768:	009b      	lsls	r3, r3, #2
    276a:	4413      	add	r3, r2
    276c:	009b      	lsls	r3, r3, #2
    276e:	440b      	add	r3, r1
    2770:	3308      	adds	r3, #8
    2772:	6819      	ldr	r1, [r3, #0]
    2774:	9a03      	ldr	r2, [sp, #12]
    2776:	4613      	mov	r3, r2
    2778:	009b      	lsls	r3, r3, #2
    277a:	4413      	add	r3, r2
    277c:	009b      	lsls	r3, r3, #2
    277e:	3328      	adds	r3, #40	; 0x28
    2780:	9a01      	ldr	r2, [sp, #4]
    2782:	4413      	add	r3, r2
    2784:	3304      	adds	r3, #4
    2786:	4618      	mov	r0, r3
    2788:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    278a:	9b03      	ldr	r3, [sp, #12]
    278c:	3301      	adds	r3, #1
    278e:	9303      	str	r3, [sp, #12]
    2790:	9b01      	ldr	r3, [sp, #4]
    2792:	7a5b      	ldrb	r3, [r3, #9]
    2794:	461a      	mov	r2, r3
    2796:	9b03      	ldr	r3, [sp, #12]
    2798:	4293      	cmp	r3, r2
    279a:	d3ce      	bcc.n	273a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    279c:	2300      	movs	r3, #0
    279e:	9303      	str	r3, [sp, #12]
    27a0:	e029      	b.n	27f6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    27a2:	9901      	ldr	r1, [sp, #4]
    27a4:	9a03      	ldr	r2, [sp, #12]
    27a6:	4613      	mov	r3, r2
    27a8:	009b      	lsls	r3, r3, #2
    27aa:	4413      	add	r3, r2
    27ac:	00db      	lsls	r3, r3, #3
    27ae:	440b      	add	r3, r1
    27b0:	3340      	adds	r3, #64	; 0x40
    27b2:	681a      	ldr	r2, [r3, #0]
    27b4:	4947      	ldr	r1, [pc, #284]	; (28d4 <Clock_Ip_InitClock+0x584>)
    27b6:	4613      	mov	r3, r2
    27b8:	00db      	lsls	r3, r3, #3
    27ba:	4413      	add	r3, r2
    27bc:	440b      	add	r3, r1
    27be:	3301      	adds	r3, #1
    27c0:	781b      	ldrb	r3, [r3, #0]
    27c2:	461a      	mov	r2, r3
    27c4:	4b46      	ldr	r3, [pc, #280]	; (28e0 <Clock_Ip_InitClock+0x590>)
    27c6:	5c9b      	ldrb	r3, [r3, r2]
    27c8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    27ca:	4946      	ldr	r1, [pc, #280]	; (28e4 <Clock_Ip_InitClock+0x594>)
    27cc:	9a02      	ldr	r2, [sp, #8]
    27ce:	4613      	mov	r3, r2
    27d0:	009b      	lsls	r3, r3, #2
    27d2:	4413      	add	r3, r2
    27d4:	009b      	lsls	r3, r3, #2
    27d6:	440b      	add	r3, r1
    27d8:	330c      	adds	r3, #12
    27da:	6819      	ldr	r1, [r3, #0]
    27dc:	9a03      	ldr	r2, [sp, #12]
    27de:	4613      	mov	r3, r2
    27e0:	009b      	lsls	r3, r3, #2
    27e2:	4413      	add	r3, r2
    27e4:	00db      	lsls	r3, r3, #3
    27e6:	3340      	adds	r3, #64	; 0x40
    27e8:	9a01      	ldr	r2, [sp, #4]
    27ea:	4413      	add	r3, r2
    27ec:	4618      	mov	r0, r3
    27ee:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    27f0:	9b03      	ldr	r3, [sp, #12]
    27f2:	3301      	adds	r3, #1
    27f4:	9303      	str	r3, [sp, #12]
    27f6:	9b01      	ldr	r3, [sp, #4]
    27f8:	7a9b      	ldrb	r3, [r3, #10]
    27fa:	461a      	mov	r2, r3
    27fc:	9b03      	ldr	r3, [sp, #12]
    27fe:	4293      	cmp	r3, r2
    2800:	d3cf      	bcc.n	27a2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2802:	2300      	movs	r3, #0
    2804:	9303      	str	r3, [sp, #12]
    2806:	e025      	b.n	2854 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2808:	9a01      	ldr	r2, [sp, #4]
    280a:	9b03      	ldr	r3, [sp, #12]
    280c:	3324      	adds	r3, #36	; 0x24
    280e:	011b      	lsls	r3, r3, #4
    2810:	4413      	add	r3, r2
    2812:	3304      	adds	r3, #4
    2814:	681a      	ldr	r2, [r3, #0]
    2816:	492f      	ldr	r1, [pc, #188]	; (28d4 <Clock_Ip_InitClock+0x584>)
    2818:	4613      	mov	r3, r2
    281a:	00db      	lsls	r3, r3, #3
    281c:	4413      	add	r3, r2
    281e:	440b      	add	r3, r1
    2820:	3301      	adds	r3, #1
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	461a      	mov	r2, r3
    2826:	4b34      	ldr	r3, [pc, #208]	; (28f8 <Clock_Ip_InitClock+0x5a8>)
    2828:	5c9b      	ldrb	r3, [r3, r2]
    282a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    282c:	4933      	ldr	r1, [pc, #204]	; (28fc <Clock_Ip_InitClock+0x5ac>)
    282e:	9a02      	ldr	r2, [sp, #8]
    2830:	4613      	mov	r3, r2
    2832:	005b      	lsls	r3, r3, #1
    2834:	4413      	add	r3, r2
    2836:	009b      	lsls	r3, r3, #2
    2838:	440b      	add	r3, r1
    283a:	3304      	adds	r3, #4
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	9a03      	ldr	r2, [sp, #12]
    2840:	3224      	adds	r2, #36	; 0x24
    2842:	0112      	lsls	r2, r2, #4
    2844:	9901      	ldr	r1, [sp, #4]
    2846:	440a      	add	r2, r1
    2848:	3204      	adds	r2, #4
    284a:	4610      	mov	r0, r2
    284c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    284e:	9b03      	ldr	r3, [sp, #12]
    2850:	3301      	adds	r3, #1
    2852:	9303      	str	r3, [sp, #12]
    2854:	9b01      	ldr	r3, [sp, #4]
    2856:	7b9b      	ldrb	r3, [r3, #14]
    2858:	461a      	mov	r2, r3
    285a:	9b03      	ldr	r3, [sp, #12]
    285c:	4293      	cmp	r3, r2
    285e:	d3d3      	bcc.n	2808 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2860:	4b27      	ldr	r3, [pc, #156]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    2862:	2200      	movs	r2, #0
    2864:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2866:	4b26      	ldr	r3, [pc, #152]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    2868:	2200      	movs	r2, #0
    286a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    286c:	4b24      	ldr	r3, [pc, #144]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    286e:	2201      	movs	r2, #1
    2870:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2872:	4b23      	ldr	r3, [pc, #140]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    2874:	2200      	movs	r2, #0
    2876:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2878:	f000 fa9c 	bl	2db4 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    287c:	2300      	movs	r3, #0
    287e:	9303      	str	r3, [sp, #12]
    2880:	e04c      	b.n	291c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2882:	9a01      	ldr	r2, [sp, #4]
    2884:	9b03      	ldr	r3, [sp, #12]
    2886:	330d      	adds	r3, #13
    2888:	00db      	lsls	r3, r3, #3
    288a:	4413      	add	r3, r2
    288c:	685b      	ldr	r3, [r3, #4]
    288e:	4a1d      	ldr	r2, [pc, #116]	; (2904 <Clock_Ip_InitClock+0x5b4>)
    2890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2894:	2b03      	cmp	r3, #3
    2896:	d03b      	beq.n	2910 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2898:	9b01      	ldr	r3, [sp, #4]
    289a:	9a03      	ldr	r2, [sp, #12]
    289c:	320d      	adds	r2, #13
    289e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    28a2:	490c      	ldr	r1, [pc, #48]	; (28d4 <Clock_Ip_InitClock+0x584>)
    28a4:	4613      	mov	r3, r2
    28a6:	00db      	lsls	r3, r3, #3
    28a8:	4413      	add	r3, r2
    28aa:	440b      	add	r3, r1
    28ac:	3301      	adds	r3, #1
    28ae:	781b      	ldrb	r3, [r3, #0]
    28b0:	461a      	mov	r2, r3
    28b2:	4b15      	ldr	r3, [pc, #84]	; (2908 <Clock_Ip_InitClock+0x5b8>)
    28b4:	5c9b      	ldrb	r3, [r3, r2]
    28b6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    28b8:	4a14      	ldr	r2, [pc, #80]	; (290c <Clock_Ip_InitClock+0x5bc>)
    28ba:	9b02      	ldr	r3, [sp, #8]
    28bc:	00db      	lsls	r3, r3, #3
    28be:	4413      	add	r3, r2
    28c0:	685b      	ldr	r3, [r3, #4]
    28c2:	9a03      	ldr	r2, [sp, #12]
    28c4:	320d      	adds	r2, #13
    28c6:	00d2      	lsls	r2, r2, #3
    28c8:	9901      	ldr	r1, [sp, #4]
    28ca:	440a      	add	r2, r1
    28cc:	4610      	mov	r0, r2
    28ce:	4798      	blx	r3
    28d0:	e021      	b.n	2916 <Clock_Ip_InitClock+0x5c6>
    28d2:	bf00      	nop
    28d4:	0000f5a4 	.word	0x0000f5a4
    28d8:	0000f514 	.word	0x0000f514
    28dc:	0000faf0 	.word	0x0000faf0
    28e0:	0000f564 	.word	0x0000f564
    28e4:	0000fbb0 	.word	0x0000fbb0
    28e8:	0000f594 	.word	0x0000f594
    28ec:	0000fba0 	.word	0x0000fba0
    28f0:	0000f524 	.word	0x0000f524
    28f4:	0000faf8 	.word	0x0000faf8
    28f8:	0000f554 	.word	0x0000f554
    28fc:	0000fb20 	.word	0x0000fb20
    2900:	1fff8b5c 	.word	0x1fff8b5c
    2904:	0000f9f0 	.word	0x0000f9f0
    2908:	0000f574 	.word	0x0000f574
    290c:	0000fbdc 	.word	0x0000fbdc
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2910:	4b3a      	ldr	r3, [pc, #232]	; (29fc <Clock_Ip_InitClock+0x6ac>)
    2912:	2201      	movs	r2, #1
    2914:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2916:	9b03      	ldr	r3, [sp, #12]
    2918:	3301      	adds	r3, #1
    291a:	9303      	str	r3, [sp, #12]
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	7adb      	ldrb	r3, [r3, #11]
    2920:	461a      	mov	r2, r3
    2922:	9b03      	ldr	r3, [sp, #12]
    2924:	4293      	cmp	r3, r2
    2926:	d3ac      	bcc.n	2882 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2928:	4b34      	ldr	r3, [pc, #208]	; (29fc <Clock_Ip_InitClock+0x6ac>)
    292a:	781b      	ldrb	r3, [r3, #0]
    292c:	f083 0301 	eor.w	r3, r3, #1
    2930:	b2db      	uxtb	r3, r3
    2932:	2b00      	cmp	r3, #0
    2934:	d05e      	beq.n	29f4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2936:	2300      	movs	r3, #0
    2938:	9303      	str	r3, [sp, #12]
    293a:	e01f      	b.n	297c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    293c:	9a01      	ldr	r2, [sp, #4]
    293e:	9b03      	ldr	r3, [sp, #12]
    2940:	334e      	adds	r3, #78	; 0x4e
    2942:	00db      	lsls	r3, r3, #3
    2944:	4413      	add	r3, r2
    2946:	685a      	ldr	r2, [r3, #4]
    2948:	492d      	ldr	r1, [pc, #180]	; (2a00 <Clock_Ip_InitClock+0x6b0>)
    294a:	4613      	mov	r3, r2
    294c:	00db      	lsls	r3, r3, #3
    294e:	4413      	add	r3, r2
    2950:	440b      	add	r3, r1
    2952:	3301      	adds	r3, #1
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	461a      	mov	r2, r3
    2958:	4b2a      	ldr	r3, [pc, #168]	; (2a04 <Clock_Ip_InitClock+0x6b4>)
    295a:	5c9b      	ldrb	r3, [r3, r2]
    295c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    295e:	4a2a      	ldr	r2, [pc, #168]	; (2a08 <Clock_Ip_InitClock+0x6b8>)
    2960:	9b02      	ldr	r3, [sp, #8]
    2962:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2966:	9a03      	ldr	r2, [sp, #12]
    2968:	324e      	adds	r2, #78	; 0x4e
    296a:	00d2      	lsls	r2, r2, #3
    296c:	9901      	ldr	r1, [sp, #4]
    296e:	440a      	add	r2, r1
    2970:	3204      	adds	r2, #4
    2972:	4610      	mov	r0, r2
    2974:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2976:	9b03      	ldr	r3, [sp, #12]
    2978:	3301      	adds	r3, #1
    297a:	9303      	str	r3, [sp, #12]
    297c:	9b01      	ldr	r3, [sp, #4]
    297e:	7c1b      	ldrb	r3, [r3, #16]
    2980:	461a      	mov	r2, r3
    2982:	9b03      	ldr	r3, [sp, #12]
    2984:	4293      	cmp	r3, r2
    2986:	d3d9      	bcc.n	293c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2988:	2300      	movs	r3, #0
    298a:	9303      	str	r3, [sp, #12]
    298c:	e028      	b.n	29e0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    298e:	9901      	ldr	r1, [sp, #4]
    2990:	9a03      	ldr	r2, [sp, #12]
    2992:	4613      	mov	r3, r2
    2994:	009b      	lsls	r3, r3, #2
    2996:	4413      	add	r3, r2
    2998:	009b      	lsls	r3, r3, #2
    299a:	440b      	add	r3, r1
    299c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29a0:	681a      	ldr	r2, [r3, #0]
    29a2:	4917      	ldr	r1, [pc, #92]	; (2a00 <Clock_Ip_InitClock+0x6b0>)
    29a4:	4613      	mov	r3, r2
    29a6:	00db      	lsls	r3, r3, #3
    29a8:	4413      	add	r3, r2
    29aa:	440b      	add	r3, r1
    29ac:	3301      	adds	r3, #1
    29ae:	781b      	ldrb	r3, [r3, #0]
    29b0:	461a      	mov	r2, r3
    29b2:	4b16      	ldr	r3, [pc, #88]	; (2a0c <Clock_Ip_InitClock+0x6bc>)
    29b4:	5c9b      	ldrb	r3, [r3, r2]
    29b6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    29b8:	4a15      	ldr	r2, [pc, #84]	; (2a10 <Clock_Ip_InitClock+0x6c0>)
    29ba:	9b02      	ldr	r3, [sp, #8]
    29bc:	011b      	lsls	r3, r3, #4
    29be:	4413      	add	r3, r2
    29c0:	330c      	adds	r3, #12
    29c2:	6819      	ldr	r1, [r3, #0]
    29c4:	9a03      	ldr	r2, [sp, #12]
    29c6:	4613      	mov	r3, r2
    29c8:	009b      	lsls	r3, r3, #2
    29ca:	4413      	add	r3, r2
    29cc:	009b      	lsls	r3, r3, #2
    29ce:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29d2:	9a01      	ldr	r2, [sp, #4]
    29d4:	4413      	add	r3, r2
    29d6:	4618      	mov	r0, r3
    29d8:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    29da:	9b03      	ldr	r3, [sp, #12]
    29dc:	3301      	adds	r3, #1
    29de:	9303      	str	r3, [sp, #12]
    29e0:	9b01      	ldr	r3, [sp, #4]
    29e2:	7c9b      	ldrb	r3, [r3, #18]
    29e4:	461a      	mov	r2, r3
    29e6:	9b03      	ldr	r3, [sp, #12]
    29e8:	4293      	cmp	r3, r2
    29ea:	d3d0      	bcc.n	298e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    29ec:	2104      	movs	r1, #4
    29ee:	9801      	ldr	r0, [sp, #4]
    29f0:	f002 ff48 	bl	5884 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    29f4:	bf00      	nop
    29f6:	b004      	add	sp, #16
    29f8:	bd10      	pop	{r4, pc}
    29fa:	bf00      	nop
    29fc:	1fff8b5c 	.word	0x1fff8b5c
    2a00:	0000f5a4 	.word	0x0000f5a4
    2a04:	0000f544 	.word	0x0000f544
    2a08:	0000fb2c 	.word	0x0000fb2c
    2a0c:	0000f594 	.word	0x0000f594
    2a10:	0000fba0 	.word	0x0000fba0

00002a14 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2a14:	b500      	push	{lr}
    2a16:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2a18:	2302      	movs	r3, #2
    2a1a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2a1c:	2300      	movs	r3, #0
    2a1e:	9304      	str	r3, [sp, #16]
    2a20:	e02c      	b.n	2a7c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2a22:	4a36      	ldr	r2, [pc, #216]	; (2afc <Clock_Ip_GetPllStatus+0xe8>)
    2a24:	9b04      	ldr	r3, [sp, #16]
    2a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2a2a:	4935      	ldr	r1, [pc, #212]	; (2b00 <Clock_Ip_GetPllStatus+0xec>)
    2a2c:	4613      	mov	r3, r2
    2a2e:	00db      	lsls	r3, r3, #3
    2a30:	4413      	add	r3, r2
    2a32:	440b      	add	r3, r1
    2a34:	3301      	adds	r3, #1
    2a36:	781b      	ldrb	r3, [r3, #0]
    2a38:	461a      	mov	r2, r3
    2a3a:	4b32      	ldr	r3, [pc, #200]	; (2b04 <Clock_Ip_GetPllStatus+0xf0>)
    2a3c:	5c9b      	ldrb	r3, [r3, r2]
    2a3e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2a40:	4931      	ldr	r1, [pc, #196]	; (2b08 <Clock_Ip_GetPllStatus+0xf4>)
    2a42:	9a03      	ldr	r2, [sp, #12]
    2a44:	4613      	mov	r3, r2
    2a46:	009b      	lsls	r3, r3, #2
    2a48:	4413      	add	r3, r2
    2a4a:	009b      	lsls	r3, r3, #2
    2a4c:	440b      	add	r3, r1
    2a4e:	3308      	adds	r3, #8
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	492a      	ldr	r1, [pc, #168]	; (2afc <Clock_Ip_GetPllStatus+0xe8>)
    2a54:	9a04      	ldr	r2, [sp, #16]
    2a56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2a5a:	4610      	mov	r0, r2
    2a5c:	4798      	blx	r3
    2a5e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2a60:	9b02      	ldr	r3, [sp, #8]
    2a62:	2b01      	cmp	r3, #1
    2a64:	d102      	bne.n	2a6c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2a66:	2301      	movs	r3, #1
    2a68:	9305      	str	r3, [sp, #20]
            break;
    2a6a:	e00d      	b.n	2a88 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2a6c:	9b02      	ldr	r3, [sp, #8]
    2a6e:	2b02      	cmp	r3, #2
    2a70:	d101      	bne.n	2a76 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2a72:	2300      	movs	r3, #0
    2a74:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2a76:	9b04      	ldr	r3, [sp, #16]
    2a78:	3301      	adds	r3, #1
    2a7a:	9304      	str	r3, [sp, #16]
    2a7c:	4b23      	ldr	r3, [pc, #140]	; (2b0c <Clock_Ip_GetPllStatus+0xf8>)
    2a7e:	789b      	ldrb	r3, [r3, #2]
    2a80:	461a      	mov	r2, r3
    2a82:	9b04      	ldr	r3, [sp, #16]
    2a84:	4293      	cmp	r3, r2
    2a86:	d3cc      	bcc.n	2a22 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2a88:	9b05      	ldr	r3, [sp, #20]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d130      	bne.n	2af0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2a8e:	2300      	movs	r3, #0
    2a90:	9304      	str	r3, [sp, #16]
    2a92:	e027      	b.n	2ae4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2a94:	4a1e      	ldr	r2, [pc, #120]	; (2b10 <Clock_Ip_GetPllStatus+0xfc>)
    2a96:	9b04      	ldr	r3, [sp, #16]
    2a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2a9c:	4918      	ldr	r1, [pc, #96]	; (2b00 <Clock_Ip_GetPllStatus+0xec>)
    2a9e:	4613      	mov	r3, r2
    2aa0:	00db      	lsls	r3, r3, #3
    2aa2:	4413      	add	r3, r2
    2aa4:	440b      	add	r3, r1
    2aa6:	3301      	adds	r3, #1
    2aa8:	781b      	ldrb	r3, [r3, #0]
    2aaa:	461a      	mov	r2, r3
    2aac:	4b19      	ldr	r3, [pc, #100]	; (2b14 <Clock_Ip_GetPllStatus+0x100>)
    2aae:	5c9b      	ldrb	r3, [r3, r2]
    2ab0:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2ab2:	4919      	ldr	r1, [pc, #100]	; (2b18 <Clock_Ip_GetPllStatus+0x104>)
    2ab4:	9a03      	ldr	r2, [sp, #12]
    2ab6:	4613      	mov	r3, r2
    2ab8:	005b      	lsls	r3, r3, #1
    2aba:	4413      	add	r3, r2
    2abc:	009b      	lsls	r3, r3, #2
    2abe:	440b      	add	r3, r1
    2ac0:	3308      	adds	r3, #8
    2ac2:	681b      	ldr	r3, [r3, #0]
    2ac4:	4912      	ldr	r1, [pc, #72]	; (2b10 <Clock_Ip_GetPllStatus+0xfc>)
    2ac6:	9a04      	ldr	r2, [sp, #16]
    2ac8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2acc:	4610      	mov	r0, r2
    2ace:	4798      	blx	r3
    2ad0:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2ad2:	9b01      	ldr	r3, [sp, #4]
    2ad4:	2b01      	cmp	r3, #1
    2ad6:	d102      	bne.n	2ade <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2ad8:	2301      	movs	r3, #1
    2ada:	9305      	str	r3, [sp, #20]
                break;
    2adc:	e008      	b.n	2af0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2ade:	9b04      	ldr	r3, [sp, #16]
    2ae0:	3301      	adds	r3, #1
    2ae2:	9304      	str	r3, [sp, #16]
    2ae4:	4b09      	ldr	r3, [pc, #36]	; (2b0c <Clock_Ip_GetPllStatus+0xf8>)
    2ae6:	78db      	ldrb	r3, [r3, #3]
    2ae8:	461a      	mov	r2, r3
    2aea:	9b04      	ldr	r3, [sp, #16]
    2aec:	4293      	cmp	r3, r2
    2aee:	d3d1      	bcc.n	2a94 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2af0:	9b05      	ldr	r3, [sp, #20]
}
    2af2:	4618      	mov	r0, r3
    2af4:	b007      	add	sp, #28
    2af6:	f85d fb04 	ldr.w	pc, [sp], #4
    2afa:	bf00      	nop
    2afc:	0000faac 	.word	0x0000faac
    2b00:	0000f5a4 	.word	0x0000f5a4
    2b04:	0000f564 	.word	0x0000f564
    2b08:	0000fbb0 	.word	0x0000fbb0
    2b0c:	1fff8b5c 	.word	0x1fff8b5c
    2b10:	0000fab0 	.word	0x0000fab0
    2b14:	0000f554 	.word	0x0000f554
    2b18:	0000fb20 	.word	0x0000fb20

00002b1c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2b1c:	b500      	push	{lr}
    2b1e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2b20:	4b55      	ldr	r3, [pc, #340]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	2b00      	cmp	r3, #0
    2b26:	f000 80a2 	beq.w	2c6e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2b2a:	2300      	movs	r3, #0
    2b2c:	9301      	str	r3, [sp, #4]
    2b2e:	e02c      	b.n	2b8a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2b30:	4b51      	ldr	r3, [pc, #324]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b32:	681a      	ldr	r2, [r3, #0]
    2b34:	9b01      	ldr	r3, [sp, #4]
    2b36:	330d      	adds	r3, #13
    2b38:	00db      	lsls	r3, r3, #3
    2b3a:	4413      	add	r3, r2
    2b3c:	685b      	ldr	r3, [r3, #4]
    2b3e:	4a4f      	ldr	r2, [pc, #316]	; (2c7c <Clock_Ip_DistributePll+0x160>)
    2b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b44:	2b03      	cmp	r3, #3
    2b46:	d11d      	bne.n	2b84 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2b48:	4b4b      	ldr	r3, [pc, #300]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	9a01      	ldr	r2, [sp, #4]
    2b4e:	320d      	adds	r2, #13
    2b50:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2b54:	494a      	ldr	r1, [pc, #296]	; (2c80 <Clock_Ip_DistributePll+0x164>)
    2b56:	4613      	mov	r3, r2
    2b58:	00db      	lsls	r3, r3, #3
    2b5a:	4413      	add	r3, r2
    2b5c:	440b      	add	r3, r1
    2b5e:	3301      	adds	r3, #1
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	461a      	mov	r2, r3
    2b64:	4b47      	ldr	r3, [pc, #284]	; (2c84 <Clock_Ip_DistributePll+0x168>)
    2b66:	5c9b      	ldrb	r3, [r3, r2]
    2b68:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2b6a:	4a47      	ldr	r2, [pc, #284]	; (2c88 <Clock_Ip_DistributePll+0x16c>)
    2b6c:	9b00      	ldr	r3, [sp, #0]
    2b6e:	00db      	lsls	r3, r3, #3
    2b70:	4413      	add	r3, r2
    2b72:	685b      	ldr	r3, [r3, #4]
    2b74:	4a40      	ldr	r2, [pc, #256]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b76:	6811      	ldr	r1, [r2, #0]
    2b78:	9a01      	ldr	r2, [sp, #4]
    2b7a:	320d      	adds	r2, #13
    2b7c:	00d2      	lsls	r2, r2, #3
    2b7e:	440a      	add	r2, r1
    2b80:	4610      	mov	r0, r2
    2b82:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2b84:	9b01      	ldr	r3, [sp, #4]
    2b86:	3301      	adds	r3, #1
    2b88:	9301      	str	r3, [sp, #4]
    2b8a:	4b3b      	ldr	r3, [pc, #236]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b8c:	681b      	ldr	r3, [r3, #0]
    2b8e:	7adb      	ldrb	r3, [r3, #11]
    2b90:	461a      	mov	r2, r3
    2b92:	9b01      	ldr	r3, [sp, #4]
    2b94:	4293      	cmp	r3, r2
    2b96:	d3cb      	bcc.n	2b30 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2b98:	4b3c      	ldr	r3, [pc, #240]	; (2c8c <Clock_Ip_DistributePll+0x170>)
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d066      	beq.n	2c6e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2ba0:	2300      	movs	r3, #0
    2ba2:	9301      	str	r3, [sp, #4]
    2ba4:	e021      	b.n	2bea <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2ba6:	4b34      	ldr	r3, [pc, #208]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2ba8:	681a      	ldr	r2, [r3, #0]
    2baa:	9b01      	ldr	r3, [sp, #4]
    2bac:	334e      	adds	r3, #78	; 0x4e
    2bae:	00db      	lsls	r3, r3, #3
    2bb0:	4413      	add	r3, r2
    2bb2:	685a      	ldr	r2, [r3, #4]
    2bb4:	4932      	ldr	r1, [pc, #200]	; (2c80 <Clock_Ip_DistributePll+0x164>)
    2bb6:	4613      	mov	r3, r2
    2bb8:	00db      	lsls	r3, r3, #3
    2bba:	4413      	add	r3, r2
    2bbc:	440b      	add	r3, r1
    2bbe:	3301      	adds	r3, #1
    2bc0:	781b      	ldrb	r3, [r3, #0]
    2bc2:	461a      	mov	r2, r3
    2bc4:	4b32      	ldr	r3, [pc, #200]	; (2c90 <Clock_Ip_DistributePll+0x174>)
    2bc6:	5c9b      	ldrb	r3, [r3, r2]
    2bc8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2bca:	4a32      	ldr	r2, [pc, #200]	; (2c94 <Clock_Ip_DistributePll+0x178>)
    2bcc:	9b00      	ldr	r3, [sp, #0]
    2bce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2bd2:	4a29      	ldr	r2, [pc, #164]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2bd4:	6811      	ldr	r1, [r2, #0]
    2bd6:	9a01      	ldr	r2, [sp, #4]
    2bd8:	324e      	adds	r2, #78	; 0x4e
    2bda:	00d2      	lsls	r2, r2, #3
    2bdc:	440a      	add	r2, r1
    2bde:	3204      	adds	r2, #4
    2be0:	4610      	mov	r0, r2
    2be2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	3301      	adds	r3, #1
    2be8:	9301      	str	r3, [sp, #4]
    2bea:	4b23      	ldr	r3, [pc, #140]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	7c1b      	ldrb	r3, [r3, #16]
    2bf0:	461a      	mov	r2, r3
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	4293      	cmp	r3, r2
    2bf6:	d3d6      	bcc.n	2ba6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2bf8:	2300      	movs	r3, #0
    2bfa:	9301      	str	r3, [sp, #4]
    2bfc:	e02a      	b.n	2c54 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2bfe:	4b1e      	ldr	r3, [pc, #120]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c00:	6819      	ldr	r1, [r3, #0]
    2c02:	9a01      	ldr	r2, [sp, #4]
    2c04:	4613      	mov	r3, r2
    2c06:	009b      	lsls	r3, r3, #2
    2c08:	4413      	add	r3, r2
    2c0a:	009b      	lsls	r3, r3, #2
    2c0c:	440b      	add	r3, r1
    2c0e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c12:	681a      	ldr	r2, [r3, #0]
    2c14:	491a      	ldr	r1, [pc, #104]	; (2c80 <Clock_Ip_DistributePll+0x164>)
    2c16:	4613      	mov	r3, r2
    2c18:	00db      	lsls	r3, r3, #3
    2c1a:	4413      	add	r3, r2
    2c1c:	440b      	add	r3, r1
    2c1e:	3301      	adds	r3, #1
    2c20:	781b      	ldrb	r3, [r3, #0]
    2c22:	461a      	mov	r2, r3
    2c24:	4b1c      	ldr	r3, [pc, #112]	; (2c98 <Clock_Ip_DistributePll+0x17c>)
    2c26:	5c9b      	ldrb	r3, [r3, r2]
    2c28:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2c2a:	4a1c      	ldr	r2, [pc, #112]	; (2c9c <Clock_Ip_DistributePll+0x180>)
    2c2c:	9b00      	ldr	r3, [sp, #0]
    2c2e:	011b      	lsls	r3, r3, #4
    2c30:	4413      	add	r3, r2
    2c32:	330c      	adds	r3, #12
    2c34:	6819      	ldr	r1, [r3, #0]
    2c36:	4b10      	ldr	r3, [pc, #64]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c38:	6818      	ldr	r0, [r3, #0]
    2c3a:	9a01      	ldr	r2, [sp, #4]
    2c3c:	4613      	mov	r3, r2
    2c3e:	009b      	lsls	r3, r3, #2
    2c40:	4413      	add	r3, r2
    2c42:	009b      	lsls	r3, r3, #2
    2c44:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c48:	4403      	add	r3, r0
    2c4a:	4618      	mov	r0, r3
    2c4c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2c4e:	9b01      	ldr	r3, [sp, #4]
    2c50:	3301      	adds	r3, #1
    2c52:	9301      	str	r3, [sp, #4]
    2c54:	4b08      	ldr	r3, [pc, #32]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c56:	681b      	ldr	r3, [r3, #0]
    2c58:	7c9b      	ldrb	r3, [r3, #18]
    2c5a:	461a      	mov	r2, r3
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	4293      	cmp	r3, r2
    2c60:	d3cd      	bcc.n	2bfe <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2c62:	4b05      	ldr	r3, [pc, #20]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	2104      	movs	r1, #4
    2c68:	4618      	mov	r0, r3
    2c6a:	f002 fe0b 	bl	5884 <Clock_Ip_Command>
        }
    }
}
    2c6e:	bf00      	nop
    2c70:	b003      	add	sp, #12
    2c72:	f85d fb04 	ldr.w	pc, [sp], #4
    2c76:	bf00      	nop
    2c78:	1fff8b54 	.word	0x1fff8b54
    2c7c:	0000f9f0 	.word	0x0000f9f0
    2c80:	0000f5a4 	.word	0x0000f5a4
    2c84:	0000f574 	.word	0x0000f574
    2c88:	0000fbdc 	.word	0x0000fbdc
    2c8c:	1fff8b5c 	.word	0x1fff8b5c
    2c90:	0000f544 	.word	0x0000f544
    2c94:	0000fb2c 	.word	0x0000fb2c
    2c98:	0000f594 	.word	0x0000f594
    2c9c:	0000fba0 	.word	0x0000fba0

00002ca0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2ca0:	b500      	push	{lr}
    2ca2:	b085      	sub	sp, #20
    2ca4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ca6:	490c      	ldr	r1, [pc, #48]	; (2cd8 <Clock_Ip_DisableClockMonitor+0x38>)
    2ca8:	9a01      	ldr	r2, [sp, #4]
    2caa:	4613      	mov	r3, r2
    2cac:	00db      	lsls	r3, r3, #3
    2cae:	4413      	add	r3, r2
    2cb0:	440b      	add	r3, r1
    2cb2:	3301      	adds	r3, #1
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	461a      	mov	r2, r3
    2cb8:	4b08      	ldr	r3, [pc, #32]	; (2cdc <Clock_Ip_DisableClockMonitor+0x3c>)
    2cba:	5c9b      	ldrb	r3, [r3, r2]
    2cbc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2cbe:	4a08      	ldr	r2, [pc, #32]	; (2ce0 <Clock_Ip_DisableClockMonitor+0x40>)
    2cc0:	9b03      	ldr	r3, [sp, #12]
    2cc2:	011b      	lsls	r3, r3, #4
    2cc4:	4413      	add	r3, r2
    2cc6:	3308      	adds	r3, #8
    2cc8:	681b      	ldr	r3, [r3, #0]
    2cca:	9801      	ldr	r0, [sp, #4]
    2ccc:	4798      	blx	r3
}
    2cce:	bf00      	nop
    2cd0:	b005      	add	sp, #20
    2cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    2cd6:	bf00      	nop
    2cd8:	0000f5a4 	.word	0x0000f5a4
    2cdc:	0000f594 	.word	0x0000f594
    2ce0:	0000fba0 	.word	0x0000fba0

00002ce4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2ce4:	b082      	sub	sp, #8
    2ce6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2ce8:	4a02      	ldr	r2, [pc, #8]	; (2cf4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2cea:	9b01      	ldr	r3, [sp, #4]
    2cec:	6013      	str	r3, [r2, #0]
}
    2cee:	bf00      	nop
    2cf0:	b002      	add	sp, #8
    2cf2:	4770      	bx	lr
    2cf4:	1fff8b14 	.word	0x1fff8b14

00002cf8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2cf8:	b500      	push	{lr}
    2cfa:	b085      	sub	sp, #20
    2cfc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2cfe:	490c      	ldr	r1, [pc, #48]	; (2d30 <Clock_Ip_DisableModuleClock+0x38>)
    2d00:	9a01      	ldr	r2, [sp, #4]
    2d02:	4613      	mov	r3, r2
    2d04:	00db      	lsls	r3, r3, #3
    2d06:	4413      	add	r3, r2
    2d08:	440b      	add	r3, r1
    2d0a:	3301      	adds	r3, #1
    2d0c:	781b      	ldrb	r3, [r3, #0]
    2d0e:	461a      	mov	r2, r3
    2d10:	4b08      	ldr	r3, [pc, #32]	; (2d34 <Clock_Ip_DisableModuleClock+0x3c>)
    2d12:	5c9b      	ldrb	r3, [r3, r2]
    2d14:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2d16:	4a08      	ldr	r2, [pc, #32]	; (2d38 <Clock_Ip_DisableModuleClock+0x40>)
    2d18:	9b03      	ldr	r3, [sp, #12]
    2d1a:	00db      	lsls	r3, r3, #3
    2d1c:	4413      	add	r3, r2
    2d1e:	685b      	ldr	r3, [r3, #4]
    2d20:	2101      	movs	r1, #1
    2d22:	9801      	ldr	r0, [sp, #4]
    2d24:	4798      	blx	r3
}
    2d26:	bf00      	nop
    2d28:	b005      	add	sp, #20
    2d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2d2e:	bf00      	nop
    2d30:	0000f5a4 	.word	0x0000f5a4
    2d34:	0000f544 	.word	0x0000f544
    2d38:	0000fb2c 	.word	0x0000fb2c

00002d3c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2d3c:	b500      	push	{lr}
    2d3e:	b085      	sub	sp, #20
    2d40:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d42:	490c      	ldr	r1, [pc, #48]	; (2d74 <Clock_Ip_EnableModuleClock+0x38>)
    2d44:	9a01      	ldr	r2, [sp, #4]
    2d46:	4613      	mov	r3, r2
    2d48:	00db      	lsls	r3, r3, #3
    2d4a:	4413      	add	r3, r2
    2d4c:	440b      	add	r3, r1
    2d4e:	3301      	adds	r3, #1
    2d50:	781b      	ldrb	r3, [r3, #0]
    2d52:	461a      	mov	r2, r3
    2d54:	4b08      	ldr	r3, [pc, #32]	; (2d78 <Clock_Ip_EnableModuleClock+0x3c>)
    2d56:	5c9b      	ldrb	r3, [r3, r2]
    2d58:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2d5a:	4a08      	ldr	r2, [pc, #32]	; (2d7c <Clock_Ip_EnableModuleClock+0x40>)
    2d5c:	9b03      	ldr	r3, [sp, #12]
    2d5e:	00db      	lsls	r3, r3, #3
    2d60:	4413      	add	r3, r2
    2d62:	685b      	ldr	r3, [r3, #4]
    2d64:	2100      	movs	r1, #0
    2d66:	9801      	ldr	r0, [sp, #4]
    2d68:	4798      	blx	r3
}
    2d6a:	bf00      	nop
    2d6c:	b005      	add	sp, #20
    2d6e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d72:	bf00      	nop
    2d74:	0000f5a4 	.word	0x0000f5a4
    2d78:	0000f544 	.word	0x0000f544
    2d7c:	0000fb2c 	.word	0x0000fb2c

00002d80 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2d80:	b500      	push	{lr}
    2d82:	b083      	sub	sp, #12
    2d84:	9001      	str	r0, [sp, #4]
    2d86:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2d88:	4b08      	ldr	r3, [pc, #32]	; (2dac <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2d8a:	2200      	movs	r2, #0
    2d8c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2d8e:	4b08      	ldr	r3, [pc, #32]	; (2db0 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	2102      	movs	r1, #2
    2d94:	4618      	mov	r0, r3
    2d96:	f002 fd75 	bl	5884 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2d9a:	9900      	ldr	r1, [sp, #0]
    2d9c:	9801      	ldr	r0, [sp, #4]
    2d9e:	f002 fc51 	bl	5644 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2da2:	bf00      	nop
    2da4:	b003      	add	sp, #12
    2da6:	f85d fb04 	ldr.w	pc, [sp], #4
    2daa:	bf00      	nop
    2dac:	1fff8b10 	.word	0x1fff8b10
    2db0:	1fff8b54 	.word	0x1fff8b54

00002db4 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2db4:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2db6:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2dba:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2dbc:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <Clock_Ip_SetWaitStates+0x24>)
    2dbe:	785b      	ldrb	r3, [r3, #1]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d005      	beq.n	2dd0 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2dc4:	9b01      	ldr	r3, [sp, #4]
    2dc6:	3b01      	subs	r3, #1
    2dc8:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2dca:	9b01      	ldr	r3, [sp, #4]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d1f9      	bne.n	2dc4 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2dd0:	bf00      	nop
    2dd2:	b002      	add	sp, #8
    2dd4:	4770      	bx	lr
    2dd6:	bf00      	nop
    2dd8:	1fff8b5c 	.word	0x1fff8b5c

00002ddc <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2ddc:	b500      	push	{lr}
    2dde:	b083      	sub	sp, #12
    2de0:	9001      	str	r0, [sp, #4]
    2de2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2de4:	4b04      	ldr	r3, [pc, #16]	; (2df8 <Clock_Ip_ReportClockErrors+0x1c>)
    2de6:	681b      	ldr	r3, [r3, #0]
    2de8:	9900      	ldr	r1, [sp, #0]
    2dea:	9801      	ldr	r0, [sp, #4]
    2dec:	4798      	blx	r3
}
    2dee:	bf00      	nop
    2df0:	b003      	add	sp, #12
    2df2:	f85d fb04 	ldr.w	pc, [sp], #4
    2df6:	bf00      	nop
    2df8:	1fff8b14 	.word	0x1fff8b14

00002dfc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2dfc:	b500      	push	{lr}
    2dfe:	b085      	sub	sp, #20
    2e00:	9003      	str	r0, [sp, #12]
    2e02:	9102      	str	r1, [sp, #8]
    2e04:	9201      	str	r2, [sp, #4]
    2e06:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2e08:	2000      	movs	r0, #0
    2e0a:	f7fe ffd1 	bl	1db0 <OsIf_GetCounter>
    2e0e:	4602      	mov	r2, r0
    2e10:	9b03      	ldr	r3, [sp, #12]
    2e12:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2e14:	9b02      	ldr	r3, [sp, #8]
    2e16:	2200      	movs	r2, #0
    2e18:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2e1a:	2100      	movs	r1, #0
    2e1c:	9800      	ldr	r0, [sp, #0]
    2e1e:	f7ff f813 	bl	1e48 <OsIf_MicrosToTicks>
    2e22:	4602      	mov	r2, r0
    2e24:	9b01      	ldr	r3, [sp, #4]
    2e26:	601a      	str	r2, [r3, #0]
}
    2e28:	bf00      	nop
    2e2a:	b005      	add	sp, #20
    2e2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e30 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2e30:	b500      	push	{lr}
    2e32:	b087      	sub	sp, #28
    2e34:	9003      	str	r0, [sp, #12]
    2e36:	9102      	str	r1, [sp, #8]
    2e38:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2e3a:	2300      	movs	r3, #0
    2e3c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2e40:	2100      	movs	r1, #0
    2e42:	9803      	ldr	r0, [sp, #12]
    2e44:	f7fe ffcd 	bl	1de2 <OsIf_GetElapsed>
    2e48:	4602      	mov	r2, r0
    2e4a:	9b02      	ldr	r3, [sp, #8]
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	441a      	add	r2, r3
    2e50:	9b02      	ldr	r3, [sp, #8]
    2e52:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2e54:	9b02      	ldr	r3, [sp, #8]
    2e56:	681b      	ldr	r3, [r3, #0]
    2e58:	9a01      	ldr	r2, [sp, #4]
    2e5a:	429a      	cmp	r2, r3
    2e5c:	d802      	bhi.n	2e64 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2e5e:	2301      	movs	r3, #1
    2e60:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2e64:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2e68:	4618      	mov	r0, r3
    2e6a:	b007      	add	sp, #28
    2e6c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e70 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2e70:	b082      	sub	sp, #8
    2e72:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e74:	bf00      	nop
    2e76:	b002      	add	sp, #8
    2e78:	4770      	bx	lr

00002e7a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2e7a:	b500      	push	{lr}
    2e7c:	b083      	sub	sp, #12
    2e7e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e80:	9b01      	ldr	r3, [sp, #4]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d002      	beq.n	2e8c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2e86:	9801      	ldr	r0, [sp, #4]
    2e88:	f000 f8ad 	bl	2fe6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e8c:	bf00      	nop
    2e8e:	b003      	add	sp, #12
    2e90:	f85d fb04 	ldr.w	pc, [sp], #4

00002e94 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2e94:	b500      	push	{lr}
    2e96:	b083      	sub	sp, #12
    2e98:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e9a:	9b01      	ldr	r3, [sp, #4]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d002      	beq.n	2ea6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2ea0:	9801      	ldr	r0, [sp, #4]
    2ea2:	f000 f8cd 	bl	3040 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ea6:	bf00      	nop
    2ea8:	b003      	add	sp, #12
    2eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00002eae <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2eae:	b500      	push	{lr}
    2eb0:	b083      	sub	sp, #12
    2eb2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eb4:	9b01      	ldr	r3, [sp, #4]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d002      	beq.n	2ec0 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2eba:	9801      	ldr	r0, [sp, #4]
    2ebc:	f000 f8ee 	bl	309c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ec0:	bf00      	nop
    2ec2:	b003      	add	sp, #12
    2ec4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ec8 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2ec8:	b500      	push	{lr}
    2eca:	b083      	sub	sp, #12
    2ecc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ece:	9b01      	ldr	r3, [sp, #4]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d002      	beq.n	2eda <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2ed4:	9801      	ldr	r0, [sp, #4]
    2ed6:	f000 f8f9 	bl	30cc <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eda:	bf00      	nop
    2edc:	b003      	add	sp, #12
    2ede:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ee2:	b500      	push	{lr}
    2ee4:	b083      	sub	sp, #12
    2ee6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ee8:	9b01      	ldr	r3, [sp, #4]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d002      	beq.n	2ef4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2eee:	9801      	ldr	r0, [sp, #4]
    2ef0:	f000 f904 	bl	30fc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ef4:	bf00      	nop
    2ef6:	b003      	add	sp, #12
    2ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00002efc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2efc:	b500      	push	{lr}
    2efe:	b083      	sub	sp, #12
    2f00:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f02:	9b01      	ldr	r3, [sp, #4]
    2f04:	2b00      	cmp	r3, #0
    2f06:	d002      	beq.n	2f0e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2f08:	9801      	ldr	r0, [sp, #4]
    2f0a:	f000 f90f 	bl	312c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f0e:	bf00      	nop
    2f10:	b003      	add	sp, #12
    2f12:	f85d fb04 	ldr.w	pc, [sp], #4

00002f16 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f16:	b500      	push	{lr}
    2f18:	b083      	sub	sp, #12
    2f1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f1c:	9b01      	ldr	r3, [sp, #4]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d002      	beq.n	2f28 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2f22:	9801      	ldr	r0, [sp, #4]
    2f24:	f000 f91a 	bl	315c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f28:	bf00      	nop
    2f2a:	b003      	add	sp, #12
    2f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f30 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f30:	b500      	push	{lr}
    2f32:	b083      	sub	sp, #12
    2f34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f36:	9b01      	ldr	r3, [sp, #4]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d002      	beq.n	2f42 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2f3c:	9801      	ldr	r0, [sp, #4]
    2f3e:	f000 f925 	bl	318c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f42:	bf00      	nop
    2f44:	b003      	add	sp, #12
    2f46:	f85d fb04 	ldr.w	pc, [sp], #4

00002f4a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f4a:	b500      	push	{lr}
    2f4c:	b083      	sub	sp, #12
    2f4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f50:	9b01      	ldr	r3, [sp, #4]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d002      	beq.n	2f5c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2f56:	9801      	ldr	r0, [sp, #4]
    2f58:	f000 f930 	bl	31bc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f5c:	bf00      	nop
    2f5e:	b003      	add	sp, #12
    2f60:	f85d fb04 	ldr.w	pc, [sp], #4

00002f64 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f64:	b500      	push	{lr}
    2f66:	b083      	sub	sp, #12
    2f68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f6a:	9b01      	ldr	r3, [sp, #4]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d002      	beq.n	2f76 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2f70:	9801      	ldr	r0, [sp, #4]
    2f72:	f000 f93b 	bl	31ec <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f76:	bf00      	nop
    2f78:	b003      	add	sp, #12
    2f7a:	f85d fb04 	ldr.w	pc, [sp], #4

00002f7e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f7e:	b500      	push	{lr}
    2f80:	b083      	sub	sp, #12
    2f82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f84:	9b01      	ldr	r3, [sp, #4]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d002      	beq.n	2f90 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2f8a:	9801      	ldr	r0, [sp, #4]
    2f8c:	f000 f946 	bl	321c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f90:	bf00      	nop
    2f92:	b003      	add	sp, #12
    2f94:	f85d fb04 	ldr.w	pc, [sp], #4

00002f98 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2f98:	b500      	push	{lr}
    2f9a:	b083      	sub	sp, #12
    2f9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f9e:	9b01      	ldr	r3, [sp, #4]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d002      	beq.n	2faa <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2fa4:	9801      	ldr	r0, [sp, #4]
    2fa6:	f000 f951 	bl	324c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2faa:	bf00      	nop
    2fac:	b003      	add	sp, #12
    2fae:	f85d fb04 	ldr.w	pc, [sp], #4

00002fb2 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2fb2:	b500      	push	{lr}
    2fb4:	b083      	sub	sp, #12
    2fb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fb8:	9b01      	ldr	r3, [sp, #4]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d002      	beq.n	2fc4 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2fbe:	9801      	ldr	r0, [sp, #4]
    2fc0:	f000 f95e 	bl	3280 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fc4:	bf00      	nop
    2fc6:	b003      	add	sp, #12
    2fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fcc <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2fcc:	b500      	push	{lr}
    2fce:	b083      	sub	sp, #12
    2fd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd2:	9b01      	ldr	r3, [sp, #4]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d002      	beq.n	2fde <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2fd8:	9801      	ldr	r0, [sp, #4]
    2fda:	f000 f98b 	bl	32f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fde:	bf00      	nop
    2fe0:	b003      	add	sp, #12
    2fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fe6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fe6:	b086      	sub	sp, #24
    2fe8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	681a      	ldr	r2, [r3, #0]
    2fee:	4911      	ldr	r1, [pc, #68]	; (3034 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2ff0:	4613      	mov	r3, r2
    2ff2:	00db      	lsls	r3, r3, #3
    2ff4:	4413      	add	r3, r2
    2ff6:	440b      	add	r3, r1
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2ffc:	9b01      	ldr	r3, [sp, #4]
    2ffe:	685b      	ldr	r3, [r3, #4]
    3000:	4a0d      	ldr	r2, [pc, #52]	; (3038 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3002:	5cd3      	ldrb	r3, [r2, r3]
    3004:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3006:	4a0d      	ldr	r2, [pc, #52]	; (303c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3008:	9b05      	ldr	r3, [sp, #20]
    300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3012:	9b03      	ldr	r3, [sp, #12]
    3014:	f023 0307 	bic.w	r3, r3, #7
    3018:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    301a:	9a03      	ldr	r2, [sp, #12]
    301c:	9b04      	ldr	r3, [sp, #16]
    301e:	4313      	orrs	r3, r2
    3020:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3022:	4a06      	ldr	r2, [pc, #24]	; (303c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3024:	9b05      	ldr	r3, [sp, #20]
    3026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    302a:	9a03      	ldr	r2, [sp, #12]
    302c:	601a      	str	r2, [r3, #0]
}
    302e:	bf00      	nop
    3030:	b006      	add	sp, #24
    3032:	4770      	bx	lr
    3034:	0000f5a4 	.word	0x0000f5a4
    3038:	0000f99c 	.word	0x0000f99c
    303c:	0000f9e0 	.word	0x0000f9e0

00003040 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3040:	b086      	sub	sp, #24
    3042:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3044:	9b01      	ldr	r3, [sp, #4]
    3046:	681a      	ldr	r2, [r3, #0]
    3048:	4911      	ldr	r1, [pc, #68]	; (3090 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    304a:	4613      	mov	r3, r2
    304c:	00db      	lsls	r3, r3, #3
    304e:	4413      	add	r3, r2
    3050:	440b      	add	r3, r1
    3052:	781b      	ldrb	r3, [r3, #0]
    3054:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3056:	9b01      	ldr	r3, [sp, #4]
    3058:	685b      	ldr	r3, [r3, #4]
    305a:	4a0e      	ldr	r2, [pc, #56]	; (3094 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    305c:	5cd3      	ldrb	r3, [r2, r3]
    305e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3060:	4a0d      	ldr	r2, [pc, #52]	; (3098 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3062:	9b05      	ldr	r3, [sp, #20]
    3064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    306c:	9b03      	ldr	r3, [sp, #12]
    306e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3072:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3074:	9b04      	ldr	r3, [sp, #16]
    3076:	021b      	lsls	r3, r3, #8
    3078:	9a03      	ldr	r2, [sp, #12]
    307a:	4313      	orrs	r3, r2
    307c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    307e:	4a06      	ldr	r2, [pc, #24]	; (3098 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3080:	9b05      	ldr	r3, [sp, #20]
    3082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3086:	9a03      	ldr	r2, [sp, #12]
    3088:	601a      	str	r2, [r3, #0]
}
    308a:	bf00      	nop
    308c:	b006      	add	sp, #24
    308e:	4770      	bx	lr
    3090:	0000f5a4 	.word	0x0000f5a4
    3094:	0000f99c 	.word	0x0000f99c
    3098:	0000f9e0 	.word	0x0000f9e0

0000309c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    309c:	b084      	sub	sp, #16
    309e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    30a0:	4b09      	ldr	r3, [pc, #36]	; (30c8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    30a2:	695b      	ldr	r3, [r3, #20]
    30a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    30a6:	9b03      	ldr	r3, [sp, #12]
    30a8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    30ac:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	685b      	ldr	r3, [r3, #4]
    30b2:	3b01      	subs	r3, #1
    30b4:	041b      	lsls	r3, r3, #16
    30b6:	9a03      	ldr	r2, [sp, #12]
    30b8:	4313      	orrs	r3, r2
    30ba:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    30bc:	4a02      	ldr	r2, [pc, #8]	; (30c8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    30be:	9b03      	ldr	r3, [sp, #12]
    30c0:	6153      	str	r3, [r2, #20]
}
    30c2:	bf00      	nop
    30c4:	b004      	add	sp, #16
    30c6:	4770      	bx	lr
    30c8:	40064000 	.word	0x40064000

000030cc <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30cc:	b084      	sub	sp, #16
    30ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    30d0:	4b09      	ldr	r3, [pc, #36]	; (30f8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    30d2:	695b      	ldr	r3, [r3, #20]
    30d4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    30d6:	9b03      	ldr	r3, [sp, #12]
    30d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    30dc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    30de:	9b01      	ldr	r3, [sp, #4]
    30e0:	685b      	ldr	r3, [r3, #4]
    30e2:	3b01      	subs	r3, #1
    30e4:	011b      	lsls	r3, r3, #4
    30e6:	9a03      	ldr	r2, [sp, #12]
    30e8:	4313      	orrs	r3, r2
    30ea:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    30ec:	4a02      	ldr	r2, [pc, #8]	; (30f8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    30ee:	9b03      	ldr	r3, [sp, #12]
    30f0:	6153      	str	r3, [r2, #20]
}
    30f2:	bf00      	nop
    30f4:	b004      	add	sp, #16
    30f6:	4770      	bx	lr
    30f8:	40064000 	.word	0x40064000

000030fc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30fc:	b084      	sub	sp, #16
    30fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3100:	4b09      	ldr	r3, [pc, #36]	; (3128 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3102:	695b      	ldr	r3, [r3, #20]
    3104:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3106:	9b03      	ldr	r3, [sp, #12]
    3108:	f023 030f 	bic.w	r3, r3, #15
    310c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    310e:	9b01      	ldr	r3, [sp, #4]
    3110:	685b      	ldr	r3, [r3, #4]
    3112:	3b01      	subs	r3, #1
    3114:	9a03      	ldr	r2, [sp, #12]
    3116:	4313      	orrs	r3, r2
    3118:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    311a:	4a03      	ldr	r2, [pc, #12]	; (3128 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    311c:	9b03      	ldr	r3, [sp, #12]
    311e:	6153      	str	r3, [r2, #20]
}
    3120:	bf00      	nop
    3122:	b004      	add	sp, #16
    3124:	4770      	bx	lr
    3126:	bf00      	nop
    3128:	40064000 	.word	0x40064000

0000312c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    312c:	b084      	sub	sp, #16
    312e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3130:	4b09      	ldr	r3, [pc, #36]	; (3158 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3132:	699b      	ldr	r3, [r3, #24]
    3134:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3136:	9b03      	ldr	r3, [sp, #12]
    3138:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    313c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    313e:	9b01      	ldr	r3, [sp, #4]
    3140:	685b      	ldr	r3, [r3, #4]
    3142:	3b01      	subs	r3, #1
    3144:	041b      	lsls	r3, r3, #16
    3146:	9a03      	ldr	r2, [sp, #12]
    3148:	4313      	orrs	r3, r2
    314a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    314c:	4a02      	ldr	r2, [pc, #8]	; (3158 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    314e:	9b03      	ldr	r3, [sp, #12]
    3150:	6193      	str	r3, [r2, #24]
}
    3152:	bf00      	nop
    3154:	b004      	add	sp, #16
    3156:	4770      	bx	lr
    3158:	40064000 	.word	0x40064000

0000315c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    315c:	b084      	sub	sp, #16
    315e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3160:	4b09      	ldr	r3, [pc, #36]	; (3188 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3162:	699b      	ldr	r3, [r3, #24]
    3164:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3166:	9b03      	ldr	r3, [sp, #12]
    3168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    316c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    316e:	9b01      	ldr	r3, [sp, #4]
    3170:	685b      	ldr	r3, [r3, #4]
    3172:	3b01      	subs	r3, #1
    3174:	011b      	lsls	r3, r3, #4
    3176:	9a03      	ldr	r2, [sp, #12]
    3178:	4313      	orrs	r3, r2
    317a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    317c:	4a02      	ldr	r2, [pc, #8]	; (3188 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    317e:	9b03      	ldr	r3, [sp, #12]
    3180:	6193      	str	r3, [r2, #24]
}
    3182:	bf00      	nop
    3184:	b004      	add	sp, #16
    3186:	4770      	bx	lr
    3188:	40064000 	.word	0x40064000

0000318c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    318c:	b084      	sub	sp, #16
    318e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3190:	4b09      	ldr	r3, [pc, #36]	; (31b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3192:	699b      	ldr	r3, [r3, #24]
    3194:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3196:	9b03      	ldr	r3, [sp, #12]
    3198:	f023 030f 	bic.w	r3, r3, #15
    319c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    319e:	9b01      	ldr	r3, [sp, #4]
    31a0:	685b      	ldr	r3, [r3, #4]
    31a2:	3b01      	subs	r3, #1
    31a4:	9a03      	ldr	r2, [sp, #12]
    31a6:	4313      	orrs	r3, r2
    31a8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    31aa:	4a03      	ldr	r2, [pc, #12]	; (31b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    31ac:	9b03      	ldr	r3, [sp, #12]
    31ae:	6193      	str	r3, [r2, #24]
}
    31b0:	bf00      	nop
    31b2:	b004      	add	sp, #16
    31b4:	4770      	bx	lr
    31b6:	bf00      	nop
    31b8:	40064000 	.word	0x40064000

000031bc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31bc:	b084      	sub	sp, #16
    31be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    31c0:	4b09      	ldr	r3, [pc, #36]	; (31e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    31c2:	69db      	ldr	r3, [r3, #28]
    31c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    31c6:	9b03      	ldr	r3, [sp, #12]
    31c8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    31cc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    31ce:	9b01      	ldr	r3, [sp, #4]
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	3b01      	subs	r3, #1
    31d4:	041b      	lsls	r3, r3, #16
    31d6:	9a03      	ldr	r2, [sp, #12]
    31d8:	4313      	orrs	r3, r2
    31da:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    31dc:	4a02      	ldr	r2, [pc, #8]	; (31e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    31de:	9b03      	ldr	r3, [sp, #12]
    31e0:	61d3      	str	r3, [r2, #28]
}
    31e2:	bf00      	nop
    31e4:	b004      	add	sp, #16
    31e6:	4770      	bx	lr
    31e8:	40064000 	.word	0x40064000

000031ec <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31ec:	b084      	sub	sp, #16
    31ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    31f0:	4b09      	ldr	r3, [pc, #36]	; (3218 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    31f2:	69db      	ldr	r3, [r3, #28]
    31f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    31f6:	9b03      	ldr	r3, [sp, #12]
    31f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    31fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    31fe:	9b01      	ldr	r3, [sp, #4]
    3200:	685b      	ldr	r3, [r3, #4]
    3202:	3b01      	subs	r3, #1
    3204:	011b      	lsls	r3, r3, #4
    3206:	9a03      	ldr	r2, [sp, #12]
    3208:	4313      	orrs	r3, r2
    320a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    320c:	4a02      	ldr	r2, [pc, #8]	; (3218 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    320e:	9b03      	ldr	r3, [sp, #12]
    3210:	61d3      	str	r3, [r2, #28]
}
    3212:	bf00      	nop
    3214:	b004      	add	sp, #16
    3216:	4770      	bx	lr
    3218:	40064000 	.word	0x40064000

0000321c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    321c:	b084      	sub	sp, #16
    321e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3220:	4b09      	ldr	r3, [pc, #36]	; (3248 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3222:	69db      	ldr	r3, [r3, #28]
    3224:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3226:	9b03      	ldr	r3, [sp, #12]
    3228:	f023 030f 	bic.w	r3, r3, #15
    322c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    322e:	9b01      	ldr	r3, [sp, #4]
    3230:	685b      	ldr	r3, [r3, #4]
    3232:	3b01      	subs	r3, #1
    3234:	9a03      	ldr	r2, [sp, #12]
    3236:	4313      	orrs	r3, r2
    3238:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    323a:	4a03      	ldr	r2, [pc, #12]	; (3248 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    323c:	9b03      	ldr	r3, [sp, #12]
    323e:	61d3      	str	r3, [r2, #28]
}
    3240:	bf00      	nop
    3242:	b004      	add	sp, #16
    3244:	4770      	bx	lr
    3246:	bf00      	nop
    3248:	40064000 	.word	0x40064000

0000324c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    324c:	b084      	sub	sp, #16
    324e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3250:	4b0a      	ldr	r3, [pc, #40]	; (327c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3252:	685b      	ldr	r3, [r3, #4]
    3254:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3256:	9b03      	ldr	r3, [sp, #12]
    3258:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    325c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    325e:	9b01      	ldr	r3, [sp, #4]
    3260:	685b      	ldr	r3, [r3, #4]
    3262:	3b01      	subs	r3, #1
    3264:	021b      	lsls	r3, r3, #8
    3266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    326a:	9a03      	ldr	r2, [sp, #12]
    326c:	4313      	orrs	r3, r2
    326e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3270:	4a02      	ldr	r2, [pc, #8]	; (327c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3272:	9b03      	ldr	r3, [sp, #12]
    3274:	6053      	str	r3, [r2, #4]
}
    3276:	bf00      	nop
    3278:	b004      	add	sp, #16
    327a:	4770      	bx	lr
    327c:	40048000 	.word	0x40048000

00003280 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3280:	b084      	sub	sp, #16
    3282:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3284:	4919      	ldr	r1, [pc, #100]	; (32ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3286:	9b01      	ldr	r3, [sp, #4]
    3288:	681a      	ldr	r2, [r3, #0]
    328a:	4819      	ldr	r0, [pc, #100]	; (32f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    328c:	4613      	mov	r3, r2
    328e:	00db      	lsls	r3, r3, #3
    3290:	4413      	add	r3, r2
    3292:	4403      	add	r3, r0
    3294:	3305      	adds	r3, #5
    3296:	781b      	ldrb	r3, [r3, #0]
    3298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    329c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    329e:	9b03      	ldr	r3, [sp, #12]
    32a0:	f023 030f 	bic.w	r3, r3, #15
    32a4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    32a6:	9b01      	ldr	r3, [sp, #4]
    32a8:	685b      	ldr	r3, [r3, #4]
    32aa:	3b01      	subs	r3, #1
    32ac:	f003 0307 	and.w	r3, r3, #7
    32b0:	9a03      	ldr	r2, [sp, #12]
    32b2:	4313      	orrs	r3, r2
    32b4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    32b6:	9b01      	ldr	r3, [sp, #4]
    32b8:	7a1b      	ldrb	r3, [r3, #8]
    32ba:	3b01      	subs	r3, #1
    32bc:	00db      	lsls	r3, r3, #3
    32be:	f003 0308 	and.w	r3, r3, #8
    32c2:	9a03      	ldr	r2, [sp, #12]
    32c4:	4313      	orrs	r3, r2
    32c6:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    32c8:	4908      	ldr	r1, [pc, #32]	; (32ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    32ca:	9b01      	ldr	r3, [sp, #4]
    32cc:	681a      	ldr	r2, [r3, #0]
    32ce:	4808      	ldr	r0, [pc, #32]	; (32f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    32d0:	4613      	mov	r3, r2
    32d2:	00db      	lsls	r3, r3, #3
    32d4:	4413      	add	r3, r2
    32d6:	4403      	add	r3, r0
    32d8:	3305      	adds	r3, #5
    32da:	781b      	ldrb	r3, [r3, #0]
    32dc:	461a      	mov	r2, r3
    32de:	9b03      	ldr	r3, [sp, #12]
    32e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    32e4:	bf00      	nop
    32e6:	b004      	add	sp, #16
    32e8:	4770      	bx	lr
    32ea:	bf00      	nop
    32ec:	40065000 	.word	0x40065000
    32f0:	0000f5a4 	.word	0x0000f5a4

000032f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32f4:	b084      	sub	sp, #16
    32f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    32f8:	4b10      	ldr	r3, [pc, #64]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    32fc:	4a0f      	ldr	r2, [pc, #60]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3302:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3304:	4b0d      	ldr	r3, [pc, #52]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3308:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    330a:	9b03      	ldr	r3, [sp, #12]
    330c:	f023 030f 	bic.w	r3, r3, #15
    3310:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3312:	9b01      	ldr	r3, [sp, #4]
    3314:	685b      	ldr	r3, [r3, #4]
    3316:	3b01      	subs	r3, #1
    3318:	005b      	lsls	r3, r3, #1
    331a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    331e:	9b01      	ldr	r3, [sp, #4]
    3320:	7a1b      	ldrb	r3, [r3, #8]
    3322:	3b01      	subs	r3, #1
    3324:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3328:	4313      	orrs	r3, r2
    332a:	9a03      	ldr	r2, [sp, #12]
    332c:	4313      	orrs	r3, r2
    332e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3330:	4a02      	ldr	r2, [pc, #8]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3332:	9b03      	ldr	r3, [sp, #12]
    3334:	6693      	str	r3, [r2, #104]	; 0x68
}
    3336:	bf00      	nop
    3338:	b004      	add	sp, #16
    333a:	4770      	bx	lr
    333c:	40048000 	.word	0x40048000

00003340 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3340:	b082      	sub	sp, #8
    3342:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3344:	bf00      	nop
    3346:	b002      	add	sp, #8
    3348:	4770      	bx	lr
	...

0000334c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    334c:	b082      	sub	sp, #8
    334e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3350:	bf00      	nop
    3352:	b002      	add	sp, #8
    3354:	4770      	bx	lr

00003356 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3356:	b082      	sub	sp, #8
    3358:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    335a:	bf00      	nop
    335c:	b002      	add	sp, #8
    335e:	4770      	bx	lr

00003360 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3360:	b500      	push	{lr}
    3362:	b083      	sub	sp, #12
    3364:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3366:	9b01      	ldr	r3, [sp, #4]
    3368:	2b00      	cmp	r3, #0
    336a:	d002      	beq.n	3372 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    336c:	9801      	ldr	r0, [sp, #4]
    336e:	f000 f86a 	bl	3446 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3372:	bf00      	nop
    3374:	b003      	add	sp, #12
    3376:	f85d fb04 	ldr.w	pc, [sp], #4

0000337a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    337a:	b500      	push	{lr}
    337c:	b083      	sub	sp, #12
    337e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3380:	9b01      	ldr	r3, [sp, #4]
    3382:	2b00      	cmp	r3, #0
    3384:	d002      	beq.n	338c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3386:	9801      	ldr	r0, [sp, #4]
    3388:	f000 f884 	bl	3494 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    338c:	bf00      	nop
    338e:	b003      	add	sp, #12
    3390:	f85d fb04 	ldr.w	pc, [sp], #4

00003394 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3394:	b500      	push	{lr}
    3396:	b089      	sub	sp, #36	; 0x24
    3398:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    339a:	2300      	movs	r3, #0
    339c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    33a0:	9b01      	ldr	r3, [sp, #4]
    33a2:	2b00      	cmp	r3, #0
    33a4:	d031      	beq.n	340a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    33a6:	4b1b      	ldr	r3, [pc, #108]	; (3414 <Clock_Ip_CompleteSOSC+0x80>)
    33a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33ac:	f003 0301 	and.w	r3, r3, #1
    33b0:	2b00      	cmp	r3, #0
    33b2:	d02a      	beq.n	340a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33b4:	aa03      	add	r2, sp, #12
    33b6:	a904      	add	r1, sp, #16
    33b8:	a805      	add	r0, sp, #20
    33ba:	f24c 3350 	movw	r3, #50000	; 0xc350
    33be:	f7ff fd1d 	bl	2dfc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    33c2:	4b14      	ldr	r3, [pc, #80]	; (3414 <Clock_Ip_CompleteSOSC+0x80>)
    33c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33c8:	0e1b      	lsrs	r3, r3, #24
    33ca:	f003 0301 	and.w	r3, r3, #1
    33ce:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33d0:	9a03      	ldr	r2, [sp, #12]
    33d2:	a904      	add	r1, sp, #16
    33d4:	ab05      	add	r3, sp, #20
    33d6:	4618      	mov	r0, r3
    33d8:	f7ff fd2a 	bl	2e30 <Clock_Ip_TimeoutExpired>
    33dc:	4603      	mov	r3, r0
    33de:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    33e2:	9b06      	ldr	r3, [sp, #24]
    33e4:	2b00      	cmp	r3, #0
    33e6:	d106      	bne.n	33f6 <Clock_Ip_CompleteSOSC+0x62>
    33e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33ec:	f083 0301 	eor.w	r3, r3, #1
    33f0:	b2db      	uxtb	r3, r3
    33f2:	2b00      	cmp	r3, #0
    33f4:	d1e5      	bne.n	33c2 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    33f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d005      	beq.n	340a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33fe:	9b01      	ldr	r3, [sp, #4]
    3400:	681b      	ldr	r3, [r3, #0]
    3402:	4619      	mov	r1, r3
    3404:	2001      	movs	r0, #1
    3406:	f7ff fce9 	bl	2ddc <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    340a:	bf00      	nop
    340c:	b009      	add	sp, #36	; 0x24
    340e:	f85d fb04 	ldr.w	pc, [sp], #4
    3412:	bf00      	nop
    3414:	40064000 	.word	0x40064000

00003418 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3418:	b500      	push	{lr}
    341a:	b083      	sub	sp, #12
    341c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    341e:	9801      	ldr	r0, [sp, #4]
    3420:	f000 f8c0 	bl	35a4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3424:	bf00      	nop
    3426:	b003      	add	sp, #12
    3428:	f85d fb04 	ldr.w	pc, [sp], #4

0000342c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    342c:	b500      	push	{lr}
    342e:	b083      	sub	sp, #12
    3430:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3432:	9b01      	ldr	r3, [sp, #4]
    3434:	2b00      	cmp	r3, #0
    3436:	d002      	beq.n	343e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3438:	9801      	ldr	r0, [sp, #4]
    343a:	f000 f8c3 	bl	35c4 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    343e:	bf00      	nop
    3440:	b003      	add	sp, #12
    3442:	f85d fb04 	ldr.w	pc, [sp], #4

00003446 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3446:	b082      	sub	sp, #8
    3448:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    344a:	4b11      	ldr	r3, [pc, #68]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    344c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3450:	4a0f      	ldr	r2, [pc, #60]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3452:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3456:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    345a:	4b0d      	ldr	r3, [pc, #52]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    345c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3460:	4a0b      	ldr	r2, [pc, #44]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3466:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    346a:	4b09      	ldr	r3, [pc, #36]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    346c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3470:	4a07      	ldr	r2, [pc, #28]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3472:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3476:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    347c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3480:	4a03      	ldr	r2, [pc, #12]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3482:	f023 0301 	bic.w	r3, r3, #1
    3486:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    348a:	bf00      	nop
    348c:	b002      	add	sp, #8
    348e:	4770      	bx	lr
    3490:	40064000 	.word	0x40064000

00003494 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3494:	b082      	sub	sp, #8
    3496:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	891b      	ldrh	r3, [r3, #8]
    349c:	2b01      	cmp	r3, #1
    349e:	d174      	bne.n	358a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    34a0:	9b01      	ldr	r3, [sp, #4]
    34a2:	7bdb      	ldrb	r3, [r3, #15]
    34a4:	2b00      	cmp	r3, #0
    34a6:	d002      	beq.n	34ae <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    34a8:	2b01      	cmp	r3, #1
    34aa:	d009      	beq.n	34c0 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    34ac:	e011      	b.n	34d2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    34ae:	4b39      	ldr	r3, [pc, #228]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34b4:	4a37      	ldr	r2, [pc, #220]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34b6:	f023 0308 	bic.w	r3, r3, #8
    34ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    34be:	e008      	b.n	34d2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    34c0:	4b34      	ldr	r3, [pc, #208]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34c6:	4a33      	ldr	r2, [pc, #204]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34c8:	f043 0308 	orr.w	r3, r3, #8
    34cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    34d0:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    34d2:	4b30      	ldr	r3, [pc, #192]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34d8:	4a2e      	ldr	r2, [pc, #184]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    34de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    34e2:	9b01      	ldr	r3, [sp, #4]
    34e4:	685b      	ldr	r3, [r3, #4]
    34e6:	4a2c      	ldr	r2, [pc, #176]	; (3598 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    34e8:	4293      	cmp	r3, r2
    34ea:	d90d      	bls.n	3508 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    34ec:	9b01      	ldr	r3, [sp, #4]
    34ee:	685b      	ldr	r3, [r3, #4]
    34f0:	4a2a      	ldr	r2, [pc, #168]	; (359c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    34f2:	4293      	cmp	r3, r2
    34f4:	d208      	bcs.n	3508 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    34f6:	4b27      	ldr	r3, [pc, #156]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34fc:	4a25      	ldr	r2, [pc, #148]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34fe:	f043 0320 	orr.w	r3, r3, #32
    3502:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3506:	e007      	b.n	3518 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3508:	4b22      	ldr	r3, [pc, #136]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    350a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    350e:	4a21      	ldr	r2, [pc, #132]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3510:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3514:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3518:	9b01      	ldr	r3, [sp, #4]
    351a:	7b1b      	ldrb	r3, [r3, #12]
    351c:	2b00      	cmp	r3, #0
    351e:	d108      	bne.n	3532 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3520:	4b1c      	ldr	r3, [pc, #112]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3522:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3526:	4a1b      	ldr	r2, [pc, #108]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3528:	f043 0304 	orr.w	r3, r3, #4
    352c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3530:	e007      	b.n	3542 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3532:	4b18      	ldr	r3, [pc, #96]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3538:	4a16      	ldr	r2, [pc, #88]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    353a:	f023 0304 	bic.w	r3, r3, #4
    353e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	7c1b      	ldrb	r3, [r3, #16]
    3546:	2b02      	cmp	r3, #2
    3548:	d011      	beq.n	356e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    354a:	2b02      	cmp	r3, #2
    354c:	dc14      	bgt.n	3578 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    354e:	2b00      	cmp	r3, #0
    3550:	d002      	beq.n	3558 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3552:	2b01      	cmp	r3, #1
    3554:	d005      	beq.n	3562 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3556:	e00f      	b.n	3578 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3558:	4b0e      	ldr	r3, [pc, #56]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    355a:	2201      	movs	r2, #1
    355c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3560:	e014      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3562:	4b0c      	ldr	r3, [pc, #48]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3564:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3568:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    356c:	e00e      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    356e:	4b09      	ldr	r3, [pc, #36]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3570:	4a0b      	ldr	r2, [pc, #44]	; (35a0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3572:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3576:	e009      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3578:	4b06      	ldr	r3, [pc, #24]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    357a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    357e:	4a05      	ldr	r2, [pc, #20]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3580:	f043 0301 	orr.w	r3, r3, #1
    3584:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3588:	e000      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    358a:	bf00      	nop
}
    358c:	bf00      	nop
    358e:	b002      	add	sp, #8
    3590:	4770      	bx	lr
    3592:	bf00      	nop
    3594:	40064000 	.word	0x40064000
    3598:	003d08ff 	.word	0x003d08ff
    359c:	007a1200 	.word	0x007a1200
    35a0:	00030001 	.word	0x00030001

000035a4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    35a4:	b082      	sub	sp, #8
    35a6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    35a8:	4b05      	ldr	r3, [pc, #20]	; (35c0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    35aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35ae:	4a04      	ldr	r2, [pc, #16]	; (35c0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    35b0:	f023 0301 	bic.w	r3, r3, #1
    35b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    35b8:	bf00      	nop
    35ba:	b002      	add	sp, #8
    35bc:	4770      	bx	lr
    35be:	bf00      	nop
    35c0:	40064000 	.word	0x40064000

000035c4 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    35c4:	b082      	sub	sp, #8
    35c6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    35c8:	9b01      	ldr	r3, [sp, #4]
    35ca:	891b      	ldrh	r3, [r3, #8]
    35cc:	2b01      	cmp	r3, #1
    35ce:	d107      	bne.n	35e0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    35d0:	4b05      	ldr	r3, [pc, #20]	; (35e8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    35d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35d6:	4a04      	ldr	r2, [pc, #16]	; (35e8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    35d8:	f043 0301 	orr.w	r3, r3, #1
    35dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    35e0:	bf00      	nop
    35e2:	b002      	add	sp, #8
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	40064000 	.word	0x40064000

000035ec <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    35ec:	b082      	sub	sp, #8
    35ee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    35f0:	bf00      	nop
    35f2:	b002      	add	sp, #8
    35f4:	4770      	bx	lr

000035f6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    35f6:	b082      	sub	sp, #8
    35f8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    35fa:	2300      	movs	r3, #0
}
    35fc:	4618      	mov	r0, r3
    35fe:	b002      	add	sp, #8
    3600:	4770      	bx	lr

00003602 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3602:	b082      	sub	sp, #8
    3604:	9001      	str	r0, [sp, #4]
    3606:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3608:	bf00      	nop
    360a:	b002      	add	sp, #8
    360c:	4770      	bx	lr
	...

00003610 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3610:	b082      	sub	sp, #8
    3612:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3614:	bf00      	nop
    3616:	b002      	add	sp, #8
    3618:	4770      	bx	lr

0000361a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    361a:	b082      	sub	sp, #8
    361c:	9001      	str	r0, [sp, #4]
    361e:	460b      	mov	r3, r1
    3620:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3624:	bf00      	nop
    3626:	b002      	add	sp, #8
    3628:	4770      	bx	lr

0000362a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    362a:	b500      	push	{lr}
    362c:	b083      	sub	sp, #12
    362e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3630:	9b01      	ldr	r3, [sp, #4]
    3632:	2b00      	cmp	r3, #0
    3634:	d002      	beq.n	363c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3636:	9801      	ldr	r0, [sp, #4]
    3638:	f000 f8e7 	bl	380a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    363c:	bf00      	nop
    363e:	b003      	add	sp, #12
    3640:	f85d fb04 	ldr.w	pc, [sp], #4

00003644 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3644:	b500      	push	{lr}
    3646:	b085      	sub	sp, #20
    3648:	9001      	str	r0, [sp, #4]
    364a:	460b      	mov	r3, r1
    364c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3650:	9b01      	ldr	r3, [sp, #4]
    3652:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3654:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3658:	2b00      	cmp	r3, #0
    365a:	d003      	beq.n	3664 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    365c:	2300      	movs	r3, #0
    365e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3662:	e002      	b.n	366a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3664:	2301      	movs	r3, #1
    3666:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    366a:	ab02      	add	r3, sp, #8
    366c:	4618      	mov	r0, r3
    366e:	f7ff ffdc 	bl	362a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3672:	bf00      	nop
    3674:	b005      	add	sp, #20
    3676:	f85d fb04 	ldr.w	pc, [sp], #4

0000367a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    367a:	b500      	push	{lr}
    367c:	b083      	sub	sp, #12
    367e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3680:	9b01      	ldr	r3, [sp, #4]
    3682:	2b00      	cmp	r3, #0
    3684:	d002      	beq.n	368c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3686:	9801      	ldr	r0, [sp, #4]
    3688:	f000 f8d6 	bl	3838 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    368c:	bf00      	nop
    368e:	b003      	add	sp, #12
    3690:	f85d fb04 	ldr.w	pc, [sp], #4

00003694 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3694:	b500      	push	{lr}
    3696:	b085      	sub	sp, #20
    3698:	9001      	str	r0, [sp, #4]
    369a:	460b      	mov	r3, r1
    369c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d003      	beq.n	36b4 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    36ac:	2300      	movs	r3, #0
    36ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    36b2:	e002      	b.n	36ba <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    36b4:	2301      	movs	r3, #1
    36b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    36ba:	ab02      	add	r3, sp, #8
    36bc:	4618      	mov	r0, r3
    36be:	f7ff ffdc 	bl	367a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    36c2:	bf00      	nop
    36c4:	b005      	add	sp, #20
    36c6:	f85d fb04 	ldr.w	pc, [sp], #4

000036ca <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    36ca:	b500      	push	{lr}
    36cc:	b083      	sub	sp, #12
    36ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36d0:	9b01      	ldr	r3, [sp, #4]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d002      	beq.n	36dc <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    36d6:	9801      	ldr	r0, [sp, #4]
    36d8:	f000 f8c6 	bl	3868 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36dc:	bf00      	nop
    36de:	b003      	add	sp, #12
    36e0:	f85d fb04 	ldr.w	pc, [sp], #4

000036e4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    36e4:	b500      	push	{lr}
    36e6:	b085      	sub	sp, #20
    36e8:	9001      	str	r0, [sp, #4]
    36ea:	460b      	mov	r3, r1
    36ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    36f0:	9b01      	ldr	r3, [sp, #4]
    36f2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d003      	beq.n	3704 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    36fc:	2300      	movs	r3, #0
    36fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    3702:	e002      	b.n	370a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3704:	2301      	movs	r3, #1
    3706:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    370a:	ab02      	add	r3, sp, #8
    370c:	4618      	mov	r0, r3
    370e:	f7ff ffdc 	bl	36ca <Clock_Ip_ClockSetSimClkoutEnable>
}
    3712:	bf00      	nop
    3714:	b005      	add	sp, #20
    3716:	f85d fb04 	ldr.w	pc, [sp], #4

0000371a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    371a:	b500      	push	{lr}
    371c:	b083      	sub	sp, #12
    371e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3720:	9b01      	ldr	r3, [sp, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d002      	beq.n	372c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3726:	9801      	ldr	r0, [sp, #4]
    3728:	f000 f8b6 	bl	3898 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    372c:	bf00      	nop
    372e:	b003      	add	sp, #12
    3730:	f85d fb04 	ldr.w	pc, [sp], #4

00003734 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3734:	b500      	push	{lr}
    3736:	b085      	sub	sp, #20
    3738:	9001      	str	r0, [sp, #4]
    373a:	460b      	mov	r3, r1
    373c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3740:	9b01      	ldr	r3, [sp, #4]
    3742:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3744:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3748:	2b00      	cmp	r3, #0
    374a:	d003      	beq.n	3754 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    374c:	2300      	movs	r3, #0
    374e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3752:	e002      	b.n	375a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3754:	2301      	movs	r3, #1
    3756:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    375a:	ab02      	add	r3, sp, #8
    375c:	4618      	mov	r0, r3
    375e:	f7ff ffdc 	bl	371a <Clock_Ip_ClockSetPccCgcEnable>
}
    3762:	bf00      	nop
    3764:	b005      	add	sp, #20
    3766:	f85d fb04 	ldr.w	pc, [sp], #4

0000376a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    376a:	b500      	push	{lr}
    376c:	b083      	sub	sp, #12
    376e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3770:	9b01      	ldr	r3, [sp, #4]
    3772:	2b00      	cmp	r3, #0
    3774:	d002      	beq.n	377c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3776:	9801      	ldr	r0, [sp, #4]
    3778:	f000 f8bc 	bl	38f4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    377c:	bf00      	nop
    377e:	b003      	add	sp, #12
    3780:	f85d fb04 	ldr.w	pc, [sp], #4

00003784 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3784:	b500      	push	{lr}
    3786:	b085      	sub	sp, #20
    3788:	9001      	str	r0, [sp, #4]
    378a:	460b      	mov	r3, r1
    378c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3790:	9b01      	ldr	r3, [sp, #4]
    3792:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3794:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3798:	2b00      	cmp	r3, #0
    379a:	d003      	beq.n	37a4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    379c:	2300      	movs	r3, #0
    379e:	f8ad 300c 	strh.w	r3, [sp, #12]
    37a2:	e002      	b.n	37aa <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37a4:	2301      	movs	r3, #1
    37a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    37aa:	ab02      	add	r3, sp, #8
    37ac:	4618      	mov	r0, r3
    37ae:	f7ff ffdc 	bl	376a <Clock_Ip_ClockSetSimGate>
}
    37b2:	bf00      	nop
    37b4:	b005      	add	sp, #20
    37b6:	f85d fb04 	ldr.w	pc, [sp], #4

000037ba <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    37ba:	b500      	push	{lr}
    37bc:	b083      	sub	sp, #12
    37be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c0:	9b01      	ldr	r3, [sp, #4]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d002      	beq.n	37cc <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    37c6:	9801      	ldr	r0, [sp, #4]
    37c8:	f000 f8c0 	bl	394c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37cc:	bf00      	nop
    37ce:	b003      	add	sp, #12
    37d0:	f85d fb04 	ldr.w	pc, [sp], #4

000037d4 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37d4:	b500      	push	{lr}
    37d6:	b085      	sub	sp, #20
    37d8:	9001      	str	r0, [sp, #4]
    37da:	460b      	mov	r3, r1
    37dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d003      	beq.n	37f4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    37ec:	2300      	movs	r3, #0
    37ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    37f2:	e002      	b.n	37fa <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37f4:	2301      	movs	r3, #1
    37f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    37fa:	ab02      	add	r3, sp, #8
    37fc:	4618      	mov	r0, r3
    37fe:	f7ff ffdc 	bl	37ba <Clock_Ip_ClockSetSimTraceEnable>
}
    3802:	bf00      	nop
    3804:	b005      	add	sp, #20
    3806:	f85d fb04 	ldr.w	pc, [sp], #4

0000380a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    380a:	b084      	sub	sp, #16
    380c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    380e:	4b09      	ldr	r3, [pc, #36]	; (3834 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3810:	691b      	ldr	r3, [r3, #16]
    3812:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3814:	9b03      	ldr	r3, [sp, #12]
    3816:	f023 0301 	bic.w	r3, r3, #1
    381a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    381c:	9b01      	ldr	r3, [sp, #4]
    381e:	889b      	ldrh	r3, [r3, #4]
    3820:	461a      	mov	r2, r3
    3822:	9b03      	ldr	r3, [sp, #12]
    3824:	4313      	orrs	r3, r2
    3826:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3828:	4a02      	ldr	r2, [pc, #8]	; (3834 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    382a:	9b03      	ldr	r3, [sp, #12]
    382c:	6113      	str	r3, [r2, #16]
}
    382e:	bf00      	nop
    3830:	b004      	add	sp, #16
    3832:	4770      	bx	lr
    3834:	40048000 	.word	0x40048000

00003838 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3838:	b084      	sub	sp, #16
    383a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    383c:	4b09      	ldr	r3, [pc, #36]	; (3864 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    383e:	691b      	ldr	r3, [r3, #16]
    3840:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3842:	9b03      	ldr	r3, [sp, #12]
    3844:	f023 0302 	bic.w	r3, r3, #2
    3848:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    384a:	9b01      	ldr	r3, [sp, #4]
    384c:	889b      	ldrh	r3, [r3, #4]
    384e:	005b      	lsls	r3, r3, #1
    3850:	9a03      	ldr	r2, [sp, #12]
    3852:	4313      	orrs	r3, r2
    3854:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3856:	4a03      	ldr	r2, [pc, #12]	; (3864 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3858:	9b03      	ldr	r3, [sp, #12]
    385a:	6113      	str	r3, [r2, #16]
}
    385c:	bf00      	nop
    385e:	b004      	add	sp, #16
    3860:	4770      	bx	lr
    3862:	bf00      	nop
    3864:	40048000 	.word	0x40048000

00003868 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3868:	b084      	sub	sp, #16
    386a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    386c:	4b09      	ldr	r3, [pc, #36]	; (3894 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    386e:	685b      	ldr	r3, [r3, #4]
    3870:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3872:	9b03      	ldr	r3, [sp, #12]
    3874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3878:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    387a:	9b01      	ldr	r3, [sp, #4]
    387c:	889b      	ldrh	r3, [r3, #4]
    387e:	02db      	lsls	r3, r3, #11
    3880:	9a03      	ldr	r2, [sp, #12]
    3882:	4313      	orrs	r3, r2
    3884:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3886:	4a03      	ldr	r2, [pc, #12]	; (3894 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3888:	9b03      	ldr	r3, [sp, #12]
    388a:	6053      	str	r3, [r2, #4]
}
    388c:	bf00      	nop
    388e:	b004      	add	sp, #16
    3890:	4770      	bx	lr
    3892:	bf00      	nop
    3894:	40048000 	.word	0x40048000

00003898 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3898:	b084      	sub	sp, #16
    389a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    389c:	4913      	ldr	r1, [pc, #76]	; (38ec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    389e:	9b01      	ldr	r3, [sp, #4]
    38a0:	681a      	ldr	r2, [r3, #0]
    38a2:	4813      	ldr	r0, [pc, #76]	; (38f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    38a4:	4613      	mov	r3, r2
    38a6:	00db      	lsls	r3, r3, #3
    38a8:	4413      	add	r3, r2
    38aa:	4403      	add	r3, r0
    38ac:	3306      	adds	r3, #6
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    38b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    38b6:	9b03      	ldr	r3, [sp, #12]
    38b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    38bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    38be:	9b01      	ldr	r3, [sp, #4]
    38c0:	889b      	ldrh	r3, [r3, #4]
    38c2:	079b      	lsls	r3, r3, #30
    38c4:	9a03      	ldr	r2, [sp, #12]
    38c6:	4313      	orrs	r3, r2
    38c8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    38ca:	4908      	ldr	r1, [pc, #32]	; (38ec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	681a      	ldr	r2, [r3, #0]
    38d0:	4807      	ldr	r0, [pc, #28]	; (38f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    38d2:	4613      	mov	r3, r2
    38d4:	00db      	lsls	r3, r3, #3
    38d6:	4413      	add	r3, r2
    38d8:	4403      	add	r3, r0
    38da:	3306      	adds	r3, #6
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	461a      	mov	r2, r3
    38e0:	9b03      	ldr	r3, [sp, #12]
    38e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    38e6:	bf00      	nop
    38e8:	b004      	add	sp, #16
    38ea:	4770      	bx	lr
    38ec:	40065000 	.word	0x40065000
    38f0:	0000f5a4 	.word	0x0000f5a4

000038f4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38f4:	b086      	sub	sp, #24
    38f6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    38f8:	9b01      	ldr	r3, [sp, #4]
    38fa:	889b      	ldrh	r3, [r3, #4]
    38fc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    38fe:	9b01      	ldr	r3, [sp, #4]
    3900:	681a      	ldr	r2, [r3, #0]
    3902:	4910      	ldr	r1, [pc, #64]	; (3944 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3904:	4613      	mov	r3, r2
    3906:	00db      	lsls	r3, r3, #3
    3908:	4413      	add	r3, r2
    390a:	440b      	add	r3, r1
    390c:	3306      	adds	r3, #6
    390e:	781b      	ldrb	r3, [r3, #0]
    3910:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3912:	4b0d      	ldr	r3, [pc, #52]	; (3948 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3916:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3918:	2201      	movs	r2, #1
    391a:	9b04      	ldr	r3, [sp, #16]
    391c:	fa02 f303 	lsl.w	r3, r2, r3
    3920:	43db      	mvns	r3, r3
    3922:	9a03      	ldr	r2, [sp, #12]
    3924:	4013      	ands	r3, r2
    3926:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3928:	9a05      	ldr	r2, [sp, #20]
    392a:	9b04      	ldr	r3, [sp, #16]
    392c:	fa02 f303 	lsl.w	r3, r2, r3
    3930:	9a03      	ldr	r2, [sp, #12]
    3932:	4313      	orrs	r3, r2
    3934:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3936:	4a04      	ldr	r2, [pc, #16]	; (3948 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3938:	9b03      	ldr	r3, [sp, #12]
    393a:	6413      	str	r3, [r2, #64]	; 0x40
}
    393c:	bf00      	nop
    393e:	b006      	add	sp, #24
    3940:	4770      	bx	lr
    3942:	bf00      	nop
    3944:	0000f5a4 	.word	0x0000f5a4
    3948:	40048000 	.word	0x40048000

0000394c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    394c:	b084      	sub	sp, #16
    394e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3950:	4b0a      	ldr	r3, [pc, #40]	; (397c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3954:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3956:	9b01      	ldr	r3, [sp, #4]
    3958:	889b      	ldrh	r3, [r3, #4]
    395a:	2b01      	cmp	r3, #1
    395c:	d104      	bne.n	3968 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    395e:	9b03      	ldr	r3, [sp, #12]
    3960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3964:	9303      	str	r3, [sp, #12]
    3966:	e003      	b.n	3970 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3968:	9b03      	ldr	r3, [sp, #12]
    396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    396e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3970:	4a02      	ldr	r2, [pc, #8]	; (397c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3972:	9b03      	ldr	r3, [sp, #12]
    3974:	6693      	str	r3, [r2, #104]	; 0x68
}
    3976:	bf00      	nop
    3978:	b004      	add	sp, #16
    397a:	4770      	bx	lr
    397c:	40048000 	.word	0x40048000

00003980 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3980:	b082      	sub	sp, #8
    3982:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3984:	bf00      	nop
    3986:	b002      	add	sp, #8
    3988:	4770      	bx	lr

0000398a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    398a:	b082      	sub	sp, #8
    398c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    398e:	bf00      	nop
    3990:	b002      	add	sp, #8
    3992:	4770      	bx	lr

00003994 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3994:	b500      	push	{lr}
    3996:	b083      	sub	sp, #12
    3998:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    399a:	9b01      	ldr	r3, [sp, #4]
    399c:	2b00      	cmp	r3, #0
    399e:	d002      	beq.n	39a6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    39a0:	9801      	ldr	r0, [sp, #4]
    39a2:	f000 f8d1 	bl	3b48 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39a6:	bf00      	nop
    39a8:	b003      	add	sp, #12
    39aa:	f85d fb04 	ldr.w	pc, [sp], #4

000039ae <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    39ae:	b500      	push	{lr}
    39b0:	b083      	sub	sp, #12
    39b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39b4:	9b01      	ldr	r3, [sp, #4]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d002      	beq.n	39c0 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    39ba:	9801      	ldr	r0, [sp, #4]
    39bc:	f000 f950 	bl	3c60 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39c0:	bf00      	nop
    39c2:	b003      	add	sp, #12
    39c4:	f85d fb04 	ldr.w	pc, [sp], #4

000039c8 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    39c8:	b500      	push	{lr}
    39ca:	b083      	sub	sp, #12
    39cc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    39ce:	9801      	ldr	r0, [sp, #4]
    39d0:	f000 f98e 	bl	3cf0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    39d4:	bf00      	nop
    39d6:	b003      	add	sp, #12
    39d8:	f85d fb04 	ldr.w	pc, [sp], #4

000039dc <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    39dc:	b500      	push	{lr}
    39de:	b083      	sub	sp, #12
    39e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39e2:	9b01      	ldr	r3, [sp, #4]
    39e4:	2b00      	cmp	r3, #0
    39e6:	d002      	beq.n	39ee <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    39e8:	9801      	ldr	r0, [sp, #4]
    39ea:	f000 f999 	bl	3d20 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39ee:	bf00      	nop
    39f0:	b003      	add	sp, #12
    39f2:	f85d fb04 	ldr.w	pc, [sp], #4

000039f6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    39f6:	b500      	push	{lr}
    39f8:	b083      	sub	sp, #12
    39fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39fc:	9b01      	ldr	r3, [sp, #4]
    39fe:	2b00      	cmp	r3, #0
    3a00:	d002      	beq.n	3a08 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3a02:	9801      	ldr	r0, [sp, #4]
    3a04:	f000 f9b0 	bl	3d68 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a08:	bf00      	nop
    3a0a:	b003      	add	sp, #12
    3a0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a10 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3a10:	b500      	push	{lr}
    3a12:	b083      	sub	sp, #12
    3a14:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3a16:	9801      	ldr	r0, [sp, #4]
    3a18:	f000 f9ba 	bl	3d90 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a1c:	bf00      	nop
    3a1e:	b003      	add	sp, #12
    3a20:	f85d fb04 	ldr.w	pc, [sp], #4

00003a24 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3a24:	b500      	push	{lr}
    3a26:	b083      	sub	sp, #12
    3a28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a2a:	9b01      	ldr	r3, [sp, #4]
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d002      	beq.n	3a36 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3a30:	9801      	ldr	r0, [sp, #4]
    3a32:	f000 f9bd 	bl	3db0 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a36:	bf00      	nop
    3a38:	b003      	add	sp, #12
    3a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00003a3e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3a3e:	b500      	push	{lr}
    3a40:	b083      	sub	sp, #12
    3a42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a44:	9b01      	ldr	r3, [sp, #4]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d002      	beq.n	3a50 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3a4a:	9801      	ldr	r0, [sp, #4]
    3a4c:	f000 f9d4 	bl	3df8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a50:	bf00      	nop
    3a52:	b003      	add	sp, #12
    3a54:	f85d fb04 	ldr.w	pc, [sp], #4

00003a58 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3a58:	b500      	push	{lr}
    3a5a:	b083      	sub	sp, #12
    3a5c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3a5e:	9801      	ldr	r0, [sp, #4]
    3a60:	f000 f9de 	bl	3e20 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a64:	bf00      	nop
    3a66:	b003      	add	sp, #12
    3a68:	f85d fb04 	ldr.w	pc, [sp], #4

00003a6c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3a6c:	b500      	push	{lr}
    3a6e:	b089      	sub	sp, #36	; 0x24
    3a70:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3a72:	2300      	movs	r3, #0
    3a74:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3a78:	4b20      	ldr	r3, [pc, #128]	; (3afc <SetInputSouceSytemClock+0x90>)
    3a7a:	695b      	ldr	r3, [r3, #20]
    3a7c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3a7e:	9b06      	ldr	r3, [sp, #24]
    3a80:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a84:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3a86:	9b01      	ldr	r3, [sp, #4]
    3a88:	061b      	lsls	r3, r3, #24
    3a8a:	9a06      	ldr	r2, [sp, #24]
    3a8c:	4313      	orrs	r3, r2
    3a8e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3a90:	4a1a      	ldr	r2, [pc, #104]	; (3afc <SetInputSouceSytemClock+0x90>)
    3a92:	9b06      	ldr	r3, [sp, #24]
    3a94:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a96:	aa02      	add	r2, sp, #8
    3a98:	a903      	add	r1, sp, #12
    3a9a:	a804      	add	r0, sp, #16
    3a9c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3aa0:	f7ff f9ac 	bl	2dfc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3aa4:	4b15      	ldr	r3, [pc, #84]	; (3afc <SetInputSouceSytemClock+0x90>)
    3aa6:	691b      	ldr	r3, [r3, #16]
    3aa8:	0e1b      	lsrs	r3, r3, #24
    3aaa:	f003 030f 	and.w	r3, r3, #15
    3aae:	9a01      	ldr	r2, [sp, #4]
    3ab0:	429a      	cmp	r2, r3
    3ab2:	bf0c      	ite	eq
    3ab4:	2301      	moveq	r3, #1
    3ab6:	2300      	movne	r3, #0
    3ab8:	b2db      	uxtb	r3, r3
    3aba:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3abc:	9a02      	ldr	r2, [sp, #8]
    3abe:	a903      	add	r1, sp, #12
    3ac0:	ab04      	add	r3, sp, #16
    3ac2:	4618      	mov	r0, r3
    3ac4:	f7ff f9b4 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3ac8:	4603      	mov	r3, r0
    3aca:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3ace:	9b05      	ldr	r3, [sp, #20]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d106      	bne.n	3ae2 <SetInputSouceSytemClock+0x76>
    3ad4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ad8:	f083 0301 	eor.w	r3, r3, #1
    3adc:	b2db      	uxtb	r3, r3
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d1e0      	bne.n	3aa4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3ae2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d003      	beq.n	3af2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3aea:	2105      	movs	r1, #5
    3aec:	2001      	movs	r0, #1
    3aee:	f7ff f975 	bl	2ddc <Clock_Ip_ReportClockErrors>
    }
}
    3af2:	bf00      	nop
    3af4:	b009      	add	sp, #36	; 0x24
    3af6:	f85d fb04 	ldr.w	pc, [sp], #4
    3afa:	bf00      	nop
    3afc:	40064000 	.word	0x40064000

00003b00 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b00:	b500      	push	{lr}
    3b02:	b083      	sub	sp, #12
    3b04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b06:	9b01      	ldr	r3, [sp, #4]
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d002      	beq.n	3b12 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3b0c:	9801      	ldr	r0, [sp, #4]
    3b0e:	f000 f997 	bl	3e40 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b12:	bf00      	nop
    3b14:	b003      	add	sp, #12
    3b16:	f85d fb04 	ldr.w	pc, [sp], #4

00003b1a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b1a:	b500      	push	{lr}
    3b1c:	b083      	sub	sp, #12
    3b1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b20:	9b01      	ldr	r3, [sp, #4]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d002      	beq.n	3b2c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3b26:	9801      	ldr	r0, [sp, #4]
    3b28:	f000 fa7e 	bl	4028 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b2c:	bf00      	nop
    3b2e:	b003      	add	sp, #12
    3b30:	f85d fb04 	ldr.w	pc, [sp], #4

00003b34 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3b34:	b500      	push	{lr}
    3b36:	b083      	sub	sp, #12
    3b38:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3b3a:	9801      	ldr	r0, [sp, #4]
    3b3c:	f000 fab8 	bl	40b0 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b40:	bf00      	nop
    3b42:	b003      	add	sp, #12
    3b44:	f85d fb04 	ldr.w	pc, [sp], #4

00003b48 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b48:	b500      	push	{lr}
    3b4a:	b08b      	sub	sp, #44	; 0x2c
    3b4c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3b4e:	2300      	movs	r3, #0
    3b50:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3b54:	9b01      	ldr	r3, [sp, #4]
    3b56:	2b00      	cmp	r3, #0
    3b58:	d10b      	bne.n	3b72 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3b5a:	2305      	movs	r3, #5
    3b5c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3b5e:	2301      	movs	r3, #1
    3b60:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3b64:	2301      	movs	r3, #1
    3b66:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3b6a:	2301      	movs	r3, #1
    3b6c:	f88d 3010 	strb.w	r3, [sp, #16]
    3b70:	e00e      	b.n	3b90 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3b72:	9b01      	ldr	r3, [sp, #4]
    3b74:	681b      	ldr	r3, [r3, #0]
    3b76:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3b78:	9b01      	ldr	r3, [sp, #4]
    3b7a:	79db      	ldrb	r3, [r3, #7]
    3b7c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3b80:	9b01      	ldr	r3, [sp, #4]
    3b82:	889b      	ldrh	r3, [r3, #4]
    3b84:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3b88:	9b01      	ldr	r3, [sp, #4]
    3b8a:	7a1b      	ldrb	r3, [r3, #8]
    3b8c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b90:	4b32      	ldr	r3, [pc, #200]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b96:	4a31      	ldr	r2, [pc, #196]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b9c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3ba0:	4b2e      	ldr	r3, [pc, #184]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ba6:	4a2d      	ldr	r2, [pc, #180]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ba8:	f023 0301 	bic.w	r3, r3, #1
    3bac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3bb0:	4b2a      	ldr	r3, [pc, #168]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bb6:	4a29      	ldr	r2, [pc, #164]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bb8:	f023 0304 	bic.w	r3, r3, #4
    3bbc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3bc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3bc4:	2b01      	cmp	r3, #1
    3bc6:	d144      	bne.n	3c52 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3bc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3bcc:	4a23      	ldr	r2, [pc, #140]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bce:	f003 0301 	and.w	r3, r3, #1
    3bd2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3bd6:	4b21      	ldr	r3, [pc, #132]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bdc:	4a1f      	ldr	r2, [pc, #124]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bde:	f043 0301 	orr.w	r3, r3, #1
    3be2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3be6:	4b1d      	ldr	r3, [pc, #116]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3be8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bec:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3bf0:	009b      	lsls	r3, r3, #2
    3bf2:	f003 0304 	and.w	r3, r3, #4
    3bf6:	4919      	ldr	r1, [pc, #100]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bf8:	4313      	orrs	r3, r2
    3bfa:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3bfe:	aa05      	add	r2, sp, #20
    3c00:	a906      	add	r1, sp, #24
    3c02:	a807      	add	r0, sp, #28
    3c04:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c08:	f7ff f8f8 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3c0c:	4b13      	ldr	r3, [pc, #76]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c12:	0e1b      	lsrs	r3, r3, #24
    3c14:	f003 0301 	and.w	r3, r3, #1
    3c18:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c1a:	9a05      	ldr	r2, [sp, #20]
    3c1c:	a906      	add	r1, sp, #24
    3c1e:	ab07      	add	r3, sp, #28
    3c20:	4618      	mov	r0, r3
    3c22:	f7ff f905 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3c26:	4603      	mov	r3, r0
    3c28:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c2c:	9b08      	ldr	r3, [sp, #32]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d106      	bne.n	3c40 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3c32:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c36:	f083 0301 	eor.w	r3, r3, #1
    3c3a:	b2db      	uxtb	r3, r3
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d1e5      	bne.n	3c0c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3c40:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c44:	2b00      	cmp	r3, #0
    3c46:	d004      	beq.n	3c52 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3c48:	9b02      	ldr	r3, [sp, #8]
    3c4a:	4619      	mov	r1, r3
    3c4c:	2001      	movs	r0, #1
    3c4e:	f7ff f8c5 	bl	2ddc <Clock_Ip_ReportClockErrors>
        }
    }
}
    3c52:	bf00      	nop
    3c54:	b00b      	add	sp, #44	; 0x2c
    3c56:	f85d fb04 	ldr.w	pc, [sp], #4
    3c5a:	bf00      	nop
    3c5c:	40064000 	.word	0x40064000

00003c60 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c60:	b500      	push	{lr}
    3c62:	b089      	sub	sp, #36	; 0x24
    3c64:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3c66:	2300      	movs	r3, #0
    3c68:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3c6c:	4b1f      	ldr	r3, [pc, #124]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c72:	4a1e      	ldr	r2, [pc, #120]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c74:	f043 0301 	orr.w	r3, r3, #1
    3c78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3c7c:	4b1b      	ldr	r3, [pc, #108]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c82:	4a1a      	ldr	r2, [pc, #104]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c84:	f043 0304 	orr.w	r3, r3, #4
    3c88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c8c:	aa03      	add	r2, sp, #12
    3c8e:	a904      	add	r1, sp, #16
    3c90:	a805      	add	r0, sp, #20
    3c92:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c96:	f7ff f8b1 	bl	2dfc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3c9a:	4b14      	ldr	r3, [pc, #80]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ca0:	0e1b      	lsrs	r3, r3, #24
    3ca2:	f003 0301 	and.w	r3, r3, #1
    3ca6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ca8:	9a03      	ldr	r2, [sp, #12]
    3caa:	a904      	add	r1, sp, #16
    3cac:	ab05      	add	r3, sp, #20
    3cae:	4618      	mov	r0, r3
    3cb0:	f7ff f8be 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3cb4:	4603      	mov	r3, r0
    3cb6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3cba:	9b06      	ldr	r3, [sp, #24]
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d106      	bne.n	3cce <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3cc0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cc4:	f083 0301 	eor.w	r3, r3, #1
    3cc8:	b2db      	uxtb	r3, r3
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d1e5      	bne.n	3c9a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3cce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d005      	beq.n	3ce2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3cd6:	9b01      	ldr	r3, [sp, #4]
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	4619      	mov	r1, r3
    3cdc:	2001      	movs	r0, #1
    3cde:	f7ff f87d 	bl	2ddc <Clock_Ip_ReportClockErrors>
    }
}
    3ce2:	bf00      	nop
    3ce4:	b009      	add	sp, #36	; 0x24
    3ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    3cea:	bf00      	nop
    3cec:	40064000 	.word	0x40064000

00003cf0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3cf0:	b082      	sub	sp, #8
    3cf2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3cf4:	4b09      	ldr	r3, [pc, #36]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cfa:	4a08      	ldr	r2, [pc, #32]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3cfc:	f023 0301 	bic.w	r3, r3, #1
    3d00:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d04:	4b05      	ldr	r3, [pc, #20]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d0a:	4a04      	ldr	r2, [pc, #16]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d0c:	f023 0304 	bic.w	r3, r3, #4
    3d10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3d14:	bf00      	nop
    3d16:	b002      	add	sp, #8
    3d18:	4770      	bx	lr
    3d1a:	bf00      	nop
    3d1c:	40064000 	.word	0x40064000

00003d20 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d20:	b082      	sub	sp, #8
    3d22:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3d24:	4b0f      	ldr	r3, [pc, #60]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d2a:	4a0e      	ldr	r2, [pc, #56]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3d30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d34:	4b0b      	ldr	r3, [pc, #44]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d3a:	4a0a      	ldr	r2, [pc, #40]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d3c:	f023 0304 	bic.w	r3, r3, #4
    3d40:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3d44:	4b07      	ldr	r3, [pc, #28]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d4a:	9b01      	ldr	r3, [sp, #4]
    3d4c:	7a1b      	ldrb	r3, [r3, #8]
    3d4e:	009b      	lsls	r3, r3, #2
    3d50:	f003 0304 	and.w	r3, r3, #4
    3d54:	4903      	ldr	r1, [pc, #12]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d56:	4313      	orrs	r3, r2
    3d58:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3d5c:	bf00      	nop
    3d5e:	b002      	add	sp, #8
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop
    3d64:	40064000 	.word	0x40064000

00003d68 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d68:	b082      	sub	sp, #8
    3d6a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3d6c:	9b01      	ldr	r3, [sp, #4]
    3d6e:	889b      	ldrh	r3, [r3, #4]
    3d70:	2b01      	cmp	r3, #1
    3d72:	d107      	bne.n	3d84 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3d74:	4b05      	ldr	r3, [pc, #20]	; (3d8c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d7a:	4a04      	ldr	r2, [pc, #16]	; (3d8c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3d7c:	f043 0304 	orr.w	r3, r3, #4
    3d80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3d84:	bf00      	nop
    3d86:	b002      	add	sp, #8
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop
    3d8c:	40064000 	.word	0x40064000

00003d90 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3d90:	b082      	sub	sp, #8
    3d92:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d94:	4b05      	ldr	r3, [pc, #20]	; (3dac <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d9a:	4a04      	ldr	r2, [pc, #16]	; (3dac <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3d9c:	f023 0304 	bic.w	r3, r3, #4
    3da0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3da4:	bf00      	nop
    3da6:	b002      	add	sp, #8
    3da8:	4770      	bx	lr
    3daa:	bf00      	nop
    3dac:	40064000 	.word	0x40064000

00003db0 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3db0:	b082      	sub	sp, #8
    3db2:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3db4:	4b0f      	ldr	r3, [pc, #60]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dba:	4a0e      	ldr	r2, [pc, #56]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3dc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3dc4:	4b0b      	ldr	r3, [pc, #44]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dca:	4a0a      	ldr	r2, [pc, #40]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dcc:	f023 0302 	bic.w	r3, r3, #2
    3dd0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3dd4:	4b07      	ldr	r3, [pc, #28]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3dda:	9b01      	ldr	r3, [sp, #4]
    3ddc:	7a5b      	ldrb	r3, [r3, #9]
    3dde:	005b      	lsls	r3, r3, #1
    3de0:	f003 0302 	and.w	r3, r3, #2
    3de4:	4903      	ldr	r1, [pc, #12]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3de6:	4313      	orrs	r3, r2
    3de8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3dec:	bf00      	nop
    3dee:	b002      	add	sp, #8
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop
    3df4:	40064000 	.word	0x40064000

00003df8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3df8:	b082      	sub	sp, #8
    3dfa:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3dfc:	9b01      	ldr	r3, [sp, #4]
    3dfe:	889b      	ldrh	r3, [r3, #4]
    3e00:	2b01      	cmp	r3, #1
    3e02:	d107      	bne.n	3e14 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3e04:	4b05      	ldr	r3, [pc, #20]	; (3e1c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e0a:	4a04      	ldr	r2, [pc, #16]	; (3e1c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e0c:	f043 0302 	orr.w	r3, r3, #2
    3e10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3e14:	bf00      	nop
    3e16:	b002      	add	sp, #8
    3e18:	4770      	bx	lr
    3e1a:	bf00      	nop
    3e1c:	40064000 	.word	0x40064000

00003e20 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3e20:	b082      	sub	sp, #8
    3e22:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3e24:	4b05      	ldr	r3, [pc, #20]	; (3e3c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e2a:	4a04      	ldr	r2, [pc, #16]	; (3e3c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e2c:	f023 0302 	bic.w	r3, r3, #2
    3e30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e34:	bf00      	nop
    3e36:	b002      	add	sp, #8
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop
    3e3c:	40064000 	.word	0x40064000

00003e40 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e40:	b500      	push	{lr}
    3e42:	b08b      	sub	sp, #44	; 0x2c
    3e44:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3e46:	9b01      	ldr	r3, [sp, #4]
    3e48:	681a      	ldr	r2, [r3, #0]
    3e4a:	4975      	ldr	r1, [pc, #468]	; (4020 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3e4c:	4613      	mov	r3, r2
    3e4e:	00db      	lsls	r3, r3, #3
    3e50:	4413      	add	r3, r2
    3e52:	440b      	add	r3, r1
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3e58:	2300      	movs	r3, #0
    3e5a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3e5e:	2300      	movs	r3, #0
    3e60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3e64:	4b6f      	ldr	r3, [pc, #444]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e6a:	4a6e      	ldr	r2, [pc, #440]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e70:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3e74:	4b6b      	ldr	r3, [pc, #428]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d07d      	beq.n	3f7e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3e82:	9b01      	ldr	r3, [sp, #4]
    3e84:	79db      	ldrb	r3, [r3, #7]
    3e86:	461a      	mov	r2, r3
    3e88:	4b66      	ldr	r3, [pc, #408]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e8a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3e8e:	f003 0303 	and.w	r3, r3, #3
    3e92:	429a      	cmp	r2, r3
    3e94:	d10b      	bne.n	3eae <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3e96:	9b01      	ldr	r3, [sp, #4]
    3e98:	799b      	ldrb	r3, [r3, #6]
    3e9a:	461a      	mov	r2, r3
    3e9c:	4b61      	ldr	r3, [pc, #388]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ea2:	08db      	lsrs	r3, r3, #3
    3ea4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3ea8:	429a      	cmp	r2, r3
    3eaa:	f000 80b4 	beq.w	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3eae:	4b5d      	ldr	r3, [pc, #372]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3eb4:	f003 0301 	and.w	r3, r3, #1
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d105      	bne.n	3ec8 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3ebc:	2301      	movs	r3, #1
    3ebe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3ec2:	2000      	movs	r0, #0
    3ec4:	f7ff fd66 	bl	3994 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3ec8:	2002      	movs	r0, #2
    3eca:	f7ff fdcf 	bl	3a6c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3ece:	4b55      	ldr	r3, [pc, #340]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ed0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ed4:	4a53      	ldr	r2, [pc, #332]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ed6:	f023 0301 	bic.w	r3, r3, #1
    3eda:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3ede:	9b01      	ldr	r3, [sp, #4]
    3ee0:	889b      	ldrh	r3, [r3, #4]
    3ee2:	2b01      	cmp	r3, #1
    3ee4:	f040 8097 	bne.w	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ee8:	9b01      	ldr	r3, [sp, #4]
    3eea:	79db      	ldrb	r3, [r3, #7]
    3eec:	4a4d      	ldr	r2, [pc, #308]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eee:	f003 0303 	and.w	r3, r3, #3
    3ef2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3ef6:	4b4b      	ldr	r3, [pc, #300]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ef8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3efc:	9b01      	ldr	r3, [sp, #4]
    3efe:	799b      	ldrb	r3, [r3, #6]
    3f00:	00db      	lsls	r3, r3, #3
    3f02:	f003 0308 	and.w	r3, r3, #8
    3f06:	4313      	orrs	r3, r2
    3f08:	4a46      	ldr	r2, [pc, #280]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f0a:	f043 0301 	orr.w	r3, r3, #1
    3f0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f12:	aa03      	add	r2, sp, #12
    3f14:	a904      	add	r1, sp, #16
    3f16:	a805      	add	r0, sp, #20
    3f18:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f1c:	f7fe ff6e 	bl	2dfc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3f20:	4b40      	ldr	r3, [pc, #256]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f26:	0e1b      	lsrs	r3, r3, #24
    3f28:	f003 0301 	and.w	r3, r3, #1
    3f2c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f2e:	9a03      	ldr	r2, [sp, #12]
    3f30:	a904      	add	r1, sp, #16
    3f32:	ab05      	add	r3, sp, #20
    3f34:	4618      	mov	r0, r3
    3f36:	f7fe ff7b 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3f3a:	4603      	mov	r3, r0
    3f3c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3f40:	9b06      	ldr	r3, [sp, #24]
    3f42:	2b00      	cmp	r3, #0
    3f44:	d106      	bne.n	3f54 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3f46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f4a:	f083 0301 	eor.w	r3, r3, #1
    3f4e:	b2db      	uxtb	r3, r3
    3f50:	2b00      	cmp	r3, #0
    3f52:	d1e5      	bne.n	3f20 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3f54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d005      	beq.n	3f68 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3f5c:	9b01      	ldr	r3, [sp, #4]
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	4619      	mov	r1, r3
    3f62:	2001      	movs	r0, #1
    3f64:	f7fe ff3a 	bl	2ddc <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3f68:	2003      	movs	r0, #3
    3f6a:	f7ff fd7f 	bl	3a6c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3f6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3f72:	2b00      	cmp	r3, #0
    3f74:	d04f      	beq.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3f76:	2002      	movs	r0, #2
    3f78:	f7ff fd26 	bl	39c8 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3f7c:	e04b      	b.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3f7e:	4b29      	ldr	r3, [pc, #164]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f80:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f84:	4a27      	ldr	r2, [pc, #156]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f86:	f023 0301 	bic.w	r3, r3, #1
    3f8a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3f8e:	9b01      	ldr	r3, [sp, #4]
    3f90:	889b      	ldrh	r3, [r3, #4]
    3f92:	2b01      	cmp	r3, #1
    3f94:	d13f      	bne.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3f96:	9b01      	ldr	r3, [sp, #4]
    3f98:	79db      	ldrb	r3, [r3, #7]
    3f9a:	4a22      	ldr	r2, [pc, #136]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f9c:	f003 0303 	and.w	r3, r3, #3
    3fa0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3fa4:	4b1f      	ldr	r3, [pc, #124]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fa6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3faa:	9b01      	ldr	r3, [sp, #4]
    3fac:	799b      	ldrb	r3, [r3, #6]
    3fae:	00db      	lsls	r3, r3, #3
    3fb0:	f003 0308 	and.w	r3, r3, #8
    3fb4:	4313      	orrs	r3, r2
    3fb6:	4a1b      	ldr	r2, [pc, #108]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fb8:	f043 0301 	orr.w	r3, r3, #1
    3fbc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fc0:	aa03      	add	r2, sp, #12
    3fc2:	a904      	add	r1, sp, #16
    3fc4:	a805      	add	r0, sp, #20
    3fc6:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fca:	f7fe ff17 	bl	2dfc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3fce:	4b15      	ldr	r3, [pc, #84]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fd0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fd4:	0e1b      	lsrs	r3, r3, #24
    3fd6:	f003 0301 	and.w	r3, r3, #1
    3fda:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3fdc:	9a03      	ldr	r2, [sp, #12]
    3fde:	a904      	add	r1, sp, #16
    3fe0:	ab05      	add	r3, sp, #20
    3fe2:	4618      	mov	r0, r3
    3fe4:	f7fe ff24 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3fe8:	4603      	mov	r3, r0
    3fea:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3fee:	9b06      	ldr	r3, [sp, #24]
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d106      	bne.n	4002 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3ff4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ff8:	f083 0301 	eor.w	r3, r3, #1
    3ffc:	b2db      	uxtb	r3, r3
    3ffe:	2b00      	cmp	r3, #0
    4000:	d1e5      	bne.n	3fce <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4002:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4006:	2b00      	cmp	r3, #0
    4008:	d005      	beq.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    400a:	9b01      	ldr	r3, [sp, #4]
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	4619      	mov	r1, r3
    4010:	2001      	movs	r0, #1
    4012:	f7fe fee3 	bl	2ddc <Clock_Ip_ReportClockErrors>
}
    4016:	bf00      	nop
    4018:	b00b      	add	sp, #44	; 0x2c
    401a:	f85d fb04 	ldr.w	pc, [sp], #4
    401e:	bf00      	nop
    4020:	0000f5a4 	.word	0x0000f5a4
    4024:	40064000 	.word	0x40064000

00004028 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4028:	b500      	push	{lr}
    402a:	b089      	sub	sp, #36	; 0x24
    402c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    402e:	2300      	movs	r3, #0
    4030:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4034:	9b01      	ldr	r3, [sp, #4]
    4036:	889b      	ldrh	r3, [r3, #4]
    4038:	2b01      	cmp	r3, #1
    403a:	d132      	bne.n	40a2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    403c:	4b1b      	ldr	r3, [pc, #108]	; (40ac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    403e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4042:	4a1a      	ldr	r2, [pc, #104]	; (40ac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4044:	f043 0301 	orr.w	r3, r3, #1
    4048:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    404c:	aa03      	add	r2, sp, #12
    404e:	a904      	add	r1, sp, #16
    4050:	a805      	add	r0, sp, #20
    4052:	f24c 3350 	movw	r3, #50000	; 0xc350
    4056:	f7fe fed1 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    405a:	4b14      	ldr	r3, [pc, #80]	; (40ac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    405c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4060:	0e1b      	lsrs	r3, r3, #24
    4062:	f003 0301 	and.w	r3, r3, #1
    4066:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4068:	9a03      	ldr	r2, [sp, #12]
    406a:	a904      	add	r1, sp, #16
    406c:	ab05      	add	r3, sp, #20
    406e:	4618      	mov	r0, r3
    4070:	f7fe fede 	bl	2e30 <Clock_Ip_TimeoutExpired>
    4074:	4603      	mov	r3, r0
    4076:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    407a:	9b06      	ldr	r3, [sp, #24]
    407c:	2b00      	cmp	r3, #0
    407e:	d106      	bne.n	408e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4080:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4084:	f083 0301 	eor.w	r3, r3, #1
    4088:	b2db      	uxtb	r3, r3
    408a:	2b00      	cmp	r3, #0
    408c:	d1e5      	bne.n	405a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    408e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4092:	2b00      	cmp	r3, #0
    4094:	d005      	beq.n	40a2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4096:	9b01      	ldr	r3, [sp, #4]
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	4619      	mov	r1, r3
    409c:	2001      	movs	r0, #1
    409e:	f7fe fe9d 	bl	2ddc <Clock_Ip_ReportClockErrors>
        }
    }
}
    40a2:	bf00      	nop
    40a4:	b009      	add	sp, #36	; 0x24
    40a6:	f85d fb04 	ldr.w	pc, [sp], #4
    40aa:	bf00      	nop
    40ac:	40064000 	.word	0x40064000

000040b0 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    40b0:	b082      	sub	sp, #8
    40b2:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    40b4:	4b05      	ldr	r3, [pc, #20]	; (40cc <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    40b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40ba:	4a04      	ldr	r2, [pc, #16]	; (40cc <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    40bc:	f023 0301 	bic.w	r3, r3, #1
    40c0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    40c4:	bf00      	nop
    40c6:	b002      	add	sp, #8
    40c8:	4770      	bx	lr
    40ca:	bf00      	nop
    40cc:	40064000 	.word	0x40064000

000040d0 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    40d0:	b082      	sub	sp, #8
    40d2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    40d4:	bf00      	nop
    40d6:	b002      	add	sp, #8
    40d8:	4770      	bx	lr

000040da <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    40da:	b082      	sub	sp, #8
    40dc:	9001      	str	r0, [sp, #4]
    40de:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    40e0:	bf00      	nop
    40e2:	b002      	add	sp, #8
    40e4:	4770      	bx	lr

000040e6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    40e6:	b082      	sub	sp, #8
    40e8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    40ea:	bf00      	nop
    40ec:	b002      	add	sp, #8
    40ee:	4770      	bx	lr

000040f0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    40f0:	b082      	sub	sp, #8
    40f2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    40f4:	bf00      	nop
    40f6:	b002      	add	sp, #8
    40f8:	4770      	bx	lr

000040fa <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    40fa:	b082      	sub	sp, #8
    40fc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    40fe:	2302      	movs	r3, #2
}
    4100:	4618      	mov	r0, r3
    4102:	b002      	add	sp, #8
    4104:	4770      	bx	lr

00004106 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4106:	b082      	sub	sp, #8
    4108:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    410a:	bf00      	nop
    410c:	b002      	add	sp, #8
    410e:	4770      	bx	lr

00004110 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4110:	b500      	push	{lr}
    4112:	b083      	sub	sp, #12
    4114:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4116:	9b01      	ldr	r3, [sp, #4]
    4118:	2b00      	cmp	r3, #0
    411a:	d002      	beq.n	4122 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    411c:	9801      	ldr	r0, [sp, #4]
    411e:	f000 f870 	bl	4202 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4122:	bf00      	nop
    4124:	b003      	add	sp, #12
    4126:	f85d fb04 	ldr.w	pc, [sp], #4

0000412a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    412a:	b500      	push	{lr}
    412c:	b083      	sub	sp, #12
    412e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4130:	9b01      	ldr	r3, [sp, #4]
    4132:	2b00      	cmp	r3, #0
    4134:	d002      	beq.n	413c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4136:	9801      	ldr	r0, [sp, #4]
    4138:	f000 f89a 	bl	4270 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    413c:	bf00      	nop
    413e:	b003      	add	sp, #12
    4140:	f85d fb04 	ldr.w	pc, [sp], #4

00004144 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4144:	b500      	push	{lr}
    4146:	b089      	sub	sp, #36	; 0x24
    4148:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    414a:	2301      	movs	r3, #1
    414c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    414e:	2300      	movs	r3, #0
    4150:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4154:	4b1e      	ldr	r3, [pc, #120]	; (41d0 <Clock_Ip_CompleteSpll+0x8c>)
    4156:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    415a:	f003 0301 	and.w	r3, r3, #1
    415e:	2b00      	cmp	r3, #0
    4160:	d02f      	beq.n	41c2 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4162:	aa02      	add	r2, sp, #8
    4164:	a903      	add	r1, sp, #12
    4166:	a804      	add	r0, sp, #16
    4168:	f24c 3350 	movw	r3, #50000	; 0xc350
    416c:	f7fe fe46 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4170:	4b17      	ldr	r3, [pc, #92]	; (41d0 <Clock_Ip_CompleteSpll+0x8c>)
    4172:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4176:	0e1b      	lsrs	r3, r3, #24
    4178:	f003 0301 	and.w	r3, r3, #1
    417c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    417e:	9a02      	ldr	r2, [sp, #8]
    4180:	a903      	add	r1, sp, #12
    4182:	ab04      	add	r3, sp, #16
    4184:	4618      	mov	r0, r3
    4186:	f7fe fe53 	bl	2e30 <Clock_Ip_TimeoutExpired>
    418a:	4603      	mov	r3, r0
    418c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4190:	9b05      	ldr	r3, [sp, #20]
    4192:	2b00      	cmp	r3, #0
    4194:	d106      	bne.n	41a4 <Clock_Ip_CompleteSpll+0x60>
    4196:	f89d 301b 	ldrb.w	r3, [sp, #27]
    419a:	f083 0301 	eor.w	r3, r3, #1
    419e:	b2db      	uxtb	r3, r3
    41a0:	2b00      	cmp	r3, #0
    41a2:	d1e5      	bne.n	4170 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    41a4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    41a8:	f083 0301 	eor.w	r3, r3, #1
    41ac:	b2db      	uxtb	r3, r3
    41ae:	2b00      	cmp	r3, #0
    41b0:	d002      	beq.n	41b8 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    41b2:	2302      	movs	r3, #2
    41b4:	9307      	str	r3, [sp, #28]
    41b6:	e006      	b.n	41c6 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    41b8:	9901      	ldr	r1, [sp, #4]
    41ba:	2001      	movs	r0, #1
    41bc:	f7fe fe0e 	bl	2ddc <Clock_Ip_ReportClockErrors>
    41c0:	e001      	b.n	41c6 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    41c2:	2300      	movs	r3, #0
    41c4:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    41c6:	9b07      	ldr	r3, [sp, #28]
}
    41c8:	4618      	mov	r0, r3
    41ca:	b009      	add	sp, #36	; 0x24
    41cc:	f85d fb04 	ldr.w	pc, [sp], #4
    41d0:	40064000 	.word	0x40064000

000041d4 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    41d4:	b500      	push	{lr}
    41d6:	b083      	sub	sp, #12
    41d8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    41da:	9801      	ldr	r0, [sp, #4]
    41dc:	f000 f886 	bl	42ec <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    41e0:	bf00      	nop
    41e2:	b003      	add	sp, #12
    41e4:	f85d fb04 	ldr.w	pc, [sp], #4

000041e8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    41e8:	b500      	push	{lr}
    41ea:	b083      	sub	sp, #12
    41ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ee:	9b01      	ldr	r3, [sp, #4]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d002      	beq.n	41fa <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    41f4:	9801      	ldr	r0, [sp, #4]
    41f6:	f000 f891 	bl	431c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41fa:	bf00      	nop
    41fc:	b003      	add	sp, #12
    41fe:	f85d fb04 	ldr.w	pc, [sp], #4

00004202 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4202:	b082      	sub	sp, #8
    4204:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4206:	4b19      	ldr	r3, [pc, #100]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4208:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    420c:	4a17      	ldr	r2, [pc, #92]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    420e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4212:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4216:	4b15      	ldr	r3, [pc, #84]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4218:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    421c:	4a13      	ldr	r2, [pc, #76]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4222:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4226:	4b11      	ldr	r3, [pc, #68]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4228:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    422c:	4a0f      	ldr	r2, [pc, #60]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    422e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4232:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4236:	4b0d      	ldr	r3, [pc, #52]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4238:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    423c:	4a0b      	ldr	r2, [pc, #44]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    423e:	f023 0301 	bic.w	r3, r3, #1
    4242:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4246:	4b09      	ldr	r3, [pc, #36]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4248:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    424c:	4a07      	ldr	r2, [pc, #28]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    424e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4252:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4256:	4b05      	ldr	r3, [pc, #20]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4258:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    425c:	4a03      	ldr	r2, [pc, #12]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    425e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4262:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4266:	bf00      	nop
    4268:	b002      	add	sp, #8
    426a:	4770      	bx	lr
    426c:	40064000 	.word	0x40064000

00004270 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4270:	b082      	sub	sp, #8
    4272:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4274:	9b01      	ldr	r3, [sp, #4]
    4276:	889b      	ldrh	r3, [r3, #4]
    4278:	2b01      	cmp	r3, #1
    427a:	d12f      	bne.n	42dc <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    427c:	4b1a      	ldr	r3, [pc, #104]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    427e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4282:	9b01      	ldr	r3, [sp, #4]
    4284:	7b5b      	ldrb	r3, [r3, #13]
    4286:	3b01      	subs	r3, #1
    4288:	021b      	lsls	r3, r3, #8
    428a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    428e:	9b01      	ldr	r3, [sp, #4]
    4290:	7d1b      	ldrb	r3, [r3, #20]
    4292:	3b10      	subs	r3, #16
    4294:	041b      	lsls	r3, r3, #16
    4296:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    429a:	430b      	orrs	r3, r1
    429c:	4912      	ldr	r1, [pc, #72]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    429e:	4313      	orrs	r3, r2
    42a0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    42a4:	9b01      	ldr	r3, [sp, #4]
    42a6:	7fdb      	ldrb	r3, [r3, #31]
    42a8:	2b02      	cmp	r3, #2
    42aa:	d011      	beq.n	42d0 <Clock_Ip_SetSpll_TrustedCall+0x60>
    42ac:	2b02      	cmp	r3, #2
    42ae:	dc17      	bgt.n	42e0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    42b0:	2b00      	cmp	r3, #0
    42b2:	d002      	beq.n	42ba <Clock_Ip_SetSpll_TrustedCall+0x4a>
    42b4:	2b01      	cmp	r3, #1
    42b6:	d005      	beq.n	42c4 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    42b8:	e012      	b.n	42e0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    42ba:	4b0b      	ldr	r3, [pc, #44]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42bc:	2200      	movs	r2, #0
    42be:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    42c2:	e00e      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    42ca:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    42ce:	e008      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    42d0:	4b05      	ldr	r3, [pc, #20]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    42d6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    42da:	e002      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    42dc:	bf00      	nop
    42de:	e000      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    42e0:	bf00      	nop
}
    42e2:	bf00      	nop
    42e4:	b002      	add	sp, #8
    42e6:	4770      	bx	lr
    42e8:	40064000 	.word	0x40064000

000042ec <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    42ec:	b082      	sub	sp, #8
    42ee:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    42f0:	4b09      	ldr	r3, [pc, #36]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42f2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42f6:	4a08      	ldr	r2, [pc, #32]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    42fc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4300:	4b05      	ldr	r3, [pc, #20]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4302:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4306:	4a04      	ldr	r2, [pc, #16]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4308:	f023 0301 	bic.w	r3, r3, #1
    430c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4310:	bf00      	nop
    4312:	b002      	add	sp, #8
    4314:	4770      	bx	lr
    4316:	bf00      	nop
    4318:	40064000 	.word	0x40064000

0000431c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    431c:	b082      	sub	sp, #8
    431e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4320:	9b01      	ldr	r3, [sp, #4]
    4322:	889b      	ldrh	r3, [r3, #4]
    4324:	2b01      	cmp	r3, #1
    4326:	d107      	bne.n	4338 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4328:	4b05      	ldr	r3, [pc, #20]	; (4340 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    432a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    432e:	4a04      	ldr	r2, [pc, #16]	; (4340 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4330:	f043 0301 	orr.w	r3, r3, #1
    4334:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4338:	bf00      	nop
    433a:	b002      	add	sp, #8
    433c:	4770      	bx	lr
    433e:	bf00      	nop
    4340:	40064000 	.word	0x40064000

00004344 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4344:	b082      	sub	sp, #8
    4346:	9001      	str	r0, [sp, #4]
    4348:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    434a:	bf00      	nop
    434c:	b002      	add	sp, #8
    434e:	4770      	bx	lr

00004350 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4350:	b082      	sub	sp, #8
    4352:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4354:	bf00      	nop
    4356:	b002      	add	sp, #8
    4358:	4770      	bx	lr

0000435a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    435a:	b500      	push	{lr}
    435c:	b083      	sub	sp, #12
    435e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	2b00      	cmp	r3, #0
    4364:	d002      	beq.n	436c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4366:	9801      	ldr	r0, [sp, #4]
    4368:	f000 f8ee 	bl	4548 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    436c:	bf00      	nop
    436e:	b003      	add	sp, #12
    4370:	f85d fb04 	ldr.w	pc, [sp], #4

00004374 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4374:	b500      	push	{lr}
    4376:	b083      	sub	sp, #12
    4378:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    437a:	9b01      	ldr	r3, [sp, #4]
    437c:	2b00      	cmp	r3, #0
    437e:	d002      	beq.n	4386 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4380:	9801      	ldr	r0, [sp, #4]
    4382:	f000 f8ff 	bl	4584 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4386:	bf00      	nop
    4388:	b003      	add	sp, #12
    438a:	f85d fb04 	ldr.w	pc, [sp], #4

0000438e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    438e:	b500      	push	{lr}
    4390:	b083      	sub	sp, #12
    4392:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4394:	9b01      	ldr	r3, [sp, #4]
    4396:	2b00      	cmp	r3, #0
    4398:	d002      	beq.n	43a0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    439a:	9801      	ldr	r0, [sp, #4]
    439c:	f000 f912 	bl	45c4 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43a0:	bf00      	nop
    43a2:	b003      	add	sp, #12
    43a4:	f85d fb04 	ldr.w	pc, [sp], #4

000043a8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43a8:	b500      	push	{lr}
    43aa:	b083      	sub	sp, #12
    43ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43ae:	9b01      	ldr	r3, [sp, #4]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d002      	beq.n	43ba <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    43b4:	9801      	ldr	r0, [sp, #4]
    43b6:	f000 f925 	bl	4604 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43ba:	bf00      	nop
    43bc:	b003      	add	sp, #12
    43be:	f85d fb04 	ldr.w	pc, [sp], #4

000043c2 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43c2:	b500      	push	{lr}
    43c4:	b083      	sub	sp, #12
    43c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43c8:	9b01      	ldr	r3, [sp, #4]
    43ca:	2b00      	cmp	r3, #0
    43cc:	d002      	beq.n	43d4 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    43ce:	9801      	ldr	r0, [sp, #4]
    43d0:	f000 f936 	bl	4640 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43d4:	bf00      	nop
    43d6:	b003      	add	sp, #12
    43d8:	f85d fb04 	ldr.w	pc, [sp], #4

000043dc <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    43dc:	b500      	push	{lr}
    43de:	b083      	sub	sp, #12
    43e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43e2:	9b01      	ldr	r3, [sp, #4]
    43e4:	2b00      	cmp	r3, #0
    43e6:	d002      	beq.n	43ee <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    43e8:	9801      	ldr	r0, [sp, #4]
    43ea:	f000 f949 	bl	4680 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43ee:	bf00      	nop
    43f0:	b003      	add	sp, #12
    43f2:	f85d fb04 	ldr.w	pc, [sp], #4

000043f6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    43f6:	b500      	push	{lr}
    43f8:	b083      	sub	sp, #12
    43fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43fc:	9b01      	ldr	r3, [sp, #4]
    43fe:	2b00      	cmp	r3, #0
    4400:	d002      	beq.n	4408 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4402:	9801      	ldr	r0, [sp, #4]
    4404:	f000 f958 	bl	46b8 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4408:	bf00      	nop
    440a:	b003      	add	sp, #12
    440c:	f85d fb04 	ldr.w	pc, [sp], #4

00004410 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4410:	b500      	push	{lr}
    4412:	b083      	sub	sp, #12
    4414:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4416:	9b01      	ldr	r3, [sp, #4]
    4418:	2b00      	cmp	r3, #0
    441a:	d002      	beq.n	4422 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    441c:	9801      	ldr	r0, [sp, #4]
    441e:	f000 f969 	bl	46f4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4422:	bf00      	nop
    4424:	b003      	add	sp, #12
    4426:	f85d fb04 	ldr.w	pc, [sp], #4

0000442a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    442a:	b500      	push	{lr}
    442c:	b083      	sub	sp, #12
    442e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4430:	9b01      	ldr	r3, [sp, #4]
    4432:	2b00      	cmp	r3, #0
    4434:	d002      	beq.n	443c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4436:	9801      	ldr	r0, [sp, #4]
    4438:	f000 f978 	bl	472c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    443c:	bf00      	nop
    443e:	b003      	add	sp, #12
    4440:	f85d fb04 	ldr.w	pc, [sp], #4

00004444 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4444:	b500      	push	{lr}
    4446:	b083      	sub	sp, #12
    4448:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    444a:	9b01      	ldr	r3, [sp, #4]
    444c:	2b00      	cmp	r3, #0
    444e:	d002      	beq.n	4456 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4450:	9801      	ldr	r0, [sp, #4]
    4452:	f000 f989 	bl	4768 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4456:	bf00      	nop
    4458:	b003      	add	sp, #12
    445a:	f85d fb04 	ldr.w	pc, [sp], #4

0000445e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    445e:	b500      	push	{lr}
    4460:	b083      	sub	sp, #12
    4462:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4464:	9b01      	ldr	r3, [sp, #4]
    4466:	2b00      	cmp	r3, #0
    4468:	d002      	beq.n	4470 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    446a:	9801      	ldr	r0, [sp, #4]
    446c:	f000 f998 	bl	47a0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4470:	bf00      	nop
    4472:	b003      	add	sp, #12
    4474:	f85d fb04 	ldr.w	pc, [sp], #4

00004478 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4478:	b500      	push	{lr}
    447a:	b083      	sub	sp, #12
    447c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    447e:	9b01      	ldr	r3, [sp, #4]
    4480:	2b00      	cmp	r3, #0
    4482:	d002      	beq.n	448a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4484:	9801      	ldr	r0, [sp, #4]
    4486:	f000 f9a9 	bl	47dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    448a:	bf00      	nop
    448c:	b003      	add	sp, #12
    448e:	f85d fb04 	ldr.w	pc, [sp], #4

00004492 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4492:	b500      	push	{lr}
    4494:	b083      	sub	sp, #12
    4496:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4498:	9b01      	ldr	r3, [sp, #4]
    449a:	2b00      	cmp	r3, #0
    449c:	d002      	beq.n	44a4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    449e:	9801      	ldr	r0, [sp, #4]
    44a0:	f000 f9e6 	bl	4870 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44a4:	bf00      	nop
    44a6:	b003      	add	sp, #12
    44a8:	f85d fb04 	ldr.w	pc, [sp], #4

000044ac <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44ac:	b500      	push	{lr}
    44ae:	b083      	sub	sp, #12
    44b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b2:	9b01      	ldr	r3, [sp, #4]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d002      	beq.n	44be <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    44b8:	9801      	ldr	r0, [sp, #4]
    44ba:	f000 fa25 	bl	4908 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44be:	bf00      	nop
    44c0:	b003      	add	sp, #12
    44c2:	f85d fb04 	ldr.w	pc, [sp], #4

000044c6 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44c6:	b500      	push	{lr}
    44c8:	b083      	sub	sp, #12
    44ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44cc:	9b01      	ldr	r3, [sp, #4]
    44ce:	2b00      	cmp	r3, #0
    44d0:	d002      	beq.n	44d8 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    44d2:	9801      	ldr	r0, [sp, #4]
    44d4:	f000 fa2a 	bl	492c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44d8:	bf00      	nop
    44da:	b003      	add	sp, #12
    44dc:	f85d fb04 	ldr.w	pc, [sp], #4

000044e0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    44e0:	b500      	push	{lr}
    44e2:	b083      	sub	sp, #12
    44e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44e6:	9b01      	ldr	r3, [sp, #4]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d002      	beq.n	44f2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    44ec:	9801      	ldr	r0, [sp, #4]
    44ee:	f000 fa3b 	bl	4968 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f2:	bf00      	nop
    44f4:	b003      	add	sp, #12
    44f6:	f85d fb04 	ldr.w	pc, [sp], #4

000044fa <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    44fa:	b500      	push	{lr}
    44fc:	b083      	sub	sp, #12
    44fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4500:	9b01      	ldr	r3, [sp, #4]
    4502:	2b00      	cmp	r3, #0
    4504:	d002      	beq.n	450c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4506:	9801      	ldr	r0, [sp, #4]
    4508:	f000 fa56 	bl	49b8 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    450c:	bf00      	nop
    450e:	b003      	add	sp, #12
    4510:	f85d fb04 	ldr.w	pc, [sp], #4

00004514 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b500      	push	{lr}
    4516:	b083      	sub	sp, #12
    4518:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    451a:	9b01      	ldr	r3, [sp, #4]
    451c:	2b00      	cmp	r3, #0
    451e:	d002      	beq.n	4526 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4520:	9801      	ldr	r0, [sp, #4]
    4522:	f000 fa79 	bl	4a18 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4526:	bf00      	nop
    4528:	b003      	add	sp, #12
    452a:	f85d fb04 	ldr.w	pc, [sp], #4

0000452e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    452e:	b500      	push	{lr}
    4530:	b083      	sub	sp, #12
    4532:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4534:	9b01      	ldr	r3, [sp, #4]
    4536:	2b00      	cmp	r3, #0
    4538:	d002      	beq.n	4540 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    453a:	9801      	ldr	r0, [sp, #4]
    453c:	f000 fa8a 	bl	4a54 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4540:	bf00      	nop
    4542:	b003      	add	sp, #12
    4544:	f85d fb04 	ldr.w	pc, [sp], #4

00004548 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4548:	b084      	sub	sp, #16
    454a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    454c:	4b0b      	ldr	r3, [pc, #44]	; (457c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    454e:	795b      	ldrb	r3, [r3, #5]
    4550:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4552:	4b0b      	ldr	r3, [pc, #44]	; (4580 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4554:	695b      	ldr	r3, [r3, #20]
    4556:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4558:	9b02      	ldr	r3, [sp, #8]
    455a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    455e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4560:	9b03      	ldr	r3, [sp, #12]
    4562:	061b      	lsls	r3, r3, #24
    4564:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4568:	9a02      	ldr	r2, [sp, #8]
    456a:	4313      	orrs	r3, r2
    456c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    456e:	4a04      	ldr	r2, [pc, #16]	; (4580 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4570:	9b02      	ldr	r3, [sp, #8]
    4572:	6153      	str	r3, [r2, #20]
}
    4574:	bf00      	nop
    4576:	b004      	add	sp, #16
    4578:	4770      	bx	lr
    457a:	bf00      	nop
    457c:	0000f90c 	.word	0x0000f90c
    4580:	40064000 	.word	0x40064000

00004584 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4584:	b084      	sub	sp, #16
    4586:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	685b      	ldr	r3, [r3, #4]
    458c:	4a0b      	ldr	r2, [pc, #44]	; (45bc <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    458e:	5cd3      	ldrb	r3, [r2, r3]
    4590:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4592:	4b0b      	ldr	r3, [pc, #44]	; (45c0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4594:	695b      	ldr	r3, [r3, #20]
    4596:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4598:	9b02      	ldr	r3, [sp, #8]
    459a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    459e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    45a0:	9b03      	ldr	r3, [sp, #12]
    45a2:	061b      	lsls	r3, r3, #24
    45a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45a8:	9a02      	ldr	r2, [sp, #8]
    45aa:	4313      	orrs	r3, r2
    45ac:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    45ae:	4a04      	ldr	r2, [pc, #16]	; (45c0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    45b0:	9b02      	ldr	r3, [sp, #8]
    45b2:	6153      	str	r3, [r2, #20]
}
    45b4:	bf00      	nop
    45b6:	b004      	add	sp, #16
    45b8:	4770      	bx	lr
    45ba:	bf00      	nop
    45bc:	0000f90c 	.word	0x0000f90c
    45c0:	40064000 	.word	0x40064000

000045c4 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45c4:	b084      	sub	sp, #16
    45c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45c8:	9b01      	ldr	r3, [sp, #4]
    45ca:	685b      	ldr	r3, [r3, #4]
    45cc:	4a0b      	ldr	r2, [pc, #44]	; (45fc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    45ce:	5cd3      	ldrb	r3, [r2, r3]
    45d0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    45d2:	4b0b      	ldr	r3, [pc, #44]	; (4600 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    45d4:	699b      	ldr	r3, [r3, #24]
    45d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    45d8:	9b02      	ldr	r3, [sp, #8]
    45da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45de:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    45e0:	9b03      	ldr	r3, [sp, #12]
    45e2:	061b      	lsls	r3, r3, #24
    45e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45e8:	9a02      	ldr	r2, [sp, #8]
    45ea:	4313      	orrs	r3, r2
    45ec:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    45ee:	4a04      	ldr	r2, [pc, #16]	; (4600 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    45f0:	9b02      	ldr	r3, [sp, #8]
    45f2:	6193      	str	r3, [r2, #24]
}
    45f4:	bf00      	nop
    45f6:	b004      	add	sp, #16
    45f8:	4770      	bx	lr
    45fa:	bf00      	nop
    45fc:	0000f90c 	.word	0x0000f90c
    4600:	40064000 	.word	0x40064000

00004604 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4604:	b084      	sub	sp, #16
    4606:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4608:	4b0b      	ldr	r3, [pc, #44]	; (4638 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    460a:	795b      	ldrb	r3, [r3, #5]
    460c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    460e:	4b0b      	ldr	r3, [pc, #44]	; (463c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4610:	69db      	ldr	r3, [r3, #28]
    4612:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4614:	9b02      	ldr	r3, [sp, #8]
    4616:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    461a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    461c:	9b03      	ldr	r3, [sp, #12]
    461e:	061b      	lsls	r3, r3, #24
    4620:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4624:	9a02      	ldr	r2, [sp, #8]
    4626:	4313      	orrs	r3, r2
    4628:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    462a:	4a04      	ldr	r2, [pc, #16]	; (463c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    462c:	9b02      	ldr	r3, [sp, #8]
    462e:	61d3      	str	r3, [r2, #28]
}
    4630:	bf00      	nop
    4632:	b004      	add	sp, #16
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	0000f90c 	.word	0x0000f90c
    463c:	40064000 	.word	0x40064000

00004640 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4640:	b084      	sub	sp, #16
    4642:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	685b      	ldr	r3, [r3, #4]
    4648:	4a0b      	ldr	r2, [pc, #44]	; (4678 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    464a:	5cd3      	ldrb	r3, [r2, r3]
    464c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    464e:	4b0b      	ldr	r3, [pc, #44]	; (467c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4650:	69db      	ldr	r3, [r3, #28]
    4652:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4654:	9b02      	ldr	r3, [sp, #8]
    4656:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    465a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    465c:	9b03      	ldr	r3, [sp, #12]
    465e:	061b      	lsls	r3, r3, #24
    4660:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4664:	9a02      	ldr	r2, [sp, #8]
    4666:	4313      	orrs	r3, r2
    4668:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    466a:	4a04      	ldr	r2, [pc, #16]	; (467c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    466c:	9b02      	ldr	r3, [sp, #8]
    466e:	61d3      	str	r3, [r2, #28]
}
    4670:	bf00      	nop
    4672:	b004      	add	sp, #16
    4674:	4770      	bx	lr
    4676:	bf00      	nop
    4678:	0000f90c 	.word	0x0000f90c
    467c:	40064000 	.word	0x40064000

00004680 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4680:	b084      	sub	sp, #16
    4682:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4684:	4b0a      	ldr	r3, [pc, #40]	; (46b0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4686:	7b9b      	ldrb	r3, [r3, #14]
    4688:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    468a:	4b0a      	ldr	r3, [pc, #40]	; (46b4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    468c:	691b      	ldr	r3, [r3, #16]
    468e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4690:	9b02      	ldr	r3, [sp, #8]
    4692:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4696:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4698:	9b03      	ldr	r3, [sp, #12]
    469a:	011b      	lsls	r3, r3, #4
    469c:	9a02      	ldr	r2, [sp, #8]
    469e:	4313      	orrs	r3, r2
    46a0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    46a2:	4a04      	ldr	r2, [pc, #16]	; (46b4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    46a4:	9b02      	ldr	r3, [sp, #8]
    46a6:	6113      	str	r3, [r2, #16]
}
    46a8:	bf00      	nop
    46aa:	b004      	add	sp, #16
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop
    46b0:	0000f8b4 	.word	0x0000f8b4
    46b4:	40048000 	.word	0x40048000

000046b8 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46b8:	b084      	sub	sp, #16
    46ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46bc:	9b01      	ldr	r3, [sp, #4]
    46be:	685b      	ldr	r3, [r3, #4]
    46c0:	4a0a      	ldr	r2, [pc, #40]	; (46ec <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    46c2:	5cd3      	ldrb	r3, [r2, r3]
    46c4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    46c6:	4b0a      	ldr	r3, [pc, #40]	; (46f0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    46c8:	691b      	ldr	r3, [r3, #16]
    46ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    46cc:	9b02      	ldr	r3, [sp, #8]
    46ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    46d2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    46d4:	9b03      	ldr	r3, [sp, #12]
    46d6:	011b      	lsls	r3, r3, #4
    46d8:	9a02      	ldr	r2, [sp, #8]
    46da:	4313      	orrs	r3, r2
    46dc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    46de:	4a04      	ldr	r2, [pc, #16]	; (46f0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    46e0:	9b02      	ldr	r3, [sp, #8]
    46e2:	6113      	str	r3, [r2, #16]
}
    46e4:	bf00      	nop
    46e6:	b004      	add	sp, #16
    46e8:	4770      	bx	lr
    46ea:	bf00      	nop
    46ec:	0000f8b4 	.word	0x0000f8b4
    46f0:	40048000 	.word	0x40048000

000046f4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46f4:	b084      	sub	sp, #16
    46f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46f8:	4b0a      	ldr	r3, [pc, #40]	; (4724 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    46fa:	785b      	ldrb	r3, [r3, #1]
    46fc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    46fe:	4b0a      	ldr	r3, [pc, #40]	; (4728 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4700:	691b      	ldr	r3, [r3, #16]
    4702:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4704:	9b02      	ldr	r3, [sp, #8]
    4706:	f023 030c 	bic.w	r3, r3, #12
    470a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    470c:	9b03      	ldr	r3, [sp, #12]
    470e:	009b      	lsls	r3, r3, #2
    4710:	9a02      	ldr	r2, [sp, #8]
    4712:	4313      	orrs	r3, r2
    4714:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4716:	4a04      	ldr	r2, [pc, #16]	; (4728 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4718:	9b02      	ldr	r3, [sp, #8]
    471a:	6113      	str	r3, [r2, #16]
}
    471c:	bf00      	nop
    471e:	b004      	add	sp, #16
    4720:	4770      	bx	lr
    4722:	bf00      	nop
    4724:	0000f96c 	.word	0x0000f96c
    4728:	40048000 	.word	0x40048000

0000472c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    472c:	b084      	sub	sp, #16
    472e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4730:	9b01      	ldr	r3, [sp, #4]
    4732:	685b      	ldr	r3, [r3, #4]
    4734:	4a0a      	ldr	r2, [pc, #40]	; (4760 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4736:	5cd3      	ldrb	r3, [r2, r3]
    4738:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    473a:	4b0a      	ldr	r3, [pc, #40]	; (4764 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    473c:	691b      	ldr	r3, [r3, #16]
    473e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4740:	9b02      	ldr	r3, [sp, #8]
    4742:	f023 030c 	bic.w	r3, r3, #12
    4746:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4748:	9b03      	ldr	r3, [sp, #12]
    474a:	009b      	lsls	r3, r3, #2
    474c:	9a02      	ldr	r2, [sp, #8]
    474e:	4313      	orrs	r3, r2
    4750:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4752:	4a04      	ldr	r2, [pc, #16]	; (4764 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4754:	9b02      	ldr	r3, [sp, #8]
    4756:	6113      	str	r3, [r2, #16]
}
    4758:	bf00      	nop
    475a:	b004      	add	sp, #16
    475c:	4770      	bx	lr
    475e:	bf00      	nop
    4760:	0000f96c 	.word	0x0000f96c
    4764:	40048000 	.word	0x40048000

00004768 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4768:	b084      	sub	sp, #16
    476a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    476c:	4b0a      	ldr	r3, [pc, #40]	; (4798 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    476e:	795b      	ldrb	r3, [r3, #5]
    4770:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4772:	4b0a      	ldr	r3, [pc, #40]	; (479c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4774:	6a1b      	ldr	r3, [r3, #32]
    4776:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4778:	9b02      	ldr	r3, [sp, #8]
    477a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    477e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4780:	9b03      	ldr	r3, [sp, #12]
    4782:	061b      	lsls	r3, r3, #24
    4784:	9a02      	ldr	r2, [sp, #8]
    4786:	4313      	orrs	r3, r2
    4788:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    478a:	4a04      	ldr	r2, [pc, #16]	; (479c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    478c:	9b02      	ldr	r3, [sp, #8]
    478e:	6213      	str	r3, [r2, #32]
}
    4790:	bf00      	nop
    4792:	b004      	add	sp, #16
    4794:	4770      	bx	lr
    4796:	bf00      	nop
    4798:	0000f90c 	.word	0x0000f90c
    479c:	40064000 	.word	0x40064000

000047a0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47a0:	b084      	sub	sp, #16
    47a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	685b      	ldr	r3, [r3, #4]
    47a8:	4a0a      	ldr	r2, [pc, #40]	; (47d4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    47aa:	5cd3      	ldrb	r3, [r2, r3]
    47ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    47ae:	4b0a      	ldr	r3, [pc, #40]	; (47d8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    47b0:	6a1b      	ldr	r3, [r3, #32]
    47b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    47b4:	9b02      	ldr	r3, [sp, #8]
    47b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    47ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    47bc:	9b03      	ldr	r3, [sp, #12]
    47be:	061b      	lsls	r3, r3, #24
    47c0:	9a02      	ldr	r2, [sp, #8]
    47c2:	4313      	orrs	r3, r2
    47c4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    47c6:	4a04      	ldr	r2, [pc, #16]	; (47d8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    47c8:	9b02      	ldr	r3, [sp, #8]
    47ca:	6213      	str	r3, [r2, #32]
}
    47cc:	bf00      	nop
    47ce:	b004      	add	sp, #16
    47d0:	4770      	bx	lr
    47d2:	bf00      	nop
    47d4:	0000f90c 	.word	0x0000f90c
    47d8:	40064000 	.word	0x40064000

000047dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47dc:	b086      	sub	sp, #24
    47de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47e0:	4b20      	ldr	r3, [pc, #128]	; (4864 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    47e2:	795b      	ldrb	r3, [r3, #5]
    47e4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    47e6:	9b01      	ldr	r3, [sp, #4]
    47e8:	681a      	ldr	r2, [r3, #0]
    47ea:	491f      	ldr	r1, [pc, #124]	; (4868 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    47ec:	4613      	mov	r3, r2
    47ee:	00db      	lsls	r3, r3, #3
    47f0:	4413      	add	r3, r2
    47f2:	440b      	add	r3, r1
    47f4:	781b      	ldrb	r3, [r3, #0]
    47f6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    47f8:	4b1c      	ldr	r3, [pc, #112]	; (486c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    47fa:	68db      	ldr	r3, [r3, #12]
    47fc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    47fe:	9b03      	ldr	r3, [sp, #12]
    4800:	2b03      	cmp	r3, #3
    4802:	d813      	bhi.n	482c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4804:	9b03      	ldr	r3, [sp, #12]
    4806:	005b      	lsls	r3, r3, #1
    4808:	3318      	adds	r3, #24
    480a:	2203      	movs	r2, #3
    480c:	fa02 f303 	lsl.w	r3, r2, r3
    4810:	43db      	mvns	r3, r3
    4812:	9a05      	ldr	r2, [sp, #20]
    4814:	4013      	ands	r3, r2
    4816:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4818:	9b03      	ldr	r3, [sp, #12]
    481a:	005b      	lsls	r3, r3, #1
    481c:	3318      	adds	r3, #24
    481e:	9a04      	ldr	r2, [sp, #16]
    4820:	fa02 f303 	lsl.w	r3, r2, r3
    4824:	9a05      	ldr	r2, [sp, #20]
    4826:	4313      	orrs	r3, r2
    4828:	9305      	str	r3, [sp, #20]
    482a:	e014      	b.n	4856 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    482c:	9b03      	ldr	r3, [sp, #12]
    482e:	3b04      	subs	r3, #4
    4830:	005b      	lsls	r3, r3, #1
    4832:	3310      	adds	r3, #16
    4834:	2203      	movs	r2, #3
    4836:	fa02 f303 	lsl.w	r3, r2, r3
    483a:	43db      	mvns	r3, r3
    483c:	9a05      	ldr	r2, [sp, #20]
    483e:	4013      	ands	r3, r2
    4840:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4842:	9b03      	ldr	r3, [sp, #12]
    4844:	3b04      	subs	r3, #4
    4846:	005b      	lsls	r3, r3, #1
    4848:	3310      	adds	r3, #16
    484a:	9a04      	ldr	r2, [sp, #16]
    484c:	fa02 f303 	lsl.w	r3, r2, r3
    4850:	9a05      	ldr	r2, [sp, #20]
    4852:	4313      	orrs	r3, r2
    4854:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4856:	4a05      	ldr	r2, [pc, #20]	; (486c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4858:	9b05      	ldr	r3, [sp, #20]
    485a:	60d3      	str	r3, [r2, #12]
}
    485c:	bf00      	nop
    485e:	b006      	add	sp, #24
    4860:	4770      	bx	lr
    4862:	bf00      	nop
    4864:	0000f8b4 	.word	0x0000f8b4
    4868:	0000f5a4 	.word	0x0000f5a4
    486c:	40048000 	.word	0x40048000

00004870 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4870:	b086      	sub	sp, #24
    4872:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4874:	9b01      	ldr	r3, [sp, #4]
    4876:	685b      	ldr	r3, [r3, #4]
    4878:	4a20      	ldr	r2, [pc, #128]	; (48fc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    487a:	5cd3      	ldrb	r3, [r2, r3]
    487c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    487e:	9b01      	ldr	r3, [sp, #4]
    4880:	681a      	ldr	r2, [r3, #0]
    4882:	491f      	ldr	r1, [pc, #124]	; (4900 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4884:	4613      	mov	r3, r2
    4886:	00db      	lsls	r3, r3, #3
    4888:	4413      	add	r3, r2
    488a:	440b      	add	r3, r1
    488c:	781b      	ldrb	r3, [r3, #0]
    488e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4890:	4b1c      	ldr	r3, [pc, #112]	; (4904 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4892:	68db      	ldr	r3, [r3, #12]
    4894:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4896:	9b03      	ldr	r3, [sp, #12]
    4898:	2b03      	cmp	r3, #3
    489a:	d813      	bhi.n	48c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    489c:	9b03      	ldr	r3, [sp, #12]
    489e:	005b      	lsls	r3, r3, #1
    48a0:	3318      	adds	r3, #24
    48a2:	2203      	movs	r2, #3
    48a4:	fa02 f303 	lsl.w	r3, r2, r3
    48a8:	43db      	mvns	r3, r3
    48aa:	9a05      	ldr	r2, [sp, #20]
    48ac:	4013      	ands	r3, r2
    48ae:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    48b0:	9b03      	ldr	r3, [sp, #12]
    48b2:	005b      	lsls	r3, r3, #1
    48b4:	3318      	adds	r3, #24
    48b6:	9a04      	ldr	r2, [sp, #16]
    48b8:	fa02 f303 	lsl.w	r3, r2, r3
    48bc:	9a05      	ldr	r2, [sp, #20]
    48be:	4313      	orrs	r3, r2
    48c0:	9305      	str	r3, [sp, #20]
    48c2:	e014      	b.n	48ee <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    48c4:	9b03      	ldr	r3, [sp, #12]
    48c6:	3b04      	subs	r3, #4
    48c8:	005b      	lsls	r3, r3, #1
    48ca:	3310      	adds	r3, #16
    48cc:	2203      	movs	r2, #3
    48ce:	fa02 f303 	lsl.w	r3, r2, r3
    48d2:	43db      	mvns	r3, r3
    48d4:	9a05      	ldr	r2, [sp, #20]
    48d6:	4013      	ands	r3, r2
    48d8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    48da:	9b03      	ldr	r3, [sp, #12]
    48dc:	3b04      	subs	r3, #4
    48de:	005b      	lsls	r3, r3, #1
    48e0:	3310      	adds	r3, #16
    48e2:	9a04      	ldr	r2, [sp, #16]
    48e4:	fa02 f303 	lsl.w	r3, r2, r3
    48e8:	9a05      	ldr	r2, [sp, #20]
    48ea:	4313      	orrs	r3, r2
    48ec:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    48ee:	4a05      	ldr	r2, [pc, #20]	; (4904 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    48f0:	9b05      	ldr	r3, [sp, #20]
    48f2:	60d3      	str	r3, [r2, #12]
}
    48f4:	bf00      	nop
    48f6:	b006      	add	sp, #24
    48f8:	4770      	bx	lr
    48fa:	bf00      	nop
    48fc:	0000f8b4 	.word	0x0000f8b4
    4900:	0000f5a4 	.word	0x0000f5a4
    4904:	40048000 	.word	0x40048000

00004908 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4908:	b084      	sub	sp, #16
    490a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    490c:	4b06      	ldr	r3, [pc, #24]	; (4928 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    490e:	685b      	ldr	r3, [r3, #4]
    4910:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4912:	9b03      	ldr	r3, [sp, #12]
    4914:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4918:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    491a:	4a03      	ldr	r2, [pc, #12]	; (4928 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    491c:	9b03      	ldr	r3, [sp, #12]
    491e:	6053      	str	r3, [r2, #4]
}
    4920:	bf00      	nop
    4922:	b004      	add	sp, #16
    4924:	4770      	bx	lr
    4926:	bf00      	nop
    4928:	40048000 	.word	0x40048000

0000492c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    492c:	b084      	sub	sp, #16
    492e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4930:	9b01      	ldr	r3, [sp, #4]
    4932:	685b      	ldr	r3, [r3, #4]
    4934:	4a0a      	ldr	r2, [pc, #40]	; (4960 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4936:	5cd3      	ldrb	r3, [r2, r3]
    4938:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    493a:	4b0a      	ldr	r3, [pc, #40]	; (4964 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    493c:	685b      	ldr	r3, [r3, #4]
    493e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4940:	9b02      	ldr	r3, [sp, #8]
    4942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4946:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4948:	9b03      	ldr	r3, [sp, #12]
    494a:	011b      	lsls	r3, r3, #4
    494c:	9a02      	ldr	r2, [sp, #8]
    494e:	4313      	orrs	r3, r2
    4950:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4952:	4a04      	ldr	r2, [pc, #16]	; (4964 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4954:	9b02      	ldr	r3, [sp, #8]
    4956:	6053      	str	r3, [r2, #4]
}
    4958:	bf00      	nop
    495a:	b004      	add	sp, #16
    495c:	4770      	bx	lr
    495e:	bf00      	nop
    4960:	0000f8b4 	.word	0x0000f8b4
    4964:	40048000 	.word	0x40048000

00004968 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4968:	b084      	sub	sp, #16
    496a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    496c:	9b01      	ldr	r3, [sp, #4]
    496e:	681a      	ldr	r2, [r3, #0]
    4970:	490f      	ldr	r1, [pc, #60]	; (49b0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4972:	4613      	mov	r3, r2
    4974:	00db      	lsls	r3, r3, #3
    4976:	4413      	add	r3, r2
    4978:	440b      	add	r3, r1
    497a:	3304      	adds	r3, #4
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4980:	4a0c      	ldr	r2, [pc, #48]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4982:	9b03      	ldr	r3, [sp, #12]
    4984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4988:	490a      	ldr	r1, [pc, #40]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    498a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    498e:	9b03      	ldr	r3, [sp, #12]
    4990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4994:	4a07      	ldr	r2, [pc, #28]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4996:	9b03      	ldr	r3, [sp, #12]
    4998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    499c:	4905      	ldr	r1, [pc, #20]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    499e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    49a2:	9b03      	ldr	r3, [sp, #12]
    49a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    49a8:	bf00      	nop
    49aa:	b004      	add	sp, #16
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop
    49b0:	0000f5a4 	.word	0x0000f5a4
    49b4:	40065000 	.word	0x40065000

000049b8 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49b8:	b086      	sub	sp, #24
    49ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    49bc:	9b01      	ldr	r3, [sp, #4]
    49be:	681a      	ldr	r2, [r3, #0]
    49c0:	4912      	ldr	r1, [pc, #72]	; (4a0c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    49c2:	4613      	mov	r3, r2
    49c4:	00db      	lsls	r3, r3, #3
    49c6:	4413      	add	r3, r2
    49c8:	440b      	add	r3, r1
    49ca:	3304      	adds	r3, #4
    49cc:	781b      	ldrb	r3, [r3, #0]
    49ce:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49d0:	9b01      	ldr	r3, [sp, #4]
    49d2:	685b      	ldr	r3, [r3, #4]
    49d4:	4a0e      	ldr	r2, [pc, #56]	; (4a10 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    49d6:	5cd3      	ldrb	r3, [r2, r3]
    49d8:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    49da:	4a0e      	ldr	r2, [pc, #56]	; (4a14 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    49dc:	9b05      	ldr	r3, [sp, #20]
    49de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49e2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    49e4:	9b03      	ldr	r3, [sp, #12]
    49e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    49ea:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    49ec:	9b04      	ldr	r3, [sp, #16]
    49ee:	061b      	lsls	r3, r3, #24
    49f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    49f4:	9a03      	ldr	r2, [sp, #12]
    49f6:	4313      	orrs	r3, r2
    49f8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    49fa:	4906      	ldr	r1, [pc, #24]	; (4a14 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    49fc:	9b05      	ldr	r3, [sp, #20]
    49fe:	9a03      	ldr	r2, [sp, #12]
    4a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a04:	bf00      	nop
    4a06:	b006      	add	sp, #24
    4a08:	4770      	bx	lr
    4a0a:	bf00      	nop
    4a0c:	0000f5a4 	.word	0x0000f5a4
    4a10:	0000f93c 	.word	0x0000f93c
    4a14:	40065000 	.word	0x40065000

00004a18 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a18:	b084      	sub	sp, #16
    4a1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a1c:	4b0b      	ldr	r3, [pc, #44]	; (4a4c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4a1e:	7f1b      	ldrb	r3, [r3, #28]
    4a20:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4a22:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a24:	685b      	ldr	r3, [r3, #4]
    4a26:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4a28:	9b02      	ldr	r3, [sp, #8]
    4a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a2e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4a30:	9b03      	ldr	r3, [sp, #12]
    4a32:	031b      	lsls	r3, r3, #12
    4a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4a38:	9a02      	ldr	r2, [sp, #8]
    4a3a:	4313      	orrs	r3, r2
    4a3c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4a3e:	4a04      	ldr	r2, [pc, #16]	; (4a50 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a40:	9b02      	ldr	r3, [sp, #8]
    4a42:	6053      	str	r3, [r2, #4]
}
    4a44:	bf00      	nop
    4a46:	b004      	add	sp, #16
    4a48:	4770      	bx	lr
    4a4a:	bf00      	nop
    4a4c:	0000f8b4 	.word	0x0000f8b4
    4a50:	40048000 	.word	0x40048000

00004a54 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a54:	b084      	sub	sp, #16
    4a56:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a58:	9b01      	ldr	r3, [sp, #4]
    4a5a:	685b      	ldr	r3, [r3, #4]
    4a5c:	4a0b      	ldr	r2, [pc, #44]	; (4a8c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4a5e:	5cd3      	ldrb	r3, [r2, r3]
    4a60:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4a62:	4b0b      	ldr	r3, [pc, #44]	; (4a90 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4a64:	685b      	ldr	r3, [r3, #4]
    4a66:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4a68:	9b02      	ldr	r3, [sp, #8]
    4a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a6e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4a70:	9b03      	ldr	r3, [sp, #12]
    4a72:	031b      	lsls	r3, r3, #12
    4a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4a78:	9a02      	ldr	r2, [sp, #8]
    4a7a:	4313      	orrs	r3, r2
    4a7c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4a7e:	4a04      	ldr	r2, [pc, #16]	; (4a90 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4a80:	9b02      	ldr	r3, [sp, #8]
    4a82:	6053      	str	r3, [r2, #4]
}
    4a84:	bf00      	nop
    4a86:	b004      	add	sp, #16
    4a88:	4770      	bx	lr
    4a8a:	bf00      	nop
    4a8c:	0000f8b4 	.word	0x0000f8b4
    4a90:	40048000 	.word	0x40048000

00004a94 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4a94:	b500      	push	{lr}
    4a96:	b085      	sub	sp, #20
    4a98:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4a9a:	2300      	movs	r3, #0
    4a9c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4aa0:	9b01      	ldr	r3, [sp, #4]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d037      	beq.n	4b16 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4aa6:	2300      	movs	r3, #0
    4aa8:	9303      	str	r3, [sp, #12]
    4aaa:	e02b      	b.n	4b04 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4aac:	4b29      	ldr	r3, [pc, #164]	; (4b54 <DisableSafeClock+0xc0>)
    4aae:	6819      	ldr	r1, [r3, #0]
    4ab0:	9a03      	ldr	r2, [sp, #12]
    4ab2:	4613      	mov	r3, r2
    4ab4:	005b      	lsls	r3, r3, #1
    4ab6:	4413      	add	r3, r2
    4ab8:	009b      	lsls	r3, r3, #2
    4aba:	440b      	add	r3, r1
    4abc:	3314      	adds	r3, #20
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	2b05      	cmp	r3, #5
    4ac2:	d11c      	bne.n	4afe <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4ac4:	2301      	movs	r3, #1
    4ac6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4aca:	4b22      	ldr	r3, [pc, #136]	; (4b54 <DisableSafeClock+0xc0>)
    4acc:	6819      	ldr	r1, [r3, #0]
    4ace:	9a03      	ldr	r2, [sp, #12]
    4ad0:	4613      	mov	r3, r2
    4ad2:	005b      	lsls	r3, r3, #1
    4ad4:	4413      	add	r3, r2
    4ad6:	009b      	lsls	r3, r3, #2
    4ad8:	440b      	add	r3, r1
    4ada:	3318      	adds	r3, #24
    4adc:	881b      	ldrh	r3, [r3, #0]
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d118      	bne.n	4b14 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4ae2:	4b1d      	ldr	r3, [pc, #116]	; (4b58 <DisableSafeClock+0xc4>)
    4ae4:	791b      	ldrb	r3, [r3, #4]
    4ae6:	4619      	mov	r1, r3
    4ae8:	4a1c      	ldr	r2, [pc, #112]	; (4b5c <DisableSafeClock+0xc8>)
    4aea:	460b      	mov	r3, r1
    4aec:	005b      	lsls	r3, r3, #1
    4aee:	440b      	add	r3, r1
    4af0:	009b      	lsls	r3, r3, #2
    4af2:	4413      	add	r3, r2
    4af4:	3308      	adds	r3, #8
    4af6:	681b      	ldr	r3, [r3, #0]
    4af8:	2005      	movs	r0, #5
    4afa:	4798      	blx	r3
                }
                break;
    4afc:	e00a      	b.n	4b14 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4afe:	9b03      	ldr	r3, [sp, #12]
    4b00:	3301      	adds	r3, #1
    4b02:	9303      	str	r3, [sp, #12]
    4b04:	4b13      	ldr	r3, [pc, #76]	; (4b54 <DisableSafeClock+0xc0>)
    4b06:	681b      	ldr	r3, [r3, #0]
    4b08:	7a1b      	ldrb	r3, [r3, #8]
    4b0a:	461a      	mov	r2, r3
    4b0c:	9b03      	ldr	r3, [sp, #12]
    4b0e:	4293      	cmp	r3, r2
    4b10:	d3cc      	bcc.n	4aac <DisableSafeClock+0x18>
    4b12:	e000      	b.n	4b16 <DisableSafeClock+0x82>
                break;
    4b14:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4b16:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4b1a:	f083 0301 	eor.w	r3, r3, #1
    4b1e:	b2db      	uxtb	r3, r3
    4b20:	2b00      	cmp	r3, #0
    4b22:	d013      	beq.n	4b4c <DisableSafeClock+0xb8>
    4b24:	4b0e      	ldr	r3, [pc, #56]	; (4b60 <DisableSafeClock+0xcc>)
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	f083 0301 	eor.w	r3, r3, #1
    4b2c:	b2db      	uxtb	r3, r3
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d00c      	beq.n	4b4c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4b32:	4b09      	ldr	r3, [pc, #36]	; (4b58 <DisableSafeClock+0xc4>)
    4b34:	791b      	ldrb	r3, [r3, #4]
    4b36:	4619      	mov	r1, r3
    4b38:	4a08      	ldr	r2, [pc, #32]	; (4b5c <DisableSafeClock+0xc8>)
    4b3a:	460b      	mov	r3, r1
    4b3c:	005b      	lsls	r3, r3, #1
    4b3e:	440b      	add	r3, r1
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	4413      	add	r3, r2
    4b44:	3308      	adds	r3, #8
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	2005      	movs	r0, #5
    4b4a:	4798      	blx	r3
    }
}
    4b4c:	bf00      	nop
    4b4e:	b005      	add	sp, #20
    4b50:	f85d fb04 	ldr.w	pc, [sp], #4
    4b54:	1fff8bb8 	.word	0x1fff8bb8
    4b58:	0000f534 	.word	0x0000f534
    4b5c:	0000fb64 	.word	0x0000fb64
    4b60:	1fff8b18 	.word	0x1fff8b18

00004b64 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4b64:	4b06      	ldr	r3, [pc, #24]	; (4b80 <SetFircToResetValue_TrustedCall+0x1c>)
    4b66:	2200      	movs	r2, #0
    4b68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4b6c:	4b04      	ldr	r3, [pc, #16]	; (4b80 <SetFircToResetValue_TrustedCall+0x1c>)
    4b6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b72:	4a03      	ldr	r2, [pc, #12]	; (4b80 <SetFircToResetValue_TrustedCall+0x1c>)
    4b74:	f043 0301 	orr.w	r3, r3, #1
    4b78:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4b7c:	bf00      	nop
    4b7e:	4770      	bx	lr
    4b80:	40064000 	.word	0x40064000

00004b84 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4b84:	b084      	sub	sp, #16
    4b86:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4b88:	2303      	movs	r3, #3
    4b8a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4b8c:	2300      	movs	r3, #0
    4b8e:	9302      	str	r3, [sp, #8]
    4b90:	e028      	b.n	4be4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4b92:	9b01      	ldr	r3, [sp, #4]
    4b94:	9a02      	ldr	r2, [sp, #8]
    4b96:	320d      	adds	r2, #13
    4b98:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4b9c:	2b28      	cmp	r3, #40	; 0x28
    4b9e:	d10b      	bne.n	4bb8 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4ba0:	9a01      	ldr	r2, [sp, #4]
    4ba2:	9b02      	ldr	r3, [sp, #8]
    4ba4:	330d      	adds	r3, #13
    4ba6:	00db      	lsls	r3, r3, #3
    4ba8:	4413      	add	r3, r2
    4baa:	685b      	ldr	r3, [r3, #4]
    4bac:	4a2b      	ldr	r2, [pc, #172]	; (4c5c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4bae:	5cd3      	ldrb	r3, [r2, r3]
    4bb0:	011b      	lsls	r3, r3, #4
    4bb2:	9a03      	ldr	r2, [sp, #12]
    4bb4:	4313      	orrs	r3, r2
    4bb6:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4bb8:	9b01      	ldr	r3, [sp, #4]
    4bba:	9a02      	ldr	r2, [sp, #8]
    4bbc:	320d      	adds	r2, #13
    4bbe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4bc2:	2b29      	cmp	r3, #41	; 0x29
    4bc4:	d10b      	bne.n	4bde <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4bc6:	9a01      	ldr	r2, [sp, #4]
    4bc8:	9b02      	ldr	r3, [sp, #8]
    4bca:	330d      	adds	r3, #13
    4bcc:	00db      	lsls	r3, r3, #3
    4bce:	4413      	add	r3, r2
    4bd0:	685b      	ldr	r3, [r3, #4]
    4bd2:	4a23      	ldr	r2, [pc, #140]	; (4c60 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4bd4:	5cd3      	ldrb	r3, [r2, r3]
    4bd6:	009b      	lsls	r3, r3, #2
    4bd8:	9a03      	ldr	r2, [sp, #12]
    4bda:	4313      	orrs	r3, r2
    4bdc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4bde:	9b02      	ldr	r3, [sp, #8]
    4be0:	3301      	adds	r3, #1
    4be2:	9302      	str	r3, [sp, #8]
    4be4:	9b01      	ldr	r3, [sp, #4]
    4be6:	7adb      	ldrb	r3, [r3, #11]
    4be8:	461a      	mov	r2, r3
    4bea:	9b02      	ldr	r3, [sp, #8]
    4bec:	4293      	cmp	r3, r2
    4bee:	d3d0      	bcc.n	4b92 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4bf0:	2300      	movs	r3, #0
    4bf2:	9302      	str	r3, [sp, #8]
    4bf4:	e026      	b.n	4c44 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4bf6:	9a01      	ldr	r2, [sp, #4]
    4bf8:	9b02      	ldr	r3, [sp, #8]
    4bfa:	334e      	adds	r3, #78	; 0x4e
    4bfc:	00db      	lsls	r3, r3, #3
    4bfe:	4413      	add	r3, r2
    4c00:	685b      	ldr	r3, [r3, #4]
    4c02:	2b12      	cmp	r3, #18
    4c04:	d109      	bne.n	4c1a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4c06:	9a01      	ldr	r2, [sp, #4]
    4c08:	9b02      	ldr	r3, [sp, #8]
    4c0a:	334e      	adds	r3, #78	; 0x4e
    4c0c:	00db      	lsls	r3, r3, #3
    4c0e:	4413      	add	r3, r2
    4c10:	891b      	ldrh	r3, [r3, #8]
    4c12:	005b      	lsls	r3, r3, #1
    4c14:	9a03      	ldr	r2, [sp, #12]
    4c16:	4313      	orrs	r3, r2
    4c18:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4c1a:	9a01      	ldr	r2, [sp, #4]
    4c1c:	9b02      	ldr	r3, [sp, #8]
    4c1e:	334e      	adds	r3, #78	; 0x4e
    4c20:	00db      	lsls	r3, r3, #3
    4c22:	4413      	add	r3, r2
    4c24:	685b      	ldr	r3, [r3, #4]
    4c26:	2b13      	cmp	r3, #19
    4c28:	d109      	bne.n	4c3e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4c2a:	9a01      	ldr	r2, [sp, #4]
    4c2c:	9b02      	ldr	r3, [sp, #8]
    4c2e:	334e      	adds	r3, #78	; 0x4e
    4c30:	00db      	lsls	r3, r3, #3
    4c32:	4413      	add	r3, r2
    4c34:	891b      	ldrh	r3, [r3, #8]
    4c36:	461a      	mov	r2, r3
    4c38:	9b03      	ldr	r3, [sp, #12]
    4c3a:	4313      	orrs	r3, r2
    4c3c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4c3e:	9b02      	ldr	r3, [sp, #8]
    4c40:	3301      	adds	r3, #1
    4c42:	9302      	str	r3, [sp, #8]
    4c44:	9b01      	ldr	r3, [sp, #4]
    4c46:	7c1b      	ldrb	r3, [r3, #16]
    4c48:	461a      	mov	r2, r3
    4c4a:	9b02      	ldr	r3, [sp, #8]
    4c4c:	4293      	cmp	r3, r2
    4c4e:	d3d2      	bcc.n	4bf6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4c50:	4a04      	ldr	r2, [pc, #16]	; (4c64 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4c52:	9b03      	ldr	r3, [sp, #12]
    4c54:	6113      	str	r3, [r2, #16]
}
    4c56:	bf00      	nop
    4c58:	b004      	add	sp, #16
    4c5a:	4770      	bx	lr
    4c5c:	0000f8b4 	.word	0x0000f8b4
    4c60:	0000f96c 	.word	0x0000f96c
    4c64:	40048000 	.word	0x40048000

00004c68 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4c68:	b500      	push	{lr}
    4c6a:	b089      	sub	sp, #36	; 0x24
    4c6c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4c6e:	2300      	movs	r3, #0
    4c70:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4c74:	4a21      	ldr	r2, [pc, #132]	; (4cfc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4c76:	9b01      	ldr	r3, [sp, #4]
    4c78:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4c7a:	4b21      	ldr	r3, [pc, #132]	; (4d00 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4c7c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c80:	f003 0301 	and.w	r3, r3, #1
    4c84:	2b00      	cmp	r3, #0
    4c86:	d12e      	bne.n	4ce6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4c88:	4b1e      	ldr	r3, [pc, #120]	; (4d04 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4c8a:	2200      	movs	r2, #0
    4c8c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4c8e:	f7ff ff69 	bl	4b64 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4c92:	aa03      	add	r2, sp, #12
    4c94:	a904      	add	r1, sp, #16
    4c96:	a805      	add	r0, sp, #20
    4c98:	f24c 3350 	movw	r3, #50000	; 0xc350
    4c9c:	f7fe f8ae 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4ca0:	4b17      	ldr	r3, [pc, #92]	; (4d00 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ca6:	0e1b      	lsrs	r3, r3, #24
    4ca8:	f003 0301 	and.w	r3, r3, #1
    4cac:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4cae:	9a03      	ldr	r2, [sp, #12]
    4cb0:	a904      	add	r1, sp, #16
    4cb2:	ab05      	add	r3, sp, #20
    4cb4:	4618      	mov	r0, r3
    4cb6:	f7fe f8bb 	bl	2e30 <Clock_Ip_TimeoutExpired>
    4cba:	4603      	mov	r3, r0
    4cbc:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4cc0:	9b06      	ldr	r3, [sp, #24]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d106      	bne.n	4cd4 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4cc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4cca:	f083 0301 	eor.w	r3, r3, #1
    4cce:	b2db      	uxtb	r3, r3
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d1e5      	bne.n	4ca0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4cd4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d007      	beq.n	4cec <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4cdc:	2105      	movs	r1, #5
    4cde:	2001      	movs	r0, #1
    4ce0:	f7fe f87c 	bl	2ddc <Clock_Ip_ReportClockErrors>
    4ce4:	e002      	b.n	4cec <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4ce6:	4b07      	ldr	r3, [pc, #28]	; (4d04 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4ce8:	2201      	movs	r2, #1
    4cea:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4cec:	9801      	ldr	r0, [sp, #4]
    4cee:	f7ff ff49 	bl	4b84 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4cf2:	bf00      	nop
    4cf4:	b009      	add	sp, #36	; 0x24
    4cf6:	f85d fb04 	ldr.w	pc, [sp], #4
    4cfa:	bf00      	nop
    4cfc:	1fff8bb8 	.word	0x1fff8bb8
    4d00:	40064000 	.word	0x40064000
    4d04:	1fff8b18 	.word	0x1fff8b18

00004d08 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4d08:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4d0a:	2300      	movs	r3, #0
    4d0c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4d0e:	4b29      	ldr	r3, [pc, #164]	; (4db4 <getFircConfig+0xac>)
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d024      	beq.n	4d60 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d16:	2300      	movs	r3, #0
    4d18:	9301      	str	r3, [sp, #4]
    4d1a:	e01a      	b.n	4d52 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4d1c:	4b25      	ldr	r3, [pc, #148]	; (4db4 <getFircConfig+0xac>)
    4d1e:	6819      	ldr	r1, [r3, #0]
    4d20:	9a01      	ldr	r2, [sp, #4]
    4d22:	4613      	mov	r3, r2
    4d24:	005b      	lsls	r3, r3, #1
    4d26:	4413      	add	r3, r2
    4d28:	009b      	lsls	r3, r3, #2
    4d2a:	440b      	add	r3, r1
    4d2c:	3314      	adds	r3, #20
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2b05      	cmp	r3, #5
    4d32:	d10b      	bne.n	4d4c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4d34:	4b1f      	ldr	r3, [pc, #124]	; (4db4 <getFircConfig+0xac>)
    4d36:	6819      	ldr	r1, [r3, #0]
    4d38:	9a01      	ldr	r2, [sp, #4]
    4d3a:	4613      	mov	r3, r2
    4d3c:	005b      	lsls	r3, r3, #1
    4d3e:	4413      	add	r3, r2
    4d40:	009b      	lsls	r3, r3, #2
    4d42:	3310      	adds	r3, #16
    4d44:	440b      	add	r3, r1
    4d46:	3304      	adds	r3, #4
    4d48:	9300      	str	r3, [sp, #0]
                break;
    4d4a:	e009      	b.n	4d60 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d4c:	9b01      	ldr	r3, [sp, #4]
    4d4e:	3301      	adds	r3, #1
    4d50:	9301      	str	r3, [sp, #4]
    4d52:	4b18      	ldr	r3, [pc, #96]	; (4db4 <getFircConfig+0xac>)
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	7a1b      	ldrb	r3, [r3, #8]
    4d58:	461a      	mov	r2, r3
    4d5a:	9b01      	ldr	r3, [sp, #4]
    4d5c:	4293      	cmp	r3, r2
    4d5e:	d3dd      	bcc.n	4d1c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d60:	9b00      	ldr	r3, [sp, #0]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d121      	bne.n	4daa <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4d66:	4b14      	ldr	r3, [pc, #80]	; (4db8 <getFircConfig+0xb0>)
    4d68:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4d6a:	4b13      	ldr	r3, [pc, #76]	; (4db8 <getFircConfig+0xb0>)
    4d6c:	2205      	movs	r2, #5
    4d6e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4d70:	4b12      	ldr	r3, [pc, #72]	; (4dbc <getFircConfig+0xb4>)
    4d72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d76:	b29b      	uxth	r3, r3
    4d78:	f003 0301 	and.w	r3, r3, #1
    4d7c:	b29a      	uxth	r2, r3
    4d7e:	4b0e      	ldr	r3, [pc, #56]	; (4db8 <getFircConfig+0xb0>)
    4d80:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4d82:	4b0e      	ldr	r3, [pc, #56]	; (4dbc <getFircConfig+0xb4>)
    4d84:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4d88:	b2db      	uxtb	r3, r3
    4d8a:	f003 0303 	and.w	r3, r3, #3
    4d8e:	b2da      	uxtb	r2, r3
    4d90:	4b09      	ldr	r3, [pc, #36]	; (4db8 <getFircConfig+0xb0>)
    4d92:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4d94:	4b09      	ldr	r3, [pc, #36]	; (4dbc <getFircConfig+0xb4>)
    4d96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	10db      	asrs	r3, r3, #3
    4d9e:	b2db      	uxtb	r3, r3
    4da0:	f003 0301 	and.w	r3, r3, #1
    4da4:	b2da      	uxtb	r2, r3
    4da6:	4b04      	ldr	r3, [pc, #16]	; (4db8 <getFircConfig+0xb0>)
    4da8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4daa:	9b00      	ldr	r3, [sp, #0]
}
    4dac:	4618      	mov	r0, r3
    4dae:	b002      	add	sp, #8
    4db0:	4770      	bx	lr
    4db2:	bf00      	nop
    4db4:	1fff8bb8 	.word	0x1fff8bb8
    4db8:	1fff8c24 	.word	0x1fff8c24
    4dbc:	40064000 	.word	0x40064000

00004dc0 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4dc0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4dc2:	2300      	movs	r3, #0
    4dc4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4dc6:	4b20      	ldr	r3, [pc, #128]	; (4e48 <getSoscConfig+0x88>)
    4dc8:	681b      	ldr	r3, [r3, #0]
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d024      	beq.n	4e18 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4dce:	2300      	movs	r3, #0
    4dd0:	9301      	str	r3, [sp, #4]
    4dd2:	e01a      	b.n	4e0a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4dd4:	4b1c      	ldr	r3, [pc, #112]	; (4e48 <getSoscConfig+0x88>)
    4dd6:	6819      	ldr	r1, [r3, #0]
    4dd8:	9a01      	ldr	r2, [sp, #4]
    4dda:	4613      	mov	r3, r2
    4ddc:	009b      	lsls	r3, r3, #2
    4dde:	4413      	add	r3, r2
    4de0:	009b      	lsls	r3, r3, #2
    4de2:	440b      	add	r3, r1
    4de4:	332c      	adds	r3, #44	; 0x2c
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	2b08      	cmp	r3, #8
    4dea:	d10b      	bne.n	4e04 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4dec:	4b16      	ldr	r3, [pc, #88]	; (4e48 <getSoscConfig+0x88>)
    4dee:	6819      	ldr	r1, [r3, #0]
    4df0:	9a01      	ldr	r2, [sp, #4]
    4df2:	4613      	mov	r3, r2
    4df4:	009b      	lsls	r3, r3, #2
    4df6:	4413      	add	r3, r2
    4df8:	009b      	lsls	r3, r3, #2
    4dfa:	3328      	adds	r3, #40	; 0x28
    4dfc:	440b      	add	r3, r1
    4dfe:	3304      	adds	r3, #4
    4e00:	9300      	str	r3, [sp, #0]
                break;
    4e02:	e009      	b.n	4e18 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4e04:	9b01      	ldr	r3, [sp, #4]
    4e06:	3301      	adds	r3, #1
    4e08:	9301      	str	r3, [sp, #4]
    4e0a:	4b0f      	ldr	r3, [pc, #60]	; (4e48 <getSoscConfig+0x88>)
    4e0c:	681b      	ldr	r3, [r3, #0]
    4e0e:	7a5b      	ldrb	r3, [r3, #9]
    4e10:	461a      	mov	r2, r3
    4e12:	9b01      	ldr	r3, [sp, #4]
    4e14:	4293      	cmp	r3, r2
    4e16:	d3dd      	bcc.n	4dd4 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e18:	9b00      	ldr	r3, [sp, #0]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d110      	bne.n	4e40 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4e1e:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <getSoscConfig+0x8c>)
    4e20:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4e22:	4b0a      	ldr	r3, [pc, #40]	; (4e4c <getSoscConfig+0x8c>)
    4e24:	2208      	movs	r2, #8
    4e26:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4e28:	4b09      	ldr	r3, [pc, #36]	; (4e50 <getSoscConfig+0x90>)
    4e2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4e2e:	b29b      	uxth	r3, r3
    4e30:	f003 0301 	and.w	r3, r3, #1
    4e34:	b29a      	uxth	r2, r3
    4e36:	4b05      	ldr	r3, [pc, #20]	; (4e4c <getSoscConfig+0x8c>)
    4e38:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4e3a:	4b04      	ldr	r3, [pc, #16]	; (4e4c <getSoscConfig+0x8c>)
    4e3c:	4a05      	ldr	r2, [pc, #20]	; (4e54 <getSoscConfig+0x94>)
    4e3e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4e40:	9b00      	ldr	r3, [sp, #0]
}
    4e42:	4618      	mov	r0, r3
    4e44:	b002      	add	sp, #8
    4e46:	4770      	bx	lr
    4e48:	1fff8bb8 	.word	0x1fff8bb8
    4e4c:	1fff8c30 	.word	0x1fff8c30
    4e50:	40064000 	.word	0x40064000
    4e54:	02625a00 	.word	0x02625a00

00004e58 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4e58:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4e5a:	2300      	movs	r3, #0
    4e5c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e5e:	4b28      	ldr	r3, [pc, #160]	; (4f00 <getSpllConfig+0xa8>)
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d023      	beq.n	4eae <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4e66:	2300      	movs	r3, #0
    4e68:	9301      	str	r3, [sp, #4]
    4e6a:	e019      	b.n	4ea0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4e6c:	4b24      	ldr	r3, [pc, #144]	; (4f00 <getSpllConfig+0xa8>)
    4e6e:	6819      	ldr	r1, [r3, #0]
    4e70:	9a01      	ldr	r2, [sp, #4]
    4e72:	4613      	mov	r3, r2
    4e74:	009b      	lsls	r3, r3, #2
    4e76:	4413      	add	r3, r2
    4e78:	00db      	lsls	r3, r3, #3
    4e7a:	440b      	add	r3, r1
    4e7c:	3340      	adds	r3, #64	; 0x40
    4e7e:	681b      	ldr	r3, [r3, #0]
    4e80:	2b09      	cmp	r3, #9
    4e82:	d10a      	bne.n	4e9a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4e84:	4b1e      	ldr	r3, [pc, #120]	; (4f00 <getSpllConfig+0xa8>)
    4e86:	6819      	ldr	r1, [r3, #0]
    4e88:	9a01      	ldr	r2, [sp, #4]
    4e8a:	4613      	mov	r3, r2
    4e8c:	009b      	lsls	r3, r3, #2
    4e8e:	4413      	add	r3, r2
    4e90:	00db      	lsls	r3, r3, #3
    4e92:	3340      	adds	r3, #64	; 0x40
    4e94:	440b      	add	r3, r1
    4e96:	9300      	str	r3, [sp, #0]
                break;
    4e98:	e009      	b.n	4eae <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4e9a:	9b01      	ldr	r3, [sp, #4]
    4e9c:	3301      	adds	r3, #1
    4e9e:	9301      	str	r3, [sp, #4]
    4ea0:	4b17      	ldr	r3, [pc, #92]	; (4f00 <getSpllConfig+0xa8>)
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	7a9b      	ldrb	r3, [r3, #10]
    4ea6:	461a      	mov	r2, r3
    4ea8:	9b01      	ldr	r3, [sp, #4]
    4eaa:	4293      	cmp	r3, r2
    4eac:	d3de      	bcc.n	4e6c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4eae:	9b00      	ldr	r3, [sp, #0]
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d121      	bne.n	4ef8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4eb4:	4b13      	ldr	r3, [pc, #76]	; (4f04 <getSpllConfig+0xac>)
    4eb6:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4eb8:	4b12      	ldr	r3, [pc, #72]	; (4f04 <getSpllConfig+0xac>)
    4eba:	2209      	movs	r2, #9
    4ebc:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4ebe:	4b12      	ldr	r3, [pc, #72]	; (4f08 <getSpllConfig+0xb0>)
    4ec0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ec4:	b29b      	uxth	r3, r3
    4ec6:	f003 0301 	and.w	r3, r3, #1
    4eca:	b29a      	uxth	r2, r3
    4ecc:	4b0d      	ldr	r3, [pc, #52]	; (4f04 <getSpllConfig+0xac>)
    4ece:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4ed0:	4b0d      	ldr	r3, [pc, #52]	; (4f08 <getSpllConfig+0xb0>)
    4ed2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4ed6:	0a1b      	lsrs	r3, r3, #8
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	f003 0307 	and.w	r3, r3, #7
    4ede:	b2da      	uxtb	r2, r3
    4ee0:	4b08      	ldr	r3, [pc, #32]	; (4f04 <getSpllConfig+0xac>)
    4ee2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4ee4:	4b08      	ldr	r3, [pc, #32]	; (4f08 <getSpllConfig+0xb0>)
    4ee6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4eea:	0c1b      	lsrs	r3, r3, #16
    4eec:	b2db      	uxtb	r3, r3
    4eee:	f003 031f 	and.w	r3, r3, #31
    4ef2:	b2da      	uxtb	r2, r3
    4ef4:	4b03      	ldr	r3, [pc, #12]	; (4f04 <getSpllConfig+0xac>)
    4ef6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4ef8:	9b00      	ldr	r3, [sp, #0]
}
    4efa:	4618      	mov	r0, r3
    4efc:	b002      	add	sp, #8
    4efe:	4770      	bx	lr
    4f00:	1fff8bb8 	.word	0x1fff8bb8
    4f04:	1fff8c44 	.word	0x1fff8c44
    4f08:	40064000 	.word	0x40064000

00004f0c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4f0c:	b086      	sub	sp, #24
    4f0e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4f10:	2300      	movs	r3, #0
    4f12:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	2b1b      	cmp	r3, #27
    4f18:	d00f      	beq.n	4f3a <getSelectorConfig+0x2e>
    4f1a:	9b01      	ldr	r3, [sp, #4]
    4f1c:	2b1b      	cmp	r3, #27
    4f1e:	d80f      	bhi.n	4f40 <getSelectorConfig+0x34>
    4f20:	9b01      	ldr	r3, [sp, #4]
    4f22:	2b19      	cmp	r3, #25
    4f24:	d003      	beq.n	4f2e <getSelectorConfig+0x22>
    4f26:	9b01      	ldr	r3, [sp, #4]
    4f28:	2b1a      	cmp	r3, #26
    4f2a:	d003      	beq.n	4f34 <getSelectorConfig+0x28>
    4f2c:	e008      	b.n	4f40 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4f2e:	2300      	movs	r3, #0
    4f30:	9304      	str	r3, [sp, #16]
            break;
    4f32:	e008      	b.n	4f46 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4f34:	2301      	movs	r3, #1
    4f36:	9304      	str	r3, [sp, #16]
            break;
    4f38:	e005      	b.n	4f46 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4f3a:	2302      	movs	r3, #2
    4f3c:	9304      	str	r3, [sp, #16]
            break;
    4f3e:	e002      	b.n	4f46 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4f40:	2300      	movs	r3, #0
    4f42:	9304      	str	r3, [sp, #16]
            break;
    4f44:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f46:	4b36      	ldr	r3, [pc, #216]	; (5020 <getSelectorConfig+0x114>)
    4f48:	681b      	ldr	r3, [r3, #0]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d01d      	beq.n	4f8a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4f4e:	2300      	movs	r3, #0
    4f50:	9303      	str	r3, [sp, #12]
    4f52:	e013      	b.n	4f7c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4f54:	4b32      	ldr	r3, [pc, #200]	; (5020 <getSelectorConfig+0x114>)
    4f56:	681b      	ldr	r3, [r3, #0]
    4f58:	9a03      	ldr	r2, [sp, #12]
    4f5a:	320d      	adds	r2, #13
    4f5c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4f60:	9a01      	ldr	r2, [sp, #4]
    4f62:	429a      	cmp	r2, r3
    4f64:	d107      	bne.n	4f76 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4f66:	4b2e      	ldr	r3, [pc, #184]	; (5020 <getSelectorConfig+0x114>)
    4f68:	681a      	ldr	r2, [r3, #0]
    4f6a:	9b03      	ldr	r3, [sp, #12]
    4f6c:	330d      	adds	r3, #13
    4f6e:	00db      	lsls	r3, r3, #3
    4f70:	4413      	add	r3, r2
    4f72:	9305      	str	r3, [sp, #20]
                break;
    4f74:	e009      	b.n	4f8a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4f76:	9b03      	ldr	r3, [sp, #12]
    4f78:	3301      	adds	r3, #1
    4f7a:	9303      	str	r3, [sp, #12]
    4f7c:	4b28      	ldr	r3, [pc, #160]	; (5020 <getSelectorConfig+0x114>)
    4f7e:	681b      	ldr	r3, [r3, #0]
    4f80:	7adb      	ldrb	r3, [r3, #11]
    4f82:	461a      	mov	r2, r3
    4f84:	9b03      	ldr	r3, [sp, #12]
    4f86:	4293      	cmp	r3, r2
    4f88:	d3e4      	bcc.n	4f54 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f8a:	9b05      	ldr	r3, [sp, #20]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d140      	bne.n	5012 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4f90:	9b04      	ldr	r3, [sp, #16]
    4f92:	00db      	lsls	r3, r3, #3
    4f94:	4a23      	ldr	r2, [pc, #140]	; (5024 <getSelectorConfig+0x118>)
    4f96:	4413      	add	r3, r2
    4f98:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4f9a:	4922      	ldr	r1, [pc, #136]	; (5024 <getSelectorConfig+0x118>)
    4f9c:	9b04      	ldr	r3, [sp, #16]
    4f9e:	9a01      	ldr	r2, [sp, #4]
    4fa0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4fa4:	9b01      	ldr	r3, [sp, #4]
    4fa6:	2b1b      	cmp	r3, #27
    4fa8:	d025      	beq.n	4ff6 <getSelectorConfig+0xea>
    4faa:	9b01      	ldr	r3, [sp, #4]
    4fac:	2b1b      	cmp	r3, #27
    4fae:	d832      	bhi.n	5016 <getSelectorConfig+0x10a>
    4fb0:	9b01      	ldr	r3, [sp, #4]
    4fb2:	2b19      	cmp	r3, #25
    4fb4:	d003      	beq.n	4fbe <getSelectorConfig+0xb2>
    4fb6:	9b01      	ldr	r3, [sp, #4]
    4fb8:	2b1a      	cmp	r3, #26
    4fba:	d00e      	beq.n	4fda <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4fbc:	e02b      	b.n	5016 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4fbe:	4b1a      	ldr	r3, [pc, #104]	; (5028 <getSelectorConfig+0x11c>)
    4fc0:	695b      	ldr	r3, [r3, #20]
    4fc2:	0e1b      	lsrs	r3, r3, #24
    4fc4:	f003 030f 	and.w	r3, r3, #15
    4fc8:	4a18      	ldr	r2, [pc, #96]	; (502c <getSelectorConfig+0x120>)
    4fca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4fce:	4915      	ldr	r1, [pc, #84]	; (5024 <getSelectorConfig+0x118>)
    4fd0:	9b04      	ldr	r3, [sp, #16]
    4fd2:	00db      	lsls	r3, r3, #3
    4fd4:	440b      	add	r3, r1
    4fd6:	605a      	str	r2, [r3, #4]
                break;
    4fd8:	e01e      	b.n	5018 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4fda:	4b13      	ldr	r3, [pc, #76]	; (5028 <getSelectorConfig+0x11c>)
    4fdc:	699b      	ldr	r3, [r3, #24]
    4fde:	0e1b      	lsrs	r3, r3, #24
    4fe0:	f003 030f 	and.w	r3, r3, #15
    4fe4:	4a11      	ldr	r2, [pc, #68]	; (502c <getSelectorConfig+0x120>)
    4fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4fea:	490e      	ldr	r1, [pc, #56]	; (5024 <getSelectorConfig+0x118>)
    4fec:	9b04      	ldr	r3, [sp, #16]
    4fee:	00db      	lsls	r3, r3, #3
    4ff0:	440b      	add	r3, r1
    4ff2:	605a      	str	r2, [r3, #4]
                break;
    4ff4:	e010      	b.n	5018 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4ff6:	4b0c      	ldr	r3, [pc, #48]	; (5028 <getSelectorConfig+0x11c>)
    4ff8:	69db      	ldr	r3, [r3, #28]
    4ffa:	0e1b      	lsrs	r3, r3, #24
    4ffc:	f003 030f 	and.w	r3, r3, #15
    5000:	4a0a      	ldr	r2, [pc, #40]	; (502c <getSelectorConfig+0x120>)
    5002:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5006:	4907      	ldr	r1, [pc, #28]	; (5024 <getSelectorConfig+0x118>)
    5008:	9b04      	ldr	r3, [sp, #16]
    500a:	00db      	lsls	r3, r3, #3
    500c:	440b      	add	r3, r1
    500e:	605a      	str	r2, [r3, #4]
                break;
    5010:	e002      	b.n	5018 <getSelectorConfig+0x10c>
        }
    }
    5012:	bf00      	nop
    5014:	e000      	b.n	5018 <getSelectorConfig+0x10c>
                break;
    5016:	bf00      	nop

    return ReturnValue;
    5018:	9b05      	ldr	r3, [sp, #20]
}
    501a:	4618      	mov	r0, r3
    501c:	b006      	add	sp, #24
    501e:	4770      	bx	lr
    5020:	1fff8bb8 	.word	0x1fff8bb8
    5024:	1fff8c6c 	.word	0x1fff8c6c
    5028:	40064000 	.word	0x40064000
    502c:	0000fc34 	.word	0x0000fc34

00005030 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5030:	b086      	sub	sp, #24
    5032:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5034:	2300      	movs	r3, #0
    5036:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5038:	2300      	movs	r3, #0
    503a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    503c:	9b01      	ldr	r3, [sp, #4]
    503e:	2b1f      	cmp	r3, #31
    5040:	d00f      	beq.n	5062 <getCoreDividerConfig+0x32>
    5042:	9b01      	ldr	r3, [sp, #4]
    5044:	2b1f      	cmp	r3, #31
    5046:	d80f      	bhi.n	5068 <getCoreDividerConfig+0x38>
    5048:	9b01      	ldr	r3, [sp, #4]
    504a:	2b1d      	cmp	r3, #29
    504c:	d003      	beq.n	5056 <getCoreDividerConfig+0x26>
    504e:	9b01      	ldr	r3, [sp, #4]
    5050:	2b1e      	cmp	r3, #30
    5052:	d003      	beq.n	505c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5054:	e008      	b.n	5068 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5056:	2300      	movs	r3, #0
    5058:	9304      	str	r3, [sp, #16]
            break;
    505a:	e006      	b.n	506a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    505c:	2301      	movs	r3, #1
    505e:	9304      	str	r3, [sp, #16]
            break;
    5060:	e003      	b.n	506a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5062:	2302      	movs	r3, #2
    5064:	9304      	str	r3, [sp, #16]
            break;
    5066:	e000      	b.n	506a <getCoreDividerConfig+0x3a>
                break;
    5068:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    506a:	4b41      	ldr	r3, [pc, #260]	; (5170 <getCoreDividerConfig+0x140>)
    506c:	681b      	ldr	r3, [r3, #0]
    506e:	2b00      	cmp	r3, #0
    5070:	d026      	beq.n	50c0 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5072:	2300      	movs	r3, #0
    5074:	9303      	str	r3, [sp, #12]
    5076:	e01c      	b.n	50b2 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5078:	4b3d      	ldr	r3, [pc, #244]	; (5170 <getCoreDividerConfig+0x140>)
    507a:	6819      	ldr	r1, [r3, #0]
    507c:	9a03      	ldr	r2, [sp, #12]
    507e:	4613      	mov	r3, r2
    5080:	005b      	lsls	r3, r3, #1
    5082:	4413      	add	r3, r2
    5084:	009b      	lsls	r3, r3, #2
    5086:	440b      	add	r3, r1
    5088:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    508c:	681b      	ldr	r3, [r3, #0]
    508e:	9a01      	ldr	r2, [sp, #4]
    5090:	429a      	cmp	r2, r3
    5092:	d10b      	bne.n	50ac <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5094:	4b36      	ldr	r3, [pc, #216]	; (5170 <getCoreDividerConfig+0x140>)
    5096:	6819      	ldr	r1, [r3, #0]
    5098:	9a03      	ldr	r2, [sp, #12]
    509a:	4613      	mov	r3, r2
    509c:	005b      	lsls	r3, r3, #1
    509e:	4413      	add	r3, r2
    50a0:	009b      	lsls	r3, r3, #2
    50a2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50a6:	440b      	add	r3, r1
    50a8:	9305      	str	r3, [sp, #20]
                break;
    50aa:	e009      	b.n	50c0 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50ac:	9b03      	ldr	r3, [sp, #12]
    50ae:	3301      	adds	r3, #1
    50b0:	9303      	str	r3, [sp, #12]
    50b2:	4b2f      	ldr	r3, [pc, #188]	; (5170 <getCoreDividerConfig+0x140>)
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	7b1b      	ldrb	r3, [r3, #12]
    50b8:	461a      	mov	r2, r3
    50ba:	9b03      	ldr	r3, [sp, #12]
    50bc:	4293      	cmp	r3, r2
    50be:	d3db      	bcc.n	5078 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    50c0:	9b05      	ldr	r3, [sp, #20]
    50c2:	2b00      	cmp	r3, #0
    50c4:	d14d      	bne.n	5162 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    50c6:	9a04      	ldr	r2, [sp, #16]
    50c8:	4613      	mov	r3, r2
    50ca:	005b      	lsls	r3, r3, #1
    50cc:	4413      	add	r3, r2
    50ce:	009b      	lsls	r3, r3, #2
    50d0:	4a28      	ldr	r2, [pc, #160]	; (5174 <getCoreDividerConfig+0x144>)
    50d2:	4413      	add	r3, r2
    50d4:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    50d6:	4927      	ldr	r1, [pc, #156]	; (5174 <getCoreDividerConfig+0x144>)
    50d8:	9a04      	ldr	r2, [sp, #16]
    50da:	4613      	mov	r3, r2
    50dc:	005b      	lsls	r3, r3, #1
    50de:	4413      	add	r3, r2
    50e0:	009b      	lsls	r3, r3, #2
    50e2:	440b      	add	r3, r1
    50e4:	9a01      	ldr	r2, [sp, #4]
    50e6:	601a      	str	r2, [r3, #0]
        switch(Name)
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	2b1f      	cmp	r3, #31
    50ec:	d029      	beq.n	5142 <getCoreDividerConfig+0x112>
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	2b1f      	cmp	r3, #31
    50f2:	d838      	bhi.n	5166 <getCoreDividerConfig+0x136>
    50f4:	9b01      	ldr	r3, [sp, #4]
    50f6:	2b1d      	cmp	r3, #29
    50f8:	d003      	beq.n	5102 <getCoreDividerConfig+0xd2>
    50fa:	9b01      	ldr	r3, [sp, #4]
    50fc:	2b1e      	cmp	r3, #30
    50fe:	d010      	beq.n	5122 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5100:	e031      	b.n	5166 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5102:	4b1d      	ldr	r3, [pc, #116]	; (5178 <getCoreDividerConfig+0x148>)
    5104:	695b      	ldr	r3, [r3, #20]
    5106:	0c1b      	lsrs	r3, r3, #16
    5108:	f003 030f 	and.w	r3, r3, #15
    510c:	1c59      	adds	r1, r3, #1
    510e:	4819      	ldr	r0, [pc, #100]	; (5174 <getCoreDividerConfig+0x144>)
    5110:	9a04      	ldr	r2, [sp, #16]
    5112:	4613      	mov	r3, r2
    5114:	005b      	lsls	r3, r3, #1
    5116:	4413      	add	r3, r2
    5118:	009b      	lsls	r3, r3, #2
    511a:	4403      	add	r3, r0
    511c:	3304      	adds	r3, #4
    511e:	6019      	str	r1, [r3, #0]
                break;
    5120:	e022      	b.n	5168 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5122:	4b15      	ldr	r3, [pc, #84]	; (5178 <getCoreDividerConfig+0x148>)
    5124:	699b      	ldr	r3, [r3, #24]
    5126:	0c1b      	lsrs	r3, r3, #16
    5128:	f003 030f 	and.w	r3, r3, #15
    512c:	1c59      	adds	r1, r3, #1
    512e:	4811      	ldr	r0, [pc, #68]	; (5174 <getCoreDividerConfig+0x144>)
    5130:	9a04      	ldr	r2, [sp, #16]
    5132:	4613      	mov	r3, r2
    5134:	005b      	lsls	r3, r3, #1
    5136:	4413      	add	r3, r2
    5138:	009b      	lsls	r3, r3, #2
    513a:	4403      	add	r3, r0
    513c:	3304      	adds	r3, #4
    513e:	6019      	str	r1, [r3, #0]
                break;
    5140:	e012      	b.n	5168 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5142:	4b0d      	ldr	r3, [pc, #52]	; (5178 <getCoreDividerConfig+0x148>)
    5144:	69db      	ldr	r3, [r3, #28]
    5146:	0c1b      	lsrs	r3, r3, #16
    5148:	f003 030f 	and.w	r3, r3, #15
    514c:	1c59      	adds	r1, r3, #1
    514e:	4809      	ldr	r0, [pc, #36]	; (5174 <getCoreDividerConfig+0x144>)
    5150:	9a04      	ldr	r2, [sp, #16]
    5152:	4613      	mov	r3, r2
    5154:	005b      	lsls	r3, r3, #1
    5156:	4413      	add	r3, r2
    5158:	009b      	lsls	r3, r3, #2
    515a:	4403      	add	r3, r0
    515c:	3304      	adds	r3, #4
    515e:	6019      	str	r1, [r3, #0]
                break;
    5160:	e002      	b.n	5168 <getCoreDividerConfig+0x138>
        }
    }
    5162:	bf00      	nop
    5164:	e000      	b.n	5168 <getCoreDividerConfig+0x138>
                break;
    5166:	bf00      	nop

    return ReturnValue;
    5168:	9b05      	ldr	r3, [sp, #20]
}
    516a:	4618      	mov	r0, r3
    516c:	b006      	add	sp, #24
    516e:	4770      	bx	lr
    5170:	1fff8bb8 	.word	0x1fff8bb8
    5174:	1fff8c84 	.word	0x1fff8c84
    5178:	40064000 	.word	0x40064000

0000517c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    517c:	b086      	sub	sp, #24
    517e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5180:	2300      	movs	r3, #0
    5182:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5184:	2300      	movs	r3, #0
    5186:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	2b23      	cmp	r3, #35	; 0x23
    518c:	d00f      	beq.n	51ae <getBusDividerConfig+0x32>
    518e:	9b01      	ldr	r3, [sp, #4]
    5190:	2b23      	cmp	r3, #35	; 0x23
    5192:	d80f      	bhi.n	51b4 <getBusDividerConfig+0x38>
    5194:	9b01      	ldr	r3, [sp, #4]
    5196:	2b21      	cmp	r3, #33	; 0x21
    5198:	d003      	beq.n	51a2 <getBusDividerConfig+0x26>
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	2b22      	cmp	r3, #34	; 0x22
    519e:	d003      	beq.n	51a8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    51a0:	e008      	b.n	51b4 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    51a2:	2300      	movs	r3, #0
    51a4:	9304      	str	r3, [sp, #16]
            break;
    51a6:	e006      	b.n	51b6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    51a8:	2301      	movs	r3, #1
    51aa:	9304      	str	r3, [sp, #16]
            break;
    51ac:	e003      	b.n	51b6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    51ae:	2302      	movs	r3, #2
    51b0:	9304      	str	r3, [sp, #16]
            break;
    51b2:	e000      	b.n	51b6 <getBusDividerConfig+0x3a>
                break;
    51b4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    51b6:	4b41      	ldr	r3, [pc, #260]	; (52bc <getBusDividerConfig+0x140>)
    51b8:	681b      	ldr	r3, [r3, #0]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d026      	beq.n	520c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51be:	2300      	movs	r3, #0
    51c0:	9303      	str	r3, [sp, #12]
    51c2:	e01c      	b.n	51fe <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    51c4:	4b3d      	ldr	r3, [pc, #244]	; (52bc <getBusDividerConfig+0x140>)
    51c6:	6819      	ldr	r1, [r3, #0]
    51c8:	9a03      	ldr	r2, [sp, #12]
    51ca:	4613      	mov	r3, r2
    51cc:	005b      	lsls	r3, r3, #1
    51ce:	4413      	add	r3, r2
    51d0:	009b      	lsls	r3, r3, #2
    51d2:	440b      	add	r3, r1
    51d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51d8:	681b      	ldr	r3, [r3, #0]
    51da:	9a01      	ldr	r2, [sp, #4]
    51dc:	429a      	cmp	r2, r3
    51de:	d10b      	bne.n	51f8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    51e0:	4b36      	ldr	r3, [pc, #216]	; (52bc <getBusDividerConfig+0x140>)
    51e2:	6819      	ldr	r1, [r3, #0]
    51e4:	9a03      	ldr	r2, [sp, #12]
    51e6:	4613      	mov	r3, r2
    51e8:	005b      	lsls	r3, r3, #1
    51ea:	4413      	add	r3, r2
    51ec:	009b      	lsls	r3, r3, #2
    51ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51f2:	440b      	add	r3, r1
    51f4:	9305      	str	r3, [sp, #20]
                break;
    51f6:	e009      	b.n	520c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51f8:	9b03      	ldr	r3, [sp, #12]
    51fa:	3301      	adds	r3, #1
    51fc:	9303      	str	r3, [sp, #12]
    51fe:	4b2f      	ldr	r3, [pc, #188]	; (52bc <getBusDividerConfig+0x140>)
    5200:	681b      	ldr	r3, [r3, #0]
    5202:	7b1b      	ldrb	r3, [r3, #12]
    5204:	461a      	mov	r2, r3
    5206:	9b03      	ldr	r3, [sp, #12]
    5208:	4293      	cmp	r3, r2
    520a:	d3db      	bcc.n	51c4 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    520c:	9b05      	ldr	r3, [sp, #20]
    520e:	2b00      	cmp	r3, #0
    5210:	d14d      	bne.n	52ae <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5212:	9a04      	ldr	r2, [sp, #16]
    5214:	4613      	mov	r3, r2
    5216:	005b      	lsls	r3, r3, #1
    5218:	4413      	add	r3, r2
    521a:	009b      	lsls	r3, r3, #2
    521c:	4a28      	ldr	r2, [pc, #160]	; (52c0 <getBusDividerConfig+0x144>)
    521e:	4413      	add	r3, r2
    5220:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5222:	4927      	ldr	r1, [pc, #156]	; (52c0 <getBusDividerConfig+0x144>)
    5224:	9a04      	ldr	r2, [sp, #16]
    5226:	4613      	mov	r3, r2
    5228:	005b      	lsls	r3, r3, #1
    522a:	4413      	add	r3, r2
    522c:	009b      	lsls	r3, r3, #2
    522e:	440b      	add	r3, r1
    5230:	9a01      	ldr	r2, [sp, #4]
    5232:	601a      	str	r2, [r3, #0]
        switch(Name)
    5234:	9b01      	ldr	r3, [sp, #4]
    5236:	2b23      	cmp	r3, #35	; 0x23
    5238:	d029      	beq.n	528e <getBusDividerConfig+0x112>
    523a:	9b01      	ldr	r3, [sp, #4]
    523c:	2b23      	cmp	r3, #35	; 0x23
    523e:	d838      	bhi.n	52b2 <getBusDividerConfig+0x136>
    5240:	9b01      	ldr	r3, [sp, #4]
    5242:	2b21      	cmp	r3, #33	; 0x21
    5244:	d003      	beq.n	524e <getBusDividerConfig+0xd2>
    5246:	9b01      	ldr	r3, [sp, #4]
    5248:	2b22      	cmp	r3, #34	; 0x22
    524a:	d010      	beq.n	526e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    524c:	e031      	b.n	52b2 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    524e:	4b1d      	ldr	r3, [pc, #116]	; (52c4 <getBusDividerConfig+0x148>)
    5250:	695b      	ldr	r3, [r3, #20]
    5252:	091b      	lsrs	r3, r3, #4
    5254:	f003 030f 	and.w	r3, r3, #15
    5258:	1c59      	adds	r1, r3, #1
    525a:	4819      	ldr	r0, [pc, #100]	; (52c0 <getBusDividerConfig+0x144>)
    525c:	9a04      	ldr	r2, [sp, #16]
    525e:	4613      	mov	r3, r2
    5260:	005b      	lsls	r3, r3, #1
    5262:	4413      	add	r3, r2
    5264:	009b      	lsls	r3, r3, #2
    5266:	4403      	add	r3, r0
    5268:	3304      	adds	r3, #4
    526a:	6019      	str	r1, [r3, #0]
                break;
    526c:	e022      	b.n	52b4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    526e:	4b15      	ldr	r3, [pc, #84]	; (52c4 <getBusDividerConfig+0x148>)
    5270:	699b      	ldr	r3, [r3, #24]
    5272:	091b      	lsrs	r3, r3, #4
    5274:	f003 030f 	and.w	r3, r3, #15
    5278:	1c59      	adds	r1, r3, #1
    527a:	4811      	ldr	r0, [pc, #68]	; (52c0 <getBusDividerConfig+0x144>)
    527c:	9a04      	ldr	r2, [sp, #16]
    527e:	4613      	mov	r3, r2
    5280:	005b      	lsls	r3, r3, #1
    5282:	4413      	add	r3, r2
    5284:	009b      	lsls	r3, r3, #2
    5286:	4403      	add	r3, r0
    5288:	3304      	adds	r3, #4
    528a:	6019      	str	r1, [r3, #0]
                break;
    528c:	e012      	b.n	52b4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    528e:	4b0d      	ldr	r3, [pc, #52]	; (52c4 <getBusDividerConfig+0x148>)
    5290:	69db      	ldr	r3, [r3, #28]
    5292:	091b      	lsrs	r3, r3, #4
    5294:	f003 030f 	and.w	r3, r3, #15
    5298:	1c59      	adds	r1, r3, #1
    529a:	4809      	ldr	r0, [pc, #36]	; (52c0 <getBusDividerConfig+0x144>)
    529c:	9a04      	ldr	r2, [sp, #16]
    529e:	4613      	mov	r3, r2
    52a0:	005b      	lsls	r3, r3, #1
    52a2:	4413      	add	r3, r2
    52a4:	009b      	lsls	r3, r3, #2
    52a6:	4403      	add	r3, r0
    52a8:	3304      	adds	r3, #4
    52aa:	6019      	str	r1, [r3, #0]
                break;
    52ac:	e002      	b.n	52b4 <getBusDividerConfig+0x138>
        }
    }
    52ae:	bf00      	nop
    52b0:	e000      	b.n	52b4 <getBusDividerConfig+0x138>
                break;
    52b2:	bf00      	nop

    return ReturnValue;
    52b4:	9b05      	ldr	r3, [sp, #20]
}
    52b6:	4618      	mov	r0, r3
    52b8:	b006      	add	sp, #24
    52ba:	4770      	bx	lr
    52bc:	1fff8bb8 	.word	0x1fff8bb8
    52c0:	1fff8ca8 	.word	0x1fff8ca8
    52c4:	40064000 	.word	0x40064000

000052c8 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    52c8:	b086      	sub	sp, #24
    52ca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    52cc:	2300      	movs	r3, #0
    52ce:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    52d0:	2300      	movs	r3, #0
    52d2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    52d4:	9b01      	ldr	r3, [sp, #4]
    52d6:	2b27      	cmp	r3, #39	; 0x27
    52d8:	d00f      	beq.n	52fa <getSlowDividerConfig+0x32>
    52da:	9b01      	ldr	r3, [sp, #4]
    52dc:	2b27      	cmp	r3, #39	; 0x27
    52de:	d80f      	bhi.n	5300 <getSlowDividerConfig+0x38>
    52e0:	9b01      	ldr	r3, [sp, #4]
    52e2:	2b25      	cmp	r3, #37	; 0x25
    52e4:	d003      	beq.n	52ee <getSlowDividerConfig+0x26>
    52e6:	9b01      	ldr	r3, [sp, #4]
    52e8:	2b26      	cmp	r3, #38	; 0x26
    52ea:	d003      	beq.n	52f4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    52ec:	e008      	b.n	5300 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    52ee:	2300      	movs	r3, #0
    52f0:	9304      	str	r3, [sp, #16]
            break;
    52f2:	e006      	b.n	5302 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    52f4:	2301      	movs	r3, #1
    52f6:	9304      	str	r3, [sp, #16]
            break;
    52f8:	e003      	b.n	5302 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    52fa:	2302      	movs	r3, #2
    52fc:	9304      	str	r3, [sp, #16]
            break;
    52fe:	e000      	b.n	5302 <getSlowDividerConfig+0x3a>
                break;
    5300:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5302:	4b40      	ldr	r3, [pc, #256]	; (5404 <getSlowDividerConfig+0x13c>)
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	2b00      	cmp	r3, #0
    5308:	d026      	beq.n	5358 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    530a:	2300      	movs	r3, #0
    530c:	9303      	str	r3, [sp, #12]
    530e:	e01c      	b.n	534a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5310:	4b3c      	ldr	r3, [pc, #240]	; (5404 <getSlowDividerConfig+0x13c>)
    5312:	6819      	ldr	r1, [r3, #0]
    5314:	9a03      	ldr	r2, [sp, #12]
    5316:	4613      	mov	r3, r2
    5318:	005b      	lsls	r3, r3, #1
    531a:	4413      	add	r3, r2
    531c:	009b      	lsls	r3, r3, #2
    531e:	440b      	add	r3, r1
    5320:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	9a01      	ldr	r2, [sp, #4]
    5328:	429a      	cmp	r2, r3
    532a:	d10b      	bne.n	5344 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    532c:	4b35      	ldr	r3, [pc, #212]	; (5404 <getSlowDividerConfig+0x13c>)
    532e:	6819      	ldr	r1, [r3, #0]
    5330:	9a03      	ldr	r2, [sp, #12]
    5332:	4613      	mov	r3, r2
    5334:	005b      	lsls	r3, r3, #1
    5336:	4413      	add	r3, r2
    5338:	009b      	lsls	r3, r3, #2
    533a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    533e:	440b      	add	r3, r1
    5340:	9305      	str	r3, [sp, #20]
                break;
    5342:	e009      	b.n	5358 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5344:	9b03      	ldr	r3, [sp, #12]
    5346:	3301      	adds	r3, #1
    5348:	9303      	str	r3, [sp, #12]
    534a:	4b2e      	ldr	r3, [pc, #184]	; (5404 <getSlowDividerConfig+0x13c>)
    534c:	681b      	ldr	r3, [r3, #0]
    534e:	7b1b      	ldrb	r3, [r3, #12]
    5350:	461a      	mov	r2, r3
    5352:	9b03      	ldr	r3, [sp, #12]
    5354:	4293      	cmp	r3, r2
    5356:	d3db      	bcc.n	5310 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5358:	9b05      	ldr	r3, [sp, #20]
    535a:	2b00      	cmp	r3, #0
    535c:	d14a      	bne.n	53f4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    535e:	9a04      	ldr	r2, [sp, #16]
    5360:	4613      	mov	r3, r2
    5362:	005b      	lsls	r3, r3, #1
    5364:	4413      	add	r3, r2
    5366:	009b      	lsls	r3, r3, #2
    5368:	4a27      	ldr	r2, [pc, #156]	; (5408 <getSlowDividerConfig+0x140>)
    536a:	4413      	add	r3, r2
    536c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    536e:	4926      	ldr	r1, [pc, #152]	; (5408 <getSlowDividerConfig+0x140>)
    5370:	9a04      	ldr	r2, [sp, #16]
    5372:	4613      	mov	r3, r2
    5374:	005b      	lsls	r3, r3, #1
    5376:	4413      	add	r3, r2
    5378:	009b      	lsls	r3, r3, #2
    537a:	440b      	add	r3, r1
    537c:	9a01      	ldr	r2, [sp, #4]
    537e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5380:	9b01      	ldr	r3, [sp, #4]
    5382:	2b27      	cmp	r3, #39	; 0x27
    5384:	d027      	beq.n	53d6 <getSlowDividerConfig+0x10e>
    5386:	9b01      	ldr	r3, [sp, #4]
    5388:	2b27      	cmp	r3, #39	; 0x27
    538a:	d835      	bhi.n	53f8 <getSlowDividerConfig+0x130>
    538c:	9b01      	ldr	r3, [sp, #4]
    538e:	2b25      	cmp	r3, #37	; 0x25
    5390:	d003      	beq.n	539a <getSlowDividerConfig+0xd2>
    5392:	9b01      	ldr	r3, [sp, #4]
    5394:	2b26      	cmp	r3, #38	; 0x26
    5396:	d00f      	beq.n	53b8 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5398:	e02e      	b.n	53f8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    539a:	4b1c      	ldr	r3, [pc, #112]	; (540c <getSlowDividerConfig+0x144>)
    539c:	695b      	ldr	r3, [r3, #20]
    539e:	f003 030f 	and.w	r3, r3, #15
    53a2:	1c59      	adds	r1, r3, #1
    53a4:	4818      	ldr	r0, [pc, #96]	; (5408 <getSlowDividerConfig+0x140>)
    53a6:	9a04      	ldr	r2, [sp, #16]
    53a8:	4613      	mov	r3, r2
    53aa:	005b      	lsls	r3, r3, #1
    53ac:	4413      	add	r3, r2
    53ae:	009b      	lsls	r3, r3, #2
    53b0:	4403      	add	r3, r0
    53b2:	3304      	adds	r3, #4
    53b4:	6019      	str	r1, [r3, #0]
                break;
    53b6:	e020      	b.n	53fa <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    53b8:	4b14      	ldr	r3, [pc, #80]	; (540c <getSlowDividerConfig+0x144>)
    53ba:	699b      	ldr	r3, [r3, #24]
    53bc:	f003 030f 	and.w	r3, r3, #15
    53c0:	1c59      	adds	r1, r3, #1
    53c2:	4811      	ldr	r0, [pc, #68]	; (5408 <getSlowDividerConfig+0x140>)
    53c4:	9a04      	ldr	r2, [sp, #16]
    53c6:	4613      	mov	r3, r2
    53c8:	005b      	lsls	r3, r3, #1
    53ca:	4413      	add	r3, r2
    53cc:	009b      	lsls	r3, r3, #2
    53ce:	4403      	add	r3, r0
    53d0:	3304      	adds	r3, #4
    53d2:	6019      	str	r1, [r3, #0]
                break;
    53d4:	e011      	b.n	53fa <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    53d6:	4b0d      	ldr	r3, [pc, #52]	; (540c <getSlowDividerConfig+0x144>)
    53d8:	69db      	ldr	r3, [r3, #28]
    53da:	f003 030f 	and.w	r3, r3, #15
    53de:	1c59      	adds	r1, r3, #1
    53e0:	4809      	ldr	r0, [pc, #36]	; (5408 <getSlowDividerConfig+0x140>)
    53e2:	9a04      	ldr	r2, [sp, #16]
    53e4:	4613      	mov	r3, r2
    53e6:	005b      	lsls	r3, r3, #1
    53e8:	4413      	add	r3, r2
    53ea:	009b      	lsls	r3, r3, #2
    53ec:	4403      	add	r3, r0
    53ee:	3304      	adds	r3, #4
    53f0:	6019      	str	r1, [r3, #0]
                break;
    53f2:	e002      	b.n	53fa <getSlowDividerConfig+0x132>
        }
    }
    53f4:	bf00      	nop
    53f6:	e000      	b.n	53fa <getSlowDividerConfig+0x132>
                break;
    53f8:	bf00      	nop

    return ReturnValue;
    53fa:	9b05      	ldr	r3, [sp, #20]
}
    53fc:	4618      	mov	r0, r3
    53fe:	b006      	add	sp, #24
    5400:	4770      	bx	lr
    5402:	bf00      	nop
    5404:	1fff8bb8 	.word	0x1fff8bb8
    5408:	1fff8ccc 	.word	0x1fff8ccc
    540c:	40064000 	.word	0x40064000

00005410 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5410:	b500      	push	{lr}
    5412:	b083      	sub	sp, #12
    5414:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5416:	4b64      	ldr	r3, [pc, #400]	; (55a8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5418:	781b      	ldrb	r3, [r3, #0]
    541a:	f083 0301 	eor.w	r3, r3, #1
    541e:	b2db      	uxtb	r3, r3
    5420:	2b00      	cmp	r3, #0
    5422:	d05b      	beq.n	54dc <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5424:	4b60      	ldr	r3, [pc, #384]	; (55a8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5426:	2201      	movs	r2, #1
    5428:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    542a:	4b60      	ldr	r3, [pc, #384]	; (55ac <Clock_Ip_ClockInitializeObjects+0x19c>)
    542c:	785b      	ldrb	r3, [r3, #1]
    542e:	461a      	mov	r2, r3
    5430:	4613      	mov	r3, r2
    5432:	009b      	lsls	r3, r3, #2
    5434:	4413      	add	r3, r2
    5436:	009b      	lsls	r3, r3, #2
    5438:	4a5d      	ldr	r2, [pc, #372]	; (55b0 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    543a:	4413      	add	r3, r2
    543c:	4a5d      	ldr	r2, [pc, #372]	; (55b4 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    543e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5440:	4b5d      	ldr	r3, [pc, #372]	; (55b8 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5442:	785b      	ldrb	r3, [r3, #1]
    5444:	461a      	mov	r2, r3
    5446:	4613      	mov	r3, r2
    5448:	009b      	lsls	r3, r3, #2
    544a:	4413      	add	r3, r2
    544c:	009b      	lsls	r3, r3, #2
    544e:	4a5b      	ldr	r2, [pc, #364]	; (55bc <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5450:	4413      	add	r3, r2
    5452:	4a5b      	ldr	r2, [pc, #364]	; (55c0 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5454:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5456:	4b5b      	ldr	r3, [pc, #364]	; (55c4 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5458:	791b      	ldrb	r3, [r3, #4]
    545a:	461a      	mov	r2, r3
    545c:	4613      	mov	r3, r2
    545e:	005b      	lsls	r3, r3, #1
    5460:	4413      	add	r3, r2
    5462:	009b      	lsls	r3, r3, #2
    5464:	4a58      	ldr	r2, [pc, #352]	; (55c8 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5466:	4413      	add	r3, r2
    5468:	4a58      	ldr	r2, [pc, #352]	; (55cc <Clock_Ip_ClockInitializeObjects+0x1bc>)
    546a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    546c:	4b58      	ldr	r3, [pc, #352]	; (55d0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    546e:	795b      	ldrb	r3, [r3, #5]
    5470:	00db      	lsls	r3, r3, #3
    5472:	4a58      	ldr	r2, [pc, #352]	; (55d4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5474:	4413      	add	r3, r2
    5476:	4a58      	ldr	r2, [pc, #352]	; (55d8 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5478:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    547a:	4b55      	ldr	r3, [pc, #340]	; (55d0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    547c:	79db      	ldrb	r3, [r3, #7]
    547e:	00db      	lsls	r3, r3, #3
    5480:	4a54      	ldr	r2, [pc, #336]	; (55d4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5482:	4413      	add	r3, r2
    5484:	4a55      	ldr	r2, [pc, #340]	; (55dc <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5486:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5488:	4b55      	ldr	r3, [pc, #340]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    548a:	799b      	ldrb	r3, [r3, #6]
    548c:	009b      	lsls	r3, r3, #2
    548e:	4a55      	ldr	r2, [pc, #340]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5490:	4413      	add	r3, r2
    5492:	4a55      	ldr	r2, [pc, #340]	; (55e8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5494:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5496:	4b52      	ldr	r3, [pc, #328]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5498:	7a1b      	ldrb	r3, [r3, #8]
    549a:	009b      	lsls	r3, r3, #2
    549c:	4a51      	ldr	r2, [pc, #324]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    549e:	4413      	add	r3, r2
    54a0:	4a52      	ldr	r2, [pc, #328]	; (55ec <Clock_Ip_ClockInitializeObjects+0x1dc>)
    54a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    54a4:	4b4e      	ldr	r3, [pc, #312]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54a6:	7a5b      	ldrb	r3, [r3, #9]
    54a8:	009b      	lsls	r3, r3, #2
    54aa:	4a4e      	ldr	r2, [pc, #312]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54ac:	4413      	add	r3, r2
    54ae:	4a50      	ldr	r2, [pc, #320]	; (55f0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    54b0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    54b2:	4b4b      	ldr	r3, [pc, #300]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54b4:	7adb      	ldrb	r3, [r3, #11]
    54b6:	009b      	lsls	r3, r3, #2
    54b8:	4a4a      	ldr	r2, [pc, #296]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54ba:	4413      	add	r3, r2
    54bc:	4a4d      	ldr	r2, [pc, #308]	; (55f4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    54be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    54c0:	4b47      	ldr	r3, [pc, #284]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54c2:	7b1b      	ldrb	r3, [r3, #12]
    54c4:	009b      	lsls	r3, r3, #2
    54c6:	4a47      	ldr	r2, [pc, #284]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54c8:	4413      	add	r3, r2
    54ca:	4a4b      	ldr	r2, [pc, #300]	; (55f8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    54cc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    54ce:	4b44      	ldr	r3, [pc, #272]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54d0:	7b9b      	ldrb	r3, [r3, #14]
    54d2:	009b      	lsls	r3, r3, #2
    54d4:	4a43      	ldr	r2, [pc, #268]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54d6:	4413      	add	r3, r2
    54d8:	4a48      	ldr	r2, [pc, #288]	; (55fc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    54da:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    54dc:	4b48      	ldr	r3, [pc, #288]	; (5600 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    54de:	781b      	ldrb	r3, [r3, #0]
    54e0:	2b00      	cmp	r3, #0
    54e2:	d002      	beq.n	54ea <Clock_Ip_ClockInitializeObjects+0xda>
    54e4:	9b01      	ldr	r3, [sp, #4]
    54e6:	2b00      	cmp	r3, #0
    54e8:	d003      	beq.n	54f2 <Clock_Ip_ClockInitializeObjects+0xe2>
    54ea:	4b46      	ldr	r3, [pc, #280]	; (5604 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    54ec:	781b      	ldrb	r3, [r3, #0]
    54ee:	2b00      	cmp	r3, #0
    54f0:	d056      	beq.n	55a0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    54f2:	f7ff fc09 	bl	4d08 <getFircConfig>
    54f6:	4603      	mov	r3, r0
    54f8:	4a43      	ldr	r2, [pc, #268]	; (5608 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    54fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    54fc:	f7ff fc60 	bl	4dc0 <getSoscConfig>
    5500:	4603      	mov	r3, r0
    5502:	4a42      	ldr	r2, [pc, #264]	; (560c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5504:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5506:	f7ff fca7 	bl	4e58 <getSpllConfig>
    550a:	4603      	mov	r3, r0
    550c:	4a40      	ldr	r2, [pc, #256]	; (5610 <Clock_Ip_ClockInitializeObjects+0x200>)
    550e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5510:	2019      	movs	r0, #25
    5512:	f7ff fcfb 	bl	4f0c <getSelectorConfig>
    5516:	4603      	mov	r3, r0
    5518:	4a3e      	ldr	r2, [pc, #248]	; (5614 <Clock_Ip_ClockInitializeObjects+0x204>)
    551a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    551c:	201a      	movs	r0, #26
    551e:	f7ff fcf5 	bl	4f0c <getSelectorConfig>
    5522:	4603      	mov	r3, r0
    5524:	4a3c      	ldr	r2, [pc, #240]	; (5618 <Clock_Ip_ClockInitializeObjects+0x208>)
    5526:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5528:	201b      	movs	r0, #27
    552a:	f7ff fcef 	bl	4f0c <getSelectorConfig>
    552e:	4603      	mov	r3, r0
    5530:	4a3a      	ldr	r2, [pc, #232]	; (561c <Clock_Ip_ClockInitializeObjects+0x20c>)
    5532:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5534:	201d      	movs	r0, #29
    5536:	f7ff fd7b 	bl	5030 <getCoreDividerConfig>
    553a:	4603      	mov	r3, r0
    553c:	4a38      	ldr	r2, [pc, #224]	; (5620 <Clock_Ip_ClockInitializeObjects+0x210>)
    553e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5540:	201e      	movs	r0, #30
    5542:	f7ff fd75 	bl	5030 <getCoreDividerConfig>
    5546:	4603      	mov	r3, r0
    5548:	4a36      	ldr	r2, [pc, #216]	; (5624 <Clock_Ip_ClockInitializeObjects+0x214>)
    554a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    554c:	201f      	movs	r0, #31
    554e:	f7ff fd6f 	bl	5030 <getCoreDividerConfig>
    5552:	4603      	mov	r3, r0
    5554:	4a34      	ldr	r2, [pc, #208]	; (5628 <Clock_Ip_ClockInitializeObjects+0x218>)
    5556:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5558:	2021      	movs	r0, #33	; 0x21
    555a:	f7ff fe0f 	bl	517c <getBusDividerConfig>
    555e:	4603      	mov	r3, r0
    5560:	4a32      	ldr	r2, [pc, #200]	; (562c <Clock_Ip_ClockInitializeObjects+0x21c>)
    5562:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5564:	2022      	movs	r0, #34	; 0x22
    5566:	f7ff fe09 	bl	517c <getBusDividerConfig>
    556a:	4603      	mov	r3, r0
    556c:	4a30      	ldr	r2, [pc, #192]	; (5630 <Clock_Ip_ClockInitializeObjects+0x220>)
    556e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5570:	2023      	movs	r0, #35	; 0x23
    5572:	f7ff fe03 	bl	517c <getBusDividerConfig>
    5576:	4603      	mov	r3, r0
    5578:	4a2e      	ldr	r2, [pc, #184]	; (5634 <Clock_Ip_ClockInitializeObjects+0x224>)
    557a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    557c:	2025      	movs	r0, #37	; 0x25
    557e:	f7ff fea3 	bl	52c8 <getSlowDividerConfig>
    5582:	4603      	mov	r3, r0
    5584:	4a2c      	ldr	r2, [pc, #176]	; (5638 <Clock_Ip_ClockInitializeObjects+0x228>)
    5586:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5588:	2026      	movs	r0, #38	; 0x26
    558a:	f7ff fe9d 	bl	52c8 <getSlowDividerConfig>
    558e:	4603      	mov	r3, r0
    5590:	4a2a      	ldr	r2, [pc, #168]	; (563c <Clock_Ip_ClockInitializeObjects+0x22c>)
    5592:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5594:	2027      	movs	r0, #39	; 0x27
    5596:	f7ff fe97 	bl	52c8 <getSlowDividerConfig>
    559a:	4603      	mov	r3, r0
    559c:	4a28      	ldr	r2, [pc, #160]	; (5640 <Clock_Ip_ClockInitializeObjects+0x230>)
    559e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    55a0:	bf00      	nop
    55a2:	b003      	add	sp, #12
    55a4:	f85d fb04 	ldr.w	pc, [sp], #4
    55a8:	1fff8cf0 	.word	0x1fff8cf0
    55ac:	0000f564 	.word	0x0000f564
    55b0:	0000fbb0 	.word	0x0000fbb0
    55b4:	1fff8bbc 	.word	0x1fff8bbc
    55b8:	0000f524 	.word	0x0000f524
    55bc:	0000faf8 	.word	0x0000faf8
    55c0:	1fff8bc0 	.word	0x1fff8bc0
    55c4:	0000f534 	.word	0x0000f534
    55c8:	0000fb64 	.word	0x0000fb64
    55cc:	1fff8bc4 	.word	0x1fff8bc4
    55d0:	0000f574 	.word	0x0000f574
    55d4:	0000fbdc 	.word	0x0000fbdc
    55d8:	1fff8bc8 	.word	0x1fff8bc8
    55dc:	1fff8c04 	.word	0x1fff8c04
    55e0:	0000f504 	.word	0x0000f504
    55e4:	0000fab4 	.word	0x0000fab4
    55e8:	1fff8bcc 	.word	0x1fff8bcc
    55ec:	1fff8c08 	.word	0x1fff8c08
    55f0:	1fff8bd0 	.word	0x1fff8bd0
    55f4:	1fff8c0c 	.word	0x1fff8c0c
    55f8:	1fff8bd4 	.word	0x1fff8bd4
    55fc:	1fff8c10 	.word	0x1fff8c10
    5600:	1fff8b19 	.word	0x1fff8b19
    5604:	1fff8b10 	.word	0x1fff8b10
    5608:	1fff8bd8 	.word	0x1fff8bd8
    560c:	1fff8bdc 	.word	0x1fff8bdc
    5610:	1fff8be0 	.word	0x1fff8be0
    5614:	1fff8be4 	.word	0x1fff8be4
    5618:	1fff8be8 	.word	0x1fff8be8
    561c:	1fff8c14 	.word	0x1fff8c14
    5620:	1fff8bec 	.word	0x1fff8bec
    5624:	1fff8bf0 	.word	0x1fff8bf0
    5628:	1fff8c18 	.word	0x1fff8c18
    562c:	1fff8bf4 	.word	0x1fff8bf4
    5630:	1fff8bf8 	.word	0x1fff8bf8
    5634:	1fff8c1c 	.word	0x1fff8c1c
    5638:	1fff8bfc 	.word	0x1fff8bfc
    563c:	1fff8c00 	.word	0x1fff8c00
    5640:	1fff8c20 	.word	0x1fff8c20

00005644 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5644:	b500      	push	{lr}
    5646:	b083      	sub	sp, #12
    5648:	9001      	str	r0, [sp, #4]
    564a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    564c:	9b01      	ldr	r3, [sp, #4]
    564e:	2b03      	cmp	r3, #3
    5650:	f000 8090 	beq.w	5774 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5654:	9b01      	ldr	r3, [sp, #4]
    5656:	2b03      	cmp	r3, #3
    5658:	f200 80d3 	bhi.w	5802 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    565c:	9b01      	ldr	r3, [sp, #4]
    565e:	2b00      	cmp	r3, #0
    5660:	d040      	beq.n	56e4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5662:	9b01      	ldr	r3, [sp, #4]
    5664:	3b01      	subs	r3, #1
    5666:	2b01      	cmp	r3, #1
    5668:	f200 80cb 	bhi.w	5802 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    566c:	9b00      	ldr	r3, [sp, #0]
    566e:	2b00      	cmp	r3, #0
    5670:	f040 80c9 	bne.w	5806 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5674:	4b68      	ldr	r3, [pc, #416]	; (5818 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5676:	2200      	movs	r2, #0
    5678:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    567a:	4b68      	ldr	r3, [pc, #416]	; (581c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	685b      	ldr	r3, [r3, #4]
    5680:	4a67      	ldr	r2, [pc, #412]	; (5820 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5682:	6812      	ldr	r2, [r2, #0]
    5684:	4610      	mov	r0, r2
    5686:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5688:	4b66      	ldr	r3, [pc, #408]	; (5824 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    568a:	681b      	ldr	r3, [r3, #0]
    568c:	681b      	ldr	r3, [r3, #0]
    568e:	4a66      	ldr	r2, [pc, #408]	; (5828 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5690:	6812      	ldr	r2, [r2, #0]
    5692:	4610      	mov	r0, r2
    5694:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5696:	4b65      	ldr	r3, [pc, #404]	; (582c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	681b      	ldr	r3, [r3, #0]
    569c:	4a64      	ldr	r2, [pc, #400]	; (5830 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    569e:	6812      	ldr	r2, [r2, #0]
    56a0:	4610      	mov	r0, r2
    56a2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    56a4:	4b63      	ldr	r3, [pc, #396]	; (5834 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	4a63      	ldr	r2, [pc, #396]	; (5838 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    56ac:	6812      	ldr	r2, [r2, #0]
    56ae:	4610      	mov	r0, r2
    56b0:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    56b2:	4b62      	ldr	r3, [pc, #392]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	691b      	ldr	r3, [r3, #16]
    56b8:	4a61      	ldr	r2, [pc, #388]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    56ba:	6812      	ldr	r2, [r2, #0]
    56bc:	6812      	ldr	r2, [r2, #0]
    56be:	4610      	mov	r0, r2
    56c0:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    56c2:	4b60      	ldr	r3, [pc, #384]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	68db      	ldr	r3, [r3, #12]
    56c8:	4a5f      	ldr	r2, [pc, #380]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    56ca:	6812      	ldr	r2, [r2, #0]
    56cc:	6812      	ldr	r2, [r2, #0]
    56ce:	4610      	mov	r0, r2
    56d0:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    56d2:	4b5e      	ldr	r3, [pc, #376]	; (584c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    56d4:	681b      	ldr	r3, [r3, #0]
    56d6:	689b      	ldr	r3, [r3, #8]
    56d8:	4a5d      	ldr	r2, [pc, #372]	; (5850 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    56da:	6812      	ldr	r2, [r2, #0]
    56dc:	6812      	ldr	r2, [r2, #0]
    56de:	4610      	mov	r0, r2
    56e0:	4798      	blx	r3
            }
        }
        break;
    56e2:	e090      	b.n	5806 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    56e4:	9b00      	ldr	r3, [sp, #0]
    56e6:	2b02      	cmp	r3, #2
    56e8:	f040 808f 	bne.w	580a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    56ec:	4b4a      	ldr	r3, [pc, #296]	; (5818 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    56ee:	2201      	movs	r2, #1
    56f0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    56f2:	4b56      	ldr	r3, [pc, #344]	; (584c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	685b      	ldr	r3, [r3, #4]
    56f8:	4a55      	ldr	r2, [pc, #340]	; (5850 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    56fa:	6812      	ldr	r2, [r2, #0]
    56fc:	4610      	mov	r0, r2
    56fe:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5700:	4b50      	ldr	r3, [pc, #320]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5702:	681b      	ldr	r3, [r3, #0]
    5704:	691b      	ldr	r3, [r3, #16]
    5706:	4a50      	ldr	r2, [pc, #320]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5708:	6812      	ldr	r2, [r2, #0]
    570a:	4610      	mov	r0, r2
    570c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    570e:	4b4d      	ldr	r3, [pc, #308]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	689b      	ldr	r3, [r3, #8]
    5714:	4a4c      	ldr	r2, [pc, #304]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5716:	6812      	ldr	r2, [r2, #0]
    5718:	4610      	mov	r0, r2
    571a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    571c:	4b47      	ldr	r3, [pc, #284]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	68db      	ldr	r3, [r3, #12]
    5722:	4a47      	ldr	r2, [pc, #284]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5724:	6812      	ldr	r2, [r2, #0]
    5726:	4610      	mov	r0, r2
    5728:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    572a:	4b44      	ldr	r3, [pc, #272]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	689b      	ldr	r3, [r3, #8]
    5730:	4a43      	ldr	r2, [pc, #268]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5732:	6812      	ldr	r2, [r2, #0]
    5734:	6812      	ldr	r2, [r2, #0]
    5736:	4610      	mov	r0, r2
    5738:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    573a:	4b38      	ldr	r3, [pc, #224]	; (581c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	685b      	ldr	r3, [r3, #4]
    5740:	4a44      	ldr	r2, [pc, #272]	; (5854 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5742:	6812      	ldr	r2, [r2, #0]
    5744:	4610      	mov	r0, r2
    5746:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5748:	4b36      	ldr	r3, [pc, #216]	; (5824 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    574a:	681b      	ldr	r3, [r3, #0]
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	4a42      	ldr	r2, [pc, #264]	; (5858 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5750:	6812      	ldr	r2, [r2, #0]
    5752:	4610      	mov	r0, r2
    5754:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5756:	4b35      	ldr	r3, [pc, #212]	; (582c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5758:	681b      	ldr	r3, [r3, #0]
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	4a3f      	ldr	r2, [pc, #252]	; (585c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    575e:	6812      	ldr	r2, [r2, #0]
    5760:	4610      	mov	r0, r2
    5762:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5764:	4b33      	ldr	r3, [pc, #204]	; (5834 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5766:	681b      	ldr	r3, [r3, #0]
    5768:	681b      	ldr	r3, [r3, #0]
    576a:	4a3d      	ldr	r2, [pc, #244]	; (5860 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    576c:	6812      	ldr	r2, [r2, #0]
    576e:	4610      	mov	r0, r2
    5770:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5772:	e04a      	b.n	580a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5774:	9b00      	ldr	r3, [sp, #0]
    5776:	2b02      	cmp	r3, #2
    5778:	d149      	bne.n	580e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    577a:	4b27      	ldr	r3, [pc, #156]	; (5818 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    577c:	2201      	movs	r2, #1
    577e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5780:	4b32      	ldr	r3, [pc, #200]	; (584c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5782:	681b      	ldr	r3, [r3, #0]
    5784:	685b      	ldr	r3, [r3, #4]
    5786:	4a32      	ldr	r2, [pc, #200]	; (5850 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5788:	6812      	ldr	r2, [r2, #0]
    578a:	4610      	mov	r0, r2
    578c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    578e:	4b2d      	ldr	r3, [pc, #180]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	691b      	ldr	r3, [r3, #16]
    5794:	4a2c      	ldr	r2, [pc, #176]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5796:	6812      	ldr	r2, [r2, #0]
    5798:	4610      	mov	r0, r2
    579a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    579c:	4b29      	ldr	r3, [pc, #164]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	689b      	ldr	r3, [r3, #8]
    57a2:	4a29      	ldr	r2, [pc, #164]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    57a4:	6812      	ldr	r2, [r2, #0]
    57a6:	4610      	mov	r0, r2
    57a8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    57aa:	4b24      	ldr	r3, [pc, #144]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	68db      	ldr	r3, [r3, #12]
    57b0:	4a23      	ldr	r2, [pc, #140]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57b2:	6812      	ldr	r2, [r2, #0]
    57b4:	4610      	mov	r0, r2
    57b6:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    57b8:	4b20      	ldr	r3, [pc, #128]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57ba:	681b      	ldr	r3, [r3, #0]
    57bc:	689b      	ldr	r3, [r3, #8]
    57be:	4a20      	ldr	r2, [pc, #128]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57c0:	6812      	ldr	r2, [r2, #0]
    57c2:	6812      	ldr	r2, [r2, #0]
    57c4:	4610      	mov	r0, r2
    57c6:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    57c8:	4b26      	ldr	r3, [pc, #152]	; (5864 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	685b      	ldr	r3, [r3, #4]
    57ce:	4a26      	ldr	r2, [pc, #152]	; (5868 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    57d0:	6812      	ldr	r2, [r2, #0]
    57d2:	4610      	mov	r0, r2
    57d4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    57d6:	4b25      	ldr	r3, [pc, #148]	; (586c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	4a24      	ldr	r2, [pc, #144]	; (5870 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    57de:	6812      	ldr	r2, [r2, #0]
    57e0:	4610      	mov	r0, r2
    57e2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    57e4:	4b23      	ldr	r3, [pc, #140]	; (5874 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	4a23      	ldr	r2, [pc, #140]	; (5878 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    57ec:	6812      	ldr	r2, [r2, #0]
    57ee:	4610      	mov	r0, r2
    57f0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    57f2:	4b22      	ldr	r3, [pc, #136]	; (587c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	681b      	ldr	r3, [r3, #0]
    57f8:	4a21      	ldr	r2, [pc, #132]	; (5880 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    57fa:	6812      	ldr	r2, [r2, #0]
    57fc:	4610      	mov	r0, r2
    57fe:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5800:	e005      	b.n	580e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5802:	bf00      	nop
    5804:	e004      	b.n	5810 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5806:	bf00      	nop
    5808:	e002      	b.n	5810 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    580a:	bf00      	nop
    580c:	e000      	b.n	5810 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    580e:	bf00      	nop
    }

}
    5810:	bf00      	nop
    5812:	b003      	add	sp, #12
    5814:	f85d fb04 	ldr.w	pc, [sp], #4
    5818:	1fff8b19 	.word	0x1fff8b19
    581c:	1fff8bc8 	.word	0x1fff8bc8
    5820:	1fff8be8 	.word	0x1fff8be8
    5824:	1fff8bcc 	.word	0x1fff8bcc
    5828:	1fff8bf0 	.word	0x1fff8bf0
    582c:	1fff8bd0 	.word	0x1fff8bd0
    5830:	1fff8bf8 	.word	0x1fff8bf8
    5834:	1fff8bd4 	.word	0x1fff8bd4
    5838:	1fff8c00 	.word	0x1fff8c00
    583c:	1fff8bbc 	.word	0x1fff8bbc
    5840:	1fff8be0 	.word	0x1fff8be0
    5844:	1fff8bc0 	.word	0x1fff8bc0
    5848:	1fff8bdc 	.word	0x1fff8bdc
    584c:	1fff8bc4 	.word	0x1fff8bc4
    5850:	1fff8bd8 	.word	0x1fff8bd8
    5854:	1fff8be4 	.word	0x1fff8be4
    5858:	1fff8bec 	.word	0x1fff8bec
    585c:	1fff8bf4 	.word	0x1fff8bf4
    5860:	1fff8bfc 	.word	0x1fff8bfc
    5864:	1fff8c04 	.word	0x1fff8c04
    5868:	1fff8c14 	.word	0x1fff8c14
    586c:	1fff8c08 	.word	0x1fff8c08
    5870:	1fff8c18 	.word	0x1fff8c18
    5874:	1fff8c0c 	.word	0x1fff8c0c
    5878:	1fff8c1c 	.word	0x1fff8c1c
    587c:	1fff8c10 	.word	0x1fff8c10
    5880:	1fff8c20 	.word	0x1fff8c20

00005884 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5884:	b500      	push	{lr}
    5886:	b083      	sub	sp, #12
    5888:	9001      	str	r0, [sp, #4]
    588a:	9100      	str	r1, [sp, #0]
    switch(Command)
    588c:	9b00      	ldr	r3, [sp, #0]
    588e:	2b04      	cmp	r3, #4
    5890:	d010      	beq.n	58b4 <Clock_Ip_Command+0x30>
    5892:	9b00      	ldr	r3, [sp, #0]
    5894:	2b04      	cmp	r3, #4
    5896:	d811      	bhi.n	58bc <Clock_Ip_Command+0x38>
    5898:	9b00      	ldr	r3, [sp, #0]
    589a:	2b01      	cmp	r3, #1
    589c:	d006      	beq.n	58ac <Clock_Ip_Command+0x28>
    589e:	9b00      	ldr	r3, [sp, #0]
    58a0:	2b02      	cmp	r3, #2
    58a2:	d10b      	bne.n	58bc <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    58a4:	9801      	ldr	r0, [sp, #4]
    58a6:	f7ff fdb3 	bl	5410 <Clock_Ip_ClockInitializeObjects>
            break;
    58aa:	e008      	b.n	58be <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    58ac:	9801      	ldr	r0, [sp, #4]
    58ae:	f7ff f9db 	bl	4c68 <Clock_Ip_SpecificPlatformInitClock>
            break;
    58b2:	e004      	b.n	58be <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    58b4:	9801      	ldr	r0, [sp, #4]
    58b6:	f7ff f8ed 	bl	4a94 <DisableSafeClock>
            break;
    58ba:	e000      	b.n	58be <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    58bc:	bf00      	nop
    }
}
    58be:	bf00      	nop
    58c0:	b003      	add	sp, #12
    58c2:	f85d fb04 	ldr.w	pc, [sp], #4
    58c6:	bf00      	nop

000058c8 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    58c8:	b500      	push	{lr}
    58ca:	b085      	sub	sp, #20
    58cc:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    58ce:	4a20      	ldr	r2, [pc, #128]	; (5950 <Mcu_Init+0x88>)
    58d0:	9b01      	ldr	r3, [sp, #4]
    58d2:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    58d4:	2300      	movs	r3, #0
    58d6:	9303      	str	r3, [sp, #12]
    58d8:	e010      	b.n	58fc <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    58da:	4b1d      	ldr	r3, [pc, #116]	; (5950 <Mcu_Init+0x88>)
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	6919      	ldr	r1, [r3, #16]
    58e0:	9a03      	ldr	r2, [sp, #12]
    58e2:	4613      	mov	r3, r2
    58e4:	005b      	lsls	r3, r3, #1
    58e6:	4413      	add	r3, r2
    58e8:	009b      	lsls	r3, r3, #2
    58ea:	440b      	add	r3, r1
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	9a03      	ldr	r2, [sp, #12]
    58f0:	b2d1      	uxtb	r1, r2
    58f2:	4a18      	ldr	r2, [pc, #96]	; (5954 <Mcu_Init+0x8c>)
    58f4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    58f6:	9b03      	ldr	r3, [sp, #12]
    58f8:	3301      	adds	r3, #1
    58fa:	9303      	str	r3, [sp, #12]
    58fc:	4b14      	ldr	r3, [pc, #80]	; (5950 <Mcu_Init+0x88>)
    58fe:	681b      	ldr	r3, [r3, #0]
    5900:	689b      	ldr	r3, [r3, #8]
    5902:	9a03      	ldr	r2, [sp, #12]
    5904:	429a      	cmp	r2, r3
    5906:	d3e8      	bcc.n	58da <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5908:	2300      	movs	r3, #0
    590a:	9303      	str	r3, [sp, #12]
    590c:	e010      	b.n	5930 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    590e:	4b10      	ldr	r3, [pc, #64]	; (5950 <Mcu_Init+0x88>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	6959      	ldr	r1, [r3, #20]
    5914:	9a03      	ldr	r2, [sp, #12]
    5916:	4613      	mov	r3, r2
    5918:	01db      	lsls	r3, r3, #7
    591a:	1a9b      	subs	r3, r3, r2
    591c:	00db      	lsls	r3, r3, #3
    591e:	440b      	add	r3, r1
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	9a03      	ldr	r2, [sp, #12]
    5924:	b2d1      	uxtb	r1, r2
    5926:	4a0c      	ldr	r2, [pc, #48]	; (5958 <Mcu_Init+0x90>)
    5928:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    592a:	9b03      	ldr	r3, [sp, #12]
    592c:	3301      	adds	r3, #1
    592e:	9303      	str	r3, [sp, #12]
    5930:	4b07      	ldr	r3, [pc, #28]	; (5950 <Mcu_Init+0x88>)
    5932:	681b      	ldr	r3, [r3, #0]
    5934:	68db      	ldr	r3, [r3, #12]
    5936:	9a03      	ldr	r2, [sp, #12]
    5938:	429a      	cmp	r2, r3
    593a:	d3e8      	bcc.n	590e <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    593c:	4b04      	ldr	r3, [pc, #16]	; (5950 <Mcu_Init+0x88>)
    593e:	681b      	ldr	r3, [r3, #0]
    5940:	699b      	ldr	r3, [r3, #24]
    5942:	4618      	mov	r0, r3
    5944:	f000 f88a 	bl	5a5c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5948:	bf00      	nop
    594a:	b005      	add	sp, #20
    594c:	f85d fb04 	ldr.w	pc, [sp], #4
    5950:	1fff8cfc 	.word	0x1fff8cfc
    5954:	1fff8cf8 	.word	0x1fff8cf8
    5958:	1fff8cf4 	.word	0x1fff8cf4

0000595c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    595c:	b084      	sub	sp, #16
    595e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5960:	2301      	movs	r3, #1
    5962:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5966:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    596a:	4618      	mov	r0, r3
    596c:	b004      	add	sp, #16
    596e:	4770      	bx	lr

00005970 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5970:	b500      	push	{lr}
    5972:	b085      	sub	sp, #20
    5974:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5976:	4a0e      	ldr	r2, [pc, #56]	; (59b0 <Mcu_InitClock+0x40>)
    5978:	9b01      	ldr	r3, [sp, #4]
    597a:	4413      	add	r3, r2
    597c:	781b      	ldrb	r3, [r3, #0]
    597e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5982:	4b0c      	ldr	r3, [pc, #48]	; (59b4 <Mcu_InitClock+0x44>)
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	6959      	ldr	r1, [r3, #20]
    5988:	f89d 200f 	ldrb.w	r2, [sp, #15]
    598c:	4613      	mov	r3, r2
    598e:	01db      	lsls	r3, r3, #7
    5990:	1a9b      	subs	r3, r3, r2
    5992:	00db      	lsls	r3, r3, #3
    5994:	440b      	add	r3, r1
    5996:	4618      	mov	r0, r3
    5998:	f000 f86a 	bl	5a70 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    599c:	2300      	movs	r3, #0
    599e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    59a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    59a6:	4618      	mov	r0, r3
    59a8:	b005      	add	sp, #20
    59aa:	f85d fb04 	ldr.w	pc, [sp], #4
    59ae:	bf00      	nop
    59b0:	1fff8cf4 	.word	0x1fff8cf4
    59b4:	1fff8cfc 	.word	0x1fff8cfc

000059b8 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    59b8:	b500      	push	{lr}
    59ba:	b085      	sub	sp, #20
    59bc:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    59be:	4a0d      	ldr	r2, [pc, #52]	; (59f4 <Mcu_SetMode+0x3c>)
    59c0:	9b01      	ldr	r3, [sp, #4]
    59c2:	4413      	add	r3, r2
    59c4:	781b      	ldrb	r3, [r3, #0]
    59c6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    59ca:	f008 fa3b 	bl	de44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    59ce:	4b0a      	ldr	r3, [pc, #40]	; (59f8 <Mcu_SetMode+0x40>)
    59d0:	681b      	ldr	r3, [r3, #0]
    59d2:	6919      	ldr	r1, [r3, #16]
    59d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    59d8:	4613      	mov	r3, r2
    59da:	005b      	lsls	r3, r3, #1
    59dc:	4413      	add	r3, r2
    59de:	009b      	lsls	r3, r3, #2
    59e0:	440b      	add	r3, r1
    59e2:	4618      	mov	r0, r3
    59e4:	f000 f84e 	bl	5a84 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    59e8:	f008 fa58 	bl	de9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    59ec:	bf00      	nop
    59ee:	b005      	add	sp, #20
    59f0:	f85d fb04 	ldr.w	pc, [sp], #4
    59f4:	1fff8cf8 	.word	0x1fff8cf8
    59f8:	1fff8cfc 	.word	0x1fff8cfc

000059fc <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    59fc:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    59fe:	2302      	movs	r3, #2
    5a00:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5a02:	9b01      	ldr	r3, [sp, #4]
}
    5a04:	4618      	mov	r0, r3
    5a06:	b002      	add	sp, #8
    5a08:	4770      	bx	lr

00005a0a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5a0a:	b500      	push	{lr}
    5a0c:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5a0e:	f000 f843 	bl	5a98 <Mcu_Ipw_GetResetReason>
    5a12:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5a14:	9b01      	ldr	r3, [sp, #4]
}
    5a16:	4618      	mov	r0, r3
    5a18:	b003      	add	sp, #12
    5a1a:	f85d fb04 	ldr.w	pc, [sp], #4

00005a1e <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5a1e:	b500      	push	{lr}
    5a20:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5a22:	f000 f83f 	bl	5aa4 <Mcu_Ipw_GetResetRawValue>
    5a26:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5a28:	9b01      	ldr	r3, [sp, #4]
}
    5a2a:	4618      	mov	r0, r3
    5a2c:	b003      	add	sp, #12
    5a2e:	f85d fb04 	ldr.w	pc, [sp], #4

00005a32 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5a32:	b500      	push	{lr}
    5a34:	b083      	sub	sp, #12
    5a36:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5a38:	9801      	ldr	r0, [sp, #4]
    5a3a:	f000 f839 	bl	5ab0 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5a3e:	bf00      	nop
    5a40:	b003      	add	sp, #12
    5a42:	f85d fb04 	ldr.w	pc, [sp], #4

00005a46 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5a46:	b082      	sub	sp, #8
    5a48:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5a4a:	4b03      	ldr	r3, [pc, #12]	; (5a58 <Mcu_ClkSrcFailureNotification+0x12>)
    5a4c:	681b      	ldr	r3, [r3, #0]
    5a4e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5a50:	bf00      	nop
    5a52:	b002      	add	sp, #8
    5a54:	4770      	bx	lr
    5a56:	bf00      	nop
    5a58:	1fff8cfc 	.word	0x1fff8cfc

00005a5c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5a5c:	b500      	push	{lr}
    5a5e:	b083      	sub	sp, #12
    5a60:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5a62:	9801      	ldr	r0, [sp, #4]
    5a64:	f000 f882 	bl	5b6c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5a68:	bf00      	nop
    5a6a:	b003      	add	sp, #12
    5a6c:	f85d fb04 	ldr.w	pc, [sp], #4

00005a70 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5a70:	b500      	push	{lr}
    5a72:	b083      	sub	sp, #12
    5a74:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5a76:	9801      	ldr	r0, [sp, #4]
    5a78:	f7fc fc6a 	bl	2350 <Clock_Ip_InitClock>
}
    5a7c:	bf00      	nop
    5a7e:	b003      	add	sp, #12
    5a80:	f85d fb04 	ldr.w	pc, [sp], #4

00005a84 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5a84:	b500      	push	{lr}
    5a86:	b083      	sub	sp, #12
    5a88:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5a8a:	9801      	ldr	r0, [sp, #4]
    5a8c:	f000 f820 	bl	5ad0 <Power_Ip_SetMode>
}
    5a90:	bf00      	nop
    5a92:	b003      	add	sp, #12
    5a94:	f85d fb04 	ldr.w	pc, [sp], #4

00005a98 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5a98:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5a9a:	f000 f84f 	bl	5b3c <Power_Ip_GetResetReason>
    5a9e:	4603      	mov	r3, r0
}
    5aa0:	4618      	mov	r0, r3
    5aa2:	bd08      	pop	{r3, pc}

00005aa4 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5aa4:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5aa6:	f000 f857 	bl	5b58 <Power_Ip_GetResetRawValue>
    5aaa:	4603      	mov	r3, r0
}
    5aac:	4618      	mov	r0, r3
    5aae:	bd08      	pop	{r3, pc}

00005ab0 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5ab0:	b500      	push	{lr}
    5ab2:	b083      	sub	sp, #12
    5ab4:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5ab6:	9b01      	ldr	r3, [sp, #4]
    5ab8:	2b00      	cmp	r3, #0
    5aba:	d102      	bne.n	5ac2 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5abc:	f000 f86c 	bl	5b98 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5ac0:	e001      	b.n	5ac6 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5ac2:	f000 f86e 	bl	5ba2 <Power_Ip_EnableSleepOnExit>
}
    5ac6:	bf00      	nop
    5ac8:	b003      	add	sp, #12
    5aca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005ad0 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5ad0:	b500      	push	{lr}
    5ad2:	b085      	sub	sp, #20
    5ad4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5ad6:	9b01      	ldr	r3, [sp, #4]
    5ad8:	685b      	ldr	r3, [r3, #4]
    5ada:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5adc:	9802      	ldr	r0, [sp, #8]
    5ade:	f000 f9f5 	bl	5ecc <Power_Ip_SMC_ModeCheckEntry>
    5ae2:	4603      	mov	r3, r0
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d002      	beq.n	5aee <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ae8:	2301      	movs	r3, #1
    5aea:	9303      	str	r3, [sp, #12]
    5aec:	e003      	b.n	5af6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5aee:	9801      	ldr	r0, [sp, #4]
    5af0:	f000 fa1e 	bl	5f30 <Power_Ip_SMC_ModeConfig>
    5af4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5af6:	9b03      	ldr	r3, [sp, #12]
    5af8:	2b01      	cmp	r3, #1
    5afa:	d103      	bne.n	5b04 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5afc:	21ff      	movs	r1, #255	; 0xff
    5afe:	2003      	movs	r0, #3
    5b00:	f000 f8f4 	bl	5cec <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5b04:	bf00      	nop
    5b06:	b005      	add	sp, #20
    5b08:	f85d fb04 	ldr.w	pc, [sp], #4

00005b0c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5b0c:	b084      	sub	sp, #16
    5b0e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5b10:	230c      	movs	r3, #12
    5b12:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5b14:	4a08      	ldr	r2, [pc, #32]	; (5b38 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5b16:	9b01      	ldr	r3, [sp, #4]
    5b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b1c:	2b0e      	cmp	r3, #14
    5b1e:	d805      	bhi.n	5b2c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5b20:	4a05      	ldr	r2, [pc, #20]	; (5b38 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5b22:	9b01      	ldr	r3, [sp, #4]
    5b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b28:	9303      	str	r3, [sp, #12]
    5b2a:	e001      	b.n	5b30 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5b2c:	230c      	movs	r3, #12
    5b2e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5b30:	9b03      	ldr	r3, [sp, #12]
}
    5b32:	4618      	mov	r0, r3
    5b34:	b004      	add	sp, #16
    5b36:	4770      	bx	lr
    5b38:	0000fc50 	.word	0x0000fc50

00005b3c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5b3c:	b500      	push	{lr}
    5b3e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5b40:	f000 f940 	bl	5dc4 <Power_Ip_RCM_GetResetReason>
    5b44:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5b46:	9801      	ldr	r0, [sp, #4]
    5b48:	f7ff ffe0 	bl	5b0c <Power_Ip_ConvertIntergeToResetType>
    5b4c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5b4e:	9b00      	ldr	r3, [sp, #0]
}
    5b50:	4618      	mov	r0, r3
    5b52:	b003      	add	sp, #12
    5b54:	f85d fb04 	ldr.w	pc, [sp], #4

00005b58 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5b58:	b500      	push	{lr}
    5b5a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5b5c:	f000 f98a 	bl	5e74 <Power_Ip_RCM_GetResetRawValue>
    5b60:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5b62:	9b01      	ldr	r3, [sp, #4]
}
    5b64:	4618      	mov	r0, r3
    5b66:	b003      	add	sp, #12
    5b68:	f85d fb04 	ldr.w	pc, [sp], #4

00005b6c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5b6c:	b500      	push	{lr}
    5b6e:	b083      	sub	sp, #12
    5b70:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5b72:	9b01      	ldr	r3, [sp, #4]
    5b74:	681b      	ldr	r3, [r3, #0]
    5b76:	4618      	mov	r0, r3
    5b78:	f000 f90e 	bl	5d98 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5b7c:	9b01      	ldr	r3, [sp, #4]
    5b7e:	685b      	ldr	r3, [r3, #4]
    5b80:	4618      	mov	r0, r3
    5b82:	f000 f86d 	bl	5c60 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5b86:	9b01      	ldr	r3, [sp, #4]
    5b88:	689b      	ldr	r3, [r3, #8]
    5b8a:	4618      	mov	r0, r3
    5b8c:	f000 f990 	bl	5eb0 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5b90:	bf00      	nop
    5b92:	b003      	add	sp, #12
    5b94:	f85d fb04 	ldr.w	pc, [sp], #4

00005b98 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5b98:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5b9a:	f000 f811 	bl	5bc0 <Power_Ip_CM4_DisableSleepOnExit>
}
    5b9e:	bf00      	nop
    5ba0:	bd08      	pop	{r3, pc}

00005ba2 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5ba2:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5ba4:	f000 f820 	bl	5be8 <Power_Ip_CM4_EnableSleepOnExit>
}
    5ba8:	bf00      	nop
    5baa:	bd08      	pop	{r3, pc}

00005bac <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5bac:	b082      	sub	sp, #8
    5bae:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5bb0:	4a02      	ldr	r2, [pc, #8]	; (5bbc <Power_Ip_InstallNotificationsCallback+0x10>)
    5bb2:	9b01      	ldr	r3, [sp, #4]
    5bb4:	6013      	str	r3, [r2, #0]
}
    5bb6:	bf00      	nop
    5bb8:	b002      	add	sp, #8
    5bba:	4770      	bx	lr
    5bbc:	1fff8b1c 	.word	0x1fff8b1c

00005bc0 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5bc0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5bc2:	2300      	movs	r3, #0
    5bc4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5bc6:	4b07      	ldr	r3, [pc, #28]	; (5be4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	685b      	ldr	r3, [r3, #4]
    5bcc:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5bce:	9b01      	ldr	r3, [sp, #4]
    5bd0:	f023 0302 	bic.w	r3, r3, #2
    5bd4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5bd6:	4b03      	ldr	r3, [pc, #12]	; (5be4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	9a01      	ldr	r2, [sp, #4]
    5bdc:	605a      	str	r2, [r3, #4]
}
    5bde:	bf00      	nop
    5be0:	b002      	add	sp, #8
    5be2:	4770      	bx	lr
    5be4:	1fff8b20 	.word	0x1fff8b20

00005be8 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5be8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5bea:	2300      	movs	r3, #0
    5bec:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5bee:	4b07      	ldr	r3, [pc, #28]	; (5c0c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	685b      	ldr	r3, [r3, #4]
    5bf4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5bf6:	9b01      	ldr	r3, [sp, #4]
    5bf8:	f043 0302 	orr.w	r3, r3, #2
    5bfc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5bfe:	4b03      	ldr	r3, [pc, #12]	; (5c0c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5c00:	681b      	ldr	r3, [r3, #0]
    5c02:	9a01      	ldr	r2, [sp, #4]
    5c04:	605a      	str	r2, [r3, #4]
}
    5c06:	bf00      	nop
    5c08:	b002      	add	sp, #8
    5c0a:	4770      	bx	lr
    5c0c:	1fff8b20 	.word	0x1fff8b20

00005c10 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5c10:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5c12:	2300      	movs	r3, #0
    5c14:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5c16:	4b07      	ldr	r3, [pc, #28]	; (5c34 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	685b      	ldr	r3, [r3, #4]
    5c1c:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5c1e:	9b01      	ldr	r3, [sp, #4]
    5c20:	f043 0304 	orr.w	r3, r3, #4
    5c24:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5c26:	4b03      	ldr	r3, [pc, #12]	; (5c34 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5c28:	681b      	ldr	r3, [r3, #0]
    5c2a:	9a01      	ldr	r2, [sp, #4]
    5c2c:	605a      	str	r2, [r3, #4]
}
    5c2e:	bf00      	nop
    5c30:	b002      	add	sp, #8
    5c32:	4770      	bx	lr
    5c34:	1fff8b20 	.word	0x1fff8b20

00005c38 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5c38:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5c3a:	2300      	movs	r3, #0
    5c3c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5c3e:	4b07      	ldr	r3, [pc, #28]	; (5c5c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5c40:	681b      	ldr	r3, [r3, #0]
    5c42:	685b      	ldr	r3, [r3, #4]
    5c44:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5c46:	9b01      	ldr	r3, [sp, #4]
    5c48:	f023 0304 	bic.w	r3, r3, #4
    5c4c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5c4e:	4b03      	ldr	r3, [pc, #12]	; (5c5c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5c50:	681b      	ldr	r3, [r3, #0]
    5c52:	9a01      	ldr	r2, [sp, #4]
    5c54:	605a      	str	r2, [r3, #4]
}
    5c56:	bf00      	nop
    5c58:	b002      	add	sp, #8
    5c5a:	4770      	bx	lr
    5c5c:	1fff8b20 	.word	0x1fff8b20

00005c60 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5c60:	b084      	sub	sp, #16
    5c62:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5c64:	4b20      	ldr	r3, [pc, #128]	; (5ce8 <Power_Ip_PMC_PowerInit+0x88>)
    5c66:	781b      	ldrb	r3, [r3, #0]
    5c68:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5c6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c70:	f003 030f 	and.w	r3, r3, #15
    5c74:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5c78:	9b01      	ldr	r3, [sp, #4]
    5c7a:	781a      	ldrb	r2, [r3, #0]
    5c7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c80:	4313      	orrs	r3, r2
    5c82:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5c86:	4a18      	ldr	r2, [pc, #96]	; (5ce8 <Power_Ip_PMC_PowerInit+0x88>)
    5c88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c8c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5c8e:	4b16      	ldr	r3, [pc, #88]	; (5ce8 <Power_Ip_PMC_PowerInit+0x88>)
    5c90:	785b      	ldrb	r3, [r3, #1]
    5c92:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5c96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c9a:	f003 031f 	and.w	r3, r3, #31
    5c9e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5ca2:	9b01      	ldr	r3, [sp, #4]
    5ca4:	785a      	ldrb	r2, [r3, #1]
    5ca6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5caa:	4313      	orrs	r3, r2
    5cac:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5cb0:	4a0d      	ldr	r2, [pc, #52]	; (5ce8 <Power_Ip_PMC_PowerInit+0x88>)
    5cb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5cb6:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5cb8:	4b0b      	ldr	r3, [pc, #44]	; (5ce8 <Power_Ip_PMC_PowerInit+0x88>)
    5cba:	789b      	ldrb	r3, [r3, #2]
    5cbc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5cc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5cc8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5ccc:	9b01      	ldr	r3, [sp, #4]
    5cce:	789a      	ldrb	r2, [r3, #2]
    5cd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5cd4:	4313      	orrs	r3, r2
    5cd6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5cda:	4a03      	ldr	r2, [pc, #12]	; (5ce8 <Power_Ip_PMC_PowerInit+0x88>)
    5cdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ce0:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5ce2:	bf00      	nop
    5ce4:	b004      	add	sp, #16
    5ce6:	4770      	bx	lr
    5ce8:	4007d000 	.word	0x4007d000

00005cec <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5cec:	b500      	push	{lr}
    5cee:	b083      	sub	sp, #12
    5cf0:	9001      	str	r0, [sp, #4]
    5cf2:	460b      	mov	r3, r1
    5cf4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5cf8:	4b05      	ldr	r3, [pc, #20]	; (5d10 <Power_Ip_ReportPowerErrors+0x24>)
    5cfa:	681b      	ldr	r3, [r3, #0]
    5cfc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5d00:	4611      	mov	r1, r2
    5d02:	9801      	ldr	r0, [sp, #4]
    5d04:	4798      	blx	r3
}
    5d06:	bf00      	nop
    5d08:	b003      	add	sp, #12
    5d0a:	f85d fb04 	ldr.w	pc, [sp], #4
    5d0e:	bf00      	nop
    5d10:	1fff8b1c 	.word	0x1fff8b1c

00005d14 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5d14:	b082      	sub	sp, #8
    5d16:	9001      	str	r0, [sp, #4]
    5d18:	460b      	mov	r3, r1
    5d1a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5d1e:	bf00      	nop
    5d20:	b002      	add	sp, #8
    5d22:	4770      	bx	lr

00005d24 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5d24:	b500      	push	{lr}
    5d26:	b085      	sub	sp, #20
    5d28:	9003      	str	r0, [sp, #12]
    5d2a:	9102      	str	r1, [sp, #8]
    5d2c:	9201      	str	r2, [sp, #4]
    5d2e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5d30:	2000      	movs	r0, #0
    5d32:	f7fc f83d 	bl	1db0 <OsIf_GetCounter>
    5d36:	4602      	mov	r2, r0
    5d38:	9b03      	ldr	r3, [sp, #12]
    5d3a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5d3c:	9b02      	ldr	r3, [sp, #8]
    5d3e:	2200      	movs	r2, #0
    5d40:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5d42:	2100      	movs	r1, #0
    5d44:	9800      	ldr	r0, [sp, #0]
    5d46:	f7fc f87f 	bl	1e48 <OsIf_MicrosToTicks>
    5d4a:	4602      	mov	r2, r0
    5d4c:	9b01      	ldr	r3, [sp, #4]
    5d4e:	601a      	str	r2, [r3, #0]
}
    5d50:	bf00      	nop
    5d52:	b005      	add	sp, #20
    5d54:	f85d fb04 	ldr.w	pc, [sp], #4

00005d58 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5d58:	b500      	push	{lr}
    5d5a:	b087      	sub	sp, #28
    5d5c:	9003      	str	r0, [sp, #12]
    5d5e:	9102      	str	r1, [sp, #8]
    5d60:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5d62:	2300      	movs	r3, #0
    5d64:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5d68:	2100      	movs	r1, #0
    5d6a:	9803      	ldr	r0, [sp, #12]
    5d6c:	f7fc f839 	bl	1de2 <OsIf_GetElapsed>
    5d70:	4602      	mov	r2, r0
    5d72:	9b02      	ldr	r3, [sp, #8]
    5d74:	681b      	ldr	r3, [r3, #0]
    5d76:	441a      	add	r2, r3
    5d78:	9b02      	ldr	r3, [sp, #8]
    5d7a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5d7c:	9b02      	ldr	r3, [sp, #8]
    5d7e:	681b      	ldr	r3, [r3, #0]
    5d80:	9a01      	ldr	r2, [sp, #4]
    5d82:	429a      	cmp	r2, r3
    5d84:	d802      	bhi.n	5d8c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5d86:	2301      	movs	r3, #1
    5d88:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5d8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5d90:	4618      	mov	r0, r3
    5d92:	b007      	add	sp, #28
    5d94:	f85d fb04 	ldr.w	pc, [sp], #4

00005d98 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5d98:	b082      	sub	sp, #8
    5d9a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5d9c:	9b01      	ldr	r3, [sp, #4]
    5d9e:	681a      	ldr	r2, [r3, #0]
    5da0:	4907      	ldr	r1, [pc, #28]	; (5dc0 <Power_Ip_RCM_ResetInit+0x28>)
    5da2:	f641 7307 	movw	r3, #7943	; 0x1f07
    5da6:	4013      	ands	r3, r2
    5da8:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5daa:	9b01      	ldr	r3, [sp, #4]
    5dac:	685a      	ldr	r2, [r3, #4]
    5dae:	4904      	ldr	r1, [pc, #16]	; (5dc0 <Power_Ip_RCM_ResetInit+0x28>)
    5db0:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5db4:	4013      	ands	r3, r2
    5db6:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5db8:	bf00      	nop
    5dba:	b002      	add	sp, #8
    5dbc:	4770      	bx	lr
    5dbe:	bf00      	nop
    5dc0:	4007f000 	.word	0x4007f000

00005dc4 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5dc4:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5dc6:	230c      	movs	r3, #12
    5dc8:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5dca:	2300      	movs	r3, #0
    5dcc:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5dce:	2300      	movs	r3, #0
    5dd0:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5dd2:	2300      	movs	r3, #0
    5dd4:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5dd6:	4b25      	ldr	r3, [pc, #148]	; (5e6c <Power_Ip_RCM_GetResetReason+0xa8>)
    5dd8:	699a      	ldr	r2, [r3, #24]
    5dda:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5dde:	4013      	ands	r3, r2
    5de0:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5de2:	9b03      	ldr	r3, [sp, #12]
    5de4:	2b00      	cmp	r3, #0
    5de6:	d008      	beq.n	5dfa <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5de8:	4920      	ldr	r1, [pc, #128]	; (5e6c <Power_Ip_RCM_GetResetReason+0xa8>)
    5dea:	9a03      	ldr	r2, [sp, #12]
    5dec:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5df0:	4013      	ands	r3, r2
    5df2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5df4:	4a1e      	ldr	r2, [pc, #120]	; (5e70 <Power_Ip_RCM_GetResetReason+0xac>)
    5df6:	9b03      	ldr	r3, [sp, #12]
    5df8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5dfa:	4b1d      	ldr	r3, [pc, #116]	; (5e70 <Power_Ip_RCM_GetResetReason+0xac>)
    5dfc:	681b      	ldr	r3, [r3, #0]
    5dfe:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5e00:	9a02      	ldr	r2, [sp, #8]
    5e02:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5e06:	4013      	ands	r3, r2
    5e08:	2b82      	cmp	r3, #130	; 0x82
    5e0a:	d102      	bne.n	5e12 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5e0c:	2305      	movs	r3, #5
    5e0e:	9307      	str	r3, [sp, #28]
    5e10:	e027      	b.n	5e62 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5e12:	2300      	movs	r3, #0
    5e14:	9306      	str	r3, [sp, #24]
    5e16:	e021      	b.n	5e5c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5e18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5e1c:	9b06      	ldr	r3, [sp, #24]
    5e1e:	fa22 f303 	lsr.w	r3, r2, r3
    5e22:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5e24:	9a01      	ldr	r2, [sp, #4]
    5e26:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5e2a:	4013      	ands	r3, r2
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d012      	beq.n	5e56 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5e30:	9a01      	ldr	r2, [sp, #4]
    5e32:	9b02      	ldr	r3, [sp, #8]
    5e34:	4013      	ands	r3, r2
    5e36:	2b00      	cmp	r3, #0
    5e38:	d00a      	beq.n	5e50 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5e3a:	9b05      	ldr	r3, [sp, #20]
    5e3c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5e3e:	9b04      	ldr	r3, [sp, #16]
    5e40:	3301      	adds	r3, #1
    5e42:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5e44:	9b04      	ldr	r3, [sp, #16]
    5e46:	2b01      	cmp	r3, #1
    5e48:	d902      	bls.n	5e50 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5e4a:	230d      	movs	r3, #13
    5e4c:	9307      	str	r3, [sp, #28]
                        break;
    5e4e:	e008      	b.n	5e62 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5e50:	9b05      	ldr	r3, [sp, #20]
    5e52:	3301      	adds	r3, #1
    5e54:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5e56:	9b06      	ldr	r3, [sp, #24]
    5e58:	3301      	adds	r3, #1
    5e5a:	9306      	str	r3, [sp, #24]
    5e5c:	9b06      	ldr	r3, [sp, #24]
    5e5e:	2b1f      	cmp	r3, #31
    5e60:	d9da      	bls.n	5e18 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5e62:	9b07      	ldr	r3, [sp, #28]
}
    5e64:	4618      	mov	r0, r3
    5e66:	b008      	add	sp, #32
    5e68:	4770      	bx	lr
    5e6a:	bf00      	nop
    5e6c:	4007f000 	.word	0x4007f000
    5e70:	1fff8d00 	.word	0x1fff8d00

00005e74 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5e74:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5e76:	4b0c      	ldr	r3, [pc, #48]	; (5ea8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5e78:	699a      	ldr	r2, [r3, #24]
    5e7a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5e7e:	4013      	ands	r3, r2
    5e80:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5e82:	9b01      	ldr	r3, [sp, #4]
    5e84:	2b00      	cmp	r3, #0
    5e86:	d008      	beq.n	5e9a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5e88:	4907      	ldr	r1, [pc, #28]	; (5ea8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5e8a:	9a01      	ldr	r2, [sp, #4]
    5e8c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5e90:	4013      	ands	r3, r2
    5e92:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5e94:	4a05      	ldr	r2, [pc, #20]	; (5eac <Power_Ip_RCM_GetResetRawValue+0x38>)
    5e96:	9b01      	ldr	r3, [sp, #4]
    5e98:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5e9a:	4b04      	ldr	r3, [pc, #16]	; (5eac <Power_Ip_RCM_GetResetRawValue+0x38>)
    5e9c:	681b      	ldr	r3, [r3, #0]
    5e9e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5ea0:	9b00      	ldr	r3, [sp, #0]
}
    5ea2:	4618      	mov	r0, r3
    5ea4:	b002      	add	sp, #8
    5ea6:	4770      	bx	lr
    5ea8:	4007f000 	.word	0x4007f000
    5eac:	1fff8d00 	.word	0x1fff8d00

00005eb0 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5eb0:	b082      	sub	sp, #8
    5eb2:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5eb4:	9b01      	ldr	r3, [sp, #4]
    5eb6:	681b      	ldr	r3, [r3, #0]
    5eb8:	4a03      	ldr	r2, [pc, #12]	; (5ec8 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5eba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5ebe:	6093      	str	r3, [r2, #8]
}
    5ec0:	bf00      	nop
    5ec2:	b002      	add	sp, #8
    5ec4:	4770      	bx	lr
    5ec6:	bf00      	nop
    5ec8:	4007e000 	.word	0x4007e000

00005ecc <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5ecc:	b084      	sub	sp, #16
    5ece:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5ed0:	2301      	movs	r3, #1
    5ed2:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5ed4:	4b15      	ldr	r3, [pc, #84]	; (5f2c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5ed6:	695b      	ldr	r3, [r3, #20]
    5ed8:	b2db      	uxtb	r3, r3
    5eda:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5edc:	9b01      	ldr	r3, [sp, #4]
    5ede:	2b02      	cmp	r3, #2
    5ee0:	d012      	beq.n	5f08 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5ee2:	9b01      	ldr	r3, [sp, #4]
    5ee4:	2b02      	cmp	r3, #2
    5ee6:	d818      	bhi.n	5f1a <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5ee8:	9b01      	ldr	r3, [sp, #4]
    5eea:	2b00      	cmp	r3, #0
    5eec:	d003      	beq.n	5ef6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5eee:	9b01      	ldr	r3, [sp, #4]
    5ef0:	2b01      	cmp	r3, #1
    5ef2:	d003      	beq.n	5efc <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5ef4:	e011      	b.n	5f1a <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5ef6:	2300      	movs	r3, #0
    5ef8:	9303      	str	r3, [sp, #12]
            break;
    5efa:	e013      	b.n	5f24 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5efc:	9b02      	ldr	r3, [sp, #8]
    5efe:	2b01      	cmp	r3, #1
    5f00:	d10d      	bne.n	5f1e <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5f02:	2300      	movs	r3, #0
    5f04:	9303      	str	r3, [sp, #12]
            break;
    5f06:	e00a      	b.n	5f1e <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5f08:	9b02      	ldr	r3, [sp, #8]
    5f0a:	2b01      	cmp	r3, #1
    5f0c:	d002      	beq.n	5f14 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5f0e:	9b02      	ldr	r3, [sp, #8]
    5f10:	2b10      	cmp	r3, #16
    5f12:	d106      	bne.n	5f22 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5f14:	2300      	movs	r3, #0
    5f16:	9303      	str	r3, [sp, #12]
            break;
    5f18:	e003      	b.n	5f22 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5f1a:	bf00      	nop
    5f1c:	e002      	b.n	5f24 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5f1e:	bf00      	nop
    5f20:	e000      	b.n	5f24 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5f22:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5f24:	9b03      	ldr	r3, [sp, #12]
}
    5f26:	4618      	mov	r0, r3
    5f28:	b004      	add	sp, #16
    5f2a:	4770      	bx	lr
    5f2c:	4007e000 	.word	0x4007e000

00005f30 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5f30:	b500      	push	{lr}
    5f32:	b08b      	sub	sp, #44	; 0x2c
    5f34:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5f36:	2300      	movs	r3, #0
    5f38:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5f3a:	2300      	movs	r3, #0
    5f3c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5f3e:	2300      	movs	r3, #0
    5f40:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5f44:	9b01      	ldr	r3, [sp, #4]
    5f46:	685b      	ldr	r3, [r3, #4]
    5f48:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5f4a:	9b08      	ldr	r3, [sp, #32]
    5f4c:	2b02      	cmp	r3, #2
    5f4e:	d076      	beq.n	603e <Power_Ip_SMC_ModeConfig+0x10e>
    5f50:	9b08      	ldr	r3, [sp, #32]
    5f52:	2b02      	cmp	r3, #2
    5f54:	f200 80ab 	bhi.w	60ae <Power_Ip_SMC_ModeConfig+0x17e>
    5f58:	9b08      	ldr	r3, [sp, #32]
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	d003      	beq.n	5f66 <Power_Ip_SMC_ModeConfig+0x36>
    5f5e:	9b08      	ldr	r3, [sp, #32]
    5f60:	2b01      	cmp	r3, #1
    5f62:	d034      	beq.n	5fce <Power_Ip_SMC_ModeConfig+0x9e>
    5f64:	e0a3      	b.n	60ae <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5f66:	4b58      	ldr	r3, [pc, #352]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    5f68:	68db      	ldr	r3, [r3, #12]
    5f6a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5f6c:	9b06      	ldr	r3, [sp, #24]
    5f6e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5f72:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5f74:	4a54      	ldr	r2, [pc, #336]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    5f76:	9b06      	ldr	r3, [sp, #24]
    5f78:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5f7a:	aa02      	add	r2, sp, #8
    5f7c:	a903      	add	r1, sp, #12
    5f7e:	a804      	add	r0, sp, #16
    5f80:	f24c 3350 	movw	r3, #50000	; 0xc350
    5f84:	f7ff fece 	bl	5d24 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5f88:	9a02      	ldr	r2, [sp, #8]
    5f8a:	a903      	add	r1, sp, #12
    5f8c:	ab04      	add	r3, sp, #16
    5f8e:	4618      	mov	r0, r3
    5f90:	f7ff fee2 	bl	5d58 <Power_Ip_TimeoutExpired>
    5f94:	4603      	mov	r3, r0
    5f96:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5f9a:	4b4b      	ldr	r3, [pc, #300]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    5f9c:	695b      	ldr	r3, [r3, #20]
    5f9e:	f003 0301 	and.w	r3, r3, #1
    5fa2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5fa4:	9b05      	ldr	r3, [sp, #20]
    5fa6:	2b01      	cmp	r3, #1
    5fa8:	d006      	beq.n	5fb8 <Power_Ip_SMC_ModeConfig+0x88>
    5faa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5fae:	f083 0301 	eor.w	r3, r3, #1
    5fb2:	b2db      	uxtb	r3, r3
    5fb4:	2b00      	cmp	r3, #0
    5fb6:	d1e7      	bne.n	5f88 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5fb8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d079      	beq.n	60b4 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5fc0:	2301      	movs	r3, #1
    5fc2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5fc4:	21ff      	movs	r1, #255	; 0xff
    5fc6:	2000      	movs	r0, #0
    5fc8:	f7ff fe90 	bl	5cec <Power_Ip_ReportPowerErrors>
            }

            break;
    5fcc:	e072      	b.n	60b4 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5fce:	4b3e      	ldr	r3, [pc, #248]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    5fd0:	68db      	ldr	r3, [r3, #12]
    5fd2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5fd4:	9b06      	ldr	r3, [sp, #24]
    5fd6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5fda:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5fdc:	9b06      	ldr	r3, [sp, #24]
    5fde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5fe2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5fe4:	4a38      	ldr	r2, [pc, #224]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    5fe6:	9b06      	ldr	r3, [sp, #24]
    5fe8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5fea:	aa02      	add	r2, sp, #8
    5fec:	a903      	add	r1, sp, #12
    5fee:	a804      	add	r0, sp, #16
    5ff0:	f24c 3350 	movw	r3, #50000	; 0xc350
    5ff4:	f7ff fe96 	bl	5d24 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5ff8:	9a02      	ldr	r2, [sp, #8]
    5ffa:	a903      	add	r1, sp, #12
    5ffc:	ab04      	add	r3, sp, #16
    5ffe:	4618      	mov	r0, r3
    6000:	f7ff feaa 	bl	5d58 <Power_Ip_TimeoutExpired>
    6004:	4603      	mov	r3, r0
    6006:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    600a:	4b2f      	ldr	r3, [pc, #188]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    600c:	695b      	ldr	r3, [r3, #20]
    600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6012:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6014:	9b05      	ldr	r3, [sp, #20]
    6016:	2b80      	cmp	r3, #128	; 0x80
    6018:	d006      	beq.n	6028 <Power_Ip_SMC_ModeConfig+0xf8>
    601a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    601e:	f083 0301 	eor.w	r3, r3, #1
    6022:	b2db      	uxtb	r3, r3
    6024:	2b00      	cmp	r3, #0
    6026:	d1e7      	bne.n	5ff8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6028:	f89d 301f 	ldrb.w	r3, [sp, #31]
    602c:	2b00      	cmp	r3, #0
    602e:	d043      	beq.n	60b8 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6030:	2301      	movs	r3, #1
    6032:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6034:	21ff      	movs	r1, #255	; 0xff
    6036:	2000      	movs	r0, #0
    6038:	f7ff fe58 	bl	5cec <Power_Ip_ReportPowerErrors>
            }

            break;
    603c:	e03c      	b.n	60b8 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    603e:	4b22      	ldr	r3, [pc, #136]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    6040:	68db      	ldr	r3, [r3, #12]
    6042:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6044:	9b06      	ldr	r3, [sp, #24]
    6046:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    604a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    604c:	9b06      	ldr	r3, [sp, #24]
    604e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6052:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6054:	4a1c      	ldr	r2, [pc, #112]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    6056:	9b06      	ldr	r3, [sp, #24]
    6058:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    605a:	aa02      	add	r2, sp, #8
    605c:	a903      	add	r1, sp, #12
    605e:	a804      	add	r0, sp, #16
    6060:	f24c 3350 	movw	r3, #50000	; 0xc350
    6064:	f7ff fe5e 	bl	5d24 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6068:	9a02      	ldr	r2, [sp, #8]
    606a:	a903      	add	r1, sp, #12
    606c:	ab04      	add	r3, sp, #16
    606e:	4618      	mov	r0, r3
    6070:	f7ff fe72 	bl	5d58 <Power_Ip_TimeoutExpired>
    6074:	4603      	mov	r3, r0
    6076:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    607a:	4b13      	ldr	r3, [pc, #76]	; (60c8 <Power_Ip_SMC_ModeConfig+0x198>)
    607c:	695b      	ldr	r3, [r3, #20]
    607e:	f003 0304 	and.w	r3, r3, #4
    6082:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6084:	9b05      	ldr	r3, [sp, #20]
    6086:	2b04      	cmp	r3, #4
    6088:	d006      	beq.n	6098 <Power_Ip_SMC_ModeConfig+0x168>
    608a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    608e:	f083 0301 	eor.w	r3, r3, #1
    6092:	b2db      	uxtb	r3, r3
    6094:	2b00      	cmp	r3, #0
    6096:	d1e7      	bne.n	6068 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6098:	f89d 301f 	ldrb.w	r3, [sp, #31]
    609c:	2b00      	cmp	r3, #0
    609e:	d00d      	beq.n	60bc <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    60a0:	2301      	movs	r3, #1
    60a2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    60a4:	21ff      	movs	r1, #255	; 0xff
    60a6:	2000      	movs	r0, #0
    60a8:	f7ff fe20 	bl	5cec <Power_Ip_ReportPowerErrors>
            }

            break;
    60ac:	e006      	b.n	60bc <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    60ae:	2301      	movs	r3, #1
    60b0:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    60b2:	e004      	b.n	60be <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    60b4:	bf00      	nop
    60b6:	e002      	b.n	60be <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    60b8:	bf00      	nop
    60ba:	e000      	b.n	60be <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    60bc:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    60be:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    60c0:	4618      	mov	r0, r3
    60c2:	b00b      	add	sp, #44	; 0x2c
    60c4:	f85d fb04 	ldr.w	pc, [sp], #4
    60c8:	4007e000 	.word	0x4007e000

000060cc <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    60cc:	b500      	push	{lr}
    60ce:	b085      	sub	sp, #20
    60d0:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    60d2:	9b01      	ldr	r3, [sp, #4]
    60d4:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    60d6:	9803      	ldr	r0, [sp, #12]
    60d8:	f000 fbc8 	bl	686c <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    60dc:	4a03      	ldr	r2, [pc, #12]	; (60ec <Port_Init+0x20>)
    60de:	9b03      	ldr	r3, [sp, #12]
    60e0:	6013      	str	r3, [r2, #0]
        }
    }
}
    60e2:	bf00      	nop
    60e4:	b005      	add	sp, #20
    60e6:	f85d fb04 	ldr.w	pc, [sp], #4
    60ea:	bf00      	nop
    60ec:	1fff8d04 	.word	0x1fff8d04

000060f0 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    60f0:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    60f2:	4b03      	ldr	r3, [pc, #12]	; (6100 <Port_RefreshPortDirection+0x10>)
    60f4:	681b      	ldr	r3, [r3, #0]
    60f6:	4618      	mov	r0, r3
    60f8:	f000 fc10 	bl	691c <Port_Ipw_RefreshPortDirection>
    }
}
    60fc:	bf00      	nop
    60fe:	bd08      	pop	{r3, pc}
    6100:	1fff8d04 	.word	0x1fff8d04

00006104 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6104:	b086      	sub	sp, #24
    6106:	9003      	str	r0, [sp, #12]
    6108:	9102      	str	r1, [sp, #8]
    610a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    610c:	23ff      	movs	r3, #255	; 0xff
    610e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6110:	9b03      	ldr	r3, [sp, #12]
    6112:	4a39      	ldr	r2, [pc, #228]	; (61f8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6114:	4293      	cmp	r3, r2
    6116:	d151      	bne.n	61bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6118:	9b02      	ldr	r3, [sp, #8]
    611a:	2b10      	cmp	r3, #16
    611c:	d867      	bhi.n	61ee <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    611e:	a201      	add	r2, pc, #4	; (adr r2, 6124 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6124:	00006169 	.word	0x00006169
    6128:	00006177 	.word	0x00006177
    612c:	000061ef 	.word	0x000061ef
    6130:	000061ef 	.word	0x000061ef
    6134:	000061ef 	.word	0x000061ef
    6138:	000061ef 	.word	0x000061ef
    613c:	000061ef 	.word	0x000061ef
    6140:	000061ef 	.word	0x000061ef
    6144:	000061ef 	.word	0x000061ef
    6148:	000061ef 	.word	0x000061ef
    614c:	000061ef 	.word	0x000061ef
    6150:	000061ef 	.word	0x000061ef
    6154:	000061ef 	.word	0x000061ef
    6158:	00006185 	.word	0x00006185
    615c:	00006193 	.word	0x00006193
    6160:	000061a1 	.word	0x000061a1
    6164:	000061af 	.word	0x000061af
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6168:	2301      	movs	r3, #1
    616a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    616c:	9a05      	ldr	r2, [sp, #20]
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	4313      	orrs	r3, r2
    6172:	9305      	str	r3, [sp, #20]
                break;
    6174:	e03c      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6176:	2302      	movs	r3, #2
    6178:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    617a:	9a05      	ldr	r2, [sp, #20]
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	4313      	orrs	r3, r2
    6180:	9305      	str	r3, [sp, #20]
                break;
    6182:	e035      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6184:	2304      	movs	r3, #4
    6186:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6188:	9a05      	ldr	r2, [sp, #20]
    618a:	9b01      	ldr	r3, [sp, #4]
    618c:	4313      	orrs	r3, r2
    618e:	9305      	str	r3, [sp, #20]
                break;
    6190:	e02e      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6192:	2308      	movs	r3, #8
    6194:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6196:	9a05      	ldr	r2, [sp, #20]
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	4313      	orrs	r3, r2
    619c:	9305      	str	r3, [sp, #20]
                break;
    619e:	e027      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    61a0:	230e      	movs	r3, #14
    61a2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    61a4:	9a05      	ldr	r2, [sp, #20]
    61a6:	9b01      	ldr	r3, [sp, #4]
    61a8:	4013      	ands	r3, r2
    61aa:	9305      	str	r3, [sp, #20]
                break;
    61ac:	e020      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    61ae:	230d      	movs	r3, #13
    61b0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    61b2:	9a05      	ldr	r2, [sp, #20]
    61b4:	9b01      	ldr	r3, [sp, #4]
    61b6:	4013      	ands	r3, r2
    61b8:	9305      	str	r3, [sp, #20]
                break;
    61ba:	e019      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    61bc:	9b03      	ldr	r3, [sp, #12]
    61be:	4a0f      	ldr	r2, [pc, #60]	; (61fc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    61c0:	4293      	cmp	r3, r2
    61c2:	d115      	bne.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    61c4:	9b02      	ldr	r3, [sp, #8]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d003      	beq.n	61d2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    61ca:	9b02      	ldr	r3, [sp, #8]
    61cc:	2b01      	cmp	r3, #1
    61ce:	d007      	beq.n	61e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    61d0:	e00e      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    61d2:	230b      	movs	r3, #11
    61d4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    61d6:	9a05      	ldr	r2, [sp, #20]
    61d8:	9b01      	ldr	r3, [sp, #4]
    61da:	4013      	ands	r3, r2
    61dc:	9305      	str	r3, [sp, #20]
                break;
    61de:	e007      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    61e0:	2307      	movs	r3, #7
    61e2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    61e4:	9a05      	ldr	r2, [sp, #20]
    61e6:	9b01      	ldr	r3, [sp, #4]
    61e8:	4013      	ands	r3, r2
    61ea:	9305      	str	r3, [sp, #20]
                break;
    61ec:	e000      	b.n	61f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    61ee:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    61f0:	9b05      	ldr	r3, [sp, #20]
}
    61f2:	4618      	mov	r0, r3
    61f4:	b006      	add	sp, #24
    61f6:	4770      	bx	lr
    61f8:	4004a000 	.word	0x4004a000
    61fc:	4004b000 	.word	0x4004b000

00006200 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6200:	b500      	push	{lr}
    6202:	b089      	sub	sp, #36	; 0x24
    6204:	9003      	str	r0, [sp, #12]
    6206:	9102      	str	r1, [sp, #8]
    6208:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    620a:	9b01      	ldr	r3, [sp, #4]
    620c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    620e:	9b01      	ldr	r3, [sp, #4]
    6210:	2b08      	cmp	r3, #8
    6212:	d121      	bne.n	6258 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6214:	4b13      	ldr	r3, [pc, #76]	; (6264 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6216:	685b      	ldr	r3, [r3, #4]
    6218:	f003 030f 	and.w	r3, r3, #15
    621c:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    621e:	9a06      	ldr	r2, [sp, #24]
    6220:	9902      	ldr	r1, [sp, #8]
    6222:	9803      	ldr	r0, [sp, #12]
    6224:	f7ff ff6e 	bl	6104 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6228:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    622a:	9b05      	ldr	r3, [sp, #20]
    622c:	2bff      	cmp	r3, #255	; 0xff
    622e:	d011      	beq.n	6254 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6230:	f008 f898 	bl	e364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6234:	4b0b      	ldr	r3, [pc, #44]	; (6264 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6236:	685b      	ldr	r3, [r3, #4]
    6238:	4a0a      	ldr	r2, [pc, #40]	; (6264 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    623a:	f023 030f 	bic.w	r3, r3, #15
    623e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6240:	4b08      	ldr	r3, [pc, #32]	; (6264 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6242:	685a      	ldr	r2, [r3, #4]
    6244:	9b05      	ldr	r3, [sp, #20]
    6246:	f003 030f 	and.w	r3, r3, #15
    624a:	4906      	ldr	r1, [pc, #24]	; (6264 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    624c:	4313      	orrs	r3, r2
    624e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6250:	f008 f8b4 	bl	e3bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6254:	2300      	movs	r3, #0
    6256:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6258:	9b07      	ldr	r3, [sp, #28]
}
    625a:	4618      	mov	r0, r3
    625c:	b009      	add	sp, #36	; 0x24
    625e:	f85d fb04 	ldr.w	pc, [sp], #4
    6262:	bf00      	nop
    6264:	40048000 	.word	0x40048000

00006268 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6268:	b500      	push	{lr}
    626a:	b087      	sub	sp, #28
    626c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    626e:	2300      	movs	r3, #0
    6270:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6272:	2300      	movs	r3, #0
    6274:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6276:	2300      	movs	r3, #0
    6278:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    627a:	9b01      	ldr	r3, [sp, #4]
    627c:	68db      	ldr	r3, [r3, #12]
    627e:	2b02      	cmp	r3, #2
    6280:	d00a      	beq.n	6298 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6282:	9b05      	ldr	r3, [sp, #20]
    6284:	f043 0302 	orr.w	r3, r3, #2
    6288:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    628a:	9b01      	ldr	r3, [sp, #4]
    628c:	68db      	ldr	r3, [r3, #12]
    628e:	f003 0301 	and.w	r3, r3, #1
    6292:	9a05      	ldr	r2, [sp, #20]
    6294:	4313      	orrs	r3, r2
    6296:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6298:	9b01      	ldr	r3, [sp, #4]
    629a:	699b      	ldr	r3, [r3, #24]
    629c:	019b      	lsls	r3, r3, #6
    629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    62a2:	9a05      	ldr	r2, [sp, #20]
    62a4:	4313      	orrs	r3, r2
    62a6:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    62a8:	9b01      	ldr	r3, [sp, #4]
    62aa:	6a1b      	ldr	r3, [r3, #32]
    62ac:	03db      	lsls	r3, r3, #15
    62ae:	b29b      	uxth	r3, r3
    62b0:	9a05      	ldr	r2, [sp, #20]
    62b2:	4313      	orrs	r3, r2
    62b4:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    62b6:	9b01      	ldr	r3, [sp, #4]
    62b8:	7f1b      	ldrb	r3, [r3, #28]
    62ba:	2b00      	cmp	r3, #0
    62bc:	d001      	beq.n	62c2 <Port_Ci_Port_Ip_PinInit+0x5a>
    62be:	2310      	movs	r3, #16
    62c0:	e000      	b.n	62c4 <Port_Ci_Port_Ip_PinInit+0x5c>
    62c2:	2300      	movs	r3, #0
    62c4:	9a05      	ldr	r2, [sp, #20]
    62c6:	4313      	orrs	r3, r2
    62c8:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    62ca:	9b01      	ldr	r3, [sp, #4]
    62cc:	691b      	ldr	r3, [r3, #16]
    62ce:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	6818      	ldr	r0, [r3, #0]
    62d4:	9b01      	ldr	r3, [sp, #4]
    62d6:	689b      	ldr	r3, [r3, #8]
    62d8:	9a04      	ldr	r2, [sp, #16]
    62da:	4619      	mov	r1, r3
    62dc:	f7ff ff90 	bl	6200 <Port_Ci_Port_Ip_ConfigureInterleave>
    62e0:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    62e2:	9b03      	ldr	r3, [sp, #12]
    62e4:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    62e6:	9b04      	ldr	r3, [sp, #16]
    62e8:	021b      	lsls	r3, r3, #8
    62ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    62ee:	9a05      	ldr	r2, [sp, #20]
    62f0:	4313      	orrs	r3, r2
    62f2:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    62f4:	f007 fe9c 	bl	e030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    62f8:	9b01      	ldr	r3, [sp, #4]
    62fa:	681b      	ldr	r3, [r3, #0]
    62fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6300:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6302:	9b01      	ldr	r3, [sp, #4]
    6304:	689b      	ldr	r3, [r3, #8]
    6306:	2201      	movs	r2, #1
    6308:	fa02 f303 	lsl.w	r3, r2, r3
    630c:	43db      	mvns	r3, r3
    630e:	9a02      	ldr	r2, [sp, #8]
    6310:	4013      	ands	r3, r2
    6312:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6314:	9b01      	ldr	r3, [sp, #4]
    6316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    631a:	2b00      	cmp	r3, #0
    631c:	d001      	beq.n	6322 <Port_Ci_Port_Ip_PinInit+0xba>
    631e:	2201      	movs	r2, #1
    6320:	e000      	b.n	6324 <Port_Ci_Port_Ip_PinInit+0xbc>
    6322:	2200      	movs	r2, #0
    6324:	9b01      	ldr	r3, [sp, #4]
    6326:	689b      	ldr	r3, [r3, #8]
    6328:	fa02 f303 	lsl.w	r3, r2, r3
    632c:	9a02      	ldr	r2, [sp, #8]
    632e:	4313      	orrs	r3, r2
    6330:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6332:	9b01      	ldr	r3, [sp, #4]
    6334:	681b      	ldr	r3, [r3, #0]
    6336:	9a02      	ldr	r2, [sp, #8]
    6338:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    633c:	f007 fea4 	bl	e088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6340:	9b04      	ldr	r3, [sp, #16]
    6342:	2b01      	cmp	r3, #1
    6344:	d16d      	bne.n	6422 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6346:	9b01      	ldr	r3, [sp, #4]
    6348:	695b      	ldr	r3, [r3, #20]
    634a:	2b02      	cmp	r3, #2
    634c:	d138      	bne.n	63c0 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    634e:	9b01      	ldr	r3, [sp, #4]
    6350:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6354:	2b01      	cmp	r3, #1
    6356:	d10f      	bne.n	6378 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6358:	f007 febc 	bl	e0d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    635c:	9b01      	ldr	r3, [sp, #4]
    635e:	685b      	ldr	r3, [r3, #4]
    6360:	6859      	ldr	r1, [r3, #4]
    6362:	9b01      	ldr	r3, [sp, #4]
    6364:	689b      	ldr	r3, [r3, #8]
    6366:	2201      	movs	r2, #1
    6368:	409a      	lsls	r2, r3
    636a:	9b01      	ldr	r3, [sp, #4]
    636c:	685b      	ldr	r3, [r3, #4]
    636e:	430a      	orrs	r2, r1
    6370:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6372:	f007 fedb 	bl	e12c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6376:	e013      	b.n	63a0 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6378:	9b01      	ldr	r3, [sp, #4]
    637a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    637e:	2b00      	cmp	r3, #0
    6380:	d10e      	bne.n	63a0 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6382:	f007 fef9 	bl	e178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6386:	9b01      	ldr	r3, [sp, #4]
    6388:	685b      	ldr	r3, [r3, #4]
    638a:	6899      	ldr	r1, [r3, #8]
    638c:	9b01      	ldr	r3, [sp, #4]
    638e:	689b      	ldr	r3, [r3, #8]
    6390:	2201      	movs	r2, #1
    6392:	409a      	lsls	r2, r3
    6394:	9b01      	ldr	r3, [sp, #4]
    6396:	685b      	ldr	r3, [r3, #4]
    6398:	430a      	orrs	r2, r1
    639a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    639c:	f007 ff18 	bl	e1d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    63a0:	f007 ff3c 	bl	e21c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    63a4:	9b01      	ldr	r3, [sp, #4]
    63a6:	685b      	ldr	r3, [r3, #4]
    63a8:	6959      	ldr	r1, [r3, #20]
    63aa:	9b01      	ldr	r3, [sp, #4]
    63ac:	689b      	ldr	r3, [r3, #8]
    63ae:	2201      	movs	r2, #1
    63b0:	409a      	lsls	r2, r3
    63b2:	9b01      	ldr	r3, [sp, #4]
    63b4:	685b      	ldr	r3, [r3, #4]
    63b6:	430a      	orrs	r2, r1
    63b8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    63ba:	f007 ff5b 	bl	e274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    63be:	e030      	b.n	6422 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    63c0:	f007 ff2c 	bl	e21c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    63c4:	9b01      	ldr	r3, [sp, #4]
    63c6:	685b      	ldr	r3, [r3, #4]
    63c8:	6959      	ldr	r1, [r3, #20]
    63ca:	9b01      	ldr	r3, [sp, #4]
    63cc:	689b      	ldr	r3, [r3, #8]
    63ce:	2201      	movs	r2, #1
    63d0:	fa02 f303 	lsl.w	r3, r2, r3
    63d4:	43da      	mvns	r2, r3
    63d6:	9b01      	ldr	r3, [sp, #4]
    63d8:	685b      	ldr	r3, [r3, #4]
    63da:	400a      	ands	r2, r1
    63dc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    63de:	f007 ff49 	bl	e274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    63e2:	f007 ff6d 	bl	e2c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	685b      	ldr	r3, [r3, #4]
    63ea:	6999      	ldr	r1, [r3, #24]
    63ec:	9b01      	ldr	r3, [sp, #4]
    63ee:	689b      	ldr	r3, [r3, #8]
    63f0:	2201      	movs	r2, #1
    63f2:	fa02 f303 	lsl.w	r3, r2, r3
    63f6:	43da      	mvns	r2, r3
    63f8:	9b01      	ldr	r3, [sp, #4]
    63fa:	685b      	ldr	r3, [r3, #4]
    63fc:	400a      	ands	r2, r1
    63fe:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6400:	9b01      	ldr	r3, [sp, #4]
    6402:	695b      	ldr	r3, [r3, #20]
    6404:	2b03      	cmp	r3, #3
    6406:	d10a      	bne.n	641e <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6408:	9b01      	ldr	r3, [sp, #4]
    640a:	685b      	ldr	r3, [r3, #4]
    640c:	6999      	ldr	r1, [r3, #24]
    640e:	9b01      	ldr	r3, [sp, #4]
    6410:	689b      	ldr	r3, [r3, #8]
    6412:	2201      	movs	r2, #1
    6414:	409a      	lsls	r2, r3
    6416:	9b01      	ldr	r3, [sp, #4]
    6418:	685b      	ldr	r3, [r3, #4]
    641a:	430a      	orrs	r2, r1
    641c:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    641e:	f007 ff7b 	bl	e318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6422:	9b01      	ldr	r3, [sp, #4]
    6424:	681b      	ldr	r3, [r3, #0]
    6426:	9a01      	ldr	r2, [sp, #4]
    6428:	6892      	ldr	r2, [r2, #8]
    642a:	9905      	ldr	r1, [sp, #20]
    642c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6430:	bf00      	nop
    6432:	b007      	add	sp, #28
    6434:	f85d fb04 	ldr.w	pc, [sp], #4

00006438 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6438:	b500      	push	{lr}
    643a:	b085      	sub	sp, #20
    643c:	9001      	str	r0, [sp, #4]
    643e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6440:	2300      	movs	r3, #0
    6442:	9303      	str	r3, [sp, #12]
    6444:	e00d      	b.n	6462 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6446:	9a03      	ldr	r2, [sp, #12]
    6448:	4613      	mov	r3, r2
    644a:	009b      	lsls	r3, r3, #2
    644c:	4413      	add	r3, r2
    644e:	00db      	lsls	r3, r3, #3
    6450:	461a      	mov	r2, r3
    6452:	9b00      	ldr	r3, [sp, #0]
    6454:	4413      	add	r3, r2
    6456:	4618      	mov	r0, r3
    6458:	f7ff ff06 	bl	6268 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    645c:	9b03      	ldr	r3, [sp, #12]
    645e:	3301      	adds	r3, #1
    6460:	9303      	str	r3, [sp, #12]
    6462:	9a03      	ldr	r2, [sp, #12]
    6464:	9b01      	ldr	r3, [sp, #4]
    6466:	429a      	cmp	r2, r3
    6468:	d3ed      	bcc.n	6446 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    646a:	2300      	movs	r3, #0
}
    646c:	4618      	mov	r0, r3
    646e:	b005      	add	sp, #20
    6470:	f85d fb04 	ldr.w	pc, [sp], #4

00006474 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6474:	b500      	push	{lr}
    6476:	b087      	sub	sp, #28
    6478:	9003      	str	r0, [sp, #12]
    647a:	9102      	str	r1, [sp, #8]
    647c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    647e:	9a01      	ldr	r2, [sp, #4]
    6480:	9902      	ldr	r1, [sp, #8]
    6482:	9803      	ldr	r0, [sp, #12]
    6484:	f7ff febc 	bl	6200 <Port_Ci_Port_Ip_ConfigureInterleave>
    6488:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    648a:	f007 ffbd 	bl	e408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    648e:	9b03      	ldr	r3, [sp, #12]
    6490:	9a02      	ldr	r2, [sp, #8]
    6492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6496:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6498:	9b04      	ldr	r3, [sp, #16]
    649a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    649e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    64a0:	9b05      	ldr	r3, [sp, #20]
    64a2:	021b      	lsls	r3, r3, #8
    64a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    64a8:	9a04      	ldr	r2, [sp, #16]
    64aa:	4313      	orrs	r3, r2
    64ac:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    64ae:	9b03      	ldr	r3, [sp, #12]
    64b0:	9a02      	ldr	r2, [sp, #8]
    64b2:	9904      	ldr	r1, [sp, #16]
    64b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    64b8:	f007 ffd2 	bl	e460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    64bc:	bf00      	nop
    64be:	b007      	add	sp, #28
    64c0:	f85d fb04 	ldr.w	pc, [sp], #4

000064c4 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    64c4:	b500      	push	{lr}
    64c6:	b083      	sub	sp, #12
    64c8:	9001      	str	r0, [sp, #4]
    64ca:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    64cc:	f007 ffee 	bl	e4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    64d0:	9b01      	ldr	r3, [sp, #4]
    64d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    64d6:	2101      	movs	r1, #1
    64d8:	9b00      	ldr	r3, [sp, #0]
    64da:	fa01 f303 	lsl.w	r3, r1, r3
    64de:	431a      	orrs	r2, r3
    64e0:	9b01      	ldr	r3, [sp, #4]
    64e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    64e6:	f008 f80d 	bl	e504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    64ea:	bf00      	nop
    64ec:	b003      	add	sp, #12
    64ee:	f85d fb04 	ldr.w	pc, [sp], #4

000064f2 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    64f2:	b500      	push	{lr}
    64f4:	b083      	sub	sp, #12
    64f6:	9001      	str	r0, [sp, #4]
    64f8:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    64fa:	f008 f829 	bl	e550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    64fe:	9b01      	ldr	r3, [sp, #4]
    6500:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6504:	2101      	movs	r1, #1
    6506:	9b00      	ldr	r3, [sp, #0]
    6508:	fa01 f303 	lsl.w	r3, r1, r3
    650c:	43db      	mvns	r3, r3
    650e:	401a      	ands	r2, r3
    6510:	9b01      	ldr	r3, [sp, #4]
    6512:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6516:	f008 f847 	bl	e5a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    651a:	bf00      	nop
    651c:	b003      	add	sp, #12
    651e:	f85d fb04 	ldr.w	pc, [sp], #4

00006522 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6522:	b082      	sub	sp, #8
    6524:	9001      	str	r0, [sp, #4]
    6526:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6528:	9b00      	ldr	r3, [sp, #0]
    652a:	785b      	ldrb	r3, [r3, #1]
    652c:	f003 0201 	and.w	r2, r3, #1
    6530:	9b01      	ldr	r3, [sp, #4]
    6532:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6536:	9b00      	ldr	r3, [sp, #0]
    6538:	789b      	ldrb	r3, [r3, #2]
    653a:	f003 021f 	and.w	r2, r3, #31
    653e:	9b01      	ldr	r3, [sp, #4]
    6540:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6544:	bf00      	nop
    6546:	b002      	add	sp, #8
    6548:	4770      	bx	lr

0000654a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    654a:	b086      	sub	sp, #24
    654c:	9003      	str	r0, [sp, #12]
    654e:	9301      	str	r3, [sp, #4]
    6550:	460b      	mov	r3, r1
    6552:	f8ad 300a 	strh.w	r3, [sp, #10]
    6556:	4613      	mov	r3, r2
    6558:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    655c:	2300      	movs	r3, #0
    655e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6562:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6566:	f043 0301 	orr.w	r3, r3, #1
    656a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    656e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6572:	f043 0302 	orr.w	r3, r3, #2
    6576:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    657a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    657e:	f043 0310 	orr.w	r3, r3, #16
    6582:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6586:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    658a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    658e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6592:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6596:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    659a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    659e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    65a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    65aa:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    65ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    65b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    65b6:	4013      	ands	r3, r2
    65b8:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    65bc:	9b01      	ldr	r3, [sp, #4]
    65be:	2b00      	cmp	r3, #0
    65c0:	d003      	beq.n	65ca <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	2b01      	cmp	r3, #1
    65c6:	d00a      	beq.n	65de <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    65c8:	e013      	b.n	65f2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    65ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    65ce:	041a      	lsls	r2, r3, #16
    65d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65d4:	431a      	orrs	r2, r3
    65d6:	9b03      	ldr	r3, [sp, #12]
    65d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    65dc:	e009      	b.n	65f2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    65de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    65e2:	041a      	lsls	r2, r3, #16
    65e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65e8:	431a      	orrs	r2, r3
    65ea:	9b03      	ldr	r3, [sp, #12]
    65ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    65f0:	bf00      	nop
    }
}
    65f2:	bf00      	nop
    65f4:	b006      	add	sp, #24
    65f6:	4770      	bx	lr

000065f8 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    65f8:	b500      	push	{lr}
    65fa:	b087      	sub	sp, #28
    65fc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    65fe:	9b01      	ldr	r3, [sp, #4]
    6600:	885b      	ldrh	r3, [r3, #2]
    6602:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6606:	9b01      	ldr	r3, [sp, #4]
    6608:	689b      	ldr	r3, [r3, #8]
    660a:	7a1b      	ldrb	r3, [r3, #8]
    660c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6610:	9b01      	ldr	r3, [sp, #4]
    6612:	689b      	ldr	r3, [r3, #8]
    6614:	681b      	ldr	r3, [r3, #0]
    6616:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6618:	9b01      	ldr	r3, [sp, #4]
    661a:	689b      	ldr	r3, [r3, #8]
    661c:	685b      	ldr	r3, [r3, #4]
    661e:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6620:	2300      	movs	r3, #0
    6622:	f8ad 3016 	strh.w	r3, [sp, #22]
    6626:	e111      	b.n	684c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6628:	9b02      	ldr	r3, [sp, #8]
    662a:	2b02      	cmp	r3, #2
    662c:	d169      	bne.n	6702 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    662e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6632:	2b01      	cmp	r3, #1
    6634:	d11a      	bne.n	666c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	685a      	ldr	r2, [r3, #4]
    663a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    663e:	005b      	lsls	r3, r3, #1
    6640:	4413      	add	r3, r2
    6642:	881b      	ldrh	r3, [r3, #0]
    6644:	f003 021f 	and.w	r2, r3, #31
    6648:	9b01      	ldr	r3, [sp, #4]
    664a:	6859      	ldr	r1, [r3, #4]
    664c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6650:	005b      	lsls	r3, r3, #1
    6652:	440b      	add	r3, r1
    6654:	881b      	ldrh	r3, [r3, #0]
    6656:	095b      	lsrs	r3, r3, #5
    6658:	b29b      	uxth	r3, r3
    665a:	4619      	mov	r1, r3
    665c:	4b81      	ldr	r3, [pc, #516]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    665e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6662:	2101      	movs	r1, #1
    6664:	fa01 f202 	lsl.w	r2, r1, r2
    6668:	605a      	str	r2, [r3, #4]
    666a:	e01d      	b.n	66a8 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    666c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6670:	2b00      	cmp	r3, #0
    6672:	d119      	bne.n	66a8 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6674:	9b01      	ldr	r3, [sp, #4]
    6676:	685a      	ldr	r2, [r3, #4]
    6678:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    667c:	005b      	lsls	r3, r3, #1
    667e:	4413      	add	r3, r2
    6680:	881b      	ldrh	r3, [r3, #0]
    6682:	f003 021f 	and.w	r2, r3, #31
    6686:	9b01      	ldr	r3, [sp, #4]
    6688:	6859      	ldr	r1, [r3, #4]
    668a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    668e:	005b      	lsls	r3, r3, #1
    6690:	440b      	add	r3, r1
    6692:	881b      	ldrh	r3, [r3, #0]
    6694:	095b      	lsrs	r3, r3, #5
    6696:	b29b      	uxth	r3, r3
    6698:	4619      	mov	r1, r3
    669a:	4b72      	ldr	r3, [pc, #456]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    669c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    66a0:	2101      	movs	r1, #1
    66a2:	fa01 f202 	lsl.w	r2, r1, r2
    66a6:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    66a8:	f007 ffa4 	bl	e5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    66ac:	9b01      	ldr	r3, [sp, #4]
    66ae:	685a      	ldr	r2, [r3, #4]
    66b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66b4:	005b      	lsls	r3, r3, #1
    66b6:	4413      	add	r3, r2
    66b8:	881b      	ldrh	r3, [r3, #0]
    66ba:	095b      	lsrs	r3, r3, #5
    66bc:	b29b      	uxth	r3, r3
    66be:	461a      	mov	r2, r3
    66c0:	4b68      	ldr	r3, [pc, #416]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    66c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66c6:	6959      	ldr	r1, [r3, #20]
    66c8:	9b01      	ldr	r3, [sp, #4]
    66ca:	685a      	ldr	r2, [r3, #4]
    66cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66d0:	005b      	lsls	r3, r3, #1
    66d2:	4413      	add	r3, r2
    66d4:	881b      	ldrh	r3, [r3, #0]
    66d6:	f003 031f 	and.w	r3, r3, #31
    66da:	2201      	movs	r2, #1
    66dc:	409a      	lsls	r2, r3
    66de:	9b01      	ldr	r3, [sp, #4]
    66e0:	6858      	ldr	r0, [r3, #4]
    66e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66e6:	005b      	lsls	r3, r3, #1
    66e8:	4403      	add	r3, r0
    66ea:	881b      	ldrh	r3, [r3, #0]
    66ec:	095b      	lsrs	r3, r3, #5
    66ee:	b29b      	uxth	r3, r3
    66f0:	4618      	mov	r0, r3
    66f2:	4b5c      	ldr	r3, [pc, #368]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    66f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    66f8:	430a      	orrs	r2, r1
    66fa:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    66fc:	f007 ffa6 	bl	e64c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6700:	e086      	b.n	6810 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6702:	f007 ff77 	bl	e5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	685a      	ldr	r2, [r3, #4]
    670a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    670e:	005b      	lsls	r3, r3, #1
    6710:	4413      	add	r3, r2
    6712:	881b      	ldrh	r3, [r3, #0]
    6714:	095b      	lsrs	r3, r3, #5
    6716:	b29b      	uxth	r3, r3
    6718:	461a      	mov	r2, r3
    671a:	4b52      	ldr	r3, [pc, #328]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    671c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6720:	6959      	ldr	r1, [r3, #20]
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	685a      	ldr	r2, [r3, #4]
    6726:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    672a:	005b      	lsls	r3, r3, #1
    672c:	4413      	add	r3, r2
    672e:	881b      	ldrh	r3, [r3, #0]
    6730:	f003 031f 	and.w	r3, r3, #31
    6734:	2201      	movs	r2, #1
    6736:	fa02 f303 	lsl.w	r3, r2, r3
    673a:	43da      	mvns	r2, r3
    673c:	9b01      	ldr	r3, [sp, #4]
    673e:	6858      	ldr	r0, [r3, #4]
    6740:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6744:	005b      	lsls	r3, r3, #1
    6746:	4403      	add	r3, r0
    6748:	881b      	ldrh	r3, [r3, #0]
    674a:	095b      	lsrs	r3, r3, #5
    674c:	b29b      	uxth	r3, r3
    674e:	4618      	mov	r0, r3
    6750:	4b44      	ldr	r3, [pc, #272]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    6752:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6756:	400a      	ands	r2, r1
    6758:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    675a:	f007 ff77 	bl	e64c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    675e:	f007 ff9b 	bl	e698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6762:	9b01      	ldr	r3, [sp, #4]
    6764:	685a      	ldr	r2, [r3, #4]
    6766:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    676a:	005b      	lsls	r3, r3, #1
    676c:	4413      	add	r3, r2
    676e:	881b      	ldrh	r3, [r3, #0]
    6770:	095b      	lsrs	r3, r3, #5
    6772:	b29b      	uxth	r3, r3
    6774:	461a      	mov	r2, r3
    6776:	4b3b      	ldr	r3, [pc, #236]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    6778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    677c:	6999      	ldr	r1, [r3, #24]
    677e:	9b01      	ldr	r3, [sp, #4]
    6780:	685a      	ldr	r2, [r3, #4]
    6782:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6786:	005b      	lsls	r3, r3, #1
    6788:	4413      	add	r3, r2
    678a:	881b      	ldrh	r3, [r3, #0]
    678c:	f003 031f 	and.w	r3, r3, #31
    6790:	2201      	movs	r2, #1
    6792:	fa02 f303 	lsl.w	r3, r2, r3
    6796:	43da      	mvns	r2, r3
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	6858      	ldr	r0, [r3, #4]
    679c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67a0:	005b      	lsls	r3, r3, #1
    67a2:	4403      	add	r3, r0
    67a4:	881b      	ldrh	r3, [r3, #0]
    67a6:	095b      	lsrs	r3, r3, #5
    67a8:	b29b      	uxth	r3, r3
    67aa:	4618      	mov	r0, r3
    67ac:	4b2d      	ldr	r3, [pc, #180]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    67ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67b2:	400a      	ands	r2, r1
    67b4:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    67b6:	9b02      	ldr	r3, [sp, #8]
    67b8:	2b03      	cmp	r3, #3
    67ba:	d127      	bne.n	680c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    67bc:	9b01      	ldr	r3, [sp, #4]
    67be:	685a      	ldr	r2, [r3, #4]
    67c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67c4:	005b      	lsls	r3, r3, #1
    67c6:	4413      	add	r3, r2
    67c8:	881b      	ldrh	r3, [r3, #0]
    67ca:	095b      	lsrs	r3, r3, #5
    67cc:	b29b      	uxth	r3, r3
    67ce:	461a      	mov	r2, r3
    67d0:	4b24      	ldr	r3, [pc, #144]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    67d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67d6:	6999      	ldr	r1, [r3, #24]
    67d8:	9b01      	ldr	r3, [sp, #4]
    67da:	685a      	ldr	r2, [r3, #4]
    67dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67e0:	005b      	lsls	r3, r3, #1
    67e2:	4413      	add	r3, r2
    67e4:	881b      	ldrh	r3, [r3, #0]
    67e6:	f003 031f 	and.w	r3, r3, #31
    67ea:	2201      	movs	r2, #1
    67ec:	409a      	lsls	r2, r3
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	6858      	ldr	r0, [r3, #4]
    67f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67f6:	005b      	lsls	r3, r3, #1
    67f8:	4403      	add	r3, r0
    67fa:	881b      	ldrh	r3, [r3, #0]
    67fc:	095b      	lsrs	r3, r3, #5
    67fe:	b29b      	uxth	r3, r3
    6800:	4618      	mov	r0, r3
    6802:	4b18      	ldr	r3, [pc, #96]	; (6864 <Port_Ipw_Init_UnusedPins+0x26c>)
    6804:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6808:	430a      	orrs	r2, r1
    680a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    680c:	f007 ff70 	bl	e6f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	685a      	ldr	r2, [r3, #4]
    6814:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6818:	005b      	lsls	r3, r3, #1
    681a:	4413      	add	r3, r2
    681c:	881b      	ldrh	r3, [r3, #0]
    681e:	095b      	lsrs	r3, r3, #5
    6820:	b29b      	uxth	r3, r3
    6822:	461a      	mov	r2, r3
    6824:	4b10      	ldr	r3, [pc, #64]	; (6868 <Port_Ipw_Init_UnusedPins+0x270>)
    6826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    682a:	9a01      	ldr	r2, [sp, #4]
    682c:	6851      	ldr	r1, [r2, #4]
    682e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6832:	0052      	lsls	r2, r2, #1
    6834:	440a      	add	r2, r1
    6836:	8812      	ldrh	r2, [r2, #0]
    6838:	f002 021f 	and.w	r2, r2, #31
    683c:	9903      	ldr	r1, [sp, #12]
    683e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6842:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6846:	3301      	adds	r3, #1
    6848:	f8ad 3016 	strh.w	r3, [sp, #22]
    684c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6850:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6854:	429a      	cmp	r2, r3
    6856:	f4ff aee7 	bcc.w	6628 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    685a:	bf00      	nop
    685c:	bf00      	nop
    685e:	b007      	add	sp, #28
    6860:	f85d fb04 	ldr.w	pc, [sp], #4
    6864:	0000fca0 	.word	0x0000fca0
    6868:	0000fc8c 	.word	0x0000fc8c

0000686c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    686c:	b500      	push	{lr}
    686e:	b085      	sub	sp, #20
    6870:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6872:	9b01      	ldr	r3, [sp, #4]
    6874:	7c1b      	ldrb	r3, [r3, #16]
    6876:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    687a:	2300      	movs	r3, #0
    687c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6880:	e035      	b.n	68ee <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6882:	9b01      	ldr	r3, [sp, #4]
    6884:	695a      	ldr	r2, [r3, #20]
    6886:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    688a:	00db      	lsls	r3, r3, #3
    688c:	4413      	add	r3, r2
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6894:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6898:	4a1f      	ldr	r2, [pc, #124]	; (6918 <Port_Ipw_Init+0xac>)
    689a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    689e:	9b01      	ldr	r3, [sp, #4]
    68a0:	695a      	ldr	r2, [r3, #20]
    68a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68a6:	00db      	lsls	r3, r3, #3
    68a8:	4413      	add	r3, r2
    68aa:	4619      	mov	r1, r3
    68ac:	f7ff fe39 	bl	6522 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    68b0:	f008 f88c 	bl	e9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    68b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    68b8:	4a17      	ldr	r2, [pc, #92]	; (6918 <Port_Ipw_Init+0xac>)
    68ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    68c2:	9b01      	ldr	r3, [sp, #4]
    68c4:	695a      	ldr	r2, [r3, #20]
    68c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68ca:	00db      	lsls	r3, r3, #3
    68cc:	4413      	add	r3, r2
    68ce:	685a      	ldr	r2, [r3, #4]
    68d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    68d4:	4810      	ldr	r0, [pc, #64]	; (6918 <Port_Ipw_Init+0xac>)
    68d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    68da:	430a      	orrs	r2, r1
    68dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    68e0:	f008 f8a0 	bl	ea24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    68e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68e8:	3301      	adds	r3, #1
    68ea:	f8ad 300e 	strh.w	r3, [sp, #14]
    68ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
    68f2:	b29b      	uxth	r3, r3
    68f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68f8:	429a      	cmp	r2, r3
    68fa:	d3c2      	bcc.n	6882 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    68fc:	9b01      	ldr	r3, [sp, #4]
    68fe:	6a1b      	ldr	r3, [r3, #32]
    6900:	4619      	mov	r1, r3
    6902:	2010      	movs	r0, #16
    6904:	f7ff fd98 	bl	6438 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6908:	9801      	ldr	r0, [sp, #4]
    690a:	f7ff fe75 	bl	65f8 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    690e:	bf00      	nop
    6910:	b005      	add	sp, #20
    6912:	f85d fb04 	ldr.w	pc, [sp], #4
    6916:	bf00      	nop
    6918:	0000fc8c 	.word	0x0000fc8c

0000691c <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    691c:	b500      	push	{lr}
    691e:	b085      	sub	sp, #20
    6920:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6922:	9b01      	ldr	r3, [sp, #4]
    6924:	881b      	ldrh	r3, [r3, #0]
    6926:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    692a:	2300      	movs	r3, #0
    692c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6930:	e0d2      	b.n	6ad8 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6932:	9b01      	ldr	r3, [sp, #4]
    6934:	68d9      	ldr	r1, [r3, #12]
    6936:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    693a:	4613      	mov	r3, r2
    693c:	009b      	lsls	r3, r3, #2
    693e:	4413      	add	r3, r2
    6940:	009b      	lsls	r3, r3, #2
    6942:	440b      	add	r3, r1
    6944:	7c5b      	ldrb	r3, [r3, #17]
    6946:	f083 0301 	eor.w	r3, r3, #1
    694a:	b2db      	uxtb	r3, r3
    694c:	2b00      	cmp	r3, #0
    694e:	f000 80be 	beq.w	6ace <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6952:	9b01      	ldr	r3, [sp, #4]
    6954:	68d9      	ldr	r1, [r3, #12]
    6956:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    695a:	4613      	mov	r3, r2
    695c:	009b      	lsls	r3, r3, #2
    695e:	4413      	add	r3, r2
    6960:	009b      	lsls	r3, r3, #2
    6962:	440b      	add	r3, r1
    6964:	7c1b      	ldrb	r3, [r3, #16]
    6966:	2b00      	cmp	r3, #0
    6968:	f000 80b1 	beq.w	6ace <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    696c:	9b01      	ldr	r3, [sp, #4]
    696e:	68d9      	ldr	r1, [r3, #12]
    6970:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6974:	4613      	mov	r3, r2
    6976:	009b      	lsls	r3, r3, #2
    6978:	4413      	add	r3, r2
    697a:	009b      	lsls	r3, r3, #2
    697c:	440b      	add	r3, r1
    697e:	881b      	ldrh	r3, [r3, #0]
    6980:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6984:	9b01      	ldr	r3, [sp, #4]
    6986:	68d9      	ldr	r1, [r3, #12]
    6988:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    698c:	4613      	mov	r3, r2
    698e:	009b      	lsls	r3, r3, #2
    6990:	4413      	add	r3, r2
    6992:	009b      	lsls	r3, r3, #2
    6994:	440b      	add	r3, r1
    6996:	68db      	ldr	r3, [r3, #12]
    6998:	2b02      	cmp	r3, #2
    699a:	d11d      	bne.n	69d8 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    699c:	f008 f95e 	bl	ec5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    69a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69a4:	095b      	lsrs	r3, r3, #5
    69a6:	b29b      	uxth	r3, r3
    69a8:	461a      	mov	r2, r3
    69aa:	4b51      	ldr	r3, [pc, #324]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    69ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    69b0:	6959      	ldr	r1, [r3, #20]
    69b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69b6:	f003 031f 	and.w	r3, r3, #31
    69ba:	2201      	movs	r2, #1
    69bc:	409a      	lsls	r2, r3
    69be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69c2:	095b      	lsrs	r3, r3, #5
    69c4:	b29b      	uxth	r3, r3
    69c6:	4618      	mov	r0, r3
    69c8:	4b49      	ldr	r3, [pc, #292]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    69ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    69ce:	430a      	orrs	r2, r1
    69d0:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    69d2:	f008 f96f 	bl	ecb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    69d6:	e07a      	b.n	6ace <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    69d8:	9b01      	ldr	r3, [sp, #4]
    69da:	68d9      	ldr	r1, [r3, #12]
    69dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    69e0:	4613      	mov	r3, r2
    69e2:	009b      	lsls	r3, r3, #2
    69e4:	4413      	add	r3, r2
    69e6:	009b      	lsls	r3, r3, #2
    69e8:	440b      	add	r3, r1
    69ea:	68db      	ldr	r3, [r3, #12]
    69ec:	2b01      	cmp	r3, #1
    69ee:	d00b      	beq.n	6a08 <Port_Ipw_RefreshPortDirection+0xec>
    69f0:	9b01      	ldr	r3, [sp, #4]
    69f2:	68d9      	ldr	r1, [r3, #12]
    69f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    69f8:	4613      	mov	r3, r2
    69fa:	009b      	lsls	r3, r3, #2
    69fc:	4413      	add	r3, r2
    69fe:	009b      	lsls	r3, r3, #2
    6a00:	440b      	add	r3, r1
    6a02:	68db      	ldr	r3, [r3, #12]
    6a04:	2b03      	cmp	r3, #3
    6a06:	d162      	bne.n	6ace <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6a08:	f008 f928 	bl	ec5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6a0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a10:	095b      	lsrs	r3, r3, #5
    6a12:	b29b      	uxth	r3, r3
    6a14:	461a      	mov	r2, r3
    6a16:	4b36      	ldr	r3, [pc, #216]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a1c:	6959      	ldr	r1, [r3, #20]
    6a1e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a22:	f003 031f 	and.w	r3, r3, #31
    6a26:	2201      	movs	r2, #1
    6a28:	fa02 f303 	lsl.w	r3, r2, r3
    6a2c:	43da      	mvns	r2, r3
    6a2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a32:	095b      	lsrs	r3, r3, #5
    6a34:	b29b      	uxth	r3, r3
    6a36:	4618      	mov	r0, r3
    6a38:	4b2d      	ldr	r3, [pc, #180]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6a3e:	400a      	ands	r2, r1
    6a40:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6a42:	f008 f937 	bl	ecb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6a46:	f008 f95b 	bl	ed00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6a4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a4e:	095b      	lsrs	r3, r3, #5
    6a50:	b29b      	uxth	r3, r3
    6a52:	461a      	mov	r2, r3
    6a54:	4b26      	ldr	r3, [pc, #152]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a5a:	6999      	ldr	r1, [r3, #24]
    6a5c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a60:	f003 031f 	and.w	r3, r3, #31
    6a64:	2201      	movs	r2, #1
    6a66:	fa02 f303 	lsl.w	r3, r2, r3
    6a6a:	43da      	mvns	r2, r3
    6a6c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a70:	095b      	lsrs	r3, r3, #5
    6a72:	b29b      	uxth	r3, r3
    6a74:	4618      	mov	r0, r3
    6a76:	4b1e      	ldr	r3, [pc, #120]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6a7c:	400a      	ands	r2, r1
    6a7e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6a80:	9b01      	ldr	r3, [sp, #4]
    6a82:	68d9      	ldr	r1, [r3, #12]
    6a84:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6a88:	4613      	mov	r3, r2
    6a8a:	009b      	lsls	r3, r3, #2
    6a8c:	4413      	add	r3, r2
    6a8e:	009b      	lsls	r3, r3, #2
    6a90:	440b      	add	r3, r1
    6a92:	68db      	ldr	r3, [r3, #12]
    6a94:	2b03      	cmp	r3, #3
    6a96:	d118      	bne.n	6aca <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6a98:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a9c:	095b      	lsrs	r3, r3, #5
    6a9e:	b29b      	uxth	r3, r3
    6aa0:	461a      	mov	r2, r3
    6aa2:	4b13      	ldr	r3, [pc, #76]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6aa8:	6999      	ldr	r1, [r3, #24]
    6aaa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6aae:	f003 031f 	and.w	r3, r3, #31
    6ab2:	2201      	movs	r2, #1
    6ab4:	409a      	lsls	r2, r3
    6ab6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6aba:	095b      	lsrs	r3, r3, #5
    6abc:	b29b      	uxth	r3, r3
    6abe:	4618      	mov	r0, r3
    6ac0:	4b0b      	ldr	r3, [pc, #44]	; (6af0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ac2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ac6:	430a      	orrs	r2, r1
    6ac8:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6aca:	f008 f945 	bl	ed58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6ace:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6ad2:	3301      	adds	r3, #1
    6ad4:	f8ad 300e 	strh.w	r3, [sp, #14]
    6ad8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6adc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6ae0:	429a      	cmp	r2, r3
    6ae2:	f4ff af26 	bcc.w	6932 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6ae6:	bf00      	nop
    6ae8:	bf00      	nop
    6aea:	b005      	add	sp, #20
    6aec:	f85d fb04 	ldr.w	pc, [sp], #4
    6af0:	0000fca0 	.word	0x0000fca0

00006af4 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6af4:	b500      	push	{lr}
    6af6:	b085      	sub	sp, #20
    6af8:	4603      	mov	r3, r0
    6afa:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6afe:	2300      	movs	r3, #0
    6b00:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6b04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b08:	4618      	mov	r0, r3
    6b0a:	f000 f871 	bl	6bf0 <Dio_Ipw_ReadChannel>
    6b0e:	4603      	mov	r3, r0
    6b10:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6b14:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b18:	4618      	mov	r0, r3
    6b1a:	b005      	add	sp, #20
    6b1c:	f85d fb04 	ldr.w	pc, [sp], #4

00006b20 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6b20:	b500      	push	{lr}
    6b22:	b083      	sub	sp, #12
    6b24:	4603      	mov	r3, r0
    6b26:	460a      	mov	r2, r1
    6b28:	f8ad 3006 	strh.w	r3, [sp, #6]
    6b2c:	4613      	mov	r3, r2
    6b2e:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    6b32:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6b36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b3a:	4611      	mov	r1, r2
    6b3c:	4618      	mov	r0, r3
    6b3e:	f000 f87d 	bl	6c3c <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6b42:	bf00      	nop
    6b44:	b003      	add	sp, #12
    6b46:	f85d fb04 	ldr.w	pc, [sp], #4

00006b4a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6b4a:	b500      	push	{lr}
    6b4c:	b085      	sub	sp, #20
    6b4e:	4603      	mov	r3, r0
    6b50:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6b54:	2300      	movs	r3, #0
    6b56:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6b5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b5e:	4618      	mov	r0, r3
    6b60:	f000 f892 	bl	6c88 <Dio_Ipw_FlipChannel>
    6b64:	4603      	mov	r3, r0
    6b66:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6b6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b6e:	4618      	mov	r0, r3
    6b70:	b005      	add	sp, #20
    6b72:	f85d fb04 	ldr.w	pc, [sp], #4

00006b76 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6b76:	b500      	push	{lr}
    6b78:	b085      	sub	sp, #20
    6b7a:	4603      	mov	r3, r0
    6b7c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6b80:	2300      	movs	r3, #0
    6b82:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6b84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b88:	4618      	mov	r0, r3
    6b8a:	f000 f8b3 	bl	6cf4 <Dio_Ipw_ReadPort>
    6b8e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6b90:	9b03      	ldr	r3, [sp, #12]
}
    6b92:	4618      	mov	r0, r3
    6b94:	b005      	add	sp, #20
    6b96:	f85d fb04 	ldr.w	pc, [sp], #4

00006b9a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6b9a:	b500      	push	{lr}
    6b9c:	b083      	sub	sp, #12
    6b9e:	4603      	mov	r3, r0
    6ba0:	9100      	str	r1, [sp, #0]
    6ba2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6baa:	9900      	ldr	r1, [sp, #0]
    6bac:	4618      	mov	r0, r3
    6bae:	f000 f8b9 	bl	6d24 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6bb2:	bf00      	nop
    6bb4:	b003      	add	sp, #12
    6bb6:	f85d fb04 	ldr.w	pc, [sp], #4

00006bba <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6bba:	b500      	push	{lr}
    6bbc:	b085      	sub	sp, #20
    6bbe:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6bc0:	2300      	movs	r3, #0
    6bc2:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6bc4:	9801      	ldr	r0, [sp, #4]
    6bc6:	f000 f8c5 	bl	6d54 <Dio_Ipw_ReadChannelGroup>
    6bca:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6bcc:	9b03      	ldr	r3, [sp, #12]
}
    6bce:	4618      	mov	r0, r3
    6bd0:	b005      	add	sp, #20
    6bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00006bd6 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6bd6:	b500      	push	{lr}
    6bd8:	b083      	sub	sp, #12
    6bda:	9001      	str	r0, [sp, #4]
    6bdc:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6bde:	9900      	ldr	r1, [sp, #0]
    6be0:	9801      	ldr	r0, [sp, #4]
    6be2:	f000 f8d7 	bl	6d94 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    6be6:	bf00      	nop
    6be8:	b003      	add	sp, #12
    6bea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006bf0 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6bf0:	b500      	push	{lr}
    6bf2:	b087      	sub	sp, #28
    6bf4:	4603      	mov	r3, r0
    6bf6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6bfa:	2300      	movs	r3, #0
    6bfc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6c00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c04:	095b      	lsrs	r3, r3, #5
    6c06:	b29b      	uxth	r3, r3
    6c08:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6c0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c0e:	f003 031f 	and.w	r3, r3, #31
    6c12:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6c14:	4a08      	ldr	r2, [pc, #32]	; (6c38 <Dio_Ipw_ReadChannel+0x48>)
    6c16:	9b04      	ldr	r3, [sp, #16]
    6c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c1c:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6c1e:	9903      	ldr	r1, [sp, #12]
    6c20:	9802      	ldr	r0, [sp, #8]
    6c22:	f000 f940 	bl	6ea6 <Gpio_Dio_Ip_ReadPin>
    6c26:	4603      	mov	r3, r0
    6c28:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6c2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6c30:	4618      	mov	r0, r3
    6c32:	b007      	add	sp, #28
    6c34:	f85d fb04 	ldr.w	pc, [sp], #4
    6c38:	1fff8b24 	.word	0x1fff8b24

00006c3c <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6c3c:	b500      	push	{lr}
    6c3e:	b087      	sub	sp, #28
    6c40:	4603      	mov	r3, r0
    6c42:	460a      	mov	r2, r1
    6c44:	f8ad 3006 	strh.w	r3, [sp, #6]
    6c48:	4613      	mov	r3, r2
    6c4a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6c4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c52:	095b      	lsrs	r3, r3, #5
    6c54:	b29b      	uxth	r3, r3
    6c56:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6c58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c5c:	f003 031f 	and.w	r3, r3, #31
    6c60:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6c62:	4a08      	ldr	r2, [pc, #32]	; (6c84 <Dio_Ipw_WriteChannel+0x48>)
    6c64:	9b05      	ldr	r3, [sp, #20]
    6c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c6a:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6c6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6c70:	461a      	mov	r2, r3
    6c72:	9904      	ldr	r1, [sp, #16]
    6c74:	9803      	ldr	r0, [sp, #12]
    6c76:	f000 f8b7 	bl	6de8 <Gpio_Dio_Ip_WritePin>
}
    6c7a:	bf00      	nop
    6c7c:	b007      	add	sp, #28
    6c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c82:	bf00      	nop
    6c84:	1fff8b24 	.word	0x1fff8b24

00006c88 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6c88:	b500      	push	{lr}
    6c8a:	b089      	sub	sp, #36	; 0x24
    6c8c:	4603      	mov	r3, r0
    6c8e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6c92:	2300      	movs	r3, #0
    6c94:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6c98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c9c:	095b      	lsrs	r3, r3, #5
    6c9e:	b29b      	uxth	r3, r3
    6ca0:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6ca2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ca6:	f003 031f 	and.w	r3, r3, #31
    6caa:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6cac:	4a10      	ldr	r2, [pc, #64]	; (6cf0 <Dio_Ipw_FlipChannel+0x68>)
    6cae:	9b06      	ldr	r3, [sp, #24]
    6cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cb4:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6cb6:	2201      	movs	r2, #1
    6cb8:	9b05      	ldr	r3, [sp, #20]
    6cba:	fa02 f303 	lsl.w	r3, r2, r3
    6cbe:	4619      	mov	r1, r3
    6cc0:	9804      	ldr	r0, [sp, #16]
    6cc2:	f000 f8dc 	bl	6e7e <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6cc6:	9804      	ldr	r0, [sp, #16]
    6cc8:	f000 f8bc 	bl	6e44 <Gpio_Dio_Ip_GetPinsOutput>
    6ccc:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6cce:	2201      	movs	r2, #1
    6cd0:	9b05      	ldr	r3, [sp, #20]
    6cd2:	409a      	lsls	r2, r3
    6cd4:	9b03      	ldr	r3, [sp, #12]
    6cd6:	401a      	ands	r2, r3
    6cd8:	9b05      	ldr	r3, [sp, #20]
    6cda:	fa22 f303 	lsr.w	r3, r2, r3
    6cde:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6ce2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6ce6:	4618      	mov	r0, r3
    6ce8:	b009      	add	sp, #36	; 0x24
    6cea:	f85d fb04 	ldr.w	pc, [sp], #4
    6cee:	bf00      	nop
    6cf0:	1fff8b24 	.word	0x1fff8b24

00006cf4 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6cf4:	b500      	push	{lr}
    6cf6:	b085      	sub	sp, #20
    6cf8:	4603      	mov	r3, r0
    6cfa:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6cfe:	2300      	movs	r3, #0
    6d00:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d06:	4a06      	ldr	r2, [pc, #24]	; (6d20 <Dio_Ipw_ReadPort+0x2c>)
    6d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d0c:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6d0e:	9802      	ldr	r0, [sp, #8]
    6d10:	f000 f8be 	bl	6e90 <Gpio_Dio_Ip_ReadPins>
    6d14:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6d16:	9b03      	ldr	r3, [sp, #12]
}
    6d18:	4618      	mov	r0, r3
    6d1a:	b005      	add	sp, #20
    6d1c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d20:	1fff8b24 	.word	0x1fff8b24

00006d24 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6d24:	b500      	push	{lr}
    6d26:	b085      	sub	sp, #20
    6d28:	4603      	mov	r3, r0
    6d2a:	9100      	str	r1, [sp, #0]
    6d2c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6d30:	9b00      	ldr	r3, [sp, #0]
    6d32:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6d34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d38:	4a05      	ldr	r2, [pc, #20]	; (6d50 <Dio_Ipw_WritePort+0x2c>)
    6d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d3e:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6d40:	9903      	ldr	r1, [sp, #12]
    6d42:	9802      	ldr	r0, [sp, #8]
    6d44:	f000 f875 	bl	6e32 <Gpio_Dio_Ip_WritePins>
}
    6d48:	bf00      	nop
    6d4a:	b005      	add	sp, #20
    6d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d50:	1fff8b24 	.word	0x1fff8b24

00006d54 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6d54:	b500      	push	{lr}
    6d56:	b087      	sub	sp, #28
    6d58:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6d5a:	2300      	movs	r3, #0
    6d5c:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6d5e:	9b01      	ldr	r3, [sp, #4]
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	461a      	mov	r2, r3
    6d64:	4b0a      	ldr	r3, [pc, #40]	; (6d90 <Dio_Ipw_ReadChannelGroup+0x3c>)
    6d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d6a:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6d6c:	9804      	ldr	r0, [sp, #16]
    6d6e:	f000 f88f 	bl	6e90 <Gpio_Dio_Ip_ReadPins>
    6d72:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6d74:	9b01      	ldr	r3, [sp, #4]
    6d76:	685a      	ldr	r2, [r3, #4]
    6d78:	9b03      	ldr	r3, [sp, #12]
    6d7a:	4013      	ands	r3, r2
    6d7c:	9a01      	ldr	r2, [sp, #4]
    6d7e:	7852      	ldrb	r2, [r2, #1]
    6d80:	40d3      	lsrs	r3, r2
    6d82:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6d84:	9b05      	ldr	r3, [sp, #20]
}
    6d86:	4618      	mov	r0, r3
    6d88:	b007      	add	sp, #28
    6d8a:	f85d fb04 	ldr.w	pc, [sp], #4
    6d8e:	bf00      	nop
    6d90:	1fff8b24 	.word	0x1fff8b24

00006d94 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6d94:	b500      	push	{lr}
    6d96:	b087      	sub	sp, #28
    6d98:	9001      	str	r0, [sp, #4]
    6d9a:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6d9c:	9b01      	ldr	r3, [sp, #4]
    6d9e:	781b      	ldrb	r3, [r3, #0]
    6da0:	461a      	mov	r2, r3
    6da2:	4b10      	ldr	r3, [pc, #64]	; (6de4 <Dio_Ipw_WriteChannelGroup+0x50>)
    6da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6da8:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6daa:	9b01      	ldr	r3, [sp, #4]
    6dac:	785b      	ldrb	r3, [r3, #1]
    6dae:	461a      	mov	r2, r3
    6db0:	9b00      	ldr	r3, [sp, #0]
    6db2:	fa03 f202 	lsl.w	r2, r3, r2
    6db6:	9b01      	ldr	r3, [sp, #4]
    6db8:	685b      	ldr	r3, [r3, #4]
    6dba:	4013      	ands	r3, r2
    6dbc:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6dbe:	9904      	ldr	r1, [sp, #16]
    6dc0:	9805      	ldr	r0, [sp, #20]
    6dc2:	f000 f84a 	bl	6e5a <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6dc6:	9b04      	ldr	r3, [sp, #16]
    6dc8:	43da      	mvns	r2, r3
    6dca:	9b01      	ldr	r3, [sp, #4]
    6dcc:	685b      	ldr	r3, [r3, #4]
    6dce:	4013      	ands	r3, r2
    6dd0:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6dd2:	9903      	ldr	r1, [sp, #12]
    6dd4:	9805      	ldr	r0, [sp, #20]
    6dd6:	f000 f849 	bl	6e6c <Gpio_Dio_Ip_ClearPins>

}
    6dda:	bf00      	nop
    6ddc:	b007      	add	sp, #28
    6dde:	f85d fb04 	ldr.w	pc, [sp], #4
    6de2:	bf00      	nop
    6de4:	1fff8b24 	.word	0x1fff8b24

00006de8 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6de8:	b500      	push	{lr}
    6dea:	b087      	sub	sp, #28
    6dec:	9003      	str	r0, [sp, #12]
    6dee:	9102      	str	r1, [sp, #8]
    6df0:	4613      	mov	r3, r2
    6df2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6df6:	f006 ff81 	bl	dcfc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6dfa:	9b03      	ldr	r3, [sp, #12]
    6dfc:	681b      	ldr	r3, [r3, #0]
    6dfe:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6e00:	2201      	movs	r2, #1
    6e02:	9b02      	ldr	r3, [sp, #8]
    6e04:	fa02 f303 	lsl.w	r3, r2, r3
    6e08:	43db      	mvns	r3, r3
    6e0a:	9a05      	ldr	r2, [sp, #20]
    6e0c:	4013      	ands	r3, r2
    6e0e:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6e10:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e14:	9b02      	ldr	r3, [sp, #8]
    6e16:	fa02 f303 	lsl.w	r3, r2, r3
    6e1a:	9a05      	ldr	r2, [sp, #20]
    6e1c:	4313      	orrs	r3, r2
    6e1e:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6e20:	9b03      	ldr	r3, [sp, #12]
    6e22:	9a05      	ldr	r2, [sp, #20]
    6e24:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6e26:	f006 ff95 	bl	dd54 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6e2a:	bf00      	nop
    6e2c:	b007      	add	sp, #28
    6e2e:	f85d fb04 	ldr.w	pc, [sp], #4

00006e32 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6e32:	b082      	sub	sp, #8
    6e34:	9001      	str	r0, [sp, #4]
    6e36:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6e38:	9b01      	ldr	r3, [sp, #4]
    6e3a:	9a00      	ldr	r2, [sp, #0]
    6e3c:	601a      	str	r2, [r3, #0]
}
    6e3e:	bf00      	nop
    6e40:	b002      	add	sp, #8
    6e42:	4770      	bx	lr

00006e44 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6e44:	b084      	sub	sp, #16
    6e46:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6e48:	2300      	movs	r3, #0
    6e4a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6e4c:	9b01      	ldr	r3, [sp, #4]
    6e4e:	681b      	ldr	r3, [r3, #0]
    6e50:	9303      	str	r3, [sp, #12]
    return returnValue;
    6e52:	9b03      	ldr	r3, [sp, #12]
}
    6e54:	4618      	mov	r0, r3
    6e56:	b004      	add	sp, #16
    6e58:	4770      	bx	lr

00006e5a <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6e5a:	b082      	sub	sp, #8
    6e5c:	9001      	str	r0, [sp, #4]
    6e5e:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6e60:	9b01      	ldr	r3, [sp, #4]
    6e62:	9a00      	ldr	r2, [sp, #0]
    6e64:	605a      	str	r2, [r3, #4]
}
    6e66:	bf00      	nop
    6e68:	b002      	add	sp, #8
    6e6a:	4770      	bx	lr

00006e6c <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6e6c:	b082      	sub	sp, #8
    6e6e:	9001      	str	r0, [sp, #4]
    6e70:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6e72:	9b01      	ldr	r3, [sp, #4]
    6e74:	9a00      	ldr	r2, [sp, #0]
    6e76:	609a      	str	r2, [r3, #8]
}
    6e78:	bf00      	nop
    6e7a:	b002      	add	sp, #8
    6e7c:	4770      	bx	lr

00006e7e <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6e7e:	b082      	sub	sp, #8
    6e80:	9001      	str	r0, [sp, #4]
    6e82:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6e84:	9b01      	ldr	r3, [sp, #4]
    6e86:	9a00      	ldr	r2, [sp, #0]
    6e88:	60da      	str	r2, [r3, #12]
}
    6e8a:	bf00      	nop
    6e8c:	b002      	add	sp, #8
    6e8e:	4770      	bx	lr

00006e90 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6e90:	b084      	sub	sp, #16
    6e92:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6e94:	2300      	movs	r3, #0
    6e96:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6e98:	9b01      	ldr	r3, [sp, #4]
    6e9a:	691b      	ldr	r3, [r3, #16]
    6e9c:	9303      	str	r3, [sp, #12]
    return returnValue;
    6e9e:	9b03      	ldr	r3, [sp, #12]
}
    6ea0:	4618      	mov	r0, r3
    6ea2:	b004      	add	sp, #16
    6ea4:	4770      	bx	lr

00006ea6 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6ea6:	b084      	sub	sp, #16
    6ea8:	9001      	str	r0, [sp, #4]
    6eaa:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6eac:	2300      	movs	r3, #0
    6eae:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6eb2:	9b01      	ldr	r3, [sp, #4]
    6eb4:	691a      	ldr	r2, [r3, #16]
    6eb6:	2101      	movs	r1, #1
    6eb8:	9b00      	ldr	r3, [sp, #0]
    6eba:	fa01 f303 	lsl.w	r3, r1, r3
    6ebe:	401a      	ands	r2, r3
    6ec0:	9b00      	ldr	r3, [sp, #0]
    6ec2:	fa22 f303 	lsr.w	r3, r2, r3
    6ec6:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6eca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6ece:	4618      	mov	r0, r3
    6ed0:	b004      	add	sp, #16
    6ed2:	4770      	bx	lr

00006ed4 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    6ed4:	b084      	sub	sp, #16
    6ed6:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6ed8:	2300      	movs	r3, #0
    6eda:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    6ede:	2300      	movs	r3, #0
    6ee0:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6ee4:	2300      	movs	r3, #0
    6ee6:	f88d 300e 	strb.w	r3, [sp, #14]
    6eea:	e01b      	b.n	6f24 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6eec:	4a12      	ldr	r2, [pc, #72]	; (6f38 <Can_IsControllersBusy+0x64>)
    6eee:	9b01      	ldr	r3, [sp, #4]
    6ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ef4:	695a      	ldr	r2, [r3, #20]
    6ef6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6efa:	009b      	lsls	r3, r3, #2
    6efc:	4413      	add	r3, r2
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d00a      	beq.n	6f1a <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    6f04:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f08:	4a0c      	ldr	r2, [pc, #48]	; (6f3c <Can_IsControllersBusy+0x68>)
    6f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d003      	beq.n	6f1a <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    6f12:	2301      	movs	r3, #1
    6f14:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    6f18:	e008      	b.n	6f2c <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6f1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f1e:	3301      	adds	r3, #1
    6f20:	f88d 300e 	strb.w	r3, [sp, #14]
    6f24:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f28:	2b00      	cmp	r3, #0
    6f2a:	d0df      	beq.n	6eec <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    6f2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f30:	4618      	mov	r0, r3
    6f32:	b004      	add	sp, #16
    6f34:	4770      	bx	lr
    6f36:	bf00      	nop
    6f38:	1fff8d10 	.word	0x1fff8d10
    6f3c:	1fff8d0c 	.word	0x1fff8d0c

00006f40 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    6f40:	b500      	push	{lr}
    6f42:	b085      	sub	sp, #20
    6f44:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6f46:	2300      	movs	r3, #0
    6f48:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    6f4c:	2300      	movs	r3, #0
    6f4e:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6f52:	2300      	movs	r3, #0
    6f54:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6f56:	2300      	movs	r3, #0
    6f58:	f88d 300e 	strb.w	r3, [sp, #14]
    6f5c:	e035      	b.n	6fca <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6f5e:	4a30      	ldr	r2, [pc, #192]	; (7020 <Can_InitControllers+0xe0>)
    6f60:	9b01      	ldr	r3, [sp, #4]
    6f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f66:	695a      	ldr	r2, [r3, #20]
    6f68:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f6c:	009b      	lsls	r3, r3, #2
    6f6e:	4413      	add	r3, r2
    6f70:	681b      	ldr	r3, [r3, #0]
    6f72:	2b00      	cmp	r3, #0
    6f74:	d024      	beq.n	6fc0 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6f76:	4a2a      	ldr	r2, [pc, #168]	; (7020 <Can_InitControllers+0xe0>)
    6f78:	9b01      	ldr	r3, [sp, #4]
    6f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f7e:	695a      	ldr	r2, [r3, #20]
    6f80:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f84:	009b      	lsls	r3, r3, #2
    6f86:	4413      	add	r3, r2
    6f88:	681b      	ldr	r3, [r3, #0]
    6f8a:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    6f8c:	9b02      	ldr	r3, [sp, #8]
    6f8e:	7a1b      	ldrb	r3, [r3, #8]
    6f90:	2b00      	cmp	r3, #0
    6f92:	d015      	beq.n	6fc0 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    6f94:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f98:	4a22      	ldr	r2, [pc, #136]	; (7024 <Can_InitControllers+0xe4>)
    6f9a:	2100      	movs	r1, #0
    6f9c:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    6f9e:	9802      	ldr	r0, [sp, #8]
    6fa0:	f001 f830 	bl	8004 <Can_43_FLEXCAN_Ipw_Init>
    6fa4:	4603      	mov	r3, r0
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d106      	bne.n	6fb8 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    6faa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fae:	4a1e      	ldr	r2, [pc, #120]	; (7028 <Can_InitControllers+0xe8>)
    6fb0:	2102      	movs	r1, #2
    6fb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    6fb6:	e003      	b.n	6fc0 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    6fb8:	2301      	movs	r3, #1
    6fba:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    6fbe:	e008      	b.n	6fd2 <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6fc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fc4:	3301      	adds	r3, #1
    6fc6:	f88d 300e 	strb.w	r3, [sp, #14]
    6fca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d0c5      	beq.n	6f5e <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    6fd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d01e      	beq.n	7018 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6fda:	2300      	movs	r3, #0
    6fdc:	f88d 300e 	strb.w	r3, [sp, #14]
    6fe0:	e016      	b.n	7010 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6fe2:	4a0f      	ldr	r2, [pc, #60]	; (7020 <Can_InitControllers+0xe0>)
    6fe4:	9b01      	ldr	r3, [sp, #4]
    6fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fea:	695a      	ldr	r2, [r3, #20]
    6fec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6ff0:	009b      	lsls	r3, r3, #2
    6ff2:	4413      	add	r3, r2
    6ff4:	681b      	ldr	r3, [r3, #0]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d005      	beq.n	7006 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    6ffa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6ffe:	4a0a      	ldr	r2, [pc, #40]	; (7028 <Can_InitControllers+0xe8>)
    7000:	2100      	movs	r1, #0
    7002:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7006:	f89d 300e 	ldrb.w	r3, [sp, #14]
    700a:	3301      	adds	r3, #1
    700c:	f88d 300e 	strb.w	r3, [sp, #14]
    7010:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7014:	2b00      	cmp	r3, #0
    7016:	d0e4      	beq.n	6fe2 <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    7018:	bf00      	nop
    701a:	b005      	add	sp, #20
    701c:	f85d fb04 	ldr.w	pc, [sp], #4
    7020:	1fff8d10 	.word	0x1fff8d10
    7024:	1fff8d08 	.word	0x1fff8d08
    7028:	1fff8d0c 	.word	0x1fff8d0c

0000702c <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    702c:	b500      	push	{lr}
    702e:	b085      	sub	sp, #20
    7030:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    7032:	2300      	movs	r3, #0
    7034:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7038:	2300      	movs	r3, #0
    703a:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    703c:	2300      	movs	r3, #0
    703e:	f88d 300f 	strb.w	r3, [sp, #15]
    7042:	e028      	b.n	7096 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    7044:	4a18      	ldr	r2, [pc, #96]	; (70a8 <Can_DeInitControllers+0x7c>)
    7046:	9b01      	ldr	r3, [sp, #4]
    7048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    704c:	695a      	ldr	r2, [r3, #20]
    704e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7052:	009b      	lsls	r3, r3, #2
    7054:	4413      	add	r3, r2
    7056:	681b      	ldr	r3, [r3, #0]
    7058:	2b00      	cmp	r3, #0
    705a:	d017      	beq.n	708c <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    705c:	4a12      	ldr	r2, [pc, #72]	; (70a8 <Can_DeInitControllers+0x7c>)
    705e:	9b01      	ldr	r3, [sp, #4]
    7060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7064:	695a      	ldr	r2, [r3, #20]
    7066:	f89d 300f 	ldrb.w	r3, [sp, #15]
    706a:	009b      	lsls	r3, r3, #2
    706c:	4413      	add	r3, r2
    706e:	681b      	ldr	r3, [r3, #0]
    7070:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    7072:	9b02      	ldr	r3, [sp, #8]
    7074:	7a1b      	ldrb	r3, [r3, #8]
    7076:	2b00      	cmp	r3, #0
    7078:	d008      	beq.n	708c <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    707a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    707e:	4a0b      	ldr	r2, [pc, #44]	; (70ac <Can_DeInitControllers+0x80>)
    7080:	2100      	movs	r1, #0
    7082:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    7086:	9802      	ldr	r0, [sp, #8]
    7088:	f001 f8cc 	bl	8224 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    708c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7090:	3301      	adds	r3, #1
    7092:	f88d 300f 	strb.w	r3, [sp, #15]
    7096:	f89d 300f 	ldrb.w	r3, [sp, #15]
    709a:	2b00      	cmp	r3, #0
    709c:	d0d2      	beq.n	7044 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    709e:	bf00      	nop
    70a0:	bf00      	nop
    70a2:	b005      	add	sp, #20
    70a4:	f85d fb04 	ldr.w	pc, [sp], #4
    70a8:	1fff8d10 	.word	0x1fff8d10
    70ac:	1fff8d0c 	.word	0x1fff8d0c

000070b0 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    70b0:	b500      	push	{lr}
    70b2:	b085      	sub	sp, #20
    70b4:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    70b6:	2300      	movs	r3, #0
    70b8:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    70ba:	2300      	movs	r3, #0
    70bc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    70c0:	2300      	movs	r3, #0
    70c2:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    70c4:	490c      	ldr	r1, [pc, #48]	; (70f8 <Can_43_FLEXCAN_Init+0x48>)
    70c6:	9b03      	ldr	r3, [sp, #12]
    70c8:	9a01      	ldr	r2, [sp, #4]
    70ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    70ce:	9803      	ldr	r0, [sp, #12]
    70d0:	f7ff ff00 	bl	6ed4 <Can_IsControllersBusy>
    70d4:	4603      	mov	r3, r0
    70d6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    70da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    70de:	f083 0301 	eor.w	r3, r3, #1
    70e2:	b2db      	uxtb	r3, r3
    70e4:	2b00      	cmp	r3, #0
    70e6:	d002      	beq.n	70ee <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    70e8:	9803      	ldr	r0, [sp, #12]
    70ea:	f7ff ff29 	bl	6f40 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    70ee:	bf00      	nop
    70f0:	b005      	add	sp, #20
    70f2:	f85d fb04 	ldr.w	pc, [sp], #4
    70f6:	bf00      	nop
    70f8:	1fff8d10 	.word	0x1fff8d10

000070fc <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    70fc:	b500      	push	{lr}
    70fe:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    7100:	2300      	movs	r3, #0
    7102:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    7106:	2300      	movs	r3, #0
    7108:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    710c:	2300      	movs	r3, #0
    710e:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    7110:	2300      	movs	r3, #0
    7112:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7114:	2300      	movs	r3, #0
    7116:	f88d 3007 	strb.w	r3, [sp, #7]
    711a:	e01b      	b.n	7154 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    711c:	4a19      	ldr	r2, [pc, #100]	; (7184 <Can_43_FLEXCAN_DeInit+0x88>)
    711e:	9b00      	ldr	r3, [sp, #0]
    7120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7124:	695a      	ldr	r2, [r3, #20]
    7126:	f89d 3007 	ldrb.w	r3, [sp, #7]
    712a:	009b      	lsls	r3, r3, #2
    712c:	4413      	add	r3, r2
    712e:	681b      	ldr	r3, [r3, #0]
    7130:	2b00      	cmp	r3, #0
    7132:	d00a      	beq.n	714a <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    7134:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7138:	4a13      	ldr	r2, [pc, #76]	; (7188 <Can_43_FLEXCAN_DeInit+0x8c>)
    713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713e:	2b01      	cmp	r3, #1
    7140:	d103      	bne.n	714a <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    7142:	2301      	movs	r3, #1
    7144:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    7148:	e008      	b.n	715c <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    714a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    714e:	3301      	adds	r3, #1
    7150:	f88d 3007 	strb.w	r3, [sp, #7]
    7154:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7158:	2b00      	cmp	r3, #0
    715a:	d0df      	beq.n	711c <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    715c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7160:	f083 0301 	eor.w	r3, r3, #1
    7164:	b2db      	uxtb	r3, r3
    7166:	2b00      	cmp	r3, #0
    7168:	d007      	beq.n	717a <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    716a:	9800      	ldr	r0, [sp, #0]
    716c:	f7ff ff5e 	bl	702c <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    7170:	4a04      	ldr	r2, [pc, #16]	; (7184 <Can_43_FLEXCAN_DeInit+0x88>)
    7172:	9b00      	ldr	r3, [sp, #0]
    7174:	2100      	movs	r1, #0
    7176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    717a:	bf00      	nop
    717c:	b003      	add	sp, #12
    717e:	f85d fb04 	ldr.w	pc, [sp], #4
    7182:	bf00      	nop
    7184:	1fff8d10 	.word	0x1fff8d10
    7188:	1fff8d0c 	.word	0x1fff8d0c

0000718c <Can_43_FLEXCAN_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_SetBaudrate
    (
        uint8 Controller,
        uint16 BaudRateConfigID
    )
    {
    718c:	b500      	push	{lr}
    718e:	b087      	sub	sp, #28
    7190:	4603      	mov	r3, r0
    7192:	460a      	mov	r2, r1
    7194:	f88d 3007 	strb.w	r3, [sp, #7]
    7198:	4613      	mov	r3, r2
    719a:	f8ad 3004 	strh.w	r3, [sp, #4]
        /* Returns the result of CAN set baudrate */
        Std_ReturnType eRetVal = (Std_ReturnType)E_NOT_OK;
    719e:	2301      	movs	r3, #1
    71a0:	f88d 3017 	strb.w	r3, [sp, #23]
        uint32 u32CoreId = 0U;
    71a4:	2300      	movs	r3, #0
    71a6:	9304      	str	r3, [sp, #16]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    71a8:	2300      	movs	r3, #0
    71aa:	9303      	str	r3, [sp, #12]

        u32CoreId = Can_GetCoreID();
    71ac:	2300      	movs	r3, #0
    71ae:	9304      	str	r3, [sp, #16]
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_BAUDRATE))
        {
    #endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    71b0:	4a10      	ldr	r2, [pc, #64]	; (71f4 <Can_43_FLEXCAN_SetBaudrate+0x68>)
    71b2:	9b04      	ldr	r3, [sp, #16]
    71b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71b8:	695a      	ldr	r2, [r3, #20]
    71ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71be:	009b      	lsls	r3, r3, #2
    71c0:	4413      	add	r3, r2
    71c2:	681b      	ldr	r3, [r3, #0]
    71c4:	9303      	str	r3, [sp, #12]
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_BAUDRATE, CAN_43_FLEXCAN_E_PARAM_BAUDRATE);
                    }
                    else
                    {
                #endif
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    71c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71ca:	4a0b      	ldr	r2, [pc, #44]	; (71f8 <Can_43_FLEXCAN_SetBaudrate+0x6c>)
    71cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d0:	2b02      	cmp	r3, #2
    71d2:	d108      	bne.n	71e6 <Can_43_FLEXCAN_SetBaudrate+0x5a>
                        {
                            eRetVal = Can_43_FLEXCAN_Ipw_SetBaudrate(Can_pController, BaudRateConfigID);
    71d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    71d8:	4619      	mov	r1, r3
    71da:	9803      	ldr	r0, [sp, #12]
    71dc:	f001 f82e 	bl	823c <Can_43_FLEXCAN_Ipw_SetBaudrate>
    71e0:	4603      	mov	r3, r0
    71e2:	f88d 3017 	strb.w	r3, [sp, #23]
                        }
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    }
        }
    #endif
        return eRetVal;
    71e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    }
    71ea:	4618      	mov	r0, r3
    71ec:	b007      	add	sp, #28
    71ee:	f85d fb04 	ldr.w	pc, [sp], #4
    71f2:	bf00      	nop
    71f4:	1fff8d10 	.word	0x1fff8d10
    71f8:	1fff8d0c 	.word	0x1fff8d0c

000071fc <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    71fc:	b500      	push	{lr}
    71fe:	b087      	sub	sp, #28
    7200:	4603      	mov	r3, r0
    7202:	9100      	str	r1, [sp, #0]
    7204:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7208:	2301      	movs	r3, #1
    720a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    720e:	2300      	movs	r3, #0
    7210:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7212:	2300      	movs	r3, #0
    7214:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7216:	2300      	movs	r3, #0
    7218:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    721a:	4a47      	ldr	r2, [pc, #284]	; (7338 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    721c:	9b04      	ldr	r3, [sp, #16]
    721e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7222:	695a      	ldr	r2, [r3, #20]
    7224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7228:	009b      	lsls	r3, r3, #2
    722a:	4413      	add	r3, r2
    722c:	681b      	ldr	r3, [r3, #0]
    722e:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    7230:	9b00      	ldr	r3, [sp, #0]
    7232:	2b03      	cmp	r3, #3
    7234:	d05d      	beq.n	72f2 <Can_43_FLEXCAN_SetControllerMode+0xf6>
    7236:	9b00      	ldr	r3, [sp, #0]
    7238:	2b03      	cmp	r3, #3
    723a:	d874      	bhi.n	7326 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    723c:	9b00      	ldr	r3, [sp, #0]
    723e:	2b01      	cmp	r3, #1
    7240:	d003      	beq.n	724a <Can_43_FLEXCAN_SetControllerMode+0x4e>
    7242:	9b00      	ldr	r3, [sp, #0]
    7244:	2b02      	cmp	r3, #2
    7246:	d01d      	beq.n	7284 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    7248:	e06d      	b.n	7326 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    724a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    724e:	4a3b      	ldr	r2, [pc, #236]	; (733c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7254:	2b02      	cmp	r3, #2
    7256:	d168      	bne.n	732a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    7258:	9803      	ldr	r0, [sp, #12]
    725a:	f001 f8f5 	bl	8448 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    725e:	4603      	mov	r3, r0
    7260:	2b00      	cmp	r3, #0
    7262:	d162      	bne.n	732a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    7264:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7268:	4a34      	ldr	r2, [pc, #208]	; (733c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    726a:	2101      	movs	r1, #1
    726c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    7270:	9b03      	ldr	r3, [sp, #12]
    7272:	781b      	ldrb	r3, [r3, #0]
    7274:	2101      	movs	r1, #1
    7276:	4618      	mov	r0, r3
    7278:	f7f9 fb47 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    727c:	2300      	movs	r3, #0
    727e:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    7282:	e052      	b.n	732a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    7284:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7288:	4a2c      	ldr	r2, [pc, #176]	; (733c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    728a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    728e:	2b01      	cmp	r3, #1
    7290:	d005      	beq.n	729e <Can_43_FLEXCAN_SetControllerMode+0xa2>
    7292:	2b00      	cmp	r3, #0
    7294:	d029      	beq.n	72ea <Can_43_FLEXCAN_SetControllerMode+0xee>
    7296:	3b02      	subs	r3, #2
    7298:	2b01      	cmp	r3, #1
    729a:	d826      	bhi.n	72ea <Can_43_FLEXCAN_SetControllerMode+0xee>
    729c:	e015      	b.n	72ca <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    729e:	9803      	ldr	r0, [sp, #12]
    72a0:	f001 f940 	bl	8524 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    72a4:	4603      	mov	r3, r0
    72a6:	2b00      	cmp	r3, #0
    72a8:	d121      	bne.n	72ee <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    72aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72ae:	4a23      	ldr	r2, [pc, #140]	; (733c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    72b0:	2102      	movs	r1, #2
    72b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    72b6:	9b03      	ldr	r3, [sp, #12]
    72b8:	781b      	ldrb	r3, [r3, #0]
    72ba:	2102      	movs	r1, #2
    72bc:	4618      	mov	r0, r3
    72be:	f7f9 fb24 	bl	90a <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    72c2:	2300      	movs	r3, #0
    72c4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    72c8:	e011      	b.n	72ee <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    72ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72ce:	4a1b      	ldr	r2, [pc, #108]	; (733c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    72d0:	2102      	movs	r1, #2
    72d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    72d6:	9b03      	ldr	r3, [sp, #12]
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	2102      	movs	r1, #2
    72dc:	4618      	mov	r0, r3
    72de:	f7f9 fb14 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    72e2:	2300      	movs	r3, #0
    72e4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    72e8:	e002      	b.n	72f0 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    72ea:	bf00      	nop
    72ec:	e01e      	b.n	732c <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    72ee:	bf00      	nop
                        break;
    72f0:	e01c      	b.n	732c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    72f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72f6:	4a11      	ldr	r2, [pc, #68]	; (733c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    72f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72fc:	3b02      	subs	r3, #2
    72fe:	2b01      	cmp	r3, #1
    7300:	d80f      	bhi.n	7322 <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    7302:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7306:	4a0d      	ldr	r2, [pc, #52]	; (733c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7308:	2103      	movs	r1, #3
    730a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    730e:	9b03      	ldr	r3, [sp, #12]
    7310:	781b      	ldrb	r3, [r3, #0]
    7312:	2103      	movs	r1, #3
    7314:	4618      	mov	r0, r3
    7316:	f7f9 faf8 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    731a:	2300      	movs	r3, #0
    731c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    7320:	e000      	b.n	7324 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    7322:	bf00      	nop
                        break;
    7324:	e002      	b.n	732c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    7326:	bf00      	nop
    7328:	e000      	b.n	732c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    732a:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    732c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7330:	4618      	mov	r0, r3
    7332:	b007      	add	sp, #28
    7334:	f85d fb04 	ldr.w	pc, [sp], #4
    7338:	1fff8d10 	.word	0x1fff8d10
    733c:	1fff8d0c 	.word	0x1fff8d0c

00007340 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    7340:	b500      	push	{lr}
    7342:	b085      	sub	sp, #20
    7344:	4603      	mov	r3, r0
    7346:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    734a:	2300      	movs	r3, #0
    734c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    734e:	2300      	movs	r3, #0
    7350:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    7352:	2300      	movs	r3, #0
    7354:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7356:	4a10      	ldr	r2, [pc, #64]	; (7398 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    7358:	9b03      	ldr	r3, [sp, #12]
    735a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    735e:	695a      	ldr	r2, [r3, #20]
    7360:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7364:	009b      	lsls	r3, r3, #2
    7366:	4413      	add	r3, r2
    7368:	681b      	ldr	r3, [r3, #0]
    736a:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    736c:	f005 fe0c 	bl	cf88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    7370:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7374:	4a09      	ldr	r2, [pc, #36]	; (739c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    7376:	5cd2      	ldrb	r2, [r2, r3]
    7378:	f89d 3007 	ldrb.w	r3, [sp, #7]
    737c:	3201      	adds	r2, #1
    737e:	b2d1      	uxtb	r1, r2
    7380:	4a06      	ldr	r2, [pc, #24]	; (739c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    7382:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    7384:	f005 fe2c 	bl	cfe0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    7388:	9802      	ldr	r0, [sp, #8]
    738a:	f001 f949 	bl	8620 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    738e:	bf00      	nop
    7390:	b005      	add	sp, #20
    7392:	f85d fb04 	ldr.w	pc, [sp], #4
    7396:	bf00      	nop
    7398:	1fff8d10 	.word	0x1fff8d10
    739c:	1fff8d08 	.word	0x1fff8d08

000073a0 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    73a0:	b500      	push	{lr}
    73a2:	b085      	sub	sp, #20
    73a4:	4603      	mov	r3, r0
    73a6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    73aa:	2300      	movs	r3, #0
    73ac:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    73ae:	2300      	movs	r3, #0
    73b0:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    73b2:	2300      	movs	r3, #0
    73b4:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    73b6:	4a16      	ldr	r2, [pc, #88]	; (7410 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    73b8:	9b03      	ldr	r3, [sp, #12]
    73ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73be:	695a      	ldr	r2, [r3, #20]
    73c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73c4:	009b      	lsls	r3, r3, #2
    73c6:	4413      	add	r3, r2
    73c8:	681b      	ldr	r3, [r3, #0]
    73ca:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    73cc:	f005 fe2e 	bl	d02c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    73d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73d4:	4a0f      	ldr	r2, [pc, #60]	; (7414 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    73d6:	5cd3      	ldrb	r3, [r2, r3]
    73d8:	2b00      	cmp	r3, #0
    73da:	d009      	beq.n	73f0 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    73dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73e0:	4a0c      	ldr	r2, [pc, #48]	; (7414 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    73e2:	5cd2      	ldrb	r2, [r2, r3]
    73e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73e8:	3a01      	subs	r2, #1
    73ea:	b2d1      	uxtb	r1, r2
    73ec:	4a09      	ldr	r2, [pc, #36]	; (7414 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    73ee:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    73f0:	f005 fe48 	bl	d084 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    73f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73f8:	4a06      	ldr	r2, [pc, #24]	; (7414 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    73fa:	5cd3      	ldrb	r3, [r2, r3]
    73fc:	2b00      	cmp	r3, #0
    73fe:	d102      	bne.n	7406 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    7400:	9802      	ldr	r0, [sp, #8]
    7402:	f001 f937 	bl	8674 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    7406:	bf00      	nop
    7408:	b005      	add	sp, #20
    740a:	f85d fb04 	ldr.w	pc, [sp], #4
    740e:	bf00      	nop
    7410:	1fff8d10 	.word	0x1fff8d10
    7414:	1fff8d08 	.word	0x1fff8d08

00007418 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    7418:	b500      	push	{lr}
    741a:	b087      	sub	sp, #28
    741c:	4603      	mov	r3, r0
    741e:	9100      	str	r1, [sp, #0]
    7420:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7424:	2301      	movs	r3, #1
    7426:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    742a:	2300      	movs	r3, #0
    742c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    7430:	2300      	movs	r3, #0
    7432:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7434:	2300      	movs	r3, #0
    7436:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7438:	2300      	movs	r3, #0
    743a:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    743c:	4a18      	ldr	r2, [pc, #96]	; (74a0 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    743e:	9b04      	ldr	r3, [sp, #16]
    7440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7444:	695a      	ldr	r2, [r3, #20]
    7446:	f89d 3007 	ldrb.w	r3, [sp, #7]
    744a:	009b      	lsls	r3, r3, #2
    744c:	4413      	add	r3, r2
    744e:	681b      	ldr	r3, [r3, #0]
    7450:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    7452:	f10d 030b 	add.w	r3, sp, #11
    7456:	4619      	mov	r1, r3
    7458:	9803      	ldr	r0, [sp, #12]
    745a:	f001 f937 	bl	86cc <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    745e:	4603      	mov	r3, r0
    7460:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    7464:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7468:	2b00      	cmp	r3, #0
    746a:	d112      	bne.n	7492 <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    746c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7470:	2b00      	cmp	r3, #0
    7472:	d002      	beq.n	747a <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    7474:	2b01      	cmp	r3, #1
    7476:	d004      	beq.n	7482 <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    7478:	e007      	b.n	748a <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    747a:	9b00      	ldr	r3, [sp, #0]
    747c:	2200      	movs	r2, #0
    747e:	601a      	str	r2, [r3, #0]
                                break;
    7480:	e008      	b.n	7494 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    7482:	9b00      	ldr	r3, [sp, #0]
    7484:	2201      	movs	r2, #1
    7486:	601a      	str	r2, [r3, #0]
                                break;
    7488:	e004      	b.n	7494 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    748a:	9b00      	ldr	r3, [sp, #0]
    748c:	2202      	movs	r2, #2
    748e:	601a      	str	r2, [r3, #0]
                                break;
    7490:	e000      	b.n	7494 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    7492:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    7494:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7498:	4618      	mov	r0, r3
    749a:	b007      	add	sp, #28
    749c:	f85d fb04 	ldr.w	pc, [sp], #4
    74a0:	1fff8d10 	.word	0x1fff8d10

000074a4 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    74a4:	b084      	sub	sp, #16
    74a6:	4603      	mov	r3, r0
    74a8:	9100      	str	r1, [sp, #0]
    74aa:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    74ae:	2301      	movs	r3, #1
    74b0:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    74b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74b8:	4a06      	ldr	r2, [pc, #24]	; (74d4 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    74ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    74be:	9b00      	ldr	r3, [sp, #0]
    74c0:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    74c2:	2300      	movs	r3, #0
    74c4:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    74c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    74cc:	4618      	mov	r0, r3
    74ce:	b004      	add	sp, #16
    74d0:	4770      	bx	lr
    74d2:	bf00      	nop
    74d4:	1fff8d0c 	.word	0x1fff8d0c

000074d8 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    74d8:	b500      	push	{lr}
    74da:	b087      	sub	sp, #28
    74dc:	4603      	mov	r3, r0
    74de:	9100      	str	r1, [sp, #0]
    74e0:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    74e4:	2301      	movs	r3, #1
    74e6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    74ea:	2300      	movs	r3, #0
    74ec:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    74ee:	2300      	movs	r3, #0
    74f0:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    74f2:	2300      	movs	r3, #0
    74f4:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    74f6:	4a0c      	ldr	r2, [pc, #48]	; (7528 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    74f8:	9b04      	ldr	r3, [sp, #16]
    74fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74fe:	695a      	ldr	r2, [r3, #20]
    7500:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7504:	009b      	lsls	r3, r3, #2
    7506:	4413      	add	r3, r2
    7508:	681b      	ldr	r3, [r3, #0]
    750a:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    750c:	9900      	ldr	r1, [sp, #0]
    750e:	9803      	ldr	r0, [sp, #12]
    7510:	f001 f907 	bl	8722 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    7514:	4603      	mov	r3, r0
    7516:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    751a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    751e:	4618      	mov	r0, r3
    7520:	b007      	add	sp, #28
    7522:	f85d fb04 	ldr.w	pc, [sp], #4
    7526:	bf00      	nop
    7528:	1fff8d10 	.word	0x1fff8d10

0000752c <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    752c:	b500      	push	{lr}
    752e:	b087      	sub	sp, #28
    7530:	4603      	mov	r3, r0
    7532:	9100      	str	r1, [sp, #0]
    7534:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7538:	2301      	movs	r3, #1
    753a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    753e:	2300      	movs	r3, #0
    7540:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7542:	2300      	movs	r3, #0
    7544:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7546:	2300      	movs	r3, #0
    7548:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    754a:	4a0c      	ldr	r2, [pc, #48]	; (757c <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    754c:	9b04      	ldr	r3, [sp, #16]
    754e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7552:	695a      	ldr	r2, [r3, #20]
    7554:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7558:	009b      	lsls	r3, r3, #2
    755a:	4413      	add	r3, r2
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    7560:	9900      	ldr	r1, [sp, #0]
    7562:	9803      	ldr	r0, [sp, #12]
    7564:	f001 f8cb 	bl	86fe <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    7568:	4603      	mov	r3, r0
    756a:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    756e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7572:	4618      	mov	r0, r3
    7574:	b007      	add	sp, #28
    7576:	f85d fb04 	ldr.w	pc, [sp], #4
    757a:	bf00      	nop
    757c:	1fff8d10 	.word	0x1fff8d10

00007580 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    7580:	b500      	push	{lr}
    7582:	b089      	sub	sp, #36	; 0x24
    7584:	4603      	mov	r3, r0
    7586:	9100      	str	r1, [sp, #0]
    7588:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    758c:	2301      	movs	r3, #1
    758e:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    7592:	2300      	movs	r3, #0
    7594:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    7598:	2300      	movs	r3, #0
    759a:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    759c:	2300      	movs	r3, #0
    759e:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    75a2:	2300      	movs	r3, #0
    75a4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    75a6:	2300      	movs	r3, #0
    75a8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    75aa:	2300      	movs	r3, #0
    75ac:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    75ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75b2:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    75b6:	4a1d      	ldr	r2, [pc, #116]	; (762c <Can_43_FLEXCAN_Write+0xac>)
    75b8:	9b06      	ldr	r3, [sp, #24]
    75ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75be:	68da      	ldr	r2, [r3, #12]
    75c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75c4:	4413      	add	r3, r2
    75c6:	781b      	ldrb	r3, [r3, #0]
    75c8:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    75cc:	4a17      	ldr	r2, [pc, #92]	; (762c <Can_43_FLEXCAN_Write+0xac>)
    75ce:	9b06      	ldr	r3, [sp, #24]
    75d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d4:	695a      	ldr	r2, [r3, #20]
    75d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    75da:	009b      	lsls	r3, r3, #2
    75dc:	4413      	add	r3, r2
    75de:	681b      	ldr	r3, [r3, #0]
    75e0:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    75e2:	9b04      	ldr	r3, [sp, #16]
    75e4:	2b00      	cmp	r3, #0
    75e6:	d01b      	beq.n	7620 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    75e8:	4a10      	ldr	r2, [pc, #64]	; (762c <Can_43_FLEXCAN_Write+0xac>)
    75ea:	9b06      	ldr	r3, [sp, #24]
    75ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75f0:	6919      	ldr	r1, [r3, #16]
    75f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    75f6:	4613      	mov	r3, r2
    75f8:	00db      	lsls	r3, r3, #3
    75fa:	4413      	add	r3, r2
    75fc:	009b      	lsls	r3, r3, #2
    75fe:	440b      	add	r3, r1
    7600:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    7602:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7606:	4a0a      	ldr	r2, [pc, #40]	; (7630 <Can_43_FLEXCAN_Write+0xb0>)
    7608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    760c:	2b01      	cmp	r3, #1
    760e:	d107      	bne.n	7620 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    7610:	9a00      	ldr	r2, [sp, #0]
    7612:	9903      	ldr	r1, [sp, #12]
    7614:	9804      	ldr	r0, [sp, #16]
    7616:	f001 f896 	bl	8746 <Can_43_FLEXCAN_Ipw_Write>
    761a:	4603      	mov	r3, r0
    761c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    7620:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7624:	4618      	mov	r0, r3
    7626:	b009      	add	sp, #36	; 0x24
    7628:	f85d fb04 	ldr.w	pc, [sp], #4
    762c:	1fff8d10 	.word	0x1fff8d10
    7630:	1fff8d0c 	.word	0x1fff8d0c

00007634 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    7634:	bf00      	nop
    7636:	4770      	bx	lr

00007638 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    7638:	bf00      	nop
    763a:	4770      	bx	lr

0000763c <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    763c:	bf00      	nop
    763e:	4770      	bx	lr

00007640 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    7640:	b500      	push	{lr}
    7642:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    7644:	2300      	movs	r3, #0
    7646:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    764a:	2300      	movs	r3, #0
    764c:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    764e:	2300      	movs	r3, #0
    7650:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    7652:	2300      	movs	r3, #0
    7654:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    7656:	4a17      	ldr	r2, [pc, #92]	; (76b4 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7658:	9b02      	ldr	r3, [sp, #8]
    765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    765e:	2b00      	cmp	r3, #0
    7660:	d024      	beq.n	76ac <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    7662:	e01f      	b.n	76a4 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7664:	4a13      	ldr	r2, [pc, #76]	; (76b4 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7666:	9b02      	ldr	r3, [sp, #8]
    7668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    766c:	695a      	ldr	r2, [r3, #20]
    766e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7672:	009b      	lsls	r3, r3, #2
    7674:	4413      	add	r3, r2
    7676:	681b      	ldr	r3, [r3, #0]
    7678:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    767a:	9b01      	ldr	r3, [sp, #4]
    767c:	2b00      	cmp	r3, #0
    767e:	d00c      	beq.n	769a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    7680:	9b01      	ldr	r3, [sp, #4]
    7682:	7a1b      	ldrb	r3, [r3, #8]
    7684:	2b00      	cmp	r3, #0
    7686:	d008      	beq.n	769a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    7688:	f89d 300f 	ldrb.w	r3, [sp, #15]
    768c:	009b      	lsls	r3, r3, #2
    768e:	4a0a      	ldr	r2, [pc, #40]	; (76b8 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    7690:	4413      	add	r3, r2
    7692:	4619      	mov	r1, r3
    7694:	9801      	ldr	r0, [sp, #4]
    7696:	f001 f95c 	bl	8952 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    769a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    769e:	3301      	adds	r3, #1
    76a0:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    76a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d0db      	beq.n	7664 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    76ac:	bf00      	nop
    76ae:	b005      	add	sp, #20
    76b0:	f85d fb04 	ldr.w	pc, [sp], #4
    76b4:	1fff8d10 	.word	0x1fff8d10
    76b8:	1fff8d0c 	.word	0x1fff8d0c

000076bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    76bc:	b500      	push	{lr}
    76be:	b087      	sub	sp, #28
    76c0:	4603      	mov	r3, r0
    76c2:	9200      	str	r2, [sp, #0]
    76c4:	f88d 3007 	strb.w	r3, [sp, #7]
    76c8:	460b      	mov	r3, r1
    76ca:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    76ce:	2300      	movs	r3, #0
    76d0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    76d4:	2300      	movs	r3, #0
    76d6:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    76d8:	2300      	movs	r3, #0
    76da:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    76dc:	2300      	movs	r3, #0
    76de:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    76e0:	4a16      	ldr	r2, [pc, #88]	; (773c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    76e2:	9b04      	ldr	r3, [sp, #16]
    76e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e8:	2b00      	cmp	r3, #0
    76ea:	d022      	beq.n	7732 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    76ec:	4a13      	ldr	r2, [pc, #76]	; (773c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    76ee:	9b04      	ldr	r3, [sp, #16]
    76f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f4:	689a      	ldr	r2, [r3, #8]
    76f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76fa:	4413      	add	r3, r2
    76fc:	781b      	ldrb	r3, [r3, #0]
    76fe:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7702:	4a0e      	ldr	r2, [pc, #56]	; (773c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7704:	9b04      	ldr	r3, [sp, #16]
    7706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    770a:	695a      	ldr	r2, [r3, #20]
    770c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7710:	009b      	lsls	r3, r3, #2
    7712:	4413      	add	r3, r2
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7718:	9b03      	ldr	r3, [sp, #12]
    771a:	2b00      	cmp	r3, #0
    771c:	d009      	beq.n	7732 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    771e:	4a07      	ldr	r2, [pc, #28]	; (773c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7720:	9b04      	ldr	r3, [sp, #16]
    7722:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7726:	f89d 2006 	ldrb.w	r2, [sp, #6]
    772a:	9b00      	ldr	r3, [sp, #0]
    772c:	9803      	ldr	r0, [sp, #12]
    772e:	f001 f946 	bl	89be <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    7732:	bf00      	nop
    7734:	b007      	add	sp, #28
    7736:	f85d fb04 	ldr.w	pc, [sp], #4
    773a:	bf00      	nop
    773c:	1fff8d10 	.word	0x1fff8d10

00007740 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    7740:	b500      	push	{lr}
    7742:	b087      	sub	sp, #28
    7744:	4603      	mov	r3, r0
    7746:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    774a:	2300      	movs	r3, #0
    774c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7750:	2300      	movs	r3, #0
    7752:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7754:	2300      	movs	r3, #0
    7756:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7758:	2300      	movs	r3, #0
    775a:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    775c:	4a19      	ldr	r2, [pc, #100]	; (77c4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    775e:	9b04      	ldr	r3, [sp, #16]
    7760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7764:	2b00      	cmp	r3, #0
    7766:	d029      	beq.n	77bc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    7768:	4a16      	ldr	r2, [pc, #88]	; (77c4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    776a:	9b04      	ldr	r3, [sp, #16]
    776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7770:	689a      	ldr	r2, [r3, #8]
    7772:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7776:	4413      	add	r3, r2
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    777e:	4a11      	ldr	r2, [pc, #68]	; (77c4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7780:	9b04      	ldr	r3, [sp, #16]
    7782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7786:	695a      	ldr	r2, [r3, #20]
    7788:	f89d 3017 	ldrb.w	r3, [sp, #23]
    778c:	009b      	lsls	r3, r3, #2
    778e:	4413      	add	r3, r2
    7790:	681b      	ldr	r3, [r3, #0]
    7792:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7794:	9b03      	ldr	r3, [sp, #12]
    7796:	2b00      	cmp	r3, #0
    7798:	d010      	beq.n	77bc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    779a:	9803      	ldr	r0, [sp, #12]
    779c:	f000 fec2 	bl	8524 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    77a0:	4603      	mov	r3, r0
    77a2:	2b00      	cmp	r3, #0
    77a4:	d10a      	bne.n	77bc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    77a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    77aa:	4a07      	ldr	r2, [pc, #28]	; (77c8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    77ac:	2102      	movs	r1, #2
    77ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    77b2:	9b03      	ldr	r3, [sp, #12]
    77b4:	781b      	ldrb	r3, [r3, #0]
    77b6:	4618      	mov	r0, r3
    77b8:	f7f9 f8a0 	bl	8fc <CanIf_ControllerBusOff>
            }
        }
    }
}
    77bc:	bf00      	nop
    77be:	b007      	add	sp, #28
    77c0:	f85d fb04 	ldr.w	pc, [sp], #4
    77c4:	1fff8d10 	.word	0x1fff8d10
    77c8:	1fff8d0c 	.word	0x1fff8d0c

000077cc <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    77cc:	b500      	push	{lr}
    77ce:	b085      	sub	sp, #20
    77d0:	9003      	str	r0, [sp, #12]
    77d2:	9102      	str	r1, [sp, #8]
    77d4:	9201      	str	r2, [sp, #4]
    77d6:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    77d8:	9b01      	ldr	r3, [sp, #4]
    77da:	685a      	ldr	r2, [r3, #4]
    77dc:	9b03      	ldr	r3, [sp, #12]
    77de:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    77e0:	9b01      	ldr	r3, [sp, #4]
    77e2:	681b      	ldr	r3, [r3, #0]
    77e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    77e8:	2b00      	cmp	r3, #0
    77ea:	d005      	beq.n	77f8 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    77ec:	9b03      	ldr	r3, [sp, #12]
    77ee:	681b      	ldr	r3, [r3, #0]
    77f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    77f4:	9b03      	ldr	r3, [sp, #12]
    77f6:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    77f8:	9b06      	ldr	r3, [sp, #24]
    77fa:	699b      	ldr	r3, [r3, #24]
    77fc:	2b00      	cmp	r3, #0
    77fe:	d10c      	bne.n	781a <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    7800:	9b01      	ldr	r3, [sp, #4]
    7802:	681b      	ldr	r3, [r3, #0]
    7804:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    7808:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    780c:	d105      	bne.n	781a <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    780e:	2301      	movs	r3, #1
    7810:	2208      	movs	r2, #8
    7812:	2100      	movs	r1, #0
    7814:	2050      	movs	r0, #80	; 0x50
    7816:	f007 fd3f 	bl	f298 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    781a:	9b06      	ldr	r3, [sp, #24]
    781c:	699b      	ldr	r3, [r3, #24]
    781e:	2b01      	cmp	r3, #1
    7820:	d009      	beq.n	7836 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	681b      	ldr	r3, [r3, #0]
    7826:	2b00      	cmp	r3, #0
    7828:	da05      	bge.n	7836 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    782a:	9b03      	ldr	r3, [sp, #12]
    782c:	681b      	ldr	r3, [r3, #0]
    782e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    7832:	9b03      	ldr	r3, [sp, #12]
    7834:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    7836:	9b06      	ldr	r3, [sp, #24]
    7838:	7c1a      	ldrb	r2, [r3, #16]
    783a:	9b01      	ldr	r3, [sp, #4]
    783c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7840:	429a      	cmp	r2, r3
    7842:	d805      	bhi.n	7850 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    7844:	9b06      	ldr	r3, [sp, #24]
    7846:	7c1b      	ldrb	r3, [r3, #16]
    7848:	461a      	mov	r2, r3
    784a:	9b02      	ldr	r3, [sp, #8]
    784c:	609a      	str	r2, [r3, #8]
    784e:	e005      	b.n	785c <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    7850:	9b01      	ldr	r3, [sp, #4]
    7852:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7856:	461a      	mov	r2, r3
    7858:	9b02      	ldr	r3, [sp, #8]
    785a:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    785c:	9b06      	ldr	r3, [sp, #24]
    785e:	881a      	ldrh	r2, [r3, #0]
    7860:	9b03      	ldr	r3, [sp, #12]
    7862:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    7864:	9b00      	ldr	r3, [sp, #0]
    7866:	781a      	ldrb	r2, [r3, #0]
    7868:	9b03      	ldr	r3, [sp, #12]
    786a:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    786c:	9b01      	ldr	r3, [sp, #4]
    786e:	f103 0208 	add.w	r2, r3, #8
    7872:	9b02      	ldr	r3, [sp, #8]
    7874:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    7876:	9902      	ldr	r1, [sp, #8]
    7878:	9803      	ldr	r0, [sp, #12]
    787a:	f7f9 f855 	bl	928 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    787e:	bf00      	nop
    7880:	b005      	add	sp, #20
    7882:	f85d fb04 	ldr.w	pc, [sp], #4

00007886 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    7886:	b500      	push	{lr}
    7888:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    788c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7890:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7894:	6018      	str	r0, [r3, #0]
    7896:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    789a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    789e:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    78a0:	2300      	movs	r3, #0
    78a2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    78a6:	2300      	movs	r3, #0
    78a8:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    78ac:	2300      	movs	r3, #0
    78ae:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    78b2:	2300      	movs	r3, #0
    78b4:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    78b8:	2300      	movs	r3, #0
    78ba:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    78be:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    78c2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    78c6:	681b      	ldr	r3, [r3, #0]
    78c8:	7c9b      	ldrb	r3, [r3, #18]
    78ca:	089b      	lsrs	r3, r3, #2
    78cc:	b2db      	uxtb	r3, r3
    78ce:	3306      	adds	r3, #6
    78d0:	2b20      	cmp	r3, #32
    78d2:	d80b      	bhi.n	78ec <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    78d4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    78d8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    78dc:	681b      	ldr	r3, [r3, #0]
    78de:	7c9b      	ldrb	r3, [r3, #18]
    78e0:	089b      	lsrs	r3, r3, #2
    78e2:	b2db      	uxtb	r3, r3
    78e4:	3306      	adds	r3, #6
    78e6:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    78ea:	e002      	b.n	78f2 <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    78ec:	2320      	movs	r3, #32
    78ee:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    78f2:	2300      	movs	r3, #0
    78f4:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    78f8:	e169      	b.n	7bce <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    78fa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    78fe:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7902:	681b      	ldr	r3, [r3, #0]
    7904:	691b      	ldr	r3, [r3, #16]
    7906:	2b00      	cmp	r3, #0
    7908:	d13a      	bne.n	7980 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    790a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    790e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7912:	681b      	ldr	r3, [r3, #0]
    7914:	7c9b      	ldrb	r3, [r3, #18]
    7916:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    791a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    791e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7922:	2300      	movs	r3, #0
    7924:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7928:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    792c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7930:	681b      	ldr	r3, [r3, #0]
    7932:	689b      	ldr	r3, [r3, #8]
    7934:	2b00      	cmp	r3, #0
    7936:	d011      	beq.n	795c <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    7938:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    793c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7940:	681b      	ldr	r3, [r3, #0]
    7942:	695a      	ldr	r2, [r3, #20]
    7944:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7948:	00db      	lsls	r3, r3, #3
    794a:	4413      	add	r3, r2
    794c:	685b      	ldr	r3, [r3, #4]
    794e:	005b      	lsls	r3, r3, #1
    7950:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7954:	4313      	orrs	r3, r2
    7956:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    795a:	e126      	b.n	7baa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    795c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7960:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7964:	681b      	ldr	r3, [r3, #0]
    7966:	695a      	ldr	r2, [r3, #20]
    7968:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    796c:	00db      	lsls	r3, r3, #3
    796e:	4413      	add	r3, r2
    7970:	685b      	ldr	r3, [r3, #4]
    7972:	04db      	lsls	r3, r3, #19
    7974:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7978:	4313      	orrs	r3, r2
    797a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    797e:	e114      	b.n	7baa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    7980:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7984:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7988:	681b      	ldr	r3, [r3, #0]
    798a:	691b      	ldr	r3, [r3, #16]
    798c:	2b01      	cmp	r3, #1
    798e:	d160      	bne.n	7a52 <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    7990:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7994:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7998:	681b      	ldr	r3, [r3, #0]
    799a:	7c9b      	ldrb	r3, [r3, #18]
    799c:	005b      	lsls	r3, r3, #1
    799e:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    79a2:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    79a6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    79aa:	2301      	movs	r3, #1
    79ac:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    79b0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    79b4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    79b8:	681b      	ldr	r3, [r3, #0]
    79ba:	689b      	ldr	r3, [r3, #8]
    79bc:	2b00      	cmp	r3, #0
    79be:	d024      	beq.n	7a0a <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    79c0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    79c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    79c8:	681b      	ldr	r3, [r3, #0]
    79ca:	695a      	ldr	r2, [r3, #20]
    79cc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    79d0:	011b      	lsls	r3, r3, #4
    79d2:	4413      	add	r3, r2
    79d4:	685b      	ldr	r3, [r3, #4]
    79d6:	0bdb      	lsrs	r3, r3, #15
    79d8:	041b      	lsls	r3, r3, #16
    79da:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    79de:	4313      	orrs	r3, r2
    79e0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    79e4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    79e8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    79ec:	681b      	ldr	r3, [r3, #0]
    79ee:	695a      	ldr	r2, [r3, #20]
    79f0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    79f4:	011b      	lsls	r3, r3, #4
    79f6:	3308      	adds	r3, #8
    79f8:	4413      	add	r3, r2
    79fa:	685b      	ldr	r3, [r3, #4]
    79fc:	0bdb      	lsrs	r3, r3, #15
    79fe:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7a02:	4313      	orrs	r3, r2
    7a04:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7a08:	e0cf      	b.n	7baa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    7a0a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a0e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	695a      	ldr	r2, [r3, #20]
    7a16:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7a1a:	011b      	lsls	r3, r3, #4
    7a1c:	4413      	add	r3, r2
    7a1e:	685b      	ldr	r3, [r3, #4]
    7a20:	04db      	lsls	r3, r3, #19
    7a22:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7a26:	4313      	orrs	r3, r2
    7a28:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    7a2c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a30:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	695a      	ldr	r2, [r3, #20]
    7a38:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7a3c:	011b      	lsls	r3, r3, #4
    7a3e:	3308      	adds	r3, #8
    7a40:	4413      	add	r3, r2
    7a42:	685b      	ldr	r3, [r3, #4]
    7a44:	00db      	lsls	r3, r3, #3
    7a46:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7a4a:	4313      	orrs	r3, r2
    7a4c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7a50:	e0ab      	b.n	7baa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    7a52:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a56:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a5a:	681b      	ldr	r3, [r3, #0]
    7a5c:	7c9b      	ldrb	r3, [r3, #18]
    7a5e:	009b      	lsls	r3, r3, #2
    7a60:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    7a64:	2300      	movs	r3, #0
    7a66:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    7a6a:	2302      	movs	r3, #2
    7a6c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7a70:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a74:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a78:	681b      	ldr	r3, [r3, #0]
    7a7a:	689b      	ldr	r3, [r3, #8]
    7a7c:	2b00      	cmp	r3, #0
    7a7e:	d04a      	beq.n	7b16 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7a80:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a84:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a88:	681b      	ldr	r3, [r3, #0]
    7a8a:	695a      	ldr	r2, [r3, #20]
    7a8c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7a90:	015b      	lsls	r3, r3, #5
    7a92:	4413      	add	r3, r2
    7a94:	685b      	ldr	r3, [r3, #4]
    7a96:	0d5b      	lsrs	r3, r3, #21
    7a98:	061b      	lsls	r3, r3, #24
    7a9a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7a9e:	4313      	orrs	r3, r2
    7aa0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7aa4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7aa8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7aac:	681b      	ldr	r3, [r3, #0]
    7aae:	695a      	ldr	r2, [r3, #20]
    7ab0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ab4:	015b      	lsls	r3, r3, #5
    7ab6:	3308      	adds	r3, #8
    7ab8:	4413      	add	r3, r2
    7aba:	685b      	ldr	r3, [r3, #4]
    7abc:	0d5b      	lsrs	r3, r3, #21
    7abe:	041b      	lsls	r3, r3, #16
    7ac0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7ac4:	4313      	orrs	r3, r2
    7ac6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7aca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ace:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ad2:	681b      	ldr	r3, [r3, #0]
    7ad4:	695a      	ldr	r2, [r3, #20]
    7ad6:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ada:	015b      	lsls	r3, r3, #5
    7adc:	3310      	adds	r3, #16
    7ade:	4413      	add	r3, r2
    7ae0:	685b      	ldr	r3, [r3, #4]
    7ae2:	0d5b      	lsrs	r3, r3, #21
    7ae4:	021b      	lsls	r3, r3, #8
    7ae6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7aea:	4313      	orrs	r3, r2
    7aec:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7af0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7af4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7af8:	681b      	ldr	r3, [r3, #0]
    7afa:	695a      	ldr	r2, [r3, #20]
    7afc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b00:	015b      	lsls	r3, r3, #5
    7b02:	3318      	adds	r3, #24
    7b04:	4413      	add	r3, r2
    7b06:	685b      	ldr	r3, [r3, #4]
    7b08:	0d5b      	lsrs	r3, r3, #21
    7b0a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b0e:	4313      	orrs	r3, r2
    7b10:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7b14:	e049      	b.n	7baa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7b16:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b1a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	695a      	ldr	r2, [r3, #20]
    7b22:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b26:	015b      	lsls	r3, r3, #5
    7b28:	4413      	add	r3, r2
    7b2a:	685b      	ldr	r3, [r3, #4]
    7b2c:	08db      	lsrs	r3, r3, #3
    7b2e:	061b      	lsls	r3, r3, #24
    7b30:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b34:	4313      	orrs	r3, r2
    7b36:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7b3a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b3e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7b42:	681b      	ldr	r3, [r3, #0]
    7b44:	695a      	ldr	r2, [r3, #20]
    7b46:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b4a:	015b      	lsls	r3, r3, #5
    7b4c:	3308      	adds	r3, #8
    7b4e:	4413      	add	r3, r2
    7b50:	685b      	ldr	r3, [r3, #4]
    7b52:	08db      	lsrs	r3, r3, #3
    7b54:	041b      	lsls	r3, r3, #16
    7b56:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b5a:	4313      	orrs	r3, r2
    7b5c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7b60:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b64:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7b68:	681b      	ldr	r3, [r3, #0]
    7b6a:	695a      	ldr	r2, [r3, #20]
    7b6c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b70:	015b      	lsls	r3, r3, #5
    7b72:	3310      	adds	r3, #16
    7b74:	4413      	add	r3, r2
    7b76:	685b      	ldr	r3, [r3, #4]
    7b78:	08db      	lsrs	r3, r3, #3
    7b7a:	021b      	lsls	r3, r3, #8
    7b7c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b80:	4313      	orrs	r3, r2
    7b82:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7b86:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b8a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7b8e:	681b      	ldr	r3, [r3, #0]
    7b90:	695a      	ldr	r2, [r3, #20]
    7b92:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b96:	015b      	lsls	r3, r3, #5
    7b98:	3318      	adds	r3, #24
    7b9a:	4413      	add	r3, r2
    7b9c:	685b      	ldr	r3, [r3, #4]
    7b9e:	08db      	lsrs	r3, r3, #3
    7ba0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7ba4:	4313      	orrs	r3, r2
    7ba6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    7baa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7bae:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7bb2:	681b      	ldr	r3, [r3, #0]
    7bb4:	789b      	ldrb	r3, [r3, #2]
    7bb6:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    7bba:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7bbe:	4618      	mov	r0, r3
    7bc0:	f002 fe76 	bl	a8b0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7bc4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7bc8:	3301      	adds	r3, #1
    7bca:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7bce:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7bd2:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    7bd6:	429a      	cmp	r2, r3
    7bd8:	d20a      	bcs.n	7bf0 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    7bda:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7bde:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7be2:	681b      	ldr	r3, [r3, #0]
    7be4:	7c9b      	ldrb	r3, [r3, #18]
    7be6:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7bea:	429a      	cmp	r2, r3
    7bec:	f4ff ae85 	bcc.w	78fa <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    7bf0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7bf4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7bf8:	681b      	ldr	r3, [r3, #0]
    7bfa:	789a      	ldrb	r2, [r3, #2]
    7bfc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c00:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7c04:	681b      	ldr	r3, [r3, #0]
    7c06:	68db      	ldr	r3, [r3, #12]
    7c08:	4619      	mov	r1, r3
    7c0a:	4610      	mov	r0, r2
    7c0c:	f002 fe9e 	bl	a94c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    7c10:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    7c14:	2b00      	cmp	r3, #0
    7c16:	d054      	beq.n	7cc2 <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    7c18:	2300      	movs	r3, #0
    7c1a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7c1e:	e03e      	b.n	7c9e <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    7c20:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c24:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7c28:	681b      	ldr	r3, [r3, #0]
    7c2a:	695a      	ldr	r2, [r3, #20]
    7c2c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c30:	00db      	lsls	r3, r3, #3
    7c32:	441a      	add	r2, r3
    7c34:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c38:	6812      	ldr	r2, [r2, #0]
    7c3a:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    7c3e:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    7c42:	00db      	lsls	r3, r3, #3
    7c44:	440b      	add	r3, r1
    7c46:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7c48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7c50:	681b      	ldr	r3, [r3, #0]
    7c52:	689b      	ldr	r3, [r3, #8]
    7c54:	2b00      	cmp	r3, #0
    7c56:	d00a      	beq.n	7c6e <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    7c58:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c5c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    7c60:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    7c64:	00db      	lsls	r3, r3, #3
    7c66:	4413      	add	r3, r2
    7c68:	2201      	movs	r2, #1
    7c6a:	705a      	strb	r2, [r3, #1]
    7c6c:	e009      	b.n	7c82 <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    7c6e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c72:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    7c76:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    7c7a:	00db      	lsls	r3, r3, #3
    7c7c:	4413      	add	r3, r2
    7c7e:	2200      	movs	r2, #0
    7c80:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    7c82:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7c86:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c8a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    7c8e:	2100      	movs	r1, #0
    7c90:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    7c94:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c98:	3301      	adds	r3, #1
    7c9a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7c9e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7ca2:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    7ca6:	429a      	cmp	r2, r3
    7ca8:	d3ba      	bcc.n	7c20 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    7caa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7cae:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7cb2:	681b      	ldr	r3, [r3, #0]
    7cb4:	789b      	ldrb	r3, [r3, #2]
    7cb6:	aa02      	add	r2, sp, #8
    7cb8:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    7cbc:	4618      	mov	r0, r3
    7cbe:	f002 f9da 	bl	a076 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    7cc2:	bf00      	nop
    7cc4:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7cc8:	f85d fb04 	ldr.w	pc, [sp], #4

00007ccc <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    7ccc:	b510      	push	{r4, lr}
    7cce:	b088      	sub	sp, #32
    7cd0:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
    7cd2:	9b01      	ldr	r3, [sp, #4]
    7cd4:	785b      	ldrb	r3, [r3, #1]
    7cd6:	461a      	mov	r2, r3
    7cd8:	4b58      	ldr	r3, [pc, #352]	; (7e3c <Can_Ipw_InitBaudrate+0x170>)
    7cda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7cde:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
    #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
        if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
        {
    #endif
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    7ce2:	9b01      	ldr	r3, [sp, #4]
    7ce4:	6a1a      	ldr	r2, [r3, #32]
    7ce6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7cea:	2116      	movs	r1, #22
    7cec:	fb01 f303 	mul.w	r3, r1, r3
    7cf0:	4413      	add	r3, r2
    7cf2:	88db      	ldrh	r3, [r3, #6]
    7cf4:	9305      	str	r3, [sp, #20]
        {
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
        }
    #endif

        FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    7cf6:	9b01      	ldr	r3, [sp, #4]
    7cf8:	6a1a      	ldr	r2, [r3, #32]
    7cfa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7cfe:	2116      	movs	r1, #22
    7d00:	fb01 f303 	mul.w	r3, r1, r3
    7d04:	4413      	add	r3, r2
    7d06:	789b      	ldrb	r3, [r3, #2]
    7d08:	9302      	str	r3, [sp, #8]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    7d0a:	9b01      	ldr	r3, [sp, #4]
    7d0c:	6a1a      	ldr	r2, [r3, #32]
    7d0e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d12:	2116      	movs	r1, #22
    7d14:	fb01 f303 	mul.w	r3, r1, r3
    7d18:	4413      	add	r3, r2
    7d1a:	78db      	ldrb	r3, [r3, #3]
    7d1c:	9303      	str	r3, [sp, #12]
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    7d1e:	9b01      	ldr	r3, [sp, #4]
    7d20:	6a1a      	ldr	r2, [r3, #32]
    7d22:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d26:	2116      	movs	r1, #22
    7d28:	fb01 f303 	mul.w	r3, r1, r3
    7d2c:	4413      	add	r3, r2
    7d2e:	791b      	ldrb	r3, [r3, #4]
    7d30:	9304      	str	r3, [sp, #16]
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    7d32:	9b01      	ldr	r3, [sp, #4]
    7d34:	6a1a      	ldr	r2, [r3, #32]
    7d36:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d3a:	2116      	movs	r1, #22
    7d3c:	fb01 f303 	mul.w	r3, r1, r3
    7d40:	4413      	add	r3, r2
    7d42:	7a1b      	ldrb	r3, [r3, #8]
    7d44:	9306      	str	r3, [sp, #24]
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    7d46:	9b01      	ldr	r3, [sp, #4]
    7d48:	789b      	ldrb	r3, [r3, #2]
    7d4a:	a902      	add	r1, sp, #8
    7d4c:	2200      	movs	r2, #0
    7d4e:	4618      	mov	r0, r3
    7d50:	f003 f842 	bl	add8 <FlexCAN_Ip_SetBitrate_Privileged>
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    7d54:	9b01      	ldr	r3, [sp, #4]
    7d56:	6a1a      	ldr	r2, [r3, #32]
    7d58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d5c:	2116      	movs	r1, #22
    7d5e:	fb01 f303 	mul.w	r3, r1, r3
    7d62:	4413      	add	r3, r2
    7d64:	785b      	ldrb	r3, [r3, #1]
    7d66:	2b00      	cmp	r3, #0
    7d68:	d057      	beq.n	7e1a <Can_Ipw_InitBaudrate+0x14e>
    #if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    7d6a:	9b01      	ldr	r3, [sp, #4]
    7d6c:	6a1a      	ldr	r2, [r3, #32]
    7d6e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d72:	2116      	movs	r1, #22
    7d74:	fb01 f303 	mul.w	r3, r1, r3
    7d78:	4413      	add	r3, r2
    7d7a:	89db      	ldrh	r3, [r3, #14]
    7d7c:	9305      	str	r3, [sp, #20]
            else
            {
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif
            FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    7d7e:	9b01      	ldr	r3, [sp, #4]
    7d80:	6a1a      	ldr	r2, [r3, #32]
    7d82:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d86:	2116      	movs	r1, #22
    7d88:	fb01 f303 	mul.w	r3, r1, r3
    7d8c:	4413      	add	r3, r2
    7d8e:	7a9b      	ldrb	r3, [r3, #10]
    7d90:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    7d92:	9b01      	ldr	r3, [sp, #4]
    7d94:	6a1a      	ldr	r2, [r3, #32]
    7d96:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d9a:	2116      	movs	r1, #22
    7d9c:	fb01 f303 	mul.w	r3, r1, r3
    7da0:	4413      	add	r3, r2
    7da2:	7adb      	ldrb	r3, [r3, #11]
    7da4:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    7da6:	9b01      	ldr	r3, [sp, #4]
    7da8:	6a1a      	ldr	r2, [r3, #32]
    7daa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7dae:	2116      	movs	r1, #22
    7db0:	fb01 f303 	mul.w	r3, r1, r3
    7db4:	4413      	add	r3, r2
    7db6:	7b1b      	ldrb	r3, [r3, #12]
    7db8:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    7dba:	9b01      	ldr	r3, [sp, #4]
    7dbc:	6a1a      	ldr	r2, [r3, #32]
    7dbe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7dc2:	2116      	movs	r1, #22
    7dc4:	fb01 f303 	mul.w	r3, r1, r3
    7dc8:	4413      	add	r3, r2
    7dca:	7c1b      	ldrb	r3, [r3, #16]
    7dcc:	9306      	str	r3, [sp, #24]

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    7dce:	9b01      	ldr	r3, [sp, #4]
    7dd0:	7898      	ldrb	r0, [r3, #2]
    7dd2:	9b01      	ldr	r3, [sp, #4]
    7dd4:	6a1a      	ldr	r2, [r3, #32]
    7dd6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7dda:	2116      	movs	r1, #22
    7ddc:	fb01 f303 	mul.w	r3, r1, r3
    7de0:	4413      	add	r3, r2
    7de2:	781a      	ldrb	r2, [r3, #0]
    7de4:	ab02      	add	r3, sp, #8
    7de6:	4619      	mov	r1, r3
    7de8:	f003 f8c0 	bl	af6c <FlexCAN_Ip_SetBitrateCbt_Privileged>
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    7dec:	9b01      	ldr	r3, [sp, #4]
    7dee:	7898      	ldrb	r0, [r3, #2]
    7df0:	9b01      	ldr	r3, [sp, #4]
    7df2:	6a1a      	ldr	r2, [r3, #32]
    7df4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7df8:	2116      	movs	r1, #22
    7dfa:	fb01 f303 	mul.w	r3, r1, r3
    7dfe:	4413      	add	r3, r2
    7e00:	7cd9      	ldrb	r1, [r3, #19]
    7e02:	9b01      	ldr	r3, [sp, #4]
    7e04:	6a1a      	ldr	r2, [r3, #32]
    7e06:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7e0a:	2416      	movs	r4, #22
    7e0c:	fb04 f303 	mul.w	r3, r4, r3
    7e10:	4413      	add	r3, r2
    7e12:	7d1b      	ldrb	r3, [r3, #20]
    7e14:	461a      	mov	r2, r3
    7e16:	f003 f913 	bl	b040 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    7e1a:	9b01      	ldr	r3, [sp, #4]
    7e1c:	7898      	ldrb	r0, [r3, #2]
    7e1e:	9b01      	ldr	r3, [sp, #4]
    7e20:	6a1a      	ldr	r2, [r3, #32]
    7e22:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7e26:	2116      	movs	r1, #22
    7e28:	fb01 f303 	mul.w	r3, r1, r3
    7e2c:	4413      	add	r3, r2
    7e2e:	7c9b      	ldrb	r3, [r3, #18]
    7e30:	4619      	mov	r1, r3
    7e32:	f003 f959 	bl	b0e8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    7e36:	bf00      	nop
    7e38:	b008      	add	sp, #32
    7e3a:	bd10      	pop	{r4, pc}
    7e3c:	1fff8fb4 	.word	0x1fff8fb4

00007e40 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    7e40:	b500      	push	{lr}
    7e42:	b087      	sub	sp, #28
    7e44:	9003      	str	r0, [sp, #12]
    7e46:	9102      	str	r1, [sp, #8]
    7e48:	4613      	mov	r3, r2
    7e4a:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    7e4e:	2300      	movs	r3, #0
    7e50:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    7e54:	9b03      	ldr	r3, [sp, #12]
    7e56:	785b      	ldrb	r3, [r3, #1]
    7e58:	461a      	mov	r2, r3
    7e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e5e:	491c      	ldr	r1, [pc, #112]	; (7ed0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    7e60:	0152      	lsls	r2, r2, #5
    7e62:	4413      	add	r3, r2
    7e64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7e68:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    7e6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7e74:	4293      	cmp	r3, r2
    7e76:	d027      	beq.n	7ec8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    7e78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7e7c:	4613      	mov	r3, r2
    7e7e:	00db      	lsls	r3, r3, #3
    7e80:	4413      	add	r3, r2
    7e82:	009b      	lsls	r3, r3, #2
    7e84:	461a      	mov	r2, r3
    7e86:	9b02      	ldr	r3, [sp, #8]
    7e88:	4413      	add	r3, r2
    7e8a:	7b1b      	ldrb	r3, [r3, #12]
    7e8c:	f083 0301 	eor.w	r3, r3, #1
    7e90:	b2db      	uxtb	r3, r3
    7e92:	2b00      	cmp	r3, #0
    7e94:	d018      	beq.n	7ec8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    7e96:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7e9a:	4613      	mov	r3, r2
    7e9c:	00db      	lsls	r3, r3, #3
    7e9e:	4413      	add	r3, r2
    7ea0:	009b      	lsls	r3, r3, #2
    7ea2:	461a      	mov	r2, r3
    7ea4:	9b02      	ldr	r3, [sp, #8]
    7ea6:	4413      	add	r3, r2
    7ea8:	699b      	ldr	r3, [r3, #24]
    7eaa:	2b03      	cmp	r3, #3
    7eac:	d10c      	bne.n	7ec8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    7eae:	9b03      	ldr	r3, [sp, #12]
    7eb0:	785b      	ldrb	r3, [r3, #1]
    7eb2:	461a      	mov	r2, r3
    7eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7eb8:	4906      	ldr	r1, [pc, #24]	; (7ed4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    7eba:	0152      	lsls	r2, r2, #5
    7ebc:	4413      	add	r3, r2
    7ebe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7ec2:	4618      	mov	r0, r3
    7ec4:	f7f8 fd29 	bl	91a <CanIf_TxConfirmation>
            }
        }
    }
    7ec8:	bf00      	nop
    7eca:	b007      	add	sp, #28
    7ecc:	f85d fb04 	ldr.w	pc, [sp], #4
    7ed0:	1fff8f74 	.word	0x1fff8f74
    7ed4:	1fff8f34 	.word	0x1fff8f34

00007ed8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    7ed8:	b500      	push	{lr}
    7eda:	b08f      	sub	sp, #60	; 0x3c
    7edc:	9005      	str	r0, [sp, #20]
    7ede:	9104      	str	r1, [sp, #16]
    7ee0:	4613      	mov	r3, r2
    7ee2:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    7ee6:	2300      	movs	r3, #0
    7ee8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7eec:	2300      	movs	r3, #0
    7eee:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    7ef0:	2300      	movs	r3, #0
    7ef2:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    7ef4:	9b05      	ldr	r3, [sp, #20]
    7ef6:	785b      	ldrb	r3, [r3, #1]
    7ef8:	461a      	mov	r2, r3
    7efa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7efe:	493f      	ldr	r1, [pc, #252]	; (7ffc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    7f00:	0152      	lsls	r2, r2, #5
    7f02:	4413      	add	r3, r2
    7f04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7f08:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    7f0c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    7f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7f14:	4293      	cmp	r3, r2
    7f16:	d06c      	beq.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    7f18:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    7f1c:	4613      	mov	r3, r2
    7f1e:	00db      	lsls	r3, r3, #3
    7f20:	4413      	add	r3, r2
    7f22:	009b      	lsls	r3, r3, #2
    7f24:	461a      	mov	r2, r3
    7f26:	9b04      	ldr	r3, [sp, #16]
    7f28:	4413      	add	r3, r2
    7f2a:	7b1b      	ldrb	r3, [r3, #12]
    7f2c:	f083 0301 	eor.w	r3, r3, #1
    7f30:	b2db      	uxtb	r3, r3
    7f32:	2b00      	cmp	r3, #0
    7f34:	d05d      	beq.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    7f36:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    7f3a:	4613      	mov	r3, r2
    7f3c:	00db      	lsls	r3, r3, #3
    7f3e:	4413      	add	r3, r2
    7f40:	009b      	lsls	r3, r3, #2
    7f42:	461a      	mov	r2, r3
    7f44:	9b04      	ldr	r3, [sp, #16]
    7f46:	4413      	add	r3, r2
    7f48:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    7f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f4c:	699b      	ldr	r3, [r3, #24]
    7f4e:	2b00      	cmp	r3, #0
    7f50:	d118      	bne.n	7f84 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    7f52:	4a2b      	ldr	r2, [pc, #172]	; (8000 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    7f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f56:	7f1b      	ldrb	r3, [r3, #28]
    7f58:	011b      	lsls	r3, r3, #4
    7f5a:	4413      	add	r3, r2
    7f5c:	681b      	ldr	r3, [r3, #0]
    7f5e:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    7f60:	a906      	add	r1, sp, #24
    7f62:	a809      	add	r0, sp, #36	; 0x24
    7f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f66:	9300      	str	r3, [sp, #0]
    7f68:	9b05      	ldr	r3, [sp, #20]
    7f6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7f6c:	f7ff fc2e 	bl	77cc <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    7f70:	9b05      	ldr	r3, [sp, #20]
    7f72:	7898      	ldrb	r0, [r3, #2]
    7f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f76:	7f19      	ldrb	r1, [r3, #28]
    7f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f7a:	7b1b      	ldrb	r3, [r3, #12]
    7f7c:	2200      	movs	r2, #0
    7f7e:	f001 ff49 	bl	9e14 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    7f82:	e036      	b.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    7f84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f86:	699b      	ldr	r3, [r3, #24]
    7f88:	2b01      	cmp	r3, #1
    7f8a:	d132      	bne.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    7f8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f90:	2b07      	cmp	r3, #7
    7f92:	d10d      	bne.n	7fb0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    7f94:	2301      	movs	r3, #1
    7f96:	2208      	movs	r2, #8
    7f98:	2100      	movs	r1, #0
    7f9a:	2050      	movs	r0, #80	; 0x50
    7f9c:	f007 f97c 	bl	f298 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    7fa0:	9b05      	ldr	r3, [sp, #20]
    7fa2:	699b      	ldr	r3, [r3, #24]
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d024      	beq.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    7fa8:	9b05      	ldr	r3, [sp, #20]
    7faa:	699b      	ldr	r3, [r3, #24]
    7fac:	4798      	blx	r3
    }
    7fae:	e020      	b.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    7fb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7fb4:	2b06      	cmp	r3, #6
    7fb6:	d107      	bne.n	7fc8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    7fb8:	9b05      	ldr	r3, [sp, #20]
    7fba:	695b      	ldr	r3, [r3, #20]
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d018      	beq.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    7fc0:	9b05      	ldr	r3, [sp, #20]
    7fc2:	695b      	ldr	r3, [r3, #20]
    7fc4:	4798      	blx	r3
    }
    7fc6:	e014      	b.n	7ff2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    7fc8:	4a0d      	ldr	r2, [pc, #52]	; (8000 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    7fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7fcc:	7f1b      	ldrb	r3, [r3, #28]
    7fce:	011b      	lsls	r3, r3, #4
    7fd0:	4413      	add	r3, r2
    7fd2:	681b      	ldr	r3, [r3, #0]
    7fd4:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    7fd6:	a906      	add	r1, sp, #24
    7fd8:	a809      	add	r0, sp, #36	; 0x24
    7fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7fdc:	9300      	str	r3, [sp, #0]
    7fde:	9b05      	ldr	r3, [sp, #20]
    7fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7fe2:	f7ff fbf3 	bl	77cc <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    7fe6:	9b05      	ldr	r3, [sp, #20]
    7fe8:	789b      	ldrb	r3, [r3, #2]
    7fea:	2100      	movs	r1, #0
    7fec:	4618      	mov	r0, r3
    7fee:	f002 f80f 	bl	a010 <FlexCAN_Ip_RxFifo>
    }
    7ff2:	bf00      	nop
    7ff4:	b00f      	add	sp, #60	; 0x3c
    7ff6:	f85d fb04 	ldr.w	pc, [sp], #4
    7ffa:	bf00      	nop
    7ffc:	1fff8f74 	.word	0x1fff8f74
    8000:	1fff8d14 	.word	0x1fff8d14

00008004 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8004:	b510      	push	{r4, lr}
    8006:	b084      	sub	sp, #16
    8008:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    800a:	2301      	movs	r3, #1
    800c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    8010:	2300      	movs	r3, #0
    8012:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    8016:	2300      	movs	r3, #0
    8018:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    801c:	2300      	movs	r3, #0
    801e:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    8020:	2300      	movs	r3, #0
    8022:	f88d 300d 	strb.w	r3, [sp, #13]
#endif

#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = Can_pControllerConfig->Can_u16DefaultBaudrateID;
    8026:	9b01      	ldr	r3, [sp, #4]
    8028:	785b      	ldrb	r3, [r3, #1]
    802a:	461a      	mov	r2, r3
    802c:	9b01      	ldr	r3, [sp, #4]
    802e:	8b99      	ldrh	r1, [r3, #28]
    8030:	4b78      	ldr	r3, [pc, #480]	; (8214 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    8032:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    8036:	9b01      	ldr	r3, [sp, #4]
    8038:	7898      	ldrb	r0, [r3, #2]
    803a:	4977      	ldr	r1, [pc, #476]	; (8218 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    803c:	9b01      	ldr	r3, [sp, #4]
    803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8040:	681b      	ldr	r3, [r3, #0]
    8042:	461a      	mov	r2, r3
    8044:	f001 fdda 	bl	9bfc <FlexCAN_Ip_Init_Privileged>
    8048:	4603      	mov	r3, r0
    804a:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    804e:	9b01      	ldr	r3, [sp, #4]
    8050:	785b      	ldrb	r3, [r3, #1]
    8052:	461a      	mov	r2, r3
    8054:	4b71      	ldr	r3, [pc, #452]	; (821c <Can_43_FLEXCAN_Ipw_Init+0x218>)
    8056:	2101      	movs	r1, #1
    8058:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    805a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    805e:	2b00      	cmp	r3, #0
    8060:	d13b      	bne.n	80da <Can_43_FLEXCAN_Ipw_Init+0xd6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8062:	9b01      	ldr	r3, [sp, #4]
    8064:	789b      	ldrb	r3, [r3, #2]
    8066:	4618      	mov	r0, r3
    8068:	f003 f8fc 	bl	b264 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    806c:	9b01      	ldr	r3, [sp, #4]
    806e:	6a1a      	ldr	r2, [r3, #32]
    8070:	9b01      	ldr	r3, [sp, #4]
    8072:	8b9b      	ldrh	r3, [r3, #28]
    8074:	4619      	mov	r1, r3
    8076:	2316      	movs	r3, #22
    8078:	fb01 f303 	mul.w	r3, r1, r3
    807c:	4413      	add	r3, r2
    807e:	785b      	ldrb	r3, [r3, #1]
    8080:	2b00      	cmp	r3, #0
    8082:	d018      	beq.n	80b6 <Can_43_FLEXCAN_Ipw_Init+0xb2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    8084:	9b01      	ldr	r3, [sp, #4]
    8086:	7898      	ldrb	r0, [r3, #2]
    8088:	9b01      	ldr	r3, [sp, #4]
    808a:	6a1a      	ldr	r2, [r3, #32]
    808c:	9b01      	ldr	r3, [sp, #4]
    808e:	8b9b      	ldrh	r3, [r3, #28]
    8090:	4619      	mov	r1, r3
    8092:	2316      	movs	r3, #22
    8094:	fb01 f303 	mul.w	r3, r1, r3
    8098:	4413      	add	r3, r2
    809a:	7cd9      	ldrb	r1, [r3, #19]
    809c:	9b01      	ldr	r3, [sp, #4]
    809e:	6a1a      	ldr	r2, [r3, #32]
    80a0:	9b01      	ldr	r3, [sp, #4]
    80a2:	8b9b      	ldrh	r3, [r3, #28]
    80a4:	461c      	mov	r4, r3
    80a6:	2316      	movs	r3, #22
    80a8:	fb04 f303 	mul.w	r3, r4, r3
    80ac:	4413      	add	r3, r2
    80ae:	7d1b      	ldrb	r3, [r3, #20]
    80b0:	461a      	mov	r2, r3
    80b2:	f002 ffc5 	bl	b040 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    80b6:	9b01      	ldr	r3, [sp, #4]
    80b8:	7898      	ldrb	r0, [r3, #2]
    80ba:	9b01      	ldr	r3, [sp, #4]
    80bc:	6a1a      	ldr	r2, [r3, #32]
    80be:	9b01      	ldr	r3, [sp, #4]
    80c0:	8b9b      	ldrh	r3, [r3, #28]
    80c2:	4619      	mov	r1, r3
    80c4:	2316      	movs	r3, #22
    80c6:	fb01 f303 	mul.w	r3, r1, r3
    80ca:	4413      	add	r3, r2
    80cc:	7c9b      	ldrb	r3, [r3, #18]
    80ce:	4619      	mov	r1, r3
    80d0:	f003 f80a 	bl	b0e8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    80d4:	9801      	ldr	r0, [sp, #4]
    80d6:	f000 fbe5 	bl	88a4 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    80da:	2300      	movs	r3, #0
    80dc:	f88d 300d 	strb.w	r3, [sp, #13]
    80e0:	e010      	b.n	8104 <Can_43_FLEXCAN_Ipw_Init+0x100>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    80e2:	9b01      	ldr	r3, [sp, #4]
    80e4:	785b      	ldrb	r3, [r3, #1]
    80e6:	461a      	mov	r2, r3
    80e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    80ec:	494c      	ldr	r1, [pc, #304]	; (8220 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    80ee:	0152      	lsls	r2, r2, #5
    80f0:	4413      	add	r3, r2
    80f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    80f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    80fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    80fe:	3301      	adds	r3, #1
    8100:	f88d 300d 	strb.w	r3, [sp, #13]
    8104:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8108:	2b1f      	cmp	r3, #31
    810a:	d9ea      	bls.n	80e2 <Can_43_FLEXCAN_Ipw_Init+0xde>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    810c:	2300      	movs	r3, #0
    810e:	f88d 300f 	strb.w	r3, [sp, #15]
    8112:	e06b      	b.n	81ec <Can_43_FLEXCAN_Ipw_Init+0x1e8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    8114:	9b01      	ldr	r3, [sp, #4]
    8116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8118:	f89d 300f 	ldrb.w	r3, [sp, #15]
    811c:	009b      	lsls	r3, r3, #2
    811e:	4413      	add	r3, r2
    8120:	681b      	ldr	r3, [r3, #0]
    8122:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    8124:	9b02      	ldr	r3, [sp, #8]
    8126:	699b      	ldr	r3, [r3, #24]
    8128:	2b03      	cmp	r3, #3
    812a:	d006      	beq.n	813a <Can_43_FLEXCAN_Ipw_Init+0x136>
    812c:	2b03      	cmp	r3, #3
    812e:	d857      	bhi.n	81e0 <Can_43_FLEXCAN_Ipw_Init+0x1dc>
    8130:	2b00      	cmp	r3, #0
    8132:	d023      	beq.n	817c <Can_43_FLEXCAN_Ipw_Init+0x178>
    8134:	2b01      	cmp	r3, #1
    8136:	d02f      	beq.n	8198 <Can_43_FLEXCAN_Ipw_Init+0x194>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    8138:	e052      	b.n	81e0 <Can_43_FLEXCAN_Ipw_Init+0x1dc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    813a:	2300      	movs	r3, #0
    813c:	f88d 300e 	strb.w	r3, [sp, #14]
    8140:	e015      	b.n	816e <Can_43_FLEXCAN_Ipw_Init+0x16a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    8142:	9b01      	ldr	r3, [sp, #4]
    8144:	785b      	ldrb	r3, [r3, #1]
    8146:	461c      	mov	r4, r3
    8148:	9b02      	ldr	r3, [sp, #8]
    814a:	7f1b      	ldrb	r3, [r3, #28]
    814c:	461a      	mov	r2, r3
    814e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8152:	4413      	add	r3, r2
    8154:	9a02      	ldr	r2, [sp, #8]
    8156:	8810      	ldrh	r0, [r2, #0]
    8158:	4931      	ldr	r1, [pc, #196]	; (8220 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    815a:	0162      	lsls	r2, r4, #5
    815c:	4413      	add	r3, r2
    815e:	4602      	mov	r2, r0
    8160:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    8164:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8168:	3301      	adds	r3, #1
    816a:	f88d 300e 	strb.w	r3, [sp, #14]
    816e:	9b02      	ldr	r3, [sp, #8]
    8170:	7b9b      	ldrb	r3, [r3, #14]
    8172:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8176:	429a      	cmp	r2, r3
    8178:	d3e3      	bcc.n	8142 <Can_43_FLEXCAN_Ipw_Init+0x13e>
                break;
    817a:	e032      	b.n	81e2 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    817c:	9b01      	ldr	r3, [sp, #4]
    817e:	785b      	ldrb	r3, [r3, #1]
    8180:	461c      	mov	r4, r3
    8182:	9b02      	ldr	r3, [sp, #8]
    8184:	7f1b      	ldrb	r3, [r3, #28]
    8186:	4618      	mov	r0, r3
    8188:	9b02      	ldr	r3, [sp, #8]
    818a:	8819      	ldrh	r1, [r3, #0]
    818c:	4a24      	ldr	r2, [pc, #144]	; (8220 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    818e:	0163      	lsls	r3, r4, #5
    8190:	4403      	add	r3, r0
    8192:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    8196:	e024      	b.n	81e2 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    8198:	9b01      	ldr	r3, [sp, #4]
    819a:	785b      	ldrb	r3, [r3, #1]
    819c:	461c      	mov	r4, r3
    819e:	9b02      	ldr	r3, [sp, #8]
    81a0:	7f1b      	ldrb	r3, [r3, #28]
    81a2:	4618      	mov	r0, r3
    81a4:	9b02      	ldr	r3, [sp, #8]
    81a6:	8819      	ldrh	r1, [r3, #0]
    81a8:	4a1d      	ldr	r2, [pc, #116]	; (8220 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    81aa:	0163      	lsls	r3, r4, #5
    81ac:	4403      	add	r3, r0
    81ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    81b2:	9b01      	ldr	r3, [sp, #4]
    81b4:	785b      	ldrb	r3, [r3, #1]
    81b6:	4618      	mov	r0, r3
    81b8:	9b02      	ldr	r3, [sp, #8]
    81ba:	8819      	ldrh	r1, [r3, #0]
    81bc:	4a18      	ldr	r2, [pc, #96]	; (8220 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    81be:	0183      	lsls	r3, r0, #6
    81c0:	4413      	add	r3, r2
    81c2:	330c      	adds	r3, #12
    81c4:	460a      	mov	r2, r1
    81c6:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    81c8:	9b01      	ldr	r3, [sp, #4]
    81ca:	785b      	ldrb	r3, [r3, #1]
    81cc:	4618      	mov	r0, r3
    81ce:	9b02      	ldr	r3, [sp, #8]
    81d0:	8819      	ldrh	r1, [r3, #0]
    81d2:	4a13      	ldr	r2, [pc, #76]	; (8220 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    81d4:	0183      	lsls	r3, r0, #6
    81d6:	4413      	add	r3, r2
    81d8:	330e      	adds	r3, #14
    81da:	460a      	mov	r2, r1
    81dc:	801a      	strh	r2, [r3, #0]
                break;
    81de:	e000      	b.n	81e2 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                break;
    81e0:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    81e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81e6:	3301      	adds	r3, #1
    81e8:	f88d 300f 	strb.w	r3, [sp, #15]
    81ec:	9b01      	ldr	r3, [sp, #4]
    81ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    81f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    81f6:	429a      	cmp	r2, r3
    81f8:	d38c      	bcc.n	8114 <Can_43_FLEXCAN_Ipw_Init+0x110>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    81fa:	9b01      	ldr	r3, [sp, #4]
    81fc:	789b      	ldrb	r3, [r3, #2]
    81fe:	4618      	mov	r0, r3
    8200:	f002 fd80 	bl	ad04 <FlexCAN_Ip_SetStopMode_Privileged>
    8204:	4603      	mov	r3, r0
    8206:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    820a:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    820e:	4618      	mov	r0, r3
    8210:	b004      	add	sp, #16
    8212:	bd10      	pop	{r4, pc}
    8214:	1fff8fb4 	.word	0x1fff8fb4
    8218:	1fff8d14 	.word	0x1fff8d14
    821c:	1fff8fb8 	.word	0x1fff8fb8
    8220:	1fff8f74 	.word	0x1fff8f74

00008224 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8224:	b500      	push	{lr}
    8226:	b083      	sub	sp, #12
    8228:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    822a:	9b01      	ldr	r3, [sp, #4]
    822c:	789b      	ldrb	r3, [r3, #2]
    822e:	4618      	mov	r0, r3
    8230:	f002 fbd4 	bl	a9dc <FlexCAN_Ip_Deinit_Privileged>
}
    8234:	bf00      	nop
    8236:	b003      	add	sp, #12
    8238:	f85d fb04 	ldr.w	pc, [sp], #4

0000823c <Can_43_FLEXCAN_Ipw_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_Ipw_SetBaudrate
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        uint16 BaudRateConfigID
    )
    {
    823c:	b510      	push	{r4, lr}
    823e:	b088      	sub	sp, #32
    8240:	9001      	str	r0, [sp, #4]
    8242:	460b      	mov	r3, r1
    8244:	f8ad 3002 	strh.w	r3, [sp, #2]
        Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8248:	2301      	movs	r3, #1
    824a:	9307      	str	r3, [sp, #28]
        Flexcan_Ip_TimeSegmentType FlexCANTimeSeg;

        eRetVal = FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset);
    824c:	9b01      	ldr	r3, [sp, #4]
    824e:	789b      	ldrb	r3, [r3, #2]
    8250:	4618      	mov	r0, r3
    8252:	f002 fb01 	bl	a858 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    8256:	9007      	str	r0, [sp, #28]
        if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8258:	9b07      	ldr	r3, [sp, #28]
    825a:	2b00      	cmp	r3, #0
    825c:	f040 80bb 	bne.w	83d6 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
        {
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    8260:	9b01      	ldr	r3, [sp, #4]
    8262:	6a1a      	ldr	r2, [r3, #32]
    8264:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8268:	2116      	movs	r1, #22
    826a:	fb01 f303 	mul.w	r3, r1, r3
    826e:	4413      	add	r3, r2
    8270:	88db      	ldrh	r3, [r3, #6]
    8272:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    8274:	9b01      	ldr	r3, [sp, #4]
    8276:	6a1a      	ldr	r2, [r3, #32]
    8278:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    827c:	2116      	movs	r1, #22
    827e:	fb01 f303 	mul.w	r3, r1, r3
    8282:	4413      	add	r3, r2
    8284:	789b      	ldrb	r3, [r3, #2]
    8286:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    8288:	9b01      	ldr	r3, [sp, #4]
    828a:	6a1a      	ldr	r2, [r3, #32]
    828c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8290:	2116      	movs	r1, #22
    8292:	fb01 f303 	mul.w	r3, r1, r3
    8296:	4413      	add	r3, r2
    8298:	78db      	ldrb	r3, [r3, #3]
    829a:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    829c:	9b01      	ldr	r3, [sp, #4]
    829e:	6a1a      	ldr	r2, [r3, #32]
    82a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82a4:	2116      	movs	r1, #22
    82a6:	fb01 f303 	mul.w	r3, r1, r3
    82aa:	4413      	add	r3, r2
    82ac:	791b      	ldrb	r3, [r3, #4]
    82ae:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    82b0:	9b01      	ldr	r3, [sp, #4]
    82b2:	6a1a      	ldr	r2, [r3, #32]
    82b4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82b8:	2116      	movs	r1, #22
    82ba:	fb01 f303 	mul.w	r3, r1, r3
    82be:	4413      	add	r3, r2
    82c0:	7a1b      	ldrb	r3, [r3, #8]
    82c2:	9306      	str	r3, [sp, #24]

            
            (void)FlexCAN_Ip_SetBitrate(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    82c4:	9b01      	ldr	r3, [sp, #4]
    82c6:	789b      	ldrb	r3, [r3, #2]
    82c8:	a902      	add	r1, sp, #8
    82ca:	2200      	movs	r2, #0
    82cc:	4618      	mov	r0, r3
    82ce:	f002 fd83 	bl	add8 <FlexCAN_Ip_SetBitrate_Privileged>
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    82d2:	9b01      	ldr	r3, [sp, #4]
    82d4:	6a1a      	ldr	r2, [r3, #32]
    82d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82da:	2116      	movs	r1, #22
    82dc:	fb01 f303 	mul.w	r3, r1, r3
    82e0:	4413      	add	r3, r2
    82e2:	89db      	ldrh	r3, [r3, #14]
    82e4:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            if (TRUE == Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    82e6:	9b01      	ldr	r3, [sp, #4]
    82e8:	6a1a      	ldr	r2, [r3, #32]
    82ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82ee:	2116      	movs	r1, #22
    82f0:	fb01 f303 	mul.w	r3, r1, r3
    82f4:	4413      	add	r3, r2
    82f6:	785b      	ldrb	r3, [r3, #1]
    82f8:	2b00      	cmp	r3, #0
    82fa:	d04d      	beq.n	8398 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x15c>
            {
                FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    82fc:	9b01      	ldr	r3, [sp, #4]
    82fe:	6a1a      	ldr	r2, [r3, #32]
    8300:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8304:	2116      	movs	r1, #22
    8306:	fb01 f303 	mul.w	r3, r1, r3
    830a:	4413      	add	r3, r2
    830c:	7a9b      	ldrb	r3, [r3, #10]
    830e:	9302      	str	r3, [sp, #8]
                FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    8310:	9b01      	ldr	r3, [sp, #4]
    8312:	6a1a      	ldr	r2, [r3, #32]
    8314:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8318:	2116      	movs	r1, #22
    831a:	fb01 f303 	mul.w	r3, r1, r3
    831e:	4413      	add	r3, r2
    8320:	7adb      	ldrb	r3, [r3, #11]
    8322:	9303      	str	r3, [sp, #12]
                FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    8324:	9b01      	ldr	r3, [sp, #4]
    8326:	6a1a      	ldr	r2, [r3, #32]
    8328:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    832c:	2116      	movs	r1, #22
    832e:	fb01 f303 	mul.w	r3, r1, r3
    8332:	4413      	add	r3, r2
    8334:	7b1b      	ldrb	r3, [r3, #12]
    8336:	9304      	str	r3, [sp, #16]
                FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    8338:	9b01      	ldr	r3, [sp, #4]
    833a:	6a1a      	ldr	r2, [r3, #32]
    833c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8340:	2116      	movs	r1, #22
    8342:	fb01 f303 	mul.w	r3, r1, r3
    8346:	4413      	add	r3, r2
    8348:	7c1b      	ldrb	r3, [r3, #16]
    834a:	9306      	str	r3, [sp, #24]

                (void)FlexCAN_Ip_SetBitrateCbt(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    834c:	9b01      	ldr	r3, [sp, #4]
    834e:	7898      	ldrb	r0, [r3, #2]
    8350:	9b01      	ldr	r3, [sp, #4]
    8352:	6a1a      	ldr	r2, [r3, #32]
    8354:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8358:	2116      	movs	r1, #22
    835a:	fb01 f303 	mul.w	r3, r1, r3
    835e:	4413      	add	r3, r2
    8360:	781a      	ldrb	r2, [r3, #0]
    8362:	ab02      	add	r3, sp, #8
    8364:	4619      	mov	r1, r3
    8366:	f002 fe01 	bl	af6c <FlexCAN_Ip_SetBitrateCbt_Privileged>

                (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    836a:	9b01      	ldr	r3, [sp, #4]
    836c:	7898      	ldrb	r0, [r3, #2]
    836e:	9b01      	ldr	r3, [sp, #4]
    8370:	6a1a      	ldr	r2, [r3, #32]
    8372:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8376:	2116      	movs	r1, #22
    8378:	fb01 f303 	mul.w	r3, r1, r3
    837c:	4413      	add	r3, r2
    837e:	7cd9      	ldrb	r1, [r3, #19]
    8380:	9b01      	ldr	r3, [sp, #4]
    8382:	6a1a      	ldr	r2, [r3, #32]
    8384:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8388:	2416      	movs	r4, #22
    838a:	fb04 f303 	mul.w	r3, r4, r3
    838e:	4413      	add	r3, r2
    8390:	7d1b      	ldrb	r3, [r3, #20]
    8392:	461a      	mov	r2, r3
    8394:	f002 fe54 	bl	b040 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset \
                                            );
            }

            (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    8398:	9b01      	ldr	r3, [sp, #4]
    839a:	7898      	ldrb	r0, [r3, #2]
    839c:	9b01      	ldr	r3, [sp, #4]
    839e:	6a1a      	ldr	r2, [r3, #32]
    83a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    83a4:	2116      	movs	r1, #22
    83a6:	fb01 f303 	mul.w	r3, r1, r3
    83aa:	4413      	add	r3, r2
    83ac:	7c9b      	ldrb	r3, [r3, #18]
    83ae:	4619      	mov	r1, r3
    83b0:	f002 fe9a 	bl	b0e8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>

            eRetVal = FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    83b4:	9b01      	ldr	r3, [sp, #4]
    83b6:	789b      	ldrb	r3, [r3, #2]
    83b8:	4618      	mov	r0, r3
    83ba:	f002 fca3 	bl	ad04 <FlexCAN_Ip_SetStopMode_Privileged>
    83be:	9007      	str	r0, [sp, #28]
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    83c0:	9b07      	ldr	r3, [sp, #28]
    83c2:	2b00      	cmp	r3, #0
    83c4:	d107      	bne.n	83d6 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
            {
                Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = BaudRateConfigID;
    83c6:	9b01      	ldr	r3, [sp, #4]
    83c8:	785b      	ldrb	r3, [r3, #1]
    83ca:	4619      	mov	r1, r3
    83cc:	4a06      	ldr	r2, [pc, #24]	; (83e8 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x1ac>)
    83ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    83d2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            }
        }
        return ((FLEXCAN_STATUS_SUCCESS == eRetVal) ? ((Std_ReturnType)E_OK) : ((Std_ReturnType)E_NOT_OK));
    83d6:	9b07      	ldr	r3, [sp, #28]
    83d8:	2b00      	cmp	r3, #0
    83da:	bf14      	ite	ne
    83dc:	2301      	movne	r3, #1
    83de:	2300      	moveq	r3, #0
    83e0:	b2db      	uxtb	r3, r3
    }
    83e2:	4618      	mov	r0, r3
    83e4:	b008      	add	sp, #32
    83e6:	bd10      	pop	{r4, pc}
    83e8:	1fff8fb4 	.word	0x1fff8fb4

000083ec <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    83ec:	b500      	push	{lr}
    83ee:	b085      	sub	sp, #20
    83f0:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    83f2:	2300      	movs	r3, #0
    83f4:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    83f6:	9b01      	ldr	r3, [sp, #4]
    83f8:	785b      	ldrb	r3, [r3, #1]
    83fa:	461a      	mov	r2, r3
    83fc:	4b11      	ldr	r3, [pc, #68]	; (8444 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    83fe:	5c9b      	ldrb	r3, [r3, r2]
    8400:	2b00      	cmp	r3, #0
    8402:	d012      	beq.n	842a <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8404:	9b01      	ldr	r3, [sp, #4]
    8406:	7a5b      	ldrb	r3, [r3, #9]
    8408:	f083 0301 	eor.w	r3, r3, #1
    840c:	b2db      	uxtb	r3, r3
    840e:	2b00      	cmp	r3, #0
    8410:	d006      	beq.n	8420 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    8412:	9b01      	ldr	r3, [sp, #4]
    8414:	789b      	ldrb	r3, [r3, #2]
    8416:	2201      	movs	r2, #1
    8418:	2104      	movs	r1, #4
    841a:	4618      	mov	r0, r3
    841c:	f002 ff4e 	bl	b2bc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8420:	9b01      	ldr	r3, [sp, #4]
    8422:	789b      	ldrb	r3, [r3, #2]
    8424:	4618      	mov	r0, r3
    8426:	f002 feef 	bl	b208 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    842a:	9b01      	ldr	r3, [sp, #4]
    842c:	789b      	ldrb	r3, [r3, #2]
    842e:	4618      	mov	r0, r3
    8430:	f002 fc48 	bl	acc4 <FlexCAN_Ip_SetStartMode_Privileged>
    8434:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    8436:	9b03      	ldr	r3, [sp, #12]
    8438:	b2db      	uxtb	r3, r3
}
    843a:	4618      	mov	r0, r3
    843c:	b005      	add	sp, #20
    843e:	f85d fb04 	ldr.w	pc, [sp], #4
    8442:	bf00      	nop
    8444:	1fff8fb8 	.word	0x1fff8fb8

00008448 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8448:	b500      	push	{lr}
    844a:	b087      	sub	sp, #28
    844c:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    844e:	2300      	movs	r3, #0
    8450:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    8454:	2300      	movs	r3, #0
    8456:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    8458:	9b01      	ldr	r3, [sp, #4]
    845a:	7898      	ldrb	r0, [r3, #2]
    845c:	4930      	ldr	r1, [pc, #192]	; (8520 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    845e:	9b01      	ldr	r3, [sp, #4]
    8460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	461a      	mov	r2, r3
    8466:	f001 fbc9 	bl	9bfc <FlexCAN_Ip_Init_Privileged>
    846a:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    846c:	9b04      	ldr	r3, [sp, #16]
    846e:	2b00      	cmp	r3, #0
    8470:	d14f      	bne.n	8512 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8472:	9b01      	ldr	r3, [sp, #4]
    8474:	789b      	ldrb	r3, [r3, #2]
    8476:	4618      	mov	r0, r3
    8478:	f002 fef4 	bl	b264 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    847c:	9801      	ldr	r0, [sp, #4]
    847e:	f7ff fc25 	bl	7ccc <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    8482:	9801      	ldr	r0, [sp, #4]
    8484:	f000 fa0e 	bl	88a4 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8488:	2300      	movs	r3, #0
    848a:	f88d 3017 	strb.w	r3, [sp, #23]
    848e:	e02f      	b.n	84f0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    8490:	9b01      	ldr	r3, [sp, #4]
    8492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8494:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8498:	009b      	lsls	r3, r3, #2
    849a:	4413      	add	r3, r2
    849c:	681b      	ldr	r3, [r3, #0]
    849e:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    84a0:	9b03      	ldr	r3, [sp, #12]
    84a2:	7b1b      	ldrb	r3, [r3, #12]
    84a4:	f083 0301 	eor.w	r3, r3, #1
    84a8:	b2db      	uxtb	r3, r3
    84aa:	2b00      	cmp	r3, #0
    84ac:	d018      	beq.n	84e0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    84ae:	9b03      	ldr	r3, [sp, #12]
    84b0:	699b      	ldr	r3, [r3, #24]
    84b2:	2b00      	cmp	r3, #0
    84b4:	d003      	beq.n	84be <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    84b6:	3b01      	subs	r3, #1
    84b8:	2b01      	cmp	r3, #1
    84ba:	d813      	bhi.n	84e4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    84bc:	e009      	b.n	84d2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    84be:	9b01      	ldr	r3, [sp, #4]
    84c0:	7898      	ldrb	r0, [r3, #2]
    84c2:	9b03      	ldr	r3, [sp, #12]
    84c4:	7f19      	ldrb	r1, [r3, #28]
    84c6:	9b03      	ldr	r3, [sp, #12]
    84c8:	7b1b      	ldrb	r3, [r3, #12]
    84ca:	2200      	movs	r2, #0
    84cc:	f001 fca2 	bl	9e14 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    84d0:	e009      	b.n	84e6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    84d2:	9b01      	ldr	r3, [sp, #4]
    84d4:	789b      	ldrb	r3, [r3, #2]
    84d6:	2100      	movs	r1, #0
    84d8:	4618      	mov	r0, r3
    84da:	f001 fd99 	bl	a010 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    84de:	e002      	b.n	84e6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    84e0:	bf00      	nop
    84e2:	e000      	b.n	84e6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    84e4:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    84e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    84ea:	3301      	adds	r3, #1
    84ec:	f88d 3017 	strb.w	r3, [sp, #23]
    84f0:	9b01      	ldr	r3, [sp, #4]
    84f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    84f6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    84fa:	429a      	cmp	r2, r3
    84fc:	d3c8      	bcc.n	8490 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    84fe:	9801      	ldr	r0, [sp, #4]
    8500:	f7ff ff74 	bl	83ec <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    8504:	4603      	mov	r3, r0
    8506:	2b00      	cmp	r3, #0
    8508:	bf14      	ite	ne
    850a:	2301      	movne	r3, #1
    850c:	2300      	moveq	r3, #0
    850e:	b2db      	uxtb	r3, r3
    8510:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    8512:	9b04      	ldr	r3, [sp, #16]
    8514:	b2db      	uxtb	r3, r3
}
    8516:	4618      	mov	r0, r3
    8518:	b007      	add	sp, #28
    851a:	f85d fb04 	ldr.w	pc, [sp], #4
    851e:	bf00      	nop
    8520:	1fff8d14 	.word	0x1fff8d14

00008524 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8524:	b500      	push	{lr}
    8526:	b085      	sub	sp, #20
    8528:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    852a:	2300      	movs	r3, #0
    852c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    8530:	2300      	movs	r3, #0
    8532:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8536:	9b01      	ldr	r3, [sp, #4]
    8538:	789b      	ldrb	r3, [r3, #2]
    853a:	4618      	mov	r0, r3
    853c:	f002 f98c 	bl	a858 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    8540:	4603      	mov	r3, r0
    8542:	2b00      	cmp	r3, #0
    8544:	d160      	bne.n	8608 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8546:	9b01      	ldr	r3, [sp, #4]
    8548:	785b      	ldrb	r3, [r3, #1]
    854a:	461a      	mov	r2, r3
    854c:	4b33      	ldr	r3, [pc, #204]	; (861c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    854e:	5c9b      	ldrb	r3, [r3, r2]
    8550:	2b00      	cmp	r3, #0
    8552:	d012      	beq.n	857a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8554:	9b01      	ldr	r3, [sp, #4]
    8556:	789b      	ldrb	r3, [r3, #2]
    8558:	4618      	mov	r0, r3
    855a:	f002 fe83 	bl	b264 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    855e:	9b01      	ldr	r3, [sp, #4]
    8560:	7a5b      	ldrb	r3, [r3, #9]
    8562:	f083 0301 	eor.w	r3, r3, #1
    8566:	b2db      	uxtb	r3, r3
    8568:	2b00      	cmp	r3, #0
    856a:	d006      	beq.n	857a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    856c:	9b01      	ldr	r3, [sp, #4]
    856e:	789b      	ldrb	r3, [r3, #2]
    8570:	2200      	movs	r2, #0
    8572:	2104      	movs	r1, #4
    8574:	4618      	mov	r0, r3
    8576:	f002 fea1 	bl	b2bc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    857a:	2300      	movs	r3, #0
    857c:	f88d 300e 	strb.w	r3, [sp, #14]
    8580:	e032      	b.n	85e8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    8582:	9b01      	ldr	r3, [sp, #4]
    8584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8586:	f89d 300e 	ldrb.w	r3, [sp, #14]
    858a:	009b      	lsls	r3, r3, #2
    858c:	4413      	add	r3, r2
    858e:	681b      	ldr	r3, [r3, #0]
    8590:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8592:	9b02      	ldr	r3, [sp, #8]
    8594:	699b      	ldr	r3, [r3, #24]
    8596:	2b03      	cmp	r3, #3
    8598:	d119      	bne.n	85ce <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    859a:	2300      	movs	r3, #0
    859c:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    85a0:	9b01      	ldr	r3, [sp, #4]
    85a2:	7898      	ldrb	r0, [r3, #2]
    85a4:	9b02      	ldr	r3, [sp, #8]
    85a6:	7f1a      	ldrb	r2, [r3, #28]
    85a8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    85ac:	4413      	add	r3, r2
    85ae:	b2db      	uxtb	r3, r3
    85b0:	4619      	mov	r1, r3
    85b2:	f002 ff09 	bl	b3c8 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    85b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    85ba:	3301      	adds	r3, #1
    85bc:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    85c0:	9b02      	ldr	r3, [sp, #8]
    85c2:	7b9b      	ldrb	r3, [r3, #14]
    85c4:	f89d 200d 	ldrb.w	r2, [sp, #13]
    85c8:	429a      	cmp	r2, r3
    85ca:	d3e9      	bcc.n	85a0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    85cc:	e007      	b.n	85de <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    85ce:	9b01      	ldr	r3, [sp, #4]
    85d0:	789a      	ldrb	r2, [r3, #2]
    85d2:	9b02      	ldr	r3, [sp, #8]
    85d4:	7f1b      	ldrb	r3, [r3, #28]
    85d6:	4619      	mov	r1, r3
    85d8:	4610      	mov	r0, r2
    85da:	f002 fef5 	bl	b3c8 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    85de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    85e2:	3301      	adds	r3, #1
    85e4:	f88d 300e 	strb.w	r3, [sp, #14]
    85e8:	9b01      	ldr	r3, [sp, #4]
    85ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    85ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
    85f2:	429a      	cmp	r2, r3
    85f4:	d3c5      	bcc.n	8582 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    85f6:	9b01      	ldr	r3, [sp, #4]
    85f8:	789b      	ldrb	r3, [r3, #2]
    85fa:	4618      	mov	r0, r3
    85fc:	f002 fb82 	bl	ad04 <FlexCAN_Ip_SetStopMode_Privileged>
    8600:	4603      	mov	r3, r0
    8602:	f88d 300f 	strb.w	r3, [sp, #15]
    8606:	e002      	b.n	860e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    8608:	2301      	movs	r3, #1
    860a:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    860e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8612:	4618      	mov	r0, r3
    8614:	b005      	add	sp, #20
    8616:	f85d fb04 	ldr.w	pc, [sp], #4
    861a:	bf00      	nop
    861c:	1fff8fb8 	.word	0x1fff8fb8

00008620 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8620:	b500      	push	{lr}
    8622:	b083      	sub	sp, #12
    8624:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8626:	9b01      	ldr	r3, [sp, #4]
    8628:	785b      	ldrb	r3, [r3, #1]
    862a:	461a      	mov	r2, r3
    862c:	4b10      	ldr	r3, [pc, #64]	; (8670 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    862e:	5c9b      	ldrb	r3, [r3, r2]
    8630:	2b00      	cmp	r3, #0
    8632:	d018      	beq.n	8666 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8634:	9b01      	ldr	r3, [sp, #4]
    8636:	789b      	ldrb	r3, [r3, #2]
    8638:	4618      	mov	r0, r3
    863a:	f002 fe13 	bl	b264 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    863e:	9b01      	ldr	r3, [sp, #4]
    8640:	785b      	ldrb	r3, [r3, #1]
    8642:	461a      	mov	r2, r3
    8644:	4b0a      	ldr	r3, [pc, #40]	; (8670 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8646:	2100      	movs	r1, #0
    8648:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    864a:	9b01      	ldr	r3, [sp, #4]
    864c:	7a5b      	ldrb	r3, [r3, #9]
    864e:	f083 0301 	eor.w	r3, r3, #1
    8652:	b2db      	uxtb	r3, r3
    8654:	2b00      	cmp	r3, #0
    8656:	d006      	beq.n	8666 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    8658:	9b01      	ldr	r3, [sp, #4]
    865a:	789b      	ldrb	r3, [r3, #2]
    865c:	2200      	movs	r2, #0
    865e:	2104      	movs	r1, #4
    8660:	4618      	mov	r0, r3
    8662:	f002 fe2b 	bl	b2bc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    8666:	bf00      	nop
    8668:	b003      	add	sp, #12
    866a:	f85d fb04 	ldr.w	pc, [sp], #4
    866e:	bf00      	nop
    8670:	1fff8fb8 	.word	0x1fff8fb8

00008674 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8674:	b500      	push	{lr}
    8676:	b083      	sub	sp, #12
    8678:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    867a:	9b01      	ldr	r3, [sp, #4]
    867c:	785b      	ldrb	r3, [r3, #1]
    867e:	461a      	mov	r2, r3
    8680:	4b11      	ldr	r3, [pc, #68]	; (86c8 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    8682:	5c9b      	ldrb	r3, [r3, r2]
    8684:	f083 0301 	eor.w	r3, r3, #1
    8688:	b2db      	uxtb	r3, r3
    868a:	2b00      	cmp	r3, #0
    868c:	d018      	beq.n	86c0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    868e:	9b01      	ldr	r3, [sp, #4]
    8690:	789b      	ldrb	r3, [r3, #2]
    8692:	4618      	mov	r0, r3
    8694:	f002 fdb8 	bl	b208 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8698:	9b01      	ldr	r3, [sp, #4]
    869a:	7a5b      	ldrb	r3, [r3, #9]
    869c:	f083 0301 	eor.w	r3, r3, #1
    86a0:	b2db      	uxtb	r3, r3
    86a2:	2b00      	cmp	r3, #0
    86a4:	d006      	beq.n	86b4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    86a6:	9b01      	ldr	r3, [sp, #4]
    86a8:	789b      	ldrb	r3, [r3, #2]
    86aa:	2201      	movs	r2, #1
    86ac:	2104      	movs	r1, #4
    86ae:	4618      	mov	r0, r3
    86b0:	f002 fe04 	bl	b2bc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    86b4:	9b01      	ldr	r3, [sp, #4]
    86b6:	785b      	ldrb	r3, [r3, #1]
    86b8:	461a      	mov	r2, r3
    86ba:	4b03      	ldr	r3, [pc, #12]	; (86c8 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    86bc:	2101      	movs	r1, #1
    86be:	5499      	strb	r1, [r3, r2]
    }
}
    86c0:	bf00      	nop
    86c2:	b003      	add	sp, #12
    86c4:	f85d fb04 	ldr.w	pc, [sp], #4
    86c8:	1fff8fb8 	.word	0x1fff8fb8

000086cc <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    86cc:	b500      	push	{lr}
    86ce:	b085      	sub	sp, #20
    86d0:	9001      	str	r0, [sp, #4]
    86d2:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    86d4:	2300      	movs	r3, #0
    86d6:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    86d8:	9b01      	ldr	r3, [sp, #4]
    86da:	789b      	ldrb	r3, [r3, #2]
    86dc:	4618      	mov	r0, r3
    86de:	f001 fe87 	bl	a3f0 <FlexCAN_Ip_GetErrorStatus>
    86e2:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    86e4:	9b03      	ldr	r3, [sp, #12]
    86e6:	091b      	lsrs	r3, r3, #4
    86e8:	b2db      	uxtb	r3, r3
    86ea:	f003 0303 	and.w	r3, r3, #3
    86ee:	b2da      	uxtb	r2, r3
    86f0:	9b00      	ldr	r3, [sp, #0]
    86f2:	701a      	strb	r2, [r3, #0]
    return E_OK;
    86f4:	2300      	movs	r3, #0
}
    86f6:	4618      	mov	r0, r3
    86f8:	b005      	add	sp, #20
    86fa:	f85d fb04 	ldr.w	pc, [sp], #4

000086fe <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    86fe:	b500      	push	{lr}
    8700:	b083      	sub	sp, #12
    8702:	9001      	str	r0, [sp, #4]
    8704:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8706:	9b01      	ldr	r3, [sp, #4]
    8708:	789b      	ldrb	r3, [r3, #2]
    870a:	4618      	mov	r0, r3
    870c:	f001 fe82 	bl	a414 <FlexCAN_Ip_GetControllerTxErrorCounter>
    8710:	4603      	mov	r3, r0
    8712:	461a      	mov	r2, r3
    8714:	9b00      	ldr	r3, [sp, #0]
    8716:	701a      	strb	r2, [r3, #0]
     return E_OK;
    8718:	2300      	movs	r3, #0
}
    871a:	4618      	mov	r0, r3
    871c:	b003      	add	sp, #12
    871e:	f85d fb04 	ldr.w	pc, [sp], #4

00008722 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8722:	b500      	push	{lr}
    8724:	b083      	sub	sp, #12
    8726:	9001      	str	r0, [sp, #4]
    8728:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    872a:	9b01      	ldr	r3, [sp, #4]
    872c:	789b      	ldrb	r3, [r3, #2]
    872e:	4618      	mov	r0, r3
    8730:	f001 fe82 	bl	a438 <FlexCAN_Ip_GetControllerRxErrorCounter>
    8734:	4603      	mov	r3, r0
    8736:	461a      	mov	r2, r3
    8738:	9b00      	ldr	r3, [sp, #0]
    873a:	701a      	strb	r2, [r3, #0]
    return E_OK;
    873c:	2300      	movs	r3, #0
}
    873e:	4618      	mov	r0, r3
    8740:	b003      	add	sp, #12
    8742:	f85d fb04 	ldr.w	pc, [sp], #4

00008746 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    8746:	b510      	push	{r4, lr}
    8748:	b08c      	sub	sp, #48	; 0x30
    874a:	9005      	str	r0, [sp, #20]
    874c:	9104      	str	r1, [sp, #16]
    874e:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8750:	2301      	movs	r3, #1
    8752:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    8754:	2300      	movs	r3, #0
    8756:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    875a:	2300      	movs	r3, #0
    875c:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    875e:	2300      	movs	r3, #0
    8760:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    8762:	2300      	movs	r3, #0
    8764:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    8768:	2300      	movs	r3, #0
    876a:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    876e:	2300      	movs	r3, #0
    8770:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    8774:	2300      	movs	r3, #0
    8776:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    877a:	2300      	movs	r3, #0
    877c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    8780:	9b04      	ldr	r3, [sp, #16]
    8782:	699b      	ldr	r3, [r3, #24]
    8784:	2b03      	cmp	r3, #3
    8786:	d177      	bne.n	8878 <Can_43_FLEXCAN_Ipw_Write+0x132>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    8788:	9b03      	ldr	r3, [sp, #12]
    878a:	681b      	ldr	r3, [r3, #0]
    878c:	0fdb      	lsrs	r3, r3, #31
    878e:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    8790:	9b04      	ldr	r3, [sp, #16]
    8792:	7c1a      	ldrb	r2, [r3, #16]
    8794:	9b03      	ldr	r3, [sp, #12]
    8796:	799b      	ldrb	r3, [r3, #6]
    8798:	429a      	cmp	r2, r3
    879a:	d803      	bhi.n	87a4 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    879c:	9b04      	ldr	r3, [sp, #16]
    879e:	7c1b      	ldrb	r3, [r3, #16]
    87a0:	9307      	str	r3, [sp, #28]
    87a2:	e002      	b.n	87aa <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    87a4:	9b03      	ldr	r3, [sp, #12]
    87a6:	799b      	ldrb	r3, [r3, #6]
    87a8:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    87aa:	9b04      	ldr	r3, [sp, #16]
    87ac:	7c5b      	ldrb	r3, [r3, #17]
    87ae:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    87b2:	9b03      	ldr	r3, [sp, #12]
    87b4:	681b      	ldr	r3, [r3, #0]
    87b6:	0f9b      	lsrs	r3, r3, #30
    87b8:	f003 0301 	and.w	r3, r3, #1
    87bc:	2b00      	cmp	r3, #0
    87be:	bf14      	ite	ne
    87c0:	2301      	movne	r3, #1
    87c2:	2300      	moveq	r3, #0
    87c4:	b2db      	uxtb	r3, r3
    87c6:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    87ca:	9b05      	ldr	r3, [sp, #20]
    87cc:	6a1a      	ldr	r2, [r3, #32]
    87ce:	9b05      	ldr	r3, [sp, #20]
    87d0:	785b      	ldrb	r3, [r3, #1]
    87d2:	4619      	mov	r1, r3
    87d4:	4b31      	ldr	r3, [pc, #196]	; (889c <Can_43_FLEXCAN_Ipw_Write+0x156>)
    87d6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    87da:	4619      	mov	r1, r3
    87dc:	2316      	movs	r3, #22
    87de:	fb01 f303 	mul.w	r3, r1, r3
    87e2:	4413      	add	r3, r2
    87e4:	781b      	ldrb	r3, [r3, #0]
    87e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    #endif
#endif
        DataInfo.is_remote = FALSE;
    87ea:	2300      	movs	r3, #0
    87ec:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    87f0:	9b04      	ldr	r3, [sp, #16]
    87f2:	7b1b      	ldrb	r3, [r3, #12]
    87f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    87f8:	9b05      	ldr	r3, [sp, #20]
    87fa:	7898      	ldrb	r0, [r3, #2]
    87fc:	9b04      	ldr	r3, [sp, #16]
    87fe:	7f1a      	ldrb	r2, [r3, #28]
    8800:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8804:	4413      	add	r3, r2
    8806:	b2db      	uxtb	r3, r3
    8808:	4619      	mov	r1, r3
    880a:	f001 fcdf 	bl	a1cc <FlexCAN_Ip_GetTransferStatus>
    880e:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8812:	2b00      	cmp	r3, #0
    8814:	d122      	bne.n	885c <Can_43_FLEXCAN_Ipw_Write+0x116>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    8816:	9b05      	ldr	r3, [sp, #20]
    8818:	785b      	ldrb	r3, [r3, #1]
    881a:	461c      	mov	r4, r3
    881c:	9b04      	ldr	r3, [sp, #16]
    881e:	7f1b      	ldrb	r3, [r3, #28]
    8820:	461a      	mov	r2, r3
    8822:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8826:	4413      	add	r3, r2
    8828:	9a03      	ldr	r2, [sp, #12]
    882a:	8890      	ldrh	r0, [r2, #4]
    882c:	491c      	ldr	r1, [pc, #112]	; (88a0 <Can_43_FLEXCAN_Ipw_Write+0x15a>)
    882e:	0162      	lsls	r2, r4, #5
    8830:	4413      	add	r3, r2
    8832:	4602      	mov	r2, r0
    8834:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    8838:	9b05      	ldr	r3, [sp, #20]
    883a:	7898      	ldrb	r0, [r3, #2]
    883c:	9b04      	ldr	r3, [sp, #16]
    883e:	7f1a      	ldrb	r2, [r3, #28]
    8840:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8844:	4413      	add	r3, r2
    8846:	b2d9      	uxtb	r1, r3
    8848:	9b03      	ldr	r3, [sp, #12]
    884a:	681c      	ldr	r4, [r3, #0]
    884c:	9b03      	ldr	r3, [sp, #12]
    884e:	689b      	ldr	r3, [r3, #8]
    8850:	aa06      	add	r2, sp, #24
    8852:	9300      	str	r3, [sp, #0]
    8854:	4623      	mov	r3, r4
    8856:	f001 fa4d 	bl	9cf4 <FlexCAN_Ip_Send>
    885a:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    885c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8860:	3301      	adds	r3, #1
    8862:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    8866:	9b04      	ldr	r3, [sp, #16]
    8868:	7b9b      	ldrb	r3, [r3, #14]
    886a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    886e:	429a      	cmp	r2, r3
    8870:	d202      	bcs.n	8878 <Can_43_FLEXCAN_Ipw_Write+0x132>
    8872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8874:	2b02      	cmp	r3, #2
    8876:	d0bf      	beq.n	87f8 <Can_43_FLEXCAN_Ipw_Write+0xb2>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    8878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    887a:	2b00      	cmp	r3, #0
    887c:	d004      	beq.n	8888 <Can_43_FLEXCAN_Ipw_Write+0x142>
    887e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8880:	2b02      	cmp	r3, #2
    8882:	d001      	beq.n	8888 <Can_43_FLEXCAN_Ipw_Write+0x142>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    8884:	2301      	movs	r3, #1
    8886:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    8888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    888a:	2b02      	cmp	r3, #2
    888c:	d002      	beq.n	8894 <Can_43_FLEXCAN_Ipw_Write+0x14e>
    888e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8890:	b2db      	uxtb	r3, r3
    8892:	e000      	b.n	8896 <Can_43_FLEXCAN_Ipw_Write+0x150>
    8894:	2302      	movs	r3, #2
}
    8896:	4618      	mov	r0, r3
    8898:	b00c      	add	sp, #48	; 0x30
    889a:	bd10      	pop	{r4, pc}
    889c:	1fff8fb4 	.word	0x1fff8fb4
    88a0:	1fff8f34 	.word	0x1fff8f34

000088a4 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    88a4:	b500      	push	{lr}
    88a6:	b089      	sub	sp, #36	; 0x24
    88a8:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    88aa:	2300      	movs	r3, #0
    88ac:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    88b0:	9b01      	ldr	r3, [sp, #4]
    88b2:	789b      	ldrb	r3, [r3, #2]
    88b4:	2101      	movs	r1, #1
    88b6:	4618      	mov	r0, r3
    88b8:	f002 fa42 	bl	ad40 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    88bc:	2300      	movs	r3, #0
    88be:	f88d 301f 	strb.w	r3, [sp, #31]
    88c2:	e03a      	b.n	893a <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    88c4:	9b01      	ldr	r3, [sp, #4]
    88c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    88c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    88cc:	009b      	lsls	r3, r3, #2
    88ce:	4413      	add	r3, r2
    88d0:	681b      	ldr	r3, [r3, #0]
    88d2:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    88d4:	9b06      	ldr	r3, [sp, #24]
    88d6:	699b      	ldr	r3, [r3, #24]
    88d8:	2b00      	cmp	r3, #0
    88da:	d121      	bne.n	8920 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    88dc:	2300      	movs	r3, #0
    88de:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    88e2:	2300      	movs	r3, #0
    88e4:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    88e6:	9b06      	ldr	r3, [sp, #24]
    88e8:	689b      	ldr	r3, [r3, #8]
    88ea:	2b00      	cmp	r3, #0
    88ec:	d002      	beq.n	88f4 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    88ee:	2301      	movs	r3, #1
    88f0:	9302      	str	r3, [sp, #8]
    88f2:	e001      	b.n	88f8 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    88f4:	2300      	movs	r3, #0
    88f6:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    88f8:	9b01      	ldr	r3, [sp, #4]
    88fa:	7898      	ldrb	r0, [r3, #2]
    88fc:	9b06      	ldr	r3, [sp, #24]
    88fe:	7f19      	ldrb	r1, [r3, #28]
    8900:	9b06      	ldr	r3, [sp, #24]
    8902:	695b      	ldr	r3, [r3, #20]
    8904:	681b      	ldr	r3, [r3, #0]
    8906:	aa02      	add	r2, sp, #8
    8908:	f001 fa40 	bl	9d8c <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    890c:	9b01      	ldr	r3, [sp, #4]
    890e:	7898      	ldrb	r0, [r3, #2]
    8910:	9b06      	ldr	r3, [sp, #24]
    8912:	7f19      	ldrb	r1, [r3, #28]
    8914:	9b06      	ldr	r3, [sp, #24]
    8916:	695b      	ldr	r3, [r3, #20]
    8918:	685b      	ldr	r3, [r3, #4]
    891a:	461a      	mov	r2, r3
    891c:	f001 ffc8 	bl	a8b0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    8920:	9b06      	ldr	r3, [sp, #24]
    8922:	699b      	ldr	r3, [r3, #24]
    8924:	2b01      	cmp	r3, #1
    8926:	d103      	bne.n	8930 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    8928:	9906      	ldr	r1, [sp, #24]
    892a:	9801      	ldr	r0, [sp, #4]
    892c:	f7fe ffab 	bl	7886 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8930:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8934:	3301      	adds	r3, #1
    8936:	f88d 301f 	strb.w	r3, [sp, #31]
    893a:	9b01      	ldr	r3, [sp, #4]
    893c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8940:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8944:	429a      	cmp	r2, r3
    8946:	d3bd      	bcc.n	88c4 <Can_Ipw_InitRx+0x20>
        }
    }
}
    8948:	bf00      	nop
    894a:	bf00      	nop
    894c:	b009      	add	sp, #36	; 0x24
    894e:	f85d fb04 	ldr.w	pc, [sp], #4

00008952 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    8952:	b500      	push	{lr}
    8954:	b083      	sub	sp, #12
    8956:	9001      	str	r0, [sp, #4]
    8958:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    895a:	9b00      	ldr	r3, [sp, #0]
    895c:	681b      	ldr	r3, [r3, #0]
    895e:	2b01      	cmp	r3, #1
    8960:	d114      	bne.n	898c <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8962:	9b01      	ldr	r3, [sp, #4]
    8964:	789b      	ldrb	r3, [r3, #2]
    8966:	4618      	mov	r0, r3
    8968:	f002 f994 	bl	ac94 <FlexCAN_Ip_GetStartMode_Privileged>
    896c:	4603      	mov	r3, r0
    896e:	f083 0301 	eor.w	r3, r3, #1
    8972:	b2db      	uxtb	r3, r3
    8974:	2b00      	cmp	r3, #0
    8976:	d01e      	beq.n	89b6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    8978:	9b00      	ldr	r3, [sp, #0]
    897a:	2202      	movs	r2, #2
    897c:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    897e:	9b01      	ldr	r3, [sp, #4]
    8980:	781b      	ldrb	r3, [r3, #0]
    8982:	2102      	movs	r1, #2
    8984:	4618      	mov	r0, r3
    8986:	f7f7 ffc0 	bl	90a <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    898a:	e014      	b.n	89b6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    898c:	9b00      	ldr	r3, [sp, #0]
    898e:	681b      	ldr	r3, [r3, #0]
    8990:	2b02      	cmp	r3, #2
    8992:	d110      	bne.n	89b6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8994:	9b01      	ldr	r3, [sp, #4]
    8996:	789b      	ldrb	r3, [r3, #2]
    8998:	4618      	mov	r0, r3
    899a:	f002 f97b 	bl	ac94 <FlexCAN_Ip_GetStartMode_Privileged>
    899e:	4603      	mov	r3, r0
    89a0:	2b00      	cmp	r3, #0
    89a2:	d008      	beq.n	89b6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    89a4:	9b00      	ldr	r3, [sp, #0]
    89a6:	2201      	movs	r2, #1
    89a8:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    89aa:	9b01      	ldr	r3, [sp, #4]
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	2101      	movs	r1, #1
    89b0:	4618      	mov	r0, r3
    89b2:	f7f7 ffaa 	bl	90a <CanIf_ControllerModeIndication>
}
    89b6:	bf00      	nop
    89b8:	b003      	add	sp, #12
    89ba:	f85d fb04 	ldr.w	pc, [sp], #4

000089be <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    89be:	b500      	push	{lr}
    89c0:	b085      	sub	sp, #20
    89c2:	9003      	str	r0, [sp, #12]
    89c4:	9102      	str	r1, [sp, #8]
    89c6:	9300      	str	r3, [sp, #0]
    89c8:	4613      	mov	r3, r2
    89ca:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    89ce:	9b00      	ldr	r3, [sp, #0]
    89d0:	2b03      	cmp	r3, #3
    89d2:	d009      	beq.n	89e8 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    89d4:	9b00      	ldr	r3, [sp, #0]
    89d6:	2b03      	cmp	r3, #3
    89d8:	d821      	bhi.n	8a1e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    89da:	9b00      	ldr	r3, [sp, #0]
    89dc:	2b00      	cmp	r3, #0
    89de:	d00c      	beq.n	89fa <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    89e0:	9b00      	ldr	r3, [sp, #0]
    89e2:	2b01      	cmp	r3, #1
    89e4:	d012      	beq.n	8a0c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    89e6:	e01a      	b.n	8a1e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    89e8:	9b02      	ldr	r3, [sp, #8]
    89ea:	691b      	ldr	r3, [r3, #16]
    89ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    89f0:	4619      	mov	r1, r3
    89f2:	9803      	ldr	r0, [sp, #12]
    89f4:	f7ff fa24 	bl	7e40 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    89f8:	e012      	b.n	8a20 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    89fa:	9b02      	ldr	r3, [sp, #8]
    89fc:	691b      	ldr	r3, [r3, #16]
    89fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8a02:	4619      	mov	r1, r3
    8a04:	9803      	ldr	r0, [sp, #12]
    8a06:	f7ff fa67 	bl	7ed8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8a0a:	e009      	b.n	8a20 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8a0c:	9b02      	ldr	r3, [sp, #8]
    8a0e:	691b      	ldr	r3, [r3, #16]
    8a10:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8a14:	4619      	mov	r1, r3
    8a16:	9803      	ldr	r0, [sp, #12]
    8a18:	f7ff fa5e 	bl	7ed8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8a1c:	e000      	b.n	8a20 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    8a1e:	bf00      	nop
            }
        }
    }
    8a20:	bf00      	nop
    8a22:	b005      	add	sp, #20
    8a24:	f85d fb04 	ldr.w	pc, [sp], #4

00008a28 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    8a28:	b500      	push	{lr}
    8a2a:	b085      	sub	sp, #20
    8a2c:	9102      	str	r1, [sp, #8]
    8a2e:	9201      	str	r2, [sp, #4]
    8a30:	9300      	str	r3, [sp, #0]
    8a32:	4603      	mov	r3, r0
    8a34:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    8a38:	9a00      	ldr	r2, [sp, #0]
    8a3a:	9b01      	ldr	r3, [sp, #4]
    8a3c:	011b      	lsls	r3, r3, #4
    8a3e:	4413      	add	r3, r2
    8a40:	3308      	adds	r3, #8
    8a42:	781b      	ldrb	r3, [r3, #0]
    8a44:	f083 0301 	eor.w	r3, r3, #1
    8a48:	b2db      	uxtb	r3, r3
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d03b      	beq.n	8ac6 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    8a4e:	9b02      	ldr	r3, [sp, #8]
    8a50:	2b04      	cmp	r3, #4
    8a52:	d83a      	bhi.n	8aca <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    8a54:	a201      	add	r2, pc, #4	; (adr r2, 8a5c <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    8a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8a5a:	bf00      	nop
    8a5c:	00008a83 	.word	0x00008a83
    8a60:	00008a95 	.word	0x00008a95
    8a64:	00008aa7 	.word	0x00008aa7
    8a68:	00008ab7 	.word	0x00008ab7
    8a6c:	00008a71 	.word	0x00008a71
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    8a70:	9b01      	ldr	r3, [sp, #4]
    8a72:	b2d9      	uxtb	r1, r3
    8a74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a78:	2203      	movs	r2, #3
    8a7a:	4618      	mov	r0, r3
    8a7c:	f7fe fe1e 	bl	76bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8a80:	e024      	b.n	8acc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    8a82:	9b01      	ldr	r3, [sp, #4]
    8a84:	b2d9      	uxtb	r1, r3
    8a86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a8a:	2200      	movs	r2, #0
    8a8c:	4618      	mov	r0, r3
    8a8e:	f7fe fe15 	bl	76bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8a92:	e01b      	b.n	8acc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    8a94:	9b01      	ldr	r3, [sp, #4]
    8a96:	b2d9      	uxtb	r1, r3
    8a98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a9c:	2201      	movs	r2, #1
    8a9e:	4618      	mov	r0, r3
    8aa0:	f7fe fe0c 	bl	76bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8aa4:	e012      	b.n	8acc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    8aa6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8aaa:	2201      	movs	r2, #1
    8aac:	2106      	movs	r1, #6
    8aae:	4618      	mov	r0, r3
    8ab0:	f7fe fe04 	bl	76bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ab4:	e00a      	b.n	8acc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    8ab6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8aba:	2201      	movs	r2, #1
    8abc:	2107      	movs	r1, #7
    8abe:	4618      	mov	r0, r3
    8ac0:	f7fe fdfc 	bl	76bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ac4:	e002      	b.n	8acc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    8ac6:	bf00      	nop
    8ac8:	e000      	b.n	8acc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    8aca:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    8acc:	bf00      	nop
    8ace:	b005      	add	sp, #20
    8ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00008ad4 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    8ad4:	b500      	push	{lr}
    8ad6:	b085      	sub	sp, #20
    8ad8:	9102      	str	r1, [sp, #8]
    8ada:	9201      	str	r2, [sp, #4]
    8adc:	9300      	str	r3, [sp, #0]
    8ade:	4603      	mov	r3, r0
    8ae0:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    8ae4:	9b02      	ldr	r3, [sp, #8]
    8ae6:	2b07      	cmp	r3, #7
    8ae8:	d105      	bne.n	8af6 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    8aea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8aee:	4618      	mov	r0, r3
    8af0:	f7fe fe26 	bl	7740 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    8af4:	e000      	b.n	8af8 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    8af6:	bf00      	nop
        }
    }
}
    8af8:	bf00      	nop
    8afa:	b005      	add	sp, #20
    8afc:	f85d fb04 	ldr.w	pc, [sp], #4

00008b00 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8b00:	b082      	sub	sp, #8
    8b02:	9001      	str	r0, [sp, #4]
    8b04:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    8b06:	9b01      	ldr	r3, [sp, #4]
    8b08:	9a00      	ldr	r2, [sp, #0]
    8b0a:	649a      	str	r2, [r3, #72]	; 0x48
}
    8b0c:	bf00      	nop
    8b0e:	b002      	add	sp, #8
    8b10:	4770      	bx	lr

00008b12 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    8b12:	b084      	sub	sp, #16
    8b14:	9001      	str	r0, [sp, #4]
    8b16:	460b      	mov	r3, r1
    8b18:	f88d 3003 	strb.w	r3, [sp, #3]
    8b1c:	4613      	mov	r3, r2
    8b1e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    8b22:	9b01      	ldr	r3, [sp, #4]
    8b24:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8b28:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8b2a:	9b03      	ldr	r3, [sp, #12]
    8b2c:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    8b30:	9303      	str	r3, [sp, #12]

    if (enable)
    8b32:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8b36:	2b00      	cmp	r3, #0
    8b38:	d00b      	beq.n	8b52 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    8b3a:	9b03      	ldr	r3, [sp, #12]
    8b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8b40:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    8b42:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b46:	021b      	lsls	r3, r3, #8
    8b48:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    8b4c:	9a03      	ldr	r2, [sp, #12]
    8b4e:	4313      	orrs	r3, r2
    8b50:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    8b52:	9b01      	ldr	r3, [sp, #4]
    8b54:	9a03      	ldr	r2, [sp, #12]
    8b56:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8b5a:	bf00      	nop
    8b5c:	b004      	add	sp, #16
    8b5e:	4770      	bx	lr

00008b60 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    8b64:	9b01      	ldr	r3, [sp, #4]
    8b66:	681b      	ldr	r3, [r3, #0]
    8b68:	43db      	mvns	r3, r3
    8b6a:	0fdb      	lsrs	r3, r3, #31
    8b6c:	b2db      	uxtb	r3, r3
}
    8b6e:	4618      	mov	r0, r3
    8b70:	b002      	add	sp, #8
    8b72:	4770      	bx	lr

00008b74 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    8b74:	b082      	sub	sp, #8
    8b76:	9001      	str	r0, [sp, #4]
    8b78:	460b      	mov	r3, r1
    8b7a:	f88d 3003 	strb.w	r3, [sp, #3]
    8b7e:	4613      	mov	r3, r2
    8b80:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    8b84:	9b01      	ldr	r3, [sp, #4]
    8b86:	681b      	ldr	r3, [r3, #0]
    8b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    8b8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8b90:	2a00      	cmp	r2, #0
    8b92:	d002      	beq.n	8b9a <FlexCAN_SetFDEnabled+0x26>
    8b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8b98:	e000      	b.n	8b9c <FlexCAN_SetFDEnabled+0x28>
    8b9a:	2200      	movs	r2, #0
    8b9c:	431a      	orrs	r2, r3
    8b9e:	9b01      	ldr	r3, [sp, #4]
    8ba0:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    8ba2:	9b01      	ldr	r3, [sp, #4]
    8ba4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8bac:	f89d 2002 	ldrb.w	r2, [sp, #2]
    8bb0:	2a00      	cmp	r2, #0
    8bb2:	d002      	beq.n	8bba <FlexCAN_SetFDEnabled+0x46>
    8bb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8bb8:	e000      	b.n	8bbc <FlexCAN_SetFDEnabled+0x48>
    8bba:	2200      	movs	r2, #0
    8bbc:	431a      	orrs	r2, r3
    8bbe:	9b01      	ldr	r3, [sp, #4]
    8bc0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8bc4:	9b01      	ldr	r3, [sp, #4]
    8bc6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8bca:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    8bce:	9b01      	ldr	r3, [sp, #4]
    8bd0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8bd4:	bf00      	nop
    8bd6:	b002      	add	sp, #8
    8bd8:	4770      	bx	lr

00008bda <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    8bda:	b082      	sub	sp, #8
    8bdc:	9001      	str	r0, [sp, #4]
    8bde:	460b      	mov	r3, r1
    8be0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    8be4:	9b01      	ldr	r3, [sp, #4]
    8be6:	685b      	ldr	r3, [r3, #4]
    8be8:	f023 0308 	bic.w	r3, r3, #8
    8bec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8bf0:	2a00      	cmp	r2, #0
    8bf2:	d001      	beq.n	8bf8 <FlexCAN_SetListenOnlyMode+0x1e>
    8bf4:	2208      	movs	r2, #8
    8bf6:	e000      	b.n	8bfa <FlexCAN_SetListenOnlyMode+0x20>
    8bf8:	2200      	movs	r2, #0
    8bfa:	431a      	orrs	r2, r3
    8bfc:	9b01      	ldr	r3, [sp, #4]
    8bfe:	605a      	str	r2, [r3, #4]
}
    8c00:	bf00      	nop
    8c02:	b002      	add	sp, #8
    8c04:	4770      	bx	lr

00008c06 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    8c06:	b082      	sub	sp, #8
    8c08:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    8c0a:	9b01      	ldr	r3, [sp, #4]
    8c0c:	689b      	ldr	r3, [r3, #8]
}
    8c0e:	bf00      	nop
    8c10:	b002      	add	sp, #8
    8c12:	4770      	bx	lr

00008c14 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8c14:	b084      	sub	sp, #16
    8c16:	9001      	str	r0, [sp, #4]
    8c18:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    8c1a:	9b00      	ldr	r3, [sp, #0]
    8c1c:	f003 031f 	and.w	r3, r3, #31
    8c20:	2201      	movs	r2, #1
    8c22:	fa02 f303 	lsl.w	r3, r2, r3
    8c26:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    8c28:	9b00      	ldr	r3, [sp, #0]
    8c2a:	2b1f      	cmp	r3, #31
    8c2c:	d802      	bhi.n	8c34 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    8c2e:	9b01      	ldr	r3, [sp, #4]
    8c30:	9a03      	ldr	r2, [sp, #12]
    8c32:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    8c34:	bf00      	nop
    8c36:	b004      	add	sp, #16
    8c38:	4770      	bx	lr

00008c3a <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8c3a:	b084      	sub	sp, #16
    8c3c:	9001      	str	r0, [sp, #4]
    8c3e:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    8c40:	2300      	movs	r3, #0
    8c42:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    8c44:	9b00      	ldr	r3, [sp, #0]
    8c46:	2b1f      	cmp	r3, #31
    8c48:	d80e      	bhi.n	8c68 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    8c4a:	9b01      	ldr	r3, [sp, #4]
    8c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    8c4e:	9b00      	ldr	r3, [sp, #0]
    8c50:	f003 031f 	and.w	r3, r3, #31
    8c54:	2101      	movs	r1, #1
    8c56:	fa01 f303 	lsl.w	r3, r1, r3
    8c5a:	401a      	ands	r2, r3
    8c5c:	9b00      	ldr	r3, [sp, #0]
    8c5e:	f003 031f 	and.w	r3, r3, #31
    8c62:	fa22 f303 	lsr.w	r3, r2, r3
    8c66:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    8c68:	9b03      	ldr	r3, [sp, #12]
    8c6a:	b2db      	uxtb	r3, r3
}
    8c6c:	4618      	mov	r0, r3
    8c6e:	b004      	add	sp, #16
    8c70:	4770      	bx	lr

00008c72 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8c72:	b082      	sub	sp, #8
    8c74:	9001      	str	r0, [sp, #4]
    8c76:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    8c78:	9b01      	ldr	r3, [sp, #4]
    8c7a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    8c7e:	4b15      	ldr	r3, [pc, #84]	; (8cd4 <FlexCAN_SetFDTimeSegments+0x62>)
    8c80:	4013      	ands	r3, r2
    8c82:	9a01      	ldr	r2, [sp, #4]
    8c84:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8c88:	9b01      	ldr	r3, [sp, #4]
    8c8a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    8c8e:	9b00      	ldr	r3, [sp, #0]
    8c90:	681b      	ldr	r3, [r3, #0]
    8c92:	029b      	lsls	r3, r3, #10
    8c94:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    8c98:	9b00      	ldr	r3, [sp, #0]
    8c9a:	689b      	ldr	r3, [r3, #8]
    8c9c:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8ca0:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    8ca2:	9b00      	ldr	r3, [sp, #0]
    8ca4:	685b      	ldr	r3, [r3, #4]
    8ca6:	015b      	lsls	r3, r3, #5
    8ca8:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    8caa:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    8cac:	9b00      	ldr	r3, [sp, #0]
    8cae:	68db      	ldr	r3, [r3, #12]
    8cb0:	0518      	lsls	r0, r3, #20
    8cb2:	4b09      	ldr	r3, [pc, #36]	; (8cd8 <FlexCAN_SetFDTimeSegments+0x66>)
    8cb4:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    8cb6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    8cb8:	9b00      	ldr	r3, [sp, #0]
    8cba:	691b      	ldr	r3, [r3, #16]
    8cbc:	041b      	lsls	r3, r3, #16
    8cbe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    8cc2:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8cc4:	431a      	orrs	r2, r3
    8cc6:	9b01      	ldr	r3, [sp, #4]
    8cc8:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    8ccc:	bf00      	nop
    8cce:	b002      	add	sp, #8
    8cd0:	4770      	bx	lr
    8cd2:	bf00      	nop
    8cd4:	c0088318 	.word	0xc0088318
    8cd8:	3ff00000 	.word	0x3ff00000

00008cdc <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8cdc:	b082      	sub	sp, #8
    8cde:	9001      	str	r0, [sp, #4]
    8ce0:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    8ce2:	9b01      	ldr	r3, [sp, #4]
    8ce4:	685a      	ldr	r2, [r3, #4]
    8ce6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    8cea:	4013      	ands	r3, r2
    8cec:	9a01      	ldr	r2, [sp, #4]
    8cee:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8cf0:	9b01      	ldr	r3, [sp, #4]
    8cf2:	685a      	ldr	r2, [r3, #4]
    8cf4:	9b00      	ldr	r3, [sp, #0]
    8cf6:	681b      	ldr	r3, [r3, #0]
    8cf8:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    8cfc:	9b00      	ldr	r3, [sp, #0]
    8cfe:	689b      	ldr	r3, [r3, #8]
    8d00:	041b      	lsls	r3, r3, #16
    8d02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8d06:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    8d08:	9b00      	ldr	r3, [sp, #0]
    8d0a:	685b      	ldr	r3, [r3, #4]
    8d0c:	04db      	lsls	r3, r3, #19
    8d0e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    8d12:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8d14:	9b00      	ldr	r3, [sp, #0]
    8d16:	68db      	ldr	r3, [r3, #12]
    8d18:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    8d1a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    8d1c:	9b00      	ldr	r3, [sp, #0]
    8d1e:	691b      	ldr	r3, [r3, #16]
    8d20:	059b      	lsls	r3, r3, #22
    8d22:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8d26:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8d28:	431a      	orrs	r2, r3
    8d2a:	9b01      	ldr	r3, [sp, #4]
    8d2c:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    8d2e:	bf00      	nop
    8d30:	b002      	add	sp, #8
    8d32:	4770      	bx	lr

00008d34 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8d34:	b082      	sub	sp, #8
    8d36:	9001      	str	r0, [sp, #4]
    8d38:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    8d3a:	9b01      	ldr	r3, [sp, #4]
    8d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8d3e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    8d42:	9b01      	ldr	r3, [sp, #4]
    8d44:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8d46:	9b01      	ldr	r3, [sp, #4]
    8d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    8d4a:	9b00      	ldr	r3, [sp, #0]
    8d4c:	681b      	ldr	r3, [r3, #0]
    8d4e:	029b      	lsls	r3, r3, #10
    8d50:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    8d52:	9b00      	ldr	r3, [sp, #0]
    8d54:	689b      	ldr	r3, [r3, #8]
    8d56:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8d5a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    8d5c:	9b00      	ldr	r3, [sp, #0]
    8d5e:	685b      	ldr	r3, [r3, #4]
    8d60:	015b      	lsls	r3, r3, #5
    8d62:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    8d66:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    8d68:	9b00      	ldr	r3, [sp, #0]
    8d6a:	68db      	ldr	r3, [r3, #12]
    8d6c:	0558      	lsls	r0, r3, #21
    8d6e:	4b07      	ldr	r3, [pc, #28]	; (8d8c <FlexCAN_SetExtendedTimeSegments+0x58>)
    8d70:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    8d72:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    8d74:	9b00      	ldr	r3, [sp, #0]
    8d76:	691b      	ldr	r3, [r3, #16]
    8d78:	041b      	lsls	r3, r3, #16
    8d7a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    8d7e:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8d80:	431a      	orrs	r2, r3
    8d82:	9b01      	ldr	r3, [sp, #4]
    8d84:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    8d86:	bf00      	nop
    8d88:	b002      	add	sp, #8
    8d8a:	4770      	bx	lr
    8d8c:	7fe00000 	.word	0x7fe00000

00008d90 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8d90:	b082      	sub	sp, #8
    8d92:	9001      	str	r0, [sp, #4]
    8d94:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    8d96:	9b01      	ldr	r3, [sp, #4]
    8d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8d9a:	0d5b      	lsrs	r3, r3, #21
    8d9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8da0:	9b00      	ldr	r3, [sp, #0]
    8da2:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    8da4:	9b01      	ldr	r3, [sp, #4]
    8da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8da8:	0a9b      	lsrs	r3, r3, #10
    8daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8dae:	9b00      	ldr	r3, [sp, #0]
    8db0:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    8db2:	9b01      	ldr	r3, [sp, #4]
    8db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8db6:	095b      	lsrs	r3, r3, #5
    8db8:	f003 021f 	and.w	r2, r3, #31
    8dbc:	9b00      	ldr	r3, [sp, #0]
    8dbe:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    8dc0:	9b01      	ldr	r3, [sp, #4]
    8dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8dc4:	f003 021f 	and.w	r2, r3, #31
    8dc8:	9b00      	ldr	r3, [sp, #0]
    8dca:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    8dcc:	9b01      	ldr	r3, [sp, #4]
    8dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8dd0:	0c1b      	lsrs	r3, r3, #16
    8dd2:	f003 021f 	and.w	r2, r3, #31
    8dd6:	9b00      	ldr	r3, [sp, #0]
    8dd8:	611a      	str	r2, [r3, #16]
}
    8dda:	bf00      	nop
    8ddc:	b002      	add	sp, #8
    8dde:	4770      	bx	lr

00008de0 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8de0:	b082      	sub	sp, #8
    8de2:	9001      	str	r0, [sp, #4]
    8de4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    8de6:	9b01      	ldr	r3, [sp, #4]
    8de8:	685b      	ldr	r3, [r3, #4]
    8dea:	0e1b      	lsrs	r3, r3, #24
    8dec:	b2da      	uxtb	r2, r3
    8dee:	9b00      	ldr	r3, [sp, #0]
    8df0:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    8df2:	9b01      	ldr	r3, [sp, #4]
    8df4:	685b      	ldr	r3, [r3, #4]
    8df6:	f003 0207 	and.w	r2, r3, #7
    8dfa:	9b00      	ldr	r3, [sp, #0]
    8dfc:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    8dfe:	9b01      	ldr	r3, [sp, #4]
    8e00:	685b      	ldr	r3, [r3, #4]
    8e02:	0cdb      	lsrs	r3, r3, #19
    8e04:	f003 0207 	and.w	r2, r3, #7
    8e08:	9b00      	ldr	r3, [sp, #0]
    8e0a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    8e0c:	9b01      	ldr	r3, [sp, #4]
    8e0e:	685b      	ldr	r3, [r3, #4]
    8e10:	0c1b      	lsrs	r3, r3, #16
    8e12:	f003 0207 	and.w	r2, r3, #7
    8e16:	9b00      	ldr	r3, [sp, #0]
    8e18:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    8e1a:	9b01      	ldr	r3, [sp, #4]
    8e1c:	685b      	ldr	r3, [r3, #4]
    8e1e:	0d9b      	lsrs	r3, r3, #22
    8e20:	f003 0203 	and.w	r2, r3, #3
    8e24:	9b00      	ldr	r3, [sp, #0]
    8e26:	611a      	str	r2, [r3, #16]
}
    8e28:	bf00      	nop
    8e2a:	b002      	add	sp, #8
    8e2c:	4770      	bx	lr

00008e2e <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8e2e:	b082      	sub	sp, #8
    8e30:	9001      	str	r0, [sp, #4]
    8e32:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    8e34:	9b01      	ldr	r3, [sp, #4]
    8e36:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e3a:	0d1b      	lsrs	r3, r3, #20
    8e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8e40:	9b00      	ldr	r3, [sp, #0]
    8e42:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    8e44:	9b01      	ldr	r3, [sp, #4]
    8e46:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e4a:	0a9b      	lsrs	r3, r3, #10
    8e4c:	f003 021f 	and.w	r2, r3, #31
    8e50:	9b00      	ldr	r3, [sp, #0]
    8e52:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    8e54:	9b01      	ldr	r3, [sp, #4]
    8e56:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e5a:	095b      	lsrs	r3, r3, #5
    8e5c:	f003 0207 	and.w	r2, r3, #7
    8e60:	9b00      	ldr	r3, [sp, #0]
    8e62:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    8e64:	9b01      	ldr	r3, [sp, #4]
    8e66:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e6a:	f003 0207 	and.w	r2, r3, #7
    8e6e:	9b00      	ldr	r3, [sp, #0]
    8e70:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    8e72:	9b01      	ldr	r3, [sp, #4]
    8e74:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e78:	0c1b      	lsrs	r3, r3, #16
    8e7a:	f003 0207 	and.w	r2, r3, #7
    8e7e:	9b00      	ldr	r3, [sp, #0]
    8e80:	611a      	str	r2, [r3, #16]
}
    8e82:	bf00      	nop
    8e84:	b002      	add	sp, #8
    8e86:	4770      	bx	lr

00008e88 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    8e88:	b082      	sub	sp, #8
    8e8a:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    8e8c:	9b01      	ldr	r3, [sp, #4]
    8e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8e90:	0fdb      	lsrs	r3, r3, #31
    8e92:	b2db      	uxtb	r3, r3
}
    8e94:	4618      	mov	r0, r3
    8e96:	b002      	add	sp, #8
    8e98:	4770      	bx	lr

00008e9a <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    8e9a:	b082      	sub	sp, #8
    8e9c:	9001      	str	r0, [sp, #4]
    8e9e:	460b      	mov	r3, r1
    8ea0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    8ea4:	9b01      	ldr	r3, [sp, #4]
    8ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8eac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8eb0:	2a00      	cmp	r2, #0
    8eb2:	d002      	beq.n	8eba <FlexCAN_EnableExtCbt+0x20>
    8eb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8eb8:	e000      	b.n	8ebc <FlexCAN_EnableExtCbt+0x22>
    8eba:	2200      	movs	r2, #0
    8ebc:	431a      	orrs	r2, r3
    8ebe:	9b01      	ldr	r3, [sp, #4]
    8ec0:	651a      	str	r2, [r3, #80]	; 0x50
}
    8ec2:	bf00      	nop
    8ec4:	b002      	add	sp, #8
    8ec6:	4770      	bx	lr

00008ec8 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    8ec8:	b082      	sub	sp, #8
    8eca:	9001      	str	r0, [sp, #4]
    8ecc:	460b      	mov	r3, r1
    8ece:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    8ed2:	9b01      	ldr	r3, [sp, #4]
    8ed4:	681b      	ldr	r3, [r3, #0]
    8ed6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    8eda:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8ede:	2a00      	cmp	r2, #0
    8ee0:	d001      	beq.n	8ee6 <FlexCAN_SetSelfReception+0x1e>
    8ee2:	2200      	movs	r2, #0
    8ee4:	e001      	b.n	8eea <FlexCAN_SetSelfReception+0x22>
    8ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8eea:	431a      	orrs	r2, r3
    8eec:	9b01      	ldr	r3, [sp, #4]
    8eee:	601a      	str	r2, [r3, #0]
}
    8ef0:	bf00      	nop
    8ef2:	b002      	add	sp, #8
    8ef4:	4770      	bx	lr

00008ef6 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    8ef6:	b082      	sub	sp, #8
    8ef8:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    8efa:	9b01      	ldr	r3, [sp, #4]
    8efc:	681b      	ldr	r3, [r3, #0]
    8efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    8f02:	2b00      	cmp	r3, #0
    8f04:	bf14      	ite	ne
    8f06:	2301      	movne	r3, #1
    8f08:	2300      	moveq	r3, #0
    8f0a:	b2db      	uxtb	r3, r3
}
    8f0c:	4618      	mov	r0, r3
    8f0e:	b002      	add	sp, #8
    8f10:	4770      	bx	lr

00008f12 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    8f12:	b082      	sub	sp, #8
    8f14:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    8f16:	9b01      	ldr	r3, [sp, #4]
    8f18:	685b      	ldr	r3, [r3, #4]
    8f1a:	f003 0308 	and.w	r3, r3, #8
    8f1e:	2b00      	cmp	r3, #0
    8f20:	bf14      	ite	ne
    8f22:	2301      	movne	r3, #1
    8f24:	2300      	moveq	r3, #0
    8f26:	b2db      	uxtb	r3, r3
}
    8f28:	4618      	mov	r0, r3
    8f2a:	b002      	add	sp, #8
    8f2c:	4770      	bx	lr

00008f2e <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    8f2e:	b082      	sub	sp, #8
    8f30:	4603      	mov	r3, r0
    8f32:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    8f36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f3a:	3301      	adds	r3, #1
    8f3c:	00db      	lsls	r3, r3, #3
    8f3e:	089b      	lsrs	r3, r3, #2
    8f40:	3305      	adds	r3, #5
}
    8f42:	4618      	mov	r0, r3
    8f44:	b002      	add	sp, #8
    8f46:	4770      	bx	lr

00008f48 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    8f48:	b082      	sub	sp, #8
    8f4a:	9001      	str	r0, [sp, #4]
    8f4c:	460b      	mov	r3, r1
    8f4e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    8f52:	9b01      	ldr	r3, [sp, #4]
    8f54:	685b      	ldr	r3, [r3, #4]
    8f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8f5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8f5e:	2a00      	cmp	r2, #0
    8f60:	d002      	beq.n	8f68 <FlexCAN_SetClkSrc+0x20>
    8f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8f66:	e000      	b.n	8f6a <FlexCAN_SetClkSrc+0x22>
    8f68:	2200      	movs	r2, #0
    8f6a:	431a      	orrs	r2, r3
    8f6c:	9b01      	ldr	r3, [sp, #4]
    8f6e:	605a      	str	r2, [r3, #4]
}
    8f70:	bf00      	nop
    8f72:	b002      	add	sp, #8
    8f74:	4770      	bx	lr

00008f76 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8f76:	b084      	sub	sp, #16
    8f78:	9001      	str	r0, [sp, #4]
    8f7a:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    8f7c:	2300      	movs	r3, #0
    8f7e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    8f82:	9b00      	ldr	r3, [sp, #0]
    8f84:	2b1f      	cmp	r3, #31
    8f86:	d810      	bhi.n	8faa <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    8f88:	9b01      	ldr	r3, [sp, #4]
    8f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f8c:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    8f8e:	9b01      	ldr	r3, [sp, #4]
    8f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    8f92:	9b02      	ldr	r3, [sp, #8]
    8f94:	401a      	ands	r2, r3
    8f96:	9b00      	ldr	r3, [sp, #0]
    8f98:	f003 031f 	and.w	r3, r3, #31
    8f9c:	fa22 f303 	lsr.w	r3, r2, r3
    8fa0:	b2db      	uxtb	r3, r3
    8fa2:	f003 0301 	and.w	r3, r3, #1
    8fa6:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    8faa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8fae:	4618      	mov	r0, r3
    8fb0:	b004      	add	sp, #16
    8fb2:	4770      	bx	lr

00008fb4 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8fb4:	b082      	sub	sp, #8
    8fb6:	9001      	str	r0, [sp, #4]
    8fb8:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    8fba:	9b01      	ldr	r3, [sp, #4]
    8fbc:	9a00      	ldr	r2, [sp, #0]
    8fbe:	611a      	str	r2, [r3, #16]
}
    8fc0:	bf00      	nop
    8fc2:	b002      	add	sp, #8
    8fc4:	4770      	bx	lr

00008fc6 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    8fc6:	b084      	sub	sp, #16
    8fc8:	9003      	str	r0, [sp, #12]
    8fca:	9102      	str	r1, [sp, #8]
    8fcc:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    8fce:	9b03      	ldr	r3, [sp, #12]
    8fd0:	9a02      	ldr	r2, [sp, #8]
    8fd2:	f502 7208 	add.w	r2, r2, #544	; 0x220
    8fd6:	9901      	ldr	r1, [sp, #4]
    8fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8fdc:	bf00      	nop
    8fde:	b004      	add	sp, #16
    8fe0:	4770      	bx	lr

00008fe2 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    8fe2:	b082      	sub	sp, #8
    8fe4:	9001      	str	r0, [sp, #4]
    8fe6:	460b      	mov	r3, r1
    8fe8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    8fec:	9b01      	ldr	r3, [sp, #4]
    8fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8ff0:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    8ff4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ff8:	04db      	lsls	r3, r3, #19
    8ffa:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    8ffe:	431a      	orrs	r2, r3
    9000:	9b01      	ldr	r3, [sp, #4]
    9002:	635a      	str	r2, [r3, #52]	; 0x34
}
    9004:	bf00      	nop
    9006:	b002      	add	sp, #8
    9008:	4770      	bx	lr

0000900a <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    900a:	b082      	sub	sp, #8
    900c:	9001      	str	r0, [sp, #4]
    900e:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    9010:	9b00      	ldr	r3, [sp, #0]
    9012:	2b00      	cmp	r3, #0
    9014:	d106      	bne.n	9024 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    9016:	9b01      	ldr	r3, [sp, #4]
    9018:	681b      	ldr	r3, [r3, #0]
    901a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    901e:	9b01      	ldr	r3, [sp, #4]
    9020:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    9022:	e005      	b.n	9030 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    9024:	9b01      	ldr	r3, [sp, #4]
    9026:	681b      	ldr	r3, [r3, #0]
    9028:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    902c:	9b01      	ldr	r3, [sp, #4]
    902e:	601a      	str	r2, [r3, #0]
}
    9030:	bf00      	nop
    9032:	b002      	add	sp, #8
    9034:	4770      	bx	lr

00009036 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    9036:	b500      	push	{lr}
    9038:	b083      	sub	sp, #12
    903a:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    903c:	9801      	ldr	r0, [sp, #4]
    903e:	f002 ff85 	bl	bf4c <FlexCAN_IsFDAvailable>
    9042:	4603      	mov	r3, r0
    9044:	2b00      	cmp	r3, #0
    9046:	d007      	beq.n	9058 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    9048:	9b01      	ldr	r3, [sp, #4]
    904a:	2200      	movs	r2, #0
    904c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    9050:	9b01      	ldr	r3, [sp, #4]
    9052:	4a12      	ldr	r2, [pc, #72]	; (909c <FlexCAN_SetRegDefaultVal+0x66>)
    9054:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    9058:	9b01      	ldr	r3, [sp, #4]
    905a:	f04f 32ff 	mov.w	r2, #4294967295
    905e:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    9060:	9b01      	ldr	r3, [sp, #4]
    9062:	2200      	movs	r2, #0
    9064:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    9066:	9b01      	ldr	r3, [sp, #4]
    9068:	2200      	movs	r2, #0
    906a:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    906c:	9b01      	ldr	r3, [sp, #4]
    906e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    9072:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    9074:	9b01      	ldr	r3, [sp, #4]
    9076:	4a0a      	ldr	r2, [pc, #40]	; (90a0 <FlexCAN_SetRegDefaultVal+0x6a>)
    9078:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    907a:	9b01      	ldr	r3, [sp, #4]
    907c:	2200      	movs	r2, #0
    907e:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    9080:	9b01      	ldr	r3, [sp, #4]
    9082:	2200      	movs	r2, #0
    9084:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    9086:	9b01      	ldr	r3, [sp, #4]
    9088:	2200      	movs	r2, #0
    908a:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    908c:	9b01      	ldr	r3, [sp, #4]
    908e:	4a05      	ldr	r2, [pc, #20]	; (90a4 <FlexCAN_SetRegDefaultVal+0x6e>)
    9090:	601a      	str	r2, [r3, #0]
}
    9092:	bf00      	nop
    9094:	b003      	add	sp, #12
    9096:	f85d fb04 	ldr.w	pc, [sp], #4
    909a:	bf00      	nop
    909c:	80004100 	.word	0x80004100
    90a0:	0003b006 	.word	0x0003b006
    90a4:	d890000f 	.word	0xd890000f

000090a8 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    90a8:	b500      	push	{lr}
    90aa:	b085      	sub	sp, #20
    90ac:	9001      	str	r0, [sp, #4]
    90ae:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    90b0:	2300      	movs	r3, #0
    90b2:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    90b4:	9b00      	ldr	r3, [sp, #0]
    90b6:	7a1b      	ldrb	r3, [r3, #8]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d006      	beq.n	90ca <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    90bc:	9b00      	ldr	r3, [sp, #0]
    90be:	685b      	ldr	r3, [r3, #4]
    90c0:	4619      	mov	r1, r3
    90c2:	9801      	ldr	r0, [sp, #4]
    90c4:	f002 fefe 	bl	bec4 <FlexCAN_EnableRxFifo>
    90c8:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    90ca:	9b03      	ldr	r3, [sp, #12]
}
    90cc:	4618      	mov	r0, r3
    90ce:	b005      	add	sp, #20
    90d0:	f85d fb04 	ldr.w	pc, [sp], #4

000090d4 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    90d4:	b500      	push	{lr}
    90d6:	b085      	sub	sp, #20
    90d8:	9001      	str	r0, [sp, #4]
    90da:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    90dc:	2300      	movs	r3, #0
    90de:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    90e0:	9b00      	ldr	r3, [sp, #0]
    90e2:	68db      	ldr	r3, [r3, #12]
    90e4:	2b02      	cmp	r3, #2
    90e6:	d003      	beq.n	90f0 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    90e8:	2100      	movs	r1, #0
    90ea:	9801      	ldr	r0, [sp, #4]
    90ec:	f7ff feec 	bl	8ec8 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    90f0:	9900      	ldr	r1, [sp, #0]
    90f2:	9801      	ldr	r0, [sp, #4]
    90f4:	f7ff ffd8 	bl	90a8 <FlexCAN_InitRxFifo>
    90f8:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    90fa:	9b03      	ldr	r3, [sp, #12]
    90fc:	2b00      	cmp	r3, #0
    90fe:	d006      	beq.n	910e <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    9100:	9801      	ldr	r0, [sp, #4]
    9102:	f002 fd03 	bl	bb0c <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    9106:	9801      	ldr	r0, [sp, #4]
    9108:	f002 fdca 	bl	bca0 <FlexCAN_Disable>
    910c:	e00b      	b.n	9126 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    910e:	9b00      	ldr	r3, [sp, #0]
    9110:	3314      	adds	r3, #20
    9112:	4619      	mov	r1, r3
    9114:	9801      	ldr	r0, [sp, #4]
    9116:	f002 ff3b 	bl	bf90 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    911a:	9b00      	ldr	r3, [sp, #0]
    911c:	681b      	ldr	r3, [r3, #0]
    911e:	4619      	mov	r1, r3
    9120:	9801      	ldr	r0, [sp, #4]
    9122:	f003 fab7 	bl	c694 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    9126:	9b03      	ldr	r3, [sp, #12]
}
    9128:	4618      	mov	r0, r3
    912a:	b005      	add	sp, #20
    912c:	f85d fb04 	ldr.w	pc, [sp], #4

00009130 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    9130:	b500      	push	{lr}
    9132:	b087      	sub	sp, #28
    9134:	4603      	mov	r3, r0
    9136:	9102      	str	r1, [sp, #8]
    9138:	9201      	str	r2, [sp, #4]
    913a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    913e:	2300      	movs	r3, #0
    9140:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    9142:	9802      	ldr	r0, [sp, #8]
    9144:	f7ff fd0c 	bl	8b60 <FlexCAN_IsEnabled>
    9148:	4603      	mov	r3, r0
    914a:	2b00      	cmp	r3, #0
    914c:	d00a      	beq.n	9164 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    914e:	9802      	ldr	r0, [sp, #8]
    9150:	f002 fcdc 	bl	bb0c <FlexCAN_EnterFreezeMode>
    9154:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    9156:	9b05      	ldr	r3, [sp, #20]
    9158:	2b00      	cmp	r3, #0
    915a:	d103      	bne.n	9164 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    915c:	9802      	ldr	r0, [sp, #8]
    915e:	f002 fd9f 	bl	bca0 <FlexCAN_Disable>
    9162:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    9164:	9b05      	ldr	r3, [sp, #20]
    9166:	2b00      	cmp	r3, #0
    9168:	d137      	bne.n	91da <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    916a:	9b01      	ldr	r3, [sp, #4]
    916c:	7e5b      	ldrb	r3, [r3, #25]
    916e:	4619      	mov	r1, r3
    9170:	9802      	ldr	r0, [sp, #8]
    9172:	f7ff fee9 	bl	8f48 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    9176:	9b02      	ldr	r3, [sp, #8]
    9178:	681b      	ldr	r3, [r3, #0]
    917a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    917e:	9b02      	ldr	r3, [sp, #8]
    9180:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    9182:	9802      	ldr	r0, [sp, #8]
    9184:	f002 fe28 	bl	bdd8 <FlexCAN_Init>
    9188:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    918a:	9b05      	ldr	r3, [sp, #20]
    918c:	2b00      	cmp	r3, #0
    918e:	d006      	beq.n	919e <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    9190:	9802      	ldr	r0, [sp, #8]
    9192:	f002 fcbb 	bl	bb0c <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    9196:	9802      	ldr	r0, [sp, #8]
    9198:	f002 fd82 	bl	bca0 <FlexCAN_Disable>
    919c:	e01d      	b.n	91da <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    919e:	9802      	ldr	r0, [sp, #8]
    91a0:	f002 fed4 	bl	bf4c <FlexCAN_IsFDAvailable>
    91a4:	4603      	mov	r3, r0
    91a6:	2b00      	cmp	r3, #0
    91a8:	d007      	beq.n	91ba <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    91aa:	9b01      	ldr	r3, [sp, #4]
    91ac:	7e19      	ldrb	r1, [r3, #24]
    91ae:	9b01      	ldr	r3, [sp, #4]
    91b0:	7edb      	ldrb	r3, [r3, #27]
    91b2:	461a      	mov	r2, r3
    91b4:	9802      	ldr	r0, [sp, #8]
    91b6:	f7ff fcdd 	bl	8b74 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    91ba:	9b01      	ldr	r3, [sp, #4]
    91bc:	691b      	ldr	r3, [r3, #16]
    91be:	4619      	mov	r1, r3
    91c0:	9802      	ldr	r0, [sp, #8]
    91c2:	f003 fdeb 	bl	cd9c <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    91c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91ca:	4618      	mov	r0, r3
    91cc:	f003 fe56 	bl	ce7c <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    91d0:	9901      	ldr	r1, [sp, #4]
    91d2:	9802      	ldr	r0, [sp, #8]
    91d4:	f7ff ff7e 	bl	90d4 <FlexCAN_InitCtroll>
    91d8:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    91da:	9b05      	ldr	r3, [sp, #20]
}
    91dc:	4618      	mov	r0, r3
    91de:	b007      	add	sp, #28
    91e0:	f85d fb04 	ldr.w	pc, [sp], #4

000091e4 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    91e4:	b500      	push	{lr}
    91e6:	b083      	sub	sp, #12
    91e8:	9001      	str	r0, [sp, #4]
    91ea:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    91ec:	9b00      	ldr	r3, [sp, #0]
    91ee:	7e1b      	ldrb	r3, [r3, #24]
    91f0:	4619      	mov	r1, r3
    91f2:	9801      	ldr	r0, [sp, #4]
    91f4:	f7ff fe51 	bl	8e9a <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    91f8:	9b00      	ldr	r3, [sp, #0]
    91fa:	7e1b      	ldrb	r3, [r3, #24]
    91fc:	2b00      	cmp	r3, #0
    91fe:	d00c      	beq.n	921a <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    9200:	9b00      	ldr	r3, [sp, #0]
    9202:	331c      	adds	r3, #28
    9204:	4619      	mov	r1, r3
    9206:	9801      	ldr	r0, [sp, #4]
    9208:	f7ff fd94 	bl	8d34 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    920c:	9b00      	ldr	r3, [sp, #0]
    920e:	3330      	adds	r3, #48	; 0x30
    9210:	4619      	mov	r1, r3
    9212:	9801      	ldr	r0, [sp, #4]
    9214:	f7ff fd2d 	bl	8c72 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    9218:	e005      	b.n	9226 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    921a:	9b00      	ldr	r3, [sp, #0]
    921c:	331c      	adds	r3, #28
    921e:	4619      	mov	r1, r3
    9220:	9801      	ldr	r0, [sp, #4]
    9222:	f7ff fd5b 	bl	8cdc <FlexCAN_SetTimeSegments>
}
    9226:	bf00      	nop
    9228:	b003      	add	sp, #12
    922a:	f85d fb04 	ldr.w	pc, [sp], #4

0000922e <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    922e:	b500      	push	{lr}
    9230:	b08d      	sub	sp, #52	; 0x34
    9232:	4603      	mov	r3, r0
    9234:	9102      	str	r1, [sp, #8]
    9236:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    923a:	2300      	movs	r3, #0
    923c:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    923e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9242:	4a46      	ldr	r2, [pc, #280]	; (935c <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    9244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9248:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    924a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    924e:	4a44      	ldr	r2, [pc, #272]	; (9360 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    9250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9254:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    9256:	2300      	movs	r3, #0
    9258:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    925a:	2300      	movs	r3, #0
    925c:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    925e:	9b02      	ldr	r3, [sp, #8]
    9260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9264:	fb02 f303 	mul.w	r3, r2, r3
    9268:	2100      	movs	r1, #0
    926a:	4618      	mov	r0, r3
    926c:	f7f8 fdec 	bl	1e48 <OsIf_MicrosToTicks>
    9270:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    9272:	2300      	movs	r3, #0
    9274:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9276:	2000      	movs	r0, #0
    9278:	f7f8 fd9a 	bl	1db0 <OsIf_GetCounter>
    927c:	4603      	mov	r3, r0
    927e:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9280:	e02a      	b.n	92d8 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    9282:	9b08      	ldr	r3, [sp, #32]
    9284:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9288:	2b01      	cmp	r3, #1
    928a:	d115      	bne.n	92b8 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    928c:	2307      	movs	r3, #7
    928e:	9309      	str	r3, [sp, #36]	; 0x24
    9290:	e00f      	b.n	92b2 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    9292:	9909      	ldr	r1, [sp, #36]	; 0x24
    9294:	9807      	ldr	r0, [sp, #28]
    9296:	f7ff fcd0 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    929a:	4603      	mov	r3, r0
    929c:	2b00      	cmp	r3, #0
    929e:	d005      	beq.n	92ac <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    92a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    92a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    92a6:	4618      	mov	r0, r3
    92a8:	f000 fb06 	bl	98b8 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    92ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    92ae:	3b01      	subs	r3, #1
    92b0:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    92b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    92b4:	2b04      	cmp	r3, #4
    92b6:	d8ec      	bhi.n	9292 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    92b8:	ab05      	add	r3, sp, #20
    92ba:	2100      	movs	r1, #0
    92bc:	4618      	mov	r0, r3
    92be:	f7f8 fd90 	bl	1de2 <OsIf_GetElapsed>
    92c2:	4602      	mov	r2, r0
    92c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92c6:	4413      	add	r3, r2
    92c8:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    92ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    92cc:	9b06      	ldr	r3, [sp, #24]
    92ce:	429a      	cmp	r2, r3
    92d0:	d302      	bcc.n	92d8 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    92d2:	2303      	movs	r3, #3
    92d4:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    92d6:	e003      	b.n	92e0 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    92d8:	9b08      	ldr	r3, [sp, #32]
    92da:	685b      	ldr	r3, [r3, #4]
    92dc:	2b01      	cmp	r3, #1
    92de:	d0d0      	beq.n	9282 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    92e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    92e2:	2b03      	cmp	r3, #3
    92e4:	d125      	bne.n	9332 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    92e6:	9b08      	ldr	r3, [sp, #32]
    92e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    92ec:	2b01      	cmp	r3, #1
    92ee:	d020      	beq.n	9332 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    92f0:	9b08      	ldr	r3, [sp, #32]
    92f2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92fa:	9300      	str	r3, [sp, #0]
    92fc:	2300      	movs	r3, #0
    92fe:	2205      	movs	r2, #5
    9300:	9807      	ldr	r0, [sp, #28]
    9302:	f002 feef 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    9306:	9b08      	ldr	r3, [sp, #32]
    9308:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    930c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9310:	9300      	str	r3, [sp, #0]
    9312:	2300      	movs	r3, #0
    9314:	2206      	movs	r2, #6
    9316:	9807      	ldr	r0, [sp, #28]
    9318:	f002 fee4 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    931c:	9b08      	ldr	r3, [sp, #32]
    931e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9322:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9326:	9300      	str	r3, [sp, #0]
    9328:	2300      	movs	r3, #0
    932a:	2207      	movs	r2, #7
    932c:	9807      	ldr	r0, [sp, #28]
    932e:	f002 fed9 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9332:	9b08      	ldr	r3, [sp, #32]
    9334:	685b      	ldr	r3, [r3, #4]
    9336:	2b00      	cmp	r3, #0
    9338:	d005      	beq.n	9346 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    933a:	2b01      	cmp	r3, #1
    933c:	d106      	bne.n	934c <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    933e:	9b08      	ldr	r3, [sp, #32]
    9340:	2200      	movs	r2, #0
    9342:	605a      	str	r2, [r3, #4]
                break;
    9344:	e005      	b.n	9352 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    9346:	2300      	movs	r3, #0
    9348:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    934a:	e002      	b.n	9352 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    934c:	2301      	movs	r3, #1
    934e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    9350:	bf00      	nop
        }

    return eResult;
    9352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    9354:	4618      	mov	r0, r3
    9356:	b00d      	add	sp, #52	; 0x34
    9358:	f85d fb04 	ldr.w	pc, [sp], #4
    935c:	1fff8fbc 	.word	0x1fff8fbc
    9360:	0000fcb4 	.word	0x0000fcb4

00009364 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    9364:	b084      	sub	sp, #16
    9366:	9200      	str	r2, [sp, #0]
    9368:	461a      	mov	r2, r3
    936a:	4603      	mov	r3, r0
    936c:	f88d 3007 	strb.w	r3, [sp, #7]
    9370:	460b      	mov	r3, r1
    9372:	f88d 3006 	strb.w	r3, [sp, #6]
    9376:	4613      	mov	r3, r2
    9378:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    937c:	2300      	movs	r3, #0
    937e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9380:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9384:	4a15      	ldr	r2, [pc, #84]	; (93dc <FlexCAN_StartRxMessageBufferData+0x78>)
    9386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    938a:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    938c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9390:	9a02      	ldr	r2, [sp, #8]
    9392:	011b      	lsls	r3, r3, #4
    9394:	4413      	add	r3, r2
    9396:	3304      	adds	r3, #4
    9398:	681b      	ldr	r3, [r3, #0]
    939a:	2b00      	cmp	r3, #0
    939c:	d002      	beq.n	93a4 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    939e:	2302      	movs	r3, #2
    93a0:	9303      	str	r3, [sp, #12]
    93a2:	e017      	b.n	93d4 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    93a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93a8:	9a02      	ldr	r2, [sp, #8]
    93aa:	011b      	lsls	r3, r3, #4
    93ac:	4413      	add	r3, r2
    93ae:	3304      	adds	r3, #4
    93b0:	2201      	movs	r2, #1
    93b2:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    93b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93b8:	9a02      	ldr	r2, [sp, #8]
    93ba:	011b      	lsls	r3, r3, #4
    93bc:	4413      	add	r3, r2
    93be:	9a00      	ldr	r2, [sp, #0]
    93c0:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    93c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93c6:	9a02      	ldr	r2, [sp, #8]
    93c8:	011b      	lsls	r3, r3, #4
    93ca:	4413      	add	r3, r2
    93cc:	3308      	adds	r3, #8
    93ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
    93d2:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    93d4:	9b03      	ldr	r3, [sp, #12]
}
    93d6:	4618      	mov	r0, r3
    93d8:	b004      	add	sp, #16
    93da:	4770      	bx	lr
    93dc:	1fff8fbc 	.word	0x1fff8fbc

000093e0 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    93e0:	b500      	push	{lr}
    93e2:	b08f      	sub	sp, #60	; 0x3c
    93e4:	9204      	str	r2, [sp, #16]
    93e6:	9303      	str	r3, [sp, #12]
    93e8:	4603      	mov	r3, r0
    93ea:	f88d 3017 	strb.w	r3, [sp, #23]
    93ee:	460b      	mov	r3, r1
    93f0:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    93f4:	2300      	movs	r3, #0
    93f6:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    93f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    93fc:	4a38      	ldr	r2, [pc, #224]	; (94e0 <FlexCAN_StartSendData+0x100>)
    93fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9402:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    9404:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9408:	4a36      	ldr	r2, [pc, #216]	; (94e4 <FlexCAN_StartSendData+0x104>)
    940a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    940e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    9410:	2300      	movs	r3, #0
    9412:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    9414:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    941a:	011b      	lsls	r3, r3, #4
    941c:	4413      	add	r3, r2
    941e:	3304      	adds	r3, #4
    9420:	681b      	ldr	r3, [r3, #0]
    9422:	2b00      	cmp	r3, #0
    9424:	d002      	beq.n	942c <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    9426:	2302      	movs	r3, #2
    9428:	930d      	str	r3, [sp, #52]	; 0x34
    942a:	e053      	b.n	94d4 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    942c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9430:	4619      	mov	r1, r3
    9432:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9434:	f7ff fbee 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    9438:	f89d 3016 	ldrb.w	r3, [sp, #22]
    943c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    943e:	011b      	lsls	r3, r3, #4
    9440:	4413      	add	r3, r2
    9442:	3304      	adds	r3, #4
    9444:	2202      	movs	r2, #2
    9446:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    9448:	f89d 3016 	ldrb.w	r3, [sp, #22]
    944c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    944e:	011b      	lsls	r3, r3, #4
    9450:	4413      	add	r3, r2
    9452:	330c      	adds	r3, #12
    9454:	2200      	movs	r2, #0
    9456:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    9458:	f89d 3016 	ldrb.w	r3, [sp, #22]
    945c:	9a04      	ldr	r2, [sp, #16]
    945e:	7b11      	ldrb	r1, [r2, #12]
    9460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9462:	011b      	lsls	r3, r3, #4
    9464:	4413      	add	r3, r2
    9466:	3308      	adds	r3, #8
    9468:	460a      	mov	r2, r1
    946a:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    946c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9470:	9a04      	ldr	r2, [sp, #16]
    9472:	7ad1      	ldrb	r1, [r2, #11]
    9474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9476:	011b      	lsls	r3, r3, #4
    9478:	4413      	add	r3, r2
    947a:	3309      	adds	r3, #9
    947c:	460a      	mov	r2, r1
    947e:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    9480:	9b04      	ldr	r3, [sp, #16]
    9482:	685b      	ldr	r3, [r3, #4]
    9484:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    9486:	9b04      	ldr	r3, [sp, #16]
    9488:	681b      	ldr	r3, [r3, #0]
    948a:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    948c:	9b04      	ldr	r3, [sp, #16]
    948e:	7a1b      	ldrb	r3, [r3, #8]
    9490:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    9494:	9b04      	ldr	r3, [sp, #16]
    9496:	7a5b      	ldrb	r3, [r3, #9]
    9498:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    949c:	9b04      	ldr	r3, [sp, #16]
    949e:	7a9b      	ldrb	r3, [r3, #10]
    94a0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    94a4:	9b04      	ldr	r3, [sp, #16]
    94a6:	7adb      	ldrb	r3, [r3, #11]
    94a8:	2b00      	cmp	r3, #0
    94aa:	d002      	beq.n	94b2 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    94ac:	231c      	movs	r3, #28
    94ae:	9306      	str	r3, [sp, #24]
    94b0:	e001      	b.n	94b6 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    94b2:	230c      	movs	r3, #12
    94b4:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    94b6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    94ba:	4619      	mov	r1, r3
    94bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    94be:	f002 fa89 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    94c2:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    94c4:	a906      	add	r1, sp, #24
    94c6:	2300      	movs	r3, #0
    94c8:	9300      	str	r3, [sp, #0]
    94ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    94cc:	9a03      	ldr	r2, [sp, #12]
    94ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    94d0:	f002 ffd2 	bl	c478 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    94d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    94d6:	4618      	mov	r0, r3
    94d8:	b00f      	add	sp, #60	; 0x3c
    94da:	f85d fb04 	ldr.w	pc, [sp], #4
    94de:	bf00      	nop
    94e0:	1fff8fbc 	.word	0x1fff8fbc
    94e4:	0000fcb4 	.word	0x0000fcb4

000094e8 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    94e8:	b500      	push	{lr}
    94ea:	b089      	sub	sp, #36	; 0x24
    94ec:	4603      	mov	r3, r0
    94ee:	9102      	str	r1, [sp, #8]
    94f0:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    94f4:	2300      	movs	r3, #0
    94f6:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    94f8:	2300      	movs	r3, #0
    94fa:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    94fc:	2300      	movs	r3, #0
    94fe:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    9500:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9504:	4a26      	ldr	r2, [pc, #152]	; (95a0 <FlexCAN_StartRxMessageFifoData+0xb8>)
    9506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    950a:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    950c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9510:	4a24      	ldr	r2, [pc, #144]	; (95a4 <FlexCAN_StartRxMessageFifoData+0xbc>)
    9512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9516:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    9518:	9b05      	ldr	r3, [sp, #20]
    951a:	685b      	ldr	r3, [r3, #4]
    951c:	2b01      	cmp	r3, #1
    951e:	d102      	bne.n	9526 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    9520:	2302      	movs	r3, #2
    9522:	9307      	str	r3, [sp, #28]
    9524:	e036      	b.n	9594 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    9526:	9b05      	ldr	r3, [sp, #20]
    9528:	2201      	movs	r2, #1
    952a:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    952c:	9b05      	ldr	r3, [sp, #20]
    952e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9532:	2b01      	cmp	r3, #1
    9534:	d102      	bne.n	953c <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    9536:	9b05      	ldr	r3, [sp, #20]
    9538:	2201      	movs	r2, #1
    953a:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    953c:	9b05      	ldr	r3, [sp, #20]
    953e:	9a02      	ldr	r2, [sp, #8]
    9540:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    9542:	9b05      	ldr	r3, [sp, #20]
    9544:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9548:	2b00      	cmp	r3, #0
    954a:	d123      	bne.n	9594 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    954c:	9b05      	ldr	r3, [sp, #20]
    954e:	2200      	movs	r2, #0
    9550:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    9552:	9b05      	ldr	r3, [sp, #20]
    9554:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9558:	f89d 100f 	ldrb.w	r1, [sp, #15]
    955c:	9300      	str	r3, [sp, #0]
    955e:	2301      	movs	r3, #1
    9560:	2206      	movs	r2, #6
    9562:	9806      	ldr	r0, [sp, #24]
    9564:	f002 fdbe 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    9568:	9b05      	ldr	r3, [sp, #20]
    956a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    956e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9572:	9300      	str	r3, [sp, #0]
    9574:	2301      	movs	r3, #1
    9576:	2207      	movs	r2, #7
    9578:	9806      	ldr	r0, [sp, #24]
    957a:	f002 fdb3 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    957e:	9b05      	ldr	r3, [sp, #20]
    9580:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9584:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9588:	9300      	str	r3, [sp, #0]
    958a:	2301      	movs	r3, #1
    958c:	2205      	movs	r2, #5
    958e:	9806      	ldr	r0, [sp, #24]
    9590:	f002 fda8 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9594:	9b07      	ldr	r3, [sp, #28]
}
    9596:	4618      	mov	r0, r3
    9598:	b009      	add	sp, #36	; 0x24
    959a:	f85d fb04 	ldr.w	pc, [sp], #4
    959e:	bf00      	nop
    95a0:	0000fcb4 	.word	0x0000fcb4
    95a4:	1fff8fbc 	.word	0x1fff8fbc

000095a8 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    95a8:	b510      	push	{r4, lr}
    95aa:	b09e      	sub	sp, #120	; 0x78
    95ac:	4603      	mov	r3, r0
    95ae:	9102      	str	r1, [sp, #8]
    95b0:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    95b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    95b8:	4a70      	ldr	r2, [pc, #448]	; (977c <FlexCAN_IRQHandlerRxMB+0x1d4>)
    95ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95be:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    95c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    95c4:	4a6e      	ldr	r2, [pc, #440]	; (9780 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    95c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ca:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    95cc:	2300      	movs	r3, #0
    95ce:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    95d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    95d4:	9b02      	ldr	r3, [sp, #8]
    95d6:	011b      	lsls	r3, r3, #4
    95d8:	4413      	add	r3, r2
    95da:	681b      	ldr	r3, [r3, #0]
    95dc:	2b00      	cmp	r3, #0
    95de:	d105      	bne.n	95ec <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    95e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    95e2:	9b02      	ldr	r3, [sp, #8]
    95e4:	011b      	lsls	r3, r3, #4
    95e6:	4413      	add	r3, r2
    95e8:	aa05      	add	r2, sp, #20
    95ea:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    95ec:	2300      	movs	r3, #0
    95ee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    95f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    95f4:	9b02      	ldr	r3, [sp, #8]
    95f6:	011b      	lsls	r3, r3, #4
    95f8:	4413      	add	r3, r2
    95fa:	3308      	adds	r3, #8
    95fc:	781b      	ldrb	r3, [r3, #0]
    95fe:	2b00      	cmp	r3, #0
    9600:	d008      	beq.n	9614 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    9602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9604:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9608:	2b00      	cmp	r3, #0
    960a:	d003      	beq.n	9614 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    960c:	2301      	movs	r3, #1
    960e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    9612:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    9614:	9902      	ldr	r1, [sp, #8]
    9616:	981c      	ldr	r0, [sp, #112]	; 0x70
    9618:	f002 fd55 	bl	c0c6 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    961c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    961e:	9b02      	ldr	r3, [sp, #8]
    9620:	011b      	lsls	r3, r3, #4
    9622:	4413      	add	r3, r2
    9624:	681b      	ldr	r3, [r3, #0]
    9626:	461a      	mov	r2, r3
    9628:	9902      	ldr	r1, [sp, #8]
    962a:	981c      	ldr	r0, [sp, #112]	; 0x70
    962c:	f002 fe7a 	bl	c324 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9630:	9902      	ldr	r1, [sp, #8]
    9632:	981c      	ldr	r0, [sp, #112]	; 0x70
    9634:	f7ff faee 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    9638:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    963a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    963e:	2b00      	cmp	r3, #0
    9640:	d032      	beq.n	96a8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9642:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9644:	9b02      	ldr	r3, [sp, #8]
    9646:	011b      	lsls	r3, r3, #4
    9648:	4413      	add	r3, r2
    964a:	681b      	ldr	r3, [r3, #0]
    964c:	681b      	ldr	r3, [r3, #0]
    964e:	0e1b      	lsrs	r3, r3, #24
    9650:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    9654:	2b02      	cmp	r3, #2
    9656:	d027      	beq.n	96a8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9658:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    965a:	9b02      	ldr	r3, [sp, #8]
    965c:	011b      	lsls	r3, r3, #4
    965e:	4413      	add	r3, r2
    9660:	681b      	ldr	r3, [r3, #0]
    9662:	681b      	ldr	r3, [r3, #0]
    9664:	0e1b      	lsrs	r3, r3, #24
    9666:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    966a:	2b04      	cmp	r3, #4
    966c:	d01c      	beq.n	96a8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    966e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9670:	9b02      	ldr	r3, [sp, #8]
    9672:	011b      	lsls	r3, r3, #4
    9674:	4413      	add	r3, r2
    9676:	681b      	ldr	r3, [r3, #0]
    9678:	681b      	ldr	r3, [r3, #0]
    967a:	0e1b      	lsrs	r3, r3, #24
    967c:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9680:	2b06      	cmp	r3, #6
    9682:	d011      	beq.n	96a8 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    9684:	9902      	ldr	r1, [sp, #8]
    9686:	981c      	ldr	r0, [sp, #112]	; 0x70
    9688:	f002 f9a4 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    968c:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    968e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9690:	681b      	ldr	r3, [r3, #0]
    9692:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    9696:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9698:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    969a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    969c:	681b      	ldr	r3, [r3, #0]
    969e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    96a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    96a4:	601a      	str	r2, [r3, #0]
    {
    96a6:	e002      	b.n	96ae <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    96a8:	981c      	ldr	r0, [sp, #112]	; 0x70
    96aa:	f7ff faac 	bl	8c06 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    96ae:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    96b2:	2b00      	cmp	r3, #0
    96b4:	d000      	beq.n	96b8 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    96b6:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    96b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    96ba:	9b02      	ldr	r3, [sp, #8]
    96bc:	011b      	lsls	r3, r3, #4
    96be:	4413      	add	r3, r2
    96c0:	3304      	adds	r3, #4
    96c2:	2200      	movs	r2, #0
    96c4:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    96c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    96c8:	9b02      	ldr	r3, [sp, #8]
    96ca:	011b      	lsls	r3, r3, #4
    96cc:	4413      	add	r3, r2
    96ce:	3308      	adds	r3, #8
    96d0:	781b      	ldrb	r3, [r3, #0]
    96d2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    96d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    96d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    96dc:	2b00      	cmp	r3, #0
    96de:	d008      	beq.n	96f2 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    96e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    96e2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    96e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    96ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    96ec:	9a02      	ldr	r2, [sp, #8]
    96ee:	2100      	movs	r1, #0
    96f0:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    96f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    96f4:	9b02      	ldr	r3, [sp, #8]
    96f6:	011b      	lsls	r3, r3, #4
    96f8:	4413      	add	r3, r2
    96fa:	3304      	adds	r3, #4
    96fc:	681b      	ldr	r3, [r3, #0]
    96fe:	2b00      	cmp	r3, #0
    9700:	d11e      	bne.n	9740 <FlexCAN_IRQHandlerRxMB+0x198>
    9702:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9704:	9b02      	ldr	r3, [sp, #8]
    9706:	011b      	lsls	r3, r3, #4
    9708:	4413      	add	r3, r2
    970a:	3308      	adds	r3, #8
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	f083 0301 	eor.w	r3, r3, #1
    9712:	b2db      	uxtb	r3, r3
    9714:	2b00      	cmp	r3, #0
    9716:	d013      	beq.n	9740 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    9718:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    971a:	9b02      	ldr	r3, [sp, #8]
    971c:	011b      	lsls	r3, r3, #4
    971e:	4413      	add	r3, r2
    9720:	3308      	adds	r3, #8
    9722:	2201      	movs	r2, #1
    9724:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9728:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    972c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9730:	9300      	str	r3, [sp, #0]
    9732:	2300      	movs	r3, #0
    9734:	9a02      	ldr	r2, [sp, #8]
    9736:	981c      	ldr	r0, [sp, #112]	; 0x70
    9738:	f002 fcd4 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
    973c:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    973e:	e019      	b.n	9774 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    9740:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    9744:	f083 0301 	eor.w	r3, r3, #1
    9748:	b2db      	uxtb	r3, r3
    974a:	2b00      	cmp	r3, #0
    974c:	d012      	beq.n	9774 <FlexCAN_IRQHandlerRxMB+0x1cc>
    974e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9750:	9b02      	ldr	r3, [sp, #8]
    9752:	011b      	lsls	r3, r3, #4
    9754:	4413      	add	r3, r2
    9756:	3308      	adds	r3, #8
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	2b00      	cmp	r3, #0
    975c:	d00a      	beq.n	9774 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    975e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9760:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9764:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9768:	9300      	str	r3, [sp, #0]
    976a:	2300      	movs	r3, #0
    976c:	9a02      	ldr	r2, [sp, #8]
    976e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9770:	f002 fcb8 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
}
    9774:	bf00      	nop
    9776:	b01e      	add	sp, #120	; 0x78
    9778:	bd10      	pop	{r4, pc}
    977a:	bf00      	nop
    977c:	0000fcb4 	.word	0x0000fcb4
    9780:	1fff8fbc 	.word	0x1fff8fbc

00009784 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    9784:	b510      	push	{r4, lr}
    9786:	b09a      	sub	sp, #104	; 0x68
    9788:	4603      	mov	r3, r0
    978a:	9102      	str	r1, [sp, #8]
    978c:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9790:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9794:	4a46      	ldr	r2, [pc, #280]	; (98b0 <FlexCAN_IRQHandlerTxMB+0x12c>)
    9796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    979a:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    979c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97a0:	4a44      	ldr	r2, [pc, #272]	; (98b4 <FlexCAN_IRQHandlerTxMB+0x130>)
    97a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a6:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    97a8:	2300      	movs	r3, #0
    97aa:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    97ac:	2300      	movs	r3, #0
    97ae:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    97b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    97b2:	9b02      	ldr	r3, [sp, #8]
    97b4:	011b      	lsls	r3, r3, #4
    97b6:	4413      	add	r3, r2
    97b8:	3309      	adds	r3, #9
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	2b00      	cmp	r3, #0
    97be:	d01e      	beq.n	97fe <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    97c0:	9902      	ldr	r1, [sp, #8]
    97c2:	9819      	ldr	r0, [sp, #100]	; 0x64
    97c4:	f002 fc7f 	bl	c0c6 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    97c8:	ab04      	add	r3, sp, #16
    97ca:	461a      	mov	r2, r3
    97cc:	9902      	ldr	r1, [sp, #8]
    97ce:	9819      	ldr	r0, [sp, #100]	; 0x64
    97d0:	f002 fda8 	bl	c324 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    97d4:	9819      	ldr	r0, [sp, #100]	; 0x64
    97d6:	f7ff fa16 	bl	8c06 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    97da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    97dc:	9918      	ldr	r1, [sp, #96]	; 0x60
    97de:	9b02      	ldr	r3, [sp, #8]
    97e0:	011b      	lsls	r3, r3, #4
    97e2:	440b      	add	r3, r1
    97e4:	330c      	adds	r3, #12
    97e6:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    97e8:	9b04      	ldr	r3, [sp, #16]
    97ea:	0e1b      	lsrs	r3, r3, #24
    97ec:	f003 030f 	and.w	r3, r3, #15
    97f0:	2b04      	cmp	r3, #4
    97f2:	d116      	bne.n	9822 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    97f4:	9902      	ldr	r1, [sp, #8]
    97f6:	9819      	ldr	r0, [sp, #100]	; 0x64
    97f8:	f7ff fa0c 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
    97fc:	e011      	b.n	9822 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    97fe:	9902      	ldr	r1, [sp, #8]
    9800:	9819      	ldr	r0, [sp, #100]	; 0x64
    9802:	f002 fd7b 	bl	c2fc <FlexCAN_GetMsgBuffTimestamp>
    9806:	4601      	mov	r1, r0
    9808:	9a18      	ldr	r2, [sp, #96]	; 0x60
    980a:	9b02      	ldr	r3, [sp, #8]
    980c:	011b      	lsls	r3, r3, #4
    980e:	4413      	add	r3, r2
    9810:	330c      	adds	r3, #12
    9812:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    9814:	9819      	ldr	r0, [sp, #100]	; 0x64
    9816:	f7ff f9f6 	bl	8c06 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    981a:	9902      	ldr	r1, [sp, #8]
    981c:	9819      	ldr	r0, [sp, #100]	; 0x64
    981e:	f7ff f9f9 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    9822:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9824:	9b02      	ldr	r3, [sp, #8]
    9826:	011b      	lsls	r3, r3, #4
    9828:	4413      	add	r3, r2
    982a:	3304      	adds	r3, #4
    982c:	2200      	movs	r2, #0
    982e:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    9830:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9832:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9836:	2b00      	cmp	r3, #0
    9838:	d008      	beq.n	984c <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    983a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    983c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9840:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9844:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9846:	9a02      	ldr	r2, [sp, #8]
    9848:	2104      	movs	r1, #4
    984a:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    984c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    984e:	9b02      	ldr	r3, [sp, #8]
    9850:	011b      	lsls	r3, r3, #4
    9852:	4413      	add	r3, r2
    9854:	3304      	adds	r3, #4
    9856:	681b      	ldr	r3, [r3, #0]
    9858:	2b00      	cmp	r3, #0
    985a:	d112      	bne.n	9882 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    985c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    985e:	9b02      	ldr	r3, [sp, #8]
    9860:	011b      	lsls	r3, r3, #4
    9862:	4413      	add	r3, r2
    9864:	3308      	adds	r3, #8
    9866:	2201      	movs	r2, #1
    9868:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    986a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    986c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9870:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9874:	9300      	str	r3, [sp, #0]
    9876:	2300      	movs	r3, #0
    9878:	9a02      	ldr	r2, [sp, #8]
    987a:	9819      	ldr	r0, [sp, #100]	; 0x64
    987c:	f002 fc32 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    9880:	e012      	b.n	98a8 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    9882:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9884:	9b02      	ldr	r3, [sp, #8]
    9886:	011b      	lsls	r3, r3, #4
    9888:	4413      	add	r3, r2
    988a:	3308      	adds	r3, #8
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	2b00      	cmp	r3, #0
    9890:	d00a      	beq.n	98a8 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    9892:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9894:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9898:	f89d 100f 	ldrb.w	r1, [sp, #15]
    989c:	9300      	str	r3, [sp, #0]
    989e:	2300      	movs	r3, #0
    98a0:	9a02      	ldr	r2, [sp, #8]
    98a2:	9819      	ldr	r0, [sp, #100]	; 0x64
    98a4:	f002 fc1e 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
}
    98a8:	bf00      	nop
    98aa:	b01a      	add	sp, #104	; 0x68
    98ac:	bd10      	pop	{r4, pc}
    98ae:	bf00      	nop
    98b0:	0000fcb4 	.word	0x0000fcb4
    98b4:	1fff8fbc 	.word	0x1fff8fbc

000098b8 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    98b8:	b510      	push	{r4, lr}
    98ba:	b098      	sub	sp, #96	; 0x60
    98bc:	4603      	mov	r3, r0
    98be:	9100      	str	r1, [sp, #0]
    98c0:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    98c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    98c8:	4a3c      	ldr	r2, [pc, #240]	; (99bc <FlexCAN_IRQHandlerRxFIFO+0x104>)
    98ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ce:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    98d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    98d4:	4a3a      	ldr	r2, [pc, #232]	; (99c0 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    98d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98da:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    98dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98de:	681b      	ldr	r3, [r3, #0]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d102      	bne.n	98ea <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    98e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98e6:	aa02      	add	r2, sp, #8
    98e8:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    98ea:	9b00      	ldr	r3, [sp, #0]
    98ec:	2b07      	cmp	r3, #7
    98ee:	d048      	beq.n	9982 <FlexCAN_IRQHandlerRxFIFO+0xca>
    98f0:	9b00      	ldr	r3, [sp, #0]
    98f2:	2b07      	cmp	r3, #7
    98f4:	d858      	bhi.n	99a8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    98f6:	9b00      	ldr	r3, [sp, #0]
    98f8:	2b05      	cmp	r3, #5
    98fa:	d003      	beq.n	9904 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    98fc:	9b00      	ldr	r3, [sp, #0]
    98fe:	2b06      	cmp	r3, #6
    9900:	d02c      	beq.n	995c <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    9902:	e051      	b.n	99a8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9904:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9906:	685b      	ldr	r3, [r3, #4]
    9908:	2b01      	cmp	r3, #1
    990a:	d14f      	bne.n	99ac <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    990c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    990e:	681b      	ldr	r3, [r3, #0]
    9910:	4619      	mov	r1, r3
    9912:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9914:	f003 f98d 	bl	cc32 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9918:	9900      	ldr	r1, [sp, #0]
    991a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    991c:	f7ff f97a 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    9920:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9922:	2200      	movs	r2, #0
    9924:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    9926:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9928:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    992c:	2b00      	cmp	r3, #0
    992e:	d008      	beq.n	9942 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9930:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9932:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9936:	f89d 0007 	ldrb.w	r0, [sp, #7]
    993a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    993c:	2200      	movs	r2, #0
    993e:	2101      	movs	r1, #1
    9940:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9942:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9944:	685b      	ldr	r3, [r3, #4]
    9946:	2b00      	cmp	r3, #0
    9948:	d130      	bne.n	99ac <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    994a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    994c:	2201      	movs	r2, #1
    994e:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    9950:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9954:	4618      	mov	r0, r3
    9956:	f000 fc61 	bl	a21c <FlexCAN_CompleteRxMessageFifoData>
            break;
    995a:	e027      	b.n	99ac <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    995c:	9900      	ldr	r1, [sp, #0]
    995e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9960:	f7ff f958 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    9964:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    996a:	2b00      	cmp	r3, #0
    996c:	d020      	beq.n	99b0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    996e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9970:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9974:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9978:	9b16      	ldr	r3, [sp, #88]	; 0x58
    997a:	2200      	movs	r2, #0
    997c:	2102      	movs	r1, #2
    997e:	47a0      	blx	r4
            break;
    9980:	e016      	b.n	99b0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9982:	9900      	ldr	r1, [sp, #0]
    9984:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9986:	f7ff f945 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    998a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    998c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9990:	2b00      	cmp	r3, #0
    9992:	d00f      	beq.n	99b4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9994:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9996:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    999a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    999e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    99a0:	2200      	movs	r2, #0
    99a2:	2103      	movs	r1, #3
    99a4:	47a0      	blx	r4
            break;
    99a6:	e005      	b.n	99b4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    99a8:	bf00      	nop
    99aa:	e004      	b.n	99b6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    99ac:	bf00      	nop
    99ae:	e002      	b.n	99b6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    99b0:	bf00      	nop
    99b2:	e000      	b.n	99b6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    99b4:	bf00      	nop
    }
}
    99b6:	bf00      	nop
    99b8:	b018      	add	sp, #96	; 0x60
    99ba:	bd10      	pop	{r4, pc}
    99bc:	0000fcb4 	.word	0x0000fcb4
    99c0:	1fff8fbc 	.word	0x1fff8fbc

000099c4 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    99c4:	b500      	push	{lr}
    99c6:	b08b      	sub	sp, #44	; 0x2c
    99c8:	4603      	mov	r3, r0
    99ca:	460a      	mov	r2, r1
    99cc:	f88d 3007 	strb.w	r3, [sp, #7]
    99d0:	4613      	mov	r3, r2
    99d2:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    99d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99da:	4a3c      	ldr	r2, [pc, #240]	; (9acc <FlexCAN_AbortTxTransfer+0x108>)
    99dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99e0:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    99e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99e6:	4a3a      	ldr	r2, [pc, #232]	; (9ad0 <FlexCAN_AbortTxTransfer+0x10c>)
    99e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ec:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    99ee:	2300      	movs	r3, #0
    99f0:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    99f2:	2300      	movs	r3, #0
    99f4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    99f6:	2300      	movs	r3, #0
    99f8:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    99fa:	2300      	movs	r3, #0
    99fc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    99fe:	2300      	movs	r3, #0
    9a00:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9a02:	2300      	movs	r3, #0
    9a04:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9a06:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a0a:	4619      	mov	r1, r3
    9a0c:	9807      	ldr	r0, [sp, #28]
    9a0e:	f001 ffe1 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    9a12:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    9a14:	9b03      	ldr	r3, [sp, #12]
    9a16:	681b      	ldr	r3, [r3, #0]
    9a18:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9a1a:	9b05      	ldr	r3, [sp, #20]
    9a1c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9a20:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9a22:	9b05      	ldr	r3, [sp, #20]
    9a24:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    9a28:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    9a2a:	9b03      	ldr	r3, [sp, #12]
    9a2c:	9a05      	ldr	r2, [sp, #20]
    9a2e:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9a30:	2100      	movs	r1, #0
    9a32:	4828      	ldr	r0, [pc, #160]	; (9ad4 <FlexCAN_AbortTxTransfer+0x110>)
    9a34:	f7f8 fa08 	bl	1e48 <OsIf_MicrosToTicks>
    9a38:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9a3a:	2000      	movs	r0, #0
    9a3c:	f7f8 f9b8 	bl	1db0 <OsIf_GetCounter>
    9a40:	4603      	mov	r3, r0
    9a42:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9a44:	e00f      	b.n	9a66 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9a46:	ab02      	add	r3, sp, #8
    9a48:	2100      	movs	r1, #0
    9a4a:	4618      	mov	r0, r3
    9a4c:	f7f8 f9c9 	bl	1de2 <OsIf_GetElapsed>
    9a50:	4602      	mov	r2, r0
    9a52:	9b08      	ldr	r3, [sp, #32]
    9a54:	4413      	add	r3, r2
    9a56:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    9a58:	9a08      	ldr	r2, [sp, #32]
    9a5a:	9b04      	ldr	r3, [sp, #16]
    9a5c:	429a      	cmp	r2, r3
    9a5e:	d302      	bcc.n	9a66 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    9a60:	2303      	movs	r3, #3
    9a62:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    9a64:	e008      	b.n	9a78 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9a66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a6a:	4619      	mov	r1, r3
    9a6c:	9807      	ldr	r0, [sp, #28]
    9a6e:	f7ff f8e4 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    9a72:	4603      	mov	r3, r0
    9a74:	2b00      	cmp	r3, #0
    9a76:	d0e6      	beq.n	9a46 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    9a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a7a:	2b03      	cmp	r3, #3
    9a7c:	d012      	beq.n	9aa4 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    9a7e:	9b03      	ldr	r3, [sp, #12]
    9a80:	681b      	ldr	r3, [r3, #0]
    9a82:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9a84:	9b05      	ldr	r3, [sp, #20]
    9a86:	0e1b      	lsrs	r3, r3, #24
    9a88:	f003 030f 	and.w	r3, r3, #15
    9a8c:	2b08      	cmp	r3, #8
    9a8e:	d101      	bne.n	9a94 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    9a90:	2305      	movs	r3, #5
    9a92:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9a94:	9b05      	ldr	r3, [sp, #20]
    9a96:	0e1b      	lsrs	r3, r3, #24
    9a98:	f003 030f 	and.w	r3, r3, #15
    9a9c:	2b09      	cmp	r3, #9
    9a9e:	d101      	bne.n	9aa4 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    9aa0:	2300      	movs	r3, #0
    9aa2:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9aa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9aa8:	4619      	mov	r1, r3
    9aaa:	9807      	ldr	r0, [sp, #28]
    9aac:	f7ff f8b2 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9ab0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ab4:	9a06      	ldr	r2, [sp, #24]
    9ab6:	011b      	lsls	r3, r3, #4
    9ab8:	4413      	add	r3, r2
    9aba:	3304      	adds	r3, #4
    9abc:	2200      	movs	r2, #0
    9abe:	601a      	str	r2, [r3, #0]

    return result;
    9ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9ac2:	4618      	mov	r0, r3
    9ac4:	b00b      	add	sp, #44	; 0x2c
    9ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    9aca:	bf00      	nop
    9acc:	0000fcb4 	.word	0x0000fcb4
    9ad0:	1fff8fbc 	.word	0x1fff8fbc
    9ad4:	000f4240 	.word	0x000f4240

00009ad8 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9ad8:	b500      	push	{lr}
    9ada:	b089      	sub	sp, #36	; 0x24
    9adc:	4603      	mov	r3, r0
    9ade:	460a      	mov	r2, r1
    9ae0:	f88d 3007 	strb.w	r3, [sp, #7]
    9ae4:	4613      	mov	r3, r2
    9ae6:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9aee:	4a41      	ldr	r2, [pc, #260]	; (9bf4 <FlexCAN_AbortRxTransfer+0x11c>)
    9af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af4:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9afa:	4a3f      	ldr	r2, [pc, #252]	; (9bf8 <FlexCAN_AbortRxTransfer+0x120>)
    9afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b00:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    9b02:	2300      	movs	r3, #0
    9b04:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    9b08:	2300      	movs	r3, #0
    9b0a:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    9b0c:	2300      	movs	r3, #0
    9b0e:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9b10:	2300      	movs	r3, #0
    9b12:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9b14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b18:	9a06      	ldr	r2, [sp, #24]
    9b1a:	011b      	lsls	r3, r3, #4
    9b1c:	4413      	add	r3, r2
    9b1e:	3304      	adds	r3, #4
    9b20:	2200      	movs	r2, #0
    9b22:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    9b24:	9b06      	ldr	r3, [sp, #24]
    9b26:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d03c      	beq.n	9ba8 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    9b2e:	9b07      	ldr	r3, [sp, #28]
    9b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9b32:	0e1b      	lsrs	r3, r3, #24
    9b34:	b2db      	uxtb	r3, r3
    9b36:	f003 030f 	and.w	r3, r3, #15
    9b3a:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    9b3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b42:	4618      	mov	r0, r3
    9b44:	f7ff f9f3 	bl	8f2e <RxFifoOcuppiedLastMsgBuff>
    9b48:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    9b4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b4e:	9a04      	ldr	r2, [sp, #16]
    9b50:	429a      	cmp	r2, r3
    9b52:	d21b      	bcs.n	9b8c <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9b54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b58:	4619      	mov	r1, r3
    9b5a:	9807      	ldr	r0, [sp, #28]
    9b5c:	f001 ff3a 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    9b60:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    9b62:	9b02      	ldr	r3, [sp, #8]
    9b64:	681b      	ldr	r3, [r3, #0]
    9b66:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    9b68:	9b03      	ldr	r3, [sp, #12]
    9b6a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9b6e:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    9b70:	9b02      	ldr	r3, [sp, #8]
    9b72:	9a03      	ldr	r2, [sp, #12]
    9b74:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9b76:	9b03      	ldr	r3, [sp, #12]
    9b78:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9b7c:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9b7e:	9b03      	ldr	r3, [sp, #12]
    9b80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9b84:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    9b86:	9b02      	ldr	r3, [sp, #8]
    9b88:	9a03      	ldr	r2, [sp, #12]
    9b8a:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    9b8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b90:	2b00      	cmp	r3, #0
    9b92:	d125      	bne.n	9be0 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    9b94:	9b06      	ldr	r3, [sp, #24]
    9b96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9b9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9b9e:	2205      	movs	r2, #5
    9ba0:	9807      	ldr	r0, [sp, #28]
    9ba2:	f002 faf5 	bl	c190 <FLEXCAN_ClearMsgBuffIntCmd>
    9ba6:	e01b      	b.n	9be0 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9ba8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9bac:	4619      	mov	r1, r3
    9bae:	9807      	ldr	r0, [sp, #28]
    9bb0:	f001 ff10 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    9bb4:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    9bb6:	9b02      	ldr	r3, [sp, #8]
    9bb8:	681b      	ldr	r3, [r3, #0]
    9bba:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9bbc:	9b03      	ldr	r3, [sp, #12]
    9bbe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9bc2:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    9bc4:	9b02      	ldr	r3, [sp, #8]
    9bc6:	9a03      	ldr	r2, [sp, #12]
    9bc8:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9bca:	9b03      	ldr	r3, [sp, #12]
    9bcc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9bd0:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9bd2:	9b03      	ldr	r3, [sp, #12]
    9bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9bd8:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    9bda:	9b02      	ldr	r3, [sp, #8]
    9bdc:	9a03      	ldr	r2, [sp, #12]
    9bde:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9be0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9be4:	4619      	mov	r1, r3
    9be6:	9807      	ldr	r0, [sp, #28]
    9be8:	f7ff f814 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    9bec:	bf00      	nop
    9bee:	b009      	add	sp, #36	; 0x24
    9bf0:	f85d fb04 	ldr.w	pc, [sp], #4
    9bf4:	0000fcb4 	.word	0x0000fcb4
    9bf8:	1fff8fbc 	.word	0x1fff8fbc

00009bfc <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    9bfc:	b500      	push	{lr}
    9bfe:	b089      	sub	sp, #36	; 0x24
    9c00:	4603      	mov	r3, r0
    9c02:	9102      	str	r1, [sp, #8]
    9c04:	9201      	str	r2, [sp, #4]
    9c06:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9c0a:	2300      	movs	r3, #0
    9c0c:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    9c0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c12:	4a36      	ldr	r2, [pc, #216]	; (9cec <FlexCAN_Ip_Init_Privileged+0xf0>)
    9c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c18:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    9c1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c1e:	9a01      	ldr	r2, [sp, #4]
    9c20:	9905      	ldr	r1, [sp, #20]
    9c22:	4618      	mov	r0, r3
    9c24:	f7ff fa84 	bl	9130 <FlexCAN_InitController>
    9c28:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    9c2a:	9b06      	ldr	r3, [sp, #24]
    9c2c:	2b00      	cmp	r3, #0
    9c2e:	d158      	bne.n	9ce2 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    9c30:	9901      	ldr	r1, [sp, #4]
    9c32:	9805      	ldr	r0, [sp, #20]
    9c34:	f7ff fad6 	bl	91e4 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    9c38:	9b01      	ldr	r3, [sp, #4]
    9c3a:	68db      	ldr	r3, [r3, #12]
    9c3c:	4619      	mov	r1, r3
    9c3e:	9805      	ldr	r0, [sp, #20]
    9c40:	f002 fdb8 	bl	c7b4 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    9c44:	2300      	movs	r3, #0
    9c46:	9307      	str	r3, [sp, #28]
    9c48:	e01d      	b.n	9c86 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    9c4a:	9a02      	ldr	r2, [sp, #8]
    9c4c:	9b07      	ldr	r3, [sp, #28]
    9c4e:	011b      	lsls	r3, r3, #4
    9c50:	4413      	add	r3, r2
    9c52:	3308      	adds	r3, #8
    9c54:	2201      	movs	r2, #1
    9c56:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    9c58:	9a02      	ldr	r2, [sp, #8]
    9c5a:	9b07      	ldr	r3, [sp, #28]
    9c5c:	011b      	lsls	r3, r3, #4
    9c5e:	4413      	add	r3, r2
    9c60:	2200      	movs	r2, #0
    9c62:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    9c64:	9a02      	ldr	r2, [sp, #8]
    9c66:	9b07      	ldr	r3, [sp, #28]
    9c68:	011b      	lsls	r3, r3, #4
    9c6a:	4413      	add	r3, r2
    9c6c:	3304      	adds	r3, #4
    9c6e:	2200      	movs	r2, #0
    9c70:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    9c72:	9a02      	ldr	r2, [sp, #8]
    9c74:	9b07      	ldr	r3, [sp, #28]
    9c76:	011b      	lsls	r3, r3, #4
    9c78:	4413      	add	r3, r2
    9c7a:	330c      	adds	r3, #12
    9c7c:	2200      	movs	r2, #0
    9c7e:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    9c80:	9b07      	ldr	r3, [sp, #28]
    9c82:	3301      	adds	r3, #1
    9c84:	9307      	str	r3, [sp, #28]
    9c86:	9b07      	ldr	r3, [sp, #28]
    9c88:	2b1f      	cmp	r3, #31
    9c8a:	d9de      	bls.n	9c4a <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    9c8c:	9b01      	ldr	r3, [sp, #4]
    9c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9c90:	9b02      	ldr	r3, [sp, #8]
    9c92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    9c96:	9b01      	ldr	r3, [sp, #4]
    9c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9c9a:	9b02      	ldr	r3, [sp, #8]
    9c9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    9ca0:	9b02      	ldr	r3, [sp, #8]
    9ca2:	2200      	movs	r2, #0
    9ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    9ca8:	9b01      	ldr	r3, [sp, #4]
    9caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9cac:	9b02      	ldr	r3, [sp, #8]
    9cae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    9cb2:	9b02      	ldr	r3, [sp, #8]
    9cb4:	2200      	movs	r2, #0
    9cb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    9cba:	9b01      	ldr	r3, [sp, #4]
    9cbc:	7a1a      	ldrb	r2, [r3, #8]
    9cbe:	9b02      	ldr	r3, [sp, #8]
    9cc0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    9cc4:	9b01      	ldr	r3, [sp, #4]
    9cc6:	681a      	ldr	r2, [r3, #0]
    9cc8:	9b02      	ldr	r3, [sp, #8]
    9cca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    9cce:	9b02      	ldr	r3, [sp, #8]
    9cd0:	2201      	movs	r2, #1
    9cd2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    9cd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9cda:	4905      	ldr	r1, [pc, #20]	; (9cf0 <FlexCAN_Ip_Init_Privileged+0xf4>)
    9cdc:	9a02      	ldr	r2, [sp, #8]
    9cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    9ce2:	9b06      	ldr	r3, [sp, #24]
}
    9ce4:	4618      	mov	r0, r3
    9ce6:	b009      	add	sp, #36	; 0x24
    9ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cec:	0000fcb4 	.word	0x0000fcb4
    9cf0:	1fff8fbc 	.word	0x1fff8fbc

00009cf4 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    9cf4:	b500      	push	{lr}
    9cf6:	b08b      	sub	sp, #44	; 0x2c
    9cf8:	9204      	str	r2, [sp, #16]
    9cfa:	9303      	str	r3, [sp, #12]
    9cfc:	4603      	mov	r3, r0
    9cfe:	f88d 3017 	strb.w	r3, [sp, #23]
    9d02:	460b      	mov	r3, r1
    9d04:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9d08:	2301      	movs	r3, #1
    9d0a:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9d0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d10:	4a1c      	ldr	r2, [pc, #112]	; (9d84 <FlexCAN_Ip_Send+0x90>)
    9d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d16:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9d18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d1c:	4a1a      	ldr	r2, [pc, #104]	; (9d88 <FlexCAN_Ip_Send+0x94>)
    9d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d22:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    9d24:	9808      	ldr	r0, [sp, #32]
    9d26:	f7ff f8f4 	bl	8f12 <FlexCAN_IsListenOnlyModeEnabled>
    9d2a:	4603      	mov	r3, r0
    9d2c:	f083 0301 	eor.w	r3, r3, #1
    9d30:	b2db      	uxtb	r3, r3
    9d32:	2b00      	cmp	r3, #0
    9d34:	d021      	beq.n	9d7a <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    9d36:	f89d 1016 	ldrb.w	r1, [sp, #22]
    9d3a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d40:	9300      	str	r3, [sp, #0]
    9d42:	9b03      	ldr	r3, [sp, #12]
    9d44:	9a04      	ldr	r2, [sp, #16]
    9d46:	f7ff fb4b 	bl	93e0 <FlexCAN_StartSendData>
    9d4a:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    9d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d4e:	2b00      	cmp	r3, #0
    9d50:	d113      	bne.n	9d7a <FlexCAN_Ip_Send+0x86>
    9d52:	9b04      	ldr	r3, [sp, #16]
    9d54:	7b1b      	ldrb	r3, [r3, #12]
    9d56:	f083 0301 	eor.w	r3, r3, #1
    9d5a:	b2db      	uxtb	r3, r3
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d00c      	beq.n	9d7a <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    9d60:	f89d 2016 	ldrb.w	r2, [sp, #22]
    9d64:	9b07      	ldr	r3, [sp, #28]
    9d66:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9d6a:	f89d 1017 	ldrb.w	r1, [sp, #23]
    9d6e:	9300      	str	r3, [sp, #0]
    9d70:	2301      	movs	r3, #1
    9d72:	9808      	ldr	r0, [sp, #32]
    9d74:	f002 f9b6 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
    9d78:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    9d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9d7c:	4618      	mov	r0, r3
    9d7e:	b00b      	add	sp, #44	; 0x2c
    9d80:	f85d fb04 	ldr.w	pc, [sp], #4
    9d84:	0000fcb4 	.word	0x0000fcb4
    9d88:	1fff8fbc 	.word	0x1fff8fbc

00009d8c <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    9d8c:	b500      	push	{lr}
    9d8e:	b08b      	sub	sp, #44	; 0x2c
    9d90:	9202      	str	r2, [sp, #8]
    9d92:	9301      	str	r3, [sp, #4]
    9d94:	4603      	mov	r3, r0
    9d96:	f88d 300f 	strb.w	r3, [sp, #15]
    9d9a:	460b      	mov	r3, r1
    9d9c:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9da0:	2300      	movs	r3, #0
    9da2:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9da4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9da8:	4a19      	ldr	r2, [pc, #100]	; (9e10 <FlexCAN_Ip_ConfigRxMb+0x84>)
    9daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dae:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9db0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9db4:	4619      	mov	r1, r3
    9db6:	9808      	ldr	r0, [sp, #32]
    9db8:	f7fe ff2c 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    9dbc:	9b02      	ldr	r3, [sp, #8]
    9dbe:	685b      	ldr	r3, [r3, #4]
    9dc0:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    9dc2:	9b02      	ldr	r3, [sp, #8]
    9dc4:	681b      	ldr	r3, [r3, #0]
    9dc6:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    9dc8:	9b02      	ldr	r3, [sp, #8]
    9dca:	7a1b      	ldrb	r3, [r3, #8]
    9dcc:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    9dd0:	230f      	movs	r3, #15
    9dd2:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9dd4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9dd8:	aa04      	add	r2, sp, #16
    9dda:	9b01      	ldr	r3, [sp, #4]
    9ddc:	9808      	ldr	r0, [sp, #32]
    9dde:	f002 fa25 	bl	c22c <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    9de2:	2300      	movs	r3, #0
    9de4:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9de6:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9dea:	aa04      	add	r2, sp, #16
    9dec:	9b01      	ldr	r3, [sp, #4]
    9dee:	9808      	ldr	r0, [sp, #32]
    9df0:	f002 fa1c 	bl	c22c <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    9df4:	2304      	movs	r3, #4
    9df6:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9df8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9dfc:	aa04      	add	r2, sp, #16
    9dfe:	9b01      	ldr	r3, [sp, #4]
    9e00:	9808      	ldr	r0, [sp, #32]
    9e02:	f002 fa13 	bl	c22c <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9e08:	4618      	mov	r0, r3
    9e0a:	b00b      	add	sp, #44	; 0x2c
    9e0c:	f85d fb04 	ldr.w	pc, [sp], #4
    9e10:	0000fcb4 	.word	0x0000fcb4

00009e14 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    9e14:	b500      	push	{lr}
    9e16:	b089      	sub	sp, #36	; 0x24
    9e18:	9202      	str	r2, [sp, #8]
    9e1a:	461a      	mov	r2, r3
    9e1c:	4603      	mov	r3, r0
    9e1e:	f88d 300f 	strb.w	r3, [sp, #15]
    9e22:	460b      	mov	r3, r1
    9e24:	f88d 300e 	strb.w	r3, [sp, #14]
    9e28:	4613      	mov	r3, r2
    9e2a:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e32:	4a18      	ldr	r2, [pc, #96]	; (9e94 <FlexCAN_Ip_Receive+0x80>)
    9e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e38:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9e3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e3e:	4a16      	ldr	r2, [pc, #88]	; (9e98 <FlexCAN_Ip_Receive+0x84>)
    9e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e44:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    9e46:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9e4a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9e4e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9e52:	9a02      	ldr	r2, [sp, #8]
    9e54:	f7ff fa86 	bl	9364 <FlexCAN_StartRxMessageBufferData>
    9e58:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    9e5a:	9b07      	ldr	r3, [sp, #28]
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d113      	bne.n	9e88 <FlexCAN_Ip_Receive+0x74>
    9e60:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9e64:	f083 0301 	eor.w	r3, r3, #1
    9e68:	b2db      	uxtb	r3, r3
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	d00c      	beq.n	9e88 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    9e6e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9e72:	9b05      	ldr	r3, [sp, #20]
    9e74:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9e78:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9e7c:	9300      	str	r3, [sp, #0]
    9e7e:	2301      	movs	r3, #1
    9e80:	9806      	ldr	r0, [sp, #24]
    9e82:	f002 f92f 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
    9e86:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    9e88:	9b07      	ldr	r3, [sp, #28]
}
    9e8a:	4618      	mov	r0, r3
    9e8c:	b009      	add	sp, #36	; 0x24
    9e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e92:	bf00      	nop
    9e94:	0000fcb4 	.word	0x0000fcb4
    9e98:	1fff8fbc 	.word	0x1fff8fbc

00009e9c <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    9e9c:	b500      	push	{lr}
    9e9e:	b08b      	sub	sp, #44	; 0x2c
    9ea0:	9202      	str	r2, [sp, #8]
    9ea2:	461a      	mov	r2, r3
    9ea4:	4603      	mov	r3, r0
    9ea6:	f88d 300f 	strb.w	r3, [sp, #15]
    9eaa:	460b      	mov	r3, r1
    9eac:	f88d 300e 	strb.w	r3, [sp, #14]
    9eb0:	4613      	mov	r3, r2
    9eb2:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    9eb6:	2300      	movs	r3, #0
    9eb8:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    9eba:	2300      	movs	r3, #0
    9ebc:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9ec4:	fb02 f303 	mul.w	r3, r2, r3
    9ec8:	2100      	movs	r1, #0
    9eca:	4618      	mov	r0, r3
    9ecc:	f7f7 ffbc 	bl	1e48 <OsIf_MicrosToTicks>
    9ed0:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9ed2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ed6:	4a4c      	ldr	r2, [pc, #304]	; (a008 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    9ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9edc:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9ede:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ee2:	4a4a      	ldr	r2, [pc, #296]	; (a00c <FlexCAN_Ip_ReceiveBlocking+0x170>)
    9ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ee8:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    9eea:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9eee:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9ef2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9ef6:	9a02      	ldr	r2, [sp, #8]
    9ef8:	f7ff fa34 	bl	9364 <FlexCAN_StartRxMessageBufferData>
    9efc:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    9efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f00:	2b00      	cmp	r3, #0
    9f02:	d113      	bne.n	9f2c <FlexCAN_Ip_ReceiveBlocking+0x90>
    9f04:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9f08:	f083 0301 	eor.w	r3, r3, #1
    9f0c:	b2db      	uxtb	r3, r3
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d00c      	beq.n	9f2c <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    9f12:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9f16:	9b06      	ldr	r3, [sp, #24]
    9f18:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9f1c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9f20:	9300      	str	r3, [sp, #0]
    9f22:	2301      	movs	r3, #1
    9f24:	9805      	ldr	r0, [sp, #20]
    9f26:	f002 f8dd 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
    9f2a:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d133      	bne.n	9f9a <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9f32:	2000      	movs	r0, #0
    9f34:	f7f7 ff3c 	bl	1db0 <OsIf_GetCounter>
    9f38:	4603      	mov	r3, r0
    9f3a:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    9f3c:	e024      	b.n	9f88 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    9f3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9f42:	2b00      	cmp	r3, #0
    9f44:	d010      	beq.n	9f68 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    9f46:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f4a:	4619      	mov	r1, r3
    9f4c:	9805      	ldr	r0, [sp, #20]
    9f4e:	f7fe fe74 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    9f52:	4603      	mov	r3, r0
    9f54:	2b00      	cmp	r3, #0
    9f56:	d007      	beq.n	9f68 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    9f58:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9f5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f60:	4611      	mov	r1, r2
    9f62:	4618      	mov	r0, r3
    9f64:	f7ff fb20 	bl	95a8 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9f68:	ab04      	add	r3, sp, #16
    9f6a:	2100      	movs	r1, #0
    9f6c:	4618      	mov	r0, r3
    9f6e:	f7f7 ff38 	bl	1de2 <OsIf_GetElapsed>
    9f72:	4602      	mov	r2, r0
    9f74:	9b08      	ldr	r3, [sp, #32]
    9f76:	4413      	add	r3, r2
    9f78:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    9f7a:	9a08      	ldr	r2, [sp, #32]
    9f7c:	9b07      	ldr	r3, [sp, #28]
    9f7e:	429a      	cmp	r2, r3
    9f80:	d302      	bcc.n	9f88 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    9f82:	2303      	movs	r3, #3
    9f84:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    9f86:	e008      	b.n	9f9a <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    9f88:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f8c:	9a06      	ldr	r2, [sp, #24]
    9f8e:	011b      	lsls	r3, r3, #4
    9f90:	4413      	add	r3, r2
    9f92:	3304      	adds	r3, #4
    9f94:	681b      	ldr	r3, [r3, #0]
    9f96:	2b01      	cmp	r3, #1
    9f98:	d0d1      	beq.n	9f3e <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    9f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f9c:	2b03      	cmp	r3, #3
    9f9e:	d112      	bne.n	9fc6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    9fa0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9fa4:	f083 0301 	eor.w	r3, r3, #1
    9fa8:	b2db      	uxtb	r3, r3
    9faa:	2b00      	cmp	r3, #0
    9fac:	d00b      	beq.n	9fc6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9fae:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9fb2:	9b06      	ldr	r3, [sp, #24]
    9fb4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9fb8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9fbc:	9300      	str	r3, [sp, #0]
    9fbe:	2300      	movs	r3, #0
    9fc0:	9805      	ldr	r0, [sp, #20]
    9fc2:	f002 f88f 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    9fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fc8:	2b04      	cmp	r3, #4
    9fca:	d018      	beq.n	9ffe <FlexCAN_Ip_ReceiveBlocking+0x162>
    9fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fce:	2b02      	cmp	r3, #2
    9fd0:	d015      	beq.n	9ffe <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    9fd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fd6:	9a06      	ldr	r2, [sp, #24]
    9fd8:	011b      	lsls	r3, r3, #4
    9fda:	4413      	add	r3, r2
    9fdc:	3304      	adds	r3, #4
    9fde:	681b      	ldr	r3, [r3, #0]
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d102      	bne.n	9fea <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    9fe4:	2300      	movs	r3, #0
    9fe6:	9309      	str	r3, [sp, #36]	; 0x24
    9fe8:	e009      	b.n	9ffe <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9fea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fee:	9a06      	ldr	r2, [sp, #24]
    9ff0:	011b      	lsls	r3, r3, #4
    9ff2:	4413      	add	r3, r2
    9ff4:	3304      	adds	r3, #4
    9ff6:	2200      	movs	r2, #0
    9ff8:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    9ffa:	2303      	movs	r3, #3
    9ffc:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    9ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    a000:	4618      	mov	r0, r3
    a002:	b00b      	add	sp, #44	; 0x2c
    a004:	f85d fb04 	ldr.w	pc, [sp], #4
    a008:	1fff8fbc 	.word	0x1fff8fbc
    a00c:	0000fcb4 	.word	0x0000fcb4

0000a010 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    a010:	b500      	push	{lr}
    a012:	b085      	sub	sp, #20
    a014:	4603      	mov	r3, r0
    a016:	9100      	str	r1, [sp, #0]
    a018:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a01c:	2300      	movs	r3, #0
    a01e:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    a020:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a024:	9900      	ldr	r1, [sp, #0]
    a026:	4618      	mov	r0, r3
    a028:	f7ff fa5e 	bl	94e8 <FlexCAN_StartRxMessageFifoData>
    a02c:	9003      	str	r0, [sp, #12]
    }
    return result;
    a02e:	9b03      	ldr	r3, [sp, #12]
}
    a030:	4618      	mov	r0, r3
    a032:	b005      	add	sp, #20
    a034:	f85d fb04 	ldr.w	pc, [sp], #4

0000a038 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    a038:	b500      	push	{lr}
    a03a:	b087      	sub	sp, #28
    a03c:	4603      	mov	r3, r0
    a03e:	9102      	str	r1, [sp, #8]
    a040:	9201      	str	r2, [sp, #4]
    a042:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a046:	2300      	movs	r3, #0
    a048:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    a04a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a04e:	9902      	ldr	r1, [sp, #8]
    a050:	4618      	mov	r0, r3
    a052:	f7ff fa49 	bl	94e8 <FlexCAN_StartRxMessageFifoData>
    a056:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    a058:	9b05      	ldr	r3, [sp, #20]
    a05a:	2b00      	cmp	r3, #0
    a05c:	d106      	bne.n	a06c <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    a05e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a062:	9901      	ldr	r1, [sp, #4]
    a064:	4618      	mov	r0, r3
    a066:	f7ff f8e2 	bl	922e <FlexCAN_ProccessLegacyRxFIFO>
    a06a:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    a06c:	9b05      	ldr	r3, [sp, #20]
}
    a06e:	4618      	mov	r0, r3
    a070:	b007      	add	sp, #28
    a072:	f85d fb04 	ldr.w	pc, [sp], #4

0000a076 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    a076:	b500      	push	{lr}
    a078:	b089      	sub	sp, #36	; 0x24
    a07a:	4603      	mov	r3, r0
    a07c:	9102      	str	r1, [sp, #8]
    a07e:	9201      	str	r2, [sp, #4]
    a080:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a084:	2300      	movs	r3, #0
    a086:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a088:	2300      	movs	r3, #0
    a08a:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a08c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a090:	4a1c      	ldr	r2, [pc, #112]	; (a104 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    a092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a096:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a098:	9805      	ldr	r0, [sp, #20]
    a09a:	f7fe fd61 	bl	8b60 <FlexCAN_IsEnabled>
    a09e:	4603      	mov	r3, r0
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	bf14      	ite	ne
    a0a4:	2301      	movne	r3, #1
    a0a6:	2300      	moveq	r3, #0
    a0a8:	b2db      	uxtb	r3, r3
    a0aa:	f083 0301 	eor.w	r3, r3, #1
    a0ae:	b2db      	uxtb	r3, r3
    a0b0:	f88d 3013 	strb.w	r3, [sp, #19]
    a0b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0b8:	f003 0301 	and.w	r3, r3, #1
    a0bc:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    a0c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d003      	beq.n	a0d0 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    a0c8:	9805      	ldr	r0, [sp, #20]
    a0ca:	f001 fd6b 	bl	bba4 <FlexCAN_Enable>
    a0ce:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a0d0:	9b07      	ldr	r3, [sp, #28]
    a0d2:	2b00      	cmp	r3, #0
    a0d4:	d104      	bne.n	a0e0 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    a0d6:	9a01      	ldr	r2, [sp, #4]
    a0d8:	9902      	ldr	r1, [sp, #8]
    a0da:	9805      	ldr	r0, [sp, #20]
    a0dc:	f002 fba5 	bl	c82a <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    a0e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d008      	beq.n	a0fa <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    a0e8:	9805      	ldr	r0, [sp, #20]
    a0ea:	f001 fdd9 	bl	bca0 <FlexCAN_Disable>
    a0ee:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a0f0:	9b06      	ldr	r3, [sp, #24]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d001      	beq.n	a0fa <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    a0f6:	9b06      	ldr	r3, [sp, #24]
    a0f8:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    a0fa:	9b07      	ldr	r3, [sp, #28]
}
    a0fc:	4618      	mov	r0, r3
    a0fe:	b009      	add	sp, #36	; 0x24
    a100:	f85d fb04 	ldr.w	pc, [sp], #4
    a104:	0000fcb4 	.word	0x0000fcb4

0000a108 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    a108:	b500      	push	{lr}
    a10a:	b08f      	sub	sp, #60	; 0x3c
    a10c:	9204      	str	r2, [sp, #16]
    a10e:	9303      	str	r3, [sp, #12]
    a110:	4603      	mov	r3, r0
    a112:	f88d 3017 	strb.w	r3, [sp, #23]
    a116:	460b      	mov	r3, r1
    a118:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a11c:	2300      	movs	r3, #0
    a11e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a120:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a124:	4a27      	ldr	r2, [pc, #156]	; (a1c4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    a126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a12a:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    a12c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a130:	4a25      	ldr	r2, [pc, #148]	; (a1c8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    a132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a136:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    a138:	2300      	movs	r3, #0
    a13a:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a13e:	2b00      	cmp	r3, #0
    a140:	d13a      	bne.n	a1b8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    a142:	9b04      	ldr	r3, [sp, #16]
    a144:	685b      	ldr	r3, [r3, #4]
    a146:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    a148:	9b04      	ldr	r3, [sp, #16]
    a14a:	681b      	ldr	r3, [r3, #0]
    a14c:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    a14e:	230a      	movs	r3, #10
    a150:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    a152:	2300      	movs	r3, #0
    a154:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    a158:	2300      	movs	r3, #0
    a15a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    a15e:	2300      	movs	r3, #0
    a160:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    a164:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a168:	4619      	mov	r1, r3
    a16a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a16c:	f7fe fd52 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    a170:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a174:	4619      	mov	r1, r3
    a176:	980c      	ldr	r0, [sp, #48]	; 0x30
    a178:	f001 fc2c 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    a17c:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    a17e:	9b04      	ldr	r3, [sp, #16]
    a180:	7adb      	ldrb	r3, [r3, #11]
    a182:	a906      	add	r1, sp, #24
    a184:	9300      	str	r3, [sp, #0]
    a186:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a188:	9a03      	ldr	r2, [sp, #12]
    a18a:	980a      	ldr	r0, [sp, #40]	; 0x28
    a18c:	f002 f974 	bl	c478 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    a190:	9b04      	ldr	r3, [sp, #16]
    a192:	7b1b      	ldrb	r3, [r3, #12]
    a194:	f083 0301 	eor.w	r3, r3, #1
    a198:	b2db      	uxtb	r3, r3
    a19a:	2b00      	cmp	r3, #0
    a19c:	d00c      	beq.n	a1b8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    a19e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a1a4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a1a8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    a1ac:	9300      	str	r3, [sp, #0]
    a1ae:	2301      	movs	r3, #1
    a1b0:	980c      	ldr	r0, [sp, #48]	; 0x30
    a1b2:	f001 ff97 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
    a1b6:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    a1b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    a1ba:	4618      	mov	r0, r3
    a1bc:	b00f      	add	sp, #60	; 0x3c
    a1be:	f85d fb04 	ldr.w	pc, [sp], #4
    a1c2:	bf00      	nop
    a1c4:	0000fcb4 	.word	0x0000fcb4
    a1c8:	1fff8fbc 	.word	0x1fff8fbc

0000a1cc <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    a1cc:	b084      	sub	sp, #16
    a1ce:	4603      	mov	r3, r0
    a1d0:	460a      	mov	r2, r1
    a1d2:	f88d 3007 	strb.w	r3, [sp, #7]
    a1d6:	4613      	mov	r3, r2
    a1d8:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a1dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1e0:	4a0d      	ldr	r2, [pc, #52]	; (a218 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    a1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1e6:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    a1e8:	2301      	movs	r3, #1
    a1ea:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    a1ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1f0:	2b1f      	cmp	r3, #31
    a1f2:	d80d      	bhi.n	a210 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    a1f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1f8:	9a02      	ldr	r2, [sp, #8]
    a1fa:	011b      	lsls	r3, r3, #4
    a1fc:	4413      	add	r3, r2
    a1fe:	3304      	adds	r3, #4
    a200:	681b      	ldr	r3, [r3, #0]
    a202:	2b00      	cmp	r3, #0
    a204:	d102      	bne.n	a20c <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    a206:	2300      	movs	r3, #0
    a208:	9303      	str	r3, [sp, #12]
    a20a:	e001      	b.n	a210 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    a20c:	2302      	movs	r3, #2
    a20e:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    a210:	9b03      	ldr	r3, [sp, #12]
}
    a212:	4618      	mov	r0, r3
    a214:	b004      	add	sp, #16
    a216:	4770      	bx	lr
    a218:	1fff8fbc 	.word	0x1fff8fbc

0000a21c <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    a21c:	b500      	push	{lr}
    a21e:	b087      	sub	sp, #28
    a220:	4603      	mov	r3, r0
    a222:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a226:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a22a:	4a1d      	ldr	r2, [pc, #116]	; (a2a0 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    a22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a230:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a232:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a236:	4a1b      	ldr	r2, [pc, #108]	; (a2a4 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    a238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a23c:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    a23e:	9b04      	ldr	r3, [sp, #16]
    a240:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    a244:	2b00      	cmp	r3, #0
    a246:	d120      	bne.n	a28a <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    a248:	9b04      	ldr	r3, [sp, #16]
    a24a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a24e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a252:	9300      	str	r3, [sp, #0]
    a254:	2300      	movs	r3, #0
    a256:	2205      	movs	r2, #5
    a258:	9805      	ldr	r0, [sp, #20]
    a25a:	f001 ff43 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    a25e:	9b04      	ldr	r3, [sp, #16]
    a260:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a264:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a268:	9300      	str	r3, [sp, #0]
    a26a:	2300      	movs	r3, #0
    a26c:	2206      	movs	r2, #6
    a26e:	9805      	ldr	r0, [sp, #20]
    a270:	f001 ff38 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    a274:	9b04      	ldr	r3, [sp, #16]
    a276:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a27a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a27e:	9300      	str	r3, [sp, #0]
    a280:	2300      	movs	r3, #0
    a282:	2207      	movs	r2, #7
    a284:	9805      	ldr	r0, [sp, #20]
    a286:	f001 ff2d 	bl	c0e4 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    a28a:	9b04      	ldr	r3, [sp, #16]
    a28c:	2200      	movs	r2, #0
    a28e:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    a290:	9b04      	ldr	r3, [sp, #16]
    a292:	2200      	movs	r2, #0
    a294:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    a296:	bf00      	nop
    a298:	b007      	add	sp, #28
    a29a:	f85d fb04 	ldr.w	pc, [sp], #4
    a29e:	bf00      	nop
    a2a0:	0000fcb4 	.word	0x0000fcb4
    a2a4:	1fff8fbc 	.word	0x1fff8fbc

0000a2a8 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    a2a8:	b500      	push	{lr}
    a2aa:	b08b      	sub	sp, #44	; 0x2c
    a2ac:	4603      	mov	r3, r0
    a2ae:	9102      	str	r1, [sp, #8]
    a2b0:	9201      	str	r2, [sp, #4]
    a2b2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    a2b6:	2300      	movs	r3, #0
    a2b8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    a2ba:	2300      	movs	r3, #0
    a2bc:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a2be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2c2:	4a3f      	ldr	r2, [pc, #252]	; (a3c0 <FlexCAN_IRQHandler+0x118>)
    a2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c8:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a2ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2ce:	4a3d      	ldr	r2, [pc, #244]	; (a3c4 <FlexCAN_IRQHandler+0x11c>)
    a2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d4:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    a2d6:	9b01      	ldr	r3, [sp, #4]
    a2d8:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    a2da:	9b05      	ldr	r3, [sp, #20]
    a2dc:	2b00      	cmp	r3, #0
    a2de:	d05c      	beq.n	a39a <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a2e0:	9907      	ldr	r1, [sp, #28]
    a2e2:	9806      	ldr	r0, [sp, #24]
    a2e4:	f7fe fe47 	bl	8f76 <FlexCAN_GetMsgBuffIntStatusFlag>
    a2e8:	4603      	mov	r3, r0
    a2ea:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a2ec:	e008      	b.n	a300 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    a2ee:	9b07      	ldr	r3, [sp, #28]
    a2f0:	3b01      	subs	r3, #1
    a2f2:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a2f4:	9907      	ldr	r1, [sp, #28]
    a2f6:	9806      	ldr	r0, [sp, #24]
    a2f8:	f7fe fe3d 	bl	8f76 <FlexCAN_GetMsgBuffIntStatusFlag>
    a2fc:	4603      	mov	r3, r0
    a2fe:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a300:	9b08      	ldr	r3, [sp, #32]
    a302:	2b00      	cmp	r3, #0
    a304:	d103      	bne.n	a30e <FlexCAN_IRQHandler+0x66>
    a306:	9a07      	ldr	r2, [sp, #28]
    a308:	9b02      	ldr	r3, [sp, #8]
    a30a:	429a      	cmp	r2, r3
    a30c:	d8ef      	bhi.n	a2ee <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    a30e:	9b08      	ldr	r3, [sp, #32]
    a310:	2b00      	cmp	r3, #0
    a312:	d050      	beq.n	a3b6 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    a314:	9b07      	ldr	r3, [sp, #28]
    a316:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    a318:	9b05      	ldr	r3, [sp, #20]
    a31a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    a31e:	2b00      	cmp	r3, #0
    a320:	d00b      	beq.n	a33a <FlexCAN_IRQHandler+0x92>
    a322:	9b07      	ldr	r3, [sp, #28]
    a324:	2b07      	cmp	r3, #7
    a326:	d808      	bhi.n	a33a <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    a328:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a32c:	9907      	ldr	r1, [sp, #28]
    a32e:	4618      	mov	r0, r3
    a330:	f7ff fac2 	bl	98b8 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    a334:	2300      	movs	r3, #0
    a336:	9309      	str	r3, [sp, #36]	; 0x24
    a338:	e00d      	b.n	a356 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    a33a:	9a05      	ldr	r2, [sp, #20]
    a33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a33e:	011b      	lsls	r3, r3, #4
    a340:	4413      	add	r3, r2
    a342:	3304      	adds	r3, #4
    a344:	681b      	ldr	r3, [r3, #0]
    a346:	2b01      	cmp	r3, #1
    a348:	d105      	bne.n	a356 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a34a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a34e:	9907      	ldr	r1, [sp, #28]
    a350:	4618      	mov	r0, r3
    a352:	f7ff f929 	bl	95a8 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    a356:	9a05      	ldr	r2, [sp, #20]
    a358:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a35a:	011b      	lsls	r3, r3, #4
    a35c:	4413      	add	r3, r2
    a35e:	3304      	adds	r3, #4
    a360:	681b      	ldr	r3, [r3, #0]
    a362:	2b02      	cmp	r3, #2
    a364:	d105      	bne.n	a372 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    a366:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a36a:	9907      	ldr	r1, [sp, #28]
    a36c:	4618      	mov	r0, r3
    a36e:	f7ff fa09 	bl	9784 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    a372:	9907      	ldr	r1, [sp, #28]
    a374:	9806      	ldr	r0, [sp, #24]
    a376:	f7fe fdfe 	bl	8f76 <FlexCAN_GetMsgBuffIntStatusFlag>
    a37a:	4603      	mov	r3, r0
    a37c:	2b00      	cmp	r3, #0
    a37e:	d01a      	beq.n	a3b6 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    a380:	9a05      	ldr	r2, [sp, #20]
    a382:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a384:	011b      	lsls	r3, r3, #4
    a386:	4413      	add	r3, r2
    a388:	3304      	adds	r3, #4
    a38a:	681b      	ldr	r3, [r3, #0]
    a38c:	2b00      	cmp	r3, #0
    a38e:	d112      	bne.n	a3b6 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a390:	9907      	ldr	r1, [sp, #28]
    a392:	9806      	ldr	r0, [sp, #24]
    a394:	f7fe fc3e 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    a398:	e00d      	b.n	a3b6 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a39a:	9b02      	ldr	r3, [sp, #8]
    a39c:	9307      	str	r3, [sp, #28]
    a39e:	e006      	b.n	a3ae <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a3a0:	9907      	ldr	r1, [sp, #28]
    a3a2:	9806      	ldr	r0, [sp, #24]
    a3a4:	f7fe fc36 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a3a8:	9b07      	ldr	r3, [sp, #28]
    a3aa:	3301      	adds	r3, #1
    a3ac:	9307      	str	r3, [sp, #28]
    a3ae:	9a07      	ldr	r2, [sp, #28]
    a3b0:	9b01      	ldr	r3, [sp, #4]
    a3b2:	429a      	cmp	r2, r3
    a3b4:	d9f4      	bls.n	a3a0 <FlexCAN_IRQHandler+0xf8>
}
    a3b6:	bf00      	nop
    a3b8:	b00b      	add	sp, #44	; 0x2c
    a3ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a3be:	bf00      	nop
    a3c0:	0000fcb4 	.word	0x0000fcb4
    a3c4:	1fff8fbc 	.word	0x1fff8fbc

0000a3c8 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    a3c8:	b084      	sub	sp, #16
    a3ca:	4603      	mov	r3, r0
    a3cc:	9100      	str	r1, [sp, #0]
    a3ce:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a3d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3d6:	4a05      	ldr	r2, [pc, #20]	; (a3ec <FlexCAN_Ip_ClearErrorStatus+0x24>)
    a3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3dc:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    a3de:	9b03      	ldr	r3, [sp, #12]
    a3e0:	9a00      	ldr	r2, [sp, #0]
    a3e2:	621a      	str	r2, [r3, #32]
}
    a3e4:	bf00      	nop
    a3e6:	b004      	add	sp, #16
    a3e8:	4770      	bx	lr
    a3ea:	bf00      	nop
    a3ec:	0000fcb4 	.word	0x0000fcb4

0000a3f0 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    a3f0:	b084      	sub	sp, #16
    a3f2:	4603      	mov	r3, r0
    a3f4:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a3f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3fc:	4a04      	ldr	r2, [pc, #16]	; (a410 <FlexCAN_Ip_GetErrorStatus+0x20>)
    a3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a402:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    a404:	9b03      	ldr	r3, [sp, #12]
    a406:	6a1b      	ldr	r3, [r3, #32]
}
    a408:	4618      	mov	r0, r3
    a40a:	b004      	add	sp, #16
    a40c:	4770      	bx	lr
    a40e:	bf00      	nop
    a410:	0000fcb4 	.word	0x0000fcb4

0000a414 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    a414:	b084      	sub	sp, #16
    a416:	4603      	mov	r3, r0
    a418:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a41c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a420:	4a04      	ldr	r2, [pc, #16]	; (a434 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    a422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a426:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    a428:	9b03      	ldr	r3, [sp, #12]
    a42a:	69db      	ldr	r3, [r3, #28]
    a42c:	b2db      	uxtb	r3, r3
}
    a42e:	4618      	mov	r0, r3
    a430:	b004      	add	sp, #16
    a432:	4770      	bx	lr
    a434:	0000fcb4 	.word	0x0000fcb4

0000a438 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    a438:	b084      	sub	sp, #16
    a43a:	4603      	mov	r3, r0
    a43c:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a440:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a444:	4a05      	ldr	r2, [pc, #20]	; (a45c <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    a446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a44a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    a44c:	9b03      	ldr	r3, [sp, #12]
    a44e:	69db      	ldr	r3, [r3, #28]
    a450:	0a1b      	lsrs	r3, r3, #8
    a452:	b2db      	uxtb	r3, r3
}
    a454:	4618      	mov	r0, r3
    a456:	b004      	add	sp, #16
    a458:	4770      	bx	lr
    a45a:	bf00      	nop
    a45c:	0000fcb4 	.word	0x0000fcb4

0000a460 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    a460:	b510      	push	{r4, lr}
    a462:	b086      	sub	sp, #24
    a464:	4603      	mov	r3, r0
    a466:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a46a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a46e:	4a29      	ldr	r2, [pc, #164]	; (a514 <FlexCAN_Error_IRQHandler+0xb4>)
    a470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a474:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a476:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a47a:	4a27      	ldr	r2, [pc, #156]	; (a518 <FlexCAN_Error_IRQHandler+0xb8>)
    a47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a480:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a482:	2300      	movs	r3, #0
    a484:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    a486:	9b03      	ldr	r3, [sp, #12]
    a488:	2b00      	cmp	r3, #0
    a48a:	d03d      	beq.n	a508 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    a48c:	9b04      	ldr	r3, [sp, #16]
    a48e:	6a1b      	ldr	r3, [r3, #32]
    a490:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    a492:	9b05      	ldr	r3, [sp, #20]
    a494:	f003 0302 	and.w	r3, r3, #2
    a498:	2b00      	cmp	r3, #0
    a49a:	d019      	beq.n	a4d0 <FlexCAN_Error_IRQHandler+0x70>
    a49c:	9b04      	ldr	r3, [sp, #16]
    a49e:	685b      	ldr	r3, [r3, #4]
    a4a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d013      	beq.n	a4d0 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    a4a8:	9b04      	ldr	r3, [sp, #16]
    a4aa:	2202      	movs	r2, #2
    a4ac:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a4ae:	9b03      	ldr	r3, [sp, #12]
    a4b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	d00b      	beq.n	a4d0 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    a4b8:	9b03      	ldr	r3, [sp, #12]
    a4ba:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a4be:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a4c2:	9b03      	ldr	r3, [sp, #12]
    a4c4:	9a05      	ldr	r2, [sp, #20]
    a4c6:	2105      	movs	r1, #5
    a4c8:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    a4ca:	9b04      	ldr	r3, [sp, #16]
    a4cc:	6a1b      	ldr	r3, [r3, #32]
    a4ce:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    a4d0:	9b05      	ldr	r3, [sp, #20]
    a4d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d019      	beq.n	a50e <FlexCAN_Error_IRQHandler+0xae>
    a4da:	9b04      	ldr	r3, [sp, #16]
    a4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a4de:	2b00      	cmp	r3, #0
    a4e0:	da15      	bge.n	a50e <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    a4e2:	9b04      	ldr	r3, [sp, #16]
    a4e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    a4e8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a4ea:	9b03      	ldr	r3, [sp, #12]
    a4ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	d00c      	beq.n	a50e <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    a4f4:	9b03      	ldr	r3, [sp, #12]
    a4f6:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a4fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a4fe:	9b03      	ldr	r3, [sp, #12]
    a500:	9a05      	ldr	r2, [sp, #20]
    a502:	2106      	movs	r1, #6
    a504:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    a506:	e002      	b.n	a50e <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    a508:	9b04      	ldr	r3, [sp, #16]
    a50a:	4a04      	ldr	r2, [pc, #16]	; (a51c <FlexCAN_Error_IRQHandler+0xbc>)
    a50c:	621a      	str	r2, [r3, #32]
}
    a50e:	bf00      	nop
    a510:	b006      	add	sp, #24
    a512:	bd10      	pop	{r4, pc}
    a514:	0000fcb4 	.word	0x0000fcb4
    a518:	1fff8fbc 	.word	0x1fff8fbc
    a51c:	00300002 	.word	0x00300002

0000a520 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    a520:	b510      	push	{r4, lr}
    a522:	b086      	sub	sp, #24
    a524:	4603      	mov	r3, r0
    a526:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a52a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a52e:	4a3a      	ldr	r2, [pc, #232]	; (a618 <FlexCAN_BusOff_IRQHandler+0xf8>)
    a530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a534:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a536:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a53a:	4a38      	ldr	r2, [pc, #224]	; (a61c <FlexCAN_BusOff_IRQHandler+0xfc>)
    a53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a540:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a542:	2300      	movs	r3, #0
    a544:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    a546:	9b03      	ldr	r3, [sp, #12]
    a548:	2b00      	cmp	r3, #0
    a54a:	d05f      	beq.n	a60c <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    a54c:	9b04      	ldr	r3, [sp, #16]
    a54e:	6a1b      	ldr	r3, [r3, #32]
    a550:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    a552:	9b05      	ldr	r3, [sp, #20]
    a554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a558:	2b00      	cmp	r3, #0
    a55a:	d01a      	beq.n	a592 <FlexCAN_BusOff_IRQHandler+0x72>
    a55c:	9b04      	ldr	r3, [sp, #16]
    a55e:	685b      	ldr	r3, [r3, #4]
    a560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a564:	2b00      	cmp	r3, #0
    a566:	d014      	beq.n	a592 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    a568:	9b04      	ldr	r3, [sp, #16]
    a56a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a56e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a570:	9b03      	ldr	r3, [sp, #12]
    a572:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a576:	2b00      	cmp	r3, #0
    a578:	d00b      	beq.n	a592 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    a57a:	9b03      	ldr	r3, [sp, #12]
    a57c:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a580:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a584:	9b03      	ldr	r3, [sp, #12]
    a586:	9a05      	ldr	r2, [sp, #20]
    a588:	2109      	movs	r1, #9
    a58a:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a58c:	9b04      	ldr	r3, [sp, #16]
    a58e:	6a1b      	ldr	r3, [r3, #32]
    a590:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    a592:	9b05      	ldr	r3, [sp, #20]
    a594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a598:	2b00      	cmp	r3, #0
    a59a:	d01a      	beq.n	a5d2 <FlexCAN_BusOff_IRQHandler+0xb2>
    a59c:	9b04      	ldr	r3, [sp, #16]
    a59e:	685b      	ldr	r3, [r3, #4]
    a5a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d014      	beq.n	a5d2 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    a5a8:	9b04      	ldr	r3, [sp, #16]
    a5aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a5ae:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a5b0:	9b03      	ldr	r3, [sp, #12]
    a5b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d00b      	beq.n	a5d2 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    a5ba:	9b03      	ldr	r3, [sp, #12]
    a5bc:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a5c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a5c4:	9b03      	ldr	r3, [sp, #12]
    a5c6:	9a05      	ldr	r2, [sp, #20]
    a5c8:	2108      	movs	r1, #8
    a5ca:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a5cc:	9b04      	ldr	r3, [sp, #16]
    a5ce:	6a1b      	ldr	r3, [r3, #32]
    a5d0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    a5d2:	9b05      	ldr	r3, [sp, #20]
    a5d4:	f003 0304 	and.w	r3, r3, #4
    a5d8:	2b00      	cmp	r3, #0
    a5da:	d01a      	beq.n	a612 <FlexCAN_BusOff_IRQHandler+0xf2>
    a5dc:	9b04      	ldr	r3, [sp, #16]
    a5de:	685b      	ldr	r3, [r3, #4]
    a5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d014      	beq.n	a612 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    a5e8:	9b04      	ldr	r3, [sp, #16]
    a5ea:	2204      	movs	r2, #4
    a5ec:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a5ee:	9b03      	ldr	r3, [sp, #12]
    a5f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d00c      	beq.n	a612 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    a5f8:	9b03      	ldr	r3, [sp, #12]
    a5fa:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a5fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a602:	9b03      	ldr	r3, [sp, #12]
    a604:	9a05      	ldr	r2, [sp, #20]
    a606:	2107      	movs	r1, #7
    a608:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    a60a:	e002      	b.n	a612 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    a60c:	9b04      	ldr	r3, [sp, #16]
    a60e:	4a04      	ldr	r2, [pc, #16]	; (a620 <FlexCAN_BusOff_IRQHandler+0x100>)
    a610:	621a      	str	r2, [r3, #32]
}
    a612:	bf00      	nop
    a614:	b006      	add	sp, #24
    a616:	bd10      	pop	{r4, pc}
    a618:	0000fcb4 	.word	0x0000fcb4
    a61c:	1fff8fbc 	.word	0x1fff8fbc
    a620:	000b0004 	.word	0x000b0004

0000a624 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    a624:	b500      	push	{lr}
    a626:	b091      	sub	sp, #68	; 0x44
    a628:	9204      	str	r2, [sp, #16]
    a62a:	9303      	str	r3, [sp, #12]
    a62c:	4603      	mov	r3, r0
    a62e:	f88d 3017 	strb.w	r3, [sp, #23]
    a632:	460b      	mov	r3, r1
    a634:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a638:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a63c:	4a5f      	ldr	r2, [pc, #380]	; (a7bc <FlexCAN_Ip_SendBlocking+0x198>)
    a63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a642:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a644:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a648:	4a5d      	ldr	r2, [pc, #372]	; (a7c0 <FlexCAN_Ip_SendBlocking+0x19c>)
    a64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a64e:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    a650:	2300      	movs	r3, #0
    a652:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    a654:	2300      	movs	r3, #0
    a656:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a65a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a65e:	fb02 f303 	mul.w	r3, r2, r3
    a662:	2100      	movs	r1, #0
    a664:	4618      	mov	r0, r3
    a666:	f7f7 fbef 	bl	1e48 <OsIf_MicrosToTicks>
    a66a:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    a66c:	2300      	movs	r3, #0
    a66e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    a670:	2300      	movs	r3, #0
    a672:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    a674:	2300      	movs	r3, #0
    a676:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    a678:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a67c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a680:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a682:	9300      	str	r3, [sp, #0]
    a684:	9b03      	ldr	r3, [sp, #12]
    a686:	9a04      	ldr	r2, [sp, #16]
    a688:	f7fe feaa 	bl	93e0 <FlexCAN_StartSendData>
    a68c:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    a68e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a690:	2b00      	cmp	r3, #0
    a692:	f040 808d 	bne.w	a7b0 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a696:	2000      	movs	r0, #0
    a698:	f7f7 fb8a 	bl	1db0 <OsIf_GetCounter>
    a69c:	4603      	mov	r3, r0
    a69e:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a6a0:	e00f      	b.n	a6c2 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a6a2:	ab07      	add	r3, sp, #28
    a6a4:	2100      	movs	r1, #0
    a6a6:	4618      	mov	r0, r3
    a6a8:	f7f7 fb9b 	bl	1de2 <OsIf_GetElapsed>
    a6ac:	4602      	mov	r2, r0
    a6ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6b0:	4413      	add	r3, r2
    a6b2:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    a6b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a6b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6b8:	429a      	cmp	r2, r3
    a6ba:	d302      	bcc.n	a6c2 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    a6bc:	2303      	movs	r3, #3
    a6be:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    a6c0:	e008      	b.n	a6d4 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a6c2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6c6:	4619      	mov	r1, r3
    a6c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    a6ca:	f7fe fab6 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    a6ce:	4603      	mov	r3, r0
    a6d0:	2b01      	cmp	r3, #1
    a6d2:	d1e6      	bne.n	a6a2 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    a6d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a6d6:	2b03      	cmp	r3, #3
    a6d8:	d15c      	bne.n	a794 <FlexCAN_Ip_SendBlocking+0x170>
    a6da:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a6e0:	011b      	lsls	r3, r3, #4
    a6e2:	4413      	add	r3, r2
    a6e4:	3304      	adds	r3, #4
    a6e6:	681b      	ldr	r3, [r3, #0]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d053      	beq.n	a794 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a6ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6f0:	4619      	mov	r1, r3
    a6f2:	980d      	ldr	r0, [sp, #52]	; 0x34
    a6f4:	f7fe fa8e 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    a6f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6fc:	4619      	mov	r1, r3
    a6fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    a700:	f001 f968 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    a704:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    a706:	9b08      	ldr	r3, [sp, #32]
    a708:	681b      	ldr	r3, [r3, #0]
    a70a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    a70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a70e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    a712:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    a714:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a716:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    a71a:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    a71c:	9b08      	ldr	r3, [sp, #32]
    a71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a720:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a722:	2100      	movs	r1, #0
    a724:	4827      	ldr	r0, [pc, #156]	; (a7c4 <FlexCAN_Ip_SendBlocking+0x1a0>)
    a726:	f7f7 fb8f 	bl	1e48 <OsIf_MicrosToTicks>
    a72a:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a72c:	2000      	movs	r0, #0
    a72e:	f7f7 fb3f 	bl	1db0 <OsIf_GetCounter>
    a732:	4603      	mov	r3, r0
    a734:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    a736:	2300      	movs	r3, #0
    a738:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a73a:	e00f      	b.n	a75c <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a73c:	ab07      	add	r3, sp, #28
    a73e:	2100      	movs	r1, #0
    a740:	4618      	mov	r0, r3
    a742:	f7f7 fb4e 	bl	1de2 <OsIf_GetElapsed>
    a746:	4602      	mov	r2, r0
    a748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a74a:	4413      	add	r3, r2
    a74c:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    a74e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a752:	429a      	cmp	r2, r3
    a754:	d302      	bcc.n	a75c <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    a756:	2303      	movs	r3, #3
    a758:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    a75a:	e008      	b.n	a76e <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a75c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a760:	4619      	mov	r1, r3
    a762:	980d      	ldr	r0, [sp, #52]	; 0x34
    a764:	f7fe fa69 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    a768:	4603      	mov	r3, r0
    a76a:	2b00      	cmp	r3, #0
    a76c:	d0e6      	beq.n	a73c <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    a76e:	9b08      	ldr	r3, [sp, #32]
    a770:	681b      	ldr	r3, [r3, #0]
    a772:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a774:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a776:	0e1b      	lsrs	r3, r3, #24
    a778:	f003 030f 	and.w	r3, r3, #15
    a77c:	2b08      	cmp	r3, #8
    a77e:	d101      	bne.n	a784 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    a780:	2300      	movs	r3, #0
    a782:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a784:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a786:	0e1b      	lsrs	r3, r3, #24
    a788:	f003 030f 	and.w	r3, r3, #15
    a78c:	2b09      	cmp	r3, #9
    a78e:	d101      	bne.n	a794 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    a790:	2303      	movs	r3, #3
    a792:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a794:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a798:	4619      	mov	r1, r3
    a79a:	980d      	ldr	r0, [sp, #52]	; 0x34
    a79c:	f7fe fa3a 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a7a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7a6:	011b      	lsls	r3, r3, #4
    a7a8:	4413      	add	r3, r2
    a7aa:	3304      	adds	r3, #4
    a7ac:	2200      	movs	r2, #0
    a7ae:	601a      	str	r2, [r3, #0]
    }
    return result;
    a7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    a7b2:	4618      	mov	r0, r3
    a7b4:	b011      	add	sp, #68	; 0x44
    a7b6:	f85d fb04 	ldr.w	pc, [sp], #4
    a7ba:	bf00      	nop
    a7bc:	0000fcb4 	.word	0x0000fcb4
    a7c0:	1fff8fbc 	.word	0x1fff8fbc
    a7c4:	000f4240 	.word	0x000f4240

0000a7c8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a7c8:	b500      	push	{lr}
    a7ca:	b087      	sub	sp, #28
    a7cc:	4603      	mov	r3, r0
    a7ce:	9100      	str	r1, [sp, #0]
    a7d0:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a7d4:	2300      	movs	r3, #0
    a7d6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a7d8:	2300      	movs	r3, #0
    a7da:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a7dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7e0:	4a1c      	ldr	r2, [pc, #112]	; (a854 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    a7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7e6:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a7e8:	9803      	ldr	r0, [sp, #12]
    a7ea:	f7fe f9b9 	bl	8b60 <FlexCAN_IsEnabled>
    a7ee:	4603      	mov	r3, r0
    a7f0:	2b00      	cmp	r3, #0
    a7f2:	bf14      	ite	ne
    a7f4:	2301      	movne	r3, #1
    a7f6:	2300      	moveq	r3, #0
    a7f8:	b2db      	uxtb	r3, r3
    a7fa:	f083 0301 	eor.w	r3, r3, #1
    a7fe:	b2db      	uxtb	r3, r3
    a800:	f88d 300b 	strb.w	r3, [sp, #11]
    a804:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a808:	f003 0301 	and.w	r3, r3, #1
    a80c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a810:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a814:	2b00      	cmp	r3, #0
    a816:	d003      	beq.n	a820 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a818:	9803      	ldr	r0, [sp, #12]
    a81a:	f001 f9c3 	bl	bba4 <FlexCAN_Enable>
    a81e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a820:	9b05      	ldr	r3, [sp, #20]
    a822:	2b00      	cmp	r3, #0
    a824:	d103      	bne.n	a82e <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    a826:	9900      	ldr	r1, [sp, #0]
    a828:	9803      	ldr	r0, [sp, #12]
    a82a:	f7fe fbc3 	bl	8fb4 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    a82e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a832:	2b00      	cmp	r3, #0
    a834:	d008      	beq.n	a848 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a836:	9803      	ldr	r0, [sp, #12]
    a838:	f001 fa32 	bl	bca0 <FlexCAN_Disable>
    a83c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a83e:	9b04      	ldr	r3, [sp, #16]
    a840:	2b00      	cmp	r3, #0
    a842:	d001      	beq.n	a848 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    a844:	9b04      	ldr	r3, [sp, #16]
    a846:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    a848:	9b05      	ldr	r3, [sp, #20]
}
    a84a:	4618      	mov	r0, r3
    a84c:	b007      	add	sp, #28
    a84e:	f85d fb04 	ldr.w	pc, [sp], #4
    a852:	bf00      	nop
    a854:	0000fcb4 	.word	0x0000fcb4

0000a858 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    a858:	b500      	push	{lr}
    a85a:	b085      	sub	sp, #20
    a85c:	4603      	mov	r3, r0
    a85e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a862:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a866:	4a06      	ldr	r2, [pc, #24]	; (a880 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    a868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a86c:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    a86e:	9803      	ldr	r0, [sp, #12]
    a870:	f001 f94c 	bl	bb0c <FlexCAN_EnterFreezeMode>
    a874:	4603      	mov	r3, r0
}
    a876:	4618      	mov	r0, r3
    a878:	b005      	add	sp, #20
    a87a:	f85d fb04 	ldr.w	pc, [sp], #4
    a87e:	bf00      	nop
    a880:	0000fcb4 	.word	0x0000fcb4

0000a884 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    a884:	b500      	push	{lr}
    a886:	b085      	sub	sp, #20
    a888:	4603      	mov	r3, r0
    a88a:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a88e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a892:	4a06      	ldr	r2, [pc, #24]	; (a8ac <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    a894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a898:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    a89a:	9803      	ldr	r0, [sp, #12]
    a89c:	f001 f9be 	bl	bc1c <FlexCAN_ExitFreezeMode>
    a8a0:	4603      	mov	r3, r0
}
    a8a2:	4618      	mov	r0, r3
    a8a4:	b005      	add	sp, #20
    a8a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a8aa:	bf00      	nop
    a8ac:	0000fcb4 	.word	0x0000fcb4

0000a8b0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    a8b0:	b500      	push	{lr}
    a8b2:	b087      	sub	sp, #28
    a8b4:	4603      	mov	r3, r0
    a8b6:	9200      	str	r2, [sp, #0]
    a8b8:	f88d 3007 	strb.w	r3, [sp, #7]
    a8bc:	460b      	mov	r3, r1
    a8be:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a8c2:	2300      	movs	r3, #0
    a8c4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a8c6:	2300      	movs	r3, #0
    a8c8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a8ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a8ce:	4a1e      	ldr	r2, [pc, #120]	; (a948 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    a8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8d4:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a8d6:	9803      	ldr	r0, [sp, #12]
    a8d8:	f7fe f942 	bl	8b60 <FlexCAN_IsEnabled>
    a8dc:	4603      	mov	r3, r0
    a8de:	2b00      	cmp	r3, #0
    a8e0:	bf14      	ite	ne
    a8e2:	2301      	movne	r3, #1
    a8e4:	2300      	moveq	r3, #0
    a8e6:	b2db      	uxtb	r3, r3
    a8e8:	f083 0301 	eor.w	r3, r3, #1
    a8ec:	b2db      	uxtb	r3, r3
    a8ee:	f88d 300b 	strb.w	r3, [sp, #11]
    a8f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a8f6:	f003 0301 	and.w	r3, r3, #1
    a8fa:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a8fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a902:	2b00      	cmp	r3, #0
    a904:	d003      	beq.n	a90e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    a906:	9803      	ldr	r0, [sp, #12]
    a908:	f001 f94c 	bl	bba4 <FlexCAN_Enable>
    a90c:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a90e:	9b05      	ldr	r3, [sp, #20]
    a910:	2b00      	cmp	r3, #0
    a912:	d106      	bne.n	a922 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    a914:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a918:	9a00      	ldr	r2, [sp, #0]
    a91a:	4619      	mov	r1, r3
    a91c:	9803      	ldr	r0, [sp, #12]
    a91e:	f7fe fb52 	bl	8fc6 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    a922:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a926:	2b00      	cmp	r3, #0
    a928:	d008      	beq.n	a93c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    a92a:	9803      	ldr	r0, [sp, #12]
    a92c:	f001 f9b8 	bl	bca0 <FlexCAN_Disable>
    a930:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a932:	9b04      	ldr	r3, [sp, #16]
    a934:	2b00      	cmp	r3, #0
    a936:	d001      	beq.n	a93c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    a938:	9b04      	ldr	r3, [sp, #16]
    a93a:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    a93c:	9b05      	ldr	r3, [sp, #20]
}
    a93e:	4618      	mov	r0, r3
    a940:	b007      	add	sp, #28
    a942:	f85d fb04 	ldr.w	pc, [sp], #4
    a946:	bf00      	nop
    a948:	0000fcb4 	.word	0x0000fcb4

0000a94c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a94c:	b500      	push	{lr}
    a94e:	b087      	sub	sp, #28
    a950:	4603      	mov	r3, r0
    a952:	9100      	str	r1, [sp, #0]
    a954:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a958:	2300      	movs	r3, #0
    a95a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a95c:	2300      	movs	r3, #0
    a95e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a960:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a964:	4a1c      	ldr	r2, [pc, #112]	; (a9d8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    a966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a96a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a96c:	9803      	ldr	r0, [sp, #12]
    a96e:	f7fe f8f7 	bl	8b60 <FlexCAN_IsEnabled>
    a972:	4603      	mov	r3, r0
    a974:	2b00      	cmp	r3, #0
    a976:	bf14      	ite	ne
    a978:	2301      	movne	r3, #1
    a97a:	2300      	moveq	r3, #0
    a97c:	b2db      	uxtb	r3, r3
    a97e:	f083 0301 	eor.w	r3, r3, #1
    a982:	b2db      	uxtb	r3, r3
    a984:	f88d 300b 	strb.w	r3, [sp, #11]
    a988:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a98c:	f003 0301 	and.w	r3, r3, #1
    a990:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a994:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a998:	2b00      	cmp	r3, #0
    a99a:	d003      	beq.n	a9a4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a99c:	9803      	ldr	r0, [sp, #12]
    a99e:	f001 f901 	bl	bba4 <FlexCAN_Enable>
    a9a2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a9a4:	9b05      	ldr	r3, [sp, #20]
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	d103      	bne.n	a9b2 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    a9aa:	9900      	ldr	r1, [sp, #0]
    a9ac:	9803      	ldr	r0, [sp, #12]
    a9ae:	f7fe f8a7 	bl	8b00 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    a9b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	d008      	beq.n	a9cc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a9ba:	9803      	ldr	r0, [sp, #12]
    a9bc:	f001 f970 	bl	bca0 <FlexCAN_Disable>
    a9c0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a9c2:	9b04      	ldr	r3, [sp, #16]
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	d001      	beq.n	a9cc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    a9c8:	9b04      	ldr	r3, [sp, #16]
    a9ca:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a9cc:	9b05      	ldr	r3, [sp, #20]
}
    a9ce:	4618      	mov	r0, r3
    a9d0:	b007      	add	sp, #28
    a9d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a9d6:	bf00      	nop
    a9d8:	0000fcb4 	.word	0x0000fcb4

0000a9dc <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    a9dc:	b500      	push	{lr}
    a9de:	b085      	sub	sp, #20
    a9e0:	4603      	mov	r3, r0
    a9e2:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a9e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9ea:	4a0e      	ldr	r2, [pc, #56]	; (aa24 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    a9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9f0:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    a9f2:	9803      	ldr	r0, [sp, #12]
    a9f4:	f001 f88a 	bl	bb0c <FlexCAN_EnterFreezeMode>
    a9f8:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    a9fa:	9b02      	ldr	r3, [sp, #8]
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d10b      	bne.n	aa18 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    aa00:	9803      	ldr	r0, [sp, #12]
    aa02:	f7fe fb18 	bl	9036 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    aa06:	9803      	ldr	r0, [sp, #12]
    aa08:	f001 f94a 	bl	bca0 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    aa0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa10:	4a05      	ldr	r2, [pc, #20]	; (aa28 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    aa12:	2100      	movs	r1, #0
    aa14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    aa18:	9b02      	ldr	r3, [sp, #8]
}
    aa1a:	4618      	mov	r0, r3
    aa1c:	b005      	add	sp, #20
    aa1e:	f85d fb04 	ldr.w	pc, [sp], #4
    aa22:	bf00      	nop
    aa24:	0000fcb4 	.word	0x0000fcb4
    aa28:	1fff8fbc 	.word	0x1fff8fbc

0000aa2c <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    aa2c:	b500      	push	{lr}
    aa2e:	b085      	sub	sp, #20
    aa30:	4603      	mov	r3, r0
    aa32:	460a      	mov	r2, r1
    aa34:	f88d 3007 	strb.w	r3, [sp, #7]
    aa38:	4613      	mov	r3, r2
    aa3a:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    aa3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa42:	4a22      	ldr	r2, [pc, #136]	; (aacc <FlexCAN_Ip_MainFunctionRead+0xa0>)
    aa44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa48:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    aa4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa4e:	4a20      	ldr	r2, [pc, #128]	; (aad0 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    aa50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa54:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    aa56:	9b02      	ldr	r3, [sp, #8]
    aa58:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d015      	beq.n	aa8c <FlexCAN_Ip_MainFunctionRead+0x60>
    aa60:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa64:	2b07      	cmp	r3, #7
    aa66:	d811      	bhi.n	aa8c <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aa68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d128      	bne.n	aac2 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    aa70:	2105      	movs	r1, #5
    aa72:	9803      	ldr	r0, [sp, #12]
    aa74:	f7fe f8e1 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    aa78:	4603      	mov	r3, r0
    aa7a:	2b00      	cmp	r3, #0
    aa7c:	d021      	beq.n	aac2 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    aa7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa82:	2105      	movs	r1, #5
    aa84:	4618      	mov	r0, r3
    aa86:	f7fe ff17 	bl	98b8 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aa8a:	e01a      	b.n	aac2 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    aa8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa90:	4619      	mov	r1, r3
    aa92:	9803      	ldr	r0, [sp, #12]
    aa94:	f7fe f8d1 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    aa98:	4603      	mov	r3, r0
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	d012      	beq.n	aac4 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    aa9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aaa2:	9a02      	ldr	r2, [sp, #8]
    aaa4:	011b      	lsls	r3, r3, #4
    aaa6:	4413      	add	r3, r2
    aaa8:	3304      	adds	r3, #4
    aaaa:	681b      	ldr	r3, [r3, #0]
    aaac:	2b01      	cmp	r3, #1
    aaae:	d109      	bne.n	aac4 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    aab0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aab8:	4611      	mov	r1, r2
    aaba:	4618      	mov	r0, r3
    aabc:	f7fe fd74 	bl	95a8 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    aac0:	e000      	b.n	aac4 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aac2:	bf00      	nop
}
    aac4:	bf00      	nop
    aac6:	b005      	add	sp, #20
    aac8:	f85d fb04 	ldr.w	pc, [sp], #4
    aacc:	0000fcb4 	.word	0x0000fcb4
    aad0:	1fff8fbc 	.word	0x1fff8fbc

0000aad4 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    aad4:	b510      	push	{r4, lr}
    aad6:	b086      	sub	sp, #24
    aad8:	4603      	mov	r3, r0
    aada:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    aade:	2301      	movs	r3, #1
    aae0:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    aae2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aae6:	4a15      	ldr	r2, [pc, #84]	; (ab3c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    aae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaec:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    aaee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aaf2:	4a13      	ldr	r2, [pc, #76]	; (ab40 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    aaf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf8:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    aafa:	2300      	movs	r3, #0
    aafc:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    aafe:	9b04      	ldr	r3, [sp, #16]
    ab00:	6a1b      	ldr	r3, [r3, #32]
    ab02:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    ab04:	9b02      	ldr	r3, [sp, #8]
    ab06:	f003 0304 	and.w	r3, r3, #4
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	d012      	beq.n	ab34 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    ab0e:	9b03      	ldr	r3, [sp, #12]
    ab10:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    ab14:	2b00      	cmp	r3, #0
    ab16:	d008      	beq.n	ab2a <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    ab18:	9b03      	ldr	r3, [sp, #12]
    ab1a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    ab1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ab22:	9b03      	ldr	r3, [sp, #12]
    ab24:	9a02      	ldr	r2, [sp, #8]
    ab26:	2107      	movs	r1, #7
    ab28:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    ab2a:	9b04      	ldr	r3, [sp, #16]
    ab2c:	2204      	movs	r2, #4
    ab2e:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    ab30:	2300      	movs	r3, #0
    ab32:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    ab34:	9b05      	ldr	r3, [sp, #20]
}
    ab36:	4618      	mov	r0, r3
    ab38:	b006      	add	sp, #24
    ab3a:	bd10      	pop	{r4, pc}
    ab3c:	0000fcb4 	.word	0x0000fcb4
    ab40:	1fff8fbc 	.word	0x1fff8fbc

0000ab44 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    ab44:	b510      	push	{r4, lr}
    ab46:	b098      	sub	sp, #96	; 0x60
    ab48:	4603      	mov	r3, r0
    ab4a:	460a      	mov	r2, r1
    ab4c:	f88d 3007 	strb.w	r3, [sp, #7]
    ab50:	4613      	mov	r3, r2
    ab52:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ab56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab5a:	4a3f      	ldr	r2, [pc, #252]	; (ac58 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    ab5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab60:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    ab62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab66:	4a3d      	ldr	r2, [pc, #244]	; (ac5c <FlexCAN_Ip_MainFunctionWrite+0x118>)
    ab68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab6c:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    ab6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab72:	4619      	mov	r1, r3
    ab74:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ab76:	f7fe f860 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    ab7a:	4603      	mov	r3, r0
    ab7c:	2b00      	cmp	r3, #0
    ab7e:	d068      	beq.n	ac52 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    ab80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab84:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ab86:	011b      	lsls	r3, r3, #4
    ab88:	4413      	add	r3, r2
    ab8a:	3304      	adds	r3, #4
    ab8c:	681b      	ldr	r3, [r3, #0]
    ab8e:	2b02      	cmp	r3, #2
    ab90:	d15f      	bne.n	ac52 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    ab92:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab96:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ab98:	011b      	lsls	r3, r3, #4
    ab9a:	4413      	add	r3, r2
    ab9c:	3309      	adds	r3, #9
    ab9e:	781b      	ldrb	r3, [r3, #0]
    aba0:	2b00      	cmp	r3, #0
    aba2:	d028      	beq.n	abf6 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    aba4:	2300      	movs	r3, #0
    aba6:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    aba8:	2300      	movs	r3, #0
    abaa:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    abac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abb0:	4619      	mov	r1, r3
    abb2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abb4:	f001 fa87 	bl	c0c6 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    abb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abbc:	aa02      	add	r2, sp, #8
    abbe:	4619      	mov	r1, r3
    abc0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abc2:	f001 fbaf 	bl	c324 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    abc6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abc8:	f7fe f81d 	bl	8c06 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    abcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
    abd2:	9916      	ldr	r1, [sp, #88]	; 0x58
    abd4:	011b      	lsls	r3, r3, #4
    abd6:	440b      	add	r3, r1
    abd8:	330c      	adds	r3, #12
    abda:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    abdc:	9b02      	ldr	r3, [sp, #8]
    abde:	0e1b      	lsrs	r3, r3, #24
    abe0:	f003 030f 	and.w	r3, r3, #15
    abe4:	2b04      	cmp	r3, #4
    abe6:	d11d      	bne.n	ac24 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    abe8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abec:	4619      	mov	r1, r3
    abee:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abf0:	f7fe f810 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
    abf4:	e016      	b.n	ac24 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    abf6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abfa:	f89d 4006 	ldrb.w	r4, [sp, #6]
    abfe:	4619      	mov	r1, r3
    ac00:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ac02:	f001 fb7b 	bl	c2fc <FlexCAN_GetMsgBuffTimestamp>
    ac06:	4601      	mov	r1, r0
    ac08:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ac0a:	0123      	lsls	r3, r4, #4
    ac0c:	4413      	add	r3, r2
    ac0e:	330c      	adds	r3, #12
    ac10:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    ac12:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ac14:	f7fd fff7 	bl	8c06 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    ac18:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ac1c:	4619      	mov	r1, r3
    ac1e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ac20:	f7fd fff8 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    ac24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ac28:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ac2a:	011b      	lsls	r3, r3, #4
    ac2c:	4413      	add	r3, r2
    ac2e:	3304      	adds	r3, #4
    ac30:	2200      	movs	r2, #0
    ac32:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    ac34:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d009      	beq.n	ac52 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    ac3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac40:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    ac44:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ac48:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ac4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac4e:	2104      	movs	r1, #4
    ac50:	47a0      	blx	r4
            }
        }
    }
}
    ac52:	bf00      	nop
    ac54:	b018      	add	sp, #96	; 0x60
    ac56:	bd10      	pop	{r4, pc}
    ac58:	0000fcb4 	.word	0x0000fcb4
    ac5c:	1fff8fbc 	.word	0x1fff8fbc

0000ac60 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    ac60:	b084      	sub	sp, #16
    ac62:	4603      	mov	r3, r0
    ac64:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ac68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac6c:	4a08      	ldr	r2, [pc, #32]	; (ac90 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    ac6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac72:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    ac74:	9b03      	ldr	r3, [sp, #12]
    ac76:	681b      	ldr	r3, [r3, #0]
    ac78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    ac7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    ac80:	bf0c      	ite	eq
    ac82:	2301      	moveq	r3, #1
    ac84:	2300      	movne	r3, #0
    ac86:	b2db      	uxtb	r3, r3
}
    ac88:	4618      	mov	r0, r3
    ac8a:	b004      	add	sp, #16
    ac8c:	4770      	bx	lr
    ac8e:	bf00      	nop
    ac90:	0000fcb4 	.word	0x0000fcb4

0000ac94 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    ac94:	b084      	sub	sp, #16
    ac96:	4603      	mov	r3, r0
    ac98:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ac9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aca0:	4a07      	ldr	r2, [pc, #28]	; (acc0 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    aca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aca6:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    aca8:	9b03      	ldr	r3, [sp, #12]
    acaa:	681b      	ldr	r3, [r3, #0]
    acac:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    acb0:	2b00      	cmp	r3, #0
    acb2:	bf0c      	ite	eq
    acb4:	2301      	moveq	r3, #1
    acb6:	2300      	movne	r3, #0
    acb8:	b2db      	uxtb	r3, r3
}
    acba:	4618      	mov	r0, r3
    acbc:	b004      	add	sp, #16
    acbe:	4770      	bx	lr
    acc0:	0000fcb4 	.word	0x0000fcb4

0000acc4 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    acc4:	b500      	push	{lr}
    acc6:	b085      	sub	sp, #20
    acc8:	4603      	mov	r3, r0
    acca:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    acce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acd2:	4a0b      	ldr	r2, [pc, #44]	; (ad00 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    acd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd8:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    acda:	f002 fb93 	bl	d404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    acde:	9b03      	ldr	r3, [sp, #12]
    ace0:	681b      	ldr	r3, [r3, #0]
    ace2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ace6:	9b03      	ldr	r3, [sp, #12]
    ace8:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    acea:	f002 fbb7 	bl	d45c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    acee:	9803      	ldr	r0, [sp, #12]
    acf0:	f000 ff94 	bl	bc1c <FlexCAN_ExitFreezeMode>
    acf4:	4603      	mov	r3, r0
}
    acf6:	4618      	mov	r0, r3
    acf8:	b005      	add	sp, #20
    acfa:	f85d fb04 	ldr.w	pc, [sp], #4
    acfe:	bf00      	nop
    ad00:	0000fcb4 	.word	0x0000fcb4

0000ad04 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    ad04:	b500      	push	{lr}
    ad06:	b085      	sub	sp, #20
    ad08:	4603      	mov	r3, r0
    ad0a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ad0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad12:	4a0a      	ldr	r2, [pc, #40]	; (ad3c <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    ad14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad18:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    ad1a:	9802      	ldr	r0, [sp, #8]
    ad1c:	f000 fef6 	bl	bb0c <FlexCAN_EnterFreezeMode>
    ad20:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    ad22:	9b03      	ldr	r3, [sp, #12]
    ad24:	2b00      	cmp	r3, #0
    ad26:	d103      	bne.n	ad30 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    ad28:	9802      	ldr	r0, [sp, #8]
    ad2a:	f000 ffb9 	bl	bca0 <FlexCAN_Disable>
    ad2e:	9003      	str	r0, [sp, #12]
    }
    return status;
    ad30:	9b03      	ldr	r3, [sp, #12]
}
    ad32:	4618      	mov	r0, r3
    ad34:	b005      	add	sp, #20
    ad36:	f85d fb04 	ldr.w	pc, [sp], #4
    ad3a:	bf00      	nop
    ad3c:	0000fcb4 	.word	0x0000fcb4

0000ad40 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    ad40:	b500      	push	{lr}
    ad42:	b087      	sub	sp, #28
    ad44:	4603      	mov	r3, r0
    ad46:	9100      	str	r1, [sp, #0]
    ad48:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ad4c:	2300      	movs	r3, #0
    ad4e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ad50:	2300      	movs	r3, #0
    ad52:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ad54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad58:	4a1e      	ldr	r2, [pc, #120]	; (add4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    ad5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad5e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ad60:	9803      	ldr	r0, [sp, #12]
    ad62:	f7fd fefd 	bl	8b60 <FlexCAN_IsEnabled>
    ad66:	4603      	mov	r3, r0
    ad68:	2b00      	cmp	r3, #0
    ad6a:	bf14      	ite	ne
    ad6c:	2301      	movne	r3, #1
    ad6e:	2300      	moveq	r3, #0
    ad70:	b2db      	uxtb	r3, r3
    ad72:	f083 0301 	eor.w	r3, r3, #1
    ad76:	b2db      	uxtb	r3, r3
    ad78:	f88d 300b 	strb.w	r3, [sp, #11]
    ad7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad80:	f003 0301 	and.w	r3, r3, #1
    ad84:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ad88:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad8c:	2b00      	cmp	r3, #0
    ad8e:	d003      	beq.n	ad98 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    ad90:	9803      	ldr	r0, [sp, #12]
    ad92:	f000 ff07 	bl	bba4 <FlexCAN_Enable>
    ad96:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ad98:	9b05      	ldr	r3, [sp, #20]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d107      	bne.n	adae <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    ad9e:	f002 fb83 	bl	d4a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    ada2:	9900      	ldr	r1, [sp, #0]
    ada4:	9803      	ldr	r0, [sp, #12]
    ada6:	f7fe f930 	bl	900a <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    adaa:	f002 fba9 	bl	d500 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    adae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d008      	beq.n	adc8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    adb6:	9803      	ldr	r0, [sp, #12]
    adb8:	f000 ff72 	bl	bca0 <FlexCAN_Disable>
    adbc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    adbe:	9b04      	ldr	r3, [sp, #16]
    adc0:	2b00      	cmp	r3, #0
    adc2:	d001      	beq.n	adc8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    adc4:	9b04      	ldr	r3, [sp, #16]
    adc6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    adc8:	9b05      	ldr	r3, [sp, #20]
}
    adca:	4618      	mov	r0, r3
    adcc:	b007      	add	sp, #28
    adce:	f85d fb04 	ldr.w	pc, [sp], #4
    add2:	bf00      	nop
    add4:	0000fcb4 	.word	0x0000fcb4

0000add8 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    add8:	b500      	push	{lr}
    adda:	b087      	sub	sp, #28
    addc:	4603      	mov	r3, r0
    adde:	9100      	str	r1, [sp, #0]
    ade0:	f88d 3007 	strb.w	r3, [sp, #7]
    ade4:	4613      	mov	r3, r2
    ade6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    adea:	2300      	movs	r3, #0
    adec:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    adee:	2300      	movs	r3, #0
    adf0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    adf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    adf6:	4a1c      	ldr	r2, [pc, #112]	; (ae68 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    adf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfc:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    adfe:	9b03      	ldr	r3, [sp, #12]
    ae00:	681b      	ldr	r3, [r3, #0]
    ae02:	0fdb      	lsrs	r3, r3, #31
    ae04:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    ae08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d003      	beq.n	ae18 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    ae10:	9803      	ldr	r0, [sp, #12]
    ae12:	f000 fec7 	bl	bba4 <FlexCAN_Enable>
    ae16:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ae18:	9b05      	ldr	r3, [sp, #20]
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	d112      	bne.n	ae44 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    ae1e:	f002 fd2f 	bl	d880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    ae22:	9803      	ldr	r0, [sp, #12]
    ae24:	f7fe f830 	bl	8e88 <FlexCAN_IsExCbtEnabled>
    ae28:	4603      	mov	r3, r0
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d004      	beq.n	ae38 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    ae2e:	9900      	ldr	r1, [sp, #0]
    ae30:	9803      	ldr	r0, [sp, #12]
    ae32:	f7fd ff7f 	bl	8d34 <FlexCAN_SetExtendedTimeSegments>
    ae36:	e003      	b.n	ae40 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    ae38:	9900      	ldr	r1, [sp, #0]
    ae3a:	9803      	ldr	r0, [sp, #12]
    ae3c:	f7fd ff4e 	bl	8cdc <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    ae40:	f002 fd4a 	bl	d8d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    ae44:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d008      	beq.n	ae5e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    ae4c:	9803      	ldr	r0, [sp, #12]
    ae4e:	f000 ff27 	bl	bca0 <FlexCAN_Disable>
    ae52:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ae54:	9b04      	ldr	r3, [sp, #16]
    ae56:	2b00      	cmp	r3, #0
    ae58:	d001      	beq.n	ae5e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    ae5a:	9b04      	ldr	r3, [sp, #16]
    ae5c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    ae5e:	9b05      	ldr	r3, [sp, #20]
}
    ae60:	4618      	mov	r0, r3
    ae62:	b007      	add	sp, #28
    ae64:	f85d fb04 	ldr.w	pc, [sp], #4
    ae68:	0000fcb4 	.word	0x0000fcb4

0000ae6c <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    ae6c:	b500      	push	{lr}
    ae6e:	b085      	sub	sp, #20
    ae70:	4603      	mov	r3, r0
    ae72:	9100      	str	r1, [sp, #0]
    ae74:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ae78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae7c:	4a0d      	ldr	r2, [pc, #52]	; (aeb4 <FlexCAN_Ip_GetBitrate+0x48>)
    ae7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae82:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    ae84:	2300      	movs	r3, #0
    ae86:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    ae8a:	9803      	ldr	r0, [sp, #12]
    ae8c:	f7fd fffc 	bl	8e88 <FlexCAN_IsExCbtEnabled>
    ae90:	4603      	mov	r3, r0
    ae92:	2b00      	cmp	r3, #0
    ae94:	d004      	beq.n	aea0 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    ae96:	9900      	ldr	r1, [sp, #0]
    ae98:	9803      	ldr	r0, [sp, #12]
    ae9a:	f7fd ff79 	bl	8d90 <FlexCAN_GetExtendedTimeSegments>
    ae9e:	e003      	b.n	aea8 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    aea0:	9900      	ldr	r1, [sp, #0]
    aea2:	9803      	ldr	r0, [sp, #12]
    aea4:	f7fd ff9c 	bl	8de0 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    aea8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    aeac:	4618      	mov	r0, r3
    aeae:	b005      	add	sp, #20
    aeb0:	f85d fb04 	ldr.w	pc, [sp], #4
    aeb4:	0000fcb4 	.word	0x0000fcb4

0000aeb8 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    aeb8:	b500      	push	{lr}
    aeba:	b085      	sub	sp, #20
    aebc:	4603      	mov	r3, r0
    aebe:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    aec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aec6:	4a0a      	ldr	r2, [pc, #40]	; (aef0 <FlexCAN_Ip_ClearTDCFail+0x38>)
    aec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aecc:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    aece:	f002 fb3d 	bl	d54c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    aed2:	9b03      	ldr	r3, [sp, #12]
    aed4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    aed8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    aedc:	9b03      	ldr	r3, [sp, #12]
    aede:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    aee2:	f002 fb5f 	bl	d5a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    aee6:	bf00      	nop
    aee8:	b005      	add	sp, #20
    aeea:	f85d fb04 	ldr.w	pc, [sp], #4
    aeee:	bf00      	nop
    aef0:	0000fcb4 	.word	0x0000fcb4

0000aef4 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    aef4:	b084      	sub	sp, #16
    aef6:	4603      	mov	r3, r0
    aef8:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    aefc:	2300      	movs	r3, #0
    aefe:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    af02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af06:	4a0a      	ldr	r2, [pc, #40]	; (af30 <FlexCAN_Ip_GetTDCFail+0x3c>)
    af08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af0c:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    af0e:	9b02      	ldr	r3, [sp, #8]
    af10:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    af14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    af18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    af1c:	bf0c      	ite	eq
    af1e:	2301      	moveq	r3, #1
    af20:	2300      	movne	r3, #0
    af22:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    af26:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    af2a:	4618      	mov	r0, r3
    af2c:	b004      	add	sp, #16
    af2e:	4770      	bx	lr
    af30:	0000fcb4 	.word	0x0000fcb4

0000af34 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    af34:	b084      	sub	sp, #16
    af36:	4603      	mov	r3, r0
    af38:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    af3c:	2300      	movs	r3, #0
    af3e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    af42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af46:	4a08      	ldr	r2, [pc, #32]	; (af68 <FlexCAN_Ip_GetTDCValue+0x34>)
    af48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af4c:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    af4e:	9b02      	ldr	r3, [sp, #8]
    af50:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    af54:	b2db      	uxtb	r3, r3
    af56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    af5a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    af5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    af62:	4618      	mov	r0, r3
    af64:	b004      	add	sp, #16
    af66:	4770      	bx	lr
    af68:	0000fcb4 	.word	0x0000fcb4

0000af6c <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    af6c:	b500      	push	{lr}
    af6e:	b087      	sub	sp, #28
    af70:	4603      	mov	r3, r0
    af72:	9100      	str	r1, [sp, #0]
    af74:	f88d 3007 	strb.w	r3, [sp, #7]
    af78:	4613      	mov	r3, r2
    af7a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    af7e:	2300      	movs	r3, #0
    af80:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    af82:	2300      	movs	r3, #0
    af84:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    af86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af8a:	4a1e      	ldr	r2, [pc, #120]	; (b004 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    af8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af90:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    af92:	9803      	ldr	r0, [sp, #12]
    af94:	f7fd ffaf 	bl	8ef6 <FlexCAN_IsFDEnabled>
    af98:	4603      	mov	r3, r0
    af9a:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    af9e:	9b03      	ldr	r3, [sp, #12]
    afa0:	681b      	ldr	r3, [r3, #0]
    afa2:	0fdb      	lsrs	r3, r3, #31
    afa4:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    afa8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    afac:	2b00      	cmp	r3, #0
    afae:	d003      	beq.n	afb8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    afb0:	9803      	ldr	r0, [sp, #12]
    afb2:	f000 fdf7 	bl	bba4 <FlexCAN_Enable>
    afb6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    afb8:	9b05      	ldr	r3, [sp, #20]
    afba:	2b00      	cmp	r3, #0
    afbc:	d10f      	bne.n	afde <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    afbe:	f002 fcb1 	bl	d924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    afc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    afc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    afca:	4619      	mov	r1, r3
    afcc:	9803      	ldr	r0, [sp, #12]
    afce:	f7fd fdd1 	bl	8b74 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    afd2:	9900      	ldr	r1, [sp, #0]
    afd4:	9803      	ldr	r0, [sp, #12]
    afd6:	f7fd fe4c 	bl	8c72 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    afda:	f002 fccf 	bl	d97c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    afde:	f89d 300a 	ldrb.w	r3, [sp, #10]
    afe2:	2b00      	cmp	r3, #0
    afe4:	d008      	beq.n	aff8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    afe6:	9803      	ldr	r0, [sp, #12]
    afe8:	f000 fe5a 	bl	bca0 <FlexCAN_Disable>
    afec:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    afee:	9b04      	ldr	r3, [sp, #16]
    aff0:	2b00      	cmp	r3, #0
    aff2:	d001      	beq.n	aff8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    aff4:	9b04      	ldr	r3, [sp, #16]
    aff6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    aff8:	9b05      	ldr	r3, [sp, #20]
}
    affa:	4618      	mov	r0, r3
    affc:	b007      	add	sp, #28
    affe:	f85d fb04 	ldr.w	pc, [sp], #4
    b002:	bf00      	nop
    b004:	0000fcb4 	.word	0x0000fcb4

0000b008 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    b008:	b500      	push	{lr}
    b00a:	b085      	sub	sp, #20
    b00c:	4603      	mov	r3, r0
    b00e:	9100      	str	r1, [sp, #0]
    b010:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b014:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b018:	4a08      	ldr	r2, [pc, #32]	; (b03c <FlexCAN_Ip_GetBitrateFD+0x34>)
    b01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b01e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    b020:	2300      	movs	r3, #0
    b022:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    b026:	9900      	ldr	r1, [sp, #0]
    b028:	9803      	ldr	r0, [sp, #12]
    b02a:	f7fd ff00 	bl	8e2e <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    b02e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b032:	4618      	mov	r0, r3
    b034:	b005      	add	sp, #20
    b036:	f85d fb04 	ldr.w	pc, [sp], #4
    b03a:	bf00      	nop
    b03c:	0000fcb4 	.word	0x0000fcb4

0000b040 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    b040:	b500      	push	{lr}
    b042:	b087      	sub	sp, #28
    b044:	4603      	mov	r3, r0
    b046:	f88d 3007 	strb.w	r3, [sp, #7]
    b04a:	460b      	mov	r3, r1
    b04c:	f88d 3006 	strb.w	r3, [sp, #6]
    b050:	4613      	mov	r3, r2
    b052:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b056:	2300      	movs	r3, #0
    b058:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b05a:	2300      	movs	r3, #0
    b05c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b05e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b062:	4a20      	ldr	r2, [pc, #128]	; (b0e4 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    b064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b068:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b06a:	9803      	ldr	r0, [sp, #12]
    b06c:	f7fd fd78 	bl	8b60 <FlexCAN_IsEnabled>
    b070:	4603      	mov	r3, r0
    b072:	2b00      	cmp	r3, #0
    b074:	bf14      	ite	ne
    b076:	2301      	movne	r3, #1
    b078:	2300      	moveq	r3, #0
    b07a:	b2db      	uxtb	r3, r3
    b07c:	f083 0301 	eor.w	r3, r3, #1
    b080:	b2db      	uxtb	r3, r3
    b082:	f88d 300b 	strb.w	r3, [sp, #11]
    b086:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b08a:	f003 0301 	and.w	r3, r3, #1
    b08e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b092:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b096:	2b00      	cmp	r3, #0
    b098:	d003      	beq.n	b0a2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    b09a:	9803      	ldr	r0, [sp, #12]
    b09c:	f000 fd82 	bl	bba4 <FlexCAN_Enable>
    b0a0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b0a2:	9b05      	ldr	r3, [sp, #20]
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d10b      	bne.n	b0c0 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b0a8:	f002 fc8e 	bl	d9c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    b0ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b0b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b0b4:	4619      	mov	r1, r3
    b0b6:	9803      	ldr	r0, [sp, #12]
    b0b8:	f7fd fd2b 	bl	8b12 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b0bc:	f002 fcb0 	bl	da20 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    b0c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0c4:	2b00      	cmp	r3, #0
    b0c6:	d008      	beq.n	b0da <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    b0c8:	9803      	ldr	r0, [sp, #12]
    b0ca:	f000 fde9 	bl	bca0 <FlexCAN_Disable>
    b0ce:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b0d0:	9b04      	ldr	r3, [sp, #16]
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	d001      	beq.n	b0da <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    b0d6:	9b04      	ldr	r3, [sp, #16]
    b0d8:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    b0da:	9b05      	ldr	r3, [sp, #20]
}
    b0dc:	4618      	mov	r0, r3
    b0de:	b007      	add	sp, #28
    b0e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b0e4:	0000fcb4 	.word	0x0000fcb4

0000b0e8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    b0e8:	b500      	push	{lr}
    b0ea:	b087      	sub	sp, #28
    b0ec:	4603      	mov	r3, r0
    b0ee:	460a      	mov	r2, r1
    b0f0:	f88d 3007 	strb.w	r3, [sp, #7]
    b0f4:	4613      	mov	r3, r2
    b0f6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b0fa:	2300      	movs	r3, #0
    b0fc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b0fe:	2300      	movs	r3, #0
    b100:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b102:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b106:	4a1f      	ldr	r2, [pc, #124]	; (b184 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    b108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b10c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b10e:	9803      	ldr	r0, [sp, #12]
    b110:	f7fd fd26 	bl	8b60 <FlexCAN_IsEnabled>
    b114:	4603      	mov	r3, r0
    b116:	2b00      	cmp	r3, #0
    b118:	bf14      	ite	ne
    b11a:	2301      	movne	r3, #1
    b11c:	2300      	moveq	r3, #0
    b11e:	b2db      	uxtb	r3, r3
    b120:	f083 0301 	eor.w	r3, r3, #1
    b124:	b2db      	uxtb	r3, r3
    b126:	f88d 300b 	strb.w	r3, [sp, #11]
    b12a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b12e:	f003 0301 	and.w	r3, r3, #1
    b132:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b136:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b13a:	2b00      	cmp	r3, #0
    b13c:	d003      	beq.n	b146 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b13e:	9803      	ldr	r0, [sp, #12]
    b140:	f000 fd30 	bl	bba4 <FlexCAN_Enable>
    b144:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b146:	9b05      	ldr	r3, [sp, #20]
    b148:	2b00      	cmp	r3, #0
    b14a:	d109      	bne.n	b160 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b14c:	f002 fc8e 	bl	da6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    b150:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b154:	4619      	mov	r1, r3
    b156:	9803      	ldr	r0, [sp, #12]
    b158:	f7fd ff43 	bl	8fe2 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b15c:	f002 fcb2 	bl	dac4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    b160:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b164:	2b00      	cmp	r3, #0
    b166:	d008      	beq.n	b17a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b168:	9803      	ldr	r0, [sp, #12]
    b16a:	f000 fd99 	bl	bca0 <FlexCAN_Disable>
    b16e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b170:	9b04      	ldr	r3, [sp, #16]
    b172:	2b00      	cmp	r3, #0
    b174:	d001      	beq.n	b17a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    b176:	9b04      	ldr	r3, [sp, #16]
    b178:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b17a:	9b05      	ldr	r3, [sp, #20]
}
    b17c:	4618      	mov	r0, r3
    b17e:	b007      	add	sp, #28
    b180:	f85d fb04 	ldr.w	pc, [sp], #4
    b184:	0000fcb4 	.word	0x0000fcb4

0000b188 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b188:	b500      	push	{lr}
    b18a:	b085      	sub	sp, #20
    b18c:	4603      	mov	r3, r0
    b18e:	460a      	mov	r2, r1
    b190:	f88d 3007 	strb.w	r3, [sp, #7]
    b194:	4613      	mov	r3, r2
    b196:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b19a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b19e:	4a0b      	ldr	r2, [pc, #44]	; (b1cc <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    b1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a4:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    b1a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b1aa:	4619      	mov	r1, r3
    b1ac:	9803      	ldr	r0, [sp, #12]
    b1ae:	f7fd fd44 	bl	8c3a <FlexCAN_GetBuffStatusFlag>
    b1b2:	4603      	mov	r3, r0
    b1b4:	2b01      	cmp	r3, #1
    b1b6:	bf0c      	ite	eq
    b1b8:	2301      	moveq	r3, #1
    b1ba:	2300      	movne	r3, #0
    b1bc:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    b1c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b1c4:	4618      	mov	r0, r3
    b1c6:	b005      	add	sp, #20
    b1c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b1cc:	0000fcb4 	.word	0x0000fcb4

0000b1d0 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b1d0:	b500      	push	{lr}
    b1d2:	b085      	sub	sp, #20
    b1d4:	4603      	mov	r3, r0
    b1d6:	460a      	mov	r2, r1
    b1d8:	f88d 3007 	strb.w	r3, [sp, #7]
    b1dc:	4613      	mov	r3, r2
    b1de:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b1e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b1e6:	4a07      	ldr	r2, [pc, #28]	; (b204 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    b1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ec:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    b1ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b1f2:	4619      	mov	r1, r3
    b1f4:	9803      	ldr	r0, [sp, #12]
    b1f6:	f7fd fd0d 	bl	8c14 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    b1fa:	bf00      	nop
    b1fc:	b005      	add	sp, #20
    b1fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b202:	bf00      	nop
    b204:	0000fcb4 	.word	0x0000fcb4

0000b208 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    b208:	b500      	push	{lr}
    b20a:	b087      	sub	sp, #28
    b20c:	4603      	mov	r3, r0
    b20e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b212:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b216:	4a11      	ldr	r2, [pc, #68]	; (b25c <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    b218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b21c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b21e:	2301      	movs	r3, #1
    b220:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b222:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b226:	4a0e      	ldr	r2, [pc, #56]	; (b260 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    b228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b22c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b22e:	9804      	ldr	r0, [sp, #16]
    b230:	f7fd fc96 	bl	8b60 <FlexCAN_IsEnabled>
    b234:	4603      	mov	r3, r0
    b236:	2b00      	cmp	r3, #0
    b238:	d00b      	beq.n	b252 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    b23a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b23e:	4619      	mov	r1, r3
    b240:	9804      	ldr	r0, [sp, #16]
    b242:	f000 ffe1 	bl	c208 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    b246:	9b03      	ldr	r3, [sp, #12]
    b248:	2201      	movs	r2, #1
    b24a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b24e:	2300      	movs	r3, #0
    b250:	9305      	str	r3, [sp, #20]
    }

    return result;
    b252:	9b05      	ldr	r3, [sp, #20]
}
    b254:	4618      	mov	r0, r3
    b256:	b007      	add	sp, #28
    b258:	f85d fb04 	ldr.w	pc, [sp], #4
    b25c:	0000fcb4 	.word	0x0000fcb4
    b260:	1fff8fbc 	.word	0x1fff8fbc

0000b264 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    b264:	b500      	push	{lr}
    b266:	b087      	sub	sp, #28
    b268:	4603      	mov	r3, r0
    b26a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b26e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b272:	4a10      	ldr	r2, [pc, #64]	; (b2b4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    b274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b278:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b27a:	2301      	movs	r3, #1
    b27c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b27e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b282:	4a0d      	ldr	r2, [pc, #52]	; (b2b8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    b284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b288:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b28a:	9804      	ldr	r0, [sp, #16]
    b28c:	f7fd fc68 	bl	8b60 <FlexCAN_IsEnabled>
    b290:	4603      	mov	r3, r0
    b292:	2b00      	cmp	r3, #0
    b294:	d008      	beq.n	b2a8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    b296:	9804      	ldr	r0, [sp, #16]
    b298:	f000 ffae 	bl	c1f8 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    b29c:	9b03      	ldr	r3, [sp, #12]
    b29e:	2200      	movs	r2, #0
    b2a0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b2a4:	2300      	movs	r3, #0
    b2a6:	9305      	str	r3, [sp, #20]
    }

    return result;
    b2a8:	9b05      	ldr	r3, [sp, #20]
}
    b2aa:	4618      	mov	r0, r3
    b2ac:	b007      	add	sp, #28
    b2ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b2b2:	bf00      	nop
    b2b4:	0000fcb4 	.word	0x0000fcb4
    b2b8:	1fff8fbc 	.word	0x1fff8fbc

0000b2bc <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    b2bc:	b500      	push	{lr}
    b2be:	b087      	sub	sp, #28
    b2c0:	4603      	mov	r3, r0
    b2c2:	9100      	str	r1, [sp, #0]
    b2c4:	f88d 3007 	strb.w	r3, [sp, #7]
    b2c8:	4613      	mov	r3, r2
    b2ca:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b2ce:	2300      	movs	r3, #0
    b2d0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b2d2:	2300      	movs	r3, #0
    b2d4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b2d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b2da:	4a3a      	ldr	r2, [pc, #232]	; (b3c4 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    b2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2e0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b2e2:	9803      	ldr	r0, [sp, #12]
    b2e4:	f7fd fc3c 	bl	8b60 <FlexCAN_IsEnabled>
    b2e8:	4603      	mov	r3, r0
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	bf14      	ite	ne
    b2ee:	2301      	movne	r3, #1
    b2f0:	2300      	moveq	r3, #0
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	f083 0301 	eor.w	r3, r3, #1
    b2f8:	b2db      	uxtb	r3, r3
    b2fa:	f88d 300b 	strb.w	r3, [sp, #11]
    b2fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b302:	f003 0301 	and.w	r3, r3, #1
    b306:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b30a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b30e:	2b00      	cmp	r3, #0
    b310:	d003      	beq.n	b31a <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b312:	9803      	ldr	r0, [sp, #12]
    b314:	f000 fc46 	bl	bba4 <FlexCAN_Enable>
    b318:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    b31a:	9b05      	ldr	r3, [sp, #20]
    b31c:	2b00      	cmp	r3, #0
    b31e:	d13c      	bne.n	b39a <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    b320:	9b00      	ldr	r3, [sp, #0]
    b322:	2b04      	cmp	r3, #4
    b324:	d83b      	bhi.n	b39e <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    b326:	a201      	add	r2, pc, #4	; (adr r2, b32c <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b32c:	0000b377 	.word	0x0000b377
    b330:	0000b389 	.word	0x0000b389
    b334:	0000b353 	.word	0x0000b353
    b338:	0000b365 	.word	0x0000b365
    b33c:	0000b341 	.word	0x0000b341
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    b340:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b344:	461a      	mov	r2, r3
    b346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b34a:	9803      	ldr	r0, [sp, #12]
    b34c:	f000 fce8 	bl	bd20 <FlexCAN_SetErrIntCmd>
                break;
    b350:	e026      	b.n	b3a0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    b352:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b356:	461a      	mov	r2, r3
    b358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b35c:	9803      	ldr	r0, [sp, #12]
    b35e:	f000 fcdf 	bl	bd20 <FlexCAN_SetErrIntCmd>
                break;
    b362:	e01d      	b.n	b3a0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    b364:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b368:	461a      	mov	r2, r3
    b36a:	f244 0101 	movw	r1, #16385	; 0x4001
    b36e:	9803      	ldr	r0, [sp, #12]
    b370:	f000 fcd6 	bl	bd20 <FlexCAN_SetErrIntCmd>
                break;
    b374:	e014      	b.n	b3a0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    b376:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b37a:	461a      	mov	r2, r3
    b37c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b380:	9803      	ldr	r0, [sp, #12]
    b382:	f000 fccd 	bl	bd20 <FlexCAN_SetErrIntCmd>
                }
                break;
    b386:	e00b      	b.n	b3a0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    b388:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b38c:	461a      	mov	r2, r3
    b38e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    b392:	9803      	ldr	r0, [sp, #12]
    b394:	f000 fcc4 	bl	bd20 <FlexCAN_SetErrIntCmd>
                }
                break;
    b398:	e002      	b.n	b3a0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    b39a:	bf00      	nop
    b39c:	e000      	b.n	b3a0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    b39e:	bf00      	nop

    if (TRUE == disabled)
    b3a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d008      	beq.n	b3ba <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    b3a8:	9803      	ldr	r0, [sp, #12]
    b3aa:	f000 fc79 	bl	bca0 <FlexCAN_Disable>
    b3ae:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b3b0:	9b04      	ldr	r3, [sp, #16]
    b3b2:	2b00      	cmp	r3, #0
    b3b4:	d001      	beq.n	b3ba <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    b3b6:	9b04      	ldr	r3, [sp, #16]
    b3b8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b3ba:	9b05      	ldr	r3, [sp, #20]
}
    b3bc:	4618      	mov	r0, r3
    b3be:	b007      	add	sp, #28
    b3c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3c4:	0000fcb4 	.word	0x0000fcb4

0000b3c8 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    b3c8:	b500      	push	{lr}
    b3ca:	b087      	sub	sp, #28
    b3cc:	4603      	mov	r3, r0
    b3ce:	460a      	mov	r2, r1
    b3d0:	f88d 3007 	strb.w	r3, [sp, #7]
    b3d4:	4613      	mov	r3, r2
    b3d6:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b3da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3de:	4a27      	ldr	r2, [pc, #156]	; (b47c <FlexCAN_Ip_AbortTransfer+0xb4>)
    b3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e4:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b3e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3ea:	4a25      	ldr	r2, [pc, #148]	; (b480 <FlexCAN_Ip_AbortTransfer+0xb8>)
    b3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3f0:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b3f2:	2300      	movs	r3, #0
    b3f4:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    b3f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b3fa:	2b1f      	cmp	r3, #31
    b3fc:	d838      	bhi.n	b470 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    b3fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b402:	9a03      	ldr	r2, [sp, #12]
    b404:	011b      	lsls	r3, r3, #4
    b406:	4413      	add	r3, r2
    b408:	3304      	adds	r3, #4
    b40a:	681b      	ldr	r3, [r3, #0]
    b40c:	2b00      	cmp	r3, #0
    b40e:	d102      	bne.n	b416 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    b410:	2305      	movs	r3, #5
    b412:	9305      	str	r3, [sp, #20]
    b414:	e02c      	b.n	b470 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    b416:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b41a:	9b03      	ldr	r3, [sp, #12]
    b41c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    b420:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b424:	9804      	ldr	r0, [sp, #16]
    b426:	f000 feb3 	bl	c190 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    b42a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b42e:	9a03      	ldr	r2, [sp, #12]
    b430:	011b      	lsls	r3, r3, #4
    b432:	4413      	add	r3, r2
    b434:	3304      	adds	r3, #4
    b436:	681b      	ldr	r3, [r3, #0]
    b438:	2b02      	cmp	r3, #2
    b43a:	d108      	bne.n	b44e <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    b43c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b440:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b444:	4611      	mov	r1, r2
    b446:	4618      	mov	r0, r3
    b448:	f7fe fabc 	bl	99c4 <FlexCAN_AbortTxTransfer>
    b44c:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    b44e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b452:	9a03      	ldr	r2, [sp, #12]
    b454:	011b      	lsls	r3, r3, #4
    b456:	4413      	add	r3, r2
    b458:	3304      	adds	r3, #4
    b45a:	681b      	ldr	r3, [r3, #0]
    b45c:	2b01      	cmp	r3, #1
    b45e:	d107      	bne.n	b470 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    b460:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b464:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b468:	4611      	mov	r1, r2
    b46a:	4618      	mov	r0, r3
    b46c:	f7fe fb34 	bl	9ad8 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    b470:	9b05      	ldr	r3, [sp, #20]
}
    b472:	4618      	mov	r0, r3
    b474:	b007      	add	sp, #28
    b476:	f85d fb04 	ldr.w	pc, [sp], #4
    b47a:	bf00      	nop
    b47c:	0000fcb4 	.word	0x0000fcb4
    b480:	1fff8fbc 	.word	0x1fff8fbc

0000b484 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    b484:	b500      	push	{lr}
    b486:	b087      	sub	sp, #28
    b488:	4603      	mov	r3, r0
    b48a:	9100      	str	r1, [sp, #0]
    b48c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b490:	2300      	movs	r3, #0
    b492:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b494:	2300      	movs	r3, #0
    b496:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b498:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b49c:	4a1b      	ldr	r2, [pc, #108]	; (b50c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    b49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4a2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b4a4:	9803      	ldr	r0, [sp, #12]
    b4a6:	f7fd fb5b 	bl	8b60 <FlexCAN_IsEnabled>
    b4aa:	4603      	mov	r3, r0
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	bf14      	ite	ne
    b4b0:	2301      	movne	r3, #1
    b4b2:	2300      	moveq	r3, #0
    b4b4:	b2db      	uxtb	r3, r3
    b4b6:	f083 0301 	eor.w	r3, r3, #1
    b4ba:	b2db      	uxtb	r3, r3
    b4bc:	f88d 300b 	strb.w	r3, [sp, #11]
    b4c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4c4:	f003 0301 	and.w	r3, r3, #1
    b4c8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b4cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d003      	beq.n	b4dc <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b4d4:	9803      	ldr	r0, [sp, #12]
    b4d6:	f000 fb65 	bl	bba4 <FlexCAN_Enable>
    b4da:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b4dc:	9b05      	ldr	r3, [sp, #20]
    b4de:	2b00      	cmp	r3, #0
    b4e0:	d102      	bne.n	b4e8 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    b4e2:	9b03      	ldr	r3, [sp, #12]
    b4e4:	9a00      	ldr	r2, [sp, #0]
    b4e6:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    b4e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	d008      	beq.n	b502 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b4f0:	9803      	ldr	r0, [sp, #12]
    b4f2:	f000 fbd5 	bl	bca0 <FlexCAN_Disable>
    b4f6:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b4f8:	9b04      	ldr	r3, [sp, #16]
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	d001      	beq.n	b502 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    b4fe:	9b04      	ldr	r3, [sp, #16]
    b500:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b502:	9b05      	ldr	r3, [sp, #20]
}
    b504:	4618      	mov	r0, r3
    b506:	b007      	add	sp, #28
    b508:	f85d fb04 	ldr.w	pc, [sp], #4
    b50c:	0000fcb4 	.word	0x0000fcb4

0000b510 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    b510:	b500      	push	{lr}
    b512:	b087      	sub	sp, #28
    b514:	4603      	mov	r3, r0
    b516:	9100      	str	r1, [sp, #0]
    b518:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b51c:	2300      	movs	r3, #0
    b51e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b520:	2300      	movs	r3, #0
    b522:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b524:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b528:	4a1b      	ldr	r2, [pc, #108]	; (b598 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    b52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b52e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b530:	9803      	ldr	r0, [sp, #12]
    b532:	f7fd fb15 	bl	8b60 <FlexCAN_IsEnabled>
    b536:	4603      	mov	r3, r0
    b538:	2b00      	cmp	r3, #0
    b53a:	bf14      	ite	ne
    b53c:	2301      	movne	r3, #1
    b53e:	2300      	moveq	r3, #0
    b540:	b2db      	uxtb	r3, r3
    b542:	f083 0301 	eor.w	r3, r3, #1
    b546:	b2db      	uxtb	r3, r3
    b548:	f88d 300b 	strb.w	r3, [sp, #11]
    b54c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b550:	f003 0301 	and.w	r3, r3, #1
    b554:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b558:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b55c:	2b00      	cmp	r3, #0
    b55e:	d003      	beq.n	b568 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b560:	9803      	ldr	r0, [sp, #12]
    b562:	f000 fb1f 	bl	bba4 <FlexCAN_Enable>
    b566:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b568:	9b05      	ldr	r3, [sp, #20]
    b56a:	2b00      	cmp	r3, #0
    b56c:	d102      	bne.n	b574 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    b56e:	9b03      	ldr	r3, [sp, #12]
    b570:	9a00      	ldr	r2, [sp, #0]
    b572:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    b574:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b578:	2b00      	cmp	r3, #0
    b57a:	d008      	beq.n	b58e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b57c:	9803      	ldr	r0, [sp, #12]
    b57e:	f000 fb8f 	bl	bca0 <FlexCAN_Disable>
    b582:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b584:	9b04      	ldr	r3, [sp, #16]
    b586:	2b00      	cmp	r3, #0
    b588:	d001      	beq.n	b58e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    b58a:	9b04      	ldr	r3, [sp, #16]
    b58c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b58e:	9b05      	ldr	r3, [sp, #20]
}
    b590:	4618      	mov	r0, r3
    b592:	b007      	add	sp, #28
    b594:	f85d fb04 	ldr.w	pc, [sp], #4
    b598:	0000fcb4 	.word	0x0000fcb4

0000b59c <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    b59c:	b500      	push	{lr}
    b59e:	b087      	sub	sp, #28
    b5a0:	4603      	mov	r3, r0
    b5a2:	460a      	mov	r2, r1
    b5a4:	f88d 3007 	strb.w	r3, [sp, #7]
    b5a8:	4613      	mov	r3, r2
    b5aa:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b5ae:	2300      	movs	r3, #0
    b5b0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b5b2:	2300      	movs	r3, #0
    b5b4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b5b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b5ba:	4a1f      	ldr	r2, [pc, #124]	; (b638 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    b5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5c0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b5c2:	9803      	ldr	r0, [sp, #12]
    b5c4:	f7fd facc 	bl	8b60 <FlexCAN_IsEnabled>
    b5c8:	4603      	mov	r3, r0
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	bf14      	ite	ne
    b5ce:	2301      	movne	r3, #1
    b5d0:	2300      	moveq	r3, #0
    b5d2:	b2db      	uxtb	r3, r3
    b5d4:	f083 0301 	eor.w	r3, r3, #1
    b5d8:	b2db      	uxtb	r3, r3
    b5da:	f88d 300b 	strb.w	r3, [sp, #11]
    b5de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b5e2:	f003 0301 	and.w	r3, r3, #1
    b5e6:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b5ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d003      	beq.n	b5fa <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b5f2:	9803      	ldr	r0, [sp, #12]
    b5f4:	f000 fad6 	bl	bba4 <FlexCAN_Enable>
    b5f8:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b5fa:	9b05      	ldr	r3, [sp, #20]
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	d109      	bne.n	b614 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b600:	f001 fff6 	bl	d5f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    b604:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b608:	4619      	mov	r1, r3
    b60a:	9803      	ldr	r0, [sp, #12]
    b60c:	f7fd fae5 	bl	8bda <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b610:	f002 f81a 	bl	d648 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    b614:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b618:	2b00      	cmp	r3, #0
    b61a:	d008      	beq.n	b62e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b61c:	9803      	ldr	r0, [sp, #12]
    b61e:	f000 fb3f 	bl	bca0 <FlexCAN_Disable>
    b622:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b624:	9b04      	ldr	r3, [sp, #16]
    b626:	2b00      	cmp	r3, #0
    b628:	d001      	beq.n	b62e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    b62a:	9b04      	ldr	r3, [sp, #16]
    b62c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b62e:	9b05      	ldr	r3, [sp, #20]
}
    b630:	4618      	mov	r0, r3
    b632:	b007      	add	sp, #28
    b634:	f85d fb04 	ldr.w	pc, [sp], #4
    b638:	0000fcb4 	.word	0x0000fcb4

0000b63c <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    b63c:	b500      	push	{lr}
    b63e:	b085      	sub	sp, #20
    b640:	4603      	mov	r3, r0
    b642:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b646:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b64a:	4a06      	ldr	r2, [pc, #24]	; (b664 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    b64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b650:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    b652:	9803      	ldr	r0, [sp, #12]
    b654:	f7fd fc5d 	bl	8f12 <FlexCAN_IsListenOnlyModeEnabled>
    b658:	4603      	mov	r3, r0
}
    b65a:	4618      	mov	r0, r3
    b65c:	b005      	add	sp, #20
    b65e:	f85d fb04 	ldr.w	pc, [sp], #4
    b662:	bf00      	nop
    b664:	0000fcb4 	.word	0x0000fcb4

0000b668 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    b668:	b500      	push	{lr}
    b66a:	b089      	sub	sp, #36	; 0x24
    b66c:	4603      	mov	r3, r0
    b66e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    b672:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b676:	4a27      	ldr	r2, [pc, #156]	; (b714 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    b678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b67c:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    b67e:	2300      	movs	r3, #0
    b680:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    b682:	2300      	movs	r3, #0
    b684:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b686:	2100      	movs	r1, #0
    b688:	4823      	ldr	r0, [pc, #140]	; (b718 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    b68a:	f7f6 fbdd 	bl	1e48 <OsIf_MicrosToTicks>
    b68e:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    b690:	2301      	movs	r3, #1
    b692:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    b694:	9b05      	ldr	r3, [sp, #20]
    b696:	685b      	ldr	r3, [r3, #4]
    b698:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b69c:	2b00      	cmp	r3, #0
    b69e:	d033      	beq.n	b708 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    b6a0:	2300      	movs	r3, #0
    b6a2:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b6a4:	9b05      	ldr	r3, [sp, #20]
    b6a6:	6a1b      	ldr	r3, [r3, #32]
    b6a8:	f003 0320 	and.w	r3, r3, #32
    b6ac:	2b00      	cmp	r3, #0
    b6ae:	d02b      	beq.n	b708 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b6b0:	f002 fad2 	bl	dc58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    b6b4:	9b05      	ldr	r3, [sp, #20]
    b6b6:	685b      	ldr	r3, [r3, #4]
    b6b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    b6bc:	9b05      	ldr	r3, [sp, #20]
    b6be:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    b6c0:	9b05      	ldr	r3, [sp, #20]
    b6c2:	685b      	ldr	r3, [r3, #4]
    b6c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    b6c8:	9b05      	ldr	r3, [sp, #20]
    b6ca:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b6cc:	f002 faf0 	bl	dcb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b6d0:	2000      	movs	r0, #0
    b6d2:	f7f6 fb6d 	bl	1db0 <OsIf_GetCounter>
    b6d6:	4603      	mov	r3, r0
    b6d8:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b6da:	e00f      	b.n	b6fc <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b6dc:	ab03      	add	r3, sp, #12
    b6de:	2100      	movs	r1, #0
    b6e0:	4618      	mov	r0, r3
    b6e2:	f7f6 fb7e 	bl	1de2 <OsIf_GetElapsed>
    b6e6:	4602      	mov	r2, r0
    b6e8:	9b07      	ldr	r3, [sp, #28]
    b6ea:	4413      	add	r3, r2
    b6ec:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    b6ee:	9a07      	ldr	r2, [sp, #28]
    b6f0:	9b04      	ldr	r3, [sp, #16]
    b6f2:	429a      	cmp	r2, r3
    b6f4:	d302      	bcc.n	b6fc <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    b6f6:	2303      	movs	r3, #3
    b6f8:	9306      	str	r3, [sp, #24]
                    break;
    b6fa:	e005      	b.n	b708 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b6fc:	9b05      	ldr	r3, [sp, #20]
    b6fe:	6a1b      	ldr	r3, [r3, #32]
    b700:	f003 0320 	and.w	r3, r3, #32
    b704:	2b00      	cmp	r3, #0
    b706:	d1e9      	bne.n	b6dc <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    b708:	9b06      	ldr	r3, [sp, #24]
}
    b70a:	4618      	mov	r0, r3
    b70c:	b009      	add	sp, #36	; 0x24
    b70e:	f85d fb04 	ldr.w	pc, [sp], #4
    b712:	bf00      	nop
    b714:	0000fcb4 	.word	0x0000fcb4
    b718:	000f4240 	.word	0x000f4240

0000b71c <FlexCAN_SetSelfReception>:
{
    b71c:	b082      	sub	sp, #8
    b71e:	9001      	str	r0, [sp, #4]
    b720:	460b      	mov	r3, r1
    b722:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    b726:	9b01      	ldr	r3, [sp, #4]
    b728:	681b      	ldr	r3, [r3, #0]
    b72a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b72e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b732:	2a00      	cmp	r2, #0
    b734:	d001      	beq.n	b73a <FlexCAN_SetSelfReception+0x1e>
    b736:	2200      	movs	r2, #0
    b738:	e001      	b.n	b73e <FlexCAN_SetSelfReception+0x22>
    b73a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b73e:	431a      	orrs	r2, r3
    b740:	9b01      	ldr	r3, [sp, #4]
    b742:	601a      	str	r2, [r3, #0]
}
    b744:	bf00      	nop
    b746:	b002      	add	sp, #8
    b748:	4770      	bx	lr

0000b74a <FlexCAN_IsFDEnabled>:
{
    b74a:	b082      	sub	sp, #8
    b74c:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    b74e:	9b01      	ldr	r3, [sp, #4]
    b750:	681b      	ldr	r3, [r3, #0]
    b752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b756:	2b00      	cmp	r3, #0
    b758:	bf14      	ite	ne
    b75a:	2301      	movne	r3, #1
    b75c:	2300      	moveq	r3, #0
    b75e:	b2db      	uxtb	r3, r3
}
    b760:	4618      	mov	r0, r3
    b762:	b002      	add	sp, #8
    b764:	4770      	bx	lr

0000b766 <FlexCAN_SetIsoCan>:
{
    b766:	b082      	sub	sp, #8
    b768:	9001      	str	r0, [sp, #4]
    b76a:	460b      	mov	r3, r1
    b76c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    b770:	9b01      	ldr	r3, [sp, #4]
    b772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b778:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b77c:	2a00      	cmp	r2, #0
    b77e:	d002      	beq.n	b786 <FlexCAN_SetIsoCan+0x20>
    b780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b784:	e000      	b.n	b788 <FlexCAN_SetIsoCan+0x22>
    b786:	2200      	movs	r2, #0
    b788:	431a      	orrs	r2, r3
    b78a:	9b01      	ldr	r3, [sp, #4]
    b78c:	635a      	str	r2, [r3, #52]	; 0x34
}
    b78e:	bf00      	nop
    b790:	b002      	add	sp, #8
    b792:	4770      	bx	lr

0000b794 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    b794:	b082      	sub	sp, #8
    b796:	9001      	str	r0, [sp, #4]
    b798:	460b      	mov	r3, r1
    b79a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    b79e:	9b01      	ldr	r3, [sp, #4]
    b7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b7a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7aa:	2a00      	cmp	r2, #0
    b7ac:	d002      	beq.n	b7b4 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    b7ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b7b2:	e000      	b.n	b7b6 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    b7b4:	2200      	movs	r2, #0
    b7b6:	431a      	orrs	r2, r3
    b7b8:	9b01      	ldr	r3, [sp, #4]
    b7ba:	635a      	str	r2, [r3, #52]	; 0x34
}
    b7bc:	bf00      	nop
    b7be:	b002      	add	sp, #8
    b7c0:	4770      	bx	lr

0000b7c2 <FlexCAN_SetProtocolException>:
{
    b7c2:	b082      	sub	sp, #8
    b7c4:	9001      	str	r0, [sp, #4]
    b7c6:	460b      	mov	r3, r1
    b7c8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    b7cc:	9b01      	ldr	r3, [sp, #4]
    b7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b7d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7d8:	2a00      	cmp	r2, #0
    b7da:	d002      	beq.n	b7e2 <FlexCAN_SetProtocolException+0x20>
    b7dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b7e0:	e000      	b.n	b7e4 <FlexCAN_SetProtocolException+0x22>
    b7e2:	2200      	movs	r2, #0
    b7e4:	431a      	orrs	r2, r3
    b7e6:	9b01      	ldr	r3, [sp, #4]
    b7e8:	635a      	str	r2, [r3, #52]	; 0x34
}
    b7ea:	bf00      	nop
    b7ec:	b002      	add	sp, #8
    b7ee:	4770      	bx	lr

0000b7f0 <FlexCAN_SetRemoteReqStore>:
{
    b7f0:	b082      	sub	sp, #8
    b7f2:	9001      	str	r0, [sp, #4]
    b7f4:	460b      	mov	r3, r1
    b7f6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    b7fa:	9b01      	ldr	r3, [sp, #4]
    b7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b802:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b806:	2a00      	cmp	r2, #0
    b808:	d002      	beq.n	b810 <FlexCAN_SetRemoteReqStore+0x20>
    b80a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b80e:	e000      	b.n	b812 <FlexCAN_SetRemoteReqStore+0x22>
    b810:	2200      	movs	r2, #0
    b812:	431a      	orrs	r2, r3
    b814:	9b01      	ldr	r3, [sp, #4]
    b816:	635a      	str	r2, [r3, #52]	; 0x34
}
    b818:	bf00      	nop
    b81a:	b002      	add	sp, #8
    b81c:	4770      	bx	lr

0000b81e <FlexCAN_SetBusOffAutorecovery>:
{
    b81e:	b082      	sub	sp, #8
    b820:	9001      	str	r0, [sp, #4]
    b822:	460b      	mov	r3, r1
    b824:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    b828:	9b01      	ldr	r3, [sp, #4]
    b82a:	685b      	ldr	r3, [r3, #4]
    b82c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b830:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b834:	2a00      	cmp	r2, #0
    b836:	d001      	beq.n	b83c <FlexCAN_SetBusOffAutorecovery+0x1e>
    b838:	2200      	movs	r2, #0
    b83a:	e000      	b.n	b83e <FlexCAN_SetBusOffAutorecovery+0x20>
    b83c:	2240      	movs	r2, #64	; 0x40
    b83e:	431a      	orrs	r2, r3
    b840:	9b01      	ldr	r3, [sp, #4]
    b842:	605a      	str	r2, [r3, #4]
}
    b844:	bf00      	nop
    b846:	b002      	add	sp, #8
    b848:	4770      	bx	lr

0000b84a <FlexCAN_SetEdgeFilter>:
{
    b84a:	b082      	sub	sp, #8
    b84c:	9001      	str	r0, [sp, #4]
    b84e:	460b      	mov	r3, r1
    b850:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    b854:	9b01      	ldr	r3, [sp, #4]
    b856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b85c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b860:	2a00      	cmp	r2, #0
    b862:	d001      	beq.n	b868 <FlexCAN_SetEdgeFilter+0x1e>
    b864:	2200      	movs	r2, #0
    b866:	e001      	b.n	b86c <FlexCAN_SetEdgeFilter+0x22>
    b868:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b86c:	431a      	orrs	r2, r3
    b86e:	9b01      	ldr	r3, [sp, #4]
    b870:	635a      	str	r2, [r3, #52]	; 0x34
}
    b872:	bf00      	nop
    b874:	b002      	add	sp, #8
    b876:	4770      	bx	lr

0000b878 <FlexCAN_CanBitSampling>:
{
    b878:	b082      	sub	sp, #8
    b87a:	9001      	str	r0, [sp, #4]
    b87c:	460b      	mov	r3, r1
    b87e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    b882:	9b01      	ldr	r3, [sp, #4]
    b884:	685b      	ldr	r3, [r3, #4]
    b886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b88a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b88e:	2a00      	cmp	r2, #0
    b890:	d001      	beq.n	b896 <FlexCAN_CanBitSampling+0x1e>
    b892:	2280      	movs	r2, #128	; 0x80
    b894:	e000      	b.n	b898 <FlexCAN_CanBitSampling+0x20>
    b896:	2200      	movs	r2, #0
    b898:	431a      	orrs	r2, r3
    b89a:	9b01      	ldr	r3, [sp, #4]
    b89c:	605a      	str	r2, [r3, #4]
}
    b89e:	bf00      	nop
    b8a0:	b002      	add	sp, #8
    b8a2:	4770      	bx	lr

0000b8a4 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    b8a4:	b084      	sub	sp, #16
    b8a6:	4603      	mov	r3, r0
    b8a8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    b8ac:	23ff      	movs	r3, #255	; 0xff
    b8ae:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    b8b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b8b4:	2b40      	cmp	r3, #64	; 0x40
    b8b6:	d804      	bhi.n	b8c2 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    b8b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b8bc:	4a03      	ldr	r2, [pc, #12]	; (b8cc <FlexCAN_ComputeDLCValue+0x28>)
    b8be:	5cd3      	ldrb	r3, [r2, r3]
    b8c0:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    b8c2:	9b03      	ldr	r3, [sp, #12]
    b8c4:	b2db      	uxtb	r3, r3
}
    b8c6:	4618      	mov	r0, r3
    b8c8:	b004      	add	sp, #16
    b8ca:	4770      	bx	lr
    b8cc:	0000fcc0 	.word	0x0000fcc0

0000b8d0 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    b8d0:	b500      	push	{lr}
    b8d2:	b087      	sub	sp, #28
    b8d4:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    b8d6:	9801      	ldr	r0, [sp, #4]
    b8d8:	f000 f8f6 	bl	bac8 <FlexCAN_GetMaxMbNum>
    b8dc:	4603      	mov	r3, r0
    b8de:	009b      	lsls	r3, r3, #2
    b8e0:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    b8e2:	9801      	ldr	r0, [sp, #4]
    b8e4:	f000 f8f0 	bl	bac8 <FlexCAN_GetMaxMbNum>
    b8e8:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b8ea:	9b01      	ldr	r3, [sp, #4]
    b8ec:	3380      	adds	r3, #128	; 0x80
    b8ee:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b8f0:	2300      	movs	r3, #0
    b8f2:	9305      	str	r3, [sp, #20]
    b8f4:	e008      	b.n	b908 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    b8f6:	9b05      	ldr	r3, [sp, #20]
    b8f8:	009b      	lsls	r3, r3, #2
    b8fa:	9a02      	ldr	r2, [sp, #8]
    b8fc:	4413      	add	r3, r2
    b8fe:	2200      	movs	r2, #0
    b900:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b902:	9b05      	ldr	r3, [sp, #20]
    b904:	3301      	adds	r3, #1
    b906:	9305      	str	r3, [sp, #20]
    b908:	9a05      	ldr	r2, [sp, #20]
    b90a:	9b04      	ldr	r3, [sp, #16]
    b90c:	429a      	cmp	r2, r3
    b90e:	d3f2      	bcc.n	b8f6 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    b910:	9b01      	ldr	r3, [sp, #4]
    b912:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    b916:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b918:	2300      	movs	r3, #0
    b91a:	9305      	str	r3, [sp, #20]
    b91c:	e008      	b.n	b930 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    b91e:	9b05      	ldr	r3, [sp, #20]
    b920:	009b      	lsls	r3, r3, #2
    b922:	9a02      	ldr	r2, [sp, #8]
    b924:	4413      	add	r3, r2
    b926:	2200      	movs	r2, #0
    b928:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b92a:	9b05      	ldr	r3, [sp, #20]
    b92c:	3301      	adds	r3, #1
    b92e:	9305      	str	r3, [sp, #20]
    b930:	9a05      	ldr	r2, [sp, #20]
    b932:	9b03      	ldr	r3, [sp, #12]
    b934:	429a      	cmp	r2, r3
    b936:	d3f2      	bcc.n	b91e <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    b938:	bf00      	nop
    b93a:	bf00      	nop
    b93c:	b007      	add	sp, #28
    b93e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b942 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    b942:	b084      	sub	sp, #16
    b944:	4603      	mov	r3, r0
    b946:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    b94a:	2308      	movs	r3, #8
    b94c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    b950:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b954:	2b08      	cmp	r3, #8
    b956:	d804      	bhi.n	b962 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    b958:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b95c:	f88d 300f 	strb.w	r3, [sp, #15]
    b960:	e033      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    b962:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b966:	3b09      	subs	r3, #9
    b968:	2b06      	cmp	r3, #6
    b96a:	d82d      	bhi.n	b9c8 <FlexCAN_ComputePayloadSize+0x86>
    b96c:	a201      	add	r2, pc, #4	; (adr r2, b974 <FlexCAN_ComputePayloadSize+0x32>)
    b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b972:	bf00      	nop
    b974:	0000b991 	.word	0x0000b991
    b978:	0000b999 	.word	0x0000b999
    b97c:	0000b9a1 	.word	0x0000b9a1
    b980:	0000b9a9 	.word	0x0000b9a9
    b984:	0000b9b1 	.word	0x0000b9b1
    b988:	0000b9b9 	.word	0x0000b9b9
    b98c:	0000b9c1 	.word	0x0000b9c1
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    b990:	230c      	movs	r3, #12
    b992:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b996:	e018      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    b998:	2310      	movs	r3, #16
    b99a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b99e:	e014      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    b9a0:	2314      	movs	r3, #20
    b9a2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b9a6:	e010      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    b9a8:	2318      	movs	r3, #24
    b9aa:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b9ae:	e00c      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    b9b0:	2320      	movs	r3, #32
    b9b2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b9b6:	e008      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    b9b8:	2330      	movs	r3, #48	; 0x30
    b9ba:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b9be:	e004      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    b9c0:	2340      	movs	r3, #64	; 0x40
    b9c2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b9c6:	e000      	b.n	b9ca <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    b9c8:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    b9ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b9ce:	4618      	mov	r0, r3
    b9d0:	b004      	add	sp, #16
    b9d2:	4770      	bx	lr

0000b9d4 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    b9d4:	b500      	push	{lr}
    b9d6:	b08b      	sub	sp, #44	; 0x2c
    b9d8:	9001      	str	r0, [sp, #4]
    b9da:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    b9dc:	2308      	movs	r3, #8
    b9de:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    b9e2:	2300      	movs	r3, #0
    b9e4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    b9e8:	f44f 7300 	mov.w	r3, #512	; 0x200
    b9ec:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    b9ee:	2300      	movs	r3, #0
    b9f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    b9f4:	9b00      	ldr	r3, [sp, #0]
    b9f6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    b9fa:	2300      	movs	r3, #0
    b9fc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    ba00:	2300      	movs	r3, #0
    ba02:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    ba06:	2300      	movs	r3, #0
    ba08:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    ba0a:	2300      	movs	r3, #0
    ba0c:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    ba10:	9b01      	ldr	r3, [sp, #4]
    ba12:	3380      	adds	r3, #128	; 0x80
    ba14:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    ba16:	2300      	movs	r3, #0
    ba18:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ba1a:	2300      	movs	r3, #0
    ba1c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    ba20:	e02d      	b.n	ba7e <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    ba22:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ba26:	4619      	mov	r1, r3
    ba28:	9801      	ldr	r0, [sp, #4]
    ba2a:	f000 fad1 	bl	bfd0 <FlexCAN_GetPayloadSize>
    ba2e:	4603      	mov	r3, r0
    ba30:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    ba34:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ba38:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ba3c:	4413      	add	r3, r2
    ba3e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    ba42:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ba46:	9a07      	ldr	r2, [sp, #28]
    ba48:	fbb2 f3f3 	udiv	r3, r2, r3
    ba4c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    ba50:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    ba54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ba58:	429a      	cmp	r2, r3
    ba5a:	d815      	bhi.n	ba88 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    ba5c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ba60:	3380      	adds	r3, #128	; 0x80
    ba62:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    ba66:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ba6a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    ba6e:	1ad3      	subs	r3, r2, r3
    ba70:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ba74:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ba78:	3301      	adds	r3, #1
    ba7a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    ba7e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ba82:	2b00      	cmp	r3, #0
    ba84:	d0cd      	beq.n	ba22 <FlexCAN_GetMsgBuffRegion+0x4e>
    ba86:	e000      	b.n	ba8a <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    ba88:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    ba8a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    ba8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ba92:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    ba96:	fbb3 f0f2 	udiv	r0, r3, r2
    ba9a:	fb00 f202 	mul.w	r2, r0, r2
    ba9e:	1a9b      	subs	r3, r3, r2
    baa0:	b2db      	uxtb	r3, r3
    baa2:	461a      	mov	r2, r3
    baa4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    baa8:	089b      	lsrs	r3, r3, #2
    baaa:	b2db      	uxtb	r3, r3
    baac:	fb02 f303 	mul.w	r3, r2, r3
    bab0:	440b      	add	r3, r1
    bab2:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    bab4:	9b06      	ldr	r3, [sp, #24]
    bab6:	009b      	lsls	r3, r3, #2
    bab8:	9a04      	ldr	r2, [sp, #16]
    baba:	4413      	add	r3, r2
    babc:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    babe:	9b03      	ldr	r3, [sp, #12]
}
    bac0:	4618      	mov	r0, r3
    bac2:	b00b      	add	sp, #44	; 0x2c
    bac4:	f85d fb04 	ldr.w	pc, [sp], #4

0000bac8 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    bac8:	b084      	sub	sp, #16
    baca:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    bacc:	2300      	movs	r3, #0
    bace:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    bad0:	2300      	movs	r3, #0
    bad2:	9303      	str	r3, [sp, #12]
    bad4:	e00e      	b.n	baf4 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    bad6:	4a0b      	ldr	r2, [pc, #44]	; (bb04 <FlexCAN_GetMaxMbNum+0x3c>)
    bad8:	9b03      	ldr	r3, [sp, #12]
    bada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bade:	9a01      	ldr	r2, [sp, #4]
    bae0:	429a      	cmp	r2, r3
    bae2:	d104      	bne.n	baee <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    bae4:	4a08      	ldr	r2, [pc, #32]	; (bb08 <FlexCAN_GetMaxMbNum+0x40>)
    bae6:	9b03      	ldr	r3, [sp, #12]
    bae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baec:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    baee:	9b03      	ldr	r3, [sp, #12]
    baf0:	3301      	adds	r3, #1
    baf2:	9303      	str	r3, [sp, #12]
    baf4:	9b03      	ldr	r3, [sp, #12]
    baf6:	2b02      	cmp	r3, #2
    baf8:	d9ed      	bls.n	bad6 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    bafa:	9b02      	ldr	r3, [sp, #8]
}
    bafc:	4618      	mov	r0, r3
    bafe:	b004      	add	sp, #16
    bb00:	4770      	bx	lr
    bb02:	bf00      	nop
    bb04:	0000fd04 	.word	0x0000fd04
    bb08:	0000fd10 	.word	0x0000fd10

0000bb0c <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    bb0c:	b500      	push	{lr}
    bb0e:	b087      	sub	sp, #28
    bb10:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bb12:	2300      	movs	r3, #0
    bb14:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bb16:	2300      	movs	r3, #0
    bb18:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb1a:	2100      	movs	r1, #0
    bb1c:	4820      	ldr	r0, [pc, #128]	; (bba0 <FlexCAN_EnterFreezeMode+0x94>)
    bb1e:	f7f6 f993 	bl	1e48 <OsIf_MicrosToTicks>
    bb22:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bb24:	2300      	movs	r3, #0
    bb26:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bb28:	f001 fad2 	bl	d0d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    bb2c:	9b01      	ldr	r3, [sp, #4]
    bb2e:	681b      	ldr	r3, [r3, #0]
    bb30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bb34:	9b01      	ldr	r3, [sp, #4]
    bb36:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    bb38:	9b01      	ldr	r3, [sp, #4]
    bb3a:	681b      	ldr	r3, [r3, #0]
    bb3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    bb40:	9b01      	ldr	r3, [sp, #4]
    bb42:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    bb44:	9b01      	ldr	r3, [sp, #4]
    bb46:	681b      	ldr	r3, [r3, #0]
    bb48:	2b00      	cmp	r3, #0
    bb4a:	da05      	bge.n	bb58 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bb4c:	9b01      	ldr	r3, [sp, #4]
    bb4e:	681b      	ldr	r3, [r3, #0]
    bb50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bb54:	9b01      	ldr	r3, [sp, #4]
    bb56:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bb58:	f001 fae6 	bl	d128 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb5c:	2000      	movs	r0, #0
    bb5e:	f7f6 f927 	bl	1db0 <OsIf_GetCounter>
    bb62:	4603      	mov	r3, r0
    bb64:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bb66:	e00f      	b.n	bb88 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb68:	ab02      	add	r3, sp, #8
    bb6a:	2100      	movs	r1, #0
    bb6c:	4618      	mov	r0, r3
    bb6e:	f7f6 f938 	bl	1de2 <OsIf_GetElapsed>
    bb72:	4602      	mov	r2, r0
    bb74:	9b05      	ldr	r3, [sp, #20]
    bb76:	4413      	add	r3, r2
    bb78:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bb7a:	9a05      	ldr	r2, [sp, #20]
    bb7c:	9b03      	ldr	r3, [sp, #12]
    bb7e:	429a      	cmp	r2, r3
    bb80:	d302      	bcc.n	bb88 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    bb82:	2303      	movs	r3, #3
    bb84:	9304      	str	r3, [sp, #16]
            break;
    bb86:	e005      	b.n	bb94 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bb88:	9b01      	ldr	r3, [sp, #4]
    bb8a:	681b      	ldr	r3, [r3, #0]
    bb8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bb90:	2b00      	cmp	r3, #0
    bb92:	d0e9      	beq.n	bb68 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    bb94:	9b04      	ldr	r3, [sp, #16]
}
    bb96:	4618      	mov	r0, r3
    bb98:	b007      	add	sp, #28
    bb9a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb9e:	bf00      	nop
    bba0:	000f4240 	.word	0x000f4240

0000bba4 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    bba4:	b500      	push	{lr}
    bba6:	b087      	sub	sp, #28
    bba8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bbaa:	2300      	movs	r3, #0
    bbac:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bbae:	2300      	movs	r3, #0
    bbb0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bbb2:	2100      	movs	r1, #0
    bbb4:	4818      	ldr	r0, [pc, #96]	; (bc18 <FlexCAN_Enable+0x74>)
    bbb6:	f7f6 f947 	bl	1e48 <OsIf_MicrosToTicks>
    bbba:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    bbbc:	2300      	movs	r3, #0
    bbbe:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bbc0:	f001 fad8 	bl	d174 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bbc4:	9b01      	ldr	r3, [sp, #4]
    bbc6:	681b      	ldr	r3, [r3, #0]
    bbc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bbcc:	9b01      	ldr	r3, [sp, #4]
    bbce:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bbd0:	f001 fafc 	bl	d1cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bbd4:	2000      	movs	r0, #0
    bbd6:	f7f6 f8eb 	bl	1db0 <OsIf_GetCounter>
    bbda:	4603      	mov	r3, r0
    bbdc:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bbde:	e00f      	b.n	bc00 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bbe0:	ab02      	add	r3, sp, #8
    bbe2:	2100      	movs	r1, #0
    bbe4:	4618      	mov	r0, r3
    bbe6:	f7f6 f8fc 	bl	1de2 <OsIf_GetElapsed>
    bbea:	4602      	mov	r2, r0
    bbec:	9b05      	ldr	r3, [sp, #20]
    bbee:	4413      	add	r3, r2
    bbf0:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bbf2:	9a05      	ldr	r2, [sp, #20]
    bbf4:	9b03      	ldr	r3, [sp, #12]
    bbf6:	429a      	cmp	r2, r3
    bbf8:	d302      	bcc.n	bc00 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    bbfa:	2303      	movs	r3, #3
    bbfc:	9304      	str	r3, [sp, #16]
            break;
    bbfe:	e005      	b.n	bc0c <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bc00:	9b01      	ldr	r3, [sp, #4]
    bc02:	681b      	ldr	r3, [r3, #0]
    bc04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d0e9      	beq.n	bbe0 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    bc0c:	9b04      	ldr	r3, [sp, #16]
}
    bc0e:	4618      	mov	r0, r3
    bc10:	b007      	add	sp, #28
    bc12:	f85d fb04 	ldr.w	pc, [sp], #4
    bc16:	bf00      	nop
    bc18:	000f4240 	.word	0x000f4240

0000bc1c <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    bc1c:	b500      	push	{lr}
    bc1e:	b087      	sub	sp, #28
    bc20:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bc22:	2300      	movs	r3, #0
    bc24:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bc26:	2300      	movs	r3, #0
    bc28:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bc2a:	2100      	movs	r1, #0
    bc2c:	481b      	ldr	r0, [pc, #108]	; (bc9c <FlexCAN_ExitFreezeMode+0x80>)
    bc2e:	f7f6 f90b 	bl	1e48 <OsIf_MicrosToTicks>
    bc32:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    bc34:	2300      	movs	r3, #0
    bc36:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    bc38:	f001 faee 	bl	d218 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    bc3c:	9b01      	ldr	r3, [sp, #4]
    bc3e:	681b      	ldr	r3, [r3, #0]
    bc40:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    bc44:	9b01      	ldr	r3, [sp, #4]
    bc46:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    bc48:	9b01      	ldr	r3, [sp, #4]
    bc4a:	681b      	ldr	r3, [r3, #0]
    bc4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    bc50:	9b01      	ldr	r3, [sp, #4]
    bc52:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    bc54:	f001 fb0c 	bl	d270 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bc58:	2000      	movs	r0, #0
    bc5a:	f7f6 f8a9 	bl	1db0 <OsIf_GetCounter>
    bc5e:	4603      	mov	r3, r0
    bc60:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    bc62:	e00f      	b.n	bc84 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bc64:	ab02      	add	r3, sp, #8
    bc66:	2100      	movs	r1, #0
    bc68:	4618      	mov	r0, r3
    bc6a:	f7f6 f8ba 	bl	1de2 <OsIf_GetElapsed>
    bc6e:	4602      	mov	r2, r0
    bc70:	9b05      	ldr	r3, [sp, #20]
    bc72:	4413      	add	r3, r2
    bc74:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bc76:	9a05      	ldr	r2, [sp, #20]
    bc78:	9b03      	ldr	r3, [sp, #12]
    bc7a:	429a      	cmp	r2, r3
    bc7c:	d302      	bcc.n	bc84 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    bc7e:	2303      	movs	r3, #3
    bc80:	9304      	str	r3, [sp, #16]
            break;
    bc82:	e005      	b.n	bc90 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    bc84:	9b01      	ldr	r3, [sp, #4]
    bc86:	681b      	ldr	r3, [r3, #0]
    bc88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	d1e9      	bne.n	bc64 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    bc90:	9b04      	ldr	r3, [sp, #16]
}
    bc92:	4618      	mov	r0, r3
    bc94:	b007      	add	sp, #28
    bc96:	f85d fb04 	ldr.w	pc, [sp], #4
    bc9a:	bf00      	nop
    bc9c:	000f4240 	.word	0x000f4240

0000bca0 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    bca0:	b500      	push	{lr}
    bca2:	b087      	sub	sp, #28
    bca4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bca6:	2300      	movs	r3, #0
    bca8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bcaa:	2300      	movs	r3, #0
    bcac:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bcae:	2100      	movs	r1, #0
    bcb0:	481a      	ldr	r0, [pc, #104]	; (bd1c <FlexCAN_Disable+0x7c>)
    bcb2:	f7f6 f8c9 	bl	1e48 <OsIf_MicrosToTicks>
    bcb6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bcb8:	2300      	movs	r3, #0
    bcba:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    bcbc:	9b01      	ldr	r3, [sp, #4]
    bcbe:	681b      	ldr	r3, [r3, #0]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	db25      	blt.n	bd10 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    bcc4:	f001 fafa 	bl	d2bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    bcc8:	9b01      	ldr	r3, [sp, #4]
    bcca:	681b      	ldr	r3, [r3, #0]
    bccc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    bcd0:	9b01      	ldr	r3, [sp, #4]
    bcd2:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    bcd4:	f001 fb1e 	bl	d314 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bcd8:	2000      	movs	r0, #0
    bcda:	f7f6 f869 	bl	1db0 <OsIf_GetCounter>
    bcde:	4603      	mov	r3, r0
    bce0:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    bce2:	e00f      	b.n	bd04 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bce4:	ab02      	add	r3, sp, #8
    bce6:	2100      	movs	r1, #0
    bce8:	4618      	mov	r0, r3
    bcea:	f7f6 f87a 	bl	1de2 <OsIf_GetElapsed>
    bcee:	4602      	mov	r2, r0
    bcf0:	9b05      	ldr	r3, [sp, #20]
    bcf2:	4413      	add	r3, r2
    bcf4:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    bcf6:	9a05      	ldr	r2, [sp, #20]
    bcf8:	9b03      	ldr	r3, [sp, #12]
    bcfa:	429a      	cmp	r2, r3
    bcfc:	d302      	bcc.n	bd04 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    bcfe:	2303      	movs	r3, #3
    bd00:	9304      	str	r3, [sp, #16]
                break;
    bd02:	e005      	b.n	bd10 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    bd04:	9b01      	ldr	r3, [sp, #4]
    bd06:	681b      	ldr	r3, [r3, #0]
    bd08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	d0e9      	beq.n	bce4 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    bd10:	9b04      	ldr	r3, [sp, #16]
}
    bd12:	4618      	mov	r0, r3
    bd14:	b007      	add	sp, #28
    bd16:	f85d fb04 	ldr.w	pc, [sp], #4
    bd1a:	bf00      	nop
    bd1c:	000f4240 	.word	0x000f4240

0000bd20 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    bd20:	b500      	push	{lr}
    bd22:	b087      	sub	sp, #28
    bd24:	9003      	str	r0, [sp, #12]
    bd26:	9102      	str	r1, [sp, #8]
    bd28:	4613      	mov	r3, r2
    bd2a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    bd2e:	9b02      	ldr	r3, [sp, #8]
    bd30:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    bd32:	f001 fb15 	bl	d360 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    bd36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	d020      	beq.n	bd80 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    bd3e:	9b02      	ldr	r3, [sp, #8]
    bd40:	f244 0201 	movw	r2, #16385	; 0x4001
    bd44:	4293      	cmp	r3, r2
    bd46:	d106      	bne.n	bd56 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    bd48:	9b03      	ldr	r3, [sp, #12]
    bd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bd4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    bd50:	9b03      	ldr	r3, [sp, #12]
    bd52:	635a      	str	r2, [r3, #52]	; 0x34
    bd54:	e03a      	b.n	bdcc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    bd56:	9b02      	ldr	r3, [sp, #8]
    bd58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    bd5c:	d003      	beq.n	bd66 <FlexCAN_SetErrIntCmd+0x46>
    bd5e:	9b02      	ldr	r3, [sp, #8]
    bd60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bd64:	d105      	bne.n	bd72 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    bd66:	9b03      	ldr	r3, [sp, #12]
    bd68:	681b      	ldr	r3, [r3, #0]
    bd6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    bd6e:	9b03      	ldr	r3, [sp, #12]
    bd70:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    bd72:	9b03      	ldr	r3, [sp, #12]
    bd74:	685a      	ldr	r2, [r3, #4]
    bd76:	9b05      	ldr	r3, [sp, #20]
    bd78:	431a      	orrs	r2, r3
    bd7a:	9b03      	ldr	r3, [sp, #12]
    bd7c:	605a      	str	r2, [r3, #4]
    bd7e:	e025      	b.n	bdcc <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    bd80:	9b02      	ldr	r3, [sp, #8]
    bd82:	f244 0201 	movw	r2, #16385	; 0x4001
    bd86:	4293      	cmp	r3, r2
    bd88:	d106      	bne.n	bd98 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    bd8a:	9b03      	ldr	r3, [sp, #12]
    bd8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bd8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bd92:	9b03      	ldr	r3, [sp, #12]
    bd94:	635a      	str	r2, [r3, #52]	; 0x34
    bd96:	e019      	b.n	bdcc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    bd98:	9b03      	ldr	r3, [sp, #12]
    bd9a:	685a      	ldr	r2, [r3, #4]
    bd9c:	9b05      	ldr	r3, [sp, #20]
    bd9e:	43db      	mvns	r3, r3
    bda0:	401a      	ands	r2, r3
    bda2:	9b03      	ldr	r3, [sp, #12]
    bda4:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    bda6:	9b03      	ldr	r3, [sp, #12]
    bda8:	685b      	ldr	r3, [r3, #4]
    bdaa:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    bdac:	9b05      	ldr	r3, [sp, #20]
    bdae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d10a      	bne.n	bdcc <FlexCAN_SetErrIntCmd+0xac>
    bdb6:	9b05      	ldr	r3, [sp, #20]
    bdb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bdbc:	2b00      	cmp	r3, #0
    bdbe:	d105      	bne.n	bdcc <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    bdc0:	9b03      	ldr	r3, [sp, #12]
    bdc2:	681b      	ldr	r3, [r3, #0]
    bdc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    bdc8:	9b03      	ldr	r3, [sp, #12]
    bdca:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    bdcc:	f001 faf4 	bl	d3b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    bdd0:	bf00      	nop
    bdd2:	b007      	add	sp, #28
    bdd4:	f85d fb04 	ldr.w	pc, [sp], #4

0000bdd8 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    bdd8:	b500      	push	{lr}
    bdda:	b087      	sub	sp, #28
    bddc:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bdde:	2300      	movs	r3, #0
    bde0:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bde2:	2300      	movs	r3, #0
    bde4:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bde6:	2100      	movs	r1, #0
    bde8:	4833      	ldr	r0, [pc, #204]	; (beb8 <FlexCAN_Init+0xe0>)
    bdea:	f7f6 f82d 	bl	1e48 <OsIf_MicrosToTicks>
    bdee:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bdf0:	2300      	movs	r3, #0
    bdf2:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    bdf4:	9b01      	ldr	r3, [sp, #4]
    bdf6:	681b      	ldr	r3, [r3, #0]
    bdf8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    bdfc:	9b01      	ldr	r3, [sp, #4]
    bdfe:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    be00:	2000      	movs	r0, #0
    be02:	f7f5 ffd5 	bl	1db0 <OsIf_GetCounter>
    be06:	4603      	mov	r3, r0
    be08:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    be0a:	e00f      	b.n	be2c <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    be0c:	ab02      	add	r3, sp, #8
    be0e:	2100      	movs	r1, #0
    be10:	4618      	mov	r0, r3
    be12:	f7f5 ffe6 	bl	1de2 <OsIf_GetElapsed>
    be16:	4602      	mov	r2, r0
    be18:	9b05      	ldr	r3, [sp, #20]
    be1a:	4413      	add	r3, r2
    be1c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    be1e:	9a05      	ldr	r2, [sp, #20]
    be20:	9b03      	ldr	r3, [sp, #12]
    be22:	429a      	cmp	r2, r3
    be24:	d302      	bcc.n	be2c <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    be26:	2303      	movs	r3, #3
    be28:	9304      	str	r3, [sp, #16]
            break;
    be2a:	e005      	b.n	be38 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    be2c:	9b01      	ldr	r3, [sp, #4]
    be2e:	681b      	ldr	r3, [r3, #0]
    be30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    be34:	2b00      	cmp	r3, #0
    be36:	d1e9      	bne.n	be0c <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    be38:	9b04      	ldr	r3, [sp, #16]
    be3a:	2b00      	cmp	r3, #0
    be3c:	d136      	bne.n	beac <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    be3e:	9b01      	ldr	r3, [sp, #4]
    be40:	681b      	ldr	r3, [r3, #0]
    be42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    be46:	9b01      	ldr	r3, [sp, #4]
    be48:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    be4a:	9801      	ldr	r0, [sp, #4]
    be4c:	f7ff fd40 	bl	b8d0 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    be50:	9b01      	ldr	r3, [sp, #4]
    be52:	f04f 32ff 	mov.w	r2, #4294967295
    be56:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    be58:	9b01      	ldr	r3, [sp, #4]
    be5a:	f04f 32ff 	mov.w	r2, #4294967295
    be5e:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    be60:	9b01      	ldr	r3, [sp, #4]
    be62:	f04f 32ff 	mov.w	r2, #4294967295
    be66:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    be68:	9b01      	ldr	r3, [sp, #4]
    be6a:	2200      	movs	r2, #0
    be6c:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    be6e:	9b01      	ldr	r3, [sp, #4]
    be70:	f04f 32ff 	mov.w	r2, #4294967295
    be74:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    be76:	9b01      	ldr	r3, [sp, #4]
    be78:	4a10      	ldr	r2, [pc, #64]	; (bebc <FlexCAN_Init+0xe4>)
    be7a:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    be7c:	9b01      	ldr	r3, [sp, #4]
    be7e:	2200      	movs	r2, #0
    be80:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    be82:	9b01      	ldr	r3, [sp, #4]
    be84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    be88:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    be8a:	9b01      	ldr	r3, [sp, #4]
    be8c:	2200      	movs	r2, #0
    be8e:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    be90:	9801      	ldr	r0, [sp, #4]
    be92:	f000 f85b 	bl	bf4c <FlexCAN_IsFDAvailable>
    be96:	4603      	mov	r3, r0
    be98:	2b00      	cmp	r3, #0
    be9a:	d007      	beq.n	beac <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    be9c:	9b01      	ldr	r3, [sp, #4]
    be9e:	2200      	movs	r2, #0
    bea0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	4a06      	ldr	r2, [pc, #24]	; (bec0 <FlexCAN_Init+0xe8>)
    bea8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    beac:	9b04      	ldr	r3, [sp, #16]
}
    beae:	4618      	mov	r0, r3
    beb0:	b007      	add	sp, #28
    beb2:	f85d fb04 	ldr.w	pc, [sp], #4
    beb6:	bf00      	nop
    beb8:	000f4240 	.word	0x000f4240
    bebc:	003b0006 	.word	0x003b0006
    bec0:	80004100 	.word	0x80004100

0000bec4 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    bec4:	b500      	push	{lr}
    bec6:	b087      	sub	sp, #28
    bec8:	9001      	str	r0, [sp, #4]
    beca:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    becc:	9801      	ldr	r0, [sp, #4]
    bece:	f7ff fdfb 	bl	bac8 <FlexCAN_GetMaxMbNum>
    bed2:	4603      	mov	r3, r0
    bed4:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    bed8:	2300      	movs	r3, #0
    beda:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    bedc:	9b01      	ldr	r3, [sp, #4]
    bede:	681b      	ldr	r3, [r3, #0]
    bee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bee4:	2b00      	cmp	r3, #0
    bee6:	d001      	beq.n	beec <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    bee8:	2301      	movs	r3, #1
    beea:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    beec:	9b04      	ldr	r3, [sp, #16]
    beee:	2b00      	cmp	r3, #0
    bef0:	d127      	bne.n	bf42 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    bef2:	9b01      	ldr	r3, [sp, #4]
    bef4:	681b      	ldr	r3, [r3, #0]
    bef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    befa:	9b01      	ldr	r3, [sp, #4]
    befc:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    befe:	9b01      	ldr	r3, [sp, #4]
    bf00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bf02:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    bf06:	9b00      	ldr	r3, [sp, #0]
    bf08:	061b      	lsls	r3, r3, #24
    bf0a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    bf0e:	431a      	orrs	r2, r3
    bf10:	9b01      	ldr	r3, [sp, #4]
    bf12:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    bf14:	9b01      	ldr	r3, [sp, #4]
    bf16:	f04f 32ff 	mov.w	r2, #4294967295
    bf1a:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    bf1c:	2300      	movs	r3, #0
    bf1e:	9305      	str	r3, [sp, #20]
    bf20:	e00a      	b.n	bf38 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    bf22:	9b01      	ldr	r3, [sp, #4]
    bf24:	9a05      	ldr	r2, [sp, #20]
    bf26:	f502 7208 	add.w	r2, r2, #544	; 0x220
    bf2a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    bf2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    bf32:	9b05      	ldr	r3, [sp, #20]
    bf34:	3301      	adds	r3, #1
    bf36:	9305      	str	r3, [sp, #20]
    bf38:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    bf3c:	9a05      	ldr	r2, [sp, #20]
    bf3e:	429a      	cmp	r2, r3
    bf40:	d3ef      	bcc.n	bf22 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    bf42:	9b04      	ldr	r3, [sp, #16]
}
    bf44:	4618      	mov	r0, r3
    bf46:	b007      	add	sp, #28
    bf48:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf4c <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    bf4c:	b084      	sub	sp, #16
    bf4e:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    bf50:	2300      	movs	r3, #0
    bf52:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    bf54:	2300      	movs	r3, #0
    bf56:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    bf5a:	2300      	movs	r3, #0
    bf5c:	9303      	str	r3, [sp, #12]
    bf5e:	e00d      	b.n	bf7c <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    bf60:	4a0a      	ldr	r2, [pc, #40]	; (bf8c <FlexCAN_IsFDAvailable+0x40>)
    bf62:	9b03      	ldr	r3, [sp, #12]
    bf64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf68:	9a01      	ldr	r2, [sp, #4]
    bf6a:	429a      	cmp	r2, r3
    bf6c:	d103      	bne.n	bf76 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    bf6e:	2301      	movs	r3, #1
    bf70:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    bf74:	e005      	b.n	bf82 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    bf76:	9b03      	ldr	r3, [sp, #12]
    bf78:	3301      	adds	r3, #1
    bf7a:	9303      	str	r3, [sp, #12]
    bf7c:	9b03      	ldr	r3, [sp, #12]
    bf7e:	2b00      	cmp	r3, #0
    bf80:	d0ee      	beq.n	bf60 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    bf82:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    bf86:	4618      	mov	r0, r3
    bf88:	b004      	add	sp, #16
    bf8a:	4770      	bx	lr
    bf8c:	0000fd1c 	.word	0x0000fd1c

0000bf90 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    bf90:	b500      	push	{lr}
    bf92:	b085      	sub	sp, #20
    bf94:	9001      	str	r0, [sp, #4]
    bf96:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    bf98:	9801      	ldr	r0, [sp, #4]
    bf9a:	f7ff fbd6 	bl	b74a <FlexCAN_IsFDEnabled>
    bf9e:	4603      	mov	r3, r0
    bfa0:	2b00      	cmp	r3, #0
    bfa2:	d011      	beq.n	bfc8 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    bfa4:	9b01      	ldr	r3, [sp, #4]
    bfa6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    bfaa:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    bfac:	9b03      	ldr	r3, [sp, #12]
    bfae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    bfb2:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    bfb4:	9b00      	ldr	r3, [sp, #0]
    bfb6:	681b      	ldr	r3, [r3, #0]
    bfb8:	041b      	lsls	r3, r3, #16
    bfba:	9a03      	ldr	r2, [sp, #12]
    bfbc:	4313      	orrs	r3, r2
    bfbe:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    bfc0:	9b01      	ldr	r3, [sp, #4]
    bfc2:	9a03      	ldr	r2, [sp, #12]
    bfc4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    bfc8:	bf00      	nop
    bfca:	b005      	add	sp, #20
    bfcc:	f85d fb04 	ldr.w	pc, [sp], #4

0000bfd0 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    bfd0:	b500      	push	{lr}
    bfd2:	b085      	sub	sp, #20
    bfd4:	9001      	str	r0, [sp, #4]
    bfd6:	460b      	mov	r3, r1
    bfd8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    bfdc:	2300      	movs	r3, #0
    bfde:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    bfe0:	9801      	ldr	r0, [sp, #4]
    bfe2:	f7ff ffb3 	bl	bf4c <FlexCAN_IsFDAvailable>
    bfe6:	4603      	mov	r3, r0
    bfe8:	2b00      	cmp	r3, #0
    bfea:	d019      	beq.n	c020 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    bfec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bff0:	2b00      	cmp	r3, #0
    bff2:	d10a      	bne.n	c00a <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    bff4:	9b01      	ldr	r3, [sp, #4]
    bff6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    bffa:	0c1b      	lsrs	r3, r3, #16
    bffc:	f003 0303 	and.w	r3, r3, #3
    c000:	2208      	movs	r2, #8
    c002:	fa02 f303 	lsl.w	r3, r2, r3
    c006:	9303      	str	r3, [sp, #12]
    c008:	e00c      	b.n	c024 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    c00a:	9b01      	ldr	r3, [sp, #4]
    c00c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    c010:	0c1b      	lsrs	r3, r3, #16
    c012:	f003 0303 	and.w	r3, r3, #3
    c016:	2208      	movs	r2, #8
    c018:	fa02 f303 	lsl.w	r3, r2, r3
    c01c:	9303      	str	r3, [sp, #12]
    c01e:	e001      	b.n	c024 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    c020:	2308      	movs	r3, #8
    c022:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    c024:	9b03      	ldr	r3, [sp, #12]
    c026:	b2db      	uxtb	r3, r3
}
    c028:	4618      	mov	r0, r3
    c02a:	b005      	add	sp, #20
    c02c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c030 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    c030:	b500      	push	{lr}
    c032:	b087      	sub	sp, #28
    c034:	9001      	str	r0, [sp, #4]
    c036:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    c038:	2308      	movs	r3, #8
    c03a:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    c03e:	f44f 7300 	mov.w	r3, #512	; 0x200
    c042:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    c044:	2308      	movs	r3, #8
    c046:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    c04a:	2300      	movs	r3, #0
    c04c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    c050:	2300      	movs	r3, #0
    c052:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    c056:	2300      	movs	r3, #0
    c058:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c05c:	2300      	movs	r3, #0
    c05e:	f88d 3015 	strb.w	r3, [sp, #21]
    c062:	e024      	b.n	c0ae <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    c064:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c068:	4619      	mov	r1, r3
    c06a:	9801      	ldr	r0, [sp, #4]
    c06c:	f7ff ffb0 	bl	bfd0 <FlexCAN_GetPayloadSize>
    c070:	4603      	mov	r3, r0
    c072:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    c076:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c07a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c07e:	4413      	add	r3, r2
    c080:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    c084:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c088:	9a04      	ldr	r2, [sp, #16]
    c08a:	fbb2 f3f3 	udiv	r3, r2, r3
    c08e:	b2da      	uxtb	r2, r3
    c090:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c094:	4413      	add	r3, r2
    c096:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    c09a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c09e:	9a00      	ldr	r2, [sp, #0]
    c0a0:	429a      	cmp	r2, r3
    c0a2:	d309      	bcc.n	c0b8 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c0a4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c0a8:	3301      	adds	r3, #1
    c0aa:	f88d 3015 	strb.w	r3, [sp, #21]
    c0ae:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d0d6      	beq.n	c064 <FlexCAN_GetMbPayloadSize+0x34>
    c0b6:	e000      	b.n	c0ba <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    c0b8:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    c0ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    c0be:	4618      	mov	r0, r3
    c0c0:	b007      	add	sp, #28
    c0c2:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0c6 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c0c6:	b500      	push	{lr}
    c0c8:	b085      	sub	sp, #20
    c0ca:	9001      	str	r0, [sp, #4]
    c0cc:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c0ce:	9900      	ldr	r1, [sp, #0]
    c0d0:	9801      	ldr	r0, [sp, #4]
    c0d2:	f7ff fc7f 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    c0d6:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    c0d8:	9b03      	ldr	r3, [sp, #12]
    c0da:	681b      	ldr	r3, [r3, #0]
}
    c0dc:	bf00      	nop
    c0de:	b005      	add	sp, #20
    c0e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0e4 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    c0e4:	b500      	push	{lr}
    c0e6:	b087      	sub	sp, #28
    c0e8:	9003      	str	r0, [sp, #12]
    c0ea:	9201      	str	r2, [sp, #4]
    c0ec:	461a      	mov	r2, r3
    c0ee:	460b      	mov	r3, r1
    c0f0:	f88d 300b 	strb.w	r3, [sp, #11]
    c0f4:	4613      	mov	r3, r2
    c0f6:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    c0fa:	2300      	movs	r3, #0
    c0fc:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    c0fe:	9b01      	ldr	r3, [sp, #4]
    c100:	f003 031f 	and.w	r3, r3, #31
    c104:	2201      	movs	r2, #1
    c106:	fa02 f303 	lsl.w	r3, r2, r3
    c10a:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    c10c:	9b01      	ldr	r3, [sp, #4]
    c10e:	2b1f      	cmp	r3, #31
    c110:	d837      	bhi.n	c182 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    c112:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c116:	2b00      	cmp	r3, #0
    c118:	d01b      	beq.n	c152 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c11a:	f001 fcf9 	bl	db10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    c11e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c122:	4a1a      	ldr	r2, [pc, #104]	; (c18c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c124:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c128:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c12c:	9a04      	ldr	r2, [sp, #16]
    c12e:	430a      	orrs	r2, r1
    c130:	4916      	ldr	r1, [pc, #88]	; (c18c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    c136:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c13a:	2b00      	cmp	r3, #0
    c13c:	d006      	beq.n	c14c <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c13e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c142:	4a12      	ldr	r2, [pc, #72]	; (c18c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c144:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c148:	9b03      	ldr	r3, [sp, #12]
    c14a:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c14c:	f001 fd0c 	bl	db68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    c150:	e017      	b.n	c182 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c152:	f001 fcdd 	bl	db10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    c156:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c15a:	4a0c      	ldr	r2, [pc, #48]	; (c18c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c15c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c160:	9b04      	ldr	r3, [sp, #16]
    c162:	43da      	mvns	r2, r3
    c164:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c168:	400a      	ands	r2, r1
    c16a:	4908      	ldr	r1, [pc, #32]	; (c18c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c16c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c170:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c174:	4a05      	ldr	r2, [pc, #20]	; (c18c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c176:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c17a:	9b03      	ldr	r3, [sp, #12]
    c17c:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c17e:	f001 fcf3 	bl	db68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    c182:	9b05      	ldr	r3, [sp, #20]
}
    c184:	4618      	mov	r0, r3
    c186:	b007      	add	sp, #28
    c188:	f85d fb04 	ldr.w	pc, [sp], #4
    c18c:	1fff8fc8 	.word	0x1fff8fc8

0000c190 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    c190:	b500      	push	{lr}
    c192:	b087      	sub	sp, #28
    c194:	9003      	str	r0, [sp, #12]
    c196:	9201      	str	r2, [sp, #4]
    c198:	461a      	mov	r2, r3
    c19a:	460b      	mov	r3, r1
    c19c:	f88d 300b 	strb.w	r3, [sp, #11]
    c1a0:	4613      	mov	r3, r2
    c1a2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    c1a6:	9b01      	ldr	r3, [sp, #4]
    c1a8:	f003 031f 	and.w	r3, r3, #31
    c1ac:	2201      	movs	r2, #1
    c1ae:	fa02 f303 	lsl.w	r3, r2, r3
    c1b2:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    c1b4:	9b01      	ldr	r3, [sp, #4]
    c1b6:	2b1f      	cmp	r3, #31
    c1b8:	d818      	bhi.n	c1ec <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c1ba:	f001 fa6b 	bl	d694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    c1be:	9b03      	ldr	r3, [sp, #12]
    c1c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    c1c2:	9b05      	ldr	r3, [sp, #20]
    c1c4:	43da      	mvns	r2, r3
    c1c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c1ca:	400a      	ands	r2, r1
    c1cc:	4909      	ldr	r1, [pc, #36]	; (c1f4 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c1ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    c1d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d006      	beq.n	c1e8 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c1da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c1de:	4a05      	ldr	r2, [pc, #20]	; (c1f4 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c1e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c1e4:	9b03      	ldr	r3, [sp, #12]
    c1e6:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c1e8:	f001 fa80 	bl	d6ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    c1ec:	bf00      	nop
    c1ee:	b007      	add	sp, #28
    c1f0:	f85d fb04 	ldr.w	pc, [sp], #4
    c1f4:	1fff8fc8 	.word	0x1fff8fc8

0000c1f8 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    c1f8:	b082      	sub	sp, #8
    c1fa:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    c1fc:	9b01      	ldr	r3, [sp, #4]
    c1fe:	2200      	movs	r2, #0
    c200:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c202:	bf00      	nop
    c204:	b002      	add	sp, #8
    c206:	4770      	bx	lr

0000c208 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    c208:	b082      	sub	sp, #8
    c20a:	9001      	str	r0, [sp, #4]
    c20c:	460b      	mov	r3, r1
    c20e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c212:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c216:	4a04      	ldr	r2, [pc, #16]	; (c228 <FlexCAN_EnableInterrupts+0x20>)
    c218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c21c:	9b01      	ldr	r3, [sp, #4]
    c21e:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c220:	bf00      	nop
    c222:	b002      	add	sp, #8
    c224:	4770      	bx	lr
    c226:	bf00      	nop
    c228:	1fff8fc8 	.word	0x1fff8fc8

0000c22c <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    c22c:	b500      	push	{lr}
    c22e:	b087      	sub	sp, #28
    c230:	9003      	str	r0, [sp, #12]
    c232:	9102      	str	r1, [sp, #8]
    c234:	9201      	str	r2, [sp, #4]
    c236:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c238:	9902      	ldr	r1, [sp, #8]
    c23a:	9803      	ldr	r0, [sp, #12]
    c23c:	f7ff fbca 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    c240:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    c242:	9b05      	ldr	r3, [sp, #20]
    c244:	3304      	adds	r3, #4
    c246:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    c248:	9b05      	ldr	r3, [sp, #20]
    c24a:	2200      	movs	r2, #0
    c24c:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    c24e:	9b04      	ldr	r3, [sp, #16]
    c250:	2200      	movs	r2, #0
    c252:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c254:	9b01      	ldr	r3, [sp, #4]
    c256:	685b      	ldr	r3, [r3, #4]
    c258:	2b01      	cmp	r3, #1
    c25a:	d119      	bne.n	c290 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    c25c:	9b05      	ldr	r3, [sp, #20]
    c25e:	681b      	ldr	r3, [r3, #0]
    c260:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    c264:	9b05      	ldr	r3, [sp, #20]
    c266:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    c268:	9b05      	ldr	r3, [sp, #20]
    c26a:	681b      	ldr	r3, [r3, #0]
    c26c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    c270:	9b05      	ldr	r3, [sp, #20]
    c272:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c274:	9b04      	ldr	r3, [sp, #16]
    c276:	681b      	ldr	r3, [r3, #0]
    c278:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c27c:	9b04      	ldr	r3, [sp, #16]
    c27e:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c280:	9b04      	ldr	r3, [sp, #16]
    c282:	681a      	ldr	r2, [r3, #0]
    c284:	9b00      	ldr	r3, [sp, #0]
    c286:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c28a:	431a      	orrs	r2, r3
    c28c:	9b04      	ldr	r3, [sp, #16]
    c28e:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c290:	9b01      	ldr	r3, [sp, #4]
    c292:	685b      	ldr	r3, [r3, #4]
    c294:	2b00      	cmp	r3, #0
    c296:	d116      	bne.n	c2c6 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c298:	9b05      	ldr	r3, [sp, #20]
    c29a:	681b      	ldr	r3, [r3, #0]
    c29c:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    c2a0:	9b05      	ldr	r3, [sp, #20]
    c2a2:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    c2a4:	9b04      	ldr	r3, [sp, #16]
    c2a6:	681b      	ldr	r3, [r3, #0]
    c2a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c2ac:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c2b0:	9a04      	ldr	r2, [sp, #16]
    c2b2:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c2b4:	9b04      	ldr	r3, [sp, #16]
    c2b6:	681a      	ldr	r2, [r3, #0]
    c2b8:	9b00      	ldr	r3, [sp, #0]
    c2ba:	0499      	lsls	r1, r3, #18
    c2bc:	4b0e      	ldr	r3, [pc, #56]	; (c2f8 <FlexCAN_SetRxMsgBuff+0xcc>)
    c2be:	400b      	ands	r3, r1
    c2c0:	431a      	orrs	r2, r3
    c2c2:	9b04      	ldr	r3, [sp, #16]
    c2c4:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    c2c6:	9b01      	ldr	r3, [sp, #4]
    c2c8:	681b      	ldr	r3, [r3, #0]
    c2ca:	2b0f      	cmp	r3, #15
    c2cc:	d00f      	beq.n	c2ee <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c2ce:	9b05      	ldr	r3, [sp, #20]
    c2d0:	681b      	ldr	r3, [r3, #0]
    c2d2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c2d6:	9b05      	ldr	r3, [sp, #20]
    c2d8:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c2da:	9b05      	ldr	r3, [sp, #20]
    c2dc:	681a      	ldr	r2, [r3, #0]
    c2de:	9b01      	ldr	r3, [sp, #4]
    c2e0:	681b      	ldr	r3, [r3, #0]
    c2e2:	061b      	lsls	r3, r3, #24
    c2e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c2e8:	431a      	orrs	r2, r3
    c2ea:	9b05      	ldr	r3, [sp, #20]
    c2ec:	601a      	str	r2, [r3, #0]
    }
}
    c2ee:	bf00      	nop
    c2f0:	b007      	add	sp, #28
    c2f2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2f6:	bf00      	nop
    c2f8:	1ffc0000 	.word	0x1ffc0000

0000c2fc <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c2fc:	b500      	push	{lr}
    c2fe:	b085      	sub	sp, #20
    c300:	9001      	str	r0, [sp, #4]
    c302:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    c304:	2300      	movs	r3, #0
    c306:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c308:	9900      	ldr	r1, [sp, #0]
    c30a:	9801      	ldr	r0, [sp, #4]
    c30c:	f7ff fb62 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    c310:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c312:	9b02      	ldr	r3, [sp, #8]
    c314:	681b      	ldr	r3, [r3, #0]
    c316:	b29b      	uxth	r3, r3
    c318:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    c31a:	9b03      	ldr	r3, [sp, #12]
}
    c31c:	4618      	mov	r0, r3
    c31e:	b005      	add	sp, #20
    c320:	f85d fb04 	ldr.w	pc, [sp], #4

0000c324 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    c324:	b500      	push	{lr}
    c326:	b08d      	sub	sp, #52	; 0x34
    c328:	9003      	str	r0, [sp, #12]
    c32a:	9102      	str	r1, [sp, #8]
    c32c:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c32e:	9902      	ldr	r1, [sp, #8]
    c330:	9803      	ldr	r0, [sp, #12]
    c332:	f7ff fb4f 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    c336:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c33a:	3304      	adds	r3, #4
    c33c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    c33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c340:	3308      	adds	r3, #8
    c342:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c346:	3308      	adds	r3, #8
    c348:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    c34a:	2300      	movs	r3, #0
    c34c:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    c34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c350:	681b      	ldr	r3, [r3, #0]
    c352:	0c1b      	lsrs	r3, r3, #16
    c354:	b2db      	uxtb	r3, r3
    c356:	f003 030f 	and.w	r3, r3, #15
    c35a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    c35e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c362:	4618      	mov	r0, r3
    c364:	f7ff faed 	bl	b942 <FlexCAN_ComputePayloadSize>
    c368:	4603      	mov	r3, r0
    c36a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    c36e:	9b01      	ldr	r3, [sp, #4]
    c370:	3308      	adds	r3, #8
    c372:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    c374:	9902      	ldr	r1, [sp, #8]
    c376:	9803      	ldr	r0, [sp, #12]
    c378:	f7ff fe5a 	bl	c030 <FlexCAN_GetMbPayloadSize>
    c37c:	4603      	mov	r3, r0
    c37e:	461a      	mov	r2, r3
    c380:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c384:	4293      	cmp	r3, r2
    c386:	d906      	bls.n	c396 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    c388:	9902      	ldr	r1, [sp, #8]
    c38a:	9803      	ldr	r0, [sp, #12]
    c38c:	f7ff fe50 	bl	c030 <FlexCAN_GetMbPayloadSize>
    c390:	4603      	mov	r3, r0
    c392:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    c396:	9b01      	ldr	r3, [sp, #4]
    c398:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    c39c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    c3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3a2:	681a      	ldr	r2, [r3, #0]
    c3a4:	9b01      	ldr	r3, [sp, #4]
    c3a6:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    c3a8:	9b01      	ldr	r3, [sp, #4]
    c3aa:	681b      	ldr	r3, [r3, #0]
    c3ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    c3b0:	2b00      	cmp	r3, #0
    c3b2:	d004      	beq.n	c3be <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    c3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3b6:	681a      	ldr	r2, [r3, #0]
    c3b8:	9b01      	ldr	r3, [sp, #4]
    c3ba:	605a      	str	r2, [r3, #4]
    c3bc:	e004      	b.n	c3c8 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    c3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3c0:	681b      	ldr	r3, [r3, #0]
    c3c2:	0c9a      	lsrs	r2, r3, #18
    c3c4:	9b01      	ldr	r3, [sp, #4]
    c3c6:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c3c8:	9b01      	ldr	r3, [sp, #4]
    c3ca:	681b      	ldr	r3, [r3, #0]
    c3cc:	b29a      	uxth	r2, r3
    c3ce:	9b01      	ldr	r3, [sp, #4]
    c3d0:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c3d2:	2300      	movs	r3, #0
    c3d4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c3d8:	e025      	b.n	c426 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    c3da:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c3de:	089b      	lsrs	r3, r3, #2
    c3e0:	b2db      	uxtb	r3, r3
    c3e2:	009b      	lsls	r3, r3, #2
    c3e4:	9a07      	ldr	r2, [sp, #28]
    c3e6:	4413      	add	r3, r2
    c3e8:	681b      	ldr	r3, [r3, #0]
    c3ea:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    c3ec:	9b04      	ldr	r3, [sp, #16]
    c3ee:	0e1a      	lsrs	r2, r3, #24
    c3f0:	9b04      	ldr	r3, [sp, #16]
    c3f2:	0a1b      	lsrs	r3, r3, #8
    c3f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c3f8:	431a      	orrs	r2, r3
    c3fa:	9b04      	ldr	r3, [sp, #16]
    c3fc:	021b      	lsls	r3, r3, #8
    c3fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c402:	ea42 0103 	orr.w	r1, r2, r3
    c406:	9b04      	ldr	r3, [sp, #16]
    c408:	061a      	lsls	r2, r3, #24
    c40a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c40e:	089b      	lsrs	r3, r3, #2
    c410:	b2db      	uxtb	r3, r3
    c412:	009b      	lsls	r3, r3, #2
    c414:	9806      	ldr	r0, [sp, #24]
    c416:	4403      	add	r3, r0
    c418:	430a      	orrs	r2, r1
    c41a:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c41c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c420:	3304      	adds	r3, #4
    c422:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c426:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c42a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c42e:	f023 0303 	bic.w	r3, r3, #3
    c432:	429a      	cmp	r2, r3
    c434:	d3d1      	bcc.n	c3da <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    c436:	e014      	b.n	c462 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    c438:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c43c:	f083 0303 	eor.w	r3, r3, #3
    c440:	b2db      	uxtb	r3, r3
    c442:	461a      	mov	r2, r3
    c444:	9b08      	ldr	r3, [sp, #32]
    c446:	441a      	add	r2, r3
    c448:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c44c:	7812      	ldrb	r2, [r2, #0]
    c44e:	b2d1      	uxtb	r1, r2
    c450:	9a01      	ldr	r2, [sp, #4]
    c452:	4413      	add	r3, r2
    c454:	460a      	mov	r2, r1
    c456:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    c458:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c45c:	3301      	adds	r3, #1
    c45e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c462:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c466:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c46a:	429a      	cmp	r2, r3
    c46c:	d3e4      	bcc.n	c438 <FlexCAN_GetMsgBuff+0x114>
    }
}
    c46e:	bf00      	nop
    c470:	bf00      	nop
    c472:	b00d      	add	sp, #52	; 0x34
    c474:	f85d fb04 	ldr.w	pc, [sp], #4

0000c478 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    c478:	b500      	push	{lr}
    c47a:	b08d      	sub	sp, #52	; 0x34
    c47c:	9003      	str	r0, [sp, #12]
    c47e:	9102      	str	r1, [sp, #8]
    c480:	9201      	str	r2, [sp, #4]
    c482:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    c484:	2300      	movs	r3, #0
    c486:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    c488:	9b03      	ldr	r3, [sp, #12]
    c48a:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c48e:	3304      	adds	r3, #4
    c490:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c492:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c494:	3308      	adds	r3, #8
    c496:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c498:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c49a:	3308      	adds	r3, #8
    c49c:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    c49e:	9b00      	ldr	r3, [sp, #0]
    c4a0:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    c4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c4a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    c4a8:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    c4aa:	9b08      	ldr	r3, [sp, #32]
    c4ac:	2200      	movs	r2, #0
    c4ae:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    c4b0:	9b02      	ldr	r3, [sp, #8]
    c4b2:	689b      	ldr	r3, [r3, #8]
    c4b4:	b2db      	uxtb	r3, r3
    c4b6:	4618      	mov	r0, r3
    c4b8:	f7ff f9f4 	bl	b8a4 <FlexCAN_ComputeDLCValue>
    c4bc:	4603      	mov	r3, r0
    c4be:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    c4c2:	9b00      	ldr	r3, [sp, #0]
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d065      	beq.n	c594 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c4c8:	2300      	movs	r3, #0
    c4ca:	930a      	str	r3, [sp, #40]	; 0x28
    c4cc:	e02c      	b.n	c528 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    c4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4d0:	089b      	lsrs	r3, r3, #2
    c4d2:	009b      	lsls	r3, r3, #2
    c4d4:	9a05      	ldr	r2, [sp, #20]
    c4d6:	4413      	add	r3, r2
    c4d8:	681b      	ldr	r3, [r3, #0]
    c4da:	0e1a      	lsrs	r2, r3, #24
    c4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4de:	089b      	lsrs	r3, r3, #2
    c4e0:	009b      	lsls	r3, r3, #2
    c4e2:	9905      	ldr	r1, [sp, #20]
    c4e4:	440b      	add	r3, r1
    c4e6:	681b      	ldr	r3, [r3, #0]
    c4e8:	0a1b      	lsrs	r3, r3, #8
    c4ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c4ee:	431a      	orrs	r2, r3
    c4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4f2:	089b      	lsrs	r3, r3, #2
    c4f4:	009b      	lsls	r3, r3, #2
    c4f6:	9905      	ldr	r1, [sp, #20]
    c4f8:	440b      	add	r3, r1
    c4fa:	681b      	ldr	r3, [r3, #0]
    c4fc:	021b      	lsls	r3, r3, #8
    c4fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c502:	ea42 0103 	orr.w	r1, r2, r3
    c506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c508:	089b      	lsrs	r3, r3, #2
    c50a:	009b      	lsls	r3, r3, #2
    c50c:	9a05      	ldr	r2, [sp, #20]
    c50e:	4413      	add	r3, r2
    c510:	681b      	ldr	r3, [r3, #0]
    c512:	061a      	lsls	r2, r3, #24
    c514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c516:	089b      	lsrs	r3, r3, #2
    c518:	009b      	lsls	r3, r3, #2
    c51a:	9806      	ldr	r0, [sp, #24]
    c51c:	4403      	add	r3, r0
    c51e:	430a      	orrs	r2, r1
    c520:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c524:	3304      	adds	r3, #4
    c526:	930a      	str	r3, [sp, #40]	; 0x28
    c528:	9b02      	ldr	r3, [sp, #8]
    c52a:	689b      	ldr	r3, [r3, #8]
    c52c:	f023 0303 	bic.w	r3, r3, #3
    c530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c532:	429a      	cmp	r2, r3
    c534:	d3cb      	bcc.n	c4ce <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    c536:	e00c      	b.n	c552 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    c538:	9a00      	ldr	r2, [sp, #0]
    c53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c53c:	441a      	add	r2, r3
    c53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c540:	f083 0303 	eor.w	r3, r3, #3
    c544:	9907      	ldr	r1, [sp, #28]
    c546:	440b      	add	r3, r1
    c548:	7812      	ldrb	r2, [r2, #0]
    c54a:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    c54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c54e:	3301      	adds	r3, #1
    c550:	930a      	str	r3, [sp, #40]	; 0x28
    c552:	9b02      	ldr	r3, [sp, #8]
    c554:	689b      	ldr	r3, [r3, #8]
    c556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c558:	429a      	cmp	r2, r3
    c55a:	d3ed      	bcc.n	c538 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    c55c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c560:	4618      	mov	r0, r3
    c562:	f7ff f9ee 	bl	b942 <FlexCAN_ComputePayloadSize>
    c566:	4603      	mov	r3, r0
    c568:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c56c:	9b02      	ldr	r3, [sp, #8]
    c56e:	689b      	ldr	r3, [r3, #8]
    c570:	930a      	str	r3, [sp, #40]	; 0x28
    c572:	e00a      	b.n	c58a <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    c574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c576:	f083 0303 	eor.w	r3, r3, #3
    c57a:	9a07      	ldr	r2, [sp, #28]
    c57c:	4413      	add	r3, r2
    c57e:	9a02      	ldr	r2, [sp, #8]
    c580:	7b52      	ldrb	r2, [r2, #13]
    c582:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c586:	3301      	adds	r3, #1
    c588:	930a      	str	r3, [sp, #40]	; 0x28
    c58a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c590:	429a      	cmp	r2, r3
    c592:	d3ef      	bcc.n	c574 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c594:	9b02      	ldr	r3, [sp, #8]
    c596:	685b      	ldr	r3, [r3, #4]
    c598:	2b01      	cmp	r3, #1
    c59a:	d111      	bne.n	c5c0 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c59c:	9b08      	ldr	r3, [sp, #32]
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c5a4:	9b08      	ldr	r3, [sp, #32]
    c5a6:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c5a8:	9b08      	ldr	r3, [sp, #32]
    c5aa:	681a      	ldr	r2, [r3, #0]
    c5ac:	9b01      	ldr	r3, [sp, #4]
    c5ae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c5b2:	431a      	orrs	r2, r3
    c5b4:	9b08      	ldr	r3, [sp, #32]
    c5b6:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5ba:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    c5be:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c5c0:	9b02      	ldr	r3, [sp, #8]
    c5c2:	685b      	ldr	r3, [r3, #4]
    c5c4:	2b00      	cmp	r3, #0
    c5c6:	d114      	bne.n	c5f2 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    c5c8:	9b08      	ldr	r3, [sp, #32]
    c5ca:	681b      	ldr	r3, [r3, #0]
    c5cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c5d0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c5d4:	9a08      	ldr	r2, [sp, #32]
    c5d6:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c5d8:	9b08      	ldr	r3, [sp, #32]
    c5da:	681a      	ldr	r2, [r3, #0]
    c5dc:	9b01      	ldr	r3, [sp, #4]
    c5de:	0499      	lsls	r1, r3, #18
    c5e0:	4b2b      	ldr	r3, [pc, #172]	; (c690 <FlexCAN_SetTxMsgBuff+0x218>)
    c5e2:	400b      	ands	r3, r1
    c5e4:	431a      	orrs	r2, r3
    c5e6:	9b08      	ldr	r3, [sp, #32]
    c5e8:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    c5f0:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    c5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    c5f8:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    c5fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c5fe:	041b      	lsls	r3, r3, #16
    c600:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c606:	4313      	orrs	r3, r2
    c608:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    c60a:	9b02      	ldr	r3, [sp, #8]
    c60c:	681b      	ldr	r3, [r3, #0]
    c60e:	2b0f      	cmp	r3, #15
    c610:	d03a      	beq.n	c688 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    c612:	9b02      	ldr	r3, [sp, #8]
    c614:	681b      	ldr	r3, [r3, #0]
    c616:	2b1c      	cmp	r3, #28
    c618:	d104      	bne.n	c624 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c620:	930b      	str	r3, [sp, #44]	; 0x2c
    c622:	e007      	b.n	c634 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    c624:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    c628:	2b00      	cmp	r3, #0
    c62a:	d003      	beq.n	c634 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c62e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c632:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    c634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c636:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c63a:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    c63c:	9b02      	ldr	r3, [sp, #8]
    c63e:	7b1b      	ldrb	r3, [r3, #12]
    c640:	2b00      	cmp	r3, #0
    c642:	d00e      	beq.n	c662 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    c644:	9b02      	ldr	r3, [sp, #8]
    c646:	681b      	ldr	r3, [r3, #0]
    c648:	061b      	lsls	r3, r3, #24
    c64a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    c64e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c650:	4313      	orrs	r3, r2
    c652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c656:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    c658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c65a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    c65e:	930b      	str	r3, [sp, #44]	; 0x2c
    c660:	e007      	b.n	c672 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c662:	9b02      	ldr	r3, [sp, #8]
    c664:	681b      	ldr	r3, [r3, #0]
    c666:	061b      	lsls	r3, r3, #24
    c668:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c66e:	4313      	orrs	r3, r2
    c670:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    c672:	9b02      	ldr	r3, [sp, #8]
    c674:	7b9b      	ldrb	r3, [r3, #14]
    c676:	2b00      	cmp	r3, #0
    c678:	d003      	beq.n	c682 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    c67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c67c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c680:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    c682:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c686:	601a      	str	r2, [r3, #0]
        }
}
    c688:	bf00      	nop
    c68a:	b00d      	add	sp, #52	; 0x34
    c68c:	f85d fb04 	ldr.w	pc, [sp], #4
    c690:	1ffc0000 	.word	0x1ffc0000

0000c694 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    c694:	b500      	push	{lr}
    c696:	b08f      	sub	sp, #60	; 0x3c
    c698:	9001      	str	r0, [sp, #4]
    c69a:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    c69c:	9b01      	ldr	r3, [sp, #4]
    c69e:	3380      	adds	r3, #128	; 0x80
    c6a0:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    c6a2:	2300      	movs	r3, #0
    c6a4:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    c6a6:	2300      	movs	r3, #0
    c6a8:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    c6aa:	2300      	movs	r3, #0
    c6ac:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    c6ae:	2300      	movs	r3, #0
    c6b0:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    c6b2:	2308      	movs	r3, #8
    c6b4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    c6b8:	9b00      	ldr	r3, [sp, #0]
    c6ba:	3b01      	subs	r3, #1
    c6bc:	4619      	mov	r1, r3
    c6be:	9801      	ldr	r0, [sp, #4]
    c6c0:	f7ff fcb6 	bl	c030 <FlexCAN_GetMbPayloadSize>
    c6c4:	4603      	mov	r3, r0
    c6c6:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    c6ca:	2300      	movs	r3, #0
    c6cc:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    c6ce:	2300      	movs	r3, #0
    c6d0:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    c6d2:	2300      	movs	r3, #0
    c6d4:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    c6d6:	9b00      	ldr	r3, [sp, #0]
    c6d8:	3b01      	subs	r3, #1
    c6da:	4619      	mov	r1, r3
    c6dc:	9801      	ldr	r0, [sp, #4]
    c6de:	f7ff f979 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    c6e2:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    c6e4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    c6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6ea:	441a      	add	r2, r3
    c6ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c6f0:	4413      	add	r3, r2
    c6f2:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    c6f4:	9801      	ldr	r0, [sp, #4]
    c6f6:	f7ff f9e7 	bl	bac8 <FlexCAN_GetMaxMbNum>
    c6fa:	4603      	mov	r3, r0
    c6fc:	011b      	lsls	r3, r3, #4
    c6fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c700:	4413      	add	r3, r2
    c702:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    c704:	9a04      	ldr	r2, [sp, #16]
    c706:	9b03      	ldr	r3, [sp, #12]
    c708:	429a      	cmp	r2, r3
    c70a:	d806      	bhi.n	c71a <FlexCAN_SetMaxMsgBuffNum+0x86>
    c70c:	9801      	ldr	r0, [sp, #4]
    c70e:	f7ff f9db 	bl	bac8 <FlexCAN_GetMaxMbNum>
    c712:	4602      	mov	r2, r0
    c714:	9b00      	ldr	r3, [sp, #0]
    c716:	4293      	cmp	r3, r2
    c718:	d901      	bls.n	c71e <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    c71a:	2304      	movs	r3, #4
    c71c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    c71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c720:	2b00      	cmp	r3, #0
    c722:	d142      	bne.n	c7aa <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    c724:	9b01      	ldr	r3, [sp, #4]
    c726:	681b      	ldr	r3, [r3, #0]
    c728:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    c72c:	9b00      	ldr	r3, [sp, #0]
    c72e:	3b01      	subs	r3, #1
    c730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c734:	431a      	orrs	r2, r3
    c736:	9b01      	ldr	r3, [sp, #4]
    c738:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    c73a:	9b01      	ldr	r3, [sp, #4]
    c73c:	681b      	ldr	r3, [r3, #0]
    c73e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    c742:	2b00      	cmp	r3, #0
    c744:	d131      	bne.n	c7aa <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c746:	2300      	movs	r3, #0
    c748:	930d      	str	r3, [sp, #52]	; 0x34
    c74a:	e02a      	b.n	c7a2 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    c74c:	990d      	ldr	r1, [sp, #52]	; 0x34
    c74e:	9801      	ldr	r0, [sp, #4]
    c750:	f7ff f940 	bl	b9d4 <FlexCAN_GetMsgBuffRegion>
    c754:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c756:	9b08      	ldr	r3, [sp, #32]
    c758:	3304      	adds	r3, #4
    c75a:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c75c:	9b08      	ldr	r3, [sp, #32]
    c75e:	3308      	adds	r3, #8
    c760:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    c762:	9b08      	ldr	r3, [sp, #32]
    c764:	2200      	movs	r2, #0
    c766:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    c768:	9b07      	ldr	r3, [sp, #28]
    c76a:	2200      	movs	r2, #0
    c76c:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    c76e:	990d      	ldr	r1, [sp, #52]	; 0x34
    c770:	9801      	ldr	r0, [sp, #4]
    c772:	f7ff fc5d 	bl	c030 <FlexCAN_GetMbPayloadSize>
    c776:	4603      	mov	r3, r0
    c778:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c77c:	2300      	movs	r3, #0
    c77e:	930c      	str	r3, [sp, #48]	; 0x30
    c780:	e007      	b.n	c792 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    c782:	9a06      	ldr	r2, [sp, #24]
    c784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c786:	4413      	add	r3, r2
    c788:	2200      	movs	r2, #0
    c78a:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c78c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c78e:	3301      	adds	r3, #1
    c790:	930c      	str	r3, [sp, #48]	; 0x30
    c792:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c798:	429a      	cmp	r2, r3
    c79a:	d3f2      	bcc.n	c782 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c79e:	3301      	adds	r3, #1
    c7a0:	930d      	str	r3, [sp, #52]	; 0x34
    c7a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c7a4:	9b00      	ldr	r3, [sp, #0]
    c7a6:	429a      	cmp	r2, r3
    c7a8:	d3d0      	bcc.n	c74c <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    c7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c7ac:	4618      	mov	r0, r3
    c7ae:	b00f      	add	sp, #60	; 0x3c
    c7b0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7b4 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    c7b4:	b500      	push	{lr}
    c7b6:	b083      	sub	sp, #12
    c7b8:	9001      	str	r0, [sp, #4]
    c7ba:	9100      	str	r1, [sp, #0]
    switch (mode)
    c7bc:	9b00      	ldr	r3, [sp, #0]
    c7be:	2b02      	cmp	r3, #2
    c7c0:	d01d      	beq.n	c7fe <FlexCAN_SetOperationMode+0x4a>
    c7c2:	9b00      	ldr	r3, [sp, #0]
    c7c4:	2b02      	cmp	r3, #2
    c7c6:	d82b      	bhi.n	c820 <FlexCAN_SetOperationMode+0x6c>
    c7c8:	9b00      	ldr	r3, [sp, #0]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d003      	beq.n	c7d6 <FlexCAN_SetOperationMode+0x22>
    c7ce:	9b00      	ldr	r3, [sp, #0]
    c7d0:	2b01      	cmp	r3, #1
    c7d2:	d00d      	beq.n	c7f0 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    c7d4:	e024      	b.n	c820 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c7d6:	9b01      	ldr	r3, [sp, #4]
    c7d8:	685b      	ldr	r3, [r3, #4]
    c7da:	f023 0208 	bic.w	r2, r3, #8
    c7de:	9b01      	ldr	r3, [sp, #4]
    c7e0:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    c7e2:	9b01      	ldr	r3, [sp, #4]
    c7e4:	685b      	ldr	r3, [r3, #4]
    c7e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    c7ea:	9b01      	ldr	r3, [sp, #4]
    c7ec:	605a      	str	r2, [r3, #4]
            break;
    c7ee:	e018      	b.n	c822 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    c7f0:	9b01      	ldr	r3, [sp, #4]
    c7f2:	685b      	ldr	r3, [r3, #4]
    c7f4:	f043 0208 	orr.w	r2, r3, #8
    c7f8:	9b01      	ldr	r3, [sp, #4]
    c7fa:	605a      	str	r2, [r3, #4]
            break;
    c7fc:	e011      	b.n	c822 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    c7fe:	9b01      	ldr	r3, [sp, #4]
    c800:	685b      	ldr	r3, [r3, #4]
    c802:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    c806:	9b01      	ldr	r3, [sp, #4]
    c808:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c80a:	9b01      	ldr	r3, [sp, #4]
    c80c:	685b      	ldr	r3, [r3, #4]
    c80e:	f023 0208 	bic.w	r2, r3, #8
    c812:	9b01      	ldr	r3, [sp, #4]
    c814:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    c816:	2101      	movs	r1, #1
    c818:	9801      	ldr	r0, [sp, #4]
    c81a:	f7fe ff7f 	bl	b71c <FlexCAN_SetSelfReception>
            break;
    c81e:	e000      	b.n	c822 <FlexCAN_SetOperationMode+0x6e>
            break;
    c820:	bf00      	nop
    }
}
    c822:	bf00      	nop
    c824:	b003      	add	sp, #12
    c826:	f85d fb04 	ldr.w	pc, [sp], #4

0000c82a <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    c82a:	b500      	push	{lr}
    c82c:	b08d      	sub	sp, #52	; 0x34
    c82e:	9003      	str	r0, [sp, #12]
    c830:	9102      	str	r1, [sp, #8]
    c832:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    c834:	2300      	movs	r3, #0
    c836:	9309      	str	r3, [sp, #36]	; 0x24
    c838:	2300      	movs	r3, #0
    c83a:	9308      	str	r3, [sp, #32]
    c83c:	2300      	movs	r3, #0
    c83e:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    c840:	9b03      	ldr	r3, [sp, #12]
    c842:	33e0      	adds	r3, #224	; 0xe0
    c844:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c846:	9b03      	ldr	r3, [sp, #12]
    c848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c84a:	0e1b      	lsrs	r3, r3, #24
    c84c:	f003 030f 	and.w	r3, r3, #15
    c850:	9305      	str	r3, [sp, #20]
    c852:	9b02      	ldr	r3, [sp, #8]
    c854:	2b03      	cmp	r3, #3
    c856:	f200 81e7 	bhi.w	cc28 <FlexCAN_SetRxFifoFilter+0x3fe>
    c85a:	a201      	add	r2, pc, #4	; (adr r2, c860 <FlexCAN_SetRxFifoFilter+0x36>)
    c85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c860:	0000c871 	.word	0x0000c871
    c864:	0000c90b 	.word	0x0000c90b
    c868:	0000ca45 	.word	0x0000ca45
    c86c:	0000cc13 	.word	0x0000cc13
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c870:	f000 ffb4 	bl	d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c874:	9b03      	ldr	r3, [sp, #12]
    c876:	681b      	ldr	r3, [r3, #0]
    c878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    c87c:	9b03      	ldr	r3, [sp, #12]
    c87e:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c880:	f000 ffd8 	bl	d834 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c884:	2300      	movs	r3, #0
    c886:	930b      	str	r3, [sp, #44]	; 0x2c
    c888:	e038      	b.n	c8fc <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    c88a:	2300      	movs	r3, #0
    c88c:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    c88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c890:	00db      	lsls	r3, r3, #3
    c892:	9a01      	ldr	r2, [sp, #4]
    c894:	4413      	add	r3, r2
    c896:	781b      	ldrb	r3, [r3, #0]
    c898:	2b00      	cmp	r3, #0
    c89a:	d002      	beq.n	c8a2 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c89c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c8a0:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    c8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8a4:	00db      	lsls	r3, r3, #3
    c8a6:	9a01      	ldr	r2, [sp, #4]
    c8a8:	4413      	add	r3, r2
    c8aa:	785b      	ldrb	r3, [r3, #1]
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d013      	beq.n	c8d8 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c8b0:	9b07      	ldr	r3, [sp, #28]
    c8b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c8b6:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    c8b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8ba:	00db      	lsls	r3, r3, #3
    c8bc:	9a01      	ldr	r2, [sp, #4]
    c8be:	4413      	add	r3, r2
    c8c0:	685b      	ldr	r3, [r3, #4]
    c8c2:	005b      	lsls	r3, r3, #1
    c8c4:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    c8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8ca:	009b      	lsls	r3, r3, #2
    c8cc:	9a06      	ldr	r2, [sp, #24]
    c8ce:	4413      	add	r3, r2
    c8d0:	9a07      	ldr	r2, [sp, #28]
    c8d2:	440a      	add	r2, r1
    c8d4:	601a      	str	r2, [r3, #0]
    c8d6:	e00e      	b.n	c8f6 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    c8d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8da:	00db      	lsls	r3, r3, #3
    c8dc:	9a01      	ldr	r2, [sp, #4]
    c8de:	4413      	add	r3, r2
    c8e0:	685b      	ldr	r3, [r3, #4]
    c8e2:	04da      	lsls	r2, r3, #19
    c8e4:	4b9d      	ldr	r3, [pc, #628]	; (cb5c <FlexCAN_SetRxFifoFilter+0x332>)
    c8e6:	4013      	ands	r3, r2
    c8e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c8ea:	0092      	lsls	r2, r2, #2
    c8ec:	9906      	ldr	r1, [sp, #24]
    c8ee:	440a      	add	r2, r1
    c8f0:	9907      	ldr	r1, [sp, #28]
    c8f2:	440b      	add	r3, r1
    c8f4:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8f8:	3301      	adds	r3, #1
    c8fa:	930b      	str	r3, [sp, #44]	; 0x2c
    c8fc:	9b05      	ldr	r3, [sp, #20]
    c8fe:	3301      	adds	r3, #1
    c900:	00db      	lsls	r3, r3, #3
    c902:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c904:	429a      	cmp	r2, r3
    c906:	d3c0      	bcc.n	c88a <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    c908:	e18f      	b.n	cc2a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c90a:	f000 ff67 	bl	d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    c90e:	9b03      	ldr	r3, [sp, #12]
    c910:	681b      	ldr	r3, [r3, #0]
    c912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    c916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    c91a:	9b03      	ldr	r3, [sp, #12]
    c91c:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c91e:	f000 ff89 	bl	d834 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    c922:	2300      	movs	r3, #0
    c924:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c926:	2300      	movs	r3, #0
    c928:	930b      	str	r3, [sp, #44]	; 0x2c
    c92a:	e083      	b.n	ca34 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    c92c:	2300      	movs	r3, #0
    c92e:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    c930:	2300      	movs	r3, #0
    c932:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c936:	00db      	lsls	r3, r3, #3
    c938:	9a01      	ldr	r2, [sp, #4]
    c93a:	4413      	add	r3, r2
    c93c:	781b      	ldrb	r3, [r3, #0]
    c93e:	2b00      	cmp	r3, #0
    c940:	d002      	beq.n	c948 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c942:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c946:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    c948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c94a:	3301      	adds	r3, #1
    c94c:	00db      	lsls	r3, r3, #3
    c94e:	9a01      	ldr	r2, [sp, #4]
    c950:	4413      	add	r3, r2
    c952:	781b      	ldrb	r3, [r3, #0]
    c954:	2b00      	cmp	r3, #0
    c956:	d002      	beq.n	c95e <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    c958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c95c:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    c95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c960:	00db      	lsls	r3, r3, #3
    c962:	9a01      	ldr	r2, [sp, #4]
    c964:	4413      	add	r3, r2
    c966:	785b      	ldrb	r3, [r3, #1]
    c968:	2b00      	cmp	r3, #0
    c96a:	d014      	beq.n	c996 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c96e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c972:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c976:	00db      	lsls	r3, r3, #3
    c978:	9a01      	ldr	r2, [sp, #4]
    c97a:	4413      	add	r3, r2
    c97c:	685b      	ldr	r3, [r3, #4]
    c97e:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    c980:	041a      	lsls	r2, r3, #16
    c982:	4b77      	ldr	r3, [pc, #476]	; (cb60 <FlexCAN_SetRxFifoFilter+0x336>)
    c984:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c988:	0092      	lsls	r2, r2, #2
    c98a:	9906      	ldr	r1, [sp, #24]
    c98c:	440a      	add	r2, r1
    c98e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c990:	440b      	add	r3, r1
    c992:	6013      	str	r3, [r2, #0]
    c994:	e00e      	b.n	c9b4 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c998:	00db      	lsls	r3, r3, #3
    c99a:	9a01      	ldr	r2, [sp, #4]
    c99c:	4413      	add	r3, r2
    c99e:	685b      	ldr	r3, [r3, #4]
    c9a0:	04da      	lsls	r2, r3, #19
    c9a2:	4b6e      	ldr	r3, [pc, #440]	; (cb5c <FlexCAN_SetRxFifoFilter+0x332>)
    c9a4:	4013      	ands	r3, r2
    c9a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c9a8:	0092      	lsls	r2, r2, #2
    c9aa:	9906      	ldr	r1, [sp, #24]
    c9ac:	440a      	add	r2, r1
    c9ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    c9b0:	440b      	add	r3, r1
    c9b2:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    c9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9b6:	3301      	adds	r3, #1
    c9b8:	00db      	lsls	r3, r3, #3
    c9ba:	9a01      	ldr	r2, [sp, #4]
    c9bc:	4413      	add	r3, r2
    c9be:	785b      	ldrb	r3, [r3, #1]
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d01a      	beq.n	c9fa <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    c9c4:	9b08      	ldr	r3, [sp, #32]
    c9c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    c9ca:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9ce:	009b      	lsls	r3, r3, #2
    c9d0:	9a06      	ldr	r2, [sp, #24]
    c9d2:	4413      	add	r3, r2
    c9d4:	6819      	ldr	r1, [r3, #0]
    c9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9d8:	3301      	adds	r3, #1
    c9da:	00db      	lsls	r3, r3, #3
    c9dc:	9a01      	ldr	r2, [sp, #4]
    c9de:	4413      	add	r3, r2
    c9e0:	685b      	ldr	r3, [r3, #4]
    c9e2:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    c9e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c9e8:	9b08      	ldr	r3, [sp, #32]
    c9ea:	441a      	add	r2, r3
    c9ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9ee:	009b      	lsls	r3, r3, #2
    c9f0:	9806      	ldr	r0, [sp, #24]
    c9f2:	4403      	add	r3, r0
    c9f4:	430a      	orrs	r2, r1
    c9f6:	601a      	str	r2, [r3, #0]
    c9f8:	e016      	b.n	ca28 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9fc:	009b      	lsls	r3, r3, #2
    c9fe:	9a06      	ldr	r2, [sp, #24]
    ca00:	4413      	add	r3, r2
    ca02:	6819      	ldr	r1, [r3, #0]
    ca04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca06:	3301      	adds	r3, #1
    ca08:	00db      	lsls	r3, r3, #3
    ca0a:	9a01      	ldr	r2, [sp, #4]
    ca0c:	4413      	add	r3, r2
    ca0e:	685b      	ldr	r3, [r3, #4]
    ca10:	00da      	lsls	r2, r3, #3
    ca12:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    ca16:	4013      	ands	r3, r2
    ca18:	9a08      	ldr	r2, [sp, #32]
    ca1a:	441a      	add	r2, r3
    ca1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca1e:	009b      	lsls	r3, r3, #2
    ca20:	9806      	ldr	r0, [sp, #24]
    ca22:	4403      	add	r3, r0
    ca24:	430a      	orrs	r2, r1
    ca26:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    ca28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca2a:	3302      	adds	r3, #2
    ca2c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ca2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca30:	3301      	adds	r3, #1
    ca32:	930b      	str	r3, [sp, #44]	; 0x2c
    ca34:	9b05      	ldr	r3, [sp, #20]
    ca36:	3301      	adds	r3, #1
    ca38:	00db      	lsls	r3, r3, #3
    ca3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca3c:	429a      	cmp	r2, r3
    ca3e:	f4ff af75 	bcc.w	c92c <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    ca42:	e0f2      	b.n	cc2a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ca44:	f000 feca 	bl	d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    ca48:	9b03      	ldr	r3, [sp, #12]
    ca4a:	681b      	ldr	r3, [r3, #0]
    ca4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ca50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    ca54:	9b03      	ldr	r3, [sp, #12]
    ca56:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ca58:	f000 feec 	bl	d834 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    ca5c:	2300      	movs	r3, #0
    ca5e:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ca60:	2300      	movs	r3, #0
    ca62:	930b      	str	r3, [sp, #44]	; 0x2c
    ca64:	e0cd      	b.n	cc02 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    ca66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca68:	00db      	lsls	r3, r3, #3
    ca6a:	9a01      	ldr	r2, [sp, #4]
    ca6c:	4413      	add	r3, r2
    ca6e:	785b      	ldrb	r3, [r3, #1]
    ca70:	2b00      	cmp	r3, #0
    ca72:	d00e      	beq.n	ca92 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ca74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca76:	00db      	lsls	r3, r3, #3
    ca78:	9a01      	ldr	r2, [sp, #4]
    ca7a:	4413      	add	r3, r2
    ca7c:	685b      	ldr	r3, [r3, #4]
    ca7e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ca80:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ca82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca84:	009b      	lsls	r3, r3, #2
    ca86:	9a06      	ldr	r2, [sp, #24]
    ca88:	4413      	add	r3, r2
    ca8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca8c:	440a      	add	r2, r1
    ca8e:	601a      	str	r2, [r3, #0]
    ca90:	e00d      	b.n	caae <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ca92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca94:	00db      	lsls	r3, r3, #3
    ca96:	9a01      	ldr	r2, [sp, #4]
    ca98:	4413      	add	r3, r2
    ca9a:	685b      	ldr	r3, [r3, #4]
    ca9c:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ca9e:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    caa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caa2:	009b      	lsls	r3, r3, #2
    caa4:	9a06      	ldr	r2, [sp, #24]
    caa6:	4413      	add	r3, r2
    caa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    caaa:	440a      	add	r2, r1
    caac:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    caae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cab0:	3301      	adds	r3, #1
    cab2:	00db      	lsls	r3, r3, #3
    cab4:	9a01      	ldr	r2, [sp, #4]
    cab6:	4413      	add	r3, r2
    cab8:	785b      	ldrb	r3, [r3, #1]
    caba:	2b00      	cmp	r3, #0
    cabc:	d017      	beq.n	caee <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cabe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cac0:	009b      	lsls	r3, r3, #2
    cac2:	9a06      	ldr	r2, [sp, #24]
    cac4:	4413      	add	r3, r2
    cac6:	6819      	ldr	r1, [r3, #0]
    cac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    caca:	3301      	adds	r3, #1
    cacc:	00db      	lsls	r3, r3, #3
    cace:	9a01      	ldr	r2, [sp, #4]
    cad0:	4413      	add	r3, r2
    cad2:	685b      	ldr	r3, [r3, #4]
    cad4:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    cad6:	041b      	lsls	r3, r3, #16
    cad8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cade:	441a      	add	r2, r3
    cae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cae2:	009b      	lsls	r3, r3, #2
    cae4:	9806      	ldr	r0, [sp, #24]
    cae6:	4403      	add	r3, r0
    cae8:	430a      	orrs	r2, r1
    caea:	601a      	str	r2, [r3, #0]
    caec:	e016      	b.n	cb1c <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    caee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caf0:	009b      	lsls	r3, r3, #2
    caf2:	9a06      	ldr	r2, [sp, #24]
    caf4:	4413      	add	r3, r2
    caf6:	6819      	ldr	r1, [r3, #0]
    caf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cafa:	3301      	adds	r3, #1
    cafc:	00db      	lsls	r3, r3, #3
    cafe:	9a01      	ldr	r2, [sp, #4]
    cb00:	4413      	add	r3, r2
    cb02:	685b      	ldr	r3, [r3, #4]
    cb04:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    cb06:	041b      	lsls	r3, r3, #16
    cb08:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb0e:	441a      	add	r2, r3
    cb10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb12:	009b      	lsls	r3, r3, #2
    cb14:	9806      	ldr	r0, [sp, #24]
    cb16:	4403      	add	r3, r0
    cb18:	430a      	orrs	r2, r1
    cb1a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    cb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb1e:	3302      	adds	r3, #2
    cb20:	00db      	lsls	r3, r3, #3
    cb22:	9a01      	ldr	r2, [sp, #4]
    cb24:	4413      	add	r3, r2
    cb26:	785b      	ldrb	r3, [r3, #1]
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d01b      	beq.n	cb64 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cb2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb2e:	009b      	lsls	r3, r3, #2
    cb30:	9a06      	ldr	r2, [sp, #24]
    cb32:	4413      	add	r3, r2
    cb34:	6819      	ldr	r1, [r3, #0]
    cb36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb38:	3302      	adds	r3, #2
    cb3a:	00db      	lsls	r3, r3, #3
    cb3c:	9a01      	ldr	r2, [sp, #4]
    cb3e:	4413      	add	r3, r2
    cb40:	685b      	ldr	r3, [r3, #4]
    cb42:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cb44:	021b      	lsls	r3, r3, #8
    cb46:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb4a:	441a      	add	r2, r3
    cb4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb4e:	009b      	lsls	r3, r3, #2
    cb50:	9806      	ldr	r0, [sp, #24]
    cb52:	4403      	add	r3, r0
    cb54:	430a      	orrs	r2, r1
    cb56:	601a      	str	r2, [r3, #0]
    cb58:	e01a      	b.n	cb90 <FlexCAN_SetRxFifoFilter+0x366>
    cb5a:	bf00      	nop
    cb5c:	3ff80000 	.word	0x3ff80000
    cb60:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cb64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb66:	009b      	lsls	r3, r3, #2
    cb68:	9a06      	ldr	r2, [sp, #24]
    cb6a:	4413      	add	r3, r2
    cb6c:	6819      	ldr	r1, [r3, #0]
    cb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb70:	3302      	adds	r3, #2
    cb72:	00db      	lsls	r3, r3, #3
    cb74:	9a01      	ldr	r2, [sp, #4]
    cb76:	4413      	add	r3, r2
    cb78:	685b      	ldr	r3, [r3, #4]
    cb7a:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cb7c:	021b      	lsls	r3, r3, #8
    cb7e:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb82:	441a      	add	r2, r3
    cb84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb86:	009b      	lsls	r3, r3, #2
    cb88:	9806      	ldr	r0, [sp, #24]
    cb8a:	4403      	add	r3, r0
    cb8c:	430a      	orrs	r2, r1
    cb8e:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    cb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb92:	3303      	adds	r3, #3
    cb94:	00db      	lsls	r3, r3, #3
    cb96:	9a01      	ldr	r2, [sp, #4]
    cb98:	4413      	add	r3, r2
    cb9a:	785b      	ldrb	r3, [r3, #1]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d015      	beq.n	cbcc <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cba2:	009b      	lsls	r3, r3, #2
    cba4:	9a06      	ldr	r2, [sp, #24]
    cba6:	4413      	add	r3, r2
    cba8:	6819      	ldr	r1, [r3, #0]
    cbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbac:	3303      	adds	r3, #3
    cbae:	00db      	lsls	r3, r3, #3
    cbb0:	9a01      	ldr	r2, [sp, #4]
    cbb2:	4413      	add	r3, r2
    cbb4:	685b      	ldr	r3, [r3, #4]
    cbb6:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    cbb8:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbbc:	441a      	add	r2, r3
    cbbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbc0:	009b      	lsls	r3, r3, #2
    cbc2:	9806      	ldr	r0, [sp, #24]
    cbc4:	4403      	add	r3, r0
    cbc6:	430a      	orrs	r2, r1
    cbc8:	601a      	str	r2, [r3, #0]
    cbca:	e014      	b.n	cbf6 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    cbcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbce:	009b      	lsls	r3, r3, #2
    cbd0:	9a06      	ldr	r2, [sp, #24]
    cbd2:	4413      	add	r3, r2
    cbd4:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbd8:	3303      	adds	r3, #3
    cbda:	00db      	lsls	r3, r3, #3
    cbdc:	9a01      	ldr	r2, [sp, #4]
    cbde:	4413      	add	r3, r2
    cbe0:	685b      	ldr	r3, [r3, #4]
    cbe2:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    cbe4:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    cbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbe8:	441a      	add	r2, r3
    cbea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbec:	009b      	lsls	r3, r3, #2
    cbee:	9806      	ldr	r0, [sp, #24]
    cbf0:	4403      	add	r3, r0
    cbf2:	430a      	orrs	r2, r1
    cbf4:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    cbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbf8:	3304      	adds	r3, #4
    cbfa:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    cbfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbfe:	3301      	adds	r3, #1
    cc00:	930b      	str	r3, [sp, #44]	; 0x2c
    cc02:	9b05      	ldr	r3, [sp, #20]
    cc04:	3301      	adds	r3, #1
    cc06:	00db      	lsls	r3, r3, #3
    cc08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc0a:	429a      	cmp	r2, r3
    cc0c:	f4ff af2b 	bcc.w	ca66 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    cc10:	e00b      	b.n	cc2a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cc12:	f000 fde3 	bl	d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    cc16:	9b03      	ldr	r3, [sp, #12]
    cc18:	681b      	ldr	r3, [r3, #0]
    cc1a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    cc1e:	9b03      	ldr	r3, [sp, #12]
    cc20:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cc22:	f000 fe07 	bl	d834 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    cc26:	e000      	b.n	cc2a <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    cc28:	bf00      	nop
    }
}
    cc2a:	bf00      	nop
    cc2c:	b00d      	add	sp, #52	; 0x34
    cc2e:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc32 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    cc32:	b500      	push	{lr}
    cc34:	b08b      	sub	sp, #44	; 0x2c
    cc36:	9001      	str	r0, [sp, #4]
    cc38:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    cc3a:	9b01      	ldr	r3, [sp, #4]
    cc3c:	3380      	adds	r3, #128	; 0x80
    cc3e:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    cc40:	9b07      	ldr	r3, [sp, #28]
    cc42:	3304      	adds	r3, #4
    cc44:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    cc46:	9b07      	ldr	r3, [sp, #28]
    cc48:	3308      	adds	r3, #8
    cc4a:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    cc4c:	2300      	movs	r3, #0
    cc4e:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    cc50:	9b07      	ldr	r3, [sp, #28]
    cc52:	681b      	ldr	r3, [r3, #0]
    cc54:	0c1b      	lsrs	r3, r3, #16
    cc56:	b2db      	uxtb	r3, r3
    cc58:	f003 030f 	and.w	r3, r3, #15
    cc5c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    cc60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc64:	4618      	mov	r0, r3
    cc66:	f7fe fe6c 	bl	b942 <FlexCAN_ComputePayloadSize>
    cc6a:	4603      	mov	r3, r0
    cc6c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    cc70:	9b00      	ldr	r3, [sp, #0]
    cc72:	3308      	adds	r3, #8
    cc74:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    cc76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    cc7a:	2b08      	cmp	r3, #8
    cc7c:	d902      	bls.n	cc84 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    cc7e:	2308      	movs	r3, #8
    cc80:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    cc84:	9b00      	ldr	r3, [sp, #0]
    cc86:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cc8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    cc8e:	9b07      	ldr	r3, [sp, #28]
    cc90:	681a      	ldr	r2, [r3, #0]
    cc92:	9b00      	ldr	r3, [sp, #0]
    cc94:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    cc96:	9b00      	ldr	r3, [sp, #0]
    cc98:	681b      	ldr	r3, [r3, #0]
    cc9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d004      	beq.n	ccac <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    cca2:	9b06      	ldr	r3, [sp, #24]
    cca4:	681a      	ldr	r2, [r3, #0]
    cca6:	9b00      	ldr	r3, [sp, #0]
    cca8:	605a      	str	r2, [r3, #4]
    ccaa:	e004      	b.n	ccb6 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    ccac:	9b06      	ldr	r3, [sp, #24]
    ccae:	681b      	ldr	r3, [r3, #0]
    ccb0:	0c9a      	lsrs	r2, r3, #18
    ccb2:	9b00      	ldr	r3, [sp, #0]
    ccb4:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    ccb6:	9b01      	ldr	r3, [sp, #4]
    ccb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ccba:	b2da      	uxtb	r2, r3
    ccbc:	9b00      	ldr	r3, [sp, #0]
    ccbe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    ccc2:	9b00      	ldr	r3, [sp, #0]
    ccc4:	681b      	ldr	r3, [r3, #0]
    ccc6:	b29a      	uxth	r2, r3
    ccc8:	9b00      	ldr	r3, [sp, #0]
    ccca:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    cccc:	2300      	movs	r3, #0
    ccce:	9309      	str	r3, [sp, #36]	; 0x24
    ccd0:	e01f      	b.n	cd12 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    ccd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccd4:	089b      	lsrs	r3, r3, #2
    ccd6:	009b      	lsls	r3, r3, #2
    ccd8:	9a05      	ldr	r2, [sp, #20]
    ccda:	4413      	add	r3, r2
    ccdc:	681b      	ldr	r3, [r3, #0]
    ccde:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    cce0:	9b02      	ldr	r3, [sp, #8]
    cce2:	0e1a      	lsrs	r2, r3, #24
    cce4:	9b02      	ldr	r3, [sp, #8]
    cce6:	0a1b      	lsrs	r3, r3, #8
    cce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    ccec:	431a      	orrs	r2, r3
    ccee:	9b02      	ldr	r3, [sp, #8]
    ccf0:	021b      	lsls	r3, r3, #8
    ccf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ccf6:	ea42 0103 	orr.w	r1, r2, r3
    ccfa:	9b02      	ldr	r3, [sp, #8]
    ccfc:	061a      	lsls	r2, r3, #24
    ccfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd00:	089b      	lsrs	r3, r3, #2
    cd02:	009b      	lsls	r3, r3, #2
    cd04:	9804      	ldr	r0, [sp, #16]
    cd06:	4403      	add	r3, r0
    cd08:	430a      	orrs	r2, r1
    cd0a:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    cd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd0e:	3304      	adds	r3, #4
    cd10:	9309      	str	r3, [sp, #36]	; 0x24
    cd12:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    cd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cd18:	429a      	cmp	r2, r3
    cd1a:	d3da      	bcc.n	ccd2 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    cd1c:	bf00      	nop
    cd1e:	bf00      	nop
    cd20:	b00b      	add	sp, #44	; 0x2c
    cd22:	f85d fb04 	ldr.w	pc, [sp], #4

0000cd26 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    cd26:	b088      	sub	sp, #32
    cd28:	9003      	str	r0, [sp, #12]
    cd2a:	9301      	str	r3, [sp, #4]
    cd2c:	460b      	mov	r3, r1
    cd2e:	f88d 300b 	strb.w	r3, [sp, #11]
    cd32:	4613      	mov	r3, r2
    cd34:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    cd38:	2300      	movs	r3, #0
    cd3a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    cd3e:	2300      	movs	r3, #0
    cd40:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    cd42:	2300      	movs	r3, #0
    cd44:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    cd46:	9b01      	ldr	r3, [sp, #4]
    cd48:	b2db      	uxtb	r3, r3
    cd4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cd4e:	429a      	cmp	r2, r3
    cd50:	d303      	bcc.n	cd5a <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    cd52:	2301      	movs	r3, #1
    cd54:	f88d 301f 	strb.w	r3, [sp, #31]
    cd58:	e01b      	b.n	cd92 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    cd5a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    cd5e:	2b00      	cmp	r3, #0
    cd60:	d014      	beq.n	cd8c <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    cd62:	9b03      	ldr	r3, [sp, #12]
    cd64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    cd66:	0e1b      	lsrs	r3, r3, #24
    cd68:	f003 030f 	and.w	r3, r3, #15
    cd6c:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    cd6e:	9b06      	ldr	r3, [sp, #24]
    cd70:	3301      	adds	r3, #1
    cd72:	00db      	lsls	r3, r3, #3
    cd74:	089b      	lsrs	r3, r3, #2
    cd76:	3305      	adds	r3, #5
    cd78:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    cd7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cd7e:	9a05      	ldr	r2, [sp, #20]
    cd80:	429a      	cmp	r2, r3
    cd82:	d306      	bcc.n	cd92 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    cd84:	2301      	movs	r3, #1
    cd86:	f88d 301f 	strb.w	r3, [sp, #31]
    cd8a:	e002      	b.n	cd92 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    cd8c:	2300      	movs	r3, #0
    cd8e:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    cd92:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    cd96:	4618      	mov	r0, r3
    cd98:	b008      	add	sp, #32
    cd9a:	4770      	bx	lr

0000cd9c <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    cd9c:	b500      	push	{lr}
    cd9e:	b083      	sub	sp, #12
    cda0:	9001      	str	r0, [sp, #4]
    cda2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    cda4:	9b00      	ldr	r3, [sp, #0]
    cda6:	f003 0320 	and.w	r3, r3, #32
    cdaa:	2b00      	cmp	r3, #0
    cdac:	d004      	beq.n	cdb8 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    cdae:	2101      	movs	r1, #1
    cdb0:	9801      	ldr	r0, [sp, #4]
    cdb2:	f7fe fcd8 	bl	b766 <FlexCAN_SetIsoCan>
    cdb6:	e003      	b.n	cdc0 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    cdb8:	2100      	movs	r1, #0
    cdba:	9801      	ldr	r0, [sp, #4]
    cdbc:	f7fe fcd3 	bl	b766 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    cdc0:	9b00      	ldr	r3, [sp, #0]
    cdc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cdc6:	2b00      	cmp	r3, #0
    cdc8:	d004      	beq.n	cdd4 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    cdca:	2101      	movs	r1, #1
    cdcc:	9801      	ldr	r0, [sp, #4]
    cdce:	f7fe fce1 	bl	b794 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    cdd2:	e003      	b.n	cddc <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    cdd4:	2100      	movs	r1, #0
    cdd6:	9801      	ldr	r0, [sp, #4]
    cdd8:	f7fe fcdc 	bl	b794 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    cddc:	9b00      	ldr	r3, [sp, #0]
    cdde:	f003 0308 	and.w	r3, r3, #8
    cde2:	2b00      	cmp	r3, #0
    cde4:	d004      	beq.n	cdf0 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    cde6:	2101      	movs	r1, #1
    cde8:	9801      	ldr	r0, [sp, #4]
    cdea:	f7fe fcea 	bl	b7c2 <FlexCAN_SetProtocolException>
    cdee:	e003      	b.n	cdf8 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    cdf0:	2100      	movs	r1, #0
    cdf2:	9801      	ldr	r0, [sp, #4]
    cdf4:	f7fe fce5 	bl	b7c2 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    cdf8:	9b00      	ldr	r3, [sp, #0]
    cdfa:	f003 0302 	and.w	r3, r3, #2
    cdfe:	2b00      	cmp	r3, #0
    ce00:	d00a      	beq.n	ce18 <FlexCAN_ConfigCtrlOptions+0x7c>
    ce02:	9b01      	ldr	r3, [sp, #4]
    ce04:	681b      	ldr	r3, [r3, #0]
    ce06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	d104      	bne.n	ce18 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    ce0e:	2101      	movs	r1, #1
    ce10:	9801      	ldr	r0, [sp, #4]
    ce12:	f7fe fd31 	bl	b878 <FlexCAN_CanBitSampling>
    ce16:	e003      	b.n	ce20 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    ce18:	2100      	movs	r1, #0
    ce1a:	9801      	ldr	r0, [sp, #4]
    ce1c:	f7fe fd2c 	bl	b878 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    ce20:	9b00      	ldr	r3, [sp, #0]
    ce22:	f003 0304 	and.w	r3, r3, #4
    ce26:	2b00      	cmp	r3, #0
    ce28:	d004      	beq.n	ce34 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    ce2a:	2101      	movs	r1, #1
    ce2c:	9801      	ldr	r0, [sp, #4]
    ce2e:	f7fe fcf6 	bl	b81e <FlexCAN_SetBusOffAutorecovery>
    ce32:	e003      	b.n	ce3c <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    ce34:	2100      	movs	r1, #0
    ce36:	9801      	ldr	r0, [sp, #4]
    ce38:	f7fe fcf1 	bl	b81e <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    ce3c:	9b00      	ldr	r3, [sp, #0]
    ce3e:	f003 0301 	and.w	r3, r3, #1
    ce42:	2b00      	cmp	r3, #0
    ce44:	d004      	beq.n	ce50 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    ce46:	2101      	movs	r1, #1
    ce48:	9801      	ldr	r0, [sp, #4]
    ce4a:	f7fe fcd1 	bl	b7f0 <FlexCAN_SetRemoteReqStore>
    ce4e:	e003      	b.n	ce58 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    ce50:	2100      	movs	r1, #0
    ce52:	9801      	ldr	r0, [sp, #4]
    ce54:	f7fe fccc 	bl	b7f0 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    ce58:	9b00      	ldr	r3, [sp, #0]
    ce5a:	f003 0310 	and.w	r3, r3, #16
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d004      	beq.n	ce6c <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    ce62:	2101      	movs	r1, #1
    ce64:	9801      	ldr	r0, [sp, #4]
    ce66:	f7fe fcf0 	bl	b84a <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    ce6a:	e003      	b.n	ce74 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    ce6c:	2100      	movs	r1, #0
    ce6e:	9801      	ldr	r0, [sp, #4]
    ce70:	f7fe fceb 	bl	b84a <FlexCAN_SetEdgeFilter>
}
    ce74:	bf00      	nop
    ce76:	b003      	add	sp, #12
    ce78:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce7c <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    ce7c:	b084      	sub	sp, #16
    ce7e:	4603      	mov	r3, r0
    ce80:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    ce84:	2300      	movs	r3, #0
    ce86:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    ce8a:	2300      	movs	r3, #0
    ce8c:	f88d 300f 	strb.w	r3, [sp, #15]
    ce90:	e00d      	b.n	ceae <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    ce92:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ce96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce9a:	4909      	ldr	r1, [pc, #36]	; (cec0 <FlexCAN_ResetImaskBuff+0x44>)
    ce9c:	4413      	add	r3, r2
    ce9e:	2200      	movs	r2, #0
    cea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    cea4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cea8:	3301      	adds	r3, #1
    ceaa:	f88d 300f 	strb.w	r3, [sp, #15]
    ceae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d0ed      	beq.n	ce92 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    ceb6:	bf00      	nop
    ceb8:	bf00      	nop
    ceba:	b004      	add	sp, #16
    cebc:	4770      	bx	lr
    cebe:	bf00      	nop
    cec0:	1fff8fc8 	.word	0x1fff8fc8

0000cec4 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    cec4:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    cec6:	2000      	movs	r0, #0
    cec8:	f7fd fb2a 	bl	a520 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    cecc:	f3bf 8f4f 	dsb	sy
}
    ced0:	bf00      	nop
    ced2:	bd08      	pop	{r3, pc}

0000ced4 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    ced4:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    ced6:	2000      	movs	r0, #0
    ced8:	f7fd fac2 	bl	a460 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    cedc:	f3bf 8f4f 	dsb	sy
}
    cee0:	bf00      	nop
    cee2:	bd08      	pop	{r3, pc}

0000cee4 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    cee4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    cee6:	220f      	movs	r2, #15
    cee8:	2100      	movs	r1, #0
    ceea:	2000      	movs	r0, #0
    ceec:	f7fd f9dc 	bl	a2a8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cef0:	f3bf 8f4f 	dsb	sy
}
    cef4:	bf00      	nop
    cef6:	bd08      	pop	{r3, pc}

0000cef8 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    cef8:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    cefa:	221f      	movs	r2, #31
    cefc:	2110      	movs	r1, #16
    cefe:	2000      	movs	r0, #0
    cf00:	f7fd f9d2 	bl	a2a8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cf04:	f3bf 8f4f 	dsb	sy
}
    cf08:	bf00      	nop
    cf0a:	bd08      	pop	{r3, pc}

0000cf0c <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    cf0c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    cf0e:	2001      	movs	r0, #1
    cf10:	f7fd fb06 	bl	a520 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    cf14:	f3bf 8f4f 	dsb	sy
}
    cf18:	bf00      	nop
    cf1a:	bd08      	pop	{r3, pc}

0000cf1c <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    cf1c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    cf1e:	2001      	movs	r0, #1
    cf20:	f7fd fa9e 	bl	a460 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    cf24:	f3bf 8f4f 	dsb	sy
}
    cf28:	bf00      	nop
    cf2a:	bd08      	pop	{r3, pc}

0000cf2c <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    cf2c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    cf2e:	220f      	movs	r2, #15
    cf30:	2100      	movs	r1, #0
    cf32:	2001      	movs	r0, #1
    cf34:	f7fd f9b8 	bl	a2a8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cf38:	f3bf 8f4f 	dsb	sy
}
    cf3c:	bf00      	nop
    cf3e:	bd08      	pop	{r3, pc}

0000cf40 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    cf40:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    cf42:	221f      	movs	r2, #31
    cf44:	2110      	movs	r1, #16
    cf46:	2001      	movs	r0, #1
    cf48:	f7fd f9ae 	bl	a2a8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cf4c:	f3bf 8f4f 	dsb	sy
}
    cf50:	bf00      	nop
    cf52:	bd08      	pop	{r3, pc}

0000cf54 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    cf54:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    cf56:	2002      	movs	r0, #2
    cf58:	f7fd fae2 	bl	a520 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    cf5c:	f3bf 8f4f 	dsb	sy
}
    cf60:	bf00      	nop
    cf62:	bd08      	pop	{r3, pc}

0000cf64 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    cf64:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    cf66:	2002      	movs	r0, #2
    cf68:	f7fd fa7a 	bl	a460 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    cf6c:	f3bf 8f4f 	dsb	sy
}
    cf70:	bf00      	nop
    cf72:	bd08      	pop	{r3, pc}

0000cf74 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    cf74:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    cf76:	220f      	movs	r2, #15
    cf78:	2100      	movs	r1, #0
    cf7a:	2002      	movs	r0, #2
    cf7c:	f7fd f994 	bl	a2a8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cf80:	f3bf 8f4f 	dsb	sy
}
    cf84:	bf00      	nop
    cf86:	bd08      	pop	{r3, pc}

0000cf88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    cf88:	b500      	push	{lr}
    cf8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf8c:	f7f3 ff50 	bl	e30 <Sys_GetCoreID>
    cf90:	4603      	mov	r3, r0
    cf92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    cf94:	4a10      	ldr	r2, [pc, #64]	; (cfd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    cf96:	9b01      	ldr	r3, [sp, #4]
    cf98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d10d      	bne.n	cfbc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfa0:	f7f3 fdee 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    cfa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfa6:	9b00      	ldr	r3, [sp, #0]
    cfa8:	f003 0301 	and.w	r3, r3, #1
    cfac:	2b00      	cmp	r3, #0
    cfae:	d100      	bne.n	cfb2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    cfb2:	490a      	ldr	r1, [pc, #40]	; (cfdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    cfb4:	9b01      	ldr	r3, [sp, #4]
    cfb6:	9a00      	ldr	r2, [sp, #0]
    cfb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    cfbc:	4a06      	ldr	r2, [pc, #24]	; (cfd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    cfbe:	9b01      	ldr	r3, [sp, #4]
    cfc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc4:	1c5a      	adds	r2, r3, #1
    cfc6:	4904      	ldr	r1, [pc, #16]	; (cfd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    cfc8:	9b01      	ldr	r3, [sp, #4]
    cfca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfce:	bf00      	nop
    cfd0:	b003      	add	sp, #12
    cfd2:	f85d fb04 	ldr.w	pc, [sp], #4
    cfd6:	bf00      	nop
    cfd8:	1fff8fd8 	.word	0x1fff8fd8
    cfdc:	1fff8fd4 	.word	0x1fff8fd4

0000cfe0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    cfe0:	b500      	push	{lr}
    cfe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfe4:	f7f3 ff24 	bl	e30 <Sys_GetCoreID>
    cfe8:	4603      	mov	r3, r0
    cfea:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    cfec:	4a0d      	ldr	r2, [pc, #52]	; (d024 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    cfee:	9b01      	ldr	r3, [sp, #4]
    cff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff4:	1e5a      	subs	r2, r3, #1
    cff6:	490b      	ldr	r1, [pc, #44]	; (d024 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    cff8:	9b01      	ldr	r3, [sp, #4]
    cffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    cffe:	4a0a      	ldr	r2, [pc, #40]	; (d028 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    d000:	9b01      	ldr	r3, [sp, #4]
    d002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d006:	f003 0301 	and.w	r3, r3, #1
    d00a:	2b00      	cmp	r3, #0
    d00c:	d106      	bne.n	d01c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    d00e:	4a05      	ldr	r2, [pc, #20]	; (d024 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    d010:	9b01      	ldr	r3, [sp, #4]
    d012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d016:	2b00      	cmp	r3, #0
    d018:	d100      	bne.n	d01c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d01c:	bf00      	nop
    d01e:	b003      	add	sp, #12
    d020:	f85d fb04 	ldr.w	pc, [sp], #4
    d024:	1fff8fd8 	.word	0x1fff8fd8
    d028:	1fff8fd4 	.word	0x1fff8fd4

0000d02c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    d02c:	b500      	push	{lr}
    d02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d030:	f7f3 fefe 	bl	e30 <Sys_GetCoreID>
    d034:	4603      	mov	r3, r0
    d036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    d038:	4a10      	ldr	r2, [pc, #64]	; (d07c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d03a:	9b01      	ldr	r3, [sp, #4]
    d03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d040:	2b00      	cmp	r3, #0
    d042:	d10d      	bne.n	d060 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d044:	f7f3 fd9c 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d04a:	9b00      	ldr	r3, [sp, #0]
    d04c:	f003 0301 	and.w	r3, r3, #1
    d050:	2b00      	cmp	r3, #0
    d052:	d100      	bne.n	d056 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    d056:	490a      	ldr	r1, [pc, #40]	; (d080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    d058:	9b01      	ldr	r3, [sp, #4]
    d05a:	9a00      	ldr	r2, [sp, #0]
    d05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    d060:	4a06      	ldr	r2, [pc, #24]	; (d07c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d062:	9b01      	ldr	r3, [sp, #4]
    d064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d068:	1c5a      	adds	r2, r3, #1
    d06a:	4904      	ldr	r1, [pc, #16]	; (d07c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d06c:	9b01      	ldr	r3, [sp, #4]
    d06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d072:	bf00      	nop
    d074:	b003      	add	sp, #12
    d076:	f85d fb04 	ldr.w	pc, [sp], #4
    d07a:	bf00      	nop
    d07c:	1fff8fe0 	.word	0x1fff8fe0
    d080:	1fff8fdc 	.word	0x1fff8fdc

0000d084 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    d084:	b500      	push	{lr}
    d086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d088:	f7f3 fed2 	bl	e30 <Sys_GetCoreID>
    d08c:	4603      	mov	r3, r0
    d08e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    d090:	4a0d      	ldr	r2, [pc, #52]	; (d0c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d092:	9b01      	ldr	r3, [sp, #4]
    d094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d098:	1e5a      	subs	r2, r3, #1
    d09a:	490b      	ldr	r1, [pc, #44]	; (d0c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d09c:	9b01      	ldr	r3, [sp, #4]
    d09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    d0a2:	4a0a      	ldr	r2, [pc, #40]	; (d0cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    d0a4:	9b01      	ldr	r3, [sp, #4]
    d0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0aa:	f003 0301 	and.w	r3, r3, #1
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d106      	bne.n	d0c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    d0b2:	4a05      	ldr	r2, [pc, #20]	; (d0c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d0b4:	9b01      	ldr	r3, [sp, #4]
    d0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d100      	bne.n	d0c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0c0:	bf00      	nop
    d0c2:	b003      	add	sp, #12
    d0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d0c8:	1fff8fe0 	.word	0x1fff8fe0
    d0cc:	1fff8fdc 	.word	0x1fff8fdc

0000d0d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d0d0:	b500      	push	{lr}
    d0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0d4:	f7f3 feac 	bl	e30 <Sys_GetCoreID>
    d0d8:	4603      	mov	r3, r0
    d0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    d0dc:	4a10      	ldr	r2, [pc, #64]	; (d120 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d0de:	9b01      	ldr	r3, [sp, #4]
    d0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d10d      	bne.n	d104 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0e8:	f7f3 fd4a 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0ee:	9b00      	ldr	r3, [sp, #0]
    d0f0:	f003 0301 	and.w	r3, r3, #1
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d100      	bne.n	d0fa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    d0fa:	490a      	ldr	r1, [pc, #40]	; (d124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    d0fc:	9b01      	ldr	r3, [sp, #4]
    d0fe:	9a00      	ldr	r2, [sp, #0]
    d100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    d104:	4a06      	ldr	r2, [pc, #24]	; (d120 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d106:	9b01      	ldr	r3, [sp, #4]
    d108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d10c:	1c5a      	adds	r2, r3, #1
    d10e:	4904      	ldr	r1, [pc, #16]	; (d120 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d110:	9b01      	ldr	r3, [sp, #4]
    d112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d116:	bf00      	nop
    d118:	b003      	add	sp, #12
    d11a:	f85d fb04 	ldr.w	pc, [sp], #4
    d11e:	bf00      	nop
    d120:	1fff8fe8 	.word	0x1fff8fe8
    d124:	1fff8fe4 	.word	0x1fff8fe4

0000d128 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d128:	b500      	push	{lr}
    d12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d12c:	f7f3 fe80 	bl	e30 <Sys_GetCoreID>
    d130:	4603      	mov	r3, r0
    d132:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    d134:	4a0d      	ldr	r2, [pc, #52]	; (d16c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d136:	9b01      	ldr	r3, [sp, #4]
    d138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d13c:	1e5a      	subs	r2, r3, #1
    d13e:	490b      	ldr	r1, [pc, #44]	; (d16c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d140:	9b01      	ldr	r3, [sp, #4]
    d142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    d146:	4a0a      	ldr	r2, [pc, #40]	; (d170 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    d148:	9b01      	ldr	r3, [sp, #4]
    d14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d14e:	f003 0301 	and.w	r3, r3, #1
    d152:	2b00      	cmp	r3, #0
    d154:	d106      	bne.n	d164 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    d156:	4a05      	ldr	r2, [pc, #20]	; (d16c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d158:	9b01      	ldr	r3, [sp, #4]
    d15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d15e:	2b00      	cmp	r3, #0
    d160:	d100      	bne.n	d164 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d164:	bf00      	nop
    d166:	b003      	add	sp, #12
    d168:	f85d fb04 	ldr.w	pc, [sp], #4
    d16c:	1fff8fe8 	.word	0x1fff8fe8
    d170:	1fff8fe4 	.word	0x1fff8fe4

0000d174 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d174:	b500      	push	{lr}
    d176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d178:	f7f3 fe5a 	bl	e30 <Sys_GetCoreID>
    d17c:	4603      	mov	r3, r0
    d17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    d180:	4a10      	ldr	r2, [pc, #64]	; (d1c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d182:	9b01      	ldr	r3, [sp, #4]
    d184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d188:	2b00      	cmp	r3, #0
    d18a:	d10d      	bne.n	d1a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d18c:	f7f3 fcf8 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d192:	9b00      	ldr	r3, [sp, #0]
    d194:	f003 0301 	and.w	r3, r3, #1
    d198:	2b00      	cmp	r3, #0
    d19a:	d100      	bne.n	d19e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    d19e:	490a      	ldr	r1, [pc, #40]	; (d1c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    d1a0:	9b01      	ldr	r3, [sp, #4]
    d1a2:	9a00      	ldr	r2, [sp, #0]
    d1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    d1a8:	4a06      	ldr	r2, [pc, #24]	; (d1c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d1aa:	9b01      	ldr	r3, [sp, #4]
    d1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b0:	1c5a      	adds	r2, r3, #1
    d1b2:	4904      	ldr	r1, [pc, #16]	; (d1c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d1b4:	9b01      	ldr	r3, [sp, #4]
    d1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1ba:	bf00      	nop
    d1bc:	b003      	add	sp, #12
    d1be:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c2:	bf00      	nop
    d1c4:	1fff8ff0 	.word	0x1fff8ff0
    d1c8:	1fff8fec 	.word	0x1fff8fec

0000d1cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d1cc:	b500      	push	{lr}
    d1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1d0:	f7f3 fe2e 	bl	e30 <Sys_GetCoreID>
    d1d4:	4603      	mov	r3, r0
    d1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    d1d8:	4a0d      	ldr	r2, [pc, #52]	; (d210 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d1da:	9b01      	ldr	r3, [sp, #4]
    d1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1e0:	1e5a      	subs	r2, r3, #1
    d1e2:	490b      	ldr	r1, [pc, #44]	; (d210 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d1e4:	9b01      	ldr	r3, [sp, #4]
    d1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    d1ea:	4a0a      	ldr	r2, [pc, #40]	; (d214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    d1ec:	9b01      	ldr	r3, [sp, #4]
    d1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f2:	f003 0301 	and.w	r3, r3, #1
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d106      	bne.n	d208 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    d1fa:	4a05      	ldr	r2, [pc, #20]	; (d210 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d1fc:	9b01      	ldr	r3, [sp, #4]
    d1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d202:	2b00      	cmp	r3, #0
    d204:	d100      	bne.n	d208 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d208:	bf00      	nop
    d20a:	b003      	add	sp, #12
    d20c:	f85d fb04 	ldr.w	pc, [sp], #4
    d210:	1fff8ff0 	.word	0x1fff8ff0
    d214:	1fff8fec 	.word	0x1fff8fec

0000d218 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d218:	b500      	push	{lr}
    d21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d21c:	f7f3 fe08 	bl	e30 <Sys_GetCoreID>
    d220:	4603      	mov	r3, r0
    d222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    d224:	4a10      	ldr	r2, [pc, #64]	; (d268 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d226:	9b01      	ldr	r3, [sp, #4]
    d228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d22c:	2b00      	cmp	r3, #0
    d22e:	d10d      	bne.n	d24c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d230:	f7f3 fca6 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d236:	9b00      	ldr	r3, [sp, #0]
    d238:	f003 0301 	and.w	r3, r3, #1
    d23c:	2b00      	cmp	r3, #0
    d23e:	d100      	bne.n	d242 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    d242:	490a      	ldr	r1, [pc, #40]	; (d26c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    d244:	9b01      	ldr	r3, [sp, #4]
    d246:	9a00      	ldr	r2, [sp, #0]
    d248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    d24c:	4a06      	ldr	r2, [pc, #24]	; (d268 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d24e:	9b01      	ldr	r3, [sp, #4]
    d250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d254:	1c5a      	adds	r2, r3, #1
    d256:	4904      	ldr	r1, [pc, #16]	; (d268 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d258:	9b01      	ldr	r3, [sp, #4]
    d25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d25e:	bf00      	nop
    d260:	b003      	add	sp, #12
    d262:	f85d fb04 	ldr.w	pc, [sp], #4
    d266:	bf00      	nop
    d268:	1fff8ff8 	.word	0x1fff8ff8
    d26c:	1fff8ff4 	.word	0x1fff8ff4

0000d270 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d270:	b500      	push	{lr}
    d272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d274:	f7f3 fddc 	bl	e30 <Sys_GetCoreID>
    d278:	4603      	mov	r3, r0
    d27a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    d27c:	4a0d      	ldr	r2, [pc, #52]	; (d2b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d27e:	9b01      	ldr	r3, [sp, #4]
    d280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d284:	1e5a      	subs	r2, r3, #1
    d286:	490b      	ldr	r1, [pc, #44]	; (d2b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d288:	9b01      	ldr	r3, [sp, #4]
    d28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    d28e:	4a0a      	ldr	r2, [pc, #40]	; (d2b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    d290:	9b01      	ldr	r3, [sp, #4]
    d292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d296:	f003 0301 	and.w	r3, r3, #1
    d29a:	2b00      	cmp	r3, #0
    d29c:	d106      	bne.n	d2ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    d29e:	4a05      	ldr	r2, [pc, #20]	; (d2b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d2a0:	9b01      	ldr	r3, [sp, #4]
    d2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d100      	bne.n	d2ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2ac:	bf00      	nop
    d2ae:	b003      	add	sp, #12
    d2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    d2b4:	1fff8ff8 	.word	0x1fff8ff8
    d2b8:	1fff8ff4 	.word	0x1fff8ff4

0000d2bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d2bc:	b500      	push	{lr}
    d2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c0:	f7f3 fdb6 	bl	e30 <Sys_GetCoreID>
    d2c4:	4603      	mov	r3, r0
    d2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    d2c8:	4a10      	ldr	r2, [pc, #64]	; (d30c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d2ca:	9b01      	ldr	r3, [sp, #4]
    d2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d10d      	bne.n	d2f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2d4:	f7f3 fc54 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2da:	9b00      	ldr	r3, [sp, #0]
    d2dc:	f003 0301 	and.w	r3, r3, #1
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d100      	bne.n	d2e6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    d2e6:	490a      	ldr	r1, [pc, #40]	; (d310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    d2e8:	9b01      	ldr	r3, [sp, #4]
    d2ea:	9a00      	ldr	r2, [sp, #0]
    d2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    d2f0:	4a06      	ldr	r2, [pc, #24]	; (d30c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d2f2:	9b01      	ldr	r3, [sp, #4]
    d2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f8:	1c5a      	adds	r2, r3, #1
    d2fa:	4904      	ldr	r1, [pc, #16]	; (d30c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d2fc:	9b01      	ldr	r3, [sp, #4]
    d2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d302:	bf00      	nop
    d304:	b003      	add	sp, #12
    d306:	f85d fb04 	ldr.w	pc, [sp], #4
    d30a:	bf00      	nop
    d30c:	1fff9000 	.word	0x1fff9000
    d310:	1fff8ffc 	.word	0x1fff8ffc

0000d314 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d314:	b500      	push	{lr}
    d316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d318:	f7f3 fd8a 	bl	e30 <Sys_GetCoreID>
    d31c:	4603      	mov	r3, r0
    d31e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    d320:	4a0d      	ldr	r2, [pc, #52]	; (d358 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d322:	9b01      	ldr	r3, [sp, #4]
    d324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d328:	1e5a      	subs	r2, r3, #1
    d32a:	490b      	ldr	r1, [pc, #44]	; (d358 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d32c:	9b01      	ldr	r3, [sp, #4]
    d32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    d332:	4a0a      	ldr	r2, [pc, #40]	; (d35c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    d334:	9b01      	ldr	r3, [sp, #4]
    d336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d33a:	f003 0301 	and.w	r3, r3, #1
    d33e:	2b00      	cmp	r3, #0
    d340:	d106      	bne.n	d350 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    d342:	4a05      	ldr	r2, [pc, #20]	; (d358 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d344:	9b01      	ldr	r3, [sp, #4]
    d346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34a:	2b00      	cmp	r3, #0
    d34c:	d100      	bne.n	d350 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d350:	bf00      	nop
    d352:	b003      	add	sp, #12
    d354:	f85d fb04 	ldr.w	pc, [sp], #4
    d358:	1fff9000 	.word	0x1fff9000
    d35c:	1fff8ffc 	.word	0x1fff8ffc

0000d360 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d360:	b500      	push	{lr}
    d362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d364:	f7f3 fd64 	bl	e30 <Sys_GetCoreID>
    d368:	4603      	mov	r3, r0
    d36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    d36c:	4a10      	ldr	r2, [pc, #64]	; (d3b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d36e:	9b01      	ldr	r3, [sp, #4]
    d370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d374:	2b00      	cmp	r3, #0
    d376:	d10d      	bne.n	d394 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d378:	f7f3 fc02 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d37e:	9b00      	ldr	r3, [sp, #0]
    d380:	f003 0301 	and.w	r3, r3, #1
    d384:	2b00      	cmp	r3, #0
    d386:	d100      	bne.n	d38a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    d38a:	490a      	ldr	r1, [pc, #40]	; (d3b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    d38c:	9b01      	ldr	r3, [sp, #4]
    d38e:	9a00      	ldr	r2, [sp, #0]
    d390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    d394:	4a06      	ldr	r2, [pc, #24]	; (d3b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d396:	9b01      	ldr	r3, [sp, #4]
    d398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d39c:	1c5a      	adds	r2, r3, #1
    d39e:	4904      	ldr	r1, [pc, #16]	; (d3b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d3a0:	9b01      	ldr	r3, [sp, #4]
    d3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3a6:	bf00      	nop
    d3a8:	b003      	add	sp, #12
    d3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ae:	bf00      	nop
    d3b0:	1fff9008 	.word	0x1fff9008
    d3b4:	1fff9004 	.word	0x1fff9004

0000d3b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d3b8:	b500      	push	{lr}
    d3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3bc:	f7f3 fd38 	bl	e30 <Sys_GetCoreID>
    d3c0:	4603      	mov	r3, r0
    d3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    d3c4:	4a0d      	ldr	r2, [pc, #52]	; (d3fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d3c6:	9b01      	ldr	r3, [sp, #4]
    d3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3cc:	1e5a      	subs	r2, r3, #1
    d3ce:	490b      	ldr	r1, [pc, #44]	; (d3fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d3d0:	9b01      	ldr	r3, [sp, #4]
    d3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    d3d6:	4a0a      	ldr	r2, [pc, #40]	; (d400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    d3d8:	9b01      	ldr	r3, [sp, #4]
    d3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3de:	f003 0301 	and.w	r3, r3, #1
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d106      	bne.n	d3f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    d3e6:	4a05      	ldr	r2, [pc, #20]	; (d3fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d3e8:	9b01      	ldr	r3, [sp, #4]
    d3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	d100      	bne.n	d3f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3f4:	bf00      	nop
    d3f6:	b003      	add	sp, #12
    d3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    d3fc:	1fff9008 	.word	0x1fff9008
    d400:	1fff9004 	.word	0x1fff9004

0000d404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d404:	b500      	push	{lr}
    d406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d408:	f7f3 fd12 	bl	e30 <Sys_GetCoreID>
    d40c:	4603      	mov	r3, r0
    d40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    d410:	4a10      	ldr	r2, [pc, #64]	; (d454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d412:	9b01      	ldr	r3, [sp, #4]
    d414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d418:	2b00      	cmp	r3, #0
    d41a:	d10d      	bne.n	d438 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d41c:	f7f3 fbb0 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d422:	9b00      	ldr	r3, [sp, #0]
    d424:	f003 0301 	and.w	r3, r3, #1
    d428:	2b00      	cmp	r3, #0
    d42a:	d100      	bne.n	d42e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    d42e:	490a      	ldr	r1, [pc, #40]	; (d458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    d430:	9b01      	ldr	r3, [sp, #4]
    d432:	9a00      	ldr	r2, [sp, #0]
    d434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    d438:	4a06      	ldr	r2, [pc, #24]	; (d454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d43a:	9b01      	ldr	r3, [sp, #4]
    d43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d440:	1c5a      	adds	r2, r3, #1
    d442:	4904      	ldr	r1, [pc, #16]	; (d454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d444:	9b01      	ldr	r3, [sp, #4]
    d446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d44a:	bf00      	nop
    d44c:	b003      	add	sp, #12
    d44e:	f85d fb04 	ldr.w	pc, [sp], #4
    d452:	bf00      	nop
    d454:	1fff9010 	.word	0x1fff9010
    d458:	1fff900c 	.word	0x1fff900c

0000d45c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d45c:	b500      	push	{lr}
    d45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d460:	f7f3 fce6 	bl	e30 <Sys_GetCoreID>
    d464:	4603      	mov	r3, r0
    d466:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    d468:	4a0d      	ldr	r2, [pc, #52]	; (d4a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d46a:	9b01      	ldr	r3, [sp, #4]
    d46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d470:	1e5a      	subs	r2, r3, #1
    d472:	490b      	ldr	r1, [pc, #44]	; (d4a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d474:	9b01      	ldr	r3, [sp, #4]
    d476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    d47a:	4a0a      	ldr	r2, [pc, #40]	; (d4a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    d47c:	9b01      	ldr	r3, [sp, #4]
    d47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d482:	f003 0301 	and.w	r3, r3, #1
    d486:	2b00      	cmp	r3, #0
    d488:	d106      	bne.n	d498 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    d48a:	4a05      	ldr	r2, [pc, #20]	; (d4a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d48c:	9b01      	ldr	r3, [sp, #4]
    d48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d492:	2b00      	cmp	r3, #0
    d494:	d100      	bne.n	d498 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d498:	bf00      	nop
    d49a:	b003      	add	sp, #12
    d49c:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a0:	1fff9010 	.word	0x1fff9010
    d4a4:	1fff900c 	.word	0x1fff900c

0000d4a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d4a8:	b500      	push	{lr}
    d4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4ac:	f7f3 fcc0 	bl	e30 <Sys_GetCoreID>
    d4b0:	4603      	mov	r3, r0
    d4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    d4b4:	4a10      	ldr	r2, [pc, #64]	; (d4f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d4b6:	9b01      	ldr	r3, [sp, #4]
    d4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d10d      	bne.n	d4dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4c0:	f7f3 fb5e 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4c6:	9b00      	ldr	r3, [sp, #0]
    d4c8:	f003 0301 	and.w	r3, r3, #1
    d4cc:	2b00      	cmp	r3, #0
    d4ce:	d100      	bne.n	d4d2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    d4d2:	490a      	ldr	r1, [pc, #40]	; (d4fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    d4d4:	9b01      	ldr	r3, [sp, #4]
    d4d6:	9a00      	ldr	r2, [sp, #0]
    d4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    d4dc:	4a06      	ldr	r2, [pc, #24]	; (d4f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d4de:	9b01      	ldr	r3, [sp, #4]
    d4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e4:	1c5a      	adds	r2, r3, #1
    d4e6:	4904      	ldr	r1, [pc, #16]	; (d4f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d4e8:	9b01      	ldr	r3, [sp, #4]
    d4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4ee:	bf00      	nop
    d4f0:	b003      	add	sp, #12
    d4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f6:	bf00      	nop
    d4f8:	1fff9018 	.word	0x1fff9018
    d4fc:	1fff9014 	.word	0x1fff9014

0000d500 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d500:	b500      	push	{lr}
    d502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d504:	f7f3 fc94 	bl	e30 <Sys_GetCoreID>
    d508:	4603      	mov	r3, r0
    d50a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    d50c:	4a0d      	ldr	r2, [pc, #52]	; (d544 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d50e:	9b01      	ldr	r3, [sp, #4]
    d510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d514:	1e5a      	subs	r2, r3, #1
    d516:	490b      	ldr	r1, [pc, #44]	; (d544 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d518:	9b01      	ldr	r3, [sp, #4]
    d51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    d51e:	4a0a      	ldr	r2, [pc, #40]	; (d548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    d520:	9b01      	ldr	r3, [sp, #4]
    d522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d526:	f003 0301 	and.w	r3, r3, #1
    d52a:	2b00      	cmp	r3, #0
    d52c:	d106      	bne.n	d53c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    d52e:	4a05      	ldr	r2, [pc, #20]	; (d544 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d530:	9b01      	ldr	r3, [sp, #4]
    d532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d536:	2b00      	cmp	r3, #0
    d538:	d100      	bne.n	d53c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d53c:	bf00      	nop
    d53e:	b003      	add	sp, #12
    d540:	f85d fb04 	ldr.w	pc, [sp], #4
    d544:	1fff9018 	.word	0x1fff9018
    d548:	1fff9014 	.word	0x1fff9014

0000d54c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d54c:	b500      	push	{lr}
    d54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d550:	f7f3 fc6e 	bl	e30 <Sys_GetCoreID>
    d554:	4603      	mov	r3, r0
    d556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    d558:	4a10      	ldr	r2, [pc, #64]	; (d59c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d55a:	9b01      	ldr	r3, [sp, #4]
    d55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d560:	2b00      	cmp	r3, #0
    d562:	d10d      	bne.n	d580 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d564:	f7f3 fb0c 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d56a:	9b00      	ldr	r3, [sp, #0]
    d56c:	f003 0301 	and.w	r3, r3, #1
    d570:	2b00      	cmp	r3, #0
    d572:	d100      	bne.n	d576 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    d576:	490a      	ldr	r1, [pc, #40]	; (d5a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    d578:	9b01      	ldr	r3, [sp, #4]
    d57a:	9a00      	ldr	r2, [sp, #0]
    d57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    d580:	4a06      	ldr	r2, [pc, #24]	; (d59c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d582:	9b01      	ldr	r3, [sp, #4]
    d584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d588:	1c5a      	adds	r2, r3, #1
    d58a:	4904      	ldr	r1, [pc, #16]	; (d59c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d58c:	9b01      	ldr	r3, [sp, #4]
    d58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d592:	bf00      	nop
    d594:	b003      	add	sp, #12
    d596:	f85d fb04 	ldr.w	pc, [sp], #4
    d59a:	bf00      	nop
    d59c:	1fff9020 	.word	0x1fff9020
    d5a0:	1fff901c 	.word	0x1fff901c

0000d5a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d5a4:	b500      	push	{lr}
    d5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a8:	f7f3 fc42 	bl	e30 <Sys_GetCoreID>
    d5ac:	4603      	mov	r3, r0
    d5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    d5b0:	4a0d      	ldr	r2, [pc, #52]	; (d5e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d5b2:	9b01      	ldr	r3, [sp, #4]
    d5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b8:	1e5a      	subs	r2, r3, #1
    d5ba:	490b      	ldr	r1, [pc, #44]	; (d5e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d5bc:	9b01      	ldr	r3, [sp, #4]
    d5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d5c2:	4a0a      	ldr	r2, [pc, #40]	; (d5ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    d5c4:	9b01      	ldr	r3, [sp, #4]
    d5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ca:	f003 0301 	and.w	r3, r3, #1
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d106      	bne.n	d5e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    d5d2:	4a05      	ldr	r2, [pc, #20]	; (d5e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d5d4:	9b01      	ldr	r3, [sp, #4]
    d5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d100      	bne.n	d5e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5e0:	bf00      	nop
    d5e2:	b003      	add	sp, #12
    d5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    d5e8:	1fff9020 	.word	0x1fff9020
    d5ec:	1fff901c 	.word	0x1fff901c

0000d5f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d5f0:	b500      	push	{lr}
    d5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5f4:	f7f3 fc1c 	bl	e30 <Sys_GetCoreID>
    d5f8:	4603      	mov	r3, r0
    d5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    d5fc:	4a10      	ldr	r2, [pc, #64]	; (d640 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d5fe:	9b01      	ldr	r3, [sp, #4]
    d600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d604:	2b00      	cmp	r3, #0
    d606:	d10d      	bne.n	d624 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d608:	f7f3 faba 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d60e:	9b00      	ldr	r3, [sp, #0]
    d610:	f003 0301 	and.w	r3, r3, #1
    d614:	2b00      	cmp	r3, #0
    d616:	d100      	bne.n	d61a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    d61a:	490a      	ldr	r1, [pc, #40]	; (d644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    d61c:	9b01      	ldr	r3, [sp, #4]
    d61e:	9a00      	ldr	r2, [sp, #0]
    d620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    d624:	4a06      	ldr	r2, [pc, #24]	; (d640 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d626:	9b01      	ldr	r3, [sp, #4]
    d628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d62c:	1c5a      	adds	r2, r3, #1
    d62e:	4904      	ldr	r1, [pc, #16]	; (d640 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d630:	9b01      	ldr	r3, [sp, #4]
    d632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d636:	bf00      	nop
    d638:	b003      	add	sp, #12
    d63a:	f85d fb04 	ldr.w	pc, [sp], #4
    d63e:	bf00      	nop
    d640:	1fff9028 	.word	0x1fff9028
    d644:	1fff9024 	.word	0x1fff9024

0000d648 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d648:	b500      	push	{lr}
    d64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d64c:	f7f3 fbf0 	bl	e30 <Sys_GetCoreID>
    d650:	4603      	mov	r3, r0
    d652:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    d654:	4a0d      	ldr	r2, [pc, #52]	; (d68c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d656:	9b01      	ldr	r3, [sp, #4]
    d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d65c:	1e5a      	subs	r2, r3, #1
    d65e:	490b      	ldr	r1, [pc, #44]	; (d68c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d660:	9b01      	ldr	r3, [sp, #4]
    d662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    d666:	4a0a      	ldr	r2, [pc, #40]	; (d690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    d668:	9b01      	ldr	r3, [sp, #4]
    d66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d66e:	f003 0301 	and.w	r3, r3, #1
    d672:	2b00      	cmp	r3, #0
    d674:	d106      	bne.n	d684 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    d676:	4a05      	ldr	r2, [pc, #20]	; (d68c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d678:	9b01      	ldr	r3, [sp, #4]
    d67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d67e:	2b00      	cmp	r3, #0
    d680:	d100      	bne.n	d684 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d684:	bf00      	nop
    d686:	b003      	add	sp, #12
    d688:	f85d fb04 	ldr.w	pc, [sp], #4
    d68c:	1fff9028 	.word	0x1fff9028
    d690:	1fff9024 	.word	0x1fff9024

0000d694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d694:	b500      	push	{lr}
    d696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d698:	f7f3 fbca 	bl	e30 <Sys_GetCoreID>
    d69c:	4603      	mov	r3, r0
    d69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    d6a0:	4a10      	ldr	r2, [pc, #64]	; (d6e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d6a2:	9b01      	ldr	r3, [sp, #4]
    d6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d10d      	bne.n	d6c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6ac:	f7f3 fa68 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6b2:	9b00      	ldr	r3, [sp, #0]
    d6b4:	f003 0301 	and.w	r3, r3, #1
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	d100      	bne.n	d6be <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    d6be:	490a      	ldr	r1, [pc, #40]	; (d6e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    d6c0:	9b01      	ldr	r3, [sp, #4]
    d6c2:	9a00      	ldr	r2, [sp, #0]
    d6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    d6c8:	4a06      	ldr	r2, [pc, #24]	; (d6e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d6ca:	9b01      	ldr	r3, [sp, #4]
    d6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d0:	1c5a      	adds	r2, r3, #1
    d6d2:	4904      	ldr	r1, [pc, #16]	; (d6e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d6d4:	9b01      	ldr	r3, [sp, #4]
    d6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6da:	bf00      	nop
    d6dc:	b003      	add	sp, #12
    d6de:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e2:	bf00      	nop
    d6e4:	1fff9030 	.word	0x1fff9030
    d6e8:	1fff902c 	.word	0x1fff902c

0000d6ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d6ec:	b500      	push	{lr}
    d6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6f0:	f7f3 fb9e 	bl	e30 <Sys_GetCoreID>
    d6f4:	4603      	mov	r3, r0
    d6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    d6f8:	4a0d      	ldr	r2, [pc, #52]	; (d730 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d6fa:	9b01      	ldr	r3, [sp, #4]
    d6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d700:	1e5a      	subs	r2, r3, #1
    d702:	490b      	ldr	r1, [pc, #44]	; (d730 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d704:	9b01      	ldr	r3, [sp, #4]
    d706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    d70a:	4a0a      	ldr	r2, [pc, #40]	; (d734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    d70c:	9b01      	ldr	r3, [sp, #4]
    d70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d712:	f003 0301 	and.w	r3, r3, #1
    d716:	2b00      	cmp	r3, #0
    d718:	d106      	bne.n	d728 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    d71a:	4a05      	ldr	r2, [pc, #20]	; (d730 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d71c:	9b01      	ldr	r3, [sp, #4]
    d71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d722:	2b00      	cmp	r3, #0
    d724:	d100      	bne.n	d728 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d728:	bf00      	nop
    d72a:	b003      	add	sp, #12
    d72c:	f85d fb04 	ldr.w	pc, [sp], #4
    d730:	1fff9030 	.word	0x1fff9030
    d734:	1fff902c 	.word	0x1fff902c

0000d738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d738:	b500      	push	{lr}
    d73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d73c:	f7f3 fb78 	bl	e30 <Sys_GetCoreID>
    d740:	4603      	mov	r3, r0
    d742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    d744:	4a10      	ldr	r2, [pc, #64]	; (d788 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d746:	9b01      	ldr	r3, [sp, #4]
    d748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d74c:	2b00      	cmp	r3, #0
    d74e:	d10d      	bne.n	d76c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d750:	f7f3 fa16 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d756:	9b00      	ldr	r3, [sp, #0]
    d758:	f003 0301 	and.w	r3, r3, #1
    d75c:	2b00      	cmp	r3, #0
    d75e:	d100      	bne.n	d762 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    d762:	490a      	ldr	r1, [pc, #40]	; (d78c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    d764:	9b01      	ldr	r3, [sp, #4]
    d766:	9a00      	ldr	r2, [sp, #0]
    d768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    d76c:	4a06      	ldr	r2, [pc, #24]	; (d788 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d76e:	9b01      	ldr	r3, [sp, #4]
    d770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d774:	1c5a      	adds	r2, r3, #1
    d776:	4904      	ldr	r1, [pc, #16]	; (d788 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d778:	9b01      	ldr	r3, [sp, #4]
    d77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d77e:	bf00      	nop
    d780:	b003      	add	sp, #12
    d782:	f85d fb04 	ldr.w	pc, [sp], #4
    d786:	bf00      	nop
    d788:	1fff9038 	.word	0x1fff9038
    d78c:	1fff9034 	.word	0x1fff9034

0000d790 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d790:	b500      	push	{lr}
    d792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d794:	f7f3 fb4c 	bl	e30 <Sys_GetCoreID>
    d798:	4603      	mov	r3, r0
    d79a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    d79c:	4a0d      	ldr	r2, [pc, #52]	; (d7d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d79e:	9b01      	ldr	r3, [sp, #4]
    d7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a4:	1e5a      	subs	r2, r3, #1
    d7a6:	490b      	ldr	r1, [pc, #44]	; (d7d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d7a8:	9b01      	ldr	r3, [sp, #4]
    d7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    d7ae:	4a0a      	ldr	r2, [pc, #40]	; (d7d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    d7b0:	9b01      	ldr	r3, [sp, #4]
    d7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b6:	f003 0301 	and.w	r3, r3, #1
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	d106      	bne.n	d7cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    d7be:	4a05      	ldr	r2, [pc, #20]	; (d7d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d7c0:	9b01      	ldr	r3, [sp, #4]
    d7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d100      	bne.n	d7cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7cc:	bf00      	nop
    d7ce:	b003      	add	sp, #12
    d7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    d7d4:	1fff9038 	.word	0x1fff9038
    d7d8:	1fff9034 	.word	0x1fff9034

0000d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d7dc:	b500      	push	{lr}
    d7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e0:	f7f3 fb26 	bl	e30 <Sys_GetCoreID>
    d7e4:	4603      	mov	r3, r0
    d7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    d7e8:	4a10      	ldr	r2, [pc, #64]	; (d82c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d7ea:	9b01      	ldr	r3, [sp, #4]
    d7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d10d      	bne.n	d810 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7f4:	f7f3 f9c4 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7fa:	9b00      	ldr	r3, [sp, #0]
    d7fc:	f003 0301 	and.w	r3, r3, #1
    d800:	2b00      	cmp	r3, #0
    d802:	d100      	bne.n	d806 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    d806:	490a      	ldr	r1, [pc, #40]	; (d830 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    d808:	9b01      	ldr	r3, [sp, #4]
    d80a:	9a00      	ldr	r2, [sp, #0]
    d80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    d810:	4a06      	ldr	r2, [pc, #24]	; (d82c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d812:	9b01      	ldr	r3, [sp, #4]
    d814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d818:	1c5a      	adds	r2, r3, #1
    d81a:	4904      	ldr	r1, [pc, #16]	; (d82c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d81c:	9b01      	ldr	r3, [sp, #4]
    d81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d822:	bf00      	nop
    d824:	b003      	add	sp, #12
    d826:	f85d fb04 	ldr.w	pc, [sp], #4
    d82a:	bf00      	nop
    d82c:	1fff9040 	.word	0x1fff9040
    d830:	1fff903c 	.word	0x1fff903c

0000d834 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d834:	b500      	push	{lr}
    d836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d838:	f7f3 fafa 	bl	e30 <Sys_GetCoreID>
    d83c:	4603      	mov	r3, r0
    d83e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    d840:	4a0d      	ldr	r2, [pc, #52]	; (d878 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d842:	9b01      	ldr	r3, [sp, #4]
    d844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d848:	1e5a      	subs	r2, r3, #1
    d84a:	490b      	ldr	r1, [pc, #44]	; (d878 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d84c:	9b01      	ldr	r3, [sp, #4]
    d84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    d852:	4a0a      	ldr	r2, [pc, #40]	; (d87c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    d854:	9b01      	ldr	r3, [sp, #4]
    d856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d85a:	f003 0301 	and.w	r3, r3, #1
    d85e:	2b00      	cmp	r3, #0
    d860:	d106      	bne.n	d870 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    d862:	4a05      	ldr	r2, [pc, #20]	; (d878 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d864:	9b01      	ldr	r3, [sp, #4]
    d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86a:	2b00      	cmp	r3, #0
    d86c:	d100      	bne.n	d870 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d870:	bf00      	nop
    d872:	b003      	add	sp, #12
    d874:	f85d fb04 	ldr.w	pc, [sp], #4
    d878:	1fff9040 	.word	0x1fff9040
    d87c:	1fff903c 	.word	0x1fff903c

0000d880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d880:	b500      	push	{lr}
    d882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d884:	f7f3 fad4 	bl	e30 <Sys_GetCoreID>
    d888:	4603      	mov	r3, r0
    d88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    d88c:	4a10      	ldr	r2, [pc, #64]	; (d8d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d88e:	9b01      	ldr	r3, [sp, #4]
    d890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d894:	2b00      	cmp	r3, #0
    d896:	d10d      	bne.n	d8b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d898:	f7f3 f972 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d89e:	9b00      	ldr	r3, [sp, #0]
    d8a0:	f003 0301 	and.w	r3, r3, #1
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d100      	bne.n	d8aa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    d8aa:	490a      	ldr	r1, [pc, #40]	; (d8d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    d8ac:	9b01      	ldr	r3, [sp, #4]
    d8ae:	9a00      	ldr	r2, [sp, #0]
    d8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    d8b4:	4a06      	ldr	r2, [pc, #24]	; (d8d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d8b6:	9b01      	ldr	r3, [sp, #4]
    d8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8bc:	1c5a      	adds	r2, r3, #1
    d8be:	4904      	ldr	r1, [pc, #16]	; (d8d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d8c0:	9b01      	ldr	r3, [sp, #4]
    d8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8c6:	bf00      	nop
    d8c8:	b003      	add	sp, #12
    d8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ce:	bf00      	nop
    d8d0:	1fff9048 	.word	0x1fff9048
    d8d4:	1fff9044 	.word	0x1fff9044

0000d8d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d8d8:	b500      	push	{lr}
    d8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8dc:	f7f3 faa8 	bl	e30 <Sys_GetCoreID>
    d8e0:	4603      	mov	r3, r0
    d8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    d8e4:	4a0d      	ldr	r2, [pc, #52]	; (d91c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d8e6:	9b01      	ldr	r3, [sp, #4]
    d8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ec:	1e5a      	subs	r2, r3, #1
    d8ee:	490b      	ldr	r1, [pc, #44]	; (d91c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d8f0:	9b01      	ldr	r3, [sp, #4]
    d8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    d8f6:	4a0a      	ldr	r2, [pc, #40]	; (d920 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    d8f8:	9b01      	ldr	r3, [sp, #4]
    d8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8fe:	f003 0301 	and.w	r3, r3, #1
    d902:	2b00      	cmp	r3, #0
    d904:	d106      	bne.n	d914 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    d906:	4a05      	ldr	r2, [pc, #20]	; (d91c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d908:	9b01      	ldr	r3, [sp, #4]
    d90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d90e:	2b00      	cmp	r3, #0
    d910:	d100      	bne.n	d914 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d914:	bf00      	nop
    d916:	b003      	add	sp, #12
    d918:	f85d fb04 	ldr.w	pc, [sp], #4
    d91c:	1fff9048 	.word	0x1fff9048
    d920:	1fff9044 	.word	0x1fff9044

0000d924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d924:	b500      	push	{lr}
    d926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d928:	f7f3 fa82 	bl	e30 <Sys_GetCoreID>
    d92c:	4603      	mov	r3, r0
    d92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    d930:	4a10      	ldr	r2, [pc, #64]	; (d974 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d932:	9b01      	ldr	r3, [sp, #4]
    d934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d938:	2b00      	cmp	r3, #0
    d93a:	d10d      	bne.n	d958 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d93c:	f7f3 f920 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d942:	9b00      	ldr	r3, [sp, #0]
    d944:	f003 0301 	and.w	r3, r3, #1
    d948:	2b00      	cmp	r3, #0
    d94a:	d100      	bne.n	d94e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    d94e:	490a      	ldr	r1, [pc, #40]	; (d978 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    d950:	9b01      	ldr	r3, [sp, #4]
    d952:	9a00      	ldr	r2, [sp, #0]
    d954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    d958:	4a06      	ldr	r2, [pc, #24]	; (d974 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d95a:	9b01      	ldr	r3, [sp, #4]
    d95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d960:	1c5a      	adds	r2, r3, #1
    d962:	4904      	ldr	r1, [pc, #16]	; (d974 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d964:	9b01      	ldr	r3, [sp, #4]
    d966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d96a:	bf00      	nop
    d96c:	b003      	add	sp, #12
    d96e:	f85d fb04 	ldr.w	pc, [sp], #4
    d972:	bf00      	nop
    d974:	1fff9050 	.word	0x1fff9050
    d978:	1fff904c 	.word	0x1fff904c

0000d97c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d97c:	b500      	push	{lr}
    d97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d980:	f7f3 fa56 	bl	e30 <Sys_GetCoreID>
    d984:	4603      	mov	r3, r0
    d986:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    d988:	4a0d      	ldr	r2, [pc, #52]	; (d9c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d98a:	9b01      	ldr	r3, [sp, #4]
    d98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d990:	1e5a      	subs	r2, r3, #1
    d992:	490b      	ldr	r1, [pc, #44]	; (d9c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d994:	9b01      	ldr	r3, [sp, #4]
    d996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    d99a:	4a0a      	ldr	r2, [pc, #40]	; (d9c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    d99c:	9b01      	ldr	r3, [sp, #4]
    d99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a2:	f003 0301 	and.w	r3, r3, #1
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	d106      	bne.n	d9b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    d9aa:	4a05      	ldr	r2, [pc, #20]	; (d9c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d9ac:	9b01      	ldr	r3, [sp, #4]
    d9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b2:	2b00      	cmp	r3, #0
    d9b4:	d100      	bne.n	d9b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9b8:	bf00      	nop
    d9ba:	b003      	add	sp, #12
    d9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c0:	1fff9050 	.word	0x1fff9050
    d9c4:	1fff904c 	.word	0x1fff904c

0000d9c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    d9c8:	b500      	push	{lr}
    d9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9cc:	f7f3 fa30 	bl	e30 <Sys_GetCoreID>
    d9d0:	4603      	mov	r3, r0
    d9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    d9d4:	4a10      	ldr	r2, [pc, #64]	; (da18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d9d6:	9b01      	ldr	r3, [sp, #4]
    d9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d10d      	bne.n	d9fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9e0:	f7f3 f8ce 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    d9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9e6:	9b00      	ldr	r3, [sp, #0]
    d9e8:	f003 0301 	and.w	r3, r3, #1
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	d100      	bne.n	d9f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    d9f2:	490a      	ldr	r1, [pc, #40]	; (da1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    d9f4:	9b01      	ldr	r3, [sp, #4]
    d9f6:	9a00      	ldr	r2, [sp, #0]
    d9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    d9fc:	4a06      	ldr	r2, [pc, #24]	; (da18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d9fe:	9b01      	ldr	r3, [sp, #4]
    da00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da04:	1c5a      	adds	r2, r3, #1
    da06:	4904      	ldr	r1, [pc, #16]	; (da18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    da08:	9b01      	ldr	r3, [sp, #4]
    da0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da0e:	bf00      	nop
    da10:	b003      	add	sp, #12
    da12:	f85d fb04 	ldr.w	pc, [sp], #4
    da16:	bf00      	nop
    da18:	1fff9058 	.word	0x1fff9058
    da1c:	1fff9054 	.word	0x1fff9054

0000da20 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    da20:	b500      	push	{lr}
    da22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da24:	f7f3 fa04 	bl	e30 <Sys_GetCoreID>
    da28:	4603      	mov	r3, r0
    da2a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    da2c:	4a0d      	ldr	r2, [pc, #52]	; (da64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    da2e:	9b01      	ldr	r3, [sp, #4]
    da30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da34:	1e5a      	subs	r2, r3, #1
    da36:	490b      	ldr	r1, [pc, #44]	; (da64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    da3e:	4a0a      	ldr	r2, [pc, #40]	; (da68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    da40:	9b01      	ldr	r3, [sp, #4]
    da42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da46:	f003 0301 	and.w	r3, r3, #1
    da4a:	2b00      	cmp	r3, #0
    da4c:	d106      	bne.n	da5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    da4e:	4a05      	ldr	r2, [pc, #20]	; (da64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    da50:	9b01      	ldr	r3, [sp, #4]
    da52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da56:	2b00      	cmp	r3, #0
    da58:	d100      	bne.n	da5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da5c:	bf00      	nop
    da5e:	b003      	add	sp, #12
    da60:	f85d fb04 	ldr.w	pc, [sp], #4
    da64:	1fff9058 	.word	0x1fff9058
    da68:	1fff9054 	.word	0x1fff9054

0000da6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    da6c:	b500      	push	{lr}
    da6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da70:	f7f3 f9de 	bl	e30 <Sys_GetCoreID>
    da74:	4603      	mov	r3, r0
    da76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    da78:	4a10      	ldr	r2, [pc, #64]	; (dabc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    da7a:	9b01      	ldr	r3, [sp, #4]
    da7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da80:	2b00      	cmp	r3, #0
    da82:	d10d      	bne.n	daa0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da84:	f7f3 f87c 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    da88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da8a:	9b00      	ldr	r3, [sp, #0]
    da8c:	f003 0301 	and.w	r3, r3, #1
    da90:	2b00      	cmp	r3, #0
    da92:	d100      	bne.n	da96 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    da96:	490a      	ldr	r1, [pc, #40]	; (dac0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    da98:	9b01      	ldr	r3, [sp, #4]
    da9a:	9a00      	ldr	r2, [sp, #0]
    da9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    daa0:	4a06      	ldr	r2, [pc, #24]	; (dabc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    daa2:	9b01      	ldr	r3, [sp, #4]
    daa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daa8:	1c5a      	adds	r2, r3, #1
    daaa:	4904      	ldr	r1, [pc, #16]	; (dabc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    daac:	9b01      	ldr	r3, [sp, #4]
    daae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dab2:	bf00      	nop
    dab4:	b003      	add	sp, #12
    dab6:	f85d fb04 	ldr.w	pc, [sp], #4
    daba:	bf00      	nop
    dabc:	1fff9060 	.word	0x1fff9060
    dac0:	1fff905c 	.word	0x1fff905c

0000dac4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    dac4:	b500      	push	{lr}
    dac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac8:	f7f3 f9b2 	bl	e30 <Sys_GetCoreID>
    dacc:	4603      	mov	r3, r0
    dace:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    dad0:	4a0d      	ldr	r2, [pc, #52]	; (db08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    dad2:	9b01      	ldr	r3, [sp, #4]
    dad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad8:	1e5a      	subs	r2, r3, #1
    dada:	490b      	ldr	r1, [pc, #44]	; (db08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    dadc:	9b01      	ldr	r3, [sp, #4]
    dade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    dae2:	4a0a      	ldr	r2, [pc, #40]	; (db0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    dae4:	9b01      	ldr	r3, [sp, #4]
    dae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daea:	f003 0301 	and.w	r3, r3, #1
    daee:	2b00      	cmp	r3, #0
    daf0:	d106      	bne.n	db00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    daf2:	4a05      	ldr	r2, [pc, #20]	; (db08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    daf4:	9b01      	ldr	r3, [sp, #4]
    daf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafa:	2b00      	cmp	r3, #0
    dafc:	d100      	bne.n	db00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db00:	bf00      	nop
    db02:	b003      	add	sp, #12
    db04:	f85d fb04 	ldr.w	pc, [sp], #4
    db08:	1fff9060 	.word	0x1fff9060
    db0c:	1fff905c 	.word	0x1fff905c

0000db10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    db10:	b500      	push	{lr}
    db12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db14:	f7f3 f98c 	bl	e30 <Sys_GetCoreID>
    db18:	4603      	mov	r3, r0
    db1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    db1c:	4a10      	ldr	r2, [pc, #64]	; (db60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    db1e:	9b01      	ldr	r3, [sp, #4]
    db20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db24:	2b00      	cmp	r3, #0
    db26:	d10d      	bne.n	db44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db28:	f7f3 f82a 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    db2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db2e:	9b00      	ldr	r3, [sp, #0]
    db30:	f003 0301 	and.w	r3, r3, #1
    db34:	2b00      	cmp	r3, #0
    db36:	d100      	bne.n	db3a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    db3a:	490a      	ldr	r1, [pc, #40]	; (db64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    db3c:	9b01      	ldr	r3, [sp, #4]
    db3e:	9a00      	ldr	r2, [sp, #0]
    db40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    db44:	4a06      	ldr	r2, [pc, #24]	; (db60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    db46:	9b01      	ldr	r3, [sp, #4]
    db48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db4c:	1c5a      	adds	r2, r3, #1
    db4e:	4904      	ldr	r1, [pc, #16]	; (db60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    db50:	9b01      	ldr	r3, [sp, #4]
    db52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db56:	bf00      	nop
    db58:	b003      	add	sp, #12
    db5a:	f85d fb04 	ldr.w	pc, [sp], #4
    db5e:	bf00      	nop
    db60:	1fff9068 	.word	0x1fff9068
    db64:	1fff9064 	.word	0x1fff9064

0000db68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    db68:	b500      	push	{lr}
    db6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db6c:	f7f3 f960 	bl	e30 <Sys_GetCoreID>
    db70:	4603      	mov	r3, r0
    db72:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    db74:	4a0d      	ldr	r2, [pc, #52]	; (dbac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    db76:	9b01      	ldr	r3, [sp, #4]
    db78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db7c:	1e5a      	subs	r2, r3, #1
    db7e:	490b      	ldr	r1, [pc, #44]	; (dbac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    db80:	9b01      	ldr	r3, [sp, #4]
    db82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    db86:	4a0a      	ldr	r2, [pc, #40]	; (dbb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    db88:	9b01      	ldr	r3, [sp, #4]
    db8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db8e:	f003 0301 	and.w	r3, r3, #1
    db92:	2b00      	cmp	r3, #0
    db94:	d106      	bne.n	dba4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    db96:	4a05      	ldr	r2, [pc, #20]	; (dbac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    db98:	9b01      	ldr	r3, [sp, #4]
    db9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db9e:	2b00      	cmp	r3, #0
    dba0:	d100      	bne.n	dba4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dba4:	bf00      	nop
    dba6:	b003      	add	sp, #12
    dba8:	f85d fb04 	ldr.w	pc, [sp], #4
    dbac:	1fff9068 	.word	0x1fff9068
    dbb0:	1fff9064 	.word	0x1fff9064

0000dbb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    dbb4:	b500      	push	{lr}
    dbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbb8:	f7f3 f93a 	bl	e30 <Sys_GetCoreID>
    dbbc:	4603      	mov	r3, r0
    dbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    dbc0:	4a10      	ldr	r2, [pc, #64]	; (dc04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dbc2:	9b01      	ldr	r3, [sp, #4]
    dbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc8:	2b00      	cmp	r3, #0
    dbca:	d10d      	bne.n	dbe8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbcc:	f7f2 ffd8 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    dbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbd2:	9b00      	ldr	r3, [sp, #0]
    dbd4:	f003 0301 	and.w	r3, r3, #1
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d100      	bne.n	dbde <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    dbde:	490a      	ldr	r1, [pc, #40]	; (dc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    dbe0:	9b01      	ldr	r3, [sp, #4]
    dbe2:	9a00      	ldr	r2, [sp, #0]
    dbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    dbe8:	4a06      	ldr	r2, [pc, #24]	; (dc04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dbea:	9b01      	ldr	r3, [sp, #4]
    dbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf0:	1c5a      	adds	r2, r3, #1
    dbf2:	4904      	ldr	r1, [pc, #16]	; (dc04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dbf4:	9b01      	ldr	r3, [sp, #4]
    dbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbfa:	bf00      	nop
    dbfc:	b003      	add	sp, #12
    dbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    dc02:	bf00      	nop
    dc04:	1fff9070 	.word	0x1fff9070
    dc08:	1fff906c 	.word	0x1fff906c

0000dc0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    dc0c:	b500      	push	{lr}
    dc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc10:	f7f3 f90e 	bl	e30 <Sys_GetCoreID>
    dc14:	4603      	mov	r3, r0
    dc16:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    dc18:	4a0d      	ldr	r2, [pc, #52]	; (dc50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    dc1a:	9b01      	ldr	r3, [sp, #4]
    dc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc20:	1e5a      	subs	r2, r3, #1
    dc22:	490b      	ldr	r1, [pc, #44]	; (dc50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    dc2a:	4a0a      	ldr	r2, [pc, #40]	; (dc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    dc2c:	9b01      	ldr	r3, [sp, #4]
    dc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc32:	f003 0301 	and.w	r3, r3, #1
    dc36:	2b00      	cmp	r3, #0
    dc38:	d106      	bne.n	dc48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    dc3a:	4a05      	ldr	r2, [pc, #20]	; (dc50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    dc3c:	9b01      	ldr	r3, [sp, #4]
    dc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc42:	2b00      	cmp	r3, #0
    dc44:	d100      	bne.n	dc48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc48:	bf00      	nop
    dc4a:	b003      	add	sp, #12
    dc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    dc50:	1fff9070 	.word	0x1fff9070
    dc54:	1fff906c 	.word	0x1fff906c

0000dc58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    dc58:	b500      	push	{lr}
    dc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc5c:	f7f3 f8e8 	bl	e30 <Sys_GetCoreID>
    dc60:	4603      	mov	r3, r0
    dc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    dc64:	4a10      	ldr	r2, [pc, #64]	; (dca8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    dc66:	9b01      	ldr	r3, [sp, #4]
    dc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	d10d      	bne.n	dc8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc70:	f7f2 ff86 	bl	b80 <Can_43_FLEXCAN_schm_read_msr>
    dc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc76:	9b00      	ldr	r3, [sp, #0]
    dc78:	f003 0301 	and.w	r3, r3, #1
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d100      	bne.n	dc82 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    dc82:	490a      	ldr	r1, [pc, #40]	; (dcac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    dc84:	9b01      	ldr	r3, [sp, #4]
    dc86:	9a00      	ldr	r2, [sp, #0]
    dc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    dc8c:	4a06      	ldr	r2, [pc, #24]	; (dca8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    dc8e:	9b01      	ldr	r3, [sp, #4]
    dc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc94:	1c5a      	adds	r2, r3, #1
    dc96:	4904      	ldr	r1, [pc, #16]	; (dca8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    dc98:	9b01      	ldr	r3, [sp, #4]
    dc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc9e:	bf00      	nop
    dca0:	b003      	add	sp, #12
    dca2:	f85d fb04 	ldr.w	pc, [sp], #4
    dca6:	bf00      	nop
    dca8:	1fff9078 	.word	0x1fff9078
    dcac:	1fff9074 	.word	0x1fff9074

0000dcb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    dcb0:	b500      	push	{lr}
    dcb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb4:	f7f3 f8bc 	bl	e30 <Sys_GetCoreID>
    dcb8:	4603      	mov	r3, r0
    dcba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    dcbc:	4a0d      	ldr	r2, [pc, #52]	; (dcf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    dcbe:	9b01      	ldr	r3, [sp, #4]
    dcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc4:	1e5a      	subs	r2, r3, #1
    dcc6:	490b      	ldr	r1, [pc, #44]	; (dcf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    dcc8:	9b01      	ldr	r3, [sp, #4]
    dcca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    dcce:	4a0a      	ldr	r2, [pc, #40]	; (dcf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    dcd0:	9b01      	ldr	r3, [sp, #4]
    dcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd6:	f003 0301 	and.w	r3, r3, #1
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d106      	bne.n	dcec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    dcde:	4a05      	ldr	r2, [pc, #20]	; (dcf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    dce0:	9b01      	ldr	r3, [sp, #4]
    dce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d100      	bne.n	dcec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcec:	bf00      	nop
    dcee:	b003      	add	sp, #12
    dcf0:	f85d fb04 	ldr.w	pc, [sp], #4
    dcf4:	1fff9078 	.word	0x1fff9078
    dcf8:	1fff9074 	.word	0x1fff9074

0000dcfc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    dcfc:	b500      	push	{lr}
    dcfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd00:	f7f3 f896 	bl	e30 <Sys_GetCoreID>
    dd04:	4603      	mov	r3, r0
    dd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    dd08:	4a10      	ldr	r2, [pc, #64]	; (dd4c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    dd0a:	9b01      	ldr	r3, [sp, #4]
    dd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd10:	2b00      	cmp	r3, #0
    dd12:	d10d      	bne.n	dd30 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd14:	f7f2 ff3d 	bl	b92 <Dio_schm_read_msr>
    dd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd1a:	9b00      	ldr	r3, [sp, #0]
    dd1c:	f003 0301 	and.w	r3, r3, #1
    dd20:	2b00      	cmp	r3, #0
    dd22:	d100      	bne.n	dd26 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    dd26:	490a      	ldr	r1, [pc, #40]	; (dd50 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    dd28:	9b01      	ldr	r3, [sp, #4]
    dd2a:	9a00      	ldr	r2, [sp, #0]
    dd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    dd30:	4a06      	ldr	r2, [pc, #24]	; (dd4c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    dd32:	9b01      	ldr	r3, [sp, #4]
    dd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd38:	1c5a      	adds	r2, r3, #1
    dd3a:	4904      	ldr	r1, [pc, #16]	; (dd4c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    dd3c:	9b01      	ldr	r3, [sp, #4]
    dd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd42:	bf00      	nop
    dd44:	b003      	add	sp, #12
    dd46:	f85d fb04 	ldr.w	pc, [sp], #4
    dd4a:	bf00      	nop
    dd4c:	1fff9080 	.word	0x1fff9080
    dd50:	1fff907c 	.word	0x1fff907c

0000dd54 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    dd54:	b500      	push	{lr}
    dd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd58:	f7f3 f86a 	bl	e30 <Sys_GetCoreID>
    dd5c:	4603      	mov	r3, r0
    dd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    dd60:	4a0d      	ldr	r2, [pc, #52]	; (dd98 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    dd62:	9b01      	ldr	r3, [sp, #4]
    dd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd68:	1e5a      	subs	r2, r3, #1
    dd6a:	490b      	ldr	r1, [pc, #44]	; (dd98 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    dd6c:	9b01      	ldr	r3, [sp, #4]
    dd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    dd72:	4a0a      	ldr	r2, [pc, #40]	; (dd9c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    dd74:	9b01      	ldr	r3, [sp, #4]
    dd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7a:	f003 0301 	and.w	r3, r3, #1
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d106      	bne.n	dd90 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    dd82:	4a05      	ldr	r2, [pc, #20]	; (dd98 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    dd84:	9b01      	ldr	r3, [sp, #4]
    dd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	d100      	bne.n	dd90 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd90:	bf00      	nop
    dd92:	b003      	add	sp, #12
    dd94:	f85d fb04 	ldr.w	pc, [sp], #4
    dd98:	1fff9080 	.word	0x1fff9080
    dd9c:	1fff907c 	.word	0x1fff907c

0000dda0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    dda0:	b500      	push	{lr}
    dda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dda4:	f7f3 f844 	bl	e30 <Sys_GetCoreID>
    dda8:	4603      	mov	r3, r0
    ddaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    ddac:	4a10      	ldr	r2, [pc, #64]	; (ddf0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    ddae:	9b01      	ldr	r3, [sp, #4]
    ddb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	d10d      	bne.n	ddd4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddb8:	f7f2 feeb 	bl	b92 <Dio_schm_read_msr>
    ddbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddbe:	9b00      	ldr	r3, [sp, #0]
    ddc0:	f003 0301 	and.w	r3, r3, #1
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d100      	bne.n	ddca <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ddca:	490a      	ldr	r1, [pc, #40]	; (ddf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    ddcc:	9b01      	ldr	r3, [sp, #4]
    ddce:	9a00      	ldr	r2, [sp, #0]
    ddd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    ddd4:	4a06      	ldr	r2, [pc, #24]	; (ddf0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    ddd6:	9b01      	ldr	r3, [sp, #4]
    ddd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dddc:	1c5a      	adds	r2, r3, #1
    ddde:	4904      	ldr	r1, [pc, #16]	; (ddf0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    dde0:	9b01      	ldr	r3, [sp, #4]
    dde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dde6:	bf00      	nop
    dde8:	b003      	add	sp, #12
    ddea:	f85d fb04 	ldr.w	pc, [sp], #4
    ddee:	bf00      	nop
    ddf0:	1fff9088 	.word	0x1fff9088
    ddf4:	1fff9084 	.word	0x1fff9084

0000ddf8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    ddf8:	b500      	push	{lr}
    ddfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddfc:	f7f3 f818 	bl	e30 <Sys_GetCoreID>
    de00:	4603      	mov	r3, r0
    de02:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    de04:	4a0d      	ldr	r2, [pc, #52]	; (de3c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    de06:	9b01      	ldr	r3, [sp, #4]
    de08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de0c:	1e5a      	subs	r2, r3, #1
    de0e:	490b      	ldr	r1, [pc, #44]	; (de3c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    de10:	9b01      	ldr	r3, [sp, #4]
    de12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    de16:	4a0a      	ldr	r2, [pc, #40]	; (de40 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    de18:	9b01      	ldr	r3, [sp, #4]
    de1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de1e:	f003 0301 	and.w	r3, r3, #1
    de22:	2b00      	cmp	r3, #0
    de24:	d106      	bne.n	de34 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    de26:	4a05      	ldr	r2, [pc, #20]	; (de3c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    de28:	9b01      	ldr	r3, [sp, #4]
    de2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de2e:	2b00      	cmp	r3, #0
    de30:	d100      	bne.n	de34 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de34:	bf00      	nop
    de36:	b003      	add	sp, #12
    de38:	f85d fb04 	ldr.w	pc, [sp], #4
    de3c:	1fff9088 	.word	0x1fff9088
    de40:	1fff9084 	.word	0x1fff9084

0000de44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    de44:	b500      	push	{lr}
    de46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de48:	f7f2 fff2 	bl	e30 <Sys_GetCoreID>
    de4c:	4603      	mov	r3, r0
    de4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    de50:	4a10      	ldr	r2, [pc, #64]	; (de94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    de52:	9b01      	ldr	r3, [sp, #4]
    de54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de58:	2b00      	cmp	r3, #0
    de5a:	d10d      	bne.n	de78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de5c:	f7f2 fea2 	bl	ba4 <Mcu_schm_read_msr>
    de60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de62:	9b00      	ldr	r3, [sp, #0]
    de64:	f003 0301 	and.w	r3, r3, #1
    de68:	2b00      	cmp	r3, #0
    de6a:	d100      	bne.n	de6e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    de6e:	490a      	ldr	r1, [pc, #40]	; (de98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    de70:	9b01      	ldr	r3, [sp, #4]
    de72:	9a00      	ldr	r2, [sp, #0]
    de74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    de78:	4a06      	ldr	r2, [pc, #24]	; (de94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    de7a:	9b01      	ldr	r3, [sp, #4]
    de7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de80:	1c5a      	adds	r2, r3, #1
    de82:	4904      	ldr	r1, [pc, #16]	; (de94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    de84:	9b01      	ldr	r3, [sp, #4]
    de86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de8a:	bf00      	nop
    de8c:	b003      	add	sp, #12
    de8e:	f85d fb04 	ldr.w	pc, [sp], #4
    de92:	bf00      	nop
    de94:	1fff9090 	.word	0x1fff9090
    de98:	1fff908c 	.word	0x1fff908c

0000de9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    de9c:	b500      	push	{lr}
    de9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dea0:	f7f2 ffc6 	bl	e30 <Sys_GetCoreID>
    dea4:	4603      	mov	r3, r0
    dea6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    dea8:	4a0d      	ldr	r2, [pc, #52]	; (dee0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    deaa:	9b01      	ldr	r3, [sp, #4]
    deac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deb0:	1e5a      	subs	r2, r3, #1
    deb2:	490b      	ldr	r1, [pc, #44]	; (dee0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    deb4:	9b01      	ldr	r3, [sp, #4]
    deb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    deba:	4a0a      	ldr	r2, [pc, #40]	; (dee4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    debc:	9b01      	ldr	r3, [sp, #4]
    debe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec2:	f003 0301 	and.w	r3, r3, #1
    dec6:	2b00      	cmp	r3, #0
    dec8:	d106      	bne.n	ded8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    deca:	4a05      	ldr	r2, [pc, #20]	; (dee0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    decc:	9b01      	ldr	r3, [sp, #4]
    dece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded2:	2b00      	cmp	r3, #0
    ded4:	d100      	bne.n	ded8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ded6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ded8:	bf00      	nop
    deda:	b003      	add	sp, #12
    dedc:	f85d fb04 	ldr.w	pc, [sp], #4
    dee0:	1fff9090 	.word	0x1fff9090
    dee4:	1fff908c 	.word	0x1fff908c

0000dee8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    dee8:	b500      	push	{lr}
    deea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    deec:	f7f2 ffa0 	bl	e30 <Sys_GetCoreID>
    def0:	4603      	mov	r3, r0
    def2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    def4:	4a10      	ldr	r2, [pc, #64]	; (df38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    def6:	9b01      	ldr	r3, [sp, #4]
    def8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    defc:	2b00      	cmp	r3, #0
    defe:	d10d      	bne.n	df1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df00:	f7f2 fe50 	bl	ba4 <Mcu_schm_read_msr>
    df04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df06:	9b00      	ldr	r3, [sp, #0]
    df08:	f003 0301 	and.w	r3, r3, #1
    df0c:	2b00      	cmp	r3, #0
    df0e:	d100      	bne.n	df12 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    df12:	490a      	ldr	r1, [pc, #40]	; (df3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    df14:	9b01      	ldr	r3, [sp, #4]
    df16:	9a00      	ldr	r2, [sp, #0]
    df18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    df1c:	4a06      	ldr	r2, [pc, #24]	; (df38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    df1e:	9b01      	ldr	r3, [sp, #4]
    df20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df24:	1c5a      	adds	r2, r3, #1
    df26:	4904      	ldr	r1, [pc, #16]	; (df38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    df28:	9b01      	ldr	r3, [sp, #4]
    df2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df2e:	bf00      	nop
    df30:	b003      	add	sp, #12
    df32:	f85d fb04 	ldr.w	pc, [sp], #4
    df36:	bf00      	nop
    df38:	1fff9098 	.word	0x1fff9098
    df3c:	1fff9094 	.word	0x1fff9094

0000df40 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    df40:	b500      	push	{lr}
    df42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df44:	f7f2 ff74 	bl	e30 <Sys_GetCoreID>
    df48:	4603      	mov	r3, r0
    df4a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    df4c:	4a0d      	ldr	r2, [pc, #52]	; (df84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    df4e:	9b01      	ldr	r3, [sp, #4]
    df50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df54:	1e5a      	subs	r2, r3, #1
    df56:	490b      	ldr	r1, [pc, #44]	; (df84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    df58:	9b01      	ldr	r3, [sp, #4]
    df5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    df5e:	4a0a      	ldr	r2, [pc, #40]	; (df88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    df60:	9b01      	ldr	r3, [sp, #4]
    df62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df66:	f003 0301 	and.w	r3, r3, #1
    df6a:	2b00      	cmp	r3, #0
    df6c:	d106      	bne.n	df7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    df6e:	4a05      	ldr	r2, [pc, #20]	; (df84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    df70:	9b01      	ldr	r3, [sp, #4]
    df72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df76:	2b00      	cmp	r3, #0
    df78:	d100      	bne.n	df7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df7c:	bf00      	nop
    df7e:	b003      	add	sp, #12
    df80:	f85d fb04 	ldr.w	pc, [sp], #4
    df84:	1fff9098 	.word	0x1fff9098
    df88:	1fff9094 	.word	0x1fff9094

0000df8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    df8c:	b500      	push	{lr}
    df8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df90:	f7f2 ff4e 	bl	e30 <Sys_GetCoreID>
    df94:	4603      	mov	r3, r0
    df96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    df98:	4a10      	ldr	r2, [pc, #64]	; (dfdc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    df9a:	9b01      	ldr	r3, [sp, #4]
    df9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d10d      	bne.n	dfc0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfa4:	f7f2 fdfe 	bl	ba4 <Mcu_schm_read_msr>
    dfa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfaa:	9b00      	ldr	r3, [sp, #0]
    dfac:	f003 0301 	and.w	r3, r3, #1
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d100      	bne.n	dfb6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    dfb6:	490a      	ldr	r1, [pc, #40]	; (dfe0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    dfb8:	9b01      	ldr	r3, [sp, #4]
    dfba:	9a00      	ldr	r2, [sp, #0]
    dfbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    dfc0:	4a06      	ldr	r2, [pc, #24]	; (dfdc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    dfc2:	9b01      	ldr	r3, [sp, #4]
    dfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfc8:	1c5a      	adds	r2, r3, #1
    dfca:	4904      	ldr	r1, [pc, #16]	; (dfdc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    dfcc:	9b01      	ldr	r3, [sp, #4]
    dfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfd2:	bf00      	nop
    dfd4:	b003      	add	sp, #12
    dfd6:	f85d fb04 	ldr.w	pc, [sp], #4
    dfda:	bf00      	nop
    dfdc:	1fff90a0 	.word	0x1fff90a0
    dfe0:	1fff909c 	.word	0x1fff909c

0000dfe4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    dfe4:	b500      	push	{lr}
    dfe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfe8:	f7f2 ff22 	bl	e30 <Sys_GetCoreID>
    dfec:	4603      	mov	r3, r0
    dfee:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    dff0:	4a0d      	ldr	r2, [pc, #52]	; (e028 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    dff2:	9b01      	ldr	r3, [sp, #4]
    dff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff8:	1e5a      	subs	r2, r3, #1
    dffa:	490b      	ldr	r1, [pc, #44]	; (e028 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e002:	4a0a      	ldr	r2, [pc, #40]	; (e02c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    e004:	9b01      	ldr	r3, [sp, #4]
    e006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e00a:	f003 0301 	and.w	r3, r3, #1
    e00e:	2b00      	cmp	r3, #0
    e010:	d106      	bne.n	e020 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    e012:	4a05      	ldr	r2, [pc, #20]	; (e028 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    e014:	9b01      	ldr	r3, [sp, #4]
    e016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01a:	2b00      	cmp	r3, #0
    e01c:	d100      	bne.n	e020 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e01e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e020:	bf00      	nop
    e022:	b003      	add	sp, #12
    e024:	f85d fb04 	ldr.w	pc, [sp], #4
    e028:	1fff90a0 	.word	0x1fff90a0
    e02c:	1fff909c 	.word	0x1fff909c

0000e030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    e030:	b500      	push	{lr}
    e032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e034:	f7f2 fefc 	bl	e30 <Sys_GetCoreID>
    e038:	4603      	mov	r3, r0
    e03a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    e03c:	4a10      	ldr	r2, [pc, #64]	; (e080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e03e:	9b01      	ldr	r3, [sp, #4]
    e040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e044:	2b00      	cmp	r3, #0
    e046:	d10d      	bne.n	e064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e048:	f7f2 fdb5 	bl	bb6 <Port_schm_read_msr>
    e04c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e04e:	9b00      	ldr	r3, [sp, #0]
    e050:	f003 0301 	and.w	r3, r3, #1
    e054:	2b00      	cmp	r3, #0
    e056:	d100      	bne.n	e05a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e05a:	490a      	ldr	r1, [pc, #40]	; (e084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    e05c:	9b01      	ldr	r3, [sp, #4]
    e05e:	9a00      	ldr	r2, [sp, #0]
    e060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    e064:	4a06      	ldr	r2, [pc, #24]	; (e080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e066:	9b01      	ldr	r3, [sp, #4]
    e068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06c:	1c5a      	adds	r2, r3, #1
    e06e:	4904      	ldr	r1, [pc, #16]	; (e080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e070:	9b01      	ldr	r3, [sp, #4]
    e072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e076:	bf00      	nop
    e078:	b003      	add	sp, #12
    e07a:	f85d fb04 	ldr.w	pc, [sp], #4
    e07e:	bf00      	nop
    e080:	1fff90a8 	.word	0x1fff90a8
    e084:	1fff90a4 	.word	0x1fff90a4

0000e088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    e088:	b500      	push	{lr}
    e08a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e08c:	f7f2 fed0 	bl	e30 <Sys_GetCoreID>
    e090:	4603      	mov	r3, r0
    e092:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    e094:	4a0d      	ldr	r2, [pc, #52]	; (e0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e096:	9b01      	ldr	r3, [sp, #4]
    e098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e09c:	1e5a      	subs	r2, r3, #1
    e09e:	490b      	ldr	r1, [pc, #44]	; (e0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e0a6:	4a0a      	ldr	r2, [pc, #40]	; (e0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    e0a8:	9b01      	ldr	r3, [sp, #4]
    e0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ae:	f003 0301 	and.w	r3, r3, #1
    e0b2:	2b00      	cmp	r3, #0
    e0b4:	d106      	bne.n	e0c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    e0b6:	4a05      	ldr	r2, [pc, #20]	; (e0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e0b8:	9b01      	ldr	r3, [sp, #4]
    e0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0be:	2b00      	cmp	r3, #0
    e0c0:	d100      	bne.n	e0c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0c4:	bf00      	nop
    e0c6:	b003      	add	sp, #12
    e0c8:	f85d fb04 	ldr.w	pc, [sp], #4
    e0cc:	1fff90a8 	.word	0x1fff90a8
    e0d0:	1fff90a4 	.word	0x1fff90a4

0000e0d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e0d4:	b500      	push	{lr}
    e0d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0d8:	f7f2 feaa 	bl	e30 <Sys_GetCoreID>
    e0dc:	4603      	mov	r3, r0
    e0de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    e0e0:	4a10      	ldr	r2, [pc, #64]	; (e124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e0e2:	9b01      	ldr	r3, [sp, #4]
    e0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d10d      	bne.n	e108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0ec:	f7f2 fd63 	bl	bb6 <Port_schm_read_msr>
    e0f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0f2:	9b00      	ldr	r3, [sp, #0]
    e0f4:	f003 0301 	and.w	r3, r3, #1
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d100      	bne.n	e0fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e0fe:	490a      	ldr	r1, [pc, #40]	; (e128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    e100:	9b01      	ldr	r3, [sp, #4]
    e102:	9a00      	ldr	r2, [sp, #0]
    e104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    e108:	4a06      	ldr	r2, [pc, #24]	; (e124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e10a:	9b01      	ldr	r3, [sp, #4]
    e10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e110:	1c5a      	adds	r2, r3, #1
    e112:	4904      	ldr	r1, [pc, #16]	; (e124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e114:	9b01      	ldr	r3, [sp, #4]
    e116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e11a:	bf00      	nop
    e11c:	b003      	add	sp, #12
    e11e:	f85d fb04 	ldr.w	pc, [sp], #4
    e122:	bf00      	nop
    e124:	1fff90b0 	.word	0x1fff90b0
    e128:	1fff90ac 	.word	0x1fff90ac

0000e12c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e12c:	b500      	push	{lr}
    e12e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e130:	f7f2 fe7e 	bl	e30 <Sys_GetCoreID>
    e134:	4603      	mov	r3, r0
    e136:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    e138:	4a0d      	ldr	r2, [pc, #52]	; (e170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e13a:	9b01      	ldr	r3, [sp, #4]
    e13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e140:	1e5a      	subs	r2, r3, #1
    e142:	490b      	ldr	r1, [pc, #44]	; (e170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e144:	9b01      	ldr	r3, [sp, #4]
    e146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e14a:	4a0a      	ldr	r2, [pc, #40]	; (e174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    e14c:	9b01      	ldr	r3, [sp, #4]
    e14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e152:	f003 0301 	and.w	r3, r3, #1
    e156:	2b00      	cmp	r3, #0
    e158:	d106      	bne.n	e168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    e15a:	4a05      	ldr	r2, [pc, #20]	; (e170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e15c:	9b01      	ldr	r3, [sp, #4]
    e15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e162:	2b00      	cmp	r3, #0
    e164:	d100      	bne.n	e168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e168:	bf00      	nop
    e16a:	b003      	add	sp, #12
    e16c:	f85d fb04 	ldr.w	pc, [sp], #4
    e170:	1fff90b0 	.word	0x1fff90b0
    e174:	1fff90ac 	.word	0x1fff90ac

0000e178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e178:	b500      	push	{lr}
    e17a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e17c:	f7f2 fe58 	bl	e30 <Sys_GetCoreID>
    e180:	4603      	mov	r3, r0
    e182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    e184:	4a10      	ldr	r2, [pc, #64]	; (e1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e186:	9b01      	ldr	r3, [sp, #4]
    e188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d10d      	bne.n	e1ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e190:	f7f2 fd11 	bl	bb6 <Port_schm_read_msr>
    e194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e196:	9b00      	ldr	r3, [sp, #0]
    e198:	f003 0301 	and.w	r3, r3, #1
    e19c:	2b00      	cmp	r3, #0
    e19e:	d100      	bne.n	e1a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e1a2:	490a      	ldr	r1, [pc, #40]	; (e1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    e1a4:	9b01      	ldr	r3, [sp, #4]
    e1a6:	9a00      	ldr	r2, [sp, #0]
    e1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    e1ac:	4a06      	ldr	r2, [pc, #24]	; (e1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e1ae:	9b01      	ldr	r3, [sp, #4]
    e1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b4:	1c5a      	adds	r2, r3, #1
    e1b6:	4904      	ldr	r1, [pc, #16]	; (e1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e1b8:	9b01      	ldr	r3, [sp, #4]
    e1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1be:	bf00      	nop
    e1c0:	b003      	add	sp, #12
    e1c2:	f85d fb04 	ldr.w	pc, [sp], #4
    e1c6:	bf00      	nop
    e1c8:	1fff90b8 	.word	0x1fff90b8
    e1cc:	1fff90b4 	.word	0x1fff90b4

0000e1d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e1d0:	b500      	push	{lr}
    e1d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1d4:	f7f2 fe2c 	bl	e30 <Sys_GetCoreID>
    e1d8:	4603      	mov	r3, r0
    e1da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    e1dc:	4a0d      	ldr	r2, [pc, #52]	; (e214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e1de:	9b01      	ldr	r3, [sp, #4]
    e1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1e4:	1e5a      	subs	r2, r3, #1
    e1e6:	490b      	ldr	r1, [pc, #44]	; (e214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e1ee:	4a0a      	ldr	r2, [pc, #40]	; (e218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    e1f0:	9b01      	ldr	r3, [sp, #4]
    e1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f6:	f003 0301 	and.w	r3, r3, #1
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	d106      	bne.n	e20c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    e1fe:	4a05      	ldr	r2, [pc, #20]	; (e214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e200:	9b01      	ldr	r3, [sp, #4]
    e202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e206:	2b00      	cmp	r3, #0
    e208:	d100      	bne.n	e20c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e20a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e20c:	bf00      	nop
    e20e:	b003      	add	sp, #12
    e210:	f85d fb04 	ldr.w	pc, [sp], #4
    e214:	1fff90b8 	.word	0x1fff90b8
    e218:	1fff90b4 	.word	0x1fff90b4

0000e21c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e21c:	b500      	push	{lr}
    e21e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e220:	f7f2 fe06 	bl	e30 <Sys_GetCoreID>
    e224:	4603      	mov	r3, r0
    e226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    e228:	4a10      	ldr	r2, [pc, #64]	; (e26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e22a:	9b01      	ldr	r3, [sp, #4]
    e22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e230:	2b00      	cmp	r3, #0
    e232:	d10d      	bne.n	e250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e234:	f7f2 fcbf 	bl	bb6 <Port_schm_read_msr>
    e238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e23a:	9b00      	ldr	r3, [sp, #0]
    e23c:	f003 0301 	and.w	r3, r3, #1
    e240:	2b00      	cmp	r3, #0
    e242:	d100      	bne.n	e246 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    e246:	490a      	ldr	r1, [pc, #40]	; (e270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    e248:	9b01      	ldr	r3, [sp, #4]
    e24a:	9a00      	ldr	r2, [sp, #0]
    e24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    e250:	4a06      	ldr	r2, [pc, #24]	; (e26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e252:	9b01      	ldr	r3, [sp, #4]
    e254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e258:	1c5a      	adds	r2, r3, #1
    e25a:	4904      	ldr	r1, [pc, #16]	; (e26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e25c:	9b01      	ldr	r3, [sp, #4]
    e25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e262:	bf00      	nop
    e264:	b003      	add	sp, #12
    e266:	f85d fb04 	ldr.w	pc, [sp], #4
    e26a:	bf00      	nop
    e26c:	1fff90c0 	.word	0x1fff90c0
    e270:	1fff90bc 	.word	0x1fff90bc

0000e274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e274:	b500      	push	{lr}
    e276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e278:	f7f2 fdda 	bl	e30 <Sys_GetCoreID>
    e27c:	4603      	mov	r3, r0
    e27e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    e280:	4a0d      	ldr	r2, [pc, #52]	; (e2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e282:	9b01      	ldr	r3, [sp, #4]
    e284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e288:	1e5a      	subs	r2, r3, #1
    e28a:	490b      	ldr	r1, [pc, #44]	; (e2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e28c:	9b01      	ldr	r3, [sp, #4]
    e28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    e292:	4a0a      	ldr	r2, [pc, #40]	; (e2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    e294:	9b01      	ldr	r3, [sp, #4]
    e296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e29a:	f003 0301 	and.w	r3, r3, #1
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d106      	bne.n	e2b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    e2a2:	4a05      	ldr	r2, [pc, #20]	; (e2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e2a4:	9b01      	ldr	r3, [sp, #4]
    e2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d100      	bne.n	e2b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2b0:	bf00      	nop
    e2b2:	b003      	add	sp, #12
    e2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    e2b8:	1fff90c0 	.word	0x1fff90c0
    e2bc:	1fff90bc 	.word	0x1fff90bc

0000e2c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e2c0:	b500      	push	{lr}
    e2c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2c4:	f7f2 fdb4 	bl	e30 <Sys_GetCoreID>
    e2c8:	4603      	mov	r3, r0
    e2ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    e2cc:	4a10      	ldr	r2, [pc, #64]	; (e310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e2ce:	9b01      	ldr	r3, [sp, #4]
    e2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d10d      	bne.n	e2f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2d8:	f7f2 fc6d 	bl	bb6 <Port_schm_read_msr>
    e2dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2de:	9b00      	ldr	r3, [sp, #0]
    e2e0:	f003 0301 	and.w	r3, r3, #1
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d100      	bne.n	e2ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    e2ea:	490a      	ldr	r1, [pc, #40]	; (e314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    e2ec:	9b01      	ldr	r3, [sp, #4]
    e2ee:	9a00      	ldr	r2, [sp, #0]
    e2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    e2f4:	4a06      	ldr	r2, [pc, #24]	; (e310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e2f6:	9b01      	ldr	r3, [sp, #4]
    e2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2fc:	1c5a      	adds	r2, r3, #1
    e2fe:	4904      	ldr	r1, [pc, #16]	; (e310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e300:	9b01      	ldr	r3, [sp, #4]
    e302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e306:	bf00      	nop
    e308:	b003      	add	sp, #12
    e30a:	f85d fb04 	ldr.w	pc, [sp], #4
    e30e:	bf00      	nop
    e310:	1fff90c8 	.word	0x1fff90c8
    e314:	1fff90c4 	.word	0x1fff90c4

0000e318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e318:	b500      	push	{lr}
    e31a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e31c:	f7f2 fd88 	bl	e30 <Sys_GetCoreID>
    e320:	4603      	mov	r3, r0
    e322:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    e324:	4a0d      	ldr	r2, [pc, #52]	; (e35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e326:	9b01      	ldr	r3, [sp, #4]
    e328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e32c:	1e5a      	subs	r2, r3, #1
    e32e:	490b      	ldr	r1, [pc, #44]	; (e35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e330:	9b01      	ldr	r3, [sp, #4]
    e332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    e336:	4a0a      	ldr	r2, [pc, #40]	; (e360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    e338:	9b01      	ldr	r3, [sp, #4]
    e33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e33e:	f003 0301 	and.w	r3, r3, #1
    e342:	2b00      	cmp	r3, #0
    e344:	d106      	bne.n	e354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    e346:	4a05      	ldr	r2, [pc, #20]	; (e35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e348:	9b01      	ldr	r3, [sp, #4]
    e34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e34e:	2b00      	cmp	r3, #0
    e350:	d100      	bne.n	e354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e354:	bf00      	nop
    e356:	b003      	add	sp, #12
    e358:	f85d fb04 	ldr.w	pc, [sp], #4
    e35c:	1fff90c8 	.word	0x1fff90c8
    e360:	1fff90c4 	.word	0x1fff90c4

0000e364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e364:	b500      	push	{lr}
    e366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e368:	f7f2 fd62 	bl	e30 <Sys_GetCoreID>
    e36c:	4603      	mov	r3, r0
    e36e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    e370:	4a10      	ldr	r2, [pc, #64]	; (e3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e372:	9b01      	ldr	r3, [sp, #4]
    e374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e378:	2b00      	cmp	r3, #0
    e37a:	d10d      	bne.n	e398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e37c:	f7f2 fc1b 	bl	bb6 <Port_schm_read_msr>
    e380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e382:	9b00      	ldr	r3, [sp, #0]
    e384:	f003 0301 	and.w	r3, r3, #1
    e388:	2b00      	cmp	r3, #0
    e38a:	d100      	bne.n	e38e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e38c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    e38e:	490a      	ldr	r1, [pc, #40]	; (e3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    e390:	9b01      	ldr	r3, [sp, #4]
    e392:	9a00      	ldr	r2, [sp, #0]
    e394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    e398:	4a06      	ldr	r2, [pc, #24]	; (e3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e39a:	9b01      	ldr	r3, [sp, #4]
    e39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a0:	1c5a      	adds	r2, r3, #1
    e3a2:	4904      	ldr	r1, [pc, #16]	; (e3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e3a4:	9b01      	ldr	r3, [sp, #4]
    e3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3aa:	bf00      	nop
    e3ac:	b003      	add	sp, #12
    e3ae:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b2:	bf00      	nop
    e3b4:	1fff90d0 	.word	0x1fff90d0
    e3b8:	1fff90cc 	.word	0x1fff90cc

0000e3bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e3bc:	b500      	push	{lr}
    e3be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3c0:	f7f2 fd36 	bl	e30 <Sys_GetCoreID>
    e3c4:	4603      	mov	r3, r0
    e3c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    e3c8:	4a0d      	ldr	r2, [pc, #52]	; (e400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e3ca:	9b01      	ldr	r3, [sp, #4]
    e3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3d0:	1e5a      	subs	r2, r3, #1
    e3d2:	490b      	ldr	r1, [pc, #44]	; (e400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e3d4:	9b01      	ldr	r3, [sp, #4]
    e3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    e3da:	4a0a      	ldr	r2, [pc, #40]	; (e404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    e3dc:	9b01      	ldr	r3, [sp, #4]
    e3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e2:	f003 0301 	and.w	r3, r3, #1
    e3e6:	2b00      	cmp	r3, #0
    e3e8:	d106      	bne.n	e3f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    e3ea:	4a05      	ldr	r2, [pc, #20]	; (e400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e3ec:	9b01      	ldr	r3, [sp, #4]
    e3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	d100      	bne.n	e3f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3f8:	bf00      	nop
    e3fa:	b003      	add	sp, #12
    e3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    e400:	1fff90d0 	.word	0x1fff90d0
    e404:	1fff90cc 	.word	0x1fff90cc

0000e408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e408:	b500      	push	{lr}
    e40a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e40c:	f7f2 fd10 	bl	e30 <Sys_GetCoreID>
    e410:	4603      	mov	r3, r0
    e412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    e414:	4a10      	ldr	r2, [pc, #64]	; (e458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e416:	9b01      	ldr	r3, [sp, #4]
    e418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e41c:	2b00      	cmp	r3, #0
    e41e:	d10d      	bne.n	e43c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e420:	f7f2 fbc9 	bl	bb6 <Port_schm_read_msr>
    e424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e426:	9b00      	ldr	r3, [sp, #0]
    e428:	f003 0301 	and.w	r3, r3, #1
    e42c:	2b00      	cmp	r3, #0
    e42e:	d100      	bne.n	e432 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    e432:	490a      	ldr	r1, [pc, #40]	; (e45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    e434:	9b01      	ldr	r3, [sp, #4]
    e436:	9a00      	ldr	r2, [sp, #0]
    e438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    e43c:	4a06      	ldr	r2, [pc, #24]	; (e458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e43e:	9b01      	ldr	r3, [sp, #4]
    e440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e444:	1c5a      	adds	r2, r3, #1
    e446:	4904      	ldr	r1, [pc, #16]	; (e458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e448:	9b01      	ldr	r3, [sp, #4]
    e44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e44e:	bf00      	nop
    e450:	b003      	add	sp, #12
    e452:	f85d fb04 	ldr.w	pc, [sp], #4
    e456:	bf00      	nop
    e458:	1fff90d8 	.word	0x1fff90d8
    e45c:	1fff90d4 	.word	0x1fff90d4

0000e460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e460:	b500      	push	{lr}
    e462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e464:	f7f2 fce4 	bl	e30 <Sys_GetCoreID>
    e468:	4603      	mov	r3, r0
    e46a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    e46c:	4a0d      	ldr	r2, [pc, #52]	; (e4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e46e:	9b01      	ldr	r3, [sp, #4]
    e470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e474:	1e5a      	subs	r2, r3, #1
    e476:	490b      	ldr	r1, [pc, #44]	; (e4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    e47e:	4a0a      	ldr	r2, [pc, #40]	; (e4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    e480:	9b01      	ldr	r3, [sp, #4]
    e482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e486:	f003 0301 	and.w	r3, r3, #1
    e48a:	2b00      	cmp	r3, #0
    e48c:	d106      	bne.n	e49c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    e48e:	4a05      	ldr	r2, [pc, #20]	; (e4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e490:	9b01      	ldr	r3, [sp, #4]
    e492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e496:	2b00      	cmp	r3, #0
    e498:	d100      	bne.n	e49c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e49a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e49c:	bf00      	nop
    e49e:	b003      	add	sp, #12
    e4a0:	f85d fb04 	ldr.w	pc, [sp], #4
    e4a4:	1fff90d8 	.word	0x1fff90d8
    e4a8:	1fff90d4 	.word	0x1fff90d4

0000e4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e4ac:	b500      	push	{lr}
    e4ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b0:	f7f2 fcbe 	bl	e30 <Sys_GetCoreID>
    e4b4:	4603      	mov	r3, r0
    e4b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    e4b8:	4a10      	ldr	r2, [pc, #64]	; (e4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e4ba:	9b01      	ldr	r3, [sp, #4]
    e4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	d10d      	bne.n	e4e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4c4:	f7f2 fb77 	bl	bb6 <Port_schm_read_msr>
    e4c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4ca:	9b00      	ldr	r3, [sp, #0]
    e4cc:	f003 0301 	and.w	r3, r3, #1
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	d100      	bne.n	e4d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    e4d6:	490a      	ldr	r1, [pc, #40]	; (e500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    e4d8:	9b01      	ldr	r3, [sp, #4]
    e4da:	9a00      	ldr	r2, [sp, #0]
    e4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    e4e0:	4a06      	ldr	r2, [pc, #24]	; (e4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e4e2:	9b01      	ldr	r3, [sp, #4]
    e4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e8:	1c5a      	adds	r2, r3, #1
    e4ea:	4904      	ldr	r1, [pc, #16]	; (e4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e4ec:	9b01      	ldr	r3, [sp, #4]
    e4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4f2:	bf00      	nop
    e4f4:	b003      	add	sp, #12
    e4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e4fa:	bf00      	nop
    e4fc:	1fff90e0 	.word	0x1fff90e0
    e500:	1fff90dc 	.word	0x1fff90dc

0000e504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e504:	b500      	push	{lr}
    e506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e508:	f7f2 fc92 	bl	e30 <Sys_GetCoreID>
    e50c:	4603      	mov	r3, r0
    e50e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    e510:	4a0d      	ldr	r2, [pc, #52]	; (e548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e512:	9b01      	ldr	r3, [sp, #4]
    e514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e518:	1e5a      	subs	r2, r3, #1
    e51a:	490b      	ldr	r1, [pc, #44]	; (e548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e51c:	9b01      	ldr	r3, [sp, #4]
    e51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    e522:	4a0a      	ldr	r2, [pc, #40]	; (e54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    e524:	9b01      	ldr	r3, [sp, #4]
    e526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e52a:	f003 0301 	and.w	r3, r3, #1
    e52e:	2b00      	cmp	r3, #0
    e530:	d106      	bne.n	e540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    e532:	4a05      	ldr	r2, [pc, #20]	; (e548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53a:	2b00      	cmp	r3, #0
    e53c:	d100      	bne.n	e540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e53e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e540:	bf00      	nop
    e542:	b003      	add	sp, #12
    e544:	f85d fb04 	ldr.w	pc, [sp], #4
    e548:	1fff90e0 	.word	0x1fff90e0
    e54c:	1fff90dc 	.word	0x1fff90dc

0000e550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e550:	b500      	push	{lr}
    e552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e554:	f7f2 fc6c 	bl	e30 <Sys_GetCoreID>
    e558:	4603      	mov	r3, r0
    e55a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    e55c:	4a10      	ldr	r2, [pc, #64]	; (e5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e55e:	9b01      	ldr	r3, [sp, #4]
    e560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e564:	2b00      	cmp	r3, #0
    e566:	d10d      	bne.n	e584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e568:	f7f2 fb25 	bl	bb6 <Port_schm_read_msr>
    e56c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e56e:	9b00      	ldr	r3, [sp, #0]
    e570:	f003 0301 	and.w	r3, r3, #1
    e574:	2b00      	cmp	r3, #0
    e576:	d100      	bne.n	e57a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    e57a:	490a      	ldr	r1, [pc, #40]	; (e5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    e57c:	9b01      	ldr	r3, [sp, #4]
    e57e:	9a00      	ldr	r2, [sp, #0]
    e580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    e584:	4a06      	ldr	r2, [pc, #24]	; (e5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e586:	9b01      	ldr	r3, [sp, #4]
    e588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e58c:	1c5a      	adds	r2, r3, #1
    e58e:	4904      	ldr	r1, [pc, #16]	; (e5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e590:	9b01      	ldr	r3, [sp, #4]
    e592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e596:	bf00      	nop
    e598:	b003      	add	sp, #12
    e59a:	f85d fb04 	ldr.w	pc, [sp], #4
    e59e:	bf00      	nop
    e5a0:	1fff90e8 	.word	0x1fff90e8
    e5a4:	1fff90e4 	.word	0x1fff90e4

0000e5a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e5a8:	b500      	push	{lr}
    e5aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5ac:	f7f2 fc40 	bl	e30 <Sys_GetCoreID>
    e5b0:	4603      	mov	r3, r0
    e5b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    e5b4:	4a0d      	ldr	r2, [pc, #52]	; (e5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e5b6:	9b01      	ldr	r3, [sp, #4]
    e5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5bc:	1e5a      	subs	r2, r3, #1
    e5be:	490b      	ldr	r1, [pc, #44]	; (e5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    e5c6:	4a0a      	ldr	r2, [pc, #40]	; (e5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    e5c8:	9b01      	ldr	r3, [sp, #4]
    e5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5ce:	f003 0301 	and.w	r3, r3, #1
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d106      	bne.n	e5e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    e5d6:	4a05      	ldr	r2, [pc, #20]	; (e5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e5d8:	9b01      	ldr	r3, [sp, #4]
    e5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5de:	2b00      	cmp	r3, #0
    e5e0:	d100      	bne.n	e5e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5e4:	bf00      	nop
    e5e6:	b003      	add	sp, #12
    e5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    e5ec:	1fff90e8 	.word	0x1fff90e8
    e5f0:	1fff90e4 	.word	0x1fff90e4

0000e5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    e5f4:	b500      	push	{lr}
    e5f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5f8:	f7f2 fc1a 	bl	e30 <Sys_GetCoreID>
    e5fc:	4603      	mov	r3, r0
    e5fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    e600:	4a10      	ldr	r2, [pc, #64]	; (e644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    e602:	9b01      	ldr	r3, [sp, #4]
    e604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e608:	2b00      	cmp	r3, #0
    e60a:	d10d      	bne.n	e628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e60c:	f7f2 fad3 	bl	bb6 <Port_schm_read_msr>
    e610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e612:	9b00      	ldr	r3, [sp, #0]
    e614:	f003 0301 	and.w	r3, r3, #1
    e618:	2b00      	cmp	r3, #0
    e61a:	d100      	bne.n	e61e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e61c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    e61e:	490a      	ldr	r1, [pc, #40]	; (e648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    e620:	9b01      	ldr	r3, [sp, #4]
    e622:	9a00      	ldr	r2, [sp, #0]
    e624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    e628:	4a06      	ldr	r2, [pc, #24]	; (e644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    e62a:	9b01      	ldr	r3, [sp, #4]
    e62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e630:	1c5a      	adds	r2, r3, #1
    e632:	4904      	ldr	r1, [pc, #16]	; (e644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    e634:	9b01      	ldr	r3, [sp, #4]
    e636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e63a:	bf00      	nop
    e63c:	b003      	add	sp, #12
    e63e:	f85d fb04 	ldr.w	pc, [sp], #4
    e642:	bf00      	nop
    e644:	1fff90f0 	.word	0x1fff90f0
    e648:	1fff90ec 	.word	0x1fff90ec

0000e64c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    e64c:	b500      	push	{lr}
    e64e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e650:	f7f2 fbee 	bl	e30 <Sys_GetCoreID>
    e654:	4603      	mov	r3, r0
    e656:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    e658:	4a0d      	ldr	r2, [pc, #52]	; (e690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    e65a:	9b01      	ldr	r3, [sp, #4]
    e65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e660:	1e5a      	subs	r2, r3, #1
    e662:	490b      	ldr	r1, [pc, #44]	; (e690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    e66a:	4a0a      	ldr	r2, [pc, #40]	; (e694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    e66c:	9b01      	ldr	r3, [sp, #4]
    e66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e672:	f003 0301 	and.w	r3, r3, #1
    e676:	2b00      	cmp	r3, #0
    e678:	d106      	bne.n	e688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    e67a:	4a05      	ldr	r2, [pc, #20]	; (e690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    e67c:	9b01      	ldr	r3, [sp, #4]
    e67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e682:	2b00      	cmp	r3, #0
    e684:	d100      	bne.n	e688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e688:	bf00      	nop
    e68a:	b003      	add	sp, #12
    e68c:	f85d fb04 	ldr.w	pc, [sp], #4
    e690:	1fff90f0 	.word	0x1fff90f0
    e694:	1fff90ec 	.word	0x1fff90ec

0000e698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    e698:	b500      	push	{lr}
    e69a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e69c:	f7f2 fbc8 	bl	e30 <Sys_GetCoreID>
    e6a0:	4603      	mov	r3, r0
    e6a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    e6a4:	4a10      	ldr	r2, [pc, #64]	; (e6e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    e6a6:	9b01      	ldr	r3, [sp, #4]
    e6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d10d      	bne.n	e6cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6b0:	f7f2 fa81 	bl	bb6 <Port_schm_read_msr>
    e6b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6b6:	9b00      	ldr	r3, [sp, #0]
    e6b8:	f003 0301 	and.w	r3, r3, #1
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d100      	bne.n	e6c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    e6c2:	490a      	ldr	r1, [pc, #40]	; (e6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    e6c4:	9b01      	ldr	r3, [sp, #4]
    e6c6:	9a00      	ldr	r2, [sp, #0]
    e6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    e6cc:	4a06      	ldr	r2, [pc, #24]	; (e6e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    e6ce:	9b01      	ldr	r3, [sp, #4]
    e6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d4:	1c5a      	adds	r2, r3, #1
    e6d6:	4904      	ldr	r1, [pc, #16]	; (e6e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    e6d8:	9b01      	ldr	r3, [sp, #4]
    e6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6de:	bf00      	nop
    e6e0:	b003      	add	sp, #12
    e6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    e6e6:	bf00      	nop
    e6e8:	1fff90f8 	.word	0x1fff90f8
    e6ec:	1fff90f4 	.word	0x1fff90f4

0000e6f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    e6f0:	b500      	push	{lr}
    e6f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6f4:	f7f2 fb9c 	bl	e30 <Sys_GetCoreID>
    e6f8:	4603      	mov	r3, r0
    e6fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    e6fc:	4a0d      	ldr	r2, [pc, #52]	; (e734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e6fe:	9b01      	ldr	r3, [sp, #4]
    e700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e704:	1e5a      	subs	r2, r3, #1
    e706:	490b      	ldr	r1, [pc, #44]	; (e734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    e70e:	4a0a      	ldr	r2, [pc, #40]	; (e738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    e710:	9b01      	ldr	r3, [sp, #4]
    e712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e716:	f003 0301 	and.w	r3, r3, #1
    e71a:	2b00      	cmp	r3, #0
    e71c:	d106      	bne.n	e72c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    e71e:	4a05      	ldr	r2, [pc, #20]	; (e734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e720:	9b01      	ldr	r3, [sp, #4]
    e722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e726:	2b00      	cmp	r3, #0
    e728:	d100      	bne.n	e72c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e72a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e72c:	bf00      	nop
    e72e:	b003      	add	sp, #12
    e730:	f85d fb04 	ldr.w	pc, [sp], #4
    e734:	1fff90f8 	.word	0x1fff90f8
    e738:	1fff90f4 	.word	0x1fff90f4

0000e73c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e73c:	b500      	push	{lr}
    e73e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e740:	f7f2 fb76 	bl	e30 <Sys_GetCoreID>
    e744:	4603      	mov	r3, r0
    e746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    e748:	4a10      	ldr	r2, [pc, #64]	; (e78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e74a:	9b01      	ldr	r3, [sp, #4]
    e74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e750:	2b00      	cmp	r3, #0
    e752:	d10d      	bne.n	e770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e754:	f7f2 fa2f 	bl	bb6 <Port_schm_read_msr>
    e758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e75a:	9b00      	ldr	r3, [sp, #0]
    e75c:	f003 0301 	and.w	r3, r3, #1
    e760:	2b00      	cmp	r3, #0
    e762:	d100      	bne.n	e766 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    e766:	490a      	ldr	r1, [pc, #40]	; (e790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    e768:	9b01      	ldr	r3, [sp, #4]
    e76a:	9a00      	ldr	r2, [sp, #0]
    e76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    e770:	4a06      	ldr	r2, [pc, #24]	; (e78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e772:	9b01      	ldr	r3, [sp, #4]
    e774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e778:	1c5a      	adds	r2, r3, #1
    e77a:	4904      	ldr	r1, [pc, #16]	; (e78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e77c:	9b01      	ldr	r3, [sp, #4]
    e77e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e782:	bf00      	nop
    e784:	b003      	add	sp, #12
    e786:	f85d fb04 	ldr.w	pc, [sp], #4
    e78a:	bf00      	nop
    e78c:	1fff9100 	.word	0x1fff9100
    e790:	1fff90fc 	.word	0x1fff90fc

0000e794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e794:	b500      	push	{lr}
    e796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e798:	f7f2 fb4a 	bl	e30 <Sys_GetCoreID>
    e79c:	4603      	mov	r3, r0
    e79e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    e7a0:	4a0d      	ldr	r2, [pc, #52]	; (e7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e7a2:	9b01      	ldr	r3, [sp, #4]
    e7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7a8:	1e5a      	subs	r2, r3, #1
    e7aa:	490b      	ldr	r1, [pc, #44]	; (e7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e7ac:	9b01      	ldr	r3, [sp, #4]
    e7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    e7b2:	4a0a      	ldr	r2, [pc, #40]	; (e7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    e7b4:	9b01      	ldr	r3, [sp, #4]
    e7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ba:	f003 0301 	and.w	r3, r3, #1
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d106      	bne.n	e7d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    e7c2:	4a05      	ldr	r2, [pc, #20]	; (e7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e7c4:	9b01      	ldr	r3, [sp, #4]
    e7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d100      	bne.n	e7d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7d0:	bf00      	nop
    e7d2:	b003      	add	sp, #12
    e7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    e7d8:	1fff9100 	.word	0x1fff9100
    e7dc:	1fff90fc 	.word	0x1fff90fc

0000e7e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e7e0:	b500      	push	{lr}
    e7e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7e4:	f7f2 fb24 	bl	e30 <Sys_GetCoreID>
    e7e8:	4603      	mov	r3, r0
    e7ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    e7ec:	4a10      	ldr	r2, [pc, #64]	; (e830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e7ee:	9b01      	ldr	r3, [sp, #4]
    e7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d10d      	bne.n	e814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7f8:	f7f2 f9dd 	bl	bb6 <Port_schm_read_msr>
    e7fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7fe:	9b00      	ldr	r3, [sp, #0]
    e800:	f003 0301 	and.w	r3, r3, #1
    e804:	2b00      	cmp	r3, #0
    e806:	d100      	bne.n	e80a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    e80a:	490a      	ldr	r1, [pc, #40]	; (e834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    e80c:	9b01      	ldr	r3, [sp, #4]
    e80e:	9a00      	ldr	r2, [sp, #0]
    e810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    e814:	4a06      	ldr	r2, [pc, #24]	; (e830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e816:	9b01      	ldr	r3, [sp, #4]
    e818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e81c:	1c5a      	adds	r2, r3, #1
    e81e:	4904      	ldr	r1, [pc, #16]	; (e830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e820:	9b01      	ldr	r3, [sp, #4]
    e822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e826:	bf00      	nop
    e828:	b003      	add	sp, #12
    e82a:	f85d fb04 	ldr.w	pc, [sp], #4
    e82e:	bf00      	nop
    e830:	1fff9108 	.word	0x1fff9108
    e834:	1fff9104 	.word	0x1fff9104

0000e838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e838:	b500      	push	{lr}
    e83a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e83c:	f7f2 faf8 	bl	e30 <Sys_GetCoreID>
    e840:	4603      	mov	r3, r0
    e842:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    e844:	4a0d      	ldr	r2, [pc, #52]	; (e87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e846:	9b01      	ldr	r3, [sp, #4]
    e848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e84c:	1e5a      	subs	r2, r3, #1
    e84e:	490b      	ldr	r1, [pc, #44]	; (e87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e850:	9b01      	ldr	r3, [sp, #4]
    e852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    e856:	4a0a      	ldr	r2, [pc, #40]	; (e880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    e858:	9b01      	ldr	r3, [sp, #4]
    e85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e85e:	f003 0301 	and.w	r3, r3, #1
    e862:	2b00      	cmp	r3, #0
    e864:	d106      	bne.n	e874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    e866:	4a05      	ldr	r2, [pc, #20]	; (e87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e868:	9b01      	ldr	r3, [sp, #4]
    e86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e86e:	2b00      	cmp	r3, #0
    e870:	d100      	bne.n	e874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e874:	bf00      	nop
    e876:	b003      	add	sp, #12
    e878:	f85d fb04 	ldr.w	pc, [sp], #4
    e87c:	1fff9108 	.word	0x1fff9108
    e880:	1fff9104 	.word	0x1fff9104

0000e884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e884:	b500      	push	{lr}
    e886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e888:	f7f2 fad2 	bl	e30 <Sys_GetCoreID>
    e88c:	4603      	mov	r3, r0
    e88e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    e890:	4a10      	ldr	r2, [pc, #64]	; (e8d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e892:	9b01      	ldr	r3, [sp, #4]
    e894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e898:	2b00      	cmp	r3, #0
    e89a:	d10d      	bne.n	e8b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e89c:	f7f2 f98b 	bl	bb6 <Port_schm_read_msr>
    e8a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8a2:	9b00      	ldr	r3, [sp, #0]
    e8a4:	f003 0301 	and.w	r3, r3, #1
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d100      	bne.n	e8ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    e8ae:	490a      	ldr	r1, [pc, #40]	; (e8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    e8b0:	9b01      	ldr	r3, [sp, #4]
    e8b2:	9a00      	ldr	r2, [sp, #0]
    e8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    e8b8:	4a06      	ldr	r2, [pc, #24]	; (e8d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e8ba:	9b01      	ldr	r3, [sp, #4]
    e8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c0:	1c5a      	adds	r2, r3, #1
    e8c2:	4904      	ldr	r1, [pc, #16]	; (e8d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e8c4:	9b01      	ldr	r3, [sp, #4]
    e8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8ca:	bf00      	nop
    e8cc:	b003      	add	sp, #12
    e8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d2:	bf00      	nop
    e8d4:	1fff9110 	.word	0x1fff9110
    e8d8:	1fff910c 	.word	0x1fff910c

0000e8dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e8dc:	b500      	push	{lr}
    e8de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8e0:	f7f2 faa6 	bl	e30 <Sys_GetCoreID>
    e8e4:	4603      	mov	r3, r0
    e8e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    e8e8:	4a0d      	ldr	r2, [pc, #52]	; (e920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e8ea:	9b01      	ldr	r3, [sp, #4]
    e8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8f0:	1e5a      	subs	r2, r3, #1
    e8f2:	490b      	ldr	r1, [pc, #44]	; (e920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e8f4:	9b01      	ldr	r3, [sp, #4]
    e8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    e8fa:	4a0a      	ldr	r2, [pc, #40]	; (e924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    e8fc:	9b01      	ldr	r3, [sp, #4]
    e8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e902:	f003 0301 	and.w	r3, r3, #1
    e906:	2b00      	cmp	r3, #0
    e908:	d106      	bne.n	e918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    e90a:	4a05      	ldr	r2, [pc, #20]	; (e920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e90c:	9b01      	ldr	r3, [sp, #4]
    e90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e912:	2b00      	cmp	r3, #0
    e914:	d100      	bne.n	e918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e918:	bf00      	nop
    e91a:	b003      	add	sp, #12
    e91c:	f85d fb04 	ldr.w	pc, [sp], #4
    e920:	1fff9110 	.word	0x1fff9110
    e924:	1fff910c 	.word	0x1fff910c

0000e928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e928:	b500      	push	{lr}
    e92a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e92c:	f7f2 fa80 	bl	e30 <Sys_GetCoreID>
    e930:	4603      	mov	r3, r0
    e932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    e934:	4a10      	ldr	r2, [pc, #64]	; (e978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e936:	9b01      	ldr	r3, [sp, #4]
    e938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d10d      	bne.n	e95c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e940:	f7f2 f939 	bl	bb6 <Port_schm_read_msr>
    e944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e946:	9b00      	ldr	r3, [sp, #0]
    e948:	f003 0301 	and.w	r3, r3, #1
    e94c:	2b00      	cmp	r3, #0
    e94e:	d100      	bne.n	e952 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    e952:	490a      	ldr	r1, [pc, #40]	; (e97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    e954:	9b01      	ldr	r3, [sp, #4]
    e956:	9a00      	ldr	r2, [sp, #0]
    e958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    e95c:	4a06      	ldr	r2, [pc, #24]	; (e978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e95e:	9b01      	ldr	r3, [sp, #4]
    e960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e964:	1c5a      	adds	r2, r3, #1
    e966:	4904      	ldr	r1, [pc, #16]	; (e978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e968:	9b01      	ldr	r3, [sp, #4]
    e96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e96e:	bf00      	nop
    e970:	b003      	add	sp, #12
    e972:	f85d fb04 	ldr.w	pc, [sp], #4
    e976:	bf00      	nop
    e978:	1fff9118 	.word	0x1fff9118
    e97c:	1fff9114 	.word	0x1fff9114

0000e980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e980:	b500      	push	{lr}
    e982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e984:	f7f2 fa54 	bl	e30 <Sys_GetCoreID>
    e988:	4603      	mov	r3, r0
    e98a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    e98c:	4a0d      	ldr	r2, [pc, #52]	; (e9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e98e:	9b01      	ldr	r3, [sp, #4]
    e990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e994:	1e5a      	subs	r2, r3, #1
    e996:	490b      	ldr	r1, [pc, #44]	; (e9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e998:	9b01      	ldr	r3, [sp, #4]
    e99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    e99e:	4a0a      	ldr	r2, [pc, #40]	; (e9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    e9a0:	9b01      	ldr	r3, [sp, #4]
    e9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a6:	f003 0301 	and.w	r3, r3, #1
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d106      	bne.n	e9bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    e9ae:	4a05      	ldr	r2, [pc, #20]	; (e9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e9b0:	9b01      	ldr	r3, [sp, #4]
    e9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	d100      	bne.n	e9bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9bc:	bf00      	nop
    e9be:	b003      	add	sp, #12
    e9c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e9c4:	1fff9118 	.word	0x1fff9118
    e9c8:	1fff9114 	.word	0x1fff9114

0000e9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    e9cc:	b500      	push	{lr}
    e9ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d0:	f7f2 fa2e 	bl	e30 <Sys_GetCoreID>
    e9d4:	4603      	mov	r3, r0
    e9d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    e9d8:	4a10      	ldr	r2, [pc, #64]	; (ea1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e9da:	9b01      	ldr	r3, [sp, #4]
    e9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d10d      	bne.n	ea00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9e4:	f7f2 f8e7 	bl	bb6 <Port_schm_read_msr>
    e9e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9ea:	9b00      	ldr	r3, [sp, #0]
    e9ec:	f003 0301 	and.w	r3, r3, #1
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d100      	bne.n	e9f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    e9f6:	490a      	ldr	r1, [pc, #40]	; (ea20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    e9f8:	9b01      	ldr	r3, [sp, #4]
    e9fa:	9a00      	ldr	r2, [sp, #0]
    e9fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    ea00:	4a06      	ldr	r2, [pc, #24]	; (ea1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ea02:	9b01      	ldr	r3, [sp, #4]
    ea04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea08:	1c5a      	adds	r2, r3, #1
    ea0a:	4904      	ldr	r1, [pc, #16]	; (ea1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ea0c:	9b01      	ldr	r3, [sp, #4]
    ea0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea12:	bf00      	nop
    ea14:	b003      	add	sp, #12
    ea16:	f85d fb04 	ldr.w	pc, [sp], #4
    ea1a:	bf00      	nop
    ea1c:	1fff9120 	.word	0x1fff9120
    ea20:	1fff911c 	.word	0x1fff911c

0000ea24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    ea24:	b500      	push	{lr}
    ea26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea28:	f7f2 fa02 	bl	e30 <Sys_GetCoreID>
    ea2c:	4603      	mov	r3, r0
    ea2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    ea30:	4a0d      	ldr	r2, [pc, #52]	; (ea68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ea32:	9b01      	ldr	r3, [sp, #4]
    ea34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea38:	1e5a      	subs	r2, r3, #1
    ea3a:	490b      	ldr	r1, [pc, #44]	; (ea68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ea42:	4a0a      	ldr	r2, [pc, #40]	; (ea6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    ea44:	9b01      	ldr	r3, [sp, #4]
    ea46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea4a:	f003 0301 	and.w	r3, r3, #1
    ea4e:	2b00      	cmp	r3, #0
    ea50:	d106      	bne.n	ea60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    ea52:	4a05      	ldr	r2, [pc, #20]	; (ea68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ea54:	9b01      	ldr	r3, [sp, #4]
    ea56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	d100      	bne.n	ea60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea60:	bf00      	nop
    ea62:	b003      	add	sp, #12
    ea64:	f85d fb04 	ldr.w	pc, [sp], #4
    ea68:	1fff9120 	.word	0x1fff9120
    ea6c:	1fff911c 	.word	0x1fff911c

0000ea70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    ea70:	b500      	push	{lr}
    ea72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea74:	f7f2 f9dc 	bl	e30 <Sys_GetCoreID>
    ea78:	4603      	mov	r3, r0
    ea7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    ea7c:	4a10      	ldr	r2, [pc, #64]	; (eac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ea7e:	9b01      	ldr	r3, [sp, #4]
    ea80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea84:	2b00      	cmp	r3, #0
    ea86:	d10d      	bne.n	eaa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea88:	f7f2 f895 	bl	bb6 <Port_schm_read_msr>
    ea8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea8e:	9b00      	ldr	r3, [sp, #0]
    ea90:	f003 0301 	and.w	r3, r3, #1
    ea94:	2b00      	cmp	r3, #0
    ea96:	d100      	bne.n	ea9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    ea9a:	490a      	ldr	r1, [pc, #40]	; (eac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    ea9c:	9b01      	ldr	r3, [sp, #4]
    ea9e:	9a00      	ldr	r2, [sp, #0]
    eaa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    eaa4:	4a06      	ldr	r2, [pc, #24]	; (eac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    eaa6:	9b01      	ldr	r3, [sp, #4]
    eaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaac:	1c5a      	adds	r2, r3, #1
    eaae:	4904      	ldr	r1, [pc, #16]	; (eac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    eab0:	9b01      	ldr	r3, [sp, #4]
    eab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eab6:	bf00      	nop
    eab8:	b003      	add	sp, #12
    eaba:	f85d fb04 	ldr.w	pc, [sp], #4
    eabe:	bf00      	nop
    eac0:	1fff9128 	.word	0x1fff9128
    eac4:	1fff9124 	.word	0x1fff9124

0000eac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    eac8:	b500      	push	{lr}
    eaca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eacc:	f7f2 f9b0 	bl	e30 <Sys_GetCoreID>
    ead0:	4603      	mov	r3, r0
    ead2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    ead4:	4a0d      	ldr	r2, [pc, #52]	; (eb0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    ead6:	9b01      	ldr	r3, [sp, #4]
    ead8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eadc:	1e5a      	subs	r2, r3, #1
    eade:	490b      	ldr	r1, [pc, #44]	; (eb0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    eae0:	9b01      	ldr	r3, [sp, #4]
    eae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    eae6:	4a0a      	ldr	r2, [pc, #40]	; (eb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    eae8:	9b01      	ldr	r3, [sp, #4]
    eaea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaee:	f003 0301 	and.w	r3, r3, #1
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d106      	bne.n	eb04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    eaf6:	4a05      	ldr	r2, [pc, #20]	; (eb0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    eaf8:	9b01      	ldr	r3, [sp, #4]
    eafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eafe:	2b00      	cmp	r3, #0
    eb00:	d100      	bne.n	eb04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb04:	bf00      	nop
    eb06:	b003      	add	sp, #12
    eb08:	f85d fb04 	ldr.w	pc, [sp], #4
    eb0c:	1fff9128 	.word	0x1fff9128
    eb10:	1fff9124 	.word	0x1fff9124

0000eb14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    eb14:	b500      	push	{lr}
    eb16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb18:	f7f2 f98a 	bl	e30 <Sys_GetCoreID>
    eb1c:	4603      	mov	r3, r0
    eb1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    eb20:	4a10      	ldr	r2, [pc, #64]	; (eb64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    eb22:	9b01      	ldr	r3, [sp, #4]
    eb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d10d      	bne.n	eb48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb2c:	f7f2 f843 	bl	bb6 <Port_schm_read_msr>
    eb30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb32:	9b00      	ldr	r3, [sp, #0]
    eb34:	f003 0301 	and.w	r3, r3, #1
    eb38:	2b00      	cmp	r3, #0
    eb3a:	d100      	bne.n	eb3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    eb3e:	490a      	ldr	r1, [pc, #40]	; (eb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    eb40:	9b01      	ldr	r3, [sp, #4]
    eb42:	9a00      	ldr	r2, [sp, #0]
    eb44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    eb48:	4a06      	ldr	r2, [pc, #24]	; (eb64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    eb4a:	9b01      	ldr	r3, [sp, #4]
    eb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb50:	1c5a      	adds	r2, r3, #1
    eb52:	4904      	ldr	r1, [pc, #16]	; (eb64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    eb54:	9b01      	ldr	r3, [sp, #4]
    eb56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb5a:	bf00      	nop
    eb5c:	b003      	add	sp, #12
    eb5e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb62:	bf00      	nop
    eb64:	1fff9130 	.word	0x1fff9130
    eb68:	1fff912c 	.word	0x1fff912c

0000eb6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    eb6c:	b500      	push	{lr}
    eb6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb70:	f7f2 f95e 	bl	e30 <Sys_GetCoreID>
    eb74:	4603      	mov	r3, r0
    eb76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    eb78:	4a0d      	ldr	r2, [pc, #52]	; (ebb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    eb7a:	9b01      	ldr	r3, [sp, #4]
    eb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb80:	1e5a      	subs	r2, r3, #1
    eb82:	490b      	ldr	r1, [pc, #44]	; (ebb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    eb8a:	4a0a      	ldr	r2, [pc, #40]	; (ebb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    eb8c:	9b01      	ldr	r3, [sp, #4]
    eb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb92:	f003 0301 	and.w	r3, r3, #1
    eb96:	2b00      	cmp	r3, #0
    eb98:	d106      	bne.n	eba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    eb9a:	4a05      	ldr	r2, [pc, #20]	; (ebb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    eb9c:	9b01      	ldr	r3, [sp, #4]
    eb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba2:	2b00      	cmp	r3, #0
    eba4:	d100      	bne.n	eba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eba8:	bf00      	nop
    ebaa:	b003      	add	sp, #12
    ebac:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb0:	1fff9130 	.word	0x1fff9130
    ebb4:	1fff912c 	.word	0x1fff912c

0000ebb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    ebb8:	b500      	push	{lr}
    ebba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebbc:	f7f2 f938 	bl	e30 <Sys_GetCoreID>
    ebc0:	4603      	mov	r3, r0
    ebc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    ebc4:	4a10      	ldr	r2, [pc, #64]	; (ec08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ebc6:	9b01      	ldr	r3, [sp, #4]
    ebc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebcc:	2b00      	cmp	r3, #0
    ebce:	d10d      	bne.n	ebec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebd0:	f7f1 fff1 	bl	bb6 <Port_schm_read_msr>
    ebd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebd6:	9b00      	ldr	r3, [sp, #0]
    ebd8:	f003 0301 	and.w	r3, r3, #1
    ebdc:	2b00      	cmp	r3, #0
    ebde:	d100      	bne.n	ebe2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    ebe2:	490a      	ldr	r1, [pc, #40]	; (ec0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    ebe4:	9b01      	ldr	r3, [sp, #4]
    ebe6:	9a00      	ldr	r2, [sp, #0]
    ebe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    ebec:	4a06      	ldr	r2, [pc, #24]	; (ec08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ebee:	9b01      	ldr	r3, [sp, #4]
    ebf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf4:	1c5a      	adds	r2, r3, #1
    ebf6:	4904      	ldr	r1, [pc, #16]	; (ec08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ebf8:	9b01      	ldr	r3, [sp, #4]
    ebfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebfe:	bf00      	nop
    ec00:	b003      	add	sp, #12
    ec02:	f85d fb04 	ldr.w	pc, [sp], #4
    ec06:	bf00      	nop
    ec08:	1fff9138 	.word	0x1fff9138
    ec0c:	1fff9134 	.word	0x1fff9134

0000ec10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    ec10:	b500      	push	{lr}
    ec12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec14:	f7f2 f90c 	bl	e30 <Sys_GetCoreID>
    ec18:	4603      	mov	r3, r0
    ec1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    ec1c:	4a0d      	ldr	r2, [pc, #52]	; (ec54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ec1e:	9b01      	ldr	r3, [sp, #4]
    ec20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec24:	1e5a      	subs	r2, r3, #1
    ec26:	490b      	ldr	r1, [pc, #44]	; (ec54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ec28:	9b01      	ldr	r3, [sp, #4]
    ec2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    ec2e:	4a0a      	ldr	r2, [pc, #40]	; (ec58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    ec30:	9b01      	ldr	r3, [sp, #4]
    ec32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec36:	f003 0301 	and.w	r3, r3, #1
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	d106      	bne.n	ec4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    ec3e:	4a05      	ldr	r2, [pc, #20]	; (ec54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ec40:	9b01      	ldr	r3, [sp, #4]
    ec42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d100      	bne.n	ec4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec4c:	bf00      	nop
    ec4e:	b003      	add	sp, #12
    ec50:	f85d fb04 	ldr.w	pc, [sp], #4
    ec54:	1fff9138 	.word	0x1fff9138
    ec58:	1fff9134 	.word	0x1fff9134

0000ec5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    ec5c:	b500      	push	{lr}
    ec5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec60:	f7f2 f8e6 	bl	e30 <Sys_GetCoreID>
    ec64:	4603      	mov	r3, r0
    ec66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    ec68:	4a10      	ldr	r2, [pc, #64]	; (ecac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ec6a:	9b01      	ldr	r3, [sp, #4]
    ec6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec70:	2b00      	cmp	r3, #0
    ec72:	d10d      	bne.n	ec90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec74:	f7f1 ff9f 	bl	bb6 <Port_schm_read_msr>
    ec78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec7a:	9b00      	ldr	r3, [sp, #0]
    ec7c:	f003 0301 	and.w	r3, r3, #1
    ec80:	2b00      	cmp	r3, #0
    ec82:	d100      	bne.n	ec86 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    ec86:	490a      	ldr	r1, [pc, #40]	; (ecb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    ec88:	9b01      	ldr	r3, [sp, #4]
    ec8a:	9a00      	ldr	r2, [sp, #0]
    ec8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    ec90:	4a06      	ldr	r2, [pc, #24]	; (ecac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ec92:	9b01      	ldr	r3, [sp, #4]
    ec94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec98:	1c5a      	adds	r2, r3, #1
    ec9a:	4904      	ldr	r1, [pc, #16]	; (ecac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ec9c:	9b01      	ldr	r3, [sp, #4]
    ec9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eca2:	bf00      	nop
    eca4:	b003      	add	sp, #12
    eca6:	f85d fb04 	ldr.w	pc, [sp], #4
    ecaa:	bf00      	nop
    ecac:	1fff9140 	.word	0x1fff9140
    ecb0:	1fff913c 	.word	0x1fff913c

0000ecb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    ecb4:	b500      	push	{lr}
    ecb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecb8:	f7f2 f8ba 	bl	e30 <Sys_GetCoreID>
    ecbc:	4603      	mov	r3, r0
    ecbe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    ecc0:	4a0d      	ldr	r2, [pc, #52]	; (ecf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    ecc2:	9b01      	ldr	r3, [sp, #4]
    ecc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecc8:	1e5a      	subs	r2, r3, #1
    ecca:	490b      	ldr	r1, [pc, #44]	; (ecf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    eccc:	9b01      	ldr	r3, [sp, #4]
    ecce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    ecd2:	4a0a      	ldr	r2, [pc, #40]	; (ecfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    ecd4:	9b01      	ldr	r3, [sp, #4]
    ecd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecda:	f003 0301 	and.w	r3, r3, #1
    ecde:	2b00      	cmp	r3, #0
    ece0:	d106      	bne.n	ecf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    ece2:	4a05      	ldr	r2, [pc, #20]	; (ecf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    ece4:	9b01      	ldr	r3, [sp, #4]
    ece6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecea:	2b00      	cmp	r3, #0
    ecec:	d100      	bne.n	ecf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecf0:	bf00      	nop
    ecf2:	b003      	add	sp, #12
    ecf4:	f85d fb04 	ldr.w	pc, [sp], #4
    ecf8:	1fff9140 	.word	0x1fff9140
    ecfc:	1fff913c 	.word	0x1fff913c

0000ed00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    ed00:	b500      	push	{lr}
    ed02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed04:	f7f2 f894 	bl	e30 <Sys_GetCoreID>
    ed08:	4603      	mov	r3, r0
    ed0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    ed0c:	4a10      	ldr	r2, [pc, #64]	; (ed50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    ed0e:	9b01      	ldr	r3, [sp, #4]
    ed10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed14:	2b00      	cmp	r3, #0
    ed16:	d10d      	bne.n	ed34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed18:	f7f1 ff4d 	bl	bb6 <Port_schm_read_msr>
    ed1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed1e:	9b00      	ldr	r3, [sp, #0]
    ed20:	f003 0301 	and.w	r3, r3, #1
    ed24:	2b00      	cmp	r3, #0
    ed26:	d100      	bne.n	ed2a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    ed2a:	490a      	ldr	r1, [pc, #40]	; (ed54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    ed2c:	9b01      	ldr	r3, [sp, #4]
    ed2e:	9a00      	ldr	r2, [sp, #0]
    ed30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    ed34:	4a06      	ldr	r2, [pc, #24]	; (ed50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    ed36:	9b01      	ldr	r3, [sp, #4]
    ed38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed3c:	1c5a      	adds	r2, r3, #1
    ed3e:	4904      	ldr	r1, [pc, #16]	; (ed50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed46:	bf00      	nop
    ed48:	b003      	add	sp, #12
    ed4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ed4e:	bf00      	nop
    ed50:	1fff9148 	.word	0x1fff9148
    ed54:	1fff9144 	.word	0x1fff9144

0000ed58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    ed58:	b500      	push	{lr}
    ed5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed5c:	f7f2 f868 	bl	e30 <Sys_GetCoreID>
    ed60:	4603      	mov	r3, r0
    ed62:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    ed64:	4a0d      	ldr	r2, [pc, #52]	; (ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    ed66:	9b01      	ldr	r3, [sp, #4]
    ed68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed6c:	1e5a      	subs	r2, r3, #1
    ed6e:	490b      	ldr	r1, [pc, #44]	; (ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    ed76:	4a0a      	ldr	r2, [pc, #40]	; (eda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    ed78:	9b01      	ldr	r3, [sp, #4]
    ed7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed7e:	f003 0301 	and.w	r3, r3, #1
    ed82:	2b00      	cmp	r3, #0
    ed84:	d106      	bne.n	ed94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    ed86:	4a05      	ldr	r2, [pc, #20]	; (ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    ed88:	9b01      	ldr	r3, [sp, #4]
    ed8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	d100      	bne.n	ed94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed94:	bf00      	nop
    ed96:	b003      	add	sp, #12
    ed98:	f85d fb04 	ldr.w	pc, [sp], #4
    ed9c:	1fff9148 	.word	0x1fff9148
    eda0:	1fff9144 	.word	0x1fff9144

0000eda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    eda4:	b500      	push	{lr}
    eda6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eda8:	f7f2 f842 	bl	e30 <Sys_GetCoreID>
    edac:	4603      	mov	r3, r0
    edae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    edb0:	4a10      	ldr	r2, [pc, #64]	; (edf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    edb2:	9b01      	ldr	r3, [sp, #4]
    edb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb8:	2b00      	cmp	r3, #0
    edba:	d10d      	bne.n	edd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    edbc:	f7f1 fefb 	bl	bb6 <Port_schm_read_msr>
    edc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    edc2:	9b00      	ldr	r3, [sp, #0]
    edc4:	f003 0301 	and.w	r3, r3, #1
    edc8:	2b00      	cmp	r3, #0
    edca:	d100      	bne.n	edce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    edce:	490a      	ldr	r1, [pc, #40]	; (edf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    edd0:	9b01      	ldr	r3, [sp, #4]
    edd2:	9a00      	ldr	r2, [sp, #0]
    edd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    edd8:	4a06      	ldr	r2, [pc, #24]	; (edf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    edda:	9b01      	ldr	r3, [sp, #4]
    eddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede0:	1c5a      	adds	r2, r3, #1
    ede2:	4904      	ldr	r1, [pc, #16]	; (edf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    ede4:	9b01      	ldr	r3, [sp, #4]
    ede6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edea:	bf00      	nop
    edec:	b003      	add	sp, #12
    edee:	f85d fb04 	ldr.w	pc, [sp], #4
    edf2:	bf00      	nop
    edf4:	1fff9150 	.word	0x1fff9150
    edf8:	1fff914c 	.word	0x1fff914c

0000edfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    edfc:	b500      	push	{lr}
    edfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee00:	f7f2 f816 	bl	e30 <Sys_GetCoreID>
    ee04:	4603      	mov	r3, r0
    ee06:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    ee08:	4a0d      	ldr	r2, [pc, #52]	; (ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    ee0a:	9b01      	ldr	r3, [sp, #4]
    ee0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee10:	1e5a      	subs	r2, r3, #1
    ee12:	490b      	ldr	r1, [pc, #44]	; (ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    ee14:	9b01      	ldr	r3, [sp, #4]
    ee16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    ee1a:	4a0a      	ldr	r2, [pc, #40]	; (ee44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    ee1c:	9b01      	ldr	r3, [sp, #4]
    ee1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee22:	f003 0301 	and.w	r3, r3, #1
    ee26:	2b00      	cmp	r3, #0
    ee28:	d106      	bne.n	ee38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    ee2a:	4a05      	ldr	r2, [pc, #20]	; (ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    ee2c:	9b01      	ldr	r3, [sp, #4]
    ee2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee32:	2b00      	cmp	r3, #0
    ee34:	d100      	bne.n	ee38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee38:	bf00      	nop
    ee3a:	b003      	add	sp, #12
    ee3c:	f85d fb04 	ldr.w	pc, [sp], #4
    ee40:	1fff9150 	.word	0x1fff9150
    ee44:	1fff914c 	.word	0x1fff914c

0000ee48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    ee48:	b500      	push	{lr}
    ee4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee4c:	f7f1 fff0 	bl	e30 <Sys_GetCoreID>
    ee50:	4603      	mov	r3, r0
    ee52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    ee54:	4a10      	ldr	r2, [pc, #64]	; (ee98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ee56:	9b01      	ldr	r3, [sp, #4]
    ee58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	d10d      	bne.n	ee7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee60:	f7f1 fea9 	bl	bb6 <Port_schm_read_msr>
    ee64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee66:	9b00      	ldr	r3, [sp, #0]
    ee68:	f003 0301 	and.w	r3, r3, #1
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	d100      	bne.n	ee72 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    ee72:	490a      	ldr	r1, [pc, #40]	; (ee9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    ee74:	9b01      	ldr	r3, [sp, #4]
    ee76:	9a00      	ldr	r2, [sp, #0]
    ee78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    ee7c:	4a06      	ldr	r2, [pc, #24]	; (ee98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ee7e:	9b01      	ldr	r3, [sp, #4]
    ee80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee84:	1c5a      	adds	r2, r3, #1
    ee86:	4904      	ldr	r1, [pc, #16]	; (ee98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ee88:	9b01      	ldr	r3, [sp, #4]
    ee8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee8e:	bf00      	nop
    ee90:	b003      	add	sp, #12
    ee92:	f85d fb04 	ldr.w	pc, [sp], #4
    ee96:	bf00      	nop
    ee98:	1fff9158 	.word	0x1fff9158
    ee9c:	1fff9154 	.word	0x1fff9154

0000eea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    eea0:	b500      	push	{lr}
    eea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eea4:	f7f1 ffc4 	bl	e30 <Sys_GetCoreID>
    eea8:	4603      	mov	r3, r0
    eeaa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    eeac:	4a0d      	ldr	r2, [pc, #52]	; (eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    eeae:	9b01      	ldr	r3, [sp, #4]
    eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeb4:	1e5a      	subs	r2, r3, #1
    eeb6:	490b      	ldr	r1, [pc, #44]	; (eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    eeb8:	9b01      	ldr	r3, [sp, #4]
    eeba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    eebe:	4a0a      	ldr	r2, [pc, #40]	; (eee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    eec0:	9b01      	ldr	r3, [sp, #4]
    eec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec6:	f003 0301 	and.w	r3, r3, #1
    eeca:	2b00      	cmp	r3, #0
    eecc:	d106      	bne.n	eedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    eece:	4a05      	ldr	r2, [pc, #20]	; (eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    eed0:	9b01      	ldr	r3, [sp, #4]
    eed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed6:	2b00      	cmp	r3, #0
    eed8:	d100      	bne.n	eedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eeda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eedc:	bf00      	nop
    eede:	b003      	add	sp, #12
    eee0:	f85d fb04 	ldr.w	pc, [sp], #4
    eee4:	1fff9158 	.word	0x1fff9158
    eee8:	1fff9154 	.word	0x1fff9154

0000eeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    eeec:	b500      	push	{lr}
    eeee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eef0:	f7f1 ff9e 	bl	e30 <Sys_GetCoreID>
    eef4:	4603      	mov	r3, r0
    eef6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    eef8:	4a10      	ldr	r2, [pc, #64]	; (ef3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    eefa:	9b01      	ldr	r3, [sp, #4]
    eefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef00:	2b00      	cmp	r3, #0
    ef02:	d10d      	bne.n	ef20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef04:	f7f1 fe57 	bl	bb6 <Port_schm_read_msr>
    ef08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef0a:	9b00      	ldr	r3, [sp, #0]
    ef0c:	f003 0301 	and.w	r3, r3, #1
    ef10:	2b00      	cmp	r3, #0
    ef12:	d100      	bne.n	ef16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ef16:	490a      	ldr	r1, [pc, #40]	; (ef40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    ef18:	9b01      	ldr	r3, [sp, #4]
    ef1a:	9a00      	ldr	r2, [sp, #0]
    ef1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    ef20:	4a06      	ldr	r2, [pc, #24]	; (ef3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    ef22:	9b01      	ldr	r3, [sp, #4]
    ef24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef28:	1c5a      	adds	r2, r3, #1
    ef2a:	4904      	ldr	r1, [pc, #16]	; (ef3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    ef2c:	9b01      	ldr	r3, [sp, #4]
    ef2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef32:	bf00      	nop
    ef34:	b003      	add	sp, #12
    ef36:	f85d fb04 	ldr.w	pc, [sp], #4
    ef3a:	bf00      	nop
    ef3c:	1fff9160 	.word	0x1fff9160
    ef40:	1fff915c 	.word	0x1fff915c

0000ef44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    ef44:	b500      	push	{lr}
    ef46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef48:	f7f1 ff72 	bl	e30 <Sys_GetCoreID>
    ef4c:	4603      	mov	r3, r0
    ef4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    ef50:	4a0d      	ldr	r2, [pc, #52]	; (ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ef52:	9b01      	ldr	r3, [sp, #4]
    ef54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef58:	1e5a      	subs	r2, r3, #1
    ef5a:	490b      	ldr	r1, [pc, #44]	; (ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ef5c:	9b01      	ldr	r3, [sp, #4]
    ef5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    ef62:	4a0a      	ldr	r2, [pc, #40]	; (ef8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    ef64:	9b01      	ldr	r3, [sp, #4]
    ef66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef6a:	f003 0301 	and.w	r3, r3, #1
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d106      	bne.n	ef80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    ef72:	4a05      	ldr	r2, [pc, #20]	; (ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ef74:	9b01      	ldr	r3, [sp, #4]
    ef76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d100      	bne.n	ef80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef80:	bf00      	nop
    ef82:	b003      	add	sp, #12
    ef84:	f85d fb04 	ldr.w	pc, [sp], #4
    ef88:	1fff9160 	.word	0x1fff9160
    ef8c:	1fff915c 	.word	0x1fff915c

0000ef90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    ef90:	b500      	push	{lr}
    ef92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef94:	f7f1 ff4c 	bl	e30 <Sys_GetCoreID>
    ef98:	4603      	mov	r3, r0
    ef9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    ef9c:	4a10      	ldr	r2, [pc, #64]	; (efe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    ef9e:	9b01      	ldr	r3, [sp, #4]
    efa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efa4:	2b00      	cmp	r3, #0
    efa6:	d10d      	bne.n	efc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efa8:	f7f1 fe05 	bl	bb6 <Port_schm_read_msr>
    efac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efae:	9b00      	ldr	r3, [sp, #0]
    efb0:	f003 0301 	and.w	r3, r3, #1
    efb4:	2b00      	cmp	r3, #0
    efb6:	d100      	bne.n	efba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    efba:	490a      	ldr	r1, [pc, #40]	; (efe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    efbc:	9b01      	ldr	r3, [sp, #4]
    efbe:	9a00      	ldr	r2, [sp, #0]
    efc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    efc4:	4a06      	ldr	r2, [pc, #24]	; (efe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    efc6:	9b01      	ldr	r3, [sp, #4]
    efc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efcc:	1c5a      	adds	r2, r3, #1
    efce:	4904      	ldr	r1, [pc, #16]	; (efe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    efd0:	9b01      	ldr	r3, [sp, #4]
    efd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efd6:	bf00      	nop
    efd8:	b003      	add	sp, #12
    efda:	f85d fb04 	ldr.w	pc, [sp], #4
    efde:	bf00      	nop
    efe0:	1fff9168 	.word	0x1fff9168
    efe4:	1fff9164 	.word	0x1fff9164

0000efe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    efe8:	b500      	push	{lr}
    efea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efec:	f7f1 ff20 	bl	e30 <Sys_GetCoreID>
    eff0:	4603      	mov	r3, r0
    eff2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    eff4:	4a0d      	ldr	r2, [pc, #52]	; (f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    eff6:	9b01      	ldr	r3, [sp, #4]
    eff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    effc:	1e5a      	subs	r2, r3, #1
    effe:	490b      	ldr	r1, [pc, #44]	; (f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f000:	9b01      	ldr	r3, [sp, #4]
    f002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    f006:	4a0a      	ldr	r2, [pc, #40]	; (f030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    f008:	9b01      	ldr	r3, [sp, #4]
    f00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f00e:	f003 0301 	and.w	r3, r3, #1
    f012:	2b00      	cmp	r3, #0
    f014:	d106      	bne.n	f024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    f016:	4a05      	ldr	r2, [pc, #20]	; (f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f018:	9b01      	ldr	r3, [sp, #4]
    f01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f01e:	2b00      	cmp	r3, #0
    f020:	d100      	bne.n	f024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f024:	bf00      	nop
    f026:	b003      	add	sp, #12
    f028:	f85d fb04 	ldr.w	pc, [sp], #4
    f02c:	1fff9168 	.word	0x1fff9168
    f030:	1fff9164 	.word	0x1fff9164

0000f034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    f034:	b500      	push	{lr}
    f036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f038:	f7f1 fefa 	bl	e30 <Sys_GetCoreID>
    f03c:	4603      	mov	r3, r0
    f03e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    f040:	4a10      	ldr	r2, [pc, #64]	; (f084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f042:	9b01      	ldr	r3, [sp, #4]
    f044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f048:	2b00      	cmp	r3, #0
    f04a:	d10d      	bne.n	f068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f04c:	f7f1 fdb3 	bl	bb6 <Port_schm_read_msr>
    f050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f052:	9b00      	ldr	r3, [sp, #0]
    f054:	f003 0301 	and.w	r3, r3, #1
    f058:	2b00      	cmp	r3, #0
    f05a:	d100      	bne.n	f05e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f05c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    f05e:	490a      	ldr	r1, [pc, #40]	; (f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    f060:	9b01      	ldr	r3, [sp, #4]
    f062:	9a00      	ldr	r2, [sp, #0]
    f064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    f068:	4a06      	ldr	r2, [pc, #24]	; (f084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f06a:	9b01      	ldr	r3, [sp, #4]
    f06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f070:	1c5a      	adds	r2, r3, #1
    f072:	4904      	ldr	r1, [pc, #16]	; (f084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f074:	9b01      	ldr	r3, [sp, #4]
    f076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f07a:	bf00      	nop
    f07c:	b003      	add	sp, #12
    f07e:	f85d fb04 	ldr.w	pc, [sp], #4
    f082:	bf00      	nop
    f084:	1fff9170 	.word	0x1fff9170
    f088:	1fff916c 	.word	0x1fff916c

0000f08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    f08c:	b500      	push	{lr}
    f08e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f090:	f7f1 fece 	bl	e30 <Sys_GetCoreID>
    f094:	4603      	mov	r3, r0
    f096:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    f098:	4a0d      	ldr	r2, [pc, #52]	; (f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f09a:	9b01      	ldr	r3, [sp, #4]
    f09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0a0:	1e5a      	subs	r2, r3, #1
    f0a2:	490b      	ldr	r1, [pc, #44]	; (f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f0a4:	9b01      	ldr	r3, [sp, #4]
    f0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    f0aa:	4a0a      	ldr	r2, [pc, #40]	; (f0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    f0ac:	9b01      	ldr	r3, [sp, #4]
    f0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b2:	f003 0301 	and.w	r3, r3, #1
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	d106      	bne.n	f0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    f0ba:	4a05      	ldr	r2, [pc, #20]	; (f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f0bc:	9b01      	ldr	r3, [sp, #4]
    f0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c2:	2b00      	cmp	r3, #0
    f0c4:	d100      	bne.n	f0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0c8:	bf00      	nop
    f0ca:	b003      	add	sp, #12
    f0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d0:	1fff9170 	.word	0x1fff9170
    f0d4:	1fff916c 	.word	0x1fff916c

0000f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f0d8:	b500      	push	{lr}
    f0da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0dc:	f7f1 fea8 	bl	e30 <Sys_GetCoreID>
    f0e0:	4603      	mov	r3, r0
    f0e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    f0e4:	4a10      	ldr	r2, [pc, #64]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f0e6:	9b01      	ldr	r3, [sp, #4]
    f0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ec:	2b00      	cmp	r3, #0
    f0ee:	d10d      	bne.n	f10c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0f0:	f7f1 fd61 	bl	bb6 <Port_schm_read_msr>
    f0f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0f6:	9b00      	ldr	r3, [sp, #0]
    f0f8:	f003 0301 	and.w	r3, r3, #1
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d100      	bne.n	f102 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    f102:	490a      	ldr	r1, [pc, #40]	; (f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    f104:	9b01      	ldr	r3, [sp, #4]
    f106:	9a00      	ldr	r2, [sp, #0]
    f108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    f10c:	4a06      	ldr	r2, [pc, #24]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f10e:	9b01      	ldr	r3, [sp, #4]
    f110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f114:	1c5a      	adds	r2, r3, #1
    f116:	4904      	ldr	r1, [pc, #16]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f118:	9b01      	ldr	r3, [sp, #4]
    f11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f11e:	bf00      	nop
    f120:	b003      	add	sp, #12
    f122:	f85d fb04 	ldr.w	pc, [sp], #4
    f126:	bf00      	nop
    f128:	1fff9178 	.word	0x1fff9178
    f12c:	1fff9174 	.word	0x1fff9174

0000f130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f130:	b500      	push	{lr}
    f132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f134:	f7f1 fe7c 	bl	e30 <Sys_GetCoreID>
    f138:	4603      	mov	r3, r0
    f13a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    f13c:	4a0d      	ldr	r2, [pc, #52]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f13e:	9b01      	ldr	r3, [sp, #4]
    f140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f144:	1e5a      	subs	r2, r3, #1
    f146:	490b      	ldr	r1, [pc, #44]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f148:	9b01      	ldr	r3, [sp, #4]
    f14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    f14e:	4a0a      	ldr	r2, [pc, #40]	; (f178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    f150:	9b01      	ldr	r3, [sp, #4]
    f152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f156:	f003 0301 	and.w	r3, r3, #1
    f15a:	2b00      	cmp	r3, #0
    f15c:	d106      	bne.n	f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    f15e:	4a05      	ldr	r2, [pc, #20]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f160:	9b01      	ldr	r3, [sp, #4]
    f162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f166:	2b00      	cmp	r3, #0
    f168:	d100      	bne.n	f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f16a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f16c:	bf00      	nop
    f16e:	b003      	add	sp, #12
    f170:	f85d fb04 	ldr.w	pc, [sp], #4
    f174:	1fff9178 	.word	0x1fff9178
    f178:	1fff9174 	.word	0x1fff9174

0000f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f17c:	b500      	push	{lr}
    f17e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f180:	f7f1 fe56 	bl	e30 <Sys_GetCoreID>
    f184:	4603      	mov	r3, r0
    f186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    f188:	4a10      	ldr	r2, [pc, #64]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f18a:	9b01      	ldr	r3, [sp, #4]
    f18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f190:	2b00      	cmp	r3, #0
    f192:	d10d      	bne.n	f1b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f194:	f7f1 fd0f 	bl	bb6 <Port_schm_read_msr>
    f198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f19a:	9b00      	ldr	r3, [sp, #0]
    f19c:	f003 0301 	and.w	r3, r3, #1
    f1a0:	2b00      	cmp	r3, #0
    f1a2:	d100      	bne.n	f1a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    f1a6:	490a      	ldr	r1, [pc, #40]	; (f1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    f1a8:	9b01      	ldr	r3, [sp, #4]
    f1aa:	9a00      	ldr	r2, [sp, #0]
    f1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    f1b0:	4a06      	ldr	r2, [pc, #24]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f1b2:	9b01      	ldr	r3, [sp, #4]
    f1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1b8:	1c5a      	adds	r2, r3, #1
    f1ba:	4904      	ldr	r1, [pc, #16]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f1bc:	9b01      	ldr	r3, [sp, #4]
    f1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1c2:	bf00      	nop
    f1c4:	b003      	add	sp, #12
    f1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ca:	bf00      	nop
    f1cc:	1fff9180 	.word	0x1fff9180
    f1d0:	1fff917c 	.word	0x1fff917c

0000f1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f1d4:	b500      	push	{lr}
    f1d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1d8:	f7f1 fe2a 	bl	e30 <Sys_GetCoreID>
    f1dc:	4603      	mov	r3, r0
    f1de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    f1e0:	4a0d      	ldr	r2, [pc, #52]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f1e2:	9b01      	ldr	r3, [sp, #4]
    f1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1e8:	1e5a      	subs	r2, r3, #1
    f1ea:	490b      	ldr	r1, [pc, #44]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f1ec:	9b01      	ldr	r3, [sp, #4]
    f1ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    f1f2:	4a0a      	ldr	r2, [pc, #40]	; (f21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    f1f4:	9b01      	ldr	r3, [sp, #4]
    f1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1fa:	f003 0301 	and.w	r3, r3, #1
    f1fe:	2b00      	cmp	r3, #0
    f200:	d106      	bne.n	f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    f202:	4a05      	ldr	r2, [pc, #20]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f204:	9b01      	ldr	r3, [sp, #4]
    f206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f20a:	2b00      	cmp	r3, #0
    f20c:	d100      	bne.n	f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f20e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f210:	bf00      	nop
    f212:	b003      	add	sp, #12
    f214:	f85d fb04 	ldr.w	pc, [sp], #4
    f218:	1fff9180 	.word	0x1fff9180
    f21c:	1fff917c 	.word	0x1fff917c

0000f220 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    f220:	bf00      	nop
    f222:	4770      	bx	lr

0000f224 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    f224:	b510      	push	{r4, lr}
    f226:	b084      	sub	sp, #16
    f228:	4604      	mov	r4, r0
    f22a:	4608      	mov	r0, r1
    f22c:	4611      	mov	r1, r2
    f22e:	461a      	mov	r2, r3
    f230:	4623      	mov	r3, r4
    f232:	f8ad 3006 	strh.w	r3, [sp, #6]
    f236:	4603      	mov	r3, r0
    f238:	f88d 3005 	strb.w	r3, [sp, #5]
    f23c:	460b      	mov	r3, r1
    f23e:	f88d 3004 	strb.w	r3, [sp, #4]
    f242:	4613      	mov	r3, r2
    f244:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f248:	f7f1 fdf2 	bl	e30 <Sys_GetCoreID>
    f24c:	4603      	mov	r3, r0
    f24e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    f250:	490d      	ldr	r1, [pc, #52]	; (f288 <Det_ReportError+0x64>)
    f252:	9b03      	ldr	r3, [sp, #12]
    f254:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f258:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    f25c:	4a0b      	ldr	r2, [pc, #44]	; (f28c <Det_ReportError+0x68>)
    f25e:	9b03      	ldr	r3, [sp, #12]
    f260:	4413      	add	r3, r2
    f262:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f266:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    f268:	4a09      	ldr	r2, [pc, #36]	; (f290 <Det_ReportError+0x6c>)
    f26a:	9b03      	ldr	r3, [sp, #12]
    f26c:	4413      	add	r3, r2
    f26e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f272:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    f274:	4a07      	ldr	r2, [pc, #28]	; (f294 <Det_ReportError+0x70>)
    f276:	9b03      	ldr	r3, [sp, #12]
    f278:	4413      	add	r3, r2
    f27a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f27e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f280:	2300      	movs	r3, #0
}
    f282:	4618      	mov	r0, r3
    f284:	b004      	add	sp, #16
    f286:	bd10      	pop	{r4, pc}
    f288:	1fff91ac 	.word	0x1fff91ac
    f28c:	1fff9184 	.word	0x1fff9184
    f290:	1fff9188 	.word	0x1fff9188
    f294:	1fff918c 	.word	0x1fff918c

0000f298 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    f298:	b510      	push	{r4, lr}
    f29a:	b084      	sub	sp, #16
    f29c:	4604      	mov	r4, r0
    f29e:	4608      	mov	r0, r1
    f2a0:	4611      	mov	r1, r2
    f2a2:	461a      	mov	r2, r3
    f2a4:	4623      	mov	r3, r4
    f2a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    f2aa:	4603      	mov	r3, r0
    f2ac:	f88d 3005 	strb.w	r3, [sp, #5]
    f2b0:	460b      	mov	r3, r1
    f2b2:	f88d 3004 	strb.w	r3, [sp, #4]
    f2b6:	4613      	mov	r3, r2
    f2b8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2bc:	f7f1 fdb8 	bl	e30 <Sys_GetCoreID>
    f2c0:	4603      	mov	r3, r0
    f2c2:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    f2c4:	490d      	ldr	r1, [pc, #52]	; (f2fc <Det_ReportRuntimeError+0x64>)
    f2c6:	9b03      	ldr	r3, [sp, #12]
    f2c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f2cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    f2d0:	4a0b      	ldr	r2, [pc, #44]	; (f300 <Det_ReportRuntimeError+0x68>)
    f2d2:	9b03      	ldr	r3, [sp, #12]
    f2d4:	4413      	add	r3, r2
    f2d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f2da:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    f2dc:	4a09      	ldr	r2, [pc, #36]	; (f304 <Det_ReportRuntimeError+0x6c>)
    f2de:	9b03      	ldr	r3, [sp, #12]
    f2e0:	4413      	add	r3, r2
    f2e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f2e6:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    f2e8:	4a07      	ldr	r2, [pc, #28]	; (f308 <Det_ReportRuntimeError+0x70>)
    f2ea:	9b03      	ldr	r3, [sp, #12]
    f2ec:	4413      	add	r3, r2
    f2ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f2f2:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f2f4:	2300      	movs	r3, #0
}
    f2f6:	4618      	mov	r0, r3
    f2f8:	b004      	add	sp, #16
    f2fa:	bd10      	pop	{r4, pc}
    f2fc:	1fff91b0 	.word	0x1fff91b0
    f300:	1fff9190 	.word	0x1fff9190
    f304:	1fff9194 	.word	0x1fff9194
    f308:	1fff9198 	.word	0x1fff9198

0000f30c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    f30c:	b510      	push	{r4, lr}
    f30e:	b084      	sub	sp, #16
    f310:	4604      	mov	r4, r0
    f312:	4608      	mov	r0, r1
    f314:	4611      	mov	r1, r2
    f316:	461a      	mov	r2, r3
    f318:	4623      	mov	r3, r4
    f31a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f31e:	4603      	mov	r3, r0
    f320:	f88d 3005 	strb.w	r3, [sp, #5]
    f324:	460b      	mov	r3, r1
    f326:	f88d 3004 	strb.w	r3, [sp, #4]
    f32a:	4613      	mov	r3, r2
    f32c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f330:	f7f1 fd7e 	bl	e30 <Sys_GetCoreID>
    f334:	4603      	mov	r3, r0
    f336:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    f338:	490d      	ldr	r1, [pc, #52]	; (f370 <Det_ReportTransientFault+0x64>)
    f33a:	9b03      	ldr	r3, [sp, #12]
    f33c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f340:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    f344:	4a0b      	ldr	r2, [pc, #44]	; (f374 <Det_ReportTransientFault+0x68>)
    f346:	9b03      	ldr	r3, [sp, #12]
    f348:	4413      	add	r3, r2
    f34a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f34e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    f350:	4a09      	ldr	r2, [pc, #36]	; (f378 <Det_ReportTransientFault+0x6c>)
    f352:	9b03      	ldr	r3, [sp, #12]
    f354:	4413      	add	r3, r2
    f356:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f35a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    f35c:	4a07      	ldr	r2, [pc, #28]	; (f37c <Det_ReportTransientFault+0x70>)
    f35e:	9b03      	ldr	r3, [sp, #12]
    f360:	4413      	add	r3, r2
    f362:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f366:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f368:	2300      	movs	r3, #0
}
    f36a:	4618      	mov	r0, r3
    f36c:	b004      	add	sp, #16
    f36e:	bd10      	pop	{r4, pc}
    f370:	1fff91a8 	.word	0x1fff91a8
    f374:	1fff919c 	.word	0x1fff919c
    f378:	1fff91a0 	.word	0x1fff91a0
    f37c:	1fff91a4 	.word	0x1fff91a4

0000f380 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    f380:	bf00      	nop
    f382:	4770      	bx	lr

0000f384 <Fls_ACEraseRomEnd>:
    f384:	204e4143 	.word	0x204e4143
    f388:	64756162 	.word	0x64756162
    f38c:	74617220 	.word	0x74617220
    f390:	65732065 	.word	0x65732065
    f394:	75732074 	.word	0x75732074
    f398:	73656363 	.word	0x73656363
    f39c:	6c756673 	.word	0x6c756673
    f3a0:	202e796c 	.word	0x202e796c
    f3a4:	0000000a 	.word	0x0000000a
    f3a8:	6c696146 	.word	0x6c696146
    f3ac:	74206465 	.word	0x74206465
    f3b0:	6573206f 	.word	0x6573206f
    f3b4:	41432074 	.word	0x41432074
    f3b8:	6162204e 	.word	0x6162204e
    f3bc:	72206475 	.word	0x72206475
    f3c0:	2e657461 	.word	0x2e657461
    f3c4:	00000a20 	.word	0x00000a20
    f3c8:	204e4143 	.word	0x204e4143
    f3cc:	746e6f63 	.word	0x746e6f63
    f3d0:	6c6c6f72 	.word	0x6c6c6f72
    f3d4:	73207265 	.word	0x73207265
    f3d8:	65746174 	.word	0x65746174
    f3dc:	63616d20 	.word	0x63616d20
    f3e0:	656e6968 	.word	0x656e6968
    f3e4:	74657320 	.word	0x74657320
    f3e8:	63757320 	.word	0x63757320
    f3ec:	73736563 	.word	0x73736563
    f3f0:	6c6c7566 	.word	0x6c6c7566
    f3f4:	0a202e79 	.word	0x0a202e79
    f3f8:	00000000 	.word	0x00000000
    f3fc:	6c696146 	.word	0x6c696146
    f400:	74206465 	.word	0x74206465
    f404:	6573206f 	.word	0x6573206f
    f408:	41432074 	.word	0x41432074
    f40c:	6f63204e 	.word	0x6f63204e
    f410:	6f72746e 	.word	0x6f72746e
    f414:	72656c6c 	.word	0x72656c6c
    f418:	61747320 	.word	0x61747320
    f41c:	6d206574 	.word	0x6d206574
    f420:	69686361 	.word	0x69686361
    f424:	202e656e 	.word	0x202e656e
    f428:	0000000a 	.word	0x0000000a
    f42c:	204e4143 	.word	0x204e4143
    f430:	2067736d 	.word	0x2067736d
    f434:	78257830 	.word	0x78257830
    f438:	63657220 	.word	0x63657220
    f43c:	65766965 	.word	0x65766965
    f440:	74612064 	.word	0x74612064
    f444:	30303520 	.word	0x30303520
    f448:	7370626b 	.word	0x7370626b
    f44c:	206f7420 	.word	0x206f7420
    f450:	6e696c62 	.word	0x6e696c62
    f454:	4c42206b 	.word	0x4c42206b
    f458:	4c204555 	.word	0x4c204555
    f45c:	66204445 	.word	0x66204445
    f460:	203a726f 	.word	0x203a726f
    f464:	6d206425 	.word	0x6d206425
    f468:	000a2073 	.word	0x000a2073
    f46c:	204e4143 	.word	0x204e4143
    f470:	2067736d 	.word	0x2067736d
    f474:	78257830 	.word	0x78257830
    f478:	63657220 	.word	0x63657220
    f47c:	65766965 	.word	0x65766965
    f480:	74612064 	.word	0x74612064
    f484:	30303520 	.word	0x30303520
    f488:	7370626b 	.word	0x7370626b
    f48c:	206f7420 	.word	0x206f7420
    f490:	6e696c62 	.word	0x6e696c62
    f494:	4552206b 	.word	0x4552206b
    f498:	454c2044 	.word	0x454c2044
    f49c:	6f662044 	.word	0x6f662044
    f4a0:	25203a72 	.word	0x25203a72
    f4a4:	736d2064 	.word	0x736d2064
    f4a8:	00000a20 	.word	0x00000a20
    f4ac:	204e4143 	.word	0x204e4143
    f4b0:	2067736d 	.word	0x2067736d
    f4b4:	78257830 	.word	0x78257830
    f4b8:	63657220 	.word	0x63657220
    f4bc:	65766965 	.word	0x65766965
    f4c0:	74612064 	.word	0x74612064
    f4c4:	30303520 	.word	0x30303520
    f4c8:	7370626b 	.word	0x7370626b
    f4cc:	206f7420 	.word	0x206f7420
    f4d0:	6e696c62 	.word	0x6e696c62
    f4d4:	5247206b 	.word	0x5247206b
    f4d8:	204e4545 	.word	0x204e4545
    f4dc:	2044454c 	.word	0x2044454c
    f4e0:	3a726f66 	.word	0x3a726f66
    f4e4:	20642520 	.word	0x20642520
    f4e8:	0a20736d 	.word	0x0a20736d
    f4ec:	00000000 	.word	0x00000000
    f4f0:	6d726554 	.word	0x6d726554
    f4f4:	6c616e69 	.word	0x6c616e69
    f4f8:	00000000 	.word	0x00000000
    f4fc:	4c554e28 	.word	0x4c554e28
    f500:	0000294c 	.word	0x0000294c

0000f504 <Clock_Ip_au8DividerCallbackIndex>:
    f504:	0e0d0c00 06030201 0a070409 000b0805     ................

0000f514 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000f524 <Clock_Ip_au8XoscCallbackIndex>:
    f524:	00000100 00000000 00000000 00000000     ................

0000f534 <Clock_Ip_au8IrcoscCallbackIndex>:
    f534:	03020100 00000004 00000000 00000000     ................

0000f544 <Clock_Ip_au8GateCallbackIndex>:
    f544:	06010200 01040301 00000500 00000000     ................

0000f554 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000f564 <Clock_Ip_au8PllCallbackIndex>:
    f564:	00000100 00000000 00000000 00000000     ................

0000f574 <Clock_Ip_au8SelectorCallbackIndex>:
    f574:	0a090800 03020109 07060504 00000000     ................

0000f584 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000f594 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000f5a4 <Clock_Ip_au8ClockFeatures>:
	...
    f5b4:	01000000 00000000 00000000 00000002     ................
    f5c4:	00000000 00000300 00000000 00040000     ................
    f5d4:	00000000 05000000 00000000 00000000     ................
    f5e4:	00000006 00000000 00000100 00000000     ................
    f5f4:	00010000 00000000 04000000 00000000     ................
    f604:	00000000 00000005 00000001 00000401     ................
    f614:	00000200 00050100 00030000 04020000     ................
    f624:	04000000 02000000 00000005 00000005     ................
    f634:	00000403 00000600 00050300 00070000     ................
    f644:	05000000 00000000 00000000 00000006     ................
	...
    f684:	00050000 00000000 06000000 00000100     ................
    f694:	00000000 00030007 00000000 00000000     ................
    f6a4:	00000000 00060000 00000000 07000000     ................
    f6b4:	00000100 00000000 00030008 00000000     ................
	...
    f6cc:	00090000 00000000 0a000000 00000100     ................
    f6dc:	00000000 0003000b 00000000 00000000     ................
    f6ec:	00000000 000c0000 00000000 0d000000     ................
    f6fc:	00000100 00000000 0003000e 00000000     ................
    f70c:	00000800 00000000 00090000 00000000     ................
    f71c:	0a000000 00000000 00000000 0000000b     ................
    f72c:	00000000 00000b01 00000000 000b0200     ................
    f73c:	00000000 0b030000 00000000 00000000     ................
	...
    f754:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    f764:	01000000 00000000 00000000 00000007     ................
    f774:	00007300 00000700 00320000 00090000     .s........2.....
    f784:	02000000 07000000 00000000 00000021     ............!...
    f794:	00000009 00000400 00000900 00030000     ................
    f7a4:	00070000 61000000 07000000 00000000     .......a........
    f7b4:	00000024 00000007 00002500 00000700     $........%......
    f7c4:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    f7d4:	00000000 00000020 38000004 00003800     .... ......8.8..
    f7e4:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    f7f4:	04000000 00260000 00000026 66000004     ......&.&......f
    f804:	00006600 00000400 00370037 00040000     .f......7.7.....
    f814:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    f824:	2e000004 00002e00 00000200 00404040     ............@@@.
    f834:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    f844:	0000006b 6c000004 00006c00 00000900     k......l.l......
    f854:	00010000 00090000 00000000 07000000     ................
    f864:	00000000 00000036 00000007 00003100     ....6........1..
    f874:	00000700 00490000 00070000 4a000000     ......I........J
    f884:	07000000 00000000 0000004b 00000007     ........K.......
    f894:	00004c00 00000700 004d0000 00070000     .L........M.....
    f8a4:	3d000000 03000000 00000000 00000000     ...=............

0000f8b4 <Clock_Ip_au16SelectorEntryHardwareValue>:
    f8b4:	01010a03 01010001 04040002 02000603     ................
    f8c4:	00010810 02020100 00000000 00000007     ................
    f8d4:	00000009 00000000 00000c0e 00000000     ................
	...

0000f90c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    f90c:	00020000 00000300 00000601 00000000     ................
	...

0000f93c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    f93c:	00000700 00000000 02020000 01010303     ................
    f94c:	03020606 00000000 00000000 00000000     ................
	...

0000f96c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    f96c:	00000001 00000000 02020000 01010303     ................
    f97c:	03020606 00000000 00000000 00000000     ................
	...

0000f99c <Clock_Ip_au8DividerValueHardwareValue>:
    f99c:	00020100 00000003 00000004 00000000     ................
    f9ac:	00000005 00000000 00000000 00000000     ................
    f9bc:	00000006 00000000 00000000 00000000     ................
	...
    f9dc:	00000007                                ....

0000f9e0 <Clock_Ip_apxScgPeriphAsyncDivs>:
    f9e0:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000f9f0 <Clock_Ip_aeSourceTypeClockName>:
    f9f0:	00000000 00000001 00000001 00000001     ................
    fa00:	00000001 00000001 00000001 00000001     ................
    fa10:	00000002 00000003 00000001 00000001     ................
    fa20:	00000001 00000001 00000002 00000002     ................
    fa30:	00000003 00000003 00000001 00000001     ................
    fa40:	00000004 00000004 00000004 00000004     ................
	...

0000faac <Clock_Ip_aeHwPllName>:
    faac:	00000009                                ....

0000fab0 <Clock_Ip_aeHwDfsName>:
    fab0:	00000057                                W...

0000fab4 <Clock_Ip_axDividerCallbacks>:
    fab4:	00002e71 00002e7b 00002e95 00002eaf     q...{...........
    fac4:	00002ec9 00002ee3 00002efd 00002f17     ............./..
    fad4:	00002f31 00002f4b 00002f65 00002f7f     1/..K/..e/.../..
    fae4:	00002f99 00002fb3 00002fcd              ./.../.../..

0000faf0 <Clock_Ip_axDividerTriggerCallbacks>:
    faf0:	00003341 00003341                       A3..A3..

0000faf8 <Clock_Ip_axExtOscCallbacks>:
    faf8:	0000334d 0000334d 0000334d 00003357     M3..M3..M3..W3..
    fb08:	0000334d 00003361 0000337b 00003395     M3..a3..{3...3..
    fb18:	00003419 0000342d                       .4..-4..

0000fb20 <Clock_Ip_axFracDivCallbacks>:
    fb20:	000035ed 000035ed 000035f7              .5...5...5..

0000fb2c <Clock_Ip_axGateCallbacks>:
    fb2c:	00003611 0000361b 0000371b 00003735     .6...6...7..57..
    fb3c:	000036cb 000036e5 0000367b 00003695     .6...6..{6...6..
    fb4c:	0000362b 00003645 0000376b 00003785     +6..E6..k7...7..
    fb5c:	000037bb 000037d5                       .7...7..

0000fb64 <Clock_Ip_axIntOscCallbacks>:
    fb64:	00003981 00003981 0000398b 00003995     .9...9...9...9..
    fb74:	000039af 000039c9 000039dd 000039f7     .9...9...9...9..
    fb84:	00003a11 00003a25 00003a3f 00003a59     .:..%:..?:..Y:..
    fb94:	00003b01 00003b1b 00003b35              .;...;..5;..

0000fba0 <Clock_Ip_axCmuCallbacks>:
    fba0:	000040d1 000040db 000040e7 000040d1     .@...@...@...@..

0000fbb0 <Clock_Ip_axPllCallbacks>:
    fbb0:	000040f1 000040f1 000040fb 000040f1     .@...@...@...@..
    fbc0:	00004107 00004111 0000412b 00004145     .A...A..+A..EA..
    fbd0:	000041e9 000041d5                       .A...A..

0000fbd8 <Clock_Ip_axPcfsCallbacks>:
    fbd8:	00004345                                EC..

0000fbdc <Clock_Ip_axSelectorCallbacks>:
    fbdc:	00004351 00004351 0000435b 00004375     QC..QC..[C..uC..
    fbec:	00004351 0000438f 000043a9 000043c3     QC...C...C...C..
    fbfc:	000043dd 000043f7 00004411 0000442b     .C...C...D..+D..
    fc0c:	00004445 0000445f 00004479 00004493     ED.._D..yD...D..
    fc1c:	000044ad 000044c7 000044e1 000044fb     .D...D...D...D..
    fc2c:	00004515 0000452f                       .E../E..

0000fc34 <ClockSource>:
    fc34:	00000000 00000008 00000002 00000005     ................
	...
    fc4c:	00000009                                ....

0000fc50 <ResetReasonArray>:
    fc50:	00000000 00000001 00000002 00000003     ................
    fc60:	00000004 00000005 00000006 00000007     ................
    fc70:	00000008 00000009 0000000a 0000000b     ................
    fc80:	0000000c 0000000d 0000000e              ............

0000fc8c <Port_au32PortCiPortBaseAddr>:
    fc8c:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    fc9c:	4004d000                                ...@

0000fca0 <Port_au32PortCiGpioBaseAddr>:
    fca0:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    fcb0:	400ff100                                ...@

0000fcb4 <Flexcan_Ip_apxBase>:
    fcb4:	40024000 40025000 4002b000              .@.@.P.@...@

0000fcc0 <payload_code.3>:
    fcc0:	03020100 07060504 09090908 0a0a0a09     ................
    fcd0:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
    fce0:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
    fcf0:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
    fd00:	0000000f                                ....

0000fd04 <flexcanBase.2>:
    fd04:	40024000 40025000 4002b000              .@.@.P.@...@

0000fd10 <maxMbNum.1>:
    fd10:	00000020 00000010 00000010               ...........

0000fd1c <flexcanBase.0>:
    fd1c:	40024000                                .@.@

0000fd20 <ButtonsCfg>:
    fd20:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
    fd30:	0000000c 0000012c                       ....,...

0000fd38 <LedsCfg>:
    fd38:	00000060 0000006f 00000070 00010048     `...o...p...H...
    fd48:	00010049 0001004a 0001004b 0001004c     I...J...K...L...
    fd58:	0001004d 0001004e 0001004f              M...N...O...

0000fd64 <Can_43_FLEXCANIpwHwChannelConfig0>:
    fd64:	00010294                                ....

0000fd68 <Can_au32HwBufferAddr_Ctrl0>:
    fd68:	4002b080 4002b090 4002b0a0              ...@...@...@

0000fd74 <Can_aHwFilter_Object0>:
    fd74:	00000154 dffc0000                       T.......

0000fd7c <Can_aHwFilter_Object1>:
    fd7c:	00000233 dffc0000                       3.......

0000fd84 <Can_aHwFilter_Object2>:
    fd84:	00000382 dffc0000                       ........

0000fd8c <Can_aCtrlOffsetToCtrlIDMap>:
    fd8c:	0000ffff                                ....

0000fd90 <Can_aHwObjIDToCtrlIDMap>:
    fd90:	00000000                                ....

0000fd94 <Can_aHwObjectConfig>:
	...
    fda0:	ff010000 00010008 0000fd74 00000000     ........t.......
    fdb0:	00000000 0000fd68 00000001 00000000     ....h...........
    fdc0:	00000000 ff010000 00010008 0000fd7c     ............|...
    fdd0:	00000000 00000001 0000fd6c 00000002     ........l.......
	...
    fde8:	ff010000 00010008 0000fd84 00000000     ................
    fdf8:	00000002 0000fd70                       ....p...

0000fe00 <Can_aBaudrateConfig_Ctrl0>:
    fe00:	04030000 001d0005 00000000 00000000     ................
	...
    fe18:	00050403 0000000b 00000000 00000000     ................
    fe28:	00000000 04030000 00050005 00000000     ................
	...

0000fe44 <Can_apHwObject_Ctrl0>:
    fe44:	0000fd94 0000fdb8 0000fddc              ............

0000fe50 <Can_aControllerConfig>:
    fe50:	00020000 4002b000 00000001 ffffffff     .......@........
	...
    fe6c:	00030001 0000fe00 0000fd64 00000003     ........d.......
    fe7c:	0000fe44                                D...

0000fe80 <Can_apController>:
    fe80:	0000fe50                                P...

0000fe84 <Can_43_FLEXCAN_Config>:
    fe84:	00000000 00000003 0000fd8c 0000fd90     ................
    fe94:	0000fd94 0000fe80                       ........

0000fe9c <Mcu_aClockConfigPB>:
	...
    fea4:	1c000101 04000010 01000029 00000005     ........).......
    feb4:	00000001 00000000 00000057 00000000     ........W.......
    fec4:	00000000 00000008 007a1200 00000001     ..........z.....
    fed4:	00000001 00000000 00000057 00000000     ........W.......
    fee4:	00000057 00000000 00000000 00000000     W...............
	...
    ff04:	00000019 00000005 0000001a 00000002     ................
    ff14:	0000001b 00000005 0000002a 00000005     ........*.......
    ff24:	00000028 0000000e 00000029 00000001     (.......).......
    ff34:	00000056 0000001c 00000032 0000002a     V.......2...*...
    ff44:	0000002b 00000014 0000002c 00000014     +.......,.......
    ff54:	0000002d 00000014 0000002e 00000014     -...............
    ff64:	0000003f 00000000 00000040 00000000     ?.......@.......
    ff74:	00000041 00000000 00000042 00000000     A.......B.......
    ff84:	00000031 00000000 00000045 00000000     1.......E.......
    ff94:	00000046 00000000 00000047 00000000     F.......G.......
    ffa4:	00000044 00000000 00000030 00000000     D.......0.......
    ffb4:	0000003d 00000000 00000043 00000000     =.......C.......
    ffc4:	00000049 00000000 0000004a 00000000     I.......J.......
    ffd4:	0000004b 00000000 00000048 00000000     K.......H.......
    ffe4:	0000000c 00000001 00000000 0000000d     ................
    fff4:	00000002 00000000 0000000e 00000001     ................
   10004:	00000000 0000000f 00000001 00000000     ................
   10014:	0000001d 00000001 00000000 0000001e     ................
   10024:	00000008 00000000 0000001f 00000001     ................
   10034:	00000000 00000021 00000001 00000000     ....!...........
   10044:	00000022 00000002 00000000 00000023     "...........#...
   10054:	00000001 00000000 00000025 00000003     ........%.......
   10064:	00000000 00000026 00000004 00000000     ....&...........
   10074:	00000027 00000002 00000000 00000032     '...........2...
   10084:	00000001 00000000 00000048 00000001     ........H.......
   10094:	00000001 00000056 00000001 00000001     ....V...........
   100a4:	00000057 00000000 00000000 00000057     W...........W...
	...
   100bc:	00000057 00000000 00000000 00000057     W...........W...
	...
   100d4:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   100f0:	00000014 00007d00 00000015 00007d00     .....}.......}..
   10100:	00000016 00007d00 00000017 00008000     .....}..........
   10110:	00000012 00000001 00000013 00000001     ................
   10120:	00000030 00000000 00000031 00000000     0.......1.......
   10130:	00000032 00000000 00000033 00000000     2.......3.......
   10140:	00000034 00000000 00000035 00000001     4.......5.......
   10150:	00000036 00000000 00000037 00000001     6.......7.......
   10160:	00000038 00000001 00000039 00000000     8.......9.......
   10170:	0000003a 00000000 0000003b 00000000     :.......;.......
   10180:	0000003c 00000001 0000003d 00000000     <.......=.......
   10190:	0000003e 00000000 0000003f 00000000     >.......?.......
   101a0:	00000040 00000000 00000041 00000000     @.......A.......
   101b0:	00000042 00000000 00000043 00000000     B.......C.......
   101c0:	00000044 00000000 00000045 00000000     D.......E.......
   101d0:	00000046 00000000 00000047 00000000     F.......G.......
   101e0:	00000048 00000000 00000049 00000000     H.......I.......
   101f0:	0000004a 00000000 0000004b 00000000     J.......K.......
   10200:	0000004c 00000001 0000004d 00000001     L.......M.......
   10210:	0000004e 00000000 0000004f 00000000     N.......O.......
   10220:	00000050 00000001 00000051 00000001     P.......Q.......
   10230:	00000052 00000001 00000053 00000001     R.......S.......
   10240:	00000054 00000001 00000055 00000000     T.......U.......
   10250:	00000056 00000001 00000057 00000000     V.......W.......
   10260:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010294 <Flexcan_aCtrlConfigPB>:
   10294:	00000003 00000000 00000000 00000000     ................
   102a4:	00000040 00000000 00000100 00000003     @...............
   102b4:	00000004 00000005 0000000b 00000000     ................
   102c4:	00000004 00000004 00000005 0000000b     ................
	...
   102dc:	00008a29 00008ad5                       ).......

000102e4 <aIrqConfiguration>:
   102e4:	0000005c 00000f01 0000cf55 0000005d     \.......U...]...
   102f4:	00000f01 0000cf65 0000005f 00000f01     ....e..._.......
   10304:	0000cf75                                u...

00010308 <intCtrlConfig>:
   10308:	00000003 000102e4                       ........

00010310 <Mcu_Config>:
   10310:	0000005a 00000000 00000001 00000001     Z...............
   10320:	00010814 0000fe9c 00010820              ........ ...

0001032c <OsIf_xPredefinedConfig>:
   1032c:	00000000 02dc6c00                       .....l..

00010334 <OsIf_apxPredefinedConfig>:
   10334:	0001032c                                ,...

00010338 <Platform_uConfiguration>:
   10338:	00010340                                @...

0001033c <Platform_Config>:
   1033c:	00010338                                8...

00010340 <ipwConfig>:
   10340:	00010308 00000000                       ........

00010348 <g_pin_mux_InitConfigArr>:
   10348:	4004c000 400ff0c0 00000010 00000002     ...@...@........
   10358:	00000001 00000002 00000000 00000000     ................
   10368:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   10378:	0000000f 00000002 00000001 00000002     ................
	...
   10394:	00000100 4004c000 400ff0c0 00000000     .......@...@....
   103a4:	00000002 00000001 00000002 00000000     ................
	...
   103bc:	00000100 4004c000 400ff0c0 00000011     .......@...@....
   103cc:	00000002 00000001 00000001 00000000     ................
	...
   103e8:	4004d000 400ff100 0000000c 00000002     ...@...@........
   103f8:	00000001 00000001 00000000 00000000     ................
	...
   10410:	40049000 400ff000 0000000c 00000002     ...@...@........
   10420:	00000001 00000001 00000000 00000000     ................
	...
   10438:	4004b000 400ff080 00000008 00000002     ...@...@........
   10448:	00000001 00000002 00000000 00000000     ................
	...
   10460:	4004b000 400ff080 00000009 00000002     ...@...@........
   10470:	00000001 00000002 00000000 00000000     ................
	...
   10488:	4004b000 400ff080 0000000a 00000002     ...@...@........
   10498:	00000001 00000002 00000000 00000000     ................
	...
   104b0:	4004b000 400ff080 0000000b 00000002     ...@...@........
   104c0:	00000001 00000002 00000000 00000000     ................
	...
   104d8:	4004b000 400ff080 0000000c 00000002     ...@...@........
   104e8:	00000001 00000002 00000000 00000000     ................
	...
   10500:	4004b000 400ff080 0000000d 00000002     ...@...@........
   10510:	00000001 00000002 00000000 00000000     ................
	...
   10528:	4004b000 400ff080 0000000e 00000002     ...@...@........
   10538:	00000001 00000002 00000000 00000000     ................
	...
   10550:	4004b000 400ff080 0000000f 00000002     ...@...@........
   10560:	00000001 00000002 00000000 00000000     ................
	...
   10578:	4004b000 00000000 00000011 00000002     ...@............
   10588:	00000003 00000001 00000000 00000000     ................
	...
   105a0:	4004b000 00000000 00000010 00000002     ...@............
   105b0:	00000003 00000001 00000000 00000000     ................
	...

000105c8 <au8Port_PartitionList>:
   105c8:	00000001                                ....

000105cc <au32Port_PinToPartitionMap>:
   105cc:	00000001 00000001 00000001 00000001     ................
   105dc:	00000001 00000001 00000001 00000001     ................
   105ec:	00000001 00000001 00000001 00000001     ................
   105fc:	00000001 00000001 00000001 00000001     ................

0001060c <Port_au16NoUnUsedPadsArrayDefault>:
   1060c:	00010000 00030002 00070006 00090008     ................
   1061c:	000d000b 000f000e 00110010 00210020     ............ .!.
   1062c:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   1063c:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
   1064c:	00410040 00430042 00470046 00620061     @.A.B.C.F.G.a.b.
   1065c:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
   1066c:	006c006b 006e006d 00810080 00830082     k.l.m.n.........
   1067c:	00850084 00870086 00890088 008b008a     ................
   1068c:	008e008d 0090008f                       ........

00010694 <Port_UnUsedPin>:
   10694:	00000100 00000001 00000000              ............

000106a0 <Port_aPinConfigDefault>:
   106a0:	00000070 00000100 00000001 00000002     p...............
   106b0:	00010001 00000051 00000300 00000000     ....Q...........
   106c0:	00000001 00010000 00000050 00000300     ........P.......
   106d0:	00000000 00000001 00010000 0000006f     ............o...
   106e0:	00000100 00000001 00000002 00010001     ................
   106f0:	00000060 00000100 00000001 00000002     `...............
   10700:	00010001 00000071 00000100 00000000     ....q...........
   10710:	00000001 00010001 0000008c 00000100     ................
   10720:	00000000 00000001 00010001 0000000c     ................
   10730:	00000100 00000000 00000001 00010001     ................
   10740:	00000048 00000100 00000000 00000002     H...............
   10750:	00010001 00000049 00000100 00000000     ....I...........
   10760:	00000002 00010001 0000004a 00000100     ........J.......
   10770:	00000000 00000002 00010001 0000004b     ............K...
   10780:	00000100 00000000 00000002 00010001     ................
   10790:	0000004c 00000100 00000000 00000002     L...............
   107a0:	00010001 0000004d 00000100 00000000     ....M...........
   107b0:	00000002 00010001 0000004e 00000100     ........N.......
   107c0:	00000000 00000002 00010001 0000004f     ............O...
   107d0:	00000100 00000000 00000002 00010001     ................

000107e0 <Port_Config>:
   107e0:	00440010 0001060c 00010694 000106a0     ..D.............
	...
   107f8:	000105cc 000105c8 00010348              ........H...

00010804 <Power_Ip_RCM_ConfigPB>:
	...

0001080c <Power_Ip_PMC_ConfigPB>:
   1080c:	00000000                                ....

00010810 <Power_Ip_SMC_ConfigPB>:
   10810:	00000000                                ....

00010814 <Power_Ip_aModeConfigPB>:
	...

00010820 <Power_Ip_HwIPsConfigPB>:
   10820:	00010804 0001080c 00010810              ............

0001082c <_aInitStr.0>:
   1082c:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1083c:	00000000                                ....

00010840 <_aV2C.0>:
   10840:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00010850 <__INIT_TABLE>:
   10850:	00000002 	.word	0x00000002
   10854:	1fff8b10 	.word	0x1fff8b10
   10858:	00010878 	.word	0x00010878
   1085c:	000108a8 	.word	0x000108a8
   10860:	1fff8800 	.word	0x1fff8800
   10864:	00000000 	.word	0x00000000
   10868:	00000310 	.word	0x00000310

0001086c <__ZERO_TABLE>:
   1086c:	00000001 	.word	0x00000001
   10870:	1fff8b40 	.word	0x1fff8b40
   10874:	1fff9690 	.word	0x1fff9690
