
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bbf 	.word	0x00000bbf
  10:	00000bc1 	.word	0x00000bc1
  14:	00000bc3 	.word	0x00000bc3
  18:	00000bc5 	.word	0x00000bc5
	...
  2c:	00000bc7 	.word	0x00000bc7
  30:	00000bc9 	.word	0x00000bc9
  34:	00000000 	.word	0x00000000
  38:	00000bcb 	.word	0x00000bcb
  3c:	00000bcd 	.word	0x00000bcd
  40:	00000bcf 	.word	0x00000bcf
  44:	00000bcf 	.word	0x00000bcf
  48:	00000bcf 	.word	0x00000bcf
  4c:	00000bcf 	.word	0x00000bcf
  50:	00000bcf 	.word	0x00000bcf
  54:	00000bcf 	.word	0x00000bcf
  58:	00000bcf 	.word	0x00000bcf
  5c:	00000bcf 	.word	0x00000bcf
  60:	00000bcf 	.word	0x00000bcf
  64:	00000bcf 	.word	0x00000bcf
  68:	00000bcf 	.word	0x00000bcf
  6c:	00000bcf 	.word	0x00000bcf
  70:	00000bcf 	.word	0x00000bcf
  74:	00000bcf 	.word	0x00000bcf
  78:	00000bcf 	.word	0x00000bcf
  7c:	00000bcf 	.word	0x00000bcf
  80:	00000bcf 	.word	0x00000bcf
  84:	00000bcf 	.word	0x00000bcf
  88:	00000bcf 	.word	0x00000bcf
  8c:	00000bcf 	.word	0x00000bcf
  90:	00000bcf 	.word	0x00000bcf
  94:	00000bcf 	.word	0x00000bcf
  98:	00000bcf 	.word	0x00000bcf
  9c:	00000bcf 	.word	0x00000bcf
  a0:	00000bcf 	.word	0x00000bcf
  a4:	00000bcf 	.word	0x00000bcf
  a8:	00000bcf 	.word	0x00000bcf
  ac:	00000bcf 	.word	0x00000bcf
  b0:	00000bcf 	.word	0x00000bcf
  b4:	00000bcf 	.word	0x00000bcf
  b8:	00000bcf 	.word	0x00000bcf
  bc:	00000bcf 	.word	0x00000bcf
  c0:	00000bcf 	.word	0x00000bcf
  c4:	00000bcf 	.word	0x00000bcf
  c8:	00000bcf 	.word	0x00000bcf
  cc:	00000bcf 	.word	0x00000bcf
  d0:	00000bcf 	.word	0x00000bcf
  d4:	00000bcf 	.word	0x00000bcf
  d8:	00000bcf 	.word	0x00000bcf
  dc:	00000bcf 	.word	0x00000bcf
  e0:	00000bcf 	.word	0x00000bcf
  e4:	00000bcf 	.word	0x00000bcf
  e8:	00000bcf 	.word	0x00000bcf
  ec:	00000bcf 	.word	0x00000bcf
  f0:	00000bcf 	.word	0x00000bcf
  f4:	00000bcf 	.word	0x00000bcf
  f8:	00000bcf 	.word	0x00000bcf
  fc:	00000bcf 	.word	0x00000bcf
 100:	00000bcf 	.word	0x00000bcf
 104:	00000bcf 	.word	0x00000bcf
 108:	00000bcf 	.word	0x00000bcf
 10c:	00000bcf 	.word	0x00000bcf
 110:	00000bcf 	.word	0x00000bcf
 114:	00000bcf 	.word	0x00000bcf
 118:	00000bcf 	.word	0x00000bcf
 11c:	00000bcf 	.word	0x00000bcf
 120:	00000bcf 	.word	0x00000bcf
 124:	00000bcf 	.word	0x00000bcf
 128:	00000bcf 	.word	0x00000bcf
 12c:	00000bcf 	.word	0x00000bcf
 130:	00000bcf 	.word	0x00000bcf
 134:	00000bcf 	.word	0x00000bcf
 138:	00000bcf 	.word	0x00000bcf
 13c:	00000bcf 	.word	0x00000bcf
 140:	00000bcf 	.word	0x00000bcf
 144:	00000bcf 	.word	0x00000bcf
 148:	00000bcf 	.word	0x00000bcf
 14c:	00000bcf 	.word	0x00000bcf
 150:	00000bcf 	.word	0x00000bcf
 154:	00000bcf 	.word	0x00000bcf
 158:	00000bcf 	.word	0x00000bcf
 15c:	00000bcf 	.word	0x00000bcf
 160:	00000bcf 	.word	0x00000bcf
 164:	00000bcf 	.word	0x00000bcf
 168:	00000bcf 	.word	0x00000bcf
 16c:	00000bcf 	.word	0x00000bcf
 170:	00000bcf 	.word	0x00000bcf
 174:	00000bcf 	.word	0x00000bcf
 178:	00000bcf 	.word	0x00000bcf
 17c:	00000bcf 	.word	0x00000bcf
 180:	00000bcf 	.word	0x00000bcf
 184:	00000bcf 	.word	0x00000bcf
 188:	00000bcf 	.word	0x00000bcf
 18c:	00000bcf 	.word	0x00000bcf
 190:	00000bcf 	.word	0x00000bcf
 194:	00000bcf 	.word	0x00000bcf
 198:	00000bcf 	.word	0x00000bcf
 19c:	00000bcf 	.word	0x00000bcf
 1a0:	00000bcf 	.word	0x00000bcf
 1a4:	00000bcf 	.word	0x00000bcf
 1a8:	00000bcf 	.word	0x00000bcf
 1ac:	00000bcf 	.word	0x00000bcf
 1b0:	00000bcf 	.word	0x00000bcf
 1b4:	00000bcf 	.word	0x00000bcf
 1b8:	00000bcf 	.word	0x00000bcf
 1bc:	00000bcf 	.word	0x00000bcf
 1c0:	00000bcf 	.word	0x00000bcf
 1c4:	00000bcf 	.word	0x00000bcf
 1c8:	00000bcf 	.word	0x00000bcf
 1cc:	00000bcf 	.word	0x00000bcf
 1d0:	00000bcf 	.word	0x00000bcf
 1d4:	00000bcf 	.word	0x00000bcf
 1d8:	00000bcf 	.word	0x00000bcf
 1dc:	00000bcf 	.word	0x00000bcf
 1e0:	00000bcf 	.word	0x00000bcf
 1e4:	00000bcf 	.word	0x00000bcf
 1e8:	00000bcf 	.word	0x00000bcf
 1ec:	00000bcf 	.word	0x00000bcf
 1f0:	00000bcf 	.word	0x00000bcf
 1f4:	00000bcf 	.word	0x00000bcf
 1f8:	00000bcf 	.word	0x00000bcf
 1fc:	00000bcf 	.word	0x00000bcf
 200:	00000bcf 	.word	0x00000bcf
 204:	00000bcf 	.word	0x00000bcf
 208:	00000bcf 	.word	0x00000bcf
 20c:	00000bcf 	.word	0x00000bcf
 210:	00000bcf 	.word	0x00000bcf
 214:	00000bcf 	.word	0x00000bcf
 218:	00000bcf 	.word	0x00000bcf
 21c:	00000bcf 	.word	0x00000bcf
 220:	00000bcf 	.word	0x00000bcf
 224:	00000bcf 	.word	0x00000bcf
 228:	00000bcf 	.word	0x00000bcf
 22c:	00000bcf 	.word	0x00000bcf
 230:	00000bcf 	.word	0x00000bcf
 234:	00000bcf 	.word	0x00000bcf
 238:	00000bcf 	.word	0x00000bcf
 23c:	00000bcf 	.word	0x00000bcf
 240:	00000bcf 	.word	0x00000bcf
 244:	00000bcf 	.word	0x00000bcf
 248:	00000bcf 	.word	0x00000bcf
 24c:	00000bcf 	.word	0x00000bcf
 250:	00000bcf 	.word	0x00000bcf
 254:	00000bcf 	.word	0x00000bcf
 258:	00000bcf 	.word	0x00000bcf
 25c:	00000bcf 	.word	0x00000bcf
 260:	00000bcf 	.word	0x00000bcf
 264:	00000bcf 	.word	0x00000bcf
 268:	00000bcf 	.word	0x00000bcf
 26c:	00000bcf 	.word	0x00000bcf
 270:	00000bcf 	.word	0x00000bcf
 274:	00000bcf 	.word	0x00000bcf
 278:	00000bcf 	.word	0x00000bcf
 27c:	00000bcf 	.word	0x00000bcf
 280:	00000bcf 	.word	0x00000bcf
 284:	00000bcf 	.word	0x00000bcf
 288:	00000bcf 	.word	0x00000bcf
 28c:	00000bcf 	.word	0x00000bcf
 290:	00000bcf 	.word	0x00000bcf
 294:	00000bcf 	.word	0x00000bcf
 298:	00000bcf 	.word	0x00000bcf
 29c:	00000bcf 	.word	0x00000bcf
 2a0:	00000bcf 	.word	0x00000bcf
 2a4:	00000bcf 	.word	0x00000bcf
 2a8:	00000bcf 	.word	0x00000bcf
 2ac:	00000bcf 	.word	0x00000bcf
 2b0:	00000bcf 	.word	0x00000bcf
 2b4:	00000bcf 	.word	0x00000bcf
 2b8:	00000bcf 	.word	0x00000bcf
 2bc:	00000bcf 	.word	0x00000bcf
 2c0:	00000bcf 	.word	0x00000bcf
 2c4:	00000bcf 	.word	0x00000bcf
 2c8:	00000bcf 	.word	0x00000bcf
 2cc:	00000bcf 	.word	0x00000bcf
 2d0:	00000bcf 	.word	0x00000bcf
 2d4:	00000bcf 	.word	0x00000bcf
 2d8:	00000bcf 	.word	0x00000bcf
 2dc:	00000bcf 	.word	0x00000bcf
 2e0:	00000bcf 	.word	0x00000bcf
 2e4:	00000bcf 	.word	0x00000bcf
 2e8:	00000bcf 	.word	0x00000bcf
 2ec:	00000bcf 	.word	0x00000bcf
 2f0:	00000bcf 	.word	0x00000bcf
 2f4:	00000bcf 	.word	0x00000bcf
 2f8:	00000bcf 	.word	0x00000bcf
 2fc:	00000bcf 	.word	0x00000bcf
 300:	00000bcf 	.word	0x00000bcf
 304:	00000bcf 	.word	0x00000bcf
 308:	00000bcf 	.word	0x00000bcf
 30c:	00000bcf 	.word	0x00000bcf

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fad3 	bl	a2c <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb92 	bl	bb4 <startup_go_to_user_mode>
     490:	f000 fa5c 	bl	94c <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff90a0 	.word	0x1fff90a0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fadd 	bl	b58 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f000 fc60 	bl	1188 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f000 fc10 	bl	10f0 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f000 fc20 	bl	1122 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CanIf_ControllerBusOff>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerBusOff(uint8 ControllerId)
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
     904:	bf00      	nop
     906:	b002      	add	sp, #8
     908:	4770      	bx	lr

0000090a <CanIf_ControllerModeIndication>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerModeIndication(uint8 ControllerId, Can_ControllerStateType ControllerMode )
{
     90a:	b082      	sub	sp, #8
     90c:	4603      	mov	r3, r0
     90e:	9100      	str	r1, [sp, #0]
     910:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ControllerMode;
}
     914:	bf00      	nop
     916:	b002      	add	sp, #8
     918:	4770      	bx	lr
	...

0000091c <CanIf_TxConfirmation>:

/*CanIf callback function implementation to set the flag when a message is transmited
this function is called by the Can_43_FLEXCAN_MainFunction_Write function.
In reality this function is already implemented in CanIf layer*/
void CanIf_TxConfirmation( PduIdType CanTxPduId )
{
     91c:	b082      	sub	sp, #8
     91e:	4603      	mov	r3, r0
     920:	f8ad 3006 	strh.w	r3, [sp, #6]
    CanIf_bTxFlag = TRUE;
     924:	4b02      	ldr	r3, [pc, #8]	; (930 <CanIf_TxConfirmation+0x14>)
     926:	2201      	movs	r2, #1
     928:	701a      	strb	r2, [r3, #0]
    (void)CanTxPduId;
}
     92a:	bf00      	nop
     92c:	b002      	add	sp, #8
     92e:	4770      	bx	lr
     930:	1fff8b30 	.word	0x1fff8b30

00000934 <CanIf_RxIndication>:

/*CanIf callback function implementation to set the flag when a message is received
this function is called by the Can_43_FLEXCAN_MainFunction_Read function.
In reality this function is already implemented in CanIf layer*/
void CanIf_RxIndication(const Can_HwType* Mailbox, const PduInfoType* PduInfoPtr )
{
     934:	b082      	sub	sp, #8
     936:	9001      	str	r0, [sp, #4]
     938:	9100      	str	r1, [sp, #0]
    CanIf_bRxFlag = TRUE;
     93a:	4b03      	ldr	r3, [pc, #12]	; (948 <CanIf_RxIndication+0x14>)
     93c:	2201      	movs	r2, #1
     93e:	701a      	strb	r2, [r3, #0]
    (void)Mailbox;
    /*the received message is store in PduInfoPtr->SduDataPtr*/
    (void)PduInfoPtr;
}
     940:	bf00      	nop
     942:	b002      	add	sp, #8
     944:	4770      	bx	lr
     946:	bf00      	nop
     948:	1fff8b31 	.word	0x1fff8b31

0000094c <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     94c:	b500      	push	{lr}
     94e:	b085      	sub	sp, #20
    EcuM_Init();
     950:	f000 f840 	bl	9d4 <EcuM_Init>

    Can_PduType PduInfo;

    /*Start the CAN controller and make it active in the CAN bus network*/
    Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED );
     954:	2101      	movs	r1, #1
     956:	2000      	movs	r0, #0
     958:	f004 feb4 	bl	56c4 <Can_43_FLEXCAN_SetControllerMode>

    /*Fill the structure with the information to be transmitted*/
    PduInfo.id = 0u;
     95c:	2300      	movs	r3, #0
     95e:	9301      	str	r3, [sp, #4]
    PduInfo.swPduHandle = 0u;
     960:	2300      	movs	r3, #0
     962:	f8ad 3008 	strh.w	r3, [sp, #8]
    PduInfo.length = 8u;
     966:	2308      	movs	r3, #8
     968:	f88d 300a 	strb.w	r3, [sp, #10]
    PduInfo.sdu = Can_au8Sdu8bytes;
     96c:	4b16      	ldr	r3, [pc, #88]	; (9c8 <main+0x7c>)
     96e:	9303      	str	r3, [sp, #12]

    while( 1u )
    {
        /*set the FlexCAN peripheral to transmit the message, the message will be
        transmitted by the CAN interrupt*/
        Can_43_FLEXCAN_Write( CanHardwareObject_1, &PduInfo );
     970:	ab01      	add	r3, sp, #4
     972:	4619      	mov	r1, r3
     974:	2001      	movs	r0, #1
     976:	f005 f867 	bl	5a48 <Can_43_FLEXCAN_Write>

        /*wait until the CAN interrupt transmit message, waiting is not the
        suitable way, but good enough for ilustration purposes, flag is 
        updated by the callback function CanIf_TxConfirmation*/
        while( CanIf_bTxFlag == FALSE );
     97a:	bf00      	nop
     97c:	4b13      	ldr	r3, [pc, #76]	; (9cc <main+0x80>)
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	f083 0301 	eor.w	r3, r3, #1
     984:	b2db      	uxtb	r3, r3
     986:	2b00      	cmp	r3, #0
     988:	d1f8      	bne.n	97c <main+0x30>
        /*Clear the Tx flag*/
        CanIf_bTxFlag = FALSE;
     98a:	4b10      	ldr	r3, [pc, #64]	; (9cc <main+0x80>)
     98c:	2200      	movs	r2, #0
     98e:	701a      	strb	r2, [r3, #0]

        /*wait here until the previous transmited message is received
        This is not the most suitable way, but good enough for ilustration
        purposes, flag is updated by the callback function CanIf_RxIndication*/
        while( CanIf_bRxFlag == FALSE );
     990:	bf00      	nop
     992:	4b0f      	ldr	r3, [pc, #60]	; (9d0 <main+0x84>)
     994:	781b      	ldrb	r3, [r3, #0]
     996:	f083 0301 	eor.w	r3, r3, #1
     99a:	b2db      	uxtb	r3, r3
     99c:	2b00      	cmp	r3, #0
     99e:	d1f8      	bne.n	992 <main+0x46>
        /*Clear the Tx flag*/
        CanIf_bRxFlag = FALSE;
     9a0:	4b0b      	ldr	r3, [pc, #44]	; (9d0 <main+0x84>)
     9a2:	2200      	movs	r2, #0
     9a4:	701a      	strb	r2, [r3, #0]

        /*increase some values just for ilustration purposes*/
        Can_au8Sdu8bytes[0]++;
     9a6:	4b08      	ldr	r3, [pc, #32]	; (9c8 <main+0x7c>)
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	3301      	adds	r3, #1
     9ac:	b2da      	uxtb	r2, r3
     9ae:	4b06      	ldr	r3, [pc, #24]	; (9c8 <main+0x7c>)
     9b0:	701a      	strb	r2, [r3, #0]
        Can_au8Sdu8bytes[7]++;
     9b2:	4b05      	ldr	r3, [pc, #20]	; (9c8 <main+0x7c>)
     9b4:	79db      	ldrb	r3, [r3, #7]
     9b6:	3301      	adds	r3, #1
     9b8:	b2da      	uxtb	r2, r3
     9ba:	4b03      	ldr	r3, [pc, #12]	; (9c8 <main+0x7c>)
     9bc:	71da      	strb	r2, [r3, #7]
        
        Delay( 5000u );
     9be:	f241 3088 	movw	r0, #5000	; 0x1388
     9c2:	f7ff ff75 	bl	8b0 <Delay>
        Can_43_FLEXCAN_Write( CanHardwareObject_1, &PduInfo );
     9c6:	e7d3      	b.n	970 <main+0x24>
     9c8:	1fff8b10 	.word	0x1fff8b10
     9cc:	1fff8b30 	.word	0x1fff8b30
     9d0:	1fff8b31 	.word	0x1fff8b31

000009d4 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     9d4:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     9d6:	480a      	ldr	r0, [pc, #40]	; (a00 <EcuM_Init+0x2c>)
     9d8:	f004 f916 	bl	4c08 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     9dc:	2000      	movs	r0, #0
     9de:	f004 f967 	bl	4cb0 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     9e2:	2000      	movs	r0, #0
     9e4:	f004 f988 	bl	4cf8 <Mcu_SetMode>
    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     9e8:	2000      	movs	r0, #0
     9ea:	f000 fb78 	bl	10de <OsIf_Init>
    
    /*enable and setup interrupts in use by the Can Driver*/
    Platform_Init( NULL_PTR );
     9ee:	2000      	movs	r0, #0
     9f0:	f000 fa72 	bl	ed8 <Platform_Init>

    /*init the FlexCAN0 with the paramters set in Tresos in loop back mode*/
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     9f4:	4803      	ldr	r0, [pc, #12]	; (a04 <EcuM_Init+0x30>)
     9f6:	f004 fdf7 	bl	55e8 <Can_43_FLEXCAN_Init>
}
     9fa:	bf00      	nop
     9fc:	bd08      	pop	{r3, pc}
     9fe:	bf00      	nop
     a00:	0000cf88 	.word	0x0000cf88
     a04:	0000caf0 	.word	0x0000caf0

00000a08 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     a08:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a0a:	f3ef 8310 	mrs	r3, PRIMASK
     a0e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a10:	4623      	mov	r3, r4
}
     a12:	4618      	mov	r0, r3
     a14:	f85d 4b04 	ldr.w	r4, [sp], #4
     a18:	4770      	bx	lr

00000a1a <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a1a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a1c:	f3ef 8310 	mrs	r3, PRIMASK
     a20:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a22:	4623      	mov	r3, r4
}
     a24:	4618      	mov	r0, r3
     a26:	f85d 4b04 	ldr.w	r4, [sp], #4
     a2a:	4770      	bx	lr

00000a2c <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a2c:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a2e:	2300      	movs	r3, #0
     a30:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a32:	2300      	movs	r3, #0
     a34:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a36:	2300      	movs	r3, #0
     a38:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a3a:	2300      	movs	r3, #0
     a3c:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a3e:	4b44      	ldr	r3, [pc, #272]	; (b50 <init_data_bss+0x124>)
     a40:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a42:	4b44      	ldr	r3, [pc, #272]	; (b54 <init_data_bss+0x128>)
     a44:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a46:	9b05      	ldr	r3, [sp, #20]
     a48:	681b      	ldr	r3, [r3, #0]
     a4a:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a4c:	9b05      	ldr	r3, [sp, #20]
     a4e:	3304      	adds	r3, #4
     a50:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a52:	9b05      	ldr	r3, [sp, #20]
     a54:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a56:	2300      	movs	r3, #0
     a58:	9309      	str	r3, [sp, #36]	; 0x24
     a5a:	e03d      	b.n	ad8 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a5e:	4613      	mov	r3, r2
     a60:	005b      	lsls	r3, r3, #1
     a62:	4413      	add	r3, r2
     a64:	009b      	lsls	r3, r3, #2
     a66:	461a      	mov	r2, r3
     a68:	9b03      	ldr	r3, [sp, #12]
     a6a:	4413      	add	r3, r2
     a6c:	685b      	ldr	r3, [r3, #4]
     a6e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a72:	4613      	mov	r3, r2
     a74:	005b      	lsls	r3, r3, #1
     a76:	4413      	add	r3, r2
     a78:	009b      	lsls	r3, r3, #2
     a7a:	461a      	mov	r2, r3
     a7c:	9b03      	ldr	r3, [sp, #12]
     a7e:	4413      	add	r3, r2
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a86:	4613      	mov	r3, r2
     a88:	005b      	lsls	r3, r3, #1
     a8a:	4413      	add	r3, r2
     a8c:	009b      	lsls	r3, r3, #2
     a8e:	461a      	mov	r2, r3
     a90:	9b03      	ldr	r3, [sp, #12]
     a92:	4413      	add	r3, r2
     a94:	689b      	ldr	r3, [r3, #8]
     a96:	4619      	mov	r1, r3
     a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a9a:	4613      	mov	r3, r2
     a9c:	005b      	lsls	r3, r3, #1
     a9e:	4413      	add	r3, r2
     aa0:	009b      	lsls	r3, r3, #2
     aa2:	461a      	mov	r2, r3
     aa4:	9b03      	ldr	r3, [sp, #12]
     aa6:	4413      	add	r3, r2
     aa8:	685b      	ldr	r3, [r3, #4]
     aaa:	1acb      	subs	r3, r1, r3
     aac:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     aae:	2300      	movs	r3, #0
     ab0:	9308      	str	r3, [sp, #32]
     ab2:	e00a      	b.n	aca <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ab4:	9a00      	ldr	r2, [sp, #0]
     ab6:	9b08      	ldr	r3, [sp, #32]
     ab8:	441a      	add	r2, r3
     aba:	9901      	ldr	r1, [sp, #4]
     abc:	9b08      	ldr	r3, [sp, #32]
     abe:	440b      	add	r3, r1
     ac0:	7812      	ldrb	r2, [r2, #0]
     ac2:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ac4:	9b08      	ldr	r3, [sp, #32]
     ac6:	3301      	adds	r3, #1
     ac8:	9308      	str	r3, [sp, #32]
     aca:	9a08      	ldr	r2, [sp, #32]
     acc:	9b06      	ldr	r3, [sp, #24]
     ace:	429a      	cmp	r2, r3
     ad0:	d3f0      	bcc.n	ab4 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ad4:	3301      	adds	r3, #1
     ad6:	9309      	str	r3, [sp, #36]	; 0x24
     ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ada:	9b07      	ldr	r3, [sp, #28]
     adc:	429a      	cmp	r2, r3
     ade:	d3bd      	bcc.n	a5c <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     ae0:	9b04      	ldr	r3, [sp, #16]
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     ae6:	9b04      	ldr	r3, [sp, #16]
     ae8:	3304      	adds	r3, #4
     aea:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     aec:	9b04      	ldr	r3, [sp, #16]
     aee:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     af0:	2300      	movs	r3, #0
     af2:	9309      	str	r3, [sp, #36]	; 0x24
     af4:	e024      	b.n	b40 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     af8:	00db      	lsls	r3, r3, #3
     afa:	9a02      	ldr	r2, [sp, #8]
     afc:	4413      	add	r3, r2
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b04:	00db      	lsls	r3, r3, #3
     b06:	9a02      	ldr	r2, [sp, #8]
     b08:	4413      	add	r3, r2
     b0a:	685b      	ldr	r3, [r3, #4]
     b0c:	4619      	mov	r1, r3
     b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b10:	00db      	lsls	r3, r3, #3
     b12:	9a02      	ldr	r2, [sp, #8]
     b14:	4413      	add	r3, r2
     b16:	681b      	ldr	r3, [r3, #0]
     b18:	1acb      	subs	r3, r1, r3
     b1a:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b1c:	2300      	movs	r3, #0
     b1e:	9308      	str	r3, [sp, #32]
     b20:	e007      	b.n	b32 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b22:	9a01      	ldr	r2, [sp, #4]
     b24:	9b08      	ldr	r3, [sp, #32]
     b26:	4413      	add	r3, r2
     b28:	2200      	movs	r2, #0
     b2a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b2c:	9b08      	ldr	r3, [sp, #32]
     b2e:	3301      	adds	r3, #1
     b30:	9308      	str	r3, [sp, #32]
     b32:	9a08      	ldr	r2, [sp, #32]
     b34:	9b06      	ldr	r3, [sp, #24]
     b36:	429a      	cmp	r2, r3
     b38:	d3f3      	bcc.n	b22 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b3c:	3301      	adds	r3, #1
     b3e:	9309      	str	r3, [sp, #36]	; 0x24
     b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b42:	9b07      	ldr	r3, [sp, #28]
     b44:	429a      	cmp	r2, r3
     b46:	d3d6      	bcc.n	af6 <init_data_bss+0xca>
        }
    }
}
     b48:	bf00      	nop
     b4a:	bf00      	nop
     b4c:	b00a      	add	sp, #40	; 0x28
     b4e:	4770      	bx	lr
     b50:	0000cfe8 	.word	0x0000cfe8
     b54:	0000d004 	.word	0x0000d004

00000b58 <sys_m4_cache_init>:
{
     b58:	b084      	sub	sp, #16
     b5a:	4603      	mov	r3, r0
     b5c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b60:	2300      	movs	r3, #0
     b62:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d118      	bne.n	ba0 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b6e:	4b10      	ldr	r3, [pc, #64]	; (bb0 <sys_m4_cache_init+0x58>)
     b70:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b74:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b76:	4b0e      	ldr	r3, [pc, #56]	; (bb0 <sys_m4_cache_init+0x58>)
     b78:	681b      	ldr	r3, [r3, #0]
     b7a:	4a0d      	ldr	r2, [pc, #52]	; (bb0 <sys_m4_cache_init+0x58>)
     b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b80:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b82:	bf00      	nop
     b84:	4b0a      	ldr	r3, [pc, #40]	; (bb0 <sys_m4_cache_init+0x58>)
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b90:	d0f8      	beq.n	b84 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b92:	4b07      	ldr	r3, [pc, #28]	; (bb0 <sys_m4_cache_init+0x58>)
     b94:	681b      	ldr	r3, [r3, #0]
     b96:	4a06      	ldr	r2, [pc, #24]	; (bb0 <sys_m4_cache_init+0x58>)
     b98:	f043 0301 	orr.w	r3, r3, #1
     b9c:	6013      	str	r3, [r2, #0]
     b9e:	e002      	b.n	ba6 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     ba0:	2301      	movs	r3, #1
     ba2:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     ba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     baa:	4618      	mov	r0, r3
     bac:	b004      	add	sp, #16
     bae:	4770      	bx	lr
     bb0:	e0082000 	.word	0xe0082000

00000bb4 <startup_go_to_user_mode>:
}
     bb4:	bf00      	nop
     bb6:	4770      	bx	lr

00000bb8 <Sys_GetCoreID>:
    return 0U;
     bb8:	2300      	movs	r3, #0
}
     bba:	4618      	mov	r0, r3
     bbc:	4770      	bx	lr

00000bbe <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bbe:	e7fe      	b.n	bbe <HardFault_Handler>

00000bc0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bc0:	e7fe      	b.n	bc0 <MemManage_Handler>

00000bc2 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bc2:	e7fe      	b.n	bc2 <BusFault_Handler>

00000bc4 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bc4:	e7fe      	b.n	bc4 <UsageFault_Handler>

00000bc6 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bc6:	e7fe      	b.n	bc6 <SVC_Handler>

00000bc8 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bc8:	e7fe      	b.n	bc8 <DebugMon_Handler>

00000bca <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bca:	e7fe      	b.n	bca <PendSV_Handler>

00000bcc <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     bcc:	e7fe      	b.n	bcc <SysTick_Handler>

00000bce <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bce:	e7fe      	b.n	bce <undefined_handler>

00000bd0 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     bd0:	b086      	sub	sp, #24
     bd2:	9003      	str	r0, [sp, #12]
     bd4:	9102      	str	r1, [sp, #8]
     bd6:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     bd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     bdc:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     be0:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     be2:	9b01      	ldr	r3, [sp, #4]
     be4:	2b00      	cmp	r3, #0
     be6:	d007      	beq.n	bf8 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     be8:	9b03      	ldr	r3, [sp, #12]
     bea:	3310      	adds	r3, #16
     bec:	009b      	lsls	r3, r3, #2
     bee:	9a05      	ldr	r2, [sp, #20]
     bf0:	4413      	add	r3, r2
     bf2:	681a      	ldr	r2, [r3, #0]
     bf4:	9b01      	ldr	r3, [sp, #4]
     bf6:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	3310      	adds	r3, #16
     bfc:	009b      	lsls	r3, r3, #2
     bfe:	9a05      	ldr	r2, [sp, #20]
     c00:	4413      	add	r3, r2
     c02:	9a02      	ldr	r2, [sp, #8]
     c04:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     c06:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     c0a:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     c0e:	bf00      	nop
     c10:	b006      	add	sp, #24
     c12:	4770      	bx	lr

00000c14 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c14:	b082      	sub	sp, #8
     c16:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c18:	9b01      	ldr	r3, [sp, #4]
     c1a:	f003 021f 	and.w	r2, r3, #31
     c1e:	4905      	ldr	r1, [pc, #20]	; (c34 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	095b      	lsrs	r3, r3, #5
     c24:	2001      	movs	r0, #1
     c26:	fa00 f202 	lsl.w	r2, r0, r2
     c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c2e:	bf00      	nop
     c30:	b002      	add	sp, #8
     c32:	4770      	bx	lr
     c34:	e000e100 	.word	0xe000e100

00000c38 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c38:	b082      	sub	sp, #8
     c3a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c3c:	9b01      	ldr	r3, [sp, #4]
     c3e:	f003 021f 	and.w	r2, r3, #31
     c42:	4906      	ldr	r1, [pc, #24]	; (c5c <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     c44:	9b01      	ldr	r3, [sp, #4]
     c46:	095b      	lsrs	r3, r3, #5
     c48:	2001      	movs	r0, #1
     c4a:	fa00 f202 	lsl.w	r2, r0, r2
     c4e:	3320      	adds	r3, #32
     c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c54:	bf00      	nop
     c56:	b002      	add	sp, #8
     c58:	4770      	bx	lr
     c5a:	bf00      	nop
     c5c:	e000e100 	.word	0xe000e100

00000c60 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     c60:	b084      	sub	sp, #16
     c62:	9001      	str	r0, [sp, #4]
     c64:	460b      	mov	r3, r1
     c66:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c6a:	2304      	movs	r3, #4
     c6c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     c70:	f89d 2003 	ldrb.w	r2, [sp, #3]
     c74:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c78:	fa02 f103 	lsl.w	r1, r2, r3
     c7c:	4a04      	ldr	r2, [pc, #16]	; (c90 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     c7e:	9b01      	ldr	r3, [sp, #4]
     c80:	b2c9      	uxtb	r1, r1
     c82:	4413      	add	r3, r2
     c84:	460a      	mov	r2, r1
     c86:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     c8a:	bf00      	nop
     c8c:	b004      	add	sp, #16
     c8e:	4770      	bx	lr
     c90:	e000e100 	.word	0xe000e100

00000c94 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     c94:	b084      	sub	sp, #16
     c96:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c98:	2304      	movs	r3, #4
     c9a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     c9e:	4a09      	ldr	r2, [pc, #36]	; (cc4 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     ca0:	9b01      	ldr	r3, [sp, #4]
     ca2:	4413      	add	r3, r2
     ca4:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     ca8:	b2db      	uxtb	r3, r3
     caa:	461a      	mov	r2, r3
     cac:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cb0:	fa42 f303 	asr.w	r3, r2, r3
     cb4:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     cb8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     cbc:	4618      	mov	r0, r3
     cbe:	b004      	add	sp, #16
     cc0:	4770      	bx	lr
     cc2:	bf00      	nop
     cc4:	e000e100 	.word	0xe000e100

00000cc8 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     cc8:	b082      	sub	sp, #8
     cca:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     ccc:	9b01      	ldr	r3, [sp, #4]
     cce:	f003 021f 	and.w	r2, r3, #31
     cd2:	4906      	ldr	r1, [pc, #24]	; (cec <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     cd4:	9b01      	ldr	r3, [sp, #4]
     cd6:	095b      	lsrs	r3, r3, #5
     cd8:	2001      	movs	r0, #1
     cda:	fa00 f202 	lsl.w	r2, r0, r2
     cde:	3360      	adds	r3, #96	; 0x60
     ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     ce4:	bf00      	nop
     ce6:	b002      	add	sp, #8
     ce8:	4770      	bx	lr
     cea:	bf00      	nop
     cec:	e000e100 	.word	0xe000e100

00000cf0 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     cf0:	b500      	push	{lr}
     cf2:	b085      	sub	sp, #20
     cf4:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     cf6:	2300      	movs	r3, #0
     cf8:	9303      	str	r3, [sp, #12]
     cfa:	e05d      	b.n	db8 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     cfc:	9b01      	ldr	r3, [sp, #4]
     cfe:	6859      	ldr	r1, [r3, #4]
     d00:	9a03      	ldr	r2, [sp, #12]
     d02:	4613      	mov	r3, r2
     d04:	005b      	lsls	r3, r3, #1
     d06:	4413      	add	r3, r2
     d08:	009b      	lsls	r3, r3, #2
     d0a:	440b      	add	r3, r1
     d0c:	681b      	ldr	r3, [r3, #0]
     d0e:	4618      	mov	r0, r3
     d10:	f000 f899 	bl	e46 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d14:	9b01      	ldr	r3, [sp, #4]
     d16:	6859      	ldr	r1, [r3, #4]
     d18:	9a03      	ldr	r2, [sp, #12]
     d1a:	4613      	mov	r3, r2
     d1c:	005b      	lsls	r3, r3, #1
     d1e:	4413      	add	r3, r2
     d20:	009b      	lsls	r3, r3, #2
     d22:	440b      	add	r3, r1
     d24:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d26:	9b01      	ldr	r3, [sp, #4]
     d28:	6859      	ldr	r1, [r3, #4]
     d2a:	9a03      	ldr	r2, [sp, #12]
     d2c:	4613      	mov	r3, r2
     d2e:	005b      	lsls	r3, r3, #1
     d30:	4413      	add	r3, r2
     d32:	009b      	lsls	r3, r3, #2
     d34:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d36:	795b      	ldrb	r3, [r3, #5]
     d38:	4619      	mov	r1, r3
     d3a:	f000 f869 	bl	e10 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d3e:	9b01      	ldr	r3, [sp, #4]
     d40:	6859      	ldr	r1, [r3, #4]
     d42:	9a03      	ldr	r2, [sp, #12]
     d44:	4613      	mov	r3, r2
     d46:	005b      	lsls	r3, r3, #1
     d48:	4413      	add	r3, r2
     d4a:	009b      	lsls	r3, r3, #2
     d4c:	440b      	add	r3, r1
     d4e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     d50:	9b01      	ldr	r3, [sp, #4]
     d52:	6859      	ldr	r1, [r3, #4]
     d54:	9a03      	ldr	r2, [sp, #12]
     d56:	4613      	mov	r3, r2
     d58:	005b      	lsls	r3, r3, #1
     d5a:	4413      	add	r3, r2
     d5c:	009b      	lsls	r3, r3, #2
     d5e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d60:	689b      	ldr	r3, [r3, #8]
     d62:	2200      	movs	r2, #0
     d64:	4619      	mov	r1, r3
     d66:	f000 f831 	bl	dcc <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     d6a:	9b01      	ldr	r3, [sp, #4]
     d6c:	6859      	ldr	r1, [r3, #4]
     d6e:	9a03      	ldr	r2, [sp, #12]
     d70:	4613      	mov	r3, r2
     d72:	005b      	lsls	r3, r3, #1
     d74:	4413      	add	r3, r2
     d76:	009b      	lsls	r3, r3, #2
     d78:	440b      	add	r3, r1
     d7a:	791b      	ldrb	r3, [r3, #4]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d00c      	beq.n	d9a <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d80:	9b01      	ldr	r3, [sp, #4]
     d82:	6859      	ldr	r1, [r3, #4]
     d84:	9a03      	ldr	r2, [sp, #12]
     d86:	4613      	mov	r3, r2
     d88:	005b      	lsls	r3, r3, #1
     d8a:	4413      	add	r3, r2
     d8c:	009b      	lsls	r3, r3, #2
     d8e:	440b      	add	r3, r1
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	4618      	mov	r0, r3
     d94:	f000 f828 	bl	de8 <IntCtrl_Ip_EnableIrq>
     d98:	e00b      	b.n	db2 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d9a:	9b01      	ldr	r3, [sp, #4]
     d9c:	6859      	ldr	r1, [r3, #4]
     d9e:	9a03      	ldr	r2, [sp, #12]
     da0:	4613      	mov	r3, r2
     da2:	005b      	lsls	r3, r3, #1
     da4:	4413      	add	r3, r2
     da6:	009b      	lsls	r3, r3, #2
     da8:	440b      	add	r3, r1
     daa:	681b      	ldr	r3, [r3, #0]
     dac:	4618      	mov	r0, r3
     dae:	f000 f825 	bl	dfc <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     db2:	9b03      	ldr	r3, [sp, #12]
     db4:	3301      	adds	r3, #1
     db6:	9303      	str	r3, [sp, #12]
     db8:	9b01      	ldr	r3, [sp, #4]
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	9a03      	ldr	r2, [sp, #12]
     dbe:	429a      	cmp	r2, r3
     dc0:	d39c      	bcc.n	cfc <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     dc2:	2300      	movs	r3, #0
}
     dc4:	4618      	mov	r0, r3
     dc6:	b005      	add	sp, #20
     dc8:	f85d fb04 	ldr.w	pc, [sp], #4

00000dcc <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     dcc:	b500      	push	{lr}
     dce:	b085      	sub	sp, #20
     dd0:	9003      	str	r0, [sp, #12]
     dd2:	9102      	str	r1, [sp, #8]
     dd4:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     dd6:	9a01      	ldr	r2, [sp, #4]
     dd8:	9902      	ldr	r1, [sp, #8]
     dda:	9803      	ldr	r0, [sp, #12]
     ddc:	f7ff fef8 	bl	bd0 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     de0:	bf00      	nop
     de2:	b005      	add	sp, #20
     de4:	f85d fb04 	ldr.w	pc, [sp], #4

00000de8 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     de8:	b500      	push	{lr}
     dea:	b083      	sub	sp, #12
     dec:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     dee:	9801      	ldr	r0, [sp, #4]
     df0:	f7ff ff10 	bl	c14 <IntCtrl_Ip_EnableIrqPrivileged>
}
     df4:	bf00      	nop
     df6:	b003      	add	sp, #12
     df8:	f85d fb04 	ldr.w	pc, [sp], #4

00000dfc <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     dfc:	b500      	push	{lr}
     dfe:	b083      	sub	sp, #12
     e00:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     e02:	9801      	ldr	r0, [sp, #4]
     e04:	f7ff ff18 	bl	c38 <IntCtrl_Ip_DisableIrqPrivileged>
}
     e08:	bf00      	nop
     e0a:	b003      	add	sp, #12
     e0c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e10 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e10:	b500      	push	{lr}
     e12:	b083      	sub	sp, #12
     e14:	9001      	str	r0, [sp, #4]
     e16:	460b      	mov	r3, r1
     e18:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e20:	4619      	mov	r1, r3
     e22:	9801      	ldr	r0, [sp, #4]
     e24:	f7ff ff1c 	bl	c60 <IntCtrl_Ip_SetPriorityPrivileged>
}
     e28:	bf00      	nop
     e2a:	b003      	add	sp, #12
     e2c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e30 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     e30:	b500      	push	{lr}
     e32:	b083      	sub	sp, #12
     e34:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     e36:	9801      	ldr	r0, [sp, #4]
     e38:	f7ff ff2c 	bl	c94 <IntCtrl_Ip_GetPriorityPrivileged>
     e3c:	4603      	mov	r3, r0
}
     e3e:	4618      	mov	r0, r3
     e40:	b003      	add	sp, #12
     e42:	f85d fb04 	ldr.w	pc, [sp], #4

00000e46 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     e46:	b500      	push	{lr}
     e48:	b083      	sub	sp, #12
     e4a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     e4c:	9801      	ldr	r0, [sp, #4]
     e4e:	f7ff ff3b 	bl	cc8 <IntCtrl_Ip_ClearPendingPrivileged>
}
     e52:	bf00      	nop
     e54:	b003      	add	sp, #12
     e56:	f85d fb04 	ldr.w	pc, [sp], #4
     e5a:	bf00      	nop

00000e5c <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     e5c:	b500      	push	{lr}
     e5e:	b083      	sub	sp, #12
     e60:	9001      	str	r0, [sp, #4]
     e62:	460b      	mov	r3, r1
     e64:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     e68:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e6c:	2b00      	cmp	r3, #0
     e6e:	d003      	beq.n	e78 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     e70:	9801      	ldr	r0, [sp, #4]
     e72:	f7ff ffb9 	bl	de8 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     e76:	e002      	b.n	e7e <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     e78:	9801      	ldr	r0, [sp, #4]
     e7a:	f7ff ffbf 	bl	dfc <IntCtrl_Ip_DisableIrq>
}
     e7e:	bf00      	nop
     e80:	b003      	add	sp, #12
     e82:	f85d fb04 	ldr.w	pc, [sp], #4

00000e86 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e86:	b500      	push	{lr}
     e88:	b083      	sub	sp, #12
     e8a:	9001      	str	r0, [sp, #4]
     e8c:	460b      	mov	r3, r1
     e8e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     e92:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e96:	4619      	mov	r1, r3
     e98:	9801      	ldr	r0, [sp, #4]
     e9a:	f7ff ffb9 	bl	e10 <IntCtrl_Ip_SetPriority>
}
     e9e:	bf00      	nop
     ea0:	b003      	add	sp, #12
     ea2:	f85d fb04 	ldr.w	pc, [sp], #4

00000ea6 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     ea6:	b500      	push	{lr}
     ea8:	b083      	sub	sp, #12
     eaa:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     eac:	9801      	ldr	r0, [sp, #4]
     eae:	f7ff ffbf 	bl	e30 <IntCtrl_Ip_GetPriority>
     eb2:	4603      	mov	r3, r0
}
     eb4:	4618      	mov	r0, r3
     eb6:	b003      	add	sp, #12
     eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00000ebc <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ebc:	b500      	push	{lr}
     ebe:	b085      	sub	sp, #20
     ec0:	9003      	str	r0, [sp, #12]
     ec2:	9102      	str	r1, [sp, #8]
     ec4:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     ec6:	9a01      	ldr	r2, [sp, #4]
     ec8:	9902      	ldr	r1, [sp, #8]
     eca:	9803      	ldr	r0, [sp, #12]
     ecc:	f7ff ff7e 	bl	dcc <IntCtrl_Ip_InstallHandler>
}
     ed0:	bf00      	nop
     ed2:	b005      	add	sp, #20
     ed4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ed8 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     ed8:	b500      	push	{lr}
     eda:	b085      	sub	sp, #20
     edc:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     ede:	2300      	movs	r3, #0
     ee0:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     ee4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ee8:	4a05      	ldr	r2, [pc, #20]	; (f00 <Platform_Init+0x28>)
     eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	4618      	mov	r0, r3
     ef2:	f000 f8c7 	bl	1084 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     ef6:	bf00      	nop
     ef8:	b005      	add	sp, #20
     efa:	f85d fb04 	ldr.w	pc, [sp], #4
     efe:	bf00      	nop
     f00:	0000cfb4 	.word	0x0000cfb4

00000f04 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f04:	b500      	push	{lr}
     f06:	b085      	sub	sp, #20
     f08:	9001      	str	r0, [sp, #4]
     f0a:	460b      	mov	r3, r1
     f0c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f10:	2300      	movs	r3, #0
     f12:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f16:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f1a:	4619      	mov	r1, r3
     f1c:	9801      	ldr	r0, [sp, #4]
     f1e:	f7ff ff9d 	bl	e5c <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f22:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f26:	4618      	mov	r0, r3
     f28:	b005      	add	sp, #20
     f2a:	f85d fb04 	ldr.w	pc, [sp], #4

00000f2e <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f2e:	b500      	push	{lr}
     f30:	b085      	sub	sp, #20
     f32:	9001      	str	r0, [sp, #4]
     f34:	460b      	mov	r3, r1
     f36:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f3a:	2300      	movs	r3, #0
     f3c:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     f40:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f44:	4619      	mov	r1, r3
     f46:	9801      	ldr	r0, [sp, #4]
     f48:	f7ff ff9d 	bl	e86 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     f4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f50:	4618      	mov	r0, r3
     f52:	b005      	add	sp, #20
     f54:	f85d fb04 	ldr.w	pc, [sp], #4

00000f58 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     f58:	b500      	push	{lr}
     f5a:	b085      	sub	sp, #20
     f5c:	9001      	str	r0, [sp, #4]
     f5e:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f60:	2300      	movs	r3, #0
     f62:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     f66:	9801      	ldr	r0, [sp, #4]
     f68:	f7ff ff9d 	bl	ea6 <Platform_Ipw_GetIrqPriority>
     f6c:	4603      	mov	r3, r0
     f6e:	461a      	mov	r2, r3
     f70:	9b00      	ldr	r3, [sp, #0]
     f72:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     f74:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f78:	4618      	mov	r0, r3
     f7a:	b005      	add	sp, #20
     f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f80 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     f80:	b500      	push	{lr}
     f82:	b087      	sub	sp, #28
     f84:	9003      	str	r0, [sp, #12]
     f86:	9102      	str	r1, [sp, #8]
     f88:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f8a:	2300      	movs	r3, #0
     f8c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     f90:	9a01      	ldr	r2, [sp, #4]
     f92:	9902      	ldr	r1, [sp, #8]
     f94:	9803      	ldr	r0, [sp, #12]
     f96:	f7ff ff91 	bl	ebc <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
     f9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     f9e:	4618      	mov	r0, r3
     fa0:	b007      	add	sp, #28
     fa2:	f85d fb04 	ldr.w	pc, [sp], #4
     fa6:	bf00      	nop

00000fa8 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     fa8:	b500      	push	{lr}
     faa:	b085      	sub	sp, #20
     fac:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     fae:	2300      	movs	r3, #0
     fb0:	9303      	str	r3, [sp, #12]
     fb2:	e05d      	b.n	1070 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     fb4:	9b01      	ldr	r3, [sp, #4]
     fb6:	6859      	ldr	r1, [r3, #4]
     fb8:	9a03      	ldr	r2, [sp, #12]
     fba:	4613      	mov	r3, r2
     fbc:	005b      	lsls	r3, r3, #1
     fbe:	4413      	add	r3, r2
     fc0:	009b      	lsls	r3, r3, #2
     fc2:	440b      	add	r3, r1
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	4618      	mov	r0, r3
     fc8:	f7ff ff3d 	bl	e46 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fcc:	9b01      	ldr	r3, [sp, #4]
     fce:	6859      	ldr	r1, [r3, #4]
     fd0:	9a03      	ldr	r2, [sp, #12]
     fd2:	4613      	mov	r3, r2
     fd4:	005b      	lsls	r3, r3, #1
     fd6:	4413      	add	r3, r2
     fd8:	009b      	lsls	r3, r3, #2
     fda:	440b      	add	r3, r1
     fdc:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     fde:	9b01      	ldr	r3, [sp, #4]
     fe0:	6859      	ldr	r1, [r3, #4]
     fe2:	9a03      	ldr	r2, [sp, #12]
     fe4:	4613      	mov	r3, r2
     fe6:	005b      	lsls	r3, r3, #1
     fe8:	4413      	add	r3, r2
     fea:	009b      	lsls	r3, r3, #2
     fec:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fee:	795b      	ldrb	r3, [r3, #5]
     ff0:	4619      	mov	r1, r3
     ff2:	f7ff ff0d 	bl	e10 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     ff6:	9b01      	ldr	r3, [sp, #4]
     ff8:	6859      	ldr	r1, [r3, #4]
     ffa:	9a03      	ldr	r2, [sp, #12]
     ffc:	4613      	mov	r3, r2
     ffe:	005b      	lsls	r3, r3, #1
    1000:	4413      	add	r3, r2
    1002:	009b      	lsls	r3, r3, #2
    1004:	440b      	add	r3, r1
    1006:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1008:	9b01      	ldr	r3, [sp, #4]
    100a:	6859      	ldr	r1, [r3, #4]
    100c:	9a03      	ldr	r2, [sp, #12]
    100e:	4613      	mov	r3, r2
    1010:	005b      	lsls	r3, r3, #1
    1012:	4413      	add	r3, r2
    1014:	009b      	lsls	r3, r3, #2
    1016:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1018:	689b      	ldr	r3, [r3, #8]
    101a:	2200      	movs	r2, #0
    101c:	4619      	mov	r1, r3
    101e:	f7ff fed5 	bl	dcc <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1022:	9b01      	ldr	r3, [sp, #4]
    1024:	6859      	ldr	r1, [r3, #4]
    1026:	9a03      	ldr	r2, [sp, #12]
    1028:	4613      	mov	r3, r2
    102a:	005b      	lsls	r3, r3, #1
    102c:	4413      	add	r3, r2
    102e:	009b      	lsls	r3, r3, #2
    1030:	440b      	add	r3, r1
    1032:	791b      	ldrb	r3, [r3, #4]
    1034:	2b00      	cmp	r3, #0
    1036:	d00c      	beq.n	1052 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1038:	9b01      	ldr	r3, [sp, #4]
    103a:	6859      	ldr	r1, [r3, #4]
    103c:	9a03      	ldr	r2, [sp, #12]
    103e:	4613      	mov	r3, r2
    1040:	005b      	lsls	r3, r3, #1
    1042:	4413      	add	r3, r2
    1044:	009b      	lsls	r3, r3, #2
    1046:	440b      	add	r3, r1
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	4618      	mov	r0, r3
    104c:	f7ff fecc 	bl	de8 <IntCtrl_Ip_EnableIrq>
    1050:	e00b      	b.n	106a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1052:	9b01      	ldr	r3, [sp, #4]
    1054:	6859      	ldr	r1, [r3, #4]
    1056:	9a03      	ldr	r2, [sp, #12]
    1058:	4613      	mov	r3, r2
    105a:	005b      	lsls	r3, r3, #1
    105c:	4413      	add	r3, r2
    105e:	009b      	lsls	r3, r3, #2
    1060:	440b      	add	r3, r1
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	4618      	mov	r0, r3
    1066:	f7ff fec9 	bl	dfc <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    106a:	9b03      	ldr	r3, [sp, #12]
    106c:	3301      	adds	r3, #1
    106e:	9303      	str	r3, [sp, #12]
    1070:	9b01      	ldr	r3, [sp, #4]
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	9a03      	ldr	r2, [sp, #12]
    1076:	429a      	cmp	r2, r3
    1078:	d39c      	bcc.n	fb4 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    107a:	2300      	movs	r3, #0
}
    107c:	4618      	mov	r0, r3
    107e:	b005      	add	sp, #20
    1080:	f85d fb04 	ldr.w	pc, [sp], #4

00001084 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1084:	b500      	push	{lr}
    1086:	b085      	sub	sp, #20
    1088:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    108a:	2300      	movs	r3, #0
    108c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1090:	9b01      	ldr	r3, [sp, #4]
    1092:	681b      	ldr	r3, [r3, #0]
    1094:	2b00      	cmp	r3, #0
    1096:	d007      	beq.n	10a8 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1098:	9b01      	ldr	r3, [sp, #4]
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	4618      	mov	r0, r3
    109e:	f7ff ff83 	bl	fa8 <Platform_Ipw_InitIntCtrl>
    10a2:	4603      	mov	r3, r0
    10a4:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    10a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10ac:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    10ae:	bf00      	nop
    10b0:	b005      	add	sp, #20
    10b2:	f85d fb04 	ldr.w	pc, [sp], #4

000010b6 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    10b6:	2300      	movs	r3, #0
}
    10b8:	4618      	mov	r0, r3
    10ba:	4770      	bx	lr

000010bc <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    10bc:	b082      	sub	sp, #8
    10be:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    10c0:	2301      	movs	r3, #1
}
    10c2:	4618      	mov	r0, r3
    10c4:	b002      	add	sp, #8
    10c6:	4770      	bx	lr

000010c8 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    10c8:	b082      	sub	sp, #8
    10ca:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    10cc:	bf00      	nop
    10ce:	b002      	add	sp, #8
    10d0:	4770      	bx	lr

000010d2 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    10d2:	b082      	sub	sp, #8
    10d4:	9001      	str	r0, [sp, #4]
    return Micros;
    10d6:	9b01      	ldr	r3, [sp, #4]
}
    10d8:	4618      	mov	r0, r3
    10da:	b002      	add	sp, #8
    10dc:	4770      	bx	lr

000010de <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    10de:	b500      	push	{lr}
    10e0:	b083      	sub	sp, #12
    10e2:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    10e4:	f000 f86c 	bl	11c0 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    10e8:	bf00      	nop
    10ea:	b003      	add	sp, #12
    10ec:	f85d fb04 	ldr.w	pc, [sp], #4

000010f0 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    10f0:	b500      	push	{lr}
    10f2:	b085      	sub	sp, #20
    10f4:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    10f6:	2300      	movs	r3, #0
    10f8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    10fa:	9b01      	ldr	r3, [sp, #4]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d003      	beq.n	1108 <OsIf_GetCounter+0x18>
    1100:	9b01      	ldr	r3, [sp, #4]
    1102:	2b01      	cmp	r3, #1
    1104:	d004      	beq.n	1110 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1106:	e007      	b.n	1118 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1108:	f7ff ffd5 	bl	10b6 <OsIf_Timer_Dummy_GetCounter>
    110c:	9003      	str	r0, [sp, #12]
            break;
    110e:	e003      	b.n	1118 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1110:	f000 f872 	bl	11f8 <OsIf_Timer_System_GetCounter>
    1114:	9003      	str	r0, [sp, #12]
            break;
    1116:	bf00      	nop
    }

    return Value;
    1118:	9b03      	ldr	r3, [sp, #12]
}
    111a:	4618      	mov	r0, r3
    111c:	b005      	add	sp, #20
    111e:	f85d fb04 	ldr.w	pc, [sp], #4

00001122 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1122:	b500      	push	{lr}
    1124:	b085      	sub	sp, #20
    1126:	9001      	str	r0, [sp, #4]
    1128:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    112a:	2300      	movs	r3, #0
    112c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    112e:	9b00      	ldr	r3, [sp, #0]
    1130:	2b00      	cmp	r3, #0
    1132:	d003      	beq.n	113c <OsIf_GetElapsed+0x1a>
    1134:	9b00      	ldr	r3, [sp, #0]
    1136:	2b01      	cmp	r3, #1
    1138:	d005      	beq.n	1146 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    113a:	e009      	b.n	1150 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    113c:	9801      	ldr	r0, [sp, #4]
    113e:	f7ff ffbd 	bl	10bc <OsIf_Timer_Dummy_GetElapsed>
    1142:	9003      	str	r0, [sp, #12]
            break;
    1144:	e004      	b.n	1150 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1146:	9801      	ldr	r0, [sp, #4]
    1148:	f000 f864 	bl	1214 <OsIf_Timer_System_GetElapsed>
    114c:	9003      	str	r0, [sp, #12]
            break;
    114e:	bf00      	nop
    }

    return Value;
    1150:	9b03      	ldr	r3, [sp, #12]
}
    1152:	4618      	mov	r0, r3
    1154:	b005      	add	sp, #20
    1156:	f85d fb04 	ldr.w	pc, [sp], #4

0000115a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    115a:	b500      	push	{lr}
    115c:	b083      	sub	sp, #12
    115e:	9001      	str	r0, [sp, #4]
    1160:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1162:	9b00      	ldr	r3, [sp, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d003      	beq.n	1170 <OsIf_SetTimerFrequency+0x16>
    1168:	9b00      	ldr	r3, [sp, #0]
    116a:	2b01      	cmp	r3, #1
    116c:	d004      	beq.n	1178 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    116e:	e007      	b.n	1180 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1170:	9801      	ldr	r0, [sp, #4]
    1172:	f7ff ffa9 	bl	10c8 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1176:	e003      	b.n	1180 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1178:	9801      	ldr	r0, [sp, #4]
    117a:	f000 f85b 	bl	1234 <OsIf_Timer_System_SetTimerFrequency>
            break;
    117e:	bf00      	nop
    }
}
    1180:	bf00      	nop
    1182:	b003      	add	sp, #12
    1184:	f85d fb04 	ldr.w	pc, [sp], #4

00001188 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1188:	b500      	push	{lr}
    118a:	b085      	sub	sp, #20
    118c:	9001      	str	r0, [sp, #4]
    118e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1190:	2300      	movs	r3, #0
    1192:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1194:	9b00      	ldr	r3, [sp, #0]
    1196:	2b00      	cmp	r3, #0
    1198:	d003      	beq.n	11a2 <OsIf_MicrosToTicks+0x1a>
    119a:	9b00      	ldr	r3, [sp, #0]
    119c:	2b01      	cmp	r3, #1
    119e:	d005      	beq.n	11ac <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11a0:	e009      	b.n	11b6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    11a2:	9801      	ldr	r0, [sp, #4]
    11a4:	f7ff ff95 	bl	10d2 <OsIf_Timer_Dummy_MicrosToTicks>
    11a8:	9003      	str	r0, [sp, #12]
            break;
    11aa:	e004      	b.n	11b6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    11ac:	9801      	ldr	r0, [sp, #4]
    11ae:	f000 f84f 	bl	1250 <OsIf_Timer_System_MicrosToTicks>
    11b2:	9003      	str	r0, [sp, #12]
            break;
    11b4:	bf00      	nop
    }

    return Value;
    11b6:	9b03      	ldr	r3, [sp, #12]
}
    11b8:	4618      	mov	r0, r3
    11ba:	b005      	add	sp, #20
    11bc:	f85d fb04 	ldr.w	pc, [sp], #4

000011c0 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    11c0:	b500      	push	{lr}
    11c2:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    11c4:	2300      	movs	r3, #0
    11c6:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    11c8:	4a09      	ldr	r2, [pc, #36]	; (11f0 <OsIf_Timer_System_Init+0x30>)
    11ca:	9b01      	ldr	r3, [sp, #4]
    11cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11d0:	685a      	ldr	r2, [r3, #4]
    11d2:	4908      	ldr	r1, [pc, #32]	; (11f4 <OsIf_Timer_System_Init+0x34>)
    11d4:	9b01      	ldr	r3, [sp, #4]
    11d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    11da:	4a06      	ldr	r2, [pc, #24]	; (11f4 <OsIf_Timer_System_Init+0x34>)
    11dc:	9b01      	ldr	r3, [sp, #4]
    11de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11e2:	4618      	mov	r0, r3
    11e4:	f000 f868 	bl	12b8 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    11e8:	bf00      	nop
    11ea:	b003      	add	sp, #12
    11ec:	f85d fb04 	ldr.w	pc, [sp], #4
    11f0:	0000cfac 	.word	0x0000cfac
    11f4:	1fff8b34 	.word	0x1fff8b34

000011f8 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    11f8:	b500      	push	{lr}
    11fa:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    11fc:	2300      	movs	r3, #0
    11fe:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1200:	2300      	movs	r3, #0
    1202:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1204:	f000 f86c 	bl	12e0 <OsIf_Timer_System_Internal_GetCounter>
    1208:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    120a:	9b01      	ldr	r3, [sp, #4]
}
    120c:	4618      	mov	r0, r3
    120e:	b003      	add	sp, #12
    1210:	f85d fb04 	ldr.w	pc, [sp], #4

00001214 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1214:	b500      	push	{lr}
    1216:	b085      	sub	sp, #20
    1218:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    121a:	2300      	movs	r3, #0
    121c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    121e:	2300      	movs	r3, #0
    1220:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1222:	9801      	ldr	r0, [sp, #4]
    1224:	f000 f864 	bl	12f0 <OsIf_Timer_System_Internal_GetElapsed>
    1228:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    122a:	9b03      	ldr	r3, [sp, #12]
}
    122c:	4618      	mov	r0, r3
    122e:	b005      	add	sp, #20
    1230:	f85d fb04 	ldr.w	pc, [sp], #4

00001234 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1234:	b084      	sub	sp, #16
    1236:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1238:	2300      	movs	r3, #0
    123a:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    123c:	4903      	ldr	r1, [pc, #12]	; (124c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    123e:	9b03      	ldr	r3, [sp, #12]
    1240:	9a01      	ldr	r2, [sp, #4]
    1242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1246:	bf00      	nop
    1248:	b004      	add	sp, #16
    124a:	4770      	bx	lr
    124c:	1fff8b34 	.word	0x1fff8b34

00001250 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1250:	b5f0      	push	{r4, r5, r6, r7, lr}
    1252:	b087      	sub	sp, #28
    1254:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1256:	2100      	movs	r1, #0
    1258:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    125a:	2100      	movs	r1, #0
    125c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    125e:	9901      	ldr	r1, [sp, #4]
    1260:	2000      	movs	r0, #0
    1262:	460e      	mov	r6, r1
    1264:	4607      	mov	r7, r0
    1266:	4812      	ldr	r0, [pc, #72]	; (12b0 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1268:	9904      	ldr	r1, [sp, #16]
    126a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    126e:	2000      	movs	r0, #0
    1270:	460c      	mov	r4, r1
    1272:	4605      	mov	r5, r0
    1274:	fb04 f007 	mul.w	r0, r4, r7
    1278:	fb06 f105 	mul.w	r1, r6, r5
    127c:	4401      	add	r1, r0
    127e:	fba6 2304 	umull	r2, r3, r6, r4
    1282:	4419      	add	r1, r3
    1284:	460b      	mov	r3, r1
    1286:	e9cd 2302 	strd	r2, r3, [sp, #8]
    128a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    128e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1292:	4a08      	ldr	r2, [pc, #32]	; (12b4 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1294:	f04f 0300 	mov.w	r3, #0
    1298:	f7ff f984 	bl	5a4 <__aeabi_uldivmod>
    129c:	4602      	mov	r2, r0
    129e:	460b      	mov	r3, r1
    12a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    12a4:	9b02      	ldr	r3, [sp, #8]
    12a6:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    12a8:	9b05      	ldr	r3, [sp, #20]
}
    12aa:	4618      	mov	r0, r3
    12ac:	b007      	add	sp, #28
    12ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b0:	1fff8b34 	.word	0x1fff8b34
    12b4:	000f4240 	.word	0x000f4240

000012b8 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    12b8:	b082      	sub	sp, #8
    12ba:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    12bc:	4b07      	ldr	r3, [pc, #28]	; (12dc <OsIf_Timer_System_Internal_Init+0x24>)
    12be:	2200      	movs	r2, #0
    12c0:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    12c2:	4b06      	ldr	r3, [pc, #24]	; (12dc <OsIf_Timer_System_Internal_Init+0x24>)
    12c4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    12c8:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    12ca:	4b04      	ldr	r3, [pc, #16]	; (12dc <OsIf_Timer_System_Internal_Init+0x24>)
    12cc:	2200      	movs	r2, #0
    12ce:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    12d0:	4b02      	ldr	r3, [pc, #8]	; (12dc <OsIf_Timer_System_Internal_Init+0x24>)
    12d2:	2205      	movs	r2, #5
    12d4:	601a      	str	r2, [r3, #0]
}
    12d6:	bf00      	nop
    12d8:	b002      	add	sp, #8
    12da:	4770      	bx	lr
    12dc:	e000e010 	.word	0xe000e010

000012e0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    12e0:	4b02      	ldr	r3, [pc, #8]	; (12ec <OsIf_Timer_System_Internal_GetCounter+0xc>)
    12e2:	689b      	ldr	r3, [r3, #8]
    12e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    12e8:	4618      	mov	r0, r3
    12ea:	4770      	bx	lr
    12ec:	e000e010 	.word	0xe000e010

000012f0 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    12f0:	b084      	sub	sp, #16
    12f2:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    12f4:	4b10      	ldr	r3, [pc, #64]	; (1338 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    12f6:	689b      	ldr	r3, [r3, #8]
    12f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    12fc:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    12fe:	2300      	movs	r3, #0
    1300:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1302:	9b01      	ldr	r3, [sp, #4]
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	9a02      	ldr	r2, [sp, #8]
    1308:	429a      	cmp	r2, r3
    130a:	d909      	bls.n	1320 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    130c:	9b01      	ldr	r3, [sp, #4]
    130e:	681a      	ldr	r2, [r3, #0]
    1310:	9b02      	ldr	r3, [sp, #8]
    1312:	1ad3      	subs	r3, r2, r3
    1314:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1318:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    131c:	9303      	str	r3, [sp, #12]
    131e:	e004      	b.n	132a <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1320:	9b01      	ldr	r3, [sp, #4]
    1322:	681a      	ldr	r2, [r3, #0]
    1324:	9b02      	ldr	r3, [sp, #8]
    1326:	1ad3      	subs	r3, r2, r3
    1328:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    132a:	9b01      	ldr	r3, [sp, #4]
    132c:	9a02      	ldr	r2, [sp, #8]
    132e:	601a      	str	r2, [r3, #0]

    return dif;
    1330:	9b03      	ldr	r3, [sp, #12]
}
    1332:	4618      	mov	r0, r3
    1334:	b004      	add	sp, #16
    1336:	4770      	bx	lr
    1338:	e000e010 	.word	0xe000e010

0000133c <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    133c:	b082      	sub	sp, #8
    133e:	9001      	str	r0, [sp, #4]
    1340:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1342:	bf00      	nop
    1344:	b002      	add	sp, #8
    1346:	4770      	bx	lr

00001348 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1348:	b500      	push	{lr}
    134a:	b085      	sub	sp, #20
    134c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    134e:	4b24      	ldr	r3, [pc, #144]	; (13e0 <Clock_Ip_UpdateDriverContext+0x98>)
    1350:	2201      	movs	r2, #1
    1352:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1354:	4b23      	ldr	r3, [pc, #140]	; (13e4 <Clock_Ip_UpdateDriverContext+0x9c>)
    1356:	681b      	ldr	r3, [r3, #0]
    1358:	2102      	movs	r1, #2
    135a:	4618      	mov	r0, r3
    135c:	f003 fc32 	bl	4bc4 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1360:	2300      	movs	r3, #0
    1362:	f88d 300f 	strb.w	r3, [sp, #15]
    1366:	e015      	b.n	1394 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1368:	f89d 300f 	ldrb.w	r3, [sp, #15]
    136c:	9a01      	ldr	r2, [sp, #4]
    136e:	334a      	adds	r3, #74	; 0x4a
    1370:	00db      	lsls	r3, r3, #3
    1372:	4413      	add	r3, r2
    1374:	6858      	ldr	r0, [r3, #4]
    1376:	f89d 300f 	ldrb.w	r3, [sp, #15]
    137a:	9a01      	ldr	r2, [sp, #4]
    137c:	334a      	adds	r3, #74	; 0x4a
    137e:	00db      	lsls	r3, r3, #3
    1380:	4413      	add	r3, r2
    1382:	689b      	ldr	r3, [r3, #8]
    1384:	4619      	mov	r1, r3
    1386:	f001 fadc 	bl	2942 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    138a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    138e:	3301      	adds	r3, #1
    1390:	f88d 300f 	strb.w	r3, [sp, #15]
    1394:	9b01      	ldr	r3, [sp, #4]
    1396:	7bdb      	ldrb	r3, [r3, #15]
    1398:	f89d 200f 	ldrb.w	r2, [sp, #15]
    139c:	429a      	cmp	r2, r3
    139e:	d3e3      	bcc.n	1368 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    13a0:	f000 f824 	bl	13ec <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13a4:	2301      	movs	r3, #1
    13a6:	f88d 300f 	strb.w	r3, [sp, #15]
    13aa:	e00e      	b.n	13ca <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    13ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13b0:	9b01      	ldr	r3, [sp, #4]
    13b2:	327e      	adds	r2, #126	; 0x7e
    13b4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    13b8:	490b      	ldr	r1, [pc, #44]	; (13e8 <Clock_Ip_UpdateDriverContext+0xa0>)
    13ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13be:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13c4:	3301      	adds	r3, #1
    13c6:	f88d 300f 	strb.w	r3, [sp, #15]
    13ca:	9b01      	ldr	r3, [sp, #4]
    13cc:	7cdb      	ldrb	r3, [r3, #19]
    13ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13d2:	429a      	cmp	r2, r3
    13d4:	d3ea      	bcc.n	13ac <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    13d6:	bf00      	nop
    13d8:	bf00      	nop
    13da:	b005      	add	sp, #20
    13dc:	f85d fb04 	ldr.w	pc, [sp], #4
    13e0:	1fff8b18 	.word	0x1fff8b18
    13e4:	1fff8b38 	.word	0x1fff8b38
    13e8:	1fff8b44 	.word	0x1fff8b44

000013ec <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    13ec:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    13ee:	4b23      	ldr	r3, [pc, #140]	; (147c <Clock_Ip_CallEmptyCallbacks+0x90>)
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	f083 0301 	eor.w	r3, r3, #1
    13f6:	b2db      	uxtb	r3, r3
    13f8:	2b00      	cmp	r3, #0
    13fa:	d03d      	beq.n	1478 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    13fc:	4b1f      	ldr	r3, [pc, #124]	; (147c <Clock_Ip_CallEmptyCallbacks+0x90>)
    13fe:	2201      	movs	r2, #1
    1400:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1402:	4b1f      	ldr	r3, [pc, #124]	; (1480 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1404:	685b      	ldr	r3, [r3, #4]
    1406:	2100      	movs	r1, #0
    1408:	2000      	movs	r0, #0
    140a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    140c:	4b1c      	ldr	r3, [pc, #112]	; (1480 <Clock_Ip_CallEmptyCallbacks+0x94>)
    140e:	689b      	ldr	r3, [r3, #8]
    1410:	2057      	movs	r0, #87	; 0x57
    1412:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1414:	4b1b      	ldr	r3, [pc, #108]	; (1484 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	2000      	movs	r0, #0
    141a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    141c:	4b1a      	ldr	r3, [pc, #104]	; (1488 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    141e:	681b      	ldr	r3, [r3, #0]
    1420:	2000      	movs	r0, #0
    1422:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1424:	4b19      	ldr	r3, [pc, #100]	; (148c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2000      	movs	r0, #0
    142a:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    142c:	4b18      	ldr	r3, [pc, #96]	; (1490 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    142e:	685b      	ldr	r3, [r3, #4]
    1430:	2000      	movs	r0, #0
    1432:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1434:	4b16      	ldr	r3, [pc, #88]	; (1490 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1436:	689b      	ldr	r3, [r3, #8]
    1438:	2057      	movs	r0, #87	; 0x57
    143a:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    143c:	4b15      	ldr	r3, [pc, #84]	; (1494 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	2000      	movs	r0, #0
    1442:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1444:	4b13      	ldr	r3, [pc, #76]	; (1494 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1446:	685b      	ldr	r3, [r3, #4]
    1448:	2100      	movs	r1, #0
    144a:	2057      	movs	r0, #87	; 0x57
    144c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    144e:	4b12      	ldr	r3, [pc, #72]	; (1498 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1450:	681b      	ldr	r3, [r3, #0]
    1452:	2000      	movs	r0, #0
    1454:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1456:	4b11      	ldr	r3, [pc, #68]	; (149c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1458:	685b      	ldr	r3, [r3, #4]
    145a:	2000      	movs	r0, #0
    145c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    145e:	4b0f      	ldr	r3, [pc, #60]	; (149c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1460:	689b      	ldr	r3, [r3, #8]
    1462:	2057      	movs	r0, #87	; 0x57
    1464:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1466:	4b0e      	ldr	r3, [pc, #56]	; (14a0 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1468:	685b      	ldr	r3, [r3, #4]
    146a:	2000      	movs	r0, #0
    146c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    146e:	4b0d      	ldr	r3, [pc, #52]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	2100      	movs	r1, #0
    1474:	2000      	movs	r0, #0
    1476:	4798      	blx	r3
    }
}
    1478:	bf00      	nop
    147a:	bd08      	pop	{r3, pc}
    147c:	1fff8b3c 	.word	0x1fff8b3c
    1480:	0000c8e0 	.word	0x0000c8e0
    1484:	0000c7f4 	.word	0x0000c7f4
    1488:	0000c830 	.word	0x0000c830
    148c:	0000c838 	.word	0x0000c838
    1490:	0000c860 	.word	0x0000c860
    1494:	0000c86c 	.word	0x0000c86c
    1498:	0000c8a4 	.word	0x0000c8a4
    149c:	0000c8f0 	.word	0x0000c8f0
    14a0:	0000c91c 	.word	0x0000c91c
    14a4:	0000c918 	.word	0x0000c918

000014a8 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    14a8:	b500      	push	{lr}
    14aa:	b085      	sub	sp, #20
    14ac:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14ae:	9b01      	ldr	r3, [sp, #4]
    14b0:	7adb      	ldrb	r3, [r3, #11]
    14b2:	9303      	str	r3, [sp, #12]
    14b4:	e01f      	b.n	14f6 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    14b6:	9b03      	ldr	r3, [sp, #12]
    14b8:	1e5a      	subs	r2, r3, #1
    14ba:	9b01      	ldr	r3, [sp, #4]
    14bc:	320d      	adds	r2, #13
    14be:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    14c2:	495a      	ldr	r1, [pc, #360]	; (162c <Clock_Ip_ResetClockConfiguration+0x184>)
    14c4:	4613      	mov	r3, r2
    14c6:	00db      	lsls	r3, r3, #3
    14c8:	4413      	add	r3, r2
    14ca:	440b      	add	r3, r1
    14cc:	3301      	adds	r3, #1
    14ce:	781b      	ldrb	r3, [r3, #0]
    14d0:	461a      	mov	r2, r3
    14d2:	4b57      	ldr	r3, [pc, #348]	; (1630 <Clock_Ip_ResetClockConfiguration+0x188>)
    14d4:	5c9b      	ldrb	r3, [r3, r2]
    14d6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    14d8:	4a56      	ldr	r2, [pc, #344]	; (1634 <Clock_Ip_ResetClockConfiguration+0x18c>)
    14da:	9b02      	ldr	r3, [sp, #8]
    14dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    14e0:	9a03      	ldr	r2, [sp, #12]
    14e2:	3a01      	subs	r2, #1
    14e4:	320d      	adds	r2, #13
    14e6:	00d2      	lsls	r2, r2, #3
    14e8:	9901      	ldr	r1, [sp, #4]
    14ea:	440a      	add	r2, r1
    14ec:	4610      	mov	r0, r2
    14ee:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14f0:	9b03      	ldr	r3, [sp, #12]
    14f2:	3b01      	subs	r3, #1
    14f4:	9303      	str	r3, [sp, #12]
    14f6:	9b03      	ldr	r3, [sp, #12]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d1dc      	bne.n	14b6 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    14fc:	9b01      	ldr	r3, [sp, #4]
    14fe:	7b9b      	ldrb	r3, [r3, #14]
    1500:	9303      	str	r3, [sp, #12]
    1502:	e026      	b.n	1552 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1504:	9b03      	ldr	r3, [sp, #12]
    1506:	3b01      	subs	r3, #1
    1508:	9a01      	ldr	r2, [sp, #4]
    150a:	3324      	adds	r3, #36	; 0x24
    150c:	011b      	lsls	r3, r3, #4
    150e:	4413      	add	r3, r2
    1510:	3304      	adds	r3, #4
    1512:	681a      	ldr	r2, [r3, #0]
    1514:	4945      	ldr	r1, [pc, #276]	; (162c <Clock_Ip_ResetClockConfiguration+0x184>)
    1516:	4613      	mov	r3, r2
    1518:	00db      	lsls	r3, r3, #3
    151a:	4413      	add	r3, r2
    151c:	440b      	add	r3, r1
    151e:	3301      	adds	r3, #1
    1520:	781b      	ldrb	r3, [r3, #0]
    1522:	461a      	mov	r2, r3
    1524:	4b44      	ldr	r3, [pc, #272]	; (1638 <Clock_Ip_ResetClockConfiguration+0x190>)
    1526:	5c9b      	ldrb	r3, [r3, r2]
    1528:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    152a:	4944      	ldr	r1, [pc, #272]	; (163c <Clock_Ip_ResetClockConfiguration+0x194>)
    152c:	9a02      	ldr	r2, [sp, #8]
    152e:	4613      	mov	r3, r2
    1530:	005b      	lsls	r3, r3, #1
    1532:	4413      	add	r3, r2
    1534:	009b      	lsls	r3, r3, #2
    1536:	440b      	add	r3, r1
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	9a03      	ldr	r2, [sp, #12]
    153c:	3a01      	subs	r2, #1
    153e:	3224      	adds	r2, #36	; 0x24
    1540:	0112      	lsls	r2, r2, #4
    1542:	9901      	ldr	r1, [sp, #4]
    1544:	440a      	add	r2, r1
    1546:	3204      	adds	r2, #4
    1548:	4610      	mov	r0, r2
    154a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    154c:	9b03      	ldr	r3, [sp, #12]
    154e:	3b01      	subs	r3, #1
    1550:	9303      	str	r3, [sp, #12]
    1552:	9b03      	ldr	r3, [sp, #12]
    1554:	2b00      	cmp	r3, #0
    1556:	d1d5      	bne.n	1504 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1558:	9b01      	ldr	r3, [sp, #4]
    155a:	7a9b      	ldrb	r3, [r3, #10]
    155c:	9303      	str	r3, [sp, #12]
    155e:	e02a      	b.n	15b6 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1560:	9b03      	ldr	r3, [sp, #12]
    1562:	1e5a      	subs	r2, r3, #1
    1564:	9901      	ldr	r1, [sp, #4]
    1566:	4613      	mov	r3, r2
    1568:	009b      	lsls	r3, r3, #2
    156a:	4413      	add	r3, r2
    156c:	00db      	lsls	r3, r3, #3
    156e:	440b      	add	r3, r1
    1570:	3340      	adds	r3, #64	; 0x40
    1572:	681a      	ldr	r2, [r3, #0]
    1574:	492d      	ldr	r1, [pc, #180]	; (162c <Clock_Ip_ResetClockConfiguration+0x184>)
    1576:	4613      	mov	r3, r2
    1578:	00db      	lsls	r3, r3, #3
    157a:	4413      	add	r3, r2
    157c:	440b      	add	r3, r1
    157e:	3301      	adds	r3, #1
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	461a      	mov	r2, r3
    1584:	4b2e      	ldr	r3, [pc, #184]	; (1640 <Clock_Ip_ResetClockConfiguration+0x198>)
    1586:	5c9b      	ldrb	r3, [r3, r2]
    1588:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    158a:	492e      	ldr	r1, [pc, #184]	; (1644 <Clock_Ip_ResetClockConfiguration+0x19c>)
    158c:	9a02      	ldr	r2, [sp, #8]
    158e:	4613      	mov	r3, r2
    1590:	009b      	lsls	r3, r3, #2
    1592:	4413      	add	r3, r2
    1594:	009b      	lsls	r3, r3, #2
    1596:	440b      	add	r3, r1
    1598:	6819      	ldr	r1, [r3, #0]
    159a:	9b03      	ldr	r3, [sp, #12]
    159c:	1e5a      	subs	r2, r3, #1
    159e:	4613      	mov	r3, r2
    15a0:	009b      	lsls	r3, r3, #2
    15a2:	4413      	add	r3, r2
    15a4:	00db      	lsls	r3, r3, #3
    15a6:	3340      	adds	r3, #64	; 0x40
    15a8:	9a01      	ldr	r2, [sp, #4]
    15aa:	4413      	add	r3, r2
    15ac:	4618      	mov	r0, r3
    15ae:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    15b0:	9b03      	ldr	r3, [sp, #12]
    15b2:	3b01      	subs	r3, #1
    15b4:	9303      	str	r3, [sp, #12]
    15b6:	9b03      	ldr	r3, [sp, #12]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d1d1      	bne.n	1560 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    15bc:	9b01      	ldr	r3, [sp, #4]
    15be:	7a5b      	ldrb	r3, [r3, #9]
    15c0:	9303      	str	r3, [sp, #12]
    15c2:	e02b      	b.n	161c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15c4:	9b03      	ldr	r3, [sp, #12]
    15c6:	1e5a      	subs	r2, r3, #1
    15c8:	9901      	ldr	r1, [sp, #4]
    15ca:	4613      	mov	r3, r2
    15cc:	009b      	lsls	r3, r3, #2
    15ce:	4413      	add	r3, r2
    15d0:	009b      	lsls	r3, r3, #2
    15d2:	440b      	add	r3, r1
    15d4:	332c      	adds	r3, #44	; 0x2c
    15d6:	681a      	ldr	r2, [r3, #0]
    15d8:	4914      	ldr	r1, [pc, #80]	; (162c <Clock_Ip_ResetClockConfiguration+0x184>)
    15da:	4613      	mov	r3, r2
    15dc:	00db      	lsls	r3, r3, #3
    15de:	4413      	add	r3, r2
    15e0:	440b      	add	r3, r1
    15e2:	3301      	adds	r3, #1
    15e4:	781b      	ldrb	r3, [r3, #0]
    15e6:	461a      	mov	r2, r3
    15e8:	4b17      	ldr	r3, [pc, #92]	; (1648 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    15ea:	5c9b      	ldrb	r3, [r3, r2]
    15ec:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    15ee:	4917      	ldr	r1, [pc, #92]	; (164c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    15f0:	9a02      	ldr	r2, [sp, #8]
    15f2:	4613      	mov	r3, r2
    15f4:	009b      	lsls	r3, r3, #2
    15f6:	4413      	add	r3, r2
    15f8:	009b      	lsls	r3, r3, #2
    15fa:	440b      	add	r3, r1
    15fc:	6819      	ldr	r1, [r3, #0]
    15fe:	9b03      	ldr	r3, [sp, #12]
    1600:	1e5a      	subs	r2, r3, #1
    1602:	4613      	mov	r3, r2
    1604:	009b      	lsls	r3, r3, #2
    1606:	4413      	add	r3, r2
    1608:	009b      	lsls	r3, r3, #2
    160a:	3328      	adds	r3, #40	; 0x28
    160c:	9a01      	ldr	r2, [sp, #4]
    160e:	4413      	add	r3, r2
    1610:	3304      	adds	r3, #4
    1612:	4618      	mov	r0, r3
    1614:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1616:	9b03      	ldr	r3, [sp, #12]
    1618:	3b01      	subs	r3, #1
    161a:	9303      	str	r3, [sp, #12]
    161c:	9b03      	ldr	r3, [sp, #12]
    161e:	2b00      	cmp	r3, #0
    1620:	d1d0      	bne.n	15c4 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1622:	bf00      	nop
    1624:	bf00      	nop
    1626:	b005      	add	sp, #20
    1628:	f85d fb04 	ldr.w	pc, [sp], #4
    162c:	0000c2e4 	.word	0x0000c2e4
    1630:	0000c2b4 	.word	0x0000c2b4
    1634:	0000c91c 	.word	0x0000c91c
    1638:	0000c294 	.word	0x0000c294
    163c:	0000c860 	.word	0x0000c860
    1640:	0000c2a4 	.word	0x0000c2a4
    1644:	0000c8f0 	.word	0x0000c8f0
    1648:	0000c264 	.word	0x0000c264
    164c:	0000c838 	.word	0x0000c838

00001650 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1650:	b500      	push	{lr}
    1652:	b085      	sub	sp, #20
    1654:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1656:	2301      	movs	r3, #1
    1658:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    165a:	9801      	ldr	r0, [sp, #4]
    165c:	f000 f818 	bl	1690 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1660:	4b0a      	ldr	r3, [pc, #40]	; (168c <Clock_Ip_Init+0x3c>)
    1662:	781b      	ldrb	r3, [r3, #0]
    1664:	2b00      	cmp	r3, #0
    1666:	d00a      	beq.n	167e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1668:	f000 fb74 	bl	1d54 <Clock_Ip_GetPllStatus>
    166c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    166e:	9b02      	ldr	r3, [sp, #8]
    1670:	2b00      	cmp	r3, #0
    1672:	d106      	bne.n	1682 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1674:	f000 fbf2 	bl	1e5c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1678:	2300      	movs	r3, #0
    167a:	9303      	str	r3, [sp, #12]
    167c:	e001      	b.n	1682 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    167e:	2300      	movs	r3, #0
    1680:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1682:	9b03      	ldr	r3, [sp, #12]
}
    1684:	4618      	mov	r0, r3
    1686:	b005      	add	sp, #20
    1688:	f85d fb04 	ldr.w	pc, [sp], #4
    168c:	1fff8b40 	.word	0x1fff8b40

00001690 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1690:	b510      	push	{r4, lr}
    1692:	b084      	sub	sp, #16
    1694:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1696:	4a9f      	ldr	r2, [pc, #636]	; (1914 <Clock_Ip_InitClock+0x284>)
    1698:	9b01      	ldr	r3, [sp, #4]
    169a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    169c:	2101      	movs	r1, #1
    169e:	9801      	ldr	r0, [sp, #4]
    16a0:	f003 fa90 	bl	4bc4 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    16a4:	4b9b      	ldr	r3, [pc, #620]	; (1914 <Clock_Ip_InitClock+0x284>)
    16a6:	681b      	ldr	r3, [r3, #0]
    16a8:	2b00      	cmp	r3, #0
    16aa:	d030      	beq.n	170e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    16ac:	2300      	movs	r3, #0
    16ae:	9303      	str	r3, [sp, #12]
    16b0:	e027      	b.n	1702 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    16b2:	9901      	ldr	r1, [sp, #4]
    16b4:	9a03      	ldr	r2, [sp, #12]
    16b6:	4613      	mov	r3, r2
    16b8:	009b      	lsls	r3, r3, #2
    16ba:	4413      	add	r3, r2
    16bc:	009b      	lsls	r3, r3, #2
    16be:	440b      	add	r3, r1
    16c0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16c4:	681a      	ldr	r2, [r3, #0]
    16c6:	4994      	ldr	r1, [pc, #592]	; (1918 <Clock_Ip_InitClock+0x288>)
    16c8:	4613      	mov	r3, r2
    16ca:	00db      	lsls	r3, r3, #3
    16cc:	4413      	add	r3, r2
    16ce:	440b      	add	r3, r1
    16d0:	3301      	adds	r3, #1
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	461a      	mov	r2, r3
    16d6:	4b91      	ldr	r3, [pc, #580]	; (191c <Clock_Ip_InitClock+0x28c>)
    16d8:	5c9b      	ldrb	r3, [r3, r2]
    16da:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    16dc:	4a90      	ldr	r2, [pc, #576]	; (1920 <Clock_Ip_InitClock+0x290>)
    16de:	9b02      	ldr	r3, [sp, #8]
    16e0:	011b      	lsls	r3, r3, #4
    16e2:	4413      	add	r3, r2
    16e4:	6819      	ldr	r1, [r3, #0]
    16e6:	9a03      	ldr	r2, [sp, #12]
    16e8:	4613      	mov	r3, r2
    16ea:	009b      	lsls	r3, r3, #2
    16ec:	4413      	add	r3, r2
    16ee:	009b      	lsls	r3, r3, #2
    16f0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16f4:	9a01      	ldr	r2, [sp, #4]
    16f6:	4413      	add	r3, r2
    16f8:	4618      	mov	r0, r3
    16fa:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    16fc:	9b03      	ldr	r3, [sp, #12]
    16fe:	3301      	adds	r3, #1
    1700:	9303      	str	r3, [sp, #12]
    1702:	9b01      	ldr	r3, [sp, #4]
    1704:	7c9b      	ldrb	r3, [r3, #18]
    1706:	461a      	mov	r2, r3
    1708:	9b03      	ldr	r3, [sp, #12]
    170a:	4293      	cmp	r3, r2
    170c:	d3d1      	bcc.n	16b2 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    170e:	9801      	ldr	r0, [sp, #4]
    1710:	f7ff feca 	bl	14a8 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1714:	2300      	movs	r3, #0
    1716:	9303      	str	r3, [sp, #12]
    1718:	e029      	b.n	176e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    171a:	9901      	ldr	r1, [sp, #4]
    171c:	9a03      	ldr	r2, [sp, #12]
    171e:	4613      	mov	r3, r2
    1720:	005b      	lsls	r3, r3, #1
    1722:	4413      	add	r3, r2
    1724:	009b      	lsls	r3, r3, #2
    1726:	440b      	add	r3, r1
    1728:	3314      	adds	r3, #20
    172a:	681a      	ldr	r2, [r3, #0]
    172c:	497a      	ldr	r1, [pc, #488]	; (1918 <Clock_Ip_InitClock+0x288>)
    172e:	4613      	mov	r3, r2
    1730:	00db      	lsls	r3, r3, #3
    1732:	4413      	add	r3, r2
    1734:	440b      	add	r3, r1
    1736:	3301      	adds	r3, #1
    1738:	781b      	ldrb	r3, [r3, #0]
    173a:	461a      	mov	r2, r3
    173c:	4b79      	ldr	r3, [pc, #484]	; (1924 <Clock_Ip_InitClock+0x294>)
    173e:	5c9b      	ldrb	r3, [r3, r2]
    1740:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1742:	4979      	ldr	r1, [pc, #484]	; (1928 <Clock_Ip_InitClock+0x298>)
    1744:	9a02      	ldr	r2, [sp, #8]
    1746:	4613      	mov	r3, r2
    1748:	005b      	lsls	r3, r3, #1
    174a:	4413      	add	r3, r2
    174c:	009b      	lsls	r3, r3, #2
    174e:	440b      	add	r3, r1
    1750:	6819      	ldr	r1, [r3, #0]
    1752:	9a03      	ldr	r2, [sp, #12]
    1754:	4613      	mov	r3, r2
    1756:	005b      	lsls	r3, r3, #1
    1758:	4413      	add	r3, r2
    175a:	009b      	lsls	r3, r3, #2
    175c:	3310      	adds	r3, #16
    175e:	9a01      	ldr	r2, [sp, #4]
    1760:	4413      	add	r3, r2
    1762:	3304      	adds	r3, #4
    1764:	4618      	mov	r0, r3
    1766:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1768:	9b03      	ldr	r3, [sp, #12]
    176a:	3301      	adds	r3, #1
    176c:	9303      	str	r3, [sp, #12]
    176e:	9b01      	ldr	r3, [sp, #4]
    1770:	7a1b      	ldrb	r3, [r3, #8]
    1772:	461a      	mov	r2, r3
    1774:	9b03      	ldr	r3, [sp, #12]
    1776:	4293      	cmp	r3, r2
    1778:	d3cf      	bcc.n	171a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    177a:	2300      	movs	r3, #0
    177c:	9303      	str	r3, [sp, #12]
    177e:	e02a      	b.n	17d6 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1780:	9901      	ldr	r1, [sp, #4]
    1782:	9a03      	ldr	r2, [sp, #12]
    1784:	4613      	mov	r3, r2
    1786:	009b      	lsls	r3, r3, #2
    1788:	4413      	add	r3, r2
    178a:	009b      	lsls	r3, r3, #2
    178c:	440b      	add	r3, r1
    178e:	332c      	adds	r3, #44	; 0x2c
    1790:	681a      	ldr	r2, [r3, #0]
    1792:	4961      	ldr	r1, [pc, #388]	; (1918 <Clock_Ip_InitClock+0x288>)
    1794:	4613      	mov	r3, r2
    1796:	00db      	lsls	r3, r3, #3
    1798:	4413      	add	r3, r2
    179a:	440b      	add	r3, r1
    179c:	3301      	adds	r3, #1
    179e:	781b      	ldrb	r3, [r3, #0]
    17a0:	461a      	mov	r2, r3
    17a2:	4b62      	ldr	r3, [pc, #392]	; (192c <Clock_Ip_InitClock+0x29c>)
    17a4:	5c9b      	ldrb	r3, [r3, r2]
    17a6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    17a8:	4961      	ldr	r1, [pc, #388]	; (1930 <Clock_Ip_InitClock+0x2a0>)
    17aa:	9a02      	ldr	r2, [sp, #8]
    17ac:	4613      	mov	r3, r2
    17ae:	009b      	lsls	r3, r3, #2
    17b0:	4413      	add	r3, r2
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	440b      	add	r3, r1
    17b6:	3304      	adds	r3, #4
    17b8:	6819      	ldr	r1, [r3, #0]
    17ba:	9a03      	ldr	r2, [sp, #12]
    17bc:	4613      	mov	r3, r2
    17be:	009b      	lsls	r3, r3, #2
    17c0:	4413      	add	r3, r2
    17c2:	009b      	lsls	r3, r3, #2
    17c4:	3328      	adds	r3, #40	; 0x28
    17c6:	9a01      	ldr	r2, [sp, #4]
    17c8:	4413      	add	r3, r2
    17ca:	3304      	adds	r3, #4
    17cc:	4618      	mov	r0, r3
    17ce:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17d0:	9b03      	ldr	r3, [sp, #12]
    17d2:	3301      	adds	r3, #1
    17d4:	9303      	str	r3, [sp, #12]
    17d6:	9b01      	ldr	r3, [sp, #4]
    17d8:	7a5b      	ldrb	r3, [r3, #9]
    17da:	461a      	mov	r2, r3
    17dc:	9b03      	ldr	r3, [sp, #12]
    17de:	4293      	cmp	r3, r2
    17e0:	d3ce      	bcc.n	1780 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    17e2:	9801      	ldr	r0, [sp, #4]
    17e4:	f7ff fdb0 	bl	1348 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    17e8:	2300      	movs	r3, #0
    17ea:	9303      	str	r3, [sp, #12]
    17ec:	e028      	b.n	1840 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    17ee:	9901      	ldr	r1, [sp, #4]
    17f0:	9a03      	ldr	r2, [sp, #12]
    17f2:	4613      	mov	r3, r2
    17f4:	009b      	lsls	r3, r3, #2
    17f6:	4413      	add	r3, r2
    17f8:	009b      	lsls	r3, r3, #2
    17fa:	440b      	add	r3, r1
    17fc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1800:	681a      	ldr	r2, [r3, #0]
    1802:	4945      	ldr	r1, [pc, #276]	; (1918 <Clock_Ip_InitClock+0x288>)
    1804:	4613      	mov	r3, r2
    1806:	00db      	lsls	r3, r3, #3
    1808:	4413      	add	r3, r2
    180a:	440b      	add	r3, r1
    180c:	3301      	adds	r3, #1
    180e:	781b      	ldrb	r3, [r3, #0]
    1810:	461a      	mov	r2, r3
    1812:	4b48      	ldr	r3, [pc, #288]	; (1934 <Clock_Ip_InitClock+0x2a4>)
    1814:	5c9b      	ldrb	r3, [r3, r2]
    1816:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1818:	4a47      	ldr	r2, [pc, #284]	; (1938 <Clock_Ip_InitClock+0x2a8>)
    181a:	9b02      	ldr	r3, [sp, #8]
    181c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1820:	9a03      	ldr	r2, [sp, #12]
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009b      	lsls	r3, r3, #2
    182a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    182e:	9a01      	ldr	r2, [sp, #4]
    1830:	4413      	add	r3, r2
    1832:	3304      	adds	r3, #4
    1834:	9903      	ldr	r1, [sp, #12]
    1836:	4618      	mov	r0, r3
    1838:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    183a:	9b03      	ldr	r3, [sp, #12]
    183c:	3301      	adds	r3, #1
    183e:	9303      	str	r3, [sp, #12]
    1840:	9b01      	ldr	r3, [sp, #4]
    1842:	7c5b      	ldrb	r3, [r3, #17]
    1844:	461a      	mov	r2, r3
    1846:	9b03      	ldr	r3, [sp, #12]
    1848:	4293      	cmp	r3, r2
    184a:	d3d0      	bcc.n	17ee <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    184c:	2300      	movs	r3, #0
    184e:	9303      	str	r3, [sp, #12]
    1850:	e026      	b.n	18a0 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1852:	9901      	ldr	r1, [sp, #4]
    1854:	9a03      	ldr	r2, [sp, #12]
    1856:	4613      	mov	r3, r2
    1858:	005b      	lsls	r3, r3, #1
    185a:	4413      	add	r3, r2
    185c:	009b      	lsls	r3, r3, #2
    185e:	440b      	add	r3, r1
    1860:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1864:	681a      	ldr	r2, [r3, #0]
    1866:	492c      	ldr	r1, [pc, #176]	; (1918 <Clock_Ip_InitClock+0x288>)
    1868:	4613      	mov	r3, r2
    186a:	00db      	lsls	r3, r3, #3
    186c:	4413      	add	r3, r2
    186e:	440b      	add	r3, r1
    1870:	3301      	adds	r3, #1
    1872:	781b      	ldrb	r3, [r3, #0]
    1874:	461a      	mov	r2, r3
    1876:	4b31      	ldr	r3, [pc, #196]	; (193c <Clock_Ip_InitClock+0x2ac>)
    1878:	5c9b      	ldrb	r3, [r3, r2]
    187a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    187c:	4a30      	ldr	r2, [pc, #192]	; (1940 <Clock_Ip_InitClock+0x2b0>)
    187e:	9b02      	ldr	r3, [sp, #8]
    1880:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1884:	9a03      	ldr	r2, [sp, #12]
    1886:	4613      	mov	r3, r2
    1888:	005b      	lsls	r3, r3, #1
    188a:	4413      	add	r3, r2
    188c:	009b      	lsls	r3, r3, #2
    188e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1892:	9a01      	ldr	r2, [sp, #4]
    1894:	4413      	add	r3, r2
    1896:	4618      	mov	r0, r3
    1898:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    189a:	9b03      	ldr	r3, [sp, #12]
    189c:	3301      	adds	r3, #1
    189e:	9303      	str	r3, [sp, #12]
    18a0:	9b01      	ldr	r3, [sp, #4]
    18a2:	7b5b      	ldrb	r3, [r3, #13]
    18a4:	461a      	mov	r2, r3
    18a6:	9b03      	ldr	r3, [sp, #12]
    18a8:	4293      	cmp	r3, r2
    18aa:	d3d2      	bcc.n	1852 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    18ac:	2300      	movs	r3, #0
    18ae:	9303      	str	r3, [sp, #12]
    18b0:	e026      	b.n	1900 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    18b2:	9901      	ldr	r1, [sp, #4]
    18b4:	9a03      	ldr	r2, [sp, #12]
    18b6:	4613      	mov	r3, r2
    18b8:	005b      	lsls	r3, r3, #1
    18ba:	4413      	add	r3, r2
    18bc:	009b      	lsls	r3, r3, #2
    18be:	440b      	add	r3, r1
    18c0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18c4:	681a      	ldr	r2, [r3, #0]
    18c6:	4914      	ldr	r1, [pc, #80]	; (1918 <Clock_Ip_InitClock+0x288>)
    18c8:	4613      	mov	r3, r2
    18ca:	00db      	lsls	r3, r3, #3
    18cc:	4413      	add	r3, r2
    18ce:	440b      	add	r3, r1
    18d0:	3301      	adds	r3, #1
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	461a      	mov	r2, r3
    18d6:	4b1b      	ldr	r3, [pc, #108]	; (1944 <Clock_Ip_InitClock+0x2b4>)
    18d8:	5c9b      	ldrb	r3, [r3, r2]
    18da:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    18dc:	4a1a      	ldr	r2, [pc, #104]	; (1948 <Clock_Ip_InitClock+0x2b8>)
    18de:	9b02      	ldr	r3, [sp, #8]
    18e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    18e4:	9a03      	ldr	r2, [sp, #12]
    18e6:	4613      	mov	r3, r2
    18e8:	005b      	lsls	r3, r3, #1
    18ea:	4413      	add	r3, r2
    18ec:	009b      	lsls	r3, r3, #2
    18ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18f2:	9a01      	ldr	r2, [sp, #4]
    18f4:	4413      	add	r3, r2
    18f6:	4618      	mov	r0, r3
    18f8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    18fa:	9b03      	ldr	r3, [sp, #12]
    18fc:	3301      	adds	r3, #1
    18fe:	9303      	str	r3, [sp, #12]
    1900:	9b01      	ldr	r3, [sp, #4]
    1902:	7b1b      	ldrb	r3, [r3, #12]
    1904:	461a      	mov	r2, r3
    1906:	9b03      	ldr	r3, [sp, #12]
    1908:	4293      	cmp	r3, r2
    190a:	d3d2      	bcc.n	18b2 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    190c:	2300      	movs	r3, #0
    190e:	9303      	str	r3, [sp, #12]
    1910:	e044      	b.n	199c <Clock_Ip_InitClock+0x30c>
    1912:	bf00      	nop
    1914:	1fff8b38 	.word	0x1fff8b38
    1918:	0000c2e4 	.word	0x0000c2e4
    191c:	0000c2d4 	.word	0x0000c2d4
    1920:	0000c8e0 	.word	0x0000c8e0
    1924:	0000c274 	.word	0x0000c274
    1928:	0000c8a4 	.word	0x0000c8a4
    192c:	0000c264 	.word	0x0000c264
    1930:	0000c838 	.word	0x0000c838
    1934:	0000c2c4 	.word	0x0000c2c4
    1938:	0000c918 	.word	0x0000c918
    193c:	0000c254 	.word	0x0000c254
    1940:	0000c830 	.word	0x0000c830
    1944:	0000c244 	.word	0x0000c244
    1948:	0000c7f4 	.word	0x0000c7f4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    194c:	9901      	ldr	r1, [sp, #4]
    194e:	9a03      	ldr	r2, [sp, #12]
    1950:	4613      	mov	r3, r2
    1952:	005b      	lsls	r3, r3, #1
    1954:	4413      	add	r3, r2
    1956:	009b      	lsls	r3, r3, #2
    1958:	440b      	add	r3, r1
    195a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    195e:	681a      	ldr	r2, [r3, #0]
    1960:	49ac      	ldr	r1, [pc, #688]	; (1c14 <Clock_Ip_InitClock+0x584>)
    1962:	4613      	mov	r3, r2
    1964:	00db      	lsls	r3, r3, #3
    1966:	4413      	add	r3, r2
    1968:	440b      	add	r3, r1
    196a:	3301      	adds	r3, #1
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	461a      	mov	r2, r3
    1970:	4ba9      	ldr	r3, [pc, #676]	; (1c18 <Clock_Ip_InitClock+0x588>)
    1972:	5c9b      	ldrb	r3, [r3, r2]
    1974:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1976:	4aa9      	ldr	r2, [pc, #676]	; (1c1c <Clock_Ip_InitClock+0x58c>)
    1978:	9b02      	ldr	r3, [sp, #8]
    197a:	00db      	lsls	r3, r3, #3
    197c:	4413      	add	r3, r2
    197e:	6859      	ldr	r1, [r3, #4]
    1980:	9a03      	ldr	r2, [sp, #12]
    1982:	4613      	mov	r3, r2
    1984:	005b      	lsls	r3, r3, #1
    1986:	4413      	add	r3, r2
    1988:	009b      	lsls	r3, r3, #2
    198a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    198e:	9a01      	ldr	r2, [sp, #4]
    1990:	4413      	add	r3, r2
    1992:	4618      	mov	r0, r3
    1994:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1996:	9b03      	ldr	r3, [sp, #12]
    1998:	3301      	adds	r3, #1
    199a:	9303      	str	r3, [sp, #12]
    199c:	9b01      	ldr	r3, [sp, #4]
    199e:	7b5b      	ldrb	r3, [r3, #13]
    19a0:	461a      	mov	r2, r3
    19a2:	9b03      	ldr	r3, [sp, #12]
    19a4:	4293      	cmp	r3, r2
    19a6:	d3d1      	bcc.n	194c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    19a8:	2300      	movs	r3, #0
    19aa:	9303      	str	r3, [sp, #12]
    19ac:	e029      	b.n	1a02 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    19ae:	9901      	ldr	r1, [sp, #4]
    19b0:	9a03      	ldr	r2, [sp, #12]
    19b2:	4613      	mov	r3, r2
    19b4:	009b      	lsls	r3, r3, #2
    19b6:	4413      	add	r3, r2
    19b8:	00db      	lsls	r3, r3, #3
    19ba:	440b      	add	r3, r1
    19bc:	3340      	adds	r3, #64	; 0x40
    19be:	681a      	ldr	r2, [r3, #0]
    19c0:	4994      	ldr	r1, [pc, #592]	; (1c14 <Clock_Ip_InitClock+0x584>)
    19c2:	4613      	mov	r3, r2
    19c4:	00db      	lsls	r3, r3, #3
    19c6:	4413      	add	r3, r2
    19c8:	440b      	add	r3, r1
    19ca:	3301      	adds	r3, #1
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	461a      	mov	r2, r3
    19d0:	4b93      	ldr	r3, [pc, #588]	; (1c20 <Clock_Ip_InitClock+0x590>)
    19d2:	5c9b      	ldrb	r3, [r3, r2]
    19d4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    19d6:	4993      	ldr	r1, [pc, #588]	; (1c24 <Clock_Ip_InitClock+0x594>)
    19d8:	9a02      	ldr	r2, [sp, #8]
    19da:	4613      	mov	r3, r2
    19dc:	009b      	lsls	r3, r3, #2
    19de:	4413      	add	r3, r2
    19e0:	009b      	lsls	r3, r3, #2
    19e2:	440b      	add	r3, r1
    19e4:	3304      	adds	r3, #4
    19e6:	6819      	ldr	r1, [r3, #0]
    19e8:	9a03      	ldr	r2, [sp, #12]
    19ea:	4613      	mov	r3, r2
    19ec:	009b      	lsls	r3, r3, #2
    19ee:	4413      	add	r3, r2
    19f0:	00db      	lsls	r3, r3, #3
    19f2:	3340      	adds	r3, #64	; 0x40
    19f4:	9a01      	ldr	r2, [sp, #4]
    19f6:	4413      	add	r3, r2
    19f8:	4618      	mov	r0, r3
    19fa:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    19fc:	9b03      	ldr	r3, [sp, #12]
    19fe:	3301      	adds	r3, #1
    1a00:	9303      	str	r3, [sp, #12]
    1a02:	9b01      	ldr	r3, [sp, #4]
    1a04:	7a9b      	ldrb	r3, [r3, #10]
    1a06:	461a      	mov	r2, r3
    1a08:	9b03      	ldr	r3, [sp, #12]
    1a0a:	4293      	cmp	r3, r2
    1a0c:	d3cf      	bcc.n	19ae <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a0e:	2300      	movs	r3, #0
    1a10:	9303      	str	r3, [sp, #12]
    1a12:	e029      	b.n	1a68 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a14:	9901      	ldr	r1, [sp, #4]
    1a16:	9a03      	ldr	r2, [sp, #12]
    1a18:	4613      	mov	r3, r2
    1a1a:	009b      	lsls	r3, r3, #2
    1a1c:	4413      	add	r3, r2
    1a1e:	009b      	lsls	r3, r3, #2
    1a20:	440b      	add	r3, r1
    1a22:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a26:	681a      	ldr	r2, [r3, #0]
    1a28:	497a      	ldr	r1, [pc, #488]	; (1c14 <Clock_Ip_InitClock+0x584>)
    1a2a:	4613      	mov	r3, r2
    1a2c:	00db      	lsls	r3, r3, #3
    1a2e:	4413      	add	r3, r2
    1a30:	440b      	add	r3, r1
    1a32:	3301      	adds	r3, #1
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	461a      	mov	r2, r3
    1a38:	4b7b      	ldr	r3, [pc, #492]	; (1c28 <Clock_Ip_InitClock+0x598>)
    1a3a:	5c9b      	ldrb	r3, [r3, r2]
    1a3c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1a3e:	4a7b      	ldr	r2, [pc, #492]	; (1c2c <Clock_Ip_InitClock+0x59c>)
    1a40:	9b02      	ldr	r3, [sp, #8]
    1a42:	011b      	lsls	r3, r3, #4
    1a44:	4413      	add	r3, r2
    1a46:	3304      	adds	r3, #4
    1a48:	681c      	ldr	r4, [r3, #0]
    1a4a:	9a03      	ldr	r2, [sp, #12]
    1a4c:	4613      	mov	r3, r2
    1a4e:	009b      	lsls	r3, r3, #2
    1a50:	4413      	add	r3, r2
    1a52:	009b      	lsls	r3, r3, #2
    1a54:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a58:	9a01      	ldr	r2, [sp, #4]
    1a5a:	4413      	add	r3, r2
    1a5c:	9903      	ldr	r1, [sp, #12]
    1a5e:	4618      	mov	r0, r3
    1a60:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a62:	9b03      	ldr	r3, [sp, #12]
    1a64:	3301      	adds	r3, #1
    1a66:	9303      	str	r3, [sp, #12]
    1a68:	9b01      	ldr	r3, [sp, #4]
    1a6a:	7c9b      	ldrb	r3, [r3, #18]
    1a6c:	461a      	mov	r2, r3
    1a6e:	9b03      	ldr	r3, [sp, #12]
    1a70:	4293      	cmp	r3, r2
    1a72:	d3cf      	bcc.n	1a14 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1a74:	2300      	movs	r3, #0
    1a76:	9303      	str	r3, [sp, #12]
    1a78:	e02a      	b.n	1ad0 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1a7a:	9901      	ldr	r1, [sp, #4]
    1a7c:	9a03      	ldr	r2, [sp, #12]
    1a7e:	4613      	mov	r3, r2
    1a80:	009b      	lsls	r3, r3, #2
    1a82:	4413      	add	r3, r2
    1a84:	009b      	lsls	r3, r3, #2
    1a86:	440b      	add	r3, r1
    1a88:	332c      	adds	r3, #44	; 0x2c
    1a8a:	681a      	ldr	r2, [r3, #0]
    1a8c:	4961      	ldr	r1, [pc, #388]	; (1c14 <Clock_Ip_InitClock+0x584>)
    1a8e:	4613      	mov	r3, r2
    1a90:	00db      	lsls	r3, r3, #3
    1a92:	4413      	add	r3, r2
    1a94:	440b      	add	r3, r1
    1a96:	3301      	adds	r3, #1
    1a98:	781b      	ldrb	r3, [r3, #0]
    1a9a:	461a      	mov	r2, r3
    1a9c:	4b64      	ldr	r3, [pc, #400]	; (1c30 <Clock_Ip_InitClock+0x5a0>)
    1a9e:	5c9b      	ldrb	r3, [r3, r2]
    1aa0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1aa2:	4964      	ldr	r1, [pc, #400]	; (1c34 <Clock_Ip_InitClock+0x5a4>)
    1aa4:	9a02      	ldr	r2, [sp, #8]
    1aa6:	4613      	mov	r3, r2
    1aa8:	009b      	lsls	r3, r3, #2
    1aaa:	4413      	add	r3, r2
    1aac:	009b      	lsls	r3, r3, #2
    1aae:	440b      	add	r3, r1
    1ab0:	3308      	adds	r3, #8
    1ab2:	6819      	ldr	r1, [r3, #0]
    1ab4:	9a03      	ldr	r2, [sp, #12]
    1ab6:	4613      	mov	r3, r2
    1ab8:	009b      	lsls	r3, r3, #2
    1aba:	4413      	add	r3, r2
    1abc:	009b      	lsls	r3, r3, #2
    1abe:	3328      	adds	r3, #40	; 0x28
    1ac0:	9a01      	ldr	r2, [sp, #4]
    1ac2:	4413      	add	r3, r2
    1ac4:	3304      	adds	r3, #4
    1ac6:	4618      	mov	r0, r3
    1ac8:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1aca:	9b03      	ldr	r3, [sp, #12]
    1acc:	3301      	adds	r3, #1
    1ace:	9303      	str	r3, [sp, #12]
    1ad0:	9b01      	ldr	r3, [sp, #4]
    1ad2:	7a5b      	ldrb	r3, [r3, #9]
    1ad4:	461a      	mov	r2, r3
    1ad6:	9b03      	ldr	r3, [sp, #12]
    1ad8:	4293      	cmp	r3, r2
    1ada:	d3ce      	bcc.n	1a7a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1adc:	2300      	movs	r3, #0
    1ade:	9303      	str	r3, [sp, #12]
    1ae0:	e029      	b.n	1b36 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1ae2:	9901      	ldr	r1, [sp, #4]
    1ae4:	9a03      	ldr	r2, [sp, #12]
    1ae6:	4613      	mov	r3, r2
    1ae8:	009b      	lsls	r3, r3, #2
    1aea:	4413      	add	r3, r2
    1aec:	00db      	lsls	r3, r3, #3
    1aee:	440b      	add	r3, r1
    1af0:	3340      	adds	r3, #64	; 0x40
    1af2:	681a      	ldr	r2, [r3, #0]
    1af4:	4947      	ldr	r1, [pc, #284]	; (1c14 <Clock_Ip_InitClock+0x584>)
    1af6:	4613      	mov	r3, r2
    1af8:	00db      	lsls	r3, r3, #3
    1afa:	4413      	add	r3, r2
    1afc:	440b      	add	r3, r1
    1afe:	3301      	adds	r3, #1
    1b00:	781b      	ldrb	r3, [r3, #0]
    1b02:	461a      	mov	r2, r3
    1b04:	4b46      	ldr	r3, [pc, #280]	; (1c20 <Clock_Ip_InitClock+0x590>)
    1b06:	5c9b      	ldrb	r3, [r3, r2]
    1b08:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1b0a:	4946      	ldr	r1, [pc, #280]	; (1c24 <Clock_Ip_InitClock+0x594>)
    1b0c:	9a02      	ldr	r2, [sp, #8]
    1b0e:	4613      	mov	r3, r2
    1b10:	009b      	lsls	r3, r3, #2
    1b12:	4413      	add	r3, r2
    1b14:	009b      	lsls	r3, r3, #2
    1b16:	440b      	add	r3, r1
    1b18:	330c      	adds	r3, #12
    1b1a:	6819      	ldr	r1, [r3, #0]
    1b1c:	9a03      	ldr	r2, [sp, #12]
    1b1e:	4613      	mov	r3, r2
    1b20:	009b      	lsls	r3, r3, #2
    1b22:	4413      	add	r3, r2
    1b24:	00db      	lsls	r3, r3, #3
    1b26:	3340      	adds	r3, #64	; 0x40
    1b28:	9a01      	ldr	r2, [sp, #4]
    1b2a:	4413      	add	r3, r2
    1b2c:	4618      	mov	r0, r3
    1b2e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b30:	9b03      	ldr	r3, [sp, #12]
    1b32:	3301      	adds	r3, #1
    1b34:	9303      	str	r3, [sp, #12]
    1b36:	9b01      	ldr	r3, [sp, #4]
    1b38:	7a9b      	ldrb	r3, [r3, #10]
    1b3a:	461a      	mov	r2, r3
    1b3c:	9b03      	ldr	r3, [sp, #12]
    1b3e:	4293      	cmp	r3, r2
    1b40:	d3cf      	bcc.n	1ae2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b42:	2300      	movs	r3, #0
    1b44:	9303      	str	r3, [sp, #12]
    1b46:	e025      	b.n	1b94 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1b48:	9a01      	ldr	r2, [sp, #4]
    1b4a:	9b03      	ldr	r3, [sp, #12]
    1b4c:	3324      	adds	r3, #36	; 0x24
    1b4e:	011b      	lsls	r3, r3, #4
    1b50:	4413      	add	r3, r2
    1b52:	3304      	adds	r3, #4
    1b54:	681a      	ldr	r2, [r3, #0]
    1b56:	492f      	ldr	r1, [pc, #188]	; (1c14 <Clock_Ip_InitClock+0x584>)
    1b58:	4613      	mov	r3, r2
    1b5a:	00db      	lsls	r3, r3, #3
    1b5c:	4413      	add	r3, r2
    1b5e:	440b      	add	r3, r1
    1b60:	3301      	adds	r3, #1
    1b62:	781b      	ldrb	r3, [r3, #0]
    1b64:	461a      	mov	r2, r3
    1b66:	4b34      	ldr	r3, [pc, #208]	; (1c38 <Clock_Ip_InitClock+0x5a8>)
    1b68:	5c9b      	ldrb	r3, [r3, r2]
    1b6a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1b6c:	4933      	ldr	r1, [pc, #204]	; (1c3c <Clock_Ip_InitClock+0x5ac>)
    1b6e:	9a02      	ldr	r2, [sp, #8]
    1b70:	4613      	mov	r3, r2
    1b72:	005b      	lsls	r3, r3, #1
    1b74:	4413      	add	r3, r2
    1b76:	009b      	lsls	r3, r3, #2
    1b78:	440b      	add	r3, r1
    1b7a:	3304      	adds	r3, #4
    1b7c:	681b      	ldr	r3, [r3, #0]
    1b7e:	9a03      	ldr	r2, [sp, #12]
    1b80:	3224      	adds	r2, #36	; 0x24
    1b82:	0112      	lsls	r2, r2, #4
    1b84:	9901      	ldr	r1, [sp, #4]
    1b86:	440a      	add	r2, r1
    1b88:	3204      	adds	r2, #4
    1b8a:	4610      	mov	r0, r2
    1b8c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b8e:	9b03      	ldr	r3, [sp, #12]
    1b90:	3301      	adds	r3, #1
    1b92:	9303      	str	r3, [sp, #12]
    1b94:	9b01      	ldr	r3, [sp, #4]
    1b96:	7b9b      	ldrb	r3, [r3, #14]
    1b98:	461a      	mov	r2, r3
    1b9a:	9b03      	ldr	r3, [sp, #12]
    1b9c:	4293      	cmp	r3, r2
    1b9e:	d3d3      	bcc.n	1b48 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1ba0:	4b27      	ldr	r3, [pc, #156]	; (1c40 <Clock_Ip_InitClock+0x5b0>)
    1ba2:	2200      	movs	r2, #0
    1ba4:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1ba6:	4b26      	ldr	r3, [pc, #152]	; (1c40 <Clock_Ip_InitClock+0x5b0>)
    1ba8:	2200      	movs	r2, #0
    1baa:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1bac:	4b24      	ldr	r3, [pc, #144]	; (1c40 <Clock_Ip_InitClock+0x5b0>)
    1bae:	2201      	movs	r2, #1
    1bb0:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1bb2:	4b23      	ldr	r3, [pc, #140]	; (1c40 <Clock_Ip_InitClock+0x5b0>)
    1bb4:	2200      	movs	r2, #0
    1bb6:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1bb8:	f000 fa9c 	bl	20f4 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1bbc:	2300      	movs	r3, #0
    1bbe:	9303      	str	r3, [sp, #12]
    1bc0:	e04c      	b.n	1c5c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1bc2:	9a01      	ldr	r2, [sp, #4]
    1bc4:	9b03      	ldr	r3, [sp, #12]
    1bc6:	330d      	adds	r3, #13
    1bc8:	00db      	lsls	r3, r3, #3
    1bca:	4413      	add	r3, r2
    1bcc:	685b      	ldr	r3, [r3, #4]
    1bce:	4a1d      	ldr	r2, [pc, #116]	; (1c44 <Clock_Ip_InitClock+0x5b4>)
    1bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bd4:	2b03      	cmp	r3, #3
    1bd6:	d03b      	beq.n	1c50 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1bd8:	9b01      	ldr	r3, [sp, #4]
    1bda:	9a03      	ldr	r2, [sp, #12]
    1bdc:	320d      	adds	r2, #13
    1bde:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1be2:	490c      	ldr	r1, [pc, #48]	; (1c14 <Clock_Ip_InitClock+0x584>)
    1be4:	4613      	mov	r3, r2
    1be6:	00db      	lsls	r3, r3, #3
    1be8:	4413      	add	r3, r2
    1bea:	440b      	add	r3, r1
    1bec:	3301      	adds	r3, #1
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	461a      	mov	r2, r3
    1bf2:	4b15      	ldr	r3, [pc, #84]	; (1c48 <Clock_Ip_InitClock+0x5b8>)
    1bf4:	5c9b      	ldrb	r3, [r3, r2]
    1bf6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1bf8:	4a14      	ldr	r2, [pc, #80]	; (1c4c <Clock_Ip_InitClock+0x5bc>)
    1bfa:	9b02      	ldr	r3, [sp, #8]
    1bfc:	00db      	lsls	r3, r3, #3
    1bfe:	4413      	add	r3, r2
    1c00:	685b      	ldr	r3, [r3, #4]
    1c02:	9a03      	ldr	r2, [sp, #12]
    1c04:	320d      	adds	r2, #13
    1c06:	00d2      	lsls	r2, r2, #3
    1c08:	9901      	ldr	r1, [sp, #4]
    1c0a:	440a      	add	r2, r1
    1c0c:	4610      	mov	r0, r2
    1c0e:	4798      	blx	r3
    1c10:	e021      	b.n	1c56 <Clock_Ip_InitClock+0x5c6>
    1c12:	bf00      	nop
    1c14:	0000c2e4 	.word	0x0000c2e4
    1c18:	0000c254 	.word	0x0000c254
    1c1c:	0000c830 	.word	0x0000c830
    1c20:	0000c2a4 	.word	0x0000c2a4
    1c24:	0000c8f0 	.word	0x0000c8f0
    1c28:	0000c2d4 	.word	0x0000c2d4
    1c2c:	0000c8e0 	.word	0x0000c8e0
    1c30:	0000c264 	.word	0x0000c264
    1c34:	0000c838 	.word	0x0000c838
    1c38:	0000c294 	.word	0x0000c294
    1c3c:	0000c860 	.word	0x0000c860
    1c40:	1fff8b40 	.word	0x1fff8b40
    1c44:	0000c730 	.word	0x0000c730
    1c48:	0000c2b4 	.word	0x0000c2b4
    1c4c:	0000c91c 	.word	0x0000c91c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1c50:	4b3a      	ldr	r3, [pc, #232]	; (1d3c <Clock_Ip_InitClock+0x6ac>)
    1c52:	2201      	movs	r2, #1
    1c54:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c56:	9b03      	ldr	r3, [sp, #12]
    1c58:	3301      	adds	r3, #1
    1c5a:	9303      	str	r3, [sp, #12]
    1c5c:	9b01      	ldr	r3, [sp, #4]
    1c5e:	7adb      	ldrb	r3, [r3, #11]
    1c60:	461a      	mov	r2, r3
    1c62:	9b03      	ldr	r3, [sp, #12]
    1c64:	4293      	cmp	r3, r2
    1c66:	d3ac      	bcc.n	1bc2 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1c68:	4b34      	ldr	r3, [pc, #208]	; (1d3c <Clock_Ip_InitClock+0x6ac>)
    1c6a:	781b      	ldrb	r3, [r3, #0]
    1c6c:	f083 0301 	eor.w	r3, r3, #1
    1c70:	b2db      	uxtb	r3, r3
    1c72:	2b00      	cmp	r3, #0
    1c74:	d05e      	beq.n	1d34 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1c76:	2300      	movs	r3, #0
    1c78:	9303      	str	r3, [sp, #12]
    1c7a:	e01f      	b.n	1cbc <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1c7c:	9a01      	ldr	r2, [sp, #4]
    1c7e:	9b03      	ldr	r3, [sp, #12]
    1c80:	334e      	adds	r3, #78	; 0x4e
    1c82:	00db      	lsls	r3, r3, #3
    1c84:	4413      	add	r3, r2
    1c86:	685a      	ldr	r2, [r3, #4]
    1c88:	492d      	ldr	r1, [pc, #180]	; (1d40 <Clock_Ip_InitClock+0x6b0>)
    1c8a:	4613      	mov	r3, r2
    1c8c:	00db      	lsls	r3, r3, #3
    1c8e:	4413      	add	r3, r2
    1c90:	440b      	add	r3, r1
    1c92:	3301      	adds	r3, #1
    1c94:	781b      	ldrb	r3, [r3, #0]
    1c96:	461a      	mov	r2, r3
    1c98:	4b2a      	ldr	r3, [pc, #168]	; (1d44 <Clock_Ip_InitClock+0x6b4>)
    1c9a:	5c9b      	ldrb	r3, [r3, r2]
    1c9c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1c9e:	4a2a      	ldr	r2, [pc, #168]	; (1d48 <Clock_Ip_InitClock+0x6b8>)
    1ca0:	9b02      	ldr	r3, [sp, #8]
    1ca2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1ca6:	9a03      	ldr	r2, [sp, #12]
    1ca8:	324e      	adds	r2, #78	; 0x4e
    1caa:	00d2      	lsls	r2, r2, #3
    1cac:	9901      	ldr	r1, [sp, #4]
    1cae:	440a      	add	r2, r1
    1cb0:	3204      	adds	r2, #4
    1cb2:	4610      	mov	r0, r2
    1cb4:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1cb6:	9b03      	ldr	r3, [sp, #12]
    1cb8:	3301      	adds	r3, #1
    1cba:	9303      	str	r3, [sp, #12]
    1cbc:	9b01      	ldr	r3, [sp, #4]
    1cbe:	7c1b      	ldrb	r3, [r3, #16]
    1cc0:	461a      	mov	r2, r3
    1cc2:	9b03      	ldr	r3, [sp, #12]
    1cc4:	4293      	cmp	r3, r2
    1cc6:	d3d9      	bcc.n	1c7c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1cc8:	2300      	movs	r3, #0
    1cca:	9303      	str	r3, [sp, #12]
    1ccc:	e028      	b.n	1d20 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1cce:	9901      	ldr	r1, [sp, #4]
    1cd0:	9a03      	ldr	r2, [sp, #12]
    1cd2:	4613      	mov	r3, r2
    1cd4:	009b      	lsls	r3, r3, #2
    1cd6:	4413      	add	r3, r2
    1cd8:	009b      	lsls	r3, r3, #2
    1cda:	440b      	add	r3, r1
    1cdc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ce0:	681a      	ldr	r2, [r3, #0]
    1ce2:	4917      	ldr	r1, [pc, #92]	; (1d40 <Clock_Ip_InitClock+0x6b0>)
    1ce4:	4613      	mov	r3, r2
    1ce6:	00db      	lsls	r3, r3, #3
    1ce8:	4413      	add	r3, r2
    1cea:	440b      	add	r3, r1
    1cec:	3301      	adds	r3, #1
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	461a      	mov	r2, r3
    1cf2:	4b16      	ldr	r3, [pc, #88]	; (1d4c <Clock_Ip_InitClock+0x6bc>)
    1cf4:	5c9b      	ldrb	r3, [r3, r2]
    1cf6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1cf8:	4a15      	ldr	r2, [pc, #84]	; (1d50 <Clock_Ip_InitClock+0x6c0>)
    1cfa:	9b02      	ldr	r3, [sp, #8]
    1cfc:	011b      	lsls	r3, r3, #4
    1cfe:	4413      	add	r3, r2
    1d00:	330c      	adds	r3, #12
    1d02:	6819      	ldr	r1, [r3, #0]
    1d04:	9a03      	ldr	r2, [sp, #12]
    1d06:	4613      	mov	r3, r2
    1d08:	009b      	lsls	r3, r3, #2
    1d0a:	4413      	add	r3, r2
    1d0c:	009b      	lsls	r3, r3, #2
    1d0e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d12:	9a01      	ldr	r2, [sp, #4]
    1d14:	4413      	add	r3, r2
    1d16:	4618      	mov	r0, r3
    1d18:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d1a:	9b03      	ldr	r3, [sp, #12]
    1d1c:	3301      	adds	r3, #1
    1d1e:	9303      	str	r3, [sp, #12]
    1d20:	9b01      	ldr	r3, [sp, #4]
    1d22:	7c9b      	ldrb	r3, [r3, #18]
    1d24:	461a      	mov	r2, r3
    1d26:	9b03      	ldr	r3, [sp, #12]
    1d28:	4293      	cmp	r3, r2
    1d2a:	d3d0      	bcc.n	1cce <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1d2c:	2104      	movs	r1, #4
    1d2e:	9801      	ldr	r0, [sp, #4]
    1d30:	f002 ff48 	bl	4bc4 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1d34:	bf00      	nop
    1d36:	b004      	add	sp, #16
    1d38:	bd10      	pop	{r4, pc}
    1d3a:	bf00      	nop
    1d3c:	1fff8b40 	.word	0x1fff8b40
    1d40:	0000c2e4 	.word	0x0000c2e4
    1d44:	0000c284 	.word	0x0000c284
    1d48:	0000c86c 	.word	0x0000c86c
    1d4c:	0000c2d4 	.word	0x0000c2d4
    1d50:	0000c8e0 	.word	0x0000c8e0

00001d54 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1d54:	b500      	push	{lr}
    1d56:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1d58:	2302      	movs	r3, #2
    1d5a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1d5c:	2300      	movs	r3, #0
    1d5e:	9304      	str	r3, [sp, #16]
    1d60:	e02c      	b.n	1dbc <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1d62:	4a36      	ldr	r2, [pc, #216]	; (1e3c <Clock_Ip_GetPllStatus+0xe8>)
    1d64:	9b04      	ldr	r3, [sp, #16]
    1d66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d6a:	4935      	ldr	r1, [pc, #212]	; (1e40 <Clock_Ip_GetPllStatus+0xec>)
    1d6c:	4613      	mov	r3, r2
    1d6e:	00db      	lsls	r3, r3, #3
    1d70:	4413      	add	r3, r2
    1d72:	440b      	add	r3, r1
    1d74:	3301      	adds	r3, #1
    1d76:	781b      	ldrb	r3, [r3, #0]
    1d78:	461a      	mov	r2, r3
    1d7a:	4b32      	ldr	r3, [pc, #200]	; (1e44 <Clock_Ip_GetPllStatus+0xf0>)
    1d7c:	5c9b      	ldrb	r3, [r3, r2]
    1d7e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1d80:	4931      	ldr	r1, [pc, #196]	; (1e48 <Clock_Ip_GetPllStatus+0xf4>)
    1d82:	9a03      	ldr	r2, [sp, #12]
    1d84:	4613      	mov	r3, r2
    1d86:	009b      	lsls	r3, r3, #2
    1d88:	4413      	add	r3, r2
    1d8a:	009b      	lsls	r3, r3, #2
    1d8c:	440b      	add	r3, r1
    1d8e:	3308      	adds	r3, #8
    1d90:	681b      	ldr	r3, [r3, #0]
    1d92:	492a      	ldr	r1, [pc, #168]	; (1e3c <Clock_Ip_GetPllStatus+0xe8>)
    1d94:	9a04      	ldr	r2, [sp, #16]
    1d96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1d9a:	4610      	mov	r0, r2
    1d9c:	4798      	blx	r3
    1d9e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1da0:	9b02      	ldr	r3, [sp, #8]
    1da2:	2b01      	cmp	r3, #1
    1da4:	d102      	bne.n	1dac <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1da6:	2301      	movs	r3, #1
    1da8:	9305      	str	r3, [sp, #20]
            break;
    1daa:	e00d      	b.n	1dc8 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1dac:	9b02      	ldr	r3, [sp, #8]
    1dae:	2b02      	cmp	r3, #2
    1db0:	d101      	bne.n	1db6 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1db2:	2300      	movs	r3, #0
    1db4:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1db6:	9b04      	ldr	r3, [sp, #16]
    1db8:	3301      	adds	r3, #1
    1dba:	9304      	str	r3, [sp, #16]
    1dbc:	4b23      	ldr	r3, [pc, #140]	; (1e4c <Clock_Ip_GetPllStatus+0xf8>)
    1dbe:	789b      	ldrb	r3, [r3, #2]
    1dc0:	461a      	mov	r2, r3
    1dc2:	9b04      	ldr	r3, [sp, #16]
    1dc4:	4293      	cmp	r3, r2
    1dc6:	d3cc      	bcc.n	1d62 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1dc8:	9b05      	ldr	r3, [sp, #20]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d130      	bne.n	1e30 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1dce:	2300      	movs	r3, #0
    1dd0:	9304      	str	r3, [sp, #16]
    1dd2:	e027      	b.n	1e24 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1dd4:	4a1e      	ldr	r2, [pc, #120]	; (1e50 <Clock_Ip_GetPllStatus+0xfc>)
    1dd6:	9b04      	ldr	r3, [sp, #16]
    1dd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1ddc:	4918      	ldr	r1, [pc, #96]	; (1e40 <Clock_Ip_GetPllStatus+0xec>)
    1dde:	4613      	mov	r3, r2
    1de0:	00db      	lsls	r3, r3, #3
    1de2:	4413      	add	r3, r2
    1de4:	440b      	add	r3, r1
    1de6:	3301      	adds	r3, #1
    1de8:	781b      	ldrb	r3, [r3, #0]
    1dea:	461a      	mov	r2, r3
    1dec:	4b19      	ldr	r3, [pc, #100]	; (1e54 <Clock_Ip_GetPllStatus+0x100>)
    1dee:	5c9b      	ldrb	r3, [r3, r2]
    1df0:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1df2:	4919      	ldr	r1, [pc, #100]	; (1e58 <Clock_Ip_GetPllStatus+0x104>)
    1df4:	9a03      	ldr	r2, [sp, #12]
    1df6:	4613      	mov	r3, r2
    1df8:	005b      	lsls	r3, r3, #1
    1dfa:	4413      	add	r3, r2
    1dfc:	009b      	lsls	r3, r3, #2
    1dfe:	440b      	add	r3, r1
    1e00:	3308      	adds	r3, #8
    1e02:	681b      	ldr	r3, [r3, #0]
    1e04:	4912      	ldr	r1, [pc, #72]	; (1e50 <Clock_Ip_GetPllStatus+0xfc>)
    1e06:	9a04      	ldr	r2, [sp, #16]
    1e08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e0c:	4610      	mov	r0, r2
    1e0e:	4798      	blx	r3
    1e10:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1e12:	9b01      	ldr	r3, [sp, #4]
    1e14:	2b01      	cmp	r3, #1
    1e16:	d102      	bne.n	1e1e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e18:	2301      	movs	r3, #1
    1e1a:	9305      	str	r3, [sp, #20]
                break;
    1e1c:	e008      	b.n	1e30 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e1e:	9b04      	ldr	r3, [sp, #16]
    1e20:	3301      	adds	r3, #1
    1e22:	9304      	str	r3, [sp, #16]
    1e24:	4b09      	ldr	r3, [pc, #36]	; (1e4c <Clock_Ip_GetPllStatus+0xf8>)
    1e26:	78db      	ldrb	r3, [r3, #3]
    1e28:	461a      	mov	r2, r3
    1e2a:	9b04      	ldr	r3, [sp, #16]
    1e2c:	4293      	cmp	r3, r2
    1e2e:	d3d1      	bcc.n	1dd4 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1e30:	9b05      	ldr	r3, [sp, #20]
}
    1e32:	4618      	mov	r0, r3
    1e34:	b007      	add	sp, #28
    1e36:	f85d fb04 	ldr.w	pc, [sp], #4
    1e3a:	bf00      	nop
    1e3c:	0000c7ec 	.word	0x0000c7ec
    1e40:	0000c2e4 	.word	0x0000c2e4
    1e44:	0000c2a4 	.word	0x0000c2a4
    1e48:	0000c8f0 	.word	0x0000c8f0
    1e4c:	1fff8b40 	.word	0x1fff8b40
    1e50:	0000c7f0 	.word	0x0000c7f0
    1e54:	0000c294 	.word	0x0000c294
    1e58:	0000c860 	.word	0x0000c860

00001e5c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1e5c:	b500      	push	{lr}
    1e5e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1e60:	4b55      	ldr	r3, [pc, #340]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	2b00      	cmp	r3, #0
    1e66:	f000 80a2 	beq.w	1fae <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1e6a:	2300      	movs	r3, #0
    1e6c:	9301      	str	r3, [sp, #4]
    1e6e:	e02c      	b.n	1eca <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1e70:	4b51      	ldr	r3, [pc, #324]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1e72:	681a      	ldr	r2, [r3, #0]
    1e74:	9b01      	ldr	r3, [sp, #4]
    1e76:	330d      	adds	r3, #13
    1e78:	00db      	lsls	r3, r3, #3
    1e7a:	4413      	add	r3, r2
    1e7c:	685b      	ldr	r3, [r3, #4]
    1e7e:	4a4f      	ldr	r2, [pc, #316]	; (1fbc <Clock_Ip_DistributePll+0x160>)
    1e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e84:	2b03      	cmp	r3, #3
    1e86:	d11d      	bne.n	1ec4 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1e88:	4b4b      	ldr	r3, [pc, #300]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	9a01      	ldr	r2, [sp, #4]
    1e8e:	320d      	adds	r2, #13
    1e90:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1e94:	494a      	ldr	r1, [pc, #296]	; (1fc0 <Clock_Ip_DistributePll+0x164>)
    1e96:	4613      	mov	r3, r2
    1e98:	00db      	lsls	r3, r3, #3
    1e9a:	4413      	add	r3, r2
    1e9c:	440b      	add	r3, r1
    1e9e:	3301      	adds	r3, #1
    1ea0:	781b      	ldrb	r3, [r3, #0]
    1ea2:	461a      	mov	r2, r3
    1ea4:	4b47      	ldr	r3, [pc, #284]	; (1fc4 <Clock_Ip_DistributePll+0x168>)
    1ea6:	5c9b      	ldrb	r3, [r3, r2]
    1ea8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1eaa:	4a47      	ldr	r2, [pc, #284]	; (1fc8 <Clock_Ip_DistributePll+0x16c>)
    1eac:	9b00      	ldr	r3, [sp, #0]
    1eae:	00db      	lsls	r3, r3, #3
    1eb0:	4413      	add	r3, r2
    1eb2:	685b      	ldr	r3, [r3, #4]
    1eb4:	4a40      	ldr	r2, [pc, #256]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1eb6:	6811      	ldr	r1, [r2, #0]
    1eb8:	9a01      	ldr	r2, [sp, #4]
    1eba:	320d      	adds	r2, #13
    1ebc:	00d2      	lsls	r2, r2, #3
    1ebe:	440a      	add	r2, r1
    1ec0:	4610      	mov	r0, r2
    1ec2:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1ec4:	9b01      	ldr	r3, [sp, #4]
    1ec6:	3301      	adds	r3, #1
    1ec8:	9301      	str	r3, [sp, #4]
    1eca:	4b3b      	ldr	r3, [pc, #236]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1ecc:	681b      	ldr	r3, [r3, #0]
    1ece:	7adb      	ldrb	r3, [r3, #11]
    1ed0:	461a      	mov	r2, r3
    1ed2:	9b01      	ldr	r3, [sp, #4]
    1ed4:	4293      	cmp	r3, r2
    1ed6:	d3cb      	bcc.n	1e70 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1ed8:	4b3c      	ldr	r3, [pc, #240]	; (1fcc <Clock_Ip_DistributePll+0x170>)
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d066      	beq.n	1fae <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1ee0:	2300      	movs	r3, #0
    1ee2:	9301      	str	r3, [sp, #4]
    1ee4:	e021      	b.n	1f2a <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1ee6:	4b34      	ldr	r3, [pc, #208]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1ee8:	681a      	ldr	r2, [r3, #0]
    1eea:	9b01      	ldr	r3, [sp, #4]
    1eec:	334e      	adds	r3, #78	; 0x4e
    1eee:	00db      	lsls	r3, r3, #3
    1ef0:	4413      	add	r3, r2
    1ef2:	685a      	ldr	r2, [r3, #4]
    1ef4:	4932      	ldr	r1, [pc, #200]	; (1fc0 <Clock_Ip_DistributePll+0x164>)
    1ef6:	4613      	mov	r3, r2
    1ef8:	00db      	lsls	r3, r3, #3
    1efa:	4413      	add	r3, r2
    1efc:	440b      	add	r3, r1
    1efe:	3301      	adds	r3, #1
    1f00:	781b      	ldrb	r3, [r3, #0]
    1f02:	461a      	mov	r2, r3
    1f04:	4b32      	ldr	r3, [pc, #200]	; (1fd0 <Clock_Ip_DistributePll+0x174>)
    1f06:	5c9b      	ldrb	r3, [r3, r2]
    1f08:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1f0a:	4a32      	ldr	r2, [pc, #200]	; (1fd4 <Clock_Ip_DistributePll+0x178>)
    1f0c:	9b00      	ldr	r3, [sp, #0]
    1f0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f12:	4a29      	ldr	r2, [pc, #164]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1f14:	6811      	ldr	r1, [r2, #0]
    1f16:	9a01      	ldr	r2, [sp, #4]
    1f18:	324e      	adds	r2, #78	; 0x4e
    1f1a:	00d2      	lsls	r2, r2, #3
    1f1c:	440a      	add	r2, r1
    1f1e:	3204      	adds	r2, #4
    1f20:	4610      	mov	r0, r2
    1f22:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f24:	9b01      	ldr	r3, [sp, #4]
    1f26:	3301      	adds	r3, #1
    1f28:	9301      	str	r3, [sp, #4]
    1f2a:	4b23      	ldr	r3, [pc, #140]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	7c1b      	ldrb	r3, [r3, #16]
    1f30:	461a      	mov	r2, r3
    1f32:	9b01      	ldr	r3, [sp, #4]
    1f34:	4293      	cmp	r3, r2
    1f36:	d3d6      	bcc.n	1ee6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f38:	2300      	movs	r3, #0
    1f3a:	9301      	str	r3, [sp, #4]
    1f3c:	e02a      	b.n	1f94 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f3e:	4b1e      	ldr	r3, [pc, #120]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1f40:	6819      	ldr	r1, [r3, #0]
    1f42:	9a01      	ldr	r2, [sp, #4]
    1f44:	4613      	mov	r3, r2
    1f46:	009b      	lsls	r3, r3, #2
    1f48:	4413      	add	r3, r2
    1f4a:	009b      	lsls	r3, r3, #2
    1f4c:	440b      	add	r3, r1
    1f4e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f52:	681a      	ldr	r2, [r3, #0]
    1f54:	491a      	ldr	r1, [pc, #104]	; (1fc0 <Clock_Ip_DistributePll+0x164>)
    1f56:	4613      	mov	r3, r2
    1f58:	00db      	lsls	r3, r3, #3
    1f5a:	4413      	add	r3, r2
    1f5c:	440b      	add	r3, r1
    1f5e:	3301      	adds	r3, #1
    1f60:	781b      	ldrb	r3, [r3, #0]
    1f62:	461a      	mov	r2, r3
    1f64:	4b1c      	ldr	r3, [pc, #112]	; (1fd8 <Clock_Ip_DistributePll+0x17c>)
    1f66:	5c9b      	ldrb	r3, [r3, r2]
    1f68:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1f6a:	4a1c      	ldr	r2, [pc, #112]	; (1fdc <Clock_Ip_DistributePll+0x180>)
    1f6c:	9b00      	ldr	r3, [sp, #0]
    1f6e:	011b      	lsls	r3, r3, #4
    1f70:	4413      	add	r3, r2
    1f72:	330c      	adds	r3, #12
    1f74:	6819      	ldr	r1, [r3, #0]
    1f76:	4b10      	ldr	r3, [pc, #64]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1f78:	6818      	ldr	r0, [r3, #0]
    1f7a:	9a01      	ldr	r2, [sp, #4]
    1f7c:	4613      	mov	r3, r2
    1f7e:	009b      	lsls	r3, r3, #2
    1f80:	4413      	add	r3, r2
    1f82:	009b      	lsls	r3, r3, #2
    1f84:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f88:	4403      	add	r3, r0
    1f8a:	4618      	mov	r0, r3
    1f8c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f8e:	9b01      	ldr	r3, [sp, #4]
    1f90:	3301      	adds	r3, #1
    1f92:	9301      	str	r3, [sp, #4]
    1f94:	4b08      	ldr	r3, [pc, #32]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1f96:	681b      	ldr	r3, [r3, #0]
    1f98:	7c9b      	ldrb	r3, [r3, #18]
    1f9a:	461a      	mov	r2, r3
    1f9c:	9b01      	ldr	r3, [sp, #4]
    1f9e:	4293      	cmp	r3, r2
    1fa0:	d3cd      	bcc.n	1f3e <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1fa2:	4b05      	ldr	r3, [pc, #20]	; (1fb8 <Clock_Ip_DistributePll+0x15c>)
    1fa4:	681b      	ldr	r3, [r3, #0]
    1fa6:	2104      	movs	r1, #4
    1fa8:	4618      	mov	r0, r3
    1faa:	f002 fe0b 	bl	4bc4 <Clock_Ip_Command>
        }
    }
}
    1fae:	bf00      	nop
    1fb0:	b003      	add	sp, #12
    1fb2:	f85d fb04 	ldr.w	pc, [sp], #4
    1fb6:	bf00      	nop
    1fb8:	1fff8b38 	.word	0x1fff8b38
    1fbc:	0000c730 	.word	0x0000c730
    1fc0:	0000c2e4 	.word	0x0000c2e4
    1fc4:	0000c2b4 	.word	0x0000c2b4
    1fc8:	0000c91c 	.word	0x0000c91c
    1fcc:	1fff8b40 	.word	0x1fff8b40
    1fd0:	0000c284 	.word	0x0000c284
    1fd4:	0000c86c 	.word	0x0000c86c
    1fd8:	0000c2d4 	.word	0x0000c2d4
    1fdc:	0000c8e0 	.word	0x0000c8e0

00001fe0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1fe0:	b500      	push	{lr}
    1fe2:	b085      	sub	sp, #20
    1fe4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1fe6:	490c      	ldr	r1, [pc, #48]	; (2018 <Clock_Ip_DisableClockMonitor+0x38>)
    1fe8:	9a01      	ldr	r2, [sp, #4]
    1fea:	4613      	mov	r3, r2
    1fec:	00db      	lsls	r3, r3, #3
    1fee:	4413      	add	r3, r2
    1ff0:	440b      	add	r3, r1
    1ff2:	3301      	adds	r3, #1
    1ff4:	781b      	ldrb	r3, [r3, #0]
    1ff6:	461a      	mov	r2, r3
    1ff8:	4b08      	ldr	r3, [pc, #32]	; (201c <Clock_Ip_DisableClockMonitor+0x3c>)
    1ffa:	5c9b      	ldrb	r3, [r3, r2]
    1ffc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1ffe:	4a08      	ldr	r2, [pc, #32]	; (2020 <Clock_Ip_DisableClockMonitor+0x40>)
    2000:	9b03      	ldr	r3, [sp, #12]
    2002:	011b      	lsls	r3, r3, #4
    2004:	4413      	add	r3, r2
    2006:	3308      	adds	r3, #8
    2008:	681b      	ldr	r3, [r3, #0]
    200a:	9801      	ldr	r0, [sp, #4]
    200c:	4798      	blx	r3
}
    200e:	bf00      	nop
    2010:	b005      	add	sp, #20
    2012:	f85d fb04 	ldr.w	pc, [sp], #4
    2016:	bf00      	nop
    2018:	0000c2e4 	.word	0x0000c2e4
    201c:	0000c2d4 	.word	0x0000c2d4
    2020:	0000c8e0 	.word	0x0000c8e0

00002024 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2024:	b082      	sub	sp, #8
    2026:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2028:	4a02      	ldr	r2, [pc, #8]	; (2034 <Clock_Ip_InstallNotificationsCallback+0x10>)
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	6013      	str	r3, [r2, #0]
}
    202e:	bf00      	nop
    2030:	b002      	add	sp, #8
    2032:	4770      	bx	lr
    2034:	1fff8b1c 	.word	0x1fff8b1c

00002038 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2038:	b500      	push	{lr}
    203a:	b085      	sub	sp, #20
    203c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    203e:	490c      	ldr	r1, [pc, #48]	; (2070 <Clock_Ip_DisableModuleClock+0x38>)
    2040:	9a01      	ldr	r2, [sp, #4]
    2042:	4613      	mov	r3, r2
    2044:	00db      	lsls	r3, r3, #3
    2046:	4413      	add	r3, r2
    2048:	440b      	add	r3, r1
    204a:	3301      	adds	r3, #1
    204c:	781b      	ldrb	r3, [r3, #0]
    204e:	461a      	mov	r2, r3
    2050:	4b08      	ldr	r3, [pc, #32]	; (2074 <Clock_Ip_DisableModuleClock+0x3c>)
    2052:	5c9b      	ldrb	r3, [r3, r2]
    2054:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2056:	4a08      	ldr	r2, [pc, #32]	; (2078 <Clock_Ip_DisableModuleClock+0x40>)
    2058:	9b03      	ldr	r3, [sp, #12]
    205a:	00db      	lsls	r3, r3, #3
    205c:	4413      	add	r3, r2
    205e:	685b      	ldr	r3, [r3, #4]
    2060:	2101      	movs	r1, #1
    2062:	9801      	ldr	r0, [sp, #4]
    2064:	4798      	blx	r3
}
    2066:	bf00      	nop
    2068:	b005      	add	sp, #20
    206a:	f85d fb04 	ldr.w	pc, [sp], #4
    206e:	bf00      	nop
    2070:	0000c2e4 	.word	0x0000c2e4
    2074:	0000c284 	.word	0x0000c284
    2078:	0000c86c 	.word	0x0000c86c

0000207c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    207c:	b500      	push	{lr}
    207e:	b085      	sub	sp, #20
    2080:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2082:	490c      	ldr	r1, [pc, #48]	; (20b4 <Clock_Ip_EnableModuleClock+0x38>)
    2084:	9a01      	ldr	r2, [sp, #4]
    2086:	4613      	mov	r3, r2
    2088:	00db      	lsls	r3, r3, #3
    208a:	4413      	add	r3, r2
    208c:	440b      	add	r3, r1
    208e:	3301      	adds	r3, #1
    2090:	781b      	ldrb	r3, [r3, #0]
    2092:	461a      	mov	r2, r3
    2094:	4b08      	ldr	r3, [pc, #32]	; (20b8 <Clock_Ip_EnableModuleClock+0x3c>)
    2096:	5c9b      	ldrb	r3, [r3, r2]
    2098:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    209a:	4a08      	ldr	r2, [pc, #32]	; (20bc <Clock_Ip_EnableModuleClock+0x40>)
    209c:	9b03      	ldr	r3, [sp, #12]
    209e:	00db      	lsls	r3, r3, #3
    20a0:	4413      	add	r3, r2
    20a2:	685b      	ldr	r3, [r3, #4]
    20a4:	2100      	movs	r1, #0
    20a6:	9801      	ldr	r0, [sp, #4]
    20a8:	4798      	blx	r3
}
    20aa:	bf00      	nop
    20ac:	b005      	add	sp, #20
    20ae:	f85d fb04 	ldr.w	pc, [sp], #4
    20b2:	bf00      	nop
    20b4:	0000c2e4 	.word	0x0000c2e4
    20b8:	0000c284 	.word	0x0000c284
    20bc:	0000c86c 	.word	0x0000c86c

000020c0 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    20c0:	b500      	push	{lr}
    20c2:	b083      	sub	sp, #12
    20c4:	9001      	str	r0, [sp, #4]
    20c6:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    20c8:	4b08      	ldr	r3, [pc, #32]	; (20ec <Clock_Ip_PowerModeChangeNotification+0x2c>)
    20ca:	2200      	movs	r2, #0
    20cc:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    20ce:	4b08      	ldr	r3, [pc, #32]	; (20f0 <Clock_Ip_PowerModeChangeNotification+0x30>)
    20d0:	681b      	ldr	r3, [r3, #0]
    20d2:	2102      	movs	r1, #2
    20d4:	4618      	mov	r0, r3
    20d6:	f002 fd75 	bl	4bc4 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    20da:	9900      	ldr	r1, [sp, #0]
    20dc:	9801      	ldr	r0, [sp, #4]
    20de:	f002 fc51 	bl	4984 <Clock_Ip_ClockPowerModeChangeNotification>
}
    20e2:	bf00      	nop
    20e4:	b003      	add	sp, #12
    20e6:	f85d fb04 	ldr.w	pc, [sp], #4
    20ea:	bf00      	nop
    20ec:	1fff8b18 	.word	0x1fff8b18
    20f0:	1fff8b38 	.word	0x1fff8b38

000020f4 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    20f4:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    20f6:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    20fa:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    20fc:	4b06      	ldr	r3, [pc, #24]	; (2118 <Clock_Ip_SetWaitStates+0x24>)
    20fe:	785b      	ldrb	r3, [r3, #1]
    2100:	2b00      	cmp	r3, #0
    2102:	d005      	beq.n	2110 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2104:	9b01      	ldr	r3, [sp, #4]
    2106:	3b01      	subs	r3, #1
    2108:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    210a:	9b01      	ldr	r3, [sp, #4]
    210c:	2b00      	cmp	r3, #0
    210e:	d1f9      	bne.n	2104 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2110:	bf00      	nop
    2112:	b002      	add	sp, #8
    2114:	4770      	bx	lr
    2116:	bf00      	nop
    2118:	1fff8b40 	.word	0x1fff8b40

0000211c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    211c:	b500      	push	{lr}
    211e:	b083      	sub	sp, #12
    2120:	9001      	str	r0, [sp, #4]
    2122:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2124:	4b04      	ldr	r3, [pc, #16]	; (2138 <Clock_Ip_ReportClockErrors+0x1c>)
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	9900      	ldr	r1, [sp, #0]
    212a:	9801      	ldr	r0, [sp, #4]
    212c:	4798      	blx	r3
}
    212e:	bf00      	nop
    2130:	b003      	add	sp, #12
    2132:	f85d fb04 	ldr.w	pc, [sp], #4
    2136:	bf00      	nop
    2138:	1fff8b1c 	.word	0x1fff8b1c

0000213c <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    213c:	b500      	push	{lr}
    213e:	b085      	sub	sp, #20
    2140:	9003      	str	r0, [sp, #12]
    2142:	9102      	str	r1, [sp, #8]
    2144:	9201      	str	r2, [sp, #4]
    2146:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2148:	2000      	movs	r0, #0
    214a:	f7fe ffd1 	bl	10f0 <OsIf_GetCounter>
    214e:	4602      	mov	r2, r0
    2150:	9b03      	ldr	r3, [sp, #12]
    2152:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2154:	9b02      	ldr	r3, [sp, #8]
    2156:	2200      	movs	r2, #0
    2158:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    215a:	2100      	movs	r1, #0
    215c:	9800      	ldr	r0, [sp, #0]
    215e:	f7ff f813 	bl	1188 <OsIf_MicrosToTicks>
    2162:	4602      	mov	r2, r0
    2164:	9b01      	ldr	r3, [sp, #4]
    2166:	601a      	str	r2, [r3, #0]
}
    2168:	bf00      	nop
    216a:	b005      	add	sp, #20
    216c:	f85d fb04 	ldr.w	pc, [sp], #4

00002170 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2170:	b500      	push	{lr}
    2172:	b087      	sub	sp, #28
    2174:	9003      	str	r0, [sp, #12]
    2176:	9102      	str	r1, [sp, #8]
    2178:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    217a:	2300      	movs	r3, #0
    217c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2180:	2100      	movs	r1, #0
    2182:	9803      	ldr	r0, [sp, #12]
    2184:	f7fe ffcd 	bl	1122 <OsIf_GetElapsed>
    2188:	4602      	mov	r2, r0
    218a:	9b02      	ldr	r3, [sp, #8]
    218c:	681b      	ldr	r3, [r3, #0]
    218e:	441a      	add	r2, r3
    2190:	9b02      	ldr	r3, [sp, #8]
    2192:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2194:	9b02      	ldr	r3, [sp, #8]
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	9a01      	ldr	r2, [sp, #4]
    219a:	429a      	cmp	r2, r3
    219c:	d802      	bhi.n	21a4 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    219e:	2301      	movs	r3, #1
    21a0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    21a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    21a8:	4618      	mov	r0, r3
    21aa:	b007      	add	sp, #28
    21ac:	f85d fb04 	ldr.w	pc, [sp], #4

000021b0 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    21b0:	b082      	sub	sp, #8
    21b2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21b4:	bf00      	nop
    21b6:	b002      	add	sp, #8
    21b8:	4770      	bx	lr

000021ba <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    21ba:	b500      	push	{lr}
    21bc:	b083      	sub	sp, #12
    21be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21c0:	9b01      	ldr	r3, [sp, #4]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d002      	beq.n	21cc <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    21c6:	9801      	ldr	r0, [sp, #4]
    21c8:	f000 f8ad 	bl	2326 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21cc:	bf00      	nop
    21ce:	b003      	add	sp, #12
    21d0:	f85d fb04 	ldr.w	pc, [sp], #4

000021d4 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    21d4:	b500      	push	{lr}
    21d6:	b083      	sub	sp, #12
    21d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21da:	9b01      	ldr	r3, [sp, #4]
    21dc:	2b00      	cmp	r3, #0
    21de:	d002      	beq.n	21e6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    21e0:	9801      	ldr	r0, [sp, #4]
    21e2:	f000 f8cd 	bl	2380 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21e6:	bf00      	nop
    21e8:	b003      	add	sp, #12
    21ea:	f85d fb04 	ldr.w	pc, [sp], #4

000021ee <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    21ee:	b500      	push	{lr}
    21f0:	b083      	sub	sp, #12
    21f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21f4:	9b01      	ldr	r3, [sp, #4]
    21f6:	2b00      	cmp	r3, #0
    21f8:	d002      	beq.n	2200 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    21fa:	9801      	ldr	r0, [sp, #4]
    21fc:	f000 f8ee 	bl	23dc <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2200:	bf00      	nop
    2202:	b003      	add	sp, #12
    2204:	f85d fb04 	ldr.w	pc, [sp], #4

00002208 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2208:	b500      	push	{lr}
    220a:	b083      	sub	sp, #12
    220c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    220e:	9b01      	ldr	r3, [sp, #4]
    2210:	2b00      	cmp	r3, #0
    2212:	d002      	beq.n	221a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2214:	9801      	ldr	r0, [sp, #4]
    2216:	f000 f8f9 	bl	240c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    221a:	bf00      	nop
    221c:	b003      	add	sp, #12
    221e:	f85d fb04 	ldr.w	pc, [sp], #4

00002222 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2222:	b500      	push	{lr}
    2224:	b083      	sub	sp, #12
    2226:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2228:	9b01      	ldr	r3, [sp, #4]
    222a:	2b00      	cmp	r3, #0
    222c:	d002      	beq.n	2234 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    222e:	9801      	ldr	r0, [sp, #4]
    2230:	f000 f904 	bl	243c <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2234:	bf00      	nop
    2236:	b003      	add	sp, #12
    2238:	f85d fb04 	ldr.w	pc, [sp], #4

0000223c <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    223c:	b500      	push	{lr}
    223e:	b083      	sub	sp, #12
    2240:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2242:	9b01      	ldr	r3, [sp, #4]
    2244:	2b00      	cmp	r3, #0
    2246:	d002      	beq.n	224e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2248:	9801      	ldr	r0, [sp, #4]
    224a:	f000 f90f 	bl	246c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    224e:	bf00      	nop
    2250:	b003      	add	sp, #12
    2252:	f85d fb04 	ldr.w	pc, [sp], #4

00002256 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2256:	b500      	push	{lr}
    2258:	b083      	sub	sp, #12
    225a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    225c:	9b01      	ldr	r3, [sp, #4]
    225e:	2b00      	cmp	r3, #0
    2260:	d002      	beq.n	2268 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2262:	9801      	ldr	r0, [sp, #4]
    2264:	f000 f91a 	bl	249c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2268:	bf00      	nop
    226a:	b003      	add	sp, #12
    226c:	f85d fb04 	ldr.w	pc, [sp], #4

00002270 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2270:	b500      	push	{lr}
    2272:	b083      	sub	sp, #12
    2274:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2276:	9b01      	ldr	r3, [sp, #4]
    2278:	2b00      	cmp	r3, #0
    227a:	d002      	beq.n	2282 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    227c:	9801      	ldr	r0, [sp, #4]
    227e:	f000 f925 	bl	24cc <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2282:	bf00      	nop
    2284:	b003      	add	sp, #12
    2286:	f85d fb04 	ldr.w	pc, [sp], #4

0000228a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    228a:	b500      	push	{lr}
    228c:	b083      	sub	sp, #12
    228e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2290:	9b01      	ldr	r3, [sp, #4]
    2292:	2b00      	cmp	r3, #0
    2294:	d002      	beq.n	229c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2296:	9801      	ldr	r0, [sp, #4]
    2298:	f000 f930 	bl	24fc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    229c:	bf00      	nop
    229e:	b003      	add	sp, #12
    22a0:	f85d fb04 	ldr.w	pc, [sp], #4

000022a4 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22a4:	b500      	push	{lr}
    22a6:	b083      	sub	sp, #12
    22a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22aa:	9b01      	ldr	r3, [sp, #4]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d002      	beq.n	22b6 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    22b0:	9801      	ldr	r0, [sp, #4]
    22b2:	f000 f93b 	bl	252c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22b6:	bf00      	nop
    22b8:	b003      	add	sp, #12
    22ba:	f85d fb04 	ldr.w	pc, [sp], #4

000022be <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22be:	b500      	push	{lr}
    22c0:	b083      	sub	sp, #12
    22c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22c4:	9b01      	ldr	r3, [sp, #4]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d002      	beq.n	22d0 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    22ca:	9801      	ldr	r0, [sp, #4]
    22cc:	f000 f946 	bl	255c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22d0:	bf00      	nop
    22d2:	b003      	add	sp, #12
    22d4:	f85d fb04 	ldr.w	pc, [sp], #4

000022d8 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    22d8:	b500      	push	{lr}
    22da:	b083      	sub	sp, #12
    22dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22de:	9b01      	ldr	r3, [sp, #4]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d002      	beq.n	22ea <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    22e4:	9801      	ldr	r0, [sp, #4]
    22e6:	f000 f951 	bl	258c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22ea:	bf00      	nop
    22ec:	b003      	add	sp, #12
    22ee:	f85d fb04 	ldr.w	pc, [sp], #4

000022f2 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    22f2:	b500      	push	{lr}
    22f4:	b083      	sub	sp, #12
    22f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22f8:	9b01      	ldr	r3, [sp, #4]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d002      	beq.n	2304 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    22fe:	9801      	ldr	r0, [sp, #4]
    2300:	f000 f95e 	bl	25c0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2304:	bf00      	nop
    2306:	b003      	add	sp, #12
    2308:	f85d fb04 	ldr.w	pc, [sp], #4

0000230c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    230c:	b500      	push	{lr}
    230e:	b083      	sub	sp, #12
    2310:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2312:	9b01      	ldr	r3, [sp, #4]
    2314:	2b00      	cmp	r3, #0
    2316:	d002      	beq.n	231e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2318:	9801      	ldr	r0, [sp, #4]
    231a:	f000 f98b 	bl	2634 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    231e:	bf00      	nop
    2320:	b003      	add	sp, #12
    2322:	f85d fb04 	ldr.w	pc, [sp], #4

00002326 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2326:	b086      	sub	sp, #24
    2328:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    232a:	9b01      	ldr	r3, [sp, #4]
    232c:	681a      	ldr	r2, [r3, #0]
    232e:	4911      	ldr	r1, [pc, #68]	; (2374 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2330:	4613      	mov	r3, r2
    2332:	00db      	lsls	r3, r3, #3
    2334:	4413      	add	r3, r2
    2336:	440b      	add	r3, r1
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    233c:	9b01      	ldr	r3, [sp, #4]
    233e:	685b      	ldr	r3, [r3, #4]
    2340:	4a0d      	ldr	r2, [pc, #52]	; (2378 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2342:	5cd3      	ldrb	r3, [r2, r3]
    2344:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2346:	4a0d      	ldr	r2, [pc, #52]	; (237c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2348:	9b05      	ldr	r3, [sp, #20]
    234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2352:	9b03      	ldr	r3, [sp, #12]
    2354:	f023 0307 	bic.w	r3, r3, #7
    2358:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    235a:	9a03      	ldr	r2, [sp, #12]
    235c:	9b04      	ldr	r3, [sp, #16]
    235e:	4313      	orrs	r3, r2
    2360:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2362:	4a06      	ldr	r2, [pc, #24]	; (237c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2364:	9b05      	ldr	r3, [sp, #20]
    2366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    236a:	9a03      	ldr	r2, [sp, #12]
    236c:	601a      	str	r2, [r3, #0]
}
    236e:	bf00      	nop
    2370:	b006      	add	sp, #24
    2372:	4770      	bx	lr
    2374:	0000c2e4 	.word	0x0000c2e4
    2378:	0000c6dc 	.word	0x0000c6dc
    237c:	0000c720 	.word	0x0000c720

00002380 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2380:	b086      	sub	sp, #24
    2382:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2384:	9b01      	ldr	r3, [sp, #4]
    2386:	681a      	ldr	r2, [r3, #0]
    2388:	4911      	ldr	r1, [pc, #68]	; (23d0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    238a:	4613      	mov	r3, r2
    238c:	00db      	lsls	r3, r3, #3
    238e:	4413      	add	r3, r2
    2390:	440b      	add	r3, r1
    2392:	781b      	ldrb	r3, [r3, #0]
    2394:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2396:	9b01      	ldr	r3, [sp, #4]
    2398:	685b      	ldr	r3, [r3, #4]
    239a:	4a0e      	ldr	r2, [pc, #56]	; (23d4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    239c:	5cd3      	ldrb	r3, [r2, r3]
    239e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    23a0:	4a0d      	ldr	r2, [pc, #52]	; (23d8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23a2:	9b05      	ldr	r3, [sp, #20]
    23a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23a8:	681b      	ldr	r3, [r3, #0]
    23aa:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    23ac:	9b03      	ldr	r3, [sp, #12]
    23ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    23b2:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    23b4:	9b04      	ldr	r3, [sp, #16]
    23b6:	021b      	lsls	r3, r3, #8
    23b8:	9a03      	ldr	r2, [sp, #12]
    23ba:	4313      	orrs	r3, r2
    23bc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23be:	4a06      	ldr	r2, [pc, #24]	; (23d8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23c0:	9b05      	ldr	r3, [sp, #20]
    23c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23c6:	9a03      	ldr	r2, [sp, #12]
    23c8:	601a      	str	r2, [r3, #0]
}
    23ca:	bf00      	nop
    23cc:	b006      	add	sp, #24
    23ce:	4770      	bx	lr
    23d0:	0000c2e4 	.word	0x0000c2e4
    23d4:	0000c6dc 	.word	0x0000c6dc
    23d8:	0000c720 	.word	0x0000c720

000023dc <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23dc:	b084      	sub	sp, #16
    23de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    23e0:	4b09      	ldr	r3, [pc, #36]	; (2408 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    23e2:	695b      	ldr	r3, [r3, #20]
    23e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    23e6:	9b03      	ldr	r3, [sp, #12]
    23e8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    23ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    23ee:	9b01      	ldr	r3, [sp, #4]
    23f0:	685b      	ldr	r3, [r3, #4]
    23f2:	3b01      	subs	r3, #1
    23f4:	041b      	lsls	r3, r3, #16
    23f6:	9a03      	ldr	r2, [sp, #12]
    23f8:	4313      	orrs	r3, r2
    23fa:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    23fc:	4a02      	ldr	r2, [pc, #8]	; (2408 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    23fe:	9b03      	ldr	r3, [sp, #12]
    2400:	6153      	str	r3, [r2, #20]
}
    2402:	bf00      	nop
    2404:	b004      	add	sp, #16
    2406:	4770      	bx	lr
    2408:	40064000 	.word	0x40064000

0000240c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    240c:	b084      	sub	sp, #16
    240e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2410:	4b09      	ldr	r3, [pc, #36]	; (2438 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2412:	695b      	ldr	r3, [r3, #20]
    2414:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2416:	9b03      	ldr	r3, [sp, #12]
    2418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    241c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    241e:	9b01      	ldr	r3, [sp, #4]
    2420:	685b      	ldr	r3, [r3, #4]
    2422:	3b01      	subs	r3, #1
    2424:	011b      	lsls	r3, r3, #4
    2426:	9a03      	ldr	r2, [sp, #12]
    2428:	4313      	orrs	r3, r2
    242a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    242c:	4a02      	ldr	r2, [pc, #8]	; (2438 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    242e:	9b03      	ldr	r3, [sp, #12]
    2430:	6153      	str	r3, [r2, #20]
}
    2432:	bf00      	nop
    2434:	b004      	add	sp, #16
    2436:	4770      	bx	lr
    2438:	40064000 	.word	0x40064000

0000243c <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    243c:	b084      	sub	sp, #16
    243e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2440:	4b09      	ldr	r3, [pc, #36]	; (2468 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2442:	695b      	ldr	r3, [r3, #20]
    2444:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2446:	9b03      	ldr	r3, [sp, #12]
    2448:	f023 030f 	bic.w	r3, r3, #15
    244c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    244e:	9b01      	ldr	r3, [sp, #4]
    2450:	685b      	ldr	r3, [r3, #4]
    2452:	3b01      	subs	r3, #1
    2454:	9a03      	ldr	r2, [sp, #12]
    2456:	4313      	orrs	r3, r2
    2458:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    245a:	4a03      	ldr	r2, [pc, #12]	; (2468 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    245c:	9b03      	ldr	r3, [sp, #12]
    245e:	6153      	str	r3, [r2, #20]
}
    2460:	bf00      	nop
    2462:	b004      	add	sp, #16
    2464:	4770      	bx	lr
    2466:	bf00      	nop
    2468:	40064000 	.word	0x40064000

0000246c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    246c:	b084      	sub	sp, #16
    246e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2470:	4b09      	ldr	r3, [pc, #36]	; (2498 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2472:	699b      	ldr	r3, [r3, #24]
    2474:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2476:	9b03      	ldr	r3, [sp, #12]
    2478:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    247c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    247e:	9b01      	ldr	r3, [sp, #4]
    2480:	685b      	ldr	r3, [r3, #4]
    2482:	3b01      	subs	r3, #1
    2484:	041b      	lsls	r3, r3, #16
    2486:	9a03      	ldr	r2, [sp, #12]
    2488:	4313      	orrs	r3, r2
    248a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    248c:	4a02      	ldr	r2, [pc, #8]	; (2498 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    248e:	9b03      	ldr	r3, [sp, #12]
    2490:	6193      	str	r3, [r2, #24]
}
    2492:	bf00      	nop
    2494:	b004      	add	sp, #16
    2496:	4770      	bx	lr
    2498:	40064000 	.word	0x40064000

0000249c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    249c:	b084      	sub	sp, #16
    249e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24a0:	4b09      	ldr	r3, [pc, #36]	; (24c8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24a2:	699b      	ldr	r3, [r3, #24]
    24a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    24a6:	9b03      	ldr	r3, [sp, #12]
    24a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    24ac:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    24ae:	9b01      	ldr	r3, [sp, #4]
    24b0:	685b      	ldr	r3, [r3, #4]
    24b2:	3b01      	subs	r3, #1
    24b4:	011b      	lsls	r3, r3, #4
    24b6:	9a03      	ldr	r2, [sp, #12]
    24b8:	4313      	orrs	r3, r2
    24ba:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24bc:	4a02      	ldr	r2, [pc, #8]	; (24c8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24be:	9b03      	ldr	r3, [sp, #12]
    24c0:	6193      	str	r3, [r2, #24]
}
    24c2:	bf00      	nop
    24c4:	b004      	add	sp, #16
    24c6:	4770      	bx	lr
    24c8:	40064000 	.word	0x40064000

000024cc <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24cc:	b084      	sub	sp, #16
    24ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24d0:	4b09      	ldr	r3, [pc, #36]	; (24f8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24d2:	699b      	ldr	r3, [r3, #24]
    24d4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    24d6:	9b03      	ldr	r3, [sp, #12]
    24d8:	f023 030f 	bic.w	r3, r3, #15
    24dc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    24de:	9b01      	ldr	r3, [sp, #4]
    24e0:	685b      	ldr	r3, [r3, #4]
    24e2:	3b01      	subs	r3, #1
    24e4:	9a03      	ldr	r2, [sp, #12]
    24e6:	4313      	orrs	r3, r2
    24e8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24ea:	4a03      	ldr	r2, [pc, #12]	; (24f8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24ec:	9b03      	ldr	r3, [sp, #12]
    24ee:	6193      	str	r3, [r2, #24]
}
    24f0:	bf00      	nop
    24f2:	b004      	add	sp, #16
    24f4:	4770      	bx	lr
    24f6:	bf00      	nop
    24f8:	40064000 	.word	0x40064000

000024fc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24fc:	b084      	sub	sp, #16
    24fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2500:	4b09      	ldr	r3, [pc, #36]	; (2528 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2502:	69db      	ldr	r3, [r3, #28]
    2504:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2506:	9b03      	ldr	r3, [sp, #12]
    2508:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    250c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    250e:	9b01      	ldr	r3, [sp, #4]
    2510:	685b      	ldr	r3, [r3, #4]
    2512:	3b01      	subs	r3, #1
    2514:	041b      	lsls	r3, r3, #16
    2516:	9a03      	ldr	r2, [sp, #12]
    2518:	4313      	orrs	r3, r2
    251a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    251c:	4a02      	ldr	r2, [pc, #8]	; (2528 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    251e:	9b03      	ldr	r3, [sp, #12]
    2520:	61d3      	str	r3, [r2, #28]
}
    2522:	bf00      	nop
    2524:	b004      	add	sp, #16
    2526:	4770      	bx	lr
    2528:	40064000 	.word	0x40064000

0000252c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    252c:	b084      	sub	sp, #16
    252e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2530:	4b09      	ldr	r3, [pc, #36]	; (2558 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2532:	69db      	ldr	r3, [r3, #28]
    2534:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2536:	9b03      	ldr	r3, [sp, #12]
    2538:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    253c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    253e:	9b01      	ldr	r3, [sp, #4]
    2540:	685b      	ldr	r3, [r3, #4]
    2542:	3b01      	subs	r3, #1
    2544:	011b      	lsls	r3, r3, #4
    2546:	9a03      	ldr	r2, [sp, #12]
    2548:	4313      	orrs	r3, r2
    254a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    254c:	4a02      	ldr	r2, [pc, #8]	; (2558 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    254e:	9b03      	ldr	r3, [sp, #12]
    2550:	61d3      	str	r3, [r2, #28]
}
    2552:	bf00      	nop
    2554:	b004      	add	sp, #16
    2556:	4770      	bx	lr
    2558:	40064000 	.word	0x40064000

0000255c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    255c:	b084      	sub	sp, #16
    255e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2560:	4b09      	ldr	r3, [pc, #36]	; (2588 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2562:	69db      	ldr	r3, [r3, #28]
    2564:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2566:	9b03      	ldr	r3, [sp, #12]
    2568:	f023 030f 	bic.w	r3, r3, #15
    256c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    256e:	9b01      	ldr	r3, [sp, #4]
    2570:	685b      	ldr	r3, [r3, #4]
    2572:	3b01      	subs	r3, #1
    2574:	9a03      	ldr	r2, [sp, #12]
    2576:	4313      	orrs	r3, r2
    2578:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    257a:	4a03      	ldr	r2, [pc, #12]	; (2588 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    257c:	9b03      	ldr	r3, [sp, #12]
    257e:	61d3      	str	r3, [r2, #28]
}
    2580:	bf00      	nop
    2582:	b004      	add	sp, #16
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	40064000 	.word	0x40064000

0000258c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    258c:	b084      	sub	sp, #16
    258e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2590:	4b0a      	ldr	r3, [pc, #40]	; (25bc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2592:	685b      	ldr	r3, [r3, #4]
    2594:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2596:	9b03      	ldr	r3, [sp, #12]
    2598:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    259c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    259e:	9b01      	ldr	r3, [sp, #4]
    25a0:	685b      	ldr	r3, [r3, #4]
    25a2:	3b01      	subs	r3, #1
    25a4:	021b      	lsls	r3, r3, #8
    25a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    25aa:	9a03      	ldr	r2, [sp, #12]
    25ac:	4313      	orrs	r3, r2
    25ae:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    25b0:	4a02      	ldr	r2, [pc, #8]	; (25bc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25b2:	9b03      	ldr	r3, [sp, #12]
    25b4:	6053      	str	r3, [r2, #4]
}
    25b6:	bf00      	nop
    25b8:	b004      	add	sp, #16
    25ba:	4770      	bx	lr
    25bc:	40048000 	.word	0x40048000

000025c0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25c0:	b084      	sub	sp, #16
    25c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    25c4:	4919      	ldr	r1, [pc, #100]	; (262c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    25c6:	9b01      	ldr	r3, [sp, #4]
    25c8:	681a      	ldr	r2, [r3, #0]
    25ca:	4819      	ldr	r0, [pc, #100]	; (2630 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    25cc:	4613      	mov	r3, r2
    25ce:	00db      	lsls	r3, r3, #3
    25d0:	4413      	add	r3, r2
    25d2:	4403      	add	r3, r0
    25d4:	3305      	adds	r3, #5
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    25dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    25de:	9b03      	ldr	r3, [sp, #12]
    25e0:	f023 030f 	bic.w	r3, r3, #15
    25e4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    25e6:	9b01      	ldr	r3, [sp, #4]
    25e8:	685b      	ldr	r3, [r3, #4]
    25ea:	3b01      	subs	r3, #1
    25ec:	f003 0307 	and.w	r3, r3, #7
    25f0:	9a03      	ldr	r2, [sp, #12]
    25f2:	4313      	orrs	r3, r2
    25f4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    25f6:	9b01      	ldr	r3, [sp, #4]
    25f8:	7a1b      	ldrb	r3, [r3, #8]
    25fa:	3b01      	subs	r3, #1
    25fc:	00db      	lsls	r3, r3, #3
    25fe:	f003 0308 	and.w	r3, r3, #8
    2602:	9a03      	ldr	r2, [sp, #12]
    2604:	4313      	orrs	r3, r2
    2606:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2608:	4908      	ldr	r1, [pc, #32]	; (262c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	681a      	ldr	r2, [r3, #0]
    260e:	4808      	ldr	r0, [pc, #32]	; (2630 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2610:	4613      	mov	r3, r2
    2612:	00db      	lsls	r3, r3, #3
    2614:	4413      	add	r3, r2
    2616:	4403      	add	r3, r0
    2618:	3305      	adds	r3, #5
    261a:	781b      	ldrb	r3, [r3, #0]
    261c:	461a      	mov	r2, r3
    261e:	9b03      	ldr	r3, [sp, #12]
    2620:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2624:	bf00      	nop
    2626:	b004      	add	sp, #16
    2628:	4770      	bx	lr
    262a:	bf00      	nop
    262c:	40065000 	.word	0x40065000
    2630:	0000c2e4 	.word	0x0000c2e4

00002634 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2634:	b084      	sub	sp, #16
    2636:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2638:	4b10      	ldr	r3, [pc, #64]	; (267c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    263a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    263c:	4a0f      	ldr	r2, [pc, #60]	; (267c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2642:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2644:	4b0d      	ldr	r3, [pc, #52]	; (267c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2648:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    264a:	9b03      	ldr	r3, [sp, #12]
    264c:	f023 030f 	bic.w	r3, r3, #15
    2650:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2652:	9b01      	ldr	r3, [sp, #4]
    2654:	685b      	ldr	r3, [r3, #4]
    2656:	3b01      	subs	r3, #1
    2658:	005b      	lsls	r3, r3, #1
    265a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    265e:	9b01      	ldr	r3, [sp, #4]
    2660:	7a1b      	ldrb	r3, [r3, #8]
    2662:	3b01      	subs	r3, #1
    2664:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2668:	4313      	orrs	r3, r2
    266a:	9a03      	ldr	r2, [sp, #12]
    266c:	4313      	orrs	r3, r2
    266e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2670:	4a02      	ldr	r2, [pc, #8]	; (267c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2672:	9b03      	ldr	r3, [sp, #12]
    2674:	6693      	str	r3, [r2, #104]	; 0x68
}
    2676:	bf00      	nop
    2678:	b004      	add	sp, #16
    267a:	4770      	bx	lr
    267c:	40048000 	.word	0x40048000

00002680 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2680:	b082      	sub	sp, #8
    2682:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2684:	bf00      	nop
    2686:	b002      	add	sp, #8
    2688:	4770      	bx	lr
	...

0000268c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    268c:	b082      	sub	sp, #8
    268e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2690:	bf00      	nop
    2692:	b002      	add	sp, #8
    2694:	4770      	bx	lr

00002696 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2696:	b082      	sub	sp, #8
    2698:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    269a:	bf00      	nop
    269c:	b002      	add	sp, #8
    269e:	4770      	bx	lr

000026a0 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26a0:	b500      	push	{lr}
    26a2:	b083      	sub	sp, #12
    26a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26a6:	9b01      	ldr	r3, [sp, #4]
    26a8:	2b00      	cmp	r3, #0
    26aa:	d002      	beq.n	26b2 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    26ac:	9801      	ldr	r0, [sp, #4]
    26ae:	f000 f86a 	bl	2786 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26b2:	bf00      	nop
    26b4:	b003      	add	sp, #12
    26b6:	f85d fb04 	ldr.w	pc, [sp], #4

000026ba <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26ba:	b500      	push	{lr}
    26bc:	b083      	sub	sp, #12
    26be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26c0:	9b01      	ldr	r3, [sp, #4]
    26c2:	2b00      	cmp	r3, #0
    26c4:	d002      	beq.n	26cc <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    26c6:	9801      	ldr	r0, [sp, #4]
    26c8:	f000 f884 	bl	27d4 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    26cc:	bf00      	nop
    26ce:	b003      	add	sp, #12
    26d0:	f85d fb04 	ldr.w	pc, [sp], #4

000026d4 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26d4:	b500      	push	{lr}
    26d6:	b089      	sub	sp, #36	; 0x24
    26d8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    26da:	2300      	movs	r3, #0
    26dc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    26e0:	9b01      	ldr	r3, [sp, #4]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d031      	beq.n	274a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    26e6:	4b1b      	ldr	r3, [pc, #108]	; (2754 <Clock_Ip_CompleteSOSC+0x80>)
    26e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    26ec:	f003 0301 	and.w	r3, r3, #1
    26f0:	2b00      	cmp	r3, #0
    26f2:	d02a      	beq.n	274a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    26f4:	aa03      	add	r2, sp, #12
    26f6:	a904      	add	r1, sp, #16
    26f8:	a805      	add	r0, sp, #20
    26fa:	f24c 3350 	movw	r3, #50000	; 0xc350
    26fe:	f7ff fd1d 	bl	213c <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2702:	4b14      	ldr	r3, [pc, #80]	; (2754 <Clock_Ip_CompleteSOSC+0x80>)
    2704:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2708:	0e1b      	lsrs	r3, r3, #24
    270a:	f003 0301 	and.w	r3, r3, #1
    270e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2710:	9a03      	ldr	r2, [sp, #12]
    2712:	a904      	add	r1, sp, #16
    2714:	ab05      	add	r3, sp, #20
    2716:	4618      	mov	r0, r3
    2718:	f7ff fd2a 	bl	2170 <Clock_Ip_TimeoutExpired>
    271c:	4603      	mov	r3, r0
    271e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2722:	9b06      	ldr	r3, [sp, #24]
    2724:	2b00      	cmp	r3, #0
    2726:	d106      	bne.n	2736 <Clock_Ip_CompleteSOSC+0x62>
    2728:	f89d 301f 	ldrb.w	r3, [sp, #31]
    272c:	f083 0301 	eor.w	r3, r3, #1
    2730:	b2db      	uxtb	r3, r3
    2732:	2b00      	cmp	r3, #0
    2734:	d1e5      	bne.n	2702 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2736:	f89d 301f 	ldrb.w	r3, [sp, #31]
    273a:	2b00      	cmp	r3, #0
    273c:	d005      	beq.n	274a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    273e:	9b01      	ldr	r3, [sp, #4]
    2740:	681b      	ldr	r3, [r3, #0]
    2742:	4619      	mov	r1, r3
    2744:	2001      	movs	r0, #1
    2746:	f7ff fce9 	bl	211c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    274a:	bf00      	nop
    274c:	b009      	add	sp, #36	; 0x24
    274e:	f85d fb04 	ldr.w	pc, [sp], #4
    2752:	bf00      	nop
    2754:	40064000 	.word	0x40064000

00002758 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2758:	b500      	push	{lr}
    275a:	b083      	sub	sp, #12
    275c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    275e:	9801      	ldr	r0, [sp, #4]
    2760:	f000 f8c0 	bl	28e4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2764:	bf00      	nop
    2766:	b003      	add	sp, #12
    2768:	f85d fb04 	ldr.w	pc, [sp], #4

0000276c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    276c:	b500      	push	{lr}
    276e:	b083      	sub	sp, #12
    2770:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2772:	9b01      	ldr	r3, [sp, #4]
    2774:	2b00      	cmp	r3, #0
    2776:	d002      	beq.n	277e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2778:	9801      	ldr	r0, [sp, #4]
    277a:	f000 f8c3 	bl	2904 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    277e:	bf00      	nop
    2780:	b003      	add	sp, #12
    2782:	f85d fb04 	ldr.w	pc, [sp], #4

00002786 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2786:	b082      	sub	sp, #8
    2788:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    278a:	4b11      	ldr	r3, [pc, #68]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    278c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2790:	4a0f      	ldr	r2, [pc, #60]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2792:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2796:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    279a:	4b0d      	ldr	r3, [pc, #52]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    279c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27a0:	4a0b      	ldr	r2, [pc, #44]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    27a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    27aa:	4b09      	ldr	r3, [pc, #36]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27b0:	4a07      	ldr	r2, [pc, #28]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    27b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    27ba:	4b05      	ldr	r3, [pc, #20]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27c0:	4a03      	ldr	r2, [pc, #12]	; (27d0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27c2:	f023 0301 	bic.w	r3, r3, #1
    27c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    27ca:	bf00      	nop
    27cc:	b002      	add	sp, #8
    27ce:	4770      	bx	lr
    27d0:	40064000 	.word	0x40064000

000027d4 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27d4:	b082      	sub	sp, #8
    27d6:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    27d8:	9b01      	ldr	r3, [sp, #4]
    27da:	891b      	ldrh	r3, [r3, #8]
    27dc:	2b01      	cmp	r3, #1
    27de:	d174      	bne.n	28ca <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    27e0:	9b01      	ldr	r3, [sp, #4]
    27e2:	7bdb      	ldrb	r3, [r3, #15]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d002      	beq.n	27ee <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    27e8:	2b01      	cmp	r3, #1
    27ea:	d009      	beq.n	2800 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    27ec:	e011      	b.n	2812 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    27ee:	4b39      	ldr	r3, [pc, #228]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    27f4:	4a37      	ldr	r2, [pc, #220]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27f6:	f023 0308 	bic.w	r3, r3, #8
    27fa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    27fe:	e008      	b.n	2812 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2800:	4b34      	ldr	r3, [pc, #208]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2802:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2806:	4a33      	ldr	r2, [pc, #204]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2808:	f043 0308 	orr.w	r3, r3, #8
    280c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2810:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2812:	4b30      	ldr	r3, [pc, #192]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2814:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2818:	4a2e      	ldr	r2, [pc, #184]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    281a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    281e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2822:	9b01      	ldr	r3, [sp, #4]
    2824:	685b      	ldr	r3, [r3, #4]
    2826:	4a2c      	ldr	r2, [pc, #176]	; (28d8 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2828:	4293      	cmp	r3, r2
    282a:	d90d      	bls.n	2848 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    282c:	9b01      	ldr	r3, [sp, #4]
    282e:	685b      	ldr	r3, [r3, #4]
    2830:	4a2a      	ldr	r2, [pc, #168]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2832:	4293      	cmp	r3, r2
    2834:	d208      	bcs.n	2848 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2836:	4b27      	ldr	r3, [pc, #156]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2838:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    283c:	4a25      	ldr	r2, [pc, #148]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    283e:	f043 0320 	orr.w	r3, r3, #32
    2842:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2846:	e007      	b.n	2858 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2848:	4b22      	ldr	r3, [pc, #136]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    284a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    284e:	4a21      	ldr	r2, [pc, #132]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2850:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2854:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2858:	9b01      	ldr	r3, [sp, #4]
    285a:	7b1b      	ldrb	r3, [r3, #12]
    285c:	2b00      	cmp	r3, #0
    285e:	d108      	bne.n	2872 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2860:	4b1c      	ldr	r3, [pc, #112]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2862:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2866:	4a1b      	ldr	r2, [pc, #108]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2868:	f043 0304 	orr.w	r3, r3, #4
    286c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2870:	e007      	b.n	2882 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2872:	4b18      	ldr	r3, [pc, #96]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2874:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2878:	4a16      	ldr	r2, [pc, #88]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    287a:	f023 0304 	bic.w	r3, r3, #4
    287e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2882:	9b01      	ldr	r3, [sp, #4]
    2884:	7c1b      	ldrb	r3, [r3, #16]
    2886:	2b02      	cmp	r3, #2
    2888:	d011      	beq.n	28ae <Clock_Ip_SetSOSC_TrustedCall+0xda>
    288a:	2b02      	cmp	r3, #2
    288c:	dc14      	bgt.n	28b8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    288e:	2b00      	cmp	r3, #0
    2890:	d002      	beq.n	2898 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    2892:	2b01      	cmp	r3, #1
    2894:	d005      	beq.n	28a2 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    2896:	e00f      	b.n	28b8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2898:	4b0e      	ldr	r3, [pc, #56]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    289a:	2201      	movs	r2, #1
    289c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28a0:	e014      	b.n	28cc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28a2:	4b0c      	ldr	r3, [pc, #48]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28a4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    28a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28ac:	e00e      	b.n	28cc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28ae:	4b09      	ldr	r3, [pc, #36]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28b0:	4a0b      	ldr	r2, [pc, #44]	; (28e0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    28b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    28b6:	e009      	b.n	28cc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    28b8:	4b06      	ldr	r3, [pc, #24]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28be:	4a05      	ldr	r2, [pc, #20]	; (28d4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c0:	f043 0301 	orr.w	r3, r3, #1
    28c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    28c8:	e000      	b.n	28cc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    28ca:	bf00      	nop
}
    28cc:	bf00      	nop
    28ce:	b002      	add	sp, #8
    28d0:	4770      	bx	lr
    28d2:	bf00      	nop
    28d4:	40064000 	.word	0x40064000
    28d8:	003d08ff 	.word	0x003d08ff
    28dc:	007a1200 	.word	0x007a1200
    28e0:	00030001 	.word	0x00030001

000028e4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    28e4:	b082      	sub	sp, #8
    28e6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    28e8:	4b05      	ldr	r3, [pc, #20]	; (2900 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28ee:	4a04      	ldr	r2, [pc, #16]	; (2900 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28f0:	f023 0301 	bic.w	r3, r3, #1
    28f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    28f8:	bf00      	nop
    28fa:	b002      	add	sp, #8
    28fc:	4770      	bx	lr
    28fe:	bf00      	nop
    2900:	40064000 	.word	0x40064000

00002904 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2904:	b082      	sub	sp, #8
    2906:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2908:	9b01      	ldr	r3, [sp, #4]
    290a:	891b      	ldrh	r3, [r3, #8]
    290c:	2b01      	cmp	r3, #1
    290e:	d107      	bne.n	2920 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2910:	4b05      	ldr	r3, [pc, #20]	; (2928 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2912:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2916:	4a04      	ldr	r2, [pc, #16]	; (2928 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2918:	f043 0301 	orr.w	r3, r3, #1
    291c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2920:	bf00      	nop
    2922:	b002      	add	sp, #8
    2924:	4770      	bx	lr
    2926:	bf00      	nop
    2928:	40064000 	.word	0x40064000

0000292c <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    292c:	b082      	sub	sp, #8
    292e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2930:	bf00      	nop
    2932:	b002      	add	sp, #8
    2934:	4770      	bx	lr

00002936 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2936:	b082      	sub	sp, #8
    2938:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    293a:	2300      	movs	r3, #0
}
    293c:	4618      	mov	r0, r3
    293e:	b002      	add	sp, #8
    2940:	4770      	bx	lr

00002942 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2942:	b082      	sub	sp, #8
    2944:	9001      	str	r0, [sp, #4]
    2946:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2948:	bf00      	nop
    294a:	b002      	add	sp, #8
    294c:	4770      	bx	lr
	...

00002950 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2950:	b082      	sub	sp, #8
    2952:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2954:	bf00      	nop
    2956:	b002      	add	sp, #8
    2958:	4770      	bx	lr

0000295a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    295a:	b082      	sub	sp, #8
    295c:	9001      	str	r0, [sp, #4]
    295e:	460b      	mov	r3, r1
    2960:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2964:	bf00      	nop
    2966:	b002      	add	sp, #8
    2968:	4770      	bx	lr

0000296a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    296a:	b500      	push	{lr}
    296c:	b083      	sub	sp, #12
    296e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2970:	9b01      	ldr	r3, [sp, #4]
    2972:	2b00      	cmp	r3, #0
    2974:	d002      	beq.n	297c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2976:	9801      	ldr	r0, [sp, #4]
    2978:	f000 f8e7 	bl	2b4a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    297c:	bf00      	nop
    297e:	b003      	add	sp, #12
    2980:	f85d fb04 	ldr.w	pc, [sp], #4

00002984 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2984:	b500      	push	{lr}
    2986:	b085      	sub	sp, #20
    2988:	9001      	str	r0, [sp, #4]
    298a:	460b      	mov	r3, r1
    298c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2990:	9b01      	ldr	r3, [sp, #4]
    2992:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2994:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2998:	2b00      	cmp	r3, #0
    299a:	d003      	beq.n	29a4 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    299c:	2300      	movs	r3, #0
    299e:	f8ad 300c 	strh.w	r3, [sp, #12]
    29a2:	e002      	b.n	29aa <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29a4:	2301      	movs	r3, #1
    29a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    29aa:	ab02      	add	r3, sp, #8
    29ac:	4618      	mov	r0, r3
    29ae:	f7ff ffdc 	bl	296a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    29b2:	bf00      	nop
    29b4:	b005      	add	sp, #20
    29b6:	f85d fb04 	ldr.w	pc, [sp], #4

000029ba <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    29ba:	b500      	push	{lr}
    29bc:	b083      	sub	sp, #12
    29be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29c0:	9b01      	ldr	r3, [sp, #4]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d002      	beq.n	29cc <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    29c6:	9801      	ldr	r0, [sp, #4]
    29c8:	f000 f8d6 	bl	2b78 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29cc:	bf00      	nop
    29ce:	b003      	add	sp, #12
    29d0:	f85d fb04 	ldr.w	pc, [sp], #4

000029d4 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29d4:	b500      	push	{lr}
    29d6:	b085      	sub	sp, #20
    29d8:	9001      	str	r0, [sp, #4]
    29da:	460b      	mov	r3, r1
    29dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29e0:	9b01      	ldr	r3, [sp, #4]
    29e2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29e8:	2b00      	cmp	r3, #0
    29ea:	d003      	beq.n	29f4 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    29ec:	2300      	movs	r3, #0
    29ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    29f2:	e002      	b.n	29fa <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29f4:	2301      	movs	r3, #1
    29f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    29fa:	ab02      	add	r3, sp, #8
    29fc:	4618      	mov	r0, r3
    29fe:	f7ff ffdc 	bl	29ba <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2a02:	bf00      	nop
    2a04:	b005      	add	sp, #20
    2a06:	f85d fb04 	ldr.w	pc, [sp], #4

00002a0a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2a0a:	b500      	push	{lr}
    2a0c:	b083      	sub	sp, #12
    2a0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a10:	9b01      	ldr	r3, [sp, #4]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d002      	beq.n	2a1c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a16:	9801      	ldr	r0, [sp, #4]
    2a18:	f000 f8c6 	bl	2ba8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a1c:	bf00      	nop
    2a1e:	b003      	add	sp, #12
    2a20:	f85d fb04 	ldr.w	pc, [sp], #4

00002a24 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a24:	b500      	push	{lr}
    2a26:	b085      	sub	sp, #20
    2a28:	9001      	str	r0, [sp, #4]
    2a2a:	460b      	mov	r3, r1
    2a2c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a30:	9b01      	ldr	r3, [sp, #4]
    2a32:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d003      	beq.n	2a44 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2a3c:	2300      	movs	r3, #0
    2a3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a42:	e002      	b.n	2a4a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a44:	2301      	movs	r3, #1
    2a46:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2a4a:	ab02      	add	r3, sp, #8
    2a4c:	4618      	mov	r0, r3
    2a4e:	f7ff ffdc 	bl	2a0a <Clock_Ip_ClockSetSimClkoutEnable>
}
    2a52:	bf00      	nop
    2a54:	b005      	add	sp, #20
    2a56:	f85d fb04 	ldr.w	pc, [sp], #4

00002a5a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2a5a:	b500      	push	{lr}
    2a5c:	b083      	sub	sp, #12
    2a5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a60:	9b01      	ldr	r3, [sp, #4]
    2a62:	2b00      	cmp	r3, #0
    2a64:	d002      	beq.n	2a6c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2a66:	9801      	ldr	r0, [sp, #4]
    2a68:	f000 f8b6 	bl	2bd8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a6c:	bf00      	nop
    2a6e:	b003      	add	sp, #12
    2a70:	f85d fb04 	ldr.w	pc, [sp], #4

00002a74 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a74:	b500      	push	{lr}
    2a76:	b085      	sub	sp, #20
    2a78:	9001      	str	r0, [sp, #4]
    2a7a:	460b      	mov	r3, r1
    2a7c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a80:	9b01      	ldr	r3, [sp, #4]
    2a82:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a84:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d003      	beq.n	2a94 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2a8c:	2300      	movs	r3, #0
    2a8e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a92:	e002      	b.n	2a9a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a94:	2301      	movs	r3, #1
    2a96:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2a9a:	ab02      	add	r3, sp, #8
    2a9c:	4618      	mov	r0, r3
    2a9e:	f7ff ffdc 	bl	2a5a <Clock_Ip_ClockSetPccCgcEnable>
}
    2aa2:	bf00      	nop
    2aa4:	b005      	add	sp, #20
    2aa6:	f85d fb04 	ldr.w	pc, [sp], #4

00002aaa <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2aaa:	b500      	push	{lr}
    2aac:	b083      	sub	sp, #12
    2aae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ab0:	9b01      	ldr	r3, [sp, #4]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d002      	beq.n	2abc <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2ab6:	9801      	ldr	r0, [sp, #4]
    2ab8:	f000 f8bc 	bl	2c34 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2abc:	bf00      	nop
    2abe:	b003      	add	sp, #12
    2ac0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ac4 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ac4:	b500      	push	{lr}
    2ac6:	b085      	sub	sp, #20
    2ac8:	9001      	str	r0, [sp, #4]
    2aca:	460b      	mov	r3, r1
    2acc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2ad0:	9b01      	ldr	r3, [sp, #4]
    2ad2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2ad4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d003      	beq.n	2ae4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2adc:	2300      	movs	r3, #0
    2ade:	f8ad 300c 	strh.w	r3, [sp, #12]
    2ae2:	e002      	b.n	2aea <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2ae4:	2301      	movs	r3, #1
    2ae6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2aea:	ab02      	add	r3, sp, #8
    2aec:	4618      	mov	r0, r3
    2aee:	f7ff ffdc 	bl	2aaa <Clock_Ip_ClockSetSimGate>
}
    2af2:	bf00      	nop
    2af4:	b005      	add	sp, #20
    2af6:	f85d fb04 	ldr.w	pc, [sp], #4

00002afa <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2afa:	b500      	push	{lr}
    2afc:	b083      	sub	sp, #12
    2afe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b00:	9b01      	ldr	r3, [sp, #4]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d002      	beq.n	2b0c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2b06:	9801      	ldr	r0, [sp, #4]
    2b08:	f000 f8c0 	bl	2c8c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b0c:	bf00      	nop
    2b0e:	b003      	add	sp, #12
    2b10:	f85d fb04 	ldr.w	pc, [sp], #4

00002b14 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b14:	b500      	push	{lr}
    2b16:	b085      	sub	sp, #20
    2b18:	9001      	str	r0, [sp, #4]
    2b1a:	460b      	mov	r3, r1
    2b1c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b20:	9b01      	ldr	r3, [sp, #4]
    2b22:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d003      	beq.n	2b34 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2b2c:	2300      	movs	r3, #0
    2b2e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b32:	e002      	b.n	2b3a <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b34:	2301      	movs	r3, #1
    2b36:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2b3a:	ab02      	add	r3, sp, #8
    2b3c:	4618      	mov	r0, r3
    2b3e:	f7ff ffdc 	bl	2afa <Clock_Ip_ClockSetSimTraceEnable>
}
    2b42:	bf00      	nop
    2b44:	b005      	add	sp, #20
    2b46:	f85d fb04 	ldr.w	pc, [sp], #4

00002b4a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b4a:	b084      	sub	sp, #16
    2b4c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b4e:	4b09      	ldr	r3, [pc, #36]	; (2b74 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b50:	691b      	ldr	r3, [r3, #16]
    2b52:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2b54:	9b03      	ldr	r3, [sp, #12]
    2b56:	f023 0301 	bic.w	r3, r3, #1
    2b5a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2b5c:	9b01      	ldr	r3, [sp, #4]
    2b5e:	889b      	ldrh	r3, [r3, #4]
    2b60:	461a      	mov	r2, r3
    2b62:	9b03      	ldr	r3, [sp, #12]
    2b64:	4313      	orrs	r3, r2
    2b66:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b68:	4a02      	ldr	r2, [pc, #8]	; (2b74 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b6a:	9b03      	ldr	r3, [sp, #12]
    2b6c:	6113      	str	r3, [r2, #16]
}
    2b6e:	bf00      	nop
    2b70:	b004      	add	sp, #16
    2b72:	4770      	bx	lr
    2b74:	40048000 	.word	0x40048000

00002b78 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b78:	b084      	sub	sp, #16
    2b7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b7c:	4b09      	ldr	r3, [pc, #36]	; (2ba4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2b7e:	691b      	ldr	r3, [r3, #16]
    2b80:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2b82:	9b03      	ldr	r3, [sp, #12]
    2b84:	f023 0302 	bic.w	r3, r3, #2
    2b88:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2b8a:	9b01      	ldr	r3, [sp, #4]
    2b8c:	889b      	ldrh	r3, [r3, #4]
    2b8e:	005b      	lsls	r3, r3, #1
    2b90:	9a03      	ldr	r2, [sp, #12]
    2b92:	4313      	orrs	r3, r2
    2b94:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b96:	4a03      	ldr	r2, [pc, #12]	; (2ba4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2b98:	9b03      	ldr	r3, [sp, #12]
    2b9a:	6113      	str	r3, [r2, #16]
}
    2b9c:	bf00      	nop
    2b9e:	b004      	add	sp, #16
    2ba0:	4770      	bx	lr
    2ba2:	bf00      	nop
    2ba4:	40048000 	.word	0x40048000

00002ba8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ba8:	b084      	sub	sp, #16
    2baa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2bac:	4b09      	ldr	r3, [pc, #36]	; (2bd4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bae:	685b      	ldr	r3, [r3, #4]
    2bb0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2bb2:	9b03      	ldr	r3, [sp, #12]
    2bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bb8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2bba:	9b01      	ldr	r3, [sp, #4]
    2bbc:	889b      	ldrh	r3, [r3, #4]
    2bbe:	02db      	lsls	r3, r3, #11
    2bc0:	9a03      	ldr	r2, [sp, #12]
    2bc2:	4313      	orrs	r3, r2
    2bc4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2bc6:	4a03      	ldr	r2, [pc, #12]	; (2bd4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bc8:	9b03      	ldr	r3, [sp, #12]
    2bca:	6053      	str	r3, [r2, #4]
}
    2bcc:	bf00      	nop
    2bce:	b004      	add	sp, #16
    2bd0:	4770      	bx	lr
    2bd2:	bf00      	nop
    2bd4:	40048000 	.word	0x40048000

00002bd8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bd8:	b084      	sub	sp, #16
    2bda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2bdc:	4913      	ldr	r1, [pc, #76]	; (2c2c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2bde:	9b01      	ldr	r3, [sp, #4]
    2be0:	681a      	ldr	r2, [r3, #0]
    2be2:	4813      	ldr	r0, [pc, #76]	; (2c30 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2be4:	4613      	mov	r3, r2
    2be6:	00db      	lsls	r3, r3, #3
    2be8:	4413      	add	r3, r2
    2bea:	4403      	add	r3, r0
    2bec:	3306      	adds	r3, #6
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2bf4:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2bf6:	9b03      	ldr	r3, [sp, #12]
    2bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2bfc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2bfe:	9b01      	ldr	r3, [sp, #4]
    2c00:	889b      	ldrh	r3, [r3, #4]
    2c02:	079b      	lsls	r3, r3, #30
    2c04:	9a03      	ldr	r2, [sp, #12]
    2c06:	4313      	orrs	r3, r2
    2c08:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2c0a:	4908      	ldr	r1, [pc, #32]	; (2c2c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c0c:	9b01      	ldr	r3, [sp, #4]
    2c0e:	681a      	ldr	r2, [r3, #0]
    2c10:	4807      	ldr	r0, [pc, #28]	; (2c30 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c12:	4613      	mov	r3, r2
    2c14:	00db      	lsls	r3, r3, #3
    2c16:	4413      	add	r3, r2
    2c18:	4403      	add	r3, r0
    2c1a:	3306      	adds	r3, #6
    2c1c:	781b      	ldrb	r3, [r3, #0]
    2c1e:	461a      	mov	r2, r3
    2c20:	9b03      	ldr	r3, [sp, #12]
    2c22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c26:	bf00      	nop
    2c28:	b004      	add	sp, #16
    2c2a:	4770      	bx	lr
    2c2c:	40065000 	.word	0x40065000
    2c30:	0000c2e4 	.word	0x0000c2e4

00002c34 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c34:	b086      	sub	sp, #24
    2c36:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2c38:	9b01      	ldr	r3, [sp, #4]
    2c3a:	889b      	ldrh	r3, [r3, #4]
    2c3c:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2c3e:	9b01      	ldr	r3, [sp, #4]
    2c40:	681a      	ldr	r2, [r3, #0]
    2c42:	4910      	ldr	r1, [pc, #64]	; (2c84 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2c44:	4613      	mov	r3, r2
    2c46:	00db      	lsls	r3, r3, #3
    2c48:	4413      	add	r3, r2
    2c4a:	440b      	add	r3, r1
    2c4c:	3306      	adds	r3, #6
    2c4e:	781b      	ldrb	r3, [r3, #0]
    2c50:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2c52:	4b0d      	ldr	r3, [pc, #52]	; (2c88 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2c56:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2c58:	2201      	movs	r2, #1
    2c5a:	9b04      	ldr	r3, [sp, #16]
    2c5c:	fa02 f303 	lsl.w	r3, r2, r3
    2c60:	43db      	mvns	r3, r3
    2c62:	9a03      	ldr	r2, [sp, #12]
    2c64:	4013      	ands	r3, r2
    2c66:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2c68:	9a05      	ldr	r2, [sp, #20]
    2c6a:	9b04      	ldr	r3, [sp, #16]
    2c6c:	fa02 f303 	lsl.w	r3, r2, r3
    2c70:	9a03      	ldr	r2, [sp, #12]
    2c72:	4313      	orrs	r3, r2
    2c74:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2c76:	4a04      	ldr	r2, [pc, #16]	; (2c88 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c78:	9b03      	ldr	r3, [sp, #12]
    2c7a:	6413      	str	r3, [r2, #64]	; 0x40
}
    2c7c:	bf00      	nop
    2c7e:	b006      	add	sp, #24
    2c80:	4770      	bx	lr
    2c82:	bf00      	nop
    2c84:	0000c2e4 	.word	0x0000c2e4
    2c88:	40048000 	.word	0x40048000

00002c8c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c8c:	b084      	sub	sp, #16
    2c8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2c90:	4b0a      	ldr	r3, [pc, #40]	; (2cbc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2c94:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2c96:	9b01      	ldr	r3, [sp, #4]
    2c98:	889b      	ldrh	r3, [r3, #4]
    2c9a:	2b01      	cmp	r3, #1
    2c9c:	d104      	bne.n	2ca8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2c9e:	9b03      	ldr	r3, [sp, #12]
    2ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2ca4:	9303      	str	r3, [sp, #12]
    2ca6:	e003      	b.n	2cb0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2ca8:	9b03      	ldr	r3, [sp, #12]
    2caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2cae:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2cb0:	4a02      	ldr	r2, [pc, #8]	; (2cbc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2cb2:	9b03      	ldr	r3, [sp, #12]
    2cb4:	6693      	str	r3, [r2, #104]	; 0x68
}
    2cb6:	bf00      	nop
    2cb8:	b004      	add	sp, #16
    2cba:	4770      	bx	lr
    2cbc:	40048000 	.word	0x40048000

00002cc0 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2cc0:	b082      	sub	sp, #8
    2cc2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2cc4:	bf00      	nop
    2cc6:	b002      	add	sp, #8
    2cc8:	4770      	bx	lr

00002cca <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2cca:	b082      	sub	sp, #8
    2ccc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2cce:	bf00      	nop
    2cd0:	b002      	add	sp, #8
    2cd2:	4770      	bx	lr

00002cd4 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cd4:	b500      	push	{lr}
    2cd6:	b083      	sub	sp, #12
    2cd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cda:	9b01      	ldr	r3, [sp, #4]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d002      	beq.n	2ce6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2ce0:	9801      	ldr	r0, [sp, #4]
    2ce2:	f000 f8d1 	bl	2e88 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce6:	bf00      	nop
    2ce8:	b003      	add	sp, #12
    2cea:	f85d fb04 	ldr.w	pc, [sp], #4

00002cee <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cee:	b500      	push	{lr}
    2cf0:	b083      	sub	sp, #12
    2cf2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf4:	9b01      	ldr	r3, [sp, #4]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d002      	beq.n	2d00 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2cfa:	9801      	ldr	r0, [sp, #4]
    2cfc:	f000 f950 	bl	2fa0 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d00:	bf00      	nop
    2d02:	b003      	add	sp, #12
    2d04:	f85d fb04 	ldr.w	pc, [sp], #4

00002d08 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2d08:	b500      	push	{lr}
    2d0a:	b083      	sub	sp, #12
    2d0c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2d0e:	9801      	ldr	r0, [sp, #4]
    2d10:	f000 f98e 	bl	3030 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d14:	bf00      	nop
    2d16:	b003      	add	sp, #12
    2d18:	f85d fb04 	ldr.w	pc, [sp], #4

00002d1c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d1c:	b500      	push	{lr}
    2d1e:	b083      	sub	sp, #12
    2d20:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d22:	9b01      	ldr	r3, [sp, #4]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d002      	beq.n	2d2e <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2d28:	9801      	ldr	r0, [sp, #4]
    2d2a:	f000 f999 	bl	3060 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d2e:	bf00      	nop
    2d30:	b003      	add	sp, #12
    2d32:	f85d fb04 	ldr.w	pc, [sp], #4

00002d36 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d36:	b500      	push	{lr}
    2d38:	b083      	sub	sp, #12
    2d3a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d3c:	9b01      	ldr	r3, [sp, #4]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d002      	beq.n	2d48 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2d42:	9801      	ldr	r0, [sp, #4]
    2d44:	f000 f9b0 	bl	30a8 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d48:	bf00      	nop
    2d4a:	b003      	add	sp, #12
    2d4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d50 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2d50:	b500      	push	{lr}
    2d52:	b083      	sub	sp, #12
    2d54:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2d56:	9801      	ldr	r0, [sp, #4]
    2d58:	f000 f9ba 	bl	30d0 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d5c:	bf00      	nop
    2d5e:	b003      	add	sp, #12
    2d60:	f85d fb04 	ldr.w	pc, [sp], #4

00002d64 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d64:	b500      	push	{lr}
    2d66:	b083      	sub	sp, #12
    2d68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d6a:	9b01      	ldr	r3, [sp, #4]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d002      	beq.n	2d76 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2d70:	9801      	ldr	r0, [sp, #4]
    2d72:	f000 f9bd 	bl	30f0 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d76:	bf00      	nop
    2d78:	b003      	add	sp, #12
    2d7a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d7e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d7e:	b500      	push	{lr}
    2d80:	b083      	sub	sp, #12
    2d82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d84:	9b01      	ldr	r3, [sp, #4]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d002      	beq.n	2d90 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2d8a:	9801      	ldr	r0, [sp, #4]
    2d8c:	f000 f9d4 	bl	3138 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d90:	bf00      	nop
    2d92:	b003      	add	sp, #12
    2d94:	f85d fb04 	ldr.w	pc, [sp], #4

00002d98 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2d98:	b500      	push	{lr}
    2d9a:	b083      	sub	sp, #12
    2d9c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2d9e:	9801      	ldr	r0, [sp, #4]
    2da0:	f000 f9de 	bl	3160 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2da4:	bf00      	nop
    2da6:	b003      	add	sp, #12
    2da8:	f85d fb04 	ldr.w	pc, [sp], #4

00002dac <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2dac:	b500      	push	{lr}
    2dae:	b089      	sub	sp, #36	; 0x24
    2db0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2db2:	2300      	movs	r3, #0
    2db4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2db8:	4b20      	ldr	r3, [pc, #128]	; (2e3c <SetInputSouceSytemClock+0x90>)
    2dba:	695b      	ldr	r3, [r3, #20]
    2dbc:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2dbe:	9b06      	ldr	r3, [sp, #24]
    2dc0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2dc4:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2dc6:	9b01      	ldr	r3, [sp, #4]
    2dc8:	061b      	lsls	r3, r3, #24
    2dca:	9a06      	ldr	r2, [sp, #24]
    2dcc:	4313      	orrs	r3, r2
    2dce:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2dd0:	4a1a      	ldr	r2, [pc, #104]	; (2e3c <SetInputSouceSytemClock+0x90>)
    2dd2:	9b06      	ldr	r3, [sp, #24]
    2dd4:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2dd6:	aa02      	add	r2, sp, #8
    2dd8:	a903      	add	r1, sp, #12
    2dda:	a804      	add	r0, sp, #16
    2ddc:	f24c 3350 	movw	r3, #50000	; 0xc350
    2de0:	f7ff f9ac 	bl	213c <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2de4:	4b15      	ldr	r3, [pc, #84]	; (2e3c <SetInputSouceSytemClock+0x90>)
    2de6:	691b      	ldr	r3, [r3, #16]
    2de8:	0e1b      	lsrs	r3, r3, #24
    2dea:	f003 030f 	and.w	r3, r3, #15
    2dee:	9a01      	ldr	r2, [sp, #4]
    2df0:	429a      	cmp	r2, r3
    2df2:	bf0c      	ite	eq
    2df4:	2301      	moveq	r3, #1
    2df6:	2300      	movne	r3, #0
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2dfc:	9a02      	ldr	r2, [sp, #8]
    2dfe:	a903      	add	r1, sp, #12
    2e00:	ab04      	add	r3, sp, #16
    2e02:	4618      	mov	r0, r3
    2e04:	f7ff f9b4 	bl	2170 <Clock_Ip_TimeoutExpired>
    2e08:	4603      	mov	r3, r0
    2e0a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2e0e:	9b05      	ldr	r3, [sp, #20]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d106      	bne.n	2e22 <SetInputSouceSytemClock+0x76>
    2e14:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e18:	f083 0301 	eor.w	r3, r3, #1
    2e1c:	b2db      	uxtb	r3, r3
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d1e0      	bne.n	2de4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e22:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d003      	beq.n	2e32 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2e2a:	2105      	movs	r1, #5
    2e2c:	2001      	movs	r0, #1
    2e2e:	f7ff f975 	bl	211c <Clock_Ip_ReportClockErrors>
    }
}
    2e32:	bf00      	nop
    2e34:	b009      	add	sp, #36	; 0x24
    2e36:	f85d fb04 	ldr.w	pc, [sp], #4
    2e3a:	bf00      	nop
    2e3c:	40064000 	.word	0x40064000

00002e40 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e40:	b500      	push	{lr}
    2e42:	b083      	sub	sp, #12
    2e44:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e46:	9b01      	ldr	r3, [sp, #4]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d002      	beq.n	2e52 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2e4c:	9801      	ldr	r0, [sp, #4]
    2e4e:	f000 f997 	bl	3180 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e52:	bf00      	nop
    2e54:	b003      	add	sp, #12
    2e56:	f85d fb04 	ldr.w	pc, [sp], #4

00002e5a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e5a:	b500      	push	{lr}
    2e5c:	b083      	sub	sp, #12
    2e5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e60:	9b01      	ldr	r3, [sp, #4]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d002      	beq.n	2e6c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2e66:	9801      	ldr	r0, [sp, #4]
    2e68:	f000 fa7e 	bl	3368 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e6c:	bf00      	nop
    2e6e:	b003      	add	sp, #12
    2e70:	f85d fb04 	ldr.w	pc, [sp], #4

00002e74 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2e74:	b500      	push	{lr}
    2e76:	b083      	sub	sp, #12
    2e78:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2e7a:	9801      	ldr	r0, [sp, #4]
    2e7c:	f000 fab8 	bl	33f0 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e80:	bf00      	nop
    2e82:	b003      	add	sp, #12
    2e84:	f85d fb04 	ldr.w	pc, [sp], #4

00002e88 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e88:	b500      	push	{lr}
    2e8a:	b08b      	sub	sp, #44	; 0x2c
    2e8c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2e8e:	2300      	movs	r3, #0
    2e90:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2e94:	9b01      	ldr	r3, [sp, #4]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d10b      	bne.n	2eb2 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2e9a:	2305      	movs	r3, #5
    2e9c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2e9e:	2301      	movs	r3, #1
    2ea0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2ea4:	2301      	movs	r3, #1
    2ea6:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2eaa:	2301      	movs	r3, #1
    2eac:	f88d 3010 	strb.w	r3, [sp, #16]
    2eb0:	e00e      	b.n	2ed0 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2eb2:	9b01      	ldr	r3, [sp, #4]
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	79db      	ldrb	r3, [r3, #7]
    2ebc:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2ec0:	9b01      	ldr	r3, [sp, #4]
    2ec2:	889b      	ldrh	r3, [r3, #4]
    2ec4:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2ec8:	9b01      	ldr	r3, [sp, #4]
    2eca:	7a1b      	ldrb	r3, [r3, #8]
    2ecc:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ed0:	4b32      	ldr	r3, [pc, #200]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ed6:	4a31      	ldr	r2, [pc, #196]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ed8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2edc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2ee0:	4b2e      	ldr	r3, [pc, #184]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ee6:	4a2d      	ldr	r2, [pc, #180]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ee8:	f023 0301 	bic.w	r3, r3, #1
    2eec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2ef0:	4b2a      	ldr	r3, [pc, #168]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ef6:	4a29      	ldr	r2, [pc, #164]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ef8:	f023 0304 	bic.w	r3, r3, #4
    2efc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2f00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2f04:	2b01      	cmp	r3, #1
    2f06:	d144      	bne.n	2f92 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2f08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2f0c:	4a23      	ldr	r2, [pc, #140]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f0e:	f003 0301 	and.w	r3, r3, #1
    2f12:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f16:	4b21      	ldr	r3, [pc, #132]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f1c:	4a1f      	ldr	r2, [pc, #124]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f1e:	f043 0301 	orr.w	r3, r3, #1
    2f22:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f26:	4b1d      	ldr	r3, [pc, #116]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f2c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2f30:	009b      	lsls	r3, r3, #2
    2f32:	f003 0304 	and.w	r3, r3, #4
    2f36:	4919      	ldr	r1, [pc, #100]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f38:	4313      	orrs	r3, r2
    2f3a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f3e:	aa05      	add	r2, sp, #20
    2f40:	a906      	add	r1, sp, #24
    2f42:	a807      	add	r0, sp, #28
    2f44:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f48:	f7ff f8f8 	bl	213c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2f4c:	4b13      	ldr	r3, [pc, #76]	; (2f9c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f52:	0e1b      	lsrs	r3, r3, #24
    2f54:	f003 0301 	and.w	r3, r3, #1
    2f58:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f5a:	9a05      	ldr	r2, [sp, #20]
    2f5c:	a906      	add	r1, sp, #24
    2f5e:	ab07      	add	r3, sp, #28
    2f60:	4618      	mov	r0, r3
    2f62:	f7ff f905 	bl	2170 <Clock_Ip_TimeoutExpired>
    2f66:	4603      	mov	r3, r0
    2f68:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2f6c:	9b08      	ldr	r3, [sp, #32]
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d106      	bne.n	2f80 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2f72:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f76:	f083 0301 	eor.w	r3, r3, #1
    2f7a:	b2db      	uxtb	r3, r3
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	d1e5      	bne.n	2f4c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2f80:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f84:	2b00      	cmp	r3, #0
    2f86:	d004      	beq.n	2f92 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2f88:	9b02      	ldr	r3, [sp, #8]
    2f8a:	4619      	mov	r1, r3
    2f8c:	2001      	movs	r0, #1
    2f8e:	f7ff f8c5 	bl	211c <Clock_Ip_ReportClockErrors>
        }
    }
}
    2f92:	bf00      	nop
    2f94:	b00b      	add	sp, #44	; 0x2c
    2f96:	f85d fb04 	ldr.w	pc, [sp], #4
    2f9a:	bf00      	nop
    2f9c:	40064000 	.word	0x40064000

00002fa0 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2fa0:	b500      	push	{lr}
    2fa2:	b089      	sub	sp, #36	; 0x24
    2fa4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2fa6:	2300      	movs	r3, #0
    2fa8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2fac:	4b1f      	ldr	r3, [pc, #124]	; (302c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fb2:	4a1e      	ldr	r2, [pc, #120]	; (302c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fb4:	f043 0301 	orr.w	r3, r3, #1
    2fb8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2fbc:	4b1b      	ldr	r3, [pc, #108]	; (302c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fc2:	4a1a      	ldr	r2, [pc, #104]	; (302c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fc4:	f043 0304 	orr.w	r3, r3, #4
    2fc8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2fcc:	aa03      	add	r2, sp, #12
    2fce:	a904      	add	r1, sp, #16
    2fd0:	a805      	add	r0, sp, #20
    2fd2:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fd6:	f7ff f8b1 	bl	213c <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2fda:	4b14      	ldr	r3, [pc, #80]	; (302c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fe0:	0e1b      	lsrs	r3, r3, #24
    2fe2:	f003 0301 	and.w	r3, r3, #1
    2fe6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2fe8:	9a03      	ldr	r2, [sp, #12]
    2fea:	a904      	add	r1, sp, #16
    2fec:	ab05      	add	r3, sp, #20
    2fee:	4618      	mov	r0, r3
    2ff0:	f7ff f8be 	bl	2170 <Clock_Ip_TimeoutExpired>
    2ff4:	4603      	mov	r3, r0
    2ff6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2ffa:	9b06      	ldr	r3, [sp, #24]
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d106      	bne.n	300e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3000:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3004:	f083 0301 	eor.w	r3, r3, #1
    3008:	b2db      	uxtb	r3, r3
    300a:	2b00      	cmp	r3, #0
    300c:	d1e5      	bne.n	2fda <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    300e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3012:	2b00      	cmp	r3, #0
    3014:	d005      	beq.n	3022 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3016:	9b01      	ldr	r3, [sp, #4]
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	4619      	mov	r1, r3
    301c:	2001      	movs	r0, #1
    301e:	f7ff f87d 	bl	211c <Clock_Ip_ReportClockErrors>
    }
}
    3022:	bf00      	nop
    3024:	b009      	add	sp, #36	; 0x24
    3026:	f85d fb04 	ldr.w	pc, [sp], #4
    302a:	bf00      	nop
    302c:	40064000 	.word	0x40064000

00003030 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3030:	b082      	sub	sp, #8
    3032:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3034:	4b09      	ldr	r3, [pc, #36]	; (305c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    303a:	4a08      	ldr	r2, [pc, #32]	; (305c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    303c:	f023 0301 	bic.w	r3, r3, #1
    3040:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3044:	4b05      	ldr	r3, [pc, #20]	; (305c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    304a:	4a04      	ldr	r2, [pc, #16]	; (305c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    304c:	f023 0304 	bic.w	r3, r3, #4
    3050:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3054:	bf00      	nop
    3056:	b002      	add	sp, #8
    3058:	4770      	bx	lr
    305a:	bf00      	nop
    305c:	40064000 	.word	0x40064000

00003060 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3060:	b082      	sub	sp, #8
    3062:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3064:	4b0f      	ldr	r3, [pc, #60]	; (30a4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3066:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    306a:	4a0e      	ldr	r2, [pc, #56]	; (30a4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    306c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3070:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3074:	4b0b      	ldr	r3, [pc, #44]	; (30a4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3076:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    307a:	4a0a      	ldr	r2, [pc, #40]	; (30a4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    307c:	f023 0304 	bic.w	r3, r3, #4
    3080:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3084:	4b07      	ldr	r3, [pc, #28]	; (30a4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3086:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    308a:	9b01      	ldr	r3, [sp, #4]
    308c:	7a1b      	ldrb	r3, [r3, #8]
    308e:	009b      	lsls	r3, r3, #2
    3090:	f003 0304 	and.w	r3, r3, #4
    3094:	4903      	ldr	r1, [pc, #12]	; (30a4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3096:	4313      	orrs	r3, r2
    3098:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    309c:	bf00      	nop
    309e:	b002      	add	sp, #8
    30a0:	4770      	bx	lr
    30a2:	bf00      	nop
    30a4:	40064000 	.word	0x40064000

000030a8 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30a8:	b082      	sub	sp, #8
    30aa:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    30ac:	9b01      	ldr	r3, [sp, #4]
    30ae:	889b      	ldrh	r3, [r3, #4]
    30b0:	2b01      	cmp	r3, #1
    30b2:	d107      	bne.n	30c4 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    30b4:	4b05      	ldr	r3, [pc, #20]	; (30cc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30ba:	4a04      	ldr	r2, [pc, #16]	; (30cc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30bc:	f043 0304 	orr.w	r3, r3, #4
    30c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    30c4:	bf00      	nop
    30c6:	b002      	add	sp, #8
    30c8:	4770      	bx	lr
    30ca:	bf00      	nop
    30cc:	40064000 	.word	0x40064000

000030d0 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    30d0:	b082      	sub	sp, #8
    30d2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30d4:	4b05      	ldr	r3, [pc, #20]	; (30ec <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30da:	4a04      	ldr	r2, [pc, #16]	; (30ec <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30dc:	f023 0304 	bic.w	r3, r3, #4
    30e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30e4:	bf00      	nop
    30e6:	b002      	add	sp, #8
    30e8:	4770      	bx	lr
    30ea:	bf00      	nop
    30ec:	40064000 	.word	0x40064000

000030f0 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30f0:	b082      	sub	sp, #8
    30f2:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    30f4:	4b0f      	ldr	r3, [pc, #60]	; (3134 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    30f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30fa:	4a0e      	ldr	r2, [pc, #56]	; (3134 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    30fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3100:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3104:	4b0b      	ldr	r3, [pc, #44]	; (3134 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3106:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    310a:	4a0a      	ldr	r2, [pc, #40]	; (3134 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    310c:	f023 0302 	bic.w	r3, r3, #2
    3110:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3114:	4b07      	ldr	r3, [pc, #28]	; (3134 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3116:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    311a:	9b01      	ldr	r3, [sp, #4]
    311c:	7a5b      	ldrb	r3, [r3, #9]
    311e:	005b      	lsls	r3, r3, #1
    3120:	f003 0302 	and.w	r3, r3, #2
    3124:	4903      	ldr	r1, [pc, #12]	; (3134 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3126:	4313      	orrs	r3, r2
    3128:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    312c:	bf00      	nop
    312e:	b002      	add	sp, #8
    3130:	4770      	bx	lr
    3132:	bf00      	nop
    3134:	40064000 	.word	0x40064000

00003138 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3138:	b082      	sub	sp, #8
    313a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    313c:	9b01      	ldr	r3, [sp, #4]
    313e:	889b      	ldrh	r3, [r3, #4]
    3140:	2b01      	cmp	r3, #1
    3142:	d107      	bne.n	3154 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3144:	4b05      	ldr	r3, [pc, #20]	; (315c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    314a:	4a04      	ldr	r2, [pc, #16]	; (315c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    314c:	f043 0302 	orr.w	r3, r3, #2
    3150:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3154:	bf00      	nop
    3156:	b002      	add	sp, #8
    3158:	4770      	bx	lr
    315a:	bf00      	nop
    315c:	40064000 	.word	0x40064000

00003160 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3160:	b082      	sub	sp, #8
    3162:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3164:	4b05      	ldr	r3, [pc, #20]	; (317c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3166:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    316a:	4a04      	ldr	r2, [pc, #16]	; (317c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    316c:	f023 0302 	bic.w	r3, r3, #2
    3170:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3174:	bf00      	nop
    3176:	b002      	add	sp, #8
    3178:	4770      	bx	lr
    317a:	bf00      	nop
    317c:	40064000 	.word	0x40064000

00003180 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3180:	b500      	push	{lr}
    3182:	b08b      	sub	sp, #44	; 0x2c
    3184:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3186:	9b01      	ldr	r3, [sp, #4]
    3188:	681a      	ldr	r2, [r3, #0]
    318a:	4975      	ldr	r1, [pc, #468]	; (3360 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    318c:	4613      	mov	r3, r2
    318e:	00db      	lsls	r3, r3, #3
    3190:	4413      	add	r3, r2
    3192:	440b      	add	r3, r1
    3194:	781b      	ldrb	r3, [r3, #0]
    3196:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3198:	2300      	movs	r3, #0
    319a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    319e:	2300      	movs	r3, #0
    31a0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    31a4:	4b6f      	ldr	r3, [pc, #444]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31aa:	4a6e      	ldr	r2, [pc, #440]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31b0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    31b4:	4b6b      	ldr	r3, [pc, #428]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    31be:	2b00      	cmp	r3, #0
    31c0:	d07d      	beq.n	32be <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31c2:	9b01      	ldr	r3, [sp, #4]
    31c4:	79db      	ldrb	r3, [r3, #7]
    31c6:	461a      	mov	r2, r3
    31c8:	4b66      	ldr	r3, [pc, #408]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ca:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    31ce:	f003 0303 	and.w	r3, r3, #3
    31d2:	429a      	cmp	r2, r3
    31d4:	d10b      	bne.n	31ee <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    31d6:	9b01      	ldr	r3, [sp, #4]
    31d8:	799b      	ldrb	r3, [r3, #6]
    31da:	461a      	mov	r2, r3
    31dc:	4b61      	ldr	r3, [pc, #388]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31e2:	08db      	lsrs	r3, r3, #3
    31e4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31e8:	429a      	cmp	r2, r3
    31ea:	f000 80b4 	beq.w	3356 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    31ee:	4b5d      	ldr	r3, [pc, #372]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31f4:	f003 0301 	and.w	r3, r3, #1
    31f8:	2b00      	cmp	r3, #0
    31fa:	d105      	bne.n	3208 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    31fc:	2301      	movs	r3, #1
    31fe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3202:	2000      	movs	r0, #0
    3204:	f7ff fd66 	bl	2cd4 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3208:	2002      	movs	r0, #2
    320a:	f7ff fdcf 	bl	2dac <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    320e:	4b55      	ldr	r3, [pc, #340]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3210:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3214:	4a53      	ldr	r2, [pc, #332]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3216:	f023 0301 	bic.w	r3, r3, #1
    321a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    321e:	9b01      	ldr	r3, [sp, #4]
    3220:	889b      	ldrh	r3, [r3, #4]
    3222:	2b01      	cmp	r3, #1
    3224:	f040 8097 	bne.w	3356 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	79db      	ldrb	r3, [r3, #7]
    322c:	4a4d      	ldr	r2, [pc, #308]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    322e:	f003 0303 	and.w	r3, r3, #3
    3232:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3236:	4b4b      	ldr	r3, [pc, #300]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3238:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    323c:	9b01      	ldr	r3, [sp, #4]
    323e:	799b      	ldrb	r3, [r3, #6]
    3240:	00db      	lsls	r3, r3, #3
    3242:	f003 0308 	and.w	r3, r3, #8
    3246:	4313      	orrs	r3, r2
    3248:	4a46      	ldr	r2, [pc, #280]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    324a:	f043 0301 	orr.w	r3, r3, #1
    324e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3252:	aa03      	add	r2, sp, #12
    3254:	a904      	add	r1, sp, #16
    3256:	a805      	add	r0, sp, #20
    3258:	f24c 3350 	movw	r3, #50000	; 0xc350
    325c:	f7fe ff6e 	bl	213c <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3260:	4b40      	ldr	r3, [pc, #256]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3262:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3266:	0e1b      	lsrs	r3, r3, #24
    3268:	f003 0301 	and.w	r3, r3, #1
    326c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    326e:	9a03      	ldr	r2, [sp, #12]
    3270:	a904      	add	r1, sp, #16
    3272:	ab05      	add	r3, sp, #20
    3274:	4618      	mov	r0, r3
    3276:	f7fe ff7b 	bl	2170 <Clock_Ip_TimeoutExpired>
    327a:	4603      	mov	r3, r0
    327c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3280:	9b06      	ldr	r3, [sp, #24]
    3282:	2b00      	cmp	r3, #0
    3284:	d106      	bne.n	3294 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3286:	f89d 301f 	ldrb.w	r3, [sp, #31]
    328a:	f083 0301 	eor.w	r3, r3, #1
    328e:	b2db      	uxtb	r3, r3
    3290:	2b00      	cmp	r3, #0
    3292:	d1e5      	bne.n	3260 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3294:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3298:	2b00      	cmp	r3, #0
    329a:	d005      	beq.n	32a8 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    329c:	9b01      	ldr	r3, [sp, #4]
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	4619      	mov	r1, r3
    32a2:	2001      	movs	r0, #1
    32a4:	f7fe ff3a 	bl	211c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    32a8:	2003      	movs	r0, #3
    32aa:	f7ff fd7f 	bl	2dac <SetInputSouceSytemClock>

                if (SircWasDisabled)
    32ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    32b2:	2b00      	cmp	r3, #0
    32b4:	d04f      	beq.n	3356 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    32b6:	2002      	movs	r0, #2
    32b8:	f7ff fd26 	bl	2d08 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    32bc:	e04b      	b.n	3356 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    32be:	4b29      	ldr	r3, [pc, #164]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32c0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32c4:	4a27      	ldr	r2, [pc, #156]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32c6:	f023 0301 	bic.w	r3, r3, #1
    32ca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    32ce:	9b01      	ldr	r3, [sp, #4]
    32d0:	889b      	ldrh	r3, [r3, #4]
    32d2:	2b01      	cmp	r3, #1
    32d4:	d13f      	bne.n	3356 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    32d6:	9b01      	ldr	r3, [sp, #4]
    32d8:	79db      	ldrb	r3, [r3, #7]
    32da:	4a22      	ldr	r2, [pc, #136]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32dc:	f003 0303 	and.w	r3, r3, #3
    32e0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    32e4:	4b1f      	ldr	r3, [pc, #124]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32e6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    32ea:	9b01      	ldr	r3, [sp, #4]
    32ec:	799b      	ldrb	r3, [r3, #6]
    32ee:	00db      	lsls	r3, r3, #3
    32f0:	f003 0308 	and.w	r3, r3, #8
    32f4:	4313      	orrs	r3, r2
    32f6:	4a1b      	ldr	r2, [pc, #108]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32f8:	f043 0301 	orr.w	r3, r3, #1
    32fc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3300:	aa03      	add	r2, sp, #12
    3302:	a904      	add	r1, sp, #16
    3304:	a805      	add	r0, sp, #20
    3306:	f24c 3350 	movw	r3, #50000	; 0xc350
    330a:	f7fe ff17 	bl	213c <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    330e:	4b15      	ldr	r3, [pc, #84]	; (3364 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3310:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3314:	0e1b      	lsrs	r3, r3, #24
    3316:	f003 0301 	and.w	r3, r3, #1
    331a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    331c:	9a03      	ldr	r2, [sp, #12]
    331e:	a904      	add	r1, sp, #16
    3320:	ab05      	add	r3, sp, #20
    3322:	4618      	mov	r0, r3
    3324:	f7fe ff24 	bl	2170 <Clock_Ip_TimeoutExpired>
    3328:	4603      	mov	r3, r0
    332a:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    332e:	9b06      	ldr	r3, [sp, #24]
    3330:	2b00      	cmp	r3, #0
    3332:	d106      	bne.n	3342 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3334:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3338:	f083 0301 	eor.w	r3, r3, #1
    333c:	b2db      	uxtb	r3, r3
    333e:	2b00      	cmp	r3, #0
    3340:	d1e5      	bne.n	330e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3342:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3346:	2b00      	cmp	r3, #0
    3348:	d005      	beq.n	3356 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    334a:	9b01      	ldr	r3, [sp, #4]
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	4619      	mov	r1, r3
    3350:	2001      	movs	r0, #1
    3352:	f7fe fee3 	bl	211c <Clock_Ip_ReportClockErrors>
}
    3356:	bf00      	nop
    3358:	b00b      	add	sp, #44	; 0x2c
    335a:	f85d fb04 	ldr.w	pc, [sp], #4
    335e:	bf00      	nop
    3360:	0000c2e4 	.word	0x0000c2e4
    3364:	40064000 	.word	0x40064000

00003368 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3368:	b500      	push	{lr}
    336a:	b089      	sub	sp, #36	; 0x24
    336c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    336e:	2300      	movs	r3, #0
    3370:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3374:	9b01      	ldr	r3, [sp, #4]
    3376:	889b      	ldrh	r3, [r3, #4]
    3378:	2b01      	cmp	r3, #1
    337a:	d132      	bne.n	33e2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    337c:	4b1b      	ldr	r3, [pc, #108]	; (33ec <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    337e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3382:	4a1a      	ldr	r2, [pc, #104]	; (33ec <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3384:	f043 0301 	orr.w	r3, r3, #1
    3388:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    338c:	aa03      	add	r2, sp, #12
    338e:	a904      	add	r1, sp, #16
    3390:	a805      	add	r0, sp, #20
    3392:	f24c 3350 	movw	r3, #50000	; 0xc350
    3396:	f7fe fed1 	bl	213c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    339a:	4b14      	ldr	r3, [pc, #80]	; (33ec <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    339c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33a0:	0e1b      	lsrs	r3, r3, #24
    33a2:	f003 0301 	and.w	r3, r3, #1
    33a6:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33a8:	9a03      	ldr	r2, [sp, #12]
    33aa:	a904      	add	r1, sp, #16
    33ac:	ab05      	add	r3, sp, #20
    33ae:	4618      	mov	r0, r3
    33b0:	f7fe fede 	bl	2170 <Clock_Ip_TimeoutExpired>
    33b4:	4603      	mov	r3, r0
    33b6:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33ba:	9b06      	ldr	r3, [sp, #24]
    33bc:	2b00      	cmp	r3, #0
    33be:	d106      	bne.n	33ce <Clock_Ip_EnableFirc_TrustedCall+0x66>
    33c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33c4:	f083 0301 	eor.w	r3, r3, #1
    33c8:	b2db      	uxtb	r3, r3
    33ca:	2b00      	cmp	r3, #0
    33cc:	d1e5      	bne.n	339a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    33ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33d2:	2b00      	cmp	r3, #0
    33d4:	d005      	beq.n	33e2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33d6:	9b01      	ldr	r3, [sp, #4]
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	4619      	mov	r1, r3
    33dc:	2001      	movs	r0, #1
    33de:	f7fe fe9d 	bl	211c <Clock_Ip_ReportClockErrors>
        }
    }
}
    33e2:	bf00      	nop
    33e4:	b009      	add	sp, #36	; 0x24
    33e6:	f85d fb04 	ldr.w	pc, [sp], #4
    33ea:	bf00      	nop
    33ec:	40064000 	.word	0x40064000

000033f0 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    33f0:	b082      	sub	sp, #8
    33f2:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    33f4:	4b05      	ldr	r3, [pc, #20]	; (340c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    33f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33fa:	4a04      	ldr	r2, [pc, #16]	; (340c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    33fc:	f023 0301 	bic.w	r3, r3, #1
    3400:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3404:	bf00      	nop
    3406:	b002      	add	sp, #8
    3408:	4770      	bx	lr
    340a:	bf00      	nop
    340c:	40064000 	.word	0x40064000

00003410 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3410:	b082      	sub	sp, #8
    3412:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3414:	bf00      	nop
    3416:	b002      	add	sp, #8
    3418:	4770      	bx	lr

0000341a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    341a:	b082      	sub	sp, #8
    341c:	9001      	str	r0, [sp, #4]
    341e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3420:	bf00      	nop
    3422:	b002      	add	sp, #8
    3424:	4770      	bx	lr

00003426 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3426:	b082      	sub	sp, #8
    3428:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    342a:	bf00      	nop
    342c:	b002      	add	sp, #8
    342e:	4770      	bx	lr

00003430 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3430:	b082      	sub	sp, #8
    3432:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3434:	bf00      	nop
    3436:	b002      	add	sp, #8
    3438:	4770      	bx	lr

0000343a <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    343a:	b082      	sub	sp, #8
    343c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    343e:	2302      	movs	r3, #2
}
    3440:	4618      	mov	r0, r3
    3442:	b002      	add	sp, #8
    3444:	4770      	bx	lr

00003446 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3446:	b082      	sub	sp, #8
    3448:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    344a:	bf00      	nop
    344c:	b002      	add	sp, #8
    344e:	4770      	bx	lr

00003450 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3450:	b500      	push	{lr}
    3452:	b083      	sub	sp, #12
    3454:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3456:	9b01      	ldr	r3, [sp, #4]
    3458:	2b00      	cmp	r3, #0
    345a:	d002      	beq.n	3462 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    345c:	9801      	ldr	r0, [sp, #4]
    345e:	f000 f870 	bl	3542 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3462:	bf00      	nop
    3464:	b003      	add	sp, #12
    3466:	f85d fb04 	ldr.w	pc, [sp], #4

0000346a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    346a:	b500      	push	{lr}
    346c:	b083      	sub	sp, #12
    346e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3470:	9b01      	ldr	r3, [sp, #4]
    3472:	2b00      	cmp	r3, #0
    3474:	d002      	beq.n	347c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3476:	9801      	ldr	r0, [sp, #4]
    3478:	f000 f89a 	bl	35b0 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    347c:	bf00      	nop
    347e:	b003      	add	sp, #12
    3480:	f85d fb04 	ldr.w	pc, [sp], #4

00003484 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3484:	b500      	push	{lr}
    3486:	b089      	sub	sp, #36	; 0x24
    3488:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    348a:	2301      	movs	r3, #1
    348c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    348e:	2300      	movs	r3, #0
    3490:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3494:	4b1e      	ldr	r3, [pc, #120]	; (3510 <Clock_Ip_CompleteSpll+0x8c>)
    3496:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    349a:	f003 0301 	and.w	r3, r3, #1
    349e:	2b00      	cmp	r3, #0
    34a0:	d02f      	beq.n	3502 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34a2:	aa02      	add	r2, sp, #8
    34a4:	a903      	add	r1, sp, #12
    34a6:	a804      	add	r0, sp, #16
    34a8:	f24c 3350 	movw	r3, #50000	; 0xc350
    34ac:	f7fe fe46 	bl	213c <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    34b0:	4b17      	ldr	r3, [pc, #92]	; (3510 <Clock_Ip_CompleteSpll+0x8c>)
    34b2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34b6:	0e1b      	lsrs	r3, r3, #24
    34b8:	f003 0301 	and.w	r3, r3, #1
    34bc:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34be:	9a02      	ldr	r2, [sp, #8]
    34c0:	a903      	add	r1, sp, #12
    34c2:	ab04      	add	r3, sp, #16
    34c4:	4618      	mov	r0, r3
    34c6:	f7fe fe53 	bl	2170 <Clock_Ip_TimeoutExpired>
    34ca:	4603      	mov	r3, r0
    34cc:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    34d0:	9b05      	ldr	r3, [sp, #20]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d106      	bne.n	34e4 <Clock_Ip_CompleteSpll+0x60>
    34d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34da:	f083 0301 	eor.w	r3, r3, #1
    34de:	b2db      	uxtb	r3, r3
    34e0:	2b00      	cmp	r3, #0
    34e2:	d1e5      	bne.n	34b0 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    34e4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34e8:	f083 0301 	eor.w	r3, r3, #1
    34ec:	b2db      	uxtb	r3, r3
    34ee:	2b00      	cmp	r3, #0
    34f0:	d002      	beq.n	34f8 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    34f2:	2302      	movs	r3, #2
    34f4:	9307      	str	r3, [sp, #28]
    34f6:	e006      	b.n	3506 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    34f8:	9901      	ldr	r1, [sp, #4]
    34fa:	2001      	movs	r0, #1
    34fc:	f7fe fe0e 	bl	211c <Clock_Ip_ReportClockErrors>
    3500:	e001      	b.n	3506 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3502:	2300      	movs	r3, #0
    3504:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3506:	9b07      	ldr	r3, [sp, #28]
}
    3508:	4618      	mov	r0, r3
    350a:	b009      	add	sp, #36	; 0x24
    350c:	f85d fb04 	ldr.w	pc, [sp], #4
    3510:	40064000 	.word	0x40064000

00003514 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3514:	b500      	push	{lr}
    3516:	b083      	sub	sp, #12
    3518:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    351a:	9801      	ldr	r0, [sp, #4]
    351c:	f000 f886 	bl	362c <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3520:	bf00      	nop
    3522:	b003      	add	sp, #12
    3524:	f85d fb04 	ldr.w	pc, [sp], #4

00003528 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3528:	b500      	push	{lr}
    352a:	b083      	sub	sp, #12
    352c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    352e:	9b01      	ldr	r3, [sp, #4]
    3530:	2b00      	cmp	r3, #0
    3532:	d002      	beq.n	353a <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3534:	9801      	ldr	r0, [sp, #4]
    3536:	f000 f891 	bl	365c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    353a:	bf00      	nop
    353c:	b003      	add	sp, #12
    353e:	f85d fb04 	ldr.w	pc, [sp], #4

00003542 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3542:	b082      	sub	sp, #8
    3544:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3546:	4b19      	ldr	r3, [pc, #100]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3548:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    354c:	4a17      	ldr	r2, [pc, #92]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    354e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3552:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3556:	4b15      	ldr	r3, [pc, #84]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3558:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    355c:	4a13      	ldr	r2, [pc, #76]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3562:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3566:	4b11      	ldr	r3, [pc, #68]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3568:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    356c:	4a0f      	ldr	r2, [pc, #60]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    356e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3572:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3576:	4b0d      	ldr	r3, [pc, #52]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3578:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    357c:	4a0b      	ldr	r2, [pc, #44]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    357e:	f023 0301 	bic.w	r3, r3, #1
    3582:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3586:	4b09      	ldr	r3, [pc, #36]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3588:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    358c:	4a07      	ldr	r2, [pc, #28]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    358e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3592:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3596:	4b05      	ldr	r3, [pc, #20]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3598:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    359c:	4a03      	ldr	r2, [pc, #12]	; (35ac <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    359e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    35a2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    35a6:	bf00      	nop
    35a8:	b002      	add	sp, #8
    35aa:	4770      	bx	lr
    35ac:	40064000 	.word	0x40064000

000035b0 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    35b0:	b082      	sub	sp, #8
    35b2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    35b4:	9b01      	ldr	r3, [sp, #4]
    35b6:	889b      	ldrh	r3, [r3, #4]
    35b8:	2b01      	cmp	r3, #1
    35ba:	d12f      	bne.n	361c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35bc:	4b1a      	ldr	r3, [pc, #104]	; (3628 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35be:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    35c2:	9b01      	ldr	r3, [sp, #4]
    35c4:	7b5b      	ldrb	r3, [r3, #13]
    35c6:	3b01      	subs	r3, #1
    35c8:	021b      	lsls	r3, r3, #8
    35ca:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    35ce:	9b01      	ldr	r3, [sp, #4]
    35d0:	7d1b      	ldrb	r3, [r3, #20]
    35d2:	3b10      	subs	r3, #16
    35d4:	041b      	lsls	r3, r3, #16
    35d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35da:	430b      	orrs	r3, r1
    35dc:	4912      	ldr	r1, [pc, #72]	; (3628 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35de:	4313      	orrs	r3, r2
    35e0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    35e4:	9b01      	ldr	r3, [sp, #4]
    35e6:	7fdb      	ldrb	r3, [r3, #31]
    35e8:	2b02      	cmp	r3, #2
    35ea:	d011      	beq.n	3610 <Clock_Ip_SetSpll_TrustedCall+0x60>
    35ec:	2b02      	cmp	r3, #2
    35ee:	dc17      	bgt.n	3620 <Clock_Ip_SetSpll_TrustedCall+0x70>
    35f0:	2b00      	cmp	r3, #0
    35f2:	d002      	beq.n	35fa <Clock_Ip_SetSpll_TrustedCall+0x4a>
    35f4:	2b01      	cmp	r3, #1
    35f6:	d005      	beq.n	3604 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    35f8:	e012      	b.n	3620 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    35fa:	4b0b      	ldr	r3, [pc, #44]	; (3628 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35fc:	2200      	movs	r2, #0
    35fe:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3602:	e00e      	b.n	3622 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3604:	4b08      	ldr	r3, [pc, #32]	; (3628 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    360a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    360e:	e008      	b.n	3622 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3610:	4b05      	ldr	r3, [pc, #20]	; (3628 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3612:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3616:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    361a:	e002      	b.n	3622 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    361c:	bf00      	nop
    361e:	e000      	b.n	3622 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3620:	bf00      	nop
}
    3622:	bf00      	nop
    3624:	b002      	add	sp, #8
    3626:	4770      	bx	lr
    3628:	40064000 	.word	0x40064000

0000362c <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    362c:	b082      	sub	sp, #8
    362e:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3630:	4b09      	ldr	r3, [pc, #36]	; (3658 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3632:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3636:	4a08      	ldr	r2, [pc, #32]	; (3658 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3638:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    363c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3640:	4b05      	ldr	r3, [pc, #20]	; (3658 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3642:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3646:	4a04      	ldr	r2, [pc, #16]	; (3658 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3648:	f023 0301 	bic.w	r3, r3, #1
    364c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3650:	bf00      	nop
    3652:	b002      	add	sp, #8
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	40064000 	.word	0x40064000

0000365c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    365c:	b082      	sub	sp, #8
    365e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3660:	9b01      	ldr	r3, [sp, #4]
    3662:	889b      	ldrh	r3, [r3, #4]
    3664:	2b01      	cmp	r3, #1
    3666:	d107      	bne.n	3678 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3668:	4b05      	ldr	r3, [pc, #20]	; (3680 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    366a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    366e:	4a04      	ldr	r2, [pc, #16]	; (3680 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3670:	f043 0301 	orr.w	r3, r3, #1
    3674:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3678:	bf00      	nop
    367a:	b002      	add	sp, #8
    367c:	4770      	bx	lr
    367e:	bf00      	nop
    3680:	40064000 	.word	0x40064000

00003684 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3684:	b082      	sub	sp, #8
    3686:	9001      	str	r0, [sp, #4]
    3688:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    368a:	bf00      	nop
    368c:	b002      	add	sp, #8
    368e:	4770      	bx	lr

00003690 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3690:	b082      	sub	sp, #8
    3692:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3694:	bf00      	nop
    3696:	b002      	add	sp, #8
    3698:	4770      	bx	lr

0000369a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    369a:	b500      	push	{lr}
    369c:	b083      	sub	sp, #12
    369e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	2b00      	cmp	r3, #0
    36a4:	d002      	beq.n	36ac <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    36a6:	9801      	ldr	r0, [sp, #4]
    36a8:	f000 f8ee 	bl	3888 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ac:	bf00      	nop
    36ae:	b003      	add	sp, #12
    36b0:	f85d fb04 	ldr.w	pc, [sp], #4

000036b4 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36b4:	b500      	push	{lr}
    36b6:	b083      	sub	sp, #12
    36b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ba:	9b01      	ldr	r3, [sp, #4]
    36bc:	2b00      	cmp	r3, #0
    36be:	d002      	beq.n	36c6 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    36c0:	9801      	ldr	r0, [sp, #4]
    36c2:	f000 f8ff 	bl	38c4 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36c6:	bf00      	nop
    36c8:	b003      	add	sp, #12
    36ca:	f85d fb04 	ldr.w	pc, [sp], #4

000036ce <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    36ce:	b500      	push	{lr}
    36d0:	b083      	sub	sp, #12
    36d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36d4:	9b01      	ldr	r3, [sp, #4]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d002      	beq.n	36e0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    36da:	9801      	ldr	r0, [sp, #4]
    36dc:	f000 f912 	bl	3904 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36e0:	bf00      	nop
    36e2:	b003      	add	sp, #12
    36e4:	f85d fb04 	ldr.w	pc, [sp], #4

000036e8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36e8:	b500      	push	{lr}
    36ea:	b083      	sub	sp, #12
    36ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ee:	9b01      	ldr	r3, [sp, #4]
    36f0:	2b00      	cmp	r3, #0
    36f2:	d002      	beq.n	36fa <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    36f4:	9801      	ldr	r0, [sp, #4]
    36f6:	f000 f925 	bl	3944 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36fa:	bf00      	nop
    36fc:	b003      	add	sp, #12
    36fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003702 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3702:	b500      	push	{lr}
    3704:	b083      	sub	sp, #12
    3706:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3708:	9b01      	ldr	r3, [sp, #4]
    370a:	2b00      	cmp	r3, #0
    370c:	d002      	beq.n	3714 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    370e:	9801      	ldr	r0, [sp, #4]
    3710:	f000 f936 	bl	3980 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3714:	bf00      	nop
    3716:	b003      	add	sp, #12
    3718:	f85d fb04 	ldr.w	pc, [sp], #4

0000371c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    371c:	b500      	push	{lr}
    371e:	b083      	sub	sp, #12
    3720:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3722:	9b01      	ldr	r3, [sp, #4]
    3724:	2b00      	cmp	r3, #0
    3726:	d002      	beq.n	372e <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3728:	9801      	ldr	r0, [sp, #4]
    372a:	f000 f949 	bl	39c0 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    372e:	bf00      	nop
    3730:	b003      	add	sp, #12
    3732:	f85d fb04 	ldr.w	pc, [sp], #4

00003736 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3736:	b500      	push	{lr}
    3738:	b083      	sub	sp, #12
    373a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    373c:	9b01      	ldr	r3, [sp, #4]
    373e:	2b00      	cmp	r3, #0
    3740:	d002      	beq.n	3748 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3742:	9801      	ldr	r0, [sp, #4]
    3744:	f000 f958 	bl	39f8 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3748:	bf00      	nop
    374a:	b003      	add	sp, #12
    374c:	f85d fb04 	ldr.w	pc, [sp], #4

00003750 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3750:	b500      	push	{lr}
    3752:	b083      	sub	sp, #12
    3754:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3756:	9b01      	ldr	r3, [sp, #4]
    3758:	2b00      	cmp	r3, #0
    375a:	d002      	beq.n	3762 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    375c:	9801      	ldr	r0, [sp, #4]
    375e:	f000 f969 	bl	3a34 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3762:	bf00      	nop
    3764:	b003      	add	sp, #12
    3766:	f85d fb04 	ldr.w	pc, [sp], #4

0000376a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    376a:	b500      	push	{lr}
    376c:	b083      	sub	sp, #12
    376e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3770:	9b01      	ldr	r3, [sp, #4]
    3772:	2b00      	cmp	r3, #0
    3774:	d002      	beq.n	377c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3776:	9801      	ldr	r0, [sp, #4]
    3778:	f000 f978 	bl	3a6c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    377c:	bf00      	nop
    377e:	b003      	add	sp, #12
    3780:	f85d fb04 	ldr.w	pc, [sp], #4

00003784 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3784:	b500      	push	{lr}
    3786:	b083      	sub	sp, #12
    3788:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    378a:	9b01      	ldr	r3, [sp, #4]
    378c:	2b00      	cmp	r3, #0
    378e:	d002      	beq.n	3796 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3790:	9801      	ldr	r0, [sp, #4]
    3792:	f000 f989 	bl	3aa8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3796:	bf00      	nop
    3798:	b003      	add	sp, #12
    379a:	f85d fb04 	ldr.w	pc, [sp], #4

0000379e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    379e:	b500      	push	{lr}
    37a0:	b083      	sub	sp, #12
    37a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37a4:	9b01      	ldr	r3, [sp, #4]
    37a6:	2b00      	cmp	r3, #0
    37a8:	d002      	beq.n	37b0 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    37aa:	9801      	ldr	r0, [sp, #4]
    37ac:	f000 f998 	bl	3ae0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37b0:	bf00      	nop
    37b2:	b003      	add	sp, #12
    37b4:	f85d fb04 	ldr.w	pc, [sp], #4

000037b8 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37b8:	b500      	push	{lr}
    37ba:	b083      	sub	sp, #12
    37bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37be:	9b01      	ldr	r3, [sp, #4]
    37c0:	2b00      	cmp	r3, #0
    37c2:	d002      	beq.n	37ca <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    37c4:	9801      	ldr	r0, [sp, #4]
    37c6:	f000 f9a9 	bl	3b1c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ca:	bf00      	nop
    37cc:	b003      	add	sp, #12
    37ce:	f85d fb04 	ldr.w	pc, [sp], #4

000037d2 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37d2:	b500      	push	{lr}
    37d4:	b083      	sub	sp, #12
    37d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37d8:	9b01      	ldr	r3, [sp, #4]
    37da:	2b00      	cmp	r3, #0
    37dc:	d002      	beq.n	37e4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    37de:	9801      	ldr	r0, [sp, #4]
    37e0:	f000 f9e6 	bl	3bb0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37e4:	bf00      	nop
    37e6:	b003      	add	sp, #12
    37e8:	f85d fb04 	ldr.w	pc, [sp], #4

000037ec <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37ec:	b500      	push	{lr}
    37ee:	b083      	sub	sp, #12
    37f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37f2:	9b01      	ldr	r3, [sp, #4]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d002      	beq.n	37fe <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    37f8:	9801      	ldr	r0, [sp, #4]
    37fa:	f000 fa25 	bl	3c48 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37fe:	bf00      	nop
    3800:	b003      	add	sp, #12
    3802:	f85d fb04 	ldr.w	pc, [sp], #4

00003806 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3806:	b500      	push	{lr}
    3808:	b083      	sub	sp, #12
    380a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    380c:	9b01      	ldr	r3, [sp, #4]
    380e:	2b00      	cmp	r3, #0
    3810:	d002      	beq.n	3818 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3812:	9801      	ldr	r0, [sp, #4]
    3814:	f000 fa2a 	bl	3c6c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3818:	bf00      	nop
    381a:	b003      	add	sp, #12
    381c:	f85d fb04 	ldr.w	pc, [sp], #4

00003820 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3820:	b500      	push	{lr}
    3822:	b083      	sub	sp, #12
    3824:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3826:	9b01      	ldr	r3, [sp, #4]
    3828:	2b00      	cmp	r3, #0
    382a:	d002      	beq.n	3832 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    382c:	9801      	ldr	r0, [sp, #4]
    382e:	f000 fa3b 	bl	3ca8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3832:	bf00      	nop
    3834:	b003      	add	sp, #12
    3836:	f85d fb04 	ldr.w	pc, [sp], #4

0000383a <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    383a:	b500      	push	{lr}
    383c:	b083      	sub	sp, #12
    383e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3840:	9b01      	ldr	r3, [sp, #4]
    3842:	2b00      	cmp	r3, #0
    3844:	d002      	beq.n	384c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3846:	9801      	ldr	r0, [sp, #4]
    3848:	f000 fa56 	bl	3cf8 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    384c:	bf00      	nop
    384e:	b003      	add	sp, #12
    3850:	f85d fb04 	ldr.w	pc, [sp], #4

00003854 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3854:	b500      	push	{lr}
    3856:	b083      	sub	sp, #12
    3858:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    385a:	9b01      	ldr	r3, [sp, #4]
    385c:	2b00      	cmp	r3, #0
    385e:	d002      	beq.n	3866 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3860:	9801      	ldr	r0, [sp, #4]
    3862:	f000 fa79 	bl	3d58 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3866:	bf00      	nop
    3868:	b003      	add	sp, #12
    386a:	f85d fb04 	ldr.w	pc, [sp], #4

0000386e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    386e:	b500      	push	{lr}
    3870:	b083      	sub	sp, #12
    3872:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3874:	9b01      	ldr	r3, [sp, #4]
    3876:	2b00      	cmp	r3, #0
    3878:	d002      	beq.n	3880 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    387a:	9801      	ldr	r0, [sp, #4]
    387c:	f000 fa8a 	bl	3d94 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3880:	bf00      	nop
    3882:	b003      	add	sp, #12
    3884:	f85d fb04 	ldr.w	pc, [sp], #4

00003888 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3888:	b084      	sub	sp, #16
    388a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    388c:	4b0b      	ldr	r3, [pc, #44]	; (38bc <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    388e:	795b      	ldrb	r3, [r3, #5]
    3890:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    3892:	4b0b      	ldr	r3, [pc, #44]	; (38c0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3894:	695b      	ldr	r3, [r3, #20]
    3896:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3898:	9b02      	ldr	r3, [sp, #8]
    389a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    389e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38a0:	9b03      	ldr	r3, [sp, #12]
    38a2:	061b      	lsls	r3, r3, #24
    38a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38a8:	9a02      	ldr	r2, [sp, #8]
    38aa:	4313      	orrs	r3, r2
    38ac:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38ae:	4a04      	ldr	r2, [pc, #16]	; (38c0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38b0:	9b02      	ldr	r3, [sp, #8]
    38b2:	6153      	str	r3, [r2, #20]
}
    38b4:	bf00      	nop
    38b6:	b004      	add	sp, #16
    38b8:	4770      	bx	lr
    38ba:	bf00      	nop
    38bc:	0000c64c 	.word	0x0000c64c
    38c0:	40064000 	.word	0x40064000

000038c4 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38c4:	b084      	sub	sp, #16
    38c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38c8:	9b01      	ldr	r3, [sp, #4]
    38ca:	685b      	ldr	r3, [r3, #4]
    38cc:	4a0b      	ldr	r2, [pc, #44]	; (38fc <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    38ce:	5cd3      	ldrb	r3, [r2, r3]
    38d0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    38d2:	4b0b      	ldr	r3, [pc, #44]	; (3900 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38d4:	695b      	ldr	r3, [r3, #20]
    38d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38d8:	9b02      	ldr	r3, [sp, #8]
    38da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38de:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38e0:	9b03      	ldr	r3, [sp, #12]
    38e2:	061b      	lsls	r3, r3, #24
    38e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38e8:	9a02      	ldr	r2, [sp, #8]
    38ea:	4313      	orrs	r3, r2
    38ec:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38ee:	4a04      	ldr	r2, [pc, #16]	; (3900 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38f0:	9b02      	ldr	r3, [sp, #8]
    38f2:	6153      	str	r3, [r2, #20]
}
    38f4:	bf00      	nop
    38f6:	b004      	add	sp, #16
    38f8:	4770      	bx	lr
    38fa:	bf00      	nop
    38fc:	0000c64c 	.word	0x0000c64c
    3900:	40064000 	.word	0x40064000

00003904 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3904:	b084      	sub	sp, #16
    3906:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3908:	9b01      	ldr	r3, [sp, #4]
    390a:	685b      	ldr	r3, [r3, #4]
    390c:	4a0b      	ldr	r2, [pc, #44]	; (393c <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    390e:	5cd3      	ldrb	r3, [r2, r3]
    3910:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3912:	4b0b      	ldr	r3, [pc, #44]	; (3940 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3914:	699b      	ldr	r3, [r3, #24]
    3916:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3918:	9b02      	ldr	r3, [sp, #8]
    391a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    391e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3920:	9b03      	ldr	r3, [sp, #12]
    3922:	061b      	lsls	r3, r3, #24
    3924:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3928:	9a02      	ldr	r2, [sp, #8]
    392a:	4313      	orrs	r3, r2
    392c:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    392e:	4a04      	ldr	r2, [pc, #16]	; (3940 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3930:	9b02      	ldr	r3, [sp, #8]
    3932:	6193      	str	r3, [r2, #24]
}
    3934:	bf00      	nop
    3936:	b004      	add	sp, #16
    3938:	4770      	bx	lr
    393a:	bf00      	nop
    393c:	0000c64c 	.word	0x0000c64c
    3940:	40064000 	.word	0x40064000

00003944 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3944:	b084      	sub	sp, #16
    3946:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3948:	4b0b      	ldr	r3, [pc, #44]	; (3978 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    394a:	795b      	ldrb	r3, [r3, #5]
    394c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    394e:	4b0b      	ldr	r3, [pc, #44]	; (397c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3950:	69db      	ldr	r3, [r3, #28]
    3952:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3954:	9b02      	ldr	r3, [sp, #8]
    3956:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    395a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    395c:	9b03      	ldr	r3, [sp, #12]
    395e:	061b      	lsls	r3, r3, #24
    3960:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3964:	9a02      	ldr	r2, [sp, #8]
    3966:	4313      	orrs	r3, r2
    3968:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    396a:	4a04      	ldr	r2, [pc, #16]	; (397c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    396c:	9b02      	ldr	r3, [sp, #8]
    396e:	61d3      	str	r3, [r2, #28]
}
    3970:	bf00      	nop
    3972:	b004      	add	sp, #16
    3974:	4770      	bx	lr
    3976:	bf00      	nop
    3978:	0000c64c 	.word	0x0000c64c
    397c:	40064000 	.word	0x40064000

00003980 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3980:	b084      	sub	sp, #16
    3982:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3984:	9b01      	ldr	r3, [sp, #4]
    3986:	685b      	ldr	r3, [r3, #4]
    3988:	4a0b      	ldr	r2, [pc, #44]	; (39b8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    398a:	5cd3      	ldrb	r3, [r2, r3]
    398c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    398e:	4b0b      	ldr	r3, [pc, #44]	; (39bc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3990:	69db      	ldr	r3, [r3, #28]
    3992:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3994:	9b02      	ldr	r3, [sp, #8]
    3996:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    399a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    399c:	9b03      	ldr	r3, [sp, #12]
    399e:	061b      	lsls	r3, r3, #24
    39a0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39a4:	9a02      	ldr	r2, [sp, #8]
    39a6:	4313      	orrs	r3, r2
    39a8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    39aa:	4a04      	ldr	r2, [pc, #16]	; (39bc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39ac:	9b02      	ldr	r3, [sp, #8]
    39ae:	61d3      	str	r3, [r2, #28]
}
    39b0:	bf00      	nop
    39b2:	b004      	add	sp, #16
    39b4:	4770      	bx	lr
    39b6:	bf00      	nop
    39b8:	0000c64c 	.word	0x0000c64c
    39bc:	40064000 	.word	0x40064000

000039c0 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39c0:	b084      	sub	sp, #16
    39c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39c4:	4b0a      	ldr	r3, [pc, #40]	; (39f0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    39c6:	7b9b      	ldrb	r3, [r3, #14]
    39c8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    39ca:	4b0a      	ldr	r3, [pc, #40]	; (39f4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39cc:	691b      	ldr	r3, [r3, #16]
    39ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    39d0:	9b02      	ldr	r3, [sp, #8]
    39d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    39d6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    39d8:	9b03      	ldr	r3, [sp, #12]
    39da:	011b      	lsls	r3, r3, #4
    39dc:	9a02      	ldr	r2, [sp, #8]
    39de:	4313      	orrs	r3, r2
    39e0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    39e2:	4a04      	ldr	r2, [pc, #16]	; (39f4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39e4:	9b02      	ldr	r3, [sp, #8]
    39e6:	6113      	str	r3, [r2, #16]
}
    39e8:	bf00      	nop
    39ea:	b004      	add	sp, #16
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop
    39f0:	0000c5f4 	.word	0x0000c5f4
    39f4:	40048000 	.word	0x40048000

000039f8 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39f8:	b084      	sub	sp, #16
    39fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39fc:	9b01      	ldr	r3, [sp, #4]
    39fe:	685b      	ldr	r3, [r3, #4]
    3a00:	4a0a      	ldr	r2, [pc, #40]	; (3a2c <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3a02:	5cd3      	ldrb	r3, [r2, r3]
    3a04:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3a06:	4b0a      	ldr	r3, [pc, #40]	; (3a30 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a08:	691b      	ldr	r3, [r3, #16]
    3a0a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a0c:	9b02      	ldr	r3, [sp, #8]
    3a0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a12:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a14:	9b03      	ldr	r3, [sp, #12]
    3a16:	011b      	lsls	r3, r3, #4
    3a18:	9a02      	ldr	r2, [sp, #8]
    3a1a:	4313      	orrs	r3, r2
    3a1c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a1e:	4a04      	ldr	r2, [pc, #16]	; (3a30 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a20:	9b02      	ldr	r3, [sp, #8]
    3a22:	6113      	str	r3, [r2, #16]
}
    3a24:	bf00      	nop
    3a26:	b004      	add	sp, #16
    3a28:	4770      	bx	lr
    3a2a:	bf00      	nop
    3a2c:	0000c5f4 	.word	0x0000c5f4
    3a30:	40048000 	.word	0x40048000

00003a34 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a34:	b084      	sub	sp, #16
    3a36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a38:	4b0a      	ldr	r3, [pc, #40]	; (3a64 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3a3a:	785b      	ldrb	r3, [r3, #1]
    3a3c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a3e:	4b0a      	ldr	r3, [pc, #40]	; (3a68 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a40:	691b      	ldr	r3, [r3, #16]
    3a42:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a44:	9b02      	ldr	r3, [sp, #8]
    3a46:	f023 030c 	bic.w	r3, r3, #12
    3a4a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a4c:	9b03      	ldr	r3, [sp, #12]
    3a4e:	009b      	lsls	r3, r3, #2
    3a50:	9a02      	ldr	r2, [sp, #8]
    3a52:	4313      	orrs	r3, r2
    3a54:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a56:	4a04      	ldr	r2, [pc, #16]	; (3a68 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a58:	9b02      	ldr	r3, [sp, #8]
    3a5a:	6113      	str	r3, [r2, #16]
}
    3a5c:	bf00      	nop
    3a5e:	b004      	add	sp, #16
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	0000c6ac 	.word	0x0000c6ac
    3a68:	40048000 	.word	0x40048000

00003a6c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a6c:	b084      	sub	sp, #16
    3a6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a70:	9b01      	ldr	r3, [sp, #4]
    3a72:	685b      	ldr	r3, [r3, #4]
    3a74:	4a0a      	ldr	r2, [pc, #40]	; (3aa0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3a76:	5cd3      	ldrb	r3, [r2, r3]
    3a78:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a7a:	4b0a      	ldr	r3, [pc, #40]	; (3aa4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a7c:	691b      	ldr	r3, [r3, #16]
    3a7e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a80:	9b02      	ldr	r3, [sp, #8]
    3a82:	f023 030c 	bic.w	r3, r3, #12
    3a86:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a88:	9b03      	ldr	r3, [sp, #12]
    3a8a:	009b      	lsls	r3, r3, #2
    3a8c:	9a02      	ldr	r2, [sp, #8]
    3a8e:	4313      	orrs	r3, r2
    3a90:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a92:	4a04      	ldr	r2, [pc, #16]	; (3aa4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a94:	9b02      	ldr	r3, [sp, #8]
    3a96:	6113      	str	r3, [r2, #16]
}
    3a98:	bf00      	nop
    3a9a:	b004      	add	sp, #16
    3a9c:	4770      	bx	lr
    3a9e:	bf00      	nop
    3aa0:	0000c6ac 	.word	0x0000c6ac
    3aa4:	40048000 	.word	0x40048000

00003aa8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3aa8:	b084      	sub	sp, #16
    3aaa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3aac:	4b0a      	ldr	r3, [pc, #40]	; (3ad8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3aae:	795b      	ldrb	r3, [r3, #5]
    3ab0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3ab2:	4b0a      	ldr	r3, [pc, #40]	; (3adc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3ab4:	6a1b      	ldr	r3, [r3, #32]
    3ab6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3ab8:	9b02      	ldr	r3, [sp, #8]
    3aba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3abe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3ac0:	9b03      	ldr	r3, [sp, #12]
    3ac2:	061b      	lsls	r3, r3, #24
    3ac4:	9a02      	ldr	r2, [sp, #8]
    3ac6:	4313      	orrs	r3, r2
    3ac8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3aca:	4a04      	ldr	r2, [pc, #16]	; (3adc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3acc:	9b02      	ldr	r3, [sp, #8]
    3ace:	6213      	str	r3, [r2, #32]
}
    3ad0:	bf00      	nop
    3ad2:	b004      	add	sp, #16
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop
    3ad8:	0000c64c 	.word	0x0000c64c
    3adc:	40064000 	.word	0x40064000

00003ae0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ae0:	b084      	sub	sp, #16
    3ae2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ae4:	9b01      	ldr	r3, [sp, #4]
    3ae6:	685b      	ldr	r3, [r3, #4]
    3ae8:	4a0a      	ldr	r2, [pc, #40]	; (3b14 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3aea:	5cd3      	ldrb	r3, [r2, r3]
    3aec:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3aee:	4b0a      	ldr	r3, [pc, #40]	; (3b18 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3af0:	6a1b      	ldr	r3, [r3, #32]
    3af2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3af4:	9b02      	ldr	r3, [sp, #8]
    3af6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3afa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3afc:	9b03      	ldr	r3, [sp, #12]
    3afe:	061b      	lsls	r3, r3, #24
    3b00:	9a02      	ldr	r2, [sp, #8]
    3b02:	4313      	orrs	r3, r2
    3b04:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b06:	4a04      	ldr	r2, [pc, #16]	; (3b18 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b08:	9b02      	ldr	r3, [sp, #8]
    3b0a:	6213      	str	r3, [r2, #32]
}
    3b0c:	bf00      	nop
    3b0e:	b004      	add	sp, #16
    3b10:	4770      	bx	lr
    3b12:	bf00      	nop
    3b14:	0000c64c 	.word	0x0000c64c
    3b18:	40064000 	.word	0x40064000

00003b1c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b1c:	b086      	sub	sp, #24
    3b1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b20:	4b20      	ldr	r3, [pc, #128]	; (3ba4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b22:	795b      	ldrb	r3, [r3, #5]
    3b24:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b26:	9b01      	ldr	r3, [sp, #4]
    3b28:	681a      	ldr	r2, [r3, #0]
    3b2a:	491f      	ldr	r1, [pc, #124]	; (3ba8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3b2c:	4613      	mov	r3, r2
    3b2e:	00db      	lsls	r3, r3, #3
    3b30:	4413      	add	r3, r2
    3b32:	440b      	add	r3, r1
    3b34:	781b      	ldrb	r3, [r3, #0]
    3b36:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3b38:	4b1c      	ldr	r3, [pc, #112]	; (3bac <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b3a:	68db      	ldr	r3, [r3, #12]
    3b3c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3b3e:	9b03      	ldr	r3, [sp, #12]
    3b40:	2b03      	cmp	r3, #3
    3b42:	d813      	bhi.n	3b6c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3b44:	9b03      	ldr	r3, [sp, #12]
    3b46:	005b      	lsls	r3, r3, #1
    3b48:	3318      	adds	r3, #24
    3b4a:	2203      	movs	r2, #3
    3b4c:	fa02 f303 	lsl.w	r3, r2, r3
    3b50:	43db      	mvns	r3, r3
    3b52:	9a05      	ldr	r2, [sp, #20]
    3b54:	4013      	ands	r3, r2
    3b56:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3b58:	9b03      	ldr	r3, [sp, #12]
    3b5a:	005b      	lsls	r3, r3, #1
    3b5c:	3318      	adds	r3, #24
    3b5e:	9a04      	ldr	r2, [sp, #16]
    3b60:	fa02 f303 	lsl.w	r3, r2, r3
    3b64:	9a05      	ldr	r2, [sp, #20]
    3b66:	4313      	orrs	r3, r2
    3b68:	9305      	str	r3, [sp, #20]
    3b6a:	e014      	b.n	3b96 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3b6c:	9b03      	ldr	r3, [sp, #12]
    3b6e:	3b04      	subs	r3, #4
    3b70:	005b      	lsls	r3, r3, #1
    3b72:	3310      	adds	r3, #16
    3b74:	2203      	movs	r2, #3
    3b76:	fa02 f303 	lsl.w	r3, r2, r3
    3b7a:	43db      	mvns	r3, r3
    3b7c:	9a05      	ldr	r2, [sp, #20]
    3b7e:	4013      	ands	r3, r2
    3b80:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3b82:	9b03      	ldr	r3, [sp, #12]
    3b84:	3b04      	subs	r3, #4
    3b86:	005b      	lsls	r3, r3, #1
    3b88:	3310      	adds	r3, #16
    3b8a:	9a04      	ldr	r2, [sp, #16]
    3b8c:	fa02 f303 	lsl.w	r3, r2, r3
    3b90:	9a05      	ldr	r2, [sp, #20]
    3b92:	4313      	orrs	r3, r2
    3b94:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3b96:	4a05      	ldr	r2, [pc, #20]	; (3bac <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b98:	9b05      	ldr	r3, [sp, #20]
    3b9a:	60d3      	str	r3, [r2, #12]
}
    3b9c:	bf00      	nop
    3b9e:	b006      	add	sp, #24
    3ba0:	4770      	bx	lr
    3ba2:	bf00      	nop
    3ba4:	0000c5f4 	.word	0x0000c5f4
    3ba8:	0000c2e4 	.word	0x0000c2e4
    3bac:	40048000 	.word	0x40048000

00003bb0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bb0:	b086      	sub	sp, #24
    3bb2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bb4:	9b01      	ldr	r3, [sp, #4]
    3bb6:	685b      	ldr	r3, [r3, #4]
    3bb8:	4a20      	ldr	r2, [pc, #128]	; (3c3c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3bba:	5cd3      	ldrb	r3, [r2, r3]
    3bbc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	681a      	ldr	r2, [r3, #0]
    3bc2:	491f      	ldr	r1, [pc, #124]	; (3c40 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3bc4:	4613      	mov	r3, r2
    3bc6:	00db      	lsls	r3, r3, #3
    3bc8:	4413      	add	r3, r2
    3bca:	440b      	add	r3, r1
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3bd0:	4b1c      	ldr	r3, [pc, #112]	; (3c44 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3bd2:	68db      	ldr	r3, [r3, #12]
    3bd4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3bd6:	9b03      	ldr	r3, [sp, #12]
    3bd8:	2b03      	cmp	r3, #3
    3bda:	d813      	bhi.n	3c04 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3bdc:	9b03      	ldr	r3, [sp, #12]
    3bde:	005b      	lsls	r3, r3, #1
    3be0:	3318      	adds	r3, #24
    3be2:	2203      	movs	r2, #3
    3be4:	fa02 f303 	lsl.w	r3, r2, r3
    3be8:	43db      	mvns	r3, r3
    3bea:	9a05      	ldr	r2, [sp, #20]
    3bec:	4013      	ands	r3, r2
    3bee:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3bf0:	9b03      	ldr	r3, [sp, #12]
    3bf2:	005b      	lsls	r3, r3, #1
    3bf4:	3318      	adds	r3, #24
    3bf6:	9a04      	ldr	r2, [sp, #16]
    3bf8:	fa02 f303 	lsl.w	r3, r2, r3
    3bfc:	9a05      	ldr	r2, [sp, #20]
    3bfe:	4313      	orrs	r3, r2
    3c00:	9305      	str	r3, [sp, #20]
    3c02:	e014      	b.n	3c2e <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c04:	9b03      	ldr	r3, [sp, #12]
    3c06:	3b04      	subs	r3, #4
    3c08:	005b      	lsls	r3, r3, #1
    3c0a:	3310      	adds	r3, #16
    3c0c:	2203      	movs	r2, #3
    3c0e:	fa02 f303 	lsl.w	r3, r2, r3
    3c12:	43db      	mvns	r3, r3
    3c14:	9a05      	ldr	r2, [sp, #20]
    3c16:	4013      	ands	r3, r2
    3c18:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c1a:	9b03      	ldr	r3, [sp, #12]
    3c1c:	3b04      	subs	r3, #4
    3c1e:	005b      	lsls	r3, r3, #1
    3c20:	3310      	adds	r3, #16
    3c22:	9a04      	ldr	r2, [sp, #16]
    3c24:	fa02 f303 	lsl.w	r3, r2, r3
    3c28:	9a05      	ldr	r2, [sp, #20]
    3c2a:	4313      	orrs	r3, r2
    3c2c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c2e:	4a05      	ldr	r2, [pc, #20]	; (3c44 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c30:	9b05      	ldr	r3, [sp, #20]
    3c32:	60d3      	str	r3, [r2, #12]
}
    3c34:	bf00      	nop
    3c36:	b006      	add	sp, #24
    3c38:	4770      	bx	lr
    3c3a:	bf00      	nop
    3c3c:	0000c5f4 	.word	0x0000c5f4
    3c40:	0000c2e4 	.word	0x0000c2e4
    3c44:	40048000 	.word	0x40048000

00003c48 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c48:	b084      	sub	sp, #16
    3c4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3c4c:	4b06      	ldr	r3, [pc, #24]	; (3c68 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c4e:	685b      	ldr	r3, [r3, #4]
    3c50:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3c52:	9b03      	ldr	r3, [sp, #12]
    3c54:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3c58:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c5a:	4a03      	ldr	r2, [pc, #12]	; (3c68 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c5c:	9b03      	ldr	r3, [sp, #12]
    3c5e:	6053      	str	r3, [r2, #4]
}
    3c60:	bf00      	nop
    3c62:	b004      	add	sp, #16
    3c64:	4770      	bx	lr
    3c66:	bf00      	nop
    3c68:	40048000 	.word	0x40048000

00003c6c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c6c:	b084      	sub	sp, #16
    3c6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c70:	9b01      	ldr	r3, [sp, #4]
    3c72:	685b      	ldr	r3, [r3, #4]
    3c74:	4a0a      	ldr	r2, [pc, #40]	; (3ca0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3c76:	5cd3      	ldrb	r3, [r2, r3]
    3c78:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3c7a:	4b0a      	ldr	r3, [pc, #40]	; (3ca4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c7c:	685b      	ldr	r3, [r3, #4]
    3c7e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3c80:	9b02      	ldr	r3, [sp, #8]
    3c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3c86:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3c88:	9b03      	ldr	r3, [sp, #12]
    3c8a:	011b      	lsls	r3, r3, #4
    3c8c:	9a02      	ldr	r2, [sp, #8]
    3c8e:	4313      	orrs	r3, r2
    3c90:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3c92:	4a04      	ldr	r2, [pc, #16]	; (3ca4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c94:	9b02      	ldr	r3, [sp, #8]
    3c96:	6053      	str	r3, [r2, #4]
}
    3c98:	bf00      	nop
    3c9a:	b004      	add	sp, #16
    3c9c:	4770      	bx	lr
    3c9e:	bf00      	nop
    3ca0:	0000c5f4 	.word	0x0000c5f4
    3ca4:	40048000 	.word	0x40048000

00003ca8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ca8:	b084      	sub	sp, #16
    3caa:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3cac:	9b01      	ldr	r3, [sp, #4]
    3cae:	681a      	ldr	r2, [r3, #0]
    3cb0:	490f      	ldr	r1, [pc, #60]	; (3cf0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3cb2:	4613      	mov	r3, r2
    3cb4:	00db      	lsls	r3, r3, #3
    3cb6:	4413      	add	r3, r2
    3cb8:	440b      	add	r3, r1
    3cba:	3304      	adds	r3, #4
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3cc0:	4a0c      	ldr	r2, [pc, #48]	; (3cf4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cc2:	9b03      	ldr	r3, [sp, #12]
    3cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cc8:	490a      	ldr	r1, [pc, #40]	; (3cf4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3cce:	9b03      	ldr	r3, [sp, #12]
    3cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3cd4:	4a07      	ldr	r2, [pc, #28]	; (3cf4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cd6:	9b03      	ldr	r3, [sp, #12]
    3cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cdc:	4905      	ldr	r1, [pc, #20]	; (3cf4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cde:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3ce2:	9b03      	ldr	r3, [sp, #12]
    3ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3ce8:	bf00      	nop
    3cea:	b004      	add	sp, #16
    3cec:	4770      	bx	lr
    3cee:	bf00      	nop
    3cf0:	0000c2e4 	.word	0x0000c2e4
    3cf4:	40065000 	.word	0x40065000

00003cf8 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cf8:	b086      	sub	sp, #24
    3cfa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3cfc:	9b01      	ldr	r3, [sp, #4]
    3cfe:	681a      	ldr	r2, [r3, #0]
    3d00:	4912      	ldr	r1, [pc, #72]	; (3d4c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3d02:	4613      	mov	r3, r2
    3d04:	00db      	lsls	r3, r3, #3
    3d06:	4413      	add	r3, r2
    3d08:	440b      	add	r3, r1
    3d0a:	3304      	adds	r3, #4
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d10:	9b01      	ldr	r3, [sp, #4]
    3d12:	685b      	ldr	r3, [r3, #4]
    3d14:	4a0e      	ldr	r2, [pc, #56]	; (3d50 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d16:	5cd3      	ldrb	r3, [r2, r3]
    3d18:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d1a:	4a0e      	ldr	r2, [pc, #56]	; (3d54 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d1c:	9b05      	ldr	r3, [sp, #20]
    3d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d22:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d24:	9b03      	ldr	r3, [sp, #12]
    3d26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3d2a:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3d2c:	9b04      	ldr	r3, [sp, #16]
    3d2e:	061b      	lsls	r3, r3, #24
    3d30:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3d34:	9a03      	ldr	r2, [sp, #12]
    3d36:	4313      	orrs	r3, r2
    3d38:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3d3a:	4906      	ldr	r1, [pc, #24]	; (3d54 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d3c:	9b05      	ldr	r3, [sp, #20]
    3d3e:	9a03      	ldr	r2, [sp, #12]
    3d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d44:	bf00      	nop
    3d46:	b006      	add	sp, #24
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop
    3d4c:	0000c2e4 	.word	0x0000c2e4
    3d50:	0000c67c 	.word	0x0000c67c
    3d54:	40065000 	.word	0x40065000

00003d58 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d58:	b084      	sub	sp, #16
    3d5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d5c:	4b0b      	ldr	r3, [pc, #44]	; (3d8c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3d5e:	7f1b      	ldrb	r3, [r3, #28]
    3d60:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3d62:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d64:	685b      	ldr	r3, [r3, #4]
    3d66:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3d68:	9b02      	ldr	r3, [sp, #8]
    3d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3d6e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3d70:	9b03      	ldr	r3, [sp, #12]
    3d72:	031b      	lsls	r3, r3, #12
    3d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d78:	9a02      	ldr	r2, [sp, #8]
    3d7a:	4313      	orrs	r3, r2
    3d7c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3d7e:	4a04      	ldr	r2, [pc, #16]	; (3d90 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d80:	9b02      	ldr	r3, [sp, #8]
    3d82:	6053      	str	r3, [r2, #4]
}
    3d84:	bf00      	nop
    3d86:	b004      	add	sp, #16
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop
    3d8c:	0000c5f4 	.word	0x0000c5f4
    3d90:	40048000 	.word	0x40048000

00003d94 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d94:	b084      	sub	sp, #16
    3d96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d98:	9b01      	ldr	r3, [sp, #4]
    3d9a:	685b      	ldr	r3, [r3, #4]
    3d9c:	4a0b      	ldr	r2, [pc, #44]	; (3dcc <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3d9e:	5cd3      	ldrb	r3, [r2, r3]
    3da0:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3da2:	4b0b      	ldr	r3, [pc, #44]	; (3dd0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3da4:	685b      	ldr	r3, [r3, #4]
    3da6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3da8:	9b02      	ldr	r3, [sp, #8]
    3daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3dae:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3db0:	9b03      	ldr	r3, [sp, #12]
    3db2:	031b      	lsls	r3, r3, #12
    3db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3db8:	9a02      	ldr	r2, [sp, #8]
    3dba:	4313      	orrs	r3, r2
    3dbc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3dbe:	4a04      	ldr	r2, [pc, #16]	; (3dd0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dc0:	9b02      	ldr	r3, [sp, #8]
    3dc2:	6053      	str	r3, [r2, #4]
}
    3dc4:	bf00      	nop
    3dc6:	b004      	add	sp, #16
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop
    3dcc:	0000c5f4 	.word	0x0000c5f4
    3dd0:	40048000 	.word	0x40048000

00003dd4 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3dd4:	b500      	push	{lr}
    3dd6:	b085      	sub	sp, #20
    3dd8:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3dda:	2300      	movs	r3, #0
    3ddc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3de0:	9b01      	ldr	r3, [sp, #4]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d037      	beq.n	3e56 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3de6:	2300      	movs	r3, #0
    3de8:	9303      	str	r3, [sp, #12]
    3dea:	e02b      	b.n	3e44 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3dec:	4b29      	ldr	r3, [pc, #164]	; (3e94 <DisableSafeClock+0xc0>)
    3dee:	6819      	ldr	r1, [r3, #0]
    3df0:	9a03      	ldr	r2, [sp, #12]
    3df2:	4613      	mov	r3, r2
    3df4:	005b      	lsls	r3, r3, #1
    3df6:	4413      	add	r3, r2
    3df8:	009b      	lsls	r3, r3, #2
    3dfa:	440b      	add	r3, r1
    3dfc:	3314      	adds	r3, #20
    3dfe:	681b      	ldr	r3, [r3, #0]
    3e00:	2b05      	cmp	r3, #5
    3e02:	d11c      	bne.n	3e3e <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3e04:	2301      	movs	r3, #1
    3e06:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3e0a:	4b22      	ldr	r3, [pc, #136]	; (3e94 <DisableSafeClock+0xc0>)
    3e0c:	6819      	ldr	r1, [r3, #0]
    3e0e:	9a03      	ldr	r2, [sp, #12]
    3e10:	4613      	mov	r3, r2
    3e12:	005b      	lsls	r3, r3, #1
    3e14:	4413      	add	r3, r2
    3e16:	009b      	lsls	r3, r3, #2
    3e18:	440b      	add	r3, r1
    3e1a:	3318      	adds	r3, #24
    3e1c:	881b      	ldrh	r3, [r3, #0]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d118      	bne.n	3e54 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e22:	4b1d      	ldr	r3, [pc, #116]	; (3e98 <DisableSafeClock+0xc4>)
    3e24:	791b      	ldrb	r3, [r3, #4]
    3e26:	4619      	mov	r1, r3
    3e28:	4a1c      	ldr	r2, [pc, #112]	; (3e9c <DisableSafeClock+0xc8>)
    3e2a:	460b      	mov	r3, r1
    3e2c:	005b      	lsls	r3, r3, #1
    3e2e:	440b      	add	r3, r1
    3e30:	009b      	lsls	r3, r3, #2
    3e32:	4413      	add	r3, r2
    3e34:	3308      	adds	r3, #8
    3e36:	681b      	ldr	r3, [r3, #0]
    3e38:	2005      	movs	r0, #5
    3e3a:	4798      	blx	r3
                }
                break;
    3e3c:	e00a      	b.n	3e54 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e3e:	9b03      	ldr	r3, [sp, #12]
    3e40:	3301      	adds	r3, #1
    3e42:	9303      	str	r3, [sp, #12]
    3e44:	4b13      	ldr	r3, [pc, #76]	; (3e94 <DisableSafeClock+0xc0>)
    3e46:	681b      	ldr	r3, [r3, #0]
    3e48:	7a1b      	ldrb	r3, [r3, #8]
    3e4a:	461a      	mov	r2, r3
    3e4c:	9b03      	ldr	r3, [sp, #12]
    3e4e:	4293      	cmp	r3, r2
    3e50:	d3cc      	bcc.n	3dec <DisableSafeClock+0x18>
    3e52:	e000      	b.n	3e56 <DisableSafeClock+0x82>
                break;
    3e54:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3e56:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3e5a:	f083 0301 	eor.w	r3, r3, #1
    3e5e:	b2db      	uxtb	r3, r3
    3e60:	2b00      	cmp	r3, #0
    3e62:	d013      	beq.n	3e8c <DisableSafeClock+0xb8>
    3e64:	4b0e      	ldr	r3, [pc, #56]	; (3ea0 <DisableSafeClock+0xcc>)
    3e66:	781b      	ldrb	r3, [r3, #0]
    3e68:	f083 0301 	eor.w	r3, r3, #1
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d00c      	beq.n	3e8c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e72:	4b09      	ldr	r3, [pc, #36]	; (3e98 <DisableSafeClock+0xc4>)
    3e74:	791b      	ldrb	r3, [r3, #4]
    3e76:	4619      	mov	r1, r3
    3e78:	4a08      	ldr	r2, [pc, #32]	; (3e9c <DisableSafeClock+0xc8>)
    3e7a:	460b      	mov	r3, r1
    3e7c:	005b      	lsls	r3, r3, #1
    3e7e:	440b      	add	r3, r1
    3e80:	009b      	lsls	r3, r3, #2
    3e82:	4413      	add	r3, r2
    3e84:	3308      	adds	r3, #8
    3e86:	681b      	ldr	r3, [r3, #0]
    3e88:	2005      	movs	r0, #5
    3e8a:	4798      	blx	r3
    }
}
    3e8c:	bf00      	nop
    3e8e:	b005      	add	sp, #20
    3e90:	f85d fb04 	ldr.w	pc, [sp], #4
    3e94:	1fff8b9c 	.word	0x1fff8b9c
    3e98:	0000c274 	.word	0x0000c274
    3e9c:	0000c8a4 	.word	0x0000c8a4
    3ea0:	1fff8b20 	.word	0x1fff8b20

00003ea4 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3ea4:	4b06      	ldr	r3, [pc, #24]	; (3ec0 <SetFircToResetValue_TrustedCall+0x1c>)
    3ea6:	2200      	movs	r2, #0
    3ea8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3eac:	4b04      	ldr	r3, [pc, #16]	; (3ec0 <SetFircToResetValue_TrustedCall+0x1c>)
    3eae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3eb2:	4a03      	ldr	r2, [pc, #12]	; (3ec0 <SetFircToResetValue_TrustedCall+0x1c>)
    3eb4:	f043 0301 	orr.w	r3, r3, #1
    3eb8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ebc:	bf00      	nop
    3ebe:	4770      	bx	lr
    3ec0:	40064000 	.word	0x40064000

00003ec4 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3ec4:	b084      	sub	sp, #16
    3ec6:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3ec8:	2303      	movs	r3, #3
    3eca:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3ecc:	2300      	movs	r3, #0
    3ece:	9302      	str	r3, [sp, #8]
    3ed0:	e028      	b.n	3f24 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3ed2:	9b01      	ldr	r3, [sp, #4]
    3ed4:	9a02      	ldr	r2, [sp, #8]
    3ed6:	320d      	adds	r2, #13
    3ed8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3edc:	2b28      	cmp	r3, #40	; 0x28
    3ede:	d10b      	bne.n	3ef8 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ee0:	9a01      	ldr	r2, [sp, #4]
    3ee2:	9b02      	ldr	r3, [sp, #8]
    3ee4:	330d      	adds	r3, #13
    3ee6:	00db      	lsls	r3, r3, #3
    3ee8:	4413      	add	r3, r2
    3eea:	685b      	ldr	r3, [r3, #4]
    3eec:	4a2b      	ldr	r2, [pc, #172]	; (3f9c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3eee:	5cd3      	ldrb	r3, [r2, r3]
    3ef0:	011b      	lsls	r3, r3, #4
    3ef2:	9a03      	ldr	r2, [sp, #12]
    3ef4:	4313      	orrs	r3, r2
    3ef6:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3ef8:	9b01      	ldr	r3, [sp, #4]
    3efa:	9a02      	ldr	r2, [sp, #8]
    3efc:	320d      	adds	r2, #13
    3efe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f02:	2b29      	cmp	r3, #41	; 0x29
    3f04:	d10b      	bne.n	3f1e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f06:	9a01      	ldr	r2, [sp, #4]
    3f08:	9b02      	ldr	r3, [sp, #8]
    3f0a:	330d      	adds	r3, #13
    3f0c:	00db      	lsls	r3, r3, #3
    3f0e:	4413      	add	r3, r2
    3f10:	685b      	ldr	r3, [r3, #4]
    3f12:	4a23      	ldr	r2, [pc, #140]	; (3fa0 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f14:	5cd3      	ldrb	r3, [r2, r3]
    3f16:	009b      	lsls	r3, r3, #2
    3f18:	9a03      	ldr	r2, [sp, #12]
    3f1a:	4313      	orrs	r3, r2
    3f1c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f1e:	9b02      	ldr	r3, [sp, #8]
    3f20:	3301      	adds	r3, #1
    3f22:	9302      	str	r3, [sp, #8]
    3f24:	9b01      	ldr	r3, [sp, #4]
    3f26:	7adb      	ldrb	r3, [r3, #11]
    3f28:	461a      	mov	r2, r3
    3f2a:	9b02      	ldr	r3, [sp, #8]
    3f2c:	4293      	cmp	r3, r2
    3f2e:	d3d0      	bcc.n	3ed2 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f30:	2300      	movs	r3, #0
    3f32:	9302      	str	r3, [sp, #8]
    3f34:	e026      	b.n	3f84 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3f36:	9a01      	ldr	r2, [sp, #4]
    3f38:	9b02      	ldr	r3, [sp, #8]
    3f3a:	334e      	adds	r3, #78	; 0x4e
    3f3c:	00db      	lsls	r3, r3, #3
    3f3e:	4413      	add	r3, r2
    3f40:	685b      	ldr	r3, [r3, #4]
    3f42:	2b12      	cmp	r3, #18
    3f44:	d109      	bne.n	3f5a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3f46:	9a01      	ldr	r2, [sp, #4]
    3f48:	9b02      	ldr	r3, [sp, #8]
    3f4a:	334e      	adds	r3, #78	; 0x4e
    3f4c:	00db      	lsls	r3, r3, #3
    3f4e:	4413      	add	r3, r2
    3f50:	891b      	ldrh	r3, [r3, #8]
    3f52:	005b      	lsls	r3, r3, #1
    3f54:	9a03      	ldr	r2, [sp, #12]
    3f56:	4313      	orrs	r3, r2
    3f58:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3f5a:	9a01      	ldr	r2, [sp, #4]
    3f5c:	9b02      	ldr	r3, [sp, #8]
    3f5e:	334e      	adds	r3, #78	; 0x4e
    3f60:	00db      	lsls	r3, r3, #3
    3f62:	4413      	add	r3, r2
    3f64:	685b      	ldr	r3, [r3, #4]
    3f66:	2b13      	cmp	r3, #19
    3f68:	d109      	bne.n	3f7e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3f6a:	9a01      	ldr	r2, [sp, #4]
    3f6c:	9b02      	ldr	r3, [sp, #8]
    3f6e:	334e      	adds	r3, #78	; 0x4e
    3f70:	00db      	lsls	r3, r3, #3
    3f72:	4413      	add	r3, r2
    3f74:	891b      	ldrh	r3, [r3, #8]
    3f76:	461a      	mov	r2, r3
    3f78:	9b03      	ldr	r3, [sp, #12]
    3f7a:	4313      	orrs	r3, r2
    3f7c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f7e:	9b02      	ldr	r3, [sp, #8]
    3f80:	3301      	adds	r3, #1
    3f82:	9302      	str	r3, [sp, #8]
    3f84:	9b01      	ldr	r3, [sp, #4]
    3f86:	7c1b      	ldrb	r3, [r3, #16]
    3f88:	461a      	mov	r2, r3
    3f8a:	9b02      	ldr	r3, [sp, #8]
    3f8c:	4293      	cmp	r3, r2
    3f8e:	d3d2      	bcc.n	3f36 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3f90:	4a04      	ldr	r2, [pc, #16]	; (3fa4 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3f92:	9b03      	ldr	r3, [sp, #12]
    3f94:	6113      	str	r3, [r2, #16]
}
    3f96:	bf00      	nop
    3f98:	b004      	add	sp, #16
    3f9a:	4770      	bx	lr
    3f9c:	0000c5f4 	.word	0x0000c5f4
    3fa0:	0000c6ac 	.word	0x0000c6ac
    3fa4:	40048000 	.word	0x40048000

00003fa8 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3fa8:	b500      	push	{lr}
    3faa:	b089      	sub	sp, #36	; 0x24
    3fac:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3fae:	2300      	movs	r3, #0
    3fb0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3fb4:	4a21      	ldr	r2, [pc, #132]	; (403c <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3fb6:	9b01      	ldr	r3, [sp, #4]
    3fb8:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3fba:	4b21      	ldr	r3, [pc, #132]	; (4040 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fbc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fc0:	f003 0301 	and.w	r3, r3, #1
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d12e      	bne.n	4026 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3fc8:	4b1e      	ldr	r3, [pc, #120]	; (4044 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3fca:	2200      	movs	r2, #0
    3fcc:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3fce:	f7ff ff69 	bl	3ea4 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fd2:	aa03      	add	r2, sp, #12
    3fd4:	a904      	add	r1, sp, #16
    3fd6:	a805      	add	r0, sp, #20
    3fd8:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fdc:	f7fe f8ae 	bl	213c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3fe0:	4b17      	ldr	r3, [pc, #92]	; (4040 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fe6:	0e1b      	lsrs	r3, r3, #24
    3fe8:	f003 0301 	and.w	r3, r3, #1
    3fec:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3fee:	9a03      	ldr	r2, [sp, #12]
    3ff0:	a904      	add	r1, sp, #16
    3ff2:	ab05      	add	r3, sp, #20
    3ff4:	4618      	mov	r0, r3
    3ff6:	f7fe f8bb 	bl	2170 <Clock_Ip_TimeoutExpired>
    3ffa:	4603      	mov	r3, r0
    3ffc:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4000:	9b06      	ldr	r3, [sp, #24]
    4002:	2b00      	cmp	r3, #0
    4004:	d106      	bne.n	4014 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4006:	f89d 301f 	ldrb.w	r3, [sp, #31]
    400a:	f083 0301 	eor.w	r3, r3, #1
    400e:	b2db      	uxtb	r3, r3
    4010:	2b00      	cmp	r3, #0
    4012:	d1e5      	bne.n	3fe0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4014:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4018:	2b00      	cmp	r3, #0
    401a:	d007      	beq.n	402c <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    401c:	2105      	movs	r1, #5
    401e:	2001      	movs	r0, #1
    4020:	f7fe f87c 	bl	211c <Clock_Ip_ReportClockErrors>
    4024:	e002      	b.n	402c <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4026:	4b07      	ldr	r3, [pc, #28]	; (4044 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4028:	2201      	movs	r2, #1
    402a:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    402c:	9801      	ldr	r0, [sp, #4]
    402e:	f7ff ff49 	bl	3ec4 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4032:	bf00      	nop
    4034:	b009      	add	sp, #36	; 0x24
    4036:	f85d fb04 	ldr.w	pc, [sp], #4
    403a:	bf00      	nop
    403c:	1fff8b9c 	.word	0x1fff8b9c
    4040:	40064000 	.word	0x40064000
    4044:	1fff8b20 	.word	0x1fff8b20

00004048 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4048:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    404a:	2300      	movs	r3, #0
    404c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    404e:	4b29      	ldr	r3, [pc, #164]	; (40f4 <getFircConfig+0xac>)
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	2b00      	cmp	r3, #0
    4054:	d024      	beq.n	40a0 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4056:	2300      	movs	r3, #0
    4058:	9301      	str	r3, [sp, #4]
    405a:	e01a      	b.n	4092 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    405c:	4b25      	ldr	r3, [pc, #148]	; (40f4 <getFircConfig+0xac>)
    405e:	6819      	ldr	r1, [r3, #0]
    4060:	9a01      	ldr	r2, [sp, #4]
    4062:	4613      	mov	r3, r2
    4064:	005b      	lsls	r3, r3, #1
    4066:	4413      	add	r3, r2
    4068:	009b      	lsls	r3, r3, #2
    406a:	440b      	add	r3, r1
    406c:	3314      	adds	r3, #20
    406e:	681b      	ldr	r3, [r3, #0]
    4070:	2b05      	cmp	r3, #5
    4072:	d10b      	bne.n	408c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4074:	4b1f      	ldr	r3, [pc, #124]	; (40f4 <getFircConfig+0xac>)
    4076:	6819      	ldr	r1, [r3, #0]
    4078:	9a01      	ldr	r2, [sp, #4]
    407a:	4613      	mov	r3, r2
    407c:	005b      	lsls	r3, r3, #1
    407e:	4413      	add	r3, r2
    4080:	009b      	lsls	r3, r3, #2
    4082:	3310      	adds	r3, #16
    4084:	440b      	add	r3, r1
    4086:	3304      	adds	r3, #4
    4088:	9300      	str	r3, [sp, #0]
                break;
    408a:	e009      	b.n	40a0 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    408c:	9b01      	ldr	r3, [sp, #4]
    408e:	3301      	adds	r3, #1
    4090:	9301      	str	r3, [sp, #4]
    4092:	4b18      	ldr	r3, [pc, #96]	; (40f4 <getFircConfig+0xac>)
    4094:	681b      	ldr	r3, [r3, #0]
    4096:	7a1b      	ldrb	r3, [r3, #8]
    4098:	461a      	mov	r2, r3
    409a:	9b01      	ldr	r3, [sp, #4]
    409c:	4293      	cmp	r3, r2
    409e:	d3dd      	bcc.n	405c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40a0:	9b00      	ldr	r3, [sp, #0]
    40a2:	2b00      	cmp	r3, #0
    40a4:	d121      	bne.n	40ea <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    40a6:	4b14      	ldr	r3, [pc, #80]	; (40f8 <getFircConfig+0xb0>)
    40a8:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    40aa:	4b13      	ldr	r3, [pc, #76]	; (40f8 <getFircConfig+0xb0>)
    40ac:	2205      	movs	r2, #5
    40ae:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    40b0:	4b12      	ldr	r3, [pc, #72]	; (40fc <getFircConfig+0xb4>)
    40b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40b6:	b29b      	uxth	r3, r3
    40b8:	f003 0301 	and.w	r3, r3, #1
    40bc:	b29a      	uxth	r2, r3
    40be:	4b0e      	ldr	r3, [pc, #56]	; (40f8 <getFircConfig+0xb0>)
    40c0:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    40c2:	4b0e      	ldr	r3, [pc, #56]	; (40fc <getFircConfig+0xb4>)
    40c4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    40c8:	b2db      	uxtb	r3, r3
    40ca:	f003 0303 	and.w	r3, r3, #3
    40ce:	b2da      	uxtb	r2, r3
    40d0:	4b09      	ldr	r3, [pc, #36]	; (40f8 <getFircConfig+0xb0>)
    40d2:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    40d4:	4b09      	ldr	r3, [pc, #36]	; (40fc <getFircConfig+0xb4>)
    40d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40da:	b2db      	uxtb	r3, r3
    40dc:	10db      	asrs	r3, r3, #3
    40de:	b2db      	uxtb	r3, r3
    40e0:	f003 0301 	and.w	r3, r3, #1
    40e4:	b2da      	uxtb	r2, r3
    40e6:	4b04      	ldr	r3, [pc, #16]	; (40f8 <getFircConfig+0xb0>)
    40e8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    40ea:	9b00      	ldr	r3, [sp, #0]
}
    40ec:	4618      	mov	r0, r3
    40ee:	b002      	add	sp, #8
    40f0:	4770      	bx	lr
    40f2:	bf00      	nop
    40f4:	1fff8b9c 	.word	0x1fff8b9c
    40f8:	1fff8c08 	.word	0x1fff8c08
    40fc:	40064000 	.word	0x40064000

00004100 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4100:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4102:	2300      	movs	r3, #0
    4104:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4106:	4b20      	ldr	r3, [pc, #128]	; (4188 <getSoscConfig+0x88>)
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	2b00      	cmp	r3, #0
    410c:	d024      	beq.n	4158 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    410e:	2300      	movs	r3, #0
    4110:	9301      	str	r3, [sp, #4]
    4112:	e01a      	b.n	414a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4114:	4b1c      	ldr	r3, [pc, #112]	; (4188 <getSoscConfig+0x88>)
    4116:	6819      	ldr	r1, [r3, #0]
    4118:	9a01      	ldr	r2, [sp, #4]
    411a:	4613      	mov	r3, r2
    411c:	009b      	lsls	r3, r3, #2
    411e:	4413      	add	r3, r2
    4120:	009b      	lsls	r3, r3, #2
    4122:	440b      	add	r3, r1
    4124:	332c      	adds	r3, #44	; 0x2c
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	2b08      	cmp	r3, #8
    412a:	d10b      	bne.n	4144 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    412c:	4b16      	ldr	r3, [pc, #88]	; (4188 <getSoscConfig+0x88>)
    412e:	6819      	ldr	r1, [r3, #0]
    4130:	9a01      	ldr	r2, [sp, #4]
    4132:	4613      	mov	r3, r2
    4134:	009b      	lsls	r3, r3, #2
    4136:	4413      	add	r3, r2
    4138:	009b      	lsls	r3, r3, #2
    413a:	3328      	adds	r3, #40	; 0x28
    413c:	440b      	add	r3, r1
    413e:	3304      	adds	r3, #4
    4140:	9300      	str	r3, [sp, #0]
                break;
    4142:	e009      	b.n	4158 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4144:	9b01      	ldr	r3, [sp, #4]
    4146:	3301      	adds	r3, #1
    4148:	9301      	str	r3, [sp, #4]
    414a:	4b0f      	ldr	r3, [pc, #60]	; (4188 <getSoscConfig+0x88>)
    414c:	681b      	ldr	r3, [r3, #0]
    414e:	7a5b      	ldrb	r3, [r3, #9]
    4150:	461a      	mov	r2, r3
    4152:	9b01      	ldr	r3, [sp, #4]
    4154:	4293      	cmp	r3, r2
    4156:	d3dd      	bcc.n	4114 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4158:	9b00      	ldr	r3, [sp, #0]
    415a:	2b00      	cmp	r3, #0
    415c:	d110      	bne.n	4180 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    415e:	4b0b      	ldr	r3, [pc, #44]	; (418c <getSoscConfig+0x8c>)
    4160:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4162:	4b0a      	ldr	r3, [pc, #40]	; (418c <getSoscConfig+0x8c>)
    4164:	2208      	movs	r2, #8
    4166:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4168:	4b09      	ldr	r3, [pc, #36]	; (4190 <getSoscConfig+0x90>)
    416a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    416e:	b29b      	uxth	r3, r3
    4170:	f003 0301 	and.w	r3, r3, #1
    4174:	b29a      	uxth	r2, r3
    4176:	4b05      	ldr	r3, [pc, #20]	; (418c <getSoscConfig+0x8c>)
    4178:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    417a:	4b04      	ldr	r3, [pc, #16]	; (418c <getSoscConfig+0x8c>)
    417c:	4a05      	ldr	r2, [pc, #20]	; (4194 <getSoscConfig+0x94>)
    417e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4180:	9b00      	ldr	r3, [sp, #0]
}
    4182:	4618      	mov	r0, r3
    4184:	b002      	add	sp, #8
    4186:	4770      	bx	lr
    4188:	1fff8b9c 	.word	0x1fff8b9c
    418c:	1fff8c14 	.word	0x1fff8c14
    4190:	40064000 	.word	0x40064000
    4194:	02625a00 	.word	0x02625a00

00004198 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4198:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    419a:	2300      	movs	r3, #0
    419c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    419e:	4b28      	ldr	r3, [pc, #160]	; (4240 <getSpllConfig+0xa8>)
    41a0:	681b      	ldr	r3, [r3, #0]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d023      	beq.n	41ee <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41a6:	2300      	movs	r3, #0
    41a8:	9301      	str	r3, [sp, #4]
    41aa:	e019      	b.n	41e0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    41ac:	4b24      	ldr	r3, [pc, #144]	; (4240 <getSpllConfig+0xa8>)
    41ae:	6819      	ldr	r1, [r3, #0]
    41b0:	9a01      	ldr	r2, [sp, #4]
    41b2:	4613      	mov	r3, r2
    41b4:	009b      	lsls	r3, r3, #2
    41b6:	4413      	add	r3, r2
    41b8:	00db      	lsls	r3, r3, #3
    41ba:	440b      	add	r3, r1
    41bc:	3340      	adds	r3, #64	; 0x40
    41be:	681b      	ldr	r3, [r3, #0]
    41c0:	2b09      	cmp	r3, #9
    41c2:	d10a      	bne.n	41da <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    41c4:	4b1e      	ldr	r3, [pc, #120]	; (4240 <getSpllConfig+0xa8>)
    41c6:	6819      	ldr	r1, [r3, #0]
    41c8:	9a01      	ldr	r2, [sp, #4]
    41ca:	4613      	mov	r3, r2
    41cc:	009b      	lsls	r3, r3, #2
    41ce:	4413      	add	r3, r2
    41d0:	00db      	lsls	r3, r3, #3
    41d2:	3340      	adds	r3, #64	; 0x40
    41d4:	440b      	add	r3, r1
    41d6:	9300      	str	r3, [sp, #0]
                break;
    41d8:	e009      	b.n	41ee <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41da:	9b01      	ldr	r3, [sp, #4]
    41dc:	3301      	adds	r3, #1
    41de:	9301      	str	r3, [sp, #4]
    41e0:	4b17      	ldr	r3, [pc, #92]	; (4240 <getSpllConfig+0xa8>)
    41e2:	681b      	ldr	r3, [r3, #0]
    41e4:	7a9b      	ldrb	r3, [r3, #10]
    41e6:	461a      	mov	r2, r3
    41e8:	9b01      	ldr	r3, [sp, #4]
    41ea:	4293      	cmp	r3, r2
    41ec:	d3de      	bcc.n	41ac <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41ee:	9b00      	ldr	r3, [sp, #0]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d121      	bne.n	4238 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    41f4:	4b13      	ldr	r3, [pc, #76]	; (4244 <getSpllConfig+0xac>)
    41f6:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    41f8:	4b12      	ldr	r3, [pc, #72]	; (4244 <getSpllConfig+0xac>)
    41fa:	2209      	movs	r2, #9
    41fc:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    41fe:	4b12      	ldr	r3, [pc, #72]	; (4248 <getSpllConfig+0xb0>)
    4200:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4204:	b29b      	uxth	r3, r3
    4206:	f003 0301 	and.w	r3, r3, #1
    420a:	b29a      	uxth	r2, r3
    420c:	4b0d      	ldr	r3, [pc, #52]	; (4244 <getSpllConfig+0xac>)
    420e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4210:	4b0d      	ldr	r3, [pc, #52]	; (4248 <getSpllConfig+0xb0>)
    4212:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4216:	0a1b      	lsrs	r3, r3, #8
    4218:	b2db      	uxtb	r3, r3
    421a:	f003 0307 	and.w	r3, r3, #7
    421e:	b2da      	uxtb	r2, r3
    4220:	4b08      	ldr	r3, [pc, #32]	; (4244 <getSpllConfig+0xac>)
    4222:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4224:	4b08      	ldr	r3, [pc, #32]	; (4248 <getSpllConfig+0xb0>)
    4226:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    422a:	0c1b      	lsrs	r3, r3, #16
    422c:	b2db      	uxtb	r3, r3
    422e:	f003 031f 	and.w	r3, r3, #31
    4232:	b2da      	uxtb	r2, r3
    4234:	4b03      	ldr	r3, [pc, #12]	; (4244 <getSpllConfig+0xac>)
    4236:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4238:	9b00      	ldr	r3, [sp, #0]
}
    423a:	4618      	mov	r0, r3
    423c:	b002      	add	sp, #8
    423e:	4770      	bx	lr
    4240:	1fff8b9c 	.word	0x1fff8b9c
    4244:	1fff8c28 	.word	0x1fff8c28
    4248:	40064000 	.word	0x40064000

0000424c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    424c:	b086      	sub	sp, #24
    424e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4250:	2300      	movs	r3, #0
    4252:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4254:	9b01      	ldr	r3, [sp, #4]
    4256:	2b1b      	cmp	r3, #27
    4258:	d00f      	beq.n	427a <getSelectorConfig+0x2e>
    425a:	9b01      	ldr	r3, [sp, #4]
    425c:	2b1b      	cmp	r3, #27
    425e:	d80f      	bhi.n	4280 <getSelectorConfig+0x34>
    4260:	9b01      	ldr	r3, [sp, #4]
    4262:	2b19      	cmp	r3, #25
    4264:	d003      	beq.n	426e <getSelectorConfig+0x22>
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	2b1a      	cmp	r3, #26
    426a:	d003      	beq.n	4274 <getSelectorConfig+0x28>
    426c:	e008      	b.n	4280 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    426e:	2300      	movs	r3, #0
    4270:	9304      	str	r3, [sp, #16]
            break;
    4272:	e008      	b.n	4286 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4274:	2301      	movs	r3, #1
    4276:	9304      	str	r3, [sp, #16]
            break;
    4278:	e005      	b.n	4286 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    427a:	2302      	movs	r3, #2
    427c:	9304      	str	r3, [sp, #16]
            break;
    427e:	e002      	b.n	4286 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4280:	2300      	movs	r3, #0
    4282:	9304      	str	r3, [sp, #16]
            break;
    4284:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4286:	4b36      	ldr	r3, [pc, #216]	; (4360 <getSelectorConfig+0x114>)
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	2b00      	cmp	r3, #0
    428c:	d01d      	beq.n	42ca <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    428e:	2300      	movs	r3, #0
    4290:	9303      	str	r3, [sp, #12]
    4292:	e013      	b.n	42bc <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4294:	4b32      	ldr	r3, [pc, #200]	; (4360 <getSelectorConfig+0x114>)
    4296:	681b      	ldr	r3, [r3, #0]
    4298:	9a03      	ldr	r2, [sp, #12]
    429a:	320d      	adds	r2, #13
    429c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    42a0:	9a01      	ldr	r2, [sp, #4]
    42a2:	429a      	cmp	r2, r3
    42a4:	d107      	bne.n	42b6 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    42a6:	4b2e      	ldr	r3, [pc, #184]	; (4360 <getSelectorConfig+0x114>)
    42a8:	681a      	ldr	r2, [r3, #0]
    42aa:	9b03      	ldr	r3, [sp, #12]
    42ac:	330d      	adds	r3, #13
    42ae:	00db      	lsls	r3, r3, #3
    42b0:	4413      	add	r3, r2
    42b2:	9305      	str	r3, [sp, #20]
                break;
    42b4:	e009      	b.n	42ca <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42b6:	9b03      	ldr	r3, [sp, #12]
    42b8:	3301      	adds	r3, #1
    42ba:	9303      	str	r3, [sp, #12]
    42bc:	4b28      	ldr	r3, [pc, #160]	; (4360 <getSelectorConfig+0x114>)
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	7adb      	ldrb	r3, [r3, #11]
    42c2:	461a      	mov	r2, r3
    42c4:	9b03      	ldr	r3, [sp, #12]
    42c6:	4293      	cmp	r3, r2
    42c8:	d3e4      	bcc.n	4294 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42ca:	9b05      	ldr	r3, [sp, #20]
    42cc:	2b00      	cmp	r3, #0
    42ce:	d140      	bne.n	4352 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    42d0:	9b04      	ldr	r3, [sp, #16]
    42d2:	00db      	lsls	r3, r3, #3
    42d4:	4a23      	ldr	r2, [pc, #140]	; (4364 <getSelectorConfig+0x118>)
    42d6:	4413      	add	r3, r2
    42d8:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    42da:	4922      	ldr	r1, [pc, #136]	; (4364 <getSelectorConfig+0x118>)
    42dc:	9b04      	ldr	r3, [sp, #16]
    42de:	9a01      	ldr	r2, [sp, #4]
    42e0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    42e4:	9b01      	ldr	r3, [sp, #4]
    42e6:	2b1b      	cmp	r3, #27
    42e8:	d025      	beq.n	4336 <getSelectorConfig+0xea>
    42ea:	9b01      	ldr	r3, [sp, #4]
    42ec:	2b1b      	cmp	r3, #27
    42ee:	d832      	bhi.n	4356 <getSelectorConfig+0x10a>
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	2b19      	cmp	r3, #25
    42f4:	d003      	beq.n	42fe <getSelectorConfig+0xb2>
    42f6:	9b01      	ldr	r3, [sp, #4]
    42f8:	2b1a      	cmp	r3, #26
    42fa:	d00e      	beq.n	431a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    42fc:	e02b      	b.n	4356 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    42fe:	4b1a      	ldr	r3, [pc, #104]	; (4368 <getSelectorConfig+0x11c>)
    4300:	695b      	ldr	r3, [r3, #20]
    4302:	0e1b      	lsrs	r3, r3, #24
    4304:	f003 030f 	and.w	r3, r3, #15
    4308:	4a18      	ldr	r2, [pc, #96]	; (436c <getSelectorConfig+0x120>)
    430a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    430e:	4915      	ldr	r1, [pc, #84]	; (4364 <getSelectorConfig+0x118>)
    4310:	9b04      	ldr	r3, [sp, #16]
    4312:	00db      	lsls	r3, r3, #3
    4314:	440b      	add	r3, r1
    4316:	605a      	str	r2, [r3, #4]
                break;
    4318:	e01e      	b.n	4358 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    431a:	4b13      	ldr	r3, [pc, #76]	; (4368 <getSelectorConfig+0x11c>)
    431c:	699b      	ldr	r3, [r3, #24]
    431e:	0e1b      	lsrs	r3, r3, #24
    4320:	f003 030f 	and.w	r3, r3, #15
    4324:	4a11      	ldr	r2, [pc, #68]	; (436c <getSelectorConfig+0x120>)
    4326:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    432a:	490e      	ldr	r1, [pc, #56]	; (4364 <getSelectorConfig+0x118>)
    432c:	9b04      	ldr	r3, [sp, #16]
    432e:	00db      	lsls	r3, r3, #3
    4330:	440b      	add	r3, r1
    4332:	605a      	str	r2, [r3, #4]
                break;
    4334:	e010      	b.n	4358 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4336:	4b0c      	ldr	r3, [pc, #48]	; (4368 <getSelectorConfig+0x11c>)
    4338:	69db      	ldr	r3, [r3, #28]
    433a:	0e1b      	lsrs	r3, r3, #24
    433c:	f003 030f 	and.w	r3, r3, #15
    4340:	4a0a      	ldr	r2, [pc, #40]	; (436c <getSelectorConfig+0x120>)
    4342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4346:	4907      	ldr	r1, [pc, #28]	; (4364 <getSelectorConfig+0x118>)
    4348:	9b04      	ldr	r3, [sp, #16]
    434a:	00db      	lsls	r3, r3, #3
    434c:	440b      	add	r3, r1
    434e:	605a      	str	r2, [r3, #4]
                break;
    4350:	e002      	b.n	4358 <getSelectorConfig+0x10c>
        }
    }
    4352:	bf00      	nop
    4354:	e000      	b.n	4358 <getSelectorConfig+0x10c>
                break;
    4356:	bf00      	nop

    return ReturnValue;
    4358:	9b05      	ldr	r3, [sp, #20]
}
    435a:	4618      	mov	r0, r3
    435c:	b006      	add	sp, #24
    435e:	4770      	bx	lr
    4360:	1fff8b9c 	.word	0x1fff8b9c
    4364:	1fff8c50 	.word	0x1fff8c50
    4368:	40064000 	.word	0x40064000
    436c:	0000c974 	.word	0x0000c974

00004370 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4370:	b086      	sub	sp, #24
    4372:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4374:	2300      	movs	r3, #0
    4376:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4378:	2300      	movs	r3, #0
    437a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    437c:	9b01      	ldr	r3, [sp, #4]
    437e:	2b1f      	cmp	r3, #31
    4380:	d00f      	beq.n	43a2 <getCoreDividerConfig+0x32>
    4382:	9b01      	ldr	r3, [sp, #4]
    4384:	2b1f      	cmp	r3, #31
    4386:	d80f      	bhi.n	43a8 <getCoreDividerConfig+0x38>
    4388:	9b01      	ldr	r3, [sp, #4]
    438a:	2b1d      	cmp	r3, #29
    438c:	d003      	beq.n	4396 <getCoreDividerConfig+0x26>
    438e:	9b01      	ldr	r3, [sp, #4]
    4390:	2b1e      	cmp	r3, #30
    4392:	d003      	beq.n	439c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4394:	e008      	b.n	43a8 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4396:	2300      	movs	r3, #0
    4398:	9304      	str	r3, [sp, #16]
            break;
    439a:	e006      	b.n	43aa <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    439c:	2301      	movs	r3, #1
    439e:	9304      	str	r3, [sp, #16]
            break;
    43a0:	e003      	b.n	43aa <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    43a2:	2302      	movs	r3, #2
    43a4:	9304      	str	r3, [sp, #16]
            break;
    43a6:	e000      	b.n	43aa <getCoreDividerConfig+0x3a>
                break;
    43a8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    43aa:	4b41      	ldr	r3, [pc, #260]	; (44b0 <getCoreDividerConfig+0x140>)
    43ac:	681b      	ldr	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d026      	beq.n	4400 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43b2:	2300      	movs	r3, #0
    43b4:	9303      	str	r3, [sp, #12]
    43b6:	e01c      	b.n	43f2 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    43b8:	4b3d      	ldr	r3, [pc, #244]	; (44b0 <getCoreDividerConfig+0x140>)
    43ba:	6819      	ldr	r1, [r3, #0]
    43bc:	9a03      	ldr	r2, [sp, #12]
    43be:	4613      	mov	r3, r2
    43c0:	005b      	lsls	r3, r3, #1
    43c2:	4413      	add	r3, r2
    43c4:	009b      	lsls	r3, r3, #2
    43c6:	440b      	add	r3, r1
    43c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43cc:	681b      	ldr	r3, [r3, #0]
    43ce:	9a01      	ldr	r2, [sp, #4]
    43d0:	429a      	cmp	r2, r3
    43d2:	d10b      	bne.n	43ec <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    43d4:	4b36      	ldr	r3, [pc, #216]	; (44b0 <getCoreDividerConfig+0x140>)
    43d6:	6819      	ldr	r1, [r3, #0]
    43d8:	9a03      	ldr	r2, [sp, #12]
    43da:	4613      	mov	r3, r2
    43dc:	005b      	lsls	r3, r3, #1
    43de:	4413      	add	r3, r2
    43e0:	009b      	lsls	r3, r3, #2
    43e2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43e6:	440b      	add	r3, r1
    43e8:	9305      	str	r3, [sp, #20]
                break;
    43ea:	e009      	b.n	4400 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43ec:	9b03      	ldr	r3, [sp, #12]
    43ee:	3301      	adds	r3, #1
    43f0:	9303      	str	r3, [sp, #12]
    43f2:	4b2f      	ldr	r3, [pc, #188]	; (44b0 <getCoreDividerConfig+0x140>)
    43f4:	681b      	ldr	r3, [r3, #0]
    43f6:	7b1b      	ldrb	r3, [r3, #12]
    43f8:	461a      	mov	r2, r3
    43fa:	9b03      	ldr	r3, [sp, #12]
    43fc:	4293      	cmp	r3, r2
    43fe:	d3db      	bcc.n	43b8 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4400:	9b05      	ldr	r3, [sp, #20]
    4402:	2b00      	cmp	r3, #0
    4404:	d14d      	bne.n	44a2 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4406:	9a04      	ldr	r2, [sp, #16]
    4408:	4613      	mov	r3, r2
    440a:	005b      	lsls	r3, r3, #1
    440c:	4413      	add	r3, r2
    440e:	009b      	lsls	r3, r3, #2
    4410:	4a28      	ldr	r2, [pc, #160]	; (44b4 <getCoreDividerConfig+0x144>)
    4412:	4413      	add	r3, r2
    4414:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4416:	4927      	ldr	r1, [pc, #156]	; (44b4 <getCoreDividerConfig+0x144>)
    4418:	9a04      	ldr	r2, [sp, #16]
    441a:	4613      	mov	r3, r2
    441c:	005b      	lsls	r3, r3, #1
    441e:	4413      	add	r3, r2
    4420:	009b      	lsls	r3, r3, #2
    4422:	440b      	add	r3, r1
    4424:	9a01      	ldr	r2, [sp, #4]
    4426:	601a      	str	r2, [r3, #0]
        switch(Name)
    4428:	9b01      	ldr	r3, [sp, #4]
    442a:	2b1f      	cmp	r3, #31
    442c:	d029      	beq.n	4482 <getCoreDividerConfig+0x112>
    442e:	9b01      	ldr	r3, [sp, #4]
    4430:	2b1f      	cmp	r3, #31
    4432:	d838      	bhi.n	44a6 <getCoreDividerConfig+0x136>
    4434:	9b01      	ldr	r3, [sp, #4]
    4436:	2b1d      	cmp	r3, #29
    4438:	d003      	beq.n	4442 <getCoreDividerConfig+0xd2>
    443a:	9b01      	ldr	r3, [sp, #4]
    443c:	2b1e      	cmp	r3, #30
    443e:	d010      	beq.n	4462 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4440:	e031      	b.n	44a6 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4442:	4b1d      	ldr	r3, [pc, #116]	; (44b8 <getCoreDividerConfig+0x148>)
    4444:	695b      	ldr	r3, [r3, #20]
    4446:	0c1b      	lsrs	r3, r3, #16
    4448:	f003 030f 	and.w	r3, r3, #15
    444c:	1c59      	adds	r1, r3, #1
    444e:	4819      	ldr	r0, [pc, #100]	; (44b4 <getCoreDividerConfig+0x144>)
    4450:	9a04      	ldr	r2, [sp, #16]
    4452:	4613      	mov	r3, r2
    4454:	005b      	lsls	r3, r3, #1
    4456:	4413      	add	r3, r2
    4458:	009b      	lsls	r3, r3, #2
    445a:	4403      	add	r3, r0
    445c:	3304      	adds	r3, #4
    445e:	6019      	str	r1, [r3, #0]
                break;
    4460:	e022      	b.n	44a8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4462:	4b15      	ldr	r3, [pc, #84]	; (44b8 <getCoreDividerConfig+0x148>)
    4464:	699b      	ldr	r3, [r3, #24]
    4466:	0c1b      	lsrs	r3, r3, #16
    4468:	f003 030f 	and.w	r3, r3, #15
    446c:	1c59      	adds	r1, r3, #1
    446e:	4811      	ldr	r0, [pc, #68]	; (44b4 <getCoreDividerConfig+0x144>)
    4470:	9a04      	ldr	r2, [sp, #16]
    4472:	4613      	mov	r3, r2
    4474:	005b      	lsls	r3, r3, #1
    4476:	4413      	add	r3, r2
    4478:	009b      	lsls	r3, r3, #2
    447a:	4403      	add	r3, r0
    447c:	3304      	adds	r3, #4
    447e:	6019      	str	r1, [r3, #0]
                break;
    4480:	e012      	b.n	44a8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4482:	4b0d      	ldr	r3, [pc, #52]	; (44b8 <getCoreDividerConfig+0x148>)
    4484:	69db      	ldr	r3, [r3, #28]
    4486:	0c1b      	lsrs	r3, r3, #16
    4488:	f003 030f 	and.w	r3, r3, #15
    448c:	1c59      	adds	r1, r3, #1
    448e:	4809      	ldr	r0, [pc, #36]	; (44b4 <getCoreDividerConfig+0x144>)
    4490:	9a04      	ldr	r2, [sp, #16]
    4492:	4613      	mov	r3, r2
    4494:	005b      	lsls	r3, r3, #1
    4496:	4413      	add	r3, r2
    4498:	009b      	lsls	r3, r3, #2
    449a:	4403      	add	r3, r0
    449c:	3304      	adds	r3, #4
    449e:	6019      	str	r1, [r3, #0]
                break;
    44a0:	e002      	b.n	44a8 <getCoreDividerConfig+0x138>
        }
    }
    44a2:	bf00      	nop
    44a4:	e000      	b.n	44a8 <getCoreDividerConfig+0x138>
                break;
    44a6:	bf00      	nop

    return ReturnValue;
    44a8:	9b05      	ldr	r3, [sp, #20]
}
    44aa:	4618      	mov	r0, r3
    44ac:	b006      	add	sp, #24
    44ae:	4770      	bx	lr
    44b0:	1fff8b9c 	.word	0x1fff8b9c
    44b4:	1fff8c68 	.word	0x1fff8c68
    44b8:	40064000 	.word	0x40064000

000044bc <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    44bc:	b086      	sub	sp, #24
    44be:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44c0:	2300      	movs	r3, #0
    44c2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44c4:	2300      	movs	r3, #0
    44c6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44c8:	9b01      	ldr	r3, [sp, #4]
    44ca:	2b23      	cmp	r3, #35	; 0x23
    44cc:	d00f      	beq.n	44ee <getBusDividerConfig+0x32>
    44ce:	9b01      	ldr	r3, [sp, #4]
    44d0:	2b23      	cmp	r3, #35	; 0x23
    44d2:	d80f      	bhi.n	44f4 <getBusDividerConfig+0x38>
    44d4:	9b01      	ldr	r3, [sp, #4]
    44d6:	2b21      	cmp	r3, #33	; 0x21
    44d8:	d003      	beq.n	44e2 <getBusDividerConfig+0x26>
    44da:	9b01      	ldr	r3, [sp, #4]
    44dc:	2b22      	cmp	r3, #34	; 0x22
    44de:	d003      	beq.n	44e8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44e0:	e008      	b.n	44f4 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44e2:	2300      	movs	r3, #0
    44e4:	9304      	str	r3, [sp, #16]
            break;
    44e6:	e006      	b.n	44f6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    44e8:	2301      	movs	r3, #1
    44ea:	9304      	str	r3, [sp, #16]
            break;
    44ec:	e003      	b.n	44f6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    44ee:	2302      	movs	r3, #2
    44f0:	9304      	str	r3, [sp, #16]
            break;
    44f2:	e000      	b.n	44f6 <getBusDividerConfig+0x3a>
                break;
    44f4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    44f6:	4b41      	ldr	r3, [pc, #260]	; (45fc <getBusDividerConfig+0x140>)
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	2b00      	cmp	r3, #0
    44fc:	d026      	beq.n	454c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    44fe:	2300      	movs	r3, #0
    4500:	9303      	str	r3, [sp, #12]
    4502:	e01c      	b.n	453e <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4504:	4b3d      	ldr	r3, [pc, #244]	; (45fc <getBusDividerConfig+0x140>)
    4506:	6819      	ldr	r1, [r3, #0]
    4508:	9a03      	ldr	r2, [sp, #12]
    450a:	4613      	mov	r3, r2
    450c:	005b      	lsls	r3, r3, #1
    450e:	4413      	add	r3, r2
    4510:	009b      	lsls	r3, r3, #2
    4512:	440b      	add	r3, r1
    4514:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	9a01      	ldr	r2, [sp, #4]
    451c:	429a      	cmp	r2, r3
    451e:	d10b      	bne.n	4538 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4520:	4b36      	ldr	r3, [pc, #216]	; (45fc <getBusDividerConfig+0x140>)
    4522:	6819      	ldr	r1, [r3, #0]
    4524:	9a03      	ldr	r2, [sp, #12]
    4526:	4613      	mov	r3, r2
    4528:	005b      	lsls	r3, r3, #1
    452a:	4413      	add	r3, r2
    452c:	009b      	lsls	r3, r3, #2
    452e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4532:	440b      	add	r3, r1
    4534:	9305      	str	r3, [sp, #20]
                break;
    4536:	e009      	b.n	454c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4538:	9b03      	ldr	r3, [sp, #12]
    453a:	3301      	adds	r3, #1
    453c:	9303      	str	r3, [sp, #12]
    453e:	4b2f      	ldr	r3, [pc, #188]	; (45fc <getBusDividerConfig+0x140>)
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	7b1b      	ldrb	r3, [r3, #12]
    4544:	461a      	mov	r2, r3
    4546:	9b03      	ldr	r3, [sp, #12]
    4548:	4293      	cmp	r3, r2
    454a:	d3db      	bcc.n	4504 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    454c:	9b05      	ldr	r3, [sp, #20]
    454e:	2b00      	cmp	r3, #0
    4550:	d14d      	bne.n	45ee <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4552:	9a04      	ldr	r2, [sp, #16]
    4554:	4613      	mov	r3, r2
    4556:	005b      	lsls	r3, r3, #1
    4558:	4413      	add	r3, r2
    455a:	009b      	lsls	r3, r3, #2
    455c:	4a28      	ldr	r2, [pc, #160]	; (4600 <getBusDividerConfig+0x144>)
    455e:	4413      	add	r3, r2
    4560:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4562:	4927      	ldr	r1, [pc, #156]	; (4600 <getBusDividerConfig+0x144>)
    4564:	9a04      	ldr	r2, [sp, #16]
    4566:	4613      	mov	r3, r2
    4568:	005b      	lsls	r3, r3, #1
    456a:	4413      	add	r3, r2
    456c:	009b      	lsls	r3, r3, #2
    456e:	440b      	add	r3, r1
    4570:	9a01      	ldr	r2, [sp, #4]
    4572:	601a      	str	r2, [r3, #0]
        switch(Name)
    4574:	9b01      	ldr	r3, [sp, #4]
    4576:	2b23      	cmp	r3, #35	; 0x23
    4578:	d029      	beq.n	45ce <getBusDividerConfig+0x112>
    457a:	9b01      	ldr	r3, [sp, #4]
    457c:	2b23      	cmp	r3, #35	; 0x23
    457e:	d838      	bhi.n	45f2 <getBusDividerConfig+0x136>
    4580:	9b01      	ldr	r3, [sp, #4]
    4582:	2b21      	cmp	r3, #33	; 0x21
    4584:	d003      	beq.n	458e <getBusDividerConfig+0xd2>
    4586:	9b01      	ldr	r3, [sp, #4]
    4588:	2b22      	cmp	r3, #34	; 0x22
    458a:	d010      	beq.n	45ae <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    458c:	e031      	b.n	45f2 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    458e:	4b1d      	ldr	r3, [pc, #116]	; (4604 <getBusDividerConfig+0x148>)
    4590:	695b      	ldr	r3, [r3, #20]
    4592:	091b      	lsrs	r3, r3, #4
    4594:	f003 030f 	and.w	r3, r3, #15
    4598:	1c59      	adds	r1, r3, #1
    459a:	4819      	ldr	r0, [pc, #100]	; (4600 <getBusDividerConfig+0x144>)
    459c:	9a04      	ldr	r2, [sp, #16]
    459e:	4613      	mov	r3, r2
    45a0:	005b      	lsls	r3, r3, #1
    45a2:	4413      	add	r3, r2
    45a4:	009b      	lsls	r3, r3, #2
    45a6:	4403      	add	r3, r0
    45a8:	3304      	adds	r3, #4
    45aa:	6019      	str	r1, [r3, #0]
                break;
    45ac:	e022      	b.n	45f4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    45ae:	4b15      	ldr	r3, [pc, #84]	; (4604 <getBusDividerConfig+0x148>)
    45b0:	699b      	ldr	r3, [r3, #24]
    45b2:	091b      	lsrs	r3, r3, #4
    45b4:	f003 030f 	and.w	r3, r3, #15
    45b8:	1c59      	adds	r1, r3, #1
    45ba:	4811      	ldr	r0, [pc, #68]	; (4600 <getBusDividerConfig+0x144>)
    45bc:	9a04      	ldr	r2, [sp, #16]
    45be:	4613      	mov	r3, r2
    45c0:	005b      	lsls	r3, r3, #1
    45c2:	4413      	add	r3, r2
    45c4:	009b      	lsls	r3, r3, #2
    45c6:	4403      	add	r3, r0
    45c8:	3304      	adds	r3, #4
    45ca:	6019      	str	r1, [r3, #0]
                break;
    45cc:	e012      	b.n	45f4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    45ce:	4b0d      	ldr	r3, [pc, #52]	; (4604 <getBusDividerConfig+0x148>)
    45d0:	69db      	ldr	r3, [r3, #28]
    45d2:	091b      	lsrs	r3, r3, #4
    45d4:	f003 030f 	and.w	r3, r3, #15
    45d8:	1c59      	adds	r1, r3, #1
    45da:	4809      	ldr	r0, [pc, #36]	; (4600 <getBusDividerConfig+0x144>)
    45dc:	9a04      	ldr	r2, [sp, #16]
    45de:	4613      	mov	r3, r2
    45e0:	005b      	lsls	r3, r3, #1
    45e2:	4413      	add	r3, r2
    45e4:	009b      	lsls	r3, r3, #2
    45e6:	4403      	add	r3, r0
    45e8:	3304      	adds	r3, #4
    45ea:	6019      	str	r1, [r3, #0]
                break;
    45ec:	e002      	b.n	45f4 <getBusDividerConfig+0x138>
        }
    }
    45ee:	bf00      	nop
    45f0:	e000      	b.n	45f4 <getBusDividerConfig+0x138>
                break;
    45f2:	bf00      	nop

    return ReturnValue;
    45f4:	9b05      	ldr	r3, [sp, #20]
}
    45f6:	4618      	mov	r0, r3
    45f8:	b006      	add	sp, #24
    45fa:	4770      	bx	lr
    45fc:	1fff8b9c 	.word	0x1fff8b9c
    4600:	1fff8c8c 	.word	0x1fff8c8c
    4604:	40064000 	.word	0x40064000

00004608 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4608:	b086      	sub	sp, #24
    460a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    460c:	2300      	movs	r3, #0
    460e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4610:	2300      	movs	r3, #0
    4612:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4614:	9b01      	ldr	r3, [sp, #4]
    4616:	2b27      	cmp	r3, #39	; 0x27
    4618:	d00f      	beq.n	463a <getSlowDividerConfig+0x32>
    461a:	9b01      	ldr	r3, [sp, #4]
    461c:	2b27      	cmp	r3, #39	; 0x27
    461e:	d80f      	bhi.n	4640 <getSlowDividerConfig+0x38>
    4620:	9b01      	ldr	r3, [sp, #4]
    4622:	2b25      	cmp	r3, #37	; 0x25
    4624:	d003      	beq.n	462e <getSlowDividerConfig+0x26>
    4626:	9b01      	ldr	r3, [sp, #4]
    4628:	2b26      	cmp	r3, #38	; 0x26
    462a:	d003      	beq.n	4634 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    462c:	e008      	b.n	4640 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    462e:	2300      	movs	r3, #0
    4630:	9304      	str	r3, [sp, #16]
            break;
    4632:	e006      	b.n	4642 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4634:	2301      	movs	r3, #1
    4636:	9304      	str	r3, [sp, #16]
            break;
    4638:	e003      	b.n	4642 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    463a:	2302      	movs	r3, #2
    463c:	9304      	str	r3, [sp, #16]
            break;
    463e:	e000      	b.n	4642 <getSlowDividerConfig+0x3a>
                break;
    4640:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4642:	4b40      	ldr	r3, [pc, #256]	; (4744 <getSlowDividerConfig+0x13c>)
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	2b00      	cmp	r3, #0
    4648:	d026      	beq.n	4698 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    464a:	2300      	movs	r3, #0
    464c:	9303      	str	r3, [sp, #12]
    464e:	e01c      	b.n	468a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4650:	4b3c      	ldr	r3, [pc, #240]	; (4744 <getSlowDividerConfig+0x13c>)
    4652:	6819      	ldr	r1, [r3, #0]
    4654:	9a03      	ldr	r2, [sp, #12]
    4656:	4613      	mov	r3, r2
    4658:	005b      	lsls	r3, r3, #1
    465a:	4413      	add	r3, r2
    465c:	009b      	lsls	r3, r3, #2
    465e:	440b      	add	r3, r1
    4660:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4664:	681b      	ldr	r3, [r3, #0]
    4666:	9a01      	ldr	r2, [sp, #4]
    4668:	429a      	cmp	r2, r3
    466a:	d10b      	bne.n	4684 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    466c:	4b35      	ldr	r3, [pc, #212]	; (4744 <getSlowDividerConfig+0x13c>)
    466e:	6819      	ldr	r1, [r3, #0]
    4670:	9a03      	ldr	r2, [sp, #12]
    4672:	4613      	mov	r3, r2
    4674:	005b      	lsls	r3, r3, #1
    4676:	4413      	add	r3, r2
    4678:	009b      	lsls	r3, r3, #2
    467a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    467e:	440b      	add	r3, r1
    4680:	9305      	str	r3, [sp, #20]
                break;
    4682:	e009      	b.n	4698 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4684:	9b03      	ldr	r3, [sp, #12]
    4686:	3301      	adds	r3, #1
    4688:	9303      	str	r3, [sp, #12]
    468a:	4b2e      	ldr	r3, [pc, #184]	; (4744 <getSlowDividerConfig+0x13c>)
    468c:	681b      	ldr	r3, [r3, #0]
    468e:	7b1b      	ldrb	r3, [r3, #12]
    4690:	461a      	mov	r2, r3
    4692:	9b03      	ldr	r3, [sp, #12]
    4694:	4293      	cmp	r3, r2
    4696:	d3db      	bcc.n	4650 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4698:	9b05      	ldr	r3, [sp, #20]
    469a:	2b00      	cmp	r3, #0
    469c:	d14a      	bne.n	4734 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    469e:	9a04      	ldr	r2, [sp, #16]
    46a0:	4613      	mov	r3, r2
    46a2:	005b      	lsls	r3, r3, #1
    46a4:	4413      	add	r3, r2
    46a6:	009b      	lsls	r3, r3, #2
    46a8:	4a27      	ldr	r2, [pc, #156]	; (4748 <getSlowDividerConfig+0x140>)
    46aa:	4413      	add	r3, r2
    46ac:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    46ae:	4926      	ldr	r1, [pc, #152]	; (4748 <getSlowDividerConfig+0x140>)
    46b0:	9a04      	ldr	r2, [sp, #16]
    46b2:	4613      	mov	r3, r2
    46b4:	005b      	lsls	r3, r3, #1
    46b6:	4413      	add	r3, r2
    46b8:	009b      	lsls	r3, r3, #2
    46ba:	440b      	add	r3, r1
    46bc:	9a01      	ldr	r2, [sp, #4]
    46be:	601a      	str	r2, [r3, #0]
        switch(Name)
    46c0:	9b01      	ldr	r3, [sp, #4]
    46c2:	2b27      	cmp	r3, #39	; 0x27
    46c4:	d027      	beq.n	4716 <getSlowDividerConfig+0x10e>
    46c6:	9b01      	ldr	r3, [sp, #4]
    46c8:	2b27      	cmp	r3, #39	; 0x27
    46ca:	d835      	bhi.n	4738 <getSlowDividerConfig+0x130>
    46cc:	9b01      	ldr	r3, [sp, #4]
    46ce:	2b25      	cmp	r3, #37	; 0x25
    46d0:	d003      	beq.n	46da <getSlowDividerConfig+0xd2>
    46d2:	9b01      	ldr	r3, [sp, #4]
    46d4:	2b26      	cmp	r3, #38	; 0x26
    46d6:	d00f      	beq.n	46f8 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46d8:	e02e      	b.n	4738 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    46da:	4b1c      	ldr	r3, [pc, #112]	; (474c <getSlowDividerConfig+0x144>)
    46dc:	695b      	ldr	r3, [r3, #20]
    46de:	f003 030f 	and.w	r3, r3, #15
    46e2:	1c59      	adds	r1, r3, #1
    46e4:	4818      	ldr	r0, [pc, #96]	; (4748 <getSlowDividerConfig+0x140>)
    46e6:	9a04      	ldr	r2, [sp, #16]
    46e8:	4613      	mov	r3, r2
    46ea:	005b      	lsls	r3, r3, #1
    46ec:	4413      	add	r3, r2
    46ee:	009b      	lsls	r3, r3, #2
    46f0:	4403      	add	r3, r0
    46f2:	3304      	adds	r3, #4
    46f4:	6019      	str	r1, [r3, #0]
                break;
    46f6:	e020      	b.n	473a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    46f8:	4b14      	ldr	r3, [pc, #80]	; (474c <getSlowDividerConfig+0x144>)
    46fa:	699b      	ldr	r3, [r3, #24]
    46fc:	f003 030f 	and.w	r3, r3, #15
    4700:	1c59      	adds	r1, r3, #1
    4702:	4811      	ldr	r0, [pc, #68]	; (4748 <getSlowDividerConfig+0x140>)
    4704:	9a04      	ldr	r2, [sp, #16]
    4706:	4613      	mov	r3, r2
    4708:	005b      	lsls	r3, r3, #1
    470a:	4413      	add	r3, r2
    470c:	009b      	lsls	r3, r3, #2
    470e:	4403      	add	r3, r0
    4710:	3304      	adds	r3, #4
    4712:	6019      	str	r1, [r3, #0]
                break;
    4714:	e011      	b.n	473a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4716:	4b0d      	ldr	r3, [pc, #52]	; (474c <getSlowDividerConfig+0x144>)
    4718:	69db      	ldr	r3, [r3, #28]
    471a:	f003 030f 	and.w	r3, r3, #15
    471e:	1c59      	adds	r1, r3, #1
    4720:	4809      	ldr	r0, [pc, #36]	; (4748 <getSlowDividerConfig+0x140>)
    4722:	9a04      	ldr	r2, [sp, #16]
    4724:	4613      	mov	r3, r2
    4726:	005b      	lsls	r3, r3, #1
    4728:	4413      	add	r3, r2
    472a:	009b      	lsls	r3, r3, #2
    472c:	4403      	add	r3, r0
    472e:	3304      	adds	r3, #4
    4730:	6019      	str	r1, [r3, #0]
                break;
    4732:	e002      	b.n	473a <getSlowDividerConfig+0x132>
        }
    }
    4734:	bf00      	nop
    4736:	e000      	b.n	473a <getSlowDividerConfig+0x132>
                break;
    4738:	bf00      	nop

    return ReturnValue;
    473a:	9b05      	ldr	r3, [sp, #20]
}
    473c:	4618      	mov	r0, r3
    473e:	b006      	add	sp, #24
    4740:	4770      	bx	lr
    4742:	bf00      	nop
    4744:	1fff8b9c 	.word	0x1fff8b9c
    4748:	1fff8cb0 	.word	0x1fff8cb0
    474c:	40064000 	.word	0x40064000

00004750 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4750:	b500      	push	{lr}
    4752:	b083      	sub	sp, #12
    4754:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4756:	4b64      	ldr	r3, [pc, #400]	; (48e8 <Clock_Ip_ClockInitializeObjects+0x198>)
    4758:	781b      	ldrb	r3, [r3, #0]
    475a:	f083 0301 	eor.w	r3, r3, #1
    475e:	b2db      	uxtb	r3, r3
    4760:	2b00      	cmp	r3, #0
    4762:	d05b      	beq.n	481c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4764:	4b60      	ldr	r3, [pc, #384]	; (48e8 <Clock_Ip_ClockInitializeObjects+0x198>)
    4766:	2201      	movs	r2, #1
    4768:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    476a:	4b60      	ldr	r3, [pc, #384]	; (48ec <Clock_Ip_ClockInitializeObjects+0x19c>)
    476c:	785b      	ldrb	r3, [r3, #1]
    476e:	461a      	mov	r2, r3
    4770:	4613      	mov	r3, r2
    4772:	009b      	lsls	r3, r3, #2
    4774:	4413      	add	r3, r2
    4776:	009b      	lsls	r3, r3, #2
    4778:	4a5d      	ldr	r2, [pc, #372]	; (48f0 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    477a:	4413      	add	r3, r2
    477c:	4a5d      	ldr	r2, [pc, #372]	; (48f4 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    477e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4780:	4b5d      	ldr	r3, [pc, #372]	; (48f8 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4782:	785b      	ldrb	r3, [r3, #1]
    4784:	461a      	mov	r2, r3
    4786:	4613      	mov	r3, r2
    4788:	009b      	lsls	r3, r3, #2
    478a:	4413      	add	r3, r2
    478c:	009b      	lsls	r3, r3, #2
    478e:	4a5b      	ldr	r2, [pc, #364]	; (48fc <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4790:	4413      	add	r3, r2
    4792:	4a5b      	ldr	r2, [pc, #364]	; (4900 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4794:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    4796:	4b5b      	ldr	r3, [pc, #364]	; (4904 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4798:	791b      	ldrb	r3, [r3, #4]
    479a:	461a      	mov	r2, r3
    479c:	4613      	mov	r3, r2
    479e:	005b      	lsls	r3, r3, #1
    47a0:	4413      	add	r3, r2
    47a2:	009b      	lsls	r3, r3, #2
    47a4:	4a58      	ldr	r2, [pc, #352]	; (4908 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    47a6:	4413      	add	r3, r2
    47a8:	4a58      	ldr	r2, [pc, #352]	; (490c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    47aa:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    47ac:	4b58      	ldr	r3, [pc, #352]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47ae:	795b      	ldrb	r3, [r3, #5]
    47b0:	00db      	lsls	r3, r3, #3
    47b2:	4a58      	ldr	r2, [pc, #352]	; (4914 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47b4:	4413      	add	r3, r2
    47b6:	4a58      	ldr	r2, [pc, #352]	; (4918 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    47b8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    47ba:	4b55      	ldr	r3, [pc, #340]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47bc:	79db      	ldrb	r3, [r3, #7]
    47be:	00db      	lsls	r3, r3, #3
    47c0:	4a54      	ldr	r2, [pc, #336]	; (4914 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47c2:	4413      	add	r3, r2
    47c4:	4a55      	ldr	r2, [pc, #340]	; (491c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    47c6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    47c8:	4b55      	ldr	r3, [pc, #340]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47ca:	799b      	ldrb	r3, [r3, #6]
    47cc:	009b      	lsls	r3, r3, #2
    47ce:	4a55      	ldr	r2, [pc, #340]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47d0:	4413      	add	r3, r2
    47d2:	4a55      	ldr	r2, [pc, #340]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    47d4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    47d6:	4b52      	ldr	r3, [pc, #328]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47d8:	7a1b      	ldrb	r3, [r3, #8]
    47da:	009b      	lsls	r3, r3, #2
    47dc:	4a51      	ldr	r2, [pc, #324]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47de:	4413      	add	r3, r2
    47e0:	4a52      	ldr	r2, [pc, #328]	; (492c <Clock_Ip_ClockInitializeObjects+0x1dc>)
    47e2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    47e4:	4b4e      	ldr	r3, [pc, #312]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47e6:	7a5b      	ldrb	r3, [r3, #9]
    47e8:	009b      	lsls	r3, r3, #2
    47ea:	4a4e      	ldr	r2, [pc, #312]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47ec:	4413      	add	r3, r2
    47ee:	4a50      	ldr	r2, [pc, #320]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    47f0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    47f2:	4b4b      	ldr	r3, [pc, #300]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47f4:	7adb      	ldrb	r3, [r3, #11]
    47f6:	009b      	lsls	r3, r3, #2
    47f8:	4a4a      	ldr	r2, [pc, #296]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47fa:	4413      	add	r3, r2
    47fc:	4a4d      	ldr	r2, [pc, #308]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    47fe:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4800:	4b47      	ldr	r3, [pc, #284]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4802:	7b1b      	ldrb	r3, [r3, #12]
    4804:	009b      	lsls	r3, r3, #2
    4806:	4a47      	ldr	r2, [pc, #284]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4808:	4413      	add	r3, r2
    480a:	4a4b      	ldr	r2, [pc, #300]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    480c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    480e:	4b44      	ldr	r3, [pc, #272]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4810:	7b9b      	ldrb	r3, [r3, #14]
    4812:	009b      	lsls	r3, r3, #2
    4814:	4a43      	ldr	r2, [pc, #268]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4816:	4413      	add	r3, r2
    4818:	4a48      	ldr	r2, [pc, #288]	; (493c <Clock_Ip_ClockInitializeObjects+0x1ec>)
    481a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    481c:	4b48      	ldr	r3, [pc, #288]	; (4940 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    481e:	781b      	ldrb	r3, [r3, #0]
    4820:	2b00      	cmp	r3, #0
    4822:	d002      	beq.n	482a <Clock_Ip_ClockInitializeObjects+0xda>
    4824:	9b01      	ldr	r3, [sp, #4]
    4826:	2b00      	cmp	r3, #0
    4828:	d003      	beq.n	4832 <Clock_Ip_ClockInitializeObjects+0xe2>
    482a:	4b46      	ldr	r3, [pc, #280]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b00      	cmp	r3, #0
    4830:	d056      	beq.n	48e0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4832:	f7ff fc09 	bl	4048 <getFircConfig>
    4836:	4603      	mov	r3, r0
    4838:	4a43      	ldr	r2, [pc, #268]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    483a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    483c:	f7ff fc60 	bl	4100 <getSoscConfig>
    4840:	4603      	mov	r3, r0
    4842:	4a42      	ldr	r2, [pc, #264]	; (494c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4844:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4846:	f7ff fca7 	bl	4198 <getSpllConfig>
    484a:	4603      	mov	r3, r0
    484c:	4a40      	ldr	r2, [pc, #256]	; (4950 <Clock_Ip_ClockInitializeObjects+0x200>)
    484e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4850:	2019      	movs	r0, #25
    4852:	f7ff fcfb 	bl	424c <getSelectorConfig>
    4856:	4603      	mov	r3, r0
    4858:	4a3e      	ldr	r2, [pc, #248]	; (4954 <Clock_Ip_ClockInitializeObjects+0x204>)
    485a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    485c:	201a      	movs	r0, #26
    485e:	f7ff fcf5 	bl	424c <getSelectorConfig>
    4862:	4603      	mov	r3, r0
    4864:	4a3c      	ldr	r2, [pc, #240]	; (4958 <Clock_Ip_ClockInitializeObjects+0x208>)
    4866:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4868:	201b      	movs	r0, #27
    486a:	f7ff fcef 	bl	424c <getSelectorConfig>
    486e:	4603      	mov	r3, r0
    4870:	4a3a      	ldr	r2, [pc, #232]	; (495c <Clock_Ip_ClockInitializeObjects+0x20c>)
    4872:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4874:	201d      	movs	r0, #29
    4876:	f7ff fd7b 	bl	4370 <getCoreDividerConfig>
    487a:	4603      	mov	r3, r0
    487c:	4a38      	ldr	r2, [pc, #224]	; (4960 <Clock_Ip_ClockInitializeObjects+0x210>)
    487e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4880:	201e      	movs	r0, #30
    4882:	f7ff fd75 	bl	4370 <getCoreDividerConfig>
    4886:	4603      	mov	r3, r0
    4888:	4a36      	ldr	r2, [pc, #216]	; (4964 <Clock_Ip_ClockInitializeObjects+0x214>)
    488a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    488c:	201f      	movs	r0, #31
    488e:	f7ff fd6f 	bl	4370 <getCoreDividerConfig>
    4892:	4603      	mov	r3, r0
    4894:	4a34      	ldr	r2, [pc, #208]	; (4968 <Clock_Ip_ClockInitializeObjects+0x218>)
    4896:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4898:	2021      	movs	r0, #33	; 0x21
    489a:	f7ff fe0f 	bl	44bc <getBusDividerConfig>
    489e:	4603      	mov	r3, r0
    48a0:	4a32      	ldr	r2, [pc, #200]	; (496c <Clock_Ip_ClockInitializeObjects+0x21c>)
    48a2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    48a4:	2022      	movs	r0, #34	; 0x22
    48a6:	f7ff fe09 	bl	44bc <getBusDividerConfig>
    48aa:	4603      	mov	r3, r0
    48ac:	4a30      	ldr	r2, [pc, #192]	; (4970 <Clock_Ip_ClockInitializeObjects+0x220>)
    48ae:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    48b0:	2023      	movs	r0, #35	; 0x23
    48b2:	f7ff fe03 	bl	44bc <getBusDividerConfig>
    48b6:	4603      	mov	r3, r0
    48b8:	4a2e      	ldr	r2, [pc, #184]	; (4974 <Clock_Ip_ClockInitializeObjects+0x224>)
    48ba:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    48bc:	2025      	movs	r0, #37	; 0x25
    48be:	f7ff fea3 	bl	4608 <getSlowDividerConfig>
    48c2:	4603      	mov	r3, r0
    48c4:	4a2c      	ldr	r2, [pc, #176]	; (4978 <Clock_Ip_ClockInitializeObjects+0x228>)
    48c6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    48c8:	2026      	movs	r0, #38	; 0x26
    48ca:	f7ff fe9d 	bl	4608 <getSlowDividerConfig>
    48ce:	4603      	mov	r3, r0
    48d0:	4a2a      	ldr	r2, [pc, #168]	; (497c <Clock_Ip_ClockInitializeObjects+0x22c>)
    48d2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    48d4:	2027      	movs	r0, #39	; 0x27
    48d6:	f7ff fe97 	bl	4608 <getSlowDividerConfig>
    48da:	4603      	mov	r3, r0
    48dc:	4a28      	ldr	r2, [pc, #160]	; (4980 <Clock_Ip_ClockInitializeObjects+0x230>)
    48de:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    48e0:	bf00      	nop
    48e2:	b003      	add	sp, #12
    48e4:	f85d fb04 	ldr.w	pc, [sp], #4
    48e8:	1fff8cd4 	.word	0x1fff8cd4
    48ec:	0000c2a4 	.word	0x0000c2a4
    48f0:	0000c8f0 	.word	0x0000c8f0
    48f4:	1fff8ba0 	.word	0x1fff8ba0
    48f8:	0000c264 	.word	0x0000c264
    48fc:	0000c838 	.word	0x0000c838
    4900:	1fff8ba4 	.word	0x1fff8ba4
    4904:	0000c274 	.word	0x0000c274
    4908:	0000c8a4 	.word	0x0000c8a4
    490c:	1fff8ba8 	.word	0x1fff8ba8
    4910:	0000c2b4 	.word	0x0000c2b4
    4914:	0000c91c 	.word	0x0000c91c
    4918:	1fff8bac 	.word	0x1fff8bac
    491c:	1fff8be8 	.word	0x1fff8be8
    4920:	0000c244 	.word	0x0000c244
    4924:	0000c7f4 	.word	0x0000c7f4
    4928:	1fff8bb0 	.word	0x1fff8bb0
    492c:	1fff8bec 	.word	0x1fff8bec
    4930:	1fff8bb4 	.word	0x1fff8bb4
    4934:	1fff8bf0 	.word	0x1fff8bf0
    4938:	1fff8bb8 	.word	0x1fff8bb8
    493c:	1fff8bf4 	.word	0x1fff8bf4
    4940:	1fff8b21 	.word	0x1fff8b21
    4944:	1fff8b18 	.word	0x1fff8b18
    4948:	1fff8bbc 	.word	0x1fff8bbc
    494c:	1fff8bc0 	.word	0x1fff8bc0
    4950:	1fff8bc4 	.word	0x1fff8bc4
    4954:	1fff8bc8 	.word	0x1fff8bc8
    4958:	1fff8bcc 	.word	0x1fff8bcc
    495c:	1fff8bf8 	.word	0x1fff8bf8
    4960:	1fff8bd0 	.word	0x1fff8bd0
    4964:	1fff8bd4 	.word	0x1fff8bd4
    4968:	1fff8bfc 	.word	0x1fff8bfc
    496c:	1fff8bd8 	.word	0x1fff8bd8
    4970:	1fff8bdc 	.word	0x1fff8bdc
    4974:	1fff8c00 	.word	0x1fff8c00
    4978:	1fff8be0 	.word	0x1fff8be0
    497c:	1fff8be4 	.word	0x1fff8be4
    4980:	1fff8c04 	.word	0x1fff8c04

00004984 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4984:	b500      	push	{lr}
    4986:	b083      	sub	sp, #12
    4988:	9001      	str	r0, [sp, #4]
    498a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    498c:	9b01      	ldr	r3, [sp, #4]
    498e:	2b03      	cmp	r3, #3
    4990:	f000 8090 	beq.w	4ab4 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4994:	9b01      	ldr	r3, [sp, #4]
    4996:	2b03      	cmp	r3, #3
    4998:	f200 80d3 	bhi.w	4b42 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    499c:	9b01      	ldr	r3, [sp, #4]
    499e:	2b00      	cmp	r3, #0
    49a0:	d040      	beq.n	4a24 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    49a2:	9b01      	ldr	r3, [sp, #4]
    49a4:	3b01      	subs	r3, #1
    49a6:	2b01      	cmp	r3, #1
    49a8:	f200 80cb 	bhi.w	4b42 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    49ac:	9b00      	ldr	r3, [sp, #0]
    49ae:	2b00      	cmp	r3, #0
    49b0:	f040 80c9 	bne.w	4b46 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    49b4:	4b68      	ldr	r3, [pc, #416]	; (4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    49b6:	2200      	movs	r2, #0
    49b8:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    49ba:	4b68      	ldr	r3, [pc, #416]	; (4b5c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    49bc:	681b      	ldr	r3, [r3, #0]
    49be:	685b      	ldr	r3, [r3, #4]
    49c0:	4a67      	ldr	r2, [pc, #412]	; (4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    49c2:	6812      	ldr	r2, [r2, #0]
    49c4:	4610      	mov	r0, r2
    49c6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    49c8:	4b66      	ldr	r3, [pc, #408]	; (4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	4a66      	ldr	r2, [pc, #408]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    49d0:	6812      	ldr	r2, [r2, #0]
    49d2:	4610      	mov	r0, r2
    49d4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    49d6:	4b65      	ldr	r3, [pc, #404]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    49d8:	681b      	ldr	r3, [r3, #0]
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	4a64      	ldr	r2, [pc, #400]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    49de:	6812      	ldr	r2, [r2, #0]
    49e0:	4610      	mov	r0, r2
    49e2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    49e4:	4b63      	ldr	r3, [pc, #396]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    49e6:	681b      	ldr	r3, [r3, #0]
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	4a63      	ldr	r2, [pc, #396]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    49ec:	6812      	ldr	r2, [r2, #0]
    49ee:	4610      	mov	r0, r2
    49f0:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    49f2:	4b62      	ldr	r3, [pc, #392]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    49f4:	681b      	ldr	r3, [r3, #0]
    49f6:	691b      	ldr	r3, [r3, #16]
    49f8:	4a61      	ldr	r2, [pc, #388]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    49fa:	6812      	ldr	r2, [r2, #0]
    49fc:	6812      	ldr	r2, [r2, #0]
    49fe:	4610      	mov	r0, r2
    4a00:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4a02:	4b60      	ldr	r3, [pc, #384]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a04:	681b      	ldr	r3, [r3, #0]
    4a06:	68db      	ldr	r3, [r3, #12]
    4a08:	4a5f      	ldr	r2, [pc, #380]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a0a:	6812      	ldr	r2, [r2, #0]
    4a0c:	6812      	ldr	r2, [r2, #0]
    4a0e:	4610      	mov	r0, r2
    4a10:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4a12:	4b5e      	ldr	r3, [pc, #376]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a14:	681b      	ldr	r3, [r3, #0]
    4a16:	689b      	ldr	r3, [r3, #8]
    4a18:	4a5d      	ldr	r2, [pc, #372]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a1a:	6812      	ldr	r2, [r2, #0]
    4a1c:	6812      	ldr	r2, [r2, #0]
    4a1e:	4610      	mov	r0, r2
    4a20:	4798      	blx	r3
            }
        }
        break;
    4a22:	e090      	b.n	4b46 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a24:	9b00      	ldr	r3, [sp, #0]
    4a26:	2b02      	cmp	r3, #2
    4a28:	f040 808f 	bne.w	4b4a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4a2c:	4b4a      	ldr	r3, [pc, #296]	; (4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a2e:	2201      	movs	r2, #1
    4a30:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4a32:	4b56      	ldr	r3, [pc, #344]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a34:	681b      	ldr	r3, [r3, #0]
    4a36:	685b      	ldr	r3, [r3, #4]
    4a38:	4a55      	ldr	r2, [pc, #340]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a3a:	6812      	ldr	r2, [r2, #0]
    4a3c:	4610      	mov	r0, r2
    4a3e:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4a40:	4b50      	ldr	r3, [pc, #320]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	691b      	ldr	r3, [r3, #16]
    4a46:	4a50      	ldr	r2, [pc, #320]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a48:	6812      	ldr	r2, [r2, #0]
    4a4a:	4610      	mov	r0, r2
    4a4c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4a4e:	4b4d      	ldr	r3, [pc, #308]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a50:	681b      	ldr	r3, [r3, #0]
    4a52:	689b      	ldr	r3, [r3, #8]
    4a54:	4a4c      	ldr	r2, [pc, #304]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a56:	6812      	ldr	r2, [r2, #0]
    4a58:	4610      	mov	r0, r2
    4a5a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4a5c:	4b47      	ldr	r3, [pc, #284]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a5e:	681b      	ldr	r3, [r3, #0]
    4a60:	68db      	ldr	r3, [r3, #12]
    4a62:	4a47      	ldr	r2, [pc, #284]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a64:	6812      	ldr	r2, [r2, #0]
    4a66:	4610      	mov	r0, r2
    4a68:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4a6a:	4b44      	ldr	r3, [pc, #272]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	689b      	ldr	r3, [r3, #8]
    4a70:	4a43      	ldr	r2, [pc, #268]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a72:	6812      	ldr	r2, [r2, #0]
    4a74:	6812      	ldr	r2, [r2, #0]
    4a76:	4610      	mov	r0, r2
    4a78:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4a7a:	4b38      	ldr	r3, [pc, #224]	; (4b5c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	685b      	ldr	r3, [r3, #4]
    4a80:	4a44      	ldr	r2, [pc, #272]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4a82:	6812      	ldr	r2, [r2, #0]
    4a84:	4610      	mov	r0, r2
    4a86:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4a88:	4b36      	ldr	r3, [pc, #216]	; (4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	4a42      	ldr	r2, [pc, #264]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4a90:	6812      	ldr	r2, [r2, #0]
    4a92:	4610      	mov	r0, r2
    4a94:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4a96:	4b35      	ldr	r3, [pc, #212]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4a98:	681b      	ldr	r3, [r3, #0]
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	4a3f      	ldr	r2, [pc, #252]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4a9e:	6812      	ldr	r2, [r2, #0]
    4aa0:	4610      	mov	r0, r2
    4aa2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4aa4:	4b33      	ldr	r3, [pc, #204]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	4a3d      	ldr	r2, [pc, #244]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4aac:	6812      	ldr	r2, [r2, #0]
    4aae:	4610      	mov	r0, r2
    4ab0:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4ab2:	e04a      	b.n	4b4a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4ab4:	9b00      	ldr	r3, [sp, #0]
    4ab6:	2b02      	cmp	r3, #2
    4ab8:	d149      	bne.n	4b4e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4aba:	4b27      	ldr	r3, [pc, #156]	; (4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4abc:	2201      	movs	r2, #1
    4abe:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4ac0:	4b32      	ldr	r3, [pc, #200]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4ac2:	681b      	ldr	r3, [r3, #0]
    4ac4:	685b      	ldr	r3, [r3, #4]
    4ac6:	4a32      	ldr	r2, [pc, #200]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4ac8:	6812      	ldr	r2, [r2, #0]
    4aca:	4610      	mov	r0, r2
    4acc:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4ace:	4b2d      	ldr	r3, [pc, #180]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ad0:	681b      	ldr	r3, [r3, #0]
    4ad2:	691b      	ldr	r3, [r3, #16]
    4ad4:	4a2c      	ldr	r2, [pc, #176]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ad6:	6812      	ldr	r2, [r2, #0]
    4ad8:	4610      	mov	r0, r2
    4ada:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4adc:	4b29      	ldr	r3, [pc, #164]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ade:	681b      	ldr	r3, [r3, #0]
    4ae0:	689b      	ldr	r3, [r3, #8]
    4ae2:	4a29      	ldr	r2, [pc, #164]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ae4:	6812      	ldr	r2, [r2, #0]
    4ae6:	4610      	mov	r0, r2
    4ae8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4aea:	4b24      	ldr	r3, [pc, #144]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	68db      	ldr	r3, [r3, #12]
    4af0:	4a23      	ldr	r2, [pc, #140]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4af2:	6812      	ldr	r2, [r2, #0]
    4af4:	4610      	mov	r0, r2
    4af6:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4af8:	4b20      	ldr	r3, [pc, #128]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4afa:	681b      	ldr	r3, [r3, #0]
    4afc:	689b      	ldr	r3, [r3, #8]
    4afe:	4a20      	ldr	r2, [pc, #128]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b00:	6812      	ldr	r2, [r2, #0]
    4b02:	6812      	ldr	r2, [r2, #0]
    4b04:	4610      	mov	r0, r2
    4b06:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4b08:	4b26      	ldr	r3, [pc, #152]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	685b      	ldr	r3, [r3, #4]
    4b0e:	4a26      	ldr	r2, [pc, #152]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4b10:	6812      	ldr	r2, [r2, #0]
    4b12:	4610      	mov	r0, r2
    4b14:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b16:	4b25      	ldr	r3, [pc, #148]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	4a24      	ldr	r2, [pc, #144]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b1e:	6812      	ldr	r2, [r2, #0]
    4b20:	4610      	mov	r0, r2
    4b22:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b24:	4b23      	ldr	r3, [pc, #140]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b26:	681b      	ldr	r3, [r3, #0]
    4b28:	681b      	ldr	r3, [r3, #0]
    4b2a:	4a23      	ldr	r2, [pc, #140]	; (4bb8 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4b2c:	6812      	ldr	r2, [r2, #0]
    4b2e:	4610      	mov	r0, r2
    4b30:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4b32:	4b22      	ldr	r3, [pc, #136]	; (4bbc <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4b34:	681b      	ldr	r3, [r3, #0]
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	4a21      	ldr	r2, [pc, #132]	; (4bc0 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4b3a:	6812      	ldr	r2, [r2, #0]
    4b3c:	4610      	mov	r0, r2
    4b3e:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b40:	e005      	b.n	4b4e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4b42:	bf00      	nop
    4b44:	e004      	b.n	4b50 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b46:	bf00      	nop
    4b48:	e002      	b.n	4b50 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b4a:	bf00      	nop
    4b4c:	e000      	b.n	4b50 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b4e:	bf00      	nop
    }

}
    4b50:	bf00      	nop
    4b52:	b003      	add	sp, #12
    4b54:	f85d fb04 	ldr.w	pc, [sp], #4
    4b58:	1fff8b21 	.word	0x1fff8b21
    4b5c:	1fff8bac 	.word	0x1fff8bac
    4b60:	1fff8bcc 	.word	0x1fff8bcc
    4b64:	1fff8bb0 	.word	0x1fff8bb0
    4b68:	1fff8bd4 	.word	0x1fff8bd4
    4b6c:	1fff8bb4 	.word	0x1fff8bb4
    4b70:	1fff8bdc 	.word	0x1fff8bdc
    4b74:	1fff8bb8 	.word	0x1fff8bb8
    4b78:	1fff8be4 	.word	0x1fff8be4
    4b7c:	1fff8ba0 	.word	0x1fff8ba0
    4b80:	1fff8bc4 	.word	0x1fff8bc4
    4b84:	1fff8ba4 	.word	0x1fff8ba4
    4b88:	1fff8bc0 	.word	0x1fff8bc0
    4b8c:	1fff8ba8 	.word	0x1fff8ba8
    4b90:	1fff8bbc 	.word	0x1fff8bbc
    4b94:	1fff8bc8 	.word	0x1fff8bc8
    4b98:	1fff8bd0 	.word	0x1fff8bd0
    4b9c:	1fff8bd8 	.word	0x1fff8bd8
    4ba0:	1fff8be0 	.word	0x1fff8be0
    4ba4:	1fff8be8 	.word	0x1fff8be8
    4ba8:	1fff8bf8 	.word	0x1fff8bf8
    4bac:	1fff8bec 	.word	0x1fff8bec
    4bb0:	1fff8bfc 	.word	0x1fff8bfc
    4bb4:	1fff8bf0 	.word	0x1fff8bf0
    4bb8:	1fff8c00 	.word	0x1fff8c00
    4bbc:	1fff8bf4 	.word	0x1fff8bf4
    4bc0:	1fff8c04 	.word	0x1fff8c04

00004bc4 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4bc4:	b500      	push	{lr}
    4bc6:	b083      	sub	sp, #12
    4bc8:	9001      	str	r0, [sp, #4]
    4bca:	9100      	str	r1, [sp, #0]
    switch(Command)
    4bcc:	9b00      	ldr	r3, [sp, #0]
    4bce:	2b04      	cmp	r3, #4
    4bd0:	d010      	beq.n	4bf4 <Clock_Ip_Command+0x30>
    4bd2:	9b00      	ldr	r3, [sp, #0]
    4bd4:	2b04      	cmp	r3, #4
    4bd6:	d811      	bhi.n	4bfc <Clock_Ip_Command+0x38>
    4bd8:	9b00      	ldr	r3, [sp, #0]
    4bda:	2b01      	cmp	r3, #1
    4bdc:	d006      	beq.n	4bec <Clock_Ip_Command+0x28>
    4bde:	9b00      	ldr	r3, [sp, #0]
    4be0:	2b02      	cmp	r3, #2
    4be2:	d10b      	bne.n	4bfc <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4be4:	9801      	ldr	r0, [sp, #4]
    4be6:	f7ff fdb3 	bl	4750 <Clock_Ip_ClockInitializeObjects>
            break;
    4bea:	e008      	b.n	4bfe <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4bec:	9801      	ldr	r0, [sp, #4]
    4bee:	f7ff f9db 	bl	3fa8 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4bf2:	e004      	b.n	4bfe <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4bf4:	9801      	ldr	r0, [sp, #4]
    4bf6:	f7ff f8ed 	bl	3dd4 <DisableSafeClock>
            break;
    4bfa:	e000      	b.n	4bfe <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4bfc:	bf00      	nop
    }
}
    4bfe:	bf00      	nop
    4c00:	b003      	add	sp, #12
    4c02:	f85d fb04 	ldr.w	pc, [sp], #4
    4c06:	bf00      	nop

00004c08 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4c08:	b500      	push	{lr}
    4c0a:	b085      	sub	sp, #20
    4c0c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4c0e:	4a20      	ldr	r2, [pc, #128]	; (4c90 <Mcu_Init+0x88>)
    4c10:	9b01      	ldr	r3, [sp, #4]
    4c12:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c14:	2300      	movs	r3, #0
    4c16:	9303      	str	r3, [sp, #12]
    4c18:	e010      	b.n	4c3c <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c1a:	4b1d      	ldr	r3, [pc, #116]	; (4c90 <Mcu_Init+0x88>)
    4c1c:	681b      	ldr	r3, [r3, #0]
    4c1e:	6919      	ldr	r1, [r3, #16]
    4c20:	9a03      	ldr	r2, [sp, #12]
    4c22:	4613      	mov	r3, r2
    4c24:	005b      	lsls	r3, r3, #1
    4c26:	4413      	add	r3, r2
    4c28:	009b      	lsls	r3, r3, #2
    4c2a:	440b      	add	r3, r1
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	9a03      	ldr	r2, [sp, #12]
    4c30:	b2d1      	uxtb	r1, r2
    4c32:	4a18      	ldr	r2, [pc, #96]	; (4c94 <Mcu_Init+0x8c>)
    4c34:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c36:	9b03      	ldr	r3, [sp, #12]
    4c38:	3301      	adds	r3, #1
    4c3a:	9303      	str	r3, [sp, #12]
    4c3c:	4b14      	ldr	r3, [pc, #80]	; (4c90 <Mcu_Init+0x88>)
    4c3e:	681b      	ldr	r3, [r3, #0]
    4c40:	689b      	ldr	r3, [r3, #8]
    4c42:	9a03      	ldr	r2, [sp, #12]
    4c44:	429a      	cmp	r2, r3
    4c46:	d3e8      	bcc.n	4c1a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c48:	2300      	movs	r3, #0
    4c4a:	9303      	str	r3, [sp, #12]
    4c4c:	e010      	b.n	4c70 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4c4e:	4b10      	ldr	r3, [pc, #64]	; (4c90 <Mcu_Init+0x88>)
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	6959      	ldr	r1, [r3, #20]
    4c54:	9a03      	ldr	r2, [sp, #12]
    4c56:	4613      	mov	r3, r2
    4c58:	01db      	lsls	r3, r3, #7
    4c5a:	1a9b      	subs	r3, r3, r2
    4c5c:	00db      	lsls	r3, r3, #3
    4c5e:	440b      	add	r3, r1
    4c60:	681b      	ldr	r3, [r3, #0]
    4c62:	9a03      	ldr	r2, [sp, #12]
    4c64:	b2d1      	uxtb	r1, r2
    4c66:	4a0c      	ldr	r2, [pc, #48]	; (4c98 <Mcu_Init+0x90>)
    4c68:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c6a:	9b03      	ldr	r3, [sp, #12]
    4c6c:	3301      	adds	r3, #1
    4c6e:	9303      	str	r3, [sp, #12]
    4c70:	4b07      	ldr	r3, [pc, #28]	; (4c90 <Mcu_Init+0x88>)
    4c72:	681b      	ldr	r3, [r3, #0]
    4c74:	68db      	ldr	r3, [r3, #12]
    4c76:	9a03      	ldr	r2, [sp, #12]
    4c78:	429a      	cmp	r2, r3
    4c7a:	d3e8      	bcc.n	4c4e <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4c7c:	4b04      	ldr	r3, [pc, #16]	; (4c90 <Mcu_Init+0x88>)
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	699b      	ldr	r3, [r3, #24]
    4c82:	4618      	mov	r0, r3
    4c84:	f000 f88a 	bl	4d9c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4c88:	bf00      	nop
    4c8a:	b005      	add	sp, #20
    4c8c:	f85d fb04 	ldr.w	pc, [sp], #4
    4c90:	1fff8ce0 	.word	0x1fff8ce0
    4c94:	1fff8cdc 	.word	0x1fff8cdc
    4c98:	1fff8cd8 	.word	0x1fff8cd8

00004c9c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4c9c:	b084      	sub	sp, #16
    4c9e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4ca0:	2301      	movs	r3, #1
    4ca2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4ca6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4caa:	4618      	mov	r0, r3
    4cac:	b004      	add	sp, #16
    4cae:	4770      	bx	lr

00004cb0 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4cb0:	b500      	push	{lr}
    4cb2:	b085      	sub	sp, #20
    4cb4:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4cb6:	4a0e      	ldr	r2, [pc, #56]	; (4cf0 <Mcu_InitClock+0x40>)
    4cb8:	9b01      	ldr	r3, [sp, #4]
    4cba:	4413      	add	r3, r2
    4cbc:	781b      	ldrb	r3, [r3, #0]
    4cbe:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4cc2:	4b0c      	ldr	r3, [pc, #48]	; (4cf4 <Mcu_InitClock+0x44>)
    4cc4:	681b      	ldr	r3, [r3, #0]
    4cc6:	6959      	ldr	r1, [r3, #20]
    4cc8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4ccc:	4613      	mov	r3, r2
    4cce:	01db      	lsls	r3, r3, #7
    4cd0:	1a9b      	subs	r3, r3, r2
    4cd2:	00db      	lsls	r3, r3, #3
    4cd4:	440b      	add	r3, r1
    4cd6:	4618      	mov	r0, r3
    4cd8:	f000 f86a 	bl	4db0 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4cdc:	2300      	movs	r3, #0
    4cde:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4ce2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4ce6:	4618      	mov	r0, r3
    4ce8:	b005      	add	sp, #20
    4cea:	f85d fb04 	ldr.w	pc, [sp], #4
    4cee:	bf00      	nop
    4cf0:	1fff8cd8 	.word	0x1fff8cd8
    4cf4:	1fff8ce0 	.word	0x1fff8ce0

00004cf8 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4cf8:	b500      	push	{lr}
    4cfa:	b085      	sub	sp, #20
    4cfc:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4cfe:	4a0d      	ldr	r2, [pc, #52]	; (4d34 <Mcu_SetMode+0x3c>)
    4d00:	9b01      	ldr	r3, [sp, #4]
    4d02:	4413      	add	r3, r2
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d0a:	f007 f8f3 	bl	bef4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4d0e:	4b0a      	ldr	r3, [pc, #40]	; (4d38 <Mcu_SetMode+0x40>)
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	6919      	ldr	r1, [r3, #16]
    4d14:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d18:	4613      	mov	r3, r2
    4d1a:	005b      	lsls	r3, r3, #1
    4d1c:	4413      	add	r3, r2
    4d1e:	009b      	lsls	r3, r3, #2
    4d20:	440b      	add	r3, r1
    4d22:	4618      	mov	r0, r3
    4d24:	f000 f84e 	bl	4dc4 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d28:	f007 f910 	bl	bf4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d2c:	bf00      	nop
    4d2e:	b005      	add	sp, #20
    4d30:	f85d fb04 	ldr.w	pc, [sp], #4
    4d34:	1fff8cdc 	.word	0x1fff8cdc
    4d38:	1fff8ce0 	.word	0x1fff8ce0

00004d3c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4d3c:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4d3e:	2302      	movs	r3, #2
    4d40:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4d42:	9b01      	ldr	r3, [sp, #4]
}
    4d44:	4618      	mov	r0, r3
    4d46:	b002      	add	sp, #8
    4d48:	4770      	bx	lr

00004d4a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4d4a:	b500      	push	{lr}
    4d4c:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4d4e:	f000 f843 	bl	4dd8 <Mcu_Ipw_GetResetReason>
    4d52:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4d54:	9b01      	ldr	r3, [sp, #4]
}
    4d56:	4618      	mov	r0, r3
    4d58:	b003      	add	sp, #12
    4d5a:	f85d fb04 	ldr.w	pc, [sp], #4

00004d5e <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4d5e:	b500      	push	{lr}
    4d60:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4d62:	f000 f83f 	bl	4de4 <Mcu_Ipw_GetResetRawValue>
    4d66:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4d68:	9b01      	ldr	r3, [sp, #4]
}
    4d6a:	4618      	mov	r0, r3
    4d6c:	b003      	add	sp, #12
    4d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00004d72 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4d72:	b500      	push	{lr}
    4d74:	b083      	sub	sp, #12
    4d76:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4d78:	9801      	ldr	r0, [sp, #4]
    4d7a:	f000 f839 	bl	4df0 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4d7e:	bf00      	nop
    4d80:	b003      	add	sp, #12
    4d82:	f85d fb04 	ldr.w	pc, [sp], #4

00004d86 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4d86:	b082      	sub	sp, #8
    4d88:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4d8a:	4b03      	ldr	r3, [pc, #12]	; (4d98 <Mcu_ClkSrcFailureNotification+0x12>)
    4d8c:	681b      	ldr	r3, [r3, #0]
    4d8e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4d90:	bf00      	nop
    4d92:	b002      	add	sp, #8
    4d94:	4770      	bx	lr
    4d96:	bf00      	nop
    4d98:	1fff8ce0 	.word	0x1fff8ce0

00004d9c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4d9c:	b500      	push	{lr}
    4d9e:	b083      	sub	sp, #12
    4da0:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4da2:	9801      	ldr	r0, [sp, #4]
    4da4:	f000 f882 	bl	4eac <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4da8:	bf00      	nop
    4daa:	b003      	add	sp, #12
    4dac:	f85d fb04 	ldr.w	pc, [sp], #4

00004db0 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4db0:	b500      	push	{lr}
    4db2:	b083      	sub	sp, #12
    4db4:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4db6:	9801      	ldr	r0, [sp, #4]
    4db8:	f7fc fc6a 	bl	1690 <Clock_Ip_InitClock>
}
    4dbc:	bf00      	nop
    4dbe:	b003      	add	sp, #12
    4dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00004dc4 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4dc4:	b500      	push	{lr}
    4dc6:	b083      	sub	sp, #12
    4dc8:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4dca:	9801      	ldr	r0, [sp, #4]
    4dcc:	f000 f820 	bl	4e10 <Power_Ip_SetMode>
}
    4dd0:	bf00      	nop
    4dd2:	b003      	add	sp, #12
    4dd4:	f85d fb04 	ldr.w	pc, [sp], #4

00004dd8 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4dd8:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4dda:	f000 f84f 	bl	4e7c <Power_Ip_GetResetReason>
    4dde:	4603      	mov	r3, r0
}
    4de0:	4618      	mov	r0, r3
    4de2:	bd08      	pop	{r3, pc}

00004de4 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4de4:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4de6:	f000 f857 	bl	4e98 <Power_Ip_GetResetRawValue>
    4dea:	4603      	mov	r3, r0
}
    4dec:	4618      	mov	r0, r3
    4dee:	bd08      	pop	{r3, pc}

00004df0 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4df0:	b500      	push	{lr}
    4df2:	b083      	sub	sp, #12
    4df4:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4df6:	9b01      	ldr	r3, [sp, #4]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d102      	bne.n	4e02 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4dfc:	f000 f86c 	bl	4ed8 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4e00:	e001      	b.n	4e06 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4e02:	f000 f86e 	bl	4ee2 <Power_Ip_EnableSleepOnExit>
}
    4e06:	bf00      	nop
    4e08:	b003      	add	sp, #12
    4e0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004e10 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4e10:	b500      	push	{lr}
    4e12:	b085      	sub	sp, #20
    4e14:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e16:	9b01      	ldr	r3, [sp, #4]
    4e18:	685b      	ldr	r3, [r3, #4]
    4e1a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e1c:	9802      	ldr	r0, [sp, #8]
    4e1e:	f000 f9f5 	bl	520c <Power_Ip_SMC_ModeCheckEntry>
    4e22:	4603      	mov	r3, r0
    4e24:	2b00      	cmp	r3, #0
    4e26:	d002      	beq.n	4e2e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e28:	2301      	movs	r3, #1
    4e2a:	9303      	str	r3, [sp, #12]
    4e2c:	e003      	b.n	4e36 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4e2e:	9801      	ldr	r0, [sp, #4]
    4e30:	f000 fa1e 	bl	5270 <Power_Ip_SMC_ModeConfig>
    4e34:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4e36:	9b03      	ldr	r3, [sp, #12]
    4e38:	2b01      	cmp	r3, #1
    4e3a:	d103      	bne.n	4e44 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e3c:	21ff      	movs	r1, #255	; 0xff
    4e3e:	2003      	movs	r0, #3
    4e40:	f000 f8f4 	bl	502c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4e44:	bf00      	nop
    4e46:	b005      	add	sp, #20
    4e48:	f85d fb04 	ldr.w	pc, [sp], #4

00004e4c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4e4c:	b084      	sub	sp, #16
    4e4e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4e50:	230c      	movs	r3, #12
    4e52:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4e54:	4a08      	ldr	r2, [pc, #32]	; (4e78 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e56:	9b01      	ldr	r3, [sp, #4]
    4e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e5c:	2b0e      	cmp	r3, #14
    4e5e:	d805      	bhi.n	4e6c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4e60:	4a05      	ldr	r2, [pc, #20]	; (4e78 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e62:	9b01      	ldr	r3, [sp, #4]
    4e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e68:	9303      	str	r3, [sp, #12]
    4e6a:	e001      	b.n	4e70 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4e6c:	230c      	movs	r3, #12
    4e6e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4e70:	9b03      	ldr	r3, [sp, #12]
}
    4e72:	4618      	mov	r0, r3
    4e74:	b004      	add	sp, #16
    4e76:	4770      	bx	lr
    4e78:	0000c990 	.word	0x0000c990

00004e7c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4e7c:	b500      	push	{lr}
    4e7e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4e80:	f000 f940 	bl	5104 <Power_Ip_RCM_GetResetReason>
    4e84:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4e86:	9801      	ldr	r0, [sp, #4]
    4e88:	f7ff ffe0 	bl	4e4c <Power_Ip_ConvertIntergeToResetType>
    4e8c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4e8e:	9b00      	ldr	r3, [sp, #0]
}
    4e90:	4618      	mov	r0, r3
    4e92:	b003      	add	sp, #12
    4e94:	f85d fb04 	ldr.w	pc, [sp], #4

00004e98 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4e98:	b500      	push	{lr}
    4e9a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4e9c:	f000 f98a 	bl	51b4 <Power_Ip_RCM_GetResetRawValue>
    4ea0:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4ea2:	9b01      	ldr	r3, [sp, #4]
}
    4ea4:	4618      	mov	r0, r3
    4ea6:	b003      	add	sp, #12
    4ea8:	f85d fb04 	ldr.w	pc, [sp], #4

00004eac <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4eac:	b500      	push	{lr}
    4eae:	b083      	sub	sp, #12
    4eb0:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4eb2:	9b01      	ldr	r3, [sp, #4]
    4eb4:	681b      	ldr	r3, [r3, #0]
    4eb6:	4618      	mov	r0, r3
    4eb8:	f000 f90e 	bl	50d8 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4ebc:	9b01      	ldr	r3, [sp, #4]
    4ebe:	685b      	ldr	r3, [r3, #4]
    4ec0:	4618      	mov	r0, r3
    4ec2:	f000 f86d 	bl	4fa0 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	689b      	ldr	r3, [r3, #8]
    4eca:	4618      	mov	r0, r3
    4ecc:	f000 f990 	bl	51f0 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4ed0:	bf00      	nop
    4ed2:	b003      	add	sp, #12
    4ed4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ed8 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4ed8:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4eda:	f000 f811 	bl	4f00 <Power_Ip_CM4_DisableSleepOnExit>
}
    4ede:	bf00      	nop
    4ee0:	bd08      	pop	{r3, pc}

00004ee2 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4ee2:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4ee4:	f000 f820 	bl	4f28 <Power_Ip_CM4_EnableSleepOnExit>
}
    4ee8:	bf00      	nop
    4eea:	bd08      	pop	{r3, pc}

00004eec <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4eec:	b082      	sub	sp, #8
    4eee:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4ef0:	4a02      	ldr	r2, [pc, #8]	; (4efc <Power_Ip_InstallNotificationsCallback+0x10>)
    4ef2:	9b01      	ldr	r3, [sp, #4]
    4ef4:	6013      	str	r3, [r2, #0]
}
    4ef6:	bf00      	nop
    4ef8:	b002      	add	sp, #8
    4efa:	4770      	bx	lr
    4efc:	1fff8b24 	.word	0x1fff8b24

00004f00 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4f00:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f02:	2300      	movs	r3, #0
    4f04:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f06:	4b07      	ldr	r3, [pc, #28]	; (4f24 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	685b      	ldr	r3, [r3, #4]
    4f0c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4f0e:	9b01      	ldr	r3, [sp, #4]
    4f10:	f023 0302 	bic.w	r3, r3, #2
    4f14:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f16:	4b03      	ldr	r3, [pc, #12]	; (4f24 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f18:	681b      	ldr	r3, [r3, #0]
    4f1a:	9a01      	ldr	r2, [sp, #4]
    4f1c:	605a      	str	r2, [r3, #4]
}
    4f1e:	bf00      	nop
    4f20:	b002      	add	sp, #8
    4f22:	4770      	bx	lr
    4f24:	1fff8b28 	.word	0x1fff8b28

00004f28 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4f28:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f2a:	2300      	movs	r3, #0
    4f2c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f2e:	4b07      	ldr	r3, [pc, #28]	; (4f4c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	685b      	ldr	r3, [r3, #4]
    4f34:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4f36:	9b01      	ldr	r3, [sp, #4]
    4f38:	f043 0302 	orr.w	r3, r3, #2
    4f3c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f3e:	4b03      	ldr	r3, [pc, #12]	; (4f4c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f40:	681b      	ldr	r3, [r3, #0]
    4f42:	9a01      	ldr	r2, [sp, #4]
    4f44:	605a      	str	r2, [r3, #4]
}
    4f46:	bf00      	nop
    4f48:	b002      	add	sp, #8
    4f4a:	4770      	bx	lr
    4f4c:	1fff8b28 	.word	0x1fff8b28

00004f50 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4f50:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f52:	2300      	movs	r3, #0
    4f54:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f56:	4b07      	ldr	r3, [pc, #28]	; (4f74 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f58:	681b      	ldr	r3, [r3, #0]
    4f5a:	685b      	ldr	r3, [r3, #4]
    4f5c:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4f5e:	9b01      	ldr	r3, [sp, #4]
    4f60:	f043 0304 	orr.w	r3, r3, #4
    4f64:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f66:	4b03      	ldr	r3, [pc, #12]	; (4f74 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f68:	681b      	ldr	r3, [r3, #0]
    4f6a:	9a01      	ldr	r2, [sp, #4]
    4f6c:	605a      	str	r2, [r3, #4]
}
    4f6e:	bf00      	nop
    4f70:	b002      	add	sp, #8
    4f72:	4770      	bx	lr
    4f74:	1fff8b28 	.word	0x1fff8b28

00004f78 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4f78:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f7a:	2300      	movs	r3, #0
    4f7c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f7e:	4b07      	ldr	r3, [pc, #28]	; (4f9c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	685b      	ldr	r3, [r3, #4]
    4f84:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4f86:	9b01      	ldr	r3, [sp, #4]
    4f88:	f023 0304 	bic.w	r3, r3, #4
    4f8c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f8e:	4b03      	ldr	r3, [pc, #12]	; (4f9c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f90:	681b      	ldr	r3, [r3, #0]
    4f92:	9a01      	ldr	r2, [sp, #4]
    4f94:	605a      	str	r2, [r3, #4]
}
    4f96:	bf00      	nop
    4f98:	b002      	add	sp, #8
    4f9a:	4770      	bx	lr
    4f9c:	1fff8b28 	.word	0x1fff8b28

00004fa0 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4fa0:	b084      	sub	sp, #16
    4fa2:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4fa4:	4b20      	ldr	r3, [pc, #128]	; (5028 <Power_Ip_PMC_PowerInit+0x88>)
    4fa6:	781b      	ldrb	r3, [r3, #0]
    4fa8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4fac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fb0:	f003 030f 	and.w	r3, r3, #15
    4fb4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4fb8:	9b01      	ldr	r3, [sp, #4]
    4fba:	781a      	ldrb	r2, [r3, #0]
    4fbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fc0:	4313      	orrs	r3, r2
    4fc2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4fc6:	4a18      	ldr	r2, [pc, #96]	; (5028 <Power_Ip_PMC_PowerInit+0x88>)
    4fc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fcc:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4fce:	4b16      	ldr	r3, [pc, #88]	; (5028 <Power_Ip_PMC_PowerInit+0x88>)
    4fd0:	785b      	ldrb	r3, [r3, #1]
    4fd2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4fd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fda:	f003 031f 	and.w	r3, r3, #31
    4fde:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4fe2:	9b01      	ldr	r3, [sp, #4]
    4fe4:	785a      	ldrb	r2, [r3, #1]
    4fe6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fea:	4313      	orrs	r3, r2
    4fec:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4ff0:	4a0d      	ldr	r2, [pc, #52]	; (5028 <Power_Ip_PMC_PowerInit+0x88>)
    4ff2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ff6:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4ff8:	4b0b      	ldr	r3, [pc, #44]	; (5028 <Power_Ip_PMC_PowerInit+0x88>)
    4ffa:	789b      	ldrb	r3, [r3, #2]
    4ffc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5000:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5004:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5008:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    500c:	9b01      	ldr	r3, [sp, #4]
    500e:	789a      	ldrb	r2, [r3, #2]
    5010:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5014:	4313      	orrs	r3, r2
    5016:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    501a:	4a03      	ldr	r2, [pc, #12]	; (5028 <Power_Ip_PMC_PowerInit+0x88>)
    501c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5020:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5022:	bf00      	nop
    5024:	b004      	add	sp, #16
    5026:	4770      	bx	lr
    5028:	4007d000 	.word	0x4007d000

0000502c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    502c:	b500      	push	{lr}
    502e:	b083      	sub	sp, #12
    5030:	9001      	str	r0, [sp, #4]
    5032:	460b      	mov	r3, r1
    5034:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5038:	4b05      	ldr	r3, [pc, #20]	; (5050 <Power_Ip_ReportPowerErrors+0x24>)
    503a:	681b      	ldr	r3, [r3, #0]
    503c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5040:	4611      	mov	r1, r2
    5042:	9801      	ldr	r0, [sp, #4]
    5044:	4798      	blx	r3
}
    5046:	bf00      	nop
    5048:	b003      	add	sp, #12
    504a:	f85d fb04 	ldr.w	pc, [sp], #4
    504e:	bf00      	nop
    5050:	1fff8b24 	.word	0x1fff8b24

00005054 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5054:	b082      	sub	sp, #8
    5056:	9001      	str	r0, [sp, #4]
    5058:	460b      	mov	r3, r1
    505a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    505e:	bf00      	nop
    5060:	b002      	add	sp, #8
    5062:	4770      	bx	lr

00005064 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5064:	b500      	push	{lr}
    5066:	b085      	sub	sp, #20
    5068:	9003      	str	r0, [sp, #12]
    506a:	9102      	str	r1, [sp, #8]
    506c:	9201      	str	r2, [sp, #4]
    506e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5070:	2000      	movs	r0, #0
    5072:	f7fc f83d 	bl	10f0 <OsIf_GetCounter>
    5076:	4602      	mov	r2, r0
    5078:	9b03      	ldr	r3, [sp, #12]
    507a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    507c:	9b02      	ldr	r3, [sp, #8]
    507e:	2200      	movs	r2, #0
    5080:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5082:	2100      	movs	r1, #0
    5084:	9800      	ldr	r0, [sp, #0]
    5086:	f7fc f87f 	bl	1188 <OsIf_MicrosToTicks>
    508a:	4602      	mov	r2, r0
    508c:	9b01      	ldr	r3, [sp, #4]
    508e:	601a      	str	r2, [r3, #0]
}
    5090:	bf00      	nop
    5092:	b005      	add	sp, #20
    5094:	f85d fb04 	ldr.w	pc, [sp], #4

00005098 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5098:	b500      	push	{lr}
    509a:	b087      	sub	sp, #28
    509c:	9003      	str	r0, [sp, #12]
    509e:	9102      	str	r1, [sp, #8]
    50a0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    50a2:	2300      	movs	r3, #0
    50a4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    50a8:	2100      	movs	r1, #0
    50aa:	9803      	ldr	r0, [sp, #12]
    50ac:	f7fc f839 	bl	1122 <OsIf_GetElapsed>
    50b0:	4602      	mov	r2, r0
    50b2:	9b02      	ldr	r3, [sp, #8]
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	441a      	add	r2, r3
    50b8:	9b02      	ldr	r3, [sp, #8]
    50ba:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    50bc:	9b02      	ldr	r3, [sp, #8]
    50be:	681b      	ldr	r3, [r3, #0]
    50c0:	9a01      	ldr	r2, [sp, #4]
    50c2:	429a      	cmp	r2, r3
    50c4:	d802      	bhi.n	50cc <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    50c6:	2301      	movs	r3, #1
    50c8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    50cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    50d0:	4618      	mov	r0, r3
    50d2:	b007      	add	sp, #28
    50d4:	f85d fb04 	ldr.w	pc, [sp], #4

000050d8 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    50d8:	b082      	sub	sp, #8
    50da:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    50dc:	9b01      	ldr	r3, [sp, #4]
    50de:	681a      	ldr	r2, [r3, #0]
    50e0:	4907      	ldr	r1, [pc, #28]	; (5100 <Power_Ip_RCM_ResetInit+0x28>)
    50e2:	f641 7307 	movw	r3, #7943	; 0x1f07
    50e6:	4013      	ands	r3, r2
    50e8:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    50ea:	9b01      	ldr	r3, [sp, #4]
    50ec:	685a      	ldr	r2, [r3, #4]
    50ee:	4904      	ldr	r1, [pc, #16]	; (5100 <Power_Ip_RCM_ResetInit+0x28>)
    50f0:	f642 73ff 	movw	r3, #12287	; 0x2fff
    50f4:	4013      	ands	r3, r2
    50f6:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    50f8:	bf00      	nop
    50fa:	b002      	add	sp, #8
    50fc:	4770      	bx	lr
    50fe:	bf00      	nop
    5100:	4007f000 	.word	0x4007f000

00005104 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5104:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5106:	230c      	movs	r3, #12
    5108:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    510a:	2300      	movs	r3, #0
    510c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    510e:	2300      	movs	r3, #0
    5110:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5112:	2300      	movs	r3, #0
    5114:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5116:	4b25      	ldr	r3, [pc, #148]	; (51ac <Power_Ip_RCM_GetResetReason+0xa8>)
    5118:	699a      	ldr	r2, [r3, #24]
    511a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    511e:	4013      	ands	r3, r2
    5120:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5122:	9b03      	ldr	r3, [sp, #12]
    5124:	2b00      	cmp	r3, #0
    5126:	d008      	beq.n	513a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5128:	4920      	ldr	r1, [pc, #128]	; (51ac <Power_Ip_RCM_GetResetReason+0xa8>)
    512a:	9a03      	ldr	r2, [sp, #12]
    512c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5130:	4013      	ands	r3, r2
    5132:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5134:	4a1e      	ldr	r2, [pc, #120]	; (51b0 <Power_Ip_RCM_GetResetReason+0xac>)
    5136:	9b03      	ldr	r3, [sp, #12]
    5138:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    513a:	4b1d      	ldr	r3, [pc, #116]	; (51b0 <Power_Ip_RCM_GetResetReason+0xac>)
    513c:	681b      	ldr	r3, [r3, #0]
    513e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5140:	9a02      	ldr	r2, [sp, #8]
    5142:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5146:	4013      	ands	r3, r2
    5148:	2b82      	cmp	r3, #130	; 0x82
    514a:	d102      	bne.n	5152 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    514c:	2305      	movs	r3, #5
    514e:	9307      	str	r3, [sp, #28]
    5150:	e027      	b.n	51a2 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5152:	2300      	movs	r3, #0
    5154:	9306      	str	r3, [sp, #24]
    5156:	e021      	b.n	519c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5158:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    515c:	9b06      	ldr	r3, [sp, #24]
    515e:	fa22 f303 	lsr.w	r3, r2, r3
    5162:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5164:	9a01      	ldr	r2, [sp, #4]
    5166:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    516a:	4013      	ands	r3, r2
    516c:	2b00      	cmp	r3, #0
    516e:	d012      	beq.n	5196 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5170:	9a01      	ldr	r2, [sp, #4]
    5172:	9b02      	ldr	r3, [sp, #8]
    5174:	4013      	ands	r3, r2
    5176:	2b00      	cmp	r3, #0
    5178:	d00a      	beq.n	5190 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    517a:	9b05      	ldr	r3, [sp, #20]
    517c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    517e:	9b04      	ldr	r3, [sp, #16]
    5180:	3301      	adds	r3, #1
    5182:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5184:	9b04      	ldr	r3, [sp, #16]
    5186:	2b01      	cmp	r3, #1
    5188:	d902      	bls.n	5190 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    518a:	230d      	movs	r3, #13
    518c:	9307      	str	r3, [sp, #28]
                        break;
    518e:	e008      	b.n	51a2 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5190:	9b05      	ldr	r3, [sp, #20]
    5192:	3301      	adds	r3, #1
    5194:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5196:	9b06      	ldr	r3, [sp, #24]
    5198:	3301      	adds	r3, #1
    519a:	9306      	str	r3, [sp, #24]
    519c:	9b06      	ldr	r3, [sp, #24]
    519e:	2b1f      	cmp	r3, #31
    51a0:	d9da      	bls.n	5158 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    51a2:	9b07      	ldr	r3, [sp, #28]
}
    51a4:	4618      	mov	r0, r3
    51a6:	b008      	add	sp, #32
    51a8:	4770      	bx	lr
    51aa:	bf00      	nop
    51ac:	4007f000 	.word	0x4007f000
    51b0:	1fff8ce4 	.word	0x1fff8ce4

000051b4 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    51b4:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    51b6:	4b0c      	ldr	r3, [pc, #48]	; (51e8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51b8:	699a      	ldr	r2, [r3, #24]
    51ba:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51be:	4013      	ands	r3, r2
    51c0:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    51c2:	9b01      	ldr	r3, [sp, #4]
    51c4:	2b00      	cmp	r3, #0
    51c6:	d008      	beq.n	51da <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    51c8:	4907      	ldr	r1, [pc, #28]	; (51e8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51ca:	9a01      	ldr	r2, [sp, #4]
    51cc:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51d0:	4013      	ands	r3, r2
    51d2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    51d4:	4a05      	ldr	r2, [pc, #20]	; (51ec <Power_Ip_RCM_GetResetRawValue+0x38>)
    51d6:	9b01      	ldr	r3, [sp, #4]
    51d8:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    51da:	4b04      	ldr	r3, [pc, #16]	; (51ec <Power_Ip_RCM_GetResetRawValue+0x38>)
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    51e0:	9b00      	ldr	r3, [sp, #0]
}
    51e2:	4618      	mov	r0, r3
    51e4:	b002      	add	sp, #8
    51e6:	4770      	bx	lr
    51e8:	4007f000 	.word	0x4007f000
    51ec:	1fff8ce4 	.word	0x1fff8ce4

000051f0 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    51f0:	b082      	sub	sp, #8
    51f2:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    51f4:	9b01      	ldr	r3, [sp, #4]
    51f6:	681b      	ldr	r3, [r3, #0]
    51f8:	4a03      	ldr	r2, [pc, #12]	; (5208 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    51fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    51fe:	6093      	str	r3, [r2, #8]
}
    5200:	bf00      	nop
    5202:	b002      	add	sp, #8
    5204:	4770      	bx	lr
    5206:	bf00      	nop
    5208:	4007e000 	.word	0x4007e000

0000520c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    520c:	b084      	sub	sp, #16
    520e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5210:	2301      	movs	r3, #1
    5212:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5214:	4b15      	ldr	r3, [pc, #84]	; (526c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5216:	695b      	ldr	r3, [r3, #20]
    5218:	b2db      	uxtb	r3, r3
    521a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    521c:	9b01      	ldr	r3, [sp, #4]
    521e:	2b02      	cmp	r3, #2
    5220:	d012      	beq.n	5248 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5222:	9b01      	ldr	r3, [sp, #4]
    5224:	2b02      	cmp	r3, #2
    5226:	d818      	bhi.n	525a <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5228:	9b01      	ldr	r3, [sp, #4]
    522a:	2b00      	cmp	r3, #0
    522c:	d003      	beq.n	5236 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    522e:	9b01      	ldr	r3, [sp, #4]
    5230:	2b01      	cmp	r3, #1
    5232:	d003      	beq.n	523c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5234:	e011      	b.n	525a <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5236:	2300      	movs	r3, #0
    5238:	9303      	str	r3, [sp, #12]
            break;
    523a:	e013      	b.n	5264 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    523c:	9b02      	ldr	r3, [sp, #8]
    523e:	2b01      	cmp	r3, #1
    5240:	d10d      	bne.n	525e <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5242:	2300      	movs	r3, #0
    5244:	9303      	str	r3, [sp, #12]
            break;
    5246:	e00a      	b.n	525e <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5248:	9b02      	ldr	r3, [sp, #8]
    524a:	2b01      	cmp	r3, #1
    524c:	d002      	beq.n	5254 <Power_Ip_SMC_ModeCheckEntry+0x48>
    524e:	9b02      	ldr	r3, [sp, #8]
    5250:	2b10      	cmp	r3, #16
    5252:	d106      	bne.n	5262 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5254:	2300      	movs	r3, #0
    5256:	9303      	str	r3, [sp, #12]
            break;
    5258:	e003      	b.n	5262 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    525a:	bf00      	nop
    525c:	e002      	b.n	5264 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    525e:	bf00      	nop
    5260:	e000      	b.n	5264 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5262:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5264:	9b03      	ldr	r3, [sp, #12]
}
    5266:	4618      	mov	r0, r3
    5268:	b004      	add	sp, #16
    526a:	4770      	bx	lr
    526c:	4007e000 	.word	0x4007e000

00005270 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5270:	b500      	push	{lr}
    5272:	b08b      	sub	sp, #44	; 0x2c
    5274:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5276:	2300      	movs	r3, #0
    5278:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    527a:	2300      	movs	r3, #0
    527c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    527e:	2300      	movs	r3, #0
    5280:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5284:	9b01      	ldr	r3, [sp, #4]
    5286:	685b      	ldr	r3, [r3, #4]
    5288:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    528a:	9b08      	ldr	r3, [sp, #32]
    528c:	2b02      	cmp	r3, #2
    528e:	d076      	beq.n	537e <Power_Ip_SMC_ModeConfig+0x10e>
    5290:	9b08      	ldr	r3, [sp, #32]
    5292:	2b02      	cmp	r3, #2
    5294:	f200 80ab 	bhi.w	53ee <Power_Ip_SMC_ModeConfig+0x17e>
    5298:	9b08      	ldr	r3, [sp, #32]
    529a:	2b00      	cmp	r3, #0
    529c:	d003      	beq.n	52a6 <Power_Ip_SMC_ModeConfig+0x36>
    529e:	9b08      	ldr	r3, [sp, #32]
    52a0:	2b01      	cmp	r3, #1
    52a2:	d034      	beq.n	530e <Power_Ip_SMC_ModeConfig+0x9e>
    52a4:	e0a3      	b.n	53ee <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    52a6:	4b58      	ldr	r3, [pc, #352]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    52a8:	68db      	ldr	r3, [r3, #12]
    52aa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    52ac:	9b06      	ldr	r3, [sp, #24]
    52ae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    52b2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    52b4:	4a54      	ldr	r2, [pc, #336]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    52b6:	9b06      	ldr	r3, [sp, #24]
    52b8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    52ba:	aa02      	add	r2, sp, #8
    52bc:	a903      	add	r1, sp, #12
    52be:	a804      	add	r0, sp, #16
    52c0:	f24c 3350 	movw	r3, #50000	; 0xc350
    52c4:	f7ff fece 	bl	5064 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    52c8:	9a02      	ldr	r2, [sp, #8]
    52ca:	a903      	add	r1, sp, #12
    52cc:	ab04      	add	r3, sp, #16
    52ce:	4618      	mov	r0, r3
    52d0:	f7ff fee2 	bl	5098 <Power_Ip_TimeoutExpired>
    52d4:	4603      	mov	r3, r0
    52d6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    52da:	4b4b      	ldr	r3, [pc, #300]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    52dc:	695b      	ldr	r3, [r3, #20]
    52de:	f003 0301 	and.w	r3, r3, #1
    52e2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    52e4:	9b05      	ldr	r3, [sp, #20]
    52e6:	2b01      	cmp	r3, #1
    52e8:	d006      	beq.n	52f8 <Power_Ip_SMC_ModeConfig+0x88>
    52ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    52ee:	f083 0301 	eor.w	r3, r3, #1
    52f2:	b2db      	uxtb	r3, r3
    52f4:	2b00      	cmp	r3, #0
    52f6:	d1e7      	bne.n	52c8 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    52f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    52fc:	2b00      	cmp	r3, #0
    52fe:	d079      	beq.n	53f4 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5300:	2301      	movs	r3, #1
    5302:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5304:	21ff      	movs	r1, #255	; 0xff
    5306:	2000      	movs	r0, #0
    5308:	f7ff fe90 	bl	502c <Power_Ip_ReportPowerErrors>
            }

            break;
    530c:	e072      	b.n	53f4 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    530e:	4b3e      	ldr	r3, [pc, #248]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    5310:	68db      	ldr	r3, [r3, #12]
    5312:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5314:	9b06      	ldr	r3, [sp, #24]
    5316:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    531a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    531c:	9b06      	ldr	r3, [sp, #24]
    531e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5322:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5324:	4a38      	ldr	r2, [pc, #224]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    5326:	9b06      	ldr	r3, [sp, #24]
    5328:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    532a:	aa02      	add	r2, sp, #8
    532c:	a903      	add	r1, sp, #12
    532e:	a804      	add	r0, sp, #16
    5330:	f24c 3350 	movw	r3, #50000	; 0xc350
    5334:	f7ff fe96 	bl	5064 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5338:	9a02      	ldr	r2, [sp, #8]
    533a:	a903      	add	r1, sp, #12
    533c:	ab04      	add	r3, sp, #16
    533e:	4618      	mov	r0, r3
    5340:	f7ff feaa 	bl	5098 <Power_Ip_TimeoutExpired>
    5344:	4603      	mov	r3, r0
    5346:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    534a:	4b2f      	ldr	r3, [pc, #188]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    534c:	695b      	ldr	r3, [r3, #20]
    534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5352:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5354:	9b05      	ldr	r3, [sp, #20]
    5356:	2b80      	cmp	r3, #128	; 0x80
    5358:	d006      	beq.n	5368 <Power_Ip_SMC_ModeConfig+0xf8>
    535a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    535e:	f083 0301 	eor.w	r3, r3, #1
    5362:	b2db      	uxtb	r3, r3
    5364:	2b00      	cmp	r3, #0
    5366:	d1e7      	bne.n	5338 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5368:	f89d 301f 	ldrb.w	r3, [sp, #31]
    536c:	2b00      	cmp	r3, #0
    536e:	d043      	beq.n	53f8 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5370:	2301      	movs	r3, #1
    5372:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5374:	21ff      	movs	r1, #255	; 0xff
    5376:	2000      	movs	r0, #0
    5378:	f7ff fe58 	bl	502c <Power_Ip_ReportPowerErrors>
            }

            break;
    537c:	e03c      	b.n	53f8 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    537e:	4b22      	ldr	r3, [pc, #136]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    5380:	68db      	ldr	r3, [r3, #12]
    5382:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5384:	9b06      	ldr	r3, [sp, #24]
    5386:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    538a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    538c:	9b06      	ldr	r3, [sp, #24]
    538e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5392:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5394:	4a1c      	ldr	r2, [pc, #112]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    5396:	9b06      	ldr	r3, [sp, #24]
    5398:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    539a:	aa02      	add	r2, sp, #8
    539c:	a903      	add	r1, sp, #12
    539e:	a804      	add	r0, sp, #16
    53a0:	f24c 3350 	movw	r3, #50000	; 0xc350
    53a4:	f7ff fe5e 	bl	5064 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53a8:	9a02      	ldr	r2, [sp, #8]
    53aa:	a903      	add	r1, sp, #12
    53ac:	ab04      	add	r3, sp, #16
    53ae:	4618      	mov	r0, r3
    53b0:	f7ff fe72 	bl	5098 <Power_Ip_TimeoutExpired>
    53b4:	4603      	mov	r3, r0
    53b6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    53ba:	4b13      	ldr	r3, [pc, #76]	; (5408 <Power_Ip_SMC_ModeConfig+0x198>)
    53bc:	695b      	ldr	r3, [r3, #20]
    53be:	f003 0304 	and.w	r3, r3, #4
    53c2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53c4:	9b05      	ldr	r3, [sp, #20]
    53c6:	2b04      	cmp	r3, #4
    53c8:	d006      	beq.n	53d8 <Power_Ip_SMC_ModeConfig+0x168>
    53ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53ce:	f083 0301 	eor.w	r3, r3, #1
    53d2:	b2db      	uxtb	r3, r3
    53d4:	2b00      	cmp	r3, #0
    53d6:	d1e7      	bne.n	53a8 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    53d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53dc:	2b00      	cmp	r3, #0
    53de:	d00d      	beq.n	53fc <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53e0:	2301      	movs	r3, #1
    53e2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53e4:	21ff      	movs	r1, #255	; 0xff
    53e6:	2000      	movs	r0, #0
    53e8:	f7ff fe20 	bl	502c <Power_Ip_ReportPowerErrors>
            }

            break;
    53ec:	e006      	b.n	53fc <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53ee:	2301      	movs	r3, #1
    53f0:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    53f2:	e004      	b.n	53fe <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    53f4:	bf00      	nop
    53f6:	e002      	b.n	53fe <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    53f8:	bf00      	nop
    53fa:	e000      	b.n	53fe <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    53fc:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    53fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5400:	4618      	mov	r0, r3
    5402:	b00b      	add	sp, #44	; 0x2c
    5404:	f85d fb04 	ldr.w	pc, [sp], #4
    5408:	4007e000 	.word	0x4007e000

0000540c <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    540c:	b084      	sub	sp, #16
    540e:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    5410:	2300      	movs	r3, #0
    5412:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    5416:	2300      	movs	r3, #0
    5418:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    541c:	2300      	movs	r3, #0
    541e:	f88d 300e 	strb.w	r3, [sp, #14]
    5422:	e01b      	b.n	545c <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5424:	4a12      	ldr	r2, [pc, #72]	; (5470 <Can_IsControllersBusy+0x64>)
    5426:	9b01      	ldr	r3, [sp, #4]
    5428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    542c:	695a      	ldr	r2, [r3, #20]
    542e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5432:	009b      	lsls	r3, r3, #2
    5434:	4413      	add	r3, r2
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	2b00      	cmp	r3, #0
    543a:	d00a      	beq.n	5452 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    543c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5440:	4a0c      	ldr	r2, [pc, #48]	; (5474 <Can_IsControllersBusy+0x68>)
    5442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5446:	2b00      	cmp	r3, #0
    5448:	d003      	beq.n	5452 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    544a:	2301      	movs	r3, #1
    544c:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    5450:	e008      	b.n	5464 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5452:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5456:	3301      	adds	r3, #1
    5458:	f88d 300e 	strb.w	r3, [sp, #14]
    545c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5460:	2b00      	cmp	r3, #0
    5462:	d0df      	beq.n	5424 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    5464:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5468:	4618      	mov	r0, r3
    546a:	b004      	add	sp, #16
    546c:	4770      	bx	lr
    546e:	bf00      	nop
    5470:	1fff8cf0 	.word	0x1fff8cf0
    5474:	1fff8cec 	.word	0x1fff8cec

00005478 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    5478:	b500      	push	{lr}
    547a:	b085      	sub	sp, #20
    547c:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    547e:	2300      	movs	r3, #0
    5480:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    5484:	2300      	movs	r3, #0
    5486:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    548a:	2300      	movs	r3, #0
    548c:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    548e:	2300      	movs	r3, #0
    5490:	f88d 300e 	strb.w	r3, [sp, #14]
    5494:	e035      	b.n	5502 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5496:	4a30      	ldr	r2, [pc, #192]	; (5558 <Can_InitControllers+0xe0>)
    5498:	9b01      	ldr	r3, [sp, #4]
    549a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    549e:	695a      	ldr	r2, [r3, #20]
    54a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    54a4:	009b      	lsls	r3, r3, #2
    54a6:	4413      	add	r3, r2
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	2b00      	cmp	r3, #0
    54ac:	d024      	beq.n	54f8 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    54ae:	4a2a      	ldr	r2, [pc, #168]	; (5558 <Can_InitControllers+0xe0>)
    54b0:	9b01      	ldr	r3, [sp, #4]
    54b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    54b6:	695a      	ldr	r2, [r3, #20]
    54b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    54bc:	009b      	lsls	r3, r3, #2
    54be:	4413      	add	r3, r2
    54c0:	681b      	ldr	r3, [r3, #0]
    54c2:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    54c4:	9b02      	ldr	r3, [sp, #8]
    54c6:	7a1b      	ldrb	r3, [r3, #8]
    54c8:	2b00      	cmp	r3, #0
    54ca:	d015      	beq.n	54f8 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    54cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    54d0:	4a22      	ldr	r2, [pc, #136]	; (555c <Can_InitControllers+0xe4>)
    54d2:	2100      	movs	r1, #0
    54d4:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    54d6:	9802      	ldr	r0, [sp, #8]
    54d8:	f000 ff78 	bl	63cc <Can_43_FLEXCAN_Ipw_Init>
    54dc:	4603      	mov	r3, r0
    54de:	2b00      	cmp	r3, #0
    54e0:	d106      	bne.n	54f0 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    54e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    54e6:	4a1e      	ldr	r2, [pc, #120]	; (5560 <Can_InitControllers+0xe8>)
    54e8:	2102      	movs	r1, #2
    54ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    54ee:	e003      	b.n	54f8 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    54f0:	2301      	movs	r3, #1
    54f2:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    54f6:	e008      	b.n	550a <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    54f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    54fc:	3301      	adds	r3, #1
    54fe:	f88d 300e 	strb.w	r3, [sp, #14]
    5502:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5506:	2b00      	cmp	r3, #0
    5508:	d0c5      	beq.n	5496 <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    550a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    550e:	2b00      	cmp	r3, #0
    5510:	d01e      	beq.n	5550 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5512:	2300      	movs	r3, #0
    5514:	f88d 300e 	strb.w	r3, [sp, #14]
    5518:	e016      	b.n	5548 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    551a:	4a0f      	ldr	r2, [pc, #60]	; (5558 <Can_InitControllers+0xe0>)
    551c:	9b01      	ldr	r3, [sp, #4]
    551e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5522:	695a      	ldr	r2, [r3, #20]
    5524:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5528:	009b      	lsls	r3, r3, #2
    552a:	4413      	add	r3, r2
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	2b00      	cmp	r3, #0
    5530:	d005      	beq.n	553e <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    5532:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5536:	4a0a      	ldr	r2, [pc, #40]	; (5560 <Can_InitControllers+0xe8>)
    5538:	2100      	movs	r1, #0
    553a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    553e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5542:	3301      	adds	r3, #1
    5544:	f88d 300e 	strb.w	r3, [sp, #14]
    5548:	f89d 300e 	ldrb.w	r3, [sp, #14]
    554c:	2b00      	cmp	r3, #0
    554e:	d0e4      	beq.n	551a <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    5550:	bf00      	nop
    5552:	b005      	add	sp, #20
    5554:	f85d fb04 	ldr.w	pc, [sp], #4
    5558:	1fff8cf0 	.word	0x1fff8cf0
    555c:	1fff8ce8 	.word	0x1fff8ce8
    5560:	1fff8cec 	.word	0x1fff8cec

00005564 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    5564:	b500      	push	{lr}
    5566:	b085      	sub	sp, #20
    5568:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    556a:	2300      	movs	r3, #0
    556c:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5570:	2300      	movs	r3, #0
    5572:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5574:	2300      	movs	r3, #0
    5576:	f88d 300f 	strb.w	r3, [sp, #15]
    557a:	e028      	b.n	55ce <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    557c:	4a18      	ldr	r2, [pc, #96]	; (55e0 <Can_DeInitControllers+0x7c>)
    557e:	9b01      	ldr	r3, [sp, #4]
    5580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5584:	695a      	ldr	r2, [r3, #20]
    5586:	f89d 300f 	ldrb.w	r3, [sp, #15]
    558a:	009b      	lsls	r3, r3, #2
    558c:	4413      	add	r3, r2
    558e:	681b      	ldr	r3, [r3, #0]
    5590:	2b00      	cmp	r3, #0
    5592:	d017      	beq.n	55c4 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5594:	4a12      	ldr	r2, [pc, #72]	; (55e0 <Can_DeInitControllers+0x7c>)
    5596:	9b01      	ldr	r3, [sp, #4]
    5598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    559c:	695a      	ldr	r2, [r3, #20]
    559e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    55a2:	009b      	lsls	r3, r3, #2
    55a4:	4413      	add	r3, r2
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    55aa:	9b02      	ldr	r3, [sp, #8]
    55ac:	7a1b      	ldrb	r3, [r3, #8]
    55ae:	2b00      	cmp	r3, #0
    55b0:	d008      	beq.n	55c4 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    55b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    55b6:	4a0b      	ldr	r2, [pc, #44]	; (55e4 <Can_DeInitControllers+0x80>)
    55b8:	2100      	movs	r1, #0
    55ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    55be:	9802      	ldr	r0, [sp, #8]
    55c0:	f001 f80a 	bl	65d8 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    55c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    55c8:	3301      	adds	r3, #1
    55ca:	f88d 300f 	strb.w	r3, [sp, #15]
    55ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    55d2:	2b00      	cmp	r3, #0
    55d4:	d0d2      	beq.n	557c <Can_DeInitControllers+0x18>
            }
        }
    }
}
    55d6:	bf00      	nop
    55d8:	bf00      	nop
    55da:	b005      	add	sp, #20
    55dc:	f85d fb04 	ldr.w	pc, [sp], #4
    55e0:	1fff8cf0 	.word	0x1fff8cf0
    55e4:	1fff8cec 	.word	0x1fff8cec

000055e8 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    55e8:	b500      	push	{lr}
    55ea:	b085      	sub	sp, #20
    55ec:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    55ee:	2300      	movs	r3, #0
    55f0:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    55f2:	2300      	movs	r3, #0
    55f4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    55f8:	2300      	movs	r3, #0
    55fa:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    55fc:	490c      	ldr	r1, [pc, #48]	; (5630 <Can_43_FLEXCAN_Init+0x48>)
    55fe:	9b03      	ldr	r3, [sp, #12]
    5600:	9a01      	ldr	r2, [sp, #4]
    5602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    5606:	9803      	ldr	r0, [sp, #12]
    5608:	f7ff ff00 	bl	540c <Can_IsControllersBusy>
    560c:	4603      	mov	r3, r0
    560e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    5612:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5616:	f083 0301 	eor.w	r3, r3, #1
    561a:	b2db      	uxtb	r3, r3
    561c:	2b00      	cmp	r3, #0
    561e:	d002      	beq.n	5626 <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    5620:	9803      	ldr	r0, [sp, #12]
    5622:	f7ff ff29 	bl	5478 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    5626:	bf00      	nop
    5628:	b005      	add	sp, #20
    562a:	f85d fb04 	ldr.w	pc, [sp], #4
    562e:	bf00      	nop
    5630:	1fff8cf0 	.word	0x1fff8cf0

00005634 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    5634:	b500      	push	{lr}
    5636:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    5638:	2300      	movs	r3, #0
    563a:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    563e:	2300      	movs	r3, #0
    5640:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    5644:	2300      	movs	r3, #0
    5646:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    5648:	2300      	movs	r3, #0
    564a:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    564c:	2300      	movs	r3, #0
    564e:	f88d 3007 	strb.w	r3, [sp, #7]
    5652:	e01b      	b.n	568c <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5654:	4a19      	ldr	r2, [pc, #100]	; (56bc <Can_43_FLEXCAN_DeInit+0x88>)
    5656:	9b00      	ldr	r3, [sp, #0]
    5658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    565c:	695a      	ldr	r2, [r3, #20]
    565e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5662:	009b      	lsls	r3, r3, #2
    5664:	4413      	add	r3, r2
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	2b00      	cmp	r3, #0
    566a:	d00a      	beq.n	5682 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    566c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5670:	4a13      	ldr	r2, [pc, #76]	; (56c0 <Can_43_FLEXCAN_DeInit+0x8c>)
    5672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5676:	2b01      	cmp	r3, #1
    5678:	d103      	bne.n	5682 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    567a:	2301      	movs	r3, #1
    567c:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    5680:	e008      	b.n	5694 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5682:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5686:	3301      	adds	r3, #1
    5688:	f88d 3007 	strb.w	r3, [sp, #7]
    568c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5690:	2b00      	cmp	r3, #0
    5692:	d0df      	beq.n	5654 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    5694:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5698:	f083 0301 	eor.w	r3, r3, #1
    569c:	b2db      	uxtb	r3, r3
    569e:	2b00      	cmp	r3, #0
    56a0:	d007      	beq.n	56b2 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    56a2:	9800      	ldr	r0, [sp, #0]
    56a4:	f7ff ff5e 	bl	5564 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    56a8:	4a04      	ldr	r2, [pc, #16]	; (56bc <Can_43_FLEXCAN_DeInit+0x88>)
    56aa:	9b00      	ldr	r3, [sp, #0]
    56ac:	2100      	movs	r1, #0
    56ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    56b2:	bf00      	nop
    56b4:	b003      	add	sp, #12
    56b6:	f85d fb04 	ldr.w	pc, [sp], #4
    56ba:	bf00      	nop
    56bc:	1fff8cf0 	.word	0x1fff8cf0
    56c0:	1fff8cec 	.word	0x1fff8cec

000056c4 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    56c4:	b500      	push	{lr}
    56c6:	b087      	sub	sp, #28
    56c8:	4603      	mov	r3, r0
    56ca:	9100      	str	r1, [sp, #0]
    56cc:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    56d0:	2301      	movs	r3, #1
    56d2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    56d6:	2300      	movs	r3, #0
    56d8:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    56da:	2300      	movs	r3, #0
    56dc:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    56de:	2300      	movs	r3, #0
    56e0:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    56e2:	4a47      	ldr	r2, [pc, #284]	; (5800 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    56e4:	9b04      	ldr	r3, [sp, #16]
    56e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56ea:	695a      	ldr	r2, [r3, #20]
    56ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    56f0:	009b      	lsls	r3, r3, #2
    56f2:	4413      	add	r3, r2
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    56f8:	9b00      	ldr	r3, [sp, #0]
    56fa:	2b03      	cmp	r3, #3
    56fc:	d05d      	beq.n	57ba <Can_43_FLEXCAN_SetControllerMode+0xf6>
    56fe:	9b00      	ldr	r3, [sp, #0]
    5700:	2b03      	cmp	r3, #3
    5702:	d874      	bhi.n	57ee <Can_43_FLEXCAN_SetControllerMode+0x12a>
    5704:	9b00      	ldr	r3, [sp, #0]
    5706:	2b01      	cmp	r3, #1
    5708:	d003      	beq.n	5712 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    570a:	9b00      	ldr	r3, [sp, #0]
    570c:	2b02      	cmp	r3, #2
    570e:	d01d      	beq.n	574c <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    5710:	e06d      	b.n	57ee <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    5712:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5716:	4a3b      	ldr	r2, [pc, #236]	; (5804 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    5718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    571c:	2b02      	cmp	r3, #2
    571e:	d168      	bne.n	57f2 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    5720:	9803      	ldr	r0, [sp, #12]
    5722:	f000 ff93 	bl	664c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    5726:	4603      	mov	r3, r0
    5728:	2b00      	cmp	r3, #0
    572a:	d162      	bne.n	57f2 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    572c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5730:	4a34      	ldr	r2, [pc, #208]	; (5804 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    5732:	2101      	movs	r1, #1
    5734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    5738:	9b03      	ldr	r3, [sp, #12]
    573a:	781b      	ldrb	r3, [r3, #0]
    573c:	2101      	movs	r1, #1
    573e:	4618      	mov	r0, r3
    5740:	f7fb f8e3 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    5744:	2300      	movs	r3, #0
    5746:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    574a:	e052      	b.n	57f2 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    574c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5750:	4a2c      	ldr	r2, [pc, #176]	; (5804 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    5752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5756:	2b01      	cmp	r3, #1
    5758:	d005      	beq.n	5766 <Can_43_FLEXCAN_SetControllerMode+0xa2>
    575a:	2b00      	cmp	r3, #0
    575c:	d029      	beq.n	57b2 <Can_43_FLEXCAN_SetControllerMode+0xee>
    575e:	3b02      	subs	r3, #2
    5760:	2b01      	cmp	r3, #1
    5762:	d826      	bhi.n	57b2 <Can_43_FLEXCAN_SetControllerMode+0xee>
    5764:	e015      	b.n	5792 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    5766:	9803      	ldr	r0, [sp, #12]
    5768:	f000 ffde 	bl	6728 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    576c:	4603      	mov	r3, r0
    576e:	2b00      	cmp	r3, #0
    5770:	d121      	bne.n	57b6 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    5772:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5776:	4a23      	ldr	r2, [pc, #140]	; (5804 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    5778:	2102      	movs	r1, #2
    577a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    577e:	9b03      	ldr	r3, [sp, #12]
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	2102      	movs	r1, #2
    5784:	4618      	mov	r0, r3
    5786:	f7fb f8c0 	bl	90a <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    578a:	2300      	movs	r3, #0
    578c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    5790:	e011      	b.n	57b6 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    5792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5796:	4a1b      	ldr	r2, [pc, #108]	; (5804 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    5798:	2102      	movs	r1, #2
    579a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    579e:	9b03      	ldr	r3, [sp, #12]
    57a0:	781b      	ldrb	r3, [r3, #0]
    57a2:	2102      	movs	r1, #2
    57a4:	4618      	mov	r0, r3
    57a6:	f7fb f8b0 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    57aa:	2300      	movs	r3, #0
    57ac:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    57b0:	e002      	b.n	57b8 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    57b2:	bf00      	nop
    57b4:	e01e      	b.n	57f4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    57b6:	bf00      	nop
                        break;
    57b8:	e01c      	b.n	57f4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    57ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57be:	4a11      	ldr	r2, [pc, #68]	; (5804 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    57c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57c4:	3b02      	subs	r3, #2
    57c6:	2b01      	cmp	r3, #1
    57c8:	d80f      	bhi.n	57ea <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    57ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57ce:	4a0d      	ldr	r2, [pc, #52]	; (5804 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    57d0:	2103      	movs	r1, #3
    57d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    57d6:	9b03      	ldr	r3, [sp, #12]
    57d8:	781b      	ldrb	r3, [r3, #0]
    57da:	2103      	movs	r1, #3
    57dc:	4618      	mov	r0, r3
    57de:	f7fb f894 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    57e2:	2300      	movs	r3, #0
    57e4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    57e8:	e000      	b.n	57ec <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    57ea:	bf00      	nop
                        break;
    57ec:	e002      	b.n	57f4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    57ee:	bf00      	nop
    57f0:	e000      	b.n	57f4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    57f2:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    57f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    57f8:	4618      	mov	r0, r3
    57fa:	b007      	add	sp, #28
    57fc:	f85d fb04 	ldr.w	pc, [sp], #4
    5800:	1fff8cf0 	.word	0x1fff8cf0
    5804:	1fff8cec 	.word	0x1fff8cec

00005808 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    5808:	b500      	push	{lr}
    580a:	b085      	sub	sp, #20
    580c:	4603      	mov	r3, r0
    580e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    5812:	2300      	movs	r3, #0
    5814:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5816:	2300      	movs	r3, #0
    5818:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    581a:	2300      	movs	r3, #0
    581c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    581e:	4a10      	ldr	r2, [pc, #64]	; (5860 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    5820:	9b03      	ldr	r3, [sp, #12]
    5822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5826:	695a      	ldr	r2, [r3, #20]
    5828:	f89d 3007 	ldrb.w	r3, [sp, #7]
    582c:	009b      	lsls	r3, r3, #2
    582e:	4413      	add	r3, r2
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    5834:	f005 fca4 	bl	b180 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    5838:	f89d 3007 	ldrb.w	r3, [sp, #7]
    583c:	4a09      	ldr	r2, [pc, #36]	; (5864 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    583e:	5cd2      	ldrb	r2, [r2, r3]
    5840:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5844:	3201      	adds	r2, #1
    5846:	b2d1      	uxtb	r1, r2
    5848:	4a06      	ldr	r2, [pc, #24]	; (5864 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    584a:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    584c:	f005 fcc4 	bl	b1d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    5850:	9802      	ldr	r0, [sp, #8]
    5852:	f000 ffe7 	bl	6824 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    5856:	bf00      	nop
    5858:	b005      	add	sp, #20
    585a:	f85d fb04 	ldr.w	pc, [sp], #4
    585e:	bf00      	nop
    5860:	1fff8cf0 	.word	0x1fff8cf0
    5864:	1fff8ce8 	.word	0x1fff8ce8

00005868 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    5868:	b500      	push	{lr}
    586a:	b085      	sub	sp, #20
    586c:	4603      	mov	r3, r0
    586e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    5872:	2300      	movs	r3, #0
    5874:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5876:	2300      	movs	r3, #0
    5878:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    587a:	2300      	movs	r3, #0
    587c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    587e:	4a16      	ldr	r2, [pc, #88]	; (58d8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    5880:	9b03      	ldr	r3, [sp, #12]
    5882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5886:	695a      	ldr	r2, [r3, #20]
    5888:	f89d 3007 	ldrb.w	r3, [sp, #7]
    588c:	009b      	lsls	r3, r3, #2
    588e:	4413      	add	r3, r2
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    5894:	f005 fcc6 	bl	b224 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    5898:	f89d 3007 	ldrb.w	r3, [sp, #7]
    589c:	4a0f      	ldr	r2, [pc, #60]	; (58dc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    589e:	5cd3      	ldrb	r3, [r2, r3]
    58a0:	2b00      	cmp	r3, #0
    58a2:	d009      	beq.n	58b8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    58a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58a8:	4a0c      	ldr	r2, [pc, #48]	; (58dc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    58aa:	5cd2      	ldrb	r2, [r2, r3]
    58ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58b0:	3a01      	subs	r2, #1
    58b2:	b2d1      	uxtb	r1, r2
    58b4:	4a09      	ldr	r2, [pc, #36]	; (58dc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    58b6:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    58b8:	f005 fce0 	bl	b27c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    58bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58c0:	4a06      	ldr	r2, [pc, #24]	; (58dc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    58c2:	5cd3      	ldrb	r3, [r2, r3]
    58c4:	2b00      	cmp	r3, #0
    58c6:	d102      	bne.n	58ce <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    58c8:	9802      	ldr	r0, [sp, #8]
    58ca:	f000 ffd5 	bl	6878 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    58ce:	bf00      	nop
    58d0:	b005      	add	sp, #20
    58d2:	f85d fb04 	ldr.w	pc, [sp], #4
    58d6:	bf00      	nop
    58d8:	1fff8cf0 	.word	0x1fff8cf0
    58dc:	1fff8ce8 	.word	0x1fff8ce8

000058e0 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    58e0:	b500      	push	{lr}
    58e2:	b087      	sub	sp, #28
    58e4:	4603      	mov	r3, r0
    58e6:	9100      	str	r1, [sp, #0]
    58e8:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    58ec:	2301      	movs	r3, #1
    58ee:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    58f2:	2300      	movs	r3, #0
    58f4:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    58f8:	2300      	movs	r3, #0
    58fa:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    58fc:	2300      	movs	r3, #0
    58fe:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    5900:	2300      	movs	r3, #0
    5902:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    5904:	4a18      	ldr	r2, [pc, #96]	; (5968 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    5906:	9b04      	ldr	r3, [sp, #16]
    5908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    590c:	695a      	ldr	r2, [r3, #20]
    590e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5912:	009b      	lsls	r3, r3, #2
    5914:	4413      	add	r3, r2
    5916:	681b      	ldr	r3, [r3, #0]
    5918:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    591a:	f10d 030b 	add.w	r3, sp, #11
    591e:	4619      	mov	r1, r3
    5920:	9803      	ldr	r0, [sp, #12]
    5922:	f000 ffd5 	bl	68d0 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    5926:	4603      	mov	r3, r0
    5928:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    592c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5930:	2b00      	cmp	r3, #0
    5932:	d112      	bne.n	595a <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    5934:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5938:	2b00      	cmp	r3, #0
    593a:	d002      	beq.n	5942 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    593c:	2b01      	cmp	r3, #1
    593e:	d004      	beq.n	594a <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    5940:	e007      	b.n	5952 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    5942:	9b00      	ldr	r3, [sp, #0]
    5944:	2200      	movs	r2, #0
    5946:	601a      	str	r2, [r3, #0]
                                break;
    5948:	e008      	b.n	595c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    594a:	9b00      	ldr	r3, [sp, #0]
    594c:	2201      	movs	r2, #1
    594e:	601a      	str	r2, [r3, #0]
                                break;
    5950:	e004      	b.n	595c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    5952:	9b00      	ldr	r3, [sp, #0]
    5954:	2202      	movs	r2, #2
    5956:	601a      	str	r2, [r3, #0]
                                break;
    5958:	e000      	b.n	595c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    595a:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    595c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5960:	4618      	mov	r0, r3
    5962:	b007      	add	sp, #28
    5964:	f85d fb04 	ldr.w	pc, [sp], #4
    5968:	1fff8cf0 	.word	0x1fff8cf0

0000596c <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    596c:	b084      	sub	sp, #16
    596e:	4603      	mov	r3, r0
    5970:	9100      	str	r1, [sp, #0]
    5972:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    5976:	2301      	movs	r3, #1
    5978:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    597c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5980:	4a06      	ldr	r2, [pc, #24]	; (599c <Can_43_FLEXCAN_GetControllerMode+0x30>)
    5982:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5986:	9b00      	ldr	r3, [sp, #0]
    5988:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    598a:	2300      	movs	r3, #0
    598c:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    5990:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5994:	4618      	mov	r0, r3
    5996:	b004      	add	sp, #16
    5998:	4770      	bx	lr
    599a:	bf00      	nop
    599c:	1fff8cec 	.word	0x1fff8cec

000059a0 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    59a0:	b500      	push	{lr}
    59a2:	b087      	sub	sp, #28
    59a4:	4603      	mov	r3, r0
    59a6:	9100      	str	r1, [sp, #0]
    59a8:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    59ac:	2301      	movs	r3, #1
    59ae:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    59b2:	2300      	movs	r3, #0
    59b4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    59b6:	2300      	movs	r3, #0
    59b8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    59ba:	2300      	movs	r3, #0
    59bc:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    59be:	4a0c      	ldr	r2, [pc, #48]	; (59f0 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    59c0:	9b04      	ldr	r3, [sp, #16]
    59c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59c6:	695a      	ldr	r2, [r3, #20]
    59c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    59cc:	009b      	lsls	r3, r3, #2
    59ce:	4413      	add	r3, r2
    59d0:	681b      	ldr	r3, [r3, #0]
    59d2:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    59d4:	9900      	ldr	r1, [sp, #0]
    59d6:	9803      	ldr	r0, [sp, #12]
    59d8:	f000 ffa5 	bl	6926 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    59dc:	4603      	mov	r3, r0
    59de:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    59e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    59e6:	4618      	mov	r0, r3
    59e8:	b007      	add	sp, #28
    59ea:	f85d fb04 	ldr.w	pc, [sp], #4
    59ee:	bf00      	nop
    59f0:	1fff8cf0 	.word	0x1fff8cf0

000059f4 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    59f4:	b500      	push	{lr}
    59f6:	b087      	sub	sp, #28
    59f8:	4603      	mov	r3, r0
    59fa:	9100      	str	r1, [sp, #0]
    59fc:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    5a00:	2301      	movs	r3, #1
    5a02:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    5a06:	2300      	movs	r3, #0
    5a08:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5a0a:	2300      	movs	r3, #0
    5a0c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    5a0e:	2300      	movs	r3, #0
    5a10:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    5a12:	4a0c      	ldr	r2, [pc, #48]	; (5a44 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    5a14:	9b04      	ldr	r3, [sp, #16]
    5a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a1a:	695a      	ldr	r2, [r3, #20]
    5a1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a20:	009b      	lsls	r3, r3, #2
    5a22:	4413      	add	r3, r2
    5a24:	681b      	ldr	r3, [r3, #0]
    5a26:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    5a28:	9900      	ldr	r1, [sp, #0]
    5a2a:	9803      	ldr	r0, [sp, #12]
    5a2c:	f000 ff69 	bl	6902 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    5a30:	4603      	mov	r3, r0
    5a32:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    5a36:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5a3a:	4618      	mov	r0, r3
    5a3c:	b007      	add	sp, #28
    5a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    5a42:	bf00      	nop
    5a44:	1fff8cf0 	.word	0x1fff8cf0

00005a48 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    5a48:	b500      	push	{lr}
    5a4a:	b089      	sub	sp, #36	; 0x24
    5a4c:	4603      	mov	r3, r0
    5a4e:	9100      	str	r1, [sp, #0]
    5a50:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    5a54:	2301      	movs	r3, #1
    5a56:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    5a5a:	2300      	movs	r3, #0
    5a5c:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    5a60:	2300      	movs	r3, #0
    5a62:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    5a64:	2300      	movs	r3, #0
    5a66:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5a6a:	2300      	movs	r3, #0
    5a6c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    5a6e:	2300      	movs	r3, #0
    5a70:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    5a72:	2300      	movs	r3, #0
    5a74:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    5a76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a7a:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    5a7e:	4a1d      	ldr	r2, [pc, #116]	; (5af4 <Can_43_FLEXCAN_Write+0xac>)
    5a80:	9b06      	ldr	r3, [sp, #24]
    5a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a86:	68da      	ldr	r2, [r3, #12]
    5a88:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a8c:	4413      	add	r3, r2
    5a8e:	781b      	ldrb	r3, [r3, #0]
    5a90:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5a94:	4a17      	ldr	r2, [pc, #92]	; (5af4 <Can_43_FLEXCAN_Write+0xac>)
    5a96:	9b06      	ldr	r3, [sp, #24]
    5a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a9c:	695a      	ldr	r2, [r3, #20]
    5a9e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    5aa2:	009b      	lsls	r3, r3, #2
    5aa4:	4413      	add	r3, r2
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    5aaa:	9b04      	ldr	r3, [sp, #16]
    5aac:	2b00      	cmp	r3, #0
    5aae:	d01b      	beq.n	5ae8 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    5ab0:	4a10      	ldr	r2, [pc, #64]	; (5af4 <Can_43_FLEXCAN_Write+0xac>)
    5ab2:	9b06      	ldr	r3, [sp, #24]
    5ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ab8:	6919      	ldr	r1, [r3, #16]
    5aba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5abe:	4613      	mov	r3, r2
    5ac0:	00db      	lsls	r3, r3, #3
    5ac2:	4413      	add	r3, r2
    5ac4:	009b      	lsls	r3, r3, #2
    5ac6:	440b      	add	r3, r1
    5ac8:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    5aca:	f89d 301e 	ldrb.w	r3, [sp, #30]
    5ace:	4a0a      	ldr	r2, [pc, #40]	; (5af8 <Can_43_FLEXCAN_Write+0xb0>)
    5ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ad4:	2b01      	cmp	r3, #1
    5ad6:	d107      	bne.n	5ae8 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    5ad8:	9a00      	ldr	r2, [sp, #0]
    5ada:	9903      	ldr	r1, [sp, #12]
    5adc:	9804      	ldr	r0, [sp, #16]
    5ade:	f000 ff34 	bl	694a <Can_43_FLEXCAN_Ipw_Write>
    5ae2:	4603      	mov	r3, r0
    5ae4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    5ae8:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    5aec:	4618      	mov	r0, r3
    5aee:	b009      	add	sp, #36	; 0x24
    5af0:	f85d fb04 	ldr.w	pc, [sp], #4
    5af4:	1fff8cf0 	.word	0x1fff8cf0
    5af8:	1fff8cec 	.word	0x1fff8cec

00005afc <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    5afc:	bf00      	nop
    5afe:	4770      	bx	lr

00005b00 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    5b00:	bf00      	nop
    5b02:	4770      	bx	lr

00005b04 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    5b04:	bf00      	nop
    5b06:	4770      	bx	lr

00005b08 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    5b08:	b500      	push	{lr}
    5b0a:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    5b0c:	2300      	movs	r3, #0
    5b0e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    5b12:	2300      	movs	r3, #0
    5b14:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5b16:	2300      	movs	r3, #0
    5b18:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    5b1a:	2300      	movs	r3, #0
    5b1c:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    5b1e:	4a17      	ldr	r2, [pc, #92]	; (5b7c <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    5b20:	9b02      	ldr	r3, [sp, #8]
    5b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b26:	2b00      	cmp	r3, #0
    5b28:	d024      	beq.n	5b74 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    5b2a:	e01f      	b.n	5b6c <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5b2c:	4a13      	ldr	r2, [pc, #76]	; (5b7c <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    5b2e:	9b02      	ldr	r3, [sp, #8]
    5b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b34:	695a      	ldr	r2, [r3, #20]
    5b36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b3a:	009b      	lsls	r3, r3, #2
    5b3c:	4413      	add	r3, r2
    5b3e:	681b      	ldr	r3, [r3, #0]
    5b40:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    5b42:	9b01      	ldr	r3, [sp, #4]
    5b44:	2b00      	cmp	r3, #0
    5b46:	d00c      	beq.n	5b62 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    5b48:	9b01      	ldr	r3, [sp, #4]
    5b4a:	7a1b      	ldrb	r3, [r3, #8]
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d008      	beq.n	5b62 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    5b50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b54:	009b      	lsls	r3, r3, #2
    5b56:	4a0a      	ldr	r2, [pc, #40]	; (5b80 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    5b58:	4413      	add	r3, r2
    5b5a:	4619      	mov	r1, r3
    5b5c:	9801      	ldr	r0, [sp, #4]
    5b5e:	f000 fff4 	bl	6b4a <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    5b62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b66:	3301      	adds	r3, #1
    5b68:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    5b6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b70:	2b00      	cmp	r3, #0
    5b72:	d0db      	beq.n	5b2c <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    5b74:	bf00      	nop
    5b76:	b005      	add	sp, #20
    5b78:	f85d fb04 	ldr.w	pc, [sp], #4
    5b7c:	1fff8cf0 	.word	0x1fff8cf0
    5b80:	1fff8cec 	.word	0x1fff8cec

00005b84 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    5b84:	b500      	push	{lr}
    5b86:	b087      	sub	sp, #28
    5b88:	4603      	mov	r3, r0
    5b8a:	9200      	str	r2, [sp, #0]
    5b8c:	f88d 3007 	strb.w	r3, [sp, #7]
    5b90:	460b      	mov	r3, r1
    5b92:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    5b96:	2300      	movs	r3, #0
    5b98:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    5b9c:	2300      	movs	r3, #0
    5b9e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5ba0:	2300      	movs	r3, #0
    5ba2:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    5ba4:	2300      	movs	r3, #0
    5ba6:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    5ba8:	4a16      	ldr	r2, [pc, #88]	; (5c04 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    5baa:	9b04      	ldr	r3, [sp, #16]
    5bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5bb0:	2b00      	cmp	r3, #0
    5bb2:	d022      	beq.n	5bfa <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    5bb4:	4a13      	ldr	r2, [pc, #76]	; (5c04 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    5bb6:	9b04      	ldr	r3, [sp, #16]
    5bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5bbc:	689a      	ldr	r2, [r3, #8]
    5bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5bc2:	4413      	add	r3, r2
    5bc4:	781b      	ldrb	r3, [r3, #0]
    5bc6:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5bca:	4a0e      	ldr	r2, [pc, #56]	; (5c04 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    5bcc:	9b04      	ldr	r3, [sp, #16]
    5bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5bd2:	695a      	ldr	r2, [r3, #20]
    5bd4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5bd8:	009b      	lsls	r3, r3, #2
    5bda:	4413      	add	r3, r2
    5bdc:	681b      	ldr	r3, [r3, #0]
    5bde:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    5be0:	9b03      	ldr	r3, [sp, #12]
    5be2:	2b00      	cmp	r3, #0
    5be4:	d009      	beq.n	5bfa <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    5be6:	4a07      	ldr	r2, [pc, #28]	; (5c04 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    5be8:	9b04      	ldr	r3, [sp, #16]
    5bea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    5bee:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5bf2:	9b00      	ldr	r3, [sp, #0]
    5bf4:	9803      	ldr	r0, [sp, #12]
    5bf6:	f000 ffde 	bl	6bb6 <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    5bfa:	bf00      	nop
    5bfc:	b007      	add	sp, #28
    5bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    5c02:	bf00      	nop
    5c04:	1fff8cf0 	.word	0x1fff8cf0

00005c08 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    5c08:	b500      	push	{lr}
    5c0a:	b087      	sub	sp, #28
    5c0c:	4603      	mov	r3, r0
    5c0e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    5c12:	2300      	movs	r3, #0
    5c14:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    5c18:	2300      	movs	r3, #0
    5c1a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5c1c:	2300      	movs	r3, #0
    5c1e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    5c20:	2300      	movs	r3, #0
    5c22:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    5c24:	4a19      	ldr	r2, [pc, #100]	; (5c8c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    5c26:	9b04      	ldr	r3, [sp, #16]
    5c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d029      	beq.n	5c84 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    5c30:	4a16      	ldr	r2, [pc, #88]	; (5c8c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    5c32:	9b04      	ldr	r3, [sp, #16]
    5c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c38:	689a      	ldr	r2, [r3, #8]
    5c3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c3e:	4413      	add	r3, r2
    5c40:	781b      	ldrb	r3, [r3, #0]
    5c42:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5c46:	4a11      	ldr	r2, [pc, #68]	; (5c8c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    5c48:	9b04      	ldr	r3, [sp, #16]
    5c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c4e:	695a      	ldr	r2, [r3, #20]
    5c50:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5c54:	009b      	lsls	r3, r3, #2
    5c56:	4413      	add	r3, r2
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    5c5c:	9b03      	ldr	r3, [sp, #12]
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d010      	beq.n	5c84 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    5c62:	9803      	ldr	r0, [sp, #12]
    5c64:	f000 fd60 	bl	6728 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    5c68:	4603      	mov	r3, r0
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d10a      	bne.n	5c84 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    5c6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5c72:	4a07      	ldr	r2, [pc, #28]	; (5c90 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    5c74:	2102      	movs	r1, #2
    5c76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    5c7a:	9b03      	ldr	r3, [sp, #12]
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	4618      	mov	r0, r3
    5c80:	f7fa fe3c 	bl	8fc <CanIf_ControllerBusOff>
            }
        }
    }
}
    5c84:	bf00      	nop
    5c86:	b007      	add	sp, #28
    5c88:	f85d fb04 	ldr.w	pc, [sp], #4
    5c8c:	1fff8cf0 	.word	0x1fff8cf0
    5c90:	1fff8cec 	.word	0x1fff8cec

00005c94 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    5c94:	b500      	push	{lr}
    5c96:	b085      	sub	sp, #20
    5c98:	9003      	str	r0, [sp, #12]
    5c9a:	9102      	str	r1, [sp, #8]
    5c9c:	9201      	str	r2, [sp, #4]
    5c9e:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    5ca0:	9b01      	ldr	r3, [sp, #4]
    5ca2:	685a      	ldr	r2, [r3, #4]
    5ca4:	9b03      	ldr	r3, [sp, #12]
    5ca6:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    5ca8:	9b01      	ldr	r3, [sp, #4]
    5caa:	681b      	ldr	r3, [r3, #0]
    5cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	d005      	beq.n	5cc0 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    5cb4:	9b03      	ldr	r3, [sp, #12]
    5cb6:	681b      	ldr	r3, [r3, #0]
    5cb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    5cbc:	9b03      	ldr	r3, [sp, #12]
    5cbe:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    5cc0:	9b06      	ldr	r3, [sp, #24]
    5cc2:	699b      	ldr	r3, [r3, #24]
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d10c      	bne.n	5ce2 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    5cc8:	9b01      	ldr	r3, [sp, #4]
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5cd0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5cd4:	d105      	bne.n	5ce2 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    5cd6:	2301      	movs	r3, #1
    5cd8:	2208      	movs	r2, #8
    5cda:	2100      	movs	r1, #0
    5cdc:	2050      	movs	r0, #80	; 0x50
    5cde:	f006 fa3b 	bl	c158 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    5ce2:	9b06      	ldr	r3, [sp, #24]
    5ce4:	699b      	ldr	r3, [r3, #24]
    5ce6:	2b01      	cmp	r3, #1
    5ce8:	d009      	beq.n	5cfe <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    5cea:	9b01      	ldr	r3, [sp, #4]
    5cec:	681b      	ldr	r3, [r3, #0]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	da05      	bge.n	5cfe <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    5cf2:	9b03      	ldr	r3, [sp, #12]
    5cf4:	681b      	ldr	r3, [r3, #0]
    5cf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    5cfa:	9b03      	ldr	r3, [sp, #12]
    5cfc:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    5cfe:	9b06      	ldr	r3, [sp, #24]
    5d00:	7c1a      	ldrb	r2, [r3, #16]
    5d02:	9b01      	ldr	r3, [sp, #4]
    5d04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    5d08:	429a      	cmp	r2, r3
    5d0a:	d805      	bhi.n	5d18 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    5d0c:	9b06      	ldr	r3, [sp, #24]
    5d0e:	7c1b      	ldrb	r3, [r3, #16]
    5d10:	461a      	mov	r2, r3
    5d12:	9b02      	ldr	r3, [sp, #8]
    5d14:	609a      	str	r2, [r3, #8]
    5d16:	e005      	b.n	5d24 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    5d18:	9b01      	ldr	r3, [sp, #4]
    5d1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    5d1e:	461a      	mov	r2, r3
    5d20:	9b02      	ldr	r3, [sp, #8]
    5d22:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    5d24:	9b06      	ldr	r3, [sp, #24]
    5d26:	881a      	ldrh	r2, [r3, #0]
    5d28:	9b03      	ldr	r3, [sp, #12]
    5d2a:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    5d2c:	9b00      	ldr	r3, [sp, #0]
    5d2e:	781a      	ldrb	r2, [r3, #0]
    5d30:	9b03      	ldr	r3, [sp, #12]
    5d32:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    5d34:	9b01      	ldr	r3, [sp, #4]
    5d36:	f103 0208 	add.w	r2, r3, #8
    5d3a:	9b02      	ldr	r3, [sp, #8]
    5d3c:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    5d3e:	9902      	ldr	r1, [sp, #8]
    5d40:	9803      	ldr	r0, [sp, #12]
    5d42:	f7fa fdf7 	bl	934 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    5d46:	bf00      	nop
    5d48:	b005      	add	sp, #20
    5d4a:	f85d fb04 	ldr.w	pc, [sp], #4

00005d4e <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    5d4e:	b500      	push	{lr}
    5d50:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    5d54:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d58:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5d5c:	6018      	str	r0, [r3, #0]
    5d5e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d62:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5d66:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    5d68:	2300      	movs	r3, #0
    5d6a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    5d6e:	2300      	movs	r3, #0
    5d70:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    5d74:	2300      	movs	r3, #0
    5d76:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    5d7a:	2300      	movs	r3, #0
    5d7c:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    5d80:	2300      	movs	r3, #0
    5d82:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    5d86:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d8a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5d8e:	681b      	ldr	r3, [r3, #0]
    5d90:	7c9b      	ldrb	r3, [r3, #18]
    5d92:	089b      	lsrs	r3, r3, #2
    5d94:	b2db      	uxtb	r3, r3
    5d96:	3306      	adds	r3, #6
    5d98:	2b20      	cmp	r3, #32
    5d9a:	d80b      	bhi.n	5db4 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    5d9c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5da0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5da4:	681b      	ldr	r3, [r3, #0]
    5da6:	7c9b      	ldrb	r3, [r3, #18]
    5da8:	089b      	lsrs	r3, r3, #2
    5daa:	b2db      	uxtb	r3, r3
    5dac:	3306      	adds	r3, #6
    5dae:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    5db2:	e002      	b.n	5dba <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    5db4:	2320      	movs	r3, #32
    5db6:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    5dba:	2300      	movs	r3, #0
    5dbc:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    5dc0:	e169      	b.n	6096 <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    5dc2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5dc6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5dca:	681b      	ldr	r3, [r3, #0]
    5dcc:	691b      	ldr	r3, [r3, #16]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d13a      	bne.n	5e48 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    5dd2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5dd6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	7c9b      	ldrb	r3, [r3, #18]
    5dde:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    5de2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    5de6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    5dea:	2300      	movs	r3, #0
    5dec:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    5df0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5df4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	689b      	ldr	r3, [r3, #8]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d011      	beq.n	5e24 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    5e00:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5e04:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5e08:	681b      	ldr	r3, [r3, #0]
    5e0a:	695a      	ldr	r2, [r3, #20]
    5e0c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5e10:	00db      	lsls	r3, r3, #3
    5e12:	4413      	add	r3, r2
    5e14:	685b      	ldr	r3, [r3, #4]
    5e16:	005b      	lsls	r3, r3, #1
    5e18:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5e1c:	4313      	orrs	r3, r2
    5e1e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5e22:	e126      	b.n	6072 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    5e24:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5e28:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5e2c:	681b      	ldr	r3, [r3, #0]
    5e2e:	695a      	ldr	r2, [r3, #20]
    5e30:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5e34:	00db      	lsls	r3, r3, #3
    5e36:	4413      	add	r3, r2
    5e38:	685b      	ldr	r3, [r3, #4]
    5e3a:	04db      	lsls	r3, r3, #19
    5e3c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5e40:	4313      	orrs	r3, r2
    5e42:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5e46:	e114      	b.n	6072 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    5e48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5e4c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5e50:	681b      	ldr	r3, [r3, #0]
    5e52:	691b      	ldr	r3, [r3, #16]
    5e54:	2b01      	cmp	r3, #1
    5e56:	d160      	bne.n	5f1a <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    5e58:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5e5c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5e60:	681b      	ldr	r3, [r3, #0]
    5e62:	7c9b      	ldrb	r3, [r3, #18]
    5e64:	005b      	lsls	r3, r3, #1
    5e66:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    5e6a:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    5e6e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    5e72:	2301      	movs	r3, #1
    5e74:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    5e78:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5e7c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5e80:	681b      	ldr	r3, [r3, #0]
    5e82:	689b      	ldr	r3, [r3, #8]
    5e84:	2b00      	cmp	r3, #0
    5e86:	d024      	beq.n	5ed2 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    5e88:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5e8c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5e90:	681b      	ldr	r3, [r3, #0]
    5e92:	695a      	ldr	r2, [r3, #20]
    5e94:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5e98:	011b      	lsls	r3, r3, #4
    5e9a:	4413      	add	r3, r2
    5e9c:	685b      	ldr	r3, [r3, #4]
    5e9e:	0bdb      	lsrs	r3, r3, #15
    5ea0:	041b      	lsls	r3, r3, #16
    5ea2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5ea6:	4313      	orrs	r3, r2
    5ea8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    5eac:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5eb0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	695a      	ldr	r2, [r3, #20]
    5eb8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5ebc:	011b      	lsls	r3, r3, #4
    5ebe:	3308      	adds	r3, #8
    5ec0:	4413      	add	r3, r2
    5ec2:	685b      	ldr	r3, [r3, #4]
    5ec4:	0bdb      	lsrs	r3, r3, #15
    5ec6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5eca:	4313      	orrs	r3, r2
    5ecc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5ed0:	e0cf      	b.n	6072 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    5ed2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5ed6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5eda:	681b      	ldr	r3, [r3, #0]
    5edc:	695a      	ldr	r2, [r3, #20]
    5ede:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5ee2:	011b      	lsls	r3, r3, #4
    5ee4:	4413      	add	r3, r2
    5ee6:	685b      	ldr	r3, [r3, #4]
    5ee8:	04db      	lsls	r3, r3, #19
    5eea:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5eee:	4313      	orrs	r3, r2
    5ef0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    5ef4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5ef8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	695a      	ldr	r2, [r3, #20]
    5f00:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5f04:	011b      	lsls	r3, r3, #4
    5f06:	3308      	adds	r3, #8
    5f08:	4413      	add	r3, r2
    5f0a:	685b      	ldr	r3, [r3, #4]
    5f0c:	00db      	lsls	r3, r3, #3
    5f0e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5f12:	4313      	orrs	r3, r2
    5f14:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5f18:	e0ab      	b.n	6072 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    5f1a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5f1e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5f22:	681b      	ldr	r3, [r3, #0]
    5f24:	7c9b      	ldrb	r3, [r3, #18]
    5f26:	009b      	lsls	r3, r3, #2
    5f28:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    5f2c:	2300      	movs	r3, #0
    5f2e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    5f32:	2302      	movs	r3, #2
    5f34:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    5f38:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5f3c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5f40:	681b      	ldr	r3, [r3, #0]
    5f42:	689b      	ldr	r3, [r3, #8]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d04a      	beq.n	5fde <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    5f48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5f4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	695a      	ldr	r2, [r3, #20]
    5f54:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5f58:	015b      	lsls	r3, r3, #5
    5f5a:	4413      	add	r3, r2
    5f5c:	685b      	ldr	r3, [r3, #4]
    5f5e:	0d5b      	lsrs	r3, r3, #21
    5f60:	061b      	lsls	r3, r3, #24
    5f62:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5f66:	4313      	orrs	r3, r2
    5f68:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    5f6c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5f70:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5f74:	681b      	ldr	r3, [r3, #0]
    5f76:	695a      	ldr	r2, [r3, #20]
    5f78:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5f7c:	015b      	lsls	r3, r3, #5
    5f7e:	3308      	adds	r3, #8
    5f80:	4413      	add	r3, r2
    5f82:	685b      	ldr	r3, [r3, #4]
    5f84:	0d5b      	lsrs	r3, r3, #21
    5f86:	041b      	lsls	r3, r3, #16
    5f88:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5f8c:	4313      	orrs	r3, r2
    5f8e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    5f92:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5f96:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5f9a:	681b      	ldr	r3, [r3, #0]
    5f9c:	695a      	ldr	r2, [r3, #20]
    5f9e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5fa2:	015b      	lsls	r3, r3, #5
    5fa4:	3310      	adds	r3, #16
    5fa6:	4413      	add	r3, r2
    5fa8:	685b      	ldr	r3, [r3, #4]
    5faa:	0d5b      	lsrs	r3, r3, #21
    5fac:	021b      	lsls	r3, r3, #8
    5fae:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5fb2:	4313      	orrs	r3, r2
    5fb4:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    5fb8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5fbc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5fc0:	681b      	ldr	r3, [r3, #0]
    5fc2:	695a      	ldr	r2, [r3, #20]
    5fc4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5fc8:	015b      	lsls	r3, r3, #5
    5fca:	3318      	adds	r3, #24
    5fcc:	4413      	add	r3, r2
    5fce:	685b      	ldr	r3, [r3, #4]
    5fd0:	0d5b      	lsrs	r3, r3, #21
    5fd2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5fd6:	4313      	orrs	r3, r2
    5fd8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5fdc:	e049      	b.n	6072 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    5fde:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5fe2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5fe6:	681b      	ldr	r3, [r3, #0]
    5fe8:	695a      	ldr	r2, [r3, #20]
    5fea:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5fee:	015b      	lsls	r3, r3, #5
    5ff0:	4413      	add	r3, r2
    5ff2:	685b      	ldr	r3, [r3, #4]
    5ff4:	08db      	lsrs	r3, r3, #3
    5ff6:	061b      	lsls	r3, r3, #24
    5ff8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5ffc:	4313      	orrs	r3, r2
    5ffe:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    6002:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6006:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	695a      	ldr	r2, [r3, #20]
    600e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6012:	015b      	lsls	r3, r3, #5
    6014:	3308      	adds	r3, #8
    6016:	4413      	add	r3, r2
    6018:	685b      	ldr	r3, [r3, #4]
    601a:	08db      	lsrs	r3, r3, #3
    601c:	041b      	lsls	r3, r3, #16
    601e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6022:	4313      	orrs	r3, r2
    6024:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    6028:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    602c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6030:	681b      	ldr	r3, [r3, #0]
    6032:	695a      	ldr	r2, [r3, #20]
    6034:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6038:	015b      	lsls	r3, r3, #5
    603a:	3310      	adds	r3, #16
    603c:	4413      	add	r3, r2
    603e:	685b      	ldr	r3, [r3, #4]
    6040:	08db      	lsrs	r3, r3, #3
    6042:	021b      	lsls	r3, r3, #8
    6044:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6048:	4313      	orrs	r3, r2
    604a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    604e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6052:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6056:	681b      	ldr	r3, [r3, #0]
    6058:	695a      	ldr	r2, [r3, #20]
    605a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    605e:	015b      	lsls	r3, r3, #5
    6060:	3318      	adds	r3, #24
    6062:	4413      	add	r3, r2
    6064:	685b      	ldr	r3, [r3, #4]
    6066:	08db      	lsrs	r3, r3, #3
    6068:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    606c:	4313      	orrs	r3, r2
    606e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    6072:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6076:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    607a:	681b      	ldr	r3, [r3, #0]
    607c:	789b      	ldrb	r3, [r3, #2]
    607e:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    6082:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6086:	4618      	mov	r0, r3
    6088:	f002 fd0e 	bl	8aa8 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    608c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6090:	3301      	adds	r3, #1
    6092:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6096:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    609a:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    609e:	429a      	cmp	r2, r3
    60a0:	d20a      	bcs.n	60b8 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    60a2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    60a6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    60aa:	681b      	ldr	r3, [r3, #0]
    60ac:	7c9b      	ldrb	r3, [r3, #18]
    60ae:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    60b2:	429a      	cmp	r2, r3
    60b4:	f4ff ae85 	bcc.w	5dc2 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    60b8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    60bc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    60c0:	681b      	ldr	r3, [r3, #0]
    60c2:	789a      	ldrb	r2, [r3, #2]
    60c4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    60c8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    60cc:	681b      	ldr	r3, [r3, #0]
    60ce:	68db      	ldr	r3, [r3, #12]
    60d0:	4619      	mov	r1, r3
    60d2:	4610      	mov	r0, r2
    60d4:	f002 fd36 	bl	8b44 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    60d8:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    60dc:	2b00      	cmp	r3, #0
    60de:	d054      	beq.n	618a <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    60e0:	2300      	movs	r3, #0
    60e2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    60e6:	e03e      	b.n	6166 <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    60e8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    60ec:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	695a      	ldr	r2, [r3, #20]
    60f4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    60f8:	00db      	lsls	r3, r3, #3
    60fa:	441a      	add	r2, r3
    60fc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6100:	6812      	ldr	r2, [r2, #0]
    6102:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    6106:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    610a:	00db      	lsls	r3, r3, #3
    610c:	440b      	add	r3, r1
    610e:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    6110:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6114:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6118:	681b      	ldr	r3, [r3, #0]
    611a:	689b      	ldr	r3, [r3, #8]
    611c:	2b00      	cmp	r3, #0
    611e:	d00a      	beq.n	6136 <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    6120:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6124:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    6128:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    612c:	00db      	lsls	r3, r3, #3
    612e:	4413      	add	r3, r2
    6130:	2201      	movs	r2, #1
    6132:	705a      	strb	r2, [r3, #1]
    6134:	e009      	b.n	614a <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    6136:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    613a:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    613e:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    6142:	00db      	lsls	r3, r3, #3
    6144:	4413      	add	r3, r2
    6146:	2200      	movs	r2, #0
    6148:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    614a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    614e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6152:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    6156:	2100      	movs	r1, #0
    6158:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    615c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6160:	3301      	adds	r3, #1
    6162:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6166:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    616a:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    616e:	429a      	cmp	r2, r3
    6170:	d3ba      	bcc.n	60e8 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    6172:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6176:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    617a:	681b      	ldr	r3, [r3, #0]
    617c:	789b      	ldrb	r3, [r3, #2]
    617e:	aa02      	add	r2, sp, #8
    6180:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    6184:	4618      	mov	r0, r3
    6186:	f002 f872 	bl	826e <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    618a:	bf00      	nop
    618c:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6190:	f85d fb04 	ldr.w	pc, [sp], #4

00006194 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    6194:	b510      	push	{r4, lr}
    6196:	b084      	sub	sp, #16
    6198:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    619a:	9b01      	ldr	r3, [sp, #4]
    619c:	8b9b      	ldrh	r3, [r3, #28]
    619e:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    61a2:	9b01      	ldr	r3, [sp, #4]
    61a4:	6a1a      	ldr	r2, [r3, #32]
    61a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    61aa:	2116      	movs	r1, #22
    61ac:	fb01 f303 	mul.w	r3, r1, r3
    61b0:	4413      	add	r3, r2
    61b2:	785b      	ldrb	r3, [r3, #1]
    61b4:	2b00      	cmp	r3, #0
    61b6:	d016      	beq.n	61e6 <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    61b8:	9b01      	ldr	r3, [sp, #4]
    61ba:	7898      	ldrb	r0, [r3, #2]
    61bc:	9b01      	ldr	r3, [sp, #4]
    61be:	6a1a      	ldr	r2, [r3, #32]
    61c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    61c4:	2116      	movs	r1, #22
    61c6:	fb01 f303 	mul.w	r3, r1, r3
    61ca:	4413      	add	r3, r2
    61cc:	7cd9      	ldrb	r1, [r3, #19]
    61ce:	9b01      	ldr	r3, [sp, #4]
    61d0:	6a1a      	ldr	r2, [r3, #32]
    61d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    61d6:	2416      	movs	r4, #22
    61d8:	fb04 f303 	mul.w	r3, r4, r3
    61dc:	4413      	add	r3, r2
    61de:	7d1b      	ldrb	r3, [r3, #20]
    61e0:	461a      	mov	r2, r3
    61e2:	f003 f829 	bl	9238 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    61e6:	9b01      	ldr	r3, [sp, #4]
    61e8:	7898      	ldrb	r0, [r3, #2]
    61ea:	9b01      	ldr	r3, [sp, #4]
    61ec:	6a1a      	ldr	r2, [r3, #32]
    61ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    61f2:	2116      	movs	r1, #22
    61f4:	fb01 f303 	mul.w	r3, r1, r3
    61f8:	4413      	add	r3, r2
    61fa:	7c9b      	ldrb	r3, [r3, #18]
    61fc:	4619      	mov	r1, r3
    61fe:	f003 f86f 	bl	92e0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    6202:	bf00      	nop
    6204:	b004      	add	sp, #16
    6206:	bd10      	pop	{r4, pc}

00006208 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    6208:	b500      	push	{lr}
    620a:	b087      	sub	sp, #28
    620c:	9003      	str	r0, [sp, #12]
    620e:	9102      	str	r1, [sp, #8]
    6210:	4613      	mov	r3, r2
    6212:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    6216:	2300      	movs	r3, #0
    6218:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    621c:	9b03      	ldr	r3, [sp, #12]
    621e:	785b      	ldrb	r3, [r3, #1]
    6220:	461a      	mov	r2, r3
    6222:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6226:	491c      	ldr	r1, [pc, #112]	; (6298 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    6228:	0152      	lsls	r2, r2, #5
    622a:	4413      	add	r3, r2
    622c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6230:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    6234:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6238:	f64f 72ff 	movw	r2, #65535	; 0xffff
    623c:	4293      	cmp	r3, r2
    623e:	d027      	beq.n	6290 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    6240:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6244:	4613      	mov	r3, r2
    6246:	00db      	lsls	r3, r3, #3
    6248:	4413      	add	r3, r2
    624a:	009b      	lsls	r3, r3, #2
    624c:	461a      	mov	r2, r3
    624e:	9b02      	ldr	r3, [sp, #8]
    6250:	4413      	add	r3, r2
    6252:	7b1b      	ldrb	r3, [r3, #12]
    6254:	f083 0301 	eor.w	r3, r3, #1
    6258:	b2db      	uxtb	r3, r3
    625a:	2b00      	cmp	r3, #0
    625c:	d018      	beq.n	6290 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    625e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6262:	4613      	mov	r3, r2
    6264:	00db      	lsls	r3, r3, #3
    6266:	4413      	add	r3, r2
    6268:	009b      	lsls	r3, r3, #2
    626a:	461a      	mov	r2, r3
    626c:	9b02      	ldr	r3, [sp, #8]
    626e:	4413      	add	r3, r2
    6270:	699b      	ldr	r3, [r3, #24]
    6272:	2b03      	cmp	r3, #3
    6274:	d10c      	bne.n	6290 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    6276:	9b03      	ldr	r3, [sp, #12]
    6278:	785b      	ldrb	r3, [r3, #1]
    627a:	461a      	mov	r2, r3
    627c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6280:	4906      	ldr	r1, [pc, #24]	; (629c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    6282:	0152      	lsls	r2, r2, #5
    6284:	4413      	add	r3, r2
    6286:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    628a:	4618      	mov	r0, r3
    628c:	f7fa fb46 	bl	91c <CanIf_TxConfirmation>
            }
        }
    }
    6290:	bf00      	nop
    6292:	b007      	add	sp, #28
    6294:	f85d fb04 	ldr.w	pc, [sp], #4
    6298:	1fff8f54 	.word	0x1fff8f54
    629c:	1fff8f14 	.word	0x1fff8f14

000062a0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    62a0:	b500      	push	{lr}
    62a2:	b08f      	sub	sp, #60	; 0x3c
    62a4:	9005      	str	r0, [sp, #20]
    62a6:	9104      	str	r1, [sp, #16]
    62a8:	4613      	mov	r3, r2
    62aa:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    62ae:	2300      	movs	r3, #0
    62b0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    62b4:	2300      	movs	r3, #0
    62b6:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    62b8:	2300      	movs	r3, #0
    62ba:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    62bc:	9b05      	ldr	r3, [sp, #20]
    62be:	785b      	ldrb	r3, [r3, #1]
    62c0:	461a      	mov	r2, r3
    62c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    62c6:	493f      	ldr	r1, [pc, #252]	; (63c4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    62c8:	0152      	lsls	r2, r2, #5
    62ca:	4413      	add	r3, r2
    62cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    62d0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    62d4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    62d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    62dc:	4293      	cmp	r3, r2
    62de:	d06c      	beq.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    62e0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    62e4:	4613      	mov	r3, r2
    62e6:	00db      	lsls	r3, r3, #3
    62e8:	4413      	add	r3, r2
    62ea:	009b      	lsls	r3, r3, #2
    62ec:	461a      	mov	r2, r3
    62ee:	9b04      	ldr	r3, [sp, #16]
    62f0:	4413      	add	r3, r2
    62f2:	7b1b      	ldrb	r3, [r3, #12]
    62f4:	f083 0301 	eor.w	r3, r3, #1
    62f8:	b2db      	uxtb	r3, r3
    62fa:	2b00      	cmp	r3, #0
    62fc:	d05d      	beq.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    62fe:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    6302:	4613      	mov	r3, r2
    6304:	00db      	lsls	r3, r3, #3
    6306:	4413      	add	r3, r2
    6308:	009b      	lsls	r3, r3, #2
    630a:	461a      	mov	r2, r3
    630c:	9b04      	ldr	r3, [sp, #16]
    630e:	4413      	add	r3, r2
    6310:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    6312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6314:	699b      	ldr	r3, [r3, #24]
    6316:	2b00      	cmp	r3, #0
    6318:	d118      	bne.n	634c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    631a:	4a2b      	ldr	r2, [pc, #172]	; (63c8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    631c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    631e:	7f1b      	ldrb	r3, [r3, #28]
    6320:	011b      	lsls	r3, r3, #4
    6322:	4413      	add	r3, r2
    6324:	681b      	ldr	r3, [r3, #0]
    6326:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    6328:	a906      	add	r1, sp, #24
    632a:	a809      	add	r0, sp, #36	; 0x24
    632c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    632e:	9300      	str	r3, [sp, #0]
    6330:	9b05      	ldr	r3, [sp, #20]
    6332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6334:	f7ff fcae 	bl	5c94 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    6338:	9b05      	ldr	r3, [sp, #20]
    633a:	7898      	ldrb	r0, [r3, #2]
    633c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    633e:	7f19      	ldrb	r1, [r3, #28]
    6340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6342:	7b1b      	ldrb	r3, [r3, #12]
    6344:	2200      	movs	r2, #0
    6346:	f001 fe61 	bl	800c <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    634a:	e036      	b.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    634c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    634e:	699b      	ldr	r3, [r3, #24]
    6350:	2b01      	cmp	r3, #1
    6352:	d132      	bne.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    6354:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6358:	2b07      	cmp	r3, #7
    635a:	d10d      	bne.n	6378 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    635c:	2301      	movs	r3, #1
    635e:	2208      	movs	r2, #8
    6360:	2100      	movs	r1, #0
    6362:	2050      	movs	r0, #80	; 0x50
    6364:	f005 fef8 	bl	c158 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    6368:	9b05      	ldr	r3, [sp, #20]
    636a:	699b      	ldr	r3, [r3, #24]
    636c:	2b00      	cmp	r3, #0
    636e:	d024      	beq.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    6370:	9b05      	ldr	r3, [sp, #20]
    6372:	699b      	ldr	r3, [r3, #24]
    6374:	4798      	blx	r3
    }
    6376:	e020      	b.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    6378:	f89d 300f 	ldrb.w	r3, [sp, #15]
    637c:	2b06      	cmp	r3, #6
    637e:	d107      	bne.n	6390 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    6380:	9b05      	ldr	r3, [sp, #20]
    6382:	695b      	ldr	r3, [r3, #20]
    6384:	2b00      	cmp	r3, #0
    6386:	d018      	beq.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    6388:	9b05      	ldr	r3, [sp, #20]
    638a:	695b      	ldr	r3, [r3, #20]
    638c:	4798      	blx	r3
    }
    638e:	e014      	b.n	63ba <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    6390:	4a0d      	ldr	r2, [pc, #52]	; (63c8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    6392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6394:	7f1b      	ldrb	r3, [r3, #28]
    6396:	011b      	lsls	r3, r3, #4
    6398:	4413      	add	r3, r2
    639a:	681b      	ldr	r3, [r3, #0]
    639c:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    639e:	a906      	add	r1, sp, #24
    63a0:	a809      	add	r0, sp, #36	; 0x24
    63a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    63a4:	9300      	str	r3, [sp, #0]
    63a6:	9b05      	ldr	r3, [sp, #20]
    63a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    63aa:	f7ff fc73 	bl	5c94 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    63ae:	9b05      	ldr	r3, [sp, #20]
    63b0:	789b      	ldrb	r3, [r3, #2]
    63b2:	2100      	movs	r1, #0
    63b4:	4618      	mov	r0, r3
    63b6:	f001 ff27 	bl	8208 <FlexCAN_Ip_RxFifo>
    }
    63ba:	bf00      	nop
    63bc:	b00f      	add	sp, #60	; 0x3c
    63be:	f85d fb04 	ldr.w	pc, [sp], #4
    63c2:	bf00      	nop
    63c4:	1fff8f54 	.word	0x1fff8f54
    63c8:	1fff8cf4 	.word	0x1fff8cf4

000063cc <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    63cc:	b510      	push	{r4, lr}
    63ce:	b084      	sub	sp, #16
    63d0:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    63d2:	2301      	movs	r3, #1
    63d4:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    63d8:	2300      	movs	r3, #0
    63da:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    63de:	2300      	movs	r3, #0
    63e0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    63e4:	2300      	movs	r3, #0
    63e6:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    63e8:	2300      	movs	r3, #0
    63ea:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    63ee:	9b01      	ldr	r3, [sp, #4]
    63f0:	7898      	ldrb	r0, [r3, #2]
    63f2:	4976      	ldr	r1, [pc, #472]	; (65cc <Can_43_FLEXCAN_Ipw_Init+0x200>)
    63f4:	9b01      	ldr	r3, [sp, #4]
    63f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    63f8:	681b      	ldr	r3, [r3, #0]
    63fa:	461a      	mov	r2, r3
    63fc:	f001 fcfa 	bl	7df4 <FlexCAN_Ip_Init_Privileged>
    6400:	4603      	mov	r3, r0
    6402:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    6406:	9b01      	ldr	r3, [sp, #4]
    6408:	785b      	ldrb	r3, [r3, #1]
    640a:	461a      	mov	r2, r3
    640c:	4b70      	ldr	r3, [pc, #448]	; (65d0 <Can_43_FLEXCAN_Ipw_Init+0x204>)
    640e:	2101      	movs	r1, #1
    6410:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    6412:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6416:	2b00      	cmp	r3, #0
    6418:	d13b      	bne.n	6492 <Can_43_FLEXCAN_Ipw_Init+0xc6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    641a:	9b01      	ldr	r3, [sp, #4]
    641c:	789b      	ldrb	r3, [r3, #2]
    641e:	4618      	mov	r0, r3
    6420:	f003 f81c 	bl	945c <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    6424:	9b01      	ldr	r3, [sp, #4]
    6426:	6a1a      	ldr	r2, [r3, #32]
    6428:	9b01      	ldr	r3, [sp, #4]
    642a:	8b9b      	ldrh	r3, [r3, #28]
    642c:	4619      	mov	r1, r3
    642e:	2316      	movs	r3, #22
    6430:	fb01 f303 	mul.w	r3, r1, r3
    6434:	4413      	add	r3, r2
    6436:	785b      	ldrb	r3, [r3, #1]
    6438:	2b00      	cmp	r3, #0
    643a:	d018      	beq.n	646e <Can_43_FLEXCAN_Ipw_Init+0xa2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    643c:	9b01      	ldr	r3, [sp, #4]
    643e:	7898      	ldrb	r0, [r3, #2]
    6440:	9b01      	ldr	r3, [sp, #4]
    6442:	6a1a      	ldr	r2, [r3, #32]
    6444:	9b01      	ldr	r3, [sp, #4]
    6446:	8b9b      	ldrh	r3, [r3, #28]
    6448:	4619      	mov	r1, r3
    644a:	2316      	movs	r3, #22
    644c:	fb01 f303 	mul.w	r3, r1, r3
    6450:	4413      	add	r3, r2
    6452:	7cd9      	ldrb	r1, [r3, #19]
    6454:	9b01      	ldr	r3, [sp, #4]
    6456:	6a1a      	ldr	r2, [r3, #32]
    6458:	9b01      	ldr	r3, [sp, #4]
    645a:	8b9b      	ldrh	r3, [r3, #28]
    645c:	461c      	mov	r4, r3
    645e:	2316      	movs	r3, #22
    6460:	fb04 f303 	mul.w	r3, r4, r3
    6464:	4413      	add	r3, r2
    6466:	7d1b      	ldrb	r3, [r3, #20]
    6468:	461a      	mov	r2, r3
    646a:	f002 fee5 	bl	9238 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    646e:	9b01      	ldr	r3, [sp, #4]
    6470:	7898      	ldrb	r0, [r3, #2]
    6472:	9b01      	ldr	r3, [sp, #4]
    6474:	6a1a      	ldr	r2, [r3, #32]
    6476:	9b01      	ldr	r3, [sp, #4]
    6478:	8b9b      	ldrh	r3, [r3, #28]
    647a:	4619      	mov	r1, r3
    647c:	2316      	movs	r3, #22
    647e:	fb01 f303 	mul.w	r3, r1, r3
    6482:	4413      	add	r3, r2
    6484:	7c9b      	ldrb	r3, [r3, #18]
    6486:	4619      	mov	r1, r3
    6488:	f002 ff2a 	bl	92e0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    648c:	9801      	ldr	r0, [sp, #4]
    648e:	f000 fb05 	bl	6a9c <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    6492:	2300      	movs	r3, #0
    6494:	f88d 300d 	strb.w	r3, [sp, #13]
    6498:	e010      	b.n	64bc <Can_43_FLEXCAN_Ipw_Init+0xf0>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    649a:	9b01      	ldr	r3, [sp, #4]
    649c:	785b      	ldrb	r3, [r3, #1]
    649e:	461a      	mov	r2, r3
    64a0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    64a4:	494b      	ldr	r1, [pc, #300]	; (65d4 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    64a6:	0152      	lsls	r2, r2, #5
    64a8:	4413      	add	r3, r2
    64aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    64ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    64b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    64b6:	3301      	adds	r3, #1
    64b8:	f88d 300d 	strb.w	r3, [sp, #13]
    64bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    64c0:	2b1f      	cmp	r3, #31
    64c2:	d9ea      	bls.n	649a <Can_43_FLEXCAN_Ipw_Init+0xce>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    64c4:	2300      	movs	r3, #0
    64c6:	f88d 300f 	strb.w	r3, [sp, #15]
    64ca:	e06b      	b.n	65a4 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    64cc:	9b01      	ldr	r3, [sp, #4]
    64ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    64d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    64d4:	009b      	lsls	r3, r3, #2
    64d6:	4413      	add	r3, r2
    64d8:	681b      	ldr	r3, [r3, #0]
    64da:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    64dc:	9b02      	ldr	r3, [sp, #8]
    64de:	699b      	ldr	r3, [r3, #24]
    64e0:	2b03      	cmp	r3, #3
    64e2:	d006      	beq.n	64f2 <Can_43_FLEXCAN_Ipw_Init+0x126>
    64e4:	2b03      	cmp	r3, #3
    64e6:	d857      	bhi.n	6598 <Can_43_FLEXCAN_Ipw_Init+0x1cc>
    64e8:	2b00      	cmp	r3, #0
    64ea:	d023      	beq.n	6534 <Can_43_FLEXCAN_Ipw_Init+0x168>
    64ec:	2b01      	cmp	r3, #1
    64ee:	d02f      	beq.n	6550 <Can_43_FLEXCAN_Ipw_Init+0x184>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    64f0:	e052      	b.n	6598 <Can_43_FLEXCAN_Ipw_Init+0x1cc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    64f2:	2300      	movs	r3, #0
    64f4:	f88d 300e 	strb.w	r3, [sp, #14]
    64f8:	e015      	b.n	6526 <Can_43_FLEXCAN_Ipw_Init+0x15a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    64fa:	9b01      	ldr	r3, [sp, #4]
    64fc:	785b      	ldrb	r3, [r3, #1]
    64fe:	461c      	mov	r4, r3
    6500:	9b02      	ldr	r3, [sp, #8]
    6502:	7f1b      	ldrb	r3, [r3, #28]
    6504:	461a      	mov	r2, r3
    6506:	f89d 300e 	ldrb.w	r3, [sp, #14]
    650a:	4413      	add	r3, r2
    650c:	9a02      	ldr	r2, [sp, #8]
    650e:	8810      	ldrh	r0, [r2, #0]
    6510:	4930      	ldr	r1, [pc, #192]	; (65d4 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6512:	0162      	lsls	r2, r4, #5
    6514:	4413      	add	r3, r2
    6516:	4602      	mov	r2, r0
    6518:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    651c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6520:	3301      	adds	r3, #1
    6522:	f88d 300e 	strb.w	r3, [sp, #14]
    6526:	9b02      	ldr	r3, [sp, #8]
    6528:	7b9b      	ldrb	r3, [r3, #14]
    652a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    652e:	429a      	cmp	r2, r3
    6530:	d3e3      	bcc.n	64fa <Can_43_FLEXCAN_Ipw_Init+0x12e>
                break;
    6532:	e032      	b.n	659a <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    6534:	9b01      	ldr	r3, [sp, #4]
    6536:	785b      	ldrb	r3, [r3, #1]
    6538:	461c      	mov	r4, r3
    653a:	9b02      	ldr	r3, [sp, #8]
    653c:	7f1b      	ldrb	r3, [r3, #28]
    653e:	4618      	mov	r0, r3
    6540:	9b02      	ldr	r3, [sp, #8]
    6542:	8819      	ldrh	r1, [r3, #0]
    6544:	4a23      	ldr	r2, [pc, #140]	; (65d4 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6546:	0163      	lsls	r3, r4, #5
    6548:	4403      	add	r3, r0
    654a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    654e:	e024      	b.n	659a <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    6550:	9b01      	ldr	r3, [sp, #4]
    6552:	785b      	ldrb	r3, [r3, #1]
    6554:	461c      	mov	r4, r3
    6556:	9b02      	ldr	r3, [sp, #8]
    6558:	7f1b      	ldrb	r3, [r3, #28]
    655a:	4618      	mov	r0, r3
    655c:	9b02      	ldr	r3, [sp, #8]
    655e:	8819      	ldrh	r1, [r3, #0]
    6560:	4a1c      	ldr	r2, [pc, #112]	; (65d4 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6562:	0163      	lsls	r3, r4, #5
    6564:	4403      	add	r3, r0
    6566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	785b      	ldrb	r3, [r3, #1]
    656e:	4618      	mov	r0, r3
    6570:	9b02      	ldr	r3, [sp, #8]
    6572:	8819      	ldrh	r1, [r3, #0]
    6574:	4a17      	ldr	r2, [pc, #92]	; (65d4 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6576:	0183      	lsls	r3, r0, #6
    6578:	4413      	add	r3, r2
    657a:	330c      	adds	r3, #12
    657c:	460a      	mov	r2, r1
    657e:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    6580:	9b01      	ldr	r3, [sp, #4]
    6582:	785b      	ldrb	r3, [r3, #1]
    6584:	4618      	mov	r0, r3
    6586:	9b02      	ldr	r3, [sp, #8]
    6588:	8819      	ldrh	r1, [r3, #0]
    658a:	4a12      	ldr	r2, [pc, #72]	; (65d4 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    658c:	0183      	lsls	r3, r0, #6
    658e:	4413      	add	r3, r2
    6590:	330e      	adds	r3, #14
    6592:	460a      	mov	r2, r1
    6594:	801a      	strh	r2, [r3, #0]
                break;
    6596:	e000      	b.n	659a <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                break;
    6598:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    659a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    659e:	3301      	adds	r3, #1
    65a0:	f88d 300f 	strb.w	r3, [sp, #15]
    65a4:	9b01      	ldr	r3, [sp, #4]
    65a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    65aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    65ae:	429a      	cmp	r2, r3
    65b0:	d38c      	bcc.n	64cc <Can_43_FLEXCAN_Ipw_Init+0x100>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    65b2:	9b01      	ldr	r3, [sp, #4]
    65b4:	789b      	ldrb	r3, [r3, #2]
    65b6:	4618      	mov	r0, r3
    65b8:	f002 fca0 	bl	8efc <FlexCAN_Ip_SetStopMode_Privileged>
    65bc:	4603      	mov	r3, r0
    65be:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    65c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    65c6:	4618      	mov	r0, r3
    65c8:	b004      	add	sp, #16
    65ca:	bd10      	pop	{r4, pc}
    65cc:	1fff8cf4 	.word	0x1fff8cf4
    65d0:	1fff8f94 	.word	0x1fff8f94
    65d4:	1fff8f54 	.word	0x1fff8f54

000065d8 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    65d8:	b500      	push	{lr}
    65da:	b083      	sub	sp, #12
    65dc:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    65de:	9b01      	ldr	r3, [sp, #4]
    65e0:	789b      	ldrb	r3, [r3, #2]
    65e2:	4618      	mov	r0, r3
    65e4:	f002 faf6 	bl	8bd4 <FlexCAN_Ip_Deinit_Privileged>
}
    65e8:	bf00      	nop
    65ea:	b003      	add	sp, #12
    65ec:	f85d fb04 	ldr.w	pc, [sp], #4

000065f0 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    65f0:	b500      	push	{lr}
    65f2:	b085      	sub	sp, #20
    65f4:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    65f6:	2300      	movs	r3, #0
    65f8:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    65fa:	9b01      	ldr	r3, [sp, #4]
    65fc:	785b      	ldrb	r3, [r3, #1]
    65fe:	461a      	mov	r2, r3
    6600:	4b11      	ldr	r3, [pc, #68]	; (6648 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    6602:	5c9b      	ldrb	r3, [r3, r2]
    6604:	2b00      	cmp	r3, #0
    6606:	d012      	beq.n	662e <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    6608:	9b01      	ldr	r3, [sp, #4]
    660a:	7a5b      	ldrb	r3, [r3, #9]
    660c:	f083 0301 	eor.w	r3, r3, #1
    6610:	b2db      	uxtb	r3, r3
    6612:	2b00      	cmp	r3, #0
    6614:	d006      	beq.n	6624 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    6616:	9b01      	ldr	r3, [sp, #4]
    6618:	789b      	ldrb	r3, [r3, #2]
    661a:	2201      	movs	r2, #1
    661c:	2104      	movs	r1, #4
    661e:	4618      	mov	r0, r3
    6620:	f002 ff48 	bl	94b4 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6624:	9b01      	ldr	r3, [sp, #4]
    6626:	789b      	ldrb	r3, [r3, #2]
    6628:	4618      	mov	r0, r3
    662a:	f002 fee9 	bl	9400 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    662e:	9b01      	ldr	r3, [sp, #4]
    6630:	789b      	ldrb	r3, [r3, #2]
    6632:	4618      	mov	r0, r3
    6634:	f002 fc42 	bl	8ebc <FlexCAN_Ip_SetStartMode_Privileged>
    6638:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    663a:	9b03      	ldr	r3, [sp, #12]
    663c:	b2db      	uxtb	r3, r3
}
    663e:	4618      	mov	r0, r3
    6640:	b005      	add	sp, #20
    6642:	f85d fb04 	ldr.w	pc, [sp], #4
    6646:	bf00      	nop
    6648:	1fff8f94 	.word	0x1fff8f94

0000664c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    664c:	b500      	push	{lr}
    664e:	b087      	sub	sp, #28
    6650:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    6652:	2300      	movs	r3, #0
    6654:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    6658:	2300      	movs	r3, #0
    665a:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    665c:	9b01      	ldr	r3, [sp, #4]
    665e:	7898      	ldrb	r0, [r3, #2]
    6660:	4930      	ldr	r1, [pc, #192]	; (6724 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    6662:	9b01      	ldr	r3, [sp, #4]
    6664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6666:	681b      	ldr	r3, [r3, #0]
    6668:	461a      	mov	r2, r3
    666a:	f001 fbc3 	bl	7df4 <FlexCAN_Ip_Init_Privileged>
    666e:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    6670:	9b04      	ldr	r3, [sp, #16]
    6672:	2b00      	cmp	r3, #0
    6674:	d14f      	bne.n	6716 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6676:	9b01      	ldr	r3, [sp, #4]
    6678:	789b      	ldrb	r3, [r3, #2]
    667a:	4618      	mov	r0, r3
    667c:	f002 feee 	bl	945c <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    6680:	9801      	ldr	r0, [sp, #4]
    6682:	f7ff fd87 	bl	6194 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    6686:	9801      	ldr	r0, [sp, #4]
    6688:	f000 fa08 	bl	6a9c <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    668c:	2300      	movs	r3, #0
    668e:	f88d 3017 	strb.w	r3, [sp, #23]
    6692:	e02f      	b.n	66f4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    6694:	9b01      	ldr	r3, [sp, #4]
    6696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6698:	f89d 3017 	ldrb.w	r3, [sp, #23]
    669c:	009b      	lsls	r3, r3, #2
    669e:	4413      	add	r3, r2
    66a0:	681b      	ldr	r3, [r3, #0]
    66a2:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    66a4:	9b03      	ldr	r3, [sp, #12]
    66a6:	7b1b      	ldrb	r3, [r3, #12]
    66a8:	f083 0301 	eor.w	r3, r3, #1
    66ac:	b2db      	uxtb	r3, r3
    66ae:	2b00      	cmp	r3, #0
    66b0:	d018      	beq.n	66e4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    66b2:	9b03      	ldr	r3, [sp, #12]
    66b4:	699b      	ldr	r3, [r3, #24]
    66b6:	2b00      	cmp	r3, #0
    66b8:	d003      	beq.n	66c2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    66ba:	3b01      	subs	r3, #1
    66bc:	2b01      	cmp	r3, #1
    66be:	d813      	bhi.n	66e8 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    66c0:	e009      	b.n	66d6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    66c2:	9b01      	ldr	r3, [sp, #4]
    66c4:	7898      	ldrb	r0, [r3, #2]
    66c6:	9b03      	ldr	r3, [sp, #12]
    66c8:	7f19      	ldrb	r1, [r3, #28]
    66ca:	9b03      	ldr	r3, [sp, #12]
    66cc:	7b1b      	ldrb	r3, [r3, #12]
    66ce:	2200      	movs	r2, #0
    66d0:	f001 fc9c 	bl	800c <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    66d4:	e009      	b.n	66ea <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    66d6:	9b01      	ldr	r3, [sp, #4]
    66d8:	789b      	ldrb	r3, [r3, #2]
    66da:	2100      	movs	r1, #0
    66dc:	4618      	mov	r0, r3
    66de:	f001 fd93 	bl	8208 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    66e2:	e002      	b.n	66ea <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    66e4:	bf00      	nop
    66e6:	e000      	b.n	66ea <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    66e8:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    66ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
    66ee:	3301      	adds	r3, #1
    66f0:	f88d 3017 	strb.w	r3, [sp, #23]
    66f4:	9b01      	ldr	r3, [sp, #4]
    66f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    66fa:	f89d 2017 	ldrb.w	r2, [sp, #23]
    66fe:	429a      	cmp	r2, r3
    6700:	d3c8      	bcc.n	6694 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    6702:	9801      	ldr	r0, [sp, #4]
    6704:	f7ff ff74 	bl	65f0 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    6708:	4603      	mov	r3, r0
    670a:	2b00      	cmp	r3, #0
    670c:	bf14      	ite	ne
    670e:	2301      	movne	r3, #1
    6710:	2300      	moveq	r3, #0
    6712:	b2db      	uxtb	r3, r3
    6714:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    6716:	9b04      	ldr	r3, [sp, #16]
    6718:	b2db      	uxtb	r3, r3
}
    671a:	4618      	mov	r0, r3
    671c:	b007      	add	sp, #28
    671e:	f85d fb04 	ldr.w	pc, [sp], #4
    6722:	bf00      	nop
    6724:	1fff8cf4 	.word	0x1fff8cf4

00006728 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    6728:	b500      	push	{lr}
    672a:	b085      	sub	sp, #20
    672c:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    672e:	2300      	movs	r3, #0
    6730:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    6734:	2300      	movs	r3, #0
    6736:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    673a:	9b01      	ldr	r3, [sp, #4]
    673c:	789b      	ldrb	r3, [r3, #2]
    673e:	4618      	mov	r0, r3
    6740:	f002 f986 	bl	8a50 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    6744:	4603      	mov	r3, r0
    6746:	2b00      	cmp	r3, #0
    6748:	d160      	bne.n	680c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    674a:	9b01      	ldr	r3, [sp, #4]
    674c:	785b      	ldrb	r3, [r3, #1]
    674e:	461a      	mov	r2, r3
    6750:	4b33      	ldr	r3, [pc, #204]	; (6820 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    6752:	5c9b      	ldrb	r3, [r3, r2]
    6754:	2b00      	cmp	r3, #0
    6756:	d012      	beq.n	677e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6758:	9b01      	ldr	r3, [sp, #4]
    675a:	789b      	ldrb	r3, [r3, #2]
    675c:	4618      	mov	r0, r3
    675e:	f002 fe7d 	bl	945c <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    6762:	9b01      	ldr	r3, [sp, #4]
    6764:	7a5b      	ldrb	r3, [r3, #9]
    6766:	f083 0301 	eor.w	r3, r3, #1
    676a:	b2db      	uxtb	r3, r3
    676c:	2b00      	cmp	r3, #0
    676e:	d006      	beq.n	677e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    6770:	9b01      	ldr	r3, [sp, #4]
    6772:	789b      	ldrb	r3, [r3, #2]
    6774:	2200      	movs	r2, #0
    6776:	2104      	movs	r1, #4
    6778:	4618      	mov	r0, r3
    677a:	f002 fe9b 	bl	94b4 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    677e:	2300      	movs	r3, #0
    6780:	f88d 300e 	strb.w	r3, [sp, #14]
    6784:	e032      	b.n	67ec <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    6786:	9b01      	ldr	r3, [sp, #4]
    6788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    678a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    678e:	009b      	lsls	r3, r3, #2
    6790:	4413      	add	r3, r2
    6792:	681b      	ldr	r3, [r3, #0]
    6794:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    6796:	9b02      	ldr	r3, [sp, #8]
    6798:	699b      	ldr	r3, [r3, #24]
    679a:	2b03      	cmp	r3, #3
    679c:	d119      	bne.n	67d2 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    679e:	2300      	movs	r3, #0
    67a0:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    67a4:	9b01      	ldr	r3, [sp, #4]
    67a6:	7898      	ldrb	r0, [r3, #2]
    67a8:	9b02      	ldr	r3, [sp, #8]
    67aa:	7f1a      	ldrb	r2, [r3, #28]
    67ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
    67b0:	4413      	add	r3, r2
    67b2:	b2db      	uxtb	r3, r3
    67b4:	4619      	mov	r1, r3
    67b6:	f002 ff03 	bl	95c0 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    67ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
    67be:	3301      	adds	r3, #1
    67c0:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    67c4:	9b02      	ldr	r3, [sp, #8]
    67c6:	7b9b      	ldrb	r3, [r3, #14]
    67c8:	f89d 200d 	ldrb.w	r2, [sp, #13]
    67cc:	429a      	cmp	r2, r3
    67ce:	d3e9      	bcc.n	67a4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    67d0:	e007      	b.n	67e2 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	789a      	ldrb	r2, [r3, #2]
    67d6:	9b02      	ldr	r3, [sp, #8]
    67d8:	7f1b      	ldrb	r3, [r3, #28]
    67da:	4619      	mov	r1, r3
    67dc:	4610      	mov	r0, r2
    67de:	f002 feef 	bl	95c0 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    67e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    67e6:	3301      	adds	r3, #1
    67e8:	f88d 300e 	strb.w	r3, [sp, #14]
    67ec:	9b01      	ldr	r3, [sp, #4]
    67ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    67f2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    67f6:	429a      	cmp	r2, r3
    67f8:	d3c5      	bcc.n	6786 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    67fa:	9b01      	ldr	r3, [sp, #4]
    67fc:	789b      	ldrb	r3, [r3, #2]
    67fe:	4618      	mov	r0, r3
    6800:	f002 fb7c 	bl	8efc <FlexCAN_Ip_SetStopMode_Privileged>
    6804:	4603      	mov	r3, r0
    6806:	f88d 300f 	strb.w	r3, [sp, #15]
    680a:	e002      	b.n	6812 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    680c:	2301      	movs	r3, #1
    680e:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    6812:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6816:	4618      	mov	r0, r3
    6818:	b005      	add	sp, #20
    681a:	f85d fb04 	ldr.w	pc, [sp], #4
    681e:	bf00      	nop
    6820:	1fff8f94 	.word	0x1fff8f94

00006824 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    6824:	b500      	push	{lr}
    6826:	b083      	sub	sp, #12
    6828:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    682a:	9b01      	ldr	r3, [sp, #4]
    682c:	785b      	ldrb	r3, [r3, #1]
    682e:	461a      	mov	r2, r3
    6830:	4b10      	ldr	r3, [pc, #64]	; (6874 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    6832:	5c9b      	ldrb	r3, [r3, r2]
    6834:	2b00      	cmp	r3, #0
    6836:	d018      	beq.n	686a <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6838:	9b01      	ldr	r3, [sp, #4]
    683a:	789b      	ldrb	r3, [r3, #2]
    683c:	4618      	mov	r0, r3
    683e:	f002 fe0d 	bl	945c <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	785b      	ldrb	r3, [r3, #1]
    6846:	461a      	mov	r2, r3
    6848:	4b0a      	ldr	r3, [pc, #40]	; (6874 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    684a:	2100      	movs	r1, #0
    684c:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    684e:	9b01      	ldr	r3, [sp, #4]
    6850:	7a5b      	ldrb	r3, [r3, #9]
    6852:	f083 0301 	eor.w	r3, r3, #1
    6856:	b2db      	uxtb	r3, r3
    6858:	2b00      	cmp	r3, #0
    685a:	d006      	beq.n	686a <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    685c:	9b01      	ldr	r3, [sp, #4]
    685e:	789b      	ldrb	r3, [r3, #2]
    6860:	2200      	movs	r2, #0
    6862:	2104      	movs	r1, #4
    6864:	4618      	mov	r0, r3
    6866:	f002 fe25 	bl	94b4 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    686a:	bf00      	nop
    686c:	b003      	add	sp, #12
    686e:	f85d fb04 	ldr.w	pc, [sp], #4
    6872:	bf00      	nop
    6874:	1fff8f94 	.word	0x1fff8f94

00006878 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    6878:	b500      	push	{lr}
    687a:	b083      	sub	sp, #12
    687c:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    687e:	9b01      	ldr	r3, [sp, #4]
    6880:	785b      	ldrb	r3, [r3, #1]
    6882:	461a      	mov	r2, r3
    6884:	4b11      	ldr	r3, [pc, #68]	; (68cc <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    6886:	5c9b      	ldrb	r3, [r3, r2]
    6888:	f083 0301 	eor.w	r3, r3, #1
    688c:	b2db      	uxtb	r3, r3
    688e:	2b00      	cmp	r3, #0
    6890:	d018      	beq.n	68c4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6892:	9b01      	ldr	r3, [sp, #4]
    6894:	789b      	ldrb	r3, [r3, #2]
    6896:	4618      	mov	r0, r3
    6898:	f002 fdb2 	bl	9400 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	7a5b      	ldrb	r3, [r3, #9]
    68a0:	f083 0301 	eor.w	r3, r3, #1
    68a4:	b2db      	uxtb	r3, r3
    68a6:	2b00      	cmp	r3, #0
    68a8:	d006      	beq.n	68b8 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    68aa:	9b01      	ldr	r3, [sp, #4]
    68ac:	789b      	ldrb	r3, [r3, #2]
    68ae:	2201      	movs	r2, #1
    68b0:	2104      	movs	r1, #4
    68b2:	4618      	mov	r0, r3
    68b4:	f002 fdfe 	bl	94b4 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    68b8:	9b01      	ldr	r3, [sp, #4]
    68ba:	785b      	ldrb	r3, [r3, #1]
    68bc:	461a      	mov	r2, r3
    68be:	4b03      	ldr	r3, [pc, #12]	; (68cc <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    68c0:	2101      	movs	r1, #1
    68c2:	5499      	strb	r1, [r3, r2]
    }
}
    68c4:	bf00      	nop
    68c6:	b003      	add	sp, #12
    68c8:	f85d fb04 	ldr.w	pc, [sp], #4
    68cc:	1fff8f94 	.word	0x1fff8f94

000068d0 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    68d0:	b500      	push	{lr}
    68d2:	b085      	sub	sp, #20
    68d4:	9001      	str	r0, [sp, #4]
    68d6:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    68d8:	2300      	movs	r3, #0
    68da:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    68dc:	9b01      	ldr	r3, [sp, #4]
    68de:	789b      	ldrb	r3, [r3, #2]
    68e0:	4618      	mov	r0, r3
    68e2:	f001 fe81 	bl	85e8 <FlexCAN_Ip_GetErrorStatus>
    68e6:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    68e8:	9b03      	ldr	r3, [sp, #12]
    68ea:	091b      	lsrs	r3, r3, #4
    68ec:	b2db      	uxtb	r3, r3
    68ee:	f003 0303 	and.w	r3, r3, #3
    68f2:	b2da      	uxtb	r2, r3
    68f4:	9b00      	ldr	r3, [sp, #0]
    68f6:	701a      	strb	r2, [r3, #0]
    return E_OK;
    68f8:	2300      	movs	r3, #0
}
    68fa:	4618      	mov	r0, r3
    68fc:	b005      	add	sp, #20
    68fe:	f85d fb04 	ldr.w	pc, [sp], #4

00006902 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    6902:	b500      	push	{lr}
    6904:	b083      	sub	sp, #12
    6906:	9001      	str	r0, [sp, #4]
    6908:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    690a:	9b01      	ldr	r3, [sp, #4]
    690c:	789b      	ldrb	r3, [r3, #2]
    690e:	4618      	mov	r0, r3
    6910:	f001 fe7c 	bl	860c <FlexCAN_Ip_GetControllerTxErrorCounter>
    6914:	4603      	mov	r3, r0
    6916:	461a      	mov	r2, r3
    6918:	9b00      	ldr	r3, [sp, #0]
    691a:	701a      	strb	r2, [r3, #0]
     return E_OK;
    691c:	2300      	movs	r3, #0
}
    691e:	4618      	mov	r0, r3
    6920:	b003      	add	sp, #12
    6922:	f85d fb04 	ldr.w	pc, [sp], #4

00006926 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    6926:	b500      	push	{lr}
    6928:	b083      	sub	sp, #12
    692a:	9001      	str	r0, [sp, #4]
    692c:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    692e:	9b01      	ldr	r3, [sp, #4]
    6930:	789b      	ldrb	r3, [r3, #2]
    6932:	4618      	mov	r0, r3
    6934:	f001 fe7c 	bl	8630 <FlexCAN_Ip_GetControllerRxErrorCounter>
    6938:	4603      	mov	r3, r0
    693a:	461a      	mov	r2, r3
    693c:	9b00      	ldr	r3, [sp, #0]
    693e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    6940:	2300      	movs	r3, #0
}
    6942:	4618      	mov	r0, r3
    6944:	b003      	add	sp, #12
    6946:	f85d fb04 	ldr.w	pc, [sp], #4

0000694a <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    694a:	b510      	push	{r4, lr}
    694c:	b08c      	sub	sp, #48	; 0x30
    694e:	9005      	str	r0, [sp, #20]
    6950:	9104      	str	r1, [sp, #16]
    6952:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    6954:	2301      	movs	r3, #1
    6956:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    6958:	2300      	movs	r3, #0
    695a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    695e:	2300      	movs	r3, #0
    6960:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    6962:	2300      	movs	r3, #0
    6964:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    6966:	2300      	movs	r3, #0
    6968:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    696c:	2300      	movs	r3, #0
    696e:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    6972:	2300      	movs	r3, #0
    6974:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    6978:	2300      	movs	r3, #0
    697a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    697e:	2300      	movs	r3, #0
    6980:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    6984:	9b04      	ldr	r3, [sp, #16]
    6986:	699b      	ldr	r3, [r3, #24]
    6988:	2b03      	cmp	r3, #3
    698a:	d173      	bne.n	6a74 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    698c:	9b03      	ldr	r3, [sp, #12]
    698e:	681b      	ldr	r3, [r3, #0]
    6990:	0fdb      	lsrs	r3, r3, #31
    6992:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    6994:	9b04      	ldr	r3, [sp, #16]
    6996:	7c1a      	ldrb	r2, [r3, #16]
    6998:	9b03      	ldr	r3, [sp, #12]
    699a:	799b      	ldrb	r3, [r3, #6]
    699c:	429a      	cmp	r2, r3
    699e:	d803      	bhi.n	69a8 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    69a0:	9b04      	ldr	r3, [sp, #16]
    69a2:	7c1b      	ldrb	r3, [r3, #16]
    69a4:	9307      	str	r3, [sp, #28]
    69a6:	e002      	b.n	69ae <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    69a8:	9b03      	ldr	r3, [sp, #12]
    69aa:	799b      	ldrb	r3, [r3, #6]
    69ac:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    69ae:	9b04      	ldr	r3, [sp, #16]
    69b0:	7c5b      	ldrb	r3, [r3, #17]
    69b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    69b6:	9b03      	ldr	r3, [sp, #12]
    69b8:	681b      	ldr	r3, [r3, #0]
    69ba:	0f9b      	lsrs	r3, r3, #30
    69bc:	f003 0301 	and.w	r3, r3, #1
    69c0:	2b00      	cmp	r3, #0
    69c2:	bf14      	ite	ne
    69c4:	2301      	movne	r3, #1
    69c6:	2300      	moveq	r3, #0
    69c8:	b2db      	uxtb	r3, r3
    69ca:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    69ce:	9b05      	ldr	r3, [sp, #20]
    69d0:	6a1a      	ldr	r2, [r3, #32]
    69d2:	9b05      	ldr	r3, [sp, #20]
    69d4:	8b9b      	ldrh	r3, [r3, #28]
    69d6:	4619      	mov	r1, r3
    69d8:	2316      	movs	r3, #22
    69da:	fb01 f303 	mul.w	r3, r1, r3
    69de:	4413      	add	r3, r2
    69e0:	781b      	ldrb	r3, [r3, #0]
    69e2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    69e6:	2300      	movs	r3, #0
    69e8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    69ec:	9b04      	ldr	r3, [sp, #16]
    69ee:	7b1b      	ldrb	r3, [r3, #12]
    69f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    69f4:	9b05      	ldr	r3, [sp, #20]
    69f6:	7898      	ldrb	r0, [r3, #2]
    69f8:	9b04      	ldr	r3, [sp, #16]
    69fa:	7f1a      	ldrb	r2, [r3, #28]
    69fc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    6a00:	4413      	add	r3, r2
    6a02:	b2db      	uxtb	r3, r3
    6a04:	4619      	mov	r1, r3
    6a06:	f001 fcdd 	bl	83c4 <FlexCAN_Ip_GetTransferStatus>
    6a0a:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    6a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a0e:	2b00      	cmp	r3, #0
    6a10:	d122      	bne.n	6a58 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    6a12:	9b05      	ldr	r3, [sp, #20]
    6a14:	785b      	ldrb	r3, [r3, #1]
    6a16:	461c      	mov	r4, r3
    6a18:	9b04      	ldr	r3, [sp, #16]
    6a1a:	7f1b      	ldrb	r3, [r3, #28]
    6a1c:	461a      	mov	r2, r3
    6a1e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    6a22:	4413      	add	r3, r2
    6a24:	9a03      	ldr	r2, [sp, #12]
    6a26:	8890      	ldrh	r0, [r2, #4]
    6a28:	491b      	ldr	r1, [pc, #108]	; (6a98 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    6a2a:	0162      	lsls	r2, r4, #5
    6a2c:	4413      	add	r3, r2
    6a2e:	4602      	mov	r2, r0
    6a30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    6a34:	9b05      	ldr	r3, [sp, #20]
    6a36:	7898      	ldrb	r0, [r3, #2]
    6a38:	9b04      	ldr	r3, [sp, #16]
    6a3a:	7f1a      	ldrb	r2, [r3, #28]
    6a3c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    6a40:	4413      	add	r3, r2
    6a42:	b2d9      	uxtb	r1, r3
    6a44:	9b03      	ldr	r3, [sp, #12]
    6a46:	681c      	ldr	r4, [r3, #0]
    6a48:	9b03      	ldr	r3, [sp, #12]
    6a4a:	689b      	ldr	r3, [r3, #8]
    6a4c:	aa06      	add	r2, sp, #24
    6a4e:	9300      	str	r3, [sp, #0]
    6a50:	4623      	mov	r3, r4
    6a52:	f001 fa4b 	bl	7eec <FlexCAN_Ip_Send>
    6a56:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    6a58:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    6a5c:	3301      	adds	r3, #1
    6a5e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    6a62:	9b04      	ldr	r3, [sp, #16]
    6a64:	7b9b      	ldrb	r3, [r3, #14]
    6a66:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    6a6a:	429a      	cmp	r2, r3
    6a6c:	d202      	bcs.n	6a74 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    6a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a70:	2b02      	cmp	r3, #2
    6a72:	d0bf      	beq.n	69f4 <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    6a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a76:	2b00      	cmp	r3, #0
    6a78:	d004      	beq.n	6a84 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    6a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a7c:	2b02      	cmp	r3, #2
    6a7e:	d001      	beq.n	6a84 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    6a80:	2301      	movs	r3, #1
    6a82:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    6a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a86:	2b02      	cmp	r3, #2
    6a88:	d002      	beq.n	6a90 <Can_43_FLEXCAN_Ipw_Write+0x146>
    6a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a8c:	b2db      	uxtb	r3, r3
    6a8e:	e000      	b.n	6a92 <Can_43_FLEXCAN_Ipw_Write+0x148>
    6a90:	2302      	movs	r3, #2
}
    6a92:	4618      	mov	r0, r3
    6a94:	b00c      	add	sp, #48	; 0x30
    6a96:	bd10      	pop	{r4, pc}
    6a98:	1fff8f14 	.word	0x1fff8f14

00006a9c <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    6a9c:	b500      	push	{lr}
    6a9e:	b089      	sub	sp, #36	; 0x24
    6aa0:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    6aa2:	2300      	movs	r3, #0
    6aa4:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    6aa8:	9b01      	ldr	r3, [sp, #4]
    6aaa:	789b      	ldrb	r3, [r3, #2]
    6aac:	2101      	movs	r1, #1
    6aae:	4618      	mov	r0, r3
    6ab0:	f002 fa42 	bl	8f38 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    6ab4:	2300      	movs	r3, #0
    6ab6:	f88d 301f 	strb.w	r3, [sp, #31]
    6aba:	e03a      	b.n	6b32 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    6abc:	9b01      	ldr	r3, [sp, #4]
    6abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6ac0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6ac4:	009b      	lsls	r3, r3, #2
    6ac6:	4413      	add	r3, r2
    6ac8:	681b      	ldr	r3, [r3, #0]
    6aca:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    6acc:	9b06      	ldr	r3, [sp, #24]
    6ace:	699b      	ldr	r3, [r3, #24]
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d121      	bne.n	6b18 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    6ad4:	2300      	movs	r3, #0
    6ad6:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    6ada:	2300      	movs	r3, #0
    6adc:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    6ade:	9b06      	ldr	r3, [sp, #24]
    6ae0:	689b      	ldr	r3, [r3, #8]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d002      	beq.n	6aec <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    6ae6:	2301      	movs	r3, #1
    6ae8:	9302      	str	r3, [sp, #8]
    6aea:	e001      	b.n	6af0 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    6aec:	2300      	movs	r3, #0
    6aee:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    6af0:	9b01      	ldr	r3, [sp, #4]
    6af2:	7898      	ldrb	r0, [r3, #2]
    6af4:	9b06      	ldr	r3, [sp, #24]
    6af6:	7f19      	ldrb	r1, [r3, #28]
    6af8:	9b06      	ldr	r3, [sp, #24]
    6afa:	695b      	ldr	r3, [r3, #20]
    6afc:	681b      	ldr	r3, [r3, #0]
    6afe:	aa02      	add	r2, sp, #8
    6b00:	f001 fa40 	bl	7f84 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    6b04:	9b01      	ldr	r3, [sp, #4]
    6b06:	7898      	ldrb	r0, [r3, #2]
    6b08:	9b06      	ldr	r3, [sp, #24]
    6b0a:	7f19      	ldrb	r1, [r3, #28]
    6b0c:	9b06      	ldr	r3, [sp, #24]
    6b0e:	695b      	ldr	r3, [r3, #20]
    6b10:	685b      	ldr	r3, [r3, #4]
    6b12:	461a      	mov	r2, r3
    6b14:	f001 ffc8 	bl	8aa8 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    6b18:	9b06      	ldr	r3, [sp, #24]
    6b1a:	699b      	ldr	r3, [r3, #24]
    6b1c:	2b01      	cmp	r3, #1
    6b1e:	d103      	bne.n	6b28 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    6b20:	9906      	ldr	r1, [sp, #24]
    6b22:	9801      	ldr	r0, [sp, #4]
    6b24:	f7ff f913 	bl	5d4e <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    6b28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6b2c:	3301      	adds	r3, #1
    6b2e:	f88d 301f 	strb.w	r3, [sp, #31]
    6b32:	9b01      	ldr	r3, [sp, #4]
    6b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    6b38:	f89d 201f 	ldrb.w	r2, [sp, #31]
    6b3c:	429a      	cmp	r2, r3
    6b3e:	d3bd      	bcc.n	6abc <Can_Ipw_InitRx+0x20>
        }
    }
}
    6b40:	bf00      	nop
    6b42:	bf00      	nop
    6b44:	b009      	add	sp, #36	; 0x24
    6b46:	f85d fb04 	ldr.w	pc, [sp], #4

00006b4a <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    6b4a:	b500      	push	{lr}
    6b4c:	b083      	sub	sp, #12
    6b4e:	9001      	str	r0, [sp, #4]
    6b50:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    6b52:	9b00      	ldr	r3, [sp, #0]
    6b54:	681b      	ldr	r3, [r3, #0]
    6b56:	2b01      	cmp	r3, #1
    6b58:	d114      	bne.n	6b84 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    6b5a:	9b01      	ldr	r3, [sp, #4]
    6b5c:	789b      	ldrb	r3, [r3, #2]
    6b5e:	4618      	mov	r0, r3
    6b60:	f002 f994 	bl	8e8c <FlexCAN_Ip_GetStartMode_Privileged>
    6b64:	4603      	mov	r3, r0
    6b66:	f083 0301 	eor.w	r3, r3, #1
    6b6a:	b2db      	uxtb	r3, r3
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d01e      	beq.n	6bae <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    6b70:	9b00      	ldr	r3, [sp, #0]
    6b72:	2202      	movs	r2, #2
    6b74:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    6b76:	9b01      	ldr	r3, [sp, #4]
    6b78:	781b      	ldrb	r3, [r3, #0]
    6b7a:	2102      	movs	r1, #2
    6b7c:	4618      	mov	r0, r3
    6b7e:	f7f9 fec4 	bl	90a <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    6b82:	e014      	b.n	6bae <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    6b84:	9b00      	ldr	r3, [sp, #0]
    6b86:	681b      	ldr	r3, [r3, #0]
    6b88:	2b02      	cmp	r3, #2
    6b8a:	d110      	bne.n	6bae <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    6b8c:	9b01      	ldr	r3, [sp, #4]
    6b8e:	789b      	ldrb	r3, [r3, #2]
    6b90:	4618      	mov	r0, r3
    6b92:	f002 f97b 	bl	8e8c <FlexCAN_Ip_GetStartMode_Privileged>
    6b96:	4603      	mov	r3, r0
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d008      	beq.n	6bae <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    6b9c:	9b00      	ldr	r3, [sp, #0]
    6b9e:	2201      	movs	r2, #1
    6ba0:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    6ba2:	9b01      	ldr	r3, [sp, #4]
    6ba4:	781b      	ldrb	r3, [r3, #0]
    6ba6:	2101      	movs	r1, #1
    6ba8:	4618      	mov	r0, r3
    6baa:	f7f9 feae 	bl	90a <CanIf_ControllerModeIndication>
}
    6bae:	bf00      	nop
    6bb0:	b003      	add	sp, #12
    6bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00006bb6 <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    6bb6:	b500      	push	{lr}
    6bb8:	b085      	sub	sp, #20
    6bba:	9003      	str	r0, [sp, #12]
    6bbc:	9102      	str	r1, [sp, #8]
    6bbe:	9300      	str	r3, [sp, #0]
    6bc0:	4613      	mov	r3, r2
    6bc2:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    6bc6:	9b00      	ldr	r3, [sp, #0]
    6bc8:	2b03      	cmp	r3, #3
    6bca:	d009      	beq.n	6be0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    6bcc:	9b00      	ldr	r3, [sp, #0]
    6bce:	2b03      	cmp	r3, #3
    6bd0:	d821      	bhi.n	6c16 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    6bd2:	9b00      	ldr	r3, [sp, #0]
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d00c      	beq.n	6bf2 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    6bd8:	9b00      	ldr	r3, [sp, #0]
    6bda:	2b01      	cmp	r3, #1
    6bdc:	d012      	beq.n	6c04 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    6bde:	e01a      	b.n	6c16 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    6be0:	9b02      	ldr	r3, [sp, #8]
    6be2:	691b      	ldr	r3, [r3, #16]
    6be4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6be8:	4619      	mov	r1, r3
    6bea:	9803      	ldr	r0, [sp, #12]
    6bec:	f7ff fb0c 	bl	6208 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    6bf0:	e012      	b.n	6c18 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    6bf2:	9b02      	ldr	r3, [sp, #8]
    6bf4:	691b      	ldr	r3, [r3, #16]
    6bf6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6bfa:	4619      	mov	r1, r3
    6bfc:	9803      	ldr	r0, [sp, #12]
    6bfe:	f7ff fb4f 	bl	62a0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    6c02:	e009      	b.n	6c18 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    6c04:	9b02      	ldr	r3, [sp, #8]
    6c06:	691b      	ldr	r3, [r3, #16]
    6c08:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6c0c:	4619      	mov	r1, r3
    6c0e:	9803      	ldr	r0, [sp, #12]
    6c10:	f7ff fb46 	bl	62a0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    6c14:	e000      	b.n	6c18 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    6c16:	bf00      	nop
            }
        }
    }
    6c18:	bf00      	nop
    6c1a:	b005      	add	sp, #20
    6c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00006c20 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    6c20:	b500      	push	{lr}
    6c22:	b085      	sub	sp, #20
    6c24:	9102      	str	r1, [sp, #8]
    6c26:	9201      	str	r2, [sp, #4]
    6c28:	9300      	str	r3, [sp, #0]
    6c2a:	4603      	mov	r3, r0
    6c2c:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    6c30:	9a00      	ldr	r2, [sp, #0]
    6c32:	9b01      	ldr	r3, [sp, #4]
    6c34:	011b      	lsls	r3, r3, #4
    6c36:	4413      	add	r3, r2
    6c38:	3308      	adds	r3, #8
    6c3a:	781b      	ldrb	r3, [r3, #0]
    6c3c:	f083 0301 	eor.w	r3, r3, #1
    6c40:	b2db      	uxtb	r3, r3
    6c42:	2b00      	cmp	r3, #0
    6c44:	d03b      	beq.n	6cbe <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    6c46:	9b02      	ldr	r3, [sp, #8]
    6c48:	2b04      	cmp	r3, #4
    6c4a:	d83a      	bhi.n	6cc2 <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    6c4c:	a201      	add	r2, pc, #4	; (adr r2, 6c54 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    6c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6c52:	bf00      	nop
    6c54:	00006c7b 	.word	0x00006c7b
    6c58:	00006c8d 	.word	0x00006c8d
    6c5c:	00006c9f 	.word	0x00006c9f
    6c60:	00006caf 	.word	0x00006caf
    6c64:	00006c69 	.word	0x00006c69
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    6c68:	9b01      	ldr	r3, [sp, #4]
    6c6a:	b2d9      	uxtb	r1, r3
    6c6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c70:	2203      	movs	r2, #3
    6c72:	4618      	mov	r0, r3
    6c74:	f7fe ff86 	bl	5b84 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    6c78:	e024      	b.n	6cc4 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    6c7a:	9b01      	ldr	r3, [sp, #4]
    6c7c:	b2d9      	uxtb	r1, r3
    6c7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c82:	2200      	movs	r2, #0
    6c84:	4618      	mov	r0, r3
    6c86:	f7fe ff7d 	bl	5b84 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    6c8a:	e01b      	b.n	6cc4 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    6c8c:	9b01      	ldr	r3, [sp, #4]
    6c8e:	b2d9      	uxtb	r1, r3
    6c90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c94:	2201      	movs	r2, #1
    6c96:	4618      	mov	r0, r3
    6c98:	f7fe ff74 	bl	5b84 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    6c9c:	e012      	b.n	6cc4 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    6c9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ca2:	2201      	movs	r2, #1
    6ca4:	2106      	movs	r1, #6
    6ca6:	4618      	mov	r0, r3
    6ca8:	f7fe ff6c 	bl	5b84 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    6cac:	e00a      	b.n	6cc4 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    6cae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6cb2:	2201      	movs	r2, #1
    6cb4:	2107      	movs	r1, #7
    6cb6:	4618      	mov	r0, r3
    6cb8:	f7fe ff64 	bl	5b84 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    6cbc:	e002      	b.n	6cc4 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    6cbe:	bf00      	nop
    6cc0:	e000      	b.n	6cc4 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    6cc2:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    6cc4:	bf00      	nop
    6cc6:	b005      	add	sp, #20
    6cc8:	f85d fb04 	ldr.w	pc, [sp], #4

00006ccc <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    6ccc:	b500      	push	{lr}
    6cce:	b085      	sub	sp, #20
    6cd0:	9102      	str	r1, [sp, #8]
    6cd2:	9201      	str	r2, [sp, #4]
    6cd4:	9300      	str	r3, [sp, #0]
    6cd6:	4603      	mov	r3, r0
    6cd8:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    6cdc:	9b02      	ldr	r3, [sp, #8]
    6cde:	2b07      	cmp	r3, #7
    6ce0:	d105      	bne.n	6cee <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    6ce2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ce6:	4618      	mov	r0, r3
    6ce8:	f7fe ff8e 	bl	5c08 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    6cec:	e000      	b.n	6cf0 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    6cee:	bf00      	nop
        }
    }
}
    6cf0:	bf00      	nop
    6cf2:	b005      	add	sp, #20
    6cf4:	f85d fb04 	ldr.w	pc, [sp], #4

00006cf8 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    6cf8:	b082      	sub	sp, #8
    6cfa:	9001      	str	r0, [sp, #4]
    6cfc:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    6cfe:	9b01      	ldr	r3, [sp, #4]
    6d00:	9a00      	ldr	r2, [sp, #0]
    6d02:	649a      	str	r2, [r3, #72]	; 0x48
}
    6d04:	bf00      	nop
    6d06:	b002      	add	sp, #8
    6d08:	4770      	bx	lr

00006d0a <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    6d0a:	b084      	sub	sp, #16
    6d0c:	9001      	str	r0, [sp, #4]
    6d0e:	460b      	mov	r3, r1
    6d10:	f88d 3003 	strb.w	r3, [sp, #3]
    6d14:	4613      	mov	r3, r2
    6d16:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    6d1a:	9b01      	ldr	r3, [sp, #4]
    6d1c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    6d20:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    6d22:	9b03      	ldr	r3, [sp, #12]
    6d24:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    6d28:	9303      	str	r3, [sp, #12]

    if (enable)
    6d2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d00b      	beq.n	6d4a <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    6d32:	9b03      	ldr	r3, [sp, #12]
    6d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6d38:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    6d3a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6d3e:	021b      	lsls	r3, r3, #8
    6d40:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    6d44:	9a03      	ldr	r2, [sp, #12]
    6d46:	4313      	orrs	r3, r2
    6d48:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    6d4a:	9b01      	ldr	r3, [sp, #4]
    6d4c:	9a03      	ldr	r2, [sp, #12]
    6d4e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    6d52:	bf00      	nop
    6d54:	b004      	add	sp, #16
    6d56:	4770      	bx	lr

00006d58 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    6d58:	b082      	sub	sp, #8
    6d5a:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    6d5c:	9b01      	ldr	r3, [sp, #4]
    6d5e:	681b      	ldr	r3, [r3, #0]
    6d60:	43db      	mvns	r3, r3
    6d62:	0fdb      	lsrs	r3, r3, #31
    6d64:	b2db      	uxtb	r3, r3
}
    6d66:	4618      	mov	r0, r3
    6d68:	b002      	add	sp, #8
    6d6a:	4770      	bx	lr

00006d6c <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    6d6c:	b082      	sub	sp, #8
    6d6e:	9001      	str	r0, [sp, #4]
    6d70:	460b      	mov	r3, r1
    6d72:	f88d 3003 	strb.w	r3, [sp, #3]
    6d76:	4613      	mov	r3, r2
    6d78:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    6d7c:	9b01      	ldr	r3, [sp, #4]
    6d7e:	681b      	ldr	r3, [r3, #0]
    6d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    6d84:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6d88:	2a00      	cmp	r2, #0
    6d8a:	d002      	beq.n	6d92 <FlexCAN_SetFDEnabled+0x26>
    6d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6d90:	e000      	b.n	6d94 <FlexCAN_SetFDEnabled+0x28>
    6d92:	2200      	movs	r2, #0
    6d94:	431a      	orrs	r2, r3
    6d96:	9b01      	ldr	r3, [sp, #4]
    6d98:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    6d9a:	9b01      	ldr	r3, [sp, #4]
    6d9c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    6da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    6da4:	f89d 2002 	ldrb.w	r2, [sp, #2]
    6da8:	2a00      	cmp	r2, #0
    6daa:	d002      	beq.n	6db2 <FlexCAN_SetFDEnabled+0x46>
    6dac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6db0:	e000      	b.n	6db4 <FlexCAN_SetFDEnabled+0x48>
    6db2:	2200      	movs	r2, #0
    6db4:	431a      	orrs	r2, r3
    6db6:	9b01      	ldr	r3, [sp, #4]
    6db8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    6dc2:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    6dc6:	9b01      	ldr	r3, [sp, #4]
    6dc8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    6dcc:	bf00      	nop
    6dce:	b002      	add	sp, #8
    6dd0:	4770      	bx	lr

00006dd2 <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    6dd2:	b082      	sub	sp, #8
    6dd4:	9001      	str	r0, [sp, #4]
    6dd6:	460b      	mov	r3, r1
    6dd8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    6ddc:	9b01      	ldr	r3, [sp, #4]
    6dde:	685b      	ldr	r3, [r3, #4]
    6de0:	f023 0308 	bic.w	r3, r3, #8
    6de4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6de8:	2a00      	cmp	r2, #0
    6dea:	d001      	beq.n	6df0 <FlexCAN_SetListenOnlyMode+0x1e>
    6dec:	2208      	movs	r2, #8
    6dee:	e000      	b.n	6df2 <FlexCAN_SetListenOnlyMode+0x20>
    6df0:	2200      	movs	r2, #0
    6df2:	431a      	orrs	r2, r3
    6df4:	9b01      	ldr	r3, [sp, #4]
    6df6:	605a      	str	r2, [r3, #4]
}
    6df8:	bf00      	nop
    6dfa:	b002      	add	sp, #8
    6dfc:	4770      	bx	lr

00006dfe <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    6dfe:	b082      	sub	sp, #8
    6e00:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    6e02:	9b01      	ldr	r3, [sp, #4]
    6e04:	689b      	ldr	r3, [r3, #8]
}
    6e06:	bf00      	nop
    6e08:	b002      	add	sp, #8
    6e0a:	4770      	bx	lr

00006e0c <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    6e0c:	b084      	sub	sp, #16
    6e0e:	9001      	str	r0, [sp, #4]
    6e10:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    6e12:	9b00      	ldr	r3, [sp, #0]
    6e14:	f003 031f 	and.w	r3, r3, #31
    6e18:	2201      	movs	r2, #1
    6e1a:	fa02 f303 	lsl.w	r3, r2, r3
    6e1e:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    6e20:	9b00      	ldr	r3, [sp, #0]
    6e22:	2b1f      	cmp	r3, #31
    6e24:	d802      	bhi.n	6e2c <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	9a03      	ldr	r2, [sp, #12]
    6e2a:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    6e2c:	bf00      	nop
    6e2e:	b004      	add	sp, #16
    6e30:	4770      	bx	lr

00006e32 <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    6e32:	b084      	sub	sp, #16
    6e34:	9001      	str	r0, [sp, #4]
    6e36:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    6e38:	2300      	movs	r3, #0
    6e3a:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    6e3c:	9b00      	ldr	r3, [sp, #0]
    6e3e:	2b1f      	cmp	r3, #31
    6e40:	d80e      	bhi.n	6e60 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    6e42:	9b01      	ldr	r3, [sp, #4]
    6e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    6e46:	9b00      	ldr	r3, [sp, #0]
    6e48:	f003 031f 	and.w	r3, r3, #31
    6e4c:	2101      	movs	r1, #1
    6e4e:	fa01 f303 	lsl.w	r3, r1, r3
    6e52:	401a      	ands	r2, r3
    6e54:	9b00      	ldr	r3, [sp, #0]
    6e56:	f003 031f 	and.w	r3, r3, #31
    6e5a:	fa22 f303 	lsr.w	r3, r2, r3
    6e5e:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    6e60:	9b03      	ldr	r3, [sp, #12]
    6e62:	b2db      	uxtb	r3, r3
}
    6e64:	4618      	mov	r0, r3
    6e66:	b004      	add	sp, #16
    6e68:	4770      	bx	lr

00006e6a <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6e6a:	b082      	sub	sp, #8
    6e6c:	9001      	str	r0, [sp, #4]
    6e6e:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    6e70:	9b01      	ldr	r3, [sp, #4]
    6e72:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6e76:	4b15      	ldr	r3, [pc, #84]	; (6ecc <FlexCAN_SetFDTimeSegments+0x62>)
    6e78:	4013      	ands	r3, r2
    6e7a:	9a01      	ldr	r2, [sp, #4]
    6e7c:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    6e80:	9b01      	ldr	r3, [sp, #4]
    6e82:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6e86:	9b00      	ldr	r3, [sp, #0]
    6e88:	681b      	ldr	r3, [r3, #0]
    6e8a:	029b      	lsls	r3, r3, #10
    6e8c:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    6e90:	9b00      	ldr	r3, [sp, #0]
    6e92:	689b      	ldr	r3, [r3, #8]
    6e94:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    6e98:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    6e9a:	9b00      	ldr	r3, [sp, #0]
    6e9c:	685b      	ldr	r3, [r3, #4]
    6e9e:	015b      	lsls	r3, r3, #5
    6ea0:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    6ea2:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    6ea4:	9b00      	ldr	r3, [sp, #0]
    6ea6:	68db      	ldr	r3, [r3, #12]
    6ea8:	0518      	lsls	r0, r3, #20
    6eaa:	4b09      	ldr	r3, [pc, #36]	; (6ed0 <FlexCAN_SetFDTimeSegments+0x66>)
    6eac:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    6eae:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    6eb0:	9b00      	ldr	r3, [sp, #0]
    6eb2:	691b      	ldr	r3, [r3, #16]
    6eb4:	041b      	lsls	r3, r3, #16
    6eb6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    6eba:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    6ebc:	431a      	orrs	r2, r3
    6ebe:	9b01      	ldr	r3, [sp, #4]
    6ec0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    6ec4:	bf00      	nop
    6ec6:	b002      	add	sp, #8
    6ec8:	4770      	bx	lr
    6eca:	bf00      	nop
    6ecc:	c0088318 	.word	0xc0088318
    6ed0:	3ff00000 	.word	0x3ff00000

00006ed4 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6ed4:	b082      	sub	sp, #8
    6ed6:	9001      	str	r0, [sp, #4]
    6ed8:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    6eda:	9b01      	ldr	r3, [sp, #4]
    6edc:	685a      	ldr	r2, [r3, #4]
    6ede:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    6ee2:	4013      	ands	r3, r2
    6ee4:	9a01      	ldr	r2, [sp, #4]
    6ee6:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    6ee8:	9b01      	ldr	r3, [sp, #4]
    6eea:	685a      	ldr	r2, [r3, #4]
    6eec:	9b00      	ldr	r3, [sp, #0]
    6eee:	681b      	ldr	r3, [r3, #0]
    6ef0:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    6ef4:	9b00      	ldr	r3, [sp, #0]
    6ef6:	689b      	ldr	r3, [r3, #8]
    6ef8:	041b      	lsls	r3, r3, #16
    6efa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    6efe:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    6f00:	9b00      	ldr	r3, [sp, #0]
    6f02:	685b      	ldr	r3, [r3, #4]
    6f04:	04db      	lsls	r3, r3, #19
    6f06:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    6f0a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    6f0c:	9b00      	ldr	r3, [sp, #0]
    6f0e:	68db      	ldr	r3, [r3, #12]
    6f10:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    6f12:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    6f14:	9b00      	ldr	r3, [sp, #0]
    6f16:	691b      	ldr	r3, [r3, #16]
    6f18:	059b      	lsls	r3, r3, #22
    6f1a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    6f1e:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    6f20:	431a      	orrs	r2, r3
    6f22:	9b01      	ldr	r3, [sp, #4]
    6f24:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    6f26:	bf00      	nop
    6f28:	b002      	add	sp, #8
    6f2a:	4770      	bx	lr

00006f2c <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6f2c:	b082      	sub	sp, #8
    6f2e:	9001      	str	r0, [sp, #4]
    6f30:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    6f32:	9b01      	ldr	r3, [sp, #4]
    6f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6f36:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    6f3a:	9b01      	ldr	r3, [sp, #4]
    6f3c:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    6f3e:	9b01      	ldr	r3, [sp, #4]
    6f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    6f42:	9b00      	ldr	r3, [sp, #0]
    6f44:	681b      	ldr	r3, [r3, #0]
    6f46:	029b      	lsls	r3, r3, #10
    6f48:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    6f4a:	9b00      	ldr	r3, [sp, #0]
    6f4c:	689b      	ldr	r3, [r3, #8]
    6f4e:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    6f52:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    6f54:	9b00      	ldr	r3, [sp, #0]
    6f56:	685b      	ldr	r3, [r3, #4]
    6f58:	015b      	lsls	r3, r3, #5
    6f5a:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    6f5e:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    6f60:	9b00      	ldr	r3, [sp, #0]
    6f62:	68db      	ldr	r3, [r3, #12]
    6f64:	0558      	lsls	r0, r3, #21
    6f66:	4b07      	ldr	r3, [pc, #28]	; (6f84 <FlexCAN_SetExtendedTimeSegments+0x58>)
    6f68:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    6f6a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    6f6c:	9b00      	ldr	r3, [sp, #0]
    6f6e:	691b      	ldr	r3, [r3, #16]
    6f70:	041b      	lsls	r3, r3, #16
    6f72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    6f76:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    6f78:	431a      	orrs	r2, r3
    6f7a:	9b01      	ldr	r3, [sp, #4]
    6f7c:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    6f7e:	bf00      	nop
    6f80:	b002      	add	sp, #8
    6f82:	4770      	bx	lr
    6f84:	7fe00000 	.word	0x7fe00000

00006f88 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6f88:	b082      	sub	sp, #8
    6f8a:	9001      	str	r0, [sp, #4]
    6f8c:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    6f8e:	9b01      	ldr	r3, [sp, #4]
    6f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6f92:	0d5b      	lsrs	r3, r3, #21
    6f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
    6f98:	9b00      	ldr	r3, [sp, #0]
    6f9a:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    6f9c:	9b01      	ldr	r3, [sp, #4]
    6f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6fa0:	0a9b      	lsrs	r3, r3, #10
    6fa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    6fa6:	9b00      	ldr	r3, [sp, #0]
    6fa8:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    6faa:	9b01      	ldr	r3, [sp, #4]
    6fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6fae:	095b      	lsrs	r3, r3, #5
    6fb0:	f003 021f 	and.w	r2, r3, #31
    6fb4:	9b00      	ldr	r3, [sp, #0]
    6fb6:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    6fb8:	9b01      	ldr	r3, [sp, #4]
    6fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6fbc:	f003 021f 	and.w	r2, r3, #31
    6fc0:	9b00      	ldr	r3, [sp, #0]
    6fc2:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    6fc4:	9b01      	ldr	r3, [sp, #4]
    6fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6fc8:	0c1b      	lsrs	r3, r3, #16
    6fca:	f003 021f 	and.w	r2, r3, #31
    6fce:	9b00      	ldr	r3, [sp, #0]
    6fd0:	611a      	str	r2, [r3, #16]
}
    6fd2:	bf00      	nop
    6fd4:	b002      	add	sp, #8
    6fd6:	4770      	bx	lr

00006fd8 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6fd8:	b082      	sub	sp, #8
    6fda:	9001      	str	r0, [sp, #4]
    6fdc:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    6fde:	9b01      	ldr	r3, [sp, #4]
    6fe0:	685b      	ldr	r3, [r3, #4]
    6fe2:	0e1b      	lsrs	r3, r3, #24
    6fe4:	b2da      	uxtb	r2, r3
    6fe6:	9b00      	ldr	r3, [sp, #0]
    6fe8:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    6fea:	9b01      	ldr	r3, [sp, #4]
    6fec:	685b      	ldr	r3, [r3, #4]
    6fee:	f003 0207 	and.w	r2, r3, #7
    6ff2:	9b00      	ldr	r3, [sp, #0]
    6ff4:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    6ff6:	9b01      	ldr	r3, [sp, #4]
    6ff8:	685b      	ldr	r3, [r3, #4]
    6ffa:	0cdb      	lsrs	r3, r3, #19
    6ffc:	f003 0207 	and.w	r2, r3, #7
    7000:	9b00      	ldr	r3, [sp, #0]
    7002:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    7004:	9b01      	ldr	r3, [sp, #4]
    7006:	685b      	ldr	r3, [r3, #4]
    7008:	0c1b      	lsrs	r3, r3, #16
    700a:	f003 0207 	and.w	r2, r3, #7
    700e:	9b00      	ldr	r3, [sp, #0]
    7010:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    7012:	9b01      	ldr	r3, [sp, #4]
    7014:	685b      	ldr	r3, [r3, #4]
    7016:	0d9b      	lsrs	r3, r3, #22
    7018:	f003 0203 	and.w	r2, r3, #3
    701c:	9b00      	ldr	r3, [sp, #0]
    701e:	611a      	str	r2, [r3, #16]
}
    7020:	bf00      	nop
    7022:	b002      	add	sp, #8
    7024:	4770      	bx	lr

00007026 <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7026:	b082      	sub	sp, #8
    7028:	9001      	str	r0, [sp, #4]
    702a:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    702c:	9b01      	ldr	r3, [sp, #4]
    702e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7032:	0d1b      	lsrs	r3, r3, #20
    7034:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7038:	9b00      	ldr	r3, [sp, #0]
    703a:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    703c:	9b01      	ldr	r3, [sp, #4]
    703e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7042:	0a9b      	lsrs	r3, r3, #10
    7044:	f003 021f 	and.w	r2, r3, #31
    7048:	9b00      	ldr	r3, [sp, #0]
    704a:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7052:	095b      	lsrs	r3, r3, #5
    7054:	f003 0207 	and.w	r2, r3, #7
    7058:	9b00      	ldr	r3, [sp, #0]
    705a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7062:	f003 0207 	and.w	r2, r3, #7
    7066:	9b00      	ldr	r3, [sp, #0]
    7068:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    706a:	9b01      	ldr	r3, [sp, #4]
    706c:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7070:	0c1b      	lsrs	r3, r3, #16
    7072:	f003 0207 	and.w	r2, r3, #7
    7076:	9b00      	ldr	r3, [sp, #0]
    7078:	611a      	str	r2, [r3, #16]
}
    707a:	bf00      	nop
    707c:	b002      	add	sp, #8
    707e:	4770      	bx	lr

00007080 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    7080:	b082      	sub	sp, #8
    7082:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    7084:	9b01      	ldr	r3, [sp, #4]
    7086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7088:	0fdb      	lsrs	r3, r3, #31
    708a:	b2db      	uxtb	r3, r3
}
    708c:	4618      	mov	r0, r3
    708e:	b002      	add	sp, #8
    7090:	4770      	bx	lr

00007092 <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    7092:	b082      	sub	sp, #8
    7094:	9001      	str	r0, [sp, #4]
    7096:	460b      	mov	r3, r1
    7098:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    709c:	9b01      	ldr	r3, [sp, #4]
    709e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    70a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    70a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    70a8:	2a00      	cmp	r2, #0
    70aa:	d002      	beq.n	70b2 <FlexCAN_EnableExtCbt+0x20>
    70ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    70b0:	e000      	b.n	70b4 <FlexCAN_EnableExtCbt+0x22>
    70b2:	2200      	movs	r2, #0
    70b4:	431a      	orrs	r2, r3
    70b6:	9b01      	ldr	r3, [sp, #4]
    70b8:	651a      	str	r2, [r3, #80]	; 0x50
}
    70ba:	bf00      	nop
    70bc:	b002      	add	sp, #8
    70be:	4770      	bx	lr

000070c0 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    70c0:	b082      	sub	sp, #8
    70c2:	9001      	str	r0, [sp, #4]
    70c4:	460b      	mov	r3, r1
    70c6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    70ca:	9b01      	ldr	r3, [sp, #4]
    70cc:	681b      	ldr	r3, [r3, #0]
    70ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    70d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    70d6:	2a00      	cmp	r2, #0
    70d8:	d001      	beq.n	70de <FlexCAN_SetSelfReception+0x1e>
    70da:	2200      	movs	r2, #0
    70dc:	e001      	b.n	70e2 <FlexCAN_SetSelfReception+0x22>
    70de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    70e2:	431a      	orrs	r2, r3
    70e4:	9b01      	ldr	r3, [sp, #4]
    70e6:	601a      	str	r2, [r3, #0]
}
    70e8:	bf00      	nop
    70ea:	b002      	add	sp, #8
    70ec:	4770      	bx	lr

000070ee <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    70ee:	b082      	sub	sp, #8
    70f0:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    70f2:	9b01      	ldr	r3, [sp, #4]
    70f4:	681b      	ldr	r3, [r3, #0]
    70f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    70fa:	2b00      	cmp	r3, #0
    70fc:	bf14      	ite	ne
    70fe:	2301      	movne	r3, #1
    7100:	2300      	moveq	r3, #0
    7102:	b2db      	uxtb	r3, r3
}
    7104:	4618      	mov	r0, r3
    7106:	b002      	add	sp, #8
    7108:	4770      	bx	lr

0000710a <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    710a:	b082      	sub	sp, #8
    710c:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    710e:	9b01      	ldr	r3, [sp, #4]
    7110:	685b      	ldr	r3, [r3, #4]
    7112:	f003 0308 	and.w	r3, r3, #8
    7116:	2b00      	cmp	r3, #0
    7118:	bf14      	ite	ne
    711a:	2301      	movne	r3, #1
    711c:	2300      	moveq	r3, #0
    711e:	b2db      	uxtb	r3, r3
}
    7120:	4618      	mov	r0, r3
    7122:	b002      	add	sp, #8
    7124:	4770      	bx	lr

00007126 <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    7126:	b082      	sub	sp, #8
    7128:	4603      	mov	r3, r0
    712a:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    712e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7132:	3301      	adds	r3, #1
    7134:	00db      	lsls	r3, r3, #3
    7136:	089b      	lsrs	r3, r3, #2
    7138:	3305      	adds	r3, #5
}
    713a:	4618      	mov	r0, r3
    713c:	b002      	add	sp, #8
    713e:	4770      	bx	lr

00007140 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    7140:	b082      	sub	sp, #8
    7142:	9001      	str	r0, [sp, #4]
    7144:	460b      	mov	r3, r1
    7146:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    714a:	9b01      	ldr	r3, [sp, #4]
    714c:	685b      	ldr	r3, [r3, #4]
    714e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    7152:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7156:	2a00      	cmp	r2, #0
    7158:	d002      	beq.n	7160 <FlexCAN_SetClkSrc+0x20>
    715a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    715e:	e000      	b.n	7162 <FlexCAN_SetClkSrc+0x22>
    7160:	2200      	movs	r2, #0
    7162:	431a      	orrs	r2, r3
    7164:	9b01      	ldr	r3, [sp, #4]
    7166:	605a      	str	r2, [r3, #4]
}
    7168:	bf00      	nop
    716a:	b002      	add	sp, #8
    716c:	4770      	bx	lr

0000716e <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    716e:	b084      	sub	sp, #16
    7170:	9001      	str	r0, [sp, #4]
    7172:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    7174:	2300      	movs	r3, #0
    7176:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    717a:	9b00      	ldr	r3, [sp, #0]
    717c:	2b1f      	cmp	r3, #31
    717e:	d810      	bhi.n	71a2 <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    7180:	9b01      	ldr	r3, [sp, #4]
    7182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7184:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    7186:	9b01      	ldr	r3, [sp, #4]
    7188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    718a:	9b02      	ldr	r3, [sp, #8]
    718c:	401a      	ands	r2, r3
    718e:	9b00      	ldr	r3, [sp, #0]
    7190:	f003 031f 	and.w	r3, r3, #31
    7194:	fa22 f303 	lsr.w	r3, r2, r3
    7198:	b2db      	uxtb	r3, r3
    719a:	f003 0301 	and.w	r3, r3, #1
    719e:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    71a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    71a6:	4618      	mov	r0, r3
    71a8:	b004      	add	sp, #16
    71aa:	4770      	bx	lr

000071ac <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    71ac:	b082      	sub	sp, #8
    71ae:	9001      	str	r0, [sp, #4]
    71b0:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    71b2:	9b01      	ldr	r3, [sp, #4]
    71b4:	9a00      	ldr	r2, [sp, #0]
    71b6:	611a      	str	r2, [r3, #16]
}
    71b8:	bf00      	nop
    71ba:	b002      	add	sp, #8
    71bc:	4770      	bx	lr

000071be <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    71be:	b084      	sub	sp, #16
    71c0:	9003      	str	r0, [sp, #12]
    71c2:	9102      	str	r1, [sp, #8]
    71c4:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    71c6:	9b03      	ldr	r3, [sp, #12]
    71c8:	9a02      	ldr	r2, [sp, #8]
    71ca:	f502 7208 	add.w	r2, r2, #544	; 0x220
    71ce:	9901      	ldr	r1, [sp, #4]
    71d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    71d4:	bf00      	nop
    71d6:	b004      	add	sp, #16
    71d8:	4770      	bx	lr

000071da <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    71da:	b082      	sub	sp, #8
    71dc:	9001      	str	r0, [sp, #4]
    71de:	460b      	mov	r3, r1
    71e0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    71e4:	9b01      	ldr	r3, [sp, #4]
    71e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    71e8:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    71ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    71f0:	04db      	lsls	r3, r3, #19
    71f2:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    71f6:	431a      	orrs	r2, r3
    71f8:	9b01      	ldr	r3, [sp, #4]
    71fa:	635a      	str	r2, [r3, #52]	; 0x34
}
    71fc:	bf00      	nop
    71fe:	b002      	add	sp, #8
    7200:	4770      	bx	lr

00007202 <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    7202:	b082      	sub	sp, #8
    7204:	9001      	str	r0, [sp, #4]
    7206:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    7208:	9b00      	ldr	r3, [sp, #0]
    720a:	2b00      	cmp	r3, #0
    720c:	d106      	bne.n	721c <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    720e:	9b01      	ldr	r3, [sp, #4]
    7210:	681b      	ldr	r3, [r3, #0]
    7212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    7216:	9b01      	ldr	r3, [sp, #4]
    7218:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    721a:	e005      	b.n	7228 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    721c:	9b01      	ldr	r3, [sp, #4]
    721e:	681b      	ldr	r3, [r3, #0]
    7220:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	601a      	str	r2, [r3, #0]
}
    7228:	bf00      	nop
    722a:	b002      	add	sp, #8
    722c:	4770      	bx	lr

0000722e <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    722e:	b500      	push	{lr}
    7230:	b083      	sub	sp, #12
    7232:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    7234:	9801      	ldr	r0, [sp, #4]
    7236:	f002 ff85 	bl	a144 <FlexCAN_IsFDAvailable>
    723a:	4603      	mov	r3, r0
    723c:	2b00      	cmp	r3, #0
    723e:	d007      	beq.n	7250 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    7240:	9b01      	ldr	r3, [sp, #4]
    7242:	2200      	movs	r2, #0
    7244:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    7248:	9b01      	ldr	r3, [sp, #4]
    724a:	4a12      	ldr	r2, [pc, #72]	; (7294 <FlexCAN_SetRegDefaultVal+0x66>)
    724c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    7250:	9b01      	ldr	r3, [sp, #4]
    7252:	f04f 32ff 	mov.w	r2, #4294967295
    7256:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    7258:	9b01      	ldr	r3, [sp, #4]
    725a:	2200      	movs	r2, #0
    725c:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    725e:	9b01      	ldr	r3, [sp, #4]
    7260:	2200      	movs	r2, #0
    7262:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    7264:	9b01      	ldr	r3, [sp, #4]
    7266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    726a:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    726c:	9b01      	ldr	r3, [sp, #4]
    726e:	4a0a      	ldr	r2, [pc, #40]	; (7298 <FlexCAN_SetRegDefaultVal+0x6a>)
    7270:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    7272:	9b01      	ldr	r3, [sp, #4]
    7274:	2200      	movs	r2, #0
    7276:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    7278:	9b01      	ldr	r3, [sp, #4]
    727a:	2200      	movs	r2, #0
    727c:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    727e:	9b01      	ldr	r3, [sp, #4]
    7280:	2200      	movs	r2, #0
    7282:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    7284:	9b01      	ldr	r3, [sp, #4]
    7286:	4a05      	ldr	r2, [pc, #20]	; (729c <FlexCAN_SetRegDefaultVal+0x6e>)
    7288:	601a      	str	r2, [r3, #0]
}
    728a:	bf00      	nop
    728c:	b003      	add	sp, #12
    728e:	f85d fb04 	ldr.w	pc, [sp], #4
    7292:	bf00      	nop
    7294:	80004100 	.word	0x80004100
    7298:	0003b006 	.word	0x0003b006
    729c:	d890000f 	.word	0xd890000f

000072a0 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    72a0:	b500      	push	{lr}
    72a2:	b085      	sub	sp, #20
    72a4:	9001      	str	r0, [sp, #4]
    72a6:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    72a8:	2300      	movs	r3, #0
    72aa:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    72ac:	9b00      	ldr	r3, [sp, #0]
    72ae:	7a1b      	ldrb	r3, [r3, #8]
    72b0:	2b00      	cmp	r3, #0
    72b2:	d006      	beq.n	72c2 <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    72b4:	9b00      	ldr	r3, [sp, #0]
    72b6:	685b      	ldr	r3, [r3, #4]
    72b8:	4619      	mov	r1, r3
    72ba:	9801      	ldr	r0, [sp, #4]
    72bc:	f002 fefe 	bl	a0bc <FlexCAN_EnableRxFifo>
    72c0:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    72c2:	9b03      	ldr	r3, [sp, #12]
}
    72c4:	4618      	mov	r0, r3
    72c6:	b005      	add	sp, #20
    72c8:	f85d fb04 	ldr.w	pc, [sp], #4

000072cc <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    72cc:	b500      	push	{lr}
    72ce:	b085      	sub	sp, #20
    72d0:	9001      	str	r0, [sp, #4]
    72d2:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    72d4:	2300      	movs	r3, #0
    72d6:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    72d8:	9b00      	ldr	r3, [sp, #0]
    72da:	68db      	ldr	r3, [r3, #12]
    72dc:	2b02      	cmp	r3, #2
    72de:	d003      	beq.n	72e8 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    72e0:	2100      	movs	r1, #0
    72e2:	9801      	ldr	r0, [sp, #4]
    72e4:	f7ff feec 	bl	70c0 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    72e8:	9900      	ldr	r1, [sp, #0]
    72ea:	9801      	ldr	r0, [sp, #4]
    72ec:	f7ff ffd8 	bl	72a0 <FlexCAN_InitRxFifo>
    72f0:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    72f2:	9b03      	ldr	r3, [sp, #12]
    72f4:	2b00      	cmp	r3, #0
    72f6:	d006      	beq.n	7306 <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    72f8:	9801      	ldr	r0, [sp, #4]
    72fa:	f002 fd03 	bl	9d04 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    72fe:	9801      	ldr	r0, [sp, #4]
    7300:	f002 fdca 	bl	9e98 <FlexCAN_Disable>
    7304:	e00b      	b.n	731e <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    7306:	9b00      	ldr	r3, [sp, #0]
    7308:	3314      	adds	r3, #20
    730a:	4619      	mov	r1, r3
    730c:	9801      	ldr	r0, [sp, #4]
    730e:	f002 ff3b 	bl	a188 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    7312:	9b00      	ldr	r3, [sp, #0]
    7314:	681b      	ldr	r3, [r3, #0]
    7316:	4619      	mov	r1, r3
    7318:	9801      	ldr	r0, [sp, #4]
    731a:	f003 fab7 	bl	a88c <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    731e:	9b03      	ldr	r3, [sp, #12]
}
    7320:	4618      	mov	r0, r3
    7322:	b005      	add	sp, #20
    7324:	f85d fb04 	ldr.w	pc, [sp], #4

00007328 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7328:	b500      	push	{lr}
    732a:	b087      	sub	sp, #28
    732c:	4603      	mov	r3, r0
    732e:	9102      	str	r1, [sp, #8]
    7330:	9201      	str	r2, [sp, #4]
    7332:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7336:	2300      	movs	r3, #0
    7338:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    733a:	9802      	ldr	r0, [sp, #8]
    733c:	f7ff fd0c 	bl	6d58 <FlexCAN_IsEnabled>
    7340:	4603      	mov	r3, r0
    7342:	2b00      	cmp	r3, #0
    7344:	d00a      	beq.n	735c <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    7346:	9802      	ldr	r0, [sp, #8]
    7348:	f002 fcdc 	bl	9d04 <FlexCAN_EnterFreezeMode>
    734c:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    734e:	9b05      	ldr	r3, [sp, #20]
    7350:	2b00      	cmp	r3, #0
    7352:	d103      	bne.n	735c <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    7354:	9802      	ldr	r0, [sp, #8]
    7356:	f002 fd9f 	bl	9e98 <FlexCAN_Disable>
    735a:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    735c:	9b05      	ldr	r3, [sp, #20]
    735e:	2b00      	cmp	r3, #0
    7360:	d137      	bne.n	73d2 <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    7362:	9b01      	ldr	r3, [sp, #4]
    7364:	7e5b      	ldrb	r3, [r3, #25]
    7366:	4619      	mov	r1, r3
    7368:	9802      	ldr	r0, [sp, #8]
    736a:	f7ff fee9 	bl	7140 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    736e:	9b02      	ldr	r3, [sp, #8]
    7370:	681b      	ldr	r3, [r3, #0]
    7372:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7376:	9b02      	ldr	r3, [sp, #8]
    7378:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    737a:	9802      	ldr	r0, [sp, #8]
    737c:	f002 fe28 	bl	9fd0 <FlexCAN_Init>
    7380:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    7382:	9b05      	ldr	r3, [sp, #20]
    7384:	2b00      	cmp	r3, #0
    7386:	d006      	beq.n	7396 <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    7388:	9802      	ldr	r0, [sp, #8]
    738a:	f002 fcbb 	bl	9d04 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    738e:	9802      	ldr	r0, [sp, #8]
    7390:	f002 fd82 	bl	9e98 <FlexCAN_Disable>
    7394:	e01d      	b.n	73d2 <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    7396:	9802      	ldr	r0, [sp, #8]
    7398:	f002 fed4 	bl	a144 <FlexCAN_IsFDAvailable>
    739c:	4603      	mov	r3, r0
    739e:	2b00      	cmp	r3, #0
    73a0:	d007      	beq.n	73b2 <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    73a2:	9b01      	ldr	r3, [sp, #4]
    73a4:	7e19      	ldrb	r1, [r3, #24]
    73a6:	9b01      	ldr	r3, [sp, #4]
    73a8:	7edb      	ldrb	r3, [r3, #27]
    73aa:	461a      	mov	r2, r3
    73ac:	9802      	ldr	r0, [sp, #8]
    73ae:	f7ff fcdd 	bl	6d6c <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    73b2:	9b01      	ldr	r3, [sp, #4]
    73b4:	691b      	ldr	r3, [r3, #16]
    73b6:	4619      	mov	r1, r3
    73b8:	9802      	ldr	r0, [sp, #8]
    73ba:	f003 fdeb 	bl	af94 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    73be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    73c2:	4618      	mov	r0, r3
    73c4:	f003 fe56 	bl	b074 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    73c8:	9901      	ldr	r1, [sp, #4]
    73ca:	9802      	ldr	r0, [sp, #8]
    73cc:	f7ff ff7e 	bl	72cc <FlexCAN_InitCtroll>
    73d0:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    73d2:	9b05      	ldr	r3, [sp, #20]
}
    73d4:	4618      	mov	r0, r3
    73d6:	b007      	add	sp, #28
    73d8:	f85d fb04 	ldr.w	pc, [sp], #4

000073dc <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    73dc:	b500      	push	{lr}
    73de:	b083      	sub	sp, #12
    73e0:	9001      	str	r0, [sp, #4]
    73e2:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    73e4:	9b00      	ldr	r3, [sp, #0]
    73e6:	7e1b      	ldrb	r3, [r3, #24]
    73e8:	4619      	mov	r1, r3
    73ea:	9801      	ldr	r0, [sp, #4]
    73ec:	f7ff fe51 	bl	7092 <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    73f0:	9b00      	ldr	r3, [sp, #0]
    73f2:	7e1b      	ldrb	r3, [r3, #24]
    73f4:	2b00      	cmp	r3, #0
    73f6:	d00c      	beq.n	7412 <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    73f8:	9b00      	ldr	r3, [sp, #0]
    73fa:	331c      	adds	r3, #28
    73fc:	4619      	mov	r1, r3
    73fe:	9801      	ldr	r0, [sp, #4]
    7400:	f7ff fd94 	bl	6f2c <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    7404:	9b00      	ldr	r3, [sp, #0]
    7406:	3330      	adds	r3, #48	; 0x30
    7408:	4619      	mov	r1, r3
    740a:	9801      	ldr	r0, [sp, #4]
    740c:	f7ff fd2d 	bl	6e6a <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    7410:	e005      	b.n	741e <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    7412:	9b00      	ldr	r3, [sp, #0]
    7414:	331c      	adds	r3, #28
    7416:	4619      	mov	r1, r3
    7418:	9801      	ldr	r0, [sp, #4]
    741a:	f7ff fd5b 	bl	6ed4 <FlexCAN_SetTimeSegments>
}
    741e:	bf00      	nop
    7420:	b003      	add	sp, #12
    7422:	f85d fb04 	ldr.w	pc, [sp], #4

00007426 <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    7426:	b500      	push	{lr}
    7428:	b08d      	sub	sp, #52	; 0x34
    742a:	4603      	mov	r3, r0
    742c:	9102      	str	r1, [sp, #8]
    742e:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7432:	2300      	movs	r3, #0
    7434:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    7436:	f89d 300f 	ldrb.w	r3, [sp, #15]
    743a:	4a46      	ldr	r2, [pc, #280]	; (7554 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    743c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7440:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    7442:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7446:	4a44      	ldr	r2, [pc, #272]	; (7558 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    7448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    744c:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    744e:	2300      	movs	r3, #0
    7450:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    7452:	2300      	movs	r3, #0
    7454:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7456:	9b02      	ldr	r3, [sp, #8]
    7458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    745c:	fb02 f303 	mul.w	r3, r2, r3
    7460:	2100      	movs	r1, #0
    7462:	4618      	mov	r0, r3
    7464:	f7f9 fe90 	bl	1188 <OsIf_MicrosToTicks>
    7468:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    746a:	2300      	movs	r3, #0
    746c:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    746e:	2000      	movs	r0, #0
    7470:	f7f9 fe3e 	bl	10f0 <OsIf_GetCounter>
    7474:	4603      	mov	r3, r0
    7476:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7478:	e02a      	b.n	74d0 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    747a:	9b08      	ldr	r3, [sp, #32]
    747c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7480:	2b01      	cmp	r3, #1
    7482:	d115      	bne.n	74b0 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    7484:	2307      	movs	r3, #7
    7486:	9309      	str	r3, [sp, #36]	; 0x24
    7488:	e00f      	b.n	74aa <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    748a:	9909      	ldr	r1, [sp, #36]	; 0x24
    748c:	9807      	ldr	r0, [sp, #28]
    748e:	f7ff fcd0 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    7492:	4603      	mov	r3, r0
    7494:	2b00      	cmp	r3, #0
    7496:	d005      	beq.n	74a4 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    7498:	f89d 300f 	ldrb.w	r3, [sp, #15]
    749c:	9909      	ldr	r1, [sp, #36]	; 0x24
    749e:	4618      	mov	r0, r3
    74a0:	f000 fb06 	bl	7ab0 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    74a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74a6:	3b01      	subs	r3, #1
    74a8:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    74aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74ac:	2b04      	cmp	r3, #4
    74ae:	d8ec      	bhi.n	748a <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    74b0:	ab05      	add	r3, sp, #20
    74b2:	2100      	movs	r1, #0
    74b4:	4618      	mov	r0, r3
    74b6:	f7f9 fe34 	bl	1122 <OsIf_GetElapsed>
    74ba:	4602      	mov	r2, r0
    74bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    74be:	4413      	add	r3, r2
    74c0:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    74c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    74c4:	9b06      	ldr	r3, [sp, #24]
    74c6:	429a      	cmp	r2, r3
    74c8:	d302      	bcc.n	74d0 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    74ca:	2303      	movs	r3, #3
    74cc:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    74ce:	e003      	b.n	74d8 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    74d0:	9b08      	ldr	r3, [sp, #32]
    74d2:	685b      	ldr	r3, [r3, #4]
    74d4:	2b01      	cmp	r3, #1
    74d6:	d0d0      	beq.n	747a <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    74d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74da:	2b03      	cmp	r3, #3
    74dc:	d125      	bne.n	752a <FlexCAN_ProccessLegacyRxFIFO+0x104>
    74de:	9b08      	ldr	r3, [sp, #32]
    74e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    74e4:	2b01      	cmp	r3, #1
    74e6:	d020      	beq.n	752a <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    74e8:	9b08      	ldr	r3, [sp, #32]
    74ea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    74ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
    74f2:	9300      	str	r3, [sp, #0]
    74f4:	2300      	movs	r3, #0
    74f6:	2205      	movs	r2, #5
    74f8:	9807      	ldr	r0, [sp, #28]
    74fa:	f002 feef 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    74fe:	9b08      	ldr	r3, [sp, #32]
    7500:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7504:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7508:	9300      	str	r3, [sp, #0]
    750a:	2300      	movs	r3, #0
    750c:	2206      	movs	r2, #6
    750e:	9807      	ldr	r0, [sp, #28]
    7510:	f002 fee4 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    7514:	9b08      	ldr	r3, [sp, #32]
    7516:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    751a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    751e:	9300      	str	r3, [sp, #0]
    7520:	2300      	movs	r3, #0
    7522:	2207      	movs	r2, #7
    7524:	9807      	ldr	r0, [sp, #28]
    7526:	f002 fed9 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    752a:	9b08      	ldr	r3, [sp, #32]
    752c:	685b      	ldr	r3, [r3, #4]
    752e:	2b00      	cmp	r3, #0
    7530:	d005      	beq.n	753e <FlexCAN_ProccessLegacyRxFIFO+0x118>
    7532:	2b01      	cmp	r3, #1
    7534:	d106      	bne.n	7544 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    7536:	9b08      	ldr	r3, [sp, #32]
    7538:	2200      	movs	r2, #0
    753a:	605a      	str	r2, [r3, #4]
                break;
    753c:	e005      	b.n	754a <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    753e:	2300      	movs	r3, #0
    7540:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7542:	e002      	b.n	754a <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    7544:	2301      	movs	r3, #1
    7546:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7548:	bf00      	nop
        }

    return eResult;
    754a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    754c:	4618      	mov	r0, r3
    754e:	b00d      	add	sp, #52	; 0x34
    7550:	f85d fb04 	ldr.w	pc, [sp], #4
    7554:	1fff8f98 	.word	0x1fff8f98
    7558:	0000c9cc 	.word	0x0000c9cc

0000755c <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    755c:	b084      	sub	sp, #16
    755e:	9200      	str	r2, [sp, #0]
    7560:	461a      	mov	r2, r3
    7562:	4603      	mov	r3, r0
    7564:	f88d 3007 	strb.w	r3, [sp, #7]
    7568:	460b      	mov	r3, r1
    756a:	f88d 3006 	strb.w	r3, [sp, #6]
    756e:	4613      	mov	r3, r2
    7570:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7574:	2300      	movs	r3, #0
    7576:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7578:	f89d 3007 	ldrb.w	r3, [sp, #7]
    757c:	4a15      	ldr	r2, [pc, #84]	; (75d4 <FlexCAN_StartRxMessageBufferData+0x78>)
    757e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7582:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    7584:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7588:	9a02      	ldr	r2, [sp, #8]
    758a:	011b      	lsls	r3, r3, #4
    758c:	4413      	add	r3, r2
    758e:	3304      	adds	r3, #4
    7590:	681b      	ldr	r3, [r3, #0]
    7592:	2b00      	cmp	r3, #0
    7594:	d002      	beq.n	759c <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    7596:	2302      	movs	r3, #2
    7598:	9303      	str	r3, [sp, #12]
    759a:	e017      	b.n	75cc <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    759c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75a0:	9a02      	ldr	r2, [sp, #8]
    75a2:	011b      	lsls	r3, r3, #4
    75a4:	4413      	add	r3, r2
    75a6:	3304      	adds	r3, #4
    75a8:	2201      	movs	r2, #1
    75aa:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    75ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75b0:	9a02      	ldr	r2, [sp, #8]
    75b2:	011b      	lsls	r3, r3, #4
    75b4:	4413      	add	r3, r2
    75b6:	9a00      	ldr	r2, [sp, #0]
    75b8:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    75ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75be:	9a02      	ldr	r2, [sp, #8]
    75c0:	011b      	lsls	r3, r3, #4
    75c2:	4413      	add	r3, r2
    75c4:	3308      	adds	r3, #8
    75c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    75ca:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    75cc:	9b03      	ldr	r3, [sp, #12]
}
    75ce:	4618      	mov	r0, r3
    75d0:	b004      	add	sp, #16
    75d2:	4770      	bx	lr
    75d4:	1fff8f98 	.word	0x1fff8f98

000075d8 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    75d8:	b500      	push	{lr}
    75da:	b08f      	sub	sp, #60	; 0x3c
    75dc:	9204      	str	r2, [sp, #16]
    75de:	9303      	str	r3, [sp, #12]
    75e0:	4603      	mov	r3, r0
    75e2:	f88d 3017 	strb.w	r3, [sp, #23]
    75e6:	460b      	mov	r3, r1
    75e8:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    75ec:	2300      	movs	r3, #0
    75ee:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    75f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    75f4:	4a38      	ldr	r2, [pc, #224]	; (76d8 <FlexCAN_StartSendData+0x100>)
    75f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75fa:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    75fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7600:	4a36      	ldr	r2, [pc, #216]	; (76dc <FlexCAN_StartSendData+0x104>)
    7602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7606:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    7608:	2300      	movs	r3, #0
    760a:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    760c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7612:	011b      	lsls	r3, r3, #4
    7614:	4413      	add	r3, r2
    7616:	3304      	adds	r3, #4
    7618:	681b      	ldr	r3, [r3, #0]
    761a:	2b00      	cmp	r3, #0
    761c:	d002      	beq.n	7624 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    761e:	2302      	movs	r3, #2
    7620:	930d      	str	r3, [sp, #52]	; 0x34
    7622:	e053      	b.n	76cc <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7624:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7628:	4619      	mov	r1, r3
    762a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    762c:	f7ff fbee 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    7630:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7636:	011b      	lsls	r3, r3, #4
    7638:	4413      	add	r3, r2
    763a:	3304      	adds	r3, #4
    763c:	2202      	movs	r2, #2
    763e:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    7640:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7646:	011b      	lsls	r3, r3, #4
    7648:	4413      	add	r3, r2
    764a:	330c      	adds	r3, #12
    764c:	2200      	movs	r2, #0
    764e:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    7650:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7654:	9a04      	ldr	r2, [sp, #16]
    7656:	7b11      	ldrb	r1, [r2, #12]
    7658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    765a:	011b      	lsls	r3, r3, #4
    765c:	4413      	add	r3, r2
    765e:	3308      	adds	r3, #8
    7660:	460a      	mov	r2, r1
    7662:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    7664:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7668:	9a04      	ldr	r2, [sp, #16]
    766a:	7ad1      	ldrb	r1, [r2, #11]
    766c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    766e:	011b      	lsls	r3, r3, #4
    7670:	4413      	add	r3, r2
    7672:	3309      	adds	r3, #9
    7674:	460a      	mov	r2, r1
    7676:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    7678:	9b04      	ldr	r3, [sp, #16]
    767a:	685b      	ldr	r3, [r3, #4]
    767c:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    767e:	9b04      	ldr	r3, [sp, #16]
    7680:	681b      	ldr	r3, [r3, #0]
    7682:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    7684:	9b04      	ldr	r3, [sp, #16]
    7686:	7a1b      	ldrb	r3, [r3, #8]
    7688:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    768c:	9b04      	ldr	r3, [sp, #16]
    768e:	7a5b      	ldrb	r3, [r3, #9]
    7690:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    7694:	9b04      	ldr	r3, [sp, #16]
    7696:	7a9b      	ldrb	r3, [r3, #10]
    7698:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    769c:	9b04      	ldr	r3, [sp, #16]
    769e:	7adb      	ldrb	r3, [r3, #11]
    76a0:	2b00      	cmp	r3, #0
    76a2:	d002      	beq.n	76aa <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    76a4:	231c      	movs	r3, #28
    76a6:	9306      	str	r3, [sp, #24]
    76a8:	e001      	b.n	76ae <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    76aa:	230c      	movs	r3, #12
    76ac:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    76ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
    76b2:	4619      	mov	r1, r3
    76b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    76b6:	f002 fa89 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    76ba:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    76bc:	a906      	add	r1, sp, #24
    76be:	2300      	movs	r3, #0
    76c0:	9300      	str	r3, [sp, #0]
    76c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    76c4:	9a03      	ldr	r2, [sp, #12]
    76c6:	980a      	ldr	r0, [sp, #40]	; 0x28
    76c8:	f002 ffd2 	bl	a670 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    76cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    76ce:	4618      	mov	r0, r3
    76d0:	b00f      	add	sp, #60	; 0x3c
    76d2:	f85d fb04 	ldr.w	pc, [sp], #4
    76d6:	bf00      	nop
    76d8:	1fff8f98 	.word	0x1fff8f98
    76dc:	0000c9cc 	.word	0x0000c9cc

000076e0 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    76e0:	b500      	push	{lr}
    76e2:	b089      	sub	sp, #36	; 0x24
    76e4:	4603      	mov	r3, r0
    76e6:	9102      	str	r1, [sp, #8]
    76e8:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    76ec:	2300      	movs	r3, #0
    76ee:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    76f0:	2300      	movs	r3, #0
    76f2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    76f4:	2300      	movs	r3, #0
    76f6:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    76f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76fc:	4a26      	ldr	r2, [pc, #152]	; (7798 <FlexCAN_StartRxMessageFifoData+0xb8>)
    76fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7702:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    7704:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7708:	4a24      	ldr	r2, [pc, #144]	; (779c <FlexCAN_StartRxMessageFifoData+0xbc>)
    770a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    770e:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    7710:	9b05      	ldr	r3, [sp, #20]
    7712:	685b      	ldr	r3, [r3, #4]
    7714:	2b01      	cmp	r3, #1
    7716:	d102      	bne.n	771e <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    7718:	2302      	movs	r3, #2
    771a:	9307      	str	r3, [sp, #28]
    771c:	e036      	b.n	778c <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    771e:	9b05      	ldr	r3, [sp, #20]
    7720:	2201      	movs	r2, #1
    7722:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    7724:	9b05      	ldr	r3, [sp, #20]
    7726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    772a:	2b01      	cmp	r3, #1
    772c:	d102      	bne.n	7734 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    772e:	9b05      	ldr	r3, [sp, #20]
    7730:	2201      	movs	r2, #1
    7732:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    7734:	9b05      	ldr	r3, [sp, #20]
    7736:	9a02      	ldr	r2, [sp, #8]
    7738:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    773a:	9b05      	ldr	r3, [sp, #20]
    773c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7740:	2b00      	cmp	r3, #0
    7742:	d123      	bne.n	778c <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    7744:	9b05      	ldr	r3, [sp, #20]
    7746:	2200      	movs	r2, #0
    7748:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    774a:	9b05      	ldr	r3, [sp, #20]
    774c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7750:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7754:	9300      	str	r3, [sp, #0]
    7756:	2301      	movs	r3, #1
    7758:	2206      	movs	r2, #6
    775a:	9806      	ldr	r0, [sp, #24]
    775c:	f002 fdbe 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    7760:	9b05      	ldr	r3, [sp, #20]
    7762:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7766:	f89d 100f 	ldrb.w	r1, [sp, #15]
    776a:	9300      	str	r3, [sp, #0]
    776c:	2301      	movs	r3, #1
    776e:	2207      	movs	r2, #7
    7770:	9806      	ldr	r0, [sp, #24]
    7772:	f002 fdb3 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    7776:	9b05      	ldr	r3, [sp, #20]
    7778:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    777c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7780:	9300      	str	r3, [sp, #0]
    7782:	2301      	movs	r3, #1
    7784:	2205      	movs	r2, #5
    7786:	9806      	ldr	r0, [sp, #24]
    7788:	f002 fda8 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    778c:	9b07      	ldr	r3, [sp, #28]
}
    778e:	4618      	mov	r0, r3
    7790:	b009      	add	sp, #36	; 0x24
    7792:	f85d fb04 	ldr.w	pc, [sp], #4
    7796:	bf00      	nop
    7798:	0000c9cc 	.word	0x0000c9cc
    779c:	1fff8f98 	.word	0x1fff8f98

000077a0 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    77a0:	b510      	push	{r4, lr}
    77a2:	b09e      	sub	sp, #120	; 0x78
    77a4:	4603      	mov	r3, r0
    77a6:	9102      	str	r1, [sp, #8]
    77a8:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    77ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77b0:	4a70      	ldr	r2, [pc, #448]	; (7974 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    77b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77b6:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    77b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77bc:	4a6e      	ldr	r2, [pc, #440]	; (7978 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    77be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c2:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    77c4:	2300      	movs	r3, #0
    77c6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    77ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    77cc:	9b02      	ldr	r3, [sp, #8]
    77ce:	011b      	lsls	r3, r3, #4
    77d0:	4413      	add	r3, r2
    77d2:	681b      	ldr	r3, [r3, #0]
    77d4:	2b00      	cmp	r3, #0
    77d6:	d105      	bne.n	77e4 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    77d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    77da:	9b02      	ldr	r3, [sp, #8]
    77dc:	011b      	lsls	r3, r3, #4
    77de:	4413      	add	r3, r2
    77e0:	aa05      	add	r2, sp, #20
    77e2:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    77e4:	2300      	movs	r3, #0
    77e6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    77ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    77ec:	9b02      	ldr	r3, [sp, #8]
    77ee:	011b      	lsls	r3, r3, #4
    77f0:	4413      	add	r3, r2
    77f2:	3308      	adds	r3, #8
    77f4:	781b      	ldrb	r3, [r3, #0]
    77f6:	2b00      	cmp	r3, #0
    77f8:	d008      	beq.n	780c <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    77fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    77fc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    7800:	2b00      	cmp	r3, #0
    7802:	d003      	beq.n	780c <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    7804:	2301      	movs	r3, #1
    7806:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    780a:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    780c:	9902      	ldr	r1, [sp, #8]
    780e:	981c      	ldr	r0, [sp, #112]	; 0x70
    7810:	f002 fd55 	bl	a2be <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    7814:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7816:	9b02      	ldr	r3, [sp, #8]
    7818:	011b      	lsls	r3, r3, #4
    781a:	4413      	add	r3, r2
    781c:	681b      	ldr	r3, [r3, #0]
    781e:	461a      	mov	r2, r3
    7820:	9902      	ldr	r1, [sp, #8]
    7822:	981c      	ldr	r0, [sp, #112]	; 0x70
    7824:	f002 fe7a 	bl	a51c <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7828:	9902      	ldr	r1, [sp, #8]
    782a:	981c      	ldr	r0, [sp, #112]	; 0x70
    782c:	f7ff faee 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    7830:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7832:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    7836:	2b00      	cmp	r3, #0
    7838:	d032      	beq.n	78a0 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    783a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    783c:	9b02      	ldr	r3, [sp, #8]
    783e:	011b      	lsls	r3, r3, #4
    7840:	4413      	add	r3, r2
    7842:	681b      	ldr	r3, [r3, #0]
    7844:	681b      	ldr	r3, [r3, #0]
    7846:	0e1b      	lsrs	r3, r3, #24
    7848:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    784c:	2b02      	cmp	r3, #2
    784e:	d027      	beq.n	78a0 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    7850:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7852:	9b02      	ldr	r3, [sp, #8]
    7854:	011b      	lsls	r3, r3, #4
    7856:	4413      	add	r3, r2
    7858:	681b      	ldr	r3, [r3, #0]
    785a:	681b      	ldr	r3, [r3, #0]
    785c:	0e1b      	lsrs	r3, r3, #24
    785e:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    7862:	2b04      	cmp	r3, #4
    7864:	d01c      	beq.n	78a0 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    7866:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7868:	9b02      	ldr	r3, [sp, #8]
    786a:	011b      	lsls	r3, r3, #4
    786c:	4413      	add	r3, r2
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	681b      	ldr	r3, [r3, #0]
    7872:	0e1b      	lsrs	r3, r3, #24
    7874:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    7878:	2b06      	cmp	r3, #6
    787a:	d011      	beq.n	78a0 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    787c:	9902      	ldr	r1, [sp, #8]
    787e:	981c      	ldr	r0, [sp, #112]	; 0x70
    7880:	f002 f9a4 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    7884:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    7886:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7888:	681b      	ldr	r3, [r3, #0]
    788a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    788e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7890:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    7892:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7894:	681b      	ldr	r3, [r3, #0]
    7896:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    789a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    789c:	601a      	str	r2, [r3, #0]
    {
    789e:	e002      	b.n	78a6 <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    78a0:	981c      	ldr	r0, [sp, #112]	; 0x70
    78a2:	f7ff faac 	bl	6dfe <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    78a6:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    78aa:	2b00      	cmp	r3, #0
    78ac:	d000      	beq.n	78b0 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    78ae:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    78b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    78b2:	9b02      	ldr	r3, [sp, #8]
    78b4:	011b      	lsls	r3, r3, #4
    78b6:	4413      	add	r3, r2
    78b8:	3304      	adds	r3, #4
    78ba:	2200      	movs	r2, #0
    78bc:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    78be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    78c0:	9b02      	ldr	r3, [sp, #8]
    78c2:	011b      	lsls	r3, r3, #4
    78c4:	4413      	add	r3, r2
    78c6:	3308      	adds	r3, #8
    78c8:	781b      	ldrb	r3, [r3, #0]
    78ca:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    78ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    78d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    78d4:	2b00      	cmp	r3, #0
    78d6:	d008      	beq.n	78ea <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    78d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    78da:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    78de:	f89d 000f 	ldrb.w	r0, [sp, #15]
    78e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    78e4:	9a02      	ldr	r2, [sp, #8]
    78e6:	2100      	movs	r1, #0
    78e8:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    78ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    78ec:	9b02      	ldr	r3, [sp, #8]
    78ee:	011b      	lsls	r3, r3, #4
    78f0:	4413      	add	r3, r2
    78f2:	3304      	adds	r3, #4
    78f4:	681b      	ldr	r3, [r3, #0]
    78f6:	2b00      	cmp	r3, #0
    78f8:	d11e      	bne.n	7938 <FlexCAN_IRQHandlerRxMB+0x198>
    78fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    78fc:	9b02      	ldr	r3, [sp, #8]
    78fe:	011b      	lsls	r3, r3, #4
    7900:	4413      	add	r3, r2
    7902:	3308      	adds	r3, #8
    7904:	781b      	ldrb	r3, [r3, #0]
    7906:	f083 0301 	eor.w	r3, r3, #1
    790a:	b2db      	uxtb	r3, r3
    790c:	2b00      	cmp	r3, #0
    790e:	d013      	beq.n	7938 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    7910:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7912:	9b02      	ldr	r3, [sp, #8]
    7914:	011b      	lsls	r3, r3, #4
    7916:	4413      	add	r3, r2
    7918:	3308      	adds	r3, #8
    791a:	2201      	movs	r2, #1
    791c:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    791e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7920:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7924:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7928:	9300      	str	r3, [sp, #0]
    792a:	2300      	movs	r3, #0
    792c:	9a02      	ldr	r2, [sp, #8]
    792e:	981c      	ldr	r0, [sp, #112]	; 0x70
    7930:	f002 fcd4 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
    7934:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    7936:	e019      	b.n	796c <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    7938:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    793c:	f083 0301 	eor.w	r3, r3, #1
    7940:	b2db      	uxtb	r3, r3
    7942:	2b00      	cmp	r3, #0
    7944:	d012      	beq.n	796c <FlexCAN_IRQHandlerRxMB+0x1cc>
    7946:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7948:	9b02      	ldr	r3, [sp, #8]
    794a:	011b      	lsls	r3, r3, #4
    794c:	4413      	add	r3, r2
    794e:	3308      	adds	r3, #8
    7950:	781b      	ldrb	r3, [r3, #0]
    7952:	2b00      	cmp	r3, #0
    7954:	d00a      	beq.n	796c <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    7956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7958:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    795c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7960:	9300      	str	r3, [sp, #0]
    7962:	2300      	movs	r3, #0
    7964:	9a02      	ldr	r2, [sp, #8]
    7966:	981c      	ldr	r0, [sp, #112]	; 0x70
    7968:	f002 fcb8 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
}
    796c:	bf00      	nop
    796e:	b01e      	add	sp, #120	; 0x78
    7970:	bd10      	pop	{r4, pc}
    7972:	bf00      	nop
    7974:	0000c9cc 	.word	0x0000c9cc
    7978:	1fff8f98 	.word	0x1fff8f98

0000797c <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    797c:	b510      	push	{r4, lr}
    797e:	b09a      	sub	sp, #104	; 0x68
    7980:	4603      	mov	r3, r0
    7982:	9102      	str	r1, [sp, #8]
    7984:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    7988:	f89d 300f 	ldrb.w	r3, [sp, #15]
    798c:	4a46      	ldr	r2, [pc, #280]	; (7aa8 <FlexCAN_IRQHandlerTxMB+0x12c>)
    798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7992:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    7994:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7998:	4a44      	ldr	r2, [pc, #272]	; (7aac <FlexCAN_IRQHandlerTxMB+0x130>)
    799a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    799e:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    79a0:	2300      	movs	r3, #0
    79a2:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    79a4:	2300      	movs	r3, #0
    79a6:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    79a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    79aa:	9b02      	ldr	r3, [sp, #8]
    79ac:	011b      	lsls	r3, r3, #4
    79ae:	4413      	add	r3, r2
    79b0:	3309      	adds	r3, #9
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	2b00      	cmp	r3, #0
    79b6:	d01e      	beq.n	79f6 <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    79b8:	9902      	ldr	r1, [sp, #8]
    79ba:	9819      	ldr	r0, [sp, #100]	; 0x64
    79bc:	f002 fc7f 	bl	a2be <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    79c0:	ab04      	add	r3, sp, #16
    79c2:	461a      	mov	r2, r3
    79c4:	9902      	ldr	r1, [sp, #8]
    79c6:	9819      	ldr	r0, [sp, #100]	; 0x64
    79c8:	f002 fda8 	bl	a51c <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    79cc:	9819      	ldr	r0, [sp, #100]	; 0x64
    79ce:	f7ff fa16 	bl	6dfe <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    79d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    79d4:	9918      	ldr	r1, [sp, #96]	; 0x60
    79d6:	9b02      	ldr	r3, [sp, #8]
    79d8:	011b      	lsls	r3, r3, #4
    79da:	440b      	add	r3, r1
    79dc:	330c      	adds	r3, #12
    79de:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    79e0:	9b04      	ldr	r3, [sp, #16]
    79e2:	0e1b      	lsrs	r3, r3, #24
    79e4:	f003 030f 	and.w	r3, r3, #15
    79e8:	2b04      	cmp	r3, #4
    79ea:	d116      	bne.n	7a1a <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    79ec:	9902      	ldr	r1, [sp, #8]
    79ee:	9819      	ldr	r0, [sp, #100]	; 0x64
    79f0:	f7ff fa0c 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
    79f4:	e011      	b.n	7a1a <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    79f6:	9902      	ldr	r1, [sp, #8]
    79f8:	9819      	ldr	r0, [sp, #100]	; 0x64
    79fa:	f002 fd7b 	bl	a4f4 <FlexCAN_GetMsgBuffTimestamp>
    79fe:	4601      	mov	r1, r0
    7a00:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7a02:	9b02      	ldr	r3, [sp, #8]
    7a04:	011b      	lsls	r3, r3, #4
    7a06:	4413      	add	r3, r2
    7a08:	330c      	adds	r3, #12
    7a0a:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    7a0c:	9819      	ldr	r0, [sp, #100]	; 0x64
    7a0e:	f7ff f9f6 	bl	6dfe <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    7a12:	9902      	ldr	r1, [sp, #8]
    7a14:	9819      	ldr	r0, [sp, #100]	; 0x64
    7a16:	f7ff f9f9 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    7a1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7a1c:	9b02      	ldr	r3, [sp, #8]
    7a1e:	011b      	lsls	r3, r3, #4
    7a20:	4413      	add	r3, r2
    7a22:	3304      	adds	r3, #4
    7a24:	2200      	movs	r2, #0
    7a26:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    7a28:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7a2e:	2b00      	cmp	r3, #0
    7a30:	d008      	beq.n	7a44 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    7a32:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7a34:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7a38:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7a3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7a3e:	9a02      	ldr	r2, [sp, #8]
    7a40:	2104      	movs	r1, #4
    7a42:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    7a44:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7a46:	9b02      	ldr	r3, [sp, #8]
    7a48:	011b      	lsls	r3, r3, #4
    7a4a:	4413      	add	r3, r2
    7a4c:	3304      	adds	r3, #4
    7a4e:	681b      	ldr	r3, [r3, #0]
    7a50:	2b00      	cmp	r3, #0
    7a52:	d112      	bne.n	7a7a <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    7a54:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7a56:	9b02      	ldr	r3, [sp, #8]
    7a58:	011b      	lsls	r3, r3, #4
    7a5a:	4413      	add	r3, r2
    7a5c:	3308      	adds	r3, #8
    7a5e:	2201      	movs	r2, #1
    7a60:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    7a62:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7a64:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7a68:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7a6c:	9300      	str	r3, [sp, #0]
    7a6e:	2300      	movs	r3, #0
    7a70:	9a02      	ldr	r2, [sp, #8]
    7a72:	9819      	ldr	r0, [sp, #100]	; 0x64
    7a74:	f002 fc32 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    7a78:	e012      	b.n	7aa0 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    7a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7a7c:	9b02      	ldr	r3, [sp, #8]
    7a7e:	011b      	lsls	r3, r3, #4
    7a80:	4413      	add	r3, r2
    7a82:	3308      	adds	r3, #8
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	2b00      	cmp	r3, #0
    7a88:	d00a      	beq.n	7aa0 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    7a8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7a8c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7a90:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7a94:	9300      	str	r3, [sp, #0]
    7a96:	2300      	movs	r3, #0
    7a98:	9a02      	ldr	r2, [sp, #8]
    7a9a:	9819      	ldr	r0, [sp, #100]	; 0x64
    7a9c:	f002 fc1e 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
}
    7aa0:	bf00      	nop
    7aa2:	b01a      	add	sp, #104	; 0x68
    7aa4:	bd10      	pop	{r4, pc}
    7aa6:	bf00      	nop
    7aa8:	0000c9cc 	.word	0x0000c9cc
    7aac:	1fff8f98 	.word	0x1fff8f98

00007ab0 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    7ab0:	b510      	push	{r4, lr}
    7ab2:	b098      	sub	sp, #96	; 0x60
    7ab4:	4603      	mov	r3, r0
    7ab6:	9100      	str	r1, [sp, #0]
    7ab8:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ac0:	4a3c      	ldr	r2, [pc, #240]	; (7bb4 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    7ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ac6:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7ac8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7acc:	4a3a      	ldr	r2, [pc, #232]	; (7bb8 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    7ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ad2:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    7ad4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ad6:	681b      	ldr	r3, [r3, #0]
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d102      	bne.n	7ae2 <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    7adc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ade:	aa02      	add	r2, sp, #8
    7ae0:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    7ae2:	9b00      	ldr	r3, [sp, #0]
    7ae4:	2b07      	cmp	r3, #7
    7ae6:	d048      	beq.n	7b7a <FlexCAN_IRQHandlerRxFIFO+0xca>
    7ae8:	9b00      	ldr	r3, [sp, #0]
    7aea:	2b07      	cmp	r3, #7
    7aec:	d858      	bhi.n	7ba0 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    7aee:	9b00      	ldr	r3, [sp, #0]
    7af0:	2b05      	cmp	r3, #5
    7af2:	d003      	beq.n	7afc <FlexCAN_IRQHandlerRxFIFO+0x4c>
    7af4:	9b00      	ldr	r3, [sp, #0]
    7af6:	2b06      	cmp	r3, #6
    7af8:	d02c      	beq.n	7b54 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    7afa:	e051      	b.n	7ba0 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7afc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7afe:	685b      	ldr	r3, [r3, #4]
    7b00:	2b01      	cmp	r3, #1
    7b02:	d14f      	bne.n	7ba4 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    7b04:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b06:	681b      	ldr	r3, [r3, #0]
    7b08:	4619      	mov	r1, r3
    7b0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    7b0c:	f003 f98d 	bl	ae2a <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7b10:	9900      	ldr	r1, [sp, #0]
    7b12:	9817      	ldr	r0, [sp, #92]	; 0x5c
    7b14:	f7ff f97a 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    7b18:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b1a:	2200      	movs	r2, #0
    7b1c:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    7b1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7b24:	2b00      	cmp	r3, #0
    7b26:	d008      	beq.n	7b3a <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    7b28:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b2a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7b2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7b32:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b34:	2200      	movs	r2, #0
    7b36:	2101      	movs	r1, #1
    7b38:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7b3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b3c:	685b      	ldr	r3, [r3, #4]
    7b3e:	2b00      	cmp	r3, #0
    7b40:	d130      	bne.n	7ba4 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    7b42:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b44:	2201      	movs	r2, #1
    7b46:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    7b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b4c:	4618      	mov	r0, r3
    7b4e:	f000 fc61 	bl	8414 <FlexCAN_CompleteRxMessageFifoData>
            break;
    7b52:	e027      	b.n	7ba4 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7b54:	9900      	ldr	r1, [sp, #0]
    7b56:	9817      	ldr	r0, [sp, #92]	; 0x5c
    7b58:	f7ff f958 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    7b5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7b62:	2b00      	cmp	r3, #0
    7b64:	d020      	beq.n	7ba8 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    7b66:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b68:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7b6c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b72:	2200      	movs	r2, #0
    7b74:	2102      	movs	r1, #2
    7b76:	47a0      	blx	r4
            break;
    7b78:	e016      	b.n	7ba8 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7b7a:	9900      	ldr	r1, [sp, #0]
    7b7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    7b7e:	f7ff f945 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    7b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7b88:	2b00      	cmp	r3, #0
    7b8a:	d00f      	beq.n	7bac <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    7b8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b8e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7b92:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7b96:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b98:	2200      	movs	r2, #0
    7b9a:	2103      	movs	r1, #3
    7b9c:	47a0      	blx	r4
            break;
    7b9e:	e005      	b.n	7bac <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    7ba0:	bf00      	nop
    7ba2:	e004      	b.n	7bae <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    7ba4:	bf00      	nop
    7ba6:	e002      	b.n	7bae <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    7ba8:	bf00      	nop
    7baa:	e000      	b.n	7bae <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    7bac:	bf00      	nop
    }
}
    7bae:	bf00      	nop
    7bb0:	b018      	add	sp, #96	; 0x60
    7bb2:	bd10      	pop	{r4, pc}
    7bb4:	0000c9cc 	.word	0x0000c9cc
    7bb8:	1fff8f98 	.word	0x1fff8f98

00007bbc <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    7bbc:	b500      	push	{lr}
    7bbe:	b08b      	sub	sp, #44	; 0x2c
    7bc0:	4603      	mov	r3, r0
    7bc2:	460a      	mov	r2, r1
    7bc4:	f88d 3007 	strb.w	r3, [sp, #7]
    7bc8:	4613      	mov	r3, r2
    7bca:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    7bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7bd2:	4a3c      	ldr	r2, [pc, #240]	; (7cc4 <FlexCAN_AbortTxTransfer+0x108>)
    7bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd8:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    7bda:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7bde:	4a3a      	ldr	r2, [pc, #232]	; (7cc8 <FlexCAN_AbortTxTransfer+0x10c>)
    7be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7be4:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7be6:	2300      	movs	r3, #0
    7be8:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    7bea:	2300      	movs	r3, #0
    7bec:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    7bee:	2300      	movs	r3, #0
    7bf0:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    7bf2:	2300      	movs	r3, #0
    7bf4:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    7bf6:	2300      	movs	r3, #0
    7bf8:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    7bfa:	2300      	movs	r3, #0
    7bfc:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    7bfe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c02:	4619      	mov	r1, r3
    7c04:	9807      	ldr	r0, [sp, #28]
    7c06:	f001 ffe1 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    7c0a:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    7c0c:	9b03      	ldr	r3, [sp, #12]
    7c0e:	681b      	ldr	r3, [r3, #0]
    7c10:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    7c12:	9b05      	ldr	r3, [sp, #20]
    7c14:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    7c18:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    7c1a:	9b05      	ldr	r3, [sp, #20]
    7c1c:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    7c20:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    7c22:	9b03      	ldr	r3, [sp, #12]
    7c24:	9a05      	ldr	r2, [sp, #20]
    7c26:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7c28:	2100      	movs	r1, #0
    7c2a:	4828      	ldr	r0, [pc, #160]	; (7ccc <FlexCAN_AbortTxTransfer+0x110>)
    7c2c:	f7f9 faac 	bl	1188 <OsIf_MicrosToTicks>
    7c30:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7c32:	2000      	movs	r0, #0
    7c34:	f7f9 fa5c 	bl	10f0 <OsIf_GetCounter>
    7c38:	4603      	mov	r3, r0
    7c3a:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    7c3c:	e00f      	b.n	7c5e <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7c3e:	ab02      	add	r3, sp, #8
    7c40:	2100      	movs	r1, #0
    7c42:	4618      	mov	r0, r3
    7c44:	f7f9 fa6d 	bl	1122 <OsIf_GetElapsed>
    7c48:	4602      	mov	r2, r0
    7c4a:	9b08      	ldr	r3, [sp, #32]
    7c4c:	4413      	add	r3, r2
    7c4e:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    7c50:	9a08      	ldr	r2, [sp, #32]
    7c52:	9b04      	ldr	r3, [sp, #16]
    7c54:	429a      	cmp	r2, r3
    7c56:	d302      	bcc.n	7c5e <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    7c58:	2303      	movs	r3, #3
    7c5a:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    7c5c:	e008      	b.n	7c70 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    7c5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c62:	4619      	mov	r1, r3
    7c64:	9807      	ldr	r0, [sp, #28]
    7c66:	f7ff f8e4 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    7c6a:	4603      	mov	r3, r0
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	d0e6      	beq.n	7c3e <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    7c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c72:	2b03      	cmp	r3, #3
    7c74:	d012      	beq.n	7c9c <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    7c76:	9b03      	ldr	r3, [sp, #12]
    7c78:	681b      	ldr	r3, [r3, #0]
    7c7a:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    7c7c:	9b05      	ldr	r3, [sp, #20]
    7c7e:	0e1b      	lsrs	r3, r3, #24
    7c80:	f003 030f 	and.w	r3, r3, #15
    7c84:	2b08      	cmp	r3, #8
    7c86:	d101      	bne.n	7c8c <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    7c88:	2305      	movs	r3, #5
    7c8a:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    7c8c:	9b05      	ldr	r3, [sp, #20]
    7c8e:	0e1b      	lsrs	r3, r3, #24
    7c90:	f003 030f 	and.w	r3, r3, #15
    7c94:	2b09      	cmp	r3, #9
    7c96:	d101      	bne.n	7c9c <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    7c98:	2300      	movs	r3, #0
    7c9a:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    7c9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ca0:	4619      	mov	r1, r3
    7ca2:	9807      	ldr	r0, [sp, #28]
    7ca4:	f7ff f8b2 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    7ca8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7cac:	9a06      	ldr	r2, [sp, #24]
    7cae:	011b      	lsls	r3, r3, #4
    7cb0:	4413      	add	r3, r2
    7cb2:	3304      	adds	r3, #4
    7cb4:	2200      	movs	r2, #0
    7cb6:	601a      	str	r2, [r3, #0]

    return result;
    7cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    7cba:	4618      	mov	r0, r3
    7cbc:	b00b      	add	sp, #44	; 0x2c
    7cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    7cc2:	bf00      	nop
    7cc4:	0000c9cc 	.word	0x0000c9cc
    7cc8:	1fff8f98 	.word	0x1fff8f98
    7ccc:	000f4240 	.word	0x000f4240

00007cd0 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    7cd0:	b500      	push	{lr}
    7cd2:	b089      	sub	sp, #36	; 0x24
    7cd4:	4603      	mov	r3, r0
    7cd6:	460a      	mov	r2, r1
    7cd8:	f88d 3007 	strb.w	r3, [sp, #7]
    7cdc:	4613      	mov	r3, r2
    7cde:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    7ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ce6:	4a41      	ldr	r2, [pc, #260]	; (7dec <FlexCAN_AbortRxTransfer+0x11c>)
    7ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cec:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    7cee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cf2:	4a3f      	ldr	r2, [pc, #252]	; (7df0 <FlexCAN_AbortRxTransfer+0x120>)
    7cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cf8:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    7cfa:	2300      	movs	r3, #0
    7cfc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    7d00:	2300      	movs	r3, #0
    7d02:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    7d04:	2300      	movs	r3, #0
    7d06:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    7d08:	2300      	movs	r3, #0
    7d0a:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    7d0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d10:	9a06      	ldr	r2, [sp, #24]
    7d12:	011b      	lsls	r3, r3, #4
    7d14:	4413      	add	r3, r2
    7d16:	3304      	adds	r3, #4
    7d18:	2200      	movs	r2, #0
    7d1a:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    7d1c:	9b06      	ldr	r3, [sp, #24]
    7d1e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    7d22:	2b00      	cmp	r3, #0
    7d24:	d03c      	beq.n	7da0 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    7d26:	9b07      	ldr	r3, [sp, #28]
    7d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7d2a:	0e1b      	lsrs	r3, r3, #24
    7d2c:	b2db      	uxtb	r3, r3
    7d2e:	f003 030f 	and.w	r3, r3, #15
    7d32:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    7d36:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7d3a:	4618      	mov	r0, r3
    7d3c:	f7ff f9f3 	bl	7126 <RxFifoOcuppiedLastMsgBuff>
    7d40:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    7d42:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d46:	9a04      	ldr	r2, [sp, #16]
    7d48:	429a      	cmp	r2, r3
    7d4a:	d21b      	bcs.n	7d84 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    7d4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d50:	4619      	mov	r1, r3
    7d52:	9807      	ldr	r0, [sp, #28]
    7d54:	f001 ff3a 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    7d58:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    7d5a:	9b02      	ldr	r3, [sp, #8]
    7d5c:	681b      	ldr	r3, [r3, #0]
    7d5e:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    7d60:	9b03      	ldr	r3, [sp, #12]
    7d62:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    7d66:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    7d68:	9b02      	ldr	r3, [sp, #8]
    7d6a:	9a03      	ldr	r2, [sp, #12]
    7d6c:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    7d6e:	9b03      	ldr	r3, [sp, #12]
    7d70:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    7d74:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    7d76:	9b03      	ldr	r3, [sp, #12]
    7d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    7d7c:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    7d7e:	9b02      	ldr	r3, [sp, #8]
    7d80:	9a03      	ldr	r2, [sp, #12]
    7d82:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    7d84:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d125      	bne.n	7dd8 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    7d8c:	9b06      	ldr	r3, [sp, #24]
    7d8e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7d92:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7d96:	2205      	movs	r2, #5
    7d98:	9807      	ldr	r0, [sp, #28]
    7d9a:	f002 faf5 	bl	a388 <FLEXCAN_ClearMsgBuffIntCmd>
    7d9e:	e01b      	b.n	7dd8 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    7da0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7da4:	4619      	mov	r1, r3
    7da6:	9807      	ldr	r0, [sp, #28]
    7da8:	f001 ff10 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    7dac:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    7dae:	9b02      	ldr	r3, [sp, #8]
    7db0:	681b      	ldr	r3, [r3, #0]
    7db2:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    7db4:	9b03      	ldr	r3, [sp, #12]
    7db6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    7dba:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    7dbc:	9b02      	ldr	r3, [sp, #8]
    7dbe:	9a03      	ldr	r2, [sp, #12]
    7dc0:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    7dc2:	9b03      	ldr	r3, [sp, #12]
    7dc4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    7dc8:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    7dca:	9b03      	ldr	r3, [sp, #12]
    7dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    7dd0:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    7dd2:	9b02      	ldr	r3, [sp, #8]
    7dd4:	9a03      	ldr	r2, [sp, #12]
    7dd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    7dd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ddc:	4619      	mov	r1, r3
    7dde:	9807      	ldr	r0, [sp, #28]
    7de0:	f7ff f814 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    7de4:	bf00      	nop
    7de6:	b009      	add	sp, #36	; 0x24
    7de8:	f85d fb04 	ldr.w	pc, [sp], #4
    7dec:	0000c9cc 	.word	0x0000c9cc
    7df0:	1fff8f98 	.word	0x1fff8f98

00007df4 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    7df4:	b500      	push	{lr}
    7df6:	b089      	sub	sp, #36	; 0x24
    7df8:	4603      	mov	r3, r0
    7dfa:	9102      	str	r1, [sp, #8]
    7dfc:	9201      	str	r2, [sp, #4]
    7dfe:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7e02:	2300      	movs	r3, #0
    7e04:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    7e06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e0a:	4a36      	ldr	r2, [pc, #216]	; (7ee4 <FlexCAN_Ip_Init_Privileged+0xf0>)
    7e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e10:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    7e12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e16:	9a01      	ldr	r2, [sp, #4]
    7e18:	9905      	ldr	r1, [sp, #20]
    7e1a:	4618      	mov	r0, r3
    7e1c:	f7ff fa84 	bl	7328 <FlexCAN_InitController>
    7e20:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    7e22:	9b06      	ldr	r3, [sp, #24]
    7e24:	2b00      	cmp	r3, #0
    7e26:	d158      	bne.n	7eda <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    7e28:	9901      	ldr	r1, [sp, #4]
    7e2a:	9805      	ldr	r0, [sp, #20]
    7e2c:	f7ff fad6 	bl	73dc <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    7e30:	9b01      	ldr	r3, [sp, #4]
    7e32:	68db      	ldr	r3, [r3, #12]
    7e34:	4619      	mov	r1, r3
    7e36:	9805      	ldr	r0, [sp, #20]
    7e38:	f002 fdb8 	bl	a9ac <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    7e3c:	2300      	movs	r3, #0
    7e3e:	9307      	str	r3, [sp, #28]
    7e40:	e01d      	b.n	7e7e <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    7e42:	9a02      	ldr	r2, [sp, #8]
    7e44:	9b07      	ldr	r3, [sp, #28]
    7e46:	011b      	lsls	r3, r3, #4
    7e48:	4413      	add	r3, r2
    7e4a:	3308      	adds	r3, #8
    7e4c:	2201      	movs	r2, #1
    7e4e:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    7e50:	9a02      	ldr	r2, [sp, #8]
    7e52:	9b07      	ldr	r3, [sp, #28]
    7e54:	011b      	lsls	r3, r3, #4
    7e56:	4413      	add	r3, r2
    7e58:	2200      	movs	r2, #0
    7e5a:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    7e5c:	9a02      	ldr	r2, [sp, #8]
    7e5e:	9b07      	ldr	r3, [sp, #28]
    7e60:	011b      	lsls	r3, r3, #4
    7e62:	4413      	add	r3, r2
    7e64:	3304      	adds	r3, #4
    7e66:	2200      	movs	r2, #0
    7e68:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    7e6a:	9a02      	ldr	r2, [sp, #8]
    7e6c:	9b07      	ldr	r3, [sp, #28]
    7e6e:	011b      	lsls	r3, r3, #4
    7e70:	4413      	add	r3, r2
    7e72:	330c      	adds	r3, #12
    7e74:	2200      	movs	r2, #0
    7e76:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    7e78:	9b07      	ldr	r3, [sp, #28]
    7e7a:	3301      	adds	r3, #1
    7e7c:	9307      	str	r3, [sp, #28]
    7e7e:	9b07      	ldr	r3, [sp, #28]
    7e80:	2b1f      	cmp	r3, #31
    7e82:	d9de      	bls.n	7e42 <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    7e84:	9b01      	ldr	r3, [sp, #4]
    7e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7e88:	9b02      	ldr	r3, [sp, #8]
    7e8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    7e8e:	9b01      	ldr	r3, [sp, #4]
    7e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    7e92:	9b02      	ldr	r3, [sp, #8]
    7e94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    7e98:	9b02      	ldr	r3, [sp, #8]
    7e9a:	2200      	movs	r2, #0
    7e9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    7ea0:	9b01      	ldr	r3, [sp, #4]
    7ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7ea4:	9b02      	ldr	r3, [sp, #8]
    7ea6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    7eaa:	9b02      	ldr	r3, [sp, #8]
    7eac:	2200      	movs	r2, #0
    7eae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    7eb2:	9b01      	ldr	r3, [sp, #4]
    7eb4:	7a1a      	ldrb	r2, [r3, #8]
    7eb6:	9b02      	ldr	r3, [sp, #8]
    7eb8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    7ebc:	9b01      	ldr	r3, [sp, #4]
    7ebe:	681a      	ldr	r2, [r3, #0]
    7ec0:	9b02      	ldr	r3, [sp, #8]
    7ec2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    7ec6:	9b02      	ldr	r3, [sp, #8]
    7ec8:	2201      	movs	r2, #1
    7eca:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    7ece:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ed2:	4905      	ldr	r1, [pc, #20]	; (7ee8 <FlexCAN_Ip_Init_Privileged+0xf4>)
    7ed4:	9a02      	ldr	r2, [sp, #8]
    7ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    7eda:	9b06      	ldr	r3, [sp, #24]
}
    7edc:	4618      	mov	r0, r3
    7ede:	b009      	add	sp, #36	; 0x24
    7ee0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ee4:	0000c9cc 	.word	0x0000c9cc
    7ee8:	1fff8f98 	.word	0x1fff8f98

00007eec <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    7eec:	b500      	push	{lr}
    7eee:	b08b      	sub	sp, #44	; 0x2c
    7ef0:	9204      	str	r2, [sp, #16]
    7ef2:	9303      	str	r3, [sp, #12]
    7ef4:	4603      	mov	r3, r0
    7ef6:	f88d 3017 	strb.w	r3, [sp, #23]
    7efa:	460b      	mov	r3, r1
    7efc:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    7f00:	2301      	movs	r3, #1
    7f02:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7f04:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7f08:	4a1c      	ldr	r2, [pc, #112]	; (7f7c <FlexCAN_Ip_Send+0x90>)
    7f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f0e:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7f10:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7f14:	4a1a      	ldr	r2, [pc, #104]	; (7f80 <FlexCAN_Ip_Send+0x94>)
    7f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f1a:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    7f1c:	9808      	ldr	r0, [sp, #32]
    7f1e:	f7ff f8f4 	bl	710a <FlexCAN_IsListenOnlyModeEnabled>
    7f22:	4603      	mov	r3, r0
    7f24:	f083 0301 	eor.w	r3, r3, #1
    7f28:	b2db      	uxtb	r3, r3
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d021      	beq.n	7f72 <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    7f2e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    7f32:	f89d 0017 	ldrb.w	r0, [sp, #23]
    7f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f38:	9300      	str	r3, [sp, #0]
    7f3a:	9b03      	ldr	r3, [sp, #12]
    7f3c:	9a04      	ldr	r2, [sp, #16]
    7f3e:	f7ff fb4b 	bl	75d8 <FlexCAN_StartSendData>
    7f42:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    7f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f46:	2b00      	cmp	r3, #0
    7f48:	d113      	bne.n	7f72 <FlexCAN_Ip_Send+0x86>
    7f4a:	9b04      	ldr	r3, [sp, #16]
    7f4c:	7b1b      	ldrb	r3, [r3, #12]
    7f4e:	f083 0301 	eor.w	r3, r3, #1
    7f52:	b2db      	uxtb	r3, r3
    7f54:	2b00      	cmp	r3, #0
    7f56:	d00c      	beq.n	7f72 <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    7f58:	f89d 2016 	ldrb.w	r2, [sp, #22]
    7f5c:	9b07      	ldr	r3, [sp, #28]
    7f5e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7f62:	f89d 1017 	ldrb.w	r1, [sp, #23]
    7f66:	9300      	str	r3, [sp, #0]
    7f68:	2301      	movs	r3, #1
    7f6a:	9808      	ldr	r0, [sp, #32]
    7f6c:	f002 f9b6 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
    7f70:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    7f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    7f74:	4618      	mov	r0, r3
    7f76:	b00b      	add	sp, #44	; 0x2c
    7f78:	f85d fb04 	ldr.w	pc, [sp], #4
    7f7c:	0000c9cc 	.word	0x0000c9cc
    7f80:	1fff8f98 	.word	0x1fff8f98

00007f84 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    7f84:	b500      	push	{lr}
    7f86:	b08b      	sub	sp, #44	; 0x2c
    7f88:	9202      	str	r2, [sp, #8]
    7f8a:	9301      	str	r3, [sp, #4]
    7f8c:	4603      	mov	r3, r0
    7f8e:	f88d 300f 	strb.w	r3, [sp, #15]
    7f92:	460b      	mov	r3, r1
    7f94:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7f98:	2300      	movs	r3, #0
    7f9a:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7f9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7fa0:	4a19      	ldr	r2, [pc, #100]	; (8008 <FlexCAN_Ip_ConfigRxMb+0x84>)
    7fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fa6:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7fa8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7fac:	4619      	mov	r1, r3
    7fae:	9808      	ldr	r0, [sp, #32]
    7fb0:	f7fe ff2c 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    7fb4:	9b02      	ldr	r3, [sp, #8]
    7fb6:	685b      	ldr	r3, [r3, #4]
    7fb8:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    7fba:	9b02      	ldr	r3, [sp, #8]
    7fbc:	681b      	ldr	r3, [r3, #0]
    7fbe:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    7fc0:	9b02      	ldr	r3, [sp, #8]
    7fc2:	7a1b      	ldrb	r3, [r3, #8]
    7fc4:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    7fc8:	230f      	movs	r3, #15
    7fca:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    7fcc:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7fd0:	aa04      	add	r2, sp, #16
    7fd2:	9b01      	ldr	r3, [sp, #4]
    7fd4:	9808      	ldr	r0, [sp, #32]
    7fd6:	f002 fa25 	bl	a424 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    7fda:	2300      	movs	r3, #0
    7fdc:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    7fde:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7fe2:	aa04      	add	r2, sp, #16
    7fe4:	9b01      	ldr	r3, [sp, #4]
    7fe6:	9808      	ldr	r0, [sp, #32]
    7fe8:	f002 fa1c 	bl	a424 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    7fec:	2304      	movs	r3, #4
    7fee:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    7ff0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7ff4:	aa04      	add	r2, sp, #16
    7ff6:	9b01      	ldr	r3, [sp, #4]
    7ff8:	9808      	ldr	r0, [sp, #32]
    7ffa:	f002 fa13 	bl	a424 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    7ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    8000:	4618      	mov	r0, r3
    8002:	b00b      	add	sp, #44	; 0x2c
    8004:	f85d fb04 	ldr.w	pc, [sp], #4
    8008:	0000c9cc 	.word	0x0000c9cc

0000800c <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    800c:	b500      	push	{lr}
    800e:	b089      	sub	sp, #36	; 0x24
    8010:	9202      	str	r2, [sp, #8]
    8012:	461a      	mov	r2, r3
    8014:	4603      	mov	r3, r0
    8016:	f88d 300f 	strb.w	r3, [sp, #15]
    801a:	460b      	mov	r3, r1
    801c:	f88d 300e 	strb.w	r3, [sp, #14]
    8020:	4613      	mov	r3, r2
    8022:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8026:	f89d 300f 	ldrb.w	r3, [sp, #15]
    802a:	4a18      	ldr	r2, [pc, #96]	; (808c <FlexCAN_Ip_Receive+0x80>)
    802c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8030:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8032:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8036:	4a16      	ldr	r2, [pc, #88]	; (8090 <FlexCAN_Ip_Receive+0x84>)
    8038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    803c:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    803e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8042:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8046:	f89d 000f 	ldrb.w	r0, [sp, #15]
    804a:	9a02      	ldr	r2, [sp, #8]
    804c:	f7ff fa86 	bl	755c <FlexCAN_StartRxMessageBufferData>
    8050:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    8052:	9b07      	ldr	r3, [sp, #28]
    8054:	2b00      	cmp	r3, #0
    8056:	d113      	bne.n	8080 <FlexCAN_Ip_Receive+0x74>
    8058:	f89d 300d 	ldrb.w	r3, [sp, #13]
    805c:	f083 0301 	eor.w	r3, r3, #1
    8060:	b2db      	uxtb	r3, r3
    8062:	2b00      	cmp	r3, #0
    8064:	d00c      	beq.n	8080 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    8066:	f89d 200e 	ldrb.w	r2, [sp, #14]
    806a:	9b05      	ldr	r3, [sp, #20]
    806c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8070:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8074:	9300      	str	r3, [sp, #0]
    8076:	2301      	movs	r3, #1
    8078:	9806      	ldr	r0, [sp, #24]
    807a:	f002 f92f 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
    807e:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    8080:	9b07      	ldr	r3, [sp, #28]
}
    8082:	4618      	mov	r0, r3
    8084:	b009      	add	sp, #36	; 0x24
    8086:	f85d fb04 	ldr.w	pc, [sp], #4
    808a:	bf00      	nop
    808c:	0000c9cc 	.word	0x0000c9cc
    8090:	1fff8f98 	.word	0x1fff8f98

00008094 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    8094:	b500      	push	{lr}
    8096:	b08b      	sub	sp, #44	; 0x2c
    8098:	9202      	str	r2, [sp, #8]
    809a:	461a      	mov	r2, r3
    809c:	4603      	mov	r3, r0
    809e:	f88d 300f 	strb.w	r3, [sp, #15]
    80a2:	460b      	mov	r3, r1
    80a4:	f88d 300e 	strb.w	r3, [sp, #14]
    80a8:	4613      	mov	r3, r2
    80aa:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    80ae:	2300      	movs	r3, #0
    80b0:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    80b2:	2300      	movs	r3, #0
    80b4:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    80b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    80bc:	fb02 f303 	mul.w	r3, r2, r3
    80c0:	2100      	movs	r1, #0
    80c2:	4618      	mov	r0, r3
    80c4:	f7f9 f860 	bl	1188 <OsIf_MicrosToTicks>
    80c8:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    80ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    80ce:	4a4c      	ldr	r2, [pc, #304]	; (8200 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    80d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80d4:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    80d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    80da:	4a4a      	ldr	r2, [pc, #296]	; (8204 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    80dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80e0:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    80e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    80e6:	f89d 100e 	ldrb.w	r1, [sp, #14]
    80ea:	f89d 000f 	ldrb.w	r0, [sp, #15]
    80ee:	9a02      	ldr	r2, [sp, #8]
    80f0:	f7ff fa34 	bl	755c <FlexCAN_StartRxMessageBufferData>
    80f4:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    80f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80f8:	2b00      	cmp	r3, #0
    80fa:	d113      	bne.n	8124 <FlexCAN_Ip_ReceiveBlocking+0x90>
    80fc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8100:	f083 0301 	eor.w	r3, r3, #1
    8104:	b2db      	uxtb	r3, r3
    8106:	2b00      	cmp	r3, #0
    8108:	d00c      	beq.n	8124 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    810a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    810e:	9b06      	ldr	r3, [sp, #24]
    8110:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8114:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8118:	9300      	str	r3, [sp, #0]
    811a:	2301      	movs	r3, #1
    811c:	9805      	ldr	r0, [sp, #20]
    811e:	f002 f8dd 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
    8122:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8124:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8126:	2b00      	cmp	r3, #0
    8128:	d133      	bne.n	8192 <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    812a:	2000      	movs	r0, #0
    812c:	f7f8 ffe0 	bl	10f0 <OsIf_GetCounter>
    8130:	4603      	mov	r3, r0
    8132:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8134:	e024      	b.n	8180 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    8136:	f89d 300d 	ldrb.w	r3, [sp, #13]
    813a:	2b00      	cmp	r3, #0
    813c:	d010      	beq.n	8160 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    813e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8142:	4619      	mov	r1, r3
    8144:	9805      	ldr	r0, [sp, #20]
    8146:	f7fe fe74 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    814a:	4603      	mov	r3, r0
    814c:	2b00      	cmp	r3, #0
    814e:	d007      	beq.n	8160 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    8150:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8154:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8158:	4611      	mov	r1, r2
    815a:	4618      	mov	r0, r3
    815c:	f7ff fb20 	bl	77a0 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8160:	ab04      	add	r3, sp, #16
    8162:	2100      	movs	r1, #0
    8164:	4618      	mov	r0, r3
    8166:	f7f8 ffdc 	bl	1122 <OsIf_GetElapsed>
    816a:	4602      	mov	r2, r0
    816c:	9b08      	ldr	r3, [sp, #32]
    816e:	4413      	add	r3, r2
    8170:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    8172:	9a08      	ldr	r2, [sp, #32]
    8174:	9b07      	ldr	r3, [sp, #28]
    8176:	429a      	cmp	r2, r3
    8178:	d302      	bcc.n	8180 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    817a:	2303      	movs	r3, #3
    817c:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    817e:	e008      	b.n	8192 <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8180:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8184:	9a06      	ldr	r2, [sp, #24]
    8186:	011b      	lsls	r3, r3, #4
    8188:	4413      	add	r3, r2
    818a:	3304      	adds	r3, #4
    818c:	681b      	ldr	r3, [r3, #0]
    818e:	2b01      	cmp	r3, #1
    8190:	d0d1      	beq.n	8136 <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    8192:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8194:	2b03      	cmp	r3, #3
    8196:	d112      	bne.n	81be <FlexCAN_Ip_ReceiveBlocking+0x12a>
    8198:	f89d 300d 	ldrb.w	r3, [sp, #13]
    819c:	f083 0301 	eor.w	r3, r3, #1
    81a0:	b2db      	uxtb	r3, r3
    81a2:	2b00      	cmp	r3, #0
    81a4:	d00b      	beq.n	81be <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    81a6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    81aa:	9b06      	ldr	r3, [sp, #24]
    81ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    81b0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    81b4:	9300      	str	r3, [sp, #0]
    81b6:	2300      	movs	r3, #0
    81b8:	9805      	ldr	r0, [sp, #20]
    81ba:	f002 f88f 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    81be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81c0:	2b04      	cmp	r3, #4
    81c2:	d018      	beq.n	81f6 <FlexCAN_Ip_ReceiveBlocking+0x162>
    81c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81c6:	2b02      	cmp	r3, #2
    81c8:	d015      	beq.n	81f6 <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    81ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81ce:	9a06      	ldr	r2, [sp, #24]
    81d0:	011b      	lsls	r3, r3, #4
    81d2:	4413      	add	r3, r2
    81d4:	3304      	adds	r3, #4
    81d6:	681b      	ldr	r3, [r3, #0]
    81d8:	2b00      	cmp	r3, #0
    81da:	d102      	bne.n	81e2 <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    81dc:	2300      	movs	r3, #0
    81de:	9309      	str	r3, [sp, #36]	; 0x24
    81e0:	e009      	b.n	81f6 <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    81e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81e6:	9a06      	ldr	r2, [sp, #24]
    81e8:	011b      	lsls	r3, r3, #4
    81ea:	4413      	add	r3, r2
    81ec:	3304      	adds	r3, #4
    81ee:	2200      	movs	r2, #0
    81f0:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    81f2:	2303      	movs	r3, #3
    81f4:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    81f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    81f8:	4618      	mov	r0, r3
    81fa:	b00b      	add	sp, #44	; 0x2c
    81fc:	f85d fb04 	ldr.w	pc, [sp], #4
    8200:	1fff8f98 	.word	0x1fff8f98
    8204:	0000c9cc 	.word	0x0000c9cc

00008208 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    8208:	b500      	push	{lr}
    820a:	b085      	sub	sp, #20
    820c:	4603      	mov	r3, r0
    820e:	9100      	str	r1, [sp, #0]
    8210:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8214:	2300      	movs	r3, #0
    8216:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    8218:	f89d 3007 	ldrb.w	r3, [sp, #7]
    821c:	9900      	ldr	r1, [sp, #0]
    821e:	4618      	mov	r0, r3
    8220:	f7ff fa5e 	bl	76e0 <FlexCAN_StartRxMessageFifoData>
    8224:	9003      	str	r0, [sp, #12]
    }
    return result;
    8226:	9b03      	ldr	r3, [sp, #12]
}
    8228:	4618      	mov	r0, r3
    822a:	b005      	add	sp, #20
    822c:	f85d fb04 	ldr.w	pc, [sp], #4

00008230 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    8230:	b500      	push	{lr}
    8232:	b087      	sub	sp, #28
    8234:	4603      	mov	r3, r0
    8236:	9102      	str	r1, [sp, #8]
    8238:	9201      	str	r2, [sp, #4]
    823a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    823e:	2300      	movs	r3, #0
    8240:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    8242:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8246:	9902      	ldr	r1, [sp, #8]
    8248:	4618      	mov	r0, r3
    824a:	f7ff fa49 	bl	76e0 <FlexCAN_StartRxMessageFifoData>
    824e:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    8250:	9b05      	ldr	r3, [sp, #20]
    8252:	2b00      	cmp	r3, #0
    8254:	d106      	bne.n	8264 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    8256:	f89d 300f 	ldrb.w	r3, [sp, #15]
    825a:	9901      	ldr	r1, [sp, #4]
    825c:	4618      	mov	r0, r3
    825e:	f7ff f8e2 	bl	7426 <FlexCAN_ProccessLegacyRxFIFO>
    8262:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    8264:	9b05      	ldr	r3, [sp, #20]
}
    8266:	4618      	mov	r0, r3
    8268:	b007      	add	sp, #28
    826a:	f85d fb04 	ldr.w	pc, [sp], #4

0000826e <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    826e:	b500      	push	{lr}
    8270:	b089      	sub	sp, #36	; 0x24
    8272:	4603      	mov	r3, r0
    8274:	9102      	str	r1, [sp, #8]
    8276:	9201      	str	r2, [sp, #4]
    8278:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    827c:	2300      	movs	r3, #0
    827e:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8280:	2300      	movs	r3, #0
    8282:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8284:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8288:	4a1c      	ldr	r2, [pc, #112]	; (82fc <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    828a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    828e:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8290:	9805      	ldr	r0, [sp, #20]
    8292:	f7fe fd61 	bl	6d58 <FlexCAN_IsEnabled>
    8296:	4603      	mov	r3, r0
    8298:	2b00      	cmp	r3, #0
    829a:	bf14      	ite	ne
    829c:	2301      	movne	r3, #1
    829e:	2300      	moveq	r3, #0
    82a0:	b2db      	uxtb	r3, r3
    82a2:	f083 0301 	eor.w	r3, r3, #1
    82a6:	b2db      	uxtb	r3, r3
    82a8:	f88d 3013 	strb.w	r3, [sp, #19]
    82ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    82b0:	f003 0301 	and.w	r3, r3, #1
    82b4:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    82b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    82bc:	2b00      	cmp	r3, #0
    82be:	d003      	beq.n	82c8 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    82c0:	9805      	ldr	r0, [sp, #20]
    82c2:	f001 fd6b 	bl	9d9c <FlexCAN_Enable>
    82c6:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    82c8:	9b07      	ldr	r3, [sp, #28]
    82ca:	2b00      	cmp	r3, #0
    82cc:	d104      	bne.n	82d8 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    82ce:	9a01      	ldr	r2, [sp, #4]
    82d0:	9902      	ldr	r1, [sp, #8]
    82d2:	9805      	ldr	r0, [sp, #20]
    82d4:	f002 fba5 	bl	aa22 <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    82d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    82dc:	2b00      	cmp	r3, #0
    82de:	d008      	beq.n	82f2 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    82e0:	9805      	ldr	r0, [sp, #20]
    82e2:	f001 fdd9 	bl	9e98 <FlexCAN_Disable>
    82e6:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    82e8:	9b06      	ldr	r3, [sp, #24]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d001      	beq.n	82f2 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    82ee:	9b06      	ldr	r3, [sp, #24]
    82f0:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    82f2:	9b07      	ldr	r3, [sp, #28]
}
    82f4:	4618      	mov	r0, r3
    82f6:	b009      	add	sp, #36	; 0x24
    82f8:	f85d fb04 	ldr.w	pc, [sp], #4
    82fc:	0000c9cc 	.word	0x0000c9cc

00008300 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    8300:	b500      	push	{lr}
    8302:	b08f      	sub	sp, #60	; 0x3c
    8304:	9204      	str	r2, [sp, #16]
    8306:	9303      	str	r3, [sp, #12]
    8308:	4603      	mov	r3, r0
    830a:	f88d 3017 	strb.w	r3, [sp, #23]
    830e:	460b      	mov	r3, r1
    8310:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8314:	2300      	movs	r3, #0
    8316:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8318:	f89d 3017 	ldrb.w	r3, [sp, #23]
    831c:	4a27      	ldr	r2, [pc, #156]	; (83bc <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    831e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8322:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    8324:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8328:	4a25      	ldr	r2, [pc, #148]	; (83c0 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    832e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    8330:	2300      	movs	r3, #0
    8332:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8336:	2b00      	cmp	r3, #0
    8338:	d13a      	bne.n	83b0 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    833a:	9b04      	ldr	r3, [sp, #16]
    833c:	685b      	ldr	r3, [r3, #4]
    833e:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    8340:	9b04      	ldr	r3, [sp, #16]
    8342:	681b      	ldr	r3, [r3, #0]
    8344:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    8346:	230a      	movs	r3, #10
    8348:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    834a:	2300      	movs	r3, #0
    834c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    8350:	2300      	movs	r3, #0
    8352:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    8356:	2300      	movs	r3, #0
    8358:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    835c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8360:	4619      	mov	r1, r3
    8362:	980c      	ldr	r0, [sp, #48]	; 0x30
    8364:	f7fe fd52 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    8368:	f89d 3016 	ldrb.w	r3, [sp, #22]
    836c:	4619      	mov	r1, r3
    836e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8370:	f001 fc2c 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    8374:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    8376:	9b04      	ldr	r3, [sp, #16]
    8378:	7adb      	ldrb	r3, [r3, #11]
    837a:	a906      	add	r1, sp, #24
    837c:	9300      	str	r3, [sp, #0]
    837e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8380:	9a03      	ldr	r2, [sp, #12]
    8382:	980a      	ldr	r0, [sp, #40]	; 0x28
    8384:	f002 f974 	bl	a670 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    8388:	9b04      	ldr	r3, [sp, #16]
    838a:	7b1b      	ldrb	r3, [r3, #12]
    838c:	f083 0301 	eor.w	r3, r3, #1
    8390:	b2db      	uxtb	r3, r3
    8392:	2b00      	cmp	r3, #0
    8394:	d00c      	beq.n	83b0 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    8396:	f89d 2016 	ldrb.w	r2, [sp, #22]
    839a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    839c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    83a0:	f89d 1017 	ldrb.w	r1, [sp, #23]
    83a4:	9300      	str	r3, [sp, #0]
    83a6:	2301      	movs	r3, #1
    83a8:	980c      	ldr	r0, [sp, #48]	; 0x30
    83aa:	f001 ff97 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
    83ae:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    83b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    83b2:	4618      	mov	r0, r3
    83b4:	b00f      	add	sp, #60	; 0x3c
    83b6:	f85d fb04 	ldr.w	pc, [sp], #4
    83ba:	bf00      	nop
    83bc:	0000c9cc 	.word	0x0000c9cc
    83c0:	1fff8f98 	.word	0x1fff8f98

000083c4 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    83c4:	b084      	sub	sp, #16
    83c6:	4603      	mov	r3, r0
    83c8:	460a      	mov	r2, r1
    83ca:	f88d 3007 	strb.w	r3, [sp, #7]
    83ce:	4613      	mov	r3, r2
    83d0:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    83d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    83d8:	4a0d      	ldr	r2, [pc, #52]	; (8410 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    83da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83de:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    83e0:	2301      	movs	r3, #1
    83e2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    83e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    83e8:	2b1f      	cmp	r3, #31
    83ea:	d80d      	bhi.n	8408 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    83ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    83f0:	9a02      	ldr	r2, [sp, #8]
    83f2:	011b      	lsls	r3, r3, #4
    83f4:	4413      	add	r3, r2
    83f6:	3304      	adds	r3, #4
    83f8:	681b      	ldr	r3, [r3, #0]
    83fa:	2b00      	cmp	r3, #0
    83fc:	d102      	bne.n	8404 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    83fe:	2300      	movs	r3, #0
    8400:	9303      	str	r3, [sp, #12]
    8402:	e001      	b.n	8408 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    8404:	2302      	movs	r3, #2
    8406:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    8408:	9b03      	ldr	r3, [sp, #12]
}
    840a:	4618      	mov	r0, r3
    840c:	b004      	add	sp, #16
    840e:	4770      	bx	lr
    8410:	1fff8f98 	.word	0x1fff8f98

00008414 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    8414:	b500      	push	{lr}
    8416:	b087      	sub	sp, #28
    8418:	4603      	mov	r3, r0
    841a:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    841e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8422:	4a1d      	ldr	r2, [pc, #116]	; (8498 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    8424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8428:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    842a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    842e:	4a1b      	ldr	r2, [pc, #108]	; (849c <FlexCAN_CompleteRxMessageFifoData+0x88>)
    8430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8434:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    8436:	9b04      	ldr	r3, [sp, #16]
    8438:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    843c:	2b00      	cmp	r3, #0
    843e:	d120      	bne.n	8482 <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    8440:	9b04      	ldr	r3, [sp, #16]
    8442:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8446:	f89d 100f 	ldrb.w	r1, [sp, #15]
    844a:	9300      	str	r3, [sp, #0]
    844c:	2300      	movs	r3, #0
    844e:	2205      	movs	r2, #5
    8450:	9805      	ldr	r0, [sp, #20]
    8452:	f001 ff43 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    8456:	9b04      	ldr	r3, [sp, #16]
    8458:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    845c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8460:	9300      	str	r3, [sp, #0]
    8462:	2300      	movs	r3, #0
    8464:	2206      	movs	r2, #6
    8466:	9805      	ldr	r0, [sp, #20]
    8468:	f001 ff38 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    846c:	9b04      	ldr	r3, [sp, #16]
    846e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8472:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8476:	9300      	str	r3, [sp, #0]
    8478:	2300      	movs	r3, #0
    847a:	2207      	movs	r2, #7
    847c:	9805      	ldr	r0, [sp, #20]
    847e:	f001 ff2d 	bl	a2dc <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    8482:	9b04      	ldr	r3, [sp, #16]
    8484:	2200      	movs	r2, #0
    8486:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    8488:	9b04      	ldr	r3, [sp, #16]
    848a:	2200      	movs	r2, #0
    848c:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    848e:	bf00      	nop
    8490:	b007      	add	sp, #28
    8492:	f85d fb04 	ldr.w	pc, [sp], #4
    8496:	bf00      	nop
    8498:	0000c9cc 	.word	0x0000c9cc
    849c:	1fff8f98 	.word	0x1fff8f98

000084a0 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    84a0:	b500      	push	{lr}
    84a2:	b08b      	sub	sp, #44	; 0x2c
    84a4:	4603      	mov	r3, r0
    84a6:	9102      	str	r1, [sp, #8]
    84a8:	9201      	str	r2, [sp, #4]
    84aa:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    84ae:	2300      	movs	r3, #0
    84b0:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    84b2:	2300      	movs	r3, #0
    84b4:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    84b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84ba:	4a3f      	ldr	r2, [pc, #252]	; (85b8 <FlexCAN_IRQHandler+0x118>)
    84bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84c0:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    84c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84c6:	4a3d      	ldr	r2, [pc, #244]	; (85bc <FlexCAN_IRQHandler+0x11c>)
    84c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84cc:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    84ce:	9b01      	ldr	r3, [sp, #4]
    84d0:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    84d2:	9b05      	ldr	r3, [sp, #20]
    84d4:	2b00      	cmp	r3, #0
    84d6:	d05c      	beq.n	8592 <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    84d8:	9907      	ldr	r1, [sp, #28]
    84da:	9806      	ldr	r0, [sp, #24]
    84dc:	f7fe fe47 	bl	716e <FlexCAN_GetMsgBuffIntStatusFlag>
    84e0:	4603      	mov	r3, r0
    84e2:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    84e4:	e008      	b.n	84f8 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    84e6:	9b07      	ldr	r3, [sp, #28]
    84e8:	3b01      	subs	r3, #1
    84ea:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    84ec:	9907      	ldr	r1, [sp, #28]
    84ee:	9806      	ldr	r0, [sp, #24]
    84f0:	f7fe fe3d 	bl	716e <FlexCAN_GetMsgBuffIntStatusFlag>
    84f4:	4603      	mov	r3, r0
    84f6:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    84f8:	9b08      	ldr	r3, [sp, #32]
    84fa:	2b00      	cmp	r3, #0
    84fc:	d103      	bne.n	8506 <FlexCAN_IRQHandler+0x66>
    84fe:	9a07      	ldr	r2, [sp, #28]
    8500:	9b02      	ldr	r3, [sp, #8]
    8502:	429a      	cmp	r2, r3
    8504:	d8ef      	bhi.n	84e6 <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    8506:	9b08      	ldr	r3, [sp, #32]
    8508:	2b00      	cmp	r3, #0
    850a:	d050      	beq.n	85ae <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    850c:	9b07      	ldr	r3, [sp, #28]
    850e:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    8510:	9b05      	ldr	r3, [sp, #20]
    8512:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    8516:	2b00      	cmp	r3, #0
    8518:	d00b      	beq.n	8532 <FlexCAN_IRQHandler+0x92>
    851a:	9b07      	ldr	r3, [sp, #28]
    851c:	2b07      	cmp	r3, #7
    851e:	d808      	bhi.n	8532 <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    8520:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8524:	9907      	ldr	r1, [sp, #28]
    8526:	4618      	mov	r0, r3
    8528:	f7ff fac2 	bl	7ab0 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    852c:	2300      	movs	r3, #0
    852e:	9309      	str	r3, [sp, #36]	; 0x24
    8530:	e00d      	b.n	854e <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    8532:	9a05      	ldr	r2, [sp, #20]
    8534:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8536:	011b      	lsls	r3, r3, #4
    8538:	4413      	add	r3, r2
    853a:	3304      	adds	r3, #4
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	2b01      	cmp	r3, #1
    8540:	d105      	bne.n	854e <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    8542:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8546:	9907      	ldr	r1, [sp, #28]
    8548:	4618      	mov	r0, r3
    854a:	f7ff f929 	bl	77a0 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    854e:	9a05      	ldr	r2, [sp, #20]
    8550:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8552:	011b      	lsls	r3, r3, #4
    8554:	4413      	add	r3, r2
    8556:	3304      	adds	r3, #4
    8558:	681b      	ldr	r3, [r3, #0]
    855a:	2b02      	cmp	r3, #2
    855c:	d105      	bne.n	856a <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    855e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8562:	9907      	ldr	r1, [sp, #28]
    8564:	4618      	mov	r0, r3
    8566:	f7ff fa09 	bl	797c <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    856a:	9907      	ldr	r1, [sp, #28]
    856c:	9806      	ldr	r0, [sp, #24]
    856e:	f7fe fdfe 	bl	716e <FlexCAN_GetMsgBuffIntStatusFlag>
    8572:	4603      	mov	r3, r0
    8574:	2b00      	cmp	r3, #0
    8576:	d01a      	beq.n	85ae <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    8578:	9a05      	ldr	r2, [sp, #20]
    857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    857c:	011b      	lsls	r3, r3, #4
    857e:	4413      	add	r3, r2
    8580:	3304      	adds	r3, #4
    8582:	681b      	ldr	r3, [r3, #0]
    8584:	2b00      	cmp	r3, #0
    8586:	d112      	bne.n	85ae <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8588:	9907      	ldr	r1, [sp, #28]
    858a:	9806      	ldr	r0, [sp, #24]
    858c:	f7fe fc3e 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    8590:	e00d      	b.n	85ae <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    8592:	9b02      	ldr	r3, [sp, #8]
    8594:	9307      	str	r3, [sp, #28]
    8596:	e006      	b.n	85a6 <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8598:	9907      	ldr	r1, [sp, #28]
    859a:	9806      	ldr	r0, [sp, #24]
    859c:	f7fe fc36 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    85a0:	9b07      	ldr	r3, [sp, #28]
    85a2:	3301      	adds	r3, #1
    85a4:	9307      	str	r3, [sp, #28]
    85a6:	9a07      	ldr	r2, [sp, #28]
    85a8:	9b01      	ldr	r3, [sp, #4]
    85aa:	429a      	cmp	r2, r3
    85ac:	d9f4      	bls.n	8598 <FlexCAN_IRQHandler+0xf8>
}
    85ae:	bf00      	nop
    85b0:	b00b      	add	sp, #44	; 0x2c
    85b2:	f85d fb04 	ldr.w	pc, [sp], #4
    85b6:	bf00      	nop
    85b8:	0000c9cc 	.word	0x0000c9cc
    85bc:	1fff8f98 	.word	0x1fff8f98

000085c0 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    85c0:	b084      	sub	sp, #16
    85c2:	4603      	mov	r3, r0
    85c4:	9100      	str	r1, [sp, #0]
    85c6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    85ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85ce:	4a05      	ldr	r2, [pc, #20]	; (85e4 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    85d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85d4:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    85d6:	9b03      	ldr	r3, [sp, #12]
    85d8:	9a00      	ldr	r2, [sp, #0]
    85da:	621a      	str	r2, [r3, #32]
}
    85dc:	bf00      	nop
    85de:	b004      	add	sp, #16
    85e0:	4770      	bx	lr
    85e2:	bf00      	nop
    85e4:	0000c9cc 	.word	0x0000c9cc

000085e8 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    85e8:	b084      	sub	sp, #16
    85ea:	4603      	mov	r3, r0
    85ec:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    85f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85f4:	4a04      	ldr	r2, [pc, #16]	; (8608 <FlexCAN_Ip_GetErrorStatus+0x20>)
    85f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85fa:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    85fc:	9b03      	ldr	r3, [sp, #12]
    85fe:	6a1b      	ldr	r3, [r3, #32]
}
    8600:	4618      	mov	r0, r3
    8602:	b004      	add	sp, #16
    8604:	4770      	bx	lr
    8606:	bf00      	nop
    8608:	0000c9cc 	.word	0x0000c9cc

0000860c <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    860c:	b084      	sub	sp, #16
    860e:	4603      	mov	r3, r0
    8610:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8614:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8618:	4a04      	ldr	r2, [pc, #16]	; (862c <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    861a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    861e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    8620:	9b03      	ldr	r3, [sp, #12]
    8622:	69db      	ldr	r3, [r3, #28]
    8624:	b2db      	uxtb	r3, r3
}
    8626:	4618      	mov	r0, r3
    8628:	b004      	add	sp, #16
    862a:	4770      	bx	lr
    862c:	0000c9cc 	.word	0x0000c9cc

00008630 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    8630:	b084      	sub	sp, #16
    8632:	4603      	mov	r3, r0
    8634:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8638:	f89d 3007 	ldrb.w	r3, [sp, #7]
    863c:	4a05      	ldr	r2, [pc, #20]	; (8654 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    863e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8642:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    8644:	9b03      	ldr	r3, [sp, #12]
    8646:	69db      	ldr	r3, [r3, #28]
    8648:	0a1b      	lsrs	r3, r3, #8
    864a:	b2db      	uxtb	r3, r3
}
    864c:	4618      	mov	r0, r3
    864e:	b004      	add	sp, #16
    8650:	4770      	bx	lr
    8652:	bf00      	nop
    8654:	0000c9cc 	.word	0x0000c9cc

00008658 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    8658:	b510      	push	{r4, lr}
    865a:	b086      	sub	sp, #24
    865c:	4603      	mov	r3, r0
    865e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8662:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8666:	4a29      	ldr	r2, [pc, #164]	; (870c <FlexCAN_Error_IRQHandler+0xb4>)
    8668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    866c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    866e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8672:	4a27      	ldr	r2, [pc, #156]	; (8710 <FlexCAN_Error_IRQHandler+0xb8>)
    8674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8678:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    867a:	2300      	movs	r3, #0
    867c:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    867e:	9b03      	ldr	r3, [sp, #12]
    8680:	2b00      	cmp	r3, #0
    8682:	d03d      	beq.n	8700 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    8684:	9b04      	ldr	r3, [sp, #16]
    8686:	6a1b      	ldr	r3, [r3, #32]
    8688:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    868a:	9b05      	ldr	r3, [sp, #20]
    868c:	f003 0302 	and.w	r3, r3, #2
    8690:	2b00      	cmp	r3, #0
    8692:	d019      	beq.n	86c8 <FlexCAN_Error_IRQHandler+0x70>
    8694:	9b04      	ldr	r3, [sp, #16]
    8696:	685b      	ldr	r3, [r3, #4]
    8698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    869c:	2b00      	cmp	r3, #0
    869e:	d013      	beq.n	86c8 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    86a0:	9b04      	ldr	r3, [sp, #16]
    86a2:	2202      	movs	r2, #2
    86a4:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    86a6:	9b03      	ldr	r3, [sp, #12]
    86a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    86ac:	2b00      	cmp	r3, #0
    86ae:	d00b      	beq.n	86c8 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    86b0:	9b03      	ldr	r3, [sp, #12]
    86b2:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    86b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    86ba:	9b03      	ldr	r3, [sp, #12]
    86bc:	9a05      	ldr	r2, [sp, #20]
    86be:	2105      	movs	r1, #5
    86c0:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    86c2:	9b04      	ldr	r3, [sp, #16]
    86c4:	6a1b      	ldr	r3, [r3, #32]
    86c6:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    86c8:	9b05      	ldr	r3, [sp, #20]
    86ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    86ce:	2b00      	cmp	r3, #0
    86d0:	d019      	beq.n	8706 <FlexCAN_Error_IRQHandler+0xae>
    86d2:	9b04      	ldr	r3, [sp, #16]
    86d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    86d6:	2b00      	cmp	r3, #0
    86d8:	da15      	bge.n	8706 <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    86da:	9b04      	ldr	r3, [sp, #16]
    86dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    86e0:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    86e2:	9b03      	ldr	r3, [sp, #12]
    86e4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    86e8:	2b00      	cmp	r3, #0
    86ea:	d00c      	beq.n	8706 <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    86ec:	9b03      	ldr	r3, [sp, #12]
    86ee:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    86f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    86f6:	9b03      	ldr	r3, [sp, #12]
    86f8:	9a05      	ldr	r2, [sp, #20]
    86fa:	2106      	movs	r1, #6
    86fc:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    86fe:	e002      	b.n	8706 <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    8700:	9b04      	ldr	r3, [sp, #16]
    8702:	4a04      	ldr	r2, [pc, #16]	; (8714 <FlexCAN_Error_IRQHandler+0xbc>)
    8704:	621a      	str	r2, [r3, #32]
}
    8706:	bf00      	nop
    8708:	b006      	add	sp, #24
    870a:	bd10      	pop	{r4, pc}
    870c:	0000c9cc 	.word	0x0000c9cc
    8710:	1fff8f98 	.word	0x1fff8f98
    8714:	00300002 	.word	0x00300002

00008718 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    8718:	b510      	push	{r4, lr}
    871a:	b086      	sub	sp, #24
    871c:	4603      	mov	r3, r0
    871e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8722:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8726:	4a3a      	ldr	r2, [pc, #232]	; (8810 <FlexCAN_BusOff_IRQHandler+0xf8>)
    8728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    872c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    872e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8732:	4a38      	ldr	r2, [pc, #224]	; (8814 <FlexCAN_BusOff_IRQHandler+0xfc>)
    8734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8738:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    873a:	2300      	movs	r3, #0
    873c:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    873e:	9b03      	ldr	r3, [sp, #12]
    8740:	2b00      	cmp	r3, #0
    8742:	d05f      	beq.n	8804 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    8744:	9b04      	ldr	r3, [sp, #16]
    8746:	6a1b      	ldr	r3, [r3, #32]
    8748:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    874a:	9b05      	ldr	r3, [sp, #20]
    874c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8750:	2b00      	cmp	r3, #0
    8752:	d01a      	beq.n	878a <FlexCAN_BusOff_IRQHandler+0x72>
    8754:	9b04      	ldr	r3, [sp, #16]
    8756:	685b      	ldr	r3, [r3, #4]
    8758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    875c:	2b00      	cmp	r3, #0
    875e:	d014      	beq.n	878a <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    8760:	9b04      	ldr	r3, [sp, #16]
    8762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8766:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    8768:	9b03      	ldr	r3, [sp, #12]
    876a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    876e:	2b00      	cmp	r3, #0
    8770:	d00b      	beq.n	878a <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    8772:	9b03      	ldr	r3, [sp, #12]
    8774:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    8778:	f89d 0007 	ldrb.w	r0, [sp, #7]
    877c:	9b03      	ldr	r3, [sp, #12]
    877e:	9a05      	ldr	r2, [sp, #20]
    8780:	2109      	movs	r1, #9
    8782:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    8784:	9b04      	ldr	r3, [sp, #16]
    8786:	6a1b      	ldr	r3, [r3, #32]
    8788:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    878a:	9b05      	ldr	r3, [sp, #20]
    878c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8790:	2b00      	cmp	r3, #0
    8792:	d01a      	beq.n	87ca <FlexCAN_BusOff_IRQHandler+0xb2>
    8794:	9b04      	ldr	r3, [sp, #16]
    8796:	685b      	ldr	r3, [r3, #4]
    8798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    879c:	2b00      	cmp	r3, #0
    879e:	d014      	beq.n	87ca <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    87a0:	9b04      	ldr	r3, [sp, #16]
    87a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    87a6:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    87a8:	9b03      	ldr	r3, [sp, #12]
    87aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    87ae:	2b00      	cmp	r3, #0
    87b0:	d00b      	beq.n	87ca <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    87b2:	9b03      	ldr	r3, [sp, #12]
    87b4:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    87b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    87bc:	9b03      	ldr	r3, [sp, #12]
    87be:	9a05      	ldr	r2, [sp, #20]
    87c0:	2108      	movs	r1, #8
    87c2:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    87c4:	9b04      	ldr	r3, [sp, #16]
    87c6:	6a1b      	ldr	r3, [r3, #32]
    87c8:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    87ca:	9b05      	ldr	r3, [sp, #20]
    87cc:	f003 0304 	and.w	r3, r3, #4
    87d0:	2b00      	cmp	r3, #0
    87d2:	d01a      	beq.n	880a <FlexCAN_BusOff_IRQHandler+0xf2>
    87d4:	9b04      	ldr	r3, [sp, #16]
    87d6:	685b      	ldr	r3, [r3, #4]
    87d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    87dc:	2b00      	cmp	r3, #0
    87de:	d014      	beq.n	880a <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    87e0:	9b04      	ldr	r3, [sp, #16]
    87e2:	2204      	movs	r2, #4
    87e4:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    87e6:	9b03      	ldr	r3, [sp, #12]
    87e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    87ec:	2b00      	cmp	r3, #0
    87ee:	d00c      	beq.n	880a <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    87f0:	9b03      	ldr	r3, [sp, #12]
    87f2:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    87f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    87fa:	9b03      	ldr	r3, [sp, #12]
    87fc:	9a05      	ldr	r2, [sp, #20]
    87fe:	2107      	movs	r1, #7
    8800:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    8802:	e002      	b.n	880a <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    8804:	9b04      	ldr	r3, [sp, #16]
    8806:	4a04      	ldr	r2, [pc, #16]	; (8818 <FlexCAN_BusOff_IRQHandler+0x100>)
    8808:	621a      	str	r2, [r3, #32]
}
    880a:	bf00      	nop
    880c:	b006      	add	sp, #24
    880e:	bd10      	pop	{r4, pc}
    8810:	0000c9cc 	.word	0x0000c9cc
    8814:	1fff8f98 	.word	0x1fff8f98
    8818:	000b0004 	.word	0x000b0004

0000881c <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    881c:	b500      	push	{lr}
    881e:	b091      	sub	sp, #68	; 0x44
    8820:	9204      	str	r2, [sp, #16]
    8822:	9303      	str	r3, [sp, #12]
    8824:	4603      	mov	r3, r0
    8826:	f88d 3017 	strb.w	r3, [sp, #23]
    882a:	460b      	mov	r3, r1
    882c:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8830:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8834:	4a5f      	ldr	r2, [pc, #380]	; (89b4 <FlexCAN_Ip_SendBlocking+0x198>)
    8836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    883a:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    883c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8840:	4a5d      	ldr	r2, [pc, #372]	; (89b8 <FlexCAN_Ip_SendBlocking+0x19c>)
    8842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8846:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    8848:	2300      	movs	r3, #0
    884a:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    884c:	2300      	movs	r3, #0
    884e:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8856:	fb02 f303 	mul.w	r3, r2, r3
    885a:	2100      	movs	r1, #0
    885c:	4618      	mov	r0, r3
    885e:	f7f8 fc93 	bl	1188 <OsIf_MicrosToTicks>
    8862:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    8864:	2300      	movs	r3, #0
    8866:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    8868:	2300      	movs	r3, #0
    886a:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    886c:	2300      	movs	r3, #0
    886e:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    8870:	f89d 1016 	ldrb.w	r1, [sp, #22]
    8874:	f89d 0017 	ldrb.w	r0, [sp, #23]
    8878:	9b12      	ldr	r3, [sp, #72]	; 0x48
    887a:	9300      	str	r3, [sp, #0]
    887c:	9b03      	ldr	r3, [sp, #12]
    887e:	9a04      	ldr	r2, [sp, #16]
    8880:	f7fe feaa 	bl	75d8 <FlexCAN_StartSendData>
    8884:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    8886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8888:	2b00      	cmp	r3, #0
    888a:	f040 808d 	bne.w	89a8 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    888e:	2000      	movs	r0, #0
    8890:	f7f8 fc2e 	bl	10f0 <OsIf_GetCounter>
    8894:	4603      	mov	r3, r0
    8896:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    8898:	e00f      	b.n	88ba <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    889a:	ab07      	add	r3, sp, #28
    889c:	2100      	movs	r1, #0
    889e:	4618      	mov	r0, r3
    88a0:	f7f8 fc3f 	bl	1122 <OsIf_GetElapsed>
    88a4:	4602      	mov	r2, r0
    88a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88a8:	4413      	add	r3, r2
    88aa:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    88ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    88ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    88b0:	429a      	cmp	r2, r3
    88b2:	d302      	bcc.n	88ba <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    88b4:	2303      	movs	r3, #3
    88b6:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    88b8:	e008      	b.n	88cc <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    88ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    88be:	4619      	mov	r1, r3
    88c0:	980d      	ldr	r0, [sp, #52]	; 0x34
    88c2:	f7fe fab6 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    88c6:	4603      	mov	r3, r0
    88c8:	2b01      	cmp	r3, #1
    88ca:	d1e6      	bne.n	889a <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    88cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88ce:	2b03      	cmp	r3, #3
    88d0:	d15c      	bne.n	898c <FlexCAN_Ip_SendBlocking+0x170>
    88d2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    88d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    88d8:	011b      	lsls	r3, r3, #4
    88da:	4413      	add	r3, r2
    88dc:	3304      	adds	r3, #4
    88de:	681b      	ldr	r3, [r3, #0]
    88e0:	2b00      	cmp	r3, #0
    88e2:	d053      	beq.n	898c <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    88e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    88e8:	4619      	mov	r1, r3
    88ea:	980d      	ldr	r0, [sp, #52]	; 0x34
    88ec:	f7fe fa8e 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    88f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    88f4:	4619      	mov	r1, r3
    88f6:	980d      	ldr	r0, [sp, #52]	; 0x34
    88f8:	f001 f968 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    88fc:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    88fe:	9b08      	ldr	r3, [sp, #32]
    8900:	681b      	ldr	r3, [r3, #0]
    8902:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    8904:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8906:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    890a:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    890e:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    8912:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    8914:	9b08      	ldr	r3, [sp, #32]
    8916:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8918:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    891a:	2100      	movs	r1, #0
    891c:	4827      	ldr	r0, [pc, #156]	; (89bc <FlexCAN_Ip_SendBlocking+0x1a0>)
    891e:	f7f8 fc33 	bl	1188 <OsIf_MicrosToTicks>
    8922:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8924:	2000      	movs	r0, #0
    8926:	f7f8 fbe3 	bl	10f0 <OsIf_GetCounter>
    892a:	4603      	mov	r3, r0
    892c:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    892e:	2300      	movs	r3, #0
    8930:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    8932:	e00f      	b.n	8954 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8934:	ab07      	add	r3, sp, #28
    8936:	2100      	movs	r1, #0
    8938:	4618      	mov	r0, r3
    893a:	f7f8 fbf2 	bl	1122 <OsIf_GetElapsed>
    893e:	4602      	mov	r2, r0
    8940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8942:	4413      	add	r3, r2
    8944:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    8946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    894a:	429a      	cmp	r2, r3
    894c:	d302      	bcc.n	8954 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    894e:	2303      	movs	r3, #3
    8950:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    8952:	e008      	b.n	8966 <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    8954:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8958:	4619      	mov	r1, r3
    895a:	980d      	ldr	r0, [sp, #52]	; 0x34
    895c:	f7fe fa69 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    8960:	4603      	mov	r3, r0
    8962:	2b00      	cmp	r3, #0
    8964:	d0e6      	beq.n	8934 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    8966:	9b08      	ldr	r3, [sp, #32]
    8968:	681b      	ldr	r3, [r3, #0]
    896a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    896c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    896e:	0e1b      	lsrs	r3, r3, #24
    8970:	f003 030f 	and.w	r3, r3, #15
    8974:	2b08      	cmp	r3, #8
    8976:	d101      	bne.n	897c <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    8978:	2300      	movs	r3, #0
    897a:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    897e:	0e1b      	lsrs	r3, r3, #24
    8980:	f003 030f 	and.w	r3, r3, #15
    8984:	2b09      	cmp	r3, #9
    8986:	d101      	bne.n	898c <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    8988:	2303      	movs	r3, #3
    898a:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    898c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8990:	4619      	mov	r1, r3
    8992:	980d      	ldr	r0, [sp, #52]	; 0x34
    8994:	f7fe fa3a 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8998:	f89d 3016 	ldrb.w	r3, [sp, #22]
    899c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899e:	011b      	lsls	r3, r3, #4
    89a0:	4413      	add	r3, r2
    89a2:	3304      	adds	r3, #4
    89a4:	2200      	movs	r2, #0
    89a6:	601a      	str	r2, [r3, #0]
    }
    return result;
    89a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    89aa:	4618      	mov	r0, r3
    89ac:	b011      	add	sp, #68	; 0x44
    89ae:	f85d fb04 	ldr.w	pc, [sp], #4
    89b2:	bf00      	nop
    89b4:	0000c9cc 	.word	0x0000c9cc
    89b8:	1fff8f98 	.word	0x1fff8f98
    89bc:	000f4240 	.word	0x000f4240

000089c0 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    89c0:	b500      	push	{lr}
    89c2:	b087      	sub	sp, #28
    89c4:	4603      	mov	r3, r0
    89c6:	9100      	str	r1, [sp, #0]
    89c8:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    89cc:	2300      	movs	r3, #0
    89ce:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    89d0:	2300      	movs	r3, #0
    89d2:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    89d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89d8:	4a1c      	ldr	r2, [pc, #112]	; (8a4c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    89da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89de:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    89e0:	9803      	ldr	r0, [sp, #12]
    89e2:	f7fe f9b9 	bl	6d58 <FlexCAN_IsEnabled>
    89e6:	4603      	mov	r3, r0
    89e8:	2b00      	cmp	r3, #0
    89ea:	bf14      	ite	ne
    89ec:	2301      	movne	r3, #1
    89ee:	2300      	moveq	r3, #0
    89f0:	b2db      	uxtb	r3, r3
    89f2:	f083 0301 	eor.w	r3, r3, #1
    89f6:	b2db      	uxtb	r3, r3
    89f8:	f88d 300b 	strb.w	r3, [sp, #11]
    89fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8a00:	f003 0301 	and.w	r3, r3, #1
    8a04:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8a08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8a0c:	2b00      	cmp	r3, #0
    8a0e:	d003      	beq.n	8a18 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    8a10:	9803      	ldr	r0, [sp, #12]
    8a12:	f001 f9c3 	bl	9d9c <FlexCAN_Enable>
    8a16:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8a18:	9b05      	ldr	r3, [sp, #20]
    8a1a:	2b00      	cmp	r3, #0
    8a1c:	d103      	bne.n	8a26 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    8a1e:	9900      	ldr	r1, [sp, #0]
    8a20:	9803      	ldr	r0, [sp, #12]
    8a22:	f7fe fbc3 	bl	71ac <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    8a26:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8a2a:	2b00      	cmp	r3, #0
    8a2c:	d008      	beq.n	8a40 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    8a2e:	9803      	ldr	r0, [sp, #12]
    8a30:	f001 fa32 	bl	9e98 <FlexCAN_Disable>
    8a34:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8a36:	9b04      	ldr	r3, [sp, #16]
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d001      	beq.n	8a40 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    8a3c:	9b04      	ldr	r3, [sp, #16]
    8a3e:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    8a40:	9b05      	ldr	r3, [sp, #20]
}
    8a42:	4618      	mov	r0, r3
    8a44:	b007      	add	sp, #28
    8a46:	f85d fb04 	ldr.w	pc, [sp], #4
    8a4a:	bf00      	nop
    8a4c:	0000c9cc 	.word	0x0000c9cc

00008a50 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    8a50:	b500      	push	{lr}
    8a52:	b085      	sub	sp, #20
    8a54:	4603      	mov	r3, r0
    8a56:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8a5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a5e:	4a06      	ldr	r2, [pc, #24]	; (8a78 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    8a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a64:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    8a66:	9803      	ldr	r0, [sp, #12]
    8a68:	f001 f94c 	bl	9d04 <FlexCAN_EnterFreezeMode>
    8a6c:	4603      	mov	r3, r0
}
    8a6e:	4618      	mov	r0, r3
    8a70:	b005      	add	sp, #20
    8a72:	f85d fb04 	ldr.w	pc, [sp], #4
    8a76:	bf00      	nop
    8a78:	0000c9cc 	.word	0x0000c9cc

00008a7c <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    8a7c:	b500      	push	{lr}
    8a7e:	b085      	sub	sp, #20
    8a80:	4603      	mov	r3, r0
    8a82:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8a86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a8a:	4a06      	ldr	r2, [pc, #24]	; (8aa4 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    8a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a90:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    8a92:	9803      	ldr	r0, [sp, #12]
    8a94:	f001 f9be 	bl	9e14 <FlexCAN_ExitFreezeMode>
    8a98:	4603      	mov	r3, r0
}
    8a9a:	4618      	mov	r0, r3
    8a9c:	b005      	add	sp, #20
    8a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    8aa2:	bf00      	nop
    8aa4:	0000c9cc 	.word	0x0000c9cc

00008aa8 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    8aa8:	b500      	push	{lr}
    8aaa:	b087      	sub	sp, #28
    8aac:	4603      	mov	r3, r0
    8aae:	9200      	str	r2, [sp, #0]
    8ab0:	f88d 3007 	strb.w	r3, [sp, #7]
    8ab4:	460b      	mov	r3, r1
    8ab6:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8aba:	2300      	movs	r3, #0
    8abc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8abe:	2300      	movs	r3, #0
    8ac0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ac6:	4a1e      	ldr	r2, [pc, #120]	; (8b40 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    8ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8acc:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8ace:	9803      	ldr	r0, [sp, #12]
    8ad0:	f7fe f942 	bl	6d58 <FlexCAN_IsEnabled>
    8ad4:	4603      	mov	r3, r0
    8ad6:	2b00      	cmp	r3, #0
    8ad8:	bf14      	ite	ne
    8ada:	2301      	movne	r3, #1
    8adc:	2300      	moveq	r3, #0
    8ade:	b2db      	uxtb	r3, r3
    8ae0:	f083 0301 	eor.w	r3, r3, #1
    8ae4:	b2db      	uxtb	r3, r3
    8ae6:	f88d 300b 	strb.w	r3, [sp, #11]
    8aea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8aee:	f003 0301 	and.w	r3, r3, #1
    8af2:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8af6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8afa:	2b00      	cmp	r3, #0
    8afc:	d003      	beq.n	8b06 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    8afe:	9803      	ldr	r0, [sp, #12]
    8b00:	f001 f94c 	bl	9d9c <FlexCAN_Enable>
    8b04:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8b06:	9b05      	ldr	r3, [sp, #20]
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d106      	bne.n	8b1a <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    8b0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8b10:	9a00      	ldr	r2, [sp, #0]
    8b12:	4619      	mov	r1, r3
    8b14:	9803      	ldr	r0, [sp, #12]
    8b16:	f7fe fb52 	bl	71be <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    8b1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8b1e:	2b00      	cmp	r3, #0
    8b20:	d008      	beq.n	8b34 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    8b22:	9803      	ldr	r0, [sp, #12]
    8b24:	f001 f9b8 	bl	9e98 <FlexCAN_Disable>
    8b28:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8b2a:	9b04      	ldr	r3, [sp, #16]
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d001      	beq.n	8b34 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    8b30:	9b04      	ldr	r3, [sp, #16]
    8b32:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    8b34:	9b05      	ldr	r3, [sp, #20]
}
    8b36:	4618      	mov	r0, r3
    8b38:	b007      	add	sp, #28
    8b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    8b3e:	bf00      	nop
    8b40:	0000c9cc 	.word	0x0000c9cc

00008b44 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    8b44:	b500      	push	{lr}
    8b46:	b087      	sub	sp, #28
    8b48:	4603      	mov	r3, r0
    8b4a:	9100      	str	r1, [sp, #0]
    8b4c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8b50:	2300      	movs	r3, #0
    8b52:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8b54:	2300      	movs	r3, #0
    8b56:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8b58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8b5c:	4a1c      	ldr	r2, [pc, #112]	; (8bd0 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    8b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b62:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8b64:	9803      	ldr	r0, [sp, #12]
    8b66:	f7fe f8f7 	bl	6d58 <FlexCAN_IsEnabled>
    8b6a:	4603      	mov	r3, r0
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	bf14      	ite	ne
    8b70:	2301      	movne	r3, #1
    8b72:	2300      	moveq	r3, #0
    8b74:	b2db      	uxtb	r3, r3
    8b76:	f083 0301 	eor.w	r3, r3, #1
    8b7a:	b2db      	uxtb	r3, r3
    8b7c:	f88d 300b 	strb.w	r3, [sp, #11]
    8b80:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8b84:	f003 0301 	and.w	r3, r3, #1
    8b88:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8b8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8b90:	2b00      	cmp	r3, #0
    8b92:	d003      	beq.n	8b9c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    8b94:	9803      	ldr	r0, [sp, #12]
    8b96:	f001 f901 	bl	9d9c <FlexCAN_Enable>
    8b9a:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8b9c:	9b05      	ldr	r3, [sp, #20]
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d103      	bne.n	8baa <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    8ba2:	9900      	ldr	r1, [sp, #0]
    8ba4:	9803      	ldr	r0, [sp, #12]
    8ba6:	f7fe f8a7 	bl	6cf8 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    8baa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d008      	beq.n	8bc4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    8bb2:	9803      	ldr	r0, [sp, #12]
    8bb4:	f001 f970 	bl	9e98 <FlexCAN_Disable>
    8bb8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8bba:	9b04      	ldr	r3, [sp, #16]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d001      	beq.n	8bc4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    8bc0:	9b04      	ldr	r3, [sp, #16]
    8bc2:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    8bc4:	9b05      	ldr	r3, [sp, #20]
}
    8bc6:	4618      	mov	r0, r3
    8bc8:	b007      	add	sp, #28
    8bca:	f85d fb04 	ldr.w	pc, [sp], #4
    8bce:	bf00      	nop
    8bd0:	0000c9cc 	.word	0x0000c9cc

00008bd4 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    8bd4:	b500      	push	{lr}
    8bd6:	b085      	sub	sp, #20
    8bd8:	4603      	mov	r3, r0
    8bda:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8be2:	4a0e      	ldr	r2, [pc, #56]	; (8c1c <FlexCAN_Ip_Deinit_Privileged+0x48>)
    8be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be8:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    8bea:	9803      	ldr	r0, [sp, #12]
    8bec:	f001 f88a 	bl	9d04 <FlexCAN_EnterFreezeMode>
    8bf0:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    8bf2:	9b02      	ldr	r3, [sp, #8]
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d10b      	bne.n	8c10 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    8bf8:	9803      	ldr	r0, [sp, #12]
    8bfa:	f7fe fb18 	bl	722e <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    8bfe:	9803      	ldr	r0, [sp, #12]
    8c00:	f001 f94a 	bl	9e98 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    8c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c08:	4a05      	ldr	r2, [pc, #20]	; (8c20 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    8c0a:	2100      	movs	r1, #0
    8c0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    8c10:	9b02      	ldr	r3, [sp, #8]
}
    8c12:	4618      	mov	r0, r3
    8c14:	b005      	add	sp, #20
    8c16:	f85d fb04 	ldr.w	pc, [sp], #4
    8c1a:	bf00      	nop
    8c1c:	0000c9cc 	.word	0x0000c9cc
    8c20:	1fff8f98 	.word	0x1fff8f98

00008c24 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    8c24:	b500      	push	{lr}
    8c26:	b085      	sub	sp, #20
    8c28:	4603      	mov	r3, r0
    8c2a:	460a      	mov	r2, r1
    8c2c:	f88d 3007 	strb.w	r3, [sp, #7]
    8c30:	4613      	mov	r3, r2
    8c32:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c3a:	4a22      	ldr	r2, [pc, #136]	; (8cc4 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    8c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c40:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c46:	4a20      	ldr	r2, [pc, #128]	; (8cc8 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    8c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c4c:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    8c4e:	9b02      	ldr	r3, [sp, #8]
    8c50:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    8c54:	2b00      	cmp	r3, #0
    8c56:	d015      	beq.n	8c84 <FlexCAN_Ip_MainFunctionRead+0x60>
    8c58:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c5c:	2b07      	cmp	r3, #7
    8c5e:	d811      	bhi.n	8c84 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    8c60:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c64:	2b00      	cmp	r3, #0
    8c66:	d128      	bne.n	8cba <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    8c68:	2105      	movs	r1, #5
    8c6a:	9803      	ldr	r0, [sp, #12]
    8c6c:	f7fe f8e1 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    8c70:	4603      	mov	r3, r0
    8c72:	2b00      	cmp	r3, #0
    8c74:	d021      	beq.n	8cba <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    8c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c7a:	2105      	movs	r1, #5
    8c7c:	4618      	mov	r0, r3
    8c7e:	f7fe ff17 	bl	7ab0 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    8c82:	e01a      	b.n	8cba <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    8c84:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c88:	4619      	mov	r1, r3
    8c8a:	9803      	ldr	r0, [sp, #12]
    8c8c:	f7fe f8d1 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    8c90:	4603      	mov	r3, r0
    8c92:	2b00      	cmp	r3, #0
    8c94:	d012      	beq.n	8cbc <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8c96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c9a:	9a02      	ldr	r2, [sp, #8]
    8c9c:	011b      	lsls	r3, r3, #4
    8c9e:	4413      	add	r3, r2
    8ca0:	3304      	adds	r3, #4
    8ca2:	681b      	ldr	r3, [r3, #0]
    8ca4:	2b01      	cmp	r3, #1
    8ca6:	d109      	bne.n	8cbc <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    8ca8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cb0:	4611      	mov	r1, r2
    8cb2:	4618      	mov	r0, r3
    8cb4:	f7fe fd74 	bl	77a0 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    8cb8:	e000      	b.n	8cbc <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    8cba:	bf00      	nop
}
    8cbc:	bf00      	nop
    8cbe:	b005      	add	sp, #20
    8cc0:	f85d fb04 	ldr.w	pc, [sp], #4
    8cc4:	0000c9cc 	.word	0x0000c9cc
    8cc8:	1fff8f98 	.word	0x1fff8f98

00008ccc <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    8ccc:	b510      	push	{r4, lr}
    8cce:	b086      	sub	sp, #24
    8cd0:	4603      	mov	r3, r0
    8cd2:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8cd6:	2301      	movs	r3, #1
    8cd8:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8cda:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cde:	4a15      	ldr	r2, [pc, #84]	; (8d34 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    8ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ce4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8ce6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cea:	4a13      	ldr	r2, [pc, #76]	; (8d38 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    8cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cf0:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    8cf2:	2300      	movs	r3, #0
    8cf4:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    8cf6:	9b04      	ldr	r3, [sp, #16]
    8cf8:	6a1b      	ldr	r3, [r3, #32]
    8cfa:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    8cfc:	9b02      	ldr	r3, [sp, #8]
    8cfe:	f003 0304 	and.w	r3, r3, #4
    8d02:	2b00      	cmp	r3, #0
    8d04:	d012      	beq.n	8d2c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    8d06:	9b03      	ldr	r3, [sp, #12]
    8d08:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    8d0c:	2b00      	cmp	r3, #0
    8d0e:	d008      	beq.n	8d22 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    8d10:	9b03      	ldr	r3, [sp, #12]
    8d12:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    8d16:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8d1a:	9b03      	ldr	r3, [sp, #12]
    8d1c:	9a02      	ldr	r2, [sp, #8]
    8d1e:	2107      	movs	r1, #7
    8d20:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    8d22:	9b04      	ldr	r3, [sp, #16]
    8d24:	2204      	movs	r2, #4
    8d26:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    8d28:	2300      	movs	r3, #0
    8d2a:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    8d2c:	9b05      	ldr	r3, [sp, #20]
}
    8d2e:	4618      	mov	r0, r3
    8d30:	b006      	add	sp, #24
    8d32:	bd10      	pop	{r4, pc}
    8d34:	0000c9cc 	.word	0x0000c9cc
    8d38:	1fff8f98 	.word	0x1fff8f98

00008d3c <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    8d3c:	b510      	push	{r4, lr}
    8d3e:	b098      	sub	sp, #96	; 0x60
    8d40:	4603      	mov	r3, r0
    8d42:	460a      	mov	r2, r1
    8d44:	f88d 3007 	strb.w	r3, [sp, #7]
    8d48:	4613      	mov	r3, r2
    8d4a:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d52:	4a3f      	ldr	r2, [pc, #252]	; (8e50 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    8d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d58:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d5e:	4a3d      	ldr	r2, [pc, #244]	; (8e54 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    8d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d64:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    8d66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d6a:	4619      	mov	r1, r3
    8d6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8d6e:	f7fe f860 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    8d72:	4603      	mov	r3, r0
    8d74:	2b00      	cmp	r3, #0
    8d76:	d068      	beq.n	8e4a <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    8d78:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8d7e:	011b      	lsls	r3, r3, #4
    8d80:	4413      	add	r3, r2
    8d82:	3304      	adds	r3, #4
    8d84:	681b      	ldr	r3, [r3, #0]
    8d86:	2b02      	cmp	r3, #2
    8d88:	d15f      	bne.n	8e4a <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    8d8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8d90:	011b      	lsls	r3, r3, #4
    8d92:	4413      	add	r3, r2
    8d94:	3309      	adds	r3, #9
    8d96:	781b      	ldrb	r3, [r3, #0]
    8d98:	2b00      	cmp	r3, #0
    8d9a:	d028      	beq.n	8dee <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    8d9c:	2300      	movs	r3, #0
    8d9e:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    8da0:	2300      	movs	r3, #0
    8da2:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    8da4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8da8:	4619      	mov	r1, r3
    8daa:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8dac:	f001 fa87 	bl	a2be <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    8db0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8db4:	aa02      	add	r2, sp, #8
    8db6:	4619      	mov	r1, r3
    8db8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8dba:	f001 fbaf 	bl	a51c <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    8dbe:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8dc0:	f7fe f81d 	bl	6dfe <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    8dc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8dc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8dca:	9916      	ldr	r1, [sp, #88]	; 0x58
    8dcc:	011b      	lsls	r3, r3, #4
    8dce:	440b      	add	r3, r1
    8dd0:	330c      	adds	r3, #12
    8dd2:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    8dd4:	9b02      	ldr	r3, [sp, #8]
    8dd6:	0e1b      	lsrs	r3, r3, #24
    8dd8:	f003 030f 	and.w	r3, r3, #15
    8ddc:	2b04      	cmp	r3, #4
    8dde:	d11d      	bne.n	8e1c <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8de0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8de4:	4619      	mov	r1, r3
    8de6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8de8:	f7fe f810 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
    8dec:	e016      	b.n	8e1c <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    8dee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8df2:	f89d 4006 	ldrb.w	r4, [sp, #6]
    8df6:	4619      	mov	r1, r3
    8df8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8dfa:	f001 fb7b 	bl	a4f4 <FlexCAN_GetMsgBuffTimestamp>
    8dfe:	4601      	mov	r1, r0
    8e00:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8e02:	0123      	lsls	r3, r4, #4
    8e04:	4413      	add	r3, r2
    8e06:	330c      	adds	r3, #12
    8e08:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    8e0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8e0c:	f7fd fff7 	bl	6dfe <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8e10:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e14:	4619      	mov	r1, r3
    8e16:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8e18:	f7fd fff8 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8e1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e20:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8e22:	011b      	lsls	r3, r3, #4
    8e24:	4413      	add	r3, r2
    8e26:	3304      	adds	r3, #4
    8e28:	2200      	movs	r2, #0
    8e2a:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    8e2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8e32:	2b00      	cmp	r3, #0
    8e34:	d009      	beq.n	8e4a <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    8e36:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8e38:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    8e3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8e40:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8e44:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8e46:	2104      	movs	r1, #4
    8e48:	47a0      	blx	r4
            }
        }
    }
}
    8e4a:	bf00      	nop
    8e4c:	b018      	add	sp, #96	; 0x60
    8e4e:	bd10      	pop	{r4, pc}
    8e50:	0000c9cc 	.word	0x0000c9cc
    8e54:	1fff8f98 	.word	0x1fff8f98

00008e58 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    8e58:	b084      	sub	sp, #16
    8e5a:	4603      	mov	r3, r0
    8e5c:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8e60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e64:	4a08      	ldr	r2, [pc, #32]	; (8e88 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    8e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e6a:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    8e6c:	9b03      	ldr	r3, [sp, #12]
    8e6e:	681b      	ldr	r3, [r3, #0]
    8e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    8e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8e78:	bf0c      	ite	eq
    8e7a:	2301      	moveq	r3, #1
    8e7c:	2300      	movne	r3, #0
    8e7e:	b2db      	uxtb	r3, r3
}
    8e80:	4618      	mov	r0, r3
    8e82:	b004      	add	sp, #16
    8e84:	4770      	bx	lr
    8e86:	bf00      	nop
    8e88:	0000c9cc 	.word	0x0000c9cc

00008e8c <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    8e8c:	b084      	sub	sp, #16
    8e8e:	4603      	mov	r3, r0
    8e90:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8e94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e98:	4a07      	ldr	r2, [pc, #28]	; (8eb8 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    8e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e9e:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    8ea0:	9b03      	ldr	r3, [sp, #12]
    8ea2:	681b      	ldr	r3, [r3, #0]
    8ea4:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    8ea8:	2b00      	cmp	r3, #0
    8eaa:	bf0c      	ite	eq
    8eac:	2301      	moveq	r3, #1
    8eae:	2300      	movne	r3, #0
    8eb0:	b2db      	uxtb	r3, r3
}
    8eb2:	4618      	mov	r0, r3
    8eb4:	b004      	add	sp, #16
    8eb6:	4770      	bx	lr
    8eb8:	0000c9cc 	.word	0x0000c9cc

00008ebc <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    8ebc:	b500      	push	{lr}
    8ebe:	b085      	sub	sp, #20
    8ec0:	4603      	mov	r3, r0
    8ec2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8eca:	4a0b      	ldr	r2, [pc, #44]	; (8ef8 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    8ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ed0:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    8ed2:	f002 fb93 	bl	b5fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    8ed6:	9b03      	ldr	r3, [sp, #12]
    8ed8:	681b      	ldr	r3, [r3, #0]
    8eda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    8ede:	9b03      	ldr	r3, [sp, #12]
    8ee0:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    8ee2:	f002 fbb7 	bl	b654 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    8ee6:	9803      	ldr	r0, [sp, #12]
    8ee8:	f000 ff94 	bl	9e14 <FlexCAN_ExitFreezeMode>
    8eec:	4603      	mov	r3, r0
}
    8eee:	4618      	mov	r0, r3
    8ef0:	b005      	add	sp, #20
    8ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ef6:	bf00      	nop
    8ef8:	0000c9cc 	.word	0x0000c9cc

00008efc <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    8efc:	b500      	push	{lr}
    8efe:	b085      	sub	sp, #20
    8f00:	4603      	mov	r3, r0
    8f02:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f0a:	4a0a      	ldr	r2, [pc, #40]	; (8f34 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    8f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f10:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    8f12:	9802      	ldr	r0, [sp, #8]
    8f14:	f000 fef6 	bl	9d04 <FlexCAN_EnterFreezeMode>
    8f18:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    8f1a:	9b03      	ldr	r3, [sp, #12]
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d103      	bne.n	8f28 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    8f20:	9802      	ldr	r0, [sp, #8]
    8f22:	f000 ffb9 	bl	9e98 <FlexCAN_Disable>
    8f26:	9003      	str	r0, [sp, #12]
    }
    return status;
    8f28:	9b03      	ldr	r3, [sp, #12]
}
    8f2a:	4618      	mov	r0, r3
    8f2c:	b005      	add	sp, #20
    8f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    8f32:	bf00      	nop
    8f34:	0000c9cc 	.word	0x0000c9cc

00008f38 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    8f38:	b500      	push	{lr}
    8f3a:	b087      	sub	sp, #28
    8f3c:	4603      	mov	r3, r0
    8f3e:	9100      	str	r1, [sp, #0]
    8f40:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8f44:	2300      	movs	r3, #0
    8f46:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8f48:	2300      	movs	r3, #0
    8f4a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f50:	4a1e      	ldr	r2, [pc, #120]	; (8fcc <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    8f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f56:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8f58:	9803      	ldr	r0, [sp, #12]
    8f5a:	f7fd fefd 	bl	6d58 <FlexCAN_IsEnabled>
    8f5e:	4603      	mov	r3, r0
    8f60:	2b00      	cmp	r3, #0
    8f62:	bf14      	ite	ne
    8f64:	2301      	movne	r3, #1
    8f66:	2300      	moveq	r3, #0
    8f68:	b2db      	uxtb	r3, r3
    8f6a:	f083 0301 	eor.w	r3, r3, #1
    8f6e:	b2db      	uxtb	r3, r3
    8f70:	f88d 300b 	strb.w	r3, [sp, #11]
    8f74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8f78:	f003 0301 	and.w	r3, r3, #1
    8f7c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8f80:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8f84:	2b00      	cmp	r3, #0
    8f86:	d003      	beq.n	8f90 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    8f88:	9803      	ldr	r0, [sp, #12]
    8f8a:	f000 ff07 	bl	9d9c <FlexCAN_Enable>
    8f8e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8f90:	9b05      	ldr	r3, [sp, #20]
    8f92:	2b00      	cmp	r3, #0
    8f94:	d107      	bne.n	8fa6 <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    8f96:	f002 fb83 	bl	b6a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    8f9a:	9900      	ldr	r1, [sp, #0]
    8f9c:	9803      	ldr	r0, [sp, #12]
    8f9e:	f7fe f930 	bl	7202 <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    8fa2:	f002 fba9 	bl	b6f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    8fa6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8faa:	2b00      	cmp	r3, #0
    8fac:	d008      	beq.n	8fc0 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    8fae:	9803      	ldr	r0, [sp, #12]
    8fb0:	f000 ff72 	bl	9e98 <FlexCAN_Disable>
    8fb4:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8fb6:	9b04      	ldr	r3, [sp, #16]
    8fb8:	2b00      	cmp	r3, #0
    8fba:	d001      	beq.n	8fc0 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    8fbc:	9b04      	ldr	r3, [sp, #16]
    8fbe:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    8fc0:	9b05      	ldr	r3, [sp, #20]
}
    8fc2:	4618      	mov	r0, r3
    8fc4:	b007      	add	sp, #28
    8fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    8fca:	bf00      	nop
    8fcc:	0000c9cc 	.word	0x0000c9cc

00008fd0 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    8fd0:	b500      	push	{lr}
    8fd2:	b087      	sub	sp, #28
    8fd4:	4603      	mov	r3, r0
    8fd6:	9100      	str	r1, [sp, #0]
    8fd8:	f88d 3007 	strb.w	r3, [sp, #7]
    8fdc:	4613      	mov	r3, r2
    8fde:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8fe2:	2300      	movs	r3, #0
    8fe4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8fe6:	2300      	movs	r3, #0
    8fe8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8fea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fee:	4a1c      	ldr	r2, [pc, #112]	; (9060 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    8ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ff4:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    8ff6:	9b03      	ldr	r3, [sp, #12]
    8ff8:	681b      	ldr	r3, [r3, #0]
    8ffa:	0fdb      	lsrs	r3, r3, #31
    8ffc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    9000:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9004:	2b00      	cmp	r3, #0
    9006:	d003      	beq.n	9010 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    9008:	9803      	ldr	r0, [sp, #12]
    900a:	f000 fec7 	bl	9d9c <FlexCAN_Enable>
    900e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9010:	9b05      	ldr	r3, [sp, #20]
    9012:	2b00      	cmp	r3, #0
    9014:	d112      	bne.n	903c <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    9016:	f002 fd2f 	bl	ba78 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    901a:	9803      	ldr	r0, [sp, #12]
    901c:	f7fe f830 	bl	7080 <FlexCAN_IsExCbtEnabled>
    9020:	4603      	mov	r3, r0
    9022:	2b00      	cmp	r3, #0
    9024:	d004      	beq.n	9030 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    9026:	9900      	ldr	r1, [sp, #0]
    9028:	9803      	ldr	r0, [sp, #12]
    902a:	f7fd ff7f 	bl	6f2c <FlexCAN_SetExtendedTimeSegments>
    902e:	e003      	b.n	9038 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    9030:	9900      	ldr	r1, [sp, #0]
    9032:	9803      	ldr	r0, [sp, #12]
    9034:	f7fd ff4e 	bl	6ed4 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    9038:	f002 fd4a 	bl	bad0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    903c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9040:	2b00      	cmp	r3, #0
    9042:	d008      	beq.n	9056 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    9044:	9803      	ldr	r0, [sp, #12]
    9046:	f000 ff27 	bl	9e98 <FlexCAN_Disable>
    904a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    904c:	9b04      	ldr	r3, [sp, #16]
    904e:	2b00      	cmp	r3, #0
    9050:	d001      	beq.n	9056 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    9052:	9b04      	ldr	r3, [sp, #16]
    9054:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9056:	9b05      	ldr	r3, [sp, #20]
}
    9058:	4618      	mov	r0, r3
    905a:	b007      	add	sp, #28
    905c:	f85d fb04 	ldr.w	pc, [sp], #4
    9060:	0000c9cc 	.word	0x0000c9cc

00009064 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    9064:	b500      	push	{lr}
    9066:	b085      	sub	sp, #20
    9068:	4603      	mov	r3, r0
    906a:	9100      	str	r1, [sp, #0]
    906c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9070:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9074:	4a0d      	ldr	r2, [pc, #52]	; (90ac <FlexCAN_Ip_GetBitrate+0x48>)
    9076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    907a:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    907c:	2300      	movs	r3, #0
    907e:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    9082:	9803      	ldr	r0, [sp, #12]
    9084:	f7fd fffc 	bl	7080 <FlexCAN_IsExCbtEnabled>
    9088:	4603      	mov	r3, r0
    908a:	2b00      	cmp	r3, #0
    908c:	d004      	beq.n	9098 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    908e:	9900      	ldr	r1, [sp, #0]
    9090:	9803      	ldr	r0, [sp, #12]
    9092:	f7fd ff79 	bl	6f88 <FlexCAN_GetExtendedTimeSegments>
    9096:	e003      	b.n	90a0 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    9098:	9900      	ldr	r1, [sp, #0]
    909a:	9803      	ldr	r0, [sp, #12]
    909c:	f7fd ff9c 	bl	6fd8 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    90a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    90a4:	4618      	mov	r0, r3
    90a6:	b005      	add	sp, #20
    90a8:	f85d fb04 	ldr.w	pc, [sp], #4
    90ac:	0000c9cc 	.word	0x0000c9cc

000090b0 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    90b0:	b500      	push	{lr}
    90b2:	b085      	sub	sp, #20
    90b4:	4603      	mov	r3, r0
    90b6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    90ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90be:	4a0a      	ldr	r2, [pc, #40]	; (90e8 <FlexCAN_Ip_ClearTDCFail+0x38>)
    90c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90c4:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    90c6:	f002 fb3d 	bl	b744 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    90ca:	9b03      	ldr	r3, [sp, #12]
    90cc:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    90d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    90d4:	9b03      	ldr	r3, [sp, #12]
    90d6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    90da:	f002 fb5f 	bl	b79c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    90de:	bf00      	nop
    90e0:	b005      	add	sp, #20
    90e2:	f85d fb04 	ldr.w	pc, [sp], #4
    90e6:	bf00      	nop
    90e8:	0000c9cc 	.word	0x0000c9cc

000090ec <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    90ec:	b084      	sub	sp, #16
    90ee:	4603      	mov	r3, r0
    90f0:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    90f4:	2300      	movs	r3, #0
    90f6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    90fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90fe:	4a0a      	ldr	r2, [pc, #40]	; (9128 <FlexCAN_Ip_GetTDCFail+0x3c>)
    9100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9104:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    9106:	9b02      	ldr	r3, [sp, #8]
    9108:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    910c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9114:	bf0c      	ite	eq
    9116:	2301      	moveq	r3, #1
    9118:	2300      	movne	r3, #0
    911a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    911e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9122:	4618      	mov	r0, r3
    9124:	b004      	add	sp, #16
    9126:	4770      	bx	lr
    9128:	0000c9cc 	.word	0x0000c9cc

0000912c <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    912c:	b084      	sub	sp, #16
    912e:	4603      	mov	r3, r0
    9130:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    9134:	2300      	movs	r3, #0
    9136:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    913a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    913e:	4a08      	ldr	r2, [pc, #32]	; (9160 <FlexCAN_Ip_GetTDCValue+0x34>)
    9140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9144:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    9146:	9b02      	ldr	r3, [sp, #8]
    9148:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    914c:	b2db      	uxtb	r3, r3
    914e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9152:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    9156:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    915a:	4618      	mov	r0, r3
    915c:	b004      	add	sp, #16
    915e:	4770      	bx	lr
    9160:	0000c9cc 	.word	0x0000c9cc

00009164 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    9164:	b500      	push	{lr}
    9166:	b087      	sub	sp, #28
    9168:	4603      	mov	r3, r0
    916a:	9100      	str	r1, [sp, #0]
    916c:	f88d 3007 	strb.w	r3, [sp, #7]
    9170:	4613      	mov	r3, r2
    9172:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9176:	2300      	movs	r3, #0
    9178:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    917a:	2300      	movs	r3, #0
    917c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    917e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9182:	4a1e      	ldr	r2, [pc, #120]	; (91fc <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    9184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9188:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    918a:	9803      	ldr	r0, [sp, #12]
    918c:	f7fd ffaf 	bl	70ee <FlexCAN_IsFDEnabled>
    9190:	4603      	mov	r3, r0
    9192:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    9196:	9b03      	ldr	r3, [sp, #12]
    9198:	681b      	ldr	r3, [r3, #0]
    919a:	0fdb      	lsrs	r3, r3, #31
    919c:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    91a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    91a4:	2b00      	cmp	r3, #0
    91a6:	d003      	beq.n	91b0 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    91a8:	9803      	ldr	r0, [sp, #12]
    91aa:	f000 fdf7 	bl	9d9c <FlexCAN_Enable>
    91ae:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    91b0:	9b05      	ldr	r3, [sp, #20]
    91b2:	2b00      	cmp	r3, #0
    91b4:	d10f      	bne.n	91d6 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    91b6:	f002 fcb1 	bl	bb1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    91ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
    91be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    91c2:	4619      	mov	r1, r3
    91c4:	9803      	ldr	r0, [sp, #12]
    91c6:	f7fd fdd1 	bl	6d6c <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    91ca:	9900      	ldr	r1, [sp, #0]
    91cc:	9803      	ldr	r0, [sp, #12]
    91ce:	f7fd fe4c 	bl	6e6a <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    91d2:	f002 fccf 	bl	bb74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    91d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    91da:	2b00      	cmp	r3, #0
    91dc:	d008      	beq.n	91f0 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    91de:	9803      	ldr	r0, [sp, #12]
    91e0:	f000 fe5a 	bl	9e98 <FlexCAN_Disable>
    91e4:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    91e6:	9b04      	ldr	r3, [sp, #16]
    91e8:	2b00      	cmp	r3, #0
    91ea:	d001      	beq.n	91f0 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    91ec:	9b04      	ldr	r3, [sp, #16]
    91ee:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    91f0:	9b05      	ldr	r3, [sp, #20]
}
    91f2:	4618      	mov	r0, r3
    91f4:	b007      	add	sp, #28
    91f6:	f85d fb04 	ldr.w	pc, [sp], #4
    91fa:	bf00      	nop
    91fc:	0000c9cc 	.word	0x0000c9cc

00009200 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    9200:	b500      	push	{lr}
    9202:	b085      	sub	sp, #20
    9204:	4603      	mov	r3, r0
    9206:	9100      	str	r1, [sp, #0]
    9208:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    920c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9210:	4a08      	ldr	r2, [pc, #32]	; (9234 <FlexCAN_Ip_GetBitrateFD+0x34>)
    9212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9216:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    9218:	2300      	movs	r3, #0
    921a:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    921e:	9900      	ldr	r1, [sp, #0]
    9220:	9803      	ldr	r0, [sp, #12]
    9222:	f7fd ff00 	bl	7026 <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    9226:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    922a:	4618      	mov	r0, r3
    922c:	b005      	add	sp, #20
    922e:	f85d fb04 	ldr.w	pc, [sp], #4
    9232:	bf00      	nop
    9234:	0000c9cc 	.word	0x0000c9cc

00009238 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    9238:	b500      	push	{lr}
    923a:	b087      	sub	sp, #28
    923c:	4603      	mov	r3, r0
    923e:	f88d 3007 	strb.w	r3, [sp, #7]
    9242:	460b      	mov	r3, r1
    9244:	f88d 3006 	strb.w	r3, [sp, #6]
    9248:	4613      	mov	r3, r2
    924a:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    924e:	2300      	movs	r3, #0
    9250:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9252:	2300      	movs	r3, #0
    9254:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9256:	f89d 3007 	ldrb.w	r3, [sp, #7]
    925a:	4a20      	ldr	r2, [pc, #128]	; (92dc <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    925c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9260:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9262:	9803      	ldr	r0, [sp, #12]
    9264:	f7fd fd78 	bl	6d58 <FlexCAN_IsEnabled>
    9268:	4603      	mov	r3, r0
    926a:	2b00      	cmp	r3, #0
    926c:	bf14      	ite	ne
    926e:	2301      	movne	r3, #1
    9270:	2300      	moveq	r3, #0
    9272:	b2db      	uxtb	r3, r3
    9274:	f083 0301 	eor.w	r3, r3, #1
    9278:	b2db      	uxtb	r3, r3
    927a:	f88d 300b 	strb.w	r3, [sp, #11]
    927e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9282:	f003 0301 	and.w	r3, r3, #1
    9286:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    928a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    928e:	2b00      	cmp	r3, #0
    9290:	d003      	beq.n	929a <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    9292:	9803      	ldr	r0, [sp, #12]
    9294:	f000 fd82 	bl	9d9c <FlexCAN_Enable>
    9298:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    929a:	9b05      	ldr	r3, [sp, #20]
    929c:	2b00      	cmp	r3, #0
    929e:	d10b      	bne.n	92b8 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    92a0:	f002 fc8e 	bl	bbc0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    92a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    92a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    92ac:	4619      	mov	r1, r3
    92ae:	9803      	ldr	r0, [sp, #12]
    92b0:	f7fd fd2b 	bl	6d0a <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    92b4:	f002 fcb0 	bl	bc18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    92b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    92bc:	2b00      	cmp	r3, #0
    92be:	d008      	beq.n	92d2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    92c0:	9803      	ldr	r0, [sp, #12]
    92c2:	f000 fde9 	bl	9e98 <FlexCAN_Disable>
    92c6:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    92c8:	9b04      	ldr	r3, [sp, #16]
    92ca:	2b00      	cmp	r3, #0
    92cc:	d001      	beq.n	92d2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    92ce:	9b04      	ldr	r3, [sp, #16]
    92d0:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    92d2:	9b05      	ldr	r3, [sp, #20]
}
    92d4:	4618      	mov	r0, r3
    92d6:	b007      	add	sp, #28
    92d8:	f85d fb04 	ldr.w	pc, [sp], #4
    92dc:	0000c9cc 	.word	0x0000c9cc

000092e0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    92e0:	b500      	push	{lr}
    92e2:	b087      	sub	sp, #28
    92e4:	4603      	mov	r3, r0
    92e6:	460a      	mov	r2, r1
    92e8:	f88d 3007 	strb.w	r3, [sp, #7]
    92ec:	4613      	mov	r3, r2
    92ee:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    92f2:	2300      	movs	r3, #0
    92f4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    92f6:	2300      	movs	r3, #0
    92f8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    92fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92fe:	4a1f      	ldr	r2, [pc, #124]	; (937c <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    9300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9304:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9306:	9803      	ldr	r0, [sp, #12]
    9308:	f7fd fd26 	bl	6d58 <FlexCAN_IsEnabled>
    930c:	4603      	mov	r3, r0
    930e:	2b00      	cmp	r3, #0
    9310:	bf14      	ite	ne
    9312:	2301      	movne	r3, #1
    9314:	2300      	moveq	r3, #0
    9316:	b2db      	uxtb	r3, r3
    9318:	f083 0301 	eor.w	r3, r3, #1
    931c:	b2db      	uxtb	r3, r3
    931e:	f88d 300b 	strb.w	r3, [sp, #11]
    9322:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9326:	f003 0301 	and.w	r3, r3, #1
    932a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    932e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9332:	2b00      	cmp	r3, #0
    9334:	d003      	beq.n	933e <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    9336:	9803      	ldr	r0, [sp, #12]
    9338:	f000 fd30 	bl	9d9c <FlexCAN_Enable>
    933c:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    933e:	9b05      	ldr	r3, [sp, #20]
    9340:	2b00      	cmp	r3, #0
    9342:	d109      	bne.n	9358 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    9344:	f002 fc8e 	bl	bc64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    9348:	f89d 3006 	ldrb.w	r3, [sp, #6]
    934c:	4619      	mov	r1, r3
    934e:	9803      	ldr	r0, [sp, #12]
    9350:	f7fd ff43 	bl	71da <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    9354:	f002 fcb2 	bl	bcbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    9358:	f89d 300b 	ldrb.w	r3, [sp, #11]
    935c:	2b00      	cmp	r3, #0
    935e:	d008      	beq.n	9372 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    9360:	9803      	ldr	r0, [sp, #12]
    9362:	f000 fd99 	bl	9e98 <FlexCAN_Disable>
    9366:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9368:	9b04      	ldr	r3, [sp, #16]
    936a:	2b00      	cmp	r3, #0
    936c:	d001      	beq.n	9372 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    936e:	9b04      	ldr	r3, [sp, #16]
    9370:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9372:	9b05      	ldr	r3, [sp, #20]
}
    9374:	4618      	mov	r0, r3
    9376:	b007      	add	sp, #28
    9378:	f85d fb04 	ldr.w	pc, [sp], #4
    937c:	0000c9cc 	.word	0x0000c9cc

00009380 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    9380:	b500      	push	{lr}
    9382:	b085      	sub	sp, #20
    9384:	4603      	mov	r3, r0
    9386:	460a      	mov	r2, r1
    9388:	f88d 3007 	strb.w	r3, [sp, #7]
    938c:	4613      	mov	r3, r2
    938e:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9392:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9396:	4a0b      	ldr	r2, [pc, #44]	; (93c4 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    9398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    939c:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    939e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93a2:	4619      	mov	r1, r3
    93a4:	9803      	ldr	r0, [sp, #12]
    93a6:	f7fd fd44 	bl	6e32 <FlexCAN_GetBuffStatusFlag>
    93aa:	4603      	mov	r3, r0
    93ac:	2b01      	cmp	r3, #1
    93ae:	bf0c      	ite	eq
    93b0:	2301      	moveq	r3, #1
    93b2:	2300      	movne	r3, #0
    93b4:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    93b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    93bc:	4618      	mov	r0, r3
    93be:	b005      	add	sp, #20
    93c0:	f85d fb04 	ldr.w	pc, [sp], #4
    93c4:	0000c9cc 	.word	0x0000c9cc

000093c8 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    93c8:	b500      	push	{lr}
    93ca:	b085      	sub	sp, #20
    93cc:	4603      	mov	r3, r0
    93ce:	460a      	mov	r2, r1
    93d0:	f88d 3007 	strb.w	r3, [sp, #7]
    93d4:	4613      	mov	r3, r2
    93d6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    93da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93de:	4a07      	ldr	r2, [pc, #28]	; (93fc <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    93e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e4:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    93e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93ea:	4619      	mov	r1, r3
    93ec:	9803      	ldr	r0, [sp, #12]
    93ee:	f7fd fd0d 	bl	6e0c <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    93f2:	bf00      	nop
    93f4:	b005      	add	sp, #20
    93f6:	f85d fb04 	ldr.w	pc, [sp], #4
    93fa:	bf00      	nop
    93fc:	0000c9cc 	.word	0x0000c9cc

00009400 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    9400:	b500      	push	{lr}
    9402:	b087      	sub	sp, #28
    9404:	4603      	mov	r3, r0
    9406:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    940a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    940e:	4a11      	ldr	r2, [pc, #68]	; (9454 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    9410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9414:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9416:	2301      	movs	r3, #1
    9418:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    941a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    941e:	4a0e      	ldr	r2, [pc, #56]	; (9458 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    9420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9424:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    9426:	9804      	ldr	r0, [sp, #16]
    9428:	f7fd fc96 	bl	6d58 <FlexCAN_IsEnabled>
    942c:	4603      	mov	r3, r0
    942e:	2b00      	cmp	r3, #0
    9430:	d00b      	beq.n	944a <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    9432:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9436:	4619      	mov	r1, r3
    9438:	9804      	ldr	r0, [sp, #16]
    943a:	f000 ffe1 	bl	a400 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    943e:	9b03      	ldr	r3, [sp, #12]
    9440:	2201      	movs	r2, #1
    9442:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    9446:	2300      	movs	r3, #0
    9448:	9305      	str	r3, [sp, #20]
    }

    return result;
    944a:	9b05      	ldr	r3, [sp, #20]
}
    944c:	4618      	mov	r0, r3
    944e:	b007      	add	sp, #28
    9450:	f85d fb04 	ldr.w	pc, [sp], #4
    9454:	0000c9cc 	.word	0x0000c9cc
    9458:	1fff8f98 	.word	0x1fff8f98

0000945c <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    945c:	b500      	push	{lr}
    945e:	b087      	sub	sp, #28
    9460:	4603      	mov	r3, r0
    9462:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9466:	f89d 3007 	ldrb.w	r3, [sp, #7]
    946a:	4a10      	ldr	r2, [pc, #64]	; (94ac <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    946c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9470:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9472:	2301      	movs	r3, #1
    9474:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9476:	f89d 3007 	ldrb.w	r3, [sp, #7]
    947a:	4a0d      	ldr	r2, [pc, #52]	; (94b0 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    947c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9480:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    9482:	9804      	ldr	r0, [sp, #16]
    9484:	f7fd fc68 	bl	6d58 <FlexCAN_IsEnabled>
    9488:	4603      	mov	r3, r0
    948a:	2b00      	cmp	r3, #0
    948c:	d008      	beq.n	94a0 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    948e:	9804      	ldr	r0, [sp, #16]
    9490:	f000 ffae 	bl	a3f0 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    9494:	9b03      	ldr	r3, [sp, #12]
    9496:	2200      	movs	r2, #0
    9498:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    949c:	2300      	movs	r3, #0
    949e:	9305      	str	r3, [sp, #20]
    }

    return result;
    94a0:	9b05      	ldr	r3, [sp, #20]
}
    94a2:	4618      	mov	r0, r3
    94a4:	b007      	add	sp, #28
    94a6:	f85d fb04 	ldr.w	pc, [sp], #4
    94aa:	bf00      	nop
    94ac:	0000c9cc 	.word	0x0000c9cc
    94b0:	1fff8f98 	.word	0x1fff8f98

000094b4 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    94b4:	b500      	push	{lr}
    94b6:	b087      	sub	sp, #28
    94b8:	4603      	mov	r3, r0
    94ba:	9100      	str	r1, [sp, #0]
    94bc:	f88d 3007 	strb.w	r3, [sp, #7]
    94c0:	4613      	mov	r3, r2
    94c2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    94c6:	2300      	movs	r3, #0
    94c8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    94ca:	2300      	movs	r3, #0
    94cc:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    94ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94d2:	4a3a      	ldr	r2, [pc, #232]	; (95bc <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    94d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94d8:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    94da:	9803      	ldr	r0, [sp, #12]
    94dc:	f7fd fc3c 	bl	6d58 <FlexCAN_IsEnabled>
    94e0:	4603      	mov	r3, r0
    94e2:	2b00      	cmp	r3, #0
    94e4:	bf14      	ite	ne
    94e6:	2301      	movne	r3, #1
    94e8:	2300      	moveq	r3, #0
    94ea:	b2db      	uxtb	r3, r3
    94ec:	f083 0301 	eor.w	r3, r3, #1
    94f0:	b2db      	uxtb	r3, r3
    94f2:	f88d 300b 	strb.w	r3, [sp, #11]
    94f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    94fa:	f003 0301 	and.w	r3, r3, #1
    94fe:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9502:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9506:	2b00      	cmp	r3, #0
    9508:	d003      	beq.n	9512 <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    950a:	9803      	ldr	r0, [sp, #12]
    950c:	f000 fc46 	bl	9d9c <FlexCAN_Enable>
    9510:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    9512:	9b05      	ldr	r3, [sp, #20]
    9514:	2b00      	cmp	r3, #0
    9516:	d13c      	bne.n	9592 <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    9518:	9b00      	ldr	r3, [sp, #0]
    951a:	2b04      	cmp	r3, #4
    951c:	d83b      	bhi.n	9596 <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    951e:	a201      	add	r2, pc, #4	; (adr r2, 9524 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    9520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9524:	0000956f 	.word	0x0000956f
    9528:	00009581 	.word	0x00009581
    952c:	0000954b 	.word	0x0000954b
    9530:	0000955d 	.word	0x0000955d
    9534:	00009539 	.word	0x00009539
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    9538:	f89d 3006 	ldrb.w	r3, [sp, #6]
    953c:	461a      	mov	r2, r3
    953e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9542:	9803      	ldr	r0, [sp, #12]
    9544:	f000 fce8 	bl	9f18 <FlexCAN_SetErrIntCmd>
                break;
    9548:	e026      	b.n	9598 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    954a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    954e:	461a      	mov	r2, r3
    9550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9554:	9803      	ldr	r0, [sp, #12]
    9556:	f000 fcdf 	bl	9f18 <FlexCAN_SetErrIntCmd>
                break;
    955a:	e01d      	b.n	9598 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    955c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9560:	461a      	mov	r2, r3
    9562:	f244 0101 	movw	r1, #16385	; 0x4001
    9566:	9803      	ldr	r0, [sp, #12]
    9568:	f000 fcd6 	bl	9f18 <FlexCAN_SetErrIntCmd>
                break;
    956c:	e014      	b.n	9598 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    956e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9572:	461a      	mov	r2, r3
    9574:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9578:	9803      	ldr	r0, [sp, #12]
    957a:	f000 fccd 	bl	9f18 <FlexCAN_SetErrIntCmd>
                }
                break;
    957e:	e00b      	b.n	9598 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    9580:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9584:	461a      	mov	r2, r3
    9586:	f44f 6100 	mov.w	r1, #2048	; 0x800
    958a:	9803      	ldr	r0, [sp, #12]
    958c:	f000 fcc4 	bl	9f18 <FlexCAN_SetErrIntCmd>
                }
                break;
    9590:	e002      	b.n	9598 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    9592:	bf00      	nop
    9594:	e000      	b.n	9598 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    9596:	bf00      	nop

    if (TRUE == disabled)
    9598:	f89d 300b 	ldrb.w	r3, [sp, #11]
    959c:	2b00      	cmp	r3, #0
    959e:	d008      	beq.n	95b2 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    95a0:	9803      	ldr	r0, [sp, #12]
    95a2:	f000 fc79 	bl	9e98 <FlexCAN_Disable>
    95a6:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    95a8:	9b04      	ldr	r3, [sp, #16]
    95aa:	2b00      	cmp	r3, #0
    95ac:	d001      	beq.n	95b2 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    95ae:	9b04      	ldr	r3, [sp, #16]
    95b0:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    95b2:	9b05      	ldr	r3, [sp, #20]
}
    95b4:	4618      	mov	r0, r3
    95b6:	b007      	add	sp, #28
    95b8:	f85d fb04 	ldr.w	pc, [sp], #4
    95bc:	0000c9cc 	.word	0x0000c9cc

000095c0 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    95c0:	b500      	push	{lr}
    95c2:	b087      	sub	sp, #28
    95c4:	4603      	mov	r3, r0
    95c6:	460a      	mov	r2, r1
    95c8:	f88d 3007 	strb.w	r3, [sp, #7]
    95cc:	4613      	mov	r3, r2
    95ce:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    95d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    95d6:	4a27      	ldr	r2, [pc, #156]	; (9674 <FlexCAN_Ip_AbortTransfer+0xb4>)
    95d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95dc:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    95de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    95e2:	4a25      	ldr	r2, [pc, #148]	; (9678 <FlexCAN_Ip_AbortTransfer+0xb8>)
    95e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e8:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    95ea:	2300      	movs	r3, #0
    95ec:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    95ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95f2:	2b1f      	cmp	r3, #31
    95f4:	d838      	bhi.n	9668 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    95f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95fa:	9a03      	ldr	r2, [sp, #12]
    95fc:	011b      	lsls	r3, r3, #4
    95fe:	4413      	add	r3, r2
    9600:	3304      	adds	r3, #4
    9602:	681b      	ldr	r3, [r3, #0]
    9604:	2b00      	cmp	r3, #0
    9606:	d102      	bne.n	960e <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    9608:	2305      	movs	r3, #5
    960a:	9305      	str	r3, [sp, #20]
    960c:	e02c      	b.n	9668 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    960e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9612:	9b03      	ldr	r3, [sp, #12]
    9614:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9618:	f89d 1007 	ldrb.w	r1, [sp, #7]
    961c:	9804      	ldr	r0, [sp, #16]
    961e:	f000 feb3 	bl	a388 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    9622:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9626:	9a03      	ldr	r2, [sp, #12]
    9628:	011b      	lsls	r3, r3, #4
    962a:	4413      	add	r3, r2
    962c:	3304      	adds	r3, #4
    962e:	681b      	ldr	r3, [r3, #0]
    9630:	2b02      	cmp	r3, #2
    9632:	d108      	bne.n	9646 <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    9634:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9638:	f89d 3007 	ldrb.w	r3, [sp, #7]
    963c:	4611      	mov	r1, r2
    963e:	4618      	mov	r0, r3
    9640:	f7fe fabc 	bl	7bbc <FlexCAN_AbortTxTransfer>
    9644:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    9646:	f89d 3006 	ldrb.w	r3, [sp, #6]
    964a:	9a03      	ldr	r2, [sp, #12]
    964c:	011b      	lsls	r3, r3, #4
    964e:	4413      	add	r3, r2
    9650:	3304      	adds	r3, #4
    9652:	681b      	ldr	r3, [r3, #0]
    9654:	2b01      	cmp	r3, #1
    9656:	d107      	bne.n	9668 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    9658:	f89d 2006 	ldrb.w	r2, [sp, #6]
    965c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9660:	4611      	mov	r1, r2
    9662:	4618      	mov	r0, r3
    9664:	f7fe fb34 	bl	7cd0 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    9668:	9b05      	ldr	r3, [sp, #20]
}
    966a:	4618      	mov	r0, r3
    966c:	b007      	add	sp, #28
    966e:	f85d fb04 	ldr.w	pc, [sp], #4
    9672:	bf00      	nop
    9674:	0000c9cc 	.word	0x0000c9cc
    9678:	1fff8f98 	.word	0x1fff8f98

0000967c <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    967c:	b500      	push	{lr}
    967e:	b087      	sub	sp, #28
    9680:	4603      	mov	r3, r0
    9682:	9100      	str	r1, [sp, #0]
    9684:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9688:	2300      	movs	r3, #0
    968a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    968c:	2300      	movs	r3, #0
    968e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9690:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9694:	4a1b      	ldr	r2, [pc, #108]	; (9704 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    9696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    969a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    969c:	9803      	ldr	r0, [sp, #12]
    969e:	f7fd fb5b 	bl	6d58 <FlexCAN_IsEnabled>
    96a2:	4603      	mov	r3, r0
    96a4:	2b00      	cmp	r3, #0
    96a6:	bf14      	ite	ne
    96a8:	2301      	movne	r3, #1
    96aa:	2300      	moveq	r3, #0
    96ac:	b2db      	uxtb	r3, r3
    96ae:	f083 0301 	eor.w	r3, r3, #1
    96b2:	b2db      	uxtb	r3, r3
    96b4:	f88d 300b 	strb.w	r3, [sp, #11]
    96b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    96bc:	f003 0301 	and.w	r3, r3, #1
    96c0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    96c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    96c8:	2b00      	cmp	r3, #0
    96ca:	d003      	beq.n	96d4 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    96cc:	9803      	ldr	r0, [sp, #12]
    96ce:	f000 fb65 	bl	9d9c <FlexCAN_Enable>
    96d2:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    96d4:	9b05      	ldr	r3, [sp, #20]
    96d6:	2b00      	cmp	r3, #0
    96d8:	d102      	bne.n	96e0 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    96da:	9b03      	ldr	r3, [sp, #12]
    96dc:	9a00      	ldr	r2, [sp, #0]
    96de:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    96e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d008      	beq.n	96fa <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    96e8:	9803      	ldr	r0, [sp, #12]
    96ea:	f000 fbd5 	bl	9e98 <FlexCAN_Disable>
    96ee:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    96f0:	9b04      	ldr	r3, [sp, #16]
    96f2:	2b00      	cmp	r3, #0
    96f4:	d001      	beq.n	96fa <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    96f6:	9b04      	ldr	r3, [sp, #16]
    96f8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    96fa:	9b05      	ldr	r3, [sp, #20]
}
    96fc:	4618      	mov	r0, r3
    96fe:	b007      	add	sp, #28
    9700:	f85d fb04 	ldr.w	pc, [sp], #4
    9704:	0000c9cc 	.word	0x0000c9cc

00009708 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    9708:	b500      	push	{lr}
    970a:	b087      	sub	sp, #28
    970c:	4603      	mov	r3, r0
    970e:	9100      	str	r1, [sp, #0]
    9710:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9714:	2300      	movs	r3, #0
    9716:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9718:	2300      	movs	r3, #0
    971a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    971c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9720:	4a1b      	ldr	r2, [pc, #108]	; (9790 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    9722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9726:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9728:	9803      	ldr	r0, [sp, #12]
    972a:	f7fd fb15 	bl	6d58 <FlexCAN_IsEnabled>
    972e:	4603      	mov	r3, r0
    9730:	2b00      	cmp	r3, #0
    9732:	bf14      	ite	ne
    9734:	2301      	movne	r3, #1
    9736:	2300      	moveq	r3, #0
    9738:	b2db      	uxtb	r3, r3
    973a:	f083 0301 	eor.w	r3, r3, #1
    973e:	b2db      	uxtb	r3, r3
    9740:	f88d 300b 	strb.w	r3, [sp, #11]
    9744:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9748:	f003 0301 	and.w	r3, r3, #1
    974c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9750:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9754:	2b00      	cmp	r3, #0
    9756:	d003      	beq.n	9760 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    9758:	9803      	ldr	r0, [sp, #12]
    975a:	f000 fb1f 	bl	9d9c <FlexCAN_Enable>
    975e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9760:	9b05      	ldr	r3, [sp, #20]
    9762:	2b00      	cmp	r3, #0
    9764:	d102      	bne.n	976c <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    9766:	9b03      	ldr	r3, [sp, #12]
    9768:	9a00      	ldr	r2, [sp, #0]
    976a:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    976c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9770:	2b00      	cmp	r3, #0
    9772:	d008      	beq.n	9786 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    9774:	9803      	ldr	r0, [sp, #12]
    9776:	f000 fb8f 	bl	9e98 <FlexCAN_Disable>
    977a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    977c:	9b04      	ldr	r3, [sp, #16]
    977e:	2b00      	cmp	r3, #0
    9780:	d001      	beq.n	9786 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    9782:	9b04      	ldr	r3, [sp, #16]
    9784:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9786:	9b05      	ldr	r3, [sp, #20]
}
    9788:	4618      	mov	r0, r3
    978a:	b007      	add	sp, #28
    978c:	f85d fb04 	ldr.w	pc, [sp], #4
    9790:	0000c9cc 	.word	0x0000c9cc

00009794 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    9794:	b500      	push	{lr}
    9796:	b087      	sub	sp, #28
    9798:	4603      	mov	r3, r0
    979a:	460a      	mov	r2, r1
    979c:	f88d 3007 	strb.w	r3, [sp, #7]
    97a0:	4613      	mov	r3, r2
    97a2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    97a6:	2300      	movs	r3, #0
    97a8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    97aa:	2300      	movs	r3, #0
    97ac:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    97ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97b2:	4a1f      	ldr	r2, [pc, #124]	; (9830 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    97b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b8:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    97ba:	9803      	ldr	r0, [sp, #12]
    97bc:	f7fd facc 	bl	6d58 <FlexCAN_IsEnabled>
    97c0:	4603      	mov	r3, r0
    97c2:	2b00      	cmp	r3, #0
    97c4:	bf14      	ite	ne
    97c6:	2301      	movne	r3, #1
    97c8:	2300      	moveq	r3, #0
    97ca:	b2db      	uxtb	r3, r3
    97cc:	f083 0301 	eor.w	r3, r3, #1
    97d0:	b2db      	uxtb	r3, r3
    97d2:	f88d 300b 	strb.w	r3, [sp, #11]
    97d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97da:	f003 0301 	and.w	r3, r3, #1
    97de:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    97e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97e6:	2b00      	cmp	r3, #0
    97e8:	d003      	beq.n	97f2 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    97ea:	9803      	ldr	r0, [sp, #12]
    97ec:	f000 fad6 	bl	9d9c <FlexCAN_Enable>
    97f0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    97f2:	9b05      	ldr	r3, [sp, #20]
    97f4:	2b00      	cmp	r3, #0
    97f6:	d109      	bne.n	980c <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    97f8:	f001 fff6 	bl	b7e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    97fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9800:	4619      	mov	r1, r3
    9802:	9803      	ldr	r0, [sp, #12]
    9804:	f7fd fae5 	bl	6dd2 <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    9808:	f002 f81a 	bl	b840 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    980c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9810:	2b00      	cmp	r3, #0
    9812:	d008      	beq.n	9826 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    9814:	9803      	ldr	r0, [sp, #12]
    9816:	f000 fb3f 	bl	9e98 <FlexCAN_Disable>
    981a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    981c:	9b04      	ldr	r3, [sp, #16]
    981e:	2b00      	cmp	r3, #0
    9820:	d001      	beq.n	9826 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    9822:	9b04      	ldr	r3, [sp, #16]
    9824:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9826:	9b05      	ldr	r3, [sp, #20]
}
    9828:	4618      	mov	r0, r3
    982a:	b007      	add	sp, #28
    982c:	f85d fb04 	ldr.w	pc, [sp], #4
    9830:	0000c9cc 	.word	0x0000c9cc

00009834 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    9834:	b500      	push	{lr}
    9836:	b085      	sub	sp, #20
    9838:	4603      	mov	r3, r0
    983a:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    983e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9842:	4a06      	ldr	r2, [pc, #24]	; (985c <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    9844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9848:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    984a:	9803      	ldr	r0, [sp, #12]
    984c:	f7fd fc5d 	bl	710a <FlexCAN_IsListenOnlyModeEnabled>
    9850:	4603      	mov	r3, r0
}
    9852:	4618      	mov	r0, r3
    9854:	b005      	add	sp, #20
    9856:	f85d fb04 	ldr.w	pc, [sp], #4
    985a:	bf00      	nop
    985c:	0000c9cc 	.word	0x0000c9cc

00009860 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    9860:	b500      	push	{lr}
    9862:	b089      	sub	sp, #36	; 0x24
    9864:	4603      	mov	r3, r0
    9866:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    986a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    986e:	4a27      	ldr	r2, [pc, #156]	; (990c <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    9870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9874:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    9876:	2300      	movs	r3, #0
    9878:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    987a:	2300      	movs	r3, #0
    987c:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    987e:	2100      	movs	r1, #0
    9880:	4823      	ldr	r0, [pc, #140]	; (9910 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    9882:	f7f7 fc81 	bl	1188 <OsIf_MicrosToTicks>
    9886:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    9888:	2301      	movs	r3, #1
    988a:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    988c:	9b05      	ldr	r3, [sp, #20]
    988e:	685b      	ldr	r3, [r3, #4]
    9890:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9894:	2b00      	cmp	r3, #0
    9896:	d033      	beq.n	9900 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    9898:	2300      	movs	r3, #0
    989a:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    989c:	9b05      	ldr	r3, [sp, #20]
    989e:	6a1b      	ldr	r3, [r3, #32]
    98a0:	f003 0320 	and.w	r3, r3, #32
    98a4:	2b00      	cmp	r3, #0
    98a6:	d02b      	beq.n	9900 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    98a8:	f002 fad2 	bl	be50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    98ac:	9b05      	ldr	r3, [sp, #20]
    98ae:	685b      	ldr	r3, [r3, #4]
    98b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    98b4:	9b05      	ldr	r3, [sp, #20]
    98b6:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    98b8:	9b05      	ldr	r3, [sp, #20]
    98ba:	685b      	ldr	r3, [r3, #4]
    98bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    98c0:	9b05      	ldr	r3, [sp, #20]
    98c2:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    98c4:	f002 faf0 	bl	bea8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    98c8:	2000      	movs	r0, #0
    98ca:	f7f7 fc11 	bl	10f0 <OsIf_GetCounter>
    98ce:	4603      	mov	r3, r0
    98d0:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    98d2:	e00f      	b.n	98f4 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    98d4:	ab03      	add	r3, sp, #12
    98d6:	2100      	movs	r1, #0
    98d8:	4618      	mov	r0, r3
    98da:	f7f7 fc22 	bl	1122 <OsIf_GetElapsed>
    98de:	4602      	mov	r2, r0
    98e0:	9b07      	ldr	r3, [sp, #28]
    98e2:	4413      	add	r3, r2
    98e4:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    98e6:	9a07      	ldr	r2, [sp, #28]
    98e8:	9b04      	ldr	r3, [sp, #16]
    98ea:	429a      	cmp	r2, r3
    98ec:	d302      	bcc.n	98f4 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    98ee:	2303      	movs	r3, #3
    98f0:	9306      	str	r3, [sp, #24]
                    break;
    98f2:	e005      	b.n	9900 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    98f4:	9b05      	ldr	r3, [sp, #20]
    98f6:	6a1b      	ldr	r3, [r3, #32]
    98f8:	f003 0320 	and.w	r3, r3, #32
    98fc:	2b00      	cmp	r3, #0
    98fe:	d1e9      	bne.n	98d4 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    9900:	9b06      	ldr	r3, [sp, #24]
}
    9902:	4618      	mov	r0, r3
    9904:	b009      	add	sp, #36	; 0x24
    9906:	f85d fb04 	ldr.w	pc, [sp], #4
    990a:	bf00      	nop
    990c:	0000c9cc 	.word	0x0000c9cc
    9910:	000f4240 	.word	0x000f4240

00009914 <FlexCAN_SetSelfReception>:
{
    9914:	b082      	sub	sp, #8
    9916:	9001      	str	r0, [sp, #4]
    9918:	460b      	mov	r3, r1
    991a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    991e:	9b01      	ldr	r3, [sp, #4]
    9920:	681b      	ldr	r3, [r3, #0]
    9922:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    9926:	f89d 2003 	ldrb.w	r2, [sp, #3]
    992a:	2a00      	cmp	r2, #0
    992c:	d001      	beq.n	9932 <FlexCAN_SetSelfReception+0x1e>
    992e:	2200      	movs	r2, #0
    9930:	e001      	b.n	9936 <FlexCAN_SetSelfReception+0x22>
    9932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9936:	431a      	orrs	r2, r3
    9938:	9b01      	ldr	r3, [sp, #4]
    993a:	601a      	str	r2, [r3, #0]
}
    993c:	bf00      	nop
    993e:	b002      	add	sp, #8
    9940:	4770      	bx	lr

00009942 <FlexCAN_IsFDEnabled>:
{
    9942:	b082      	sub	sp, #8
    9944:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    9946:	9b01      	ldr	r3, [sp, #4]
    9948:	681b      	ldr	r3, [r3, #0]
    994a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    994e:	2b00      	cmp	r3, #0
    9950:	bf14      	ite	ne
    9952:	2301      	movne	r3, #1
    9954:	2300      	moveq	r3, #0
    9956:	b2db      	uxtb	r3, r3
}
    9958:	4618      	mov	r0, r3
    995a:	b002      	add	sp, #8
    995c:	4770      	bx	lr

0000995e <FlexCAN_SetIsoCan>:
{
    995e:	b082      	sub	sp, #8
    9960:	9001      	str	r0, [sp, #4]
    9962:	460b      	mov	r3, r1
    9964:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    9968:	9b01      	ldr	r3, [sp, #4]
    996a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    996c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    9970:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9974:	2a00      	cmp	r2, #0
    9976:	d002      	beq.n	997e <FlexCAN_SetIsoCan+0x20>
    9978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    997c:	e000      	b.n	9980 <FlexCAN_SetIsoCan+0x22>
    997e:	2200      	movs	r2, #0
    9980:	431a      	orrs	r2, r3
    9982:	9b01      	ldr	r3, [sp, #4]
    9984:	635a      	str	r2, [r3, #52]	; 0x34
}
    9986:	bf00      	nop
    9988:	b002      	add	sp, #8
    998a:	4770      	bx	lr

0000998c <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    998c:	b082      	sub	sp, #8
    998e:	9001      	str	r0, [sp, #4]
    9990:	460b      	mov	r3, r1
    9992:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    9996:	9b01      	ldr	r3, [sp, #4]
    9998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    999a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    999e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    99a2:	2a00      	cmp	r2, #0
    99a4:	d002      	beq.n	99ac <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    99a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    99aa:	e000      	b.n	99ae <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    99ac:	2200      	movs	r2, #0
    99ae:	431a      	orrs	r2, r3
    99b0:	9b01      	ldr	r3, [sp, #4]
    99b2:	635a      	str	r2, [r3, #52]	; 0x34
}
    99b4:	bf00      	nop
    99b6:	b002      	add	sp, #8
    99b8:	4770      	bx	lr

000099ba <FlexCAN_SetProtocolException>:
{
    99ba:	b082      	sub	sp, #8
    99bc:	9001      	str	r0, [sp, #4]
    99be:	460b      	mov	r3, r1
    99c0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    99c4:	9b01      	ldr	r3, [sp, #4]
    99c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    99c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    99cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    99d0:	2a00      	cmp	r2, #0
    99d2:	d002      	beq.n	99da <FlexCAN_SetProtocolException+0x20>
    99d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    99d8:	e000      	b.n	99dc <FlexCAN_SetProtocolException+0x22>
    99da:	2200      	movs	r2, #0
    99dc:	431a      	orrs	r2, r3
    99de:	9b01      	ldr	r3, [sp, #4]
    99e0:	635a      	str	r2, [r3, #52]	; 0x34
}
    99e2:	bf00      	nop
    99e4:	b002      	add	sp, #8
    99e6:	4770      	bx	lr

000099e8 <FlexCAN_SetRemoteReqStore>:
{
    99e8:	b082      	sub	sp, #8
    99ea:	9001      	str	r0, [sp, #4]
    99ec:	460b      	mov	r3, r1
    99ee:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    99f2:	9b01      	ldr	r3, [sp, #4]
    99f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    99f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    99fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    99fe:	2a00      	cmp	r2, #0
    9a00:	d002      	beq.n	9a08 <FlexCAN_SetRemoteReqStore+0x20>
    9a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9a06:	e000      	b.n	9a0a <FlexCAN_SetRemoteReqStore+0x22>
    9a08:	2200      	movs	r2, #0
    9a0a:	431a      	orrs	r2, r3
    9a0c:	9b01      	ldr	r3, [sp, #4]
    9a0e:	635a      	str	r2, [r3, #52]	; 0x34
}
    9a10:	bf00      	nop
    9a12:	b002      	add	sp, #8
    9a14:	4770      	bx	lr

00009a16 <FlexCAN_SetBusOffAutorecovery>:
{
    9a16:	b082      	sub	sp, #8
    9a18:	9001      	str	r0, [sp, #4]
    9a1a:	460b      	mov	r3, r1
    9a1c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    9a20:	9b01      	ldr	r3, [sp, #4]
    9a22:	685b      	ldr	r3, [r3, #4]
    9a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    9a28:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9a2c:	2a00      	cmp	r2, #0
    9a2e:	d001      	beq.n	9a34 <FlexCAN_SetBusOffAutorecovery+0x1e>
    9a30:	2200      	movs	r2, #0
    9a32:	e000      	b.n	9a36 <FlexCAN_SetBusOffAutorecovery+0x20>
    9a34:	2240      	movs	r2, #64	; 0x40
    9a36:	431a      	orrs	r2, r3
    9a38:	9b01      	ldr	r3, [sp, #4]
    9a3a:	605a      	str	r2, [r3, #4]
}
    9a3c:	bf00      	nop
    9a3e:	b002      	add	sp, #8
    9a40:	4770      	bx	lr

00009a42 <FlexCAN_SetEdgeFilter>:
{
    9a42:	b082      	sub	sp, #8
    9a44:	9001      	str	r0, [sp, #4]
    9a46:	460b      	mov	r3, r1
    9a48:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    9a4c:	9b01      	ldr	r3, [sp, #4]
    9a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9a54:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9a58:	2a00      	cmp	r2, #0
    9a5a:	d001      	beq.n	9a60 <FlexCAN_SetEdgeFilter+0x1e>
    9a5c:	2200      	movs	r2, #0
    9a5e:	e001      	b.n	9a64 <FlexCAN_SetEdgeFilter+0x22>
    9a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9a64:	431a      	orrs	r2, r3
    9a66:	9b01      	ldr	r3, [sp, #4]
    9a68:	635a      	str	r2, [r3, #52]	; 0x34
}
    9a6a:	bf00      	nop
    9a6c:	b002      	add	sp, #8
    9a6e:	4770      	bx	lr

00009a70 <FlexCAN_CanBitSampling>:
{
    9a70:	b082      	sub	sp, #8
    9a72:	9001      	str	r0, [sp, #4]
    9a74:	460b      	mov	r3, r1
    9a76:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    9a7a:	9b01      	ldr	r3, [sp, #4]
    9a7c:	685b      	ldr	r3, [r3, #4]
    9a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9a82:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9a86:	2a00      	cmp	r2, #0
    9a88:	d001      	beq.n	9a8e <FlexCAN_CanBitSampling+0x1e>
    9a8a:	2280      	movs	r2, #128	; 0x80
    9a8c:	e000      	b.n	9a90 <FlexCAN_CanBitSampling+0x20>
    9a8e:	2200      	movs	r2, #0
    9a90:	431a      	orrs	r2, r3
    9a92:	9b01      	ldr	r3, [sp, #4]
    9a94:	605a      	str	r2, [r3, #4]
}
    9a96:	bf00      	nop
    9a98:	b002      	add	sp, #8
    9a9a:	4770      	bx	lr

00009a9c <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    9a9c:	b084      	sub	sp, #16
    9a9e:	4603      	mov	r3, r0
    9aa0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    9aa4:	23ff      	movs	r3, #255	; 0xff
    9aa6:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    9aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9aac:	2b40      	cmp	r3, #64	; 0x40
    9aae:	d804      	bhi.n	9aba <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    9ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ab4:	4a03      	ldr	r2, [pc, #12]	; (9ac4 <FlexCAN_ComputeDLCValue+0x28>)
    9ab6:	5cd3      	ldrb	r3, [r2, r3]
    9ab8:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    9aba:	9b03      	ldr	r3, [sp, #12]
    9abc:	b2db      	uxtb	r3, r3
}
    9abe:	4618      	mov	r0, r3
    9ac0:	b004      	add	sp, #16
    9ac2:	4770      	bx	lr
    9ac4:	0000c9d8 	.word	0x0000c9d8

00009ac8 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    9ac8:	b500      	push	{lr}
    9aca:	b087      	sub	sp, #28
    9acc:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    9ace:	9801      	ldr	r0, [sp, #4]
    9ad0:	f000 f8f6 	bl	9cc0 <FlexCAN_GetMaxMbNum>
    9ad4:	4603      	mov	r3, r0
    9ad6:	009b      	lsls	r3, r3, #2
    9ad8:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    9ada:	9801      	ldr	r0, [sp, #4]
    9adc:	f000 f8f0 	bl	9cc0 <FlexCAN_GetMaxMbNum>
    9ae0:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    9ae2:	9b01      	ldr	r3, [sp, #4]
    9ae4:	3380      	adds	r3, #128	; 0x80
    9ae6:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    9ae8:	2300      	movs	r3, #0
    9aea:	9305      	str	r3, [sp, #20]
    9aec:	e008      	b.n	9b00 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    9aee:	9b05      	ldr	r3, [sp, #20]
    9af0:	009b      	lsls	r3, r3, #2
    9af2:	9a02      	ldr	r2, [sp, #8]
    9af4:	4413      	add	r3, r2
    9af6:	2200      	movs	r2, #0
    9af8:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    9afa:	9b05      	ldr	r3, [sp, #20]
    9afc:	3301      	adds	r3, #1
    9afe:	9305      	str	r3, [sp, #20]
    9b00:	9a05      	ldr	r2, [sp, #20]
    9b02:	9b04      	ldr	r3, [sp, #16]
    9b04:	429a      	cmp	r2, r3
    9b06:	d3f2      	bcc.n	9aee <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    9b08:	9b01      	ldr	r3, [sp, #4]
    9b0a:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    9b0e:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    9b10:	2300      	movs	r3, #0
    9b12:	9305      	str	r3, [sp, #20]
    9b14:	e008      	b.n	9b28 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    9b16:	9b05      	ldr	r3, [sp, #20]
    9b18:	009b      	lsls	r3, r3, #2
    9b1a:	9a02      	ldr	r2, [sp, #8]
    9b1c:	4413      	add	r3, r2
    9b1e:	2200      	movs	r2, #0
    9b20:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    9b22:	9b05      	ldr	r3, [sp, #20]
    9b24:	3301      	adds	r3, #1
    9b26:	9305      	str	r3, [sp, #20]
    9b28:	9a05      	ldr	r2, [sp, #20]
    9b2a:	9b03      	ldr	r3, [sp, #12]
    9b2c:	429a      	cmp	r2, r3
    9b2e:	d3f2      	bcc.n	9b16 <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    9b30:	bf00      	nop
    9b32:	bf00      	nop
    9b34:	b007      	add	sp, #28
    9b36:	f85d fb04 	ldr.w	pc, [sp], #4

00009b3a <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    9b3a:	b084      	sub	sp, #16
    9b3c:	4603      	mov	r3, r0
    9b3e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    9b42:	2308      	movs	r3, #8
    9b44:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    9b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b4c:	2b08      	cmp	r3, #8
    9b4e:	d804      	bhi.n	9b5a <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    9b50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b54:	f88d 300f 	strb.w	r3, [sp, #15]
    9b58:	e033      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    9b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b5e:	3b09      	subs	r3, #9
    9b60:	2b06      	cmp	r3, #6
    9b62:	d82d      	bhi.n	9bc0 <FlexCAN_ComputePayloadSize+0x86>
    9b64:	a201      	add	r2, pc, #4	; (adr r2, 9b6c <FlexCAN_ComputePayloadSize+0x32>)
    9b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9b6a:	bf00      	nop
    9b6c:	00009b89 	.word	0x00009b89
    9b70:	00009b91 	.word	0x00009b91
    9b74:	00009b99 	.word	0x00009b99
    9b78:	00009ba1 	.word	0x00009ba1
    9b7c:	00009ba9 	.word	0x00009ba9
    9b80:	00009bb1 	.word	0x00009bb1
    9b84:	00009bb9 	.word	0x00009bb9
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    9b88:	230c      	movs	r3, #12
    9b8a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9b8e:	e018      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    9b90:	2310      	movs	r3, #16
    9b92:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9b96:	e014      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    9b98:	2314      	movs	r3, #20
    9b9a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9b9e:	e010      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    9ba0:	2318      	movs	r3, #24
    9ba2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9ba6:	e00c      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    9ba8:	2320      	movs	r3, #32
    9baa:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9bae:	e008      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    9bb0:	2330      	movs	r3, #48	; 0x30
    9bb2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9bb6:	e004      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    9bb8:	2340      	movs	r3, #64	; 0x40
    9bba:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9bbe:	e000      	b.n	9bc2 <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    9bc0:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    9bc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9bc6:	4618      	mov	r0, r3
    9bc8:	b004      	add	sp, #16
    9bca:	4770      	bx	lr

00009bcc <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9bcc:	b500      	push	{lr}
    9bce:	b08b      	sub	sp, #44	; 0x2c
    9bd0:	9001      	str	r0, [sp, #4]
    9bd2:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    9bd4:	2308      	movs	r3, #8
    9bd6:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    9bda:	2300      	movs	r3, #0
    9bdc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    9be0:	f44f 7300 	mov.w	r3, #512	; 0x200
    9be4:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    9be6:	2300      	movs	r3, #0
    9be8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    9bec:	9b00      	ldr	r3, [sp, #0]
    9bee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    9bf2:	2300      	movs	r3, #0
    9bf4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    9bf8:	2300      	movs	r3, #0
    9bfa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    9bfe:	2300      	movs	r3, #0
    9c00:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    9c02:	2300      	movs	r3, #0
    9c04:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    9c08:	9b01      	ldr	r3, [sp, #4]
    9c0a:	3380      	adds	r3, #128	; 0x80
    9c0c:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    9c0e:	2300      	movs	r3, #0
    9c10:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    9c12:	2300      	movs	r3, #0
    9c14:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    9c18:	e02d      	b.n	9c76 <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    9c1a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    9c1e:	4619      	mov	r1, r3
    9c20:	9801      	ldr	r0, [sp, #4]
    9c22:	f000 fad1 	bl	a1c8 <FlexCAN_GetPayloadSize>
    9c26:	4603      	mov	r3, r0
    9c28:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    9c2c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9c30:	f89d 3020 	ldrb.w	r3, [sp, #32]
    9c34:	4413      	add	r3, r2
    9c36:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    9c3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9c3e:	9a07      	ldr	r2, [sp, #28]
    9c40:	fbb2 f3f3 	udiv	r3, r2, r3
    9c44:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    9c48:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    9c4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9c50:	429a      	cmp	r2, r3
    9c52:	d815      	bhi.n	9c80 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    9c54:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c58:	3380      	adds	r3, #128	; 0x80
    9c5a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    9c5e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9c62:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    9c66:	1ad3      	subs	r3, r2, r3
    9c68:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    9c6c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    9c70:	3301      	adds	r3, #1
    9c72:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    9c76:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	d0cd      	beq.n	9c1a <FlexCAN_GetMsgBuffRegion+0x4e>
    9c7e:	e000      	b.n	9c82 <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    9c80:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    9c82:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    9c86:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9c8a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    9c8e:	fbb3 f0f2 	udiv	r0, r3, r2
    9c92:	fb00 f202 	mul.w	r2, r0, r2
    9c96:	1a9b      	subs	r3, r3, r2
    9c98:	b2db      	uxtb	r3, r3
    9c9a:	461a      	mov	r2, r3
    9c9c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9ca0:	089b      	lsrs	r3, r3, #2
    9ca2:	b2db      	uxtb	r3, r3
    9ca4:	fb02 f303 	mul.w	r3, r2, r3
    9ca8:	440b      	add	r3, r1
    9caa:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    9cac:	9b06      	ldr	r3, [sp, #24]
    9cae:	009b      	lsls	r3, r3, #2
    9cb0:	9a04      	ldr	r2, [sp, #16]
    9cb2:	4413      	add	r3, r2
    9cb4:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    9cb6:	9b03      	ldr	r3, [sp, #12]
}
    9cb8:	4618      	mov	r0, r3
    9cba:	b00b      	add	sp, #44	; 0x2c
    9cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00009cc0 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    9cc0:	b084      	sub	sp, #16
    9cc2:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    9cc4:	2300      	movs	r3, #0
    9cc6:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    9cc8:	2300      	movs	r3, #0
    9cca:	9303      	str	r3, [sp, #12]
    9ccc:	e00e      	b.n	9cec <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    9cce:	4a0b      	ldr	r2, [pc, #44]	; (9cfc <FlexCAN_GetMaxMbNum+0x3c>)
    9cd0:	9b03      	ldr	r3, [sp, #12]
    9cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd6:	9a01      	ldr	r2, [sp, #4]
    9cd8:	429a      	cmp	r2, r3
    9cda:	d104      	bne.n	9ce6 <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    9cdc:	4a08      	ldr	r2, [pc, #32]	; (9d00 <FlexCAN_GetMaxMbNum+0x40>)
    9cde:	9b03      	ldr	r3, [sp, #12]
    9ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce4:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    9ce6:	9b03      	ldr	r3, [sp, #12]
    9ce8:	3301      	adds	r3, #1
    9cea:	9303      	str	r3, [sp, #12]
    9cec:	9b03      	ldr	r3, [sp, #12]
    9cee:	2b02      	cmp	r3, #2
    9cf0:	d9ed      	bls.n	9cce <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    9cf2:	9b02      	ldr	r3, [sp, #8]
}
    9cf4:	4618      	mov	r0, r3
    9cf6:	b004      	add	sp, #16
    9cf8:	4770      	bx	lr
    9cfa:	bf00      	nop
    9cfc:	0000ca1c 	.word	0x0000ca1c
    9d00:	0000ca28 	.word	0x0000ca28

00009d04 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    9d04:	b500      	push	{lr}
    9d06:	b087      	sub	sp, #28
    9d08:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    9d0a:	2300      	movs	r3, #0
    9d0c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9d0e:	2300      	movs	r3, #0
    9d10:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9d12:	2100      	movs	r1, #0
    9d14:	4820      	ldr	r0, [pc, #128]	; (9d98 <FlexCAN_EnterFreezeMode+0x94>)
    9d16:	f7f7 fa37 	bl	1188 <OsIf_MicrosToTicks>
    9d1a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    9d1c:	2300      	movs	r3, #0
    9d1e:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    9d20:	f001 fad2 	bl	b2c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    9d24:	9b01      	ldr	r3, [sp, #4]
    9d26:	681b      	ldr	r3, [r3, #0]
    9d28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    9d2c:	9b01      	ldr	r3, [sp, #4]
    9d2e:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    9d30:	9b01      	ldr	r3, [sp, #4]
    9d32:	681b      	ldr	r3, [r3, #0]
    9d34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    9d38:	9b01      	ldr	r3, [sp, #4]
    9d3a:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    9d3c:	9b01      	ldr	r3, [sp, #4]
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	2b00      	cmp	r3, #0
    9d42:	da05      	bge.n	9d50 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    9d44:	9b01      	ldr	r3, [sp, #4]
    9d46:	681b      	ldr	r3, [r3, #0]
    9d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    9d4c:	9b01      	ldr	r3, [sp, #4]
    9d4e:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    9d50:	f001 fae6 	bl	b320 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9d54:	2000      	movs	r0, #0
    9d56:	f7f7 f9cb 	bl	10f0 <OsIf_GetCounter>
    9d5a:	4603      	mov	r3, r0
    9d5c:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    9d5e:	e00f      	b.n	9d80 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9d60:	ab02      	add	r3, sp, #8
    9d62:	2100      	movs	r1, #0
    9d64:	4618      	mov	r0, r3
    9d66:	f7f7 f9dc 	bl	1122 <OsIf_GetElapsed>
    9d6a:	4602      	mov	r2, r0
    9d6c:	9b05      	ldr	r3, [sp, #20]
    9d6e:	4413      	add	r3, r2
    9d70:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    9d72:	9a05      	ldr	r2, [sp, #20]
    9d74:	9b03      	ldr	r3, [sp, #12]
    9d76:	429a      	cmp	r2, r3
    9d78:	d302      	bcc.n	9d80 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    9d7a:	2303      	movs	r3, #3
    9d7c:	9304      	str	r3, [sp, #16]
            break;
    9d7e:	e005      	b.n	9d8c <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    9d80:	9b01      	ldr	r3, [sp, #4]
    9d82:	681b      	ldr	r3, [r3, #0]
    9d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d0e9      	beq.n	9d60 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    9d8c:	9b04      	ldr	r3, [sp, #16]
}
    9d8e:	4618      	mov	r0, r3
    9d90:	b007      	add	sp, #28
    9d92:	f85d fb04 	ldr.w	pc, [sp], #4
    9d96:	bf00      	nop
    9d98:	000f4240 	.word	0x000f4240

00009d9c <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    9d9c:	b500      	push	{lr}
    9d9e:	b087      	sub	sp, #28
    9da0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    9da2:	2300      	movs	r3, #0
    9da4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9da6:	2300      	movs	r3, #0
    9da8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9daa:	2100      	movs	r1, #0
    9dac:	4818      	ldr	r0, [pc, #96]	; (9e10 <FlexCAN_Enable+0x74>)
    9dae:	f7f7 f9eb 	bl	1188 <OsIf_MicrosToTicks>
    9db2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    9db4:	2300      	movs	r3, #0
    9db6:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    9db8:	f001 fad8 	bl	b36c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    9dbc:	9b01      	ldr	r3, [sp, #4]
    9dbe:	681b      	ldr	r3, [r3, #0]
    9dc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    9dc4:	9b01      	ldr	r3, [sp, #4]
    9dc6:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    9dc8:	f001 fafc 	bl	b3c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9dcc:	2000      	movs	r0, #0
    9dce:	f7f7 f98f 	bl	10f0 <OsIf_GetCounter>
    9dd2:	4603      	mov	r3, r0
    9dd4:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    9dd6:	e00f      	b.n	9df8 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9dd8:	ab02      	add	r3, sp, #8
    9dda:	2100      	movs	r1, #0
    9ddc:	4618      	mov	r0, r3
    9dde:	f7f7 f9a0 	bl	1122 <OsIf_GetElapsed>
    9de2:	4602      	mov	r2, r0
    9de4:	9b05      	ldr	r3, [sp, #20]
    9de6:	4413      	add	r3, r2
    9de8:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    9dea:	9a05      	ldr	r2, [sp, #20]
    9dec:	9b03      	ldr	r3, [sp, #12]
    9dee:	429a      	cmp	r2, r3
    9df0:	d302      	bcc.n	9df8 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    9df2:	2303      	movs	r3, #3
    9df4:	9304      	str	r3, [sp, #16]
            break;
    9df6:	e005      	b.n	9e04 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    9df8:	9b01      	ldr	r3, [sp, #4]
    9dfa:	681b      	ldr	r3, [r3, #0]
    9dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9e00:	2b00      	cmp	r3, #0
    9e02:	d0e9      	beq.n	9dd8 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    9e04:	9b04      	ldr	r3, [sp, #16]
}
    9e06:	4618      	mov	r0, r3
    9e08:	b007      	add	sp, #28
    9e0a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e0e:	bf00      	nop
    9e10:	000f4240 	.word	0x000f4240

00009e14 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    9e14:	b500      	push	{lr}
    9e16:	b087      	sub	sp, #28
    9e18:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    9e1a:	2300      	movs	r3, #0
    9e1c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9e1e:	2300      	movs	r3, #0
    9e20:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e22:	2100      	movs	r1, #0
    9e24:	481b      	ldr	r0, [pc, #108]	; (9e94 <FlexCAN_ExitFreezeMode+0x80>)
    9e26:	f7f7 f9af 	bl	1188 <OsIf_MicrosToTicks>
    9e2a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    9e2c:	2300      	movs	r3, #0
    9e2e:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    9e30:	f001 faee 	bl	b410 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    9e34:	9b01      	ldr	r3, [sp, #4]
    9e36:	681b      	ldr	r3, [r3, #0]
    9e38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    9e3c:	9b01      	ldr	r3, [sp, #4]
    9e3e:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    9e40:	9b01      	ldr	r3, [sp, #4]
    9e42:	681b      	ldr	r3, [r3, #0]
    9e44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    9e48:	9b01      	ldr	r3, [sp, #4]
    9e4a:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    9e4c:	f001 fb0c 	bl	b468 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e50:	2000      	movs	r0, #0
    9e52:	f7f7 f94d 	bl	10f0 <OsIf_GetCounter>
    9e56:	4603      	mov	r3, r0
    9e58:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    9e5a:	e00f      	b.n	9e7c <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e5c:	ab02      	add	r3, sp, #8
    9e5e:	2100      	movs	r1, #0
    9e60:	4618      	mov	r0, r3
    9e62:	f7f7 f95e 	bl	1122 <OsIf_GetElapsed>
    9e66:	4602      	mov	r2, r0
    9e68:	9b05      	ldr	r3, [sp, #20]
    9e6a:	4413      	add	r3, r2
    9e6c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    9e6e:	9a05      	ldr	r2, [sp, #20]
    9e70:	9b03      	ldr	r3, [sp, #12]
    9e72:	429a      	cmp	r2, r3
    9e74:	d302      	bcc.n	9e7c <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    9e76:	2303      	movs	r3, #3
    9e78:	9304      	str	r3, [sp, #16]
            break;
    9e7a:	e005      	b.n	9e88 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    9e7c:	9b01      	ldr	r3, [sp, #4]
    9e7e:	681b      	ldr	r3, [r3, #0]
    9e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9e84:	2b00      	cmp	r3, #0
    9e86:	d1e9      	bne.n	9e5c <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    9e88:	9b04      	ldr	r3, [sp, #16]
}
    9e8a:	4618      	mov	r0, r3
    9e8c:	b007      	add	sp, #28
    9e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e92:	bf00      	nop
    9e94:	000f4240 	.word	0x000f4240

00009e98 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    9e98:	b500      	push	{lr}
    9e9a:	b087      	sub	sp, #28
    9e9c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    9e9e:	2300      	movs	r3, #0
    9ea0:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9ea2:	2300      	movs	r3, #0
    9ea4:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9ea6:	2100      	movs	r1, #0
    9ea8:	481a      	ldr	r0, [pc, #104]	; (9f14 <FlexCAN_Disable+0x7c>)
    9eaa:	f7f7 f96d 	bl	1188 <OsIf_MicrosToTicks>
    9eae:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    9eb0:	2300      	movs	r3, #0
    9eb2:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    9eb4:	9b01      	ldr	r3, [sp, #4]
    9eb6:	681b      	ldr	r3, [r3, #0]
    9eb8:	2b00      	cmp	r3, #0
    9eba:	db25      	blt.n	9f08 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    9ebc:	f001 fafa 	bl	b4b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    9ec0:	9b01      	ldr	r3, [sp, #4]
    9ec2:	681b      	ldr	r3, [r3, #0]
    9ec4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    9ec8:	9b01      	ldr	r3, [sp, #4]
    9eca:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    9ecc:	f001 fb1e 	bl	b50c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9ed0:	2000      	movs	r0, #0
    9ed2:	f7f7 f90d 	bl	10f0 <OsIf_GetCounter>
    9ed6:	4603      	mov	r3, r0
    9ed8:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    9eda:	e00f      	b.n	9efc <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9edc:	ab02      	add	r3, sp, #8
    9ede:	2100      	movs	r1, #0
    9ee0:	4618      	mov	r0, r3
    9ee2:	f7f7 f91e 	bl	1122 <OsIf_GetElapsed>
    9ee6:	4602      	mov	r2, r0
    9ee8:	9b05      	ldr	r3, [sp, #20]
    9eea:	4413      	add	r3, r2
    9eec:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    9eee:	9a05      	ldr	r2, [sp, #20]
    9ef0:	9b03      	ldr	r3, [sp, #12]
    9ef2:	429a      	cmp	r2, r3
    9ef4:	d302      	bcc.n	9efc <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    9ef6:	2303      	movs	r3, #3
    9ef8:	9304      	str	r3, [sp, #16]
                break;
    9efa:	e005      	b.n	9f08 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    9efc:	9b01      	ldr	r3, [sp, #4]
    9efe:	681b      	ldr	r3, [r3, #0]
    9f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    9f04:	2b00      	cmp	r3, #0
    9f06:	d0e9      	beq.n	9edc <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    9f08:	9b04      	ldr	r3, [sp, #16]
}
    9f0a:	4618      	mov	r0, r3
    9f0c:	b007      	add	sp, #28
    9f0e:	f85d fb04 	ldr.w	pc, [sp], #4
    9f12:	bf00      	nop
    9f14:	000f4240 	.word	0x000f4240

00009f18 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    9f18:	b500      	push	{lr}
    9f1a:	b087      	sub	sp, #28
    9f1c:	9003      	str	r0, [sp, #12]
    9f1e:	9102      	str	r1, [sp, #8]
    9f20:	4613      	mov	r3, r2
    9f22:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    9f26:	9b02      	ldr	r3, [sp, #8]
    9f28:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    9f2a:	f001 fb15 	bl	b558 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    9f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f32:	2b00      	cmp	r3, #0
    9f34:	d020      	beq.n	9f78 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    9f36:	9b02      	ldr	r3, [sp, #8]
    9f38:	f244 0201 	movw	r2, #16385	; 0x4001
    9f3c:	4293      	cmp	r3, r2
    9f3e:	d106      	bne.n	9f4e <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    9f40:	9b03      	ldr	r3, [sp, #12]
    9f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    9f48:	9b03      	ldr	r3, [sp, #12]
    9f4a:	635a      	str	r2, [r3, #52]	; 0x34
    9f4c:	e03a      	b.n	9fc4 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    9f4e:	9b02      	ldr	r3, [sp, #8]
    9f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9f54:	d003      	beq.n	9f5e <FlexCAN_SetErrIntCmd+0x46>
    9f56:	9b02      	ldr	r3, [sp, #8]
    9f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9f5c:	d105      	bne.n	9f6a <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    9f5e:	9b03      	ldr	r3, [sp, #12]
    9f60:	681b      	ldr	r3, [r3, #0]
    9f62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    9f66:	9b03      	ldr	r3, [sp, #12]
    9f68:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    9f6a:	9b03      	ldr	r3, [sp, #12]
    9f6c:	685a      	ldr	r2, [r3, #4]
    9f6e:	9b05      	ldr	r3, [sp, #20]
    9f70:	431a      	orrs	r2, r3
    9f72:	9b03      	ldr	r3, [sp, #12]
    9f74:	605a      	str	r2, [r3, #4]
    9f76:	e025      	b.n	9fc4 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    9f78:	9b02      	ldr	r3, [sp, #8]
    9f7a:	f244 0201 	movw	r2, #16385	; 0x4001
    9f7e:	4293      	cmp	r3, r2
    9f80:	d106      	bne.n	9f90 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    9f82:	9b03      	ldr	r3, [sp, #12]
    9f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    9f8a:	9b03      	ldr	r3, [sp, #12]
    9f8c:	635a      	str	r2, [r3, #52]	; 0x34
    9f8e:	e019      	b.n	9fc4 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    9f90:	9b03      	ldr	r3, [sp, #12]
    9f92:	685a      	ldr	r2, [r3, #4]
    9f94:	9b05      	ldr	r3, [sp, #20]
    9f96:	43db      	mvns	r3, r3
    9f98:	401a      	ands	r2, r3
    9f9a:	9b03      	ldr	r3, [sp, #12]
    9f9c:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    9f9e:	9b03      	ldr	r3, [sp, #12]
    9fa0:	685b      	ldr	r3, [r3, #4]
    9fa2:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    9fa4:	9b05      	ldr	r3, [sp, #20]
    9fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9faa:	2b00      	cmp	r3, #0
    9fac:	d10a      	bne.n	9fc4 <FlexCAN_SetErrIntCmd+0xac>
    9fae:	9b05      	ldr	r3, [sp, #20]
    9fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9fb4:	2b00      	cmp	r3, #0
    9fb6:	d105      	bne.n	9fc4 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    9fb8:	9b03      	ldr	r3, [sp, #12]
    9fba:	681b      	ldr	r3, [r3, #0]
    9fbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    9fc0:	9b03      	ldr	r3, [sp, #12]
    9fc2:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    9fc4:	f001 faf4 	bl	b5b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    9fc8:	bf00      	nop
    9fca:	b007      	add	sp, #28
    9fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00009fd0 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    9fd0:	b500      	push	{lr}
    9fd2:	b087      	sub	sp, #28
    9fd4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    9fd6:	2300      	movs	r3, #0
    9fd8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9fda:	2300      	movs	r3, #0
    9fdc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9fde:	2100      	movs	r1, #0
    9fe0:	4833      	ldr	r0, [pc, #204]	; (a0b0 <FlexCAN_Init+0xe0>)
    9fe2:	f7f7 f8d1 	bl	1188 <OsIf_MicrosToTicks>
    9fe6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    9fe8:	2300      	movs	r3, #0
    9fea:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    9fec:	9b01      	ldr	r3, [sp, #4]
    9fee:	681b      	ldr	r3, [r3, #0]
    9ff0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    9ff4:	9b01      	ldr	r3, [sp, #4]
    9ff6:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9ff8:	2000      	movs	r0, #0
    9ffa:	f7f7 f879 	bl	10f0 <OsIf_GetCounter>
    9ffe:	4603      	mov	r3, r0
    a000:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    a002:	e00f      	b.n	a024 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a004:	ab02      	add	r3, sp, #8
    a006:	2100      	movs	r1, #0
    a008:	4618      	mov	r0, r3
    a00a:	f7f7 f88a 	bl	1122 <OsIf_GetElapsed>
    a00e:	4602      	mov	r2, r0
    a010:	9b05      	ldr	r3, [sp, #20]
    a012:	4413      	add	r3, r2
    a014:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    a016:	9a05      	ldr	r2, [sp, #20]
    a018:	9b03      	ldr	r3, [sp, #12]
    a01a:	429a      	cmp	r2, r3
    a01c:	d302      	bcc.n	a024 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    a01e:	2303      	movs	r3, #3
    a020:	9304      	str	r3, [sp, #16]
            break;
    a022:	e005      	b.n	a030 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    a024:	9b01      	ldr	r3, [sp, #4]
    a026:	681b      	ldr	r3, [r3, #0]
    a028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a02c:	2b00      	cmp	r3, #0
    a02e:	d1e9      	bne.n	a004 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    a030:	9b04      	ldr	r3, [sp, #16]
    a032:	2b00      	cmp	r3, #0
    a034:	d136      	bne.n	a0a4 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    a036:	9b01      	ldr	r3, [sp, #4]
    a038:	681b      	ldr	r3, [r3, #0]
    a03a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    a03e:	9b01      	ldr	r3, [sp, #4]
    a040:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    a042:	9801      	ldr	r0, [sp, #4]
    a044:	f7ff fd40 	bl	9ac8 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    a048:	9b01      	ldr	r3, [sp, #4]
    a04a:	f04f 32ff 	mov.w	r2, #4294967295
    a04e:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    a050:	9b01      	ldr	r3, [sp, #4]
    a052:	f04f 32ff 	mov.w	r2, #4294967295
    a056:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    a058:	9b01      	ldr	r3, [sp, #4]
    a05a:	f04f 32ff 	mov.w	r2, #4294967295
    a05e:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    a060:	9b01      	ldr	r3, [sp, #4]
    a062:	2200      	movs	r2, #0
    a064:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    a066:	9b01      	ldr	r3, [sp, #4]
    a068:	f04f 32ff 	mov.w	r2, #4294967295
    a06c:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    a06e:	9b01      	ldr	r3, [sp, #4]
    a070:	4a10      	ldr	r2, [pc, #64]	; (a0b4 <FlexCAN_Init+0xe4>)
    a072:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    a074:	9b01      	ldr	r3, [sp, #4]
    a076:	2200      	movs	r2, #0
    a078:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    a07a:	9b01      	ldr	r3, [sp, #4]
    a07c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    a080:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    a082:	9b01      	ldr	r3, [sp, #4]
    a084:	2200      	movs	r2, #0
    a086:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    a088:	9801      	ldr	r0, [sp, #4]
    a08a:	f000 f85b 	bl	a144 <FlexCAN_IsFDAvailable>
    a08e:	4603      	mov	r3, r0
    a090:	2b00      	cmp	r3, #0
    a092:	d007      	beq.n	a0a4 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    a094:	9b01      	ldr	r3, [sp, #4]
    a096:	2200      	movs	r2, #0
    a098:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    a09c:	9b01      	ldr	r3, [sp, #4]
    a09e:	4a06      	ldr	r2, [pc, #24]	; (a0b8 <FlexCAN_Init+0xe8>)
    a0a0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    a0a4:	9b04      	ldr	r3, [sp, #16]
}
    a0a6:	4618      	mov	r0, r3
    a0a8:	b007      	add	sp, #28
    a0aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a0ae:	bf00      	nop
    a0b0:	000f4240 	.word	0x000f4240
    a0b4:	003b0006 	.word	0x003b0006
    a0b8:	80004100 	.word	0x80004100

0000a0bc <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    a0bc:	b500      	push	{lr}
    a0be:	b087      	sub	sp, #28
    a0c0:	9001      	str	r0, [sp, #4]
    a0c2:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    a0c4:	9801      	ldr	r0, [sp, #4]
    a0c6:	f7ff fdfb 	bl	9cc0 <FlexCAN_GetMaxMbNum>
    a0ca:	4603      	mov	r3, r0
    a0cc:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    a0d0:	2300      	movs	r3, #0
    a0d2:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    a0d4:	9b01      	ldr	r3, [sp, #4]
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d001      	beq.n	a0e4 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    a0e0:	2301      	movs	r3, #1
    a0e2:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    a0e4:	9b04      	ldr	r3, [sp, #16]
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d127      	bne.n	a13a <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    a0ea:	9b01      	ldr	r3, [sp, #4]
    a0ec:	681b      	ldr	r3, [r3, #0]
    a0ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    a0f2:	9b01      	ldr	r3, [sp, #4]
    a0f4:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    a0f6:	9b01      	ldr	r3, [sp, #4]
    a0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a0fa:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    a0fe:	9b00      	ldr	r3, [sp, #0]
    a100:	061b      	lsls	r3, r3, #24
    a102:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a106:	431a      	orrs	r2, r3
    a108:	9b01      	ldr	r3, [sp, #4]
    a10a:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    a10c:	9b01      	ldr	r3, [sp, #4]
    a10e:	f04f 32ff 	mov.w	r2, #4294967295
    a112:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    a114:	2300      	movs	r3, #0
    a116:	9305      	str	r3, [sp, #20]
    a118:	e00a      	b.n	a130 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    a11a:	9b01      	ldr	r3, [sp, #4]
    a11c:	9a05      	ldr	r2, [sp, #20]
    a11e:	f502 7208 	add.w	r2, r2, #544	; 0x220
    a122:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    a126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    a12a:	9b05      	ldr	r3, [sp, #20]
    a12c:	3301      	adds	r3, #1
    a12e:	9305      	str	r3, [sp, #20]
    a130:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a134:	9a05      	ldr	r2, [sp, #20]
    a136:	429a      	cmp	r2, r3
    a138:	d3ef      	bcc.n	a11a <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    a13a:	9b04      	ldr	r3, [sp, #16]
}
    a13c:	4618      	mov	r0, r3
    a13e:	b007      	add	sp, #28
    a140:	f85d fb04 	ldr.w	pc, [sp], #4

0000a144 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    a144:	b084      	sub	sp, #16
    a146:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    a148:	2300      	movs	r3, #0
    a14a:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    a14c:	2300      	movs	r3, #0
    a14e:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    a152:	2300      	movs	r3, #0
    a154:	9303      	str	r3, [sp, #12]
    a156:	e00d      	b.n	a174 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    a158:	4a0a      	ldr	r2, [pc, #40]	; (a184 <FlexCAN_IsFDAvailable+0x40>)
    a15a:	9b03      	ldr	r3, [sp, #12]
    a15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a160:	9a01      	ldr	r2, [sp, #4]
    a162:	429a      	cmp	r2, r3
    a164:	d103      	bne.n	a16e <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    a166:	2301      	movs	r3, #1
    a168:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    a16c:	e005      	b.n	a17a <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    a16e:	9b03      	ldr	r3, [sp, #12]
    a170:	3301      	adds	r3, #1
    a172:	9303      	str	r3, [sp, #12]
    a174:	9b03      	ldr	r3, [sp, #12]
    a176:	2b00      	cmp	r3, #0
    a178:	d0ee      	beq.n	a158 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    a17a:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    a17e:	4618      	mov	r0, r3
    a180:	b004      	add	sp, #16
    a182:	4770      	bx	lr
    a184:	0000ca34 	.word	0x0000ca34

0000a188 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    a188:	b500      	push	{lr}
    a18a:	b085      	sub	sp, #20
    a18c:	9001      	str	r0, [sp, #4]
    a18e:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    a190:	9801      	ldr	r0, [sp, #4]
    a192:	f7ff fbd6 	bl	9942 <FlexCAN_IsFDEnabled>
    a196:	4603      	mov	r3, r0
    a198:	2b00      	cmp	r3, #0
    a19a:	d011      	beq.n	a1c0 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    a19c:	9b01      	ldr	r3, [sp, #4]
    a19e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a1a2:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    a1a4:	9b03      	ldr	r3, [sp, #12]
    a1a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    a1aa:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    a1ac:	9b00      	ldr	r3, [sp, #0]
    a1ae:	681b      	ldr	r3, [r3, #0]
    a1b0:	041b      	lsls	r3, r3, #16
    a1b2:	9a03      	ldr	r2, [sp, #12]
    a1b4:	4313      	orrs	r3, r2
    a1b6:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    a1b8:	9b01      	ldr	r3, [sp, #4]
    a1ba:	9a03      	ldr	r2, [sp, #12]
    a1bc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    a1c0:	bf00      	nop
    a1c2:	b005      	add	sp, #20
    a1c4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a1c8 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    a1c8:	b500      	push	{lr}
    a1ca:	b085      	sub	sp, #20
    a1cc:	9001      	str	r0, [sp, #4]
    a1ce:	460b      	mov	r3, r1
    a1d0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    a1d4:	2300      	movs	r3, #0
    a1d6:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    a1d8:	9801      	ldr	r0, [sp, #4]
    a1da:	f7ff ffb3 	bl	a144 <FlexCAN_IsFDAvailable>
    a1de:	4603      	mov	r3, r0
    a1e0:	2b00      	cmp	r3, #0
    a1e2:	d019      	beq.n	a218 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    a1e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d10a      	bne.n	a202 <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    a1ec:	9b01      	ldr	r3, [sp, #4]
    a1ee:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a1f2:	0c1b      	lsrs	r3, r3, #16
    a1f4:	f003 0303 	and.w	r3, r3, #3
    a1f8:	2208      	movs	r2, #8
    a1fa:	fa02 f303 	lsl.w	r3, r2, r3
    a1fe:	9303      	str	r3, [sp, #12]
    a200:	e00c      	b.n	a21c <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    a202:	9b01      	ldr	r3, [sp, #4]
    a204:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a208:	0c1b      	lsrs	r3, r3, #16
    a20a:	f003 0303 	and.w	r3, r3, #3
    a20e:	2208      	movs	r2, #8
    a210:	fa02 f303 	lsl.w	r3, r2, r3
    a214:	9303      	str	r3, [sp, #12]
    a216:	e001      	b.n	a21c <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    a218:	2308      	movs	r3, #8
    a21a:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    a21c:	9b03      	ldr	r3, [sp, #12]
    a21e:	b2db      	uxtb	r3, r3
}
    a220:	4618      	mov	r0, r3
    a222:	b005      	add	sp, #20
    a224:	f85d fb04 	ldr.w	pc, [sp], #4

0000a228 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    a228:	b500      	push	{lr}
    a22a:	b087      	sub	sp, #28
    a22c:	9001      	str	r0, [sp, #4]
    a22e:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    a230:	2308      	movs	r3, #8
    a232:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    a236:	f44f 7300 	mov.w	r3, #512	; 0x200
    a23a:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    a23c:	2308      	movs	r3, #8
    a23e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    a242:	2300      	movs	r3, #0
    a244:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    a248:	2300      	movs	r3, #0
    a24a:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    a24e:	2300      	movs	r3, #0
    a250:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    a254:	2300      	movs	r3, #0
    a256:	f88d 3015 	strb.w	r3, [sp, #21]
    a25a:	e024      	b.n	a2a6 <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    a25c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a260:	4619      	mov	r1, r3
    a262:	9801      	ldr	r0, [sp, #4]
    a264:	f7ff ffb0 	bl	a1c8 <FlexCAN_GetPayloadSize>
    a268:	4603      	mov	r3, r0
    a26a:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    a26e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a272:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a276:	4413      	add	r3, r2
    a278:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    a27c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a280:	9a04      	ldr	r2, [sp, #16]
    a282:	fbb2 f3f3 	udiv	r3, r2, r3
    a286:	b2da      	uxtb	r2, r3
    a288:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a28c:	4413      	add	r3, r2
    a28e:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    a292:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a296:	9a00      	ldr	r2, [sp, #0]
    a298:	429a      	cmp	r2, r3
    a29a:	d309      	bcc.n	a2b0 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    a29c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a2a0:	3301      	adds	r3, #1
    a2a2:	f88d 3015 	strb.w	r3, [sp, #21]
    a2a6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d0d6      	beq.n	a25c <FlexCAN_GetMbPayloadSize+0x34>
    a2ae:	e000      	b.n	a2b2 <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    a2b0:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    a2b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a2b6:	4618      	mov	r0, r3
    a2b8:	b007      	add	sp, #28
    a2ba:	f85d fb04 	ldr.w	pc, [sp], #4

0000a2be <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    a2be:	b500      	push	{lr}
    a2c0:	b085      	sub	sp, #20
    a2c2:	9001      	str	r0, [sp, #4]
    a2c4:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    a2c6:	9900      	ldr	r1, [sp, #0]
    a2c8:	9801      	ldr	r0, [sp, #4]
    a2ca:	f7ff fc7f 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    a2ce:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    a2d0:	9b03      	ldr	r3, [sp, #12]
    a2d2:	681b      	ldr	r3, [r3, #0]
}
    a2d4:	bf00      	nop
    a2d6:	b005      	add	sp, #20
    a2d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000a2dc <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    a2dc:	b500      	push	{lr}
    a2de:	b087      	sub	sp, #28
    a2e0:	9003      	str	r0, [sp, #12]
    a2e2:	9201      	str	r2, [sp, #4]
    a2e4:	461a      	mov	r2, r3
    a2e6:	460b      	mov	r3, r1
    a2e8:	f88d 300b 	strb.w	r3, [sp, #11]
    a2ec:	4613      	mov	r3, r2
    a2ee:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    a2f2:	2300      	movs	r3, #0
    a2f4:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    a2f6:	9b01      	ldr	r3, [sp, #4]
    a2f8:	f003 031f 	and.w	r3, r3, #31
    a2fc:	2201      	movs	r2, #1
    a2fe:	fa02 f303 	lsl.w	r3, r2, r3
    a302:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    a304:	9b01      	ldr	r3, [sp, #4]
    a306:	2b1f      	cmp	r3, #31
    a308:	d837      	bhi.n	a37a <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    a30a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a30e:	2b00      	cmp	r3, #0
    a310:	d01b      	beq.n	a34a <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    a312:	f001 fcf9 	bl	bd08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    a316:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a31a:	4a1a      	ldr	r2, [pc, #104]	; (a384 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    a31c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a320:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a324:	9a04      	ldr	r2, [sp, #16]
    a326:	430a      	orrs	r2, r1
    a328:	4916      	ldr	r1, [pc, #88]	; (a384 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    a32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    a32e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a332:	2b00      	cmp	r3, #0
    a334:	d006      	beq.n	a344 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    a336:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a33a:	4a12      	ldr	r2, [pc, #72]	; (a384 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    a33c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a340:	9b03      	ldr	r3, [sp, #12]
    a342:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    a344:	f001 fd0c 	bl	bd60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    a348:	e017      	b.n	a37a <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    a34a:	f001 fcdd 	bl	bd08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    a34e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a352:	4a0c      	ldr	r2, [pc, #48]	; (a384 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    a354:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a358:	9b04      	ldr	r3, [sp, #16]
    a35a:	43da      	mvns	r2, r3
    a35c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a360:	400a      	ands	r2, r1
    a362:	4908      	ldr	r1, [pc, #32]	; (a384 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    a364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    a368:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a36c:	4a05      	ldr	r2, [pc, #20]	; (a384 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    a36e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a372:	9b03      	ldr	r3, [sp, #12]
    a374:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    a376:	f001 fcf3 	bl	bd60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    a37a:	9b05      	ldr	r3, [sp, #20]
}
    a37c:	4618      	mov	r0, r3
    a37e:	b007      	add	sp, #28
    a380:	f85d fb04 	ldr.w	pc, [sp], #4
    a384:	1fff8fa4 	.word	0x1fff8fa4

0000a388 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    a388:	b500      	push	{lr}
    a38a:	b087      	sub	sp, #28
    a38c:	9003      	str	r0, [sp, #12]
    a38e:	9201      	str	r2, [sp, #4]
    a390:	461a      	mov	r2, r3
    a392:	460b      	mov	r3, r1
    a394:	f88d 300b 	strb.w	r3, [sp, #11]
    a398:	4613      	mov	r3, r2
    a39a:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    a39e:	9b01      	ldr	r3, [sp, #4]
    a3a0:	f003 031f 	and.w	r3, r3, #31
    a3a4:	2201      	movs	r2, #1
    a3a6:	fa02 f303 	lsl.w	r3, r2, r3
    a3aa:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    a3ac:	9b01      	ldr	r3, [sp, #4]
    a3ae:	2b1f      	cmp	r3, #31
    a3b0:	d818      	bhi.n	a3e4 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    a3b2:	f001 fa6b 	bl	b88c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    a3b6:	9b03      	ldr	r3, [sp, #12]
    a3b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    a3ba:	9b05      	ldr	r3, [sp, #20]
    a3bc:	43da      	mvns	r2, r3
    a3be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3c2:	400a      	ands	r2, r1
    a3c4:	4909      	ldr	r1, [pc, #36]	; (a3ec <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    a3c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    a3ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d006      	beq.n	a3e0 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    a3d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3d6:	4a05      	ldr	r2, [pc, #20]	; (a3ec <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    a3d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a3dc:	9b03      	ldr	r3, [sp, #12]
    a3de:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    a3e0:	f001 fa80 	bl	b8e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    a3e4:	bf00      	nop
    a3e6:	b007      	add	sp, #28
    a3e8:	f85d fb04 	ldr.w	pc, [sp], #4
    a3ec:	1fff8fa4 	.word	0x1fff8fa4

0000a3f0 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    a3f0:	b082      	sub	sp, #8
    a3f2:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    a3f4:	9b01      	ldr	r3, [sp, #4]
    a3f6:	2200      	movs	r2, #0
    a3f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    a3fa:	bf00      	nop
    a3fc:	b002      	add	sp, #8
    a3fe:	4770      	bx	lr

0000a400 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    a400:	b082      	sub	sp, #8
    a402:	9001      	str	r0, [sp, #4]
    a404:	460b      	mov	r3, r1
    a406:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    a40a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a40e:	4a04      	ldr	r2, [pc, #16]	; (a420 <FlexCAN_EnableInterrupts+0x20>)
    a410:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a414:	9b01      	ldr	r3, [sp, #4]
    a416:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    a418:	bf00      	nop
    a41a:	b002      	add	sp, #8
    a41c:	4770      	bx	lr
    a41e:	bf00      	nop
    a420:	1fff8fa4 	.word	0x1fff8fa4

0000a424 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    a424:	b500      	push	{lr}
    a426:	b087      	sub	sp, #28
    a428:	9003      	str	r0, [sp, #12]
    a42a:	9102      	str	r1, [sp, #8]
    a42c:	9201      	str	r2, [sp, #4]
    a42e:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    a430:	9902      	ldr	r1, [sp, #8]
    a432:	9803      	ldr	r0, [sp, #12]
    a434:	f7ff fbca 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    a438:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    a43a:	9b05      	ldr	r3, [sp, #20]
    a43c:	3304      	adds	r3, #4
    a43e:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    a440:	9b05      	ldr	r3, [sp, #20]
    a442:	2200      	movs	r2, #0
    a444:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    a446:	9b04      	ldr	r3, [sp, #16]
    a448:	2200      	movs	r2, #0
    a44a:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    a44c:	9b01      	ldr	r3, [sp, #4]
    a44e:	685b      	ldr	r3, [r3, #4]
    a450:	2b01      	cmp	r3, #1
    a452:	d119      	bne.n	a488 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    a454:	9b05      	ldr	r3, [sp, #20]
    a456:	681b      	ldr	r3, [r3, #0]
    a458:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    a45c:	9b05      	ldr	r3, [sp, #20]
    a45e:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    a460:	9b05      	ldr	r3, [sp, #20]
    a462:	681b      	ldr	r3, [r3, #0]
    a464:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    a468:	9b05      	ldr	r3, [sp, #20]
    a46a:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    a46c:	9b04      	ldr	r3, [sp, #16]
    a46e:	681b      	ldr	r3, [r3, #0]
    a470:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    a474:	9b04      	ldr	r3, [sp, #16]
    a476:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    a478:	9b04      	ldr	r3, [sp, #16]
    a47a:	681a      	ldr	r2, [r3, #0]
    a47c:	9b00      	ldr	r3, [sp, #0]
    a47e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    a482:	431a      	orrs	r2, r3
    a484:	9b04      	ldr	r3, [sp, #16]
    a486:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    a488:	9b01      	ldr	r3, [sp, #4]
    a48a:	685b      	ldr	r3, [r3, #4]
    a48c:	2b00      	cmp	r3, #0
    a48e:	d116      	bne.n	a4be <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    a490:	9b05      	ldr	r3, [sp, #20]
    a492:	681b      	ldr	r3, [r3, #0]
    a494:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    a498:	9b05      	ldr	r3, [sp, #20]
    a49a:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    a49c:	9b04      	ldr	r3, [sp, #16]
    a49e:	681b      	ldr	r3, [r3, #0]
    a4a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    a4a4:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    a4a8:	9a04      	ldr	r2, [sp, #16]
    a4aa:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    a4ac:	9b04      	ldr	r3, [sp, #16]
    a4ae:	681a      	ldr	r2, [r3, #0]
    a4b0:	9b00      	ldr	r3, [sp, #0]
    a4b2:	0499      	lsls	r1, r3, #18
    a4b4:	4b0e      	ldr	r3, [pc, #56]	; (a4f0 <FlexCAN_SetRxMsgBuff+0xcc>)
    a4b6:	400b      	ands	r3, r1
    a4b8:	431a      	orrs	r2, r3
    a4ba:	9b04      	ldr	r3, [sp, #16]
    a4bc:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    a4be:	9b01      	ldr	r3, [sp, #4]
    a4c0:	681b      	ldr	r3, [r3, #0]
    a4c2:	2b0f      	cmp	r3, #15
    a4c4:	d00f      	beq.n	a4e6 <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    a4c6:	9b05      	ldr	r3, [sp, #20]
    a4c8:	681b      	ldr	r3, [r3, #0]
    a4ca:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    a4ce:	9b05      	ldr	r3, [sp, #20]
    a4d0:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    a4d2:	9b05      	ldr	r3, [sp, #20]
    a4d4:	681a      	ldr	r2, [r3, #0]
    a4d6:	9b01      	ldr	r3, [sp, #4]
    a4d8:	681b      	ldr	r3, [r3, #0]
    a4da:	061b      	lsls	r3, r3, #24
    a4dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a4e0:	431a      	orrs	r2, r3
    a4e2:	9b05      	ldr	r3, [sp, #20]
    a4e4:	601a      	str	r2, [r3, #0]
    }
}
    a4e6:	bf00      	nop
    a4e8:	b007      	add	sp, #28
    a4ea:	f85d fb04 	ldr.w	pc, [sp], #4
    a4ee:	bf00      	nop
    a4f0:	1ffc0000 	.word	0x1ffc0000

0000a4f4 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    a4f4:	b500      	push	{lr}
    a4f6:	b085      	sub	sp, #20
    a4f8:	9001      	str	r0, [sp, #4]
    a4fa:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    a4fc:	2300      	movs	r3, #0
    a4fe:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    a500:	9900      	ldr	r1, [sp, #0]
    a502:	9801      	ldr	r0, [sp, #4]
    a504:	f7ff fb62 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    a508:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    a50a:	9b02      	ldr	r3, [sp, #8]
    a50c:	681b      	ldr	r3, [r3, #0]
    a50e:	b29b      	uxth	r3, r3
    a510:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    a512:	9b03      	ldr	r3, [sp, #12]
}
    a514:	4618      	mov	r0, r3
    a516:	b005      	add	sp, #20
    a518:	f85d fb04 	ldr.w	pc, [sp], #4

0000a51c <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    a51c:	b500      	push	{lr}
    a51e:	b08d      	sub	sp, #52	; 0x34
    a520:	9003      	str	r0, [sp, #12]
    a522:	9102      	str	r1, [sp, #8]
    a524:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    a526:	9902      	ldr	r1, [sp, #8]
    a528:	9803      	ldr	r0, [sp, #12]
    a52a:	f7ff fb4f 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    a52e:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    a530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a532:	3304      	adds	r3, #4
    a534:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    a536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a538:	3308      	adds	r3, #8
    a53a:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    a53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a53e:	3308      	adds	r3, #8
    a540:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    a542:	2300      	movs	r3, #0
    a544:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    a546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a548:	681b      	ldr	r3, [r3, #0]
    a54a:	0c1b      	lsrs	r3, r3, #16
    a54c:	b2db      	uxtb	r3, r3
    a54e:	f003 030f 	and.w	r3, r3, #15
    a552:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    a556:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a55a:	4618      	mov	r0, r3
    a55c:	f7ff faed 	bl	9b3a <FlexCAN_ComputePayloadSize>
    a560:	4603      	mov	r3, r0
    a562:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    a566:	9b01      	ldr	r3, [sp, #4]
    a568:	3308      	adds	r3, #8
    a56a:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    a56c:	9902      	ldr	r1, [sp, #8]
    a56e:	9803      	ldr	r0, [sp, #12]
    a570:	f7ff fe5a 	bl	a228 <FlexCAN_GetMbPayloadSize>
    a574:	4603      	mov	r3, r0
    a576:	461a      	mov	r2, r3
    a578:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    a57c:	4293      	cmp	r3, r2
    a57e:	d906      	bls.n	a58e <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    a580:	9902      	ldr	r1, [sp, #8]
    a582:	9803      	ldr	r0, [sp, #12]
    a584:	f7ff fe50 	bl	a228 <FlexCAN_GetMbPayloadSize>
    a588:	4603      	mov	r3, r0
    a58a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    a58e:	9b01      	ldr	r3, [sp, #4]
    a590:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    a594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    a598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a59a:	681a      	ldr	r2, [r3, #0]
    a59c:	9b01      	ldr	r3, [sp, #4]
    a59e:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    a5a0:	9b01      	ldr	r3, [sp, #4]
    a5a2:	681b      	ldr	r3, [r3, #0]
    a5a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	d004      	beq.n	a5b6 <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    a5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5ae:	681a      	ldr	r2, [r3, #0]
    a5b0:	9b01      	ldr	r3, [sp, #4]
    a5b2:	605a      	str	r2, [r3, #4]
    a5b4:	e004      	b.n	a5c0 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5b8:	681b      	ldr	r3, [r3, #0]
    a5ba:	0c9a      	lsrs	r2, r3, #18
    a5bc:	9b01      	ldr	r3, [sp, #4]
    a5be:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    a5c0:	9b01      	ldr	r3, [sp, #4]
    a5c2:	681b      	ldr	r3, [r3, #0]
    a5c4:	b29a      	uxth	r2, r3
    a5c6:	9b01      	ldr	r3, [sp, #4]
    a5c8:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    a5ca:	2300      	movs	r3, #0
    a5cc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    a5d0:	e025      	b.n	a61e <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    a5d2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a5d6:	089b      	lsrs	r3, r3, #2
    a5d8:	b2db      	uxtb	r3, r3
    a5da:	009b      	lsls	r3, r3, #2
    a5dc:	9a07      	ldr	r2, [sp, #28]
    a5de:	4413      	add	r3, r2
    a5e0:	681b      	ldr	r3, [r3, #0]
    a5e2:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    a5e4:	9b04      	ldr	r3, [sp, #16]
    a5e6:	0e1a      	lsrs	r2, r3, #24
    a5e8:	9b04      	ldr	r3, [sp, #16]
    a5ea:	0a1b      	lsrs	r3, r3, #8
    a5ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a5f0:	431a      	orrs	r2, r3
    a5f2:	9b04      	ldr	r3, [sp, #16]
    a5f4:	021b      	lsls	r3, r3, #8
    a5f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a5fa:	ea42 0103 	orr.w	r1, r2, r3
    a5fe:	9b04      	ldr	r3, [sp, #16]
    a600:	061a      	lsls	r2, r3, #24
    a602:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a606:	089b      	lsrs	r3, r3, #2
    a608:	b2db      	uxtb	r3, r3
    a60a:	009b      	lsls	r3, r3, #2
    a60c:	9806      	ldr	r0, [sp, #24]
    a60e:	4403      	add	r3, r0
    a610:	430a      	orrs	r2, r1
    a612:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    a614:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a618:	3304      	adds	r3, #4
    a61a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    a61e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    a622:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    a626:	f023 0303 	bic.w	r3, r3, #3
    a62a:	429a      	cmp	r2, r3
    a62c:	d3d1      	bcc.n	a5d2 <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    a62e:	e014      	b.n	a65a <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    a630:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a634:	f083 0303 	eor.w	r3, r3, #3
    a638:	b2db      	uxtb	r3, r3
    a63a:	461a      	mov	r2, r3
    a63c:	9b08      	ldr	r3, [sp, #32]
    a63e:	441a      	add	r2, r3
    a640:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a644:	7812      	ldrb	r2, [r2, #0]
    a646:	b2d1      	uxtb	r1, r2
    a648:	9a01      	ldr	r2, [sp, #4]
    a64a:	4413      	add	r3, r2
    a64c:	460a      	mov	r2, r1
    a64e:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    a650:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a654:	3301      	adds	r3, #1
    a656:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    a65a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    a65e:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    a662:	429a      	cmp	r2, r3
    a664:	d3e4      	bcc.n	a630 <FlexCAN_GetMsgBuff+0x114>
    }
}
    a666:	bf00      	nop
    a668:	bf00      	nop
    a66a:	b00d      	add	sp, #52	; 0x34
    a66c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a670 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    a670:	b500      	push	{lr}
    a672:	b08d      	sub	sp, #52	; 0x34
    a674:	9003      	str	r0, [sp, #12]
    a676:	9102      	str	r1, [sp, #8]
    a678:	9201      	str	r2, [sp, #4]
    a67a:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    a67c:	2300      	movs	r3, #0
    a67e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    a680:	9b03      	ldr	r3, [sp, #12]
    a682:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    a684:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a686:	3304      	adds	r3, #4
    a688:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a68c:	3308      	adds	r3, #8
    a68e:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a692:	3308      	adds	r3, #8
    a694:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    a696:	9b00      	ldr	r3, [sp, #0]
    a698:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    a69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a69c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    a6a0:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    a6a2:	9b08      	ldr	r3, [sp, #32]
    a6a4:	2200      	movs	r2, #0
    a6a6:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    a6a8:	9b02      	ldr	r3, [sp, #8]
    a6aa:	689b      	ldr	r3, [r3, #8]
    a6ac:	b2db      	uxtb	r3, r3
    a6ae:	4618      	mov	r0, r3
    a6b0:	f7ff f9f4 	bl	9a9c <FlexCAN_ComputeDLCValue>
    a6b4:	4603      	mov	r3, r0
    a6b6:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    a6ba:	9b00      	ldr	r3, [sp, #0]
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d065      	beq.n	a78c <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    a6c0:	2300      	movs	r3, #0
    a6c2:	930a      	str	r3, [sp, #40]	; 0x28
    a6c4:	e02c      	b.n	a720 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    a6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6c8:	089b      	lsrs	r3, r3, #2
    a6ca:	009b      	lsls	r3, r3, #2
    a6cc:	9a05      	ldr	r2, [sp, #20]
    a6ce:	4413      	add	r3, r2
    a6d0:	681b      	ldr	r3, [r3, #0]
    a6d2:	0e1a      	lsrs	r2, r3, #24
    a6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6d6:	089b      	lsrs	r3, r3, #2
    a6d8:	009b      	lsls	r3, r3, #2
    a6da:	9905      	ldr	r1, [sp, #20]
    a6dc:	440b      	add	r3, r1
    a6de:	681b      	ldr	r3, [r3, #0]
    a6e0:	0a1b      	lsrs	r3, r3, #8
    a6e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a6e6:	431a      	orrs	r2, r3
    a6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6ea:	089b      	lsrs	r3, r3, #2
    a6ec:	009b      	lsls	r3, r3, #2
    a6ee:	9905      	ldr	r1, [sp, #20]
    a6f0:	440b      	add	r3, r1
    a6f2:	681b      	ldr	r3, [r3, #0]
    a6f4:	021b      	lsls	r3, r3, #8
    a6f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a6fa:	ea42 0103 	orr.w	r1, r2, r3
    a6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a700:	089b      	lsrs	r3, r3, #2
    a702:	009b      	lsls	r3, r3, #2
    a704:	9a05      	ldr	r2, [sp, #20]
    a706:	4413      	add	r3, r2
    a708:	681b      	ldr	r3, [r3, #0]
    a70a:	061a      	lsls	r2, r3, #24
    a70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a70e:	089b      	lsrs	r3, r3, #2
    a710:	009b      	lsls	r3, r3, #2
    a712:	9806      	ldr	r0, [sp, #24]
    a714:	4403      	add	r3, r0
    a716:	430a      	orrs	r2, r1
    a718:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    a71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a71c:	3304      	adds	r3, #4
    a71e:	930a      	str	r3, [sp, #40]	; 0x28
    a720:	9b02      	ldr	r3, [sp, #8]
    a722:	689b      	ldr	r3, [r3, #8]
    a724:	f023 0303 	bic.w	r3, r3, #3
    a728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a72a:	429a      	cmp	r2, r3
    a72c:	d3cb      	bcc.n	a6c6 <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    a72e:	e00c      	b.n	a74a <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    a730:	9a00      	ldr	r2, [sp, #0]
    a732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a734:	441a      	add	r2, r3
    a736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a738:	f083 0303 	eor.w	r3, r3, #3
    a73c:	9907      	ldr	r1, [sp, #28]
    a73e:	440b      	add	r3, r1
    a740:	7812      	ldrb	r2, [r2, #0]
    a742:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    a744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a746:	3301      	adds	r3, #1
    a748:	930a      	str	r3, [sp, #40]	; 0x28
    a74a:	9b02      	ldr	r3, [sp, #8]
    a74c:	689b      	ldr	r3, [r3, #8]
    a74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a750:	429a      	cmp	r2, r3
    a752:	d3ed      	bcc.n	a730 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    a754:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a758:	4618      	mov	r0, r3
    a75a:	f7ff f9ee 	bl	9b3a <FlexCAN_ComputePayloadSize>
    a75e:	4603      	mov	r3, r0
    a760:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    a764:	9b02      	ldr	r3, [sp, #8]
    a766:	689b      	ldr	r3, [r3, #8]
    a768:	930a      	str	r3, [sp, #40]	; 0x28
    a76a:	e00a      	b.n	a782 <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    a76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a76e:	f083 0303 	eor.w	r3, r3, #3
    a772:	9a07      	ldr	r2, [sp, #28]
    a774:	4413      	add	r3, r2
    a776:	9a02      	ldr	r2, [sp, #8]
    a778:	7b52      	ldrb	r2, [r2, #13]
    a77a:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    a77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a77e:	3301      	adds	r3, #1
    a780:	930a      	str	r3, [sp, #40]	; 0x28
    a782:	f89d 3012 	ldrb.w	r3, [sp, #18]
    a786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a788:	429a      	cmp	r2, r3
    a78a:	d3ef      	bcc.n	a76c <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    a78c:	9b02      	ldr	r3, [sp, #8]
    a78e:	685b      	ldr	r3, [r3, #4]
    a790:	2b01      	cmp	r3, #1
    a792:	d111      	bne.n	a7b8 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    a794:	9b08      	ldr	r3, [sp, #32]
    a796:	681b      	ldr	r3, [r3, #0]
    a798:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    a79c:	9b08      	ldr	r3, [sp, #32]
    a79e:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    a7a0:	9b08      	ldr	r3, [sp, #32]
    a7a2:	681a      	ldr	r2, [r3, #0]
    a7a4:	9b01      	ldr	r3, [sp, #4]
    a7a6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    a7aa:	431a      	orrs	r2, r3
    a7ac:	9b08      	ldr	r3, [sp, #32]
    a7ae:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    a7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7b2:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    a7b6:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    a7b8:	9b02      	ldr	r3, [sp, #8]
    a7ba:	685b      	ldr	r3, [r3, #4]
    a7bc:	2b00      	cmp	r3, #0
    a7be:	d114      	bne.n	a7ea <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    a7c0:	9b08      	ldr	r3, [sp, #32]
    a7c2:	681b      	ldr	r3, [r3, #0]
    a7c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    a7c8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    a7cc:	9a08      	ldr	r2, [sp, #32]
    a7ce:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    a7d0:	9b08      	ldr	r3, [sp, #32]
    a7d2:	681a      	ldr	r2, [r3, #0]
    a7d4:	9b01      	ldr	r3, [sp, #4]
    a7d6:	0499      	lsls	r1, r3, #18
    a7d8:	4b2b      	ldr	r3, [pc, #172]	; (a888 <FlexCAN_SetTxMsgBuff+0x218>)
    a7da:	400b      	ands	r3, r1
    a7dc:	431a      	orrs	r2, r3
    a7de:	9b08      	ldr	r3, [sp, #32]
    a7e0:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    a7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    a7e8:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    a7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    a7f0:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    a7f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a7f6:	041b      	lsls	r3, r3, #16
    a7f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    a7fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a7fe:	4313      	orrs	r3, r2
    a800:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    a802:	9b02      	ldr	r3, [sp, #8]
    a804:	681b      	ldr	r3, [r3, #0]
    a806:	2b0f      	cmp	r3, #15
    a808:	d03a      	beq.n	a880 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    a80a:	9b02      	ldr	r3, [sp, #8]
    a80c:	681b      	ldr	r3, [r3, #0]
    a80e:	2b1c      	cmp	r3, #28
    a810:	d104      	bne.n	a81c <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    a812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a818:	930b      	str	r3, [sp, #44]	; 0x2c
    a81a:	e007      	b.n	a82c <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    a81c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    a820:	2b00      	cmp	r3, #0
    a822:	d003      	beq.n	a82c <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    a824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a82a:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    a82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a82e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    a832:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    a834:	9b02      	ldr	r3, [sp, #8]
    a836:	7b1b      	ldrb	r3, [r3, #12]
    a838:	2b00      	cmp	r3, #0
    a83a:	d00e      	beq.n	a85a <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    a83c:	9b02      	ldr	r3, [sp, #8]
    a83e:	681b      	ldr	r3, [r3, #0]
    a840:	061b      	lsls	r3, r3, #24
    a842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    a846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a848:	4313      	orrs	r3, r2
    a84a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a84e:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    a850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    a856:	930b      	str	r3, [sp, #44]	; 0x2c
    a858:	e007      	b.n	a86a <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    a85a:	9b02      	ldr	r3, [sp, #8]
    a85c:	681b      	ldr	r3, [r3, #0]
    a85e:	061b      	lsls	r3, r3, #24
    a860:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a866:	4313      	orrs	r3, r2
    a868:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    a86a:	9b02      	ldr	r3, [sp, #8]
    a86c:	7b9b      	ldrb	r3, [r3, #14]
    a86e:	2b00      	cmp	r3, #0
    a870:	d003      	beq.n	a87a <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    a872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a878:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    a87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a87c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a87e:	601a      	str	r2, [r3, #0]
        }
}
    a880:	bf00      	nop
    a882:	b00d      	add	sp, #52	; 0x34
    a884:	f85d fb04 	ldr.w	pc, [sp], #4
    a888:	1ffc0000 	.word	0x1ffc0000

0000a88c <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    a88c:	b500      	push	{lr}
    a88e:	b08f      	sub	sp, #60	; 0x3c
    a890:	9001      	str	r0, [sp, #4]
    a892:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    a894:	9b01      	ldr	r3, [sp, #4]
    a896:	3380      	adds	r3, #128	; 0x80
    a898:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    a89a:	2300      	movs	r3, #0
    a89c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    a89e:	2300      	movs	r3, #0
    a8a0:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    a8a2:	2300      	movs	r3, #0
    a8a4:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    a8a6:	2300      	movs	r3, #0
    a8a8:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    a8aa:	2308      	movs	r3, #8
    a8ac:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    a8b0:	9b00      	ldr	r3, [sp, #0]
    a8b2:	3b01      	subs	r3, #1
    a8b4:	4619      	mov	r1, r3
    a8b6:	9801      	ldr	r0, [sp, #4]
    a8b8:	f7ff fcb6 	bl	a228 <FlexCAN_GetMbPayloadSize>
    a8bc:	4603      	mov	r3, r0
    a8be:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    a8c2:	2300      	movs	r3, #0
    a8c4:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    a8c6:	2300      	movs	r3, #0
    a8c8:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    a8ca:	2300      	movs	r3, #0
    a8cc:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    a8ce:	9b00      	ldr	r3, [sp, #0]
    a8d0:	3b01      	subs	r3, #1
    a8d2:	4619      	mov	r1, r3
    a8d4:	9801      	ldr	r0, [sp, #4]
    a8d6:	f7ff f979 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    a8da:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    a8dc:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8e2:	441a      	add	r2, r3
    a8e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a8e8:	4413      	add	r3, r2
    a8ea:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    a8ec:	9801      	ldr	r0, [sp, #4]
    a8ee:	f7ff f9e7 	bl	9cc0 <FlexCAN_GetMaxMbNum>
    a8f2:	4603      	mov	r3, r0
    a8f4:	011b      	lsls	r3, r3, #4
    a8f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a8f8:	4413      	add	r3, r2
    a8fa:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    a8fc:	9a04      	ldr	r2, [sp, #16]
    a8fe:	9b03      	ldr	r3, [sp, #12]
    a900:	429a      	cmp	r2, r3
    a902:	d806      	bhi.n	a912 <FlexCAN_SetMaxMsgBuffNum+0x86>
    a904:	9801      	ldr	r0, [sp, #4]
    a906:	f7ff f9db 	bl	9cc0 <FlexCAN_GetMaxMbNum>
    a90a:	4602      	mov	r2, r0
    a90c:	9b00      	ldr	r3, [sp, #0]
    a90e:	4293      	cmp	r3, r2
    a910:	d901      	bls.n	a916 <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    a912:	2304      	movs	r3, #4
    a914:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    a916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a918:	2b00      	cmp	r3, #0
    a91a:	d142      	bne.n	a9a2 <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    a91c:	9b01      	ldr	r3, [sp, #4]
    a91e:	681b      	ldr	r3, [r3, #0]
    a920:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    a924:	9b00      	ldr	r3, [sp, #0]
    a926:	3b01      	subs	r3, #1
    a928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a92c:	431a      	orrs	r2, r3
    a92e:	9b01      	ldr	r3, [sp, #4]
    a930:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    a932:	9b01      	ldr	r3, [sp, #4]
    a934:	681b      	ldr	r3, [r3, #0]
    a936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a93a:	2b00      	cmp	r3, #0
    a93c:	d131      	bne.n	a9a2 <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    a93e:	2300      	movs	r3, #0
    a940:	930d      	str	r3, [sp, #52]	; 0x34
    a942:	e02a      	b.n	a99a <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    a944:	990d      	ldr	r1, [sp, #52]	; 0x34
    a946:	9801      	ldr	r0, [sp, #4]
    a948:	f7ff f940 	bl	9bcc <FlexCAN_GetMsgBuffRegion>
    a94c:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    a94e:	9b08      	ldr	r3, [sp, #32]
    a950:	3304      	adds	r3, #4
    a952:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    a954:	9b08      	ldr	r3, [sp, #32]
    a956:	3308      	adds	r3, #8
    a958:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    a95a:	9b08      	ldr	r3, [sp, #32]
    a95c:	2200      	movs	r2, #0
    a95e:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    a960:	9b07      	ldr	r3, [sp, #28]
    a962:	2200      	movs	r2, #0
    a964:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    a966:	990d      	ldr	r1, [sp, #52]	; 0x34
    a968:	9801      	ldr	r0, [sp, #4]
    a96a:	f7ff fc5d 	bl	a228 <FlexCAN_GetMbPayloadSize>
    a96e:	4603      	mov	r3, r0
    a970:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    a974:	2300      	movs	r3, #0
    a976:	930c      	str	r3, [sp, #48]	; 0x30
    a978:	e007      	b.n	a98a <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    a97a:	9a06      	ldr	r2, [sp, #24]
    a97c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a97e:	4413      	add	r3, r2
    a980:	2200      	movs	r2, #0
    a982:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    a984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a986:	3301      	adds	r3, #1
    a988:	930c      	str	r3, [sp, #48]	; 0x30
    a98a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a98e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a990:	429a      	cmp	r2, r3
    a992:	d3f2      	bcc.n	a97a <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    a994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a996:	3301      	adds	r3, #1
    a998:	930d      	str	r3, [sp, #52]	; 0x34
    a99a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a99c:	9b00      	ldr	r3, [sp, #0]
    a99e:	429a      	cmp	r2, r3
    a9a0:	d3d0      	bcc.n	a944 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    a9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    a9a4:	4618      	mov	r0, r3
    a9a6:	b00f      	add	sp, #60	; 0x3c
    a9a8:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9ac <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    a9ac:	b500      	push	{lr}
    a9ae:	b083      	sub	sp, #12
    a9b0:	9001      	str	r0, [sp, #4]
    a9b2:	9100      	str	r1, [sp, #0]
    switch (mode)
    a9b4:	9b00      	ldr	r3, [sp, #0]
    a9b6:	2b02      	cmp	r3, #2
    a9b8:	d01d      	beq.n	a9f6 <FlexCAN_SetOperationMode+0x4a>
    a9ba:	9b00      	ldr	r3, [sp, #0]
    a9bc:	2b02      	cmp	r3, #2
    a9be:	d82b      	bhi.n	aa18 <FlexCAN_SetOperationMode+0x6c>
    a9c0:	9b00      	ldr	r3, [sp, #0]
    a9c2:	2b00      	cmp	r3, #0
    a9c4:	d003      	beq.n	a9ce <FlexCAN_SetOperationMode+0x22>
    a9c6:	9b00      	ldr	r3, [sp, #0]
    a9c8:	2b01      	cmp	r3, #1
    a9ca:	d00d      	beq.n	a9e8 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    a9cc:	e024      	b.n	aa18 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    a9ce:	9b01      	ldr	r3, [sp, #4]
    a9d0:	685b      	ldr	r3, [r3, #4]
    a9d2:	f023 0208 	bic.w	r2, r3, #8
    a9d6:	9b01      	ldr	r3, [sp, #4]
    a9d8:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    a9da:	9b01      	ldr	r3, [sp, #4]
    a9dc:	685b      	ldr	r3, [r3, #4]
    a9de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    a9e2:	9b01      	ldr	r3, [sp, #4]
    a9e4:	605a      	str	r2, [r3, #4]
            break;
    a9e6:	e018      	b.n	aa1a <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    a9e8:	9b01      	ldr	r3, [sp, #4]
    a9ea:	685b      	ldr	r3, [r3, #4]
    a9ec:	f043 0208 	orr.w	r2, r3, #8
    a9f0:	9b01      	ldr	r3, [sp, #4]
    a9f2:	605a      	str	r2, [r3, #4]
            break;
    a9f4:	e011      	b.n	aa1a <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    a9f6:	9b01      	ldr	r3, [sp, #4]
    a9f8:	685b      	ldr	r3, [r3, #4]
    a9fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    a9fe:	9b01      	ldr	r3, [sp, #4]
    aa00:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    aa02:	9b01      	ldr	r3, [sp, #4]
    aa04:	685b      	ldr	r3, [r3, #4]
    aa06:	f023 0208 	bic.w	r2, r3, #8
    aa0a:	9b01      	ldr	r3, [sp, #4]
    aa0c:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    aa0e:	2101      	movs	r1, #1
    aa10:	9801      	ldr	r0, [sp, #4]
    aa12:	f7fe ff7f 	bl	9914 <FlexCAN_SetSelfReception>
            break;
    aa16:	e000      	b.n	aa1a <FlexCAN_SetOperationMode+0x6e>
            break;
    aa18:	bf00      	nop
    }
}
    aa1a:	bf00      	nop
    aa1c:	b003      	add	sp, #12
    aa1e:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa22 <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    aa22:	b500      	push	{lr}
    aa24:	b08d      	sub	sp, #52	; 0x34
    aa26:	9003      	str	r0, [sp, #12]
    aa28:	9102      	str	r1, [sp, #8]
    aa2a:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    aa2c:	2300      	movs	r3, #0
    aa2e:	9309      	str	r3, [sp, #36]	; 0x24
    aa30:	2300      	movs	r3, #0
    aa32:	9308      	str	r3, [sp, #32]
    aa34:	2300      	movs	r3, #0
    aa36:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    aa38:	9b03      	ldr	r3, [sp, #12]
    aa3a:	33e0      	adds	r3, #224	; 0xe0
    aa3c:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    aa3e:	9b03      	ldr	r3, [sp, #12]
    aa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa42:	0e1b      	lsrs	r3, r3, #24
    aa44:	f003 030f 	and.w	r3, r3, #15
    aa48:	9305      	str	r3, [sp, #20]
    aa4a:	9b02      	ldr	r3, [sp, #8]
    aa4c:	2b03      	cmp	r3, #3
    aa4e:	f200 81e7 	bhi.w	ae20 <FlexCAN_SetRxFifoFilter+0x3fe>
    aa52:	a201      	add	r2, pc, #4	; (adr r2, aa58 <FlexCAN_SetRxFifoFilter+0x36>)
    aa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    aa58:	0000aa69 	.word	0x0000aa69
    aa5c:	0000ab03 	.word	0x0000ab03
    aa60:	0000ac3d 	.word	0x0000ac3d
    aa64:	0000ae0b 	.word	0x0000ae0b
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    aa68:	f000 ffb4 	bl	b9d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    aa6c:	9b03      	ldr	r3, [sp, #12]
    aa6e:	681b      	ldr	r3, [r3, #0]
    aa70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    aa74:	9b03      	ldr	r3, [sp, #12]
    aa76:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    aa78:	f000 ffd8 	bl	ba2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    aa7c:	2300      	movs	r3, #0
    aa7e:	930b      	str	r3, [sp, #44]	; 0x2c
    aa80:	e038      	b.n	aaf4 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    aa82:	2300      	movs	r3, #0
    aa84:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    aa86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa88:	00db      	lsls	r3, r3, #3
    aa8a:	9a01      	ldr	r2, [sp, #4]
    aa8c:	4413      	add	r3, r2
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d002      	beq.n	aa9a <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    aa94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    aa98:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    aa9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa9c:	00db      	lsls	r3, r3, #3
    aa9e:	9a01      	ldr	r2, [sp, #4]
    aaa0:	4413      	add	r3, r2
    aaa2:	785b      	ldrb	r3, [r3, #1]
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d013      	beq.n	aad0 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    aaa8:	9b07      	ldr	r3, [sp, #28]
    aaaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    aaae:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    aab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aab2:	00db      	lsls	r3, r3, #3
    aab4:	9a01      	ldr	r2, [sp, #4]
    aab6:	4413      	add	r3, r2
    aab8:	685b      	ldr	r3, [r3, #4]
    aaba:	005b      	lsls	r3, r3, #1
    aabc:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    aac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aac2:	009b      	lsls	r3, r3, #2
    aac4:	9a06      	ldr	r2, [sp, #24]
    aac6:	4413      	add	r3, r2
    aac8:	9a07      	ldr	r2, [sp, #28]
    aaca:	440a      	add	r2, r1
    aacc:	601a      	str	r2, [r3, #0]
    aace:	e00e      	b.n	aaee <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    aad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aad2:	00db      	lsls	r3, r3, #3
    aad4:	9a01      	ldr	r2, [sp, #4]
    aad6:	4413      	add	r3, r2
    aad8:	685b      	ldr	r3, [r3, #4]
    aada:	04da      	lsls	r2, r3, #19
    aadc:	4b9d      	ldr	r3, [pc, #628]	; (ad54 <FlexCAN_SetRxFifoFilter+0x332>)
    aade:	4013      	ands	r3, r2
    aae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aae2:	0092      	lsls	r2, r2, #2
    aae4:	9906      	ldr	r1, [sp, #24]
    aae6:	440a      	add	r2, r1
    aae8:	9907      	ldr	r1, [sp, #28]
    aaea:	440b      	add	r3, r1
    aaec:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    aaee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aaf0:	3301      	adds	r3, #1
    aaf2:	930b      	str	r3, [sp, #44]	; 0x2c
    aaf4:	9b05      	ldr	r3, [sp, #20]
    aaf6:	3301      	adds	r3, #1
    aaf8:	00db      	lsls	r3, r3, #3
    aafa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aafc:	429a      	cmp	r2, r3
    aafe:	d3c0      	bcc.n	aa82 <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    ab00:	e18f      	b.n	ae22 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ab02:	f000 ff67 	bl	b9d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    ab06:	9b03      	ldr	r3, [sp, #12]
    ab08:	681b      	ldr	r3, [r3, #0]
    ab0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ab0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    ab12:	9b03      	ldr	r3, [sp, #12]
    ab14:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ab16:	f000 ff89 	bl	ba2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    ab1a:	2300      	movs	r3, #0
    ab1c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ab1e:	2300      	movs	r3, #0
    ab20:	930b      	str	r3, [sp, #44]	; 0x2c
    ab22:	e083      	b.n	ac2c <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    ab24:	2300      	movs	r3, #0
    ab26:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    ab28:	2300      	movs	r3, #0
    ab2a:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    ab2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab2e:	00db      	lsls	r3, r3, #3
    ab30:	9a01      	ldr	r2, [sp, #4]
    ab32:	4413      	add	r3, r2
    ab34:	781b      	ldrb	r3, [r3, #0]
    ab36:	2b00      	cmp	r3, #0
    ab38:	d002      	beq.n	ab40 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    ab3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    ab3e:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    ab40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab42:	3301      	adds	r3, #1
    ab44:	00db      	lsls	r3, r3, #3
    ab46:	9a01      	ldr	r2, [sp, #4]
    ab48:	4413      	add	r3, r2
    ab4a:	781b      	ldrb	r3, [r3, #0]
    ab4c:	2b00      	cmp	r3, #0
    ab4e:	d002      	beq.n	ab56 <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    ab50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ab54:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    ab56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab58:	00db      	lsls	r3, r3, #3
    ab5a:	9a01      	ldr	r2, [sp, #4]
    ab5c:	4413      	add	r3, r2
    ab5e:	785b      	ldrb	r3, [r3, #1]
    ab60:	2b00      	cmp	r3, #0
    ab62:	d014      	beq.n	ab8e <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    ab64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ab6a:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    ab6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab6e:	00db      	lsls	r3, r3, #3
    ab70:	9a01      	ldr	r2, [sp, #4]
    ab72:	4413      	add	r3, r2
    ab74:	685b      	ldr	r3, [r3, #4]
    ab76:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    ab78:	041a      	lsls	r2, r3, #16
    ab7a:	4b77      	ldr	r3, [pc, #476]	; (ad58 <FlexCAN_SetRxFifoFilter+0x336>)
    ab7c:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    ab7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ab80:	0092      	lsls	r2, r2, #2
    ab82:	9906      	ldr	r1, [sp, #24]
    ab84:	440a      	add	r2, r1
    ab86:	9909      	ldr	r1, [sp, #36]	; 0x24
    ab88:	440b      	add	r3, r1
    ab8a:	6013      	str	r3, [r2, #0]
    ab8c:	e00e      	b.n	abac <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    ab8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab90:	00db      	lsls	r3, r3, #3
    ab92:	9a01      	ldr	r2, [sp, #4]
    ab94:	4413      	add	r3, r2
    ab96:	685b      	ldr	r3, [r3, #4]
    ab98:	04da      	lsls	r2, r3, #19
    ab9a:	4b6e      	ldr	r3, [pc, #440]	; (ad54 <FlexCAN_SetRxFifoFilter+0x332>)
    ab9c:	4013      	ands	r3, r2
    ab9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aba0:	0092      	lsls	r2, r2, #2
    aba2:	9906      	ldr	r1, [sp, #24]
    aba4:	440a      	add	r2, r1
    aba6:	9909      	ldr	r1, [sp, #36]	; 0x24
    aba8:	440b      	add	r3, r1
    abaa:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    abac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abae:	3301      	adds	r3, #1
    abb0:	00db      	lsls	r3, r3, #3
    abb2:	9a01      	ldr	r2, [sp, #4]
    abb4:	4413      	add	r3, r2
    abb6:	785b      	ldrb	r3, [r3, #1]
    abb8:	2b00      	cmp	r3, #0
    abba:	d01a      	beq.n	abf2 <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    abbc:	9b08      	ldr	r3, [sp, #32]
    abbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    abc2:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    abc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abc6:	009b      	lsls	r3, r3, #2
    abc8:	9a06      	ldr	r2, [sp, #24]
    abca:	4413      	add	r3, r2
    abcc:	6819      	ldr	r1, [r3, #0]
    abce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abd0:	3301      	adds	r3, #1
    abd2:	00db      	lsls	r3, r3, #3
    abd4:	9a01      	ldr	r2, [sp, #4]
    abd6:	4413      	add	r3, r2
    abd8:	685b      	ldr	r3, [r3, #4]
    abda:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    abdc:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    abe0:	9b08      	ldr	r3, [sp, #32]
    abe2:	441a      	add	r2, r3
    abe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abe6:	009b      	lsls	r3, r3, #2
    abe8:	9806      	ldr	r0, [sp, #24]
    abea:	4403      	add	r3, r0
    abec:	430a      	orrs	r2, r1
    abee:	601a      	str	r2, [r3, #0]
    abf0:	e016      	b.n	ac20 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    abf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abf4:	009b      	lsls	r3, r3, #2
    abf6:	9a06      	ldr	r2, [sp, #24]
    abf8:	4413      	add	r3, r2
    abfa:	6819      	ldr	r1, [r3, #0]
    abfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abfe:	3301      	adds	r3, #1
    ac00:	00db      	lsls	r3, r3, #3
    ac02:	9a01      	ldr	r2, [sp, #4]
    ac04:	4413      	add	r3, r2
    ac06:	685b      	ldr	r3, [r3, #4]
    ac08:	00da      	lsls	r2, r3, #3
    ac0a:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    ac0e:	4013      	ands	r3, r2
    ac10:	9a08      	ldr	r2, [sp, #32]
    ac12:	441a      	add	r2, r3
    ac14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac16:	009b      	lsls	r3, r3, #2
    ac18:	9806      	ldr	r0, [sp, #24]
    ac1a:	4403      	add	r3, r0
    ac1c:	430a      	orrs	r2, r1
    ac1e:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    ac20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac22:	3302      	adds	r3, #2
    ac24:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ac26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac28:	3301      	adds	r3, #1
    ac2a:	930b      	str	r3, [sp, #44]	; 0x2c
    ac2c:	9b05      	ldr	r3, [sp, #20]
    ac2e:	3301      	adds	r3, #1
    ac30:	00db      	lsls	r3, r3, #3
    ac32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ac34:	429a      	cmp	r2, r3
    ac36:	f4ff af75 	bcc.w	ab24 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    ac3a:	e0f2      	b.n	ae22 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ac3c:	f000 feca 	bl	b9d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    ac40:	9b03      	ldr	r3, [sp, #12]
    ac42:	681b      	ldr	r3, [r3, #0]
    ac44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ac48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    ac4c:	9b03      	ldr	r3, [sp, #12]
    ac4e:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ac50:	f000 feec 	bl	ba2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    ac54:	2300      	movs	r3, #0
    ac56:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ac58:	2300      	movs	r3, #0
    ac5a:	930b      	str	r3, [sp, #44]	; 0x2c
    ac5c:	e0cd      	b.n	adfa <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac60:	00db      	lsls	r3, r3, #3
    ac62:	9a01      	ldr	r2, [sp, #4]
    ac64:	4413      	add	r3, r2
    ac66:	785b      	ldrb	r3, [r3, #1]
    ac68:	2b00      	cmp	r3, #0
    ac6a:	d00e      	beq.n	ac8a <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ac6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac6e:	00db      	lsls	r3, r3, #3
    ac70:	9a01      	ldr	r2, [sp, #4]
    ac72:	4413      	add	r3, r2
    ac74:	685b      	ldr	r3, [r3, #4]
    ac76:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ac78:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ac7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac7c:	009b      	lsls	r3, r3, #2
    ac7e:	9a06      	ldr	r2, [sp, #24]
    ac80:	4413      	add	r3, r2
    ac82:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ac84:	440a      	add	r2, r1
    ac86:	601a      	str	r2, [r3, #0]
    ac88:	e00d      	b.n	aca6 <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ac8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac8c:	00db      	lsls	r3, r3, #3
    ac8e:	9a01      	ldr	r2, [sp, #4]
    ac90:	4413      	add	r3, r2
    ac92:	685b      	ldr	r3, [r3, #4]
    ac94:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ac96:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ac98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac9a:	009b      	lsls	r3, r3, #2
    ac9c:	9a06      	ldr	r2, [sp, #24]
    ac9e:	4413      	add	r3, r2
    aca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aca2:	440a      	add	r2, r1
    aca4:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    aca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aca8:	3301      	adds	r3, #1
    acaa:	00db      	lsls	r3, r3, #3
    acac:	9a01      	ldr	r2, [sp, #4]
    acae:	4413      	add	r3, r2
    acb0:	785b      	ldrb	r3, [r3, #1]
    acb2:	2b00      	cmp	r3, #0
    acb4:	d017      	beq.n	ace6 <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    acb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acb8:	009b      	lsls	r3, r3, #2
    acba:	9a06      	ldr	r2, [sp, #24]
    acbc:	4413      	add	r3, r2
    acbe:	6819      	ldr	r1, [r3, #0]
    acc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    acc2:	3301      	adds	r3, #1
    acc4:	00db      	lsls	r3, r3, #3
    acc6:	9a01      	ldr	r2, [sp, #4]
    acc8:	4413      	add	r3, r2
    acca:	685b      	ldr	r3, [r3, #4]
    accc:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    acce:	041b      	lsls	r3, r3, #16
    acd0:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    acd6:	441a      	add	r2, r3
    acd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acda:	009b      	lsls	r3, r3, #2
    acdc:	9806      	ldr	r0, [sp, #24]
    acde:	4403      	add	r3, r0
    ace0:	430a      	orrs	r2, r1
    ace2:	601a      	str	r2, [r3, #0]
    ace4:	e016      	b.n	ad14 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ace6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ace8:	009b      	lsls	r3, r3, #2
    acea:	9a06      	ldr	r2, [sp, #24]
    acec:	4413      	add	r3, r2
    acee:	6819      	ldr	r1, [r3, #0]
    acf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    acf2:	3301      	adds	r3, #1
    acf4:	00db      	lsls	r3, r3, #3
    acf6:	9a01      	ldr	r2, [sp, #4]
    acf8:	4413      	add	r3, r2
    acfa:	685b      	ldr	r3, [r3, #4]
    acfc:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    acfe:	041b      	lsls	r3, r3, #16
    ad00:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ad04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad06:	441a      	add	r2, r3
    ad08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad0a:	009b      	lsls	r3, r3, #2
    ad0c:	9806      	ldr	r0, [sp, #24]
    ad0e:	4403      	add	r3, r0
    ad10:	430a      	orrs	r2, r1
    ad12:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    ad14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad16:	3302      	adds	r3, #2
    ad18:	00db      	lsls	r3, r3, #3
    ad1a:	9a01      	ldr	r2, [sp, #4]
    ad1c:	4413      	add	r3, r2
    ad1e:	785b      	ldrb	r3, [r3, #1]
    ad20:	2b00      	cmp	r3, #0
    ad22:	d01b      	beq.n	ad5c <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ad24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad26:	009b      	lsls	r3, r3, #2
    ad28:	9a06      	ldr	r2, [sp, #24]
    ad2a:	4413      	add	r3, r2
    ad2c:	6819      	ldr	r1, [r3, #0]
    ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad30:	3302      	adds	r3, #2
    ad32:	00db      	lsls	r3, r3, #3
    ad34:	9a01      	ldr	r2, [sp, #4]
    ad36:	4413      	add	r3, r2
    ad38:	685b      	ldr	r3, [r3, #4]
    ad3a:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    ad3c:	021b      	lsls	r3, r3, #8
    ad3e:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad42:	441a      	add	r2, r3
    ad44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad46:	009b      	lsls	r3, r3, #2
    ad48:	9806      	ldr	r0, [sp, #24]
    ad4a:	4403      	add	r3, r0
    ad4c:	430a      	orrs	r2, r1
    ad4e:	601a      	str	r2, [r3, #0]
    ad50:	e01a      	b.n	ad88 <FlexCAN_SetRxFifoFilter+0x366>
    ad52:	bf00      	nop
    ad54:	3ff80000 	.word	0x3ff80000
    ad58:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ad5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad5e:	009b      	lsls	r3, r3, #2
    ad60:	9a06      	ldr	r2, [sp, #24]
    ad62:	4413      	add	r3, r2
    ad64:	6819      	ldr	r1, [r3, #0]
    ad66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad68:	3302      	adds	r3, #2
    ad6a:	00db      	lsls	r3, r3, #3
    ad6c:	9a01      	ldr	r2, [sp, #4]
    ad6e:	4413      	add	r3, r2
    ad70:	685b      	ldr	r3, [r3, #4]
    ad72:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    ad74:	021b      	lsls	r3, r3, #8
    ad76:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad7a:	441a      	add	r2, r3
    ad7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad7e:	009b      	lsls	r3, r3, #2
    ad80:	9806      	ldr	r0, [sp, #24]
    ad82:	4403      	add	r3, r0
    ad84:	430a      	orrs	r2, r1
    ad86:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    ad88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad8a:	3303      	adds	r3, #3
    ad8c:	00db      	lsls	r3, r3, #3
    ad8e:	9a01      	ldr	r2, [sp, #4]
    ad90:	4413      	add	r3, r2
    ad92:	785b      	ldrb	r3, [r3, #1]
    ad94:	2b00      	cmp	r3, #0
    ad96:	d015      	beq.n	adc4 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ad98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad9a:	009b      	lsls	r3, r3, #2
    ad9c:	9a06      	ldr	r2, [sp, #24]
    ad9e:	4413      	add	r3, r2
    ada0:	6819      	ldr	r1, [r3, #0]
    ada2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ada4:	3303      	adds	r3, #3
    ada6:	00db      	lsls	r3, r3, #3
    ada8:	9a01      	ldr	r2, [sp, #4]
    adaa:	4413      	add	r3, r2
    adac:	685b      	ldr	r3, [r3, #4]
    adae:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    adb0:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adb4:	441a      	add	r2, r3
    adb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adb8:	009b      	lsls	r3, r3, #2
    adba:	9806      	ldr	r0, [sp, #24]
    adbc:	4403      	add	r3, r0
    adbe:	430a      	orrs	r2, r1
    adc0:	601a      	str	r2, [r3, #0]
    adc2:	e014      	b.n	adee <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    adc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adc6:	009b      	lsls	r3, r3, #2
    adc8:	9a06      	ldr	r2, [sp, #24]
    adca:	4413      	add	r3, r2
    adcc:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    adce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    add0:	3303      	adds	r3, #3
    add2:	00db      	lsls	r3, r3, #3
    add4:	9a01      	ldr	r2, [sp, #4]
    add6:	4413      	add	r3, r2
    add8:	685b      	ldr	r3, [r3, #4]
    adda:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    addc:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    adde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ade0:	441a      	add	r2, r3
    ade2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ade4:	009b      	lsls	r3, r3, #2
    ade6:	9806      	ldr	r0, [sp, #24]
    ade8:	4403      	add	r3, r0
    adea:	430a      	orrs	r2, r1
    adec:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    adee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    adf0:	3304      	adds	r3, #4
    adf2:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    adf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adf6:	3301      	adds	r3, #1
    adf8:	930b      	str	r3, [sp, #44]	; 0x2c
    adfa:	9b05      	ldr	r3, [sp, #20]
    adfc:	3301      	adds	r3, #1
    adfe:	00db      	lsls	r3, r3, #3
    ae00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ae02:	429a      	cmp	r2, r3
    ae04:	f4ff af2b 	bcc.w	ac5e <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    ae08:	e00b      	b.n	ae22 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ae0a:	f000 fde3 	bl	b9d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    ae0e:	9b03      	ldr	r3, [sp, #12]
    ae10:	681b      	ldr	r3, [r3, #0]
    ae12:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    ae16:	9b03      	ldr	r3, [sp, #12]
    ae18:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ae1a:	f000 fe07 	bl	ba2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    ae1e:	e000      	b.n	ae22 <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    ae20:	bf00      	nop
    }
}
    ae22:	bf00      	nop
    ae24:	b00d      	add	sp, #52	; 0x34
    ae26:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae2a <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    ae2a:	b500      	push	{lr}
    ae2c:	b08b      	sub	sp, #44	; 0x2c
    ae2e:	9001      	str	r0, [sp, #4]
    ae30:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    ae32:	9b01      	ldr	r3, [sp, #4]
    ae34:	3380      	adds	r3, #128	; 0x80
    ae36:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    ae38:	9b07      	ldr	r3, [sp, #28]
    ae3a:	3304      	adds	r3, #4
    ae3c:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    ae3e:	9b07      	ldr	r3, [sp, #28]
    ae40:	3308      	adds	r3, #8
    ae42:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    ae44:	2300      	movs	r3, #0
    ae46:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    ae48:	9b07      	ldr	r3, [sp, #28]
    ae4a:	681b      	ldr	r3, [r3, #0]
    ae4c:	0c1b      	lsrs	r3, r3, #16
    ae4e:	b2db      	uxtb	r3, r3
    ae50:	f003 030f 	and.w	r3, r3, #15
    ae54:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    ae58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ae5c:	4618      	mov	r0, r3
    ae5e:	f7fe fe6c 	bl	9b3a <FlexCAN_ComputePayloadSize>
    ae62:	4603      	mov	r3, r0
    ae64:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    ae68:	9b00      	ldr	r3, [sp, #0]
    ae6a:	3308      	adds	r3, #8
    ae6c:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    ae6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ae72:	2b08      	cmp	r3, #8
    ae74:	d902      	bls.n	ae7c <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    ae76:	2308      	movs	r3, #8
    ae78:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    ae7c:	9b00      	ldr	r3, [sp, #0]
    ae7e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ae82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    ae86:	9b07      	ldr	r3, [sp, #28]
    ae88:	681a      	ldr	r2, [r3, #0]
    ae8a:	9b00      	ldr	r3, [sp, #0]
    ae8c:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    ae8e:	9b00      	ldr	r3, [sp, #0]
    ae90:	681b      	ldr	r3, [r3, #0]
    ae92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    ae96:	2b00      	cmp	r3, #0
    ae98:	d004      	beq.n	aea4 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    ae9a:	9b06      	ldr	r3, [sp, #24]
    ae9c:	681a      	ldr	r2, [r3, #0]
    ae9e:	9b00      	ldr	r3, [sp, #0]
    aea0:	605a      	str	r2, [r3, #4]
    aea2:	e004      	b.n	aeae <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    aea4:	9b06      	ldr	r3, [sp, #24]
    aea6:	681b      	ldr	r3, [r3, #0]
    aea8:	0c9a      	lsrs	r2, r3, #18
    aeaa:	9b00      	ldr	r3, [sp, #0]
    aeac:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    aeae:	9b01      	ldr	r3, [sp, #4]
    aeb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    aeb2:	b2da      	uxtb	r2, r3
    aeb4:	9b00      	ldr	r3, [sp, #0]
    aeb6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    aeba:	9b00      	ldr	r3, [sp, #0]
    aebc:	681b      	ldr	r3, [r3, #0]
    aebe:	b29a      	uxth	r2, r3
    aec0:	9b00      	ldr	r3, [sp, #0]
    aec2:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    aec4:	2300      	movs	r3, #0
    aec6:	9309      	str	r3, [sp, #36]	; 0x24
    aec8:	e01f      	b.n	af0a <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    aeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aecc:	089b      	lsrs	r3, r3, #2
    aece:	009b      	lsls	r3, r3, #2
    aed0:	9a05      	ldr	r2, [sp, #20]
    aed2:	4413      	add	r3, r2
    aed4:	681b      	ldr	r3, [r3, #0]
    aed6:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    aed8:	9b02      	ldr	r3, [sp, #8]
    aeda:	0e1a      	lsrs	r2, r3, #24
    aedc:	9b02      	ldr	r3, [sp, #8]
    aede:	0a1b      	lsrs	r3, r3, #8
    aee0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    aee4:	431a      	orrs	r2, r3
    aee6:	9b02      	ldr	r3, [sp, #8]
    aee8:	021b      	lsls	r3, r3, #8
    aeea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    aeee:	ea42 0103 	orr.w	r1, r2, r3
    aef2:	9b02      	ldr	r3, [sp, #8]
    aef4:	061a      	lsls	r2, r3, #24
    aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aef8:	089b      	lsrs	r3, r3, #2
    aefa:	009b      	lsls	r3, r3, #2
    aefc:	9804      	ldr	r0, [sp, #16]
    aefe:	4403      	add	r3, r0
    af00:	430a      	orrs	r2, r1
    af02:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    af04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af06:	3304      	adds	r3, #4
    af08:	9309      	str	r3, [sp, #36]	; 0x24
    af0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    af0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    af10:	429a      	cmp	r2, r3
    af12:	d3da      	bcc.n	aeca <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    af14:	bf00      	nop
    af16:	bf00      	nop
    af18:	b00b      	add	sp, #44	; 0x2c
    af1a:	f85d fb04 	ldr.w	pc, [sp], #4

0000af1e <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    af1e:	b088      	sub	sp, #32
    af20:	9003      	str	r0, [sp, #12]
    af22:	9301      	str	r3, [sp, #4]
    af24:	460b      	mov	r3, r1
    af26:	f88d 300b 	strb.w	r3, [sp, #11]
    af2a:	4613      	mov	r3, r2
    af2c:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    af30:	2300      	movs	r3, #0
    af32:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    af36:	2300      	movs	r3, #0
    af38:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    af3a:	2300      	movs	r3, #0
    af3c:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    af3e:	9b01      	ldr	r3, [sp, #4]
    af40:	b2db      	uxtb	r3, r3
    af42:	f89d 200b 	ldrb.w	r2, [sp, #11]
    af46:	429a      	cmp	r2, r3
    af48:	d303      	bcc.n	af52 <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    af4a:	2301      	movs	r3, #1
    af4c:	f88d 301f 	strb.w	r3, [sp, #31]
    af50:	e01b      	b.n	af8a <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    af52:	f89d 300a 	ldrb.w	r3, [sp, #10]
    af56:	2b00      	cmp	r3, #0
    af58:	d014      	beq.n	af84 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    af5a:	9b03      	ldr	r3, [sp, #12]
    af5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    af5e:	0e1b      	lsrs	r3, r3, #24
    af60:	f003 030f 	and.w	r3, r3, #15
    af64:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    af66:	9b06      	ldr	r3, [sp, #24]
    af68:	3301      	adds	r3, #1
    af6a:	00db      	lsls	r3, r3, #3
    af6c:	089b      	lsrs	r3, r3, #2
    af6e:	3305      	adds	r3, #5
    af70:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    af72:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af76:	9a05      	ldr	r2, [sp, #20]
    af78:	429a      	cmp	r2, r3
    af7a:	d306      	bcc.n	af8a <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    af7c:	2301      	movs	r3, #1
    af7e:	f88d 301f 	strb.w	r3, [sp, #31]
    af82:	e002      	b.n	af8a <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    af84:	2300      	movs	r3, #0
    af86:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    af8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    af8e:	4618      	mov	r0, r3
    af90:	b008      	add	sp, #32
    af92:	4770      	bx	lr

0000af94 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    af94:	b500      	push	{lr}
    af96:	b083      	sub	sp, #12
    af98:	9001      	str	r0, [sp, #4]
    af9a:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    af9c:	9b00      	ldr	r3, [sp, #0]
    af9e:	f003 0320 	and.w	r3, r3, #32
    afa2:	2b00      	cmp	r3, #0
    afa4:	d004      	beq.n	afb0 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    afa6:	2101      	movs	r1, #1
    afa8:	9801      	ldr	r0, [sp, #4]
    afaa:	f7fe fcd8 	bl	995e <FlexCAN_SetIsoCan>
    afae:	e003      	b.n	afb8 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    afb0:	2100      	movs	r1, #0
    afb2:	9801      	ldr	r0, [sp, #4]
    afb4:	f7fe fcd3 	bl	995e <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    afb8:	9b00      	ldr	r3, [sp, #0]
    afba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    afbe:	2b00      	cmp	r3, #0
    afc0:	d004      	beq.n	afcc <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    afc2:	2101      	movs	r1, #1
    afc4:	9801      	ldr	r0, [sp, #4]
    afc6:	f7fe fce1 	bl	998c <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    afca:	e003      	b.n	afd4 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    afcc:	2100      	movs	r1, #0
    afce:	9801      	ldr	r0, [sp, #4]
    afd0:	f7fe fcdc 	bl	998c <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    afd4:	9b00      	ldr	r3, [sp, #0]
    afd6:	f003 0308 	and.w	r3, r3, #8
    afda:	2b00      	cmp	r3, #0
    afdc:	d004      	beq.n	afe8 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    afde:	2101      	movs	r1, #1
    afe0:	9801      	ldr	r0, [sp, #4]
    afe2:	f7fe fcea 	bl	99ba <FlexCAN_SetProtocolException>
    afe6:	e003      	b.n	aff0 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    afe8:	2100      	movs	r1, #0
    afea:	9801      	ldr	r0, [sp, #4]
    afec:	f7fe fce5 	bl	99ba <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    aff0:	9b00      	ldr	r3, [sp, #0]
    aff2:	f003 0302 	and.w	r3, r3, #2
    aff6:	2b00      	cmp	r3, #0
    aff8:	d00a      	beq.n	b010 <FlexCAN_ConfigCtrlOptions+0x7c>
    affa:	9b01      	ldr	r3, [sp, #4]
    affc:	681b      	ldr	r3, [r3, #0]
    affe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b002:	2b00      	cmp	r3, #0
    b004:	d104      	bne.n	b010 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    b006:	2101      	movs	r1, #1
    b008:	9801      	ldr	r0, [sp, #4]
    b00a:	f7fe fd31 	bl	9a70 <FlexCAN_CanBitSampling>
    b00e:	e003      	b.n	b018 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    b010:	2100      	movs	r1, #0
    b012:	9801      	ldr	r0, [sp, #4]
    b014:	f7fe fd2c 	bl	9a70 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    b018:	9b00      	ldr	r3, [sp, #0]
    b01a:	f003 0304 	and.w	r3, r3, #4
    b01e:	2b00      	cmp	r3, #0
    b020:	d004      	beq.n	b02c <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    b022:	2101      	movs	r1, #1
    b024:	9801      	ldr	r0, [sp, #4]
    b026:	f7fe fcf6 	bl	9a16 <FlexCAN_SetBusOffAutorecovery>
    b02a:	e003      	b.n	b034 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    b02c:	2100      	movs	r1, #0
    b02e:	9801      	ldr	r0, [sp, #4]
    b030:	f7fe fcf1 	bl	9a16 <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    b034:	9b00      	ldr	r3, [sp, #0]
    b036:	f003 0301 	and.w	r3, r3, #1
    b03a:	2b00      	cmp	r3, #0
    b03c:	d004      	beq.n	b048 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    b03e:	2101      	movs	r1, #1
    b040:	9801      	ldr	r0, [sp, #4]
    b042:	f7fe fcd1 	bl	99e8 <FlexCAN_SetRemoteReqStore>
    b046:	e003      	b.n	b050 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    b048:	2100      	movs	r1, #0
    b04a:	9801      	ldr	r0, [sp, #4]
    b04c:	f7fe fccc 	bl	99e8 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    b050:	9b00      	ldr	r3, [sp, #0]
    b052:	f003 0310 	and.w	r3, r3, #16
    b056:	2b00      	cmp	r3, #0
    b058:	d004      	beq.n	b064 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    b05a:	2101      	movs	r1, #1
    b05c:	9801      	ldr	r0, [sp, #4]
    b05e:	f7fe fcf0 	bl	9a42 <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    b062:	e003      	b.n	b06c <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    b064:	2100      	movs	r1, #0
    b066:	9801      	ldr	r0, [sp, #4]
    b068:	f7fe fceb 	bl	9a42 <FlexCAN_SetEdgeFilter>
}
    b06c:	bf00      	nop
    b06e:	b003      	add	sp, #12
    b070:	f85d fb04 	ldr.w	pc, [sp], #4

0000b074 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    b074:	b084      	sub	sp, #16
    b076:	4603      	mov	r3, r0
    b078:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    b07c:	2300      	movs	r3, #0
    b07e:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    b082:	2300      	movs	r3, #0
    b084:	f88d 300f 	strb.w	r3, [sp, #15]
    b088:	e00d      	b.n	b0a6 <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    b08a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b08e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b092:	4909      	ldr	r1, [pc, #36]	; (b0b8 <FlexCAN_ResetImaskBuff+0x44>)
    b094:	4413      	add	r3, r2
    b096:	2200      	movs	r2, #0
    b098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    b09c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b0a0:	3301      	adds	r3, #1
    b0a2:	f88d 300f 	strb.w	r3, [sp, #15]
    b0a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	d0ed      	beq.n	b08a <FlexCAN_ResetImaskBuff+0x16>
    }
}
    b0ae:	bf00      	nop
    b0b0:	bf00      	nop
    b0b2:	b004      	add	sp, #16
    b0b4:	4770      	bx	lr
    b0b6:	bf00      	nop
    b0b8:	1fff8fa4 	.word	0x1fff8fa4

0000b0bc <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    b0bc:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    b0be:	2000      	movs	r0, #0
    b0c0:	f7fd fb2a 	bl	8718 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    b0c4:	f3bf 8f4f 	dsb	sy
}
    b0c8:	bf00      	nop
    b0ca:	bd08      	pop	{r3, pc}

0000b0cc <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    b0cc:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    b0ce:	2000      	movs	r0, #0
    b0d0:	f7fd fac2 	bl	8658 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    b0d4:	f3bf 8f4f 	dsb	sy
}
    b0d8:	bf00      	nop
    b0da:	bd08      	pop	{r3, pc}

0000b0dc <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    b0dc:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    b0de:	220f      	movs	r2, #15
    b0e0:	2100      	movs	r1, #0
    b0e2:	2000      	movs	r0, #0
    b0e4:	f7fd f9dc 	bl	84a0 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    b0e8:	f3bf 8f4f 	dsb	sy
}
    b0ec:	bf00      	nop
    b0ee:	bd08      	pop	{r3, pc}

0000b0f0 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    b0f0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    b0f2:	221f      	movs	r2, #31
    b0f4:	2110      	movs	r1, #16
    b0f6:	2000      	movs	r0, #0
    b0f8:	f7fd f9d2 	bl	84a0 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    b0fc:	f3bf 8f4f 	dsb	sy
}
    b100:	bf00      	nop
    b102:	bd08      	pop	{r3, pc}

0000b104 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    b104:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    b106:	2001      	movs	r0, #1
    b108:	f7fd fb06 	bl	8718 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    b10c:	f3bf 8f4f 	dsb	sy
}
    b110:	bf00      	nop
    b112:	bd08      	pop	{r3, pc}

0000b114 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    b114:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    b116:	2001      	movs	r0, #1
    b118:	f7fd fa9e 	bl	8658 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    b11c:	f3bf 8f4f 	dsb	sy
}
    b120:	bf00      	nop
    b122:	bd08      	pop	{r3, pc}

0000b124 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    b124:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    b126:	220f      	movs	r2, #15
    b128:	2100      	movs	r1, #0
    b12a:	2001      	movs	r0, #1
    b12c:	f7fd f9b8 	bl	84a0 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    b130:	f3bf 8f4f 	dsb	sy
}
    b134:	bf00      	nop
    b136:	bd08      	pop	{r3, pc}

0000b138 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    b138:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    b13a:	221f      	movs	r2, #31
    b13c:	2110      	movs	r1, #16
    b13e:	2001      	movs	r0, #1
    b140:	f7fd f9ae 	bl	84a0 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    b144:	f3bf 8f4f 	dsb	sy
}
    b148:	bf00      	nop
    b14a:	bd08      	pop	{r3, pc}

0000b14c <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    b14c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    b14e:	2002      	movs	r0, #2
    b150:	f7fd fae2 	bl	8718 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    b154:	f3bf 8f4f 	dsb	sy
}
    b158:	bf00      	nop
    b15a:	bd08      	pop	{r3, pc}

0000b15c <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    b15c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    b15e:	2002      	movs	r0, #2
    b160:	f7fd fa7a 	bl	8658 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    b164:	f3bf 8f4f 	dsb	sy
}
    b168:	bf00      	nop
    b16a:	bd08      	pop	{r3, pc}

0000b16c <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    b16c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    b16e:	220f      	movs	r2, #15
    b170:	2100      	movs	r1, #0
    b172:	2002      	movs	r0, #2
    b174:	f7fd f994 	bl	84a0 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    b178:	f3bf 8f4f 	dsb	sy
}
    b17c:	bf00      	nop
    b17e:	bd08      	pop	{r3, pc}

0000b180 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    b180:	b500      	push	{lr}
    b182:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b184:	f7f5 fd18 	bl	bb8 <Sys_GetCoreID>
    b188:	4603      	mov	r3, r0
    b18a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    b18c:	4a10      	ldr	r2, [pc, #64]	; (b1d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    b18e:	9b01      	ldr	r3, [sp, #4]
    b190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b194:	2b00      	cmp	r3, #0
    b196:	d10d      	bne.n	b1b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b198:	f7f5 fc36 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b19c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b19e:	9b00      	ldr	r3, [sp, #0]
    b1a0:	f003 0301 	and.w	r3, r3, #1
    b1a4:	2b00      	cmp	r3, #0
    b1a6:	d100      	bne.n	b1aa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    b1aa:	490a      	ldr	r1, [pc, #40]	; (b1d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    b1ac:	9b01      	ldr	r3, [sp, #4]
    b1ae:	9a00      	ldr	r2, [sp, #0]
    b1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    b1b4:	4a06      	ldr	r2, [pc, #24]	; (b1d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    b1b6:	9b01      	ldr	r3, [sp, #4]
    b1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1bc:	1c5a      	adds	r2, r3, #1
    b1be:	4904      	ldr	r1, [pc, #16]	; (b1d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    b1c0:	9b01      	ldr	r3, [sp, #4]
    b1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1c6:	bf00      	nop
    b1c8:	b003      	add	sp, #12
    b1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b1ce:	bf00      	nop
    b1d0:	1fff8fb4 	.word	0x1fff8fb4
    b1d4:	1fff8fb0 	.word	0x1fff8fb0

0000b1d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    b1d8:	b500      	push	{lr}
    b1da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1dc:	f7f5 fcec 	bl	bb8 <Sys_GetCoreID>
    b1e0:	4603      	mov	r3, r0
    b1e2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    b1e4:	4a0d      	ldr	r2, [pc, #52]	; (b21c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    b1e6:	9b01      	ldr	r3, [sp, #4]
    b1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ec:	1e5a      	subs	r2, r3, #1
    b1ee:	490b      	ldr	r1, [pc, #44]	; (b21c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    b1f0:	9b01      	ldr	r3, [sp, #4]
    b1f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    b1f6:	4a0a      	ldr	r2, [pc, #40]	; (b220 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    b1f8:	9b01      	ldr	r3, [sp, #4]
    b1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1fe:	f003 0301 	and.w	r3, r3, #1
    b202:	2b00      	cmp	r3, #0
    b204:	d106      	bne.n	b214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    b206:	4a05      	ldr	r2, [pc, #20]	; (b21c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    b208:	9b01      	ldr	r3, [sp, #4]
    b20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b20e:	2b00      	cmp	r3, #0
    b210:	d100      	bne.n	b214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b212:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b214:	bf00      	nop
    b216:	b003      	add	sp, #12
    b218:	f85d fb04 	ldr.w	pc, [sp], #4
    b21c:	1fff8fb4 	.word	0x1fff8fb4
    b220:	1fff8fb0 	.word	0x1fff8fb0

0000b224 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    b224:	b500      	push	{lr}
    b226:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b228:	f7f5 fcc6 	bl	bb8 <Sys_GetCoreID>
    b22c:	4603      	mov	r3, r0
    b22e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    b230:	4a10      	ldr	r2, [pc, #64]	; (b274 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    b232:	9b01      	ldr	r3, [sp, #4]
    b234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b238:	2b00      	cmp	r3, #0
    b23a:	d10d      	bne.n	b258 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b23c:	f7f5 fbe4 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b240:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b242:	9b00      	ldr	r3, [sp, #0]
    b244:	f003 0301 	and.w	r3, r3, #1
    b248:	2b00      	cmp	r3, #0
    b24a:	d100      	bne.n	b24e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b24c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    b24e:	490a      	ldr	r1, [pc, #40]	; (b278 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    b250:	9b01      	ldr	r3, [sp, #4]
    b252:	9a00      	ldr	r2, [sp, #0]
    b254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    b258:	4a06      	ldr	r2, [pc, #24]	; (b274 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    b25a:	9b01      	ldr	r3, [sp, #4]
    b25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b260:	1c5a      	adds	r2, r3, #1
    b262:	4904      	ldr	r1, [pc, #16]	; (b274 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    b264:	9b01      	ldr	r3, [sp, #4]
    b266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b26a:	bf00      	nop
    b26c:	b003      	add	sp, #12
    b26e:	f85d fb04 	ldr.w	pc, [sp], #4
    b272:	bf00      	nop
    b274:	1fff8fbc 	.word	0x1fff8fbc
    b278:	1fff8fb8 	.word	0x1fff8fb8

0000b27c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    b27c:	b500      	push	{lr}
    b27e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b280:	f7f5 fc9a 	bl	bb8 <Sys_GetCoreID>
    b284:	4603      	mov	r3, r0
    b286:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    b288:	4a0d      	ldr	r2, [pc, #52]	; (b2c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    b28a:	9b01      	ldr	r3, [sp, #4]
    b28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b290:	1e5a      	subs	r2, r3, #1
    b292:	490b      	ldr	r1, [pc, #44]	; (b2c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    b294:	9b01      	ldr	r3, [sp, #4]
    b296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    b29a:	4a0a      	ldr	r2, [pc, #40]	; (b2c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    b29c:	9b01      	ldr	r3, [sp, #4]
    b29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a2:	f003 0301 	and.w	r3, r3, #1
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d106      	bne.n	b2b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    b2aa:	4a05      	ldr	r2, [pc, #20]	; (b2c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    b2ac:	9b01      	ldr	r3, [sp, #4]
    b2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2b2:	2b00      	cmp	r3, #0
    b2b4:	d100      	bne.n	b2b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2b8:	bf00      	nop
    b2ba:	b003      	add	sp, #12
    b2bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b2c0:	1fff8fbc 	.word	0x1fff8fbc
    b2c4:	1fff8fb8 	.word	0x1fff8fb8

0000b2c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    b2c8:	b500      	push	{lr}
    b2ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2cc:	f7f5 fc74 	bl	bb8 <Sys_GetCoreID>
    b2d0:	4603      	mov	r3, r0
    b2d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    b2d4:	4a10      	ldr	r2, [pc, #64]	; (b318 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    b2d6:	9b01      	ldr	r3, [sp, #4]
    b2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2dc:	2b00      	cmp	r3, #0
    b2de:	d10d      	bne.n	b2fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2e0:	f7f5 fb92 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b2e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2e6:	9b00      	ldr	r3, [sp, #0]
    b2e8:	f003 0301 	and.w	r3, r3, #1
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d100      	bne.n	b2f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    b2f2:	490a      	ldr	r1, [pc, #40]	; (b31c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    b2f4:	9b01      	ldr	r3, [sp, #4]
    b2f6:	9a00      	ldr	r2, [sp, #0]
    b2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    b2fc:	4a06      	ldr	r2, [pc, #24]	; (b318 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    b2fe:	9b01      	ldr	r3, [sp, #4]
    b300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b304:	1c5a      	adds	r2, r3, #1
    b306:	4904      	ldr	r1, [pc, #16]	; (b318 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    b308:	9b01      	ldr	r3, [sp, #4]
    b30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b30e:	bf00      	nop
    b310:	b003      	add	sp, #12
    b312:	f85d fb04 	ldr.w	pc, [sp], #4
    b316:	bf00      	nop
    b318:	1fff8fc4 	.word	0x1fff8fc4
    b31c:	1fff8fc0 	.word	0x1fff8fc0

0000b320 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    b320:	b500      	push	{lr}
    b322:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b324:	f7f5 fc48 	bl	bb8 <Sys_GetCoreID>
    b328:	4603      	mov	r3, r0
    b32a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    b32c:	4a0d      	ldr	r2, [pc, #52]	; (b364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    b32e:	9b01      	ldr	r3, [sp, #4]
    b330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b334:	1e5a      	subs	r2, r3, #1
    b336:	490b      	ldr	r1, [pc, #44]	; (b364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    b338:	9b01      	ldr	r3, [sp, #4]
    b33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    b33e:	4a0a      	ldr	r2, [pc, #40]	; (b368 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    b340:	9b01      	ldr	r3, [sp, #4]
    b342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b346:	f003 0301 	and.w	r3, r3, #1
    b34a:	2b00      	cmp	r3, #0
    b34c:	d106      	bne.n	b35c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    b34e:	4a05      	ldr	r2, [pc, #20]	; (b364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    b350:	9b01      	ldr	r3, [sp, #4]
    b352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b356:	2b00      	cmp	r3, #0
    b358:	d100      	bne.n	b35c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b35a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b35c:	bf00      	nop
    b35e:	b003      	add	sp, #12
    b360:	f85d fb04 	ldr.w	pc, [sp], #4
    b364:	1fff8fc4 	.word	0x1fff8fc4
    b368:	1fff8fc0 	.word	0x1fff8fc0

0000b36c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    b36c:	b500      	push	{lr}
    b36e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b370:	f7f5 fc22 	bl	bb8 <Sys_GetCoreID>
    b374:	4603      	mov	r3, r0
    b376:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    b378:	4a10      	ldr	r2, [pc, #64]	; (b3bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    b37a:	9b01      	ldr	r3, [sp, #4]
    b37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b380:	2b00      	cmp	r3, #0
    b382:	d10d      	bne.n	b3a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b384:	f7f5 fb40 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b388:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b38a:	9b00      	ldr	r3, [sp, #0]
    b38c:	f003 0301 	and.w	r3, r3, #1
    b390:	2b00      	cmp	r3, #0
    b392:	d100      	bne.n	b396 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b394:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    b396:	490a      	ldr	r1, [pc, #40]	; (b3c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    b398:	9b01      	ldr	r3, [sp, #4]
    b39a:	9a00      	ldr	r2, [sp, #0]
    b39c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    b3a0:	4a06      	ldr	r2, [pc, #24]	; (b3bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    b3a2:	9b01      	ldr	r3, [sp, #4]
    b3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3a8:	1c5a      	adds	r2, r3, #1
    b3aa:	4904      	ldr	r1, [pc, #16]	; (b3bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    b3ac:	9b01      	ldr	r3, [sp, #4]
    b3ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3b2:	bf00      	nop
    b3b4:	b003      	add	sp, #12
    b3b6:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ba:	bf00      	nop
    b3bc:	1fff8fcc 	.word	0x1fff8fcc
    b3c0:	1fff8fc8 	.word	0x1fff8fc8

0000b3c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    b3c4:	b500      	push	{lr}
    b3c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3c8:	f7f5 fbf6 	bl	bb8 <Sys_GetCoreID>
    b3cc:	4603      	mov	r3, r0
    b3ce:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    b3d0:	4a0d      	ldr	r2, [pc, #52]	; (b408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    b3d2:	9b01      	ldr	r3, [sp, #4]
    b3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d8:	1e5a      	subs	r2, r3, #1
    b3da:	490b      	ldr	r1, [pc, #44]	; (b408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    b3dc:	9b01      	ldr	r3, [sp, #4]
    b3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    b3e2:	4a0a      	ldr	r2, [pc, #40]	; (b40c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    b3e4:	9b01      	ldr	r3, [sp, #4]
    b3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ea:	f003 0301 	and.w	r3, r3, #1
    b3ee:	2b00      	cmp	r3, #0
    b3f0:	d106      	bne.n	b400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    b3f2:	4a05      	ldr	r2, [pc, #20]	; (b408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    b3f4:	9b01      	ldr	r3, [sp, #4]
    b3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3fa:	2b00      	cmp	r3, #0
    b3fc:	d100      	bne.n	b400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b400:	bf00      	nop
    b402:	b003      	add	sp, #12
    b404:	f85d fb04 	ldr.w	pc, [sp], #4
    b408:	1fff8fcc 	.word	0x1fff8fcc
    b40c:	1fff8fc8 	.word	0x1fff8fc8

0000b410 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    b410:	b500      	push	{lr}
    b412:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b414:	f7f5 fbd0 	bl	bb8 <Sys_GetCoreID>
    b418:	4603      	mov	r3, r0
    b41a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    b41c:	4a10      	ldr	r2, [pc, #64]	; (b460 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    b41e:	9b01      	ldr	r3, [sp, #4]
    b420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b424:	2b00      	cmp	r3, #0
    b426:	d10d      	bne.n	b444 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b428:	f7f5 faee 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b42c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b42e:	9b00      	ldr	r3, [sp, #0]
    b430:	f003 0301 	and.w	r3, r3, #1
    b434:	2b00      	cmp	r3, #0
    b436:	d100      	bne.n	b43a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b438:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    b43a:	490a      	ldr	r1, [pc, #40]	; (b464 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    b43c:	9b01      	ldr	r3, [sp, #4]
    b43e:	9a00      	ldr	r2, [sp, #0]
    b440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    b444:	4a06      	ldr	r2, [pc, #24]	; (b460 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    b446:	9b01      	ldr	r3, [sp, #4]
    b448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b44c:	1c5a      	adds	r2, r3, #1
    b44e:	4904      	ldr	r1, [pc, #16]	; (b460 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    b450:	9b01      	ldr	r3, [sp, #4]
    b452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b456:	bf00      	nop
    b458:	b003      	add	sp, #12
    b45a:	f85d fb04 	ldr.w	pc, [sp], #4
    b45e:	bf00      	nop
    b460:	1fff8fd4 	.word	0x1fff8fd4
    b464:	1fff8fd0 	.word	0x1fff8fd0

0000b468 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    b468:	b500      	push	{lr}
    b46a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b46c:	f7f5 fba4 	bl	bb8 <Sys_GetCoreID>
    b470:	4603      	mov	r3, r0
    b472:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    b474:	4a0d      	ldr	r2, [pc, #52]	; (b4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    b476:	9b01      	ldr	r3, [sp, #4]
    b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b47c:	1e5a      	subs	r2, r3, #1
    b47e:	490b      	ldr	r1, [pc, #44]	; (b4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    b480:	9b01      	ldr	r3, [sp, #4]
    b482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    b486:	4a0a      	ldr	r2, [pc, #40]	; (b4b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    b488:	9b01      	ldr	r3, [sp, #4]
    b48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b48e:	f003 0301 	and.w	r3, r3, #1
    b492:	2b00      	cmp	r3, #0
    b494:	d106      	bne.n	b4a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    b496:	4a05      	ldr	r2, [pc, #20]	; (b4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    b498:	9b01      	ldr	r3, [sp, #4]
    b49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d100      	bne.n	b4a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4a4:	bf00      	nop
    b4a6:	b003      	add	sp, #12
    b4a8:	f85d fb04 	ldr.w	pc, [sp], #4
    b4ac:	1fff8fd4 	.word	0x1fff8fd4
    b4b0:	1fff8fd0 	.word	0x1fff8fd0

0000b4b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    b4b4:	b500      	push	{lr}
    b4b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4b8:	f7f5 fb7e 	bl	bb8 <Sys_GetCoreID>
    b4bc:	4603      	mov	r3, r0
    b4be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    b4c0:	4a10      	ldr	r2, [pc, #64]	; (b504 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    b4c2:	9b01      	ldr	r3, [sp, #4]
    b4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d10d      	bne.n	b4e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4cc:	f7f5 fa9c 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b4d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4d2:	9b00      	ldr	r3, [sp, #0]
    b4d4:	f003 0301 	and.w	r3, r3, #1
    b4d8:	2b00      	cmp	r3, #0
    b4da:	d100      	bne.n	b4de <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    b4de:	490a      	ldr	r1, [pc, #40]	; (b508 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    b4e0:	9b01      	ldr	r3, [sp, #4]
    b4e2:	9a00      	ldr	r2, [sp, #0]
    b4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    b4e8:	4a06      	ldr	r2, [pc, #24]	; (b504 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    b4ea:	9b01      	ldr	r3, [sp, #4]
    b4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4f0:	1c5a      	adds	r2, r3, #1
    b4f2:	4904      	ldr	r1, [pc, #16]	; (b504 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    b4f4:	9b01      	ldr	r3, [sp, #4]
    b4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4fa:	bf00      	nop
    b4fc:	b003      	add	sp, #12
    b4fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b502:	bf00      	nop
    b504:	1fff8fdc 	.word	0x1fff8fdc
    b508:	1fff8fd8 	.word	0x1fff8fd8

0000b50c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    b50c:	b500      	push	{lr}
    b50e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b510:	f7f5 fb52 	bl	bb8 <Sys_GetCoreID>
    b514:	4603      	mov	r3, r0
    b516:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    b518:	4a0d      	ldr	r2, [pc, #52]	; (b550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    b51a:	9b01      	ldr	r3, [sp, #4]
    b51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b520:	1e5a      	subs	r2, r3, #1
    b522:	490b      	ldr	r1, [pc, #44]	; (b550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    b524:	9b01      	ldr	r3, [sp, #4]
    b526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    b52a:	4a0a      	ldr	r2, [pc, #40]	; (b554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    b52c:	9b01      	ldr	r3, [sp, #4]
    b52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b532:	f003 0301 	and.w	r3, r3, #1
    b536:	2b00      	cmp	r3, #0
    b538:	d106      	bne.n	b548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    b53a:	4a05      	ldr	r2, [pc, #20]	; (b550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    b53c:	9b01      	ldr	r3, [sp, #4]
    b53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b542:	2b00      	cmp	r3, #0
    b544:	d100      	bne.n	b548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b546:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b548:	bf00      	nop
    b54a:	b003      	add	sp, #12
    b54c:	f85d fb04 	ldr.w	pc, [sp], #4
    b550:	1fff8fdc 	.word	0x1fff8fdc
    b554:	1fff8fd8 	.word	0x1fff8fd8

0000b558 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    b558:	b500      	push	{lr}
    b55a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b55c:	f7f5 fb2c 	bl	bb8 <Sys_GetCoreID>
    b560:	4603      	mov	r3, r0
    b562:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    b564:	4a10      	ldr	r2, [pc, #64]	; (b5a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    b566:	9b01      	ldr	r3, [sp, #4]
    b568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b56c:	2b00      	cmp	r3, #0
    b56e:	d10d      	bne.n	b58c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b570:	f7f5 fa4a 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b574:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b576:	9b00      	ldr	r3, [sp, #0]
    b578:	f003 0301 	and.w	r3, r3, #1
    b57c:	2b00      	cmp	r3, #0
    b57e:	d100      	bne.n	b582 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b580:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    b582:	490a      	ldr	r1, [pc, #40]	; (b5ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    b584:	9b01      	ldr	r3, [sp, #4]
    b586:	9a00      	ldr	r2, [sp, #0]
    b588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    b58c:	4a06      	ldr	r2, [pc, #24]	; (b5a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    b58e:	9b01      	ldr	r3, [sp, #4]
    b590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b594:	1c5a      	adds	r2, r3, #1
    b596:	4904      	ldr	r1, [pc, #16]	; (b5a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    b598:	9b01      	ldr	r3, [sp, #4]
    b59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b59e:	bf00      	nop
    b5a0:	b003      	add	sp, #12
    b5a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b5a6:	bf00      	nop
    b5a8:	1fff8fe4 	.word	0x1fff8fe4
    b5ac:	1fff8fe0 	.word	0x1fff8fe0

0000b5b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    b5b0:	b500      	push	{lr}
    b5b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5b4:	f7f5 fb00 	bl	bb8 <Sys_GetCoreID>
    b5b8:	4603      	mov	r3, r0
    b5ba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    b5bc:	4a0d      	ldr	r2, [pc, #52]	; (b5f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    b5be:	9b01      	ldr	r3, [sp, #4]
    b5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5c4:	1e5a      	subs	r2, r3, #1
    b5c6:	490b      	ldr	r1, [pc, #44]	; (b5f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    b5c8:	9b01      	ldr	r3, [sp, #4]
    b5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    b5ce:	4a0a      	ldr	r2, [pc, #40]	; (b5f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    b5d0:	9b01      	ldr	r3, [sp, #4]
    b5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d6:	f003 0301 	and.w	r3, r3, #1
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d106      	bne.n	b5ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    b5de:	4a05      	ldr	r2, [pc, #20]	; (b5f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    b5e0:	9b01      	ldr	r3, [sp, #4]
    b5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5e6:	2b00      	cmp	r3, #0
    b5e8:	d100      	bne.n	b5ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5ec:	bf00      	nop
    b5ee:	b003      	add	sp, #12
    b5f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b5f4:	1fff8fe4 	.word	0x1fff8fe4
    b5f8:	1fff8fe0 	.word	0x1fff8fe0

0000b5fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    b5fc:	b500      	push	{lr}
    b5fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b600:	f7f5 fada 	bl	bb8 <Sys_GetCoreID>
    b604:	4603      	mov	r3, r0
    b606:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    b608:	4a10      	ldr	r2, [pc, #64]	; (b64c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    b60a:	9b01      	ldr	r3, [sp, #4]
    b60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b610:	2b00      	cmp	r3, #0
    b612:	d10d      	bne.n	b630 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b614:	f7f5 f9f8 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b618:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b61a:	9b00      	ldr	r3, [sp, #0]
    b61c:	f003 0301 	and.w	r3, r3, #1
    b620:	2b00      	cmp	r3, #0
    b622:	d100      	bne.n	b626 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b624:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    b626:	490a      	ldr	r1, [pc, #40]	; (b650 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    b628:	9b01      	ldr	r3, [sp, #4]
    b62a:	9a00      	ldr	r2, [sp, #0]
    b62c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    b630:	4a06      	ldr	r2, [pc, #24]	; (b64c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    b632:	9b01      	ldr	r3, [sp, #4]
    b634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b638:	1c5a      	adds	r2, r3, #1
    b63a:	4904      	ldr	r1, [pc, #16]	; (b64c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    b63c:	9b01      	ldr	r3, [sp, #4]
    b63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b642:	bf00      	nop
    b644:	b003      	add	sp, #12
    b646:	f85d fb04 	ldr.w	pc, [sp], #4
    b64a:	bf00      	nop
    b64c:	1fff8fec 	.word	0x1fff8fec
    b650:	1fff8fe8 	.word	0x1fff8fe8

0000b654 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    b654:	b500      	push	{lr}
    b656:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b658:	f7f5 faae 	bl	bb8 <Sys_GetCoreID>
    b65c:	4603      	mov	r3, r0
    b65e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    b660:	4a0d      	ldr	r2, [pc, #52]	; (b698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    b662:	9b01      	ldr	r3, [sp, #4]
    b664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b668:	1e5a      	subs	r2, r3, #1
    b66a:	490b      	ldr	r1, [pc, #44]	; (b698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    b66c:	9b01      	ldr	r3, [sp, #4]
    b66e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    b672:	4a0a      	ldr	r2, [pc, #40]	; (b69c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    b674:	9b01      	ldr	r3, [sp, #4]
    b676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b67a:	f003 0301 	and.w	r3, r3, #1
    b67e:	2b00      	cmp	r3, #0
    b680:	d106      	bne.n	b690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    b682:	4a05      	ldr	r2, [pc, #20]	; (b698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    b684:	9b01      	ldr	r3, [sp, #4]
    b686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b68a:	2b00      	cmp	r3, #0
    b68c:	d100      	bne.n	b690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b68e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b690:	bf00      	nop
    b692:	b003      	add	sp, #12
    b694:	f85d fb04 	ldr.w	pc, [sp], #4
    b698:	1fff8fec 	.word	0x1fff8fec
    b69c:	1fff8fe8 	.word	0x1fff8fe8

0000b6a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    b6a0:	b500      	push	{lr}
    b6a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6a4:	f7f5 fa88 	bl	bb8 <Sys_GetCoreID>
    b6a8:	4603      	mov	r3, r0
    b6aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    b6ac:	4a10      	ldr	r2, [pc, #64]	; (b6f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    b6ae:	9b01      	ldr	r3, [sp, #4]
    b6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6b4:	2b00      	cmp	r3, #0
    b6b6:	d10d      	bne.n	b6d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6b8:	f7f5 f9a6 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b6bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6be:	9b00      	ldr	r3, [sp, #0]
    b6c0:	f003 0301 	and.w	r3, r3, #1
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	d100      	bne.n	b6ca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    b6ca:	490a      	ldr	r1, [pc, #40]	; (b6f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    b6cc:	9b01      	ldr	r3, [sp, #4]
    b6ce:	9a00      	ldr	r2, [sp, #0]
    b6d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    b6d4:	4a06      	ldr	r2, [pc, #24]	; (b6f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    b6d6:	9b01      	ldr	r3, [sp, #4]
    b6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6dc:	1c5a      	adds	r2, r3, #1
    b6de:	4904      	ldr	r1, [pc, #16]	; (b6f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    b6e0:	9b01      	ldr	r3, [sp, #4]
    b6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6e6:	bf00      	nop
    b6e8:	b003      	add	sp, #12
    b6ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b6ee:	bf00      	nop
    b6f0:	1fff8ff4 	.word	0x1fff8ff4
    b6f4:	1fff8ff0 	.word	0x1fff8ff0

0000b6f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    b6f8:	b500      	push	{lr}
    b6fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6fc:	f7f5 fa5c 	bl	bb8 <Sys_GetCoreID>
    b700:	4603      	mov	r3, r0
    b702:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    b704:	4a0d      	ldr	r2, [pc, #52]	; (b73c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    b706:	9b01      	ldr	r3, [sp, #4]
    b708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b70c:	1e5a      	subs	r2, r3, #1
    b70e:	490b      	ldr	r1, [pc, #44]	; (b73c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    b710:	9b01      	ldr	r3, [sp, #4]
    b712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    b716:	4a0a      	ldr	r2, [pc, #40]	; (b740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    b718:	9b01      	ldr	r3, [sp, #4]
    b71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b71e:	f003 0301 	and.w	r3, r3, #1
    b722:	2b00      	cmp	r3, #0
    b724:	d106      	bne.n	b734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    b726:	4a05      	ldr	r2, [pc, #20]	; (b73c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    b728:	9b01      	ldr	r3, [sp, #4]
    b72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b72e:	2b00      	cmp	r3, #0
    b730:	d100      	bne.n	b734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b732:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b734:	bf00      	nop
    b736:	b003      	add	sp, #12
    b738:	f85d fb04 	ldr.w	pc, [sp], #4
    b73c:	1fff8ff4 	.word	0x1fff8ff4
    b740:	1fff8ff0 	.word	0x1fff8ff0

0000b744 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    b744:	b500      	push	{lr}
    b746:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b748:	f7f5 fa36 	bl	bb8 <Sys_GetCoreID>
    b74c:	4603      	mov	r3, r0
    b74e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    b750:	4a10      	ldr	r2, [pc, #64]	; (b794 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    b752:	9b01      	ldr	r3, [sp, #4]
    b754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b758:	2b00      	cmp	r3, #0
    b75a:	d10d      	bne.n	b778 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b75c:	f7f5 f954 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b760:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b762:	9b00      	ldr	r3, [sp, #0]
    b764:	f003 0301 	and.w	r3, r3, #1
    b768:	2b00      	cmp	r3, #0
    b76a:	d100      	bne.n	b76e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b76c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    b76e:	490a      	ldr	r1, [pc, #40]	; (b798 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    b770:	9b01      	ldr	r3, [sp, #4]
    b772:	9a00      	ldr	r2, [sp, #0]
    b774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    b778:	4a06      	ldr	r2, [pc, #24]	; (b794 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    b77a:	9b01      	ldr	r3, [sp, #4]
    b77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b780:	1c5a      	adds	r2, r3, #1
    b782:	4904      	ldr	r1, [pc, #16]	; (b794 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    b784:	9b01      	ldr	r3, [sp, #4]
    b786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b78a:	bf00      	nop
    b78c:	b003      	add	sp, #12
    b78e:	f85d fb04 	ldr.w	pc, [sp], #4
    b792:	bf00      	nop
    b794:	1fff8ffc 	.word	0x1fff8ffc
    b798:	1fff8ff8 	.word	0x1fff8ff8

0000b79c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    b79c:	b500      	push	{lr}
    b79e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7a0:	f7f5 fa0a 	bl	bb8 <Sys_GetCoreID>
    b7a4:	4603      	mov	r3, r0
    b7a6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    b7a8:	4a0d      	ldr	r2, [pc, #52]	; (b7e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    b7aa:	9b01      	ldr	r3, [sp, #4]
    b7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7b0:	1e5a      	subs	r2, r3, #1
    b7b2:	490b      	ldr	r1, [pc, #44]	; (b7e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    b7b4:	9b01      	ldr	r3, [sp, #4]
    b7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    b7ba:	4a0a      	ldr	r2, [pc, #40]	; (b7e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    b7bc:	9b01      	ldr	r3, [sp, #4]
    b7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7c2:	f003 0301 	and.w	r3, r3, #1
    b7c6:	2b00      	cmp	r3, #0
    b7c8:	d106      	bne.n	b7d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    b7ca:	4a05      	ldr	r2, [pc, #20]	; (b7e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    b7cc:	9b01      	ldr	r3, [sp, #4]
    b7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7d2:	2b00      	cmp	r3, #0
    b7d4:	d100      	bne.n	b7d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7d8:	bf00      	nop
    b7da:	b003      	add	sp, #12
    b7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b7e0:	1fff8ffc 	.word	0x1fff8ffc
    b7e4:	1fff8ff8 	.word	0x1fff8ff8

0000b7e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    b7e8:	b500      	push	{lr}
    b7ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7ec:	f7f5 f9e4 	bl	bb8 <Sys_GetCoreID>
    b7f0:	4603      	mov	r3, r0
    b7f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    b7f4:	4a10      	ldr	r2, [pc, #64]	; (b838 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    b7f6:	9b01      	ldr	r3, [sp, #4]
    b7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7fc:	2b00      	cmp	r3, #0
    b7fe:	d10d      	bne.n	b81c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b800:	f7f5 f902 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b804:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b806:	9b00      	ldr	r3, [sp, #0]
    b808:	f003 0301 	and.w	r3, r3, #1
    b80c:	2b00      	cmp	r3, #0
    b80e:	d100      	bne.n	b812 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b810:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b812:	490a      	ldr	r1, [pc, #40]	; (b83c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    b814:	9b01      	ldr	r3, [sp, #4]
    b816:	9a00      	ldr	r2, [sp, #0]
    b818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    b81c:	4a06      	ldr	r2, [pc, #24]	; (b838 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    b81e:	9b01      	ldr	r3, [sp, #4]
    b820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b824:	1c5a      	adds	r2, r3, #1
    b826:	4904      	ldr	r1, [pc, #16]	; (b838 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    b828:	9b01      	ldr	r3, [sp, #4]
    b82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b82e:	bf00      	nop
    b830:	b003      	add	sp, #12
    b832:	f85d fb04 	ldr.w	pc, [sp], #4
    b836:	bf00      	nop
    b838:	1fff9004 	.word	0x1fff9004
    b83c:	1fff9000 	.word	0x1fff9000

0000b840 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    b840:	b500      	push	{lr}
    b842:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b844:	f7f5 f9b8 	bl	bb8 <Sys_GetCoreID>
    b848:	4603      	mov	r3, r0
    b84a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    b84c:	4a0d      	ldr	r2, [pc, #52]	; (b884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    b84e:	9b01      	ldr	r3, [sp, #4]
    b850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b854:	1e5a      	subs	r2, r3, #1
    b856:	490b      	ldr	r1, [pc, #44]	; (b884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    b858:	9b01      	ldr	r3, [sp, #4]
    b85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b85e:	4a0a      	ldr	r2, [pc, #40]	; (b888 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    b860:	9b01      	ldr	r3, [sp, #4]
    b862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b866:	f003 0301 	and.w	r3, r3, #1
    b86a:	2b00      	cmp	r3, #0
    b86c:	d106      	bne.n	b87c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    b86e:	4a05      	ldr	r2, [pc, #20]	; (b884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    b870:	9b01      	ldr	r3, [sp, #4]
    b872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b876:	2b00      	cmp	r3, #0
    b878:	d100      	bne.n	b87c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b87a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b87c:	bf00      	nop
    b87e:	b003      	add	sp, #12
    b880:	f85d fb04 	ldr.w	pc, [sp], #4
    b884:	1fff9004 	.word	0x1fff9004
    b888:	1fff9000 	.word	0x1fff9000

0000b88c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    b88c:	b500      	push	{lr}
    b88e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b890:	f7f5 f992 	bl	bb8 <Sys_GetCoreID>
    b894:	4603      	mov	r3, r0
    b896:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    b898:	4a10      	ldr	r2, [pc, #64]	; (b8dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    b89a:	9b01      	ldr	r3, [sp, #4]
    b89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d10d      	bne.n	b8c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b8a4:	f7f5 f8b0 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b8a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b8aa:	9b00      	ldr	r3, [sp, #0]
    b8ac:	f003 0301 	and.w	r3, r3, #1
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d100      	bne.n	b8b6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b8b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b8b6:	490a      	ldr	r1, [pc, #40]	; (b8e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    b8b8:	9b01      	ldr	r3, [sp, #4]
    b8ba:	9a00      	ldr	r2, [sp, #0]
    b8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    b8c0:	4a06      	ldr	r2, [pc, #24]	; (b8dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    b8c2:	9b01      	ldr	r3, [sp, #4]
    b8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8c8:	1c5a      	adds	r2, r3, #1
    b8ca:	4904      	ldr	r1, [pc, #16]	; (b8dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    b8cc:	9b01      	ldr	r3, [sp, #4]
    b8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8d2:	bf00      	nop
    b8d4:	b003      	add	sp, #12
    b8d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b8da:	bf00      	nop
    b8dc:	1fff900c 	.word	0x1fff900c
    b8e0:	1fff9008 	.word	0x1fff9008

0000b8e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    b8e4:	b500      	push	{lr}
    b8e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8e8:	f7f5 f966 	bl	bb8 <Sys_GetCoreID>
    b8ec:	4603      	mov	r3, r0
    b8ee:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    b8f0:	4a0d      	ldr	r2, [pc, #52]	; (b928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    b8f2:	9b01      	ldr	r3, [sp, #4]
    b8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8f8:	1e5a      	subs	r2, r3, #1
    b8fa:	490b      	ldr	r1, [pc, #44]	; (b928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    b8fc:	9b01      	ldr	r3, [sp, #4]
    b8fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b902:	4a0a      	ldr	r2, [pc, #40]	; (b92c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    b904:	9b01      	ldr	r3, [sp, #4]
    b906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b90a:	f003 0301 	and.w	r3, r3, #1
    b90e:	2b00      	cmp	r3, #0
    b910:	d106      	bne.n	b920 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    b912:	4a05      	ldr	r2, [pc, #20]	; (b928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    b914:	9b01      	ldr	r3, [sp, #4]
    b916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b91a:	2b00      	cmp	r3, #0
    b91c:	d100      	bne.n	b920 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b91e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b920:	bf00      	nop
    b922:	b003      	add	sp, #12
    b924:	f85d fb04 	ldr.w	pc, [sp], #4
    b928:	1fff900c 	.word	0x1fff900c
    b92c:	1fff9008 	.word	0x1fff9008

0000b930 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    b930:	b500      	push	{lr}
    b932:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b934:	f7f5 f940 	bl	bb8 <Sys_GetCoreID>
    b938:	4603      	mov	r3, r0
    b93a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    b93c:	4a10      	ldr	r2, [pc, #64]	; (b980 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    b93e:	9b01      	ldr	r3, [sp, #4]
    b940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b944:	2b00      	cmp	r3, #0
    b946:	d10d      	bne.n	b964 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b948:	f7f5 f85e 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b94c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b94e:	9b00      	ldr	r3, [sp, #0]
    b950:	f003 0301 	and.w	r3, r3, #1
    b954:	2b00      	cmp	r3, #0
    b956:	d100      	bne.n	b95a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b958:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b95a:	490a      	ldr	r1, [pc, #40]	; (b984 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    b95c:	9b01      	ldr	r3, [sp, #4]
    b95e:	9a00      	ldr	r2, [sp, #0]
    b960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    b964:	4a06      	ldr	r2, [pc, #24]	; (b980 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    b966:	9b01      	ldr	r3, [sp, #4]
    b968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b96c:	1c5a      	adds	r2, r3, #1
    b96e:	4904      	ldr	r1, [pc, #16]	; (b980 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    b970:	9b01      	ldr	r3, [sp, #4]
    b972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b976:	bf00      	nop
    b978:	b003      	add	sp, #12
    b97a:	f85d fb04 	ldr.w	pc, [sp], #4
    b97e:	bf00      	nop
    b980:	1fff9014 	.word	0x1fff9014
    b984:	1fff9010 	.word	0x1fff9010

0000b988 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    b988:	b500      	push	{lr}
    b98a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b98c:	f7f5 f914 	bl	bb8 <Sys_GetCoreID>
    b990:	4603      	mov	r3, r0
    b992:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    b994:	4a0d      	ldr	r2, [pc, #52]	; (b9cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    b996:	9b01      	ldr	r3, [sp, #4]
    b998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b99c:	1e5a      	subs	r2, r3, #1
    b99e:	490b      	ldr	r1, [pc, #44]	; (b9cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    b9a0:	9b01      	ldr	r3, [sp, #4]
    b9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b9a6:	4a0a      	ldr	r2, [pc, #40]	; (b9d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    b9a8:	9b01      	ldr	r3, [sp, #4]
    b9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9ae:	f003 0301 	and.w	r3, r3, #1
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d106      	bne.n	b9c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    b9b6:	4a05      	ldr	r2, [pc, #20]	; (b9cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    b9b8:	9b01      	ldr	r3, [sp, #4]
    b9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9be:	2b00      	cmp	r3, #0
    b9c0:	d100      	bne.n	b9c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9c4:	bf00      	nop
    b9c6:	b003      	add	sp, #12
    b9c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b9cc:	1fff9014 	.word	0x1fff9014
    b9d0:	1fff9010 	.word	0x1fff9010

0000b9d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    b9d4:	b500      	push	{lr}
    b9d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9d8:	f7f5 f8ee 	bl	bb8 <Sys_GetCoreID>
    b9dc:	4603      	mov	r3, r0
    b9de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    b9e0:	4a10      	ldr	r2, [pc, #64]	; (ba24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    b9e2:	9b01      	ldr	r3, [sp, #4]
    b9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d10d      	bne.n	ba08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b9ec:	f7f5 f80c 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    b9f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9f2:	9b00      	ldr	r3, [sp, #0]
    b9f4:	f003 0301 	and.w	r3, r3, #1
    b9f8:	2b00      	cmp	r3, #0
    b9fa:	d100      	bne.n	b9fe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b9fe:	490a      	ldr	r1, [pc, #40]	; (ba28 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    ba00:	9b01      	ldr	r3, [sp, #4]
    ba02:	9a00      	ldr	r2, [sp, #0]
    ba04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    ba08:	4a06      	ldr	r2, [pc, #24]	; (ba24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    ba0a:	9b01      	ldr	r3, [sp, #4]
    ba0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba10:	1c5a      	adds	r2, r3, #1
    ba12:	4904      	ldr	r1, [pc, #16]	; (ba24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    ba14:	9b01      	ldr	r3, [sp, #4]
    ba16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba1a:	bf00      	nop
    ba1c:	b003      	add	sp, #12
    ba1e:	f85d fb04 	ldr.w	pc, [sp], #4
    ba22:	bf00      	nop
    ba24:	1fff901c 	.word	0x1fff901c
    ba28:	1fff9018 	.word	0x1fff9018

0000ba2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    ba2c:	b500      	push	{lr}
    ba2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba30:	f7f5 f8c2 	bl	bb8 <Sys_GetCoreID>
    ba34:	4603      	mov	r3, r0
    ba36:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    ba38:	4a0d      	ldr	r2, [pc, #52]	; (ba70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    ba3a:	9b01      	ldr	r3, [sp, #4]
    ba3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba40:	1e5a      	subs	r2, r3, #1
    ba42:	490b      	ldr	r1, [pc, #44]	; (ba70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    ba44:	9b01      	ldr	r3, [sp, #4]
    ba46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    ba4a:	4a0a      	ldr	r2, [pc, #40]	; (ba74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    ba4c:	9b01      	ldr	r3, [sp, #4]
    ba4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba52:	f003 0301 	and.w	r3, r3, #1
    ba56:	2b00      	cmp	r3, #0
    ba58:	d106      	bne.n	ba68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    ba5a:	4a05      	ldr	r2, [pc, #20]	; (ba70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    ba5c:	9b01      	ldr	r3, [sp, #4]
    ba5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba62:	2b00      	cmp	r3, #0
    ba64:	d100      	bne.n	ba68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba68:	bf00      	nop
    ba6a:	b003      	add	sp, #12
    ba6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ba70:	1fff901c 	.word	0x1fff901c
    ba74:	1fff9018 	.word	0x1fff9018

0000ba78 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    ba78:	b500      	push	{lr}
    ba7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba7c:	f7f5 f89c 	bl	bb8 <Sys_GetCoreID>
    ba80:	4603      	mov	r3, r0
    ba82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    ba84:	4a10      	ldr	r2, [pc, #64]	; (bac8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    ba86:	9b01      	ldr	r3, [sp, #4]
    ba88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba8c:	2b00      	cmp	r3, #0
    ba8e:	d10d      	bne.n	baac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba90:	f7f4 ffba 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    ba94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba96:	9b00      	ldr	r3, [sp, #0]
    ba98:	f003 0301 	and.w	r3, r3, #1
    ba9c:	2b00      	cmp	r3, #0
    ba9e:	d100      	bne.n	baa2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    baa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    baa2:	490a      	ldr	r1, [pc, #40]	; (bacc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    baa4:	9b01      	ldr	r3, [sp, #4]
    baa6:	9a00      	ldr	r2, [sp, #0]
    baa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    baac:	4a06      	ldr	r2, [pc, #24]	; (bac8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    baae:	9b01      	ldr	r3, [sp, #4]
    bab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bab4:	1c5a      	adds	r2, r3, #1
    bab6:	4904      	ldr	r1, [pc, #16]	; (bac8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    bab8:	9b01      	ldr	r3, [sp, #4]
    baba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    babe:	bf00      	nop
    bac0:	b003      	add	sp, #12
    bac2:	f85d fb04 	ldr.w	pc, [sp], #4
    bac6:	bf00      	nop
    bac8:	1fff9024 	.word	0x1fff9024
    bacc:	1fff9020 	.word	0x1fff9020

0000bad0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    bad0:	b500      	push	{lr}
    bad2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bad4:	f7f5 f870 	bl	bb8 <Sys_GetCoreID>
    bad8:	4603      	mov	r3, r0
    bada:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    badc:	4a0d      	ldr	r2, [pc, #52]	; (bb14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    bade:	9b01      	ldr	r3, [sp, #4]
    bae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bae4:	1e5a      	subs	r2, r3, #1
    bae6:	490b      	ldr	r1, [pc, #44]	; (bb14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    bae8:	9b01      	ldr	r3, [sp, #4]
    baea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    baee:	4a0a      	ldr	r2, [pc, #40]	; (bb18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    baf0:	9b01      	ldr	r3, [sp, #4]
    baf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baf6:	f003 0301 	and.w	r3, r3, #1
    bafa:	2b00      	cmp	r3, #0
    bafc:	d106      	bne.n	bb0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    bafe:	4a05      	ldr	r2, [pc, #20]	; (bb14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    bb00:	9b01      	ldr	r3, [sp, #4]
    bb02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb06:	2b00      	cmp	r3, #0
    bb08:	d100      	bne.n	bb0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb0c:	bf00      	nop
    bb0e:	b003      	add	sp, #12
    bb10:	f85d fb04 	ldr.w	pc, [sp], #4
    bb14:	1fff9024 	.word	0x1fff9024
    bb18:	1fff9020 	.word	0x1fff9020

0000bb1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    bb1c:	b500      	push	{lr}
    bb1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb20:	f7f5 f84a 	bl	bb8 <Sys_GetCoreID>
    bb24:	4603      	mov	r3, r0
    bb26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    bb28:	4a10      	ldr	r2, [pc, #64]	; (bb6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    bb2a:	9b01      	ldr	r3, [sp, #4]
    bb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb30:	2b00      	cmp	r3, #0
    bb32:	d10d      	bne.n	bb50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb34:	f7f4 ff68 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    bb38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb3a:	9b00      	ldr	r3, [sp, #0]
    bb3c:	f003 0301 	and.w	r3, r3, #1
    bb40:	2b00      	cmp	r3, #0
    bb42:	d100      	bne.n	bb46 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    bb46:	490a      	ldr	r1, [pc, #40]	; (bb70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    bb48:	9b01      	ldr	r3, [sp, #4]
    bb4a:	9a00      	ldr	r2, [sp, #0]
    bb4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    bb50:	4a06      	ldr	r2, [pc, #24]	; (bb6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    bb52:	9b01      	ldr	r3, [sp, #4]
    bb54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb58:	1c5a      	adds	r2, r3, #1
    bb5a:	4904      	ldr	r1, [pc, #16]	; (bb6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    bb5c:	9b01      	ldr	r3, [sp, #4]
    bb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb62:	bf00      	nop
    bb64:	b003      	add	sp, #12
    bb66:	f85d fb04 	ldr.w	pc, [sp], #4
    bb6a:	bf00      	nop
    bb6c:	1fff902c 	.word	0x1fff902c
    bb70:	1fff9028 	.word	0x1fff9028

0000bb74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    bb74:	b500      	push	{lr}
    bb76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb78:	f7f5 f81e 	bl	bb8 <Sys_GetCoreID>
    bb7c:	4603      	mov	r3, r0
    bb7e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    bb80:	4a0d      	ldr	r2, [pc, #52]	; (bbb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    bb82:	9b01      	ldr	r3, [sp, #4]
    bb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb88:	1e5a      	subs	r2, r3, #1
    bb8a:	490b      	ldr	r1, [pc, #44]	; (bbb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    bb8c:	9b01      	ldr	r3, [sp, #4]
    bb8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    bb92:	4a0a      	ldr	r2, [pc, #40]	; (bbbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    bb94:	9b01      	ldr	r3, [sp, #4]
    bb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb9a:	f003 0301 	and.w	r3, r3, #1
    bb9e:	2b00      	cmp	r3, #0
    bba0:	d106      	bne.n	bbb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    bba2:	4a05      	ldr	r2, [pc, #20]	; (bbb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    bba4:	9b01      	ldr	r3, [sp, #4]
    bba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbaa:	2b00      	cmp	r3, #0
    bbac:	d100      	bne.n	bbb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bbae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bbb0:	bf00      	nop
    bbb2:	b003      	add	sp, #12
    bbb4:	f85d fb04 	ldr.w	pc, [sp], #4
    bbb8:	1fff902c 	.word	0x1fff902c
    bbbc:	1fff9028 	.word	0x1fff9028

0000bbc0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    bbc0:	b500      	push	{lr}
    bbc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbc4:	f7f4 fff8 	bl	bb8 <Sys_GetCoreID>
    bbc8:	4603      	mov	r3, r0
    bbca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    bbcc:	4a10      	ldr	r2, [pc, #64]	; (bc10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    bbce:	9b01      	ldr	r3, [sp, #4]
    bbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d10d      	bne.n	bbf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbd8:	f7f4 ff16 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    bbdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbde:	9b00      	ldr	r3, [sp, #0]
    bbe0:	f003 0301 	and.w	r3, r3, #1
    bbe4:	2b00      	cmp	r3, #0
    bbe6:	d100      	bne.n	bbea <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbe8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    bbea:	490a      	ldr	r1, [pc, #40]	; (bc14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    bbec:	9b01      	ldr	r3, [sp, #4]
    bbee:	9a00      	ldr	r2, [sp, #0]
    bbf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    bbf4:	4a06      	ldr	r2, [pc, #24]	; (bc10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    bbf6:	9b01      	ldr	r3, [sp, #4]
    bbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbfc:	1c5a      	adds	r2, r3, #1
    bbfe:	4904      	ldr	r1, [pc, #16]	; (bc10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    bc00:	9b01      	ldr	r3, [sp, #4]
    bc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc06:	bf00      	nop
    bc08:	b003      	add	sp, #12
    bc0a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc0e:	bf00      	nop
    bc10:	1fff9034 	.word	0x1fff9034
    bc14:	1fff9030 	.word	0x1fff9030

0000bc18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    bc18:	b500      	push	{lr}
    bc1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc1c:	f7f4 ffcc 	bl	bb8 <Sys_GetCoreID>
    bc20:	4603      	mov	r3, r0
    bc22:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    bc24:	4a0d      	ldr	r2, [pc, #52]	; (bc5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    bc26:	9b01      	ldr	r3, [sp, #4]
    bc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc2c:	1e5a      	subs	r2, r3, #1
    bc2e:	490b      	ldr	r1, [pc, #44]	; (bc5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    bc30:	9b01      	ldr	r3, [sp, #4]
    bc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    bc36:	4a0a      	ldr	r2, [pc, #40]	; (bc60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    bc38:	9b01      	ldr	r3, [sp, #4]
    bc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc3e:	f003 0301 	and.w	r3, r3, #1
    bc42:	2b00      	cmp	r3, #0
    bc44:	d106      	bne.n	bc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    bc46:	4a05      	ldr	r2, [pc, #20]	; (bc5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    bc48:	9b01      	ldr	r3, [sp, #4]
    bc4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d100      	bne.n	bc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc54:	bf00      	nop
    bc56:	b003      	add	sp, #12
    bc58:	f85d fb04 	ldr.w	pc, [sp], #4
    bc5c:	1fff9034 	.word	0x1fff9034
    bc60:	1fff9030 	.word	0x1fff9030

0000bc64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    bc64:	b500      	push	{lr}
    bc66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc68:	f7f4 ffa6 	bl	bb8 <Sys_GetCoreID>
    bc6c:	4603      	mov	r3, r0
    bc6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    bc70:	4a10      	ldr	r2, [pc, #64]	; (bcb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    bc72:	9b01      	ldr	r3, [sp, #4]
    bc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc78:	2b00      	cmp	r3, #0
    bc7a:	d10d      	bne.n	bc98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc7c:	f7f4 fec4 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    bc80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc82:	9b00      	ldr	r3, [sp, #0]
    bc84:	f003 0301 	and.w	r3, r3, #1
    bc88:	2b00      	cmp	r3, #0
    bc8a:	d100      	bne.n	bc8e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    bc8e:	490a      	ldr	r1, [pc, #40]	; (bcb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    bc90:	9b01      	ldr	r3, [sp, #4]
    bc92:	9a00      	ldr	r2, [sp, #0]
    bc94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    bc98:	4a06      	ldr	r2, [pc, #24]	; (bcb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    bc9a:	9b01      	ldr	r3, [sp, #4]
    bc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bca0:	1c5a      	adds	r2, r3, #1
    bca2:	4904      	ldr	r1, [pc, #16]	; (bcb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    bca4:	9b01      	ldr	r3, [sp, #4]
    bca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bcaa:	bf00      	nop
    bcac:	b003      	add	sp, #12
    bcae:	f85d fb04 	ldr.w	pc, [sp], #4
    bcb2:	bf00      	nop
    bcb4:	1fff903c 	.word	0x1fff903c
    bcb8:	1fff9038 	.word	0x1fff9038

0000bcbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    bcbc:	b500      	push	{lr}
    bcbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcc0:	f7f4 ff7a 	bl	bb8 <Sys_GetCoreID>
    bcc4:	4603      	mov	r3, r0
    bcc6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    bcc8:	4a0d      	ldr	r2, [pc, #52]	; (bd00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    bcca:	9b01      	ldr	r3, [sp, #4]
    bccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcd0:	1e5a      	subs	r2, r3, #1
    bcd2:	490b      	ldr	r1, [pc, #44]	; (bd00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    bcd4:	9b01      	ldr	r3, [sp, #4]
    bcd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    bcda:	4a0a      	ldr	r2, [pc, #40]	; (bd04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    bcdc:	9b01      	ldr	r3, [sp, #4]
    bcde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bce2:	f003 0301 	and.w	r3, r3, #1
    bce6:	2b00      	cmp	r3, #0
    bce8:	d106      	bne.n	bcf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    bcea:	4a05      	ldr	r2, [pc, #20]	; (bd00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    bcec:	9b01      	ldr	r3, [sp, #4]
    bcee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcf2:	2b00      	cmp	r3, #0
    bcf4:	d100      	bne.n	bcf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bcf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bcf8:	bf00      	nop
    bcfa:	b003      	add	sp, #12
    bcfc:	f85d fb04 	ldr.w	pc, [sp], #4
    bd00:	1fff903c 	.word	0x1fff903c
    bd04:	1fff9038 	.word	0x1fff9038

0000bd08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    bd08:	b500      	push	{lr}
    bd0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd0c:	f7f4 ff54 	bl	bb8 <Sys_GetCoreID>
    bd10:	4603      	mov	r3, r0
    bd12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    bd14:	4a10      	ldr	r2, [pc, #64]	; (bd58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    bd16:	9b01      	ldr	r3, [sp, #4]
    bd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	d10d      	bne.n	bd3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd20:	f7f4 fe72 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    bd24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd26:	9b00      	ldr	r3, [sp, #0]
    bd28:	f003 0301 	and.w	r3, r3, #1
    bd2c:	2b00      	cmp	r3, #0
    bd2e:	d100      	bne.n	bd32 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    bd32:	490a      	ldr	r1, [pc, #40]	; (bd5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    bd34:	9b01      	ldr	r3, [sp, #4]
    bd36:	9a00      	ldr	r2, [sp, #0]
    bd38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    bd3c:	4a06      	ldr	r2, [pc, #24]	; (bd58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    bd3e:	9b01      	ldr	r3, [sp, #4]
    bd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd44:	1c5a      	adds	r2, r3, #1
    bd46:	4904      	ldr	r1, [pc, #16]	; (bd58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    bd48:	9b01      	ldr	r3, [sp, #4]
    bd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd4e:	bf00      	nop
    bd50:	b003      	add	sp, #12
    bd52:	f85d fb04 	ldr.w	pc, [sp], #4
    bd56:	bf00      	nop
    bd58:	1fff9044 	.word	0x1fff9044
    bd5c:	1fff9040 	.word	0x1fff9040

0000bd60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    bd60:	b500      	push	{lr}
    bd62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd64:	f7f4 ff28 	bl	bb8 <Sys_GetCoreID>
    bd68:	4603      	mov	r3, r0
    bd6a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    bd6c:	4a0d      	ldr	r2, [pc, #52]	; (bda4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    bd6e:	9b01      	ldr	r3, [sp, #4]
    bd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd74:	1e5a      	subs	r2, r3, #1
    bd76:	490b      	ldr	r1, [pc, #44]	; (bda4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    bd78:	9b01      	ldr	r3, [sp, #4]
    bd7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    bd7e:	4a0a      	ldr	r2, [pc, #40]	; (bda8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    bd80:	9b01      	ldr	r3, [sp, #4]
    bd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd86:	f003 0301 	and.w	r3, r3, #1
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	d106      	bne.n	bd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    bd8e:	4a05      	ldr	r2, [pc, #20]	; (bda4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    bd90:	9b01      	ldr	r3, [sp, #4]
    bd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd96:	2b00      	cmp	r3, #0
    bd98:	d100      	bne.n	bd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd9c:	bf00      	nop
    bd9e:	b003      	add	sp, #12
    bda0:	f85d fb04 	ldr.w	pc, [sp], #4
    bda4:	1fff9044 	.word	0x1fff9044
    bda8:	1fff9040 	.word	0x1fff9040

0000bdac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    bdac:	b500      	push	{lr}
    bdae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdb0:	f7f4 ff02 	bl	bb8 <Sys_GetCoreID>
    bdb4:	4603      	mov	r3, r0
    bdb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    bdb8:	4a10      	ldr	r2, [pc, #64]	; (bdfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    bdba:	9b01      	ldr	r3, [sp, #4]
    bdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdc0:	2b00      	cmp	r3, #0
    bdc2:	d10d      	bne.n	bde0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bdc4:	f7f4 fe20 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    bdc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdca:	9b00      	ldr	r3, [sp, #0]
    bdcc:	f003 0301 	and.w	r3, r3, #1
    bdd0:	2b00      	cmp	r3, #0
    bdd2:	d100      	bne.n	bdd6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    bdd6:	490a      	ldr	r1, [pc, #40]	; (be00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    bdd8:	9b01      	ldr	r3, [sp, #4]
    bdda:	9a00      	ldr	r2, [sp, #0]
    bddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    bde0:	4a06      	ldr	r2, [pc, #24]	; (bdfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    bde2:	9b01      	ldr	r3, [sp, #4]
    bde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bde8:	1c5a      	adds	r2, r3, #1
    bdea:	4904      	ldr	r1, [pc, #16]	; (bdfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    bdec:	9b01      	ldr	r3, [sp, #4]
    bdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bdf2:	bf00      	nop
    bdf4:	b003      	add	sp, #12
    bdf6:	f85d fb04 	ldr.w	pc, [sp], #4
    bdfa:	bf00      	nop
    bdfc:	1fff904c 	.word	0x1fff904c
    be00:	1fff9048 	.word	0x1fff9048

0000be04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    be04:	b500      	push	{lr}
    be06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be08:	f7f4 fed6 	bl	bb8 <Sys_GetCoreID>
    be0c:	4603      	mov	r3, r0
    be0e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    be10:	4a0d      	ldr	r2, [pc, #52]	; (be48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    be12:	9b01      	ldr	r3, [sp, #4]
    be14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be18:	1e5a      	subs	r2, r3, #1
    be1a:	490b      	ldr	r1, [pc, #44]	; (be48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    be1c:	9b01      	ldr	r3, [sp, #4]
    be1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    be22:	4a0a      	ldr	r2, [pc, #40]	; (be4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    be24:	9b01      	ldr	r3, [sp, #4]
    be26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be2a:	f003 0301 	and.w	r3, r3, #1
    be2e:	2b00      	cmp	r3, #0
    be30:	d106      	bne.n	be40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    be32:	4a05      	ldr	r2, [pc, #20]	; (be48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    be34:	9b01      	ldr	r3, [sp, #4]
    be36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be3a:	2b00      	cmp	r3, #0
    be3c:	d100      	bne.n	be40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be40:	bf00      	nop
    be42:	b003      	add	sp, #12
    be44:	f85d fb04 	ldr.w	pc, [sp], #4
    be48:	1fff904c 	.word	0x1fff904c
    be4c:	1fff9048 	.word	0x1fff9048

0000be50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    be50:	b500      	push	{lr}
    be52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be54:	f7f4 feb0 	bl	bb8 <Sys_GetCoreID>
    be58:	4603      	mov	r3, r0
    be5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    be5c:	4a10      	ldr	r2, [pc, #64]	; (bea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    be5e:	9b01      	ldr	r3, [sp, #4]
    be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be64:	2b00      	cmp	r3, #0
    be66:	d10d      	bne.n	be84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be68:	f7f4 fdce 	bl	a08 <Can_43_FLEXCAN_schm_read_msr>
    be6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be6e:	9b00      	ldr	r3, [sp, #0]
    be70:	f003 0301 	and.w	r3, r3, #1
    be74:	2b00      	cmp	r3, #0
    be76:	d100      	bne.n	be7a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    be7a:	490a      	ldr	r1, [pc, #40]	; (bea4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    be7c:	9b01      	ldr	r3, [sp, #4]
    be7e:	9a00      	ldr	r2, [sp, #0]
    be80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    be84:	4a06      	ldr	r2, [pc, #24]	; (bea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    be86:	9b01      	ldr	r3, [sp, #4]
    be88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be8c:	1c5a      	adds	r2, r3, #1
    be8e:	4904      	ldr	r1, [pc, #16]	; (bea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    be90:	9b01      	ldr	r3, [sp, #4]
    be92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be96:	bf00      	nop
    be98:	b003      	add	sp, #12
    be9a:	f85d fb04 	ldr.w	pc, [sp], #4
    be9e:	bf00      	nop
    bea0:	1fff9054 	.word	0x1fff9054
    bea4:	1fff9050 	.word	0x1fff9050

0000bea8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    bea8:	b500      	push	{lr}
    beaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    beac:	f7f4 fe84 	bl	bb8 <Sys_GetCoreID>
    beb0:	4603      	mov	r3, r0
    beb2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    beb4:	4a0d      	ldr	r2, [pc, #52]	; (beec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    beb6:	9b01      	ldr	r3, [sp, #4]
    beb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bebc:	1e5a      	subs	r2, r3, #1
    bebe:	490b      	ldr	r1, [pc, #44]	; (beec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    bec0:	9b01      	ldr	r3, [sp, #4]
    bec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    bec6:	4a0a      	ldr	r2, [pc, #40]	; (bef0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    bec8:	9b01      	ldr	r3, [sp, #4]
    beca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bece:	f003 0301 	and.w	r3, r3, #1
    bed2:	2b00      	cmp	r3, #0
    bed4:	d106      	bne.n	bee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    bed6:	4a05      	ldr	r2, [pc, #20]	; (beec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    bed8:	9b01      	ldr	r3, [sp, #4]
    beda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bede:	2b00      	cmp	r3, #0
    bee0:	d100      	bne.n	bee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bee4:	bf00      	nop
    bee6:	b003      	add	sp, #12
    bee8:	f85d fb04 	ldr.w	pc, [sp], #4
    beec:	1fff9054 	.word	0x1fff9054
    bef0:	1fff9050 	.word	0x1fff9050

0000bef4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    bef4:	b500      	push	{lr}
    bef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bef8:	f7f4 fe5e 	bl	bb8 <Sys_GetCoreID>
    befc:	4603      	mov	r3, r0
    befe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    bf00:	4a10      	ldr	r2, [pc, #64]	; (bf44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    bf02:	9b01      	ldr	r3, [sp, #4]
    bf04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf08:	2b00      	cmp	r3, #0
    bf0a:	d10d      	bne.n	bf28 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf0c:	f7f4 fd85 	bl	a1a <Mcu_schm_read_msr>
    bf10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf12:	9b00      	ldr	r3, [sp, #0]
    bf14:	f003 0301 	and.w	r3, r3, #1
    bf18:	2b00      	cmp	r3, #0
    bf1a:	d100      	bne.n	bf1e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    bf1e:	490a      	ldr	r1, [pc, #40]	; (bf48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    bf20:	9b01      	ldr	r3, [sp, #4]
    bf22:	9a00      	ldr	r2, [sp, #0]
    bf24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    bf28:	4a06      	ldr	r2, [pc, #24]	; (bf44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    bf2a:	9b01      	ldr	r3, [sp, #4]
    bf2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf30:	1c5a      	adds	r2, r3, #1
    bf32:	4904      	ldr	r1, [pc, #16]	; (bf44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    bf34:	9b01      	ldr	r3, [sp, #4]
    bf36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf3a:	bf00      	nop
    bf3c:	b003      	add	sp, #12
    bf3e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf42:	bf00      	nop
    bf44:	1fff905c 	.word	0x1fff905c
    bf48:	1fff9058 	.word	0x1fff9058

0000bf4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    bf4c:	b500      	push	{lr}
    bf4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf50:	f7f4 fe32 	bl	bb8 <Sys_GetCoreID>
    bf54:	4603      	mov	r3, r0
    bf56:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    bf58:	4a0d      	ldr	r2, [pc, #52]	; (bf90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    bf5a:	9b01      	ldr	r3, [sp, #4]
    bf5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf60:	1e5a      	subs	r2, r3, #1
    bf62:	490b      	ldr	r1, [pc, #44]	; (bf90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    bf64:	9b01      	ldr	r3, [sp, #4]
    bf66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    bf6a:	4a0a      	ldr	r2, [pc, #40]	; (bf94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    bf6c:	9b01      	ldr	r3, [sp, #4]
    bf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf72:	f003 0301 	and.w	r3, r3, #1
    bf76:	2b00      	cmp	r3, #0
    bf78:	d106      	bne.n	bf88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    bf7a:	4a05      	ldr	r2, [pc, #20]	; (bf90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    bf7c:	9b01      	ldr	r3, [sp, #4]
    bf7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf82:	2b00      	cmp	r3, #0
    bf84:	d100      	bne.n	bf88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf88:	bf00      	nop
    bf8a:	b003      	add	sp, #12
    bf8c:	f85d fb04 	ldr.w	pc, [sp], #4
    bf90:	1fff905c 	.word	0x1fff905c
    bf94:	1fff9058 	.word	0x1fff9058

0000bf98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    bf98:	b500      	push	{lr}
    bf9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf9c:	f7f4 fe0c 	bl	bb8 <Sys_GetCoreID>
    bfa0:	4603      	mov	r3, r0
    bfa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    bfa4:	4a10      	ldr	r2, [pc, #64]	; (bfe8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    bfa6:	9b01      	ldr	r3, [sp, #4]
    bfa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfac:	2b00      	cmp	r3, #0
    bfae:	d10d      	bne.n	bfcc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bfb0:	f7f4 fd33 	bl	a1a <Mcu_schm_read_msr>
    bfb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bfb6:	9b00      	ldr	r3, [sp, #0]
    bfb8:	f003 0301 	and.w	r3, r3, #1
    bfbc:	2b00      	cmp	r3, #0
    bfbe:	d100      	bne.n	bfc2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    bfc2:	490a      	ldr	r1, [pc, #40]	; (bfec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    bfc4:	9b01      	ldr	r3, [sp, #4]
    bfc6:	9a00      	ldr	r2, [sp, #0]
    bfc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    bfcc:	4a06      	ldr	r2, [pc, #24]	; (bfe8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    bfce:	9b01      	ldr	r3, [sp, #4]
    bfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfd4:	1c5a      	adds	r2, r3, #1
    bfd6:	4904      	ldr	r1, [pc, #16]	; (bfe8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    bfd8:	9b01      	ldr	r3, [sp, #4]
    bfda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfde:	bf00      	nop
    bfe0:	b003      	add	sp, #12
    bfe2:	f85d fb04 	ldr.w	pc, [sp], #4
    bfe6:	bf00      	nop
    bfe8:	1fff9064 	.word	0x1fff9064
    bfec:	1fff9060 	.word	0x1fff9060

0000bff0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    bff0:	b500      	push	{lr}
    bff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bff4:	f7f4 fde0 	bl	bb8 <Sys_GetCoreID>
    bff8:	4603      	mov	r3, r0
    bffa:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    bffc:	4a0d      	ldr	r2, [pc, #52]	; (c034 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    bffe:	9b01      	ldr	r3, [sp, #4]
    c000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c004:	1e5a      	subs	r2, r3, #1
    c006:	490b      	ldr	r1, [pc, #44]	; (c034 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    c008:	9b01      	ldr	r3, [sp, #4]
    c00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    c00e:	4a0a      	ldr	r2, [pc, #40]	; (c038 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    c010:	9b01      	ldr	r3, [sp, #4]
    c012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c016:	f003 0301 	and.w	r3, r3, #1
    c01a:	2b00      	cmp	r3, #0
    c01c:	d106      	bne.n	c02c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    c01e:	4a05      	ldr	r2, [pc, #20]	; (c034 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    c020:	9b01      	ldr	r3, [sp, #4]
    c022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c026:	2b00      	cmp	r3, #0
    c028:	d100      	bne.n	c02c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c02a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c02c:	bf00      	nop
    c02e:	b003      	add	sp, #12
    c030:	f85d fb04 	ldr.w	pc, [sp], #4
    c034:	1fff9064 	.word	0x1fff9064
    c038:	1fff9060 	.word	0x1fff9060

0000c03c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    c03c:	b500      	push	{lr}
    c03e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c040:	f7f4 fdba 	bl	bb8 <Sys_GetCoreID>
    c044:	4603      	mov	r3, r0
    c046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    c048:	4a10      	ldr	r2, [pc, #64]	; (c08c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    c04a:	9b01      	ldr	r3, [sp, #4]
    c04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c050:	2b00      	cmp	r3, #0
    c052:	d10d      	bne.n	c070 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c054:	f7f4 fce1 	bl	a1a <Mcu_schm_read_msr>
    c058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c05a:	9b00      	ldr	r3, [sp, #0]
    c05c:	f003 0301 	and.w	r3, r3, #1
    c060:	2b00      	cmp	r3, #0
    c062:	d100      	bne.n	c066 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    c066:	490a      	ldr	r1, [pc, #40]	; (c090 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    c068:	9b01      	ldr	r3, [sp, #4]
    c06a:	9a00      	ldr	r2, [sp, #0]
    c06c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    c070:	4a06      	ldr	r2, [pc, #24]	; (c08c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    c072:	9b01      	ldr	r3, [sp, #4]
    c074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c078:	1c5a      	adds	r2, r3, #1
    c07a:	4904      	ldr	r1, [pc, #16]	; (c08c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    c07c:	9b01      	ldr	r3, [sp, #4]
    c07e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c082:	bf00      	nop
    c084:	b003      	add	sp, #12
    c086:	f85d fb04 	ldr.w	pc, [sp], #4
    c08a:	bf00      	nop
    c08c:	1fff906c 	.word	0x1fff906c
    c090:	1fff9068 	.word	0x1fff9068

0000c094 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    c094:	b500      	push	{lr}
    c096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c098:	f7f4 fd8e 	bl	bb8 <Sys_GetCoreID>
    c09c:	4603      	mov	r3, r0
    c09e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    c0a0:	4a0d      	ldr	r2, [pc, #52]	; (c0d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    c0a2:	9b01      	ldr	r3, [sp, #4]
    c0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0a8:	1e5a      	subs	r2, r3, #1
    c0aa:	490b      	ldr	r1, [pc, #44]	; (c0d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    c0ac:	9b01      	ldr	r3, [sp, #4]
    c0ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    c0b2:	4a0a      	ldr	r2, [pc, #40]	; (c0dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    c0b4:	9b01      	ldr	r3, [sp, #4]
    c0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ba:	f003 0301 	and.w	r3, r3, #1
    c0be:	2b00      	cmp	r3, #0
    c0c0:	d106      	bne.n	c0d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    c0c2:	4a05      	ldr	r2, [pc, #20]	; (c0d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    c0c4:	9b01      	ldr	r3, [sp, #4]
    c0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ca:	2b00      	cmp	r3, #0
    c0cc:	d100      	bne.n	c0d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0d0:	bf00      	nop
    c0d2:	b003      	add	sp, #12
    c0d4:	f85d fb04 	ldr.w	pc, [sp], #4
    c0d8:	1fff906c 	.word	0x1fff906c
    c0dc:	1fff9068 	.word	0x1fff9068

0000c0e0 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    c0e0:	bf00      	nop
    c0e2:	4770      	bx	lr

0000c0e4 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    c0e4:	b510      	push	{r4, lr}
    c0e6:	b084      	sub	sp, #16
    c0e8:	4604      	mov	r4, r0
    c0ea:	4608      	mov	r0, r1
    c0ec:	4611      	mov	r1, r2
    c0ee:	461a      	mov	r2, r3
    c0f0:	4623      	mov	r3, r4
    c0f2:	f8ad 3006 	strh.w	r3, [sp, #6]
    c0f6:	4603      	mov	r3, r0
    c0f8:	f88d 3005 	strb.w	r3, [sp, #5]
    c0fc:	460b      	mov	r3, r1
    c0fe:	f88d 3004 	strb.w	r3, [sp, #4]
    c102:	4613      	mov	r3, r2
    c104:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c108:	f7f4 fd56 	bl	bb8 <Sys_GetCoreID>
    c10c:	4603      	mov	r3, r0
    c10e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    c110:	490d      	ldr	r1, [pc, #52]	; (c148 <Det_ReportError+0x64>)
    c112:	9b03      	ldr	r3, [sp, #12]
    c114:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c118:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    c11c:	4a0b      	ldr	r2, [pc, #44]	; (c14c <Det_ReportError+0x68>)
    c11e:	9b03      	ldr	r3, [sp, #12]
    c120:	4413      	add	r3, r2
    c122:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c126:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    c128:	4a09      	ldr	r2, [pc, #36]	; (c150 <Det_ReportError+0x6c>)
    c12a:	9b03      	ldr	r3, [sp, #12]
    c12c:	4413      	add	r3, r2
    c12e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c132:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    c134:	4a07      	ldr	r2, [pc, #28]	; (c154 <Det_ReportError+0x70>)
    c136:	9b03      	ldr	r3, [sp, #12]
    c138:	4413      	add	r3, r2
    c13a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c13e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    c140:	2300      	movs	r3, #0
}
    c142:	4618      	mov	r0, r3
    c144:	b004      	add	sp, #16
    c146:	bd10      	pop	{r4, pc}
    c148:	1fff9098 	.word	0x1fff9098
    c14c:	1fff9070 	.word	0x1fff9070
    c150:	1fff9074 	.word	0x1fff9074
    c154:	1fff9078 	.word	0x1fff9078

0000c158 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    c158:	b510      	push	{r4, lr}
    c15a:	b084      	sub	sp, #16
    c15c:	4604      	mov	r4, r0
    c15e:	4608      	mov	r0, r1
    c160:	4611      	mov	r1, r2
    c162:	461a      	mov	r2, r3
    c164:	4623      	mov	r3, r4
    c166:	f8ad 3006 	strh.w	r3, [sp, #6]
    c16a:	4603      	mov	r3, r0
    c16c:	f88d 3005 	strb.w	r3, [sp, #5]
    c170:	460b      	mov	r3, r1
    c172:	f88d 3004 	strb.w	r3, [sp, #4]
    c176:	4613      	mov	r3, r2
    c178:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c17c:	f7f4 fd1c 	bl	bb8 <Sys_GetCoreID>
    c180:	4603      	mov	r3, r0
    c182:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    c184:	490d      	ldr	r1, [pc, #52]	; (c1bc <Det_ReportRuntimeError+0x64>)
    c186:	9b03      	ldr	r3, [sp, #12]
    c188:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c18c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    c190:	4a0b      	ldr	r2, [pc, #44]	; (c1c0 <Det_ReportRuntimeError+0x68>)
    c192:	9b03      	ldr	r3, [sp, #12]
    c194:	4413      	add	r3, r2
    c196:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c19a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    c19c:	4a09      	ldr	r2, [pc, #36]	; (c1c4 <Det_ReportRuntimeError+0x6c>)
    c19e:	9b03      	ldr	r3, [sp, #12]
    c1a0:	4413      	add	r3, r2
    c1a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c1a6:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    c1a8:	4a07      	ldr	r2, [pc, #28]	; (c1c8 <Det_ReportRuntimeError+0x70>)
    c1aa:	9b03      	ldr	r3, [sp, #12]
    c1ac:	4413      	add	r3, r2
    c1ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c1b2:	701a      	strb	r2, [r3, #0]

    return E_OK;
    c1b4:	2300      	movs	r3, #0
}
    c1b6:	4618      	mov	r0, r3
    c1b8:	b004      	add	sp, #16
    c1ba:	bd10      	pop	{r4, pc}
    c1bc:	1fff909c 	.word	0x1fff909c
    c1c0:	1fff907c 	.word	0x1fff907c
    c1c4:	1fff9080 	.word	0x1fff9080
    c1c8:	1fff9084 	.word	0x1fff9084

0000c1cc <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    c1cc:	b510      	push	{r4, lr}
    c1ce:	b084      	sub	sp, #16
    c1d0:	4604      	mov	r4, r0
    c1d2:	4608      	mov	r0, r1
    c1d4:	4611      	mov	r1, r2
    c1d6:	461a      	mov	r2, r3
    c1d8:	4623      	mov	r3, r4
    c1da:	f8ad 3006 	strh.w	r3, [sp, #6]
    c1de:	4603      	mov	r3, r0
    c1e0:	f88d 3005 	strb.w	r3, [sp, #5]
    c1e4:	460b      	mov	r3, r1
    c1e6:	f88d 3004 	strb.w	r3, [sp, #4]
    c1ea:	4613      	mov	r3, r2
    c1ec:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1f0:	f7f4 fce2 	bl	bb8 <Sys_GetCoreID>
    c1f4:	4603      	mov	r3, r0
    c1f6:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    c1f8:	490d      	ldr	r1, [pc, #52]	; (c230 <Det_ReportTransientFault+0x64>)
    c1fa:	9b03      	ldr	r3, [sp, #12]
    c1fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c200:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    c204:	4a0b      	ldr	r2, [pc, #44]	; (c234 <Det_ReportTransientFault+0x68>)
    c206:	9b03      	ldr	r3, [sp, #12]
    c208:	4413      	add	r3, r2
    c20a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c20e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    c210:	4a09      	ldr	r2, [pc, #36]	; (c238 <Det_ReportTransientFault+0x6c>)
    c212:	9b03      	ldr	r3, [sp, #12]
    c214:	4413      	add	r3, r2
    c216:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c21a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    c21c:	4a07      	ldr	r2, [pc, #28]	; (c23c <Det_ReportTransientFault+0x70>)
    c21e:	9b03      	ldr	r3, [sp, #12]
    c220:	4413      	add	r3, r2
    c222:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c226:	701a      	strb	r2, [r3, #0]

    return E_OK;
    c228:	2300      	movs	r3, #0
}
    c22a:	4618      	mov	r0, r3
    c22c:	b004      	add	sp, #16
    c22e:	bd10      	pop	{r4, pc}
    c230:	1fff9094 	.word	0x1fff9094
    c234:	1fff9088 	.word	0x1fff9088
    c238:	1fff908c 	.word	0x1fff908c
    c23c:	1fff9090 	.word	0x1fff9090

0000c240 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    c240:	bf00      	nop
    c242:	4770      	bx	lr

0000c244 <Clock_Ip_au8DividerCallbackIndex>:
    c244:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000c254 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000c264 <Clock_Ip_au8XoscCallbackIndex>:
    c264:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000c274 <Clock_Ip_au8IrcoscCallbackIndex>:
    c274:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000c284 <Clock_Ip_au8GateCallbackIndex>:
    c284:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000c294 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000c2a4 <Clock_Ip_au8PllCallbackIndex>:
    c2a4:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000c2b4 <Clock_Ip_au8SelectorCallbackIndex>:
    c2b4:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000c2c4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000c2d4 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000c2e4 <Clock_Ip_au8ClockFeatures>:
	...
    c2f4:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    c304:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    c314:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    c324:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    c334:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    c344:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    c354:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    c364:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    c374:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    c384:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    c3c4:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    c3d4:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    c3e4:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    c3f4:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    c40c:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    c41c:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    c42c:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    c43c:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    c44c:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    c45c:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    c46c:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    c47c:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    c494:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    c4a4:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    c4b4:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    c4c4:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    c4d4:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    c4e4:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    c4f4:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    c504:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    c514:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    c524:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    c534:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    c544:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    c554:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    c564:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    c574:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    c584:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    c594:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    c5a4:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    c5b4:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    c5c4:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    c5d4:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    c5e4:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000c5f4 <Clock_Ip_au16SelectorEntryHardwareValue>:
    c5f4:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    c604:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    c614:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000c64c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    c64c:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000c67c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    c67c:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    c68c:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000c6ac <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    c6ac:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    c6bc:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000c6dc <Clock_Ip_au8DividerValueHardwareValue>:
    c6dc:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    c6ec:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    c6fc:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    c71c:	0007 0000                                   ....

0000c720 <Clock_Ip_apxScgPeriphAsyncDivs>:
    c720:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000c730 <Clock_Ip_aeSourceTypeClockName>:
    c730:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    c740:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    c750:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    c760:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    c770:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    c780:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000c7ec <Clock_Ip_aeHwPllName>:
    c7ec:	0009 0000                                   ....

0000c7f0 <Clock_Ip_aeHwDfsName>:
    c7f0:	0057 0000                                   W...

0000c7f4 <Clock_Ip_axDividerCallbacks>:
    c7f4:	21b1 0000 21bb 0000 21d5 0000 21ef 0000     .!...!...!...!..
    c804:	2209 0000 2223 0000 223d 0000 2257 0000     ."..#"..="..W"..
    c814:	2271 0000 228b 0000 22a5 0000 22bf 0000     q"..."..."..."..
    c824:	22d9 0000 22f3 0000 230d 0000               ."..."...#..

0000c830 <Clock_Ip_axDividerTriggerCallbacks>:
    c830:	2681 0000 2681 0000                         .&...&..

0000c838 <Clock_Ip_axExtOscCallbacks>:
    c838:	268d 0000 268d 0000 268d 0000 2697 0000     .&...&...&...&..
    c848:	268d 0000 26a1 0000 26bb 0000 26d5 0000     .&...&...&...&..
    c858:	2759 0000 276d 0000                         Y'..m'..

0000c860 <Clock_Ip_axFracDivCallbacks>:
    c860:	292d 0000 292d 0000 2937 0000               -)..-)..7)..

0000c86c <Clock_Ip_axGateCallbacks>:
    c86c:	2951 0000 295b 0000 2a5b 0000 2a75 0000     Q)..[)..[*..u*..
    c87c:	2a0b 0000 2a25 0000 29bb 0000 29d5 0000     .*..%*...)...)..
    c88c:	296b 0000 2985 0000 2aab 0000 2ac5 0000     k)...)...*...*..
    c89c:	2afb 0000 2b15 0000                         .*...+..

0000c8a4 <Clock_Ip_axIntOscCallbacks>:
    c8a4:	2cc1 0000 2cc1 0000 2ccb 0000 2cd5 0000     .,...,...,...,..
    c8b4:	2cef 0000 2d09 0000 2d1d 0000 2d37 0000     .,...-...-..7-..
    c8c4:	2d51 0000 2d65 0000 2d7f 0000 2d99 0000     Q-..e-...-...-..
    c8d4:	2e41 0000 2e5b 0000 2e75 0000               A...[...u...

0000c8e0 <Clock_Ip_axCmuCallbacks>:
    c8e0:	3411 0000 341b 0000 3427 0000 3411 0000     .4...4..'4...4..

0000c8f0 <Clock_Ip_axPllCallbacks>:
    c8f0:	3431 0000 3431 0000 343b 0000 3431 0000     14..14..;4..14..
    c900:	3447 0000 3451 0000 346b 0000 3485 0000     G4..Q4..k4...4..
    c910:	3529 0000 3515 0000                         )5...5..

0000c918 <Clock_Ip_axPcfsCallbacks>:
    c918:	3685 0000                                   .6..

0000c91c <Clock_Ip_axSelectorCallbacks>:
    c91c:	3691 0000 3691 0000 369b 0000 36b5 0000     .6...6...6...6..
    c92c:	3691 0000 36cf 0000 36e9 0000 3703 0000     .6...6...6...7..
    c93c:	371d 0000 3737 0000 3751 0000 376b 0000     .7..77..Q7..k7..
    c94c:	3785 0000 379f 0000 37b9 0000 37d3 0000     .7...7...7...7..
    c95c:	37ed 0000 3807 0000 3821 0000 383b 0000     .7...8..!8..;8..
    c96c:	3855 0000 386f 0000                         U8..o8..

0000c974 <ClockSource>:
    c974:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    c98c:	0009 0000                                   ....

0000c990 <ResetReasonArray>:
    c990:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    c9a0:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    c9b0:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    c9c0:	000c 0000 000d 0000 000e 0000               ............

0000c9cc <Flexcan_Ip_apxBase>:
    c9cc:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000c9d8 <payload_code.3>:
    c9d8:	0100 0302 0504 0706 0908 0909 0a09 0a0a     ................
    c9e8:	0b0a 0b0b 0c0b 0c0c 0d0c 0d0d 0d0d 0d0d     ................
    c9f8:	0e0d 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
    ca08:	0f0e 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
    ca18:	000f 0000                                   ....

0000ca1c <flexcanBase.2>:
    ca1c:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000ca28 <maxMbNum.1>:
    ca28:	0020 0000 0010 0000 0010 0000                ...........

0000ca34 <flexcanBase.0>:
    ca34:	4000 4002                                   .@.@

0000ca38 <Can_43_FLEXCANIpwHwChannelConfig0>:
    ca38:	cf00 0000                                   ....

0000ca3c <Can_au32HwBufferAddr_Ctrl0>:
    ca3c:	4080 4002 4090 4002                         .@.@.@.@

0000ca44 <Can_aHwFilter_Object0>:
    ca44:	0000 0000 0000 c000                         ........

0000ca4c <Can_aCtrlOffsetToCtrlIDMap>:
    ca4c:	ff00 00ff                                   ....

0000ca50 <Can_aHwObjIDToCtrlIDMap>:
    ca50:	0000 0000                                   ....

0000ca54 <Can_aHwObjectConfig>:
	...
    ca60:	0000 ff01 0008 0001 ca44 0000 0000 0000     ........D.......
    ca70:	0000 0000 ca3c 0000 0001 0000 0001 0000     ....<...........
    ca80:	0000 0000 0000 ff01 0008 0000 0000 0000     ................
    ca90:	0003 0000 0001 0000 ca40 0000               ........@...

0000ca9c <Can_aBaudrateConfig_Ctrl0>:
    ca9c:	0000 0403 0005 001d 0000 0000 0000 0000     ................
	...

0000cab4 <Can_apHwObject_Ctrl0>:
    cab4:	ca54 0000 ca78 0000                         T...x...

0000cabc <Can_aControllerConfig>:
    cabc:	0000 0000 4000 4002 0001 0000 ffff ffff     .....@.@........
	...
    cad8:	0000 0001 ca9c 0000 ca38 0000 0002 0000     ........8.......
    cae8:	cab4 0000                                   ....

0000caec <Can_apController>:
    caec:	cabc 0000                                   ....

0000caf0 <Can_43_FLEXCAN_Config>:
    caf0:	0000 0000 0001 0000 ca4c 0000 ca50 0000     ........L...P...
    cb00:	ca54 0000 caec 0000                         T.......

0000cb08 <Mcu_aClockConfigPB>:
	...
    cb10:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    cb20:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    cb30:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    cb40:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    cb50:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    cb70:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    cb80:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    cb90:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    cba0:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    cbb0:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    cbc0:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    cbd0:	003f 0000 0000 0000 0040 0000 0000 0000     ?.......@.......
    cbe0:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
    cbf0:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    cc00:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    cc10:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    cc20:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    cc30:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    cc40:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    cc50:	000c 0000 0001 0000 0000 0000 000d 0000     ................
    cc60:	0002 0000 0000 0000 000e 0000 0001 0000     ................
    cc70:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    cc80:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    cc90:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    cca0:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    ccb0:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    ccc0:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    ccd0:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    cce0:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    ccf0:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    cd00:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    cd10:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    cd28:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    cd40:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    cd5c:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    cd6c:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    cd7c:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    cd8c:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    cd9c:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    cdac:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    cdbc:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    cdcc:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    cddc:	003a 0000 0001 0000 003b 0000 0000 0000     :.......;.......
    cdec:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    cdfc:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
    ce0c:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
    ce1c:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    ce2c:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    ce3c:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    ce4c:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    ce5c:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    ce6c:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    ce7c:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    ce8c:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    ce9c:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    ceac:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    cebc:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    cecc:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000cf00 <Flexcan_aCtrlConfigPB>:
    cf00:	0002 0000 0000 0000 0000 0000 0002 0000     ................
    cf10:	0040 0000 0000 0000 0100 0000 0003 0000     @...............
    cf20:	0004 0000 0005 0000 001d 0000 0000 0000     ................
    cf30:	0004 0000 0004 0000 0005 0000 001d 0000     ................
	...
    cf48:	6c21 0000 6ccd 0000                         !l...l..

0000cf50 <aIrqConfiguration>:
    cf50:	004e 0000 0f01 0000 b0bd 0000 004f 0000     N...........O...
    cf60:	0f01 0000 b0cd 0000 0051 0000 0f01 0000     ........Q.......
    cf70:	b0dd 0000 0052 0000 0f01 0000 b0f1 0000     ....R...........

0000cf80 <intCtrlConfig>:
    cf80:	0004 0000 cf50 0000                         ....P...

0000cf88 <Mcu_Config>:
    cf88:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    cf98:	cfd0 0000 cb08 0000 cfdc 0000               ............

0000cfa4 <OsIf_xPredefinedConfig>:
    cfa4:	0000 0000 6c00 02dc                         .....l..

0000cfac <OsIf_apxPredefinedConfig>:
    cfac:	cfa4 0000                                   ....

0000cfb0 <Platform_uConfiguration>:
    cfb0:	cfb8 0000                                   ....

0000cfb4 <Platform_Config>:
    cfb4:	cfb0 0000                                   ....

0000cfb8 <ipwConfig>:
    cfb8:	cf80 0000 0000 0000                         ........

0000cfc0 <Power_Ip_RCM_ConfigPB>:
	...

0000cfc8 <Power_Ip_PMC_ConfigPB>:
    cfc8:	0000 0000                                   ....

0000cfcc <Power_Ip_SMC_ConfigPB>:
    cfcc:	0000 0000                                   ....

0000cfd0 <Power_Ip_aModeConfigPB>:
	...

0000cfdc <Power_Ip_HwIPsConfigPB>:
    cfdc:	cfc0 0000 cfc8 0000 cfcc 0000               ............

0000cfe8 <__INIT_TABLE>:
    cfe8:	00000002 	.word	0x00000002
    cfec:	1fff8b10 	.word	0x1fff8b10
    cff0:	0000d010 	.word	0x0000d010
    cff4:	0000d02c 	.word	0x0000d02c
    cff8:	1fff8800 	.word	0x1fff8800
    cffc:	00000000 	.word	0x00000000
    d000:	00000310 	.word	0x00000310

0000d004 <__ZERO_TABLE>:
    d004:	00000001 	.word	0x00000001
    d008:	1fff8b30 	.word	0x1fff8b30
    d00c:	1fff90b0 	.word	0x1fff90b0
