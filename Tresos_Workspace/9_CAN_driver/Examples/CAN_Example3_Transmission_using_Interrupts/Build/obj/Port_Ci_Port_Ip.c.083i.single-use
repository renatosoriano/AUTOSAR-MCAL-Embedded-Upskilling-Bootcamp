Port_Ci_Port_Ip_SetGlobalPinControl (struct PORT_Type * const base, uint16 pins, uint16 value, Port_Ci_Port_Ip_PortGlobalControlPins halfPort)
{
  uint16 mask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  mask_10 = 0;
  mask_11 = mask_10 | 1;
  mask_12 = mask_11 | 2;
  mask_13 = mask_12 | 16;
  mask_14 = mask_13 | 64;
  mask_15 = mask_14 | 1792;
  mask_16 = mask_15 | 32768;
  mask_18 = mask_16 & value_17(D);
  switch (halfPort_19(D)) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  _1 = (long unsigned int) pins_20(D);
  _2 = _1 << 16;
  _3 = (long unsigned int) mask_18;
  _4 = _2 | _3;
  base_22(D)->GPCLR ={v} _4;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  _5 = (long unsigned int) pins_20(D);
  _6 = _5 << 16;
  _7 = (long unsigned int) mask_18;
  _8 = _6 | _7;
  base_22(D)->GPCHR ={v} _8;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


Port_Ci_Port_Ip_ConfigDigitalFilter (struct PORT_Type * const base, const struct Port_Ci_Port_Ip_DigitalFilterConfigType * config)
{
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 = config_8(D)->u8Clock;
  _2 = (long unsigned int) _1;
  _3 = _2 & 1;
  base_9(D)->DFCR ={v} _3;
  _4 = config_8(D)->u8Width;
  _5 = (long unsigned int) _4;
  _6 = _5 & 31;
  base_9(D)->DFWR ={v} _6;
  return;

}


Port_Ci_Port_Ip_DisableDigitalFilter (struct PORT_Type * const base, uint32 pin)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08 ();
  _1 ={v} base_7(D)->DFER;
  _2 = 1 << pin_8(D);
  _3 = ~_2;
  _4 = _1 & _3;
  base_7(D)->DFER ={v} _4;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08 ();
  return;

}


Port_Ci_Port_Ip_EnableDigitalFilter (struct PORT_Type * const base, uint32 pin)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07 ();
  _1 ={v} base_6(D)->DFER;
  _2 = 1 << pin_7(D);
  _3 = _1 | _2;
  base_6(D)->DFER ={v} _3;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07 ();
  return;

}


Port_Ci_Port_Ip_SetMuxModeSel (struct PORT_Type * const base, uint32 pin, Port_Ci_Port_Ip_PortMux mux)
{
  Port_Ci_Port_Ip_PortMux muxing;
  uint32 regValue;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  muxing_8 = Port_Ci_Port_Ip_ConfigureInterleave (base_4(D), pin_5(D), mux_6(D));
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06 ();
  regValue_10 ={v} base_4(D)->PCR[pin_5(D)];
  regValue_11 = regValue_10 & 4294965503;
  _1 = muxing_8 << 8;
  _2 = _1 & 1792;
  regValue_12 = regValue_11 | _2;
  base_4(D)->PCR[pin_5(D)] ={v} regValue_12;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06 ();
  return;

}


Port_Ci_Port_Ip_Init (uint32 pinCount, const struct Port_Ci_Port_Ip_PinSettingsConfig * config)
{
  uint32 i;
  Port_Ci_Port_Ip_PortStatusType D.5724;
  long unsigned int _1;
  const struct Port_Ci_Port_Ip_PinSettingsConfig * _2;
  Port_Ci_Port_Ip_PortStatusType _8;

  <bb 2> :
  i_5 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = i_3 * 40;
  _2 = config_9(D) + _1;
  Port_Ci_Port_Ip_PinInit (_2);
  i_11 = i_3 + 1;

  <bb 4> :
  # i_3 = PHI <i_5(2), i_11(3)>
  if (i_3 < pinCount_7(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _8 = 0;

  <bb 6> :
<L3>:
  return _8;

}


Port_Ci_Port_Ip_PinInit (const struct Port_Ci_Port_Ip_PinSettingsConfig * config)
{
  Port_Ci_Port_Ip_PortMux retMuxing;
  Port_Ci_Port_Ip_PortMux muxing;
  uint32 digitalFilters;
  uint32 pinsValues;
  long unsigned int iftmp.1;
  long unsigned int iftmp.0;
  <unnamed type> _1;
  <unnamed type> _2;
  long unsigned int _3;
  <unnamed type> _4;
  long unsigned int _5;
  long unsigned int _6;
  <unnamed type> _7;
  long unsigned int _8;
  long unsigned int _9;
  _Bool _10;
  struct PORT_Type * _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  struct PORT_Type * _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  _Bool _19;
  long unsigned int _20;
  long unsigned int _21;
  struct PORT_Type * _22;
  <unnamed type> _23;
  unsigned char _24;
  struct GPIO_Type * _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  struct GPIO_Type * _29;
  long unsigned int _30;
  unsigned char _31;
  struct GPIO_Type * _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  struct GPIO_Type * _36;
  long unsigned int _37;
  struct GPIO_Type * _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  struct GPIO_Type * _42;
  long unsigned int _43;
  struct GPIO_Type * _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  struct GPIO_Type * _49;
  long unsigned int _50;
  struct GPIO_Type * _51;
  long unsigned int _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  struct GPIO_Type * _56;
  long unsigned int _57;
  <unnamed type> _58;
  struct GPIO_Type * _59;
  long unsigned int _60;
  long unsigned int _61;
  long unsigned int _62;
  struct GPIO_Type * _63;
  long unsigned int _64;
  struct PORT_Type * _65;
  long unsigned int _66;
  long unsigned int iftmp.0_68;
  long unsigned int iftmp.1_69;
  long unsigned int iftmp.0_82;
  long unsigned int iftmp.0_83;
  long unsigned int iftmp.1_93;
  long unsigned int iftmp.1_94;

  <bb 2> :
  pinsValues_73 = 0;
  muxing_74 = 0;
  retMuxing_75 = 0;
  _1 = config_77(D)->pullConfig;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pinsValues_78 = pinsValues_73 | 2;
  _2 = config_77(D)->pullConfig;
  _3 = _2 & 1;
  pinsValues_79 = pinsValues_78 | _3;

  <bb 4> :
  # pinsValues_67 = PHI <pinsValues_73(2), pinsValues_79(3)>
  _4 = config_77(D)->driveStrength;
  _5 = _4 << 6;
  _6 = _5 & 64;
  pinsValues_80 = pinsValues_67 | _6;
  _7 = config_77(D)->lockRegister;
  _8 = _7 << 15;
  _9 = _8 & 65535;
  pinsValues_81 = pinsValues_80 | _9;
  _10 = config_77(D)->passiveFilter;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0_83 = 16;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.0_82 = 0;

  <bb 7> :
  # iftmp.0_68 = PHI <iftmp.0_83(5), iftmp.0_82(6)>
  pinsValues_84 = iftmp.0_68 | pinsValues_81;
  muxing_85 = config_77(D)->mux;
  _11 = config_77(D)->portBase;
  _12 = config_77(D)->pinPortIdx;
  retMuxing_87 = Port_Ci_Port_Ip_ConfigureInterleave (_11, _12, muxing_85);
  muxing_88 = retMuxing_87;
  _13 = muxing_88 << 8;
  _14 = _13 & 1792;
  pinsValues_89 = pinsValues_84 | _14;
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00 ();
  _15 = config_77(D)->portBase;
  digitalFilters_91 ={v} _15->DFER;
  _16 = config_77(D)->pinPortIdx;
  _17 = 1 << _16;
  _18 = ~_17;
  digitalFilters_92 = digitalFilters_91 & _18;
  _19 = config_77(D)->digitalFilter;
  if (_19 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.1_94 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1_93 = 0;

  <bb 10> :
  # iftmp.1_69 = PHI <iftmp.1_94(8), iftmp.1_93(9)>
  _20 = config_77(D)->pinPortIdx;
  _21 = iftmp.1_69 << _20;
  digitalFilters_95 = digitalFilters_92 | _21;
  _22 = config_77(D)->portBase;
  _22->DFER ={v} digitalFilters_95;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00 ();
  if (muxing_88 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 11> :
  _23 = config_77(D)->direction;
  if (_23 == 2)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 12> :
  _24 = config_77(D)->initValue;
  if (_24 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01 ();
  _25 = config_77(D)->gpioBase;
  _26 ={v} _25->PSOR;
  _27 = config_77(D)->pinPortIdx;
  _28 = 1 << _27;
  _29 = config_77(D)->gpioBase;
  _30 = _26 | _28;
  _29->PSOR ={v} _30;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01 ();
  goto <bb 16>; [INV]

  <bb 14> :
  _31 = config_77(D)->initValue;
  if (_31 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02 ();
  _32 = config_77(D)->gpioBase;
  _33 ={v} _32->PCOR;
  _34 = config_77(D)->pinPortIdx;
  _35 = 1 << _34;
  _36 = config_77(D)->gpioBase;
  _37 = _33 | _35;
  _36->PCOR ={v} _37;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02 ();

  <bb 16> :
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03 ();
  _38 = config_77(D)->gpioBase;
  _39 ={v} _38->PDDR;
  _40 = config_77(D)->pinPortIdx;
  _41 = 1 << _40;
  _42 = config_77(D)->gpioBase;
  _43 = _39 | _41;
  _42->PDDR ={v} _43;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03 ();
  goto <bb 20>; [INV]

  <bb 17> :
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03 ();
  _44 = config_77(D)->gpioBase;
  _45 ={v} _44->PDDR;
  _46 = config_77(D)->pinPortIdx;
  _47 = 1 << _46;
  _48 = ~_47;
  _49 = config_77(D)->gpioBase;
  _50 = _45 & _48;
  _49->PDDR ={v} _50;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03 ();
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04 ();
  _51 = config_77(D)->gpioBase;
  _52 ={v} _51->PIDR;
  _53 = config_77(D)->pinPortIdx;
  _54 = 1 << _53;
  _55 = ~_54;
  _56 = config_77(D)->gpioBase;
  _57 = _52 & _55;
  _56->PIDR ={v} _57;
  _58 = config_77(D)->direction;
  if (_58 == 3)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _59 = config_77(D)->gpioBase;
  _60 ={v} _59->PIDR;
  _61 = config_77(D)->pinPortIdx;
  _62 = 1 << _61;
  _63 = config_77(D)->gpioBase;
  _64 = _60 | _62;
  _63->PIDR ={v} _64;

  <bb 19> :
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04 ();

  <bb 20> :
  _65 = config_77(D)->portBase;
  _66 = config_77(D)->pinPortIdx;
  _65->PCR[_66] ={v} pinsValues_89;
  return;

}


Port_Ci_Port_Ip_ConfigureInterleave (const struct PORT_Type * const base, uint32 pin, Port_Ci_Port_Ip_PortMux muxing)
{
  Port_Ci_Port_Ip_InterleaveMux interleaveVal;
  uint32 chipCtlReg;
  Port_Ci_Port_Ip_PortMux retMuxing;
  Port_Ci_Port_Ip_PortMux D.5699;
  struct SIM_Type * _1;
  long unsigned int _2;
  struct SIM_Type * _3;
  long unsigned int _4;
  struct SIM_Type * _5;
  long unsigned int _6;
  struct SIM_Type * _7;
  long unsigned int _8;
  long unsigned int _9;
  struct SIM_Type * _10;
  long unsigned int _11;
  Port_Ci_Port_Ip_PortMux _28;

  <bb 2> :
  retMuxing_16 = muxing_15(D);
  if (muxing_15(D) == 8)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _1 = 1074036736B;
  _2 ={v} _1->CHIPCTL;
  chipCtlReg_18 = _2 & 15;
  interleaveVal_22 = Port_Ci_Port_Ip_GetAdcInterleaveVal (base_19(D), pin_20(D), chipCtlReg_18);
  if (interleaveVal_22 != 255)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05 ();
  _3 = 1074036736B;
  _4 ={v} _3->CHIPCTL;
  _5 = 1074036736B;
  _6 = _4 & 4294967280;
  _5->CHIPCTL ={v} _6;
  _7 = 1074036736B;
  _8 ={v} _7->CHIPCTL;
  _9 = interleaveVal_22 & 15;
  _10 = 1074036736B;
  _11 = _8 | _9;
  _10->CHIPCTL ={v} _11;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05 ();

  <bb 5> :
  retMuxing_27 = 0;

  <bb 6> :
  # retMuxing_12 = PHI <retMuxing_16(2), retMuxing_27(5)>
  _28 = retMuxing_12;

  <bb 7> :
<L4>:
  return _28;

}


Port_Ci_Port_Ip_GetAdcInterleaveVal (const struct PORT_Type * base, const uint32 pinPortIdx, const uint32 currentVal)
{
  uint32 adcInterleaveVal;
  uint32 D.5693;
  uint32 _24;

  <bb 2> :
  adcInterleaveVal_4 = 255;
  if (base_5(D) == 1074044928B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  switch (pinPortIdx_6(D)) <default: <L7> [INV], case 0: <L1> [INV], case 1: <L2> [INV], case 13: <L3> [INV], case 14: <L4> [INV], case 15: <L5> [INV], case 16: <L6> [INV]>

  <bb 4> :
<L1>:
  adcInterleaveVal_22 = 1;
  adcInterleaveVal_23 = adcInterleaveVal_22 | currentVal_8(D);
  goto <bb 11>; [INV]

  <bb 5> :
<L2>:
  adcInterleaveVal_20 = 2;
  adcInterleaveVal_21 = adcInterleaveVal_20 | currentVal_8(D);
  goto <bb 11>; [INV]

  <bb 6> :
<L3>:
  adcInterleaveVal_18 = 4;
  adcInterleaveVal_19 = adcInterleaveVal_18 | currentVal_8(D);
  goto <bb 11>; [INV]

  <bb 7> :
<L4>:
  adcInterleaveVal_16 = 8;
  adcInterleaveVal_17 = adcInterleaveVal_16 | currentVal_8(D);
  goto <bb 11>; [INV]

  <bb 8> :
<L5>:
  adcInterleaveVal_14 = 14;
  adcInterleaveVal_15 = adcInterleaveVal_14 & currentVal_8(D);
  goto <bb 11>; [INV]

  <bb 9> :
<L6>:
  adcInterleaveVal_12 = 13;
  adcInterleaveVal_13 = adcInterleaveVal_12 & currentVal_8(D);
  goto <bb 11>; [INV]

  <bb 10> :
<L7>:

  <bb 11> :
  # adcInterleaveVal_1 = PHI <adcInterleaveVal_23(4), adcInterleaveVal_21(5), adcInterleaveVal_19(6), adcInterleaveVal_17(7), adcInterleaveVal_15(8), adcInterleaveVal_13(9), adcInterleaveVal_4(10)>
  goto <bb 18>; [INV]

  <bb 12> :
  if (base_5(D) == 1074049024B)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 13> :
  switch (pinPortIdx_6(D)) <default: <L13> [INV], case 0: <L11> [INV], case 1: <L12> [INV]>

  <bb 14> :
<L11>:
  adcInterleaveVal_10 = 11;
  adcInterleaveVal_11 = adcInterleaveVal_10 & currentVal_8(D);
  goto <bb 17>; [INV]

  <bb 15> :
<L12>:
  adcInterleaveVal_7 = 7;
  adcInterleaveVal_9 = adcInterleaveVal_7 & currentVal_8(D);
  goto <bb 17>; [INV]

  <bb 16> :
<L13>:

  <bb 17> :
  # adcInterleaveVal_2 = PHI <adcInterleaveVal_11(14), adcInterleaveVal_9(15), adcInterleaveVal_4(16)>

  <bb 18> :
  # adcInterleaveVal_3 = PHI <adcInterleaveVal_1(11), adcInterleaveVal_4(12), adcInterleaveVal_2(17)>
  _24 = adcInterleaveVal_3;

  <bb 19> :
<L18>:
  return _24;

}


