EcuM_Init ()
{
  <bb 2> :
  Mcu_Init (&Mcu_Config);
  Mcu_InitClock (0);
  Mcu_SetMode (0);
  OsIf_Init (0B);
  Platform_Init (0B);
  Port_Init (&Port_Config);
  Can_43_FLEXCAN_Init (&Can_43_FLEXCAN_Config);
  return;

}


main ()
{
  struct Can_PduType PduInfo;
  int D.7330;

  <bb 2> :
  EcuM_Init ();
  Can_43_FLEXCAN_SetControllerMode (0, 1);
  PduInfo.id = 291;
  PduInfo.swPduHandle = 0;
  PduInfo.length = 8;
  PduInfo.sdu = &Can_au8Sdu8bytes;

  <bb 3> :
  Can_43_FLEXCAN_Write (0, &PduInfo);

  <bb 4> :
  CanIf_bTxFlag.0_1 = CanIf_bTxFlag;
  _2 = ~CanIf_bTxFlag.0_1;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  CanIf_bTxFlag = 0;
  _3 = Can_au8Sdu8bytes[0];
  _4 = _3;
  _5 = _4 + 1;
  Can_au8Sdu8bytes[0] = _5;
  _6 = Can_au8Sdu8bytes[7];
  _7 = _6;
  _8 = _7 + 1;
  Can_au8Sdu8bytes[7] = _8;
  Delay (5000);
  goto <bb 3>; [INV]

}


CanIf_RxIndication (const struct Can_HwType * Mailbox, const struct PduInfoType * PduInfoPtr)
{
  <bb 2> :
  return;

}


CanIf_TxConfirmation (PduIdType CanTxPduId)
{
  <bb 2> :
  CanIf_bTxFlag = 1;
  return;

}


CanIf_ControllerModeIndication (uint8 ControllerId, Can_ControllerStateType ControllerMode)
{
  <bb 2> :
  return;

}


CanIf_ControllerBusOff (uint8 ControllerId)
{
  <bb 2> :
  return;

}


Delay (uint32 ms)
{
  uint32 ElapsedTime;
  uint32 SeedTick;
  uint32 Timeout;
  long unsigned int D.7329;

  <bb 2> :
  _1 = ms * 1000;
  Timeout = OsIf_MicrosToTicks (_1, 1);
  _2 = OsIf_GetCounter (1);
  SeedTick = _2;
  ElapsedTime = 0;

  <bb 3> :
  D.7329 = OsIf_GetElapsed (&SeedTick, 1);
  ElapsedTime = D.7329 + ElapsedTime;
  if (ElapsedTime < Timeout)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  SeedTick = {CLOBBER};
  return;

}


