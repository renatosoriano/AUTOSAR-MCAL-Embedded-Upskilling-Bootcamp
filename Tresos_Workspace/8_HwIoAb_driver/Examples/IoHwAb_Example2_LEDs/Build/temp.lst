
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001123 	.word	0x00001123
  10:	00001125 	.word	0x00001125
  14:	00001127 	.word	0x00001127
  18:	00001129 	.word	0x00001129
	...
  2c:	0000112b 	.word	0x0000112b
  30:	0000112d 	.word	0x0000112d
  34:	00000000 	.word	0x00000000
  38:	0000112f 	.word	0x0000112f
  3c:	00001131 	.word	0x00001131
  40:	00001133 	.word	0x00001133
  44:	00001133 	.word	0x00001133
  48:	00001133 	.word	0x00001133
  4c:	00001133 	.word	0x00001133
  50:	00001133 	.word	0x00001133
  54:	00001133 	.word	0x00001133
  58:	00001133 	.word	0x00001133
  5c:	00001133 	.word	0x00001133
  60:	00001133 	.word	0x00001133
  64:	00001133 	.word	0x00001133
  68:	00001133 	.word	0x00001133
  6c:	00001133 	.word	0x00001133
  70:	00001133 	.word	0x00001133
  74:	00001133 	.word	0x00001133
  78:	00001133 	.word	0x00001133
  7c:	00001133 	.word	0x00001133
  80:	00001133 	.word	0x00001133
  84:	00001133 	.word	0x00001133
  88:	00001133 	.word	0x00001133
  8c:	00001133 	.word	0x00001133
  90:	00001133 	.word	0x00001133
  94:	00001133 	.word	0x00001133
  98:	00001133 	.word	0x00001133
  9c:	00001133 	.word	0x00001133
  a0:	00001133 	.word	0x00001133
  a4:	00001133 	.word	0x00001133
  a8:	00001133 	.word	0x00001133
  ac:	00001133 	.word	0x00001133
  b0:	00001133 	.word	0x00001133
  b4:	00001133 	.word	0x00001133
  b8:	00001133 	.word	0x00001133
  bc:	00001133 	.word	0x00001133
  c0:	00001133 	.word	0x00001133
  c4:	00001133 	.word	0x00001133
  c8:	00001133 	.word	0x00001133
  cc:	00001133 	.word	0x00001133
  d0:	00001133 	.word	0x00001133
  d4:	00001133 	.word	0x00001133
  d8:	00001133 	.word	0x00001133
  dc:	00001133 	.word	0x00001133
  e0:	00001133 	.word	0x00001133
  e4:	00001133 	.word	0x00001133
  e8:	00001133 	.word	0x00001133
  ec:	00001133 	.word	0x00001133
  f0:	00001133 	.word	0x00001133
  f4:	00001133 	.word	0x00001133
  f8:	00001133 	.word	0x00001133
  fc:	00001133 	.word	0x00001133
 100:	00001133 	.word	0x00001133
 104:	00001133 	.word	0x00001133
 108:	00001133 	.word	0x00001133
 10c:	00001133 	.word	0x00001133
 110:	00001133 	.word	0x00001133
 114:	00001133 	.word	0x00001133
 118:	00001133 	.word	0x00001133
 11c:	00001133 	.word	0x00001133
 120:	00001133 	.word	0x00001133
 124:	00001133 	.word	0x00001133
 128:	00001133 	.word	0x00001133
 12c:	00001133 	.word	0x00001133
 130:	00001133 	.word	0x00001133
 134:	00001133 	.word	0x00001133
 138:	00001133 	.word	0x00001133
 13c:	00001133 	.word	0x00001133
 140:	00001133 	.word	0x00001133
 144:	00001133 	.word	0x00001133
 148:	00001133 	.word	0x00001133
 14c:	00001133 	.word	0x00001133
 150:	00001133 	.word	0x00001133
 154:	00001133 	.word	0x00001133
 158:	00001133 	.word	0x00001133
 15c:	00001133 	.word	0x00001133
 160:	00001133 	.word	0x00001133
 164:	00001133 	.word	0x00001133
 168:	00001133 	.word	0x00001133
 16c:	00001133 	.word	0x00001133
 170:	00001133 	.word	0x00001133
 174:	00001133 	.word	0x00001133
 178:	00001133 	.word	0x00001133
 17c:	00001133 	.word	0x00001133
 180:	00001133 	.word	0x00001133
 184:	00001133 	.word	0x00001133
 188:	00001133 	.word	0x00001133
 18c:	00001133 	.word	0x00001133
 190:	00001133 	.word	0x00001133
 194:	00001133 	.word	0x00001133
 198:	00001133 	.word	0x00001133
 19c:	00001133 	.word	0x00001133
 1a0:	00001133 	.word	0x00001133
 1a4:	00001133 	.word	0x00001133
 1a8:	00001133 	.word	0x00001133
 1ac:	00001133 	.word	0x00001133
 1b0:	00001133 	.word	0x00001133
 1b4:	00001133 	.word	0x00001133
 1b8:	00001133 	.word	0x00001133
 1bc:	00001133 	.word	0x00001133
 1c0:	00001133 	.word	0x00001133
 1c4:	00001133 	.word	0x00001133
 1c8:	00001133 	.word	0x00001133
 1cc:	00001133 	.word	0x00001133
 1d0:	00001133 	.word	0x00001133
 1d4:	00001133 	.word	0x00001133
 1d8:	00001133 	.word	0x00001133
 1dc:	00001133 	.word	0x00001133
 1e0:	00001133 	.word	0x00001133
 1e4:	00001133 	.word	0x00001133
 1e8:	00001133 	.word	0x00001133
 1ec:	00001133 	.word	0x00001133
 1f0:	00001133 	.word	0x00001133
 1f4:	00001133 	.word	0x00001133
 1f8:	00001133 	.word	0x00001133
 1fc:	00001133 	.word	0x00001133
 200:	00001133 	.word	0x00001133
 204:	00001133 	.word	0x00001133
 208:	00001133 	.word	0x00001133
 20c:	00001133 	.word	0x00001133
 210:	00001133 	.word	0x00001133
 214:	00001133 	.word	0x00001133
 218:	00001133 	.word	0x00001133
 21c:	00001133 	.word	0x00001133
 220:	00001133 	.word	0x00001133
 224:	00001133 	.word	0x00001133
 228:	00001133 	.word	0x00001133
 22c:	00001133 	.word	0x00001133
 230:	00001133 	.word	0x00001133
 234:	00001133 	.word	0x00001133
 238:	00001133 	.word	0x00001133
 23c:	00001133 	.word	0x00001133
 240:	00001133 	.word	0x00001133
 244:	00001133 	.word	0x00001133
 248:	00001133 	.word	0x00001133
 24c:	00001133 	.word	0x00001133
 250:	00001133 	.word	0x00001133
 254:	00001133 	.word	0x00001133
 258:	00001133 	.word	0x00001133
 25c:	00001133 	.word	0x00001133
 260:	00001133 	.word	0x00001133
 264:	00001133 	.word	0x00001133
 268:	00001133 	.word	0x00001133
 26c:	00001133 	.word	0x00001133
 270:	00001133 	.word	0x00001133
 274:	00001133 	.word	0x00001133
 278:	00001133 	.word	0x00001133
 27c:	00001133 	.word	0x00001133
 280:	00001133 	.word	0x00001133
 284:	00001133 	.word	0x00001133
 288:	00001133 	.word	0x00001133
 28c:	00001133 	.word	0x00001133
 290:	00001133 	.word	0x00001133
 294:	00001133 	.word	0x00001133
 298:	00001133 	.word	0x00001133
 29c:	00001133 	.word	0x00001133
 2a0:	00001133 	.word	0x00001133
 2a4:	00001133 	.word	0x00001133
 2a8:	00001133 	.word	0x00001133
 2ac:	00001133 	.word	0x00001133
 2b0:	00001133 	.word	0x00001133
 2b4:	00001133 	.word	0x00001133
 2b8:	00001133 	.word	0x00001133
 2bc:	00001133 	.word	0x00001133
 2c0:	00001133 	.word	0x00001133
 2c4:	00001133 	.word	0x00001133
 2c8:	00001133 	.word	0x00001133
 2cc:	00001133 	.word	0x00001133
 2d0:	00001133 	.word	0x00001133
 2d4:	00001133 	.word	0x00001133
 2d8:	00001133 	.word	0x00001133
 2dc:	00001133 	.word	0x00001133
 2e0:	00001133 	.word	0x00001133
 2e4:	00001133 	.word	0x00001133
 2e8:	00001133 	.word	0x00001133
 2ec:	00001133 	.word	0x00001133
 2f0:	00001133 	.word	0x00001133
 2f4:	00001133 	.word	0x00001133
 2f8:	00001133 	.word	0x00001133
 2fc:	00001133 	.word	0x00001133
 300:	00001133 	.word	0x00001133
 304:	00001133 	.word	0x00001133
 308:	00001133 	.word	0x00001133
 30c:	00001133 	.word	0x00001133

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fd85 	bl	f90 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fe44 	bl	1118 <startup_go_to_user_mode>
     490:	f000 fa34 	bl	8fc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e28 	.word	0x1fff8e28

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fd8f 	bl	10bc <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xbc>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xbc>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xc0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xc0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xb6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0xf4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x34>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xec>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0xe6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0xe2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0xe2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0xda>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0xda>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xc8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xc4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0xf8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x80>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0xde>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0xde>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0xae>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0xd6>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0xd6>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x16>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x16>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0xae>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x80>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void Delay( uint32 ms );

/* This is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 f9c3 	bl	1c4e <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 f973 	bl	1bb6 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 f983 	bl	1be8 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8fc:	b500      	push	{lr}
     8fe:	b083      	sub	sp, #12
    uint8 RealEvent = 0;    // Actual event of button.
     900:	2300      	movs	r3, #0
     902:	f88d 3006 	strb.w	r3, [sp, #6]

    EcuM_Init();
     906:	f000 f8f3 	bl	af0 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     90a:	f000 fda5 	bl	1458 <SEGGER_RTT_Init>

    while( 1u )
    {
        HwIoAb_Buttons_MainFunction();
     90e:	f000 f97b 	bl	c08 <HwIoAb_Buttons_MainFunction>
        Delay( 10 );   
     912:	200a      	movs	r0, #10
     914:	f7ff ffcc 	bl	8b0 <Delay>

        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     918:	2300      	movs	r3, #0
     91a:	f88d 3007 	strb.w	r3, [sp, #7]
     91e:	e0c9      	b.n	ab4 <main+0x1b8>
        {  
            RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     920:	f89d 3007 	ldrb.w	r3, [sp, #7]
     924:	4618      	mov	r0, r3
     926:	f000 f951 	bl	bcc <HwIoAb_Buttons_GetEvent>
     92a:	4603      	mov	r3, r0
     92c:	f88d 3006 	strb.w	r3, [sp, #6]

            if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     930:	f89d 3006 	ldrb.w	r3, [sp, #6]
     934:	2b00      	cmp	r3, #0
     936:	f000 80b5 	beq.w	aa4 <main+0x1a8>
            {
                switch( CurrentButton )
     93a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     93e:	2b02      	cmp	r3, #2
     940:	d078      	beq.n	a34 <main+0x138>
     942:	2b02      	cmp	r3, #2
     944:	f300 80b0 	bgt.w	aa8 <main+0x1ac>
     948:	2b00      	cmp	r3, #0
     94a:	d002      	beq.n	952 <main+0x56>
     94c:	2b01      	cmp	r3, #1
     94e:	d039      	beq.n	9c4 <main+0xc8>
                            break;
                        }
                    break;
                    default :
                      // If jump here is an error
                    break;
     950:	e0aa      	b.n	aa8 <main+0x1ac>
                        switch( RealEvent )
     952:	f89d 3006 	ldrb.w	r3, [sp, #6]
     956:	3b01      	subs	r3, #1
     958:	2b03      	cmp	r3, #3
     95a:	d831      	bhi.n	9c0 <main+0xc4>
     95c:	a201      	add	r2, pc, #4	; (adr r2, 964 <main+0x68>)
     95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     962:	bf00      	nop
     964:	00000975 	.word	0x00000975
     968:	00000985 	.word	0x00000985
     96c:	00000995 	.word	0x00000995
     970:	000009a5 	.word	0x000009a5
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     974:	2000      	movs	r0, #0
     976:	f000 faf5 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     97a:	4951      	ldr	r1, [pc, #324]	; (ac0 <main+0x1c4>)
     97c:	2000      	movs	r0, #0
     97e:	f001 f8d3 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     982:	e01e      	b.n	9c2 <main+0xc6>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     984:	2001      	movs	r0, #1
     986:	f000 faed 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     98a:	494e      	ldr	r1, [pc, #312]	; (ac4 <main+0x1c8>)
     98c:	2000      	movs	r0, #0
     98e:	f001 f8cb 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     992:	e016      	b.n	9c2 <main+0xc6>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     994:	2002      	movs	r0, #2
     996:	f000 fae5 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     99a:	494b      	ldr	r1, [pc, #300]	; (ac8 <main+0x1cc>)
     99c:	2000      	movs	r0, #0
     99e:	f001 f8c3 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     9a2:	e00e      	b.n	9c2 <main+0xc6>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     9a4:	2000      	movs	r0, #0
     9a6:	f000 fab9 	bl	f1c <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     9aa:	2001      	movs	r0, #1
     9ac:	f000 fab6 	bl	f1c <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     9b0:	2002      	movs	r0, #2
     9b2:	f000 fab3 	bl	f1c <HwIoAb_Leds_TurnOff>
                                SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     9b6:	4945      	ldr	r1, [pc, #276]	; (acc <main+0x1d0>)
     9b8:	2000      	movs	r0, #0
     9ba:	f001 f8b5 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     9be:	e000      	b.n	9c2 <main+0xc6>
                            break;
     9c0:	bf00      	nop
                    break;
     9c2:	e072      	b.n	aaa <main+0x1ae>
                        switch( RealEvent )
     9c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     9c8:	3b01      	subs	r3, #1
     9ca:	2b03      	cmp	r3, #3
     9cc:	d830      	bhi.n	a30 <main+0x134>
     9ce:	a201      	add	r2, pc, #4	; (adr r2, 9d4 <main+0xd8>)
     9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9d4:	000009e5 	.word	0x000009e5
     9d8:	000009f5 	.word	0x000009f5
     9dc:	00000a05 	.word	0x00000a05
     9e0:	00000a15 	.word	0x00000a15
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     9e4:	2000      	movs	r0, #0
     9e6:	f000 fabd 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     9ea:	4939      	ldr	r1, [pc, #228]	; (ad0 <main+0x1d4>)
     9ec:	2000      	movs	r0, #0
     9ee:	f001 f89b 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     9f2:	e01e      	b.n	a32 <main+0x136>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     9f4:	2001      	movs	r0, #1
     9f6:	f000 fab5 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     9fa:	4936      	ldr	r1, [pc, #216]	; (ad4 <main+0x1d8>)
     9fc:	2000      	movs	r0, #0
     9fe:	f001 f893 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     a02:	e016      	b.n	a32 <main+0x136>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     a04:	2002      	movs	r0, #2
     a06:	f000 faad 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     a0a:	4933      	ldr	r1, [pc, #204]	; (ad8 <main+0x1dc>)
     a0c:	2000      	movs	r0, #0
     a0e:	f001 f88b 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     a12:	e00e      	b.n	a32 <main+0x136>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     a14:	2000      	movs	r0, #0
     a16:	f000 fa81 	bl	f1c <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     a1a:	2001      	movs	r0, #1
     a1c:	f000 fa7e 	bl	f1c <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     a20:	2002      	movs	r0, #2
     a22:	f000 fa7b 	bl	f1c <HwIoAb_Leds_TurnOff>
                                SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     a26:	492d      	ldr	r1, [pc, #180]	; (adc <main+0x1e0>)
     a28:	2000      	movs	r0, #0
     a2a:	f001 f87d 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     a2e:	e000      	b.n	a32 <main+0x136>
                            break;
     a30:	bf00      	nop
                    break;
     a32:	e03a      	b.n	aaa <main+0x1ae>
                        switch( RealEvent )
     a34:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a38:	3b01      	subs	r3, #1
     a3a:	2b03      	cmp	r3, #3
     a3c:	d830      	bhi.n	aa0 <main+0x1a4>
     a3e:	a201      	add	r2, pc, #4	; (adr r2, a44 <main+0x148>)
     a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a44:	00000a55 	.word	0x00000a55
     a48:	00000a65 	.word	0x00000a65
     a4c:	00000a75 	.word	0x00000a75
     a50:	00000a85 	.word	0x00000a85
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     a54:	2000      	movs	r0, #0
     a56:	f000 fa85 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     a5a:	4921      	ldr	r1, [pc, #132]	; (ae0 <main+0x1e4>)
     a5c:	2000      	movs	r0, #0
     a5e:	f001 f863 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     a62:	e01e      	b.n	aa2 <main+0x1a6>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     a64:	2001      	movs	r0, #1
     a66:	f000 fa7d 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     a6a:	491e      	ldr	r1, [pc, #120]	; (ae4 <main+0x1e8>)
     a6c:	2000      	movs	r0, #0
     a6e:	f001 f85b 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     a72:	e016      	b.n	aa2 <main+0x1a6>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     a74:	2002      	movs	r0, #2
     a76:	f000 fa75 	bl	f64 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     a7a:	491b      	ldr	r1, [pc, #108]	; (ae8 <main+0x1ec>)
     a7c:	2000      	movs	r0, #0
     a7e:	f001 f853 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     a82:	e00e      	b.n	aa2 <main+0x1a6>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     a84:	2000      	movs	r0, #0
     a86:	f000 fa49 	bl	f1c <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     a8a:	2001      	movs	r0, #1
     a8c:	f000 fa46 	bl	f1c <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     a90:	2002      	movs	r0, #2
     a92:	f000 fa43 	bl	f1c <HwIoAb_Leds_TurnOff>
                                SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     a96:	4915      	ldr	r1, [pc, #84]	; (aec <main+0x1f0>)
     a98:	2000      	movs	r0, #0
     a9a:	f001 f845 	bl	1b28 <SEGGER_RTT_printf>
                            break;
     a9e:	e000      	b.n	aa2 <main+0x1a6>
                            break;
     aa0:	bf00      	nop
                    break;
     aa2:	e002      	b.n	aaa <main+0x1ae>
                }  
            }
     aa4:	bf00      	nop
     aa6:	e000      	b.n	aaa <main+0x1ae>
                    break;
     aa8:	bf00      	nop
        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     aae:	3301      	adds	r3, #1
     ab0:	f88d 3007 	strb.w	r3, [sp, #7]
     ab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ab8:	2b02      	cmp	r3, #2
     aba:	f67f af31 	bls.w	920 <main+0x24>
        HwIoAb_Buttons_MainFunction();
     abe:	e726      	b.n	90e <main+0x12>
     ac0:	00008200 	.word	0x00008200
     ac4:	00008220 	.word	0x00008220
     ac8:	00008240 	.word	0x00008240
     acc:	00008260 	.word	0x00008260
     ad0:	0000827c 	.word	0x0000827c
     ad4:	0000829c 	.word	0x0000829c
     ad8:	000082bc 	.word	0x000082bc
     adc:	000082dc 	.word	0x000082dc
     ae0:	000082f8 	.word	0x000082f8
     ae4:	00008318 	.word	0x00008318
     ae8:	00008338 	.word	0x00008338
     aec:	00008358 	.word	0x00008358

00000af0 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     af0:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     af2:	480b      	ldr	r0, [pc, #44]	; (b20 <EcuM_Init+0x30>)
     af4:	f004 fdec 	bl	56d0 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     af8:	2000      	movs	r0, #0
     afa:	f004 fe3d 	bl	5778 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     afe:	2000      	movs	r0, #0
     b00:	f004 fe5e 	bl	57c0 <Mcu_SetMode>

    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     b04:	2000      	movs	r0, #0
     b06:	f001 f84d 	bl	1ba4 <OsIf_Init>
    
    /* Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 for RGB LEDs and A12, D17, E12 for Buttons. */
    Port_Init( &Port_Config );
     b0a:	4806      	ldr	r0, [pc, #24]	; (b24 <EcuM_Init+0x34>)
     b0c:	f005 f9e2 	bl	5ed4 <Port_Init>

    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     b10:	4805      	ldr	r0, [pc, #20]	; (b28 <EcuM_Init+0x38>)
     b12:	f000 f829 	bl	b68 <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
     b16:	4805      	ldr	r0, [pc, #20]	; (b2c <EcuM_Init+0x3c>)
     b18:	f000 f9ec 	bl	ef4 <HwIoAb_Leds_Init>
}
     b1c:	bf00      	nop
     b1e:	bd08      	pop	{r3, pc}
     b20:	00008f54 	.word	0x00008f54
     b24:	000091a8 	.word	0x000091a8
     b28:	00008b38 	.word	0x00008b38
     b2c:	00008b50 	.word	0x00008b50

00000b30 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     b30:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b32:	f3ef 8310 	mrs	r3, PRIMASK
     b36:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b38:	4623      	mov	r3, r4
}
     b3a:	4618      	mov	r0, r3
     b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
     b40:	4770      	bx	lr

00000b42 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     b42:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b44:	f3ef 8310 	mrs	r3, PRIMASK
     b48:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b4a:	4623      	mov	r3, r4
}
     b4c:	4618      	mov	r0, r3
     b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
     b52:	4770      	bx	lr

00000b54 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     b54:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b56:	f3ef 8310 	mrs	r3, PRIMASK
     b5a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b5c:	4623      	mov	r3, r4
}
     b5e:	4618      	mov	r0, r3
     b60:	f85d 4b04 	ldr.w	r4, [sp], #4
     b64:	4770      	bx	lr
	...

00000b68 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     b68:	b084      	sub	sp, #16
     b6a:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     b6c:	4b16      	ldr	r3, [pc, #88]	; (bc8 <HwIoAb_Buttons_Init+0x60>)
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	2203      	movs	r2, #3
     b72:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     b74:	4b14      	ldr	r3, [pc, #80]	; (bc8 <HwIoAb_Buttons_Init+0x60>)
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	9a01      	ldr	r2, [sp, #4]
     b7a:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     b7c:	2300      	movs	r3, #0
     b7e:	f88d 300f 	strb.w	r3, [sp, #15]
     b82:	e012      	b.n	baa <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     b84:	4b10      	ldr	r3, [pc, #64]	; (bc8 <HwIoAb_Buttons_Init+0x60>)
     b86:	681a      	ldr	r2, [r3, #0]
     b88:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b8c:	4413      	add	r3, r2
     b8e:	2200      	movs	r2, #0
     b90:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     b92:	4b0d      	ldr	r3, [pc, #52]	; (bc8 <HwIoAb_Buttons_Init+0x60>)
     b94:	681a      	ldr	r2, [r3, #0]
     b96:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b9a:	4413      	add	r3, r2
     b9c:	2200      	movs	r2, #0
     b9e:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     ba0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ba4:	3301      	adds	r3, #1
     ba6:	f88d 300f 	strb.w	r3, [sp, #15]
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <HwIoAb_Buttons_Init+0x60>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	781b      	ldrb	r3, [r3, #0]
     bb0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     bb4:	429a      	cmp	r2, r3
     bb6:	d3e5      	bcc.n	b84 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <HwIoAb_Buttons_Init+0x60>)
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	2201      	movs	r2, #1
     bbe:	739a      	strb	r2, [r3, #14]
}
     bc0:	bf00      	nop
     bc2:	b004      	add	sp, #16
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop
     bc8:	1fff8b38 	.word	0x1fff8b38

00000bcc <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     bcc:	b084      	sub	sp, #16
     bce:	4603      	mov	r3, r0
     bd0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     bd4:	2300      	movs	r3, #0
     bd6:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     bda:	4b0a      	ldr	r3, [pc, #40]	; (c04 <HwIoAb_Buttons_GetEvent+0x38>)
     bdc:	681a      	ldr	r2, [r3, #0]
     bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
     be2:	4413      	add	r3, r2
     be4:	7adb      	ldrb	r3, [r3, #11]
     be6:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     bea:	4b06      	ldr	r3, [pc, #24]	; (c04 <HwIoAb_Buttons_GetEvent+0x38>)
     bec:	681a      	ldr	r2, [r3, #0]
     bee:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bf2:	4413      	add	r3, r2
     bf4:	2200      	movs	r2, #0
     bf6:	72da      	strb	r2, [r3, #11]
    return temp;
     bf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bfc:	4618      	mov	r0, r3
     bfe:	b004      	add	sp, #16
     c00:	4770      	bx	lr
     c02:	bf00      	nop
     c04:	1fff8b38 	.word	0x1fff8b38

00000c08 <HwIoAb_Buttons_MainFunction>:
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void )
{
     c08:	b500      	push	{lr}
     c0a:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     c0c:	2300      	movs	r3, #0
     c0e:	f88d 3007 	strb.w	r3, [sp, #7]
     c12:	e15d      	b.n	ed0 <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     c14:	4bb5      	ldr	r3, [pc, #724]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     c16:	681a      	ldr	r2, [r3, #0]
     c18:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c1c:	4413      	add	r3, r2
     c1e:	7a1b      	ldrb	r3, [r3, #8]
     c20:	2b04      	cmp	r3, #4
     c22:	f200 8145 	bhi.w	eb0 <HwIoAb_Buttons_MainFunction+0x2a8>
     c26:	a201      	add	r2, pc, #4	; (adr r2, c2c <HwIoAb_Buttons_MainFunction+0x24>)
     c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c2c:	00000c41 	.word	0x00000c41
     c30:	00000c8d 	.word	0x00000c8d
     c34:	00000db5 	.word	0x00000db5
     c38:	00000e4d 	.word	0x00000e4d
     c3c:	00000d19 	.word	0x00000d19
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     c40:	4baa      	ldr	r3, [pc, #680]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	685a      	ldr	r2, [r3, #4]
     c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c4a:	00db      	lsls	r3, r3, #3
     c4c:	4413      	add	r3, r2
     c4e:	881b      	ldrh	r3, [r3, #0]
     c50:	4618      	mov	r0, r3
     c52:	f005 fe53 	bl	68fc <Dio_ReadChannel>
     c56:	4603      	mov	r3, r0
     c58:	4619      	mov	r1, r3
     c5a:	4ba4      	ldr	r3, [pc, #656]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     c5c:	681b      	ldr	r3, [r3, #0]
     c5e:	685a      	ldr	r2, [r3, #4]
     c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c64:	00db      	lsls	r3, r3, #3
     c66:	4413      	add	r3, r2
     c68:	789b      	ldrb	r3, [r3, #2]
     c6a:	4299      	cmp	r1, r3
     c6c:	f040 8122 	bne.w	eb4 <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c74:	4a9e      	ldr	r2, [pc, #632]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c76:	2100      	movs	r1, #0
     c78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     c7c:	4b9b      	ldr	r3, [pc, #620]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     c7e:	681a      	ldr	r2, [r3, #0]
     c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c84:	4413      	add	r3, r2
     c86:	2201      	movs	r2, #1
     c88:	721a      	strb	r2, [r3, #8]

                }
            break;
     c8a:	e113      	b.n	eb4 <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c90:	4a97      	ldr	r2, [pc, #604]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c9a:	320a      	adds	r2, #10
     c9c:	4994      	ldr	r1, [pc, #592]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ca6:	4a92      	ldr	r2, [pc, #584]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     ca8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     cac:	4b8f      	ldr	r3, [pc, #572]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	6859      	ldr	r1, [r3, #4]
     cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cb6:	00db      	lsls	r3, r3, #3
     cb8:	440b      	add	r3, r1
     cba:	685b      	ldr	r3, [r3, #4]
     cbc:	429a      	cmp	r2, r3
     cbe:	d106      	bne.n	cce <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     cc0:	4b8a      	ldr	r3, [pc, #552]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     cc2:	681a      	ldr	r2, [r3, #0]
     cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cc8:	4413      	add	r3, r2
     cca:	2203      	movs	r2, #3
     ccc:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     cce:	4b87      	ldr	r3, [pc, #540]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	685a      	ldr	r2, [r3, #4]
     cd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cd8:	00db      	lsls	r3, r3, #3
     cda:	4413      	add	r3, r2
     cdc:	881b      	ldrh	r3, [r3, #0]
     cde:	4618      	mov	r0, r3
     ce0:	f005 fe0c 	bl	68fc <Dio_ReadChannel>
     ce4:	4603      	mov	r3, r0
     ce6:	4619      	mov	r1, r3
     ce8:	4b80      	ldr	r3, [pc, #512]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     cea:	681b      	ldr	r3, [r3, #0]
     cec:	685a      	ldr	r2, [r3, #4]
     cee:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cf2:	00db      	lsls	r3, r3, #3
     cf4:	4413      	add	r3, r2
     cf6:	789b      	ldrb	r3, [r3, #2]
     cf8:	2b00      	cmp	r3, #0
     cfa:	bf0c      	ite	eq
     cfc:	2301      	moveq	r3, #1
     cfe:	2300      	movne	r3, #0
     d00:	b2db      	uxtb	r3, r3
     d02:	4299      	cmp	r1, r3
     d04:	f040 80d8 	bne.w	eb8 <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     d08:	4b78      	ldr	r3, [pc, #480]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     d0a:	681a      	ldr	r2, [r3, #0]
     d0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d10:	4413      	add	r3, r2
     d12:	2204      	movs	r2, #4
     d14:	721a      	strb	r2, [r3, #8]
                }    
            break;
     d16:	e0cf      	b.n	eb8 <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     d18:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d1c:	4a74      	ldr	r2, [pc, #464]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d22:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d26:	320a      	adds	r2, #10
     d28:	4971      	ldr	r1, [pc, #452]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d32:	4a6f      	ldr	r2, [pc, #444]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d38:	4b6c      	ldr	r3, [pc, #432]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	6859      	ldr	r1, [r3, #4]
     d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d42:	00db      	lsls	r3, r3, #3
     d44:	440b      	add	r3, r1
     d46:	685b      	ldr	r3, [r3, #4]
     d48:	429a      	cmp	r2, r3
     d4a:	d10d      	bne.n	d68 <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     d4c:	4b67      	ldr	r3, [pc, #412]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     d4e:	681a      	ldr	r2, [r3, #0]
     d50:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d54:	4413      	add	r3, r2
     d56:	2201      	movs	r2, #1
     d58:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     d5a:	4b64      	ldr	r3, [pc, #400]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     d5c:	681a      	ldr	r2, [r3, #0]
     d5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d62:	4413      	add	r3, r2
     d64:	2200      	movs	r2, #0
     d66:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     d68:	4b60      	ldr	r3, [pc, #384]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	685a      	ldr	r2, [r3, #4]
     d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d72:	00db      	lsls	r3, r3, #3
     d74:	4413      	add	r3, r2
     d76:	881b      	ldrh	r3, [r3, #0]
     d78:	4618      	mov	r0, r3
     d7a:	f005 fdbf 	bl	68fc <Dio_ReadChannel>
     d7e:	4603      	mov	r3, r0
     d80:	4619      	mov	r1, r3
     d82:	4b5a      	ldr	r3, [pc, #360]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	685a      	ldr	r2, [r3, #4]
     d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d8c:	00db      	lsls	r3, r3, #3
     d8e:	4413      	add	r3, r2
     d90:	789b      	ldrb	r3, [r3, #2]
     d92:	4299      	cmp	r1, r3
     d94:	f040 8092 	bne.w	ebc <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     d98:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d9c:	4a54      	ldr	r2, [pc, #336]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d9e:	2100      	movs	r1, #0
     da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     da4:	4b51      	ldr	r3, [pc, #324]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     da6:	681a      	ldr	r2, [r3, #0]
     da8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dac:	4413      	add	r3, r2
     dae:	2202      	movs	r2, #2
     db0:	721a      	strb	r2, [r3, #8]
                } 
            break;
     db2:	e083      	b.n	ebc <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     db8:	4a4d      	ldr	r2, [pc, #308]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     dbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dc2:	320a      	adds	r2, #10
     dc4:	494a      	ldr	r1, [pc, #296]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dce:	4a48      	ldr	r2, [pc, #288]	; (ef0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     dd4:	4b45      	ldr	r3, [pc, #276]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	6859      	ldr	r1, [r3, #4]
     dda:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dde:	00db      	lsls	r3, r3, #3
     de0:	440b      	add	r3, r1
     de2:	685b      	ldr	r3, [r3, #4]
     de4:	429a      	cmp	r2, r3
     de6:	d106      	bne.n	df6 <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     de8:	4b40      	ldr	r3, [pc, #256]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     dea:	681a      	ldr	r2, [r3, #0]
     dec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     df0:	4413      	add	r3, r2
     df2:	2203      	movs	r2, #3
     df4:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     df6:	4b3d      	ldr	r3, [pc, #244]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	685a      	ldr	r2, [r3, #4]
     dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e00:	00db      	lsls	r3, r3, #3
     e02:	4413      	add	r3, r2
     e04:	881b      	ldrh	r3, [r3, #0]
     e06:	4618      	mov	r0, r3
     e08:	f005 fd78 	bl	68fc <Dio_ReadChannel>
     e0c:	4603      	mov	r3, r0
     e0e:	4619      	mov	r1, r3
     e10:	4b36      	ldr	r3, [pc, #216]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	685a      	ldr	r2, [r3, #4]
     e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e1a:	00db      	lsls	r3, r3, #3
     e1c:	4413      	add	r3, r2
     e1e:	789b      	ldrb	r3, [r3, #2]
     e20:	2b00      	cmp	r3, #0
     e22:	bf0c      	ite	eq
     e24:	2301      	moveq	r3, #1
     e26:	2300      	movne	r3, #0
     e28:	b2db      	uxtb	r3, r3
     e2a:	4299      	cmp	r1, r3
     e2c:	d148      	bne.n	ec0 <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     e2e:	4b2f      	ldr	r3, [pc, #188]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     e30:	681a      	ldr	r2, [r3, #0]
     e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e36:	4413      	add	r3, r2
     e38:	2202      	movs	r2, #2
     e3a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e3c:	4b2b      	ldr	r3, [pc, #172]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     e3e:	681a      	ldr	r2, [r3, #0]
     e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e44:	4413      	add	r3, r2
     e46:	2200      	movs	r2, #0
     e48:	721a      	strb	r2, [r3, #8]
                } 
            break;
     e4a:	e039      	b.n	ec0 <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     e4c:	4b27      	ldr	r3, [pc, #156]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     e4e:	681a      	ldr	r2, [r3, #0]
     e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e54:	4413      	add	r3, r2
     e56:	2203      	movs	r2, #3
     e58:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e5a:	4b24      	ldr	r3, [pc, #144]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     e5c:	681b      	ldr	r3, [r3, #0]
     e5e:	685a      	ldr	r2, [r3, #4]
     e60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e64:	00db      	lsls	r3, r3, #3
     e66:	4413      	add	r3, r2
     e68:	881b      	ldrh	r3, [r3, #0]
     e6a:	4618      	mov	r0, r3
     e6c:	f005 fd46 	bl	68fc <Dio_ReadChannel>
     e70:	4603      	mov	r3, r0
     e72:	4619      	mov	r1, r3
     e74:	4b1d      	ldr	r3, [pc, #116]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	685a      	ldr	r2, [r3, #4]
     e7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e7e:	00db      	lsls	r3, r3, #3
     e80:	4413      	add	r3, r2
     e82:	789b      	ldrb	r3, [r3, #2]
     e84:	2b00      	cmp	r3, #0
     e86:	bf0c      	ite	eq
     e88:	2301      	moveq	r3, #1
     e8a:	2300      	movne	r3, #0
     e8c:	b2db      	uxtb	r3, r3
     e8e:	4299      	cmp	r1, r3
     e90:	d118      	bne.n	ec4 <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
     e92:	4b16      	ldr	r3, [pc, #88]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     e94:	681a      	ldr	r2, [r3, #0]
     e96:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e9a:	4413      	add	r3, r2
     e9c:	2204      	movs	r2, #4
     e9e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     ea0:	4b12      	ldr	r3, [pc, #72]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     ea2:	681a      	ldr	r2, [r3, #0]
     ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ea8:	4413      	add	r3, r2
     eaa:	2200      	movs	r2, #0
     eac:	721a      	strb	r2, [r3, #8]
                }
            break;
     eae:	e009      	b.n	ec4 <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
     eb0:	bf00      	nop
     eb2:	e008      	b.n	ec6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     eb4:	bf00      	nop
     eb6:	e006      	b.n	ec6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     eb8:	bf00      	nop
     eba:	e004      	b.n	ec6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ebc:	bf00      	nop
     ebe:	e002      	b.n	ec6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ec0:	bf00      	nop
     ec2:	e000      	b.n	ec6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ec4:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eca:	3301      	adds	r3, #1
     ecc:	f88d 3007 	strb.w	r3, [sp, #7]
     ed0:	4b06      	ldr	r3, [pc, #24]	; (eec <HwIoAb_Buttons_MainFunction+0x2e4>)
     ed2:	681b      	ldr	r3, [r3, #0]
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     eda:	429a      	cmp	r2, r3
     edc:	f4ff ae9a 	bcc.w	c14 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
     ee0:	bf00      	nop
     ee2:	bf00      	nop
     ee4:	b003      	add	sp, #12
     ee6:	f85d fb04 	ldr.w	pc, [sp], #4
     eea:	bf00      	nop
     eec:	1fff8b38 	.word	0x1fff8b38
     ef0:	1fff8e10 	.word	0x1fff8e10

00000ef4 <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
     ef4:	b082      	sub	sp, #8
     ef6:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
     ef8:	4b07      	ldr	r3, [pc, #28]	; (f18 <HwIoAb_Leds_Init+0x24>)
     efa:	681b      	ldr	r3, [r3, #0]
     efc:	2203      	movs	r2, #3
     efe:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
     f00:	4b05      	ldr	r3, [pc, #20]	; (f18 <HwIoAb_Leds_Init+0x24>)
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	9a01      	ldr	r2, [sp, #4]
     f06:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
     f08:	4b03      	ldr	r3, [pc, #12]	; (f18 <HwIoAb_Leds_Init+0x24>)
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	2201      	movs	r2, #1
     f0e:	721a      	strb	r2, [r3, #8]
}
     f10:	bf00      	nop
     f12:	b002      	add	sp, #8
     f14:	4770      	bx	lr
     f16:	bf00      	nop
     f18:	1fff8b3c 	.word	0x1fff8b3c

00000f1c <HwIoAb_Leds_TurnOff>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnOff( uint8 Led ) 
{
     f1c:	b500      	push	{lr}
     f1e:	b083      	sub	sp, #12
     f20:	4603      	mov	r3, r0
     f22:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_WriteChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led, !LedsControl_Ptr->LedsConfig_Ptr[ Led ].Active );
     f26:	4b0e      	ldr	r3, [pc, #56]	; (f60 <HwIoAb_Leds_TurnOff+0x44>)
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	685a      	ldr	r2, [r3, #4]
     f2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f30:	009b      	lsls	r3, r3, #2
     f32:	4413      	add	r3, r2
     f34:	8818      	ldrh	r0, [r3, #0]
     f36:	4b0a      	ldr	r3, [pc, #40]	; (f60 <HwIoAb_Leds_TurnOff+0x44>)
     f38:	681b      	ldr	r3, [r3, #0]
     f3a:	685a      	ldr	r2, [r3, #4]
     f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f40:	009b      	lsls	r3, r3, #2
     f42:	4413      	add	r3, r2
     f44:	789b      	ldrb	r3, [r3, #2]
     f46:	2b00      	cmp	r3, #0
     f48:	bf0c      	ite	eq
     f4a:	2301      	moveq	r3, #1
     f4c:	2300      	movne	r3, #0
     f4e:	b2db      	uxtb	r3, r3
     f50:	4619      	mov	r1, r3
     f52:	f005 fce9 	bl	6928 <Dio_WriteChannel>
}
     f56:	bf00      	nop
     f58:	b003      	add	sp, #12
     f5a:	f85d fb04 	ldr.w	pc, [sp], #4
     f5e:	bf00      	nop
     f60:	1fff8b3c 	.word	0x1fff8b3c

00000f64 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
     f64:	b500      	push	{lr}
     f66:	b083      	sub	sp, #12
     f68:	4603      	mov	r3, r0
     f6a:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
     f6e:	4b07      	ldr	r3, [pc, #28]	; (f8c <HwIoAb_Leds_TurnToggle+0x28>)
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	685a      	ldr	r2, [r3, #4]
     f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f78:	009b      	lsls	r3, r3, #2
     f7a:	4413      	add	r3, r2
     f7c:	881b      	ldrh	r3, [r3, #0]
     f7e:	4618      	mov	r0, r3
     f80:	f005 fce7 	bl	6952 <Dio_FlipChannel>
}
     f84:	bf00      	nop
     f86:	b003      	add	sp, #12
     f88:	f85d fb04 	ldr.w	pc, [sp], #4
     f8c:	1fff8b3c 	.word	0x1fff8b3c

00000f90 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     f90:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     f92:	2300      	movs	r3, #0
     f94:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     f96:	2300      	movs	r3, #0
     f98:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     f9a:	2300      	movs	r3, #0
     f9c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     f9e:	2300      	movs	r3, #0
     fa0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     fa2:	4b44      	ldr	r3, [pc, #272]	; (10b4 <init_data_bss+0x124>)
     fa4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     fa6:	4b44      	ldr	r3, [pc, #272]	; (10b8 <init_data_bss+0x128>)
     fa8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     faa:	9b05      	ldr	r3, [sp, #20]
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     fb0:	9b05      	ldr	r3, [sp, #20]
     fb2:	3304      	adds	r3, #4
     fb4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     fb6:	9b05      	ldr	r3, [sp, #20]
     fb8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     fba:	2300      	movs	r3, #0
     fbc:	9309      	str	r3, [sp, #36]	; 0x24
     fbe:	e03d      	b.n	103c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fc2:	4613      	mov	r3, r2
     fc4:	005b      	lsls	r3, r3, #1
     fc6:	4413      	add	r3, r2
     fc8:	009b      	lsls	r3, r3, #2
     fca:	461a      	mov	r2, r3
     fcc:	9b03      	ldr	r3, [sp, #12]
     fce:	4413      	add	r3, r2
     fd0:	685b      	ldr	r3, [r3, #4]
     fd2:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fd6:	4613      	mov	r3, r2
     fd8:	005b      	lsls	r3, r3, #1
     fda:	4413      	add	r3, r2
     fdc:	009b      	lsls	r3, r3, #2
     fde:	461a      	mov	r2, r3
     fe0:	9b03      	ldr	r3, [sp, #12]
     fe2:	4413      	add	r3, r2
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fea:	4613      	mov	r3, r2
     fec:	005b      	lsls	r3, r3, #1
     fee:	4413      	add	r3, r2
     ff0:	009b      	lsls	r3, r3, #2
     ff2:	461a      	mov	r2, r3
     ff4:	9b03      	ldr	r3, [sp, #12]
     ff6:	4413      	add	r3, r2
     ff8:	689b      	ldr	r3, [r3, #8]
     ffa:	4619      	mov	r1, r3
     ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ffe:	4613      	mov	r3, r2
    1000:	005b      	lsls	r3, r3, #1
    1002:	4413      	add	r3, r2
    1004:	009b      	lsls	r3, r3, #2
    1006:	461a      	mov	r2, r3
    1008:	9b03      	ldr	r3, [sp, #12]
    100a:	4413      	add	r3, r2
    100c:	685b      	ldr	r3, [r3, #4]
    100e:	1acb      	subs	r3, r1, r3
    1010:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1012:	2300      	movs	r3, #0
    1014:	9308      	str	r3, [sp, #32]
    1016:	e00a      	b.n	102e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1018:	9a00      	ldr	r2, [sp, #0]
    101a:	9b08      	ldr	r3, [sp, #32]
    101c:	441a      	add	r2, r3
    101e:	9901      	ldr	r1, [sp, #4]
    1020:	9b08      	ldr	r3, [sp, #32]
    1022:	440b      	add	r3, r1
    1024:	7812      	ldrb	r2, [r2, #0]
    1026:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1028:	9b08      	ldr	r3, [sp, #32]
    102a:	3301      	adds	r3, #1
    102c:	9308      	str	r3, [sp, #32]
    102e:	9a08      	ldr	r2, [sp, #32]
    1030:	9b06      	ldr	r3, [sp, #24]
    1032:	429a      	cmp	r2, r3
    1034:	d3f0      	bcc.n	1018 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1038:	3301      	adds	r3, #1
    103a:	9309      	str	r3, [sp, #36]	; 0x24
    103c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    103e:	9b07      	ldr	r3, [sp, #28]
    1040:	429a      	cmp	r2, r3
    1042:	d3bd      	bcc.n	fc0 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1044:	9b04      	ldr	r3, [sp, #16]
    1046:	681b      	ldr	r3, [r3, #0]
    1048:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    104a:	9b04      	ldr	r3, [sp, #16]
    104c:	3304      	adds	r3, #4
    104e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1050:	9b04      	ldr	r3, [sp, #16]
    1052:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1054:	2300      	movs	r3, #0
    1056:	9309      	str	r3, [sp, #36]	; 0x24
    1058:	e024      	b.n	10a4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    105a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    105c:	00db      	lsls	r3, r3, #3
    105e:	9a02      	ldr	r2, [sp, #8]
    1060:	4413      	add	r3, r2
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    1066:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1068:	00db      	lsls	r3, r3, #3
    106a:	9a02      	ldr	r2, [sp, #8]
    106c:	4413      	add	r3, r2
    106e:	685b      	ldr	r3, [r3, #4]
    1070:	4619      	mov	r1, r3
    1072:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1074:	00db      	lsls	r3, r3, #3
    1076:	9a02      	ldr	r2, [sp, #8]
    1078:	4413      	add	r3, r2
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	1acb      	subs	r3, r1, r3
    107e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1080:	2300      	movs	r3, #0
    1082:	9308      	str	r3, [sp, #32]
    1084:	e007      	b.n	1096 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    1086:	9a01      	ldr	r2, [sp, #4]
    1088:	9b08      	ldr	r3, [sp, #32]
    108a:	4413      	add	r3, r2
    108c:	2200      	movs	r2, #0
    108e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1090:	9b08      	ldr	r3, [sp, #32]
    1092:	3301      	adds	r3, #1
    1094:	9308      	str	r3, [sp, #32]
    1096:	9a08      	ldr	r2, [sp, #32]
    1098:	9b06      	ldr	r3, [sp, #24]
    109a:	429a      	cmp	r2, r3
    109c:	d3f3      	bcc.n	1086 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    109e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10a0:	3301      	adds	r3, #1
    10a2:	9309      	str	r3, [sp, #36]	; 0x24
    10a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10a6:	9b07      	ldr	r3, [sp, #28]
    10a8:	429a      	cmp	r2, r3
    10aa:	d3d6      	bcc.n	105a <init_data_bss+0xca>
        }
    }
}
    10ac:	bf00      	nop
    10ae:	bf00      	nop
    10b0:	b00a      	add	sp, #40	; 0x28
    10b2:	4770      	bx	lr
    10b4:	00009218 	.word	0x00009218
    10b8:	00009234 	.word	0x00009234

000010bc <sys_m4_cache_init>:
{
    10bc:	b084      	sub	sp, #16
    10be:	4603      	mov	r3, r0
    10c0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    10c4:	2300      	movs	r3, #0
    10c6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    10ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10ce:	2b00      	cmp	r3, #0
    10d0:	d118      	bne.n	1104 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    10d2:	4b10      	ldr	r3, [pc, #64]	; (1114 <sys_m4_cache_init+0x58>)
    10d4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    10d8:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    10da:	4b0e      	ldr	r3, [pc, #56]	; (1114 <sys_m4_cache_init+0x58>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	4a0d      	ldr	r2, [pc, #52]	; (1114 <sys_m4_cache_init+0x58>)
    10e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10e4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    10e6:	bf00      	nop
    10e8:	4b0a      	ldr	r3, [pc, #40]	; (1114 <sys_m4_cache_init+0x58>)
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    10f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    10f4:	d0f8      	beq.n	10e8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    10f6:	4b07      	ldr	r3, [pc, #28]	; (1114 <sys_m4_cache_init+0x58>)
    10f8:	681b      	ldr	r3, [r3, #0]
    10fa:	4a06      	ldr	r2, [pc, #24]	; (1114 <sys_m4_cache_init+0x58>)
    10fc:	f043 0301 	orr.w	r3, r3, #1
    1100:	6013      	str	r3, [r2, #0]
    1102:	e002      	b.n	110a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1104:	2301      	movs	r3, #1
    1106:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    110a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    110e:	4618      	mov	r0, r3
    1110:	b004      	add	sp, #16
    1112:	4770      	bx	lr
    1114:	e0082000 	.word	0xe0082000

00001118 <startup_go_to_user_mode>:
}
    1118:	bf00      	nop
    111a:	4770      	bx	lr

0000111c <Sys_GetCoreID>:
    return 0U;
    111c:	2300      	movs	r3, #0
}
    111e:	4618      	mov	r0, r3
    1120:	4770      	bx	lr

00001122 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1122:	e7fe      	b.n	1122 <HardFault_Handler>

00001124 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1124:	e7fe      	b.n	1124 <MemManage_Handler>

00001126 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1126:	e7fe      	b.n	1126 <BusFault_Handler>

00001128 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1128:	e7fe      	b.n	1128 <UsageFault_Handler>

0000112a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    112a:	e7fe      	b.n	112a <SVC_Handler>

0000112c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    112c:	e7fe      	b.n	112c <DebugMon_Handler>

0000112e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    112e:	e7fe      	b.n	112e <PendSV_Handler>

00001130 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1130:	e7fe      	b.n	1130 <SysTick_Handler>

00001132 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1132:	e7fe      	b.n	1132 <undefined_handler>

00001134 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1134:	b500      	push	{lr}
    1136:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1138:	4b26      	ldr	r3, [pc, #152]	; (11d4 <_DoInit+0xa0>)
    113a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    113c:	22a8      	movs	r2, #168	; 0xa8
    113e:	2100      	movs	r1, #0
    1140:	9800      	ldr	r0, [sp, #0]
    1142:	f000 fd13 	bl	1b6c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1146:	9b00      	ldr	r3, [sp, #0]
    1148:	2203      	movs	r2, #3
    114a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    114c:	9b00      	ldr	r3, [sp, #0]
    114e:	2203      	movs	r2, #3
    1150:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1152:	9b00      	ldr	r3, [sp, #0]
    1154:	4a20      	ldr	r2, [pc, #128]	; (11d8 <_DoInit+0xa4>)
    1156:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1158:	9b00      	ldr	r3, [sp, #0]
    115a:	4a20      	ldr	r2, [pc, #128]	; (11dc <_DoInit+0xa8>)
    115c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    115e:	9b00      	ldr	r3, [sp, #0]
    1160:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1164:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    1166:	9b00      	ldr	r3, [sp, #0]
    1168:	2200      	movs	r2, #0
    116a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    116c:	9b00      	ldr	r3, [sp, #0]
    116e:	2200      	movs	r2, #0
    1170:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1172:	9b00      	ldr	r3, [sp, #0]
    1174:	2200      	movs	r2, #0
    1176:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1178:	9b00      	ldr	r3, [sp, #0]
    117a:	4a17      	ldr	r2, [pc, #92]	; (11d8 <_DoInit+0xa4>)
    117c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    117e:	9b00      	ldr	r3, [sp, #0]
    1180:	4a17      	ldr	r2, [pc, #92]	; (11e0 <_DoInit+0xac>)
    1182:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1184:	9b00      	ldr	r3, [sp, #0]
    1186:	2210      	movs	r2, #16
    1188:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    118a:	9b00      	ldr	r3, [sp, #0]
    118c:	2200      	movs	r2, #0
    118e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1190:	9b00      	ldr	r3, [sp, #0]
    1192:	2200      	movs	r2, #0
    1194:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1196:	9b00      	ldr	r3, [sp, #0]
    1198:	2200      	movs	r2, #0
    119a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    119c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    11a0:	2300      	movs	r3, #0
    11a2:	9301      	str	r3, [sp, #4]
    11a4:	e00c      	b.n	11c0 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    11a6:	9b01      	ldr	r3, [sp, #4]
    11a8:	f1c3 030f 	rsb	r3, r3, #15
    11ac:	4a0d      	ldr	r2, [pc, #52]	; (11e4 <_DoInit+0xb0>)
    11ae:	5cd1      	ldrb	r1, [r2, r3]
    11b0:	9a00      	ldr	r2, [sp, #0]
    11b2:	9b01      	ldr	r3, [sp, #4]
    11b4:	4413      	add	r3, r2
    11b6:	460a      	mov	r2, r1
    11b8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    11ba:	9b01      	ldr	r3, [sp, #4]
    11bc:	3301      	adds	r3, #1
    11be:	9301      	str	r3, [sp, #4]
    11c0:	9b01      	ldr	r3, [sp, #4]
    11c2:	2b0f      	cmp	r3, #15
    11c4:	d9ef      	bls.n	11a6 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    11c6:	f3bf 8f5f 	dmb	sy
}
    11ca:	bf00      	nop
    11cc:	b003      	add	sp, #12
    11ce:	f85d fb04 	ldr.w	pc, [sp], #4
    11d2:	bf00      	nop
    11d4:	1fff8e2c 	.word	0x1fff8e2c
    11d8:	00008374 	.word	0x00008374
    11dc:	1fff8ed4 	.word	0x1fff8ed4
    11e0:	1fff92d4 	.word	0x1fff92d4
    11e4:	000091f4 	.word	0x000091f4

000011e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    11e8:	b500      	push	{lr}
    11ea:	b08b      	sub	sp, #44	; 0x2c
    11ec:	9003      	str	r0, [sp, #12]
    11ee:	9102      	str	r1, [sp, #8]
    11f0:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    11f2:	2300      	movs	r3, #0
    11f4:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    11f6:	9b03      	ldr	r3, [sp, #12]
    11f8:	68db      	ldr	r3, [r3, #12]
    11fa:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    11fc:	9b03      	ldr	r3, [sp, #12]
    11fe:	691b      	ldr	r3, [r3, #16]
    1200:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    1202:	9a06      	ldr	r2, [sp, #24]
    1204:	9b07      	ldr	r3, [sp, #28]
    1206:	429a      	cmp	r2, r3
    1208:	d905      	bls.n	1216 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    120a:	9a06      	ldr	r2, [sp, #24]
    120c:	9b07      	ldr	r3, [sp, #28]
    120e:	1ad3      	subs	r3, r2, r3
    1210:	3b01      	subs	r3, #1
    1212:	9309      	str	r3, [sp, #36]	; 0x24
    1214:	e007      	b.n	1226 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1216:	9b03      	ldr	r3, [sp, #12]
    1218:	689a      	ldr	r2, [r3, #8]
    121a:	9906      	ldr	r1, [sp, #24]
    121c:	9b07      	ldr	r3, [sp, #28]
    121e:	1acb      	subs	r3, r1, r3
    1220:	4413      	add	r3, r2
    1222:	3b01      	subs	r3, #1
    1224:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1226:	9b03      	ldr	r3, [sp, #12]
    1228:	689a      	ldr	r2, [r3, #8]
    122a:	9b07      	ldr	r3, [sp, #28]
    122c:	1ad3      	subs	r3, r2, r3
    122e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1230:	4293      	cmp	r3, r2
    1232:	bf28      	it	cs
    1234:	4613      	movcs	r3, r2
    1236:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1238:	9a09      	ldr	r2, [sp, #36]	; 0x24
    123a:	9b01      	ldr	r3, [sp, #4]
    123c:	4293      	cmp	r3, r2
    123e:	bf28      	it	cs
    1240:	4613      	movcs	r3, r2
    1242:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1244:	9b03      	ldr	r3, [sp, #12]
    1246:	685a      	ldr	r2, [r3, #4]
    1248:	9b07      	ldr	r3, [sp, #28]
    124a:	4413      	add	r3, r2
    124c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    124e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1250:	9902      	ldr	r1, [sp, #8]
    1252:	9805      	ldr	r0, [sp, #20]
    1254:	f000 fc7c 	bl	1b50 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    1258:	9a08      	ldr	r2, [sp, #32]
    125a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    125c:	4413      	add	r3, r2
    125e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1260:	9a02      	ldr	r2, [sp, #8]
    1262:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1264:	4413      	add	r3, r2
    1266:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    1268:	9a01      	ldr	r2, [sp, #4]
    126a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    126c:	1ad3      	subs	r3, r2, r3
    126e:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1270:	9a07      	ldr	r2, [sp, #28]
    1272:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1274:	4413      	add	r3, r2
    1276:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    1278:	9b03      	ldr	r3, [sp, #12]
    127a:	689b      	ldr	r3, [r3, #8]
    127c:	9a07      	ldr	r2, [sp, #28]
    127e:	429a      	cmp	r2, r3
    1280:	d101      	bne.n	1286 <_WriteBlocking+0x9e>
      WrOff = 0u;
    1282:	2300      	movs	r3, #0
    1284:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1286:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    128a:	9b03      	ldr	r3, [sp, #12]
    128c:	9a07      	ldr	r2, [sp, #28]
    128e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1290:	9b01      	ldr	r3, [sp, #4]
    1292:	2b00      	cmp	r3, #0
    1294:	d1b2      	bne.n	11fc <_WriteBlocking+0x14>
  return NumBytesWritten;
    1296:	9b08      	ldr	r3, [sp, #32]
}
    1298:	4618      	mov	r0, r3
    129a:	b00b      	add	sp, #44	; 0x2c
    129c:	f85d fb04 	ldr.w	pc, [sp], #4

000012a0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    12a0:	b500      	push	{lr}
    12a2:	b089      	sub	sp, #36	; 0x24
    12a4:	9003      	str	r0, [sp, #12]
    12a6:	9102      	str	r1, [sp, #8]
    12a8:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    12aa:	9b03      	ldr	r3, [sp, #12]
    12ac:	68db      	ldr	r3, [r3, #12]
    12ae:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    12b0:	9b03      	ldr	r3, [sp, #12]
    12b2:	689a      	ldr	r2, [r3, #8]
    12b4:	9b07      	ldr	r3, [sp, #28]
    12b6:	1ad3      	subs	r3, r2, r3
    12b8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    12ba:	9a06      	ldr	r2, [sp, #24]
    12bc:	9b01      	ldr	r3, [sp, #4]
    12be:	429a      	cmp	r2, r3
    12c0:	d911      	bls.n	12e6 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    12c2:	9b03      	ldr	r3, [sp, #12]
    12c4:	685a      	ldr	r2, [r3, #4]
    12c6:	9b07      	ldr	r3, [sp, #28]
    12c8:	4413      	add	r3, r2
    12ca:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    12cc:	9a01      	ldr	r2, [sp, #4]
    12ce:	9902      	ldr	r1, [sp, #8]
    12d0:	9804      	ldr	r0, [sp, #16]
    12d2:	f000 fc3d 	bl	1b50 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    12d6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    12da:	9a07      	ldr	r2, [sp, #28]
    12dc:	9b01      	ldr	r3, [sp, #4]
    12de:	441a      	add	r2, r3
    12e0:	9b03      	ldr	r3, [sp, #12]
    12e2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    12e4:	e01f      	b.n	1326 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    12e6:	9b06      	ldr	r3, [sp, #24]
    12e8:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    12ea:	9b03      	ldr	r3, [sp, #12]
    12ec:	685a      	ldr	r2, [r3, #4]
    12ee:	9b07      	ldr	r3, [sp, #28]
    12f0:	4413      	add	r3, r2
    12f2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    12f4:	9a05      	ldr	r2, [sp, #20]
    12f6:	9902      	ldr	r1, [sp, #8]
    12f8:	9804      	ldr	r0, [sp, #16]
    12fa:	f000 fc29 	bl	1b50 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    12fe:	9a01      	ldr	r2, [sp, #4]
    1300:	9b06      	ldr	r3, [sp, #24]
    1302:	1ad3      	subs	r3, r2, r3
    1304:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1306:	9b03      	ldr	r3, [sp, #12]
    1308:	685b      	ldr	r3, [r3, #4]
    130a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    130c:	9a02      	ldr	r2, [sp, #8]
    130e:	9b06      	ldr	r3, [sp, #24]
    1310:	4413      	add	r3, r2
    1312:	9a05      	ldr	r2, [sp, #20]
    1314:	4619      	mov	r1, r3
    1316:	9804      	ldr	r0, [sp, #16]
    1318:	f000 fc1a 	bl	1b50 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    131c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1320:	9b03      	ldr	r3, [sp, #12]
    1322:	9a05      	ldr	r2, [sp, #20]
    1324:	60da      	str	r2, [r3, #12]
}
    1326:	bf00      	nop
    1328:	b009      	add	sp, #36	; 0x24
    132a:	f85d fb04 	ldr.w	pc, [sp], #4

0000132e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    132e:	b086      	sub	sp, #24
    1330:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1332:	9b01      	ldr	r3, [sp, #4]
    1334:	691b      	ldr	r3, [r3, #16]
    1336:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1338:	9b01      	ldr	r3, [sp, #4]
    133a:	68db      	ldr	r3, [r3, #12]
    133c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    133e:	9a04      	ldr	r2, [sp, #16]
    1340:	9b03      	ldr	r3, [sp, #12]
    1342:	429a      	cmp	r2, r3
    1344:	d808      	bhi.n	1358 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1346:	9b01      	ldr	r3, [sp, #4]
    1348:	689a      	ldr	r2, [r3, #8]
    134a:	9b03      	ldr	r3, [sp, #12]
    134c:	1ad2      	subs	r2, r2, r3
    134e:	9b04      	ldr	r3, [sp, #16]
    1350:	4413      	add	r3, r2
    1352:	3b01      	subs	r3, #1
    1354:	9305      	str	r3, [sp, #20]
    1356:	e004      	b.n	1362 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1358:	9a04      	ldr	r2, [sp, #16]
    135a:	9b03      	ldr	r3, [sp, #12]
    135c:	1ad3      	subs	r3, r2, r3
    135e:	3b01      	subs	r3, #1
    1360:	9305      	str	r3, [sp, #20]
  }
  return r;
    1362:	9b05      	ldr	r3, [sp, #20]
}
    1364:	4618      	mov	r0, r3
    1366:	b006      	add	sp, #24
    1368:	4770      	bx	lr
	...

0000136c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    136c:	b500      	push	{lr}
    136e:	b089      	sub	sp, #36	; 0x24
    1370:	9003      	str	r0, [sp, #12]
    1372:	9102      	str	r1, [sp, #8]
    1374:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1376:	9b02      	ldr	r3, [sp, #8]
    1378:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    137a:	9b03      	ldr	r3, [sp, #12]
    137c:	1c5a      	adds	r2, r3, #1
    137e:	4613      	mov	r3, r2
    1380:	005b      	lsls	r3, r3, #1
    1382:	4413      	add	r3, r2
    1384:	00db      	lsls	r3, r3, #3
    1386:	4a20      	ldr	r2, [pc, #128]	; (1408 <SEGGER_RTT_WriteNoLock+0x9c>)
    1388:	4413      	add	r3, r2
    138a:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    138c:	9b05      	ldr	r3, [sp, #20]
    138e:	695b      	ldr	r3, [r3, #20]
    1390:	2b02      	cmp	r3, #2
    1392:	d029      	beq.n	13e8 <SEGGER_RTT_WriteNoLock+0x7c>
    1394:	2b02      	cmp	r3, #2
    1396:	d82e      	bhi.n	13f6 <SEGGER_RTT_WriteNoLock+0x8a>
    1398:	2b00      	cmp	r3, #0
    139a:	d002      	beq.n	13a2 <SEGGER_RTT_WriteNoLock+0x36>
    139c:	2b01      	cmp	r3, #1
    139e:	d013      	beq.n	13c8 <SEGGER_RTT_WriteNoLock+0x5c>
    13a0:	e029      	b.n	13f6 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    13a2:	9805      	ldr	r0, [sp, #20]
    13a4:	f7ff ffc3 	bl	132e <_GetAvailWriteSpace>
    13a8:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    13aa:	9a04      	ldr	r2, [sp, #16]
    13ac:	9b01      	ldr	r3, [sp, #4]
    13ae:	429a      	cmp	r2, r3
    13b0:	d202      	bcs.n	13b8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    13b2:	2300      	movs	r3, #0
    13b4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    13b6:	e021      	b.n	13fc <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    13b8:	9b01      	ldr	r3, [sp, #4]
    13ba:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    13bc:	9a01      	ldr	r2, [sp, #4]
    13be:	9906      	ldr	r1, [sp, #24]
    13c0:	9805      	ldr	r0, [sp, #20]
    13c2:	f7ff ff6d 	bl	12a0 <_WriteNoCheck>
    break;
    13c6:	e019      	b.n	13fc <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    13c8:	9805      	ldr	r0, [sp, #20]
    13ca:	f7ff ffb0 	bl	132e <_GetAvailWriteSpace>
    13ce:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    13d0:	9a01      	ldr	r2, [sp, #4]
    13d2:	9b04      	ldr	r3, [sp, #16]
    13d4:	4293      	cmp	r3, r2
    13d6:	bf28      	it	cs
    13d8:	4613      	movcs	r3, r2
    13da:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    13dc:	9a07      	ldr	r2, [sp, #28]
    13de:	9906      	ldr	r1, [sp, #24]
    13e0:	9805      	ldr	r0, [sp, #20]
    13e2:	f7ff ff5d 	bl	12a0 <_WriteNoCheck>
    break;
    13e6:	e009      	b.n	13fc <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    13e8:	9a01      	ldr	r2, [sp, #4]
    13ea:	9906      	ldr	r1, [sp, #24]
    13ec:	9805      	ldr	r0, [sp, #20]
    13ee:	f7ff fefb 	bl	11e8 <_WriteBlocking>
    13f2:	9007      	str	r0, [sp, #28]
    break;
    13f4:	e002      	b.n	13fc <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    13f6:	2300      	movs	r3, #0
    13f8:	9307      	str	r3, [sp, #28]
    break;
    13fa:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    13fc:	9b07      	ldr	r3, [sp, #28]
}
    13fe:	4618      	mov	r0, r3
    1400:	b009      	add	sp, #36	; 0x24
    1402:	f85d fb04 	ldr.w	pc, [sp], #4
    1406:	bf00      	nop
    1408:	1fff8e2c 	.word	0x1fff8e2c

0000140c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    140c:	b500      	push	{lr}
    140e:	b089      	sub	sp, #36	; 0x24
    1410:	9003      	str	r0, [sp, #12]
    1412:	9102      	str	r1, [sp, #8]
    1414:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1416:	4b0f      	ldr	r3, [pc, #60]	; (1454 <SEGGER_RTT_Write+0x48>)
    1418:	9307      	str	r3, [sp, #28]
    141a:	9b07      	ldr	r3, [sp, #28]
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	b2db      	uxtb	r3, r3
    1420:	2b53      	cmp	r3, #83	; 0x53
    1422:	d001      	beq.n	1428 <SEGGER_RTT_Write+0x1c>
    1424:	f7ff fe86 	bl	1134 <_DoInit>
  SEGGER_RTT_LOCK();
    1428:	f3ef 8311 	mrs	r3, BASEPRI
    142c:	f04f 0120 	mov.w	r1, #32
    1430:	f381 8811 	msr	BASEPRI, r1
    1434:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1436:	9a01      	ldr	r2, [sp, #4]
    1438:	9902      	ldr	r1, [sp, #8]
    143a:	9803      	ldr	r0, [sp, #12]
    143c:	f7ff ff96 	bl	136c <SEGGER_RTT_WriteNoLock>
    1440:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1442:	9b06      	ldr	r3, [sp, #24]
    1444:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1448:	9b05      	ldr	r3, [sp, #20]
}
    144a:	4618      	mov	r0, r3
    144c:	b009      	add	sp, #36	; 0x24
    144e:	f85d fb04 	ldr.w	pc, [sp], #4
    1452:	bf00      	nop
    1454:	1fff8e2c 	.word	0x1fff8e2c

00001458 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1458:	b508      	push	{r3, lr}
  _DoInit();
    145a:	f7ff fe6b 	bl	1134 <_DoInit>
}
    145e:	bf00      	nop
    1460:	bd08      	pop	{r3, pc}

00001462 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1462:	b500      	push	{lr}
    1464:	b085      	sub	sp, #20
    1466:	9001      	str	r0, [sp, #4]
    1468:	460b      	mov	r3, r1
    146a:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    146e:	9b01      	ldr	r3, [sp, #4]
    1470:	689b      	ldr	r3, [r3, #8]
    1472:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1474:	9b03      	ldr	r3, [sp, #12]
    1476:	1c5a      	adds	r2, r3, #1
    1478:	9b01      	ldr	r3, [sp, #4]
    147a:	685b      	ldr	r3, [r3, #4]
    147c:	429a      	cmp	r2, r3
    147e:	d80f      	bhi.n	14a0 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1480:	9b01      	ldr	r3, [sp, #4]
    1482:	681a      	ldr	r2, [r3, #0]
    1484:	9b03      	ldr	r3, [sp, #12]
    1486:	4413      	add	r3, r2
    1488:	f89d 2003 	ldrb.w	r2, [sp, #3]
    148c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    148e:	9b03      	ldr	r3, [sp, #12]
    1490:	1c5a      	adds	r2, r3, #1
    1492:	9b01      	ldr	r3, [sp, #4]
    1494:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1496:	9b01      	ldr	r3, [sp, #4]
    1498:	68db      	ldr	r3, [r3, #12]
    149a:	1c5a      	adds	r2, r3, #1
    149c:	9b01      	ldr	r3, [sp, #4]
    149e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    14a0:	9b01      	ldr	r3, [sp, #4]
    14a2:	689a      	ldr	r2, [r3, #8]
    14a4:	9b01      	ldr	r3, [sp, #4]
    14a6:	685b      	ldr	r3, [r3, #4]
    14a8:	429a      	cmp	r2, r3
    14aa:	d115      	bne.n	14d8 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    14ac:	9b01      	ldr	r3, [sp, #4]
    14ae:	6918      	ldr	r0, [r3, #16]
    14b0:	9b01      	ldr	r3, [sp, #4]
    14b2:	6819      	ldr	r1, [r3, #0]
    14b4:	9b01      	ldr	r3, [sp, #4]
    14b6:	689b      	ldr	r3, [r3, #8]
    14b8:	461a      	mov	r2, r3
    14ba:	f7ff ffa7 	bl	140c <SEGGER_RTT_Write>
    14be:	4602      	mov	r2, r0
    14c0:	9b01      	ldr	r3, [sp, #4]
    14c2:	689b      	ldr	r3, [r3, #8]
    14c4:	429a      	cmp	r2, r3
    14c6:	d004      	beq.n	14d2 <_StoreChar+0x70>
      p->ReturnValue = -1;
    14c8:	9b01      	ldr	r3, [sp, #4]
    14ca:	f04f 32ff 	mov.w	r2, #4294967295
    14ce:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    14d0:	e002      	b.n	14d8 <_StoreChar+0x76>
      p->Cnt = 0u;
    14d2:	9b01      	ldr	r3, [sp, #4]
    14d4:	2200      	movs	r2, #0
    14d6:	609a      	str	r2, [r3, #8]
}
    14d8:	bf00      	nop
    14da:	b005      	add	sp, #20
    14dc:	f85d fb04 	ldr.w	pc, [sp], #4

000014e0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    14e0:	b500      	push	{lr}
    14e2:	b08b      	sub	sp, #44	; 0x2c
    14e4:	9003      	str	r0, [sp, #12]
    14e6:	9102      	str	r1, [sp, #8]
    14e8:	9201      	str	r2, [sp, #4]
    14ea:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    14ec:	9b02      	ldr	r3, [sp, #8]
    14ee:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    14f0:	2301      	movs	r3, #1
    14f2:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    14f4:	2301      	movs	r3, #1
    14f6:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    14f8:	e007      	b.n	150a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    14fa:	9a08      	ldr	r2, [sp, #32]
    14fc:	9b01      	ldr	r3, [sp, #4]
    14fe:	fbb2 f3f3 	udiv	r3, r2, r3
    1502:	9308      	str	r3, [sp, #32]
    Width++;
    1504:	9b07      	ldr	r3, [sp, #28]
    1506:	3301      	adds	r3, #1
    1508:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    150a:	9a08      	ldr	r2, [sp, #32]
    150c:	9b01      	ldr	r3, [sp, #4]
    150e:	429a      	cmp	r2, r3
    1510:	d2f3      	bcs.n	14fa <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1512:	9a00      	ldr	r2, [sp, #0]
    1514:	9b07      	ldr	r3, [sp, #28]
    1516:	429a      	cmp	r2, r3
    1518:	d901      	bls.n	151e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    151a:	9b00      	ldr	r3, [sp, #0]
    151c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    151e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1520:	f003 0301 	and.w	r3, r3, #1
    1524:	2b00      	cmp	r3, #0
    1526:	d128      	bne.n	157a <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    152a:	2b00      	cmp	r3, #0
    152c:	d025      	beq.n	157a <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    152e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1530:	f003 0302 	and.w	r3, r3, #2
    1534:	2b00      	cmp	r3, #0
    1536:	d006      	beq.n	1546 <_PrintUnsigned+0x66>
    1538:	9b00      	ldr	r3, [sp, #0]
    153a:	2b00      	cmp	r3, #0
    153c:	d103      	bne.n	1546 <_PrintUnsigned+0x66>
        c = '0';
    153e:	2330      	movs	r3, #48	; 0x30
    1540:	f88d 301b 	strb.w	r3, [sp, #27]
    1544:	e002      	b.n	154c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1546:	2320      	movs	r3, #32
    1548:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    154c:	e00c      	b.n	1568 <_PrintUnsigned+0x88>
        FieldWidth--;
    154e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1550:	3b01      	subs	r3, #1
    1552:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1554:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1558:	4619      	mov	r1, r3
    155a:	9803      	ldr	r0, [sp, #12]
    155c:	f7ff ff81 	bl	1462 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1560:	9b03      	ldr	r3, [sp, #12]
    1562:	68db      	ldr	r3, [r3, #12]
    1564:	2b00      	cmp	r3, #0
    1566:	db07      	blt.n	1578 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    156a:	2b00      	cmp	r3, #0
    156c:	d005      	beq.n	157a <_PrintUnsigned+0x9a>
    156e:	9a07      	ldr	r2, [sp, #28]
    1570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1572:	429a      	cmp	r2, r3
    1574:	d3eb      	bcc.n	154e <_PrintUnsigned+0x6e>
    1576:	e000      	b.n	157a <_PrintUnsigned+0x9a>
          break;
    1578:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    157a:	9b03      	ldr	r3, [sp, #12]
    157c:	68db      	ldr	r3, [r3, #12]
    157e:	2b00      	cmp	r3, #0
    1580:	db55      	blt.n	162e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1582:	9b00      	ldr	r3, [sp, #0]
    1584:	2b01      	cmp	r3, #1
    1586:	d903      	bls.n	1590 <_PrintUnsigned+0xb0>
        NumDigits--;
    1588:	9b00      	ldr	r3, [sp, #0]
    158a:	3b01      	subs	r3, #1
    158c:	9300      	str	r3, [sp, #0]
    158e:	e009      	b.n	15a4 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1590:	9a02      	ldr	r2, [sp, #8]
    1592:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1594:	fbb2 f3f3 	udiv	r3, r2, r3
    1598:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    159a:	9a05      	ldr	r2, [sp, #20]
    159c:	9b01      	ldr	r3, [sp, #4]
    159e:	429a      	cmp	r2, r3
    15a0:	d200      	bcs.n	15a4 <_PrintUnsigned+0xc4>
          break;
    15a2:	e005      	b.n	15b0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    15a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15a6:	9a01      	ldr	r2, [sp, #4]
    15a8:	fb02 f303 	mul.w	r3, r2, r3
    15ac:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    15ae:	e7e8      	b.n	1582 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    15b0:	9a02      	ldr	r2, [sp, #8]
    15b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15b4:	fbb2 f3f3 	udiv	r3, r2, r3
    15b8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    15ba:	9b05      	ldr	r3, [sp, #20]
    15bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    15be:	fb02 f303 	mul.w	r3, r2, r3
    15c2:	9a02      	ldr	r2, [sp, #8]
    15c4:	1ad3      	subs	r3, r2, r3
    15c6:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    15c8:	4a1b      	ldr	r2, [pc, #108]	; (1638 <_PrintUnsigned+0x158>)
    15ca:	9b05      	ldr	r3, [sp, #20]
    15cc:	4413      	add	r3, r2
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	4619      	mov	r1, r3
    15d2:	9803      	ldr	r0, [sp, #12]
    15d4:	f7ff ff45 	bl	1462 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    15d8:	9b03      	ldr	r3, [sp, #12]
    15da:	68db      	ldr	r3, [r3, #12]
    15dc:	2b00      	cmp	r3, #0
    15de:	db08      	blt.n	15f2 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    15e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    15e2:	9b01      	ldr	r3, [sp, #4]
    15e4:	fbb2 f3f3 	udiv	r3, r2, r3
    15e8:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    15ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15ec:	2b00      	cmp	r3, #0
    15ee:	d1df      	bne.n	15b0 <_PrintUnsigned+0xd0>
    15f0:	e000      	b.n	15f4 <_PrintUnsigned+0x114>
        break;
    15f2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    15f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    15f6:	f003 0301 	and.w	r3, r3, #1
    15fa:	2b00      	cmp	r3, #0
    15fc:	d017      	beq.n	162e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    15fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1600:	2b00      	cmp	r3, #0
    1602:	d014      	beq.n	162e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1604:	e00a      	b.n	161c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1608:	3b01      	subs	r3, #1
    160a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    160c:	2120      	movs	r1, #32
    160e:	9803      	ldr	r0, [sp, #12]
    1610:	f7ff ff27 	bl	1462 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1614:	9b03      	ldr	r3, [sp, #12]
    1616:	68db      	ldr	r3, [r3, #12]
    1618:	2b00      	cmp	r3, #0
    161a:	db07      	blt.n	162c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    161c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    161e:	2b00      	cmp	r3, #0
    1620:	d005      	beq.n	162e <_PrintUnsigned+0x14e>
    1622:	9a07      	ldr	r2, [sp, #28]
    1624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1626:	429a      	cmp	r2, r3
    1628:	d3ed      	bcc.n	1606 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    162a:	e000      	b.n	162e <_PrintUnsigned+0x14e>
            break;
    162c:	bf00      	nop
}
    162e:	bf00      	nop
    1630:	b00b      	add	sp, #44	; 0x2c
    1632:	f85d fb04 	ldr.w	pc, [sp], #4
    1636:	bf00      	nop
    1638:	00009208 	.word	0x00009208

0000163c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    163c:	b500      	push	{lr}
    163e:	b089      	sub	sp, #36	; 0x24
    1640:	9005      	str	r0, [sp, #20]
    1642:	9104      	str	r1, [sp, #16]
    1644:	9203      	str	r2, [sp, #12]
    1646:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1648:	9b04      	ldr	r3, [sp, #16]
    164a:	2b00      	cmp	r3, #0
    164c:	bfb8      	it	lt
    164e:	425b      	neglt	r3, r3
    1650:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1652:	2301      	movs	r3, #1
    1654:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1656:	e007      	b.n	1668 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1658:	9b03      	ldr	r3, [sp, #12]
    165a:	9a06      	ldr	r2, [sp, #24]
    165c:	fb92 f3f3 	sdiv	r3, r2, r3
    1660:	9306      	str	r3, [sp, #24]
    Width++;
    1662:	9b07      	ldr	r3, [sp, #28]
    1664:	3301      	adds	r3, #1
    1666:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1668:	9b03      	ldr	r3, [sp, #12]
    166a:	9a06      	ldr	r2, [sp, #24]
    166c:	429a      	cmp	r2, r3
    166e:	daf3      	bge.n	1658 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1670:	9a02      	ldr	r2, [sp, #8]
    1672:	9b07      	ldr	r3, [sp, #28]
    1674:	429a      	cmp	r2, r3
    1676:	d901      	bls.n	167c <_PrintInt+0x40>
    Width = NumDigits;
    1678:	9b02      	ldr	r3, [sp, #8]
    167a:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    167c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    167e:	2b00      	cmp	r3, #0
    1680:	d00a      	beq.n	1698 <_PrintInt+0x5c>
    1682:	9b04      	ldr	r3, [sp, #16]
    1684:	2b00      	cmp	r3, #0
    1686:	db04      	blt.n	1692 <_PrintInt+0x56>
    1688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    168a:	f003 0304 	and.w	r3, r3, #4
    168e:	2b00      	cmp	r3, #0
    1690:	d002      	beq.n	1698 <_PrintInt+0x5c>
    FieldWidth--;
    1692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1694:	3b01      	subs	r3, #1
    1696:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    169a:	f003 0302 	and.w	r3, r3, #2
    169e:	2b00      	cmp	r3, #0
    16a0:	d002      	beq.n	16a8 <_PrintInt+0x6c>
    16a2:	9b02      	ldr	r3, [sp, #8]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d01c      	beq.n	16e2 <_PrintInt+0xa6>
    16a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    16aa:	f003 0301 	and.w	r3, r3, #1
    16ae:	2b00      	cmp	r3, #0
    16b0:	d117      	bne.n	16e2 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    16b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16b4:	2b00      	cmp	r3, #0
    16b6:	d014      	beq.n	16e2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    16b8:	e00a      	b.n	16d0 <_PrintInt+0x94>
        FieldWidth--;
    16ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16bc:	3b01      	subs	r3, #1
    16be:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    16c0:	2120      	movs	r1, #32
    16c2:	9805      	ldr	r0, [sp, #20]
    16c4:	f7ff fecd 	bl	1462 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    16c8:	9b05      	ldr	r3, [sp, #20]
    16ca:	68db      	ldr	r3, [r3, #12]
    16cc:	2b00      	cmp	r3, #0
    16ce:	db07      	blt.n	16e0 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    16d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16d2:	2b00      	cmp	r3, #0
    16d4:	d005      	beq.n	16e2 <_PrintInt+0xa6>
    16d6:	9a07      	ldr	r2, [sp, #28]
    16d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16da:	429a      	cmp	r2, r3
    16dc:	d3ed      	bcc.n	16ba <_PrintInt+0x7e>
    16de:	e000      	b.n	16e2 <_PrintInt+0xa6>
          break;
    16e0:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    16e2:	9b05      	ldr	r3, [sp, #20]
    16e4:	68db      	ldr	r3, [r3, #12]
    16e6:	2b00      	cmp	r3, #0
    16e8:	db4a      	blt.n	1780 <_PrintInt+0x144>
    if (v < 0) {
    16ea:	9b04      	ldr	r3, [sp, #16]
    16ec:	2b00      	cmp	r3, #0
    16ee:	da07      	bge.n	1700 <_PrintInt+0xc4>
      v = -v;
    16f0:	9b04      	ldr	r3, [sp, #16]
    16f2:	425b      	negs	r3, r3
    16f4:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    16f6:	212d      	movs	r1, #45	; 0x2d
    16f8:	9805      	ldr	r0, [sp, #20]
    16fa:	f7ff feb2 	bl	1462 <_StoreChar>
    16fe:	e008      	b.n	1712 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1702:	f003 0304 	and.w	r3, r3, #4
    1706:	2b00      	cmp	r3, #0
    1708:	d003      	beq.n	1712 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    170a:	212b      	movs	r1, #43	; 0x2b
    170c:	9805      	ldr	r0, [sp, #20]
    170e:	f7ff fea8 	bl	1462 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1712:	9b05      	ldr	r3, [sp, #20]
    1714:	68db      	ldr	r3, [r3, #12]
    1716:	2b00      	cmp	r3, #0
    1718:	db32      	blt.n	1780 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    171a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    171c:	f003 0302 	and.w	r3, r3, #2
    1720:	2b00      	cmp	r3, #0
    1722:	d01f      	beq.n	1764 <_PrintInt+0x128>
    1724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1726:	f003 0301 	and.w	r3, r3, #1
    172a:	2b00      	cmp	r3, #0
    172c:	d11a      	bne.n	1764 <_PrintInt+0x128>
    172e:	9b02      	ldr	r3, [sp, #8]
    1730:	2b00      	cmp	r3, #0
    1732:	d117      	bne.n	1764 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1736:	2b00      	cmp	r3, #0
    1738:	d014      	beq.n	1764 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    173a:	e00a      	b.n	1752 <_PrintInt+0x116>
            FieldWidth--;
    173c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    173e:	3b01      	subs	r3, #1
    1740:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1742:	2130      	movs	r1, #48	; 0x30
    1744:	9805      	ldr	r0, [sp, #20]
    1746:	f7ff fe8c 	bl	1462 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    174a:	9b05      	ldr	r3, [sp, #20]
    174c:	68db      	ldr	r3, [r3, #12]
    174e:	2b00      	cmp	r3, #0
    1750:	db07      	blt.n	1762 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1754:	2b00      	cmp	r3, #0
    1756:	d005      	beq.n	1764 <_PrintInt+0x128>
    1758:	9a07      	ldr	r2, [sp, #28]
    175a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    175c:	429a      	cmp	r2, r3
    175e:	d3ed      	bcc.n	173c <_PrintInt+0x100>
    1760:	e000      	b.n	1764 <_PrintInt+0x128>
              break;
    1762:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1764:	9b05      	ldr	r3, [sp, #20]
    1766:	68db      	ldr	r3, [r3, #12]
    1768:	2b00      	cmp	r3, #0
    176a:	db09      	blt.n	1780 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    176c:	9904      	ldr	r1, [sp, #16]
    176e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1770:	9301      	str	r3, [sp, #4]
    1772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1774:	9300      	str	r3, [sp, #0]
    1776:	9b02      	ldr	r3, [sp, #8]
    1778:	9a03      	ldr	r2, [sp, #12]
    177a:	9805      	ldr	r0, [sp, #20]
    177c:	f7ff feb0 	bl	14e0 <_PrintUnsigned>
      }
    }
  }
}
    1780:	bf00      	nop
    1782:	b009      	add	sp, #36	; 0x24
    1784:	f85d fb04 	ldr.w	pc, [sp], #4

00001788 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1788:	b500      	push	{lr}
    178a:	b0a3      	sub	sp, #140	; 0x8c
    178c:	9005      	str	r0, [sp, #20]
    178e:	9104      	str	r1, [sp, #16]
    1790:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1792:	ab06      	add	r3, sp, #24
    1794:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1796:	2340      	movs	r3, #64	; 0x40
    1798:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    179a:	2300      	movs	r3, #0
    179c:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    179e:	9b05      	ldr	r3, [sp, #20]
    17a0:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    17a2:	2300      	movs	r3, #0
    17a4:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    17a6:	9b04      	ldr	r3, [sp, #16]
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    17ae:	9b04      	ldr	r3, [sp, #16]
    17b0:	3301      	adds	r3, #1
    17b2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    17b4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    17b8:	2b00      	cmp	r3, #0
    17ba:	f000 819c 	beq.w	1af6 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    17be:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    17c2:	2b25      	cmp	r3, #37	; 0x25
    17c4:	f040 818b 	bne.w	1ade <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    17c8:	2300      	movs	r3, #0
    17ca:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    17cc:	2301      	movs	r3, #1
    17ce:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    17d0:	9b04      	ldr	r3, [sp, #16]
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    17d8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    17dc:	3b23      	subs	r3, #35	; 0x23
    17de:	2b0d      	cmp	r3, #13
    17e0:	d83e      	bhi.n	1860 <SEGGER_RTT_vprintf+0xd8>
    17e2:	a201      	add	r2, pc, #4	; (adr r2, 17e8 <SEGGER_RTT_vprintf+0x60>)
    17e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    17e8:	00001851 	.word	0x00001851
    17ec:	00001861 	.word	0x00001861
    17f0:	00001861 	.word	0x00001861
    17f4:	00001861 	.word	0x00001861
    17f8:	00001861 	.word	0x00001861
    17fc:	00001861 	.word	0x00001861
    1800:	00001861 	.word	0x00001861
    1804:	00001861 	.word	0x00001861
    1808:	00001841 	.word	0x00001841
    180c:	00001861 	.word	0x00001861
    1810:	00001821 	.word	0x00001821
    1814:	00001861 	.word	0x00001861
    1818:	00001861 	.word	0x00001861
    181c:	00001831 	.word	0x00001831
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1820:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1822:	f043 0301 	orr.w	r3, r3, #1
    1826:	931e      	str	r3, [sp, #120]	; 0x78
    1828:	9b04      	ldr	r3, [sp, #16]
    182a:	3301      	adds	r3, #1
    182c:	9304      	str	r3, [sp, #16]
    182e:	e01a      	b.n	1866 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1830:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1832:	f043 0302 	orr.w	r3, r3, #2
    1836:	931e      	str	r3, [sp, #120]	; 0x78
    1838:	9b04      	ldr	r3, [sp, #16]
    183a:	3301      	adds	r3, #1
    183c:	9304      	str	r3, [sp, #16]
    183e:	e012      	b.n	1866 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1840:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1842:	f043 0304 	orr.w	r3, r3, #4
    1846:	931e      	str	r3, [sp, #120]	; 0x78
    1848:	9b04      	ldr	r3, [sp, #16]
    184a:	3301      	adds	r3, #1
    184c:	9304      	str	r3, [sp, #16]
    184e:	e00a      	b.n	1866 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1850:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1852:	f043 0308 	orr.w	r3, r3, #8
    1856:	931e      	str	r3, [sp, #120]	; 0x78
    1858:	9b04      	ldr	r3, [sp, #16]
    185a:	3301      	adds	r3, #1
    185c:	9304      	str	r3, [sp, #16]
    185e:	e002      	b.n	1866 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1860:	2300      	movs	r3, #0
    1862:	9320      	str	r3, [sp, #128]	; 0x80
    1864:	bf00      	nop
        }
      } while (v);
    1866:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1868:	2b00      	cmp	r3, #0
    186a:	d1b1      	bne.n	17d0 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    186c:	2300      	movs	r3, #0
    186e:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1870:	9b04      	ldr	r3, [sp, #16]
    1872:	781b      	ldrb	r3, [r3, #0]
    1874:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1878:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    187c:	2b2f      	cmp	r3, #47	; 0x2f
    187e:	d912      	bls.n	18a6 <SEGGER_RTT_vprintf+0x11e>
    1880:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1884:	2b39      	cmp	r3, #57	; 0x39
    1886:	d80e      	bhi.n	18a6 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1888:	9b04      	ldr	r3, [sp, #16]
    188a:	3301      	adds	r3, #1
    188c:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    188e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1890:	4613      	mov	r3, r2
    1892:	009b      	lsls	r3, r3, #2
    1894:	4413      	add	r3, r2
    1896:	005b      	lsls	r3, r3, #1
    1898:	461a      	mov	r2, r3
    189a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    189e:	4413      	add	r3, r2
    18a0:	3b30      	subs	r3, #48	; 0x30
    18a2:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    18a4:	e7e4      	b.n	1870 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    18a6:	2300      	movs	r3, #0
    18a8:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    18aa:	9b04      	ldr	r3, [sp, #16]
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    18b2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18b6:	2b2e      	cmp	r3, #46	; 0x2e
    18b8:	d11d      	bne.n	18f6 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    18ba:	9b04      	ldr	r3, [sp, #16]
    18bc:	3301      	adds	r3, #1
    18be:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    18c0:	9b04      	ldr	r3, [sp, #16]
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    18c8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18cc:	2b2f      	cmp	r3, #47	; 0x2f
    18ce:	d912      	bls.n	18f6 <SEGGER_RTT_vprintf+0x16e>
    18d0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18d4:	2b39      	cmp	r3, #57	; 0x39
    18d6:	d80e      	bhi.n	18f6 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    18d8:	9b04      	ldr	r3, [sp, #16]
    18da:	3301      	adds	r3, #1
    18dc:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    18de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    18e0:	4613      	mov	r3, r2
    18e2:	009b      	lsls	r3, r3, #2
    18e4:	4413      	add	r3, r2
    18e6:	005b      	lsls	r3, r3, #1
    18e8:	461a      	mov	r2, r3
    18ea:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18ee:	4413      	add	r3, r2
    18f0:	3b30      	subs	r3, #48	; 0x30
    18f2:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    18f4:	e7e4      	b.n	18c0 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    18f6:	9b04      	ldr	r3, [sp, #16]
    18f8:	781b      	ldrb	r3, [r3, #0]
    18fa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    18fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1902:	2b6c      	cmp	r3, #108	; 0x6c
    1904:	d003      	beq.n	190e <SEGGER_RTT_vprintf+0x186>
    1906:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    190a:	2b68      	cmp	r3, #104	; 0x68
    190c:	d107      	bne.n	191e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    190e:	9b04      	ldr	r3, [sp, #16]
    1910:	3301      	adds	r3, #1
    1912:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1914:	9b04      	ldr	r3, [sp, #16]
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    191c:	e7ef      	b.n	18fe <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    191e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1922:	2b25      	cmp	r3, #37	; 0x25
    1924:	f000 80d0 	beq.w	1ac8 <SEGGER_RTT_vprintf+0x340>
    1928:	2b25      	cmp	r3, #37	; 0x25
    192a:	f2c0 80d3 	blt.w	1ad4 <SEGGER_RTT_vprintf+0x34c>
    192e:	2b78      	cmp	r3, #120	; 0x78
    1930:	f300 80d0 	bgt.w	1ad4 <SEGGER_RTT_vprintf+0x34c>
    1934:	2b58      	cmp	r3, #88	; 0x58
    1936:	f2c0 80cd 	blt.w	1ad4 <SEGGER_RTT_vprintf+0x34c>
    193a:	3b58      	subs	r3, #88	; 0x58
    193c:	2b20      	cmp	r3, #32
    193e:	f200 80c9 	bhi.w	1ad4 <SEGGER_RTT_vprintf+0x34c>
    1942:	a201      	add	r2, pc, #4	; (adr r2, 1948 <SEGGER_RTT_vprintf+0x1c0>)
    1944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1948:	00001a39 	.word	0x00001a39
    194c:	00001ad5 	.word	0x00001ad5
    1950:	00001ad5 	.word	0x00001ad5
    1954:	00001ad5 	.word	0x00001ad5
    1958:	00001ad5 	.word	0x00001ad5
    195c:	00001ad5 	.word	0x00001ad5
    1960:	00001ad5 	.word	0x00001ad5
    1964:	00001ad5 	.word	0x00001ad5
    1968:	00001ad5 	.word	0x00001ad5
    196c:	00001ad5 	.word	0x00001ad5
    1970:	00001ad5 	.word	0x00001ad5
    1974:	000019cd 	.word	0x000019cd
    1978:	000019f1 	.word	0x000019f1
    197c:	00001ad5 	.word	0x00001ad5
    1980:	00001ad5 	.word	0x00001ad5
    1984:	00001ad5 	.word	0x00001ad5
    1988:	00001ad5 	.word	0x00001ad5
    198c:	00001ad5 	.word	0x00001ad5
    1990:	00001ad5 	.word	0x00001ad5
    1994:	00001ad5 	.word	0x00001ad5
    1998:	00001ad5 	.word	0x00001ad5
    199c:	00001ad5 	.word	0x00001ad5
    19a0:	00001ad5 	.word	0x00001ad5
    19a4:	00001ad5 	.word	0x00001ad5
    19a8:	00001aa5 	.word	0x00001aa5
    19ac:	00001ad5 	.word	0x00001ad5
    19b0:	00001ad5 	.word	0x00001ad5
    19b4:	00001a5d 	.word	0x00001a5d
    19b8:	00001ad5 	.word	0x00001ad5
    19bc:	00001a15 	.word	0x00001a15
    19c0:	00001ad5 	.word	0x00001ad5
    19c4:	00001ad5 	.word	0x00001ad5
    19c8:	00001a39 	.word	0x00001a39
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    19cc:	9b03      	ldr	r3, [sp, #12]
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	1d19      	adds	r1, r3, #4
    19d2:	9a03      	ldr	r2, [sp, #12]
    19d4:	6011      	str	r1, [r2, #0]
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    19da:	9b20      	ldr	r3, [sp, #128]	; 0x80
    19dc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    19e0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    19e4:	ab16      	add	r3, sp, #88	; 0x58
    19e6:	4611      	mov	r1, r2
    19e8:	4618      	mov	r0, r3
    19ea:	f7ff fd3a 	bl	1462 <_StoreChar>
        break;
    19ee:	e072      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    19f0:	9b03      	ldr	r3, [sp, #12]
    19f2:	681b      	ldr	r3, [r3, #0]
    19f4:	1d19      	adds	r1, r3, #4
    19f6:	9a03      	ldr	r2, [sp, #12]
    19f8:	6011      	str	r1, [r2, #0]
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    19fe:	a816      	add	r0, sp, #88	; 0x58
    1a00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1a02:	9301      	str	r3, [sp, #4]
    1a04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1a06:	9300      	str	r3, [sp, #0]
    1a08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1a0a:	220a      	movs	r2, #10
    1a0c:	9920      	ldr	r1, [sp, #128]	; 0x80
    1a0e:	f7ff fe15 	bl	163c <_PrintInt>
        break;
    1a12:	e060      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1a14:	9b03      	ldr	r3, [sp, #12]
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	1d19      	adds	r1, r3, #4
    1a1a:	9a03      	ldr	r2, [sp, #12]
    1a1c:	6011      	str	r1, [r2, #0]
    1a1e:	681b      	ldr	r3, [r3, #0]
    1a20:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1a22:	9920      	ldr	r1, [sp, #128]	; 0x80
    1a24:	a816      	add	r0, sp, #88	; 0x58
    1a26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1a28:	9301      	str	r3, [sp, #4]
    1a2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1a2c:	9300      	str	r3, [sp, #0]
    1a2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1a30:	220a      	movs	r2, #10
    1a32:	f7ff fd55 	bl	14e0 <_PrintUnsigned>
        break;
    1a36:	e04e      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1a38:	9b03      	ldr	r3, [sp, #12]
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	1d19      	adds	r1, r3, #4
    1a3e:	9a03      	ldr	r2, [sp, #12]
    1a40:	6011      	str	r1, [r2, #0]
    1a42:	681b      	ldr	r3, [r3, #0]
    1a44:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1a46:	9920      	ldr	r1, [sp, #128]	; 0x80
    1a48:	a816      	add	r0, sp, #88	; 0x58
    1a4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1a4c:	9301      	str	r3, [sp, #4]
    1a4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1a50:	9300      	str	r3, [sp, #0]
    1a52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1a54:	2210      	movs	r2, #16
    1a56:	f7ff fd43 	bl	14e0 <_PrintUnsigned>
        break;
    1a5a:	e03c      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1a5c:	9b03      	ldr	r3, [sp, #12]
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	1d19      	adds	r1, r3, #4
    1a62:	9a03      	ldr	r2, [sp, #12]
    1a64:	6011      	str	r1, [r2, #0]
    1a66:	681b      	ldr	r3, [r3, #0]
    1a68:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1a6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d101      	bne.n	1a74 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1a70:	4b2c      	ldr	r3, [pc, #176]	; (1b24 <SEGGER_RTT_vprintf+0x39c>)
    1a72:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1a74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1a76:	781b      	ldrb	r3, [r3, #0]
    1a78:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1a7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1a7e:	3301      	adds	r3, #1
    1a80:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1a82:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a86:	2b00      	cmp	r3, #0
    1a88:	d00a      	beq.n	1aa0 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1a8a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1a8e:	ab16      	add	r3, sp, #88	; 0x58
    1a90:	4611      	mov	r1, r2
    1a92:	4618      	mov	r0, r3
    1a94:	f7ff fce5 	bl	1462 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1a98:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	daea      	bge.n	1a74 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1a9e:	e01a      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
              break;
    1aa0:	bf00      	nop
        break;
    1aa2:	e018      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1aa4:	9b03      	ldr	r3, [sp, #12]
    1aa6:	681b      	ldr	r3, [r3, #0]
    1aa8:	1d19      	adds	r1, r3, #4
    1aaa:	9a03      	ldr	r2, [sp, #12]
    1aac:	6011      	str	r1, [r2, #0]
    1aae:	681b      	ldr	r3, [r3, #0]
    1ab0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1ab2:	9920      	ldr	r1, [sp, #128]	; 0x80
    1ab4:	a816      	add	r0, sp, #88	; 0x58
    1ab6:	2300      	movs	r3, #0
    1ab8:	9301      	str	r3, [sp, #4]
    1aba:	2308      	movs	r3, #8
    1abc:	9300      	str	r3, [sp, #0]
    1abe:	2308      	movs	r3, #8
    1ac0:	2210      	movs	r2, #16
    1ac2:	f7ff fd0d 	bl	14e0 <_PrintUnsigned>
        break;
    1ac6:	e006      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1ac8:	ab16      	add	r3, sp, #88	; 0x58
    1aca:	2125      	movs	r1, #37	; 0x25
    1acc:	4618      	mov	r0, r3
    1ace:	f7ff fcc8 	bl	1462 <_StoreChar>
        break;
    1ad2:	e000      	b.n	1ad6 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1ad4:	bf00      	nop
      }
      sFormat++;
    1ad6:	9b04      	ldr	r3, [sp, #16]
    1ad8:	3301      	adds	r3, #1
    1ada:	9304      	str	r3, [sp, #16]
    1adc:	e006      	b.n	1aec <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1ade:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1ae2:	ab16      	add	r3, sp, #88	; 0x58
    1ae4:	4611      	mov	r1, r2
    1ae6:	4618      	mov	r0, r3
    1ae8:	f7ff fcbb 	bl	1462 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1aee:	2b00      	cmp	r3, #0
    1af0:	f6bf ae59 	bge.w	17a6 <SEGGER_RTT_vprintf+0x1e>
    1af4:	e000      	b.n	1af8 <SEGGER_RTT_vprintf+0x370>
      break;
    1af6:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1af8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1afa:	2b00      	cmp	r3, #0
    1afc:	dd0c      	ble.n	1b18 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1afe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1b00:	2b00      	cmp	r3, #0
    1b02:	d005      	beq.n	1b10 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1b04:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b06:	ab06      	add	r3, sp, #24
    1b08:	4619      	mov	r1, r3
    1b0a:	9805      	ldr	r0, [sp, #20]
    1b0c:	f7ff fc7e 	bl	140c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1b10:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1b12:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b14:	4413      	add	r3, r2
    1b16:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1b18:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1b1a:	4618      	mov	r0, r3
    1b1c:	b023      	add	sp, #140	; 0x8c
    1b1e:	f85d fb04 	ldr.w	pc, [sp], #4
    1b22:	bf00      	nop
    1b24:	00008380 	.word	0x00008380

00001b28 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1b28:	b40e      	push	{r1, r2, r3}
    1b2a:	b500      	push	{lr}
    1b2c:	b084      	sub	sp, #16
    1b2e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1b30:	ab06      	add	r3, sp, #24
    1b32:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1b34:	ab02      	add	r3, sp, #8
    1b36:	461a      	mov	r2, r3
    1b38:	9905      	ldr	r1, [sp, #20]
    1b3a:	9801      	ldr	r0, [sp, #4]
    1b3c:	f7ff fe24 	bl	1788 <SEGGER_RTT_vprintf>
    1b40:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1b42:	9b03      	ldr	r3, [sp, #12]
}
    1b44:	4618      	mov	r0, r3
    1b46:	b004      	add	sp, #16
    1b48:	f85d eb04 	ldr.w	lr, [sp], #4
    1b4c:	b003      	add	sp, #12
    1b4e:	4770      	bx	lr

00001b50 <memcpy>:
    1b50:	440a      	add	r2, r1
    1b52:	4291      	cmp	r1, r2
    1b54:	f100 33ff 	add.w	r3, r0, #4294967295
    1b58:	d100      	bne.n	1b5c <memcpy+0xc>
    1b5a:	4770      	bx	lr
    1b5c:	b510      	push	{r4, lr}
    1b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1b62:	f803 4f01 	strb.w	r4, [r3, #1]!
    1b66:	4291      	cmp	r1, r2
    1b68:	d1f9      	bne.n	1b5e <memcpy+0xe>
    1b6a:	bd10      	pop	{r4, pc}

00001b6c <memset>:
    1b6c:	4402      	add	r2, r0
    1b6e:	4603      	mov	r3, r0
    1b70:	4293      	cmp	r3, r2
    1b72:	d100      	bne.n	1b76 <memset+0xa>
    1b74:	4770      	bx	lr
    1b76:	f803 1b01 	strb.w	r1, [r3], #1
    1b7a:	e7f9      	b.n	1b70 <memset+0x4>

00001b7c <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b7c:	2300      	movs	r3, #0
}
    1b7e:	4618      	mov	r0, r3
    1b80:	4770      	bx	lr

00001b82 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b82:	b082      	sub	sp, #8
    1b84:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1b86:	2301      	movs	r3, #1
}
    1b88:	4618      	mov	r0, r3
    1b8a:	b002      	add	sp, #8
    1b8c:	4770      	bx	lr

00001b8e <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b8e:	b082      	sub	sp, #8
    1b90:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b92:	bf00      	nop
    1b94:	b002      	add	sp, #8
    1b96:	4770      	bx	lr

00001b98 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b98:	b082      	sub	sp, #8
    1b9a:	9001      	str	r0, [sp, #4]
    return Micros;
    1b9c:	9b01      	ldr	r3, [sp, #4]
}
    1b9e:	4618      	mov	r0, r3
    1ba0:	b002      	add	sp, #8
    1ba2:	4770      	bx	lr

00001ba4 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1ba4:	b500      	push	{lr}
    1ba6:	b083      	sub	sp, #12
    1ba8:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1baa:	f000 f86d 	bl	1c88 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1bae:	bf00      	nop
    1bb0:	b003      	add	sp, #12
    1bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00001bb6 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1bb6:	b500      	push	{lr}
    1bb8:	b085      	sub	sp, #20
    1bba:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1bbc:	2300      	movs	r3, #0
    1bbe:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bc0:	9b01      	ldr	r3, [sp, #4]
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d003      	beq.n	1bce <OsIf_GetCounter+0x18>
    1bc6:	9b01      	ldr	r3, [sp, #4]
    1bc8:	2b01      	cmp	r3, #1
    1bca:	d004      	beq.n	1bd6 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bcc:	e007      	b.n	1bde <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1bce:	f7ff ffd5 	bl	1b7c <OsIf_Timer_Dummy_GetCounter>
    1bd2:	9003      	str	r0, [sp, #12]
            break;
    1bd4:	e003      	b.n	1bde <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1bd6:	f000 f873 	bl	1cc0 <OsIf_Timer_System_GetCounter>
    1bda:	9003      	str	r0, [sp, #12]
            break;
    1bdc:	bf00      	nop
    }

    return Value;
    1bde:	9b03      	ldr	r3, [sp, #12]
}
    1be0:	4618      	mov	r0, r3
    1be2:	b005      	add	sp, #20
    1be4:	f85d fb04 	ldr.w	pc, [sp], #4

00001be8 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1be8:	b500      	push	{lr}
    1bea:	b085      	sub	sp, #20
    1bec:	9001      	str	r0, [sp, #4]
    1bee:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1bf0:	2300      	movs	r3, #0
    1bf2:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bf4:	9b00      	ldr	r3, [sp, #0]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d003      	beq.n	1c02 <OsIf_GetElapsed+0x1a>
    1bfa:	9b00      	ldr	r3, [sp, #0]
    1bfc:	2b01      	cmp	r3, #1
    1bfe:	d005      	beq.n	1c0c <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c00:	e009      	b.n	1c16 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1c02:	9801      	ldr	r0, [sp, #4]
    1c04:	f7ff ffbd 	bl	1b82 <OsIf_Timer_Dummy_GetElapsed>
    1c08:	9003      	str	r0, [sp, #12]
            break;
    1c0a:	e004      	b.n	1c16 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1c0c:	9801      	ldr	r0, [sp, #4]
    1c0e:	f000 f865 	bl	1cdc <OsIf_Timer_System_GetElapsed>
    1c12:	9003      	str	r0, [sp, #12]
            break;
    1c14:	bf00      	nop
    }

    return Value;
    1c16:	9b03      	ldr	r3, [sp, #12]
}
    1c18:	4618      	mov	r0, r3
    1c1a:	b005      	add	sp, #20
    1c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c20 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1c20:	b500      	push	{lr}
    1c22:	b083      	sub	sp, #12
    1c24:	9001      	str	r0, [sp, #4]
    1c26:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1c28:	9b00      	ldr	r3, [sp, #0]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d003      	beq.n	1c36 <OsIf_SetTimerFrequency+0x16>
    1c2e:	9b00      	ldr	r3, [sp, #0]
    1c30:	2b01      	cmp	r3, #1
    1c32:	d004      	beq.n	1c3e <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c34:	e007      	b.n	1c46 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1c36:	9801      	ldr	r0, [sp, #4]
    1c38:	f7ff ffa9 	bl	1b8e <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1c3c:	e003      	b.n	1c46 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1c3e:	9801      	ldr	r0, [sp, #4]
    1c40:	f000 f85c 	bl	1cfc <OsIf_Timer_System_SetTimerFrequency>
            break;
    1c44:	bf00      	nop
    }
}
    1c46:	bf00      	nop
    1c48:	b003      	add	sp, #12
    1c4a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c4e <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c4e:	b500      	push	{lr}
    1c50:	b085      	sub	sp, #20
    1c52:	9001      	str	r0, [sp, #4]
    1c54:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c56:	2300      	movs	r3, #0
    1c58:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c5a:	9b00      	ldr	r3, [sp, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d003      	beq.n	1c68 <OsIf_MicrosToTicks+0x1a>
    1c60:	9b00      	ldr	r3, [sp, #0]
    1c62:	2b01      	cmp	r3, #1
    1c64:	d005      	beq.n	1c72 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c66:	e009      	b.n	1c7c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c68:	9801      	ldr	r0, [sp, #4]
    1c6a:	f7ff ff95 	bl	1b98 <OsIf_Timer_Dummy_MicrosToTicks>
    1c6e:	9003      	str	r0, [sp, #12]
            break;
    1c70:	e004      	b.n	1c7c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c72:	9801      	ldr	r0, [sp, #4]
    1c74:	f000 f850 	bl	1d18 <OsIf_Timer_System_MicrosToTicks>
    1c78:	9003      	str	r0, [sp, #12]
            break;
    1c7a:	bf00      	nop
    }

    return Value;
    1c7c:	9b03      	ldr	r3, [sp, #12]
}
    1c7e:	4618      	mov	r0, r3
    1c80:	b005      	add	sp, #20
    1c82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001c88 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1c88:	b500      	push	{lr}
    1c8a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c8c:	2300      	movs	r3, #0
    1c8e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c90:	4a09      	ldr	r2, [pc, #36]	; (1cb8 <OsIf_Timer_System_Init+0x30>)
    1c92:	9b01      	ldr	r3, [sp, #4]
    1c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c98:	685a      	ldr	r2, [r3, #4]
    1c9a:	4908      	ldr	r1, [pc, #32]	; (1cbc <OsIf_Timer_System_Init+0x34>)
    1c9c:	9b01      	ldr	r3, [sp, #4]
    1c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1ca2:	4a06      	ldr	r2, [pc, #24]	; (1cbc <OsIf_Timer_System_Init+0x34>)
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1caa:	4618      	mov	r0, r3
    1cac:	f000 f868 	bl	1d80 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1cb0:	bf00      	nop
    1cb2:	b003      	add	sp, #12
    1cb4:	f85d fb04 	ldr.w	pc, [sp], #4
    1cb8:	00008f78 	.word	0x00008f78
    1cbc:	1fff8b40 	.word	0x1fff8b40

00001cc0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1cc0:	b500      	push	{lr}
    1cc2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1cc4:	2300      	movs	r3, #0
    1cc6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1cc8:	2300      	movs	r3, #0
    1cca:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1ccc:	f000 f86c 	bl	1da8 <OsIf_Timer_System_Internal_GetCounter>
    1cd0:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1cd2:	9b01      	ldr	r3, [sp, #4]
}
    1cd4:	4618      	mov	r0, r3
    1cd6:	b003      	add	sp, #12
    1cd8:	f85d fb04 	ldr.w	pc, [sp], #4

00001cdc <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1cdc:	b500      	push	{lr}
    1cde:	b085      	sub	sp, #20
    1ce0:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1ce2:	2300      	movs	r3, #0
    1ce4:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1ce6:	2300      	movs	r3, #0
    1ce8:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1cea:	9801      	ldr	r0, [sp, #4]
    1cec:	f000 f864 	bl	1db8 <OsIf_Timer_System_Internal_GetElapsed>
    1cf0:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1cf2:	9b03      	ldr	r3, [sp, #12]
}
    1cf4:	4618      	mov	r0, r3
    1cf6:	b005      	add	sp, #20
    1cf8:	f85d fb04 	ldr.w	pc, [sp], #4

00001cfc <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1cfc:	b084      	sub	sp, #16
    1cfe:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1d00:	2300      	movs	r3, #0
    1d02:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1d04:	4903      	ldr	r1, [pc, #12]	; (1d14 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1d06:	9b03      	ldr	r3, [sp, #12]
    1d08:	9a01      	ldr	r2, [sp, #4]
    1d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1d0e:	bf00      	nop
    1d10:	b004      	add	sp, #16
    1d12:	4770      	bx	lr
    1d14:	1fff8b40 	.word	0x1fff8b40

00001d18 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d1a:	b087      	sub	sp, #28
    1d1c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1d1e:	2100      	movs	r1, #0
    1d20:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1d22:	2100      	movs	r1, #0
    1d24:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1d26:	9901      	ldr	r1, [sp, #4]
    1d28:	2000      	movs	r0, #0
    1d2a:	460e      	mov	r6, r1
    1d2c:	4607      	mov	r7, r0
    1d2e:	4812      	ldr	r0, [pc, #72]	; (1d78 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1d30:	9904      	ldr	r1, [sp, #16]
    1d32:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d36:	2000      	movs	r0, #0
    1d38:	460c      	mov	r4, r1
    1d3a:	4605      	mov	r5, r0
    1d3c:	fb04 f007 	mul.w	r0, r4, r7
    1d40:	fb06 f105 	mul.w	r1, r6, r5
    1d44:	4401      	add	r1, r0
    1d46:	fba6 2304 	umull	r2, r3, r6, r4
    1d4a:	4419      	add	r1, r3
    1d4c:	460b      	mov	r3, r1
    1d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d52:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d5a:	4a08      	ldr	r2, [pc, #32]	; (1d7c <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d5c:	f04f 0300 	mov.w	r3, #0
    1d60:	f7fe fc20 	bl	5a4 <__aeabi_uldivmod>
    1d64:	4602      	mov	r2, r0
    1d66:	460b      	mov	r3, r1
    1d68:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d6c:	9b02      	ldr	r3, [sp, #8]
    1d6e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d70:	9b05      	ldr	r3, [sp, #20]
}
    1d72:	4618      	mov	r0, r3
    1d74:	b007      	add	sp, #28
    1d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d78:	1fff8b40 	.word	0x1fff8b40
    1d7c:	000f4240 	.word	0x000f4240

00001d80 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d80:	b082      	sub	sp, #8
    1d82:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d84:	4b07      	ldr	r3, [pc, #28]	; (1da4 <OsIf_Timer_System_Internal_Init+0x24>)
    1d86:	2200      	movs	r2, #0
    1d88:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1d8a:	4b06      	ldr	r3, [pc, #24]	; (1da4 <OsIf_Timer_System_Internal_Init+0x24>)
    1d8c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d90:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d92:	4b04      	ldr	r3, [pc, #16]	; (1da4 <OsIf_Timer_System_Internal_Init+0x24>)
    1d94:	2200      	movs	r2, #0
    1d96:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d98:	4b02      	ldr	r3, [pc, #8]	; (1da4 <OsIf_Timer_System_Internal_Init+0x24>)
    1d9a:	2205      	movs	r2, #5
    1d9c:	601a      	str	r2, [r3, #0]
}
    1d9e:	bf00      	nop
    1da0:	b002      	add	sp, #8
    1da2:	4770      	bx	lr
    1da4:	e000e010 	.word	0xe000e010

00001da8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1da8:	4b02      	ldr	r3, [pc, #8]	; (1db4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1daa:	689b      	ldr	r3, [r3, #8]
    1dac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1db0:	4618      	mov	r0, r3
    1db2:	4770      	bx	lr
    1db4:	e000e010 	.word	0xe000e010

00001db8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1db8:	b084      	sub	sp, #16
    1dba:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1dbc:	4b10      	ldr	r3, [pc, #64]	; (1e00 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1dbe:	689b      	ldr	r3, [r3, #8]
    1dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1dc4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1dc6:	2300      	movs	r3, #0
    1dc8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1dca:	9b01      	ldr	r3, [sp, #4]
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	9a02      	ldr	r2, [sp, #8]
    1dd0:	429a      	cmp	r2, r3
    1dd2:	d909      	bls.n	1de8 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1dd4:	9b01      	ldr	r3, [sp, #4]
    1dd6:	681a      	ldr	r2, [r3, #0]
    1dd8:	9b02      	ldr	r3, [sp, #8]
    1dda:	1ad3      	subs	r3, r2, r3
    1ddc:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1de0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1de4:	9303      	str	r3, [sp, #12]
    1de6:	e004      	b.n	1df2 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1de8:	9b01      	ldr	r3, [sp, #4]
    1dea:	681a      	ldr	r2, [r3, #0]
    1dec:	9b02      	ldr	r3, [sp, #8]
    1dee:	1ad3      	subs	r3, r2, r3
    1df0:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1df2:	9b01      	ldr	r3, [sp, #4]
    1df4:	9a02      	ldr	r2, [sp, #8]
    1df6:	601a      	str	r2, [r3, #0]

    return dif;
    1df8:	9b03      	ldr	r3, [sp, #12]
}
    1dfa:	4618      	mov	r0, r3
    1dfc:	b004      	add	sp, #16
    1dfe:	4770      	bx	lr
    1e00:	e000e010 	.word	0xe000e010

00001e04 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1e04:	b082      	sub	sp, #8
    1e06:	9001      	str	r0, [sp, #4]
    1e08:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1e0a:	bf00      	nop
    1e0c:	b002      	add	sp, #8
    1e0e:	4770      	bx	lr

00001e10 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1e10:	b500      	push	{lr}
    1e12:	b085      	sub	sp, #20
    1e14:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1e16:	4b24      	ldr	r3, [pc, #144]	; (1ea8 <Clock_Ip_UpdateDriverContext+0x98>)
    1e18:	2201      	movs	r2, #1
    1e1a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1e1c:	4b23      	ldr	r3, [pc, #140]	; (1eac <Clock_Ip_UpdateDriverContext+0x9c>)
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	2102      	movs	r1, #2
    1e22:	4618      	mov	r0, r3
    1e24:	f003 fc32 	bl	568c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e28:	2300      	movs	r3, #0
    1e2a:	f88d 300f 	strb.w	r3, [sp, #15]
    1e2e:	e015      	b.n	1e5c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1e30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e34:	9a01      	ldr	r2, [sp, #4]
    1e36:	334a      	adds	r3, #74	; 0x4a
    1e38:	00db      	lsls	r3, r3, #3
    1e3a:	4413      	add	r3, r2
    1e3c:	6858      	ldr	r0, [r3, #4]
    1e3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e42:	9a01      	ldr	r2, [sp, #4]
    1e44:	334a      	adds	r3, #74	; 0x4a
    1e46:	00db      	lsls	r3, r3, #3
    1e48:	4413      	add	r3, r2
    1e4a:	689b      	ldr	r3, [r3, #8]
    1e4c:	4619      	mov	r1, r3
    1e4e:	f001 fadc 	bl	340a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e56:	3301      	adds	r3, #1
    1e58:	f88d 300f 	strb.w	r3, [sp, #15]
    1e5c:	9b01      	ldr	r3, [sp, #4]
    1e5e:	7bdb      	ldrb	r3, [r3, #15]
    1e60:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e64:	429a      	cmp	r2, r3
    1e66:	d3e3      	bcc.n	1e30 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e68:	f000 f824 	bl	1eb4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e6c:	2301      	movs	r3, #1
    1e6e:	f88d 300f 	strb.w	r3, [sp, #15]
    1e72:	e00e      	b.n	1e92 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e74:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e78:	9b01      	ldr	r3, [sp, #4]
    1e7a:	327e      	adds	r2, #126	; 0x7e
    1e7c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e80:	490b      	ldr	r1, [pc, #44]	; (1eb0 <Clock_Ip_UpdateDriverContext+0xa0>)
    1e82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e86:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e8c:	3301      	adds	r3, #1
    1e8e:	f88d 300f 	strb.w	r3, [sp, #15]
    1e92:	9b01      	ldr	r3, [sp, #4]
    1e94:	7cdb      	ldrb	r3, [r3, #19]
    1e96:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e9a:	429a      	cmp	r2, r3
    1e9c:	d3ea      	bcc.n	1e74 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e9e:	bf00      	nop
    1ea0:	bf00      	nop
    1ea2:	b005      	add	sp, #20
    1ea4:	f85d fb04 	ldr.w	pc, [sp], #4
    1ea8:	1fff8b10 	.word	0x1fff8b10
    1eac:	1fff8b44 	.word	0x1fff8b44
    1eb0:	1fff8b50 	.word	0x1fff8b50

00001eb4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1eb4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1eb6:	4b23      	ldr	r3, [pc, #140]	; (1f44 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	f083 0301 	eor.w	r3, r3, #1
    1ebe:	b2db      	uxtb	r3, r3
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d03d      	beq.n	1f40 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1ec4:	4b1f      	ldr	r3, [pc, #124]	; (1f44 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1ec6:	2201      	movs	r2, #1
    1ec8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1eca:	4b1f      	ldr	r3, [pc, #124]	; (1f48 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1ecc:	685b      	ldr	r3, [r3, #4]
    1ece:	2100      	movs	r1, #0
    1ed0:	2000      	movs	r0, #0
    1ed2:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1ed4:	4b1c      	ldr	r3, [pc, #112]	; (1f48 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1ed6:	689b      	ldr	r3, [r3, #8]
    1ed8:	2057      	movs	r0, #87	; 0x57
    1eda:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1edc:	4b1b      	ldr	r3, [pc, #108]	; (1f4c <Clock_Ip_CallEmptyCallbacks+0x98>)
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	2000      	movs	r0, #0
    1ee2:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1ee4:	4b1a      	ldr	r3, [pc, #104]	; (1f50 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1ee6:	681b      	ldr	r3, [r3, #0]
    1ee8:	2000      	movs	r0, #0
    1eea:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1eec:	4b19      	ldr	r3, [pc, #100]	; (1f54 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	2000      	movs	r0, #0
    1ef2:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ef4:	4b18      	ldr	r3, [pc, #96]	; (1f58 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1ef6:	685b      	ldr	r3, [r3, #4]
    1ef8:	2000      	movs	r0, #0
    1efa:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1efc:	4b16      	ldr	r3, [pc, #88]	; (1f58 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1efe:	689b      	ldr	r3, [r3, #8]
    1f00:	2057      	movs	r0, #87	; 0x57
    1f02:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f04:	4b15      	ldr	r3, [pc, #84]	; (1f5c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1f06:	681b      	ldr	r3, [r3, #0]
    1f08:	2000      	movs	r0, #0
    1f0a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1f0c:	4b13      	ldr	r3, [pc, #76]	; (1f5c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1f0e:	685b      	ldr	r3, [r3, #4]
    1f10:	2100      	movs	r1, #0
    1f12:	2057      	movs	r0, #87	; 0x57
    1f14:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f16:	4b12      	ldr	r3, [pc, #72]	; (1f60 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	2000      	movs	r0, #0
    1f1c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f1e:	4b11      	ldr	r3, [pc, #68]	; (1f64 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f20:	685b      	ldr	r3, [r3, #4]
    1f22:	2000      	movs	r0, #0
    1f24:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1f26:	4b0f      	ldr	r3, [pc, #60]	; (1f64 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f28:	689b      	ldr	r3, [r3, #8]
    1f2a:	2057      	movs	r0, #87	; 0x57
    1f2c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f2e:	4b0e      	ldr	r3, [pc, #56]	; (1f68 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1f30:	685b      	ldr	r3, [r3, #4]
    1f32:	2000      	movs	r0, #0
    1f34:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1f36:	4b0d      	ldr	r3, [pc, #52]	; (1f6c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1f38:	681b      	ldr	r3, [r3, #0]
    1f3a:	2100      	movs	r1, #0
    1f3c:	2000      	movs	r0, #0
    1f3e:	4798      	blx	r3
    }
}
    1f40:	bf00      	nop
    1f42:	bd08      	pop	{r3, pc}
    1f44:	1fff8b48 	.word	0x1fff8b48
    1f48:	00008a24 	.word	0x00008a24
    1f4c:	00008938 	.word	0x00008938
    1f50:	00008974 	.word	0x00008974
    1f54:	0000897c 	.word	0x0000897c
    1f58:	000089a4 	.word	0x000089a4
    1f5c:	000089b0 	.word	0x000089b0
    1f60:	000089e8 	.word	0x000089e8
    1f64:	00008a34 	.word	0x00008a34
    1f68:	00008a60 	.word	0x00008a60
    1f6c:	00008a5c 	.word	0x00008a5c

00001f70 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f70:	b500      	push	{lr}
    1f72:	b085      	sub	sp, #20
    1f74:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f76:	9b01      	ldr	r3, [sp, #4]
    1f78:	7adb      	ldrb	r3, [r3, #11]
    1f7a:	9303      	str	r3, [sp, #12]
    1f7c:	e01f      	b.n	1fbe <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f7e:	9b03      	ldr	r3, [sp, #12]
    1f80:	1e5a      	subs	r2, r3, #1
    1f82:	9b01      	ldr	r3, [sp, #4]
    1f84:	320d      	adds	r2, #13
    1f86:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f8a:	495a      	ldr	r1, [pc, #360]	; (20f4 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f8c:	4613      	mov	r3, r2
    1f8e:	00db      	lsls	r3, r3, #3
    1f90:	4413      	add	r3, r2
    1f92:	440b      	add	r3, r1
    1f94:	3301      	adds	r3, #1
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	461a      	mov	r2, r3
    1f9a:	4b57      	ldr	r3, [pc, #348]	; (20f8 <Clock_Ip_ResetClockConfiguration+0x188>)
    1f9c:	5c9b      	ldrb	r3, [r3, r2]
    1f9e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1fa0:	4a56      	ldr	r2, [pc, #344]	; (20fc <Clock_Ip_ResetClockConfiguration+0x18c>)
    1fa2:	9b02      	ldr	r3, [sp, #8]
    1fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1fa8:	9a03      	ldr	r2, [sp, #12]
    1faa:	3a01      	subs	r2, #1
    1fac:	320d      	adds	r2, #13
    1fae:	00d2      	lsls	r2, r2, #3
    1fb0:	9901      	ldr	r1, [sp, #4]
    1fb2:	440a      	add	r2, r1
    1fb4:	4610      	mov	r0, r2
    1fb6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1fb8:	9b03      	ldr	r3, [sp, #12]
    1fba:	3b01      	subs	r3, #1
    1fbc:	9303      	str	r3, [sp, #12]
    1fbe:	9b03      	ldr	r3, [sp, #12]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d1dc      	bne.n	1f7e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fc4:	9b01      	ldr	r3, [sp, #4]
    1fc6:	7b9b      	ldrb	r3, [r3, #14]
    1fc8:	9303      	str	r3, [sp, #12]
    1fca:	e026      	b.n	201a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fcc:	9b03      	ldr	r3, [sp, #12]
    1fce:	3b01      	subs	r3, #1
    1fd0:	9a01      	ldr	r2, [sp, #4]
    1fd2:	3324      	adds	r3, #36	; 0x24
    1fd4:	011b      	lsls	r3, r3, #4
    1fd6:	4413      	add	r3, r2
    1fd8:	3304      	adds	r3, #4
    1fda:	681a      	ldr	r2, [r3, #0]
    1fdc:	4945      	ldr	r1, [pc, #276]	; (20f4 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fde:	4613      	mov	r3, r2
    1fe0:	00db      	lsls	r3, r3, #3
    1fe2:	4413      	add	r3, r2
    1fe4:	440b      	add	r3, r1
    1fe6:	3301      	adds	r3, #1
    1fe8:	781b      	ldrb	r3, [r3, #0]
    1fea:	461a      	mov	r2, r3
    1fec:	4b44      	ldr	r3, [pc, #272]	; (2100 <Clock_Ip_ResetClockConfiguration+0x190>)
    1fee:	5c9b      	ldrb	r3, [r3, r2]
    1ff0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1ff2:	4944      	ldr	r1, [pc, #272]	; (2104 <Clock_Ip_ResetClockConfiguration+0x194>)
    1ff4:	9a02      	ldr	r2, [sp, #8]
    1ff6:	4613      	mov	r3, r2
    1ff8:	005b      	lsls	r3, r3, #1
    1ffa:	4413      	add	r3, r2
    1ffc:	009b      	lsls	r3, r3, #2
    1ffe:	440b      	add	r3, r1
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	9a03      	ldr	r2, [sp, #12]
    2004:	3a01      	subs	r2, #1
    2006:	3224      	adds	r2, #36	; 0x24
    2008:	0112      	lsls	r2, r2, #4
    200a:	9901      	ldr	r1, [sp, #4]
    200c:	440a      	add	r2, r1
    200e:	3204      	adds	r2, #4
    2010:	4610      	mov	r0, r2
    2012:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2014:	9b03      	ldr	r3, [sp, #12]
    2016:	3b01      	subs	r3, #1
    2018:	9303      	str	r3, [sp, #12]
    201a:	9b03      	ldr	r3, [sp, #12]
    201c:	2b00      	cmp	r3, #0
    201e:	d1d5      	bne.n	1fcc <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2020:	9b01      	ldr	r3, [sp, #4]
    2022:	7a9b      	ldrb	r3, [r3, #10]
    2024:	9303      	str	r3, [sp, #12]
    2026:	e02a      	b.n	207e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2028:	9b03      	ldr	r3, [sp, #12]
    202a:	1e5a      	subs	r2, r3, #1
    202c:	9901      	ldr	r1, [sp, #4]
    202e:	4613      	mov	r3, r2
    2030:	009b      	lsls	r3, r3, #2
    2032:	4413      	add	r3, r2
    2034:	00db      	lsls	r3, r3, #3
    2036:	440b      	add	r3, r1
    2038:	3340      	adds	r3, #64	; 0x40
    203a:	681a      	ldr	r2, [r3, #0]
    203c:	492d      	ldr	r1, [pc, #180]	; (20f4 <Clock_Ip_ResetClockConfiguration+0x184>)
    203e:	4613      	mov	r3, r2
    2040:	00db      	lsls	r3, r3, #3
    2042:	4413      	add	r3, r2
    2044:	440b      	add	r3, r1
    2046:	3301      	adds	r3, #1
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	461a      	mov	r2, r3
    204c:	4b2e      	ldr	r3, [pc, #184]	; (2108 <Clock_Ip_ResetClockConfiguration+0x198>)
    204e:	5c9b      	ldrb	r3, [r3, r2]
    2050:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2052:	492e      	ldr	r1, [pc, #184]	; (210c <Clock_Ip_ResetClockConfiguration+0x19c>)
    2054:	9a02      	ldr	r2, [sp, #8]
    2056:	4613      	mov	r3, r2
    2058:	009b      	lsls	r3, r3, #2
    205a:	4413      	add	r3, r2
    205c:	009b      	lsls	r3, r3, #2
    205e:	440b      	add	r3, r1
    2060:	6819      	ldr	r1, [r3, #0]
    2062:	9b03      	ldr	r3, [sp, #12]
    2064:	1e5a      	subs	r2, r3, #1
    2066:	4613      	mov	r3, r2
    2068:	009b      	lsls	r3, r3, #2
    206a:	4413      	add	r3, r2
    206c:	00db      	lsls	r3, r3, #3
    206e:	3340      	adds	r3, #64	; 0x40
    2070:	9a01      	ldr	r2, [sp, #4]
    2072:	4413      	add	r3, r2
    2074:	4618      	mov	r0, r3
    2076:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2078:	9b03      	ldr	r3, [sp, #12]
    207a:	3b01      	subs	r3, #1
    207c:	9303      	str	r3, [sp, #12]
    207e:	9b03      	ldr	r3, [sp, #12]
    2080:	2b00      	cmp	r3, #0
    2082:	d1d1      	bne.n	2028 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2084:	9b01      	ldr	r3, [sp, #4]
    2086:	7a5b      	ldrb	r3, [r3, #9]
    2088:	9303      	str	r3, [sp, #12]
    208a:	e02b      	b.n	20e4 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    208c:	9b03      	ldr	r3, [sp, #12]
    208e:	1e5a      	subs	r2, r3, #1
    2090:	9901      	ldr	r1, [sp, #4]
    2092:	4613      	mov	r3, r2
    2094:	009b      	lsls	r3, r3, #2
    2096:	4413      	add	r3, r2
    2098:	009b      	lsls	r3, r3, #2
    209a:	440b      	add	r3, r1
    209c:	332c      	adds	r3, #44	; 0x2c
    209e:	681a      	ldr	r2, [r3, #0]
    20a0:	4914      	ldr	r1, [pc, #80]	; (20f4 <Clock_Ip_ResetClockConfiguration+0x184>)
    20a2:	4613      	mov	r3, r2
    20a4:	00db      	lsls	r3, r3, #3
    20a6:	4413      	add	r3, r2
    20a8:	440b      	add	r3, r1
    20aa:	3301      	adds	r3, #1
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	461a      	mov	r2, r3
    20b0:	4b17      	ldr	r3, [pc, #92]	; (2110 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    20b2:	5c9b      	ldrb	r3, [r3, r2]
    20b4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    20b6:	4917      	ldr	r1, [pc, #92]	; (2114 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    20b8:	9a02      	ldr	r2, [sp, #8]
    20ba:	4613      	mov	r3, r2
    20bc:	009b      	lsls	r3, r3, #2
    20be:	4413      	add	r3, r2
    20c0:	009b      	lsls	r3, r3, #2
    20c2:	440b      	add	r3, r1
    20c4:	6819      	ldr	r1, [r3, #0]
    20c6:	9b03      	ldr	r3, [sp, #12]
    20c8:	1e5a      	subs	r2, r3, #1
    20ca:	4613      	mov	r3, r2
    20cc:	009b      	lsls	r3, r3, #2
    20ce:	4413      	add	r3, r2
    20d0:	009b      	lsls	r3, r3, #2
    20d2:	3328      	adds	r3, #40	; 0x28
    20d4:	9a01      	ldr	r2, [sp, #4]
    20d6:	4413      	add	r3, r2
    20d8:	3304      	adds	r3, #4
    20da:	4618      	mov	r0, r3
    20dc:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    20de:	9b03      	ldr	r3, [sp, #12]
    20e0:	3b01      	subs	r3, #1
    20e2:	9303      	str	r3, [sp, #12]
    20e4:	9b03      	ldr	r3, [sp, #12]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d1d0      	bne.n	208c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    20ea:	bf00      	nop
    20ec:	bf00      	nop
    20ee:	b005      	add	sp, #20
    20f0:	f85d fb04 	ldr.w	pc, [sp], #4
    20f4:	00008428 	.word	0x00008428
    20f8:	000083f8 	.word	0x000083f8
    20fc:	00008a60 	.word	0x00008a60
    2100:	000083d8 	.word	0x000083d8
    2104:	000089a4 	.word	0x000089a4
    2108:	000083e8 	.word	0x000083e8
    210c:	00008a34 	.word	0x00008a34
    2110:	000083a8 	.word	0x000083a8
    2114:	0000897c 	.word	0x0000897c

00002118 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2118:	b500      	push	{lr}
    211a:	b085      	sub	sp, #20
    211c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    211e:	2301      	movs	r3, #1
    2120:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2122:	9801      	ldr	r0, [sp, #4]
    2124:	f000 f818 	bl	2158 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2128:	4b0a      	ldr	r3, [pc, #40]	; (2154 <Clock_Ip_Init+0x3c>)
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	2b00      	cmp	r3, #0
    212e:	d00a      	beq.n	2146 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2130:	f000 fb74 	bl	281c <Clock_Ip_GetPllStatus>
    2134:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2136:	9b02      	ldr	r3, [sp, #8]
    2138:	2b00      	cmp	r3, #0
    213a:	d106      	bne.n	214a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    213c:	f000 fbf2 	bl	2924 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2140:	2300      	movs	r3, #0
    2142:	9303      	str	r3, [sp, #12]
    2144:	e001      	b.n	214a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2146:	2300      	movs	r3, #0
    2148:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    214a:	9b03      	ldr	r3, [sp, #12]
}
    214c:	4618      	mov	r0, r3
    214e:	b005      	add	sp, #20
    2150:	f85d fb04 	ldr.w	pc, [sp], #4
    2154:	1fff8b4c 	.word	0x1fff8b4c

00002158 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2158:	b510      	push	{r4, lr}
    215a:	b084      	sub	sp, #16
    215c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    215e:	4a9f      	ldr	r2, [pc, #636]	; (23dc <Clock_Ip_InitClock+0x284>)
    2160:	9b01      	ldr	r3, [sp, #4]
    2162:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2164:	2101      	movs	r1, #1
    2166:	9801      	ldr	r0, [sp, #4]
    2168:	f003 fa90 	bl	568c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    216c:	4b9b      	ldr	r3, [pc, #620]	; (23dc <Clock_Ip_InitClock+0x284>)
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	2b00      	cmp	r3, #0
    2172:	d030      	beq.n	21d6 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2174:	2300      	movs	r3, #0
    2176:	9303      	str	r3, [sp, #12]
    2178:	e027      	b.n	21ca <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    217a:	9901      	ldr	r1, [sp, #4]
    217c:	9a03      	ldr	r2, [sp, #12]
    217e:	4613      	mov	r3, r2
    2180:	009b      	lsls	r3, r3, #2
    2182:	4413      	add	r3, r2
    2184:	009b      	lsls	r3, r3, #2
    2186:	440b      	add	r3, r1
    2188:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    218c:	681a      	ldr	r2, [r3, #0]
    218e:	4994      	ldr	r1, [pc, #592]	; (23e0 <Clock_Ip_InitClock+0x288>)
    2190:	4613      	mov	r3, r2
    2192:	00db      	lsls	r3, r3, #3
    2194:	4413      	add	r3, r2
    2196:	440b      	add	r3, r1
    2198:	3301      	adds	r3, #1
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	461a      	mov	r2, r3
    219e:	4b91      	ldr	r3, [pc, #580]	; (23e4 <Clock_Ip_InitClock+0x28c>)
    21a0:	5c9b      	ldrb	r3, [r3, r2]
    21a2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    21a4:	4a90      	ldr	r2, [pc, #576]	; (23e8 <Clock_Ip_InitClock+0x290>)
    21a6:	9b02      	ldr	r3, [sp, #8]
    21a8:	011b      	lsls	r3, r3, #4
    21aa:	4413      	add	r3, r2
    21ac:	6819      	ldr	r1, [r3, #0]
    21ae:	9a03      	ldr	r2, [sp, #12]
    21b0:	4613      	mov	r3, r2
    21b2:	009b      	lsls	r3, r3, #2
    21b4:	4413      	add	r3, r2
    21b6:	009b      	lsls	r3, r3, #2
    21b8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    21bc:	9a01      	ldr	r2, [sp, #4]
    21be:	4413      	add	r3, r2
    21c0:	4618      	mov	r0, r3
    21c2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    21c4:	9b03      	ldr	r3, [sp, #12]
    21c6:	3301      	adds	r3, #1
    21c8:	9303      	str	r3, [sp, #12]
    21ca:	9b01      	ldr	r3, [sp, #4]
    21cc:	7c9b      	ldrb	r3, [r3, #18]
    21ce:	461a      	mov	r2, r3
    21d0:	9b03      	ldr	r3, [sp, #12]
    21d2:	4293      	cmp	r3, r2
    21d4:	d3d1      	bcc.n	217a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    21d6:	9801      	ldr	r0, [sp, #4]
    21d8:	f7ff feca 	bl	1f70 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21dc:	2300      	movs	r3, #0
    21de:	9303      	str	r3, [sp, #12]
    21e0:	e029      	b.n	2236 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21e2:	9901      	ldr	r1, [sp, #4]
    21e4:	9a03      	ldr	r2, [sp, #12]
    21e6:	4613      	mov	r3, r2
    21e8:	005b      	lsls	r3, r3, #1
    21ea:	4413      	add	r3, r2
    21ec:	009b      	lsls	r3, r3, #2
    21ee:	440b      	add	r3, r1
    21f0:	3314      	adds	r3, #20
    21f2:	681a      	ldr	r2, [r3, #0]
    21f4:	497a      	ldr	r1, [pc, #488]	; (23e0 <Clock_Ip_InitClock+0x288>)
    21f6:	4613      	mov	r3, r2
    21f8:	00db      	lsls	r3, r3, #3
    21fa:	4413      	add	r3, r2
    21fc:	440b      	add	r3, r1
    21fe:	3301      	adds	r3, #1
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	461a      	mov	r2, r3
    2204:	4b79      	ldr	r3, [pc, #484]	; (23ec <Clock_Ip_InitClock+0x294>)
    2206:	5c9b      	ldrb	r3, [r3, r2]
    2208:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    220a:	4979      	ldr	r1, [pc, #484]	; (23f0 <Clock_Ip_InitClock+0x298>)
    220c:	9a02      	ldr	r2, [sp, #8]
    220e:	4613      	mov	r3, r2
    2210:	005b      	lsls	r3, r3, #1
    2212:	4413      	add	r3, r2
    2214:	009b      	lsls	r3, r3, #2
    2216:	440b      	add	r3, r1
    2218:	6819      	ldr	r1, [r3, #0]
    221a:	9a03      	ldr	r2, [sp, #12]
    221c:	4613      	mov	r3, r2
    221e:	005b      	lsls	r3, r3, #1
    2220:	4413      	add	r3, r2
    2222:	009b      	lsls	r3, r3, #2
    2224:	3310      	adds	r3, #16
    2226:	9a01      	ldr	r2, [sp, #4]
    2228:	4413      	add	r3, r2
    222a:	3304      	adds	r3, #4
    222c:	4618      	mov	r0, r3
    222e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2230:	9b03      	ldr	r3, [sp, #12]
    2232:	3301      	adds	r3, #1
    2234:	9303      	str	r3, [sp, #12]
    2236:	9b01      	ldr	r3, [sp, #4]
    2238:	7a1b      	ldrb	r3, [r3, #8]
    223a:	461a      	mov	r2, r3
    223c:	9b03      	ldr	r3, [sp, #12]
    223e:	4293      	cmp	r3, r2
    2240:	d3cf      	bcc.n	21e2 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2242:	2300      	movs	r3, #0
    2244:	9303      	str	r3, [sp, #12]
    2246:	e02a      	b.n	229e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2248:	9901      	ldr	r1, [sp, #4]
    224a:	9a03      	ldr	r2, [sp, #12]
    224c:	4613      	mov	r3, r2
    224e:	009b      	lsls	r3, r3, #2
    2250:	4413      	add	r3, r2
    2252:	009b      	lsls	r3, r3, #2
    2254:	440b      	add	r3, r1
    2256:	332c      	adds	r3, #44	; 0x2c
    2258:	681a      	ldr	r2, [r3, #0]
    225a:	4961      	ldr	r1, [pc, #388]	; (23e0 <Clock_Ip_InitClock+0x288>)
    225c:	4613      	mov	r3, r2
    225e:	00db      	lsls	r3, r3, #3
    2260:	4413      	add	r3, r2
    2262:	440b      	add	r3, r1
    2264:	3301      	adds	r3, #1
    2266:	781b      	ldrb	r3, [r3, #0]
    2268:	461a      	mov	r2, r3
    226a:	4b62      	ldr	r3, [pc, #392]	; (23f4 <Clock_Ip_InitClock+0x29c>)
    226c:	5c9b      	ldrb	r3, [r3, r2]
    226e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2270:	4961      	ldr	r1, [pc, #388]	; (23f8 <Clock_Ip_InitClock+0x2a0>)
    2272:	9a02      	ldr	r2, [sp, #8]
    2274:	4613      	mov	r3, r2
    2276:	009b      	lsls	r3, r3, #2
    2278:	4413      	add	r3, r2
    227a:	009b      	lsls	r3, r3, #2
    227c:	440b      	add	r3, r1
    227e:	3304      	adds	r3, #4
    2280:	6819      	ldr	r1, [r3, #0]
    2282:	9a03      	ldr	r2, [sp, #12]
    2284:	4613      	mov	r3, r2
    2286:	009b      	lsls	r3, r3, #2
    2288:	4413      	add	r3, r2
    228a:	009b      	lsls	r3, r3, #2
    228c:	3328      	adds	r3, #40	; 0x28
    228e:	9a01      	ldr	r2, [sp, #4]
    2290:	4413      	add	r3, r2
    2292:	3304      	adds	r3, #4
    2294:	4618      	mov	r0, r3
    2296:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2298:	9b03      	ldr	r3, [sp, #12]
    229a:	3301      	adds	r3, #1
    229c:	9303      	str	r3, [sp, #12]
    229e:	9b01      	ldr	r3, [sp, #4]
    22a0:	7a5b      	ldrb	r3, [r3, #9]
    22a2:	461a      	mov	r2, r3
    22a4:	9b03      	ldr	r3, [sp, #12]
    22a6:	4293      	cmp	r3, r2
    22a8:	d3ce      	bcc.n	2248 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    22aa:	9801      	ldr	r0, [sp, #4]
    22ac:	f7ff fdb0 	bl	1e10 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22b0:	2300      	movs	r3, #0
    22b2:	9303      	str	r3, [sp, #12]
    22b4:	e028      	b.n	2308 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    22b6:	9901      	ldr	r1, [sp, #4]
    22b8:	9a03      	ldr	r2, [sp, #12]
    22ba:	4613      	mov	r3, r2
    22bc:	009b      	lsls	r3, r3, #2
    22be:	4413      	add	r3, r2
    22c0:	009b      	lsls	r3, r3, #2
    22c2:	440b      	add	r3, r1
    22c4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    22c8:	681a      	ldr	r2, [r3, #0]
    22ca:	4945      	ldr	r1, [pc, #276]	; (23e0 <Clock_Ip_InitClock+0x288>)
    22cc:	4613      	mov	r3, r2
    22ce:	00db      	lsls	r3, r3, #3
    22d0:	4413      	add	r3, r2
    22d2:	440b      	add	r3, r1
    22d4:	3301      	adds	r3, #1
    22d6:	781b      	ldrb	r3, [r3, #0]
    22d8:	461a      	mov	r2, r3
    22da:	4b48      	ldr	r3, [pc, #288]	; (23fc <Clock_Ip_InitClock+0x2a4>)
    22dc:	5c9b      	ldrb	r3, [r3, r2]
    22de:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    22e0:	4a47      	ldr	r2, [pc, #284]	; (2400 <Clock_Ip_InitClock+0x2a8>)
    22e2:	9b02      	ldr	r3, [sp, #8]
    22e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    22e8:	9a03      	ldr	r2, [sp, #12]
    22ea:	4613      	mov	r3, r2
    22ec:	009b      	lsls	r3, r3, #2
    22ee:	4413      	add	r3, r2
    22f0:	009b      	lsls	r3, r3, #2
    22f2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    22f6:	9a01      	ldr	r2, [sp, #4]
    22f8:	4413      	add	r3, r2
    22fa:	3304      	adds	r3, #4
    22fc:	9903      	ldr	r1, [sp, #12]
    22fe:	4618      	mov	r0, r3
    2300:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2302:	9b03      	ldr	r3, [sp, #12]
    2304:	3301      	adds	r3, #1
    2306:	9303      	str	r3, [sp, #12]
    2308:	9b01      	ldr	r3, [sp, #4]
    230a:	7c5b      	ldrb	r3, [r3, #17]
    230c:	461a      	mov	r2, r3
    230e:	9b03      	ldr	r3, [sp, #12]
    2310:	4293      	cmp	r3, r2
    2312:	d3d0      	bcc.n	22b6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2314:	2300      	movs	r3, #0
    2316:	9303      	str	r3, [sp, #12]
    2318:	e026      	b.n	2368 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    231a:	9901      	ldr	r1, [sp, #4]
    231c:	9a03      	ldr	r2, [sp, #12]
    231e:	4613      	mov	r3, r2
    2320:	005b      	lsls	r3, r3, #1
    2322:	4413      	add	r3, r2
    2324:	009b      	lsls	r3, r3, #2
    2326:	440b      	add	r3, r1
    2328:	f503 730e 	add.w	r3, r3, #568	; 0x238
    232c:	681a      	ldr	r2, [r3, #0]
    232e:	492c      	ldr	r1, [pc, #176]	; (23e0 <Clock_Ip_InitClock+0x288>)
    2330:	4613      	mov	r3, r2
    2332:	00db      	lsls	r3, r3, #3
    2334:	4413      	add	r3, r2
    2336:	440b      	add	r3, r1
    2338:	3301      	adds	r3, #1
    233a:	781b      	ldrb	r3, [r3, #0]
    233c:	461a      	mov	r2, r3
    233e:	4b31      	ldr	r3, [pc, #196]	; (2404 <Clock_Ip_InitClock+0x2ac>)
    2340:	5c9b      	ldrb	r3, [r3, r2]
    2342:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2344:	4a30      	ldr	r2, [pc, #192]	; (2408 <Clock_Ip_InitClock+0x2b0>)
    2346:	9b02      	ldr	r3, [sp, #8]
    2348:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    234c:	9a03      	ldr	r2, [sp, #12]
    234e:	4613      	mov	r3, r2
    2350:	005b      	lsls	r3, r3, #1
    2352:	4413      	add	r3, r2
    2354:	009b      	lsls	r3, r3, #2
    2356:	f503 730e 	add.w	r3, r3, #568	; 0x238
    235a:	9a01      	ldr	r2, [sp, #4]
    235c:	4413      	add	r3, r2
    235e:	4618      	mov	r0, r3
    2360:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2362:	9b03      	ldr	r3, [sp, #12]
    2364:	3301      	adds	r3, #1
    2366:	9303      	str	r3, [sp, #12]
    2368:	9b01      	ldr	r3, [sp, #4]
    236a:	7b5b      	ldrb	r3, [r3, #13]
    236c:	461a      	mov	r2, r3
    236e:	9b03      	ldr	r3, [sp, #12]
    2370:	4293      	cmp	r3, r2
    2372:	d3d2      	bcc.n	231a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2374:	2300      	movs	r3, #0
    2376:	9303      	str	r3, [sp, #12]
    2378:	e026      	b.n	23c8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    237a:	9901      	ldr	r1, [sp, #4]
    237c:	9a03      	ldr	r2, [sp, #12]
    237e:	4613      	mov	r3, r2
    2380:	005b      	lsls	r3, r3, #1
    2382:	4413      	add	r3, r2
    2384:	009b      	lsls	r3, r3, #2
    2386:	440b      	add	r3, r1
    2388:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    238c:	681a      	ldr	r2, [r3, #0]
    238e:	4914      	ldr	r1, [pc, #80]	; (23e0 <Clock_Ip_InitClock+0x288>)
    2390:	4613      	mov	r3, r2
    2392:	00db      	lsls	r3, r3, #3
    2394:	4413      	add	r3, r2
    2396:	440b      	add	r3, r1
    2398:	3301      	adds	r3, #1
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	461a      	mov	r2, r3
    239e:	4b1b      	ldr	r3, [pc, #108]	; (240c <Clock_Ip_InitClock+0x2b4>)
    23a0:	5c9b      	ldrb	r3, [r3, r2]
    23a2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    23a4:	4a1a      	ldr	r2, [pc, #104]	; (2410 <Clock_Ip_InitClock+0x2b8>)
    23a6:	9b02      	ldr	r3, [sp, #8]
    23a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    23ac:	9a03      	ldr	r2, [sp, #12]
    23ae:	4613      	mov	r3, r2
    23b0:	005b      	lsls	r3, r3, #1
    23b2:	4413      	add	r3, r2
    23b4:	009b      	lsls	r3, r3, #2
    23b6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    23ba:	9a01      	ldr	r2, [sp, #4]
    23bc:	4413      	add	r3, r2
    23be:	4618      	mov	r0, r3
    23c0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    23c2:	9b03      	ldr	r3, [sp, #12]
    23c4:	3301      	adds	r3, #1
    23c6:	9303      	str	r3, [sp, #12]
    23c8:	9b01      	ldr	r3, [sp, #4]
    23ca:	7b1b      	ldrb	r3, [r3, #12]
    23cc:	461a      	mov	r2, r3
    23ce:	9b03      	ldr	r3, [sp, #12]
    23d0:	4293      	cmp	r3, r2
    23d2:	d3d2      	bcc.n	237a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23d4:	2300      	movs	r3, #0
    23d6:	9303      	str	r3, [sp, #12]
    23d8:	e044      	b.n	2464 <Clock_Ip_InitClock+0x30c>
    23da:	bf00      	nop
    23dc:	1fff8b44 	.word	0x1fff8b44
    23e0:	00008428 	.word	0x00008428
    23e4:	00008418 	.word	0x00008418
    23e8:	00008a24 	.word	0x00008a24
    23ec:	000083b8 	.word	0x000083b8
    23f0:	000089e8 	.word	0x000089e8
    23f4:	000083a8 	.word	0x000083a8
    23f8:	0000897c 	.word	0x0000897c
    23fc:	00008408 	.word	0x00008408
    2400:	00008a5c 	.word	0x00008a5c
    2404:	00008398 	.word	0x00008398
    2408:	00008974 	.word	0x00008974
    240c:	00008388 	.word	0x00008388
    2410:	00008938 	.word	0x00008938
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2414:	9901      	ldr	r1, [sp, #4]
    2416:	9a03      	ldr	r2, [sp, #12]
    2418:	4613      	mov	r3, r2
    241a:	005b      	lsls	r3, r3, #1
    241c:	4413      	add	r3, r2
    241e:	009b      	lsls	r3, r3, #2
    2420:	440b      	add	r3, r1
    2422:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2426:	681a      	ldr	r2, [r3, #0]
    2428:	49ac      	ldr	r1, [pc, #688]	; (26dc <Clock_Ip_InitClock+0x584>)
    242a:	4613      	mov	r3, r2
    242c:	00db      	lsls	r3, r3, #3
    242e:	4413      	add	r3, r2
    2430:	440b      	add	r3, r1
    2432:	3301      	adds	r3, #1
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	461a      	mov	r2, r3
    2438:	4ba9      	ldr	r3, [pc, #676]	; (26e0 <Clock_Ip_InitClock+0x588>)
    243a:	5c9b      	ldrb	r3, [r3, r2]
    243c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    243e:	4aa9      	ldr	r2, [pc, #676]	; (26e4 <Clock_Ip_InitClock+0x58c>)
    2440:	9b02      	ldr	r3, [sp, #8]
    2442:	00db      	lsls	r3, r3, #3
    2444:	4413      	add	r3, r2
    2446:	6859      	ldr	r1, [r3, #4]
    2448:	9a03      	ldr	r2, [sp, #12]
    244a:	4613      	mov	r3, r2
    244c:	005b      	lsls	r3, r3, #1
    244e:	4413      	add	r3, r2
    2450:	009b      	lsls	r3, r3, #2
    2452:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2456:	9a01      	ldr	r2, [sp, #4]
    2458:	4413      	add	r3, r2
    245a:	4618      	mov	r0, r3
    245c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    245e:	9b03      	ldr	r3, [sp, #12]
    2460:	3301      	adds	r3, #1
    2462:	9303      	str	r3, [sp, #12]
    2464:	9b01      	ldr	r3, [sp, #4]
    2466:	7b5b      	ldrb	r3, [r3, #13]
    2468:	461a      	mov	r2, r3
    246a:	9b03      	ldr	r3, [sp, #12]
    246c:	4293      	cmp	r3, r2
    246e:	d3d1      	bcc.n	2414 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2470:	2300      	movs	r3, #0
    2472:	9303      	str	r3, [sp, #12]
    2474:	e029      	b.n	24ca <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2476:	9901      	ldr	r1, [sp, #4]
    2478:	9a03      	ldr	r2, [sp, #12]
    247a:	4613      	mov	r3, r2
    247c:	009b      	lsls	r3, r3, #2
    247e:	4413      	add	r3, r2
    2480:	00db      	lsls	r3, r3, #3
    2482:	440b      	add	r3, r1
    2484:	3340      	adds	r3, #64	; 0x40
    2486:	681a      	ldr	r2, [r3, #0]
    2488:	4994      	ldr	r1, [pc, #592]	; (26dc <Clock_Ip_InitClock+0x584>)
    248a:	4613      	mov	r3, r2
    248c:	00db      	lsls	r3, r3, #3
    248e:	4413      	add	r3, r2
    2490:	440b      	add	r3, r1
    2492:	3301      	adds	r3, #1
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	461a      	mov	r2, r3
    2498:	4b93      	ldr	r3, [pc, #588]	; (26e8 <Clock_Ip_InitClock+0x590>)
    249a:	5c9b      	ldrb	r3, [r3, r2]
    249c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    249e:	4993      	ldr	r1, [pc, #588]	; (26ec <Clock_Ip_InitClock+0x594>)
    24a0:	9a02      	ldr	r2, [sp, #8]
    24a2:	4613      	mov	r3, r2
    24a4:	009b      	lsls	r3, r3, #2
    24a6:	4413      	add	r3, r2
    24a8:	009b      	lsls	r3, r3, #2
    24aa:	440b      	add	r3, r1
    24ac:	3304      	adds	r3, #4
    24ae:	6819      	ldr	r1, [r3, #0]
    24b0:	9a03      	ldr	r2, [sp, #12]
    24b2:	4613      	mov	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	4413      	add	r3, r2
    24b8:	00db      	lsls	r3, r3, #3
    24ba:	3340      	adds	r3, #64	; 0x40
    24bc:	9a01      	ldr	r2, [sp, #4]
    24be:	4413      	add	r3, r2
    24c0:	4618      	mov	r0, r3
    24c2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    24c4:	9b03      	ldr	r3, [sp, #12]
    24c6:	3301      	adds	r3, #1
    24c8:	9303      	str	r3, [sp, #12]
    24ca:	9b01      	ldr	r3, [sp, #4]
    24cc:	7a9b      	ldrb	r3, [r3, #10]
    24ce:	461a      	mov	r2, r3
    24d0:	9b03      	ldr	r3, [sp, #12]
    24d2:	4293      	cmp	r3, r2
    24d4:	d3cf      	bcc.n	2476 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24d6:	2300      	movs	r3, #0
    24d8:	9303      	str	r3, [sp, #12]
    24da:	e029      	b.n	2530 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24dc:	9901      	ldr	r1, [sp, #4]
    24de:	9a03      	ldr	r2, [sp, #12]
    24e0:	4613      	mov	r3, r2
    24e2:	009b      	lsls	r3, r3, #2
    24e4:	4413      	add	r3, r2
    24e6:	009b      	lsls	r3, r3, #2
    24e8:	440b      	add	r3, r1
    24ea:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24ee:	681a      	ldr	r2, [r3, #0]
    24f0:	497a      	ldr	r1, [pc, #488]	; (26dc <Clock_Ip_InitClock+0x584>)
    24f2:	4613      	mov	r3, r2
    24f4:	00db      	lsls	r3, r3, #3
    24f6:	4413      	add	r3, r2
    24f8:	440b      	add	r3, r1
    24fa:	3301      	adds	r3, #1
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	461a      	mov	r2, r3
    2500:	4b7b      	ldr	r3, [pc, #492]	; (26f0 <Clock_Ip_InitClock+0x598>)
    2502:	5c9b      	ldrb	r3, [r3, r2]
    2504:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2506:	4a7b      	ldr	r2, [pc, #492]	; (26f4 <Clock_Ip_InitClock+0x59c>)
    2508:	9b02      	ldr	r3, [sp, #8]
    250a:	011b      	lsls	r3, r3, #4
    250c:	4413      	add	r3, r2
    250e:	3304      	adds	r3, #4
    2510:	681c      	ldr	r4, [r3, #0]
    2512:	9a03      	ldr	r2, [sp, #12]
    2514:	4613      	mov	r3, r2
    2516:	009b      	lsls	r3, r3, #2
    2518:	4413      	add	r3, r2
    251a:	009b      	lsls	r3, r3, #2
    251c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2520:	9a01      	ldr	r2, [sp, #4]
    2522:	4413      	add	r3, r2
    2524:	9903      	ldr	r1, [sp, #12]
    2526:	4618      	mov	r0, r3
    2528:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    252a:	9b03      	ldr	r3, [sp, #12]
    252c:	3301      	adds	r3, #1
    252e:	9303      	str	r3, [sp, #12]
    2530:	9b01      	ldr	r3, [sp, #4]
    2532:	7c9b      	ldrb	r3, [r3, #18]
    2534:	461a      	mov	r2, r3
    2536:	9b03      	ldr	r3, [sp, #12]
    2538:	4293      	cmp	r3, r2
    253a:	d3cf      	bcc.n	24dc <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    253c:	2300      	movs	r3, #0
    253e:	9303      	str	r3, [sp, #12]
    2540:	e02a      	b.n	2598 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2542:	9901      	ldr	r1, [sp, #4]
    2544:	9a03      	ldr	r2, [sp, #12]
    2546:	4613      	mov	r3, r2
    2548:	009b      	lsls	r3, r3, #2
    254a:	4413      	add	r3, r2
    254c:	009b      	lsls	r3, r3, #2
    254e:	440b      	add	r3, r1
    2550:	332c      	adds	r3, #44	; 0x2c
    2552:	681a      	ldr	r2, [r3, #0]
    2554:	4961      	ldr	r1, [pc, #388]	; (26dc <Clock_Ip_InitClock+0x584>)
    2556:	4613      	mov	r3, r2
    2558:	00db      	lsls	r3, r3, #3
    255a:	4413      	add	r3, r2
    255c:	440b      	add	r3, r1
    255e:	3301      	adds	r3, #1
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	461a      	mov	r2, r3
    2564:	4b64      	ldr	r3, [pc, #400]	; (26f8 <Clock_Ip_InitClock+0x5a0>)
    2566:	5c9b      	ldrb	r3, [r3, r2]
    2568:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    256a:	4964      	ldr	r1, [pc, #400]	; (26fc <Clock_Ip_InitClock+0x5a4>)
    256c:	9a02      	ldr	r2, [sp, #8]
    256e:	4613      	mov	r3, r2
    2570:	009b      	lsls	r3, r3, #2
    2572:	4413      	add	r3, r2
    2574:	009b      	lsls	r3, r3, #2
    2576:	440b      	add	r3, r1
    2578:	3308      	adds	r3, #8
    257a:	6819      	ldr	r1, [r3, #0]
    257c:	9a03      	ldr	r2, [sp, #12]
    257e:	4613      	mov	r3, r2
    2580:	009b      	lsls	r3, r3, #2
    2582:	4413      	add	r3, r2
    2584:	009b      	lsls	r3, r3, #2
    2586:	3328      	adds	r3, #40	; 0x28
    2588:	9a01      	ldr	r2, [sp, #4]
    258a:	4413      	add	r3, r2
    258c:	3304      	adds	r3, #4
    258e:	4618      	mov	r0, r3
    2590:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2592:	9b03      	ldr	r3, [sp, #12]
    2594:	3301      	adds	r3, #1
    2596:	9303      	str	r3, [sp, #12]
    2598:	9b01      	ldr	r3, [sp, #4]
    259a:	7a5b      	ldrb	r3, [r3, #9]
    259c:	461a      	mov	r2, r3
    259e:	9b03      	ldr	r3, [sp, #12]
    25a0:	4293      	cmp	r3, r2
    25a2:	d3ce      	bcc.n	2542 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25a4:	2300      	movs	r3, #0
    25a6:	9303      	str	r3, [sp, #12]
    25a8:	e029      	b.n	25fe <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    25aa:	9901      	ldr	r1, [sp, #4]
    25ac:	9a03      	ldr	r2, [sp, #12]
    25ae:	4613      	mov	r3, r2
    25b0:	009b      	lsls	r3, r3, #2
    25b2:	4413      	add	r3, r2
    25b4:	00db      	lsls	r3, r3, #3
    25b6:	440b      	add	r3, r1
    25b8:	3340      	adds	r3, #64	; 0x40
    25ba:	681a      	ldr	r2, [r3, #0]
    25bc:	4947      	ldr	r1, [pc, #284]	; (26dc <Clock_Ip_InitClock+0x584>)
    25be:	4613      	mov	r3, r2
    25c0:	00db      	lsls	r3, r3, #3
    25c2:	4413      	add	r3, r2
    25c4:	440b      	add	r3, r1
    25c6:	3301      	adds	r3, #1
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	461a      	mov	r2, r3
    25cc:	4b46      	ldr	r3, [pc, #280]	; (26e8 <Clock_Ip_InitClock+0x590>)
    25ce:	5c9b      	ldrb	r3, [r3, r2]
    25d0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    25d2:	4946      	ldr	r1, [pc, #280]	; (26ec <Clock_Ip_InitClock+0x594>)
    25d4:	9a02      	ldr	r2, [sp, #8]
    25d6:	4613      	mov	r3, r2
    25d8:	009b      	lsls	r3, r3, #2
    25da:	4413      	add	r3, r2
    25dc:	009b      	lsls	r3, r3, #2
    25de:	440b      	add	r3, r1
    25e0:	330c      	adds	r3, #12
    25e2:	6819      	ldr	r1, [r3, #0]
    25e4:	9a03      	ldr	r2, [sp, #12]
    25e6:	4613      	mov	r3, r2
    25e8:	009b      	lsls	r3, r3, #2
    25ea:	4413      	add	r3, r2
    25ec:	00db      	lsls	r3, r3, #3
    25ee:	3340      	adds	r3, #64	; 0x40
    25f0:	9a01      	ldr	r2, [sp, #4]
    25f2:	4413      	add	r3, r2
    25f4:	4618      	mov	r0, r3
    25f6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25f8:	9b03      	ldr	r3, [sp, #12]
    25fa:	3301      	adds	r3, #1
    25fc:	9303      	str	r3, [sp, #12]
    25fe:	9b01      	ldr	r3, [sp, #4]
    2600:	7a9b      	ldrb	r3, [r3, #10]
    2602:	461a      	mov	r2, r3
    2604:	9b03      	ldr	r3, [sp, #12]
    2606:	4293      	cmp	r3, r2
    2608:	d3cf      	bcc.n	25aa <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    260a:	2300      	movs	r3, #0
    260c:	9303      	str	r3, [sp, #12]
    260e:	e025      	b.n	265c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2610:	9a01      	ldr	r2, [sp, #4]
    2612:	9b03      	ldr	r3, [sp, #12]
    2614:	3324      	adds	r3, #36	; 0x24
    2616:	011b      	lsls	r3, r3, #4
    2618:	4413      	add	r3, r2
    261a:	3304      	adds	r3, #4
    261c:	681a      	ldr	r2, [r3, #0]
    261e:	492f      	ldr	r1, [pc, #188]	; (26dc <Clock_Ip_InitClock+0x584>)
    2620:	4613      	mov	r3, r2
    2622:	00db      	lsls	r3, r3, #3
    2624:	4413      	add	r3, r2
    2626:	440b      	add	r3, r1
    2628:	3301      	adds	r3, #1
    262a:	781b      	ldrb	r3, [r3, #0]
    262c:	461a      	mov	r2, r3
    262e:	4b34      	ldr	r3, [pc, #208]	; (2700 <Clock_Ip_InitClock+0x5a8>)
    2630:	5c9b      	ldrb	r3, [r3, r2]
    2632:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2634:	4933      	ldr	r1, [pc, #204]	; (2704 <Clock_Ip_InitClock+0x5ac>)
    2636:	9a02      	ldr	r2, [sp, #8]
    2638:	4613      	mov	r3, r2
    263a:	005b      	lsls	r3, r3, #1
    263c:	4413      	add	r3, r2
    263e:	009b      	lsls	r3, r3, #2
    2640:	440b      	add	r3, r1
    2642:	3304      	adds	r3, #4
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	9a03      	ldr	r2, [sp, #12]
    2648:	3224      	adds	r2, #36	; 0x24
    264a:	0112      	lsls	r2, r2, #4
    264c:	9901      	ldr	r1, [sp, #4]
    264e:	440a      	add	r2, r1
    2650:	3204      	adds	r2, #4
    2652:	4610      	mov	r0, r2
    2654:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2656:	9b03      	ldr	r3, [sp, #12]
    2658:	3301      	adds	r3, #1
    265a:	9303      	str	r3, [sp, #12]
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	7b9b      	ldrb	r3, [r3, #14]
    2660:	461a      	mov	r2, r3
    2662:	9b03      	ldr	r3, [sp, #12]
    2664:	4293      	cmp	r3, r2
    2666:	d3d3      	bcc.n	2610 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2668:	4b27      	ldr	r3, [pc, #156]	; (2708 <Clock_Ip_InitClock+0x5b0>)
    266a:	2200      	movs	r2, #0
    266c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    266e:	4b26      	ldr	r3, [pc, #152]	; (2708 <Clock_Ip_InitClock+0x5b0>)
    2670:	2200      	movs	r2, #0
    2672:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2674:	4b24      	ldr	r3, [pc, #144]	; (2708 <Clock_Ip_InitClock+0x5b0>)
    2676:	2201      	movs	r2, #1
    2678:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    267a:	4b23      	ldr	r3, [pc, #140]	; (2708 <Clock_Ip_InitClock+0x5b0>)
    267c:	2200      	movs	r2, #0
    267e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2680:	f000 fa9c 	bl	2bbc <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2684:	2300      	movs	r3, #0
    2686:	9303      	str	r3, [sp, #12]
    2688:	e04c      	b.n	2724 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    268a:	9a01      	ldr	r2, [sp, #4]
    268c:	9b03      	ldr	r3, [sp, #12]
    268e:	330d      	adds	r3, #13
    2690:	00db      	lsls	r3, r3, #3
    2692:	4413      	add	r3, r2
    2694:	685b      	ldr	r3, [r3, #4]
    2696:	4a1d      	ldr	r2, [pc, #116]	; (270c <Clock_Ip_InitClock+0x5b4>)
    2698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    269c:	2b03      	cmp	r3, #3
    269e:	d03b      	beq.n	2718 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    26a0:	9b01      	ldr	r3, [sp, #4]
    26a2:	9a03      	ldr	r2, [sp, #12]
    26a4:	320d      	adds	r2, #13
    26a6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    26aa:	490c      	ldr	r1, [pc, #48]	; (26dc <Clock_Ip_InitClock+0x584>)
    26ac:	4613      	mov	r3, r2
    26ae:	00db      	lsls	r3, r3, #3
    26b0:	4413      	add	r3, r2
    26b2:	440b      	add	r3, r1
    26b4:	3301      	adds	r3, #1
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	461a      	mov	r2, r3
    26ba:	4b15      	ldr	r3, [pc, #84]	; (2710 <Clock_Ip_InitClock+0x5b8>)
    26bc:	5c9b      	ldrb	r3, [r3, r2]
    26be:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    26c0:	4a14      	ldr	r2, [pc, #80]	; (2714 <Clock_Ip_InitClock+0x5bc>)
    26c2:	9b02      	ldr	r3, [sp, #8]
    26c4:	00db      	lsls	r3, r3, #3
    26c6:	4413      	add	r3, r2
    26c8:	685b      	ldr	r3, [r3, #4]
    26ca:	9a03      	ldr	r2, [sp, #12]
    26cc:	320d      	adds	r2, #13
    26ce:	00d2      	lsls	r2, r2, #3
    26d0:	9901      	ldr	r1, [sp, #4]
    26d2:	440a      	add	r2, r1
    26d4:	4610      	mov	r0, r2
    26d6:	4798      	blx	r3
    26d8:	e021      	b.n	271e <Clock_Ip_InitClock+0x5c6>
    26da:	bf00      	nop
    26dc:	00008428 	.word	0x00008428
    26e0:	00008398 	.word	0x00008398
    26e4:	00008974 	.word	0x00008974
    26e8:	000083e8 	.word	0x000083e8
    26ec:	00008a34 	.word	0x00008a34
    26f0:	00008418 	.word	0x00008418
    26f4:	00008a24 	.word	0x00008a24
    26f8:	000083a8 	.word	0x000083a8
    26fc:	0000897c 	.word	0x0000897c
    2700:	000083d8 	.word	0x000083d8
    2704:	000089a4 	.word	0x000089a4
    2708:	1fff8b4c 	.word	0x1fff8b4c
    270c:	00008874 	.word	0x00008874
    2710:	000083f8 	.word	0x000083f8
    2714:	00008a60 	.word	0x00008a60
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2718:	4b3a      	ldr	r3, [pc, #232]	; (2804 <Clock_Ip_InitClock+0x6ac>)
    271a:	2201      	movs	r2, #1
    271c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    271e:	9b03      	ldr	r3, [sp, #12]
    2720:	3301      	adds	r3, #1
    2722:	9303      	str	r3, [sp, #12]
    2724:	9b01      	ldr	r3, [sp, #4]
    2726:	7adb      	ldrb	r3, [r3, #11]
    2728:	461a      	mov	r2, r3
    272a:	9b03      	ldr	r3, [sp, #12]
    272c:	4293      	cmp	r3, r2
    272e:	d3ac      	bcc.n	268a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2730:	4b34      	ldr	r3, [pc, #208]	; (2804 <Clock_Ip_InitClock+0x6ac>)
    2732:	781b      	ldrb	r3, [r3, #0]
    2734:	f083 0301 	eor.w	r3, r3, #1
    2738:	b2db      	uxtb	r3, r3
    273a:	2b00      	cmp	r3, #0
    273c:	d05e      	beq.n	27fc <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    273e:	2300      	movs	r3, #0
    2740:	9303      	str	r3, [sp, #12]
    2742:	e01f      	b.n	2784 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2744:	9a01      	ldr	r2, [sp, #4]
    2746:	9b03      	ldr	r3, [sp, #12]
    2748:	334e      	adds	r3, #78	; 0x4e
    274a:	00db      	lsls	r3, r3, #3
    274c:	4413      	add	r3, r2
    274e:	685a      	ldr	r2, [r3, #4]
    2750:	492d      	ldr	r1, [pc, #180]	; (2808 <Clock_Ip_InitClock+0x6b0>)
    2752:	4613      	mov	r3, r2
    2754:	00db      	lsls	r3, r3, #3
    2756:	4413      	add	r3, r2
    2758:	440b      	add	r3, r1
    275a:	3301      	adds	r3, #1
    275c:	781b      	ldrb	r3, [r3, #0]
    275e:	461a      	mov	r2, r3
    2760:	4b2a      	ldr	r3, [pc, #168]	; (280c <Clock_Ip_InitClock+0x6b4>)
    2762:	5c9b      	ldrb	r3, [r3, r2]
    2764:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2766:	4a2a      	ldr	r2, [pc, #168]	; (2810 <Clock_Ip_InitClock+0x6b8>)
    2768:	9b02      	ldr	r3, [sp, #8]
    276a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    276e:	9a03      	ldr	r2, [sp, #12]
    2770:	324e      	adds	r2, #78	; 0x4e
    2772:	00d2      	lsls	r2, r2, #3
    2774:	9901      	ldr	r1, [sp, #4]
    2776:	440a      	add	r2, r1
    2778:	3204      	adds	r2, #4
    277a:	4610      	mov	r0, r2
    277c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    277e:	9b03      	ldr	r3, [sp, #12]
    2780:	3301      	adds	r3, #1
    2782:	9303      	str	r3, [sp, #12]
    2784:	9b01      	ldr	r3, [sp, #4]
    2786:	7c1b      	ldrb	r3, [r3, #16]
    2788:	461a      	mov	r2, r3
    278a:	9b03      	ldr	r3, [sp, #12]
    278c:	4293      	cmp	r3, r2
    278e:	d3d9      	bcc.n	2744 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2790:	2300      	movs	r3, #0
    2792:	9303      	str	r3, [sp, #12]
    2794:	e028      	b.n	27e8 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2796:	9901      	ldr	r1, [sp, #4]
    2798:	9a03      	ldr	r2, [sp, #12]
    279a:	4613      	mov	r3, r2
    279c:	009b      	lsls	r3, r3, #2
    279e:	4413      	add	r3, r2
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	440b      	add	r3, r1
    27a4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27a8:	681a      	ldr	r2, [r3, #0]
    27aa:	4917      	ldr	r1, [pc, #92]	; (2808 <Clock_Ip_InitClock+0x6b0>)
    27ac:	4613      	mov	r3, r2
    27ae:	00db      	lsls	r3, r3, #3
    27b0:	4413      	add	r3, r2
    27b2:	440b      	add	r3, r1
    27b4:	3301      	adds	r3, #1
    27b6:	781b      	ldrb	r3, [r3, #0]
    27b8:	461a      	mov	r2, r3
    27ba:	4b16      	ldr	r3, [pc, #88]	; (2814 <Clock_Ip_InitClock+0x6bc>)
    27bc:	5c9b      	ldrb	r3, [r3, r2]
    27be:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    27c0:	4a15      	ldr	r2, [pc, #84]	; (2818 <Clock_Ip_InitClock+0x6c0>)
    27c2:	9b02      	ldr	r3, [sp, #8]
    27c4:	011b      	lsls	r3, r3, #4
    27c6:	4413      	add	r3, r2
    27c8:	330c      	adds	r3, #12
    27ca:	6819      	ldr	r1, [r3, #0]
    27cc:	9a03      	ldr	r2, [sp, #12]
    27ce:	4613      	mov	r3, r2
    27d0:	009b      	lsls	r3, r3, #2
    27d2:	4413      	add	r3, r2
    27d4:	009b      	lsls	r3, r3, #2
    27d6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27da:	9a01      	ldr	r2, [sp, #4]
    27dc:	4413      	add	r3, r2
    27de:	4618      	mov	r0, r3
    27e0:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27e2:	9b03      	ldr	r3, [sp, #12]
    27e4:	3301      	adds	r3, #1
    27e6:	9303      	str	r3, [sp, #12]
    27e8:	9b01      	ldr	r3, [sp, #4]
    27ea:	7c9b      	ldrb	r3, [r3, #18]
    27ec:	461a      	mov	r2, r3
    27ee:	9b03      	ldr	r3, [sp, #12]
    27f0:	4293      	cmp	r3, r2
    27f2:	d3d0      	bcc.n	2796 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    27f4:	2104      	movs	r1, #4
    27f6:	9801      	ldr	r0, [sp, #4]
    27f8:	f002 ff48 	bl	568c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    27fc:	bf00      	nop
    27fe:	b004      	add	sp, #16
    2800:	bd10      	pop	{r4, pc}
    2802:	bf00      	nop
    2804:	1fff8b4c 	.word	0x1fff8b4c
    2808:	00008428 	.word	0x00008428
    280c:	000083c8 	.word	0x000083c8
    2810:	000089b0 	.word	0x000089b0
    2814:	00008418 	.word	0x00008418
    2818:	00008a24 	.word	0x00008a24

0000281c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    281c:	b500      	push	{lr}
    281e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2820:	2302      	movs	r3, #2
    2822:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2824:	2300      	movs	r3, #0
    2826:	9304      	str	r3, [sp, #16]
    2828:	e02c      	b.n	2884 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    282a:	4a36      	ldr	r2, [pc, #216]	; (2904 <Clock_Ip_GetPllStatus+0xe8>)
    282c:	9b04      	ldr	r3, [sp, #16]
    282e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2832:	4935      	ldr	r1, [pc, #212]	; (2908 <Clock_Ip_GetPllStatus+0xec>)
    2834:	4613      	mov	r3, r2
    2836:	00db      	lsls	r3, r3, #3
    2838:	4413      	add	r3, r2
    283a:	440b      	add	r3, r1
    283c:	3301      	adds	r3, #1
    283e:	781b      	ldrb	r3, [r3, #0]
    2840:	461a      	mov	r2, r3
    2842:	4b32      	ldr	r3, [pc, #200]	; (290c <Clock_Ip_GetPllStatus+0xf0>)
    2844:	5c9b      	ldrb	r3, [r3, r2]
    2846:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2848:	4931      	ldr	r1, [pc, #196]	; (2910 <Clock_Ip_GetPllStatus+0xf4>)
    284a:	9a03      	ldr	r2, [sp, #12]
    284c:	4613      	mov	r3, r2
    284e:	009b      	lsls	r3, r3, #2
    2850:	4413      	add	r3, r2
    2852:	009b      	lsls	r3, r3, #2
    2854:	440b      	add	r3, r1
    2856:	3308      	adds	r3, #8
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	492a      	ldr	r1, [pc, #168]	; (2904 <Clock_Ip_GetPllStatus+0xe8>)
    285c:	9a04      	ldr	r2, [sp, #16]
    285e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2862:	4610      	mov	r0, r2
    2864:	4798      	blx	r3
    2866:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2868:	9b02      	ldr	r3, [sp, #8]
    286a:	2b01      	cmp	r3, #1
    286c:	d102      	bne.n	2874 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    286e:	2301      	movs	r3, #1
    2870:	9305      	str	r3, [sp, #20]
            break;
    2872:	e00d      	b.n	2890 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2874:	9b02      	ldr	r3, [sp, #8]
    2876:	2b02      	cmp	r3, #2
    2878:	d101      	bne.n	287e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    287a:	2300      	movs	r3, #0
    287c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    287e:	9b04      	ldr	r3, [sp, #16]
    2880:	3301      	adds	r3, #1
    2882:	9304      	str	r3, [sp, #16]
    2884:	4b23      	ldr	r3, [pc, #140]	; (2914 <Clock_Ip_GetPllStatus+0xf8>)
    2886:	789b      	ldrb	r3, [r3, #2]
    2888:	461a      	mov	r2, r3
    288a:	9b04      	ldr	r3, [sp, #16]
    288c:	4293      	cmp	r3, r2
    288e:	d3cc      	bcc.n	282a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2890:	9b05      	ldr	r3, [sp, #20]
    2892:	2b00      	cmp	r3, #0
    2894:	d130      	bne.n	28f8 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2896:	2300      	movs	r3, #0
    2898:	9304      	str	r3, [sp, #16]
    289a:	e027      	b.n	28ec <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    289c:	4a1e      	ldr	r2, [pc, #120]	; (2918 <Clock_Ip_GetPllStatus+0xfc>)
    289e:	9b04      	ldr	r3, [sp, #16]
    28a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    28a4:	4918      	ldr	r1, [pc, #96]	; (2908 <Clock_Ip_GetPllStatus+0xec>)
    28a6:	4613      	mov	r3, r2
    28a8:	00db      	lsls	r3, r3, #3
    28aa:	4413      	add	r3, r2
    28ac:	440b      	add	r3, r1
    28ae:	3301      	adds	r3, #1
    28b0:	781b      	ldrb	r3, [r3, #0]
    28b2:	461a      	mov	r2, r3
    28b4:	4b19      	ldr	r3, [pc, #100]	; (291c <Clock_Ip_GetPllStatus+0x100>)
    28b6:	5c9b      	ldrb	r3, [r3, r2]
    28b8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    28ba:	4919      	ldr	r1, [pc, #100]	; (2920 <Clock_Ip_GetPllStatus+0x104>)
    28bc:	9a03      	ldr	r2, [sp, #12]
    28be:	4613      	mov	r3, r2
    28c0:	005b      	lsls	r3, r3, #1
    28c2:	4413      	add	r3, r2
    28c4:	009b      	lsls	r3, r3, #2
    28c6:	440b      	add	r3, r1
    28c8:	3308      	adds	r3, #8
    28ca:	681b      	ldr	r3, [r3, #0]
    28cc:	4912      	ldr	r1, [pc, #72]	; (2918 <Clock_Ip_GetPllStatus+0xfc>)
    28ce:	9a04      	ldr	r2, [sp, #16]
    28d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    28d4:	4610      	mov	r0, r2
    28d6:	4798      	blx	r3
    28d8:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    28da:	9b01      	ldr	r3, [sp, #4]
    28dc:	2b01      	cmp	r3, #1
    28de:	d102      	bne.n	28e6 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    28e0:	2301      	movs	r3, #1
    28e2:	9305      	str	r3, [sp, #20]
                break;
    28e4:	e008      	b.n	28f8 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28e6:	9b04      	ldr	r3, [sp, #16]
    28e8:	3301      	adds	r3, #1
    28ea:	9304      	str	r3, [sp, #16]
    28ec:	4b09      	ldr	r3, [pc, #36]	; (2914 <Clock_Ip_GetPllStatus+0xf8>)
    28ee:	78db      	ldrb	r3, [r3, #3]
    28f0:	461a      	mov	r2, r3
    28f2:	9b04      	ldr	r3, [sp, #16]
    28f4:	4293      	cmp	r3, r2
    28f6:	d3d1      	bcc.n	289c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    28f8:	9b05      	ldr	r3, [sp, #20]
}
    28fa:	4618      	mov	r0, r3
    28fc:	b007      	add	sp, #28
    28fe:	f85d fb04 	ldr.w	pc, [sp], #4
    2902:	bf00      	nop
    2904:	00008930 	.word	0x00008930
    2908:	00008428 	.word	0x00008428
    290c:	000083e8 	.word	0x000083e8
    2910:	00008a34 	.word	0x00008a34
    2914:	1fff8b4c 	.word	0x1fff8b4c
    2918:	00008934 	.word	0x00008934
    291c:	000083d8 	.word	0x000083d8
    2920:	000089a4 	.word	0x000089a4

00002924 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2924:	b500      	push	{lr}
    2926:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2928:	4b55      	ldr	r3, [pc, #340]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	2b00      	cmp	r3, #0
    292e:	f000 80a2 	beq.w	2a76 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2932:	2300      	movs	r3, #0
    2934:	9301      	str	r3, [sp, #4]
    2936:	e02c      	b.n	2992 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2938:	4b51      	ldr	r3, [pc, #324]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    293a:	681a      	ldr	r2, [r3, #0]
    293c:	9b01      	ldr	r3, [sp, #4]
    293e:	330d      	adds	r3, #13
    2940:	00db      	lsls	r3, r3, #3
    2942:	4413      	add	r3, r2
    2944:	685b      	ldr	r3, [r3, #4]
    2946:	4a4f      	ldr	r2, [pc, #316]	; (2a84 <Clock_Ip_DistributePll+0x160>)
    2948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    294c:	2b03      	cmp	r3, #3
    294e:	d11d      	bne.n	298c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2950:	4b4b      	ldr	r3, [pc, #300]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    2952:	681b      	ldr	r3, [r3, #0]
    2954:	9a01      	ldr	r2, [sp, #4]
    2956:	320d      	adds	r2, #13
    2958:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    295c:	494a      	ldr	r1, [pc, #296]	; (2a88 <Clock_Ip_DistributePll+0x164>)
    295e:	4613      	mov	r3, r2
    2960:	00db      	lsls	r3, r3, #3
    2962:	4413      	add	r3, r2
    2964:	440b      	add	r3, r1
    2966:	3301      	adds	r3, #1
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	461a      	mov	r2, r3
    296c:	4b47      	ldr	r3, [pc, #284]	; (2a8c <Clock_Ip_DistributePll+0x168>)
    296e:	5c9b      	ldrb	r3, [r3, r2]
    2970:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2972:	4a47      	ldr	r2, [pc, #284]	; (2a90 <Clock_Ip_DistributePll+0x16c>)
    2974:	9b00      	ldr	r3, [sp, #0]
    2976:	00db      	lsls	r3, r3, #3
    2978:	4413      	add	r3, r2
    297a:	685b      	ldr	r3, [r3, #4]
    297c:	4a40      	ldr	r2, [pc, #256]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    297e:	6811      	ldr	r1, [r2, #0]
    2980:	9a01      	ldr	r2, [sp, #4]
    2982:	320d      	adds	r2, #13
    2984:	00d2      	lsls	r2, r2, #3
    2986:	440a      	add	r2, r1
    2988:	4610      	mov	r0, r2
    298a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    298c:	9b01      	ldr	r3, [sp, #4]
    298e:	3301      	adds	r3, #1
    2990:	9301      	str	r3, [sp, #4]
    2992:	4b3b      	ldr	r3, [pc, #236]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    2994:	681b      	ldr	r3, [r3, #0]
    2996:	7adb      	ldrb	r3, [r3, #11]
    2998:	461a      	mov	r2, r3
    299a:	9b01      	ldr	r3, [sp, #4]
    299c:	4293      	cmp	r3, r2
    299e:	d3cb      	bcc.n	2938 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    29a0:	4b3c      	ldr	r3, [pc, #240]	; (2a94 <Clock_Ip_DistributePll+0x170>)
    29a2:	781b      	ldrb	r3, [r3, #0]
    29a4:	2b00      	cmp	r3, #0
    29a6:	d066      	beq.n	2a76 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29a8:	2300      	movs	r3, #0
    29aa:	9301      	str	r3, [sp, #4]
    29ac:	e021      	b.n	29f2 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    29ae:	4b34      	ldr	r3, [pc, #208]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    29b0:	681a      	ldr	r2, [r3, #0]
    29b2:	9b01      	ldr	r3, [sp, #4]
    29b4:	334e      	adds	r3, #78	; 0x4e
    29b6:	00db      	lsls	r3, r3, #3
    29b8:	4413      	add	r3, r2
    29ba:	685a      	ldr	r2, [r3, #4]
    29bc:	4932      	ldr	r1, [pc, #200]	; (2a88 <Clock_Ip_DistributePll+0x164>)
    29be:	4613      	mov	r3, r2
    29c0:	00db      	lsls	r3, r3, #3
    29c2:	4413      	add	r3, r2
    29c4:	440b      	add	r3, r1
    29c6:	3301      	adds	r3, #1
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	461a      	mov	r2, r3
    29cc:	4b32      	ldr	r3, [pc, #200]	; (2a98 <Clock_Ip_DistributePll+0x174>)
    29ce:	5c9b      	ldrb	r3, [r3, r2]
    29d0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    29d2:	4a32      	ldr	r2, [pc, #200]	; (2a9c <Clock_Ip_DistributePll+0x178>)
    29d4:	9b00      	ldr	r3, [sp, #0]
    29d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29da:	4a29      	ldr	r2, [pc, #164]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    29dc:	6811      	ldr	r1, [r2, #0]
    29de:	9a01      	ldr	r2, [sp, #4]
    29e0:	324e      	adds	r2, #78	; 0x4e
    29e2:	00d2      	lsls	r2, r2, #3
    29e4:	440a      	add	r2, r1
    29e6:	3204      	adds	r2, #4
    29e8:	4610      	mov	r0, r2
    29ea:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29ec:	9b01      	ldr	r3, [sp, #4]
    29ee:	3301      	adds	r3, #1
    29f0:	9301      	str	r3, [sp, #4]
    29f2:	4b23      	ldr	r3, [pc, #140]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    29f4:	681b      	ldr	r3, [r3, #0]
    29f6:	7c1b      	ldrb	r3, [r3, #16]
    29f8:	461a      	mov	r2, r3
    29fa:	9b01      	ldr	r3, [sp, #4]
    29fc:	4293      	cmp	r3, r2
    29fe:	d3d6      	bcc.n	29ae <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a00:	2300      	movs	r3, #0
    2a02:	9301      	str	r3, [sp, #4]
    2a04:	e02a      	b.n	2a5c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2a06:	4b1e      	ldr	r3, [pc, #120]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    2a08:	6819      	ldr	r1, [r3, #0]
    2a0a:	9a01      	ldr	r2, [sp, #4]
    2a0c:	4613      	mov	r3, r2
    2a0e:	009b      	lsls	r3, r3, #2
    2a10:	4413      	add	r3, r2
    2a12:	009b      	lsls	r3, r3, #2
    2a14:	440b      	add	r3, r1
    2a16:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a1a:	681a      	ldr	r2, [r3, #0]
    2a1c:	491a      	ldr	r1, [pc, #104]	; (2a88 <Clock_Ip_DistributePll+0x164>)
    2a1e:	4613      	mov	r3, r2
    2a20:	00db      	lsls	r3, r3, #3
    2a22:	4413      	add	r3, r2
    2a24:	440b      	add	r3, r1
    2a26:	3301      	adds	r3, #1
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	461a      	mov	r2, r3
    2a2c:	4b1c      	ldr	r3, [pc, #112]	; (2aa0 <Clock_Ip_DistributePll+0x17c>)
    2a2e:	5c9b      	ldrb	r3, [r3, r2]
    2a30:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2a32:	4a1c      	ldr	r2, [pc, #112]	; (2aa4 <Clock_Ip_DistributePll+0x180>)
    2a34:	9b00      	ldr	r3, [sp, #0]
    2a36:	011b      	lsls	r3, r3, #4
    2a38:	4413      	add	r3, r2
    2a3a:	330c      	adds	r3, #12
    2a3c:	6819      	ldr	r1, [r3, #0]
    2a3e:	4b10      	ldr	r3, [pc, #64]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    2a40:	6818      	ldr	r0, [r3, #0]
    2a42:	9a01      	ldr	r2, [sp, #4]
    2a44:	4613      	mov	r3, r2
    2a46:	009b      	lsls	r3, r3, #2
    2a48:	4413      	add	r3, r2
    2a4a:	009b      	lsls	r3, r3, #2
    2a4c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a50:	4403      	add	r3, r0
    2a52:	4618      	mov	r0, r3
    2a54:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a56:	9b01      	ldr	r3, [sp, #4]
    2a58:	3301      	adds	r3, #1
    2a5a:	9301      	str	r3, [sp, #4]
    2a5c:	4b08      	ldr	r3, [pc, #32]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	7c9b      	ldrb	r3, [r3, #18]
    2a62:	461a      	mov	r2, r3
    2a64:	9b01      	ldr	r3, [sp, #4]
    2a66:	4293      	cmp	r3, r2
    2a68:	d3cd      	bcc.n	2a06 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a6a:	4b05      	ldr	r3, [pc, #20]	; (2a80 <Clock_Ip_DistributePll+0x15c>)
    2a6c:	681b      	ldr	r3, [r3, #0]
    2a6e:	2104      	movs	r1, #4
    2a70:	4618      	mov	r0, r3
    2a72:	f002 fe0b 	bl	568c <Clock_Ip_Command>
        }
    }
}
    2a76:	bf00      	nop
    2a78:	b003      	add	sp, #12
    2a7a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a7e:	bf00      	nop
    2a80:	1fff8b44 	.word	0x1fff8b44
    2a84:	00008874 	.word	0x00008874
    2a88:	00008428 	.word	0x00008428
    2a8c:	000083f8 	.word	0x000083f8
    2a90:	00008a60 	.word	0x00008a60
    2a94:	1fff8b4c 	.word	0x1fff8b4c
    2a98:	000083c8 	.word	0x000083c8
    2a9c:	000089b0 	.word	0x000089b0
    2aa0:	00008418 	.word	0x00008418
    2aa4:	00008a24 	.word	0x00008a24

00002aa8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2aa8:	b500      	push	{lr}
    2aaa:	b085      	sub	sp, #20
    2aac:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2aae:	490c      	ldr	r1, [pc, #48]	; (2ae0 <Clock_Ip_DisableClockMonitor+0x38>)
    2ab0:	9a01      	ldr	r2, [sp, #4]
    2ab2:	4613      	mov	r3, r2
    2ab4:	00db      	lsls	r3, r3, #3
    2ab6:	4413      	add	r3, r2
    2ab8:	440b      	add	r3, r1
    2aba:	3301      	adds	r3, #1
    2abc:	781b      	ldrb	r3, [r3, #0]
    2abe:	461a      	mov	r2, r3
    2ac0:	4b08      	ldr	r3, [pc, #32]	; (2ae4 <Clock_Ip_DisableClockMonitor+0x3c>)
    2ac2:	5c9b      	ldrb	r3, [r3, r2]
    2ac4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2ac6:	4a08      	ldr	r2, [pc, #32]	; (2ae8 <Clock_Ip_DisableClockMonitor+0x40>)
    2ac8:	9b03      	ldr	r3, [sp, #12]
    2aca:	011b      	lsls	r3, r3, #4
    2acc:	4413      	add	r3, r2
    2ace:	3308      	adds	r3, #8
    2ad0:	681b      	ldr	r3, [r3, #0]
    2ad2:	9801      	ldr	r0, [sp, #4]
    2ad4:	4798      	blx	r3
}
    2ad6:	bf00      	nop
    2ad8:	b005      	add	sp, #20
    2ada:	f85d fb04 	ldr.w	pc, [sp], #4
    2ade:	bf00      	nop
    2ae0:	00008428 	.word	0x00008428
    2ae4:	00008418 	.word	0x00008418
    2ae8:	00008a24 	.word	0x00008a24

00002aec <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2aec:	b082      	sub	sp, #8
    2aee:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2af0:	4a02      	ldr	r2, [pc, #8]	; (2afc <Clock_Ip_InstallNotificationsCallback+0x10>)
    2af2:	9b01      	ldr	r3, [sp, #4]
    2af4:	6013      	str	r3, [r2, #0]
}
    2af6:	bf00      	nop
    2af8:	b002      	add	sp, #8
    2afa:	4770      	bx	lr
    2afc:	1fff8b14 	.word	0x1fff8b14

00002b00 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2b00:	b500      	push	{lr}
    2b02:	b085      	sub	sp, #20
    2b04:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b06:	490c      	ldr	r1, [pc, #48]	; (2b38 <Clock_Ip_DisableModuleClock+0x38>)
    2b08:	9a01      	ldr	r2, [sp, #4]
    2b0a:	4613      	mov	r3, r2
    2b0c:	00db      	lsls	r3, r3, #3
    2b0e:	4413      	add	r3, r2
    2b10:	440b      	add	r3, r1
    2b12:	3301      	adds	r3, #1
    2b14:	781b      	ldrb	r3, [r3, #0]
    2b16:	461a      	mov	r2, r3
    2b18:	4b08      	ldr	r3, [pc, #32]	; (2b3c <Clock_Ip_DisableModuleClock+0x3c>)
    2b1a:	5c9b      	ldrb	r3, [r3, r2]
    2b1c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2b1e:	4a08      	ldr	r2, [pc, #32]	; (2b40 <Clock_Ip_DisableModuleClock+0x40>)
    2b20:	9b03      	ldr	r3, [sp, #12]
    2b22:	00db      	lsls	r3, r3, #3
    2b24:	4413      	add	r3, r2
    2b26:	685b      	ldr	r3, [r3, #4]
    2b28:	2101      	movs	r1, #1
    2b2a:	9801      	ldr	r0, [sp, #4]
    2b2c:	4798      	blx	r3
}
    2b2e:	bf00      	nop
    2b30:	b005      	add	sp, #20
    2b32:	f85d fb04 	ldr.w	pc, [sp], #4
    2b36:	bf00      	nop
    2b38:	00008428 	.word	0x00008428
    2b3c:	000083c8 	.word	0x000083c8
    2b40:	000089b0 	.word	0x000089b0

00002b44 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2b44:	b500      	push	{lr}
    2b46:	b085      	sub	sp, #20
    2b48:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b4a:	490c      	ldr	r1, [pc, #48]	; (2b7c <Clock_Ip_EnableModuleClock+0x38>)
    2b4c:	9a01      	ldr	r2, [sp, #4]
    2b4e:	4613      	mov	r3, r2
    2b50:	00db      	lsls	r3, r3, #3
    2b52:	4413      	add	r3, r2
    2b54:	440b      	add	r3, r1
    2b56:	3301      	adds	r3, #1
    2b58:	781b      	ldrb	r3, [r3, #0]
    2b5a:	461a      	mov	r2, r3
    2b5c:	4b08      	ldr	r3, [pc, #32]	; (2b80 <Clock_Ip_EnableModuleClock+0x3c>)
    2b5e:	5c9b      	ldrb	r3, [r3, r2]
    2b60:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b62:	4a08      	ldr	r2, [pc, #32]	; (2b84 <Clock_Ip_EnableModuleClock+0x40>)
    2b64:	9b03      	ldr	r3, [sp, #12]
    2b66:	00db      	lsls	r3, r3, #3
    2b68:	4413      	add	r3, r2
    2b6a:	685b      	ldr	r3, [r3, #4]
    2b6c:	2100      	movs	r1, #0
    2b6e:	9801      	ldr	r0, [sp, #4]
    2b70:	4798      	blx	r3
}
    2b72:	bf00      	nop
    2b74:	b005      	add	sp, #20
    2b76:	f85d fb04 	ldr.w	pc, [sp], #4
    2b7a:	bf00      	nop
    2b7c:	00008428 	.word	0x00008428
    2b80:	000083c8 	.word	0x000083c8
    2b84:	000089b0 	.word	0x000089b0

00002b88 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2b88:	b500      	push	{lr}
    2b8a:	b083      	sub	sp, #12
    2b8c:	9001      	str	r0, [sp, #4]
    2b8e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b90:	4b08      	ldr	r3, [pc, #32]	; (2bb4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b92:	2200      	movs	r2, #0
    2b94:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b96:	4b08      	ldr	r3, [pc, #32]	; (2bb8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	2102      	movs	r1, #2
    2b9c:	4618      	mov	r0, r3
    2b9e:	f002 fd75 	bl	568c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2ba2:	9900      	ldr	r1, [sp, #0]
    2ba4:	9801      	ldr	r0, [sp, #4]
    2ba6:	f002 fc51 	bl	544c <Clock_Ip_ClockPowerModeChangeNotification>
}
    2baa:	bf00      	nop
    2bac:	b003      	add	sp, #12
    2bae:	f85d fb04 	ldr.w	pc, [sp], #4
    2bb2:	bf00      	nop
    2bb4:	1fff8b10 	.word	0x1fff8b10
    2bb8:	1fff8b44 	.word	0x1fff8b44

00002bbc <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2bbc:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2bbe:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2bc2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2bc4:	4b06      	ldr	r3, [pc, #24]	; (2be0 <Clock_Ip_SetWaitStates+0x24>)
    2bc6:	785b      	ldrb	r3, [r3, #1]
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d005      	beq.n	2bd8 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2bcc:	9b01      	ldr	r3, [sp, #4]
    2bce:	3b01      	subs	r3, #1
    2bd0:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2bd2:	9b01      	ldr	r3, [sp, #4]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d1f9      	bne.n	2bcc <Clock_Ip_SetWaitStates+0x10>
    }
}
    2bd8:	bf00      	nop
    2bda:	b002      	add	sp, #8
    2bdc:	4770      	bx	lr
    2bde:	bf00      	nop
    2be0:	1fff8b4c 	.word	0x1fff8b4c

00002be4 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2be4:	b500      	push	{lr}
    2be6:	b083      	sub	sp, #12
    2be8:	9001      	str	r0, [sp, #4]
    2bea:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2bec:	4b04      	ldr	r3, [pc, #16]	; (2c00 <Clock_Ip_ReportClockErrors+0x1c>)
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	9900      	ldr	r1, [sp, #0]
    2bf2:	9801      	ldr	r0, [sp, #4]
    2bf4:	4798      	blx	r3
}
    2bf6:	bf00      	nop
    2bf8:	b003      	add	sp, #12
    2bfa:	f85d fb04 	ldr.w	pc, [sp], #4
    2bfe:	bf00      	nop
    2c00:	1fff8b14 	.word	0x1fff8b14

00002c04 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2c04:	b500      	push	{lr}
    2c06:	b085      	sub	sp, #20
    2c08:	9003      	str	r0, [sp, #12]
    2c0a:	9102      	str	r1, [sp, #8]
    2c0c:	9201      	str	r2, [sp, #4]
    2c0e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2c10:	2000      	movs	r0, #0
    2c12:	f7fe ffd0 	bl	1bb6 <OsIf_GetCounter>
    2c16:	4602      	mov	r2, r0
    2c18:	9b03      	ldr	r3, [sp, #12]
    2c1a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2c1c:	9b02      	ldr	r3, [sp, #8]
    2c1e:	2200      	movs	r2, #0
    2c20:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2c22:	2100      	movs	r1, #0
    2c24:	9800      	ldr	r0, [sp, #0]
    2c26:	f7ff f812 	bl	1c4e <OsIf_MicrosToTicks>
    2c2a:	4602      	mov	r2, r0
    2c2c:	9b01      	ldr	r3, [sp, #4]
    2c2e:	601a      	str	r2, [r3, #0]
}
    2c30:	bf00      	nop
    2c32:	b005      	add	sp, #20
    2c34:	f85d fb04 	ldr.w	pc, [sp], #4

00002c38 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2c38:	b500      	push	{lr}
    2c3a:	b087      	sub	sp, #28
    2c3c:	9003      	str	r0, [sp, #12]
    2c3e:	9102      	str	r1, [sp, #8]
    2c40:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2c42:	2300      	movs	r3, #0
    2c44:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c48:	2100      	movs	r1, #0
    2c4a:	9803      	ldr	r0, [sp, #12]
    2c4c:	f7fe ffcc 	bl	1be8 <OsIf_GetElapsed>
    2c50:	4602      	mov	r2, r0
    2c52:	9b02      	ldr	r3, [sp, #8]
    2c54:	681b      	ldr	r3, [r3, #0]
    2c56:	441a      	add	r2, r3
    2c58:	9b02      	ldr	r3, [sp, #8]
    2c5a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c5c:	9b02      	ldr	r3, [sp, #8]
    2c5e:	681b      	ldr	r3, [r3, #0]
    2c60:	9a01      	ldr	r2, [sp, #4]
    2c62:	429a      	cmp	r2, r3
    2c64:	d802      	bhi.n	2c6c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c66:	2301      	movs	r3, #1
    2c68:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c70:	4618      	mov	r0, r3
    2c72:	b007      	add	sp, #28
    2c74:	f85d fb04 	ldr.w	pc, [sp], #4

00002c78 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c78:	b082      	sub	sp, #8
    2c7a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c7c:	bf00      	nop
    2c7e:	b002      	add	sp, #8
    2c80:	4770      	bx	lr

00002c82 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c82:	b500      	push	{lr}
    2c84:	b083      	sub	sp, #12
    2c86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d002      	beq.n	2c94 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c8e:	9801      	ldr	r0, [sp, #4]
    2c90:	f000 f8ad 	bl	2dee <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c94:	bf00      	nop
    2c96:	b003      	add	sp, #12
    2c98:	f85d fb04 	ldr.w	pc, [sp], #4

00002c9c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c9c:	b500      	push	{lr}
    2c9e:	b083      	sub	sp, #12
    2ca0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ca2:	9b01      	ldr	r3, [sp, #4]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d002      	beq.n	2cae <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	f000 f8cd 	bl	2e48 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cae:	bf00      	nop
    2cb0:	b003      	add	sp, #12
    2cb2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cb6:	b500      	push	{lr}
    2cb8:	b083      	sub	sp, #12
    2cba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cbc:	9b01      	ldr	r3, [sp, #4]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d002      	beq.n	2cc8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2cc2:	9801      	ldr	r0, [sp, #4]
    2cc4:	f000 f8ee 	bl	2ea4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cc8:	bf00      	nop
    2cca:	b003      	add	sp, #12
    2ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00002cd0 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cd0:	b500      	push	{lr}
    2cd2:	b083      	sub	sp, #12
    2cd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cd6:	9b01      	ldr	r3, [sp, #4]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d002      	beq.n	2ce2 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2cdc:	9801      	ldr	r0, [sp, #4]
    2cde:	f000 f8f9 	bl	2ed4 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce2:	bf00      	nop
    2ce4:	b003      	add	sp, #12
    2ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cea <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cea:	b500      	push	{lr}
    2cec:	b083      	sub	sp, #12
    2cee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf0:	9b01      	ldr	r3, [sp, #4]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d002      	beq.n	2cfc <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2cf6:	9801      	ldr	r0, [sp, #4]
    2cf8:	f000 f904 	bl	2f04 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cfc:	bf00      	nop
    2cfe:	b003      	add	sp, #12
    2d00:	f85d fb04 	ldr.w	pc, [sp], #4

00002d04 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d04:	b500      	push	{lr}
    2d06:	b083      	sub	sp, #12
    2d08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d002      	beq.n	2d16 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2d10:	9801      	ldr	r0, [sp, #4]
    2d12:	f000 f90f 	bl	2f34 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d16:	bf00      	nop
    2d18:	b003      	add	sp, #12
    2d1a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d1e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d1e:	b500      	push	{lr}
    2d20:	b083      	sub	sp, #12
    2d22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d24:	9b01      	ldr	r3, [sp, #4]
    2d26:	2b00      	cmp	r3, #0
    2d28:	d002      	beq.n	2d30 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2d2a:	9801      	ldr	r0, [sp, #4]
    2d2c:	f000 f91a 	bl	2f64 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d30:	bf00      	nop
    2d32:	b003      	add	sp, #12
    2d34:	f85d fb04 	ldr.w	pc, [sp], #4

00002d38 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d38:	b500      	push	{lr}
    2d3a:	b083      	sub	sp, #12
    2d3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d3e:	9b01      	ldr	r3, [sp, #4]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d002      	beq.n	2d4a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2d44:	9801      	ldr	r0, [sp, #4]
    2d46:	f000 f925 	bl	2f94 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d4a:	bf00      	nop
    2d4c:	b003      	add	sp, #12
    2d4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d52 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d52:	b500      	push	{lr}
    2d54:	b083      	sub	sp, #12
    2d56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d58:	9b01      	ldr	r3, [sp, #4]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d002      	beq.n	2d64 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d5e:	9801      	ldr	r0, [sp, #4]
    2d60:	f000 f930 	bl	2fc4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d64:	bf00      	nop
    2d66:	b003      	add	sp, #12
    2d68:	f85d fb04 	ldr.w	pc, [sp], #4

00002d6c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d6c:	b500      	push	{lr}
    2d6e:	b083      	sub	sp, #12
    2d70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d72:	9b01      	ldr	r3, [sp, #4]
    2d74:	2b00      	cmp	r3, #0
    2d76:	d002      	beq.n	2d7e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d78:	9801      	ldr	r0, [sp, #4]
    2d7a:	f000 f93b 	bl	2ff4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d7e:	bf00      	nop
    2d80:	b003      	add	sp, #12
    2d82:	f85d fb04 	ldr.w	pc, [sp], #4

00002d86 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d86:	b500      	push	{lr}
    2d88:	b083      	sub	sp, #12
    2d8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d8c:	9b01      	ldr	r3, [sp, #4]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d002      	beq.n	2d98 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d92:	9801      	ldr	r0, [sp, #4]
    2d94:	f000 f946 	bl	3024 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d98:	bf00      	nop
    2d9a:	b003      	add	sp, #12
    2d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00002da0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2da0:	b500      	push	{lr}
    2da2:	b083      	sub	sp, #12
    2da4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2da6:	9b01      	ldr	r3, [sp, #4]
    2da8:	2b00      	cmp	r3, #0
    2daa:	d002      	beq.n	2db2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2dac:	9801      	ldr	r0, [sp, #4]
    2dae:	f000 f951 	bl	3054 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2db2:	bf00      	nop
    2db4:	b003      	add	sp, #12
    2db6:	f85d fb04 	ldr.w	pc, [sp], #4

00002dba <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2dba:	b500      	push	{lr}
    2dbc:	b083      	sub	sp, #12
    2dbe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dc0:	9b01      	ldr	r3, [sp, #4]
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d002      	beq.n	2dcc <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2dc6:	9801      	ldr	r0, [sp, #4]
    2dc8:	f000 f95e 	bl	3088 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dcc:	bf00      	nop
    2dce:	b003      	add	sp, #12
    2dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00002dd4 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2dd4:	b500      	push	{lr}
    2dd6:	b083      	sub	sp, #12
    2dd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dda:	9b01      	ldr	r3, [sp, #4]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d002      	beq.n	2de6 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2de0:	9801      	ldr	r0, [sp, #4]
    2de2:	f000 f98b 	bl	30fc <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2de6:	bf00      	nop
    2de8:	b003      	add	sp, #12
    2dea:	f85d fb04 	ldr.w	pc, [sp], #4

00002dee <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dee:	b086      	sub	sp, #24
    2df0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2df2:	9b01      	ldr	r3, [sp, #4]
    2df4:	681a      	ldr	r2, [r3, #0]
    2df6:	4911      	ldr	r1, [pc, #68]	; (2e3c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2df8:	4613      	mov	r3, r2
    2dfa:	00db      	lsls	r3, r3, #3
    2dfc:	4413      	add	r3, r2
    2dfe:	440b      	add	r3, r1
    2e00:	781b      	ldrb	r3, [r3, #0]
    2e02:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e04:	9b01      	ldr	r3, [sp, #4]
    2e06:	685b      	ldr	r3, [r3, #4]
    2e08:	4a0d      	ldr	r2, [pc, #52]	; (2e40 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2e0a:	5cd3      	ldrb	r3, [r2, r3]
    2e0c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e0e:	4a0d      	ldr	r2, [pc, #52]	; (2e44 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e10:	9b05      	ldr	r3, [sp, #20]
    2e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e16:	681b      	ldr	r3, [r3, #0]
    2e18:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2e1a:	9b03      	ldr	r3, [sp, #12]
    2e1c:	f023 0307 	bic.w	r3, r3, #7
    2e20:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2e22:	9a03      	ldr	r2, [sp, #12]
    2e24:	9b04      	ldr	r3, [sp, #16]
    2e26:	4313      	orrs	r3, r2
    2e28:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e2a:	4a06      	ldr	r2, [pc, #24]	; (2e44 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e2c:	9b05      	ldr	r3, [sp, #20]
    2e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e32:	9a03      	ldr	r2, [sp, #12]
    2e34:	601a      	str	r2, [r3, #0]
}
    2e36:	bf00      	nop
    2e38:	b006      	add	sp, #24
    2e3a:	4770      	bx	lr
    2e3c:	00008428 	.word	0x00008428
    2e40:	00008820 	.word	0x00008820
    2e44:	00008864 	.word	0x00008864

00002e48 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e48:	b086      	sub	sp, #24
    2e4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e4c:	9b01      	ldr	r3, [sp, #4]
    2e4e:	681a      	ldr	r2, [r3, #0]
    2e50:	4911      	ldr	r1, [pc, #68]	; (2e98 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e52:	4613      	mov	r3, r2
    2e54:	00db      	lsls	r3, r3, #3
    2e56:	4413      	add	r3, r2
    2e58:	440b      	add	r3, r1
    2e5a:	781b      	ldrb	r3, [r3, #0]
    2e5c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e5e:	9b01      	ldr	r3, [sp, #4]
    2e60:	685b      	ldr	r3, [r3, #4]
    2e62:	4a0e      	ldr	r2, [pc, #56]	; (2e9c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e64:	5cd3      	ldrb	r3, [r2, r3]
    2e66:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e68:	4a0d      	ldr	r2, [pc, #52]	; (2ea0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e6a:	9b05      	ldr	r3, [sp, #20]
    2e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e70:	681b      	ldr	r3, [r3, #0]
    2e72:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e74:	9b03      	ldr	r3, [sp, #12]
    2e76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e7a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e7c:	9b04      	ldr	r3, [sp, #16]
    2e7e:	021b      	lsls	r3, r3, #8
    2e80:	9a03      	ldr	r2, [sp, #12]
    2e82:	4313      	orrs	r3, r2
    2e84:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e86:	4a06      	ldr	r2, [pc, #24]	; (2ea0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e88:	9b05      	ldr	r3, [sp, #20]
    2e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e8e:	9a03      	ldr	r2, [sp, #12]
    2e90:	601a      	str	r2, [r3, #0]
}
    2e92:	bf00      	nop
    2e94:	b006      	add	sp, #24
    2e96:	4770      	bx	lr
    2e98:	00008428 	.word	0x00008428
    2e9c:	00008820 	.word	0x00008820
    2ea0:	00008864 	.word	0x00008864

00002ea4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ea4:	b084      	sub	sp, #16
    2ea6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ea8:	4b09      	ldr	r3, [pc, #36]	; (2ed0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2eaa:	695b      	ldr	r3, [r3, #20]
    2eac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2eae:	9b03      	ldr	r3, [sp, #12]
    2eb0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2eb4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2eb6:	9b01      	ldr	r3, [sp, #4]
    2eb8:	685b      	ldr	r3, [r3, #4]
    2eba:	3b01      	subs	r3, #1
    2ebc:	041b      	lsls	r3, r3, #16
    2ebe:	9a03      	ldr	r2, [sp, #12]
    2ec0:	4313      	orrs	r3, r2
    2ec2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ec4:	4a02      	ldr	r2, [pc, #8]	; (2ed0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2ec6:	9b03      	ldr	r3, [sp, #12]
    2ec8:	6153      	str	r3, [r2, #20]
}
    2eca:	bf00      	nop
    2ecc:	b004      	add	sp, #16
    2ece:	4770      	bx	lr
    2ed0:	40064000 	.word	0x40064000

00002ed4 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ed4:	b084      	sub	sp, #16
    2ed6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ed8:	4b09      	ldr	r3, [pc, #36]	; (2f00 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2eda:	695b      	ldr	r3, [r3, #20]
    2edc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2ede:	9b03      	ldr	r3, [sp, #12]
    2ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2ee4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2ee6:	9b01      	ldr	r3, [sp, #4]
    2ee8:	685b      	ldr	r3, [r3, #4]
    2eea:	3b01      	subs	r3, #1
    2eec:	011b      	lsls	r3, r3, #4
    2eee:	9a03      	ldr	r2, [sp, #12]
    2ef0:	4313      	orrs	r3, r2
    2ef2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ef4:	4a02      	ldr	r2, [pc, #8]	; (2f00 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2ef6:	9b03      	ldr	r3, [sp, #12]
    2ef8:	6153      	str	r3, [r2, #20]
}
    2efa:	bf00      	nop
    2efc:	b004      	add	sp, #16
    2efe:	4770      	bx	lr
    2f00:	40064000 	.word	0x40064000

00002f04 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f04:	b084      	sub	sp, #16
    2f06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2f08:	4b09      	ldr	r3, [pc, #36]	; (2f30 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f0a:	695b      	ldr	r3, [r3, #20]
    2f0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2f0e:	9b03      	ldr	r3, [sp, #12]
    2f10:	f023 030f 	bic.w	r3, r3, #15
    2f14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2f16:	9b01      	ldr	r3, [sp, #4]
    2f18:	685b      	ldr	r3, [r3, #4]
    2f1a:	3b01      	subs	r3, #1
    2f1c:	9a03      	ldr	r2, [sp, #12]
    2f1e:	4313      	orrs	r3, r2
    2f20:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2f22:	4a03      	ldr	r2, [pc, #12]	; (2f30 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f24:	9b03      	ldr	r3, [sp, #12]
    2f26:	6153      	str	r3, [r2, #20]
}
    2f28:	bf00      	nop
    2f2a:	b004      	add	sp, #16
    2f2c:	4770      	bx	lr
    2f2e:	bf00      	nop
    2f30:	40064000 	.word	0x40064000

00002f34 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f34:	b084      	sub	sp, #16
    2f36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f38:	4b09      	ldr	r3, [pc, #36]	; (2f60 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f3a:	699b      	ldr	r3, [r3, #24]
    2f3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2f3e:	9b03      	ldr	r3, [sp, #12]
    2f40:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2f46:	9b01      	ldr	r3, [sp, #4]
    2f48:	685b      	ldr	r3, [r3, #4]
    2f4a:	3b01      	subs	r3, #1
    2f4c:	041b      	lsls	r3, r3, #16
    2f4e:	9a03      	ldr	r2, [sp, #12]
    2f50:	4313      	orrs	r3, r2
    2f52:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f54:	4a02      	ldr	r2, [pc, #8]	; (2f60 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f56:	9b03      	ldr	r3, [sp, #12]
    2f58:	6193      	str	r3, [r2, #24]
}
    2f5a:	bf00      	nop
    2f5c:	b004      	add	sp, #16
    2f5e:	4770      	bx	lr
    2f60:	40064000 	.word	0x40064000

00002f64 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f64:	b084      	sub	sp, #16
    2f66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f68:	4b09      	ldr	r3, [pc, #36]	; (2f90 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f6a:	699b      	ldr	r3, [r3, #24]
    2f6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f6e:	9b03      	ldr	r3, [sp, #12]
    2f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f74:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f76:	9b01      	ldr	r3, [sp, #4]
    2f78:	685b      	ldr	r3, [r3, #4]
    2f7a:	3b01      	subs	r3, #1
    2f7c:	011b      	lsls	r3, r3, #4
    2f7e:	9a03      	ldr	r2, [sp, #12]
    2f80:	4313      	orrs	r3, r2
    2f82:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f84:	4a02      	ldr	r2, [pc, #8]	; (2f90 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f86:	9b03      	ldr	r3, [sp, #12]
    2f88:	6193      	str	r3, [r2, #24]
}
    2f8a:	bf00      	nop
    2f8c:	b004      	add	sp, #16
    2f8e:	4770      	bx	lr
    2f90:	40064000 	.word	0x40064000

00002f94 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f94:	b084      	sub	sp, #16
    2f96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f98:	4b09      	ldr	r3, [pc, #36]	; (2fc0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f9a:	699b      	ldr	r3, [r3, #24]
    2f9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f9e:	9b03      	ldr	r3, [sp, #12]
    2fa0:	f023 030f 	bic.w	r3, r3, #15
    2fa4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2fa6:	9b01      	ldr	r3, [sp, #4]
    2fa8:	685b      	ldr	r3, [r3, #4]
    2faa:	3b01      	subs	r3, #1
    2fac:	9a03      	ldr	r2, [sp, #12]
    2fae:	4313      	orrs	r3, r2
    2fb0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2fb2:	4a03      	ldr	r2, [pc, #12]	; (2fc0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2fb4:	9b03      	ldr	r3, [sp, #12]
    2fb6:	6193      	str	r3, [r2, #24]
}
    2fb8:	bf00      	nop
    2fba:	b004      	add	sp, #16
    2fbc:	4770      	bx	lr
    2fbe:	bf00      	nop
    2fc0:	40064000 	.word	0x40064000

00002fc4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fc4:	b084      	sub	sp, #16
    2fc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fc8:	4b09      	ldr	r3, [pc, #36]	; (2ff0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fca:	69db      	ldr	r3, [r3, #28]
    2fcc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2fce:	9b03      	ldr	r3, [sp, #12]
    2fd0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2fd4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2fd6:	9b01      	ldr	r3, [sp, #4]
    2fd8:	685b      	ldr	r3, [r3, #4]
    2fda:	3b01      	subs	r3, #1
    2fdc:	041b      	lsls	r3, r3, #16
    2fde:	9a03      	ldr	r2, [sp, #12]
    2fe0:	4313      	orrs	r3, r2
    2fe2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fe4:	4a02      	ldr	r2, [pc, #8]	; (2ff0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fe6:	9b03      	ldr	r3, [sp, #12]
    2fe8:	61d3      	str	r3, [r2, #28]
}
    2fea:	bf00      	nop
    2fec:	b004      	add	sp, #16
    2fee:	4770      	bx	lr
    2ff0:	40064000 	.word	0x40064000

00002ff4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ff4:	b084      	sub	sp, #16
    2ff6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2ff8:	4b09      	ldr	r3, [pc, #36]	; (3020 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2ffa:	69db      	ldr	r3, [r3, #28]
    2ffc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2ffe:	9b03      	ldr	r3, [sp, #12]
    3000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3004:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3006:	9b01      	ldr	r3, [sp, #4]
    3008:	685b      	ldr	r3, [r3, #4]
    300a:	3b01      	subs	r3, #1
    300c:	011b      	lsls	r3, r3, #4
    300e:	9a03      	ldr	r2, [sp, #12]
    3010:	4313      	orrs	r3, r2
    3012:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3014:	4a02      	ldr	r2, [pc, #8]	; (3020 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3016:	9b03      	ldr	r3, [sp, #12]
    3018:	61d3      	str	r3, [r2, #28]
}
    301a:	bf00      	nop
    301c:	b004      	add	sp, #16
    301e:	4770      	bx	lr
    3020:	40064000 	.word	0x40064000

00003024 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3024:	b084      	sub	sp, #16
    3026:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3028:	4b09      	ldr	r3, [pc, #36]	; (3050 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    302a:	69db      	ldr	r3, [r3, #28]
    302c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    302e:	9b03      	ldr	r3, [sp, #12]
    3030:	f023 030f 	bic.w	r3, r3, #15
    3034:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3036:	9b01      	ldr	r3, [sp, #4]
    3038:	685b      	ldr	r3, [r3, #4]
    303a:	3b01      	subs	r3, #1
    303c:	9a03      	ldr	r2, [sp, #12]
    303e:	4313      	orrs	r3, r2
    3040:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3042:	4a03      	ldr	r2, [pc, #12]	; (3050 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3044:	9b03      	ldr	r3, [sp, #12]
    3046:	61d3      	str	r3, [r2, #28]
}
    3048:	bf00      	nop
    304a:	b004      	add	sp, #16
    304c:	4770      	bx	lr
    304e:	bf00      	nop
    3050:	40064000 	.word	0x40064000

00003054 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3054:	b084      	sub	sp, #16
    3056:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3058:	4b0a      	ldr	r3, [pc, #40]	; (3084 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    305a:	685b      	ldr	r3, [r3, #4]
    305c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    305e:	9b03      	ldr	r3, [sp, #12]
    3060:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3064:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3066:	9b01      	ldr	r3, [sp, #4]
    3068:	685b      	ldr	r3, [r3, #4]
    306a:	3b01      	subs	r3, #1
    306c:	021b      	lsls	r3, r3, #8
    306e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3072:	9a03      	ldr	r2, [sp, #12]
    3074:	4313      	orrs	r3, r2
    3076:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3078:	4a02      	ldr	r2, [pc, #8]	; (3084 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    307a:	9b03      	ldr	r3, [sp, #12]
    307c:	6053      	str	r3, [r2, #4]
}
    307e:	bf00      	nop
    3080:	b004      	add	sp, #16
    3082:	4770      	bx	lr
    3084:	40048000 	.word	0x40048000

00003088 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3088:	b084      	sub	sp, #16
    308a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    308c:	4919      	ldr	r1, [pc, #100]	; (30f4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    308e:	9b01      	ldr	r3, [sp, #4]
    3090:	681a      	ldr	r2, [r3, #0]
    3092:	4819      	ldr	r0, [pc, #100]	; (30f8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3094:	4613      	mov	r3, r2
    3096:	00db      	lsls	r3, r3, #3
    3098:	4413      	add	r3, r2
    309a:	4403      	add	r3, r0
    309c:	3305      	adds	r3, #5
    309e:	781b      	ldrb	r3, [r3, #0]
    30a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    30a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    30a6:	9b03      	ldr	r3, [sp, #12]
    30a8:	f023 030f 	bic.w	r3, r3, #15
    30ac:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	685b      	ldr	r3, [r3, #4]
    30b2:	3b01      	subs	r3, #1
    30b4:	f003 0307 	and.w	r3, r3, #7
    30b8:	9a03      	ldr	r2, [sp, #12]
    30ba:	4313      	orrs	r3, r2
    30bc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    30be:	9b01      	ldr	r3, [sp, #4]
    30c0:	7a1b      	ldrb	r3, [r3, #8]
    30c2:	3b01      	subs	r3, #1
    30c4:	00db      	lsls	r3, r3, #3
    30c6:	f003 0308 	and.w	r3, r3, #8
    30ca:	9a03      	ldr	r2, [sp, #12]
    30cc:	4313      	orrs	r3, r2
    30ce:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    30d0:	4908      	ldr	r1, [pc, #32]	; (30f4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30d2:	9b01      	ldr	r3, [sp, #4]
    30d4:	681a      	ldr	r2, [r3, #0]
    30d6:	4808      	ldr	r0, [pc, #32]	; (30f8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30d8:	4613      	mov	r3, r2
    30da:	00db      	lsls	r3, r3, #3
    30dc:	4413      	add	r3, r2
    30de:	4403      	add	r3, r0
    30e0:	3305      	adds	r3, #5
    30e2:	781b      	ldrb	r3, [r3, #0]
    30e4:	461a      	mov	r2, r3
    30e6:	9b03      	ldr	r3, [sp, #12]
    30e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    30ec:	bf00      	nop
    30ee:	b004      	add	sp, #16
    30f0:	4770      	bx	lr
    30f2:	bf00      	nop
    30f4:	40065000 	.word	0x40065000
    30f8:	00008428 	.word	0x00008428

000030fc <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30fc:	b084      	sub	sp, #16
    30fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3100:	4b10      	ldr	r3, [pc, #64]	; (3144 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3104:	4a0f      	ldr	r2, [pc, #60]	; (3144 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    310a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    310c:	4b0d      	ldr	r3, [pc, #52]	; (3144 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    310e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3110:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3112:	9b03      	ldr	r3, [sp, #12]
    3114:	f023 030f 	bic.w	r3, r3, #15
    3118:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    311a:	9b01      	ldr	r3, [sp, #4]
    311c:	685b      	ldr	r3, [r3, #4]
    311e:	3b01      	subs	r3, #1
    3120:	005b      	lsls	r3, r3, #1
    3122:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3126:	9b01      	ldr	r3, [sp, #4]
    3128:	7a1b      	ldrb	r3, [r3, #8]
    312a:	3b01      	subs	r3, #1
    312c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3130:	4313      	orrs	r3, r2
    3132:	9a03      	ldr	r2, [sp, #12]
    3134:	4313      	orrs	r3, r2
    3136:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3138:	4a02      	ldr	r2, [pc, #8]	; (3144 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    313a:	9b03      	ldr	r3, [sp, #12]
    313c:	6693      	str	r3, [r2, #104]	; 0x68
}
    313e:	bf00      	nop
    3140:	b004      	add	sp, #16
    3142:	4770      	bx	lr
    3144:	40048000 	.word	0x40048000

00003148 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3148:	b082      	sub	sp, #8
    314a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    314c:	bf00      	nop
    314e:	b002      	add	sp, #8
    3150:	4770      	bx	lr
	...

00003154 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3154:	b082      	sub	sp, #8
    3156:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3158:	bf00      	nop
    315a:	b002      	add	sp, #8
    315c:	4770      	bx	lr

0000315e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    315e:	b082      	sub	sp, #8
    3160:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3162:	bf00      	nop
    3164:	b002      	add	sp, #8
    3166:	4770      	bx	lr

00003168 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3168:	b500      	push	{lr}
    316a:	b083      	sub	sp, #12
    316c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    316e:	9b01      	ldr	r3, [sp, #4]
    3170:	2b00      	cmp	r3, #0
    3172:	d002      	beq.n	317a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3174:	9801      	ldr	r0, [sp, #4]
    3176:	f000 f86a 	bl	324e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    317a:	bf00      	nop
    317c:	b003      	add	sp, #12
    317e:	f85d fb04 	ldr.w	pc, [sp], #4

00003182 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3182:	b500      	push	{lr}
    3184:	b083      	sub	sp, #12
    3186:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3188:	9b01      	ldr	r3, [sp, #4]
    318a:	2b00      	cmp	r3, #0
    318c:	d002      	beq.n	3194 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    318e:	9801      	ldr	r0, [sp, #4]
    3190:	f000 f884 	bl	329c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3194:	bf00      	nop
    3196:	b003      	add	sp, #12
    3198:	f85d fb04 	ldr.w	pc, [sp], #4

0000319c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    319c:	b500      	push	{lr}
    319e:	b089      	sub	sp, #36	; 0x24
    31a0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    31a2:	2300      	movs	r3, #0
    31a4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    31a8:	9b01      	ldr	r3, [sp, #4]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d031      	beq.n	3212 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    31ae:	4b1b      	ldr	r3, [pc, #108]	; (321c <Clock_Ip_CompleteSOSC+0x80>)
    31b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31b4:	f003 0301 	and.w	r3, r3, #1
    31b8:	2b00      	cmp	r3, #0
    31ba:	d02a      	beq.n	3212 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    31bc:	aa03      	add	r2, sp, #12
    31be:	a904      	add	r1, sp, #16
    31c0:	a805      	add	r0, sp, #20
    31c2:	f24c 3350 	movw	r3, #50000	; 0xc350
    31c6:	f7ff fd1d 	bl	2c04 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    31ca:	4b14      	ldr	r3, [pc, #80]	; (321c <Clock_Ip_CompleteSOSC+0x80>)
    31cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31d0:	0e1b      	lsrs	r3, r3, #24
    31d2:	f003 0301 	and.w	r3, r3, #1
    31d6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31d8:	9a03      	ldr	r2, [sp, #12]
    31da:	a904      	add	r1, sp, #16
    31dc:	ab05      	add	r3, sp, #20
    31de:	4618      	mov	r0, r3
    31e0:	f7ff fd2a 	bl	2c38 <Clock_Ip_TimeoutExpired>
    31e4:	4603      	mov	r3, r0
    31e6:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    31ea:	9b06      	ldr	r3, [sp, #24]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d106      	bne.n	31fe <Clock_Ip_CompleteSOSC+0x62>
    31f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31f4:	f083 0301 	eor.w	r3, r3, #1
    31f8:	b2db      	uxtb	r3, r3
    31fa:	2b00      	cmp	r3, #0
    31fc:	d1e5      	bne.n	31ca <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    31fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3202:	2b00      	cmp	r3, #0
    3204:	d005      	beq.n	3212 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3206:	9b01      	ldr	r3, [sp, #4]
    3208:	681b      	ldr	r3, [r3, #0]
    320a:	4619      	mov	r1, r3
    320c:	2001      	movs	r0, #1
    320e:	f7ff fce9 	bl	2be4 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3212:	bf00      	nop
    3214:	b009      	add	sp, #36	; 0x24
    3216:	f85d fb04 	ldr.w	pc, [sp], #4
    321a:	bf00      	nop
    321c:	40064000 	.word	0x40064000

00003220 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3220:	b500      	push	{lr}
    3222:	b083      	sub	sp, #12
    3224:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3226:	9801      	ldr	r0, [sp, #4]
    3228:	f000 f8c0 	bl	33ac <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    322c:	bf00      	nop
    322e:	b003      	add	sp, #12
    3230:	f85d fb04 	ldr.w	pc, [sp], #4

00003234 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3234:	b500      	push	{lr}
    3236:	b083      	sub	sp, #12
    3238:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    323a:	9b01      	ldr	r3, [sp, #4]
    323c:	2b00      	cmp	r3, #0
    323e:	d002      	beq.n	3246 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3240:	9801      	ldr	r0, [sp, #4]
    3242:	f000 f8c3 	bl	33cc <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3246:	bf00      	nop
    3248:	b003      	add	sp, #12
    324a:	f85d fb04 	ldr.w	pc, [sp], #4

0000324e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    324e:	b082      	sub	sp, #8
    3250:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3252:	4b11      	ldr	r3, [pc, #68]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3254:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3258:	4a0f      	ldr	r2, [pc, #60]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    325a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    325e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3262:	4b0d      	ldr	r3, [pc, #52]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3264:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3268:	4a0b      	ldr	r2, [pc, #44]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    326e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3272:	4b09      	ldr	r3, [pc, #36]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3274:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3278:	4a07      	ldr	r2, [pc, #28]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    327a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    327e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3282:	4b05      	ldr	r3, [pc, #20]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3284:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3288:	4a03      	ldr	r2, [pc, #12]	; (3298 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    328a:	f023 0301 	bic.w	r3, r3, #1
    328e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3292:	bf00      	nop
    3294:	b002      	add	sp, #8
    3296:	4770      	bx	lr
    3298:	40064000 	.word	0x40064000

0000329c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    329c:	b082      	sub	sp, #8
    329e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    32a0:	9b01      	ldr	r3, [sp, #4]
    32a2:	891b      	ldrh	r3, [r3, #8]
    32a4:	2b01      	cmp	r3, #1
    32a6:	d174      	bne.n	3392 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    32a8:	9b01      	ldr	r3, [sp, #4]
    32aa:	7bdb      	ldrb	r3, [r3, #15]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d002      	beq.n	32b6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    32b0:	2b01      	cmp	r3, #1
    32b2:	d009      	beq.n	32c8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    32b4:	e011      	b.n	32da <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    32b6:	4b39      	ldr	r3, [pc, #228]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32bc:	4a37      	ldr	r2, [pc, #220]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32be:	f023 0308 	bic.w	r3, r3, #8
    32c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32c6:	e008      	b.n	32da <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    32c8:	4b34      	ldr	r3, [pc, #208]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32ce:	4a33      	ldr	r2, [pc, #204]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32d0:	f043 0308 	orr.w	r3, r3, #8
    32d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32d8:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    32da:	4b30      	ldr	r3, [pc, #192]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e0:	4a2e      	ldr	r2, [pc, #184]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    32e6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    32ea:	9b01      	ldr	r3, [sp, #4]
    32ec:	685b      	ldr	r3, [r3, #4]
    32ee:	4a2c      	ldr	r2, [pc, #176]	; (33a0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    32f0:	4293      	cmp	r3, r2
    32f2:	d90d      	bls.n	3310 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	685b      	ldr	r3, [r3, #4]
    32f8:	4a2a      	ldr	r2, [pc, #168]	; (33a4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    32fa:	4293      	cmp	r3, r2
    32fc:	d208      	bcs.n	3310 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    32fe:	4b27      	ldr	r3, [pc, #156]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3300:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3304:	4a25      	ldr	r2, [pc, #148]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3306:	f043 0320 	orr.w	r3, r3, #32
    330a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    330e:	e007      	b.n	3320 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3310:	4b22      	ldr	r3, [pc, #136]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3312:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3316:	4a21      	ldr	r2, [pc, #132]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3318:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    331c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3320:	9b01      	ldr	r3, [sp, #4]
    3322:	7b1b      	ldrb	r3, [r3, #12]
    3324:	2b00      	cmp	r3, #0
    3326:	d108      	bne.n	333a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3328:	4b1c      	ldr	r3, [pc, #112]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    332a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    332e:	4a1b      	ldr	r2, [pc, #108]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3330:	f043 0304 	orr.w	r3, r3, #4
    3334:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3338:	e007      	b.n	334a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    333a:	4b18      	ldr	r3, [pc, #96]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    333c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3340:	4a16      	ldr	r2, [pc, #88]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3342:	f023 0304 	bic.w	r3, r3, #4
    3346:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    334a:	9b01      	ldr	r3, [sp, #4]
    334c:	7c1b      	ldrb	r3, [r3, #16]
    334e:	2b02      	cmp	r3, #2
    3350:	d011      	beq.n	3376 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3352:	2b02      	cmp	r3, #2
    3354:	dc14      	bgt.n	3380 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3356:	2b00      	cmp	r3, #0
    3358:	d002      	beq.n	3360 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    335a:	2b01      	cmp	r3, #1
    335c:	d005      	beq.n	336a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    335e:	e00f      	b.n	3380 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3360:	4b0e      	ldr	r3, [pc, #56]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3362:	2201      	movs	r2, #1
    3364:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3368:	e014      	b.n	3394 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    336a:	4b0c      	ldr	r3, [pc, #48]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    336c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3370:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3374:	e00e      	b.n	3394 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3376:	4b09      	ldr	r3, [pc, #36]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3378:	4a0b      	ldr	r2, [pc, #44]	; (33a8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    337a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    337e:	e009      	b.n	3394 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3380:	4b06      	ldr	r3, [pc, #24]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3382:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3386:	4a05      	ldr	r2, [pc, #20]	; (339c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3388:	f043 0301 	orr.w	r3, r3, #1
    338c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3390:	e000      	b.n	3394 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3392:	bf00      	nop
}
    3394:	bf00      	nop
    3396:	b002      	add	sp, #8
    3398:	4770      	bx	lr
    339a:	bf00      	nop
    339c:	40064000 	.word	0x40064000
    33a0:	003d08ff 	.word	0x003d08ff
    33a4:	007a1200 	.word	0x007a1200
    33a8:	00030001 	.word	0x00030001

000033ac <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    33ac:	b082      	sub	sp, #8
    33ae:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    33b0:	4b05      	ldr	r3, [pc, #20]	; (33c8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    33b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33b6:	4a04      	ldr	r2, [pc, #16]	; (33c8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    33b8:	f023 0301 	bic.w	r3, r3, #1
    33bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    33c0:	bf00      	nop
    33c2:	b002      	add	sp, #8
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop
    33c8:	40064000 	.word	0x40064000

000033cc <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    33cc:	b082      	sub	sp, #8
    33ce:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    33d0:	9b01      	ldr	r3, [sp, #4]
    33d2:	891b      	ldrh	r3, [r3, #8]
    33d4:	2b01      	cmp	r3, #1
    33d6:	d107      	bne.n	33e8 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33d8:	4b05      	ldr	r3, [pc, #20]	; (33f0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33de:	4a04      	ldr	r2, [pc, #16]	; (33f0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33e0:	f043 0301 	orr.w	r3, r3, #1
    33e4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    33e8:	bf00      	nop
    33ea:	b002      	add	sp, #8
    33ec:	4770      	bx	lr
    33ee:	bf00      	nop
    33f0:	40064000 	.word	0x40064000

000033f4 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    33f4:	b082      	sub	sp, #8
    33f6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33f8:	bf00      	nop
    33fa:	b002      	add	sp, #8
    33fc:	4770      	bx	lr

000033fe <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    33fe:	b082      	sub	sp, #8
    3400:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3402:	2300      	movs	r3, #0
}
    3404:	4618      	mov	r0, r3
    3406:	b002      	add	sp, #8
    3408:	4770      	bx	lr

0000340a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    340a:	b082      	sub	sp, #8
    340c:	9001      	str	r0, [sp, #4]
    340e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3410:	bf00      	nop
    3412:	b002      	add	sp, #8
    3414:	4770      	bx	lr
	...

00003418 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3418:	b082      	sub	sp, #8
    341a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    341c:	bf00      	nop
    341e:	b002      	add	sp, #8
    3420:	4770      	bx	lr

00003422 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3422:	b082      	sub	sp, #8
    3424:	9001      	str	r0, [sp, #4]
    3426:	460b      	mov	r3, r1
    3428:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    342c:	bf00      	nop
    342e:	b002      	add	sp, #8
    3430:	4770      	bx	lr

00003432 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3432:	b500      	push	{lr}
    3434:	b083      	sub	sp, #12
    3436:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3438:	9b01      	ldr	r3, [sp, #4]
    343a:	2b00      	cmp	r3, #0
    343c:	d002      	beq.n	3444 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    343e:	9801      	ldr	r0, [sp, #4]
    3440:	f000 f8e7 	bl	3612 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3444:	bf00      	nop
    3446:	b003      	add	sp, #12
    3448:	f85d fb04 	ldr.w	pc, [sp], #4

0000344c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    344c:	b500      	push	{lr}
    344e:	b085      	sub	sp, #20
    3450:	9001      	str	r0, [sp, #4]
    3452:	460b      	mov	r3, r1
    3454:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3458:	9b01      	ldr	r3, [sp, #4]
    345a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    345c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3460:	2b00      	cmp	r3, #0
    3462:	d003      	beq.n	346c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3464:	2300      	movs	r3, #0
    3466:	f8ad 300c 	strh.w	r3, [sp, #12]
    346a:	e002      	b.n	3472 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    346c:	2301      	movs	r3, #1
    346e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3472:	ab02      	add	r3, sp, #8
    3474:	4618      	mov	r0, r3
    3476:	f7ff ffdc 	bl	3432 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    347a:	bf00      	nop
    347c:	b005      	add	sp, #20
    347e:	f85d fb04 	ldr.w	pc, [sp], #4

00003482 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3482:	b500      	push	{lr}
    3484:	b083      	sub	sp, #12
    3486:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3488:	9b01      	ldr	r3, [sp, #4]
    348a:	2b00      	cmp	r3, #0
    348c:	d002      	beq.n	3494 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    348e:	9801      	ldr	r0, [sp, #4]
    3490:	f000 f8d6 	bl	3640 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3494:	bf00      	nop
    3496:	b003      	add	sp, #12
    3498:	f85d fb04 	ldr.w	pc, [sp], #4

0000349c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    349c:	b500      	push	{lr}
    349e:	b085      	sub	sp, #20
    34a0:	9001      	str	r0, [sp, #4]
    34a2:	460b      	mov	r3, r1
    34a4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34a8:	9b01      	ldr	r3, [sp, #4]
    34aa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34b0:	2b00      	cmp	r3, #0
    34b2:	d003      	beq.n	34bc <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    34b4:	2300      	movs	r3, #0
    34b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    34ba:	e002      	b.n	34c2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34bc:	2301      	movs	r3, #1
    34be:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    34c2:	ab02      	add	r3, sp, #8
    34c4:	4618      	mov	r0, r3
    34c6:	f7ff ffdc 	bl	3482 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    34ca:	bf00      	nop
    34cc:	b005      	add	sp, #20
    34ce:	f85d fb04 	ldr.w	pc, [sp], #4

000034d2 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    34d2:	b500      	push	{lr}
    34d4:	b083      	sub	sp, #12
    34d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34d8:	9b01      	ldr	r3, [sp, #4]
    34da:	2b00      	cmp	r3, #0
    34dc:	d002      	beq.n	34e4 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    34de:	9801      	ldr	r0, [sp, #4]
    34e0:	f000 f8c6 	bl	3670 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34e4:	bf00      	nop
    34e6:	b003      	add	sp, #12
    34e8:	f85d fb04 	ldr.w	pc, [sp], #4

000034ec <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34ec:	b500      	push	{lr}
    34ee:	b085      	sub	sp, #20
    34f0:	9001      	str	r0, [sp, #4]
    34f2:	460b      	mov	r3, r1
    34f4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34f8:	9b01      	ldr	r3, [sp, #4]
    34fa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3500:	2b00      	cmp	r3, #0
    3502:	d003      	beq.n	350c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3504:	2300      	movs	r3, #0
    3506:	f8ad 300c 	strh.w	r3, [sp, #12]
    350a:	e002      	b.n	3512 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    350c:	2301      	movs	r3, #1
    350e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3512:	ab02      	add	r3, sp, #8
    3514:	4618      	mov	r0, r3
    3516:	f7ff ffdc 	bl	34d2 <Clock_Ip_ClockSetSimClkoutEnable>
}
    351a:	bf00      	nop
    351c:	b005      	add	sp, #20
    351e:	f85d fb04 	ldr.w	pc, [sp], #4

00003522 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3522:	b500      	push	{lr}
    3524:	b083      	sub	sp, #12
    3526:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3528:	9b01      	ldr	r3, [sp, #4]
    352a:	2b00      	cmp	r3, #0
    352c:	d002      	beq.n	3534 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    352e:	9801      	ldr	r0, [sp, #4]
    3530:	f000 f8b6 	bl	36a0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3534:	bf00      	nop
    3536:	b003      	add	sp, #12
    3538:	f85d fb04 	ldr.w	pc, [sp], #4

0000353c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    353c:	b500      	push	{lr}
    353e:	b085      	sub	sp, #20
    3540:	9001      	str	r0, [sp, #4]
    3542:	460b      	mov	r3, r1
    3544:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3548:	9b01      	ldr	r3, [sp, #4]
    354a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    354c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3550:	2b00      	cmp	r3, #0
    3552:	d003      	beq.n	355c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3554:	2300      	movs	r3, #0
    3556:	f8ad 300c 	strh.w	r3, [sp, #12]
    355a:	e002      	b.n	3562 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    355c:	2301      	movs	r3, #1
    355e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3562:	ab02      	add	r3, sp, #8
    3564:	4618      	mov	r0, r3
    3566:	f7ff ffdc 	bl	3522 <Clock_Ip_ClockSetPccCgcEnable>
}
    356a:	bf00      	nop
    356c:	b005      	add	sp, #20
    356e:	f85d fb04 	ldr.w	pc, [sp], #4

00003572 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3572:	b500      	push	{lr}
    3574:	b083      	sub	sp, #12
    3576:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3578:	9b01      	ldr	r3, [sp, #4]
    357a:	2b00      	cmp	r3, #0
    357c:	d002      	beq.n	3584 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    357e:	9801      	ldr	r0, [sp, #4]
    3580:	f000 f8bc 	bl	36fc <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3584:	bf00      	nop
    3586:	b003      	add	sp, #12
    3588:	f85d fb04 	ldr.w	pc, [sp], #4

0000358c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    358c:	b500      	push	{lr}
    358e:	b085      	sub	sp, #20
    3590:	9001      	str	r0, [sp, #4]
    3592:	460b      	mov	r3, r1
    3594:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3598:	9b01      	ldr	r3, [sp, #4]
    359a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    359c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35a0:	2b00      	cmp	r3, #0
    35a2:	d003      	beq.n	35ac <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    35a4:	2300      	movs	r3, #0
    35a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    35aa:	e002      	b.n	35b2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35ac:	2301      	movs	r3, #1
    35ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    35b2:	ab02      	add	r3, sp, #8
    35b4:	4618      	mov	r0, r3
    35b6:	f7ff ffdc 	bl	3572 <Clock_Ip_ClockSetSimGate>
}
    35ba:	bf00      	nop
    35bc:	b005      	add	sp, #20
    35be:	f85d fb04 	ldr.w	pc, [sp], #4

000035c2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    35c2:	b500      	push	{lr}
    35c4:	b083      	sub	sp, #12
    35c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35c8:	9b01      	ldr	r3, [sp, #4]
    35ca:	2b00      	cmp	r3, #0
    35cc:	d002      	beq.n	35d4 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    35ce:	9801      	ldr	r0, [sp, #4]
    35d0:	f000 f8c0 	bl	3754 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35d4:	bf00      	nop
    35d6:	b003      	add	sp, #12
    35d8:	f85d fb04 	ldr.w	pc, [sp], #4

000035dc <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    35dc:	b500      	push	{lr}
    35de:	b085      	sub	sp, #20
    35e0:	9001      	str	r0, [sp, #4]
    35e2:	460b      	mov	r3, r1
    35e4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35e8:	9b01      	ldr	r3, [sp, #4]
    35ea:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35f0:	2b00      	cmp	r3, #0
    35f2:	d003      	beq.n	35fc <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    35f4:	2300      	movs	r3, #0
    35f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    35fa:	e002      	b.n	3602 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35fc:	2301      	movs	r3, #1
    35fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3602:	ab02      	add	r3, sp, #8
    3604:	4618      	mov	r0, r3
    3606:	f7ff ffdc 	bl	35c2 <Clock_Ip_ClockSetSimTraceEnable>
}
    360a:	bf00      	nop
    360c:	b005      	add	sp, #20
    360e:	f85d fb04 	ldr.w	pc, [sp], #4

00003612 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3612:	b084      	sub	sp, #16
    3614:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3616:	4b09      	ldr	r3, [pc, #36]	; (363c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3618:	691b      	ldr	r3, [r3, #16]
    361a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    361c:	9b03      	ldr	r3, [sp, #12]
    361e:	f023 0301 	bic.w	r3, r3, #1
    3622:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3624:	9b01      	ldr	r3, [sp, #4]
    3626:	889b      	ldrh	r3, [r3, #4]
    3628:	461a      	mov	r2, r3
    362a:	9b03      	ldr	r3, [sp, #12]
    362c:	4313      	orrs	r3, r2
    362e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3630:	4a02      	ldr	r2, [pc, #8]	; (363c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3632:	9b03      	ldr	r3, [sp, #12]
    3634:	6113      	str	r3, [r2, #16]
}
    3636:	bf00      	nop
    3638:	b004      	add	sp, #16
    363a:	4770      	bx	lr
    363c:	40048000 	.word	0x40048000

00003640 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3640:	b084      	sub	sp, #16
    3642:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3644:	4b09      	ldr	r3, [pc, #36]	; (366c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3646:	691b      	ldr	r3, [r3, #16]
    3648:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    364a:	9b03      	ldr	r3, [sp, #12]
    364c:	f023 0302 	bic.w	r3, r3, #2
    3650:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3652:	9b01      	ldr	r3, [sp, #4]
    3654:	889b      	ldrh	r3, [r3, #4]
    3656:	005b      	lsls	r3, r3, #1
    3658:	9a03      	ldr	r2, [sp, #12]
    365a:	4313      	orrs	r3, r2
    365c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    365e:	4a03      	ldr	r2, [pc, #12]	; (366c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3660:	9b03      	ldr	r3, [sp, #12]
    3662:	6113      	str	r3, [r2, #16]
}
    3664:	bf00      	nop
    3666:	b004      	add	sp, #16
    3668:	4770      	bx	lr
    366a:	bf00      	nop
    366c:	40048000 	.word	0x40048000

00003670 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3670:	b084      	sub	sp, #16
    3672:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3674:	4b09      	ldr	r3, [pc, #36]	; (369c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3676:	685b      	ldr	r3, [r3, #4]
    3678:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    367a:	9b03      	ldr	r3, [sp, #12]
    367c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3680:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3682:	9b01      	ldr	r3, [sp, #4]
    3684:	889b      	ldrh	r3, [r3, #4]
    3686:	02db      	lsls	r3, r3, #11
    3688:	9a03      	ldr	r2, [sp, #12]
    368a:	4313      	orrs	r3, r2
    368c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    368e:	4a03      	ldr	r2, [pc, #12]	; (369c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3690:	9b03      	ldr	r3, [sp, #12]
    3692:	6053      	str	r3, [r2, #4]
}
    3694:	bf00      	nop
    3696:	b004      	add	sp, #16
    3698:	4770      	bx	lr
    369a:	bf00      	nop
    369c:	40048000 	.word	0x40048000

000036a0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36a0:	b084      	sub	sp, #16
    36a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    36a4:	4913      	ldr	r1, [pc, #76]	; (36f4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36a6:	9b01      	ldr	r3, [sp, #4]
    36a8:	681a      	ldr	r2, [r3, #0]
    36aa:	4813      	ldr	r0, [pc, #76]	; (36f8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36ac:	4613      	mov	r3, r2
    36ae:	00db      	lsls	r3, r3, #3
    36b0:	4413      	add	r3, r2
    36b2:	4403      	add	r3, r0
    36b4:	3306      	adds	r3, #6
    36b6:	781b      	ldrb	r3, [r3, #0]
    36b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    36bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    36be:	9b03      	ldr	r3, [sp, #12]
    36c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    36c4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    36c6:	9b01      	ldr	r3, [sp, #4]
    36c8:	889b      	ldrh	r3, [r3, #4]
    36ca:	079b      	lsls	r3, r3, #30
    36cc:	9a03      	ldr	r2, [sp, #12]
    36ce:	4313      	orrs	r3, r2
    36d0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    36d2:	4908      	ldr	r1, [pc, #32]	; (36f4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36d4:	9b01      	ldr	r3, [sp, #4]
    36d6:	681a      	ldr	r2, [r3, #0]
    36d8:	4807      	ldr	r0, [pc, #28]	; (36f8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36da:	4613      	mov	r3, r2
    36dc:	00db      	lsls	r3, r3, #3
    36de:	4413      	add	r3, r2
    36e0:	4403      	add	r3, r0
    36e2:	3306      	adds	r3, #6
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	461a      	mov	r2, r3
    36e8:	9b03      	ldr	r3, [sp, #12]
    36ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    36ee:	bf00      	nop
    36f0:	b004      	add	sp, #16
    36f2:	4770      	bx	lr
    36f4:	40065000 	.word	0x40065000
    36f8:	00008428 	.word	0x00008428

000036fc <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36fc:	b086      	sub	sp, #24
    36fe:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3700:	9b01      	ldr	r3, [sp, #4]
    3702:	889b      	ldrh	r3, [r3, #4]
    3704:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3706:	9b01      	ldr	r3, [sp, #4]
    3708:	681a      	ldr	r2, [r3, #0]
    370a:	4910      	ldr	r1, [pc, #64]	; (374c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    370c:	4613      	mov	r3, r2
    370e:	00db      	lsls	r3, r3, #3
    3710:	4413      	add	r3, r2
    3712:	440b      	add	r3, r1
    3714:	3306      	adds	r3, #6
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    371a:	4b0d      	ldr	r3, [pc, #52]	; (3750 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    371e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3720:	2201      	movs	r2, #1
    3722:	9b04      	ldr	r3, [sp, #16]
    3724:	fa02 f303 	lsl.w	r3, r2, r3
    3728:	43db      	mvns	r3, r3
    372a:	9a03      	ldr	r2, [sp, #12]
    372c:	4013      	ands	r3, r2
    372e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3730:	9a05      	ldr	r2, [sp, #20]
    3732:	9b04      	ldr	r3, [sp, #16]
    3734:	fa02 f303 	lsl.w	r3, r2, r3
    3738:	9a03      	ldr	r2, [sp, #12]
    373a:	4313      	orrs	r3, r2
    373c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    373e:	4a04      	ldr	r2, [pc, #16]	; (3750 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3740:	9b03      	ldr	r3, [sp, #12]
    3742:	6413      	str	r3, [r2, #64]	; 0x40
}
    3744:	bf00      	nop
    3746:	b006      	add	sp, #24
    3748:	4770      	bx	lr
    374a:	bf00      	nop
    374c:	00008428 	.word	0x00008428
    3750:	40048000 	.word	0x40048000

00003754 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3754:	b084      	sub	sp, #16
    3756:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3758:	4b0a      	ldr	r3, [pc, #40]	; (3784 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    375a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    375c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    375e:	9b01      	ldr	r3, [sp, #4]
    3760:	889b      	ldrh	r3, [r3, #4]
    3762:	2b01      	cmp	r3, #1
    3764:	d104      	bne.n	3770 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3766:	9b03      	ldr	r3, [sp, #12]
    3768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    376c:	9303      	str	r3, [sp, #12]
    376e:	e003      	b.n	3778 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3770:	9b03      	ldr	r3, [sp, #12]
    3772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3776:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3778:	4a02      	ldr	r2, [pc, #8]	; (3784 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    377a:	9b03      	ldr	r3, [sp, #12]
    377c:	6693      	str	r3, [r2, #104]	; 0x68
}
    377e:	bf00      	nop
    3780:	b004      	add	sp, #16
    3782:	4770      	bx	lr
    3784:	40048000 	.word	0x40048000

00003788 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3788:	b082      	sub	sp, #8
    378a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    378c:	bf00      	nop
    378e:	b002      	add	sp, #8
    3790:	4770      	bx	lr

00003792 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3792:	b082      	sub	sp, #8
    3794:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3796:	bf00      	nop
    3798:	b002      	add	sp, #8
    379a:	4770      	bx	lr

0000379c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    379c:	b500      	push	{lr}
    379e:	b083      	sub	sp, #12
    37a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37a2:	9b01      	ldr	r3, [sp, #4]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d002      	beq.n	37ae <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    37a8:	9801      	ldr	r0, [sp, #4]
    37aa:	f000 f8d1 	bl	3950 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ae:	bf00      	nop
    37b0:	b003      	add	sp, #12
    37b2:	f85d fb04 	ldr.w	pc, [sp], #4

000037b6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    37b6:	b500      	push	{lr}
    37b8:	b083      	sub	sp, #12
    37ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37bc:	9b01      	ldr	r3, [sp, #4]
    37be:	2b00      	cmp	r3, #0
    37c0:	d002      	beq.n	37c8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    37c2:	9801      	ldr	r0, [sp, #4]
    37c4:	f000 f950 	bl	3a68 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c8:	bf00      	nop
    37ca:	b003      	add	sp, #12
    37cc:	f85d fb04 	ldr.w	pc, [sp], #4

000037d0 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    37d0:	b500      	push	{lr}
    37d2:	b083      	sub	sp, #12
    37d4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    37d6:	9801      	ldr	r0, [sp, #4]
    37d8:	f000 f98e 	bl	3af8 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37dc:	bf00      	nop
    37de:	b003      	add	sp, #12
    37e0:	f85d fb04 	ldr.w	pc, [sp], #4

000037e4 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37e4:	b500      	push	{lr}
    37e6:	b083      	sub	sp, #12
    37e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ea:	9b01      	ldr	r3, [sp, #4]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d002      	beq.n	37f6 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    37f0:	9801      	ldr	r0, [sp, #4]
    37f2:	f000 f999 	bl	3b28 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f6:	bf00      	nop
    37f8:	b003      	add	sp, #12
    37fa:	f85d fb04 	ldr.w	pc, [sp], #4

000037fe <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37fe:	b500      	push	{lr}
    3800:	b083      	sub	sp, #12
    3802:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3804:	9b01      	ldr	r3, [sp, #4]
    3806:	2b00      	cmp	r3, #0
    3808:	d002      	beq.n	3810 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    380a:	9801      	ldr	r0, [sp, #4]
    380c:	f000 f9b0 	bl	3b70 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3810:	bf00      	nop
    3812:	b003      	add	sp, #12
    3814:	f85d fb04 	ldr.w	pc, [sp], #4

00003818 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3818:	b500      	push	{lr}
    381a:	b083      	sub	sp, #12
    381c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    381e:	9801      	ldr	r0, [sp, #4]
    3820:	f000 f9ba 	bl	3b98 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3824:	bf00      	nop
    3826:	b003      	add	sp, #12
    3828:	f85d fb04 	ldr.w	pc, [sp], #4

0000382c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    382c:	b500      	push	{lr}
    382e:	b083      	sub	sp, #12
    3830:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3832:	9b01      	ldr	r3, [sp, #4]
    3834:	2b00      	cmp	r3, #0
    3836:	d002      	beq.n	383e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3838:	9801      	ldr	r0, [sp, #4]
    383a:	f000 f9bd 	bl	3bb8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    383e:	bf00      	nop
    3840:	b003      	add	sp, #12
    3842:	f85d fb04 	ldr.w	pc, [sp], #4

00003846 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3846:	b500      	push	{lr}
    3848:	b083      	sub	sp, #12
    384a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    384c:	9b01      	ldr	r3, [sp, #4]
    384e:	2b00      	cmp	r3, #0
    3850:	d002      	beq.n	3858 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3852:	9801      	ldr	r0, [sp, #4]
    3854:	f000 f9d4 	bl	3c00 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3858:	bf00      	nop
    385a:	b003      	add	sp, #12
    385c:	f85d fb04 	ldr.w	pc, [sp], #4

00003860 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3860:	b500      	push	{lr}
    3862:	b083      	sub	sp, #12
    3864:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3866:	9801      	ldr	r0, [sp, #4]
    3868:	f000 f9de 	bl	3c28 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    386c:	bf00      	nop
    386e:	b003      	add	sp, #12
    3870:	f85d fb04 	ldr.w	pc, [sp], #4

00003874 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3874:	b500      	push	{lr}
    3876:	b089      	sub	sp, #36	; 0x24
    3878:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    387a:	2300      	movs	r3, #0
    387c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3880:	4b20      	ldr	r3, [pc, #128]	; (3904 <SetInputSouceSytemClock+0x90>)
    3882:	695b      	ldr	r3, [r3, #20]
    3884:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3886:	9b06      	ldr	r3, [sp, #24]
    3888:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    388c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    388e:	9b01      	ldr	r3, [sp, #4]
    3890:	061b      	lsls	r3, r3, #24
    3892:	9a06      	ldr	r2, [sp, #24]
    3894:	4313      	orrs	r3, r2
    3896:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3898:	4a1a      	ldr	r2, [pc, #104]	; (3904 <SetInputSouceSytemClock+0x90>)
    389a:	9b06      	ldr	r3, [sp, #24]
    389c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    389e:	aa02      	add	r2, sp, #8
    38a0:	a903      	add	r1, sp, #12
    38a2:	a804      	add	r0, sp, #16
    38a4:	f24c 3350 	movw	r3, #50000	; 0xc350
    38a8:	f7ff f9ac 	bl	2c04 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    38ac:	4b15      	ldr	r3, [pc, #84]	; (3904 <SetInputSouceSytemClock+0x90>)
    38ae:	691b      	ldr	r3, [r3, #16]
    38b0:	0e1b      	lsrs	r3, r3, #24
    38b2:	f003 030f 	and.w	r3, r3, #15
    38b6:	9a01      	ldr	r2, [sp, #4]
    38b8:	429a      	cmp	r2, r3
    38ba:	bf0c      	ite	eq
    38bc:	2301      	moveq	r3, #1
    38be:	2300      	movne	r3, #0
    38c0:	b2db      	uxtb	r3, r3
    38c2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    38c4:	9a02      	ldr	r2, [sp, #8]
    38c6:	a903      	add	r1, sp, #12
    38c8:	ab04      	add	r3, sp, #16
    38ca:	4618      	mov	r0, r3
    38cc:	f7ff f9b4 	bl	2c38 <Clock_Ip_TimeoutExpired>
    38d0:	4603      	mov	r3, r0
    38d2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    38d6:	9b05      	ldr	r3, [sp, #20]
    38d8:	2b00      	cmp	r3, #0
    38da:	d106      	bne.n	38ea <SetInputSouceSytemClock+0x76>
    38dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38e0:	f083 0301 	eor.w	r3, r3, #1
    38e4:	b2db      	uxtb	r3, r3
    38e6:	2b00      	cmp	r3, #0
    38e8:	d1e0      	bne.n	38ac <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    38ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d003      	beq.n	38fa <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    38f2:	2105      	movs	r1, #5
    38f4:	2001      	movs	r0, #1
    38f6:	f7ff f975 	bl	2be4 <Clock_Ip_ReportClockErrors>
    }
}
    38fa:	bf00      	nop
    38fc:	b009      	add	sp, #36	; 0x24
    38fe:	f85d fb04 	ldr.w	pc, [sp], #4
    3902:	bf00      	nop
    3904:	40064000 	.word	0x40064000

00003908 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3908:	b500      	push	{lr}
    390a:	b083      	sub	sp, #12
    390c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    390e:	9b01      	ldr	r3, [sp, #4]
    3910:	2b00      	cmp	r3, #0
    3912:	d002      	beq.n	391a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3914:	9801      	ldr	r0, [sp, #4]
    3916:	f000 f997 	bl	3c48 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    391a:	bf00      	nop
    391c:	b003      	add	sp, #12
    391e:	f85d fb04 	ldr.w	pc, [sp], #4

00003922 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3922:	b500      	push	{lr}
    3924:	b083      	sub	sp, #12
    3926:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3928:	9b01      	ldr	r3, [sp, #4]
    392a:	2b00      	cmp	r3, #0
    392c:	d002      	beq.n	3934 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    392e:	9801      	ldr	r0, [sp, #4]
    3930:	f000 fa7e 	bl	3e30 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3934:	bf00      	nop
    3936:	b003      	add	sp, #12
    3938:	f85d fb04 	ldr.w	pc, [sp], #4

0000393c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    393c:	b500      	push	{lr}
    393e:	b083      	sub	sp, #12
    3940:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3942:	9801      	ldr	r0, [sp, #4]
    3944:	f000 fab8 	bl	3eb8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3948:	bf00      	nop
    394a:	b003      	add	sp, #12
    394c:	f85d fb04 	ldr.w	pc, [sp], #4

00003950 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3950:	b500      	push	{lr}
    3952:	b08b      	sub	sp, #44	; 0x2c
    3954:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3956:	2300      	movs	r3, #0
    3958:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    395c:	9b01      	ldr	r3, [sp, #4]
    395e:	2b00      	cmp	r3, #0
    3960:	d10b      	bne.n	397a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3962:	2305      	movs	r3, #5
    3964:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3966:	2301      	movs	r3, #1
    3968:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    396c:	2301      	movs	r3, #1
    396e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3972:	2301      	movs	r3, #1
    3974:	f88d 3010 	strb.w	r3, [sp, #16]
    3978:	e00e      	b.n	3998 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    397a:	9b01      	ldr	r3, [sp, #4]
    397c:	681b      	ldr	r3, [r3, #0]
    397e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3980:	9b01      	ldr	r3, [sp, #4]
    3982:	79db      	ldrb	r3, [r3, #7]
    3984:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3988:	9b01      	ldr	r3, [sp, #4]
    398a:	889b      	ldrh	r3, [r3, #4]
    398c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3990:	9b01      	ldr	r3, [sp, #4]
    3992:	7a1b      	ldrb	r3, [r3, #8]
    3994:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3998:	4b32      	ldr	r3, [pc, #200]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    399a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    399e:	4a31      	ldr	r2, [pc, #196]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    39a8:	4b2e      	ldr	r3, [pc, #184]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ae:	4a2d      	ldr	r2, [pc, #180]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b0:	f023 0301 	bic.w	r3, r3, #1
    39b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    39b8:	4b2a      	ldr	r3, [pc, #168]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39be:	4a29      	ldr	r2, [pc, #164]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c0:	f023 0304 	bic.w	r3, r3, #4
    39c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    39c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    39cc:	2b01      	cmp	r3, #1
    39ce:	d144      	bne.n	3a5a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    39d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    39d4:	4a23      	ldr	r2, [pc, #140]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39d6:	f003 0301 	and.w	r3, r3, #1
    39da:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39de:	4b21      	ldr	r3, [pc, #132]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39e4:	4a1f      	ldr	r2, [pc, #124]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39e6:	f043 0301 	orr.w	r3, r3, #1
    39ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    39ee:	4b1d      	ldr	r3, [pc, #116]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    39f8:	009b      	lsls	r3, r3, #2
    39fa:	f003 0304 	and.w	r3, r3, #4
    39fe:	4919      	ldr	r1, [pc, #100]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a00:	4313      	orrs	r3, r2
    3a02:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a06:	aa05      	add	r2, sp, #20
    3a08:	a906      	add	r1, sp, #24
    3a0a:	a807      	add	r0, sp, #28
    3a0c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a10:	f7ff f8f8 	bl	2c04 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a14:	4b13      	ldr	r3, [pc, #76]	; (3a64 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a1a:	0e1b      	lsrs	r3, r3, #24
    3a1c:	f003 0301 	and.w	r3, r3, #1
    3a20:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a22:	9a05      	ldr	r2, [sp, #20]
    3a24:	a906      	add	r1, sp, #24
    3a26:	ab07      	add	r3, sp, #28
    3a28:	4618      	mov	r0, r3
    3a2a:	f7ff f905 	bl	2c38 <Clock_Ip_TimeoutExpired>
    3a2e:	4603      	mov	r3, r0
    3a30:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a34:	9b08      	ldr	r3, [sp, #32]
    3a36:	2b00      	cmp	r3, #0
    3a38:	d106      	bne.n	3a48 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3a3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a3e:	f083 0301 	eor.w	r3, r3, #1
    3a42:	b2db      	uxtb	r3, r3
    3a44:	2b00      	cmp	r3, #0
    3a46:	d1e5      	bne.n	3a14 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a48:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d004      	beq.n	3a5a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a50:	9b02      	ldr	r3, [sp, #8]
    3a52:	4619      	mov	r1, r3
    3a54:	2001      	movs	r0, #1
    3a56:	f7ff f8c5 	bl	2be4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a5a:	bf00      	nop
    3a5c:	b00b      	add	sp, #44	; 0x2c
    3a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a62:	bf00      	nop
    3a64:	40064000 	.word	0x40064000

00003a68 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a68:	b500      	push	{lr}
    3a6a:	b089      	sub	sp, #36	; 0x24
    3a6c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a6e:	2300      	movs	r3, #0
    3a70:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a74:	4b1f      	ldr	r3, [pc, #124]	; (3af4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a7a:	4a1e      	ldr	r2, [pc, #120]	; (3af4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a7c:	f043 0301 	orr.w	r3, r3, #1
    3a80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a84:	4b1b      	ldr	r3, [pc, #108]	; (3af4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a8a:	4a1a      	ldr	r2, [pc, #104]	; (3af4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a8c:	f043 0304 	orr.w	r3, r3, #4
    3a90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a94:	aa03      	add	r2, sp, #12
    3a96:	a904      	add	r1, sp, #16
    3a98:	a805      	add	r0, sp, #20
    3a9a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a9e:	f7ff f8b1 	bl	2c04 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3aa2:	4b14      	ldr	r3, [pc, #80]	; (3af4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aa8:	0e1b      	lsrs	r3, r3, #24
    3aaa:	f003 0301 	and.w	r3, r3, #1
    3aae:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ab0:	9a03      	ldr	r2, [sp, #12]
    3ab2:	a904      	add	r1, sp, #16
    3ab4:	ab05      	add	r3, sp, #20
    3ab6:	4618      	mov	r0, r3
    3ab8:	f7ff f8be 	bl	2c38 <Clock_Ip_TimeoutExpired>
    3abc:	4603      	mov	r3, r0
    3abe:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3ac2:	9b06      	ldr	r3, [sp, #24]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d106      	bne.n	3ad6 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3ac8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3acc:	f083 0301 	eor.w	r3, r3, #1
    3ad0:	b2db      	uxtb	r3, r3
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	d1e5      	bne.n	3aa2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3ad6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d005      	beq.n	3aea <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3ade:	9b01      	ldr	r3, [sp, #4]
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	4619      	mov	r1, r3
    3ae4:	2001      	movs	r0, #1
    3ae6:	f7ff f87d 	bl	2be4 <Clock_Ip_ReportClockErrors>
    }
}
    3aea:	bf00      	nop
    3aec:	b009      	add	sp, #36	; 0x24
    3aee:	f85d fb04 	ldr.w	pc, [sp], #4
    3af2:	bf00      	nop
    3af4:	40064000 	.word	0x40064000

00003af8 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3af8:	b082      	sub	sp, #8
    3afa:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3afc:	4b09      	ldr	r3, [pc, #36]	; (3b24 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b02:	4a08      	ldr	r2, [pc, #32]	; (3b24 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b04:	f023 0301 	bic.w	r3, r3, #1
    3b08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b0c:	4b05      	ldr	r3, [pc, #20]	; (3b24 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b12:	4a04      	ldr	r2, [pc, #16]	; (3b24 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b14:	f023 0304 	bic.w	r3, r3, #4
    3b18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b1c:	bf00      	nop
    3b1e:	b002      	add	sp, #8
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	40064000 	.word	0x40064000

00003b28 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b28:	b082      	sub	sp, #8
    3b2a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b2c:	4b0f      	ldr	r3, [pc, #60]	; (3b6c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b32:	4a0e      	ldr	r2, [pc, #56]	; (3b6c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b3c:	4b0b      	ldr	r3, [pc, #44]	; (3b6c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b42:	4a0a      	ldr	r2, [pc, #40]	; (3b6c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b44:	f023 0304 	bic.w	r3, r3, #4
    3b48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b4c:	4b07      	ldr	r3, [pc, #28]	; (3b6c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b52:	9b01      	ldr	r3, [sp, #4]
    3b54:	7a1b      	ldrb	r3, [r3, #8]
    3b56:	009b      	lsls	r3, r3, #2
    3b58:	f003 0304 	and.w	r3, r3, #4
    3b5c:	4903      	ldr	r1, [pc, #12]	; (3b6c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b5e:	4313      	orrs	r3, r2
    3b60:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b64:	bf00      	nop
    3b66:	b002      	add	sp, #8
    3b68:	4770      	bx	lr
    3b6a:	bf00      	nop
    3b6c:	40064000 	.word	0x40064000

00003b70 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b70:	b082      	sub	sp, #8
    3b72:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b74:	9b01      	ldr	r3, [sp, #4]
    3b76:	889b      	ldrh	r3, [r3, #4]
    3b78:	2b01      	cmp	r3, #1
    3b7a:	d107      	bne.n	3b8c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b7c:	4b05      	ldr	r3, [pc, #20]	; (3b94 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b82:	4a04      	ldr	r2, [pc, #16]	; (3b94 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b84:	f043 0304 	orr.w	r3, r3, #4
    3b88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b8c:	bf00      	nop
    3b8e:	b002      	add	sp, #8
    3b90:	4770      	bx	lr
    3b92:	bf00      	nop
    3b94:	40064000 	.word	0x40064000

00003b98 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b98:	b082      	sub	sp, #8
    3b9a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b9c:	4b05      	ldr	r3, [pc, #20]	; (3bb4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ba2:	4a04      	ldr	r2, [pc, #16]	; (3bb4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ba4:	f023 0304 	bic.w	r3, r3, #4
    3ba8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3bac:	bf00      	nop
    3bae:	b002      	add	sp, #8
    3bb0:	4770      	bx	lr
    3bb2:	bf00      	nop
    3bb4:	40064000 	.word	0x40064000

00003bb8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bb8:	b082      	sub	sp, #8
    3bba:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3bbc:	4b0f      	ldr	r3, [pc, #60]	; (3bfc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bc2:	4a0e      	ldr	r2, [pc, #56]	; (3bfc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3bc8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3bcc:	4b0b      	ldr	r3, [pc, #44]	; (3bfc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bd2:	4a0a      	ldr	r2, [pc, #40]	; (3bfc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bd4:	f023 0302 	bic.w	r3, r3, #2
    3bd8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3bdc:	4b07      	ldr	r3, [pc, #28]	; (3bfc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bde:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3be2:	9b01      	ldr	r3, [sp, #4]
    3be4:	7a5b      	ldrb	r3, [r3, #9]
    3be6:	005b      	lsls	r3, r3, #1
    3be8:	f003 0302 	and.w	r3, r3, #2
    3bec:	4903      	ldr	r1, [pc, #12]	; (3bfc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bee:	4313      	orrs	r3, r2
    3bf0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3bf4:	bf00      	nop
    3bf6:	b002      	add	sp, #8
    3bf8:	4770      	bx	lr
    3bfa:	bf00      	nop
    3bfc:	40064000 	.word	0x40064000

00003c00 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c00:	b082      	sub	sp, #8
    3c02:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3c04:	9b01      	ldr	r3, [sp, #4]
    3c06:	889b      	ldrh	r3, [r3, #4]
    3c08:	2b01      	cmp	r3, #1
    3c0a:	d107      	bne.n	3c1c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3c0c:	4b05      	ldr	r3, [pc, #20]	; (3c24 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c12:	4a04      	ldr	r2, [pc, #16]	; (3c24 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3c14:	f043 0302 	orr.w	r3, r3, #2
    3c18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3c1c:	bf00      	nop
    3c1e:	b002      	add	sp, #8
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop
    3c24:	40064000 	.word	0x40064000

00003c28 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3c28:	b082      	sub	sp, #8
    3c2a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3c2c:	4b05      	ldr	r3, [pc, #20]	; (3c44 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c32:	4a04      	ldr	r2, [pc, #16]	; (3c44 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c34:	f023 0302 	bic.w	r3, r3, #2
    3c38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3c3c:	bf00      	nop
    3c3e:	b002      	add	sp, #8
    3c40:	4770      	bx	lr
    3c42:	bf00      	nop
    3c44:	40064000 	.word	0x40064000

00003c48 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c48:	b500      	push	{lr}
    3c4a:	b08b      	sub	sp, #44	; 0x2c
    3c4c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c4e:	9b01      	ldr	r3, [sp, #4]
    3c50:	681a      	ldr	r2, [r3, #0]
    3c52:	4975      	ldr	r1, [pc, #468]	; (3e28 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c54:	4613      	mov	r3, r2
    3c56:	00db      	lsls	r3, r3, #3
    3c58:	4413      	add	r3, r2
    3c5a:	440b      	add	r3, r1
    3c5c:	781b      	ldrb	r3, [r3, #0]
    3c5e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c60:	2300      	movs	r3, #0
    3c62:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c66:	2300      	movs	r3, #0
    3c68:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c6c:	4b6f      	ldr	r3, [pc, #444]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c72:	4a6e      	ldr	r2, [pc, #440]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c78:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c7c:	4b6b      	ldr	r3, [pc, #428]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c86:	2b00      	cmp	r3, #0
    3c88:	d07d      	beq.n	3d86 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c8a:	9b01      	ldr	r3, [sp, #4]
    3c8c:	79db      	ldrb	r3, [r3, #7]
    3c8e:	461a      	mov	r2, r3
    3c90:	4b66      	ldr	r3, [pc, #408]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c92:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c96:	f003 0303 	and.w	r3, r3, #3
    3c9a:	429a      	cmp	r2, r3
    3c9c:	d10b      	bne.n	3cb6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c9e:	9b01      	ldr	r3, [sp, #4]
    3ca0:	799b      	ldrb	r3, [r3, #6]
    3ca2:	461a      	mov	r2, r3
    3ca4:	4b61      	ldr	r3, [pc, #388]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ca6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3caa:	08db      	lsrs	r3, r3, #3
    3cac:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3cb0:	429a      	cmp	r2, r3
    3cb2:	f000 80b4 	beq.w	3e1e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3cb6:	4b5d      	ldr	r3, [pc, #372]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cbc:	f003 0301 	and.w	r3, r3, #1
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d105      	bne.n	3cd0 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3cc4:	2301      	movs	r3, #1
    3cc6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3cca:	2000      	movs	r0, #0
    3ccc:	f7ff fd66 	bl	379c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3cd0:	2002      	movs	r0, #2
    3cd2:	f7ff fdcf 	bl	3874 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cd6:	4b55      	ldr	r3, [pc, #340]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cd8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cdc:	4a53      	ldr	r2, [pc, #332]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cde:	f023 0301 	bic.w	r3, r3, #1
    3ce2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3ce6:	9b01      	ldr	r3, [sp, #4]
    3ce8:	889b      	ldrh	r3, [r3, #4]
    3cea:	2b01      	cmp	r3, #1
    3cec:	f040 8097 	bne.w	3e1e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3cf0:	9b01      	ldr	r3, [sp, #4]
    3cf2:	79db      	ldrb	r3, [r3, #7]
    3cf4:	4a4d      	ldr	r2, [pc, #308]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf6:	f003 0303 	and.w	r3, r3, #3
    3cfa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cfe:	4b4b      	ldr	r3, [pc, #300]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d00:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d04:	9b01      	ldr	r3, [sp, #4]
    3d06:	799b      	ldrb	r3, [r3, #6]
    3d08:	00db      	lsls	r3, r3, #3
    3d0a:	f003 0308 	and.w	r3, r3, #8
    3d0e:	4313      	orrs	r3, r2
    3d10:	4a46      	ldr	r2, [pc, #280]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d12:	f043 0301 	orr.w	r3, r3, #1
    3d16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d1a:	aa03      	add	r2, sp, #12
    3d1c:	a904      	add	r1, sp, #16
    3d1e:	a805      	add	r0, sp, #20
    3d20:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d24:	f7fe ff6e 	bl	2c04 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d28:	4b40      	ldr	r3, [pc, #256]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d2e:	0e1b      	lsrs	r3, r3, #24
    3d30:	f003 0301 	and.w	r3, r3, #1
    3d34:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d36:	9a03      	ldr	r2, [sp, #12]
    3d38:	a904      	add	r1, sp, #16
    3d3a:	ab05      	add	r3, sp, #20
    3d3c:	4618      	mov	r0, r3
    3d3e:	f7fe ff7b 	bl	2c38 <Clock_Ip_TimeoutExpired>
    3d42:	4603      	mov	r3, r0
    3d44:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d48:	9b06      	ldr	r3, [sp, #24]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d106      	bne.n	3d5c <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d52:	f083 0301 	eor.w	r3, r3, #1
    3d56:	b2db      	uxtb	r3, r3
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d1e5      	bne.n	3d28 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d60:	2b00      	cmp	r3, #0
    3d62:	d005      	beq.n	3d70 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d64:	9b01      	ldr	r3, [sp, #4]
    3d66:	681b      	ldr	r3, [r3, #0]
    3d68:	4619      	mov	r1, r3
    3d6a:	2001      	movs	r0, #1
    3d6c:	f7fe ff3a 	bl	2be4 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d70:	2003      	movs	r0, #3
    3d72:	f7ff fd7f 	bl	3874 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d76:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d04f      	beq.n	3e1e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d7e:	2002      	movs	r0, #2
    3d80:	f7ff fd26 	bl	37d0 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d84:	e04b      	b.n	3e1e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d86:	4b29      	ldr	r3, [pc, #164]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d88:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d8c:	4a27      	ldr	r2, [pc, #156]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d8e:	f023 0301 	bic.w	r3, r3, #1
    3d92:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d96:	9b01      	ldr	r3, [sp, #4]
    3d98:	889b      	ldrh	r3, [r3, #4]
    3d9a:	2b01      	cmp	r3, #1
    3d9c:	d13f      	bne.n	3e1e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d9e:	9b01      	ldr	r3, [sp, #4]
    3da0:	79db      	ldrb	r3, [r3, #7]
    3da2:	4a22      	ldr	r2, [pc, #136]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3da4:	f003 0303 	and.w	r3, r3, #3
    3da8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3dac:	4b1f      	ldr	r3, [pc, #124]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dae:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3db2:	9b01      	ldr	r3, [sp, #4]
    3db4:	799b      	ldrb	r3, [r3, #6]
    3db6:	00db      	lsls	r3, r3, #3
    3db8:	f003 0308 	and.w	r3, r3, #8
    3dbc:	4313      	orrs	r3, r2
    3dbe:	4a1b      	ldr	r2, [pc, #108]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dc0:	f043 0301 	orr.w	r3, r3, #1
    3dc4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3dc8:	aa03      	add	r2, sp, #12
    3dca:	a904      	add	r1, sp, #16
    3dcc:	a805      	add	r0, sp, #20
    3dce:	f24c 3350 	movw	r3, #50000	; 0xc350
    3dd2:	f7fe ff17 	bl	2c04 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3dd6:	4b15      	ldr	r3, [pc, #84]	; (3e2c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dd8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ddc:	0e1b      	lsrs	r3, r3, #24
    3dde:	f003 0301 	and.w	r3, r3, #1
    3de2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3de4:	9a03      	ldr	r2, [sp, #12]
    3de6:	a904      	add	r1, sp, #16
    3de8:	ab05      	add	r3, sp, #20
    3dea:	4618      	mov	r0, r3
    3dec:	f7fe ff24 	bl	2c38 <Clock_Ip_TimeoutExpired>
    3df0:	4603      	mov	r3, r0
    3df2:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3df6:	9b06      	ldr	r3, [sp, #24]
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d106      	bne.n	3e0a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3dfc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e00:	f083 0301 	eor.w	r3, r3, #1
    3e04:	b2db      	uxtb	r3, r3
    3e06:	2b00      	cmp	r3, #0
    3e08:	d1e5      	bne.n	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3e0a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e0e:	2b00      	cmp	r3, #0
    3e10:	d005      	beq.n	3e1e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	4619      	mov	r1, r3
    3e18:	2001      	movs	r0, #1
    3e1a:	f7fe fee3 	bl	2be4 <Clock_Ip_ReportClockErrors>
}
    3e1e:	bf00      	nop
    3e20:	b00b      	add	sp, #44	; 0x2c
    3e22:	f85d fb04 	ldr.w	pc, [sp], #4
    3e26:	bf00      	nop
    3e28:	00008428 	.word	0x00008428
    3e2c:	40064000 	.word	0x40064000

00003e30 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e30:	b500      	push	{lr}
    3e32:	b089      	sub	sp, #36	; 0x24
    3e34:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e36:	2300      	movs	r3, #0
    3e38:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3e3c:	9b01      	ldr	r3, [sp, #4]
    3e3e:	889b      	ldrh	r3, [r3, #4]
    3e40:	2b01      	cmp	r3, #1
    3e42:	d132      	bne.n	3eaa <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3e44:	4b1b      	ldr	r3, [pc, #108]	; (3eb4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e4a:	4a1a      	ldr	r2, [pc, #104]	; (3eb4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e4c:	f043 0301 	orr.w	r3, r3, #1
    3e50:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e54:	aa03      	add	r2, sp, #12
    3e56:	a904      	add	r1, sp, #16
    3e58:	a805      	add	r0, sp, #20
    3e5a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e5e:	f7fe fed1 	bl	2c04 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e62:	4b14      	ldr	r3, [pc, #80]	; (3eb4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e64:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e68:	0e1b      	lsrs	r3, r3, #24
    3e6a:	f003 0301 	and.w	r3, r3, #1
    3e6e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e70:	9a03      	ldr	r2, [sp, #12]
    3e72:	a904      	add	r1, sp, #16
    3e74:	ab05      	add	r3, sp, #20
    3e76:	4618      	mov	r0, r3
    3e78:	f7fe fede 	bl	2c38 <Clock_Ip_TimeoutExpired>
    3e7c:	4603      	mov	r3, r0
    3e7e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e82:	9b06      	ldr	r3, [sp, #24]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d106      	bne.n	3e96 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3e88:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e8c:	f083 0301 	eor.w	r3, r3, #1
    3e90:	b2db      	uxtb	r3, r3
    3e92:	2b00      	cmp	r3, #0
    3e94:	d1e5      	bne.n	3e62 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e96:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d005      	beq.n	3eaa <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e9e:	9b01      	ldr	r3, [sp, #4]
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	4619      	mov	r1, r3
    3ea4:	2001      	movs	r0, #1
    3ea6:	f7fe fe9d 	bl	2be4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3eaa:	bf00      	nop
    3eac:	b009      	add	sp, #36	; 0x24
    3eae:	f85d fb04 	ldr.w	pc, [sp], #4
    3eb2:	bf00      	nop
    3eb4:	40064000 	.word	0x40064000

00003eb8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3eb8:	b082      	sub	sp, #8
    3eba:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3ebc:	4b05      	ldr	r3, [pc, #20]	; (3ed4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3ebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ec2:	4a04      	ldr	r2, [pc, #16]	; (3ed4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3ec4:	f023 0301 	bic.w	r3, r3, #1
    3ec8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ecc:	bf00      	nop
    3ece:	b002      	add	sp, #8
    3ed0:	4770      	bx	lr
    3ed2:	bf00      	nop
    3ed4:	40064000 	.word	0x40064000

00003ed8 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3ed8:	b082      	sub	sp, #8
    3eda:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3edc:	bf00      	nop
    3ede:	b002      	add	sp, #8
    3ee0:	4770      	bx	lr

00003ee2 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3ee2:	b082      	sub	sp, #8
    3ee4:	9001      	str	r0, [sp, #4]
    3ee6:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3ee8:	bf00      	nop
    3eea:	b002      	add	sp, #8
    3eec:	4770      	bx	lr

00003eee <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3eee:	b082      	sub	sp, #8
    3ef0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ef2:	bf00      	nop
    3ef4:	b002      	add	sp, #8
    3ef6:	4770      	bx	lr

00003ef8 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3ef8:	b082      	sub	sp, #8
    3efa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3efc:	bf00      	nop
    3efe:	b002      	add	sp, #8
    3f00:	4770      	bx	lr

00003f02 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3f02:	b082      	sub	sp, #8
    3f04:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3f06:	2302      	movs	r3, #2
}
    3f08:	4618      	mov	r0, r3
    3f0a:	b002      	add	sp, #8
    3f0c:	4770      	bx	lr

00003f0e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3f0e:	b082      	sub	sp, #8
    3f10:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3f12:	bf00      	nop
    3f14:	b002      	add	sp, #8
    3f16:	4770      	bx	lr

00003f18 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f18:	b500      	push	{lr}
    3f1a:	b083      	sub	sp, #12
    3f1c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f1e:	9b01      	ldr	r3, [sp, #4]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d002      	beq.n	3f2a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3f24:	9801      	ldr	r0, [sp, #4]
    3f26:	f000 f870 	bl	400a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f2a:	bf00      	nop
    3f2c:	b003      	add	sp, #12
    3f2e:	f85d fb04 	ldr.w	pc, [sp], #4

00003f32 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f32:	b500      	push	{lr}
    3f34:	b083      	sub	sp, #12
    3f36:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f38:	9b01      	ldr	r3, [sp, #4]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d002      	beq.n	3f44 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3f3e:	9801      	ldr	r0, [sp, #4]
    3f40:	f000 f89a 	bl	4078 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f44:	bf00      	nop
    3f46:	b003      	add	sp, #12
    3f48:	f85d fb04 	ldr.w	pc, [sp], #4

00003f4c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f4c:	b500      	push	{lr}
    3f4e:	b089      	sub	sp, #36	; 0x24
    3f50:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f52:	2301      	movs	r3, #1
    3f54:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f56:	2300      	movs	r3, #0
    3f58:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f5c:	4b1e      	ldr	r3, [pc, #120]	; (3fd8 <Clock_Ip_CompleteSpll+0x8c>)
    3f5e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f62:	f003 0301 	and.w	r3, r3, #1
    3f66:	2b00      	cmp	r3, #0
    3f68:	d02f      	beq.n	3fca <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f6a:	aa02      	add	r2, sp, #8
    3f6c:	a903      	add	r1, sp, #12
    3f6e:	a804      	add	r0, sp, #16
    3f70:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f74:	f7fe fe46 	bl	2c04 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f78:	4b17      	ldr	r3, [pc, #92]	; (3fd8 <Clock_Ip_CompleteSpll+0x8c>)
    3f7a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f7e:	0e1b      	lsrs	r3, r3, #24
    3f80:	f003 0301 	and.w	r3, r3, #1
    3f84:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f86:	9a02      	ldr	r2, [sp, #8]
    3f88:	a903      	add	r1, sp, #12
    3f8a:	ab04      	add	r3, sp, #16
    3f8c:	4618      	mov	r0, r3
    3f8e:	f7fe fe53 	bl	2c38 <Clock_Ip_TimeoutExpired>
    3f92:	4603      	mov	r3, r0
    3f94:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f98:	9b05      	ldr	r3, [sp, #20]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d106      	bne.n	3fac <Clock_Ip_CompleteSpll+0x60>
    3f9e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3fa2:	f083 0301 	eor.w	r3, r3, #1
    3fa6:	b2db      	uxtb	r3, r3
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d1e5      	bne.n	3f78 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3fac:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3fb0:	f083 0301 	eor.w	r3, r3, #1
    3fb4:	b2db      	uxtb	r3, r3
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d002      	beq.n	3fc0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3fba:	2302      	movs	r3, #2
    3fbc:	9307      	str	r3, [sp, #28]
    3fbe:	e006      	b.n	3fce <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3fc0:	9901      	ldr	r1, [sp, #4]
    3fc2:	2001      	movs	r0, #1
    3fc4:	f7fe fe0e 	bl	2be4 <Clock_Ip_ReportClockErrors>
    3fc8:	e001      	b.n	3fce <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3fca:	2300      	movs	r3, #0
    3fcc:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3fce:	9b07      	ldr	r3, [sp, #28]
}
    3fd0:	4618      	mov	r0, r3
    3fd2:	b009      	add	sp, #36	; 0x24
    3fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    3fd8:	40064000 	.word	0x40064000

00003fdc <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3fdc:	b500      	push	{lr}
    3fde:	b083      	sub	sp, #12
    3fe0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3fe2:	9801      	ldr	r0, [sp, #4]
    3fe4:	f000 f886 	bl	40f4 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3fe8:	bf00      	nop
    3fea:	b003      	add	sp, #12
    3fec:	f85d fb04 	ldr.w	pc, [sp], #4

00003ff0 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3ff0:	b500      	push	{lr}
    3ff2:	b083      	sub	sp, #12
    3ff4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ff6:	9b01      	ldr	r3, [sp, #4]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d002      	beq.n	4002 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3ffc:	9801      	ldr	r0, [sp, #4]
    3ffe:	f000 f891 	bl	4124 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4002:	bf00      	nop
    4004:	b003      	add	sp, #12
    4006:	f85d fb04 	ldr.w	pc, [sp], #4

0000400a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    400a:	b082      	sub	sp, #8
    400c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    400e:	4b19      	ldr	r3, [pc, #100]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4010:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4014:	4a17      	ldr	r2, [pc, #92]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4016:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    401a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    401e:	4b15      	ldr	r3, [pc, #84]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4020:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4024:	4a13      	ldr	r2, [pc, #76]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    402a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    402e:	4b11      	ldr	r3, [pc, #68]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4030:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4034:	4a0f      	ldr	r2, [pc, #60]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4036:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    403a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    403e:	4b0d      	ldr	r3, [pc, #52]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4040:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4044:	4a0b      	ldr	r2, [pc, #44]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4046:	f023 0301 	bic.w	r3, r3, #1
    404a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    404e:	4b09      	ldr	r3, [pc, #36]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4050:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4054:	4a07      	ldr	r2, [pc, #28]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4056:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    405a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    405e:	4b05      	ldr	r3, [pc, #20]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4060:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4064:	4a03      	ldr	r2, [pc, #12]	; (4074 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4066:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    406a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    406e:	bf00      	nop
    4070:	b002      	add	sp, #8
    4072:	4770      	bx	lr
    4074:	40064000 	.word	0x40064000

00004078 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4078:	b082      	sub	sp, #8
    407a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    407c:	9b01      	ldr	r3, [sp, #4]
    407e:	889b      	ldrh	r3, [r3, #4]
    4080:	2b01      	cmp	r3, #1
    4082:	d12f      	bne.n	40e4 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4084:	4b1a      	ldr	r3, [pc, #104]	; (40f0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4086:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    408a:	9b01      	ldr	r3, [sp, #4]
    408c:	7b5b      	ldrb	r3, [r3, #13]
    408e:	3b01      	subs	r3, #1
    4090:	021b      	lsls	r3, r3, #8
    4092:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4096:	9b01      	ldr	r3, [sp, #4]
    4098:	7d1b      	ldrb	r3, [r3, #20]
    409a:	3b10      	subs	r3, #16
    409c:	041b      	lsls	r3, r3, #16
    409e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    40a2:	430b      	orrs	r3, r1
    40a4:	4912      	ldr	r1, [pc, #72]	; (40f0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40a6:	4313      	orrs	r3, r2
    40a8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    40ac:	9b01      	ldr	r3, [sp, #4]
    40ae:	7fdb      	ldrb	r3, [r3, #31]
    40b0:	2b02      	cmp	r3, #2
    40b2:	d011      	beq.n	40d8 <Clock_Ip_SetSpll_TrustedCall+0x60>
    40b4:	2b02      	cmp	r3, #2
    40b6:	dc17      	bgt.n	40e8 <Clock_Ip_SetSpll_TrustedCall+0x70>
    40b8:	2b00      	cmp	r3, #0
    40ba:	d002      	beq.n	40c2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    40bc:	2b01      	cmp	r3, #1
    40be:	d005      	beq.n	40cc <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    40c0:	e012      	b.n	40e8 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    40c2:	4b0b      	ldr	r3, [pc, #44]	; (40f0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40c4:	2200      	movs	r2, #0
    40c6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40ca:	e00e      	b.n	40ea <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40cc:	4b08      	ldr	r3, [pc, #32]	; (40f0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    40d2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40d6:	e008      	b.n	40ea <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40d8:	4b05      	ldr	r3, [pc, #20]	; (40f0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    40de:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40e2:	e002      	b.n	40ea <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    40e4:	bf00      	nop
    40e6:	e000      	b.n	40ea <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    40e8:	bf00      	nop
}
    40ea:	bf00      	nop
    40ec:	b002      	add	sp, #8
    40ee:	4770      	bx	lr
    40f0:	40064000 	.word	0x40064000

000040f4 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    40f4:	b082      	sub	sp, #8
    40f6:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    40f8:	4b09      	ldr	r3, [pc, #36]	; (4120 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40fa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40fe:	4a08      	ldr	r2, [pc, #32]	; (4120 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4100:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4104:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4108:	4b05      	ldr	r3, [pc, #20]	; (4120 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    410a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    410e:	4a04      	ldr	r2, [pc, #16]	; (4120 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4110:	f023 0301 	bic.w	r3, r3, #1
    4114:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4118:	bf00      	nop
    411a:	b002      	add	sp, #8
    411c:	4770      	bx	lr
    411e:	bf00      	nop
    4120:	40064000 	.word	0x40064000

00004124 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4124:	b082      	sub	sp, #8
    4126:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4128:	9b01      	ldr	r3, [sp, #4]
    412a:	889b      	ldrh	r3, [r3, #4]
    412c:	2b01      	cmp	r3, #1
    412e:	d107      	bne.n	4140 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4130:	4b05      	ldr	r3, [pc, #20]	; (4148 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4132:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4136:	4a04      	ldr	r2, [pc, #16]	; (4148 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4138:	f043 0301 	orr.w	r3, r3, #1
    413c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4140:	bf00      	nop
    4142:	b002      	add	sp, #8
    4144:	4770      	bx	lr
    4146:	bf00      	nop
    4148:	40064000 	.word	0x40064000

0000414c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    414c:	b082      	sub	sp, #8
    414e:	9001      	str	r0, [sp, #4]
    4150:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4152:	bf00      	nop
    4154:	b002      	add	sp, #8
    4156:	4770      	bx	lr

00004158 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4158:	b082      	sub	sp, #8
    415a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    415c:	bf00      	nop
    415e:	b002      	add	sp, #8
    4160:	4770      	bx	lr

00004162 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4162:	b500      	push	{lr}
    4164:	b083      	sub	sp, #12
    4166:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	2b00      	cmp	r3, #0
    416c:	d002      	beq.n	4174 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    416e:	9801      	ldr	r0, [sp, #4]
    4170:	f000 f8ee 	bl	4350 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4174:	bf00      	nop
    4176:	b003      	add	sp, #12
    4178:	f85d fb04 	ldr.w	pc, [sp], #4

0000417c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    417c:	b500      	push	{lr}
    417e:	b083      	sub	sp, #12
    4180:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4182:	9b01      	ldr	r3, [sp, #4]
    4184:	2b00      	cmp	r3, #0
    4186:	d002      	beq.n	418e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4188:	9801      	ldr	r0, [sp, #4]
    418a:	f000 f8ff 	bl	438c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    418e:	bf00      	nop
    4190:	b003      	add	sp, #12
    4192:	f85d fb04 	ldr.w	pc, [sp], #4

00004196 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4196:	b500      	push	{lr}
    4198:	b083      	sub	sp, #12
    419a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    419c:	9b01      	ldr	r3, [sp, #4]
    419e:	2b00      	cmp	r3, #0
    41a0:	d002      	beq.n	41a8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    41a2:	9801      	ldr	r0, [sp, #4]
    41a4:	f000 f912 	bl	43cc <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a8:	bf00      	nop
    41aa:	b003      	add	sp, #12
    41ac:	f85d fb04 	ldr.w	pc, [sp], #4

000041b0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41b0:	b500      	push	{lr}
    41b2:	b083      	sub	sp, #12
    41b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41b6:	9b01      	ldr	r3, [sp, #4]
    41b8:	2b00      	cmp	r3, #0
    41ba:	d002      	beq.n	41c2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    41bc:	9801      	ldr	r0, [sp, #4]
    41be:	f000 f925 	bl	440c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41c2:	bf00      	nop
    41c4:	b003      	add	sp, #12
    41c6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ca <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ca:	b500      	push	{lr}
    41cc:	b083      	sub	sp, #12
    41ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d0:	9b01      	ldr	r3, [sp, #4]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d002      	beq.n	41dc <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    41d6:	9801      	ldr	r0, [sp, #4]
    41d8:	f000 f936 	bl	4448 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41dc:	bf00      	nop
    41de:	b003      	add	sp, #12
    41e0:	f85d fb04 	ldr.w	pc, [sp], #4

000041e4 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41e4:	b500      	push	{lr}
    41e6:	b083      	sub	sp, #12
    41e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ea:	9b01      	ldr	r3, [sp, #4]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d002      	beq.n	41f6 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    41f0:	9801      	ldr	r0, [sp, #4]
    41f2:	f000 f949 	bl	4488 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f6:	bf00      	nop
    41f8:	b003      	add	sp, #12
    41fa:	f85d fb04 	ldr.w	pc, [sp], #4

000041fe <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41fe:	b500      	push	{lr}
    4200:	b083      	sub	sp, #12
    4202:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4204:	9b01      	ldr	r3, [sp, #4]
    4206:	2b00      	cmp	r3, #0
    4208:	d002      	beq.n	4210 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    420a:	9801      	ldr	r0, [sp, #4]
    420c:	f000 f958 	bl	44c0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4210:	bf00      	nop
    4212:	b003      	add	sp, #12
    4214:	f85d fb04 	ldr.w	pc, [sp], #4

00004218 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4218:	b500      	push	{lr}
    421a:	b083      	sub	sp, #12
    421c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	2b00      	cmp	r3, #0
    4222:	d002      	beq.n	422a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4224:	9801      	ldr	r0, [sp, #4]
    4226:	f000 f969 	bl	44fc <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    422a:	bf00      	nop
    422c:	b003      	add	sp, #12
    422e:	f85d fb04 	ldr.w	pc, [sp], #4

00004232 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4232:	b500      	push	{lr}
    4234:	b083      	sub	sp, #12
    4236:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4238:	9b01      	ldr	r3, [sp, #4]
    423a:	2b00      	cmp	r3, #0
    423c:	d002      	beq.n	4244 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    423e:	9801      	ldr	r0, [sp, #4]
    4240:	f000 f978 	bl	4534 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4244:	bf00      	nop
    4246:	b003      	add	sp, #12
    4248:	f85d fb04 	ldr.w	pc, [sp], #4

0000424c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    424c:	b500      	push	{lr}
    424e:	b083      	sub	sp, #12
    4250:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	2b00      	cmp	r3, #0
    4256:	d002      	beq.n	425e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4258:	9801      	ldr	r0, [sp, #4]
    425a:	f000 f989 	bl	4570 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    425e:	bf00      	nop
    4260:	b003      	add	sp, #12
    4262:	f85d fb04 	ldr.w	pc, [sp], #4

00004266 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4266:	b500      	push	{lr}
    4268:	b083      	sub	sp, #12
    426a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    426c:	9b01      	ldr	r3, [sp, #4]
    426e:	2b00      	cmp	r3, #0
    4270:	d002      	beq.n	4278 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4272:	9801      	ldr	r0, [sp, #4]
    4274:	f000 f998 	bl	45a8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4278:	bf00      	nop
    427a:	b003      	add	sp, #12
    427c:	f85d fb04 	ldr.w	pc, [sp], #4

00004280 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4280:	b500      	push	{lr}
    4282:	b083      	sub	sp, #12
    4284:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4286:	9b01      	ldr	r3, [sp, #4]
    4288:	2b00      	cmp	r3, #0
    428a:	d002      	beq.n	4292 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    428c:	9801      	ldr	r0, [sp, #4]
    428e:	f000 f9a9 	bl	45e4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4292:	bf00      	nop
    4294:	b003      	add	sp, #12
    4296:	f85d fb04 	ldr.w	pc, [sp], #4

0000429a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    429a:	b500      	push	{lr}
    429c:	b083      	sub	sp, #12
    429e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42a0:	9b01      	ldr	r3, [sp, #4]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d002      	beq.n	42ac <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    42a6:	9801      	ldr	r0, [sp, #4]
    42a8:	f000 f9e6 	bl	4678 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42ac:	bf00      	nop
    42ae:	b003      	add	sp, #12
    42b0:	f85d fb04 	ldr.w	pc, [sp], #4

000042b4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42b4:	b500      	push	{lr}
    42b6:	b083      	sub	sp, #12
    42b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42ba:	9b01      	ldr	r3, [sp, #4]
    42bc:	2b00      	cmp	r3, #0
    42be:	d002      	beq.n	42c6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    42c0:	9801      	ldr	r0, [sp, #4]
    42c2:	f000 fa25 	bl	4710 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42c6:	bf00      	nop
    42c8:	b003      	add	sp, #12
    42ca:	f85d fb04 	ldr.w	pc, [sp], #4

000042ce <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42ce:	b500      	push	{lr}
    42d0:	b083      	sub	sp, #12
    42d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42d4:	9b01      	ldr	r3, [sp, #4]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d002      	beq.n	42e0 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    42da:	9801      	ldr	r0, [sp, #4]
    42dc:	f000 fa2a 	bl	4734 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42e0:	bf00      	nop
    42e2:	b003      	add	sp, #12
    42e4:	f85d fb04 	ldr.w	pc, [sp], #4

000042e8 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42e8:	b500      	push	{lr}
    42ea:	b083      	sub	sp, #12
    42ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d002      	beq.n	42fa <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    42f4:	9801      	ldr	r0, [sp, #4]
    42f6:	f000 fa3b 	bl	4770 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42fa:	bf00      	nop
    42fc:	b003      	add	sp, #12
    42fe:	f85d fb04 	ldr.w	pc, [sp], #4

00004302 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4302:	b500      	push	{lr}
    4304:	b083      	sub	sp, #12
    4306:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2b00      	cmp	r3, #0
    430c:	d002      	beq.n	4314 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    430e:	9801      	ldr	r0, [sp, #4]
    4310:	f000 fa56 	bl	47c0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4314:	bf00      	nop
    4316:	b003      	add	sp, #12
    4318:	f85d fb04 	ldr.w	pc, [sp], #4

0000431c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    431c:	b500      	push	{lr}
    431e:	b083      	sub	sp, #12
    4320:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4322:	9b01      	ldr	r3, [sp, #4]
    4324:	2b00      	cmp	r3, #0
    4326:	d002      	beq.n	432e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4328:	9801      	ldr	r0, [sp, #4]
    432a:	f000 fa79 	bl	4820 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    432e:	bf00      	nop
    4330:	b003      	add	sp, #12
    4332:	f85d fb04 	ldr.w	pc, [sp], #4

00004336 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4336:	b500      	push	{lr}
    4338:	b083      	sub	sp, #12
    433a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    433c:	9b01      	ldr	r3, [sp, #4]
    433e:	2b00      	cmp	r3, #0
    4340:	d002      	beq.n	4348 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4342:	9801      	ldr	r0, [sp, #4]
    4344:	f000 fa8a 	bl	485c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4348:	bf00      	nop
    434a:	b003      	add	sp, #12
    434c:	f85d fb04 	ldr.w	pc, [sp], #4

00004350 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4350:	b084      	sub	sp, #16
    4352:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4354:	4b0b      	ldr	r3, [pc, #44]	; (4384 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4356:	795b      	ldrb	r3, [r3, #5]
    4358:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    435a:	4b0b      	ldr	r3, [pc, #44]	; (4388 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    435c:	695b      	ldr	r3, [r3, #20]
    435e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4360:	9b02      	ldr	r3, [sp, #8]
    4362:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4366:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4368:	9b03      	ldr	r3, [sp, #12]
    436a:	061b      	lsls	r3, r3, #24
    436c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4370:	9a02      	ldr	r2, [sp, #8]
    4372:	4313      	orrs	r3, r2
    4374:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4376:	4a04      	ldr	r2, [pc, #16]	; (4388 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4378:	9b02      	ldr	r3, [sp, #8]
    437a:	6153      	str	r3, [r2, #20]
}
    437c:	bf00      	nop
    437e:	b004      	add	sp, #16
    4380:	4770      	bx	lr
    4382:	bf00      	nop
    4384:	00008790 	.word	0x00008790
    4388:	40064000 	.word	0x40064000

0000438c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    438c:	b084      	sub	sp, #16
    438e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4390:	9b01      	ldr	r3, [sp, #4]
    4392:	685b      	ldr	r3, [r3, #4]
    4394:	4a0b      	ldr	r2, [pc, #44]	; (43c4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4396:	5cd3      	ldrb	r3, [r2, r3]
    4398:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    439a:	4b0b      	ldr	r3, [pc, #44]	; (43c8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    439c:	695b      	ldr	r3, [r3, #20]
    439e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    43a0:	9b02      	ldr	r3, [sp, #8]
    43a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43a6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    43a8:	9b03      	ldr	r3, [sp, #12]
    43aa:	061b      	lsls	r3, r3, #24
    43ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43b0:	9a02      	ldr	r2, [sp, #8]
    43b2:	4313      	orrs	r3, r2
    43b4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    43b6:	4a04      	ldr	r2, [pc, #16]	; (43c8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    43b8:	9b02      	ldr	r3, [sp, #8]
    43ba:	6153      	str	r3, [r2, #20]
}
    43bc:	bf00      	nop
    43be:	b004      	add	sp, #16
    43c0:	4770      	bx	lr
    43c2:	bf00      	nop
    43c4:	00008790 	.word	0x00008790
    43c8:	40064000 	.word	0x40064000

000043cc <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43cc:	b084      	sub	sp, #16
    43ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43d0:	9b01      	ldr	r3, [sp, #4]
    43d2:	685b      	ldr	r3, [r3, #4]
    43d4:	4a0b      	ldr	r2, [pc, #44]	; (4404 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    43d6:	5cd3      	ldrb	r3, [r2, r3]
    43d8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    43da:	4b0b      	ldr	r3, [pc, #44]	; (4408 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43dc:	699b      	ldr	r3, [r3, #24]
    43de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    43e0:	9b02      	ldr	r3, [sp, #8]
    43e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43e6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    43e8:	9b03      	ldr	r3, [sp, #12]
    43ea:	061b      	lsls	r3, r3, #24
    43ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43f0:	9a02      	ldr	r2, [sp, #8]
    43f2:	4313      	orrs	r3, r2
    43f4:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    43f6:	4a04      	ldr	r2, [pc, #16]	; (4408 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43f8:	9b02      	ldr	r3, [sp, #8]
    43fa:	6193      	str	r3, [r2, #24]
}
    43fc:	bf00      	nop
    43fe:	b004      	add	sp, #16
    4400:	4770      	bx	lr
    4402:	bf00      	nop
    4404:	00008790 	.word	0x00008790
    4408:	40064000 	.word	0x40064000

0000440c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    440c:	b084      	sub	sp, #16
    440e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4410:	4b0b      	ldr	r3, [pc, #44]	; (4440 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4412:	795b      	ldrb	r3, [r3, #5]
    4414:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4416:	4b0b      	ldr	r3, [pc, #44]	; (4444 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4418:	69db      	ldr	r3, [r3, #28]
    441a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    441c:	9b02      	ldr	r3, [sp, #8]
    441e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4422:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4424:	9b03      	ldr	r3, [sp, #12]
    4426:	061b      	lsls	r3, r3, #24
    4428:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    442c:	9a02      	ldr	r2, [sp, #8]
    442e:	4313      	orrs	r3, r2
    4430:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4432:	4a04      	ldr	r2, [pc, #16]	; (4444 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4434:	9b02      	ldr	r3, [sp, #8]
    4436:	61d3      	str	r3, [r2, #28]
}
    4438:	bf00      	nop
    443a:	b004      	add	sp, #16
    443c:	4770      	bx	lr
    443e:	bf00      	nop
    4440:	00008790 	.word	0x00008790
    4444:	40064000 	.word	0x40064000

00004448 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4448:	b084      	sub	sp, #16
    444a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    444c:	9b01      	ldr	r3, [sp, #4]
    444e:	685b      	ldr	r3, [r3, #4]
    4450:	4a0b      	ldr	r2, [pc, #44]	; (4480 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4452:	5cd3      	ldrb	r3, [r2, r3]
    4454:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4456:	4b0b      	ldr	r3, [pc, #44]	; (4484 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4458:	69db      	ldr	r3, [r3, #28]
    445a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    445c:	9b02      	ldr	r3, [sp, #8]
    445e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4462:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4464:	9b03      	ldr	r3, [sp, #12]
    4466:	061b      	lsls	r3, r3, #24
    4468:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    446c:	9a02      	ldr	r2, [sp, #8]
    446e:	4313      	orrs	r3, r2
    4470:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4472:	4a04      	ldr	r2, [pc, #16]	; (4484 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4474:	9b02      	ldr	r3, [sp, #8]
    4476:	61d3      	str	r3, [r2, #28]
}
    4478:	bf00      	nop
    447a:	b004      	add	sp, #16
    447c:	4770      	bx	lr
    447e:	bf00      	nop
    4480:	00008790 	.word	0x00008790
    4484:	40064000 	.word	0x40064000

00004488 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4488:	b084      	sub	sp, #16
    448a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    448c:	4b0a      	ldr	r3, [pc, #40]	; (44b8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    448e:	7b9b      	ldrb	r3, [r3, #14]
    4490:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4492:	4b0a      	ldr	r3, [pc, #40]	; (44bc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4494:	691b      	ldr	r3, [r3, #16]
    4496:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4498:	9b02      	ldr	r3, [sp, #8]
    449a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    449e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44a0:	9b03      	ldr	r3, [sp, #12]
    44a2:	011b      	lsls	r3, r3, #4
    44a4:	9a02      	ldr	r2, [sp, #8]
    44a6:	4313      	orrs	r3, r2
    44a8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44aa:	4a04      	ldr	r2, [pc, #16]	; (44bc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    44ac:	9b02      	ldr	r3, [sp, #8]
    44ae:	6113      	str	r3, [r2, #16]
}
    44b0:	bf00      	nop
    44b2:	b004      	add	sp, #16
    44b4:	4770      	bx	lr
    44b6:	bf00      	nop
    44b8:	00008738 	.word	0x00008738
    44bc:	40048000 	.word	0x40048000

000044c0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44c0:	b084      	sub	sp, #16
    44c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44c4:	9b01      	ldr	r3, [sp, #4]
    44c6:	685b      	ldr	r3, [r3, #4]
    44c8:	4a0a      	ldr	r2, [pc, #40]	; (44f4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    44ca:	5cd3      	ldrb	r3, [r2, r3]
    44cc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    44ce:	4b0a      	ldr	r3, [pc, #40]	; (44f8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44d0:	691b      	ldr	r3, [r3, #16]
    44d2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44d4:	9b02      	ldr	r3, [sp, #8]
    44d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44da:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44dc:	9b03      	ldr	r3, [sp, #12]
    44de:	011b      	lsls	r3, r3, #4
    44e0:	9a02      	ldr	r2, [sp, #8]
    44e2:	4313      	orrs	r3, r2
    44e4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44e6:	4a04      	ldr	r2, [pc, #16]	; (44f8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44e8:	9b02      	ldr	r3, [sp, #8]
    44ea:	6113      	str	r3, [r2, #16]
}
    44ec:	bf00      	nop
    44ee:	b004      	add	sp, #16
    44f0:	4770      	bx	lr
    44f2:	bf00      	nop
    44f4:	00008738 	.word	0x00008738
    44f8:	40048000 	.word	0x40048000

000044fc <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44fc:	b084      	sub	sp, #16
    44fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4500:	4b0a      	ldr	r3, [pc, #40]	; (452c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4502:	785b      	ldrb	r3, [r3, #1]
    4504:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4506:	4b0a      	ldr	r3, [pc, #40]	; (4530 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4508:	691b      	ldr	r3, [r3, #16]
    450a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    450c:	9b02      	ldr	r3, [sp, #8]
    450e:	f023 030c 	bic.w	r3, r3, #12
    4512:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4514:	9b03      	ldr	r3, [sp, #12]
    4516:	009b      	lsls	r3, r3, #2
    4518:	9a02      	ldr	r2, [sp, #8]
    451a:	4313      	orrs	r3, r2
    451c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    451e:	4a04      	ldr	r2, [pc, #16]	; (4530 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4520:	9b02      	ldr	r3, [sp, #8]
    4522:	6113      	str	r3, [r2, #16]
}
    4524:	bf00      	nop
    4526:	b004      	add	sp, #16
    4528:	4770      	bx	lr
    452a:	bf00      	nop
    452c:	000087f0 	.word	0x000087f0
    4530:	40048000 	.word	0x40048000

00004534 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4534:	b084      	sub	sp, #16
    4536:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4538:	9b01      	ldr	r3, [sp, #4]
    453a:	685b      	ldr	r3, [r3, #4]
    453c:	4a0a      	ldr	r2, [pc, #40]	; (4568 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    453e:	5cd3      	ldrb	r3, [r2, r3]
    4540:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4542:	4b0a      	ldr	r3, [pc, #40]	; (456c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4544:	691b      	ldr	r3, [r3, #16]
    4546:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4548:	9b02      	ldr	r3, [sp, #8]
    454a:	f023 030c 	bic.w	r3, r3, #12
    454e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4550:	9b03      	ldr	r3, [sp, #12]
    4552:	009b      	lsls	r3, r3, #2
    4554:	9a02      	ldr	r2, [sp, #8]
    4556:	4313      	orrs	r3, r2
    4558:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    455a:	4a04      	ldr	r2, [pc, #16]	; (456c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    455c:	9b02      	ldr	r3, [sp, #8]
    455e:	6113      	str	r3, [r2, #16]
}
    4560:	bf00      	nop
    4562:	b004      	add	sp, #16
    4564:	4770      	bx	lr
    4566:	bf00      	nop
    4568:	000087f0 	.word	0x000087f0
    456c:	40048000 	.word	0x40048000

00004570 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4570:	b084      	sub	sp, #16
    4572:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4574:	4b0a      	ldr	r3, [pc, #40]	; (45a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4576:	795b      	ldrb	r3, [r3, #5]
    4578:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    457a:	4b0a      	ldr	r3, [pc, #40]	; (45a4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    457c:	6a1b      	ldr	r3, [r3, #32]
    457e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4580:	9b02      	ldr	r3, [sp, #8]
    4582:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4586:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4588:	9b03      	ldr	r3, [sp, #12]
    458a:	061b      	lsls	r3, r3, #24
    458c:	9a02      	ldr	r2, [sp, #8]
    458e:	4313      	orrs	r3, r2
    4590:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4592:	4a04      	ldr	r2, [pc, #16]	; (45a4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4594:	9b02      	ldr	r3, [sp, #8]
    4596:	6213      	str	r3, [r2, #32]
}
    4598:	bf00      	nop
    459a:	b004      	add	sp, #16
    459c:	4770      	bx	lr
    459e:	bf00      	nop
    45a0:	00008790 	.word	0x00008790
    45a4:	40064000 	.word	0x40064000

000045a8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45a8:	b084      	sub	sp, #16
    45aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45ac:	9b01      	ldr	r3, [sp, #4]
    45ae:	685b      	ldr	r3, [r3, #4]
    45b0:	4a0a      	ldr	r2, [pc, #40]	; (45dc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    45b2:	5cd3      	ldrb	r3, [r2, r3]
    45b4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    45b6:	4b0a      	ldr	r3, [pc, #40]	; (45e0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45b8:	6a1b      	ldr	r3, [r3, #32]
    45ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    45bc:	9b02      	ldr	r3, [sp, #8]
    45be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45c2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    45c4:	9b03      	ldr	r3, [sp, #12]
    45c6:	061b      	lsls	r3, r3, #24
    45c8:	9a02      	ldr	r2, [sp, #8]
    45ca:	4313      	orrs	r3, r2
    45cc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45ce:	4a04      	ldr	r2, [pc, #16]	; (45e0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45d0:	9b02      	ldr	r3, [sp, #8]
    45d2:	6213      	str	r3, [r2, #32]
}
    45d4:	bf00      	nop
    45d6:	b004      	add	sp, #16
    45d8:	4770      	bx	lr
    45da:	bf00      	nop
    45dc:	00008790 	.word	0x00008790
    45e0:	40064000 	.word	0x40064000

000045e4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45e4:	b086      	sub	sp, #24
    45e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45e8:	4b20      	ldr	r3, [pc, #128]	; (466c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    45ea:	795b      	ldrb	r3, [r3, #5]
    45ec:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45ee:	9b01      	ldr	r3, [sp, #4]
    45f0:	681a      	ldr	r2, [r3, #0]
    45f2:	491f      	ldr	r1, [pc, #124]	; (4670 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    45f4:	4613      	mov	r3, r2
    45f6:	00db      	lsls	r3, r3, #3
    45f8:	4413      	add	r3, r2
    45fa:	440b      	add	r3, r1
    45fc:	781b      	ldrb	r3, [r3, #0]
    45fe:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4600:	4b1c      	ldr	r3, [pc, #112]	; (4674 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4602:	68db      	ldr	r3, [r3, #12]
    4604:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4606:	9b03      	ldr	r3, [sp, #12]
    4608:	2b03      	cmp	r3, #3
    460a:	d813      	bhi.n	4634 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    460c:	9b03      	ldr	r3, [sp, #12]
    460e:	005b      	lsls	r3, r3, #1
    4610:	3318      	adds	r3, #24
    4612:	2203      	movs	r2, #3
    4614:	fa02 f303 	lsl.w	r3, r2, r3
    4618:	43db      	mvns	r3, r3
    461a:	9a05      	ldr	r2, [sp, #20]
    461c:	4013      	ands	r3, r2
    461e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4620:	9b03      	ldr	r3, [sp, #12]
    4622:	005b      	lsls	r3, r3, #1
    4624:	3318      	adds	r3, #24
    4626:	9a04      	ldr	r2, [sp, #16]
    4628:	fa02 f303 	lsl.w	r3, r2, r3
    462c:	9a05      	ldr	r2, [sp, #20]
    462e:	4313      	orrs	r3, r2
    4630:	9305      	str	r3, [sp, #20]
    4632:	e014      	b.n	465e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4634:	9b03      	ldr	r3, [sp, #12]
    4636:	3b04      	subs	r3, #4
    4638:	005b      	lsls	r3, r3, #1
    463a:	3310      	adds	r3, #16
    463c:	2203      	movs	r2, #3
    463e:	fa02 f303 	lsl.w	r3, r2, r3
    4642:	43db      	mvns	r3, r3
    4644:	9a05      	ldr	r2, [sp, #20]
    4646:	4013      	ands	r3, r2
    4648:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    464a:	9b03      	ldr	r3, [sp, #12]
    464c:	3b04      	subs	r3, #4
    464e:	005b      	lsls	r3, r3, #1
    4650:	3310      	adds	r3, #16
    4652:	9a04      	ldr	r2, [sp, #16]
    4654:	fa02 f303 	lsl.w	r3, r2, r3
    4658:	9a05      	ldr	r2, [sp, #20]
    465a:	4313      	orrs	r3, r2
    465c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    465e:	4a05      	ldr	r2, [pc, #20]	; (4674 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4660:	9b05      	ldr	r3, [sp, #20]
    4662:	60d3      	str	r3, [r2, #12]
}
    4664:	bf00      	nop
    4666:	b006      	add	sp, #24
    4668:	4770      	bx	lr
    466a:	bf00      	nop
    466c:	00008738 	.word	0x00008738
    4670:	00008428 	.word	0x00008428
    4674:	40048000 	.word	0x40048000

00004678 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4678:	b086      	sub	sp, #24
    467a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    467c:	9b01      	ldr	r3, [sp, #4]
    467e:	685b      	ldr	r3, [r3, #4]
    4680:	4a20      	ldr	r2, [pc, #128]	; (4704 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4682:	5cd3      	ldrb	r3, [r2, r3]
    4684:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4686:	9b01      	ldr	r3, [sp, #4]
    4688:	681a      	ldr	r2, [r3, #0]
    468a:	491f      	ldr	r1, [pc, #124]	; (4708 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    468c:	4613      	mov	r3, r2
    468e:	00db      	lsls	r3, r3, #3
    4690:	4413      	add	r3, r2
    4692:	440b      	add	r3, r1
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4698:	4b1c      	ldr	r3, [pc, #112]	; (470c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    469a:	68db      	ldr	r3, [r3, #12]
    469c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    469e:	9b03      	ldr	r3, [sp, #12]
    46a0:	2b03      	cmp	r3, #3
    46a2:	d813      	bhi.n	46cc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    46a4:	9b03      	ldr	r3, [sp, #12]
    46a6:	005b      	lsls	r3, r3, #1
    46a8:	3318      	adds	r3, #24
    46aa:	2203      	movs	r2, #3
    46ac:	fa02 f303 	lsl.w	r3, r2, r3
    46b0:	43db      	mvns	r3, r3
    46b2:	9a05      	ldr	r2, [sp, #20]
    46b4:	4013      	ands	r3, r2
    46b6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    46b8:	9b03      	ldr	r3, [sp, #12]
    46ba:	005b      	lsls	r3, r3, #1
    46bc:	3318      	adds	r3, #24
    46be:	9a04      	ldr	r2, [sp, #16]
    46c0:	fa02 f303 	lsl.w	r3, r2, r3
    46c4:	9a05      	ldr	r2, [sp, #20]
    46c6:	4313      	orrs	r3, r2
    46c8:	9305      	str	r3, [sp, #20]
    46ca:	e014      	b.n	46f6 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    46cc:	9b03      	ldr	r3, [sp, #12]
    46ce:	3b04      	subs	r3, #4
    46d0:	005b      	lsls	r3, r3, #1
    46d2:	3310      	adds	r3, #16
    46d4:	2203      	movs	r2, #3
    46d6:	fa02 f303 	lsl.w	r3, r2, r3
    46da:	43db      	mvns	r3, r3
    46dc:	9a05      	ldr	r2, [sp, #20]
    46de:	4013      	ands	r3, r2
    46e0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    46e2:	9b03      	ldr	r3, [sp, #12]
    46e4:	3b04      	subs	r3, #4
    46e6:	005b      	lsls	r3, r3, #1
    46e8:	3310      	adds	r3, #16
    46ea:	9a04      	ldr	r2, [sp, #16]
    46ec:	fa02 f303 	lsl.w	r3, r2, r3
    46f0:	9a05      	ldr	r2, [sp, #20]
    46f2:	4313      	orrs	r3, r2
    46f4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    46f6:	4a05      	ldr	r2, [pc, #20]	; (470c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46f8:	9b05      	ldr	r3, [sp, #20]
    46fa:	60d3      	str	r3, [r2, #12]
}
    46fc:	bf00      	nop
    46fe:	b006      	add	sp, #24
    4700:	4770      	bx	lr
    4702:	bf00      	nop
    4704:	00008738 	.word	0x00008738
    4708:	00008428 	.word	0x00008428
    470c:	40048000 	.word	0x40048000

00004710 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4710:	b084      	sub	sp, #16
    4712:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4714:	4b06      	ldr	r3, [pc, #24]	; (4730 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4716:	685b      	ldr	r3, [r3, #4]
    4718:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    471a:	9b03      	ldr	r3, [sp, #12]
    471c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4720:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4722:	4a03      	ldr	r2, [pc, #12]	; (4730 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4724:	9b03      	ldr	r3, [sp, #12]
    4726:	6053      	str	r3, [r2, #4]
}
    4728:	bf00      	nop
    472a:	b004      	add	sp, #16
    472c:	4770      	bx	lr
    472e:	bf00      	nop
    4730:	40048000 	.word	0x40048000

00004734 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4734:	b084      	sub	sp, #16
    4736:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4738:	9b01      	ldr	r3, [sp, #4]
    473a:	685b      	ldr	r3, [r3, #4]
    473c:	4a0a      	ldr	r2, [pc, #40]	; (4768 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    473e:	5cd3      	ldrb	r3, [r2, r3]
    4740:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4742:	4b0a      	ldr	r3, [pc, #40]	; (476c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4744:	685b      	ldr	r3, [r3, #4]
    4746:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4748:	9b02      	ldr	r3, [sp, #8]
    474a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    474e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4750:	9b03      	ldr	r3, [sp, #12]
    4752:	011b      	lsls	r3, r3, #4
    4754:	9a02      	ldr	r2, [sp, #8]
    4756:	4313      	orrs	r3, r2
    4758:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    475a:	4a04      	ldr	r2, [pc, #16]	; (476c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    475c:	9b02      	ldr	r3, [sp, #8]
    475e:	6053      	str	r3, [r2, #4]
}
    4760:	bf00      	nop
    4762:	b004      	add	sp, #16
    4764:	4770      	bx	lr
    4766:	bf00      	nop
    4768:	00008738 	.word	0x00008738
    476c:	40048000 	.word	0x40048000

00004770 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4770:	b084      	sub	sp, #16
    4772:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4774:	9b01      	ldr	r3, [sp, #4]
    4776:	681a      	ldr	r2, [r3, #0]
    4778:	490f      	ldr	r1, [pc, #60]	; (47b8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    477a:	4613      	mov	r3, r2
    477c:	00db      	lsls	r3, r3, #3
    477e:	4413      	add	r3, r2
    4780:	440b      	add	r3, r1
    4782:	3304      	adds	r3, #4
    4784:	781b      	ldrb	r3, [r3, #0]
    4786:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4788:	4a0c      	ldr	r2, [pc, #48]	; (47bc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    478a:	9b03      	ldr	r3, [sp, #12]
    478c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4790:	490a      	ldr	r1, [pc, #40]	; (47bc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4792:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4796:	9b03      	ldr	r3, [sp, #12]
    4798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    479c:	4a07      	ldr	r2, [pc, #28]	; (47bc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    479e:	9b03      	ldr	r3, [sp, #12]
    47a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47a4:	4905      	ldr	r1, [pc, #20]	; (47bc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47a6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    47aa:	9b03      	ldr	r3, [sp, #12]
    47ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47b0:	bf00      	nop
    47b2:	b004      	add	sp, #16
    47b4:	4770      	bx	lr
    47b6:	bf00      	nop
    47b8:	00008428 	.word	0x00008428
    47bc:	40065000 	.word	0x40065000

000047c0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47c0:	b086      	sub	sp, #24
    47c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    47c4:	9b01      	ldr	r3, [sp, #4]
    47c6:	681a      	ldr	r2, [r3, #0]
    47c8:	4912      	ldr	r1, [pc, #72]	; (4814 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    47ca:	4613      	mov	r3, r2
    47cc:	00db      	lsls	r3, r3, #3
    47ce:	4413      	add	r3, r2
    47d0:	440b      	add	r3, r1
    47d2:	3304      	adds	r3, #4
    47d4:	781b      	ldrb	r3, [r3, #0]
    47d6:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47d8:	9b01      	ldr	r3, [sp, #4]
    47da:	685b      	ldr	r3, [r3, #4]
    47dc:	4a0e      	ldr	r2, [pc, #56]	; (4818 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    47de:	5cd3      	ldrb	r3, [r2, r3]
    47e0:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    47e2:	4a0e      	ldr	r2, [pc, #56]	; (481c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47e4:	9b05      	ldr	r3, [sp, #20]
    47e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47ea:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    47ec:	9b03      	ldr	r3, [sp, #12]
    47ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    47f2:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    47f4:	9b04      	ldr	r3, [sp, #16]
    47f6:	061b      	lsls	r3, r3, #24
    47f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    47fc:	9a03      	ldr	r2, [sp, #12]
    47fe:	4313      	orrs	r3, r2
    4800:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4802:	4906      	ldr	r1, [pc, #24]	; (481c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4804:	9b05      	ldr	r3, [sp, #20]
    4806:	9a03      	ldr	r2, [sp, #12]
    4808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    480c:	bf00      	nop
    480e:	b006      	add	sp, #24
    4810:	4770      	bx	lr
    4812:	bf00      	nop
    4814:	00008428 	.word	0x00008428
    4818:	000087c0 	.word	0x000087c0
    481c:	40065000 	.word	0x40065000

00004820 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4820:	b084      	sub	sp, #16
    4822:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4824:	4b0b      	ldr	r3, [pc, #44]	; (4854 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4826:	7f1b      	ldrb	r3, [r3, #28]
    4828:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    482a:	4b0b      	ldr	r3, [pc, #44]	; (4858 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    482c:	685b      	ldr	r3, [r3, #4]
    482e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4830:	9b02      	ldr	r3, [sp, #8]
    4832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4836:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4838:	9b03      	ldr	r3, [sp, #12]
    483a:	031b      	lsls	r3, r3, #12
    483c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4840:	9a02      	ldr	r2, [sp, #8]
    4842:	4313      	orrs	r3, r2
    4844:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4846:	4a04      	ldr	r2, [pc, #16]	; (4858 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4848:	9b02      	ldr	r3, [sp, #8]
    484a:	6053      	str	r3, [r2, #4]
}
    484c:	bf00      	nop
    484e:	b004      	add	sp, #16
    4850:	4770      	bx	lr
    4852:	bf00      	nop
    4854:	00008738 	.word	0x00008738
    4858:	40048000 	.word	0x40048000

0000485c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    485c:	b084      	sub	sp, #16
    485e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4860:	9b01      	ldr	r3, [sp, #4]
    4862:	685b      	ldr	r3, [r3, #4]
    4864:	4a0b      	ldr	r2, [pc, #44]	; (4894 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4866:	5cd3      	ldrb	r3, [r2, r3]
    4868:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    486a:	4b0b      	ldr	r3, [pc, #44]	; (4898 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    486c:	685b      	ldr	r3, [r3, #4]
    486e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4870:	9b02      	ldr	r3, [sp, #8]
    4872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4876:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4878:	9b03      	ldr	r3, [sp, #12]
    487a:	031b      	lsls	r3, r3, #12
    487c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4880:	9a02      	ldr	r2, [sp, #8]
    4882:	4313      	orrs	r3, r2
    4884:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4886:	4a04      	ldr	r2, [pc, #16]	; (4898 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4888:	9b02      	ldr	r3, [sp, #8]
    488a:	6053      	str	r3, [r2, #4]
}
    488c:	bf00      	nop
    488e:	b004      	add	sp, #16
    4890:	4770      	bx	lr
    4892:	bf00      	nop
    4894:	00008738 	.word	0x00008738
    4898:	40048000 	.word	0x40048000

0000489c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    489c:	b500      	push	{lr}
    489e:	b085      	sub	sp, #20
    48a0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    48a2:	2300      	movs	r3, #0
    48a4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    48a8:	9b01      	ldr	r3, [sp, #4]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d037      	beq.n	491e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48ae:	2300      	movs	r3, #0
    48b0:	9303      	str	r3, [sp, #12]
    48b2:	e02b      	b.n	490c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    48b4:	4b29      	ldr	r3, [pc, #164]	; (495c <DisableSafeClock+0xc0>)
    48b6:	6819      	ldr	r1, [r3, #0]
    48b8:	9a03      	ldr	r2, [sp, #12]
    48ba:	4613      	mov	r3, r2
    48bc:	005b      	lsls	r3, r3, #1
    48be:	4413      	add	r3, r2
    48c0:	009b      	lsls	r3, r3, #2
    48c2:	440b      	add	r3, r1
    48c4:	3314      	adds	r3, #20
    48c6:	681b      	ldr	r3, [r3, #0]
    48c8:	2b05      	cmp	r3, #5
    48ca:	d11c      	bne.n	4906 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    48cc:	2301      	movs	r3, #1
    48ce:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    48d2:	4b22      	ldr	r3, [pc, #136]	; (495c <DisableSafeClock+0xc0>)
    48d4:	6819      	ldr	r1, [r3, #0]
    48d6:	9a03      	ldr	r2, [sp, #12]
    48d8:	4613      	mov	r3, r2
    48da:	005b      	lsls	r3, r3, #1
    48dc:	4413      	add	r3, r2
    48de:	009b      	lsls	r3, r3, #2
    48e0:	440b      	add	r3, r1
    48e2:	3318      	adds	r3, #24
    48e4:	881b      	ldrh	r3, [r3, #0]
    48e6:	2b00      	cmp	r3, #0
    48e8:	d118      	bne.n	491c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48ea:	4b1d      	ldr	r3, [pc, #116]	; (4960 <DisableSafeClock+0xc4>)
    48ec:	791b      	ldrb	r3, [r3, #4]
    48ee:	4619      	mov	r1, r3
    48f0:	4a1c      	ldr	r2, [pc, #112]	; (4964 <DisableSafeClock+0xc8>)
    48f2:	460b      	mov	r3, r1
    48f4:	005b      	lsls	r3, r3, #1
    48f6:	440b      	add	r3, r1
    48f8:	009b      	lsls	r3, r3, #2
    48fa:	4413      	add	r3, r2
    48fc:	3308      	adds	r3, #8
    48fe:	681b      	ldr	r3, [r3, #0]
    4900:	2005      	movs	r0, #5
    4902:	4798      	blx	r3
                }
                break;
    4904:	e00a      	b.n	491c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4906:	9b03      	ldr	r3, [sp, #12]
    4908:	3301      	adds	r3, #1
    490a:	9303      	str	r3, [sp, #12]
    490c:	4b13      	ldr	r3, [pc, #76]	; (495c <DisableSafeClock+0xc0>)
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	7a1b      	ldrb	r3, [r3, #8]
    4912:	461a      	mov	r2, r3
    4914:	9b03      	ldr	r3, [sp, #12]
    4916:	4293      	cmp	r3, r2
    4918:	d3cc      	bcc.n	48b4 <DisableSafeClock+0x18>
    491a:	e000      	b.n	491e <DisableSafeClock+0x82>
                break;
    491c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    491e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4922:	f083 0301 	eor.w	r3, r3, #1
    4926:	b2db      	uxtb	r3, r3
    4928:	2b00      	cmp	r3, #0
    492a:	d013      	beq.n	4954 <DisableSafeClock+0xb8>
    492c:	4b0e      	ldr	r3, [pc, #56]	; (4968 <DisableSafeClock+0xcc>)
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	f083 0301 	eor.w	r3, r3, #1
    4934:	b2db      	uxtb	r3, r3
    4936:	2b00      	cmp	r3, #0
    4938:	d00c      	beq.n	4954 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    493a:	4b09      	ldr	r3, [pc, #36]	; (4960 <DisableSafeClock+0xc4>)
    493c:	791b      	ldrb	r3, [r3, #4]
    493e:	4619      	mov	r1, r3
    4940:	4a08      	ldr	r2, [pc, #32]	; (4964 <DisableSafeClock+0xc8>)
    4942:	460b      	mov	r3, r1
    4944:	005b      	lsls	r3, r3, #1
    4946:	440b      	add	r3, r1
    4948:	009b      	lsls	r3, r3, #2
    494a:	4413      	add	r3, r2
    494c:	3308      	adds	r3, #8
    494e:	681b      	ldr	r3, [r3, #0]
    4950:	2005      	movs	r0, #5
    4952:	4798      	blx	r3
    }
}
    4954:	bf00      	nop
    4956:	b005      	add	sp, #20
    4958:	f85d fb04 	ldr.w	pc, [sp], #4
    495c:	1fff8ba8 	.word	0x1fff8ba8
    4960:	000083b8 	.word	0x000083b8
    4964:	000089e8 	.word	0x000089e8
    4968:	1fff8b18 	.word	0x1fff8b18

0000496c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    496c:	4b06      	ldr	r3, [pc, #24]	; (4988 <SetFircToResetValue_TrustedCall+0x1c>)
    496e:	2200      	movs	r2, #0
    4970:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4974:	4b04      	ldr	r3, [pc, #16]	; (4988 <SetFircToResetValue_TrustedCall+0x1c>)
    4976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    497a:	4a03      	ldr	r2, [pc, #12]	; (4988 <SetFircToResetValue_TrustedCall+0x1c>)
    497c:	f043 0301 	orr.w	r3, r3, #1
    4980:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4984:	bf00      	nop
    4986:	4770      	bx	lr
    4988:	40064000 	.word	0x40064000

0000498c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    498c:	b084      	sub	sp, #16
    498e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4990:	2303      	movs	r3, #3
    4992:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4994:	2300      	movs	r3, #0
    4996:	9302      	str	r3, [sp, #8]
    4998:	e028      	b.n	49ec <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    499a:	9b01      	ldr	r3, [sp, #4]
    499c:	9a02      	ldr	r2, [sp, #8]
    499e:	320d      	adds	r2, #13
    49a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49a4:	2b28      	cmp	r3, #40	; 0x28
    49a6:	d10b      	bne.n	49c0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    49a8:	9a01      	ldr	r2, [sp, #4]
    49aa:	9b02      	ldr	r3, [sp, #8]
    49ac:	330d      	adds	r3, #13
    49ae:	00db      	lsls	r3, r3, #3
    49b0:	4413      	add	r3, r2
    49b2:	685b      	ldr	r3, [r3, #4]
    49b4:	4a2b      	ldr	r2, [pc, #172]	; (4a64 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    49b6:	5cd3      	ldrb	r3, [r2, r3]
    49b8:	011b      	lsls	r3, r3, #4
    49ba:	9a03      	ldr	r2, [sp, #12]
    49bc:	4313      	orrs	r3, r2
    49be:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    49c0:	9b01      	ldr	r3, [sp, #4]
    49c2:	9a02      	ldr	r2, [sp, #8]
    49c4:	320d      	adds	r2, #13
    49c6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49ca:	2b29      	cmp	r3, #41	; 0x29
    49cc:	d10b      	bne.n	49e6 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    49ce:	9a01      	ldr	r2, [sp, #4]
    49d0:	9b02      	ldr	r3, [sp, #8]
    49d2:	330d      	adds	r3, #13
    49d4:	00db      	lsls	r3, r3, #3
    49d6:	4413      	add	r3, r2
    49d8:	685b      	ldr	r3, [r3, #4]
    49da:	4a23      	ldr	r2, [pc, #140]	; (4a68 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    49dc:	5cd3      	ldrb	r3, [r2, r3]
    49de:	009b      	lsls	r3, r3, #2
    49e0:	9a03      	ldr	r2, [sp, #12]
    49e2:	4313      	orrs	r3, r2
    49e4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49e6:	9b02      	ldr	r3, [sp, #8]
    49e8:	3301      	adds	r3, #1
    49ea:	9302      	str	r3, [sp, #8]
    49ec:	9b01      	ldr	r3, [sp, #4]
    49ee:	7adb      	ldrb	r3, [r3, #11]
    49f0:	461a      	mov	r2, r3
    49f2:	9b02      	ldr	r3, [sp, #8]
    49f4:	4293      	cmp	r3, r2
    49f6:	d3d0      	bcc.n	499a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49f8:	2300      	movs	r3, #0
    49fa:	9302      	str	r3, [sp, #8]
    49fc:	e026      	b.n	4a4c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    49fe:	9a01      	ldr	r2, [sp, #4]
    4a00:	9b02      	ldr	r3, [sp, #8]
    4a02:	334e      	adds	r3, #78	; 0x4e
    4a04:	00db      	lsls	r3, r3, #3
    4a06:	4413      	add	r3, r2
    4a08:	685b      	ldr	r3, [r3, #4]
    4a0a:	2b12      	cmp	r3, #18
    4a0c:	d109      	bne.n	4a22 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4a0e:	9a01      	ldr	r2, [sp, #4]
    4a10:	9b02      	ldr	r3, [sp, #8]
    4a12:	334e      	adds	r3, #78	; 0x4e
    4a14:	00db      	lsls	r3, r3, #3
    4a16:	4413      	add	r3, r2
    4a18:	891b      	ldrh	r3, [r3, #8]
    4a1a:	005b      	lsls	r3, r3, #1
    4a1c:	9a03      	ldr	r2, [sp, #12]
    4a1e:	4313      	orrs	r3, r2
    4a20:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4a22:	9a01      	ldr	r2, [sp, #4]
    4a24:	9b02      	ldr	r3, [sp, #8]
    4a26:	334e      	adds	r3, #78	; 0x4e
    4a28:	00db      	lsls	r3, r3, #3
    4a2a:	4413      	add	r3, r2
    4a2c:	685b      	ldr	r3, [r3, #4]
    4a2e:	2b13      	cmp	r3, #19
    4a30:	d109      	bne.n	4a46 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4a32:	9a01      	ldr	r2, [sp, #4]
    4a34:	9b02      	ldr	r3, [sp, #8]
    4a36:	334e      	adds	r3, #78	; 0x4e
    4a38:	00db      	lsls	r3, r3, #3
    4a3a:	4413      	add	r3, r2
    4a3c:	891b      	ldrh	r3, [r3, #8]
    4a3e:	461a      	mov	r2, r3
    4a40:	9b03      	ldr	r3, [sp, #12]
    4a42:	4313      	orrs	r3, r2
    4a44:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a46:	9b02      	ldr	r3, [sp, #8]
    4a48:	3301      	adds	r3, #1
    4a4a:	9302      	str	r3, [sp, #8]
    4a4c:	9b01      	ldr	r3, [sp, #4]
    4a4e:	7c1b      	ldrb	r3, [r3, #16]
    4a50:	461a      	mov	r2, r3
    4a52:	9b02      	ldr	r3, [sp, #8]
    4a54:	4293      	cmp	r3, r2
    4a56:	d3d2      	bcc.n	49fe <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a58:	4a04      	ldr	r2, [pc, #16]	; (4a6c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a5a:	9b03      	ldr	r3, [sp, #12]
    4a5c:	6113      	str	r3, [r2, #16]
}
    4a5e:	bf00      	nop
    4a60:	b004      	add	sp, #16
    4a62:	4770      	bx	lr
    4a64:	00008738 	.word	0x00008738
    4a68:	000087f0 	.word	0x000087f0
    4a6c:	40048000 	.word	0x40048000

00004a70 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a70:	b500      	push	{lr}
    4a72:	b089      	sub	sp, #36	; 0x24
    4a74:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a76:	2300      	movs	r3, #0
    4a78:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a7c:	4a21      	ldr	r2, [pc, #132]	; (4b04 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a7e:	9b01      	ldr	r3, [sp, #4]
    4a80:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a82:	4b21      	ldr	r3, [pc, #132]	; (4b08 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a84:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a88:	f003 0301 	and.w	r3, r3, #1
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d12e      	bne.n	4aee <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a90:	4b1e      	ldr	r3, [pc, #120]	; (4b0c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a92:	2200      	movs	r2, #0
    4a94:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a96:	f7ff ff69 	bl	496c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a9a:	aa03      	add	r2, sp, #12
    4a9c:	a904      	add	r1, sp, #16
    4a9e:	a805      	add	r0, sp, #20
    4aa0:	f24c 3350 	movw	r3, #50000	; 0xc350
    4aa4:	f7fe f8ae 	bl	2c04 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4aa8:	4b17      	ldr	r3, [pc, #92]	; (4b08 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4aaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4aae:	0e1b      	lsrs	r3, r3, #24
    4ab0:	f003 0301 	and.w	r3, r3, #1
    4ab4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4ab6:	9a03      	ldr	r2, [sp, #12]
    4ab8:	a904      	add	r1, sp, #16
    4aba:	ab05      	add	r3, sp, #20
    4abc:	4618      	mov	r0, r3
    4abe:	f7fe f8bb 	bl	2c38 <Clock_Ip_TimeoutExpired>
    4ac2:	4603      	mov	r3, r0
    4ac4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4ac8:	9b06      	ldr	r3, [sp, #24]
    4aca:	2b00      	cmp	r3, #0
    4acc:	d106      	bne.n	4adc <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4ace:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ad2:	f083 0301 	eor.w	r3, r3, #1
    4ad6:	b2db      	uxtb	r3, r3
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d1e5      	bne.n	4aa8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4adc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d007      	beq.n	4af4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4ae4:	2105      	movs	r1, #5
    4ae6:	2001      	movs	r0, #1
    4ae8:	f7fe f87c 	bl	2be4 <Clock_Ip_ReportClockErrors>
    4aec:	e002      	b.n	4af4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4aee:	4b07      	ldr	r3, [pc, #28]	; (4b0c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4af0:	2201      	movs	r2, #1
    4af2:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4af4:	9801      	ldr	r0, [sp, #4]
    4af6:	f7ff ff49 	bl	498c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4afa:	bf00      	nop
    4afc:	b009      	add	sp, #36	; 0x24
    4afe:	f85d fb04 	ldr.w	pc, [sp], #4
    4b02:	bf00      	nop
    4b04:	1fff8ba8 	.word	0x1fff8ba8
    4b08:	40064000 	.word	0x40064000
    4b0c:	1fff8b18 	.word	0x1fff8b18

00004b10 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4b10:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4b12:	2300      	movs	r3, #0
    4b14:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b16:	4b29      	ldr	r3, [pc, #164]	; (4bbc <getFircConfig+0xac>)
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d024      	beq.n	4b68 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b1e:	2300      	movs	r3, #0
    4b20:	9301      	str	r3, [sp, #4]
    4b22:	e01a      	b.n	4b5a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4b24:	4b25      	ldr	r3, [pc, #148]	; (4bbc <getFircConfig+0xac>)
    4b26:	6819      	ldr	r1, [r3, #0]
    4b28:	9a01      	ldr	r2, [sp, #4]
    4b2a:	4613      	mov	r3, r2
    4b2c:	005b      	lsls	r3, r3, #1
    4b2e:	4413      	add	r3, r2
    4b30:	009b      	lsls	r3, r3, #2
    4b32:	440b      	add	r3, r1
    4b34:	3314      	adds	r3, #20
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	2b05      	cmp	r3, #5
    4b3a:	d10b      	bne.n	4b54 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4b3c:	4b1f      	ldr	r3, [pc, #124]	; (4bbc <getFircConfig+0xac>)
    4b3e:	6819      	ldr	r1, [r3, #0]
    4b40:	9a01      	ldr	r2, [sp, #4]
    4b42:	4613      	mov	r3, r2
    4b44:	005b      	lsls	r3, r3, #1
    4b46:	4413      	add	r3, r2
    4b48:	009b      	lsls	r3, r3, #2
    4b4a:	3310      	adds	r3, #16
    4b4c:	440b      	add	r3, r1
    4b4e:	3304      	adds	r3, #4
    4b50:	9300      	str	r3, [sp, #0]
                break;
    4b52:	e009      	b.n	4b68 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b54:	9b01      	ldr	r3, [sp, #4]
    4b56:	3301      	adds	r3, #1
    4b58:	9301      	str	r3, [sp, #4]
    4b5a:	4b18      	ldr	r3, [pc, #96]	; (4bbc <getFircConfig+0xac>)
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	7a1b      	ldrb	r3, [r3, #8]
    4b60:	461a      	mov	r2, r3
    4b62:	9b01      	ldr	r3, [sp, #4]
    4b64:	4293      	cmp	r3, r2
    4b66:	d3dd      	bcc.n	4b24 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b68:	9b00      	ldr	r3, [sp, #0]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d121      	bne.n	4bb2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b6e:	4b14      	ldr	r3, [pc, #80]	; (4bc0 <getFircConfig+0xb0>)
    4b70:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b72:	4b13      	ldr	r3, [pc, #76]	; (4bc0 <getFircConfig+0xb0>)
    4b74:	2205      	movs	r2, #5
    4b76:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b78:	4b12      	ldr	r3, [pc, #72]	; (4bc4 <getFircConfig+0xb4>)
    4b7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b7e:	b29b      	uxth	r3, r3
    4b80:	f003 0301 	and.w	r3, r3, #1
    4b84:	b29a      	uxth	r2, r3
    4b86:	4b0e      	ldr	r3, [pc, #56]	; (4bc0 <getFircConfig+0xb0>)
    4b88:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4b8a:	4b0e      	ldr	r3, [pc, #56]	; (4bc4 <getFircConfig+0xb4>)
    4b8c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b90:	b2db      	uxtb	r3, r3
    4b92:	f003 0303 	and.w	r3, r3, #3
    4b96:	b2da      	uxtb	r2, r3
    4b98:	4b09      	ldr	r3, [pc, #36]	; (4bc0 <getFircConfig+0xb0>)
    4b9a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b9c:	4b09      	ldr	r3, [pc, #36]	; (4bc4 <getFircConfig+0xb4>)
    4b9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ba2:	b2db      	uxtb	r3, r3
    4ba4:	10db      	asrs	r3, r3, #3
    4ba6:	b2db      	uxtb	r3, r3
    4ba8:	f003 0301 	and.w	r3, r3, #1
    4bac:	b2da      	uxtb	r2, r3
    4bae:	4b04      	ldr	r3, [pc, #16]	; (4bc0 <getFircConfig+0xb0>)
    4bb0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4bb2:	9b00      	ldr	r3, [sp, #0]
}
    4bb4:	4618      	mov	r0, r3
    4bb6:	b002      	add	sp, #8
    4bb8:	4770      	bx	lr
    4bba:	bf00      	nop
    4bbc:	1fff8ba8 	.word	0x1fff8ba8
    4bc0:	1fff8c14 	.word	0x1fff8c14
    4bc4:	40064000 	.word	0x40064000

00004bc8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4bc8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4bca:	2300      	movs	r3, #0
    4bcc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4bce:	4b20      	ldr	r3, [pc, #128]	; (4c50 <getSoscConfig+0x88>)
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d024      	beq.n	4c20 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bd6:	2300      	movs	r3, #0
    4bd8:	9301      	str	r3, [sp, #4]
    4bda:	e01a      	b.n	4c12 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4bdc:	4b1c      	ldr	r3, [pc, #112]	; (4c50 <getSoscConfig+0x88>)
    4bde:	6819      	ldr	r1, [r3, #0]
    4be0:	9a01      	ldr	r2, [sp, #4]
    4be2:	4613      	mov	r3, r2
    4be4:	009b      	lsls	r3, r3, #2
    4be6:	4413      	add	r3, r2
    4be8:	009b      	lsls	r3, r3, #2
    4bea:	440b      	add	r3, r1
    4bec:	332c      	adds	r3, #44	; 0x2c
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	2b08      	cmp	r3, #8
    4bf2:	d10b      	bne.n	4c0c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4bf4:	4b16      	ldr	r3, [pc, #88]	; (4c50 <getSoscConfig+0x88>)
    4bf6:	6819      	ldr	r1, [r3, #0]
    4bf8:	9a01      	ldr	r2, [sp, #4]
    4bfa:	4613      	mov	r3, r2
    4bfc:	009b      	lsls	r3, r3, #2
    4bfe:	4413      	add	r3, r2
    4c00:	009b      	lsls	r3, r3, #2
    4c02:	3328      	adds	r3, #40	; 0x28
    4c04:	440b      	add	r3, r1
    4c06:	3304      	adds	r3, #4
    4c08:	9300      	str	r3, [sp, #0]
                break;
    4c0a:	e009      	b.n	4c20 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4c0c:	9b01      	ldr	r3, [sp, #4]
    4c0e:	3301      	adds	r3, #1
    4c10:	9301      	str	r3, [sp, #4]
    4c12:	4b0f      	ldr	r3, [pc, #60]	; (4c50 <getSoscConfig+0x88>)
    4c14:	681b      	ldr	r3, [r3, #0]
    4c16:	7a5b      	ldrb	r3, [r3, #9]
    4c18:	461a      	mov	r2, r3
    4c1a:	9b01      	ldr	r3, [sp, #4]
    4c1c:	4293      	cmp	r3, r2
    4c1e:	d3dd      	bcc.n	4bdc <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c20:	9b00      	ldr	r3, [sp, #0]
    4c22:	2b00      	cmp	r3, #0
    4c24:	d110      	bne.n	4c48 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4c26:	4b0b      	ldr	r3, [pc, #44]	; (4c54 <getSoscConfig+0x8c>)
    4c28:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4c2a:	4b0a      	ldr	r3, [pc, #40]	; (4c54 <getSoscConfig+0x8c>)
    4c2c:	2208      	movs	r2, #8
    4c2e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4c30:	4b09      	ldr	r3, [pc, #36]	; (4c58 <getSoscConfig+0x90>)
    4c32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4c36:	b29b      	uxth	r3, r3
    4c38:	f003 0301 	and.w	r3, r3, #1
    4c3c:	b29a      	uxth	r2, r3
    4c3e:	4b05      	ldr	r3, [pc, #20]	; (4c54 <getSoscConfig+0x8c>)
    4c40:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4c42:	4b04      	ldr	r3, [pc, #16]	; (4c54 <getSoscConfig+0x8c>)
    4c44:	4a05      	ldr	r2, [pc, #20]	; (4c5c <getSoscConfig+0x94>)
    4c46:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c48:	9b00      	ldr	r3, [sp, #0]
}
    4c4a:	4618      	mov	r0, r3
    4c4c:	b002      	add	sp, #8
    4c4e:	4770      	bx	lr
    4c50:	1fff8ba8 	.word	0x1fff8ba8
    4c54:	1fff8c20 	.word	0x1fff8c20
    4c58:	40064000 	.word	0x40064000
    4c5c:	02625a00 	.word	0x02625a00

00004c60 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c60:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c62:	2300      	movs	r3, #0
    4c64:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c66:	4b28      	ldr	r3, [pc, #160]	; (4d08 <getSpllConfig+0xa8>)
    4c68:	681b      	ldr	r3, [r3, #0]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d023      	beq.n	4cb6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c6e:	2300      	movs	r3, #0
    4c70:	9301      	str	r3, [sp, #4]
    4c72:	e019      	b.n	4ca8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c74:	4b24      	ldr	r3, [pc, #144]	; (4d08 <getSpllConfig+0xa8>)
    4c76:	6819      	ldr	r1, [r3, #0]
    4c78:	9a01      	ldr	r2, [sp, #4]
    4c7a:	4613      	mov	r3, r2
    4c7c:	009b      	lsls	r3, r3, #2
    4c7e:	4413      	add	r3, r2
    4c80:	00db      	lsls	r3, r3, #3
    4c82:	440b      	add	r3, r1
    4c84:	3340      	adds	r3, #64	; 0x40
    4c86:	681b      	ldr	r3, [r3, #0]
    4c88:	2b09      	cmp	r3, #9
    4c8a:	d10a      	bne.n	4ca2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c8c:	4b1e      	ldr	r3, [pc, #120]	; (4d08 <getSpllConfig+0xa8>)
    4c8e:	6819      	ldr	r1, [r3, #0]
    4c90:	9a01      	ldr	r2, [sp, #4]
    4c92:	4613      	mov	r3, r2
    4c94:	009b      	lsls	r3, r3, #2
    4c96:	4413      	add	r3, r2
    4c98:	00db      	lsls	r3, r3, #3
    4c9a:	3340      	adds	r3, #64	; 0x40
    4c9c:	440b      	add	r3, r1
    4c9e:	9300      	str	r3, [sp, #0]
                break;
    4ca0:	e009      	b.n	4cb6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4ca2:	9b01      	ldr	r3, [sp, #4]
    4ca4:	3301      	adds	r3, #1
    4ca6:	9301      	str	r3, [sp, #4]
    4ca8:	4b17      	ldr	r3, [pc, #92]	; (4d08 <getSpllConfig+0xa8>)
    4caa:	681b      	ldr	r3, [r3, #0]
    4cac:	7a9b      	ldrb	r3, [r3, #10]
    4cae:	461a      	mov	r2, r3
    4cb0:	9b01      	ldr	r3, [sp, #4]
    4cb2:	4293      	cmp	r3, r2
    4cb4:	d3de      	bcc.n	4c74 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4cb6:	9b00      	ldr	r3, [sp, #0]
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d121      	bne.n	4d00 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4cbc:	4b13      	ldr	r3, [pc, #76]	; (4d0c <getSpllConfig+0xac>)
    4cbe:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4cc0:	4b12      	ldr	r3, [pc, #72]	; (4d0c <getSpllConfig+0xac>)
    4cc2:	2209      	movs	r2, #9
    4cc4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4cc6:	4b12      	ldr	r3, [pc, #72]	; (4d10 <getSpllConfig+0xb0>)
    4cc8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ccc:	b29b      	uxth	r3, r3
    4cce:	f003 0301 	and.w	r3, r3, #1
    4cd2:	b29a      	uxth	r2, r3
    4cd4:	4b0d      	ldr	r3, [pc, #52]	; (4d0c <getSpllConfig+0xac>)
    4cd6:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4cd8:	4b0d      	ldr	r3, [pc, #52]	; (4d10 <getSpllConfig+0xb0>)
    4cda:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cde:	0a1b      	lsrs	r3, r3, #8
    4ce0:	b2db      	uxtb	r3, r3
    4ce2:	f003 0307 	and.w	r3, r3, #7
    4ce6:	b2da      	uxtb	r2, r3
    4ce8:	4b08      	ldr	r3, [pc, #32]	; (4d0c <getSpllConfig+0xac>)
    4cea:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4cec:	4b08      	ldr	r3, [pc, #32]	; (4d10 <getSpllConfig+0xb0>)
    4cee:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cf2:	0c1b      	lsrs	r3, r3, #16
    4cf4:	b2db      	uxtb	r3, r3
    4cf6:	f003 031f 	and.w	r3, r3, #31
    4cfa:	b2da      	uxtb	r2, r3
    4cfc:	4b03      	ldr	r3, [pc, #12]	; (4d0c <getSpllConfig+0xac>)
    4cfe:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4d00:	9b00      	ldr	r3, [sp, #0]
}
    4d02:	4618      	mov	r0, r3
    4d04:	b002      	add	sp, #8
    4d06:	4770      	bx	lr
    4d08:	1fff8ba8 	.word	0x1fff8ba8
    4d0c:	1fff8c34 	.word	0x1fff8c34
    4d10:	40064000 	.word	0x40064000

00004d14 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4d14:	b086      	sub	sp, #24
    4d16:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4d18:	2300      	movs	r3, #0
    4d1a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4d1c:	9b01      	ldr	r3, [sp, #4]
    4d1e:	2b1b      	cmp	r3, #27
    4d20:	d00f      	beq.n	4d42 <getSelectorConfig+0x2e>
    4d22:	9b01      	ldr	r3, [sp, #4]
    4d24:	2b1b      	cmp	r3, #27
    4d26:	d80f      	bhi.n	4d48 <getSelectorConfig+0x34>
    4d28:	9b01      	ldr	r3, [sp, #4]
    4d2a:	2b19      	cmp	r3, #25
    4d2c:	d003      	beq.n	4d36 <getSelectorConfig+0x22>
    4d2e:	9b01      	ldr	r3, [sp, #4]
    4d30:	2b1a      	cmp	r3, #26
    4d32:	d003      	beq.n	4d3c <getSelectorConfig+0x28>
    4d34:	e008      	b.n	4d48 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4d36:	2300      	movs	r3, #0
    4d38:	9304      	str	r3, [sp, #16]
            break;
    4d3a:	e008      	b.n	4d4e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4d3c:	2301      	movs	r3, #1
    4d3e:	9304      	str	r3, [sp, #16]
            break;
    4d40:	e005      	b.n	4d4e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4d42:	2302      	movs	r3, #2
    4d44:	9304      	str	r3, [sp, #16]
            break;
    4d46:	e002      	b.n	4d4e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d48:	2300      	movs	r3, #0
    4d4a:	9304      	str	r3, [sp, #16]
            break;
    4d4c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d4e:	4b36      	ldr	r3, [pc, #216]	; (4e28 <getSelectorConfig+0x114>)
    4d50:	681b      	ldr	r3, [r3, #0]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d01d      	beq.n	4d92 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d56:	2300      	movs	r3, #0
    4d58:	9303      	str	r3, [sp, #12]
    4d5a:	e013      	b.n	4d84 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d5c:	4b32      	ldr	r3, [pc, #200]	; (4e28 <getSelectorConfig+0x114>)
    4d5e:	681b      	ldr	r3, [r3, #0]
    4d60:	9a03      	ldr	r2, [sp, #12]
    4d62:	320d      	adds	r2, #13
    4d64:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d68:	9a01      	ldr	r2, [sp, #4]
    4d6a:	429a      	cmp	r2, r3
    4d6c:	d107      	bne.n	4d7e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d6e:	4b2e      	ldr	r3, [pc, #184]	; (4e28 <getSelectorConfig+0x114>)
    4d70:	681a      	ldr	r2, [r3, #0]
    4d72:	9b03      	ldr	r3, [sp, #12]
    4d74:	330d      	adds	r3, #13
    4d76:	00db      	lsls	r3, r3, #3
    4d78:	4413      	add	r3, r2
    4d7a:	9305      	str	r3, [sp, #20]
                break;
    4d7c:	e009      	b.n	4d92 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d7e:	9b03      	ldr	r3, [sp, #12]
    4d80:	3301      	adds	r3, #1
    4d82:	9303      	str	r3, [sp, #12]
    4d84:	4b28      	ldr	r3, [pc, #160]	; (4e28 <getSelectorConfig+0x114>)
    4d86:	681b      	ldr	r3, [r3, #0]
    4d88:	7adb      	ldrb	r3, [r3, #11]
    4d8a:	461a      	mov	r2, r3
    4d8c:	9b03      	ldr	r3, [sp, #12]
    4d8e:	4293      	cmp	r3, r2
    4d90:	d3e4      	bcc.n	4d5c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d92:	9b05      	ldr	r3, [sp, #20]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d140      	bne.n	4e1a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d98:	9b04      	ldr	r3, [sp, #16]
    4d9a:	00db      	lsls	r3, r3, #3
    4d9c:	4a23      	ldr	r2, [pc, #140]	; (4e2c <getSelectorConfig+0x118>)
    4d9e:	4413      	add	r3, r2
    4da0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4da2:	4922      	ldr	r1, [pc, #136]	; (4e2c <getSelectorConfig+0x118>)
    4da4:	9b04      	ldr	r3, [sp, #16]
    4da6:	9a01      	ldr	r2, [sp, #4]
    4da8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4dac:	9b01      	ldr	r3, [sp, #4]
    4dae:	2b1b      	cmp	r3, #27
    4db0:	d025      	beq.n	4dfe <getSelectorConfig+0xea>
    4db2:	9b01      	ldr	r3, [sp, #4]
    4db4:	2b1b      	cmp	r3, #27
    4db6:	d832      	bhi.n	4e1e <getSelectorConfig+0x10a>
    4db8:	9b01      	ldr	r3, [sp, #4]
    4dba:	2b19      	cmp	r3, #25
    4dbc:	d003      	beq.n	4dc6 <getSelectorConfig+0xb2>
    4dbe:	9b01      	ldr	r3, [sp, #4]
    4dc0:	2b1a      	cmp	r3, #26
    4dc2:	d00e      	beq.n	4de2 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4dc4:	e02b      	b.n	4e1e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4dc6:	4b1a      	ldr	r3, [pc, #104]	; (4e30 <getSelectorConfig+0x11c>)
    4dc8:	695b      	ldr	r3, [r3, #20]
    4dca:	0e1b      	lsrs	r3, r3, #24
    4dcc:	f003 030f 	and.w	r3, r3, #15
    4dd0:	4a18      	ldr	r2, [pc, #96]	; (4e34 <getSelectorConfig+0x120>)
    4dd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dd6:	4915      	ldr	r1, [pc, #84]	; (4e2c <getSelectorConfig+0x118>)
    4dd8:	9b04      	ldr	r3, [sp, #16]
    4dda:	00db      	lsls	r3, r3, #3
    4ddc:	440b      	add	r3, r1
    4dde:	605a      	str	r2, [r3, #4]
                break;
    4de0:	e01e      	b.n	4e20 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4de2:	4b13      	ldr	r3, [pc, #76]	; (4e30 <getSelectorConfig+0x11c>)
    4de4:	699b      	ldr	r3, [r3, #24]
    4de6:	0e1b      	lsrs	r3, r3, #24
    4de8:	f003 030f 	and.w	r3, r3, #15
    4dec:	4a11      	ldr	r2, [pc, #68]	; (4e34 <getSelectorConfig+0x120>)
    4dee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4df2:	490e      	ldr	r1, [pc, #56]	; (4e2c <getSelectorConfig+0x118>)
    4df4:	9b04      	ldr	r3, [sp, #16]
    4df6:	00db      	lsls	r3, r3, #3
    4df8:	440b      	add	r3, r1
    4dfa:	605a      	str	r2, [r3, #4]
                break;
    4dfc:	e010      	b.n	4e20 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4dfe:	4b0c      	ldr	r3, [pc, #48]	; (4e30 <getSelectorConfig+0x11c>)
    4e00:	69db      	ldr	r3, [r3, #28]
    4e02:	0e1b      	lsrs	r3, r3, #24
    4e04:	f003 030f 	and.w	r3, r3, #15
    4e08:	4a0a      	ldr	r2, [pc, #40]	; (4e34 <getSelectorConfig+0x120>)
    4e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4e0e:	4907      	ldr	r1, [pc, #28]	; (4e2c <getSelectorConfig+0x118>)
    4e10:	9b04      	ldr	r3, [sp, #16]
    4e12:	00db      	lsls	r3, r3, #3
    4e14:	440b      	add	r3, r1
    4e16:	605a      	str	r2, [r3, #4]
                break;
    4e18:	e002      	b.n	4e20 <getSelectorConfig+0x10c>
        }
    }
    4e1a:	bf00      	nop
    4e1c:	e000      	b.n	4e20 <getSelectorConfig+0x10c>
                break;
    4e1e:	bf00      	nop

    return ReturnValue;
    4e20:	9b05      	ldr	r3, [sp, #20]
}
    4e22:	4618      	mov	r0, r3
    4e24:	b006      	add	sp, #24
    4e26:	4770      	bx	lr
    4e28:	1fff8ba8 	.word	0x1fff8ba8
    4e2c:	1fff8c5c 	.word	0x1fff8c5c
    4e30:	40064000 	.word	0x40064000
    4e34:	00008ab8 	.word	0x00008ab8

00004e38 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4e38:	b086      	sub	sp, #24
    4e3a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e3c:	2300      	movs	r3, #0
    4e3e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e40:	2300      	movs	r3, #0
    4e42:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e44:	9b01      	ldr	r3, [sp, #4]
    4e46:	2b1f      	cmp	r3, #31
    4e48:	d00f      	beq.n	4e6a <getCoreDividerConfig+0x32>
    4e4a:	9b01      	ldr	r3, [sp, #4]
    4e4c:	2b1f      	cmp	r3, #31
    4e4e:	d80f      	bhi.n	4e70 <getCoreDividerConfig+0x38>
    4e50:	9b01      	ldr	r3, [sp, #4]
    4e52:	2b1d      	cmp	r3, #29
    4e54:	d003      	beq.n	4e5e <getCoreDividerConfig+0x26>
    4e56:	9b01      	ldr	r3, [sp, #4]
    4e58:	2b1e      	cmp	r3, #30
    4e5a:	d003      	beq.n	4e64 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e5c:	e008      	b.n	4e70 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e5e:	2300      	movs	r3, #0
    4e60:	9304      	str	r3, [sp, #16]
            break;
    4e62:	e006      	b.n	4e72 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e64:	2301      	movs	r3, #1
    4e66:	9304      	str	r3, [sp, #16]
            break;
    4e68:	e003      	b.n	4e72 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e6a:	2302      	movs	r3, #2
    4e6c:	9304      	str	r3, [sp, #16]
            break;
    4e6e:	e000      	b.n	4e72 <getCoreDividerConfig+0x3a>
                break;
    4e70:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e72:	4b41      	ldr	r3, [pc, #260]	; (4f78 <getCoreDividerConfig+0x140>)
    4e74:	681b      	ldr	r3, [r3, #0]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d026      	beq.n	4ec8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e7a:	2300      	movs	r3, #0
    4e7c:	9303      	str	r3, [sp, #12]
    4e7e:	e01c      	b.n	4eba <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e80:	4b3d      	ldr	r3, [pc, #244]	; (4f78 <getCoreDividerConfig+0x140>)
    4e82:	6819      	ldr	r1, [r3, #0]
    4e84:	9a03      	ldr	r2, [sp, #12]
    4e86:	4613      	mov	r3, r2
    4e88:	005b      	lsls	r3, r3, #1
    4e8a:	4413      	add	r3, r2
    4e8c:	009b      	lsls	r3, r3, #2
    4e8e:	440b      	add	r3, r1
    4e90:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e94:	681b      	ldr	r3, [r3, #0]
    4e96:	9a01      	ldr	r2, [sp, #4]
    4e98:	429a      	cmp	r2, r3
    4e9a:	d10b      	bne.n	4eb4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e9c:	4b36      	ldr	r3, [pc, #216]	; (4f78 <getCoreDividerConfig+0x140>)
    4e9e:	6819      	ldr	r1, [r3, #0]
    4ea0:	9a03      	ldr	r2, [sp, #12]
    4ea2:	4613      	mov	r3, r2
    4ea4:	005b      	lsls	r3, r3, #1
    4ea6:	4413      	add	r3, r2
    4ea8:	009b      	lsls	r3, r3, #2
    4eaa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4eae:	440b      	add	r3, r1
    4eb0:	9305      	str	r3, [sp, #20]
                break;
    4eb2:	e009      	b.n	4ec8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4eb4:	9b03      	ldr	r3, [sp, #12]
    4eb6:	3301      	adds	r3, #1
    4eb8:	9303      	str	r3, [sp, #12]
    4eba:	4b2f      	ldr	r3, [pc, #188]	; (4f78 <getCoreDividerConfig+0x140>)
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	7b1b      	ldrb	r3, [r3, #12]
    4ec0:	461a      	mov	r2, r3
    4ec2:	9b03      	ldr	r3, [sp, #12]
    4ec4:	4293      	cmp	r3, r2
    4ec6:	d3db      	bcc.n	4e80 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ec8:	9b05      	ldr	r3, [sp, #20]
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d14d      	bne.n	4f6a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4ece:	9a04      	ldr	r2, [sp, #16]
    4ed0:	4613      	mov	r3, r2
    4ed2:	005b      	lsls	r3, r3, #1
    4ed4:	4413      	add	r3, r2
    4ed6:	009b      	lsls	r3, r3, #2
    4ed8:	4a28      	ldr	r2, [pc, #160]	; (4f7c <getCoreDividerConfig+0x144>)
    4eda:	4413      	add	r3, r2
    4edc:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4ede:	4927      	ldr	r1, [pc, #156]	; (4f7c <getCoreDividerConfig+0x144>)
    4ee0:	9a04      	ldr	r2, [sp, #16]
    4ee2:	4613      	mov	r3, r2
    4ee4:	005b      	lsls	r3, r3, #1
    4ee6:	4413      	add	r3, r2
    4ee8:	009b      	lsls	r3, r3, #2
    4eea:	440b      	add	r3, r1
    4eec:	9a01      	ldr	r2, [sp, #4]
    4eee:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ef0:	9b01      	ldr	r3, [sp, #4]
    4ef2:	2b1f      	cmp	r3, #31
    4ef4:	d029      	beq.n	4f4a <getCoreDividerConfig+0x112>
    4ef6:	9b01      	ldr	r3, [sp, #4]
    4ef8:	2b1f      	cmp	r3, #31
    4efa:	d838      	bhi.n	4f6e <getCoreDividerConfig+0x136>
    4efc:	9b01      	ldr	r3, [sp, #4]
    4efe:	2b1d      	cmp	r3, #29
    4f00:	d003      	beq.n	4f0a <getCoreDividerConfig+0xd2>
    4f02:	9b01      	ldr	r3, [sp, #4]
    4f04:	2b1e      	cmp	r3, #30
    4f06:	d010      	beq.n	4f2a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f08:	e031      	b.n	4f6e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4f0a:	4b1d      	ldr	r3, [pc, #116]	; (4f80 <getCoreDividerConfig+0x148>)
    4f0c:	695b      	ldr	r3, [r3, #20]
    4f0e:	0c1b      	lsrs	r3, r3, #16
    4f10:	f003 030f 	and.w	r3, r3, #15
    4f14:	1c59      	adds	r1, r3, #1
    4f16:	4819      	ldr	r0, [pc, #100]	; (4f7c <getCoreDividerConfig+0x144>)
    4f18:	9a04      	ldr	r2, [sp, #16]
    4f1a:	4613      	mov	r3, r2
    4f1c:	005b      	lsls	r3, r3, #1
    4f1e:	4413      	add	r3, r2
    4f20:	009b      	lsls	r3, r3, #2
    4f22:	4403      	add	r3, r0
    4f24:	3304      	adds	r3, #4
    4f26:	6019      	str	r1, [r3, #0]
                break;
    4f28:	e022      	b.n	4f70 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4f2a:	4b15      	ldr	r3, [pc, #84]	; (4f80 <getCoreDividerConfig+0x148>)
    4f2c:	699b      	ldr	r3, [r3, #24]
    4f2e:	0c1b      	lsrs	r3, r3, #16
    4f30:	f003 030f 	and.w	r3, r3, #15
    4f34:	1c59      	adds	r1, r3, #1
    4f36:	4811      	ldr	r0, [pc, #68]	; (4f7c <getCoreDividerConfig+0x144>)
    4f38:	9a04      	ldr	r2, [sp, #16]
    4f3a:	4613      	mov	r3, r2
    4f3c:	005b      	lsls	r3, r3, #1
    4f3e:	4413      	add	r3, r2
    4f40:	009b      	lsls	r3, r3, #2
    4f42:	4403      	add	r3, r0
    4f44:	3304      	adds	r3, #4
    4f46:	6019      	str	r1, [r3, #0]
                break;
    4f48:	e012      	b.n	4f70 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f4a:	4b0d      	ldr	r3, [pc, #52]	; (4f80 <getCoreDividerConfig+0x148>)
    4f4c:	69db      	ldr	r3, [r3, #28]
    4f4e:	0c1b      	lsrs	r3, r3, #16
    4f50:	f003 030f 	and.w	r3, r3, #15
    4f54:	1c59      	adds	r1, r3, #1
    4f56:	4809      	ldr	r0, [pc, #36]	; (4f7c <getCoreDividerConfig+0x144>)
    4f58:	9a04      	ldr	r2, [sp, #16]
    4f5a:	4613      	mov	r3, r2
    4f5c:	005b      	lsls	r3, r3, #1
    4f5e:	4413      	add	r3, r2
    4f60:	009b      	lsls	r3, r3, #2
    4f62:	4403      	add	r3, r0
    4f64:	3304      	adds	r3, #4
    4f66:	6019      	str	r1, [r3, #0]
                break;
    4f68:	e002      	b.n	4f70 <getCoreDividerConfig+0x138>
        }
    }
    4f6a:	bf00      	nop
    4f6c:	e000      	b.n	4f70 <getCoreDividerConfig+0x138>
                break;
    4f6e:	bf00      	nop

    return ReturnValue;
    4f70:	9b05      	ldr	r3, [sp, #20]
}
    4f72:	4618      	mov	r0, r3
    4f74:	b006      	add	sp, #24
    4f76:	4770      	bx	lr
    4f78:	1fff8ba8 	.word	0x1fff8ba8
    4f7c:	1fff8c74 	.word	0x1fff8c74
    4f80:	40064000 	.word	0x40064000

00004f84 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f84:	b086      	sub	sp, #24
    4f86:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f88:	2300      	movs	r3, #0
    4f8a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f8c:	2300      	movs	r3, #0
    4f8e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f90:	9b01      	ldr	r3, [sp, #4]
    4f92:	2b23      	cmp	r3, #35	; 0x23
    4f94:	d00f      	beq.n	4fb6 <getBusDividerConfig+0x32>
    4f96:	9b01      	ldr	r3, [sp, #4]
    4f98:	2b23      	cmp	r3, #35	; 0x23
    4f9a:	d80f      	bhi.n	4fbc <getBusDividerConfig+0x38>
    4f9c:	9b01      	ldr	r3, [sp, #4]
    4f9e:	2b21      	cmp	r3, #33	; 0x21
    4fa0:	d003      	beq.n	4faa <getBusDividerConfig+0x26>
    4fa2:	9b01      	ldr	r3, [sp, #4]
    4fa4:	2b22      	cmp	r3, #34	; 0x22
    4fa6:	d003      	beq.n	4fb0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4fa8:	e008      	b.n	4fbc <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4faa:	2300      	movs	r3, #0
    4fac:	9304      	str	r3, [sp, #16]
            break;
    4fae:	e006      	b.n	4fbe <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4fb0:	2301      	movs	r3, #1
    4fb2:	9304      	str	r3, [sp, #16]
            break;
    4fb4:	e003      	b.n	4fbe <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4fb6:	2302      	movs	r3, #2
    4fb8:	9304      	str	r3, [sp, #16]
            break;
    4fba:	e000      	b.n	4fbe <getBusDividerConfig+0x3a>
                break;
    4fbc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4fbe:	4b41      	ldr	r3, [pc, #260]	; (50c4 <getBusDividerConfig+0x140>)
    4fc0:	681b      	ldr	r3, [r3, #0]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d026      	beq.n	5014 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fc6:	2300      	movs	r3, #0
    4fc8:	9303      	str	r3, [sp, #12]
    4fca:	e01c      	b.n	5006 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4fcc:	4b3d      	ldr	r3, [pc, #244]	; (50c4 <getBusDividerConfig+0x140>)
    4fce:	6819      	ldr	r1, [r3, #0]
    4fd0:	9a03      	ldr	r2, [sp, #12]
    4fd2:	4613      	mov	r3, r2
    4fd4:	005b      	lsls	r3, r3, #1
    4fd6:	4413      	add	r3, r2
    4fd8:	009b      	lsls	r3, r3, #2
    4fda:	440b      	add	r3, r1
    4fdc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fe0:	681b      	ldr	r3, [r3, #0]
    4fe2:	9a01      	ldr	r2, [sp, #4]
    4fe4:	429a      	cmp	r2, r3
    4fe6:	d10b      	bne.n	5000 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fe8:	4b36      	ldr	r3, [pc, #216]	; (50c4 <getBusDividerConfig+0x140>)
    4fea:	6819      	ldr	r1, [r3, #0]
    4fec:	9a03      	ldr	r2, [sp, #12]
    4fee:	4613      	mov	r3, r2
    4ff0:	005b      	lsls	r3, r3, #1
    4ff2:	4413      	add	r3, r2
    4ff4:	009b      	lsls	r3, r3, #2
    4ff6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4ffa:	440b      	add	r3, r1
    4ffc:	9305      	str	r3, [sp, #20]
                break;
    4ffe:	e009      	b.n	5014 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5000:	9b03      	ldr	r3, [sp, #12]
    5002:	3301      	adds	r3, #1
    5004:	9303      	str	r3, [sp, #12]
    5006:	4b2f      	ldr	r3, [pc, #188]	; (50c4 <getBusDividerConfig+0x140>)
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	7b1b      	ldrb	r3, [r3, #12]
    500c:	461a      	mov	r2, r3
    500e:	9b03      	ldr	r3, [sp, #12]
    5010:	4293      	cmp	r3, r2
    5012:	d3db      	bcc.n	4fcc <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5014:	9b05      	ldr	r3, [sp, #20]
    5016:	2b00      	cmp	r3, #0
    5018:	d14d      	bne.n	50b6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    501a:	9a04      	ldr	r2, [sp, #16]
    501c:	4613      	mov	r3, r2
    501e:	005b      	lsls	r3, r3, #1
    5020:	4413      	add	r3, r2
    5022:	009b      	lsls	r3, r3, #2
    5024:	4a28      	ldr	r2, [pc, #160]	; (50c8 <getBusDividerConfig+0x144>)
    5026:	4413      	add	r3, r2
    5028:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    502a:	4927      	ldr	r1, [pc, #156]	; (50c8 <getBusDividerConfig+0x144>)
    502c:	9a04      	ldr	r2, [sp, #16]
    502e:	4613      	mov	r3, r2
    5030:	005b      	lsls	r3, r3, #1
    5032:	4413      	add	r3, r2
    5034:	009b      	lsls	r3, r3, #2
    5036:	440b      	add	r3, r1
    5038:	9a01      	ldr	r2, [sp, #4]
    503a:	601a      	str	r2, [r3, #0]
        switch(Name)
    503c:	9b01      	ldr	r3, [sp, #4]
    503e:	2b23      	cmp	r3, #35	; 0x23
    5040:	d029      	beq.n	5096 <getBusDividerConfig+0x112>
    5042:	9b01      	ldr	r3, [sp, #4]
    5044:	2b23      	cmp	r3, #35	; 0x23
    5046:	d838      	bhi.n	50ba <getBusDividerConfig+0x136>
    5048:	9b01      	ldr	r3, [sp, #4]
    504a:	2b21      	cmp	r3, #33	; 0x21
    504c:	d003      	beq.n	5056 <getBusDividerConfig+0xd2>
    504e:	9b01      	ldr	r3, [sp, #4]
    5050:	2b22      	cmp	r3, #34	; 0x22
    5052:	d010      	beq.n	5076 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5054:	e031      	b.n	50ba <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5056:	4b1d      	ldr	r3, [pc, #116]	; (50cc <getBusDividerConfig+0x148>)
    5058:	695b      	ldr	r3, [r3, #20]
    505a:	091b      	lsrs	r3, r3, #4
    505c:	f003 030f 	and.w	r3, r3, #15
    5060:	1c59      	adds	r1, r3, #1
    5062:	4819      	ldr	r0, [pc, #100]	; (50c8 <getBusDividerConfig+0x144>)
    5064:	9a04      	ldr	r2, [sp, #16]
    5066:	4613      	mov	r3, r2
    5068:	005b      	lsls	r3, r3, #1
    506a:	4413      	add	r3, r2
    506c:	009b      	lsls	r3, r3, #2
    506e:	4403      	add	r3, r0
    5070:	3304      	adds	r3, #4
    5072:	6019      	str	r1, [r3, #0]
                break;
    5074:	e022      	b.n	50bc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5076:	4b15      	ldr	r3, [pc, #84]	; (50cc <getBusDividerConfig+0x148>)
    5078:	699b      	ldr	r3, [r3, #24]
    507a:	091b      	lsrs	r3, r3, #4
    507c:	f003 030f 	and.w	r3, r3, #15
    5080:	1c59      	adds	r1, r3, #1
    5082:	4811      	ldr	r0, [pc, #68]	; (50c8 <getBusDividerConfig+0x144>)
    5084:	9a04      	ldr	r2, [sp, #16]
    5086:	4613      	mov	r3, r2
    5088:	005b      	lsls	r3, r3, #1
    508a:	4413      	add	r3, r2
    508c:	009b      	lsls	r3, r3, #2
    508e:	4403      	add	r3, r0
    5090:	3304      	adds	r3, #4
    5092:	6019      	str	r1, [r3, #0]
                break;
    5094:	e012      	b.n	50bc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5096:	4b0d      	ldr	r3, [pc, #52]	; (50cc <getBusDividerConfig+0x148>)
    5098:	69db      	ldr	r3, [r3, #28]
    509a:	091b      	lsrs	r3, r3, #4
    509c:	f003 030f 	and.w	r3, r3, #15
    50a0:	1c59      	adds	r1, r3, #1
    50a2:	4809      	ldr	r0, [pc, #36]	; (50c8 <getBusDividerConfig+0x144>)
    50a4:	9a04      	ldr	r2, [sp, #16]
    50a6:	4613      	mov	r3, r2
    50a8:	005b      	lsls	r3, r3, #1
    50aa:	4413      	add	r3, r2
    50ac:	009b      	lsls	r3, r3, #2
    50ae:	4403      	add	r3, r0
    50b0:	3304      	adds	r3, #4
    50b2:	6019      	str	r1, [r3, #0]
                break;
    50b4:	e002      	b.n	50bc <getBusDividerConfig+0x138>
        }
    }
    50b6:	bf00      	nop
    50b8:	e000      	b.n	50bc <getBusDividerConfig+0x138>
                break;
    50ba:	bf00      	nop

    return ReturnValue;
    50bc:	9b05      	ldr	r3, [sp, #20]
}
    50be:	4618      	mov	r0, r3
    50c0:	b006      	add	sp, #24
    50c2:	4770      	bx	lr
    50c4:	1fff8ba8 	.word	0x1fff8ba8
    50c8:	1fff8c98 	.word	0x1fff8c98
    50cc:	40064000 	.word	0x40064000

000050d0 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    50d0:	b086      	sub	sp, #24
    50d2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50d4:	2300      	movs	r3, #0
    50d6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50d8:	2300      	movs	r3, #0
    50da:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50dc:	9b01      	ldr	r3, [sp, #4]
    50de:	2b27      	cmp	r3, #39	; 0x27
    50e0:	d00f      	beq.n	5102 <getSlowDividerConfig+0x32>
    50e2:	9b01      	ldr	r3, [sp, #4]
    50e4:	2b27      	cmp	r3, #39	; 0x27
    50e6:	d80f      	bhi.n	5108 <getSlowDividerConfig+0x38>
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	2b25      	cmp	r3, #37	; 0x25
    50ec:	d003      	beq.n	50f6 <getSlowDividerConfig+0x26>
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	2b26      	cmp	r3, #38	; 0x26
    50f2:	d003      	beq.n	50fc <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50f4:	e008      	b.n	5108 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50f6:	2300      	movs	r3, #0
    50f8:	9304      	str	r3, [sp, #16]
            break;
    50fa:	e006      	b.n	510a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50fc:	2301      	movs	r3, #1
    50fe:	9304      	str	r3, [sp, #16]
            break;
    5100:	e003      	b.n	510a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5102:	2302      	movs	r3, #2
    5104:	9304      	str	r3, [sp, #16]
            break;
    5106:	e000      	b.n	510a <getSlowDividerConfig+0x3a>
                break;
    5108:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    510a:	4b40      	ldr	r3, [pc, #256]	; (520c <getSlowDividerConfig+0x13c>)
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	2b00      	cmp	r3, #0
    5110:	d026      	beq.n	5160 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5112:	2300      	movs	r3, #0
    5114:	9303      	str	r3, [sp, #12]
    5116:	e01c      	b.n	5152 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5118:	4b3c      	ldr	r3, [pc, #240]	; (520c <getSlowDividerConfig+0x13c>)
    511a:	6819      	ldr	r1, [r3, #0]
    511c:	9a03      	ldr	r2, [sp, #12]
    511e:	4613      	mov	r3, r2
    5120:	005b      	lsls	r3, r3, #1
    5122:	4413      	add	r3, r2
    5124:	009b      	lsls	r3, r3, #2
    5126:	440b      	add	r3, r1
    5128:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	9a01      	ldr	r2, [sp, #4]
    5130:	429a      	cmp	r2, r3
    5132:	d10b      	bne.n	514c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5134:	4b35      	ldr	r3, [pc, #212]	; (520c <getSlowDividerConfig+0x13c>)
    5136:	6819      	ldr	r1, [r3, #0]
    5138:	9a03      	ldr	r2, [sp, #12]
    513a:	4613      	mov	r3, r2
    513c:	005b      	lsls	r3, r3, #1
    513e:	4413      	add	r3, r2
    5140:	009b      	lsls	r3, r3, #2
    5142:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5146:	440b      	add	r3, r1
    5148:	9305      	str	r3, [sp, #20]
                break;
    514a:	e009      	b.n	5160 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    514c:	9b03      	ldr	r3, [sp, #12]
    514e:	3301      	adds	r3, #1
    5150:	9303      	str	r3, [sp, #12]
    5152:	4b2e      	ldr	r3, [pc, #184]	; (520c <getSlowDividerConfig+0x13c>)
    5154:	681b      	ldr	r3, [r3, #0]
    5156:	7b1b      	ldrb	r3, [r3, #12]
    5158:	461a      	mov	r2, r3
    515a:	9b03      	ldr	r3, [sp, #12]
    515c:	4293      	cmp	r3, r2
    515e:	d3db      	bcc.n	5118 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5160:	9b05      	ldr	r3, [sp, #20]
    5162:	2b00      	cmp	r3, #0
    5164:	d14a      	bne.n	51fc <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5166:	9a04      	ldr	r2, [sp, #16]
    5168:	4613      	mov	r3, r2
    516a:	005b      	lsls	r3, r3, #1
    516c:	4413      	add	r3, r2
    516e:	009b      	lsls	r3, r3, #2
    5170:	4a27      	ldr	r2, [pc, #156]	; (5210 <getSlowDividerConfig+0x140>)
    5172:	4413      	add	r3, r2
    5174:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5176:	4926      	ldr	r1, [pc, #152]	; (5210 <getSlowDividerConfig+0x140>)
    5178:	9a04      	ldr	r2, [sp, #16]
    517a:	4613      	mov	r3, r2
    517c:	005b      	lsls	r3, r3, #1
    517e:	4413      	add	r3, r2
    5180:	009b      	lsls	r3, r3, #2
    5182:	440b      	add	r3, r1
    5184:	9a01      	ldr	r2, [sp, #4]
    5186:	601a      	str	r2, [r3, #0]
        switch(Name)
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	2b27      	cmp	r3, #39	; 0x27
    518c:	d027      	beq.n	51de <getSlowDividerConfig+0x10e>
    518e:	9b01      	ldr	r3, [sp, #4]
    5190:	2b27      	cmp	r3, #39	; 0x27
    5192:	d835      	bhi.n	5200 <getSlowDividerConfig+0x130>
    5194:	9b01      	ldr	r3, [sp, #4]
    5196:	2b25      	cmp	r3, #37	; 0x25
    5198:	d003      	beq.n	51a2 <getSlowDividerConfig+0xd2>
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	2b26      	cmp	r3, #38	; 0x26
    519e:	d00f      	beq.n	51c0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    51a0:	e02e      	b.n	5200 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    51a2:	4b1c      	ldr	r3, [pc, #112]	; (5214 <getSlowDividerConfig+0x144>)
    51a4:	695b      	ldr	r3, [r3, #20]
    51a6:	f003 030f 	and.w	r3, r3, #15
    51aa:	1c59      	adds	r1, r3, #1
    51ac:	4818      	ldr	r0, [pc, #96]	; (5210 <getSlowDividerConfig+0x140>)
    51ae:	9a04      	ldr	r2, [sp, #16]
    51b0:	4613      	mov	r3, r2
    51b2:	005b      	lsls	r3, r3, #1
    51b4:	4413      	add	r3, r2
    51b6:	009b      	lsls	r3, r3, #2
    51b8:	4403      	add	r3, r0
    51ba:	3304      	adds	r3, #4
    51bc:	6019      	str	r1, [r3, #0]
                break;
    51be:	e020      	b.n	5202 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    51c0:	4b14      	ldr	r3, [pc, #80]	; (5214 <getSlowDividerConfig+0x144>)
    51c2:	699b      	ldr	r3, [r3, #24]
    51c4:	f003 030f 	and.w	r3, r3, #15
    51c8:	1c59      	adds	r1, r3, #1
    51ca:	4811      	ldr	r0, [pc, #68]	; (5210 <getSlowDividerConfig+0x140>)
    51cc:	9a04      	ldr	r2, [sp, #16]
    51ce:	4613      	mov	r3, r2
    51d0:	005b      	lsls	r3, r3, #1
    51d2:	4413      	add	r3, r2
    51d4:	009b      	lsls	r3, r3, #2
    51d6:	4403      	add	r3, r0
    51d8:	3304      	adds	r3, #4
    51da:	6019      	str	r1, [r3, #0]
                break;
    51dc:	e011      	b.n	5202 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    51de:	4b0d      	ldr	r3, [pc, #52]	; (5214 <getSlowDividerConfig+0x144>)
    51e0:	69db      	ldr	r3, [r3, #28]
    51e2:	f003 030f 	and.w	r3, r3, #15
    51e6:	1c59      	adds	r1, r3, #1
    51e8:	4809      	ldr	r0, [pc, #36]	; (5210 <getSlowDividerConfig+0x140>)
    51ea:	9a04      	ldr	r2, [sp, #16]
    51ec:	4613      	mov	r3, r2
    51ee:	005b      	lsls	r3, r3, #1
    51f0:	4413      	add	r3, r2
    51f2:	009b      	lsls	r3, r3, #2
    51f4:	4403      	add	r3, r0
    51f6:	3304      	adds	r3, #4
    51f8:	6019      	str	r1, [r3, #0]
                break;
    51fa:	e002      	b.n	5202 <getSlowDividerConfig+0x132>
        }
    }
    51fc:	bf00      	nop
    51fe:	e000      	b.n	5202 <getSlowDividerConfig+0x132>
                break;
    5200:	bf00      	nop

    return ReturnValue;
    5202:	9b05      	ldr	r3, [sp, #20]
}
    5204:	4618      	mov	r0, r3
    5206:	b006      	add	sp, #24
    5208:	4770      	bx	lr
    520a:	bf00      	nop
    520c:	1fff8ba8 	.word	0x1fff8ba8
    5210:	1fff8cbc 	.word	0x1fff8cbc
    5214:	40064000 	.word	0x40064000

00005218 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5218:	b500      	push	{lr}
    521a:	b083      	sub	sp, #12
    521c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    521e:	4b64      	ldr	r3, [pc, #400]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x198>)
    5220:	781b      	ldrb	r3, [r3, #0]
    5222:	f083 0301 	eor.w	r3, r3, #1
    5226:	b2db      	uxtb	r3, r3
    5228:	2b00      	cmp	r3, #0
    522a:	d05b      	beq.n	52e4 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    522c:	4b60      	ldr	r3, [pc, #384]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x198>)
    522e:	2201      	movs	r2, #1
    5230:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5232:	4b60      	ldr	r3, [pc, #384]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5234:	785b      	ldrb	r3, [r3, #1]
    5236:	461a      	mov	r2, r3
    5238:	4613      	mov	r3, r2
    523a:	009b      	lsls	r3, r3, #2
    523c:	4413      	add	r3, r2
    523e:	009b      	lsls	r3, r3, #2
    5240:	4a5d      	ldr	r2, [pc, #372]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5242:	4413      	add	r3, r2
    5244:	4a5d      	ldr	r2, [pc, #372]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5246:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5248:	4b5d      	ldr	r3, [pc, #372]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    524a:	785b      	ldrb	r3, [r3, #1]
    524c:	461a      	mov	r2, r3
    524e:	4613      	mov	r3, r2
    5250:	009b      	lsls	r3, r3, #2
    5252:	4413      	add	r3, r2
    5254:	009b      	lsls	r3, r3, #2
    5256:	4a5b      	ldr	r2, [pc, #364]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5258:	4413      	add	r3, r2
    525a:	4a5b      	ldr	r2, [pc, #364]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    525c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    525e:	4b5b      	ldr	r3, [pc, #364]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5260:	791b      	ldrb	r3, [r3, #4]
    5262:	461a      	mov	r2, r3
    5264:	4613      	mov	r3, r2
    5266:	005b      	lsls	r3, r3, #1
    5268:	4413      	add	r3, r2
    526a:	009b      	lsls	r3, r3, #2
    526c:	4a58      	ldr	r2, [pc, #352]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    526e:	4413      	add	r3, r2
    5270:	4a58      	ldr	r2, [pc, #352]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5272:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5274:	4b58      	ldr	r3, [pc, #352]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5276:	795b      	ldrb	r3, [r3, #5]
    5278:	00db      	lsls	r3, r3, #3
    527a:	4a58      	ldr	r2, [pc, #352]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    527c:	4413      	add	r3, r2
    527e:	4a58      	ldr	r2, [pc, #352]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5280:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5282:	4b55      	ldr	r3, [pc, #340]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5284:	79db      	ldrb	r3, [r3, #7]
    5286:	00db      	lsls	r3, r3, #3
    5288:	4a54      	ldr	r2, [pc, #336]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    528a:	4413      	add	r3, r2
    528c:	4a55      	ldr	r2, [pc, #340]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    528e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5290:	4b55      	ldr	r3, [pc, #340]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5292:	799b      	ldrb	r3, [r3, #6]
    5294:	009b      	lsls	r3, r3, #2
    5296:	4a55      	ldr	r2, [pc, #340]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5298:	4413      	add	r3, r2
    529a:	4a55      	ldr	r2, [pc, #340]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    529c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    529e:	4b52      	ldr	r3, [pc, #328]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52a0:	7a1b      	ldrb	r3, [r3, #8]
    52a2:	009b      	lsls	r3, r3, #2
    52a4:	4a51      	ldr	r2, [pc, #324]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52a6:	4413      	add	r3, r2
    52a8:	4a52      	ldr	r2, [pc, #328]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    52aa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    52ac:	4b4e      	ldr	r3, [pc, #312]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52ae:	7a5b      	ldrb	r3, [r3, #9]
    52b0:	009b      	lsls	r3, r3, #2
    52b2:	4a4e      	ldr	r2, [pc, #312]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52b4:	4413      	add	r3, r2
    52b6:	4a50      	ldr	r2, [pc, #320]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    52b8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    52ba:	4b4b      	ldr	r3, [pc, #300]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52bc:	7adb      	ldrb	r3, [r3, #11]
    52be:	009b      	lsls	r3, r3, #2
    52c0:	4a4a      	ldr	r2, [pc, #296]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52c2:	4413      	add	r3, r2
    52c4:	4a4d      	ldr	r2, [pc, #308]	; (53fc <Clock_Ip_ClockInitializeObjects+0x1e4>)
    52c6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    52c8:	4b47      	ldr	r3, [pc, #284]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52ca:	7b1b      	ldrb	r3, [r3, #12]
    52cc:	009b      	lsls	r3, r3, #2
    52ce:	4a47      	ldr	r2, [pc, #284]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52d0:	4413      	add	r3, r2
    52d2:	4a4b      	ldr	r2, [pc, #300]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    52d4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    52d6:	4b44      	ldr	r3, [pc, #272]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52d8:	7b9b      	ldrb	r3, [r3, #14]
    52da:	009b      	lsls	r3, r3, #2
    52dc:	4a43      	ldr	r2, [pc, #268]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52de:	4413      	add	r3, r2
    52e0:	4a48      	ldr	r2, [pc, #288]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    52e2:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    52e4:	4b48      	ldr	r3, [pc, #288]	; (5408 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	2b00      	cmp	r3, #0
    52ea:	d002      	beq.n	52f2 <Clock_Ip_ClockInitializeObjects+0xda>
    52ec:	9b01      	ldr	r3, [sp, #4]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d003      	beq.n	52fa <Clock_Ip_ClockInitializeObjects+0xe2>
    52f2:	4b46      	ldr	r3, [pc, #280]	; (540c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    52f4:	781b      	ldrb	r3, [r3, #0]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d056      	beq.n	53a8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    52fa:	f7ff fc09 	bl	4b10 <getFircConfig>
    52fe:	4603      	mov	r3, r0
    5300:	4a43      	ldr	r2, [pc, #268]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5302:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5304:	f7ff fc60 	bl	4bc8 <getSoscConfig>
    5308:	4603      	mov	r3, r0
    530a:	4a42      	ldr	r2, [pc, #264]	; (5414 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    530c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    530e:	f7ff fca7 	bl	4c60 <getSpllConfig>
    5312:	4603      	mov	r3, r0
    5314:	4a40      	ldr	r2, [pc, #256]	; (5418 <Clock_Ip_ClockInitializeObjects+0x200>)
    5316:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5318:	2019      	movs	r0, #25
    531a:	f7ff fcfb 	bl	4d14 <getSelectorConfig>
    531e:	4603      	mov	r3, r0
    5320:	4a3e      	ldr	r2, [pc, #248]	; (541c <Clock_Ip_ClockInitializeObjects+0x204>)
    5322:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5324:	201a      	movs	r0, #26
    5326:	f7ff fcf5 	bl	4d14 <getSelectorConfig>
    532a:	4603      	mov	r3, r0
    532c:	4a3c      	ldr	r2, [pc, #240]	; (5420 <Clock_Ip_ClockInitializeObjects+0x208>)
    532e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5330:	201b      	movs	r0, #27
    5332:	f7ff fcef 	bl	4d14 <getSelectorConfig>
    5336:	4603      	mov	r3, r0
    5338:	4a3a      	ldr	r2, [pc, #232]	; (5424 <Clock_Ip_ClockInitializeObjects+0x20c>)
    533a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    533c:	201d      	movs	r0, #29
    533e:	f7ff fd7b 	bl	4e38 <getCoreDividerConfig>
    5342:	4603      	mov	r3, r0
    5344:	4a38      	ldr	r2, [pc, #224]	; (5428 <Clock_Ip_ClockInitializeObjects+0x210>)
    5346:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5348:	201e      	movs	r0, #30
    534a:	f7ff fd75 	bl	4e38 <getCoreDividerConfig>
    534e:	4603      	mov	r3, r0
    5350:	4a36      	ldr	r2, [pc, #216]	; (542c <Clock_Ip_ClockInitializeObjects+0x214>)
    5352:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5354:	201f      	movs	r0, #31
    5356:	f7ff fd6f 	bl	4e38 <getCoreDividerConfig>
    535a:	4603      	mov	r3, r0
    535c:	4a34      	ldr	r2, [pc, #208]	; (5430 <Clock_Ip_ClockInitializeObjects+0x218>)
    535e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5360:	2021      	movs	r0, #33	; 0x21
    5362:	f7ff fe0f 	bl	4f84 <getBusDividerConfig>
    5366:	4603      	mov	r3, r0
    5368:	4a32      	ldr	r2, [pc, #200]	; (5434 <Clock_Ip_ClockInitializeObjects+0x21c>)
    536a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    536c:	2022      	movs	r0, #34	; 0x22
    536e:	f7ff fe09 	bl	4f84 <getBusDividerConfig>
    5372:	4603      	mov	r3, r0
    5374:	4a30      	ldr	r2, [pc, #192]	; (5438 <Clock_Ip_ClockInitializeObjects+0x220>)
    5376:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5378:	2023      	movs	r0, #35	; 0x23
    537a:	f7ff fe03 	bl	4f84 <getBusDividerConfig>
    537e:	4603      	mov	r3, r0
    5380:	4a2e      	ldr	r2, [pc, #184]	; (543c <Clock_Ip_ClockInitializeObjects+0x224>)
    5382:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5384:	2025      	movs	r0, #37	; 0x25
    5386:	f7ff fea3 	bl	50d0 <getSlowDividerConfig>
    538a:	4603      	mov	r3, r0
    538c:	4a2c      	ldr	r2, [pc, #176]	; (5440 <Clock_Ip_ClockInitializeObjects+0x228>)
    538e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5390:	2026      	movs	r0, #38	; 0x26
    5392:	f7ff fe9d 	bl	50d0 <getSlowDividerConfig>
    5396:	4603      	mov	r3, r0
    5398:	4a2a      	ldr	r2, [pc, #168]	; (5444 <Clock_Ip_ClockInitializeObjects+0x22c>)
    539a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    539c:	2027      	movs	r0, #39	; 0x27
    539e:	f7ff fe97 	bl	50d0 <getSlowDividerConfig>
    53a2:	4603      	mov	r3, r0
    53a4:	4a28      	ldr	r2, [pc, #160]	; (5448 <Clock_Ip_ClockInitializeObjects+0x230>)
    53a6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    53a8:	bf00      	nop
    53aa:	b003      	add	sp, #12
    53ac:	f85d fb04 	ldr.w	pc, [sp], #4
    53b0:	1fff8ce0 	.word	0x1fff8ce0
    53b4:	000083e8 	.word	0x000083e8
    53b8:	00008a34 	.word	0x00008a34
    53bc:	1fff8bac 	.word	0x1fff8bac
    53c0:	000083a8 	.word	0x000083a8
    53c4:	0000897c 	.word	0x0000897c
    53c8:	1fff8bb0 	.word	0x1fff8bb0
    53cc:	000083b8 	.word	0x000083b8
    53d0:	000089e8 	.word	0x000089e8
    53d4:	1fff8bb4 	.word	0x1fff8bb4
    53d8:	000083f8 	.word	0x000083f8
    53dc:	00008a60 	.word	0x00008a60
    53e0:	1fff8bb8 	.word	0x1fff8bb8
    53e4:	1fff8bf4 	.word	0x1fff8bf4
    53e8:	00008388 	.word	0x00008388
    53ec:	00008938 	.word	0x00008938
    53f0:	1fff8bbc 	.word	0x1fff8bbc
    53f4:	1fff8bf8 	.word	0x1fff8bf8
    53f8:	1fff8bc0 	.word	0x1fff8bc0
    53fc:	1fff8bfc 	.word	0x1fff8bfc
    5400:	1fff8bc4 	.word	0x1fff8bc4
    5404:	1fff8c00 	.word	0x1fff8c00
    5408:	1fff8b19 	.word	0x1fff8b19
    540c:	1fff8b10 	.word	0x1fff8b10
    5410:	1fff8bc8 	.word	0x1fff8bc8
    5414:	1fff8bcc 	.word	0x1fff8bcc
    5418:	1fff8bd0 	.word	0x1fff8bd0
    541c:	1fff8bd4 	.word	0x1fff8bd4
    5420:	1fff8bd8 	.word	0x1fff8bd8
    5424:	1fff8c04 	.word	0x1fff8c04
    5428:	1fff8bdc 	.word	0x1fff8bdc
    542c:	1fff8be0 	.word	0x1fff8be0
    5430:	1fff8c08 	.word	0x1fff8c08
    5434:	1fff8be4 	.word	0x1fff8be4
    5438:	1fff8be8 	.word	0x1fff8be8
    543c:	1fff8c0c 	.word	0x1fff8c0c
    5440:	1fff8bec 	.word	0x1fff8bec
    5444:	1fff8bf0 	.word	0x1fff8bf0
    5448:	1fff8c10 	.word	0x1fff8c10

0000544c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    544c:	b500      	push	{lr}
    544e:	b083      	sub	sp, #12
    5450:	9001      	str	r0, [sp, #4]
    5452:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5454:	9b01      	ldr	r3, [sp, #4]
    5456:	2b03      	cmp	r3, #3
    5458:	f000 8090 	beq.w	557c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    545c:	9b01      	ldr	r3, [sp, #4]
    545e:	2b03      	cmp	r3, #3
    5460:	f200 80d3 	bhi.w	560a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5464:	9b01      	ldr	r3, [sp, #4]
    5466:	2b00      	cmp	r3, #0
    5468:	d040      	beq.n	54ec <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    546a:	9b01      	ldr	r3, [sp, #4]
    546c:	3b01      	subs	r3, #1
    546e:	2b01      	cmp	r3, #1
    5470:	f200 80cb 	bhi.w	560a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5474:	9b00      	ldr	r3, [sp, #0]
    5476:	2b00      	cmp	r3, #0
    5478:	f040 80c9 	bne.w	560e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    547c:	4b68      	ldr	r3, [pc, #416]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    547e:	2200      	movs	r2, #0
    5480:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5482:	4b68      	ldr	r3, [pc, #416]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	685b      	ldr	r3, [r3, #4]
    5488:	4a67      	ldr	r2, [pc, #412]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    548a:	6812      	ldr	r2, [r2, #0]
    548c:	4610      	mov	r0, r2
    548e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5490:	4b66      	ldr	r3, [pc, #408]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	4a66      	ldr	r2, [pc, #408]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5498:	6812      	ldr	r2, [r2, #0]
    549a:	4610      	mov	r0, r2
    549c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    549e:	4b65      	ldr	r3, [pc, #404]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    54a0:	681b      	ldr	r3, [r3, #0]
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	4a64      	ldr	r2, [pc, #400]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    54a6:	6812      	ldr	r2, [r2, #0]
    54a8:	4610      	mov	r0, r2
    54aa:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    54ac:	4b63      	ldr	r3, [pc, #396]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    54ae:	681b      	ldr	r3, [r3, #0]
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	4a63      	ldr	r2, [pc, #396]	; (5640 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    54b4:	6812      	ldr	r2, [r2, #0]
    54b6:	4610      	mov	r0, r2
    54b8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    54ba:	4b62      	ldr	r3, [pc, #392]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	691b      	ldr	r3, [r3, #16]
    54c0:	4a61      	ldr	r2, [pc, #388]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54c2:	6812      	ldr	r2, [r2, #0]
    54c4:	6812      	ldr	r2, [r2, #0]
    54c6:	4610      	mov	r0, r2
    54c8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    54ca:	4b60      	ldr	r3, [pc, #384]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54cc:	681b      	ldr	r3, [r3, #0]
    54ce:	68db      	ldr	r3, [r3, #12]
    54d0:	4a5f      	ldr	r2, [pc, #380]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54d2:	6812      	ldr	r2, [r2, #0]
    54d4:	6812      	ldr	r2, [r2, #0]
    54d6:	4610      	mov	r0, r2
    54d8:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    54da:	4b5e      	ldr	r3, [pc, #376]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	689b      	ldr	r3, [r3, #8]
    54e0:	4a5d      	ldr	r2, [pc, #372]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54e2:	6812      	ldr	r2, [r2, #0]
    54e4:	6812      	ldr	r2, [r2, #0]
    54e6:	4610      	mov	r0, r2
    54e8:	4798      	blx	r3
            }
        }
        break;
    54ea:	e090      	b.n	560e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54ec:	9b00      	ldr	r3, [sp, #0]
    54ee:	2b02      	cmp	r3, #2
    54f0:	f040 808f 	bne.w	5612 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54f4:	4b4a      	ldr	r3, [pc, #296]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54f6:	2201      	movs	r2, #1
    54f8:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54fa:	4b56      	ldr	r3, [pc, #344]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	685b      	ldr	r3, [r3, #4]
    5500:	4a55      	ldr	r2, [pc, #340]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5502:	6812      	ldr	r2, [r2, #0]
    5504:	4610      	mov	r0, r2
    5506:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5508:	4b50      	ldr	r3, [pc, #320]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	691b      	ldr	r3, [r3, #16]
    550e:	4a50      	ldr	r2, [pc, #320]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5510:	6812      	ldr	r2, [r2, #0]
    5512:	4610      	mov	r0, r2
    5514:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5516:	4b4d      	ldr	r3, [pc, #308]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5518:	681b      	ldr	r3, [r3, #0]
    551a:	689b      	ldr	r3, [r3, #8]
    551c:	4a4c      	ldr	r2, [pc, #304]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    551e:	6812      	ldr	r2, [r2, #0]
    5520:	4610      	mov	r0, r2
    5522:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5524:	4b47      	ldr	r3, [pc, #284]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5526:	681b      	ldr	r3, [r3, #0]
    5528:	68db      	ldr	r3, [r3, #12]
    552a:	4a47      	ldr	r2, [pc, #284]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    552c:	6812      	ldr	r2, [r2, #0]
    552e:	4610      	mov	r0, r2
    5530:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5532:	4b44      	ldr	r3, [pc, #272]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	689b      	ldr	r3, [r3, #8]
    5538:	4a43      	ldr	r2, [pc, #268]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    553a:	6812      	ldr	r2, [r2, #0]
    553c:	6812      	ldr	r2, [r2, #0]
    553e:	4610      	mov	r0, r2
    5540:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5542:	4b38      	ldr	r3, [pc, #224]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5544:	681b      	ldr	r3, [r3, #0]
    5546:	685b      	ldr	r3, [r3, #4]
    5548:	4a44      	ldr	r2, [pc, #272]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    554a:	6812      	ldr	r2, [r2, #0]
    554c:	4610      	mov	r0, r2
    554e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5550:	4b36      	ldr	r3, [pc, #216]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	681b      	ldr	r3, [r3, #0]
    5556:	4a42      	ldr	r2, [pc, #264]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5558:	6812      	ldr	r2, [r2, #0]
    555a:	4610      	mov	r0, r2
    555c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    555e:	4b35      	ldr	r3, [pc, #212]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5560:	681b      	ldr	r3, [r3, #0]
    5562:	681b      	ldr	r3, [r3, #0]
    5564:	4a3f      	ldr	r2, [pc, #252]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5566:	6812      	ldr	r2, [r2, #0]
    5568:	4610      	mov	r0, r2
    556a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    556c:	4b33      	ldr	r3, [pc, #204]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    556e:	681b      	ldr	r3, [r3, #0]
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	4a3d      	ldr	r2, [pc, #244]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5574:	6812      	ldr	r2, [r2, #0]
    5576:	4610      	mov	r0, r2
    5578:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    557a:	e04a      	b.n	5612 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    557c:	9b00      	ldr	r3, [sp, #0]
    557e:	2b02      	cmp	r3, #2
    5580:	d149      	bne.n	5616 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5582:	4b27      	ldr	r3, [pc, #156]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5584:	2201      	movs	r2, #1
    5586:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5588:	4b32      	ldr	r3, [pc, #200]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    558a:	681b      	ldr	r3, [r3, #0]
    558c:	685b      	ldr	r3, [r3, #4]
    558e:	4a32      	ldr	r2, [pc, #200]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5590:	6812      	ldr	r2, [r2, #0]
    5592:	4610      	mov	r0, r2
    5594:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5596:	4b2d      	ldr	r3, [pc, #180]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5598:	681b      	ldr	r3, [r3, #0]
    559a:	691b      	ldr	r3, [r3, #16]
    559c:	4a2c      	ldr	r2, [pc, #176]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    559e:	6812      	ldr	r2, [r2, #0]
    55a0:	4610      	mov	r0, r2
    55a2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    55a4:	4b29      	ldr	r3, [pc, #164]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	689b      	ldr	r3, [r3, #8]
    55aa:	4a29      	ldr	r2, [pc, #164]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    55ac:	6812      	ldr	r2, [r2, #0]
    55ae:	4610      	mov	r0, r2
    55b0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    55b2:	4b24      	ldr	r3, [pc, #144]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	68db      	ldr	r3, [r3, #12]
    55b8:	4a23      	ldr	r2, [pc, #140]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55ba:	6812      	ldr	r2, [r2, #0]
    55bc:	4610      	mov	r0, r2
    55be:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    55c0:	4b20      	ldr	r3, [pc, #128]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	689b      	ldr	r3, [r3, #8]
    55c6:	4a20      	ldr	r2, [pc, #128]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55c8:	6812      	ldr	r2, [r2, #0]
    55ca:	6812      	ldr	r2, [r2, #0]
    55cc:	4610      	mov	r0, r2
    55ce:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    55d0:	4b26      	ldr	r3, [pc, #152]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    55d2:	681b      	ldr	r3, [r3, #0]
    55d4:	685b      	ldr	r3, [r3, #4]
    55d6:	4a26      	ldr	r2, [pc, #152]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    55d8:	6812      	ldr	r2, [r2, #0]
    55da:	4610      	mov	r0, r2
    55dc:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    55de:	4b25      	ldr	r3, [pc, #148]	; (5674 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    55e0:	681b      	ldr	r3, [r3, #0]
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	4a24      	ldr	r2, [pc, #144]	; (5678 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    55e6:	6812      	ldr	r2, [r2, #0]
    55e8:	4610      	mov	r0, r2
    55ea:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    55ec:	4b23      	ldr	r3, [pc, #140]	; (567c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    55ee:	681b      	ldr	r3, [r3, #0]
    55f0:	681b      	ldr	r3, [r3, #0]
    55f2:	4a23      	ldr	r2, [pc, #140]	; (5680 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    55f4:	6812      	ldr	r2, [r2, #0]
    55f6:	4610      	mov	r0, r2
    55f8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    55fa:	4b22      	ldr	r3, [pc, #136]	; (5684 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	681b      	ldr	r3, [r3, #0]
    5600:	4a21      	ldr	r2, [pc, #132]	; (5688 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5602:	6812      	ldr	r2, [r2, #0]
    5604:	4610      	mov	r0, r2
    5606:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5608:	e005      	b.n	5616 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    560a:	bf00      	nop
    560c:	e004      	b.n	5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    560e:	bf00      	nop
    5610:	e002      	b.n	5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5612:	bf00      	nop
    5614:	e000      	b.n	5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5616:	bf00      	nop
    }

}
    5618:	bf00      	nop
    561a:	b003      	add	sp, #12
    561c:	f85d fb04 	ldr.w	pc, [sp], #4
    5620:	1fff8b19 	.word	0x1fff8b19
    5624:	1fff8bb8 	.word	0x1fff8bb8
    5628:	1fff8bd8 	.word	0x1fff8bd8
    562c:	1fff8bbc 	.word	0x1fff8bbc
    5630:	1fff8be0 	.word	0x1fff8be0
    5634:	1fff8bc0 	.word	0x1fff8bc0
    5638:	1fff8be8 	.word	0x1fff8be8
    563c:	1fff8bc4 	.word	0x1fff8bc4
    5640:	1fff8bf0 	.word	0x1fff8bf0
    5644:	1fff8bac 	.word	0x1fff8bac
    5648:	1fff8bd0 	.word	0x1fff8bd0
    564c:	1fff8bb0 	.word	0x1fff8bb0
    5650:	1fff8bcc 	.word	0x1fff8bcc
    5654:	1fff8bb4 	.word	0x1fff8bb4
    5658:	1fff8bc8 	.word	0x1fff8bc8
    565c:	1fff8bd4 	.word	0x1fff8bd4
    5660:	1fff8bdc 	.word	0x1fff8bdc
    5664:	1fff8be4 	.word	0x1fff8be4
    5668:	1fff8bec 	.word	0x1fff8bec
    566c:	1fff8bf4 	.word	0x1fff8bf4
    5670:	1fff8c04 	.word	0x1fff8c04
    5674:	1fff8bf8 	.word	0x1fff8bf8
    5678:	1fff8c08 	.word	0x1fff8c08
    567c:	1fff8bfc 	.word	0x1fff8bfc
    5680:	1fff8c0c 	.word	0x1fff8c0c
    5684:	1fff8c00 	.word	0x1fff8c00
    5688:	1fff8c10 	.word	0x1fff8c10

0000568c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    568c:	b500      	push	{lr}
    568e:	b083      	sub	sp, #12
    5690:	9001      	str	r0, [sp, #4]
    5692:	9100      	str	r1, [sp, #0]
    switch(Command)
    5694:	9b00      	ldr	r3, [sp, #0]
    5696:	2b04      	cmp	r3, #4
    5698:	d010      	beq.n	56bc <Clock_Ip_Command+0x30>
    569a:	9b00      	ldr	r3, [sp, #0]
    569c:	2b04      	cmp	r3, #4
    569e:	d811      	bhi.n	56c4 <Clock_Ip_Command+0x38>
    56a0:	9b00      	ldr	r3, [sp, #0]
    56a2:	2b01      	cmp	r3, #1
    56a4:	d006      	beq.n	56b4 <Clock_Ip_Command+0x28>
    56a6:	9b00      	ldr	r3, [sp, #0]
    56a8:	2b02      	cmp	r3, #2
    56aa:	d10b      	bne.n	56c4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    56ac:	9801      	ldr	r0, [sp, #4]
    56ae:	f7ff fdb3 	bl	5218 <Clock_Ip_ClockInitializeObjects>
            break;
    56b2:	e008      	b.n	56c6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    56b4:	9801      	ldr	r0, [sp, #4]
    56b6:	f7ff f9db 	bl	4a70 <Clock_Ip_SpecificPlatformInitClock>
            break;
    56ba:	e004      	b.n	56c6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    56bc:	9801      	ldr	r0, [sp, #4]
    56be:	f7ff f8ed 	bl	489c <DisableSafeClock>
            break;
    56c2:	e000      	b.n	56c6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    56c4:	bf00      	nop
    }
}
    56c6:	bf00      	nop
    56c8:	b003      	add	sp, #12
    56ca:	f85d fb04 	ldr.w	pc, [sp], #4
    56ce:	bf00      	nop

000056d0 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    56d0:	b500      	push	{lr}
    56d2:	b085      	sub	sp, #20
    56d4:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    56d6:	4a20      	ldr	r2, [pc, #128]	; (5758 <Mcu_Init+0x88>)
    56d8:	9b01      	ldr	r3, [sp, #4]
    56da:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56dc:	2300      	movs	r3, #0
    56de:	9303      	str	r3, [sp, #12]
    56e0:	e010      	b.n	5704 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    56e2:	4b1d      	ldr	r3, [pc, #116]	; (5758 <Mcu_Init+0x88>)
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	6919      	ldr	r1, [r3, #16]
    56e8:	9a03      	ldr	r2, [sp, #12]
    56ea:	4613      	mov	r3, r2
    56ec:	005b      	lsls	r3, r3, #1
    56ee:	4413      	add	r3, r2
    56f0:	009b      	lsls	r3, r3, #2
    56f2:	440b      	add	r3, r1
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	9a03      	ldr	r2, [sp, #12]
    56f8:	b2d1      	uxtb	r1, r2
    56fa:	4a18      	ldr	r2, [pc, #96]	; (575c <Mcu_Init+0x8c>)
    56fc:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56fe:	9b03      	ldr	r3, [sp, #12]
    5700:	3301      	adds	r3, #1
    5702:	9303      	str	r3, [sp, #12]
    5704:	4b14      	ldr	r3, [pc, #80]	; (5758 <Mcu_Init+0x88>)
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	689b      	ldr	r3, [r3, #8]
    570a:	9a03      	ldr	r2, [sp, #12]
    570c:	429a      	cmp	r2, r3
    570e:	d3e8      	bcc.n	56e2 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5710:	2300      	movs	r3, #0
    5712:	9303      	str	r3, [sp, #12]
    5714:	e010      	b.n	5738 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5716:	4b10      	ldr	r3, [pc, #64]	; (5758 <Mcu_Init+0x88>)
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	6959      	ldr	r1, [r3, #20]
    571c:	9a03      	ldr	r2, [sp, #12]
    571e:	4613      	mov	r3, r2
    5720:	01db      	lsls	r3, r3, #7
    5722:	1a9b      	subs	r3, r3, r2
    5724:	00db      	lsls	r3, r3, #3
    5726:	440b      	add	r3, r1
    5728:	681b      	ldr	r3, [r3, #0]
    572a:	9a03      	ldr	r2, [sp, #12]
    572c:	b2d1      	uxtb	r1, r2
    572e:	4a0c      	ldr	r2, [pc, #48]	; (5760 <Mcu_Init+0x90>)
    5730:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5732:	9b03      	ldr	r3, [sp, #12]
    5734:	3301      	adds	r3, #1
    5736:	9303      	str	r3, [sp, #12]
    5738:	4b07      	ldr	r3, [pc, #28]	; (5758 <Mcu_Init+0x88>)
    573a:	681b      	ldr	r3, [r3, #0]
    573c:	68db      	ldr	r3, [r3, #12]
    573e:	9a03      	ldr	r2, [sp, #12]
    5740:	429a      	cmp	r2, r3
    5742:	d3e8      	bcc.n	5716 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5744:	4b04      	ldr	r3, [pc, #16]	; (5758 <Mcu_Init+0x88>)
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	699b      	ldr	r3, [r3, #24]
    574a:	4618      	mov	r0, r3
    574c:	f000 f88a 	bl	5864 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5750:	bf00      	nop
    5752:	b005      	add	sp, #20
    5754:	f85d fb04 	ldr.w	pc, [sp], #4
    5758:	1fff8cec 	.word	0x1fff8cec
    575c:	1fff8ce8 	.word	0x1fff8ce8
    5760:	1fff8ce4 	.word	0x1fff8ce4

00005764 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5764:	b084      	sub	sp, #16
    5766:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5768:	2301      	movs	r3, #1
    576a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    576e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5772:	4618      	mov	r0, r3
    5774:	b004      	add	sp, #16
    5776:	4770      	bx	lr

00005778 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5778:	b500      	push	{lr}
    577a:	b085      	sub	sp, #20
    577c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    577e:	4a0e      	ldr	r2, [pc, #56]	; (57b8 <Mcu_InitClock+0x40>)
    5780:	9b01      	ldr	r3, [sp, #4]
    5782:	4413      	add	r3, r2
    5784:	781b      	ldrb	r3, [r3, #0]
    5786:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    578a:	4b0c      	ldr	r3, [pc, #48]	; (57bc <Mcu_InitClock+0x44>)
    578c:	681b      	ldr	r3, [r3, #0]
    578e:	6959      	ldr	r1, [r3, #20]
    5790:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5794:	4613      	mov	r3, r2
    5796:	01db      	lsls	r3, r3, #7
    5798:	1a9b      	subs	r3, r3, r2
    579a:	00db      	lsls	r3, r3, #3
    579c:	440b      	add	r3, r1
    579e:	4618      	mov	r0, r3
    57a0:	f000 f86a 	bl	5878 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    57a4:	2300      	movs	r3, #0
    57a6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    57aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    57ae:	4618      	mov	r0, r3
    57b0:	b005      	add	sp, #20
    57b2:	f85d fb04 	ldr.w	pc, [sp], #4
    57b6:	bf00      	nop
    57b8:	1fff8ce4 	.word	0x1fff8ce4
    57bc:	1fff8cec 	.word	0x1fff8cec

000057c0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    57c0:	b500      	push	{lr}
    57c2:	b085      	sub	sp, #20
    57c4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    57c6:	4a0d      	ldr	r2, [pc, #52]	; (57fc <Mcu_SetMode+0x3c>)
    57c8:	9b01      	ldr	r3, [sp, #4]
    57ca:	4413      	add	r3, r2
    57cc:	781b      	ldrb	r3, [r3, #0]
    57ce:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    57d2:	f001 fb27 	bl	6e24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    57d6:	4b0a      	ldr	r3, [pc, #40]	; (5800 <Mcu_SetMode+0x40>)
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	6919      	ldr	r1, [r3, #16]
    57dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57e0:	4613      	mov	r3, r2
    57e2:	005b      	lsls	r3, r3, #1
    57e4:	4413      	add	r3, r2
    57e6:	009b      	lsls	r3, r3, #2
    57e8:	440b      	add	r3, r1
    57ea:	4618      	mov	r0, r3
    57ec:	f000 f84e 	bl	588c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    57f0:	f001 fb44 	bl	6e7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    57f4:	bf00      	nop
    57f6:	b005      	add	sp, #20
    57f8:	f85d fb04 	ldr.w	pc, [sp], #4
    57fc:	1fff8ce8 	.word	0x1fff8ce8
    5800:	1fff8cec 	.word	0x1fff8cec

00005804 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5804:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5806:	2302      	movs	r3, #2
    5808:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    580a:	9b01      	ldr	r3, [sp, #4]
}
    580c:	4618      	mov	r0, r3
    580e:	b002      	add	sp, #8
    5810:	4770      	bx	lr

00005812 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5812:	b500      	push	{lr}
    5814:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5816:	f000 f843 	bl	58a0 <Mcu_Ipw_GetResetReason>
    581a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    581c:	9b01      	ldr	r3, [sp, #4]
}
    581e:	4618      	mov	r0, r3
    5820:	b003      	add	sp, #12
    5822:	f85d fb04 	ldr.w	pc, [sp], #4

00005826 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5826:	b500      	push	{lr}
    5828:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    582a:	f000 f83f 	bl	58ac <Mcu_Ipw_GetResetRawValue>
    582e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5830:	9b01      	ldr	r3, [sp, #4]
}
    5832:	4618      	mov	r0, r3
    5834:	b003      	add	sp, #12
    5836:	f85d fb04 	ldr.w	pc, [sp], #4

0000583a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    583a:	b500      	push	{lr}
    583c:	b083      	sub	sp, #12
    583e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5840:	9801      	ldr	r0, [sp, #4]
    5842:	f000 f839 	bl	58b8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5846:	bf00      	nop
    5848:	b003      	add	sp, #12
    584a:	f85d fb04 	ldr.w	pc, [sp], #4

0000584e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    584e:	b082      	sub	sp, #8
    5850:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5852:	4b03      	ldr	r3, [pc, #12]	; (5860 <Mcu_ClkSrcFailureNotification+0x12>)
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5858:	bf00      	nop
    585a:	b002      	add	sp, #8
    585c:	4770      	bx	lr
    585e:	bf00      	nop
    5860:	1fff8cec 	.word	0x1fff8cec

00005864 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5864:	b500      	push	{lr}
    5866:	b083      	sub	sp, #12
    5868:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    586a:	9801      	ldr	r0, [sp, #4]
    586c:	f000 f882 	bl	5974 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5870:	bf00      	nop
    5872:	b003      	add	sp, #12
    5874:	f85d fb04 	ldr.w	pc, [sp], #4

00005878 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5878:	b500      	push	{lr}
    587a:	b083      	sub	sp, #12
    587c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    587e:	9801      	ldr	r0, [sp, #4]
    5880:	f7fc fc6a 	bl	2158 <Clock_Ip_InitClock>
}
    5884:	bf00      	nop
    5886:	b003      	add	sp, #12
    5888:	f85d fb04 	ldr.w	pc, [sp], #4

0000588c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    588c:	b500      	push	{lr}
    588e:	b083      	sub	sp, #12
    5890:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5892:	9801      	ldr	r0, [sp, #4]
    5894:	f000 f820 	bl	58d8 <Power_Ip_SetMode>
}
    5898:	bf00      	nop
    589a:	b003      	add	sp, #12
    589c:	f85d fb04 	ldr.w	pc, [sp], #4

000058a0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    58a0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    58a2:	f000 f84f 	bl	5944 <Power_Ip_GetResetReason>
    58a6:	4603      	mov	r3, r0
}
    58a8:	4618      	mov	r0, r3
    58aa:	bd08      	pop	{r3, pc}

000058ac <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    58ac:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    58ae:	f000 f857 	bl	5960 <Power_Ip_GetResetRawValue>
    58b2:	4603      	mov	r3, r0
}
    58b4:	4618      	mov	r0, r3
    58b6:	bd08      	pop	{r3, pc}

000058b8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    58b8:	b500      	push	{lr}
    58ba:	b083      	sub	sp, #12
    58bc:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    58be:	9b01      	ldr	r3, [sp, #4]
    58c0:	2b00      	cmp	r3, #0
    58c2:	d102      	bne.n	58ca <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    58c4:	f000 f86c 	bl	59a0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    58c8:	e001      	b.n	58ce <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    58ca:	f000 f86e 	bl	59aa <Power_Ip_EnableSleepOnExit>
}
    58ce:	bf00      	nop
    58d0:	b003      	add	sp, #12
    58d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000058d8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    58d8:	b500      	push	{lr}
    58da:	b085      	sub	sp, #20
    58dc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    58de:	9b01      	ldr	r3, [sp, #4]
    58e0:	685b      	ldr	r3, [r3, #4]
    58e2:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    58e4:	9802      	ldr	r0, [sp, #8]
    58e6:	f000 f9f5 	bl	5cd4 <Power_Ip_SMC_ModeCheckEntry>
    58ea:	4603      	mov	r3, r0
    58ec:	2b00      	cmp	r3, #0
    58ee:	d002      	beq.n	58f6 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58f0:	2301      	movs	r3, #1
    58f2:	9303      	str	r3, [sp, #12]
    58f4:	e003      	b.n	58fe <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    58f6:	9801      	ldr	r0, [sp, #4]
    58f8:	f000 fa1e 	bl	5d38 <Power_Ip_SMC_ModeConfig>
    58fc:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    58fe:	9b03      	ldr	r3, [sp, #12]
    5900:	2b01      	cmp	r3, #1
    5902:	d103      	bne.n	590c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5904:	21ff      	movs	r1, #255	; 0xff
    5906:	2003      	movs	r0, #3
    5908:	f000 f8f4 	bl	5af4 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    590c:	bf00      	nop
    590e:	b005      	add	sp, #20
    5910:	f85d fb04 	ldr.w	pc, [sp], #4

00005914 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5914:	b084      	sub	sp, #16
    5916:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5918:	230c      	movs	r3, #12
    591a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    591c:	4a08      	ldr	r2, [pc, #32]	; (5940 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    591e:	9b01      	ldr	r3, [sp, #4]
    5920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5924:	2b0e      	cmp	r3, #14
    5926:	d805      	bhi.n	5934 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5928:	4a05      	ldr	r2, [pc, #20]	; (5940 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    592a:	9b01      	ldr	r3, [sp, #4]
    592c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5930:	9303      	str	r3, [sp, #12]
    5932:	e001      	b.n	5938 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5934:	230c      	movs	r3, #12
    5936:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5938:	9b03      	ldr	r3, [sp, #12]
}
    593a:	4618      	mov	r0, r3
    593c:	b004      	add	sp, #16
    593e:	4770      	bx	lr
    5940:	00008ad4 	.word	0x00008ad4

00005944 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5944:	b500      	push	{lr}
    5946:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5948:	f000 f940 	bl	5bcc <Power_Ip_RCM_GetResetReason>
    594c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    594e:	9801      	ldr	r0, [sp, #4]
    5950:	f7ff ffe0 	bl	5914 <Power_Ip_ConvertIntergeToResetType>
    5954:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5956:	9b00      	ldr	r3, [sp, #0]
}
    5958:	4618      	mov	r0, r3
    595a:	b003      	add	sp, #12
    595c:	f85d fb04 	ldr.w	pc, [sp], #4

00005960 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5960:	b500      	push	{lr}
    5962:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5964:	f000 f98a 	bl	5c7c <Power_Ip_RCM_GetResetRawValue>
    5968:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    596a:	9b01      	ldr	r3, [sp, #4]
}
    596c:	4618      	mov	r0, r3
    596e:	b003      	add	sp, #12
    5970:	f85d fb04 	ldr.w	pc, [sp], #4

00005974 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5974:	b500      	push	{lr}
    5976:	b083      	sub	sp, #12
    5978:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    597a:	9b01      	ldr	r3, [sp, #4]
    597c:	681b      	ldr	r3, [r3, #0]
    597e:	4618      	mov	r0, r3
    5980:	f000 f90e 	bl	5ba0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5984:	9b01      	ldr	r3, [sp, #4]
    5986:	685b      	ldr	r3, [r3, #4]
    5988:	4618      	mov	r0, r3
    598a:	f000 f86d 	bl	5a68 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    598e:	9b01      	ldr	r3, [sp, #4]
    5990:	689b      	ldr	r3, [r3, #8]
    5992:	4618      	mov	r0, r3
    5994:	f000 f990 	bl	5cb8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5998:	bf00      	nop
    599a:	b003      	add	sp, #12
    599c:	f85d fb04 	ldr.w	pc, [sp], #4

000059a0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    59a0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    59a2:	f000 f811 	bl	59c8 <Power_Ip_CM4_DisableSleepOnExit>
}
    59a6:	bf00      	nop
    59a8:	bd08      	pop	{r3, pc}

000059aa <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    59aa:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    59ac:	f000 f820 	bl	59f0 <Power_Ip_CM4_EnableSleepOnExit>
}
    59b0:	bf00      	nop
    59b2:	bd08      	pop	{r3, pc}

000059b4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    59b4:	b082      	sub	sp, #8
    59b6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    59b8:	4a02      	ldr	r2, [pc, #8]	; (59c4 <Power_Ip_InstallNotificationsCallback+0x10>)
    59ba:	9b01      	ldr	r3, [sp, #4]
    59bc:	6013      	str	r3, [r2, #0]
}
    59be:	bf00      	nop
    59c0:	b002      	add	sp, #8
    59c2:	4770      	bx	lr
    59c4:	1fff8b1c 	.word	0x1fff8b1c

000059c8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    59c8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59ca:	2300      	movs	r3, #0
    59cc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59ce:	4b07      	ldr	r3, [pc, #28]	; (59ec <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59d0:	681b      	ldr	r3, [r3, #0]
    59d2:	685b      	ldr	r3, [r3, #4]
    59d4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    59d6:	9b01      	ldr	r3, [sp, #4]
    59d8:	f023 0302 	bic.w	r3, r3, #2
    59dc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59de:	4b03      	ldr	r3, [pc, #12]	; (59ec <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59e0:	681b      	ldr	r3, [r3, #0]
    59e2:	9a01      	ldr	r2, [sp, #4]
    59e4:	605a      	str	r2, [r3, #4]
}
    59e6:	bf00      	nop
    59e8:	b002      	add	sp, #8
    59ea:	4770      	bx	lr
    59ec:	1fff8b20 	.word	0x1fff8b20

000059f0 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    59f0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59f2:	2300      	movs	r3, #0
    59f4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59f6:	4b07      	ldr	r3, [pc, #28]	; (5a14 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	685b      	ldr	r3, [r3, #4]
    59fc:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    59fe:	9b01      	ldr	r3, [sp, #4]
    5a00:	f043 0302 	orr.w	r3, r3, #2
    5a04:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a06:	4b03      	ldr	r3, [pc, #12]	; (5a14 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	9a01      	ldr	r2, [sp, #4]
    5a0c:	605a      	str	r2, [r3, #4]
}
    5a0e:	bf00      	nop
    5a10:	b002      	add	sp, #8
    5a12:	4770      	bx	lr
    5a14:	1fff8b20 	.word	0x1fff8b20

00005a18 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5a18:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a1a:	2300      	movs	r3, #0
    5a1c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a1e:	4b07      	ldr	r3, [pc, #28]	; (5a3c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	685b      	ldr	r3, [r3, #4]
    5a24:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5a26:	9b01      	ldr	r3, [sp, #4]
    5a28:	f043 0304 	orr.w	r3, r3, #4
    5a2c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a2e:	4b03      	ldr	r3, [pc, #12]	; (5a3c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a30:	681b      	ldr	r3, [r3, #0]
    5a32:	9a01      	ldr	r2, [sp, #4]
    5a34:	605a      	str	r2, [r3, #4]
}
    5a36:	bf00      	nop
    5a38:	b002      	add	sp, #8
    5a3a:	4770      	bx	lr
    5a3c:	1fff8b20 	.word	0x1fff8b20

00005a40 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5a40:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a42:	2300      	movs	r3, #0
    5a44:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a46:	4b07      	ldr	r3, [pc, #28]	; (5a64 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a48:	681b      	ldr	r3, [r3, #0]
    5a4a:	685b      	ldr	r3, [r3, #4]
    5a4c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a4e:	9b01      	ldr	r3, [sp, #4]
    5a50:	f023 0304 	bic.w	r3, r3, #4
    5a54:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a56:	4b03      	ldr	r3, [pc, #12]	; (5a64 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a58:	681b      	ldr	r3, [r3, #0]
    5a5a:	9a01      	ldr	r2, [sp, #4]
    5a5c:	605a      	str	r2, [r3, #4]
}
    5a5e:	bf00      	nop
    5a60:	b002      	add	sp, #8
    5a62:	4770      	bx	lr
    5a64:	1fff8b20 	.word	0x1fff8b20

00005a68 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a68:	b084      	sub	sp, #16
    5a6a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a6c:	4b20      	ldr	r3, [pc, #128]	; (5af0 <Power_Ip_PMC_PowerInit+0x88>)
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a78:	f003 030f 	and.w	r3, r3, #15
    5a7c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a80:	9b01      	ldr	r3, [sp, #4]
    5a82:	781a      	ldrb	r2, [r3, #0]
    5a84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a88:	4313      	orrs	r3, r2
    5a8a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a8e:	4a18      	ldr	r2, [pc, #96]	; (5af0 <Power_Ip_PMC_PowerInit+0x88>)
    5a90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a94:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a96:	4b16      	ldr	r3, [pc, #88]	; (5af0 <Power_Ip_PMC_PowerInit+0x88>)
    5a98:	785b      	ldrb	r3, [r3, #1]
    5a9a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aa2:	f003 031f 	and.w	r3, r3, #31
    5aa6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5aaa:	9b01      	ldr	r3, [sp, #4]
    5aac:	785a      	ldrb	r2, [r3, #1]
    5aae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ab2:	4313      	orrs	r3, r2
    5ab4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5ab8:	4a0d      	ldr	r2, [pc, #52]	; (5af0 <Power_Ip_PMC_PowerInit+0x88>)
    5aba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5abe:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5ac0:	4b0b      	ldr	r3, [pc, #44]	; (5af0 <Power_Ip_PMC_PowerInit+0x88>)
    5ac2:	789b      	ldrb	r3, [r3, #2]
    5ac4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5ac8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5ad0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5ad4:	9b01      	ldr	r3, [sp, #4]
    5ad6:	789a      	ldrb	r2, [r3, #2]
    5ad8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5adc:	4313      	orrs	r3, r2
    5ade:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5ae2:	4a03      	ldr	r2, [pc, #12]	; (5af0 <Power_Ip_PMC_PowerInit+0x88>)
    5ae4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ae8:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5aea:	bf00      	nop
    5aec:	b004      	add	sp, #16
    5aee:	4770      	bx	lr
    5af0:	4007d000 	.word	0x4007d000

00005af4 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5af4:	b500      	push	{lr}
    5af6:	b083      	sub	sp, #12
    5af8:	9001      	str	r0, [sp, #4]
    5afa:	460b      	mov	r3, r1
    5afc:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5b00:	4b05      	ldr	r3, [pc, #20]	; (5b18 <Power_Ip_ReportPowerErrors+0x24>)
    5b02:	681b      	ldr	r3, [r3, #0]
    5b04:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5b08:	4611      	mov	r1, r2
    5b0a:	9801      	ldr	r0, [sp, #4]
    5b0c:	4798      	blx	r3
}
    5b0e:	bf00      	nop
    5b10:	b003      	add	sp, #12
    5b12:	f85d fb04 	ldr.w	pc, [sp], #4
    5b16:	bf00      	nop
    5b18:	1fff8b1c 	.word	0x1fff8b1c

00005b1c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5b1c:	b082      	sub	sp, #8
    5b1e:	9001      	str	r0, [sp, #4]
    5b20:	460b      	mov	r3, r1
    5b22:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5b26:	bf00      	nop
    5b28:	b002      	add	sp, #8
    5b2a:	4770      	bx	lr

00005b2c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5b2c:	b500      	push	{lr}
    5b2e:	b085      	sub	sp, #20
    5b30:	9003      	str	r0, [sp, #12]
    5b32:	9102      	str	r1, [sp, #8]
    5b34:	9201      	str	r2, [sp, #4]
    5b36:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5b38:	2000      	movs	r0, #0
    5b3a:	f7fc f83c 	bl	1bb6 <OsIf_GetCounter>
    5b3e:	4602      	mov	r2, r0
    5b40:	9b03      	ldr	r3, [sp, #12]
    5b42:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5b44:	9b02      	ldr	r3, [sp, #8]
    5b46:	2200      	movs	r2, #0
    5b48:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b4a:	2100      	movs	r1, #0
    5b4c:	9800      	ldr	r0, [sp, #0]
    5b4e:	f7fc f87e 	bl	1c4e <OsIf_MicrosToTicks>
    5b52:	4602      	mov	r2, r0
    5b54:	9b01      	ldr	r3, [sp, #4]
    5b56:	601a      	str	r2, [r3, #0]
}
    5b58:	bf00      	nop
    5b5a:	b005      	add	sp, #20
    5b5c:	f85d fb04 	ldr.w	pc, [sp], #4

00005b60 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b60:	b500      	push	{lr}
    5b62:	b087      	sub	sp, #28
    5b64:	9003      	str	r0, [sp, #12]
    5b66:	9102      	str	r1, [sp, #8]
    5b68:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b6a:	2300      	movs	r3, #0
    5b6c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b70:	2100      	movs	r1, #0
    5b72:	9803      	ldr	r0, [sp, #12]
    5b74:	f7fc f838 	bl	1be8 <OsIf_GetElapsed>
    5b78:	4602      	mov	r2, r0
    5b7a:	9b02      	ldr	r3, [sp, #8]
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	441a      	add	r2, r3
    5b80:	9b02      	ldr	r3, [sp, #8]
    5b82:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b84:	9b02      	ldr	r3, [sp, #8]
    5b86:	681b      	ldr	r3, [r3, #0]
    5b88:	9a01      	ldr	r2, [sp, #4]
    5b8a:	429a      	cmp	r2, r3
    5b8c:	d802      	bhi.n	5b94 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b8e:	2301      	movs	r3, #1
    5b90:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b94:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b98:	4618      	mov	r0, r3
    5b9a:	b007      	add	sp, #28
    5b9c:	f85d fb04 	ldr.w	pc, [sp], #4

00005ba0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5ba0:	b082      	sub	sp, #8
    5ba2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5ba4:	9b01      	ldr	r3, [sp, #4]
    5ba6:	681a      	ldr	r2, [r3, #0]
    5ba8:	4907      	ldr	r1, [pc, #28]	; (5bc8 <Power_Ip_RCM_ResetInit+0x28>)
    5baa:	f641 7307 	movw	r3, #7943	; 0x1f07
    5bae:	4013      	ands	r3, r2
    5bb0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5bb2:	9b01      	ldr	r3, [sp, #4]
    5bb4:	685a      	ldr	r2, [r3, #4]
    5bb6:	4904      	ldr	r1, [pc, #16]	; (5bc8 <Power_Ip_RCM_ResetInit+0x28>)
    5bb8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5bbc:	4013      	ands	r3, r2
    5bbe:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5bc0:	bf00      	nop
    5bc2:	b002      	add	sp, #8
    5bc4:	4770      	bx	lr
    5bc6:	bf00      	nop
    5bc8:	4007f000 	.word	0x4007f000

00005bcc <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5bcc:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5bce:	230c      	movs	r3, #12
    5bd0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5bd2:	2300      	movs	r3, #0
    5bd4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5bd6:	2300      	movs	r3, #0
    5bd8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5bda:	2300      	movs	r3, #0
    5bdc:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bde:	4b25      	ldr	r3, [pc, #148]	; (5c74 <Power_Ip_RCM_GetResetReason+0xa8>)
    5be0:	699a      	ldr	r2, [r3, #24]
    5be2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5be6:	4013      	ands	r3, r2
    5be8:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5bea:	9b03      	ldr	r3, [sp, #12]
    5bec:	2b00      	cmp	r3, #0
    5bee:	d008      	beq.n	5c02 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bf0:	4920      	ldr	r1, [pc, #128]	; (5c74 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bf2:	9a03      	ldr	r2, [sp, #12]
    5bf4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bf8:	4013      	ands	r3, r2
    5bfa:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bfc:	4a1e      	ldr	r2, [pc, #120]	; (5c78 <Power_Ip_RCM_GetResetReason+0xac>)
    5bfe:	9b03      	ldr	r3, [sp, #12]
    5c00:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5c02:	4b1d      	ldr	r3, [pc, #116]	; (5c78 <Power_Ip_RCM_GetResetReason+0xac>)
    5c04:	681b      	ldr	r3, [r3, #0]
    5c06:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5c08:	9a02      	ldr	r2, [sp, #8]
    5c0a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c0e:	4013      	ands	r3, r2
    5c10:	2b82      	cmp	r3, #130	; 0x82
    5c12:	d102      	bne.n	5c1a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5c14:	2305      	movs	r3, #5
    5c16:	9307      	str	r3, [sp, #28]
    5c18:	e027      	b.n	5c6a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c1a:	2300      	movs	r3, #0
    5c1c:	9306      	str	r3, [sp, #24]
    5c1e:	e021      	b.n	5c64 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5c20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5c24:	9b06      	ldr	r3, [sp, #24]
    5c26:	fa22 f303 	lsr.w	r3, r2, r3
    5c2a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5c2c:	9a01      	ldr	r2, [sp, #4]
    5c2e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5c32:	4013      	ands	r3, r2
    5c34:	2b00      	cmp	r3, #0
    5c36:	d012      	beq.n	5c5e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5c38:	9a01      	ldr	r2, [sp, #4]
    5c3a:	9b02      	ldr	r3, [sp, #8]
    5c3c:	4013      	ands	r3, r2
    5c3e:	2b00      	cmp	r3, #0
    5c40:	d00a      	beq.n	5c58 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5c42:	9b05      	ldr	r3, [sp, #20]
    5c44:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5c46:	9b04      	ldr	r3, [sp, #16]
    5c48:	3301      	adds	r3, #1
    5c4a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c4c:	9b04      	ldr	r3, [sp, #16]
    5c4e:	2b01      	cmp	r3, #1
    5c50:	d902      	bls.n	5c58 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c52:	230d      	movs	r3, #13
    5c54:	9307      	str	r3, [sp, #28]
                        break;
    5c56:	e008      	b.n	5c6a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c58:	9b05      	ldr	r3, [sp, #20]
    5c5a:	3301      	adds	r3, #1
    5c5c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c5e:	9b06      	ldr	r3, [sp, #24]
    5c60:	3301      	adds	r3, #1
    5c62:	9306      	str	r3, [sp, #24]
    5c64:	9b06      	ldr	r3, [sp, #24]
    5c66:	2b1f      	cmp	r3, #31
    5c68:	d9da      	bls.n	5c20 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c6a:	9b07      	ldr	r3, [sp, #28]
}
    5c6c:	4618      	mov	r0, r3
    5c6e:	b008      	add	sp, #32
    5c70:	4770      	bx	lr
    5c72:	bf00      	nop
    5c74:	4007f000 	.word	0x4007f000
    5c78:	1fff8cf0 	.word	0x1fff8cf0

00005c7c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c7c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c7e:	4b0c      	ldr	r3, [pc, #48]	; (5cb0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c80:	699a      	ldr	r2, [r3, #24]
    5c82:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c86:	4013      	ands	r3, r2
    5c88:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5c8a:	9b01      	ldr	r3, [sp, #4]
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d008      	beq.n	5ca2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c90:	4907      	ldr	r1, [pc, #28]	; (5cb0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c92:	9a01      	ldr	r2, [sp, #4]
    5c94:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c98:	4013      	ands	r3, r2
    5c9a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c9c:	4a05      	ldr	r2, [pc, #20]	; (5cb4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c9e:	9b01      	ldr	r3, [sp, #4]
    5ca0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5ca2:	4b04      	ldr	r3, [pc, #16]	; (5cb4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5ca4:	681b      	ldr	r3, [r3, #0]
    5ca6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5ca8:	9b00      	ldr	r3, [sp, #0]
}
    5caa:	4618      	mov	r0, r3
    5cac:	b002      	add	sp, #8
    5cae:	4770      	bx	lr
    5cb0:	4007f000 	.word	0x4007f000
    5cb4:	1fff8cf0 	.word	0x1fff8cf0

00005cb8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5cb8:	b082      	sub	sp, #8
    5cba:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5cbc:	9b01      	ldr	r3, [sp, #4]
    5cbe:	681b      	ldr	r3, [r3, #0]
    5cc0:	4a03      	ldr	r2, [pc, #12]	; (5cd0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5cc2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5cc6:	6093      	str	r3, [r2, #8]
}
    5cc8:	bf00      	nop
    5cca:	b002      	add	sp, #8
    5ccc:	4770      	bx	lr
    5cce:	bf00      	nop
    5cd0:	4007e000 	.word	0x4007e000

00005cd4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5cd4:	b084      	sub	sp, #16
    5cd6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5cd8:	2301      	movs	r3, #1
    5cda:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5cdc:	4b15      	ldr	r3, [pc, #84]	; (5d34 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5cde:	695b      	ldr	r3, [r3, #20]
    5ce0:	b2db      	uxtb	r3, r3
    5ce2:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5ce4:	9b01      	ldr	r3, [sp, #4]
    5ce6:	2b02      	cmp	r3, #2
    5ce8:	d012      	beq.n	5d10 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5cea:	9b01      	ldr	r3, [sp, #4]
    5cec:	2b02      	cmp	r3, #2
    5cee:	d818      	bhi.n	5d22 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5cf0:	9b01      	ldr	r3, [sp, #4]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d003      	beq.n	5cfe <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5cf6:	9b01      	ldr	r3, [sp, #4]
    5cf8:	2b01      	cmp	r3, #1
    5cfa:	d003      	beq.n	5d04 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5cfc:	e011      	b.n	5d22 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5cfe:	2300      	movs	r3, #0
    5d00:	9303      	str	r3, [sp, #12]
            break;
    5d02:	e013      	b.n	5d2c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5d04:	9b02      	ldr	r3, [sp, #8]
    5d06:	2b01      	cmp	r3, #1
    5d08:	d10d      	bne.n	5d26 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5d0a:	2300      	movs	r3, #0
    5d0c:	9303      	str	r3, [sp, #12]
            break;
    5d0e:	e00a      	b.n	5d26 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5d10:	9b02      	ldr	r3, [sp, #8]
    5d12:	2b01      	cmp	r3, #1
    5d14:	d002      	beq.n	5d1c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5d16:	9b02      	ldr	r3, [sp, #8]
    5d18:	2b10      	cmp	r3, #16
    5d1a:	d106      	bne.n	5d2a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5d1c:	2300      	movs	r3, #0
    5d1e:	9303      	str	r3, [sp, #12]
            break;
    5d20:	e003      	b.n	5d2a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5d22:	bf00      	nop
    5d24:	e002      	b.n	5d2c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d26:	bf00      	nop
    5d28:	e000      	b.n	5d2c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d2a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5d2c:	9b03      	ldr	r3, [sp, #12]
}
    5d2e:	4618      	mov	r0, r3
    5d30:	b004      	add	sp, #16
    5d32:	4770      	bx	lr
    5d34:	4007e000 	.word	0x4007e000

00005d38 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d38:	b500      	push	{lr}
    5d3a:	b08b      	sub	sp, #44	; 0x2c
    5d3c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5d3e:	2300      	movs	r3, #0
    5d40:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5d42:	2300      	movs	r3, #0
    5d44:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5d46:	2300      	movs	r3, #0
    5d48:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d4c:	9b01      	ldr	r3, [sp, #4]
    5d4e:	685b      	ldr	r3, [r3, #4]
    5d50:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d52:	9b08      	ldr	r3, [sp, #32]
    5d54:	2b02      	cmp	r3, #2
    5d56:	d076      	beq.n	5e46 <Power_Ip_SMC_ModeConfig+0x10e>
    5d58:	9b08      	ldr	r3, [sp, #32]
    5d5a:	2b02      	cmp	r3, #2
    5d5c:	f200 80ab 	bhi.w	5eb6 <Power_Ip_SMC_ModeConfig+0x17e>
    5d60:	9b08      	ldr	r3, [sp, #32]
    5d62:	2b00      	cmp	r3, #0
    5d64:	d003      	beq.n	5d6e <Power_Ip_SMC_ModeConfig+0x36>
    5d66:	9b08      	ldr	r3, [sp, #32]
    5d68:	2b01      	cmp	r3, #1
    5d6a:	d034      	beq.n	5dd6 <Power_Ip_SMC_ModeConfig+0x9e>
    5d6c:	e0a3      	b.n	5eb6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d6e:	4b58      	ldr	r3, [pc, #352]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d70:	68db      	ldr	r3, [r3, #12]
    5d72:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d74:	9b06      	ldr	r3, [sp, #24]
    5d76:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d7a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d7c:	4a54      	ldr	r2, [pc, #336]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d7e:	9b06      	ldr	r3, [sp, #24]
    5d80:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d82:	aa02      	add	r2, sp, #8
    5d84:	a903      	add	r1, sp, #12
    5d86:	a804      	add	r0, sp, #16
    5d88:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d8c:	f7ff fece 	bl	5b2c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d90:	9a02      	ldr	r2, [sp, #8]
    5d92:	a903      	add	r1, sp, #12
    5d94:	ab04      	add	r3, sp, #16
    5d96:	4618      	mov	r0, r3
    5d98:	f7ff fee2 	bl	5b60 <Power_Ip_TimeoutExpired>
    5d9c:	4603      	mov	r3, r0
    5d9e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5da2:	4b4b      	ldr	r3, [pc, #300]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5da4:	695b      	ldr	r3, [r3, #20]
    5da6:	f003 0301 	and.w	r3, r3, #1
    5daa:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dac:	9b05      	ldr	r3, [sp, #20]
    5dae:	2b01      	cmp	r3, #1
    5db0:	d006      	beq.n	5dc0 <Power_Ip_SMC_ModeConfig+0x88>
    5db2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5db6:	f083 0301 	eor.w	r3, r3, #1
    5dba:	b2db      	uxtb	r3, r3
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d1e7      	bne.n	5d90 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5dc0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d079      	beq.n	5ebc <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dc8:	2301      	movs	r3, #1
    5dca:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5dcc:	21ff      	movs	r1, #255	; 0xff
    5dce:	2000      	movs	r0, #0
    5dd0:	f7ff fe90 	bl	5af4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5dd4:	e072      	b.n	5ebc <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5dd6:	4b3e      	ldr	r3, [pc, #248]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5dd8:	68db      	ldr	r3, [r3, #12]
    5dda:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5ddc:	9b06      	ldr	r3, [sp, #24]
    5dde:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5de2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5de4:	9b06      	ldr	r3, [sp, #24]
    5de6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5dea:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5dec:	4a38      	ldr	r2, [pc, #224]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5dee:	9b06      	ldr	r3, [sp, #24]
    5df0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5df2:	aa02      	add	r2, sp, #8
    5df4:	a903      	add	r1, sp, #12
    5df6:	a804      	add	r0, sp, #16
    5df8:	f24c 3350 	movw	r3, #50000	; 0xc350
    5dfc:	f7ff fe96 	bl	5b2c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e00:	9a02      	ldr	r2, [sp, #8]
    5e02:	a903      	add	r1, sp, #12
    5e04:	ab04      	add	r3, sp, #16
    5e06:	4618      	mov	r0, r3
    5e08:	f7ff feaa 	bl	5b60 <Power_Ip_TimeoutExpired>
    5e0c:	4603      	mov	r3, r0
    5e0e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5e12:	4b2f      	ldr	r3, [pc, #188]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5e14:	695b      	ldr	r3, [r3, #20]
    5e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5e1a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e1c:	9b05      	ldr	r3, [sp, #20]
    5e1e:	2b80      	cmp	r3, #128	; 0x80
    5e20:	d006      	beq.n	5e30 <Power_Ip_SMC_ModeConfig+0xf8>
    5e22:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e26:	f083 0301 	eor.w	r3, r3, #1
    5e2a:	b2db      	uxtb	r3, r3
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d1e7      	bne.n	5e00 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5e30:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e34:	2b00      	cmp	r3, #0
    5e36:	d043      	beq.n	5ec0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e38:	2301      	movs	r3, #1
    5e3a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e3c:	21ff      	movs	r1, #255	; 0xff
    5e3e:	2000      	movs	r0, #0
    5e40:	f7ff fe58 	bl	5af4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e44:	e03c      	b.n	5ec0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5e46:	4b22      	ldr	r3, [pc, #136]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5e48:	68db      	ldr	r3, [r3, #12]
    5e4a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e4c:	9b06      	ldr	r3, [sp, #24]
    5e4e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e52:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e54:	9b06      	ldr	r3, [sp, #24]
    5e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e5a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e5c:	4a1c      	ldr	r2, [pc, #112]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5e5e:	9b06      	ldr	r3, [sp, #24]
    5e60:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e62:	aa02      	add	r2, sp, #8
    5e64:	a903      	add	r1, sp, #12
    5e66:	a804      	add	r0, sp, #16
    5e68:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e6c:	f7ff fe5e 	bl	5b2c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e70:	9a02      	ldr	r2, [sp, #8]
    5e72:	a903      	add	r1, sp, #12
    5e74:	ab04      	add	r3, sp, #16
    5e76:	4618      	mov	r0, r3
    5e78:	f7ff fe72 	bl	5b60 <Power_Ip_TimeoutExpired>
    5e7c:	4603      	mov	r3, r0
    5e7e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e82:	4b13      	ldr	r3, [pc, #76]	; (5ed0 <Power_Ip_SMC_ModeConfig+0x198>)
    5e84:	695b      	ldr	r3, [r3, #20]
    5e86:	f003 0304 	and.w	r3, r3, #4
    5e8a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e8c:	9b05      	ldr	r3, [sp, #20]
    5e8e:	2b04      	cmp	r3, #4
    5e90:	d006      	beq.n	5ea0 <Power_Ip_SMC_ModeConfig+0x168>
    5e92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e96:	f083 0301 	eor.w	r3, r3, #1
    5e9a:	b2db      	uxtb	r3, r3
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d1e7      	bne.n	5e70 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5ea0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	d00d      	beq.n	5ec4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ea8:	2301      	movs	r3, #1
    5eaa:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5eac:	21ff      	movs	r1, #255	; 0xff
    5eae:	2000      	movs	r0, #0
    5eb0:	f7ff fe20 	bl	5af4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5eb4:	e006      	b.n	5ec4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5eb6:	2301      	movs	r3, #1
    5eb8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5eba:	e004      	b.n	5ec6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ebc:	bf00      	nop
    5ebe:	e002      	b.n	5ec6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ec0:	bf00      	nop
    5ec2:	e000      	b.n	5ec6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ec4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5ec8:	4618      	mov	r0, r3
    5eca:	b00b      	add	sp, #44	; 0x2c
    5ecc:	f85d fb04 	ldr.w	pc, [sp], #4
    5ed0:	4007e000 	.word	0x4007e000

00005ed4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5ed4:	b500      	push	{lr}
    5ed6:	b085      	sub	sp, #20
    5ed8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5eda:	9b01      	ldr	r3, [sp, #4]
    5edc:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5ede:	9803      	ldr	r0, [sp, #12]
    5ee0:	f000 fbc8 	bl	6674 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5ee4:	4a03      	ldr	r2, [pc, #12]	; (5ef4 <Port_Init+0x20>)
    5ee6:	9b03      	ldr	r3, [sp, #12]
    5ee8:	6013      	str	r3, [r2, #0]
        }
    }
}
    5eea:	bf00      	nop
    5eec:	b005      	add	sp, #20
    5eee:	f85d fb04 	ldr.w	pc, [sp], #4
    5ef2:	bf00      	nop
    5ef4:	1fff8cf4 	.word	0x1fff8cf4

00005ef8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5ef8:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5efa:	4b03      	ldr	r3, [pc, #12]	; (5f08 <Port_RefreshPortDirection+0x10>)
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	4618      	mov	r0, r3
    5f00:	f000 fc10 	bl	6724 <Port_Ipw_RefreshPortDirection>
    }
}
    5f04:	bf00      	nop
    5f06:	bd08      	pop	{r3, pc}
    5f08:	1fff8cf4 	.word	0x1fff8cf4

00005f0c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5f0c:	b086      	sub	sp, #24
    5f0e:	9003      	str	r0, [sp, #12]
    5f10:	9102      	str	r1, [sp, #8]
    5f12:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5f14:	23ff      	movs	r3, #255	; 0xff
    5f16:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5f18:	9b03      	ldr	r3, [sp, #12]
    5f1a:	4a39      	ldr	r2, [pc, #228]	; (6000 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5f1c:	4293      	cmp	r3, r2
    5f1e:	d151      	bne.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5f20:	9b02      	ldr	r3, [sp, #8]
    5f22:	2b10      	cmp	r3, #16
    5f24:	d867      	bhi.n	5ff6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5f26:	a201      	add	r2, pc, #4	; (adr r2, 5f2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f2c:	00005f71 	.word	0x00005f71
    5f30:	00005f7f 	.word	0x00005f7f
    5f34:	00005ff7 	.word	0x00005ff7
    5f38:	00005ff7 	.word	0x00005ff7
    5f3c:	00005ff7 	.word	0x00005ff7
    5f40:	00005ff7 	.word	0x00005ff7
    5f44:	00005ff7 	.word	0x00005ff7
    5f48:	00005ff7 	.word	0x00005ff7
    5f4c:	00005ff7 	.word	0x00005ff7
    5f50:	00005ff7 	.word	0x00005ff7
    5f54:	00005ff7 	.word	0x00005ff7
    5f58:	00005ff7 	.word	0x00005ff7
    5f5c:	00005ff7 	.word	0x00005ff7
    5f60:	00005f8d 	.word	0x00005f8d
    5f64:	00005f9b 	.word	0x00005f9b
    5f68:	00005fa9 	.word	0x00005fa9
    5f6c:	00005fb7 	.word	0x00005fb7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f70:	2301      	movs	r3, #1
    5f72:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f74:	9a05      	ldr	r2, [sp, #20]
    5f76:	9b01      	ldr	r3, [sp, #4]
    5f78:	4313      	orrs	r3, r2
    5f7a:	9305      	str	r3, [sp, #20]
                break;
    5f7c:	e03c      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f7e:	2302      	movs	r3, #2
    5f80:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f82:	9a05      	ldr	r2, [sp, #20]
    5f84:	9b01      	ldr	r3, [sp, #4]
    5f86:	4313      	orrs	r3, r2
    5f88:	9305      	str	r3, [sp, #20]
                break;
    5f8a:	e035      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f8c:	2304      	movs	r3, #4
    5f8e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f90:	9a05      	ldr	r2, [sp, #20]
    5f92:	9b01      	ldr	r3, [sp, #4]
    5f94:	4313      	orrs	r3, r2
    5f96:	9305      	str	r3, [sp, #20]
                break;
    5f98:	e02e      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f9a:	2308      	movs	r3, #8
    5f9c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f9e:	9a05      	ldr	r2, [sp, #20]
    5fa0:	9b01      	ldr	r3, [sp, #4]
    5fa2:	4313      	orrs	r3, r2
    5fa4:	9305      	str	r3, [sp, #20]
                break;
    5fa6:	e027      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5fa8:	230e      	movs	r3, #14
    5faa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fac:	9a05      	ldr	r2, [sp, #20]
    5fae:	9b01      	ldr	r3, [sp, #4]
    5fb0:	4013      	ands	r3, r2
    5fb2:	9305      	str	r3, [sp, #20]
                break;
    5fb4:	e020      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5fb6:	230d      	movs	r3, #13
    5fb8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fba:	9a05      	ldr	r2, [sp, #20]
    5fbc:	9b01      	ldr	r3, [sp, #4]
    5fbe:	4013      	ands	r3, r2
    5fc0:	9305      	str	r3, [sp, #20]
                break;
    5fc2:	e019      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5fc4:	9b03      	ldr	r3, [sp, #12]
    5fc6:	4a0f      	ldr	r2, [pc, #60]	; (6004 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5fc8:	4293      	cmp	r3, r2
    5fca:	d115      	bne.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5fcc:	9b02      	ldr	r3, [sp, #8]
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d003      	beq.n	5fda <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5fd2:	9b02      	ldr	r3, [sp, #8]
    5fd4:	2b01      	cmp	r3, #1
    5fd6:	d007      	beq.n	5fe8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5fd8:	e00e      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5fda:	230b      	movs	r3, #11
    5fdc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fde:	9a05      	ldr	r2, [sp, #20]
    5fe0:	9b01      	ldr	r3, [sp, #4]
    5fe2:	4013      	ands	r3, r2
    5fe4:	9305      	str	r3, [sp, #20]
                break;
    5fe6:	e007      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5fe8:	2307      	movs	r3, #7
    5fea:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fec:	9a05      	ldr	r2, [sp, #20]
    5fee:	9b01      	ldr	r3, [sp, #4]
    5ff0:	4013      	ands	r3, r2
    5ff2:	9305      	str	r3, [sp, #20]
                break;
    5ff4:	e000      	b.n	5ff8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5ff6:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5ff8:	9b05      	ldr	r3, [sp, #20]
}
    5ffa:	4618      	mov	r0, r3
    5ffc:	b006      	add	sp, #24
    5ffe:	4770      	bx	lr
    6000:	4004a000 	.word	0x4004a000
    6004:	4004b000 	.word	0x4004b000

00006008 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6008:	b500      	push	{lr}
    600a:	b089      	sub	sp, #36	; 0x24
    600c:	9003      	str	r0, [sp, #12]
    600e:	9102      	str	r1, [sp, #8]
    6010:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6012:	9b01      	ldr	r3, [sp, #4]
    6014:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6016:	9b01      	ldr	r3, [sp, #4]
    6018:	2b08      	cmp	r3, #8
    601a:	d121      	bne.n	6060 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    601c:	4b13      	ldr	r3, [pc, #76]	; (606c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    601e:	685b      	ldr	r3, [r3, #4]
    6020:	f003 030f 	and.w	r3, r3, #15
    6024:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6026:	9a06      	ldr	r2, [sp, #24]
    6028:	9902      	ldr	r1, [sp, #8]
    602a:	9803      	ldr	r0, [sp, #12]
    602c:	f7ff ff6e 	bl	5f0c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6030:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6032:	9b05      	ldr	r3, [sp, #20]
    6034:	2bff      	cmp	r3, #255	; 0xff
    6036:	d011      	beq.n	605c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6038:	f001 f984 	bl	7344 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    603c:	4b0b      	ldr	r3, [pc, #44]	; (606c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    603e:	685b      	ldr	r3, [r3, #4]
    6040:	4a0a      	ldr	r2, [pc, #40]	; (606c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6042:	f023 030f 	bic.w	r3, r3, #15
    6046:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6048:	4b08      	ldr	r3, [pc, #32]	; (606c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    604a:	685a      	ldr	r2, [r3, #4]
    604c:	9b05      	ldr	r3, [sp, #20]
    604e:	f003 030f 	and.w	r3, r3, #15
    6052:	4906      	ldr	r1, [pc, #24]	; (606c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6054:	4313      	orrs	r3, r2
    6056:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6058:	f001 f9a0 	bl	739c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    605c:	2300      	movs	r3, #0
    605e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6060:	9b07      	ldr	r3, [sp, #28]
}
    6062:	4618      	mov	r0, r3
    6064:	b009      	add	sp, #36	; 0x24
    6066:	f85d fb04 	ldr.w	pc, [sp], #4
    606a:	bf00      	nop
    606c:	40048000 	.word	0x40048000

00006070 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6070:	b500      	push	{lr}
    6072:	b087      	sub	sp, #28
    6074:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6076:	2300      	movs	r3, #0
    6078:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    607a:	2300      	movs	r3, #0
    607c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    607e:	2300      	movs	r3, #0
    6080:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6082:	9b01      	ldr	r3, [sp, #4]
    6084:	68db      	ldr	r3, [r3, #12]
    6086:	2b02      	cmp	r3, #2
    6088:	d00a      	beq.n	60a0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    608a:	9b05      	ldr	r3, [sp, #20]
    608c:	f043 0302 	orr.w	r3, r3, #2
    6090:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6092:	9b01      	ldr	r3, [sp, #4]
    6094:	68db      	ldr	r3, [r3, #12]
    6096:	f003 0301 	and.w	r3, r3, #1
    609a:	9a05      	ldr	r2, [sp, #20]
    609c:	4313      	orrs	r3, r2
    609e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    60a0:	9b01      	ldr	r3, [sp, #4]
    60a2:	699b      	ldr	r3, [r3, #24]
    60a4:	019b      	lsls	r3, r3, #6
    60a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    60aa:	9a05      	ldr	r2, [sp, #20]
    60ac:	4313      	orrs	r3, r2
    60ae:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    60b0:	9b01      	ldr	r3, [sp, #4]
    60b2:	6a1b      	ldr	r3, [r3, #32]
    60b4:	03db      	lsls	r3, r3, #15
    60b6:	b29b      	uxth	r3, r3
    60b8:	9a05      	ldr	r2, [sp, #20]
    60ba:	4313      	orrs	r3, r2
    60bc:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    60be:	9b01      	ldr	r3, [sp, #4]
    60c0:	7f1b      	ldrb	r3, [r3, #28]
    60c2:	2b00      	cmp	r3, #0
    60c4:	d001      	beq.n	60ca <Port_Ci_Port_Ip_PinInit+0x5a>
    60c6:	2310      	movs	r3, #16
    60c8:	e000      	b.n	60cc <Port_Ci_Port_Ip_PinInit+0x5c>
    60ca:	2300      	movs	r3, #0
    60cc:	9a05      	ldr	r2, [sp, #20]
    60ce:	4313      	orrs	r3, r2
    60d0:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    60d2:	9b01      	ldr	r3, [sp, #4]
    60d4:	691b      	ldr	r3, [r3, #16]
    60d6:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    60d8:	9b01      	ldr	r3, [sp, #4]
    60da:	6818      	ldr	r0, [r3, #0]
    60dc:	9b01      	ldr	r3, [sp, #4]
    60de:	689b      	ldr	r3, [r3, #8]
    60e0:	9a04      	ldr	r2, [sp, #16]
    60e2:	4619      	mov	r1, r3
    60e4:	f7ff ff90 	bl	6008 <Port_Ci_Port_Ip_ConfigureInterleave>
    60e8:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    60ea:	9b03      	ldr	r3, [sp, #12]
    60ec:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    60ee:	9b04      	ldr	r3, [sp, #16]
    60f0:	021b      	lsls	r3, r3, #8
    60f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    60f6:	9a05      	ldr	r2, [sp, #20]
    60f8:	4313      	orrs	r3, r2
    60fa:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    60fc:	f000 ff88 	bl	7010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6100:	9b01      	ldr	r3, [sp, #4]
    6102:	681b      	ldr	r3, [r3, #0]
    6104:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6108:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    610a:	9b01      	ldr	r3, [sp, #4]
    610c:	689b      	ldr	r3, [r3, #8]
    610e:	2201      	movs	r2, #1
    6110:	fa02 f303 	lsl.w	r3, r2, r3
    6114:	43db      	mvns	r3, r3
    6116:	9a02      	ldr	r2, [sp, #8]
    6118:	4013      	ands	r3, r2
    611a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    611c:	9b01      	ldr	r3, [sp, #4]
    611e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6122:	2b00      	cmp	r3, #0
    6124:	d001      	beq.n	612a <Port_Ci_Port_Ip_PinInit+0xba>
    6126:	2201      	movs	r2, #1
    6128:	e000      	b.n	612c <Port_Ci_Port_Ip_PinInit+0xbc>
    612a:	2200      	movs	r2, #0
    612c:	9b01      	ldr	r3, [sp, #4]
    612e:	689b      	ldr	r3, [r3, #8]
    6130:	fa02 f303 	lsl.w	r3, r2, r3
    6134:	9a02      	ldr	r2, [sp, #8]
    6136:	4313      	orrs	r3, r2
    6138:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    613a:	9b01      	ldr	r3, [sp, #4]
    613c:	681b      	ldr	r3, [r3, #0]
    613e:	9a02      	ldr	r2, [sp, #8]
    6140:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6144:	f000 ff90 	bl	7068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6148:	9b04      	ldr	r3, [sp, #16]
    614a:	2b01      	cmp	r3, #1
    614c:	d16d      	bne.n	622a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    614e:	9b01      	ldr	r3, [sp, #4]
    6150:	695b      	ldr	r3, [r3, #20]
    6152:	2b02      	cmp	r3, #2
    6154:	d138      	bne.n	61c8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6156:	9b01      	ldr	r3, [sp, #4]
    6158:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    615c:	2b01      	cmp	r3, #1
    615e:	d10f      	bne.n	6180 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6160:	f000 ffa8 	bl	70b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6164:	9b01      	ldr	r3, [sp, #4]
    6166:	685b      	ldr	r3, [r3, #4]
    6168:	6859      	ldr	r1, [r3, #4]
    616a:	9b01      	ldr	r3, [sp, #4]
    616c:	689b      	ldr	r3, [r3, #8]
    616e:	2201      	movs	r2, #1
    6170:	409a      	lsls	r2, r3
    6172:	9b01      	ldr	r3, [sp, #4]
    6174:	685b      	ldr	r3, [r3, #4]
    6176:	430a      	orrs	r2, r1
    6178:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    617a:	f000 ffc7 	bl	710c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    617e:	e013      	b.n	61a8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6180:	9b01      	ldr	r3, [sp, #4]
    6182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6186:	2b00      	cmp	r3, #0
    6188:	d10e      	bne.n	61a8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    618a:	f000 ffe5 	bl	7158 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    618e:	9b01      	ldr	r3, [sp, #4]
    6190:	685b      	ldr	r3, [r3, #4]
    6192:	6899      	ldr	r1, [r3, #8]
    6194:	9b01      	ldr	r3, [sp, #4]
    6196:	689b      	ldr	r3, [r3, #8]
    6198:	2201      	movs	r2, #1
    619a:	409a      	lsls	r2, r3
    619c:	9b01      	ldr	r3, [sp, #4]
    619e:	685b      	ldr	r3, [r3, #4]
    61a0:	430a      	orrs	r2, r1
    61a2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    61a4:	f001 f804 	bl	71b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61a8:	f001 f828 	bl	71fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	685b      	ldr	r3, [r3, #4]
    61b0:	6959      	ldr	r1, [r3, #20]
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	689b      	ldr	r3, [r3, #8]
    61b6:	2201      	movs	r2, #1
    61b8:	409a      	lsls	r2, r3
    61ba:	9b01      	ldr	r3, [sp, #4]
    61bc:	685b      	ldr	r3, [r3, #4]
    61be:	430a      	orrs	r2, r1
    61c0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61c2:	f001 f847 	bl	7254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    61c6:	e030      	b.n	622a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61c8:	f001 f818 	bl	71fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    61cc:	9b01      	ldr	r3, [sp, #4]
    61ce:	685b      	ldr	r3, [r3, #4]
    61d0:	6959      	ldr	r1, [r3, #20]
    61d2:	9b01      	ldr	r3, [sp, #4]
    61d4:	689b      	ldr	r3, [r3, #8]
    61d6:	2201      	movs	r2, #1
    61d8:	fa02 f303 	lsl.w	r3, r2, r3
    61dc:	43da      	mvns	r2, r3
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	685b      	ldr	r3, [r3, #4]
    61e2:	400a      	ands	r2, r1
    61e4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61e6:	f001 f835 	bl	7254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    61ea:	f001 f859 	bl	72a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    61ee:	9b01      	ldr	r3, [sp, #4]
    61f0:	685b      	ldr	r3, [r3, #4]
    61f2:	6999      	ldr	r1, [r3, #24]
    61f4:	9b01      	ldr	r3, [sp, #4]
    61f6:	689b      	ldr	r3, [r3, #8]
    61f8:	2201      	movs	r2, #1
    61fa:	fa02 f303 	lsl.w	r3, r2, r3
    61fe:	43da      	mvns	r2, r3
    6200:	9b01      	ldr	r3, [sp, #4]
    6202:	685b      	ldr	r3, [r3, #4]
    6204:	400a      	ands	r2, r1
    6206:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6208:	9b01      	ldr	r3, [sp, #4]
    620a:	695b      	ldr	r3, [r3, #20]
    620c:	2b03      	cmp	r3, #3
    620e:	d10a      	bne.n	6226 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6210:	9b01      	ldr	r3, [sp, #4]
    6212:	685b      	ldr	r3, [r3, #4]
    6214:	6999      	ldr	r1, [r3, #24]
    6216:	9b01      	ldr	r3, [sp, #4]
    6218:	689b      	ldr	r3, [r3, #8]
    621a:	2201      	movs	r2, #1
    621c:	409a      	lsls	r2, r3
    621e:	9b01      	ldr	r3, [sp, #4]
    6220:	685b      	ldr	r3, [r3, #4]
    6222:	430a      	orrs	r2, r1
    6224:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6226:	f001 f867 	bl	72f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    622a:	9b01      	ldr	r3, [sp, #4]
    622c:	681b      	ldr	r3, [r3, #0]
    622e:	9a01      	ldr	r2, [sp, #4]
    6230:	6892      	ldr	r2, [r2, #8]
    6232:	9905      	ldr	r1, [sp, #20]
    6234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6238:	bf00      	nop
    623a:	b007      	add	sp, #28
    623c:	f85d fb04 	ldr.w	pc, [sp], #4

00006240 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6240:	b500      	push	{lr}
    6242:	b085      	sub	sp, #20
    6244:	9001      	str	r0, [sp, #4]
    6246:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6248:	2300      	movs	r3, #0
    624a:	9303      	str	r3, [sp, #12]
    624c:	e00d      	b.n	626a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    624e:	9a03      	ldr	r2, [sp, #12]
    6250:	4613      	mov	r3, r2
    6252:	009b      	lsls	r3, r3, #2
    6254:	4413      	add	r3, r2
    6256:	00db      	lsls	r3, r3, #3
    6258:	461a      	mov	r2, r3
    625a:	9b00      	ldr	r3, [sp, #0]
    625c:	4413      	add	r3, r2
    625e:	4618      	mov	r0, r3
    6260:	f7ff ff06 	bl	6070 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6264:	9b03      	ldr	r3, [sp, #12]
    6266:	3301      	adds	r3, #1
    6268:	9303      	str	r3, [sp, #12]
    626a:	9a03      	ldr	r2, [sp, #12]
    626c:	9b01      	ldr	r3, [sp, #4]
    626e:	429a      	cmp	r2, r3
    6270:	d3ed      	bcc.n	624e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6272:	2300      	movs	r3, #0
}
    6274:	4618      	mov	r0, r3
    6276:	b005      	add	sp, #20
    6278:	f85d fb04 	ldr.w	pc, [sp], #4

0000627c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    627c:	b500      	push	{lr}
    627e:	b087      	sub	sp, #28
    6280:	9003      	str	r0, [sp, #12]
    6282:	9102      	str	r1, [sp, #8]
    6284:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6286:	9a01      	ldr	r2, [sp, #4]
    6288:	9902      	ldr	r1, [sp, #8]
    628a:	9803      	ldr	r0, [sp, #12]
    628c:	f7ff febc 	bl	6008 <Port_Ci_Port_Ip_ConfigureInterleave>
    6290:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6292:	f001 f8a9 	bl	73e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6296:	9b03      	ldr	r3, [sp, #12]
    6298:	9a02      	ldr	r2, [sp, #8]
    629a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    629e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    62a0:	9b04      	ldr	r3, [sp, #16]
    62a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    62a6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    62a8:	9b05      	ldr	r3, [sp, #20]
    62aa:	021b      	lsls	r3, r3, #8
    62ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    62b0:	9a04      	ldr	r2, [sp, #16]
    62b2:	4313      	orrs	r3, r2
    62b4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    62b6:	9b03      	ldr	r3, [sp, #12]
    62b8:	9a02      	ldr	r2, [sp, #8]
    62ba:	9904      	ldr	r1, [sp, #16]
    62bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    62c0:	f001 f8be 	bl	7440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    62c4:	bf00      	nop
    62c6:	b007      	add	sp, #28
    62c8:	f85d fb04 	ldr.w	pc, [sp], #4

000062cc <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62cc:	b500      	push	{lr}
    62ce:	b083      	sub	sp, #12
    62d0:	9001      	str	r0, [sp, #4]
    62d2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    62d4:	f001 f8da 	bl	748c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    62d8:	9b01      	ldr	r3, [sp, #4]
    62da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62de:	2101      	movs	r1, #1
    62e0:	9b00      	ldr	r3, [sp, #0]
    62e2:	fa01 f303 	lsl.w	r3, r1, r3
    62e6:	431a      	orrs	r2, r3
    62e8:	9b01      	ldr	r3, [sp, #4]
    62ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    62ee:	f001 f8f9 	bl	74e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    62f2:	bf00      	nop
    62f4:	b003      	add	sp, #12
    62f6:	f85d fb04 	ldr.w	pc, [sp], #4

000062fa <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62fa:	b500      	push	{lr}
    62fc:	b083      	sub	sp, #12
    62fe:	9001      	str	r0, [sp, #4]
    6300:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6302:	f001 f915 	bl	7530 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6306:	9b01      	ldr	r3, [sp, #4]
    6308:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    630c:	2101      	movs	r1, #1
    630e:	9b00      	ldr	r3, [sp, #0]
    6310:	fa01 f303 	lsl.w	r3, r1, r3
    6314:	43db      	mvns	r3, r3
    6316:	401a      	ands	r2, r3
    6318:	9b01      	ldr	r3, [sp, #4]
    631a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    631e:	f001 f933 	bl	7588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6322:	bf00      	nop
    6324:	b003      	add	sp, #12
    6326:	f85d fb04 	ldr.w	pc, [sp], #4

0000632a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    632a:	b082      	sub	sp, #8
    632c:	9001      	str	r0, [sp, #4]
    632e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6330:	9b00      	ldr	r3, [sp, #0]
    6332:	785b      	ldrb	r3, [r3, #1]
    6334:	f003 0201 	and.w	r2, r3, #1
    6338:	9b01      	ldr	r3, [sp, #4]
    633a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    633e:	9b00      	ldr	r3, [sp, #0]
    6340:	789b      	ldrb	r3, [r3, #2]
    6342:	f003 021f 	and.w	r2, r3, #31
    6346:	9b01      	ldr	r3, [sp, #4]
    6348:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    634c:	bf00      	nop
    634e:	b002      	add	sp, #8
    6350:	4770      	bx	lr

00006352 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6352:	b086      	sub	sp, #24
    6354:	9003      	str	r0, [sp, #12]
    6356:	9301      	str	r3, [sp, #4]
    6358:	460b      	mov	r3, r1
    635a:	f8ad 300a 	strh.w	r3, [sp, #10]
    635e:	4613      	mov	r3, r2
    6360:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6364:	2300      	movs	r3, #0
    6366:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    636a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    636e:	f043 0301 	orr.w	r3, r3, #1
    6372:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6376:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    637a:	f043 0302 	orr.w	r3, r3, #2
    637e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6382:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6386:	f043 0310 	orr.w	r3, r3, #16
    638a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    638e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6396:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    639a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    639e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    63a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    63a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    63ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    63b2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    63b6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    63ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    63be:	4013      	ands	r3, r2
    63c0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    63c4:	9b01      	ldr	r3, [sp, #4]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d003      	beq.n	63d2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    63ca:	9b01      	ldr	r3, [sp, #4]
    63cc:	2b01      	cmp	r3, #1
    63ce:	d00a      	beq.n	63e6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    63d0:	e013      	b.n	63fa <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    63d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63d6:	041a      	lsls	r2, r3, #16
    63d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63dc:	431a      	orrs	r2, r3
    63de:	9b03      	ldr	r3, [sp, #12]
    63e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    63e4:	e009      	b.n	63fa <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    63e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63ea:	041a      	lsls	r2, r3, #16
    63ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63f0:	431a      	orrs	r2, r3
    63f2:	9b03      	ldr	r3, [sp, #12]
    63f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    63f8:	bf00      	nop
    }
}
    63fa:	bf00      	nop
    63fc:	b006      	add	sp, #24
    63fe:	4770      	bx	lr

00006400 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6400:	b500      	push	{lr}
    6402:	b087      	sub	sp, #28
    6404:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6406:	9b01      	ldr	r3, [sp, #4]
    6408:	885b      	ldrh	r3, [r3, #2]
    640a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    640e:	9b01      	ldr	r3, [sp, #4]
    6410:	689b      	ldr	r3, [r3, #8]
    6412:	7a1b      	ldrb	r3, [r3, #8]
    6414:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6418:	9b01      	ldr	r3, [sp, #4]
    641a:	689b      	ldr	r3, [r3, #8]
    641c:	681b      	ldr	r3, [r3, #0]
    641e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6420:	9b01      	ldr	r3, [sp, #4]
    6422:	689b      	ldr	r3, [r3, #8]
    6424:	685b      	ldr	r3, [r3, #4]
    6426:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6428:	2300      	movs	r3, #0
    642a:	f8ad 3016 	strh.w	r3, [sp, #22]
    642e:	e111      	b.n	6654 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6430:	9b02      	ldr	r3, [sp, #8]
    6432:	2b02      	cmp	r3, #2
    6434:	d169      	bne.n	650a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6436:	f89d 3013 	ldrb.w	r3, [sp, #19]
    643a:	2b01      	cmp	r3, #1
    643c:	d11a      	bne.n	6474 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    643e:	9b01      	ldr	r3, [sp, #4]
    6440:	685a      	ldr	r2, [r3, #4]
    6442:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6446:	005b      	lsls	r3, r3, #1
    6448:	4413      	add	r3, r2
    644a:	881b      	ldrh	r3, [r3, #0]
    644c:	f003 021f 	and.w	r2, r3, #31
    6450:	9b01      	ldr	r3, [sp, #4]
    6452:	6859      	ldr	r1, [r3, #4]
    6454:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6458:	005b      	lsls	r3, r3, #1
    645a:	440b      	add	r3, r1
    645c:	881b      	ldrh	r3, [r3, #0]
    645e:	095b      	lsrs	r3, r3, #5
    6460:	b29b      	uxth	r3, r3
    6462:	4619      	mov	r1, r3
    6464:	4b81      	ldr	r3, [pc, #516]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    6466:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    646a:	2101      	movs	r1, #1
    646c:	fa01 f202 	lsl.w	r2, r1, r2
    6470:	605a      	str	r2, [r3, #4]
    6472:	e01d      	b.n	64b0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6474:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6478:	2b00      	cmp	r3, #0
    647a:	d119      	bne.n	64b0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    647c:	9b01      	ldr	r3, [sp, #4]
    647e:	685a      	ldr	r2, [r3, #4]
    6480:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6484:	005b      	lsls	r3, r3, #1
    6486:	4413      	add	r3, r2
    6488:	881b      	ldrh	r3, [r3, #0]
    648a:	f003 021f 	and.w	r2, r3, #31
    648e:	9b01      	ldr	r3, [sp, #4]
    6490:	6859      	ldr	r1, [r3, #4]
    6492:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6496:	005b      	lsls	r3, r3, #1
    6498:	440b      	add	r3, r1
    649a:	881b      	ldrh	r3, [r3, #0]
    649c:	095b      	lsrs	r3, r3, #5
    649e:	b29b      	uxth	r3, r3
    64a0:	4619      	mov	r1, r3
    64a2:	4b72      	ldr	r3, [pc, #456]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    64a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    64a8:	2101      	movs	r1, #1
    64aa:	fa01 f202 	lsl.w	r2, r1, r2
    64ae:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64b0:	f001 f890 	bl	75d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64b4:	9b01      	ldr	r3, [sp, #4]
    64b6:	685a      	ldr	r2, [r3, #4]
    64b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64bc:	005b      	lsls	r3, r3, #1
    64be:	4413      	add	r3, r2
    64c0:	881b      	ldrh	r3, [r3, #0]
    64c2:	095b      	lsrs	r3, r3, #5
    64c4:	b29b      	uxth	r3, r3
    64c6:	461a      	mov	r2, r3
    64c8:	4b68      	ldr	r3, [pc, #416]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    64ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64ce:	6959      	ldr	r1, [r3, #20]
    64d0:	9b01      	ldr	r3, [sp, #4]
    64d2:	685a      	ldr	r2, [r3, #4]
    64d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64d8:	005b      	lsls	r3, r3, #1
    64da:	4413      	add	r3, r2
    64dc:	881b      	ldrh	r3, [r3, #0]
    64de:	f003 031f 	and.w	r3, r3, #31
    64e2:	2201      	movs	r2, #1
    64e4:	409a      	lsls	r2, r3
    64e6:	9b01      	ldr	r3, [sp, #4]
    64e8:	6858      	ldr	r0, [r3, #4]
    64ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ee:	005b      	lsls	r3, r3, #1
    64f0:	4403      	add	r3, r0
    64f2:	881b      	ldrh	r3, [r3, #0]
    64f4:	095b      	lsrs	r3, r3, #5
    64f6:	b29b      	uxth	r3, r3
    64f8:	4618      	mov	r0, r3
    64fa:	4b5c      	ldr	r3, [pc, #368]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    64fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6500:	430a      	orrs	r2, r1
    6502:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6504:	f001 f892 	bl	762c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6508:	e086      	b.n	6618 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    650a:	f001 f863 	bl	75d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    650e:	9b01      	ldr	r3, [sp, #4]
    6510:	685a      	ldr	r2, [r3, #4]
    6512:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6516:	005b      	lsls	r3, r3, #1
    6518:	4413      	add	r3, r2
    651a:	881b      	ldrh	r3, [r3, #0]
    651c:	095b      	lsrs	r3, r3, #5
    651e:	b29b      	uxth	r3, r3
    6520:	461a      	mov	r2, r3
    6522:	4b52      	ldr	r3, [pc, #328]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    6524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6528:	6959      	ldr	r1, [r3, #20]
    652a:	9b01      	ldr	r3, [sp, #4]
    652c:	685a      	ldr	r2, [r3, #4]
    652e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6532:	005b      	lsls	r3, r3, #1
    6534:	4413      	add	r3, r2
    6536:	881b      	ldrh	r3, [r3, #0]
    6538:	f003 031f 	and.w	r3, r3, #31
    653c:	2201      	movs	r2, #1
    653e:	fa02 f303 	lsl.w	r3, r2, r3
    6542:	43da      	mvns	r2, r3
    6544:	9b01      	ldr	r3, [sp, #4]
    6546:	6858      	ldr	r0, [r3, #4]
    6548:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    654c:	005b      	lsls	r3, r3, #1
    654e:	4403      	add	r3, r0
    6550:	881b      	ldrh	r3, [r3, #0]
    6552:	095b      	lsrs	r3, r3, #5
    6554:	b29b      	uxth	r3, r3
    6556:	4618      	mov	r0, r3
    6558:	4b44      	ldr	r3, [pc, #272]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    655a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    655e:	400a      	ands	r2, r1
    6560:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6562:	f001 f863 	bl	762c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6566:	f001 f887 	bl	7678 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	685a      	ldr	r2, [r3, #4]
    656e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6572:	005b      	lsls	r3, r3, #1
    6574:	4413      	add	r3, r2
    6576:	881b      	ldrh	r3, [r3, #0]
    6578:	095b      	lsrs	r3, r3, #5
    657a:	b29b      	uxth	r3, r3
    657c:	461a      	mov	r2, r3
    657e:	4b3b      	ldr	r3, [pc, #236]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    6580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6584:	6999      	ldr	r1, [r3, #24]
    6586:	9b01      	ldr	r3, [sp, #4]
    6588:	685a      	ldr	r2, [r3, #4]
    658a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    658e:	005b      	lsls	r3, r3, #1
    6590:	4413      	add	r3, r2
    6592:	881b      	ldrh	r3, [r3, #0]
    6594:	f003 031f 	and.w	r3, r3, #31
    6598:	2201      	movs	r2, #1
    659a:	fa02 f303 	lsl.w	r3, r2, r3
    659e:	43da      	mvns	r2, r3
    65a0:	9b01      	ldr	r3, [sp, #4]
    65a2:	6858      	ldr	r0, [r3, #4]
    65a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65a8:	005b      	lsls	r3, r3, #1
    65aa:	4403      	add	r3, r0
    65ac:	881b      	ldrh	r3, [r3, #0]
    65ae:	095b      	lsrs	r3, r3, #5
    65b0:	b29b      	uxth	r3, r3
    65b2:	4618      	mov	r0, r3
    65b4:	4b2d      	ldr	r3, [pc, #180]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    65b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65ba:	400a      	ands	r2, r1
    65bc:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    65be:	9b02      	ldr	r3, [sp, #8]
    65c0:	2b03      	cmp	r3, #3
    65c2:	d127      	bne.n	6614 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    65c4:	9b01      	ldr	r3, [sp, #4]
    65c6:	685a      	ldr	r2, [r3, #4]
    65c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65cc:	005b      	lsls	r3, r3, #1
    65ce:	4413      	add	r3, r2
    65d0:	881b      	ldrh	r3, [r3, #0]
    65d2:	095b      	lsrs	r3, r3, #5
    65d4:	b29b      	uxth	r3, r3
    65d6:	461a      	mov	r2, r3
    65d8:	4b24      	ldr	r3, [pc, #144]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    65da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65de:	6999      	ldr	r1, [r3, #24]
    65e0:	9b01      	ldr	r3, [sp, #4]
    65e2:	685a      	ldr	r2, [r3, #4]
    65e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65e8:	005b      	lsls	r3, r3, #1
    65ea:	4413      	add	r3, r2
    65ec:	881b      	ldrh	r3, [r3, #0]
    65ee:	f003 031f 	and.w	r3, r3, #31
    65f2:	2201      	movs	r2, #1
    65f4:	409a      	lsls	r2, r3
    65f6:	9b01      	ldr	r3, [sp, #4]
    65f8:	6858      	ldr	r0, [r3, #4]
    65fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65fe:	005b      	lsls	r3, r3, #1
    6600:	4403      	add	r3, r0
    6602:	881b      	ldrh	r3, [r3, #0]
    6604:	095b      	lsrs	r3, r3, #5
    6606:	b29b      	uxth	r3, r3
    6608:	4618      	mov	r0, r3
    660a:	4b18      	ldr	r3, [pc, #96]	; (666c <Port_Ipw_Init_UnusedPins+0x26c>)
    660c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6610:	430a      	orrs	r2, r1
    6612:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6614:	f001 f85c 	bl	76d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6618:	9b01      	ldr	r3, [sp, #4]
    661a:	685a      	ldr	r2, [r3, #4]
    661c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6620:	005b      	lsls	r3, r3, #1
    6622:	4413      	add	r3, r2
    6624:	881b      	ldrh	r3, [r3, #0]
    6626:	095b      	lsrs	r3, r3, #5
    6628:	b29b      	uxth	r3, r3
    662a:	461a      	mov	r2, r3
    662c:	4b10      	ldr	r3, [pc, #64]	; (6670 <Port_Ipw_Init_UnusedPins+0x270>)
    662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6632:	9a01      	ldr	r2, [sp, #4]
    6634:	6851      	ldr	r1, [r2, #4]
    6636:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    663a:	0052      	lsls	r2, r2, #1
    663c:	440a      	add	r2, r1
    663e:	8812      	ldrh	r2, [r2, #0]
    6640:	f002 021f 	and.w	r2, r2, #31
    6644:	9903      	ldr	r1, [sp, #12]
    6646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    664a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    664e:	3301      	adds	r3, #1
    6650:	f8ad 3016 	strh.w	r3, [sp, #22]
    6654:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6658:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    665c:	429a      	cmp	r2, r3
    665e:	f4ff aee7 	bcc.w	6430 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6662:	bf00      	nop
    6664:	bf00      	nop
    6666:	b007      	add	sp, #28
    6668:	f85d fb04 	ldr.w	pc, [sp], #4
    666c:	00008b24 	.word	0x00008b24
    6670:	00008b10 	.word	0x00008b10

00006674 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6674:	b500      	push	{lr}
    6676:	b085      	sub	sp, #20
    6678:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    667a:	9b01      	ldr	r3, [sp, #4]
    667c:	7c1b      	ldrb	r3, [r3, #16]
    667e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6682:	2300      	movs	r3, #0
    6684:	f8ad 300e 	strh.w	r3, [sp, #14]
    6688:	e035      	b.n	66f6 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    668a:	9b01      	ldr	r3, [sp, #4]
    668c:	695a      	ldr	r2, [r3, #20]
    668e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6692:	00db      	lsls	r3, r3, #3
    6694:	4413      	add	r3, r2
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    669c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66a0:	4a1f      	ldr	r2, [pc, #124]	; (6720 <Port_Ipw_Init+0xac>)
    66a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    66a6:	9b01      	ldr	r3, [sp, #4]
    66a8:	695a      	ldr	r2, [r3, #20]
    66aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66ae:	00db      	lsls	r3, r3, #3
    66b0:	4413      	add	r3, r2
    66b2:	4619      	mov	r1, r3
    66b4:	f7ff fe39 	bl	632a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    66b8:	f001 f978 	bl	79ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    66bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66c0:	4a17      	ldr	r2, [pc, #92]	; (6720 <Port_Ipw_Init+0xac>)
    66c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    66ca:	9b01      	ldr	r3, [sp, #4]
    66cc:	695a      	ldr	r2, [r3, #20]
    66ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66d2:	00db      	lsls	r3, r3, #3
    66d4:	4413      	add	r3, r2
    66d6:	685a      	ldr	r2, [r3, #4]
    66d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66dc:	4810      	ldr	r0, [pc, #64]	; (6720 <Port_Ipw_Init+0xac>)
    66de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    66e2:	430a      	orrs	r2, r1
    66e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    66e8:	f001 f98c 	bl	7a04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66f0:	3301      	adds	r3, #1
    66f2:	f8ad 300e 	strh.w	r3, [sp, #14]
    66f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    66fa:	b29b      	uxth	r3, r3
    66fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6700:	429a      	cmp	r2, r3
    6702:	d3c2      	bcc.n	668a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6704:	9b01      	ldr	r3, [sp, #4]
    6706:	6a1b      	ldr	r3, [r3, #32]
    6708:	4619      	mov	r1, r3
    670a:	2006      	movs	r0, #6
    670c:	f7ff fd98 	bl	6240 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6710:	9801      	ldr	r0, [sp, #4]
    6712:	f7ff fe75 	bl	6400 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6716:	bf00      	nop
    6718:	b005      	add	sp, #20
    671a:	f85d fb04 	ldr.w	pc, [sp], #4
    671e:	bf00      	nop
    6720:	00008b10 	.word	0x00008b10

00006724 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6724:	b500      	push	{lr}
    6726:	b085      	sub	sp, #20
    6728:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    672a:	9b01      	ldr	r3, [sp, #4]
    672c:	881b      	ldrh	r3, [r3, #0]
    672e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6732:	2300      	movs	r3, #0
    6734:	f8ad 300e 	strh.w	r3, [sp, #14]
    6738:	e0d2      	b.n	68e0 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    673a:	9b01      	ldr	r3, [sp, #4]
    673c:	68d9      	ldr	r1, [r3, #12]
    673e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6742:	4613      	mov	r3, r2
    6744:	009b      	lsls	r3, r3, #2
    6746:	4413      	add	r3, r2
    6748:	009b      	lsls	r3, r3, #2
    674a:	440b      	add	r3, r1
    674c:	7c5b      	ldrb	r3, [r3, #17]
    674e:	f083 0301 	eor.w	r3, r3, #1
    6752:	b2db      	uxtb	r3, r3
    6754:	2b00      	cmp	r3, #0
    6756:	f000 80be 	beq.w	68d6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    675a:	9b01      	ldr	r3, [sp, #4]
    675c:	68d9      	ldr	r1, [r3, #12]
    675e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6762:	4613      	mov	r3, r2
    6764:	009b      	lsls	r3, r3, #2
    6766:	4413      	add	r3, r2
    6768:	009b      	lsls	r3, r3, #2
    676a:	440b      	add	r3, r1
    676c:	7c1b      	ldrb	r3, [r3, #16]
    676e:	2b00      	cmp	r3, #0
    6770:	f000 80b1 	beq.w	68d6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6774:	9b01      	ldr	r3, [sp, #4]
    6776:	68d9      	ldr	r1, [r3, #12]
    6778:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    677c:	4613      	mov	r3, r2
    677e:	009b      	lsls	r3, r3, #2
    6780:	4413      	add	r3, r2
    6782:	009b      	lsls	r3, r3, #2
    6784:	440b      	add	r3, r1
    6786:	881b      	ldrh	r3, [r3, #0]
    6788:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    678c:	9b01      	ldr	r3, [sp, #4]
    678e:	68d9      	ldr	r1, [r3, #12]
    6790:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6794:	4613      	mov	r3, r2
    6796:	009b      	lsls	r3, r3, #2
    6798:	4413      	add	r3, r2
    679a:	009b      	lsls	r3, r3, #2
    679c:	440b      	add	r3, r1
    679e:	68db      	ldr	r3, [r3, #12]
    67a0:	2b02      	cmp	r3, #2
    67a2:	d11d      	bne.n	67e0 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67a4:	f001 fa4a 	bl	7c3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ac:	095b      	lsrs	r3, r3, #5
    67ae:	b29b      	uxth	r3, r3
    67b0:	461a      	mov	r2, r3
    67b2:	4b51      	ldr	r3, [pc, #324]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67b8:	6959      	ldr	r1, [r3, #20]
    67ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67be:	f003 031f 	and.w	r3, r3, #31
    67c2:	2201      	movs	r2, #1
    67c4:	409a      	lsls	r2, r3
    67c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ca:	095b      	lsrs	r3, r3, #5
    67cc:	b29b      	uxth	r3, r3
    67ce:	4618      	mov	r0, r3
    67d0:	4b49      	ldr	r3, [pc, #292]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67d6:	430a      	orrs	r2, r1
    67d8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67da:	f001 fa5b 	bl	7c94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    67de:	e07a      	b.n	68d6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    67e0:	9b01      	ldr	r3, [sp, #4]
    67e2:	68d9      	ldr	r1, [r3, #12]
    67e4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67e8:	4613      	mov	r3, r2
    67ea:	009b      	lsls	r3, r3, #2
    67ec:	4413      	add	r3, r2
    67ee:	009b      	lsls	r3, r3, #2
    67f0:	440b      	add	r3, r1
    67f2:	68db      	ldr	r3, [r3, #12]
    67f4:	2b01      	cmp	r3, #1
    67f6:	d00b      	beq.n	6810 <Port_Ipw_RefreshPortDirection+0xec>
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	68d9      	ldr	r1, [r3, #12]
    67fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6800:	4613      	mov	r3, r2
    6802:	009b      	lsls	r3, r3, #2
    6804:	4413      	add	r3, r2
    6806:	009b      	lsls	r3, r3, #2
    6808:	440b      	add	r3, r1
    680a:	68db      	ldr	r3, [r3, #12]
    680c:	2b03      	cmp	r3, #3
    680e:	d162      	bne.n	68d6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6810:	f001 fa14 	bl	7c3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6814:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6818:	095b      	lsrs	r3, r3, #5
    681a:	b29b      	uxth	r3, r3
    681c:	461a      	mov	r2, r3
    681e:	4b36      	ldr	r3, [pc, #216]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6824:	6959      	ldr	r1, [r3, #20]
    6826:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    682a:	f003 031f 	and.w	r3, r3, #31
    682e:	2201      	movs	r2, #1
    6830:	fa02 f303 	lsl.w	r3, r2, r3
    6834:	43da      	mvns	r2, r3
    6836:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    683a:	095b      	lsrs	r3, r3, #5
    683c:	b29b      	uxth	r3, r3
    683e:	4618      	mov	r0, r3
    6840:	4b2d      	ldr	r3, [pc, #180]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6842:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6846:	400a      	ands	r2, r1
    6848:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    684a:	f001 fa23 	bl	7c94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    684e:	f001 fa47 	bl	7ce0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6852:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6856:	095b      	lsrs	r3, r3, #5
    6858:	b29b      	uxth	r3, r3
    685a:	461a      	mov	r2, r3
    685c:	4b26      	ldr	r3, [pc, #152]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6862:	6999      	ldr	r1, [r3, #24]
    6864:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6868:	f003 031f 	and.w	r3, r3, #31
    686c:	2201      	movs	r2, #1
    686e:	fa02 f303 	lsl.w	r3, r2, r3
    6872:	43da      	mvns	r2, r3
    6874:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6878:	095b      	lsrs	r3, r3, #5
    687a:	b29b      	uxth	r3, r3
    687c:	4618      	mov	r0, r3
    687e:	4b1e      	ldr	r3, [pc, #120]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6880:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6884:	400a      	ands	r2, r1
    6886:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6888:	9b01      	ldr	r3, [sp, #4]
    688a:	68d9      	ldr	r1, [r3, #12]
    688c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6890:	4613      	mov	r3, r2
    6892:	009b      	lsls	r3, r3, #2
    6894:	4413      	add	r3, r2
    6896:	009b      	lsls	r3, r3, #2
    6898:	440b      	add	r3, r1
    689a:	68db      	ldr	r3, [r3, #12]
    689c:	2b03      	cmp	r3, #3
    689e:	d118      	bne.n	68d2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    68a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68a4:	095b      	lsrs	r3, r3, #5
    68a6:	b29b      	uxth	r3, r3
    68a8:	461a      	mov	r2, r3
    68aa:	4b13      	ldr	r3, [pc, #76]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    68ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68b0:	6999      	ldr	r1, [r3, #24]
    68b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68b6:	f003 031f 	and.w	r3, r3, #31
    68ba:	2201      	movs	r2, #1
    68bc:	409a      	lsls	r2, r3
    68be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68c2:	095b      	lsrs	r3, r3, #5
    68c4:	b29b      	uxth	r3, r3
    68c6:	4618      	mov	r0, r3
    68c8:	4b0b      	ldr	r3, [pc, #44]	; (68f8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    68ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68ce:	430a      	orrs	r2, r1
    68d0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    68d2:	f001 fa31 	bl	7d38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68da:	3301      	adds	r3, #1
    68dc:	f8ad 300e 	strh.w	r3, [sp, #14]
    68e0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    68e8:	429a      	cmp	r2, r3
    68ea:	f4ff af26 	bcc.w	673a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    68ee:	bf00      	nop
    68f0:	bf00      	nop
    68f2:	b005      	add	sp, #20
    68f4:	f85d fb04 	ldr.w	pc, [sp], #4
    68f8:	00008b24 	.word	0x00008b24

000068fc <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    68fc:	b500      	push	{lr}
    68fe:	b085      	sub	sp, #20
    6900:	4603      	mov	r3, r0
    6902:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6906:	2300      	movs	r3, #0
    6908:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    690c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6910:	4618      	mov	r0, r3
    6912:	f000 f871 	bl	69f8 <Dio_Ipw_ReadChannel>
    6916:	4603      	mov	r3, r0
    6918:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    691c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6920:	4618      	mov	r0, r3
    6922:	b005      	add	sp, #20
    6924:	f85d fb04 	ldr.w	pc, [sp], #4

00006928 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6928:	b500      	push	{lr}
    692a:	b083      	sub	sp, #12
    692c:	4603      	mov	r3, r0
    692e:	460a      	mov	r2, r1
    6930:	f8ad 3006 	strh.w	r3, [sp, #6]
    6934:	4613      	mov	r3, r2
    6936:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    693a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    693e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6942:	4611      	mov	r1, r2
    6944:	4618      	mov	r0, r3
    6946:	f000 f87d 	bl	6a44 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    694a:	bf00      	nop
    694c:	b003      	add	sp, #12
    694e:	f85d fb04 	ldr.w	pc, [sp], #4

00006952 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6952:	b500      	push	{lr}
    6954:	b085      	sub	sp, #20
    6956:	4603      	mov	r3, r0
    6958:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    695c:	2300      	movs	r3, #0
    695e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6962:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6966:	4618      	mov	r0, r3
    6968:	f000 f892 	bl	6a90 <Dio_Ipw_FlipChannel>
    696c:	4603      	mov	r3, r0
    696e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6972:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6976:	4618      	mov	r0, r3
    6978:	b005      	add	sp, #20
    697a:	f85d fb04 	ldr.w	pc, [sp], #4

0000697e <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    697e:	b500      	push	{lr}
    6980:	b085      	sub	sp, #20
    6982:	4603      	mov	r3, r0
    6984:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6988:	2300      	movs	r3, #0
    698a:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    698c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6990:	4618      	mov	r0, r3
    6992:	f000 f8b3 	bl	6afc <Dio_Ipw_ReadPort>
    6996:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6998:	9b03      	ldr	r3, [sp, #12]
}
    699a:	4618      	mov	r0, r3
    699c:	b005      	add	sp, #20
    699e:	f85d fb04 	ldr.w	pc, [sp], #4

000069a2 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    69a2:	b500      	push	{lr}
    69a4:	b083      	sub	sp, #12
    69a6:	4603      	mov	r3, r0
    69a8:	9100      	str	r1, [sp, #0]
    69aa:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    69ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69b2:	9900      	ldr	r1, [sp, #0]
    69b4:	4618      	mov	r0, r3
    69b6:	f000 f8b9 	bl	6b2c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    69ba:	bf00      	nop
    69bc:	b003      	add	sp, #12
    69be:	f85d fb04 	ldr.w	pc, [sp], #4

000069c2 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    69c2:	b500      	push	{lr}
    69c4:	b085      	sub	sp, #20
    69c6:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    69c8:	2300      	movs	r3, #0
    69ca:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    69cc:	9801      	ldr	r0, [sp, #4]
    69ce:	f000 f8c5 	bl	6b5c <Dio_Ipw_ReadChannelGroup>
    69d2:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    69d4:	9b03      	ldr	r3, [sp, #12]
}
    69d6:	4618      	mov	r0, r3
    69d8:	b005      	add	sp, #20
    69da:	f85d fb04 	ldr.w	pc, [sp], #4

000069de <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    69de:	b500      	push	{lr}
    69e0:	b083      	sub	sp, #12
    69e2:	9001      	str	r0, [sp, #4]
    69e4:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    69e6:	9900      	ldr	r1, [sp, #0]
    69e8:	9801      	ldr	r0, [sp, #4]
    69ea:	f000 f8d7 	bl	6b9c <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    69ee:	bf00      	nop
    69f0:	b003      	add	sp, #12
    69f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000069f8 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    69f8:	b500      	push	{lr}
    69fa:	b087      	sub	sp, #28
    69fc:	4603      	mov	r3, r0
    69fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6a02:	2300      	movs	r3, #0
    6a04:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6a08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a0c:	095b      	lsrs	r3, r3, #5
    6a0e:	b29b      	uxth	r3, r3
    6a10:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6a12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a16:	f003 031f 	and.w	r3, r3, #31
    6a1a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6a1c:	4a08      	ldr	r2, [pc, #32]	; (6a40 <Dio_Ipw_ReadChannel+0x48>)
    6a1e:	9b04      	ldr	r3, [sp, #16]
    6a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a24:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6a26:	9903      	ldr	r1, [sp, #12]
    6a28:	9802      	ldr	r0, [sp, #8]
    6a2a:	f000 f940 	bl	6cae <Gpio_Dio_Ip_ReadPin>
    6a2e:	4603      	mov	r3, r0
    6a30:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6a34:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6a38:	4618      	mov	r0, r3
    6a3a:	b007      	add	sp, #28
    6a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a40:	1fff8b24 	.word	0x1fff8b24

00006a44 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6a44:	b500      	push	{lr}
    6a46:	b087      	sub	sp, #28
    6a48:	4603      	mov	r3, r0
    6a4a:	460a      	mov	r2, r1
    6a4c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6a50:	4613      	mov	r3, r2
    6a52:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6a56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a5a:	095b      	lsrs	r3, r3, #5
    6a5c:	b29b      	uxth	r3, r3
    6a5e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6a60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a64:	f003 031f 	and.w	r3, r3, #31
    6a68:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6a6a:	4a08      	ldr	r2, [pc, #32]	; (6a8c <Dio_Ipw_WriteChannel+0x48>)
    6a6c:	9b05      	ldr	r3, [sp, #20]
    6a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a72:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6a74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6a78:	461a      	mov	r2, r3
    6a7a:	9904      	ldr	r1, [sp, #16]
    6a7c:	9803      	ldr	r0, [sp, #12]
    6a7e:	f000 f8b7 	bl	6bf0 <Gpio_Dio_Ip_WritePin>
}
    6a82:	bf00      	nop
    6a84:	b007      	add	sp, #28
    6a86:	f85d fb04 	ldr.w	pc, [sp], #4
    6a8a:	bf00      	nop
    6a8c:	1fff8b24 	.word	0x1fff8b24

00006a90 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6a90:	b500      	push	{lr}
    6a92:	b089      	sub	sp, #36	; 0x24
    6a94:	4603      	mov	r3, r0
    6a96:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6a9a:	2300      	movs	r3, #0
    6a9c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6aa0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6aa4:	095b      	lsrs	r3, r3, #5
    6aa6:	b29b      	uxth	r3, r3
    6aa8:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6aaa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6aae:	f003 031f 	and.w	r3, r3, #31
    6ab2:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6ab4:	4a10      	ldr	r2, [pc, #64]	; (6af8 <Dio_Ipw_FlipChannel+0x68>)
    6ab6:	9b06      	ldr	r3, [sp, #24]
    6ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6abc:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6abe:	2201      	movs	r2, #1
    6ac0:	9b05      	ldr	r3, [sp, #20]
    6ac2:	fa02 f303 	lsl.w	r3, r2, r3
    6ac6:	4619      	mov	r1, r3
    6ac8:	9804      	ldr	r0, [sp, #16]
    6aca:	f000 f8dc 	bl	6c86 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6ace:	9804      	ldr	r0, [sp, #16]
    6ad0:	f000 f8bc 	bl	6c4c <Gpio_Dio_Ip_GetPinsOutput>
    6ad4:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6ad6:	2201      	movs	r2, #1
    6ad8:	9b05      	ldr	r3, [sp, #20]
    6ada:	409a      	lsls	r2, r3
    6adc:	9b03      	ldr	r3, [sp, #12]
    6ade:	401a      	ands	r2, r3
    6ae0:	9b05      	ldr	r3, [sp, #20]
    6ae2:	fa22 f303 	lsr.w	r3, r2, r3
    6ae6:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6aea:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6aee:	4618      	mov	r0, r3
    6af0:	b009      	add	sp, #36	; 0x24
    6af2:	f85d fb04 	ldr.w	pc, [sp], #4
    6af6:	bf00      	nop
    6af8:	1fff8b24 	.word	0x1fff8b24

00006afc <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6afc:	b500      	push	{lr}
    6afe:	b085      	sub	sp, #20
    6b00:	4603      	mov	r3, r0
    6b02:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6b06:	2300      	movs	r3, #0
    6b08:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6b0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b0e:	4a06      	ldr	r2, [pc, #24]	; (6b28 <Dio_Ipw_ReadPort+0x2c>)
    6b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b14:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6b16:	9802      	ldr	r0, [sp, #8]
    6b18:	f000 f8be 	bl	6c98 <Gpio_Dio_Ip_ReadPins>
    6b1c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6b1e:	9b03      	ldr	r3, [sp, #12]
}
    6b20:	4618      	mov	r0, r3
    6b22:	b005      	add	sp, #20
    6b24:	f85d fb04 	ldr.w	pc, [sp], #4
    6b28:	1fff8b24 	.word	0x1fff8b24

00006b2c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6b2c:	b500      	push	{lr}
    6b2e:	b085      	sub	sp, #20
    6b30:	4603      	mov	r3, r0
    6b32:	9100      	str	r1, [sp, #0]
    6b34:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6b38:	9b00      	ldr	r3, [sp, #0]
    6b3a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b40:	4a05      	ldr	r2, [pc, #20]	; (6b58 <Dio_Ipw_WritePort+0x2c>)
    6b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b46:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6b48:	9903      	ldr	r1, [sp, #12]
    6b4a:	9802      	ldr	r0, [sp, #8]
    6b4c:	f000 f875 	bl	6c3a <Gpio_Dio_Ip_WritePins>
}
    6b50:	bf00      	nop
    6b52:	b005      	add	sp, #20
    6b54:	f85d fb04 	ldr.w	pc, [sp], #4
    6b58:	1fff8b24 	.word	0x1fff8b24

00006b5c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6b5c:	b500      	push	{lr}
    6b5e:	b087      	sub	sp, #28
    6b60:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6b62:	2300      	movs	r3, #0
    6b64:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6b66:	9b01      	ldr	r3, [sp, #4]
    6b68:	781b      	ldrb	r3, [r3, #0]
    6b6a:	461a      	mov	r2, r3
    6b6c:	4b0a      	ldr	r3, [pc, #40]	; (6b98 <Dio_Ipw_ReadChannelGroup+0x3c>)
    6b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b72:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6b74:	9804      	ldr	r0, [sp, #16]
    6b76:	f000 f88f 	bl	6c98 <Gpio_Dio_Ip_ReadPins>
    6b7a:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6b7c:	9b01      	ldr	r3, [sp, #4]
    6b7e:	685a      	ldr	r2, [r3, #4]
    6b80:	9b03      	ldr	r3, [sp, #12]
    6b82:	4013      	ands	r3, r2
    6b84:	9a01      	ldr	r2, [sp, #4]
    6b86:	7852      	ldrb	r2, [r2, #1]
    6b88:	40d3      	lsrs	r3, r2
    6b8a:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6b8c:	9b05      	ldr	r3, [sp, #20]
}
    6b8e:	4618      	mov	r0, r3
    6b90:	b007      	add	sp, #28
    6b92:	f85d fb04 	ldr.w	pc, [sp], #4
    6b96:	bf00      	nop
    6b98:	1fff8b24 	.word	0x1fff8b24

00006b9c <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6b9c:	b500      	push	{lr}
    6b9e:	b087      	sub	sp, #28
    6ba0:	9001      	str	r0, [sp, #4]
    6ba2:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6ba4:	9b01      	ldr	r3, [sp, #4]
    6ba6:	781b      	ldrb	r3, [r3, #0]
    6ba8:	461a      	mov	r2, r3
    6baa:	4b10      	ldr	r3, [pc, #64]	; (6bec <Dio_Ipw_WriteChannelGroup+0x50>)
    6bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bb0:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6bb2:	9b01      	ldr	r3, [sp, #4]
    6bb4:	785b      	ldrb	r3, [r3, #1]
    6bb6:	461a      	mov	r2, r3
    6bb8:	9b00      	ldr	r3, [sp, #0]
    6bba:	fa03 f202 	lsl.w	r2, r3, r2
    6bbe:	9b01      	ldr	r3, [sp, #4]
    6bc0:	685b      	ldr	r3, [r3, #4]
    6bc2:	4013      	ands	r3, r2
    6bc4:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6bc6:	9904      	ldr	r1, [sp, #16]
    6bc8:	9805      	ldr	r0, [sp, #20]
    6bca:	f000 f84a 	bl	6c62 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6bce:	9b04      	ldr	r3, [sp, #16]
    6bd0:	43da      	mvns	r2, r3
    6bd2:	9b01      	ldr	r3, [sp, #4]
    6bd4:	685b      	ldr	r3, [r3, #4]
    6bd6:	4013      	ands	r3, r2
    6bd8:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6bda:	9903      	ldr	r1, [sp, #12]
    6bdc:	9805      	ldr	r0, [sp, #20]
    6bde:	f000 f849 	bl	6c74 <Gpio_Dio_Ip_ClearPins>

}
    6be2:	bf00      	nop
    6be4:	b007      	add	sp, #28
    6be6:	f85d fb04 	ldr.w	pc, [sp], #4
    6bea:	bf00      	nop
    6bec:	1fff8b24 	.word	0x1fff8b24

00006bf0 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6bf0:	b500      	push	{lr}
    6bf2:	b087      	sub	sp, #28
    6bf4:	9003      	str	r0, [sp, #12]
    6bf6:	9102      	str	r1, [sp, #8]
    6bf8:	4613      	mov	r3, r2
    6bfa:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6bfe:	f000 f86d 	bl	6cdc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6c02:	9b03      	ldr	r3, [sp, #12]
    6c04:	681b      	ldr	r3, [r3, #0]
    6c06:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6c08:	2201      	movs	r2, #1
    6c0a:	9b02      	ldr	r3, [sp, #8]
    6c0c:	fa02 f303 	lsl.w	r3, r2, r3
    6c10:	43db      	mvns	r3, r3
    6c12:	9a05      	ldr	r2, [sp, #20]
    6c14:	4013      	ands	r3, r2
    6c16:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6c18:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6c1c:	9b02      	ldr	r3, [sp, #8]
    6c1e:	fa02 f303 	lsl.w	r3, r2, r3
    6c22:	9a05      	ldr	r2, [sp, #20]
    6c24:	4313      	orrs	r3, r2
    6c26:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6c28:	9b03      	ldr	r3, [sp, #12]
    6c2a:	9a05      	ldr	r2, [sp, #20]
    6c2c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6c2e:	f000 f881 	bl	6d34 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6c32:	bf00      	nop
    6c34:	b007      	add	sp, #28
    6c36:	f85d fb04 	ldr.w	pc, [sp], #4

00006c3a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6c3a:	b082      	sub	sp, #8
    6c3c:	9001      	str	r0, [sp, #4]
    6c3e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6c40:	9b01      	ldr	r3, [sp, #4]
    6c42:	9a00      	ldr	r2, [sp, #0]
    6c44:	601a      	str	r2, [r3, #0]
}
    6c46:	bf00      	nop
    6c48:	b002      	add	sp, #8
    6c4a:	4770      	bx	lr

00006c4c <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6c4c:	b084      	sub	sp, #16
    6c4e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6c50:	2300      	movs	r3, #0
    6c52:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6c54:	9b01      	ldr	r3, [sp, #4]
    6c56:	681b      	ldr	r3, [r3, #0]
    6c58:	9303      	str	r3, [sp, #12]
    return returnValue;
    6c5a:	9b03      	ldr	r3, [sp, #12]
}
    6c5c:	4618      	mov	r0, r3
    6c5e:	b004      	add	sp, #16
    6c60:	4770      	bx	lr

00006c62 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6c62:	b082      	sub	sp, #8
    6c64:	9001      	str	r0, [sp, #4]
    6c66:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6c68:	9b01      	ldr	r3, [sp, #4]
    6c6a:	9a00      	ldr	r2, [sp, #0]
    6c6c:	605a      	str	r2, [r3, #4]
}
    6c6e:	bf00      	nop
    6c70:	b002      	add	sp, #8
    6c72:	4770      	bx	lr

00006c74 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6c74:	b082      	sub	sp, #8
    6c76:	9001      	str	r0, [sp, #4]
    6c78:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6c7a:	9b01      	ldr	r3, [sp, #4]
    6c7c:	9a00      	ldr	r2, [sp, #0]
    6c7e:	609a      	str	r2, [r3, #8]
}
    6c80:	bf00      	nop
    6c82:	b002      	add	sp, #8
    6c84:	4770      	bx	lr

00006c86 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6c86:	b082      	sub	sp, #8
    6c88:	9001      	str	r0, [sp, #4]
    6c8a:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6c8c:	9b01      	ldr	r3, [sp, #4]
    6c8e:	9a00      	ldr	r2, [sp, #0]
    6c90:	60da      	str	r2, [r3, #12]
}
    6c92:	bf00      	nop
    6c94:	b002      	add	sp, #8
    6c96:	4770      	bx	lr

00006c98 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6c98:	b084      	sub	sp, #16
    6c9a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6c9c:	2300      	movs	r3, #0
    6c9e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6ca0:	9b01      	ldr	r3, [sp, #4]
    6ca2:	691b      	ldr	r3, [r3, #16]
    6ca4:	9303      	str	r3, [sp, #12]
    return returnValue;
    6ca6:	9b03      	ldr	r3, [sp, #12]
}
    6ca8:	4618      	mov	r0, r3
    6caa:	b004      	add	sp, #16
    6cac:	4770      	bx	lr

00006cae <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6cae:	b084      	sub	sp, #16
    6cb0:	9001      	str	r0, [sp, #4]
    6cb2:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6cb4:	2300      	movs	r3, #0
    6cb6:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6cba:	9b01      	ldr	r3, [sp, #4]
    6cbc:	691a      	ldr	r2, [r3, #16]
    6cbe:	2101      	movs	r1, #1
    6cc0:	9b00      	ldr	r3, [sp, #0]
    6cc2:	fa01 f303 	lsl.w	r3, r1, r3
    6cc6:	401a      	ands	r2, r3
    6cc8:	9b00      	ldr	r3, [sp, #0]
    6cca:	fa22 f303 	lsr.w	r3, r2, r3
    6cce:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6cd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6cd6:	4618      	mov	r0, r3
    6cd8:	b004      	add	sp, #16
    6cda:	4770      	bx	lr

00006cdc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6cdc:	b500      	push	{lr}
    6cde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ce0:	f7fa fa1c 	bl	111c <Sys_GetCoreID>
    6ce4:	4603      	mov	r3, r0
    6ce6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    6ce8:	4a10      	ldr	r2, [pc, #64]	; (6d2c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6cea:	9b01      	ldr	r3, [sp, #4]
    6cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d10d      	bne.n	6d10 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cf4:	f7f9 ff1c 	bl	b30 <Dio_schm_read_msr>
    6cf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6cfa:	9b00      	ldr	r3, [sp, #0]
    6cfc:	f003 0301 	and.w	r3, r3, #1
    6d00:	2b00      	cmp	r3, #0
    6d02:	d100      	bne.n	6d06 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6d06:	490a      	ldr	r1, [pc, #40]	; (6d30 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    6d08:	9b01      	ldr	r3, [sp, #4]
    6d0a:	9a00      	ldr	r2, [sp, #0]
    6d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    6d10:	4a06      	ldr	r2, [pc, #24]	; (6d2c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6d12:	9b01      	ldr	r3, [sp, #4]
    6d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d18:	1c5a      	adds	r2, r3, #1
    6d1a:	4904      	ldr	r1, [pc, #16]	; (6d2c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6d1c:	9b01      	ldr	r3, [sp, #4]
    6d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d22:	bf00      	nop
    6d24:	b003      	add	sp, #12
    6d26:	f85d fb04 	ldr.w	pc, [sp], #4
    6d2a:	bf00      	nop
    6d2c:	1fff8cfc 	.word	0x1fff8cfc
    6d30:	1fff8cf8 	.word	0x1fff8cf8

00006d34 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6d34:	b500      	push	{lr}
    6d36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d38:	f7fa f9f0 	bl	111c <Sys_GetCoreID>
    6d3c:	4603      	mov	r3, r0
    6d3e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    6d40:	4a0d      	ldr	r2, [pc, #52]	; (6d78 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6d42:	9b01      	ldr	r3, [sp, #4]
    6d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d48:	1e5a      	subs	r2, r3, #1
    6d4a:	490b      	ldr	r1, [pc, #44]	; (6d78 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6d4c:	9b01      	ldr	r3, [sp, #4]
    6d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6d52:	4a0a      	ldr	r2, [pc, #40]	; (6d7c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    6d54:	9b01      	ldr	r3, [sp, #4]
    6d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d5a:	f003 0301 	and.w	r3, r3, #1
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d106      	bne.n	6d70 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    6d62:	4a05      	ldr	r2, [pc, #20]	; (6d78 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6d64:	9b01      	ldr	r3, [sp, #4]
    6d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d100      	bne.n	6d70 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d70:	bf00      	nop
    6d72:	b003      	add	sp, #12
    6d74:	f85d fb04 	ldr.w	pc, [sp], #4
    6d78:	1fff8cfc 	.word	0x1fff8cfc
    6d7c:	1fff8cf8 	.word	0x1fff8cf8

00006d80 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6d80:	b500      	push	{lr}
    6d82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d84:	f7fa f9ca 	bl	111c <Sys_GetCoreID>
    6d88:	4603      	mov	r3, r0
    6d8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    6d8c:	4a10      	ldr	r2, [pc, #64]	; (6dd0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6d8e:	9b01      	ldr	r3, [sp, #4]
    6d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d94:	2b00      	cmp	r3, #0
    6d96:	d10d      	bne.n	6db4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d98:	f7f9 feca 	bl	b30 <Dio_schm_read_msr>
    6d9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d9e:	9b00      	ldr	r3, [sp, #0]
    6da0:	f003 0301 	and.w	r3, r3, #1
    6da4:	2b00      	cmp	r3, #0
    6da6:	d100      	bne.n	6daa <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6da8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6daa:	490a      	ldr	r1, [pc, #40]	; (6dd4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    6dac:	9b01      	ldr	r3, [sp, #4]
    6dae:	9a00      	ldr	r2, [sp, #0]
    6db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    6db4:	4a06      	ldr	r2, [pc, #24]	; (6dd0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6db6:	9b01      	ldr	r3, [sp, #4]
    6db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dbc:	1c5a      	adds	r2, r3, #1
    6dbe:	4904      	ldr	r1, [pc, #16]	; (6dd0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6dc0:	9b01      	ldr	r3, [sp, #4]
    6dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dc6:	bf00      	nop
    6dc8:	b003      	add	sp, #12
    6dca:	f85d fb04 	ldr.w	pc, [sp], #4
    6dce:	bf00      	nop
    6dd0:	1fff8d04 	.word	0x1fff8d04
    6dd4:	1fff8d00 	.word	0x1fff8d00

00006dd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6dd8:	b500      	push	{lr}
    6dda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ddc:	f7fa f99e 	bl	111c <Sys_GetCoreID>
    6de0:	4603      	mov	r3, r0
    6de2:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    6de4:	4a0d      	ldr	r2, [pc, #52]	; (6e1c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6de6:	9b01      	ldr	r3, [sp, #4]
    6de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dec:	1e5a      	subs	r2, r3, #1
    6dee:	490b      	ldr	r1, [pc, #44]	; (6e1c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6df0:	9b01      	ldr	r3, [sp, #4]
    6df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6df6:	4a0a      	ldr	r2, [pc, #40]	; (6e20 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    6df8:	9b01      	ldr	r3, [sp, #4]
    6dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dfe:	f003 0301 	and.w	r3, r3, #1
    6e02:	2b00      	cmp	r3, #0
    6e04:	d106      	bne.n	6e14 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    6e06:	4a05      	ldr	r2, [pc, #20]	; (6e1c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6e08:	9b01      	ldr	r3, [sp, #4]
    6e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e0e:	2b00      	cmp	r3, #0
    6e10:	d100      	bne.n	6e14 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e14:	bf00      	nop
    6e16:	b003      	add	sp, #12
    6e18:	f85d fb04 	ldr.w	pc, [sp], #4
    6e1c:	1fff8d04 	.word	0x1fff8d04
    6e20:	1fff8d00 	.word	0x1fff8d00

00006e24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6e24:	b500      	push	{lr}
    6e26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e28:	f7fa f978 	bl	111c <Sys_GetCoreID>
    6e2c:	4603      	mov	r3, r0
    6e2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    6e30:	4a10      	ldr	r2, [pc, #64]	; (6e74 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6e32:	9b01      	ldr	r3, [sp, #4]
    6e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d10d      	bne.n	6e58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e3c:	f7f9 fe81 	bl	b42 <Mcu_schm_read_msr>
    6e40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e42:	9b00      	ldr	r3, [sp, #0]
    6e44:	f003 0301 	and.w	r3, r3, #1
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d100      	bne.n	6e4e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6e4e:	490a      	ldr	r1, [pc, #40]	; (6e78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    6e50:	9b01      	ldr	r3, [sp, #4]
    6e52:	9a00      	ldr	r2, [sp, #0]
    6e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    6e58:	4a06      	ldr	r2, [pc, #24]	; (6e74 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6e5a:	9b01      	ldr	r3, [sp, #4]
    6e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e60:	1c5a      	adds	r2, r3, #1
    6e62:	4904      	ldr	r1, [pc, #16]	; (6e74 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6e64:	9b01      	ldr	r3, [sp, #4]
    6e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e6a:	bf00      	nop
    6e6c:	b003      	add	sp, #12
    6e6e:	f85d fb04 	ldr.w	pc, [sp], #4
    6e72:	bf00      	nop
    6e74:	1fff8d0c 	.word	0x1fff8d0c
    6e78:	1fff8d08 	.word	0x1fff8d08

00006e7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6e7c:	b500      	push	{lr}
    6e7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e80:	f7fa f94c 	bl	111c <Sys_GetCoreID>
    6e84:	4603      	mov	r3, r0
    6e86:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    6e88:	4a0d      	ldr	r2, [pc, #52]	; (6ec0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6e8a:	9b01      	ldr	r3, [sp, #4]
    6e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e90:	1e5a      	subs	r2, r3, #1
    6e92:	490b      	ldr	r1, [pc, #44]	; (6ec0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6e94:	9b01      	ldr	r3, [sp, #4]
    6e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6e9a:	4a0a      	ldr	r2, [pc, #40]	; (6ec4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    6e9c:	9b01      	ldr	r3, [sp, #4]
    6e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ea2:	f003 0301 	and.w	r3, r3, #1
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d106      	bne.n	6eb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    6eaa:	4a05      	ldr	r2, [pc, #20]	; (6ec0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6eac:	9b01      	ldr	r3, [sp, #4]
    6eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d100      	bne.n	6eb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6eb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6eb8:	bf00      	nop
    6eba:	b003      	add	sp, #12
    6ebc:	f85d fb04 	ldr.w	pc, [sp], #4
    6ec0:	1fff8d0c 	.word	0x1fff8d0c
    6ec4:	1fff8d08 	.word	0x1fff8d08

00006ec8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6ec8:	b500      	push	{lr}
    6eca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ecc:	f7fa f926 	bl	111c <Sys_GetCoreID>
    6ed0:	4603      	mov	r3, r0
    6ed2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    6ed4:	4a10      	ldr	r2, [pc, #64]	; (6f18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6ed6:	9b01      	ldr	r3, [sp, #4]
    6ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6edc:	2b00      	cmp	r3, #0
    6ede:	d10d      	bne.n	6efc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ee0:	f7f9 fe2f 	bl	b42 <Mcu_schm_read_msr>
    6ee4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ee6:	9b00      	ldr	r3, [sp, #0]
    6ee8:	f003 0301 	and.w	r3, r3, #1
    6eec:	2b00      	cmp	r3, #0
    6eee:	d100      	bne.n	6ef2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ef0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6ef2:	490a      	ldr	r1, [pc, #40]	; (6f1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    6ef4:	9b01      	ldr	r3, [sp, #4]
    6ef6:	9a00      	ldr	r2, [sp, #0]
    6ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    6efc:	4a06      	ldr	r2, [pc, #24]	; (6f18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6efe:	9b01      	ldr	r3, [sp, #4]
    6f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f04:	1c5a      	adds	r2, r3, #1
    6f06:	4904      	ldr	r1, [pc, #16]	; (6f18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6f08:	9b01      	ldr	r3, [sp, #4]
    6f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f0e:	bf00      	nop
    6f10:	b003      	add	sp, #12
    6f12:	f85d fb04 	ldr.w	pc, [sp], #4
    6f16:	bf00      	nop
    6f18:	1fff8d14 	.word	0x1fff8d14
    6f1c:	1fff8d10 	.word	0x1fff8d10

00006f20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6f20:	b500      	push	{lr}
    6f22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f24:	f7fa f8fa 	bl	111c <Sys_GetCoreID>
    6f28:	4603      	mov	r3, r0
    6f2a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    6f2c:	4a0d      	ldr	r2, [pc, #52]	; (6f64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6f2e:	9b01      	ldr	r3, [sp, #4]
    6f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f34:	1e5a      	subs	r2, r3, #1
    6f36:	490b      	ldr	r1, [pc, #44]	; (6f64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6f38:	9b01      	ldr	r3, [sp, #4]
    6f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6f3e:	4a0a      	ldr	r2, [pc, #40]	; (6f68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    6f40:	9b01      	ldr	r3, [sp, #4]
    6f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f46:	f003 0301 	and.w	r3, r3, #1
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d106      	bne.n	6f5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    6f4e:	4a05      	ldr	r2, [pc, #20]	; (6f64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6f50:	9b01      	ldr	r3, [sp, #4]
    6f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f56:	2b00      	cmp	r3, #0
    6f58:	d100      	bne.n	6f5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f5c:	bf00      	nop
    6f5e:	b003      	add	sp, #12
    6f60:	f85d fb04 	ldr.w	pc, [sp], #4
    6f64:	1fff8d14 	.word	0x1fff8d14
    6f68:	1fff8d10 	.word	0x1fff8d10

00006f6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6f6c:	b500      	push	{lr}
    6f6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f70:	f7fa f8d4 	bl	111c <Sys_GetCoreID>
    6f74:	4603      	mov	r3, r0
    6f76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6f78:	4a10      	ldr	r2, [pc, #64]	; (6fbc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6f7a:	9b01      	ldr	r3, [sp, #4]
    6f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f80:	2b00      	cmp	r3, #0
    6f82:	d10d      	bne.n	6fa0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f84:	f7f9 fddd 	bl	b42 <Mcu_schm_read_msr>
    6f88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f8a:	9b00      	ldr	r3, [sp, #0]
    6f8c:	f003 0301 	and.w	r3, r3, #1
    6f90:	2b00      	cmp	r3, #0
    6f92:	d100      	bne.n	6f96 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6f96:	490a      	ldr	r1, [pc, #40]	; (6fc0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6f98:	9b01      	ldr	r3, [sp, #4]
    6f9a:	9a00      	ldr	r2, [sp, #0]
    6f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    6fa0:	4a06      	ldr	r2, [pc, #24]	; (6fbc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6fa2:	9b01      	ldr	r3, [sp, #4]
    6fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa8:	1c5a      	adds	r2, r3, #1
    6faa:	4904      	ldr	r1, [pc, #16]	; (6fbc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6fac:	9b01      	ldr	r3, [sp, #4]
    6fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fb2:	bf00      	nop
    6fb4:	b003      	add	sp, #12
    6fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    6fba:	bf00      	nop
    6fbc:	1fff8d1c 	.word	0x1fff8d1c
    6fc0:	1fff8d18 	.word	0x1fff8d18

00006fc4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6fc4:	b500      	push	{lr}
    6fc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fc8:	f7fa f8a8 	bl	111c <Sys_GetCoreID>
    6fcc:	4603      	mov	r3, r0
    6fce:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    6fd0:	4a0d      	ldr	r2, [pc, #52]	; (7008 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6fd2:	9b01      	ldr	r3, [sp, #4]
    6fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fd8:	1e5a      	subs	r2, r3, #1
    6fda:	490b      	ldr	r1, [pc, #44]	; (7008 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6fdc:	9b01      	ldr	r3, [sp, #4]
    6fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6fe2:	4a0a      	ldr	r2, [pc, #40]	; (700c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    6fe4:	9b01      	ldr	r3, [sp, #4]
    6fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fea:	f003 0301 	and.w	r3, r3, #1
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d106      	bne.n	7000 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    6ff2:	4a05      	ldr	r2, [pc, #20]	; (7008 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6ff4:	9b01      	ldr	r3, [sp, #4]
    6ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ffa:	2b00      	cmp	r3, #0
    6ffc:	d100      	bne.n	7000 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ffe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7000:	bf00      	nop
    7002:	b003      	add	sp, #12
    7004:	f85d fb04 	ldr.w	pc, [sp], #4
    7008:	1fff8d1c 	.word	0x1fff8d1c
    700c:	1fff8d18 	.word	0x1fff8d18

00007010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    7010:	b500      	push	{lr}
    7012:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7014:	f7fa f882 	bl	111c <Sys_GetCoreID>
    7018:	4603      	mov	r3, r0
    701a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    701c:	4a10      	ldr	r2, [pc, #64]	; (7060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    701e:	9b01      	ldr	r3, [sp, #4]
    7020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7024:	2b00      	cmp	r3, #0
    7026:	d10d      	bne.n	7044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7028:	f7f9 fd94 	bl	b54 <Port_schm_read_msr>
    702c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    702e:	9b00      	ldr	r3, [sp, #0]
    7030:	f003 0301 	and.w	r3, r3, #1
    7034:	2b00      	cmp	r3, #0
    7036:	d100      	bne.n	703a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7038:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    703a:	490a      	ldr	r1, [pc, #40]	; (7064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    703c:	9b01      	ldr	r3, [sp, #4]
    703e:	9a00      	ldr	r2, [sp, #0]
    7040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    7044:	4a06      	ldr	r2, [pc, #24]	; (7060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    7046:	9b01      	ldr	r3, [sp, #4]
    7048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    704c:	1c5a      	adds	r2, r3, #1
    704e:	4904      	ldr	r1, [pc, #16]	; (7060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    7050:	9b01      	ldr	r3, [sp, #4]
    7052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7056:	bf00      	nop
    7058:	b003      	add	sp, #12
    705a:	f85d fb04 	ldr.w	pc, [sp], #4
    705e:	bf00      	nop
    7060:	1fff8d24 	.word	0x1fff8d24
    7064:	1fff8d20 	.word	0x1fff8d20

00007068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    7068:	b500      	push	{lr}
    706a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    706c:	f7fa f856 	bl	111c <Sys_GetCoreID>
    7070:	4603      	mov	r3, r0
    7072:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    7074:	4a0d      	ldr	r2, [pc, #52]	; (70ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    7076:	9b01      	ldr	r3, [sp, #4]
    7078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    707c:	1e5a      	subs	r2, r3, #1
    707e:	490b      	ldr	r1, [pc, #44]	; (70ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    7080:	9b01      	ldr	r3, [sp, #4]
    7082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    7086:	4a0a      	ldr	r2, [pc, #40]	; (70b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    7088:	9b01      	ldr	r3, [sp, #4]
    708a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    708e:	f003 0301 	and.w	r3, r3, #1
    7092:	2b00      	cmp	r3, #0
    7094:	d106      	bne.n	70a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    7096:	4a05      	ldr	r2, [pc, #20]	; (70ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    7098:	9b01      	ldr	r3, [sp, #4]
    709a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    709e:	2b00      	cmp	r3, #0
    70a0:	d100      	bne.n	70a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    70a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70a4:	bf00      	nop
    70a6:	b003      	add	sp, #12
    70a8:	f85d fb04 	ldr.w	pc, [sp], #4
    70ac:	1fff8d24 	.word	0x1fff8d24
    70b0:	1fff8d20 	.word	0x1fff8d20

000070b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    70b4:	b500      	push	{lr}
    70b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70b8:	f7fa f830 	bl	111c <Sys_GetCoreID>
    70bc:	4603      	mov	r3, r0
    70be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    70c0:	4a10      	ldr	r2, [pc, #64]	; (7104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    70c2:	9b01      	ldr	r3, [sp, #4]
    70c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70c8:	2b00      	cmp	r3, #0
    70ca:	d10d      	bne.n	70e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70cc:	f7f9 fd42 	bl	b54 <Port_schm_read_msr>
    70d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70d2:	9b00      	ldr	r3, [sp, #0]
    70d4:	f003 0301 	and.w	r3, r3, #1
    70d8:	2b00      	cmp	r3, #0
    70da:	d100      	bne.n	70de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    70de:	490a      	ldr	r1, [pc, #40]	; (7108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    70e0:	9b01      	ldr	r3, [sp, #4]
    70e2:	9a00      	ldr	r2, [sp, #0]
    70e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    70e8:	4a06      	ldr	r2, [pc, #24]	; (7104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    70ea:	9b01      	ldr	r3, [sp, #4]
    70ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70f0:	1c5a      	adds	r2, r3, #1
    70f2:	4904      	ldr	r1, [pc, #16]	; (7104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    70f4:	9b01      	ldr	r3, [sp, #4]
    70f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70fa:	bf00      	nop
    70fc:	b003      	add	sp, #12
    70fe:	f85d fb04 	ldr.w	pc, [sp], #4
    7102:	bf00      	nop
    7104:	1fff8d2c 	.word	0x1fff8d2c
    7108:	1fff8d28 	.word	0x1fff8d28

0000710c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    710c:	b500      	push	{lr}
    710e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7110:	f7fa f804 	bl	111c <Sys_GetCoreID>
    7114:	4603      	mov	r3, r0
    7116:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    7118:	4a0d      	ldr	r2, [pc, #52]	; (7150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    711a:	9b01      	ldr	r3, [sp, #4]
    711c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7120:	1e5a      	subs	r2, r3, #1
    7122:	490b      	ldr	r1, [pc, #44]	; (7150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    7124:	9b01      	ldr	r3, [sp, #4]
    7126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    712a:	4a0a      	ldr	r2, [pc, #40]	; (7154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    712c:	9b01      	ldr	r3, [sp, #4]
    712e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7132:	f003 0301 	and.w	r3, r3, #1
    7136:	2b00      	cmp	r3, #0
    7138:	d106      	bne.n	7148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    713a:	4a05      	ldr	r2, [pc, #20]	; (7150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    713c:	9b01      	ldr	r3, [sp, #4]
    713e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7142:	2b00      	cmp	r3, #0
    7144:	d100      	bne.n	7148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7146:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7148:	bf00      	nop
    714a:	b003      	add	sp, #12
    714c:	f85d fb04 	ldr.w	pc, [sp], #4
    7150:	1fff8d2c 	.word	0x1fff8d2c
    7154:	1fff8d28 	.word	0x1fff8d28

00007158 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    7158:	b500      	push	{lr}
    715a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    715c:	f7f9 ffde 	bl	111c <Sys_GetCoreID>
    7160:	4603      	mov	r3, r0
    7162:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    7164:	4a10      	ldr	r2, [pc, #64]	; (71a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    7166:	9b01      	ldr	r3, [sp, #4]
    7168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    716c:	2b00      	cmp	r3, #0
    716e:	d10d      	bne.n	718c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7170:	f7f9 fcf0 	bl	b54 <Port_schm_read_msr>
    7174:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7176:	9b00      	ldr	r3, [sp, #0]
    7178:	f003 0301 	and.w	r3, r3, #1
    717c:	2b00      	cmp	r3, #0
    717e:	d100      	bne.n	7182 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7180:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    7182:	490a      	ldr	r1, [pc, #40]	; (71ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    7184:	9b01      	ldr	r3, [sp, #4]
    7186:	9a00      	ldr	r2, [sp, #0]
    7188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    718c:	4a06      	ldr	r2, [pc, #24]	; (71a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    718e:	9b01      	ldr	r3, [sp, #4]
    7190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7194:	1c5a      	adds	r2, r3, #1
    7196:	4904      	ldr	r1, [pc, #16]	; (71a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    7198:	9b01      	ldr	r3, [sp, #4]
    719a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    719e:	bf00      	nop
    71a0:	b003      	add	sp, #12
    71a2:	f85d fb04 	ldr.w	pc, [sp], #4
    71a6:	bf00      	nop
    71a8:	1fff8d34 	.word	0x1fff8d34
    71ac:	1fff8d30 	.word	0x1fff8d30

000071b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    71b0:	b500      	push	{lr}
    71b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71b4:	f7f9 ffb2 	bl	111c <Sys_GetCoreID>
    71b8:	4603      	mov	r3, r0
    71ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    71bc:	4a0d      	ldr	r2, [pc, #52]	; (71f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    71be:	9b01      	ldr	r3, [sp, #4]
    71c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71c4:	1e5a      	subs	r2, r3, #1
    71c6:	490b      	ldr	r1, [pc, #44]	; (71f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    71c8:	9b01      	ldr	r3, [sp, #4]
    71ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    71ce:	4a0a      	ldr	r2, [pc, #40]	; (71f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    71d0:	9b01      	ldr	r3, [sp, #4]
    71d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d6:	f003 0301 	and.w	r3, r3, #1
    71da:	2b00      	cmp	r3, #0
    71dc:	d106      	bne.n	71ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    71de:	4a05      	ldr	r2, [pc, #20]	; (71f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    71e0:	9b01      	ldr	r3, [sp, #4]
    71e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e6:	2b00      	cmp	r3, #0
    71e8:	d100      	bne.n	71ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    71ec:	bf00      	nop
    71ee:	b003      	add	sp, #12
    71f0:	f85d fb04 	ldr.w	pc, [sp], #4
    71f4:	1fff8d34 	.word	0x1fff8d34
    71f8:	1fff8d30 	.word	0x1fff8d30

000071fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    71fc:	b500      	push	{lr}
    71fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7200:	f7f9 ff8c 	bl	111c <Sys_GetCoreID>
    7204:	4603      	mov	r3, r0
    7206:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    7208:	4a10      	ldr	r2, [pc, #64]	; (724c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    720a:	9b01      	ldr	r3, [sp, #4]
    720c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7210:	2b00      	cmp	r3, #0
    7212:	d10d      	bne.n	7230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7214:	f7f9 fc9e 	bl	b54 <Port_schm_read_msr>
    7218:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    721a:	9b00      	ldr	r3, [sp, #0]
    721c:	f003 0301 	and.w	r3, r3, #1
    7220:	2b00      	cmp	r3, #0
    7222:	d100      	bne.n	7226 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7224:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    7226:	490a      	ldr	r1, [pc, #40]	; (7250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    7228:	9b01      	ldr	r3, [sp, #4]
    722a:	9a00      	ldr	r2, [sp, #0]
    722c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    7230:	4a06      	ldr	r2, [pc, #24]	; (724c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    7232:	9b01      	ldr	r3, [sp, #4]
    7234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7238:	1c5a      	adds	r2, r3, #1
    723a:	4904      	ldr	r1, [pc, #16]	; (724c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    723c:	9b01      	ldr	r3, [sp, #4]
    723e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7242:	bf00      	nop
    7244:	b003      	add	sp, #12
    7246:	f85d fb04 	ldr.w	pc, [sp], #4
    724a:	bf00      	nop
    724c:	1fff8d3c 	.word	0x1fff8d3c
    7250:	1fff8d38 	.word	0x1fff8d38

00007254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    7254:	b500      	push	{lr}
    7256:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7258:	f7f9 ff60 	bl	111c <Sys_GetCoreID>
    725c:	4603      	mov	r3, r0
    725e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    7260:	4a0d      	ldr	r2, [pc, #52]	; (7298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    7262:	9b01      	ldr	r3, [sp, #4]
    7264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7268:	1e5a      	subs	r2, r3, #1
    726a:	490b      	ldr	r1, [pc, #44]	; (7298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    726c:	9b01      	ldr	r3, [sp, #4]
    726e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    7272:	4a0a      	ldr	r2, [pc, #40]	; (729c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    7274:	9b01      	ldr	r3, [sp, #4]
    7276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    727a:	f003 0301 	and.w	r3, r3, #1
    727e:	2b00      	cmp	r3, #0
    7280:	d106      	bne.n	7290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    7282:	4a05      	ldr	r2, [pc, #20]	; (7298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    7284:	9b01      	ldr	r3, [sp, #4]
    7286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    728a:	2b00      	cmp	r3, #0
    728c:	d100      	bne.n	7290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    728e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7290:	bf00      	nop
    7292:	b003      	add	sp, #12
    7294:	f85d fb04 	ldr.w	pc, [sp], #4
    7298:	1fff8d3c 	.word	0x1fff8d3c
    729c:	1fff8d38 	.word	0x1fff8d38

000072a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    72a0:	b500      	push	{lr}
    72a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72a4:	f7f9 ff3a 	bl	111c <Sys_GetCoreID>
    72a8:	4603      	mov	r3, r0
    72aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    72ac:	4a10      	ldr	r2, [pc, #64]	; (72f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    72ae:	9b01      	ldr	r3, [sp, #4]
    72b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72b4:	2b00      	cmp	r3, #0
    72b6:	d10d      	bne.n	72d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72b8:	f7f9 fc4c 	bl	b54 <Port_schm_read_msr>
    72bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72be:	9b00      	ldr	r3, [sp, #0]
    72c0:	f003 0301 	and.w	r3, r3, #1
    72c4:	2b00      	cmp	r3, #0
    72c6:	d100      	bne.n	72ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    72c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    72ca:	490a      	ldr	r1, [pc, #40]	; (72f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    72cc:	9b01      	ldr	r3, [sp, #4]
    72ce:	9a00      	ldr	r2, [sp, #0]
    72d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    72d4:	4a06      	ldr	r2, [pc, #24]	; (72f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    72d6:	9b01      	ldr	r3, [sp, #4]
    72d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72dc:	1c5a      	adds	r2, r3, #1
    72de:	4904      	ldr	r1, [pc, #16]	; (72f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    72e0:	9b01      	ldr	r3, [sp, #4]
    72e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72e6:	bf00      	nop
    72e8:	b003      	add	sp, #12
    72ea:	f85d fb04 	ldr.w	pc, [sp], #4
    72ee:	bf00      	nop
    72f0:	1fff8d44 	.word	0x1fff8d44
    72f4:	1fff8d40 	.word	0x1fff8d40

000072f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    72f8:	b500      	push	{lr}
    72fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72fc:	f7f9 ff0e 	bl	111c <Sys_GetCoreID>
    7300:	4603      	mov	r3, r0
    7302:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    7304:	4a0d      	ldr	r2, [pc, #52]	; (733c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7306:	9b01      	ldr	r3, [sp, #4]
    7308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    730c:	1e5a      	subs	r2, r3, #1
    730e:	490b      	ldr	r1, [pc, #44]	; (733c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7310:	9b01      	ldr	r3, [sp, #4]
    7312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    7316:	4a0a      	ldr	r2, [pc, #40]	; (7340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    7318:	9b01      	ldr	r3, [sp, #4]
    731a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    731e:	f003 0301 	and.w	r3, r3, #1
    7322:	2b00      	cmp	r3, #0
    7324:	d106      	bne.n	7334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    7326:	4a05      	ldr	r2, [pc, #20]	; (733c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7328:	9b01      	ldr	r3, [sp, #4]
    732a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    732e:	2b00      	cmp	r3, #0
    7330:	d100      	bne.n	7334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7332:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7334:	bf00      	nop
    7336:	b003      	add	sp, #12
    7338:	f85d fb04 	ldr.w	pc, [sp], #4
    733c:	1fff8d44 	.word	0x1fff8d44
    7340:	1fff8d40 	.word	0x1fff8d40

00007344 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    7344:	b500      	push	{lr}
    7346:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7348:	f7f9 fee8 	bl	111c <Sys_GetCoreID>
    734c:	4603      	mov	r3, r0
    734e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    7350:	4a10      	ldr	r2, [pc, #64]	; (7394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    7352:	9b01      	ldr	r3, [sp, #4]
    7354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7358:	2b00      	cmp	r3, #0
    735a:	d10d      	bne.n	7378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    735c:	f7f9 fbfa 	bl	b54 <Port_schm_read_msr>
    7360:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7362:	9b00      	ldr	r3, [sp, #0]
    7364:	f003 0301 	and.w	r3, r3, #1
    7368:	2b00      	cmp	r3, #0
    736a:	d100      	bne.n	736e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    736c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    736e:	490a      	ldr	r1, [pc, #40]	; (7398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    7370:	9b01      	ldr	r3, [sp, #4]
    7372:	9a00      	ldr	r2, [sp, #0]
    7374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    7378:	4a06      	ldr	r2, [pc, #24]	; (7394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    737a:	9b01      	ldr	r3, [sp, #4]
    737c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7380:	1c5a      	adds	r2, r3, #1
    7382:	4904      	ldr	r1, [pc, #16]	; (7394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    7384:	9b01      	ldr	r3, [sp, #4]
    7386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    738a:	bf00      	nop
    738c:	b003      	add	sp, #12
    738e:	f85d fb04 	ldr.w	pc, [sp], #4
    7392:	bf00      	nop
    7394:	1fff8d4c 	.word	0x1fff8d4c
    7398:	1fff8d48 	.word	0x1fff8d48

0000739c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    739c:	b500      	push	{lr}
    739e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73a0:	f7f9 febc 	bl	111c <Sys_GetCoreID>
    73a4:	4603      	mov	r3, r0
    73a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    73a8:	4a0d      	ldr	r2, [pc, #52]	; (73e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    73aa:	9b01      	ldr	r3, [sp, #4]
    73ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73b0:	1e5a      	subs	r2, r3, #1
    73b2:	490b      	ldr	r1, [pc, #44]	; (73e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    73b4:	9b01      	ldr	r3, [sp, #4]
    73b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    73ba:	4a0a      	ldr	r2, [pc, #40]	; (73e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    73bc:	9b01      	ldr	r3, [sp, #4]
    73be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73c2:	f003 0301 	and.w	r3, r3, #1
    73c6:	2b00      	cmp	r3, #0
    73c8:	d106      	bne.n	73d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    73ca:	4a05      	ldr	r2, [pc, #20]	; (73e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    73cc:	9b01      	ldr	r3, [sp, #4]
    73ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73d2:	2b00      	cmp	r3, #0
    73d4:	d100      	bne.n	73d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73d8:	bf00      	nop
    73da:	b003      	add	sp, #12
    73dc:	f85d fb04 	ldr.w	pc, [sp], #4
    73e0:	1fff8d4c 	.word	0x1fff8d4c
    73e4:	1fff8d48 	.word	0x1fff8d48

000073e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    73e8:	b500      	push	{lr}
    73ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73ec:	f7f9 fe96 	bl	111c <Sys_GetCoreID>
    73f0:	4603      	mov	r3, r0
    73f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    73f4:	4a10      	ldr	r2, [pc, #64]	; (7438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    73f6:	9b01      	ldr	r3, [sp, #4]
    73f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73fc:	2b00      	cmp	r3, #0
    73fe:	d10d      	bne.n	741c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7400:	f7f9 fba8 	bl	b54 <Port_schm_read_msr>
    7404:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7406:	9b00      	ldr	r3, [sp, #0]
    7408:	f003 0301 	and.w	r3, r3, #1
    740c:	2b00      	cmp	r3, #0
    740e:	d100      	bne.n	7412 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7410:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    7412:	490a      	ldr	r1, [pc, #40]	; (743c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    7414:	9b01      	ldr	r3, [sp, #4]
    7416:	9a00      	ldr	r2, [sp, #0]
    7418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    741c:	4a06      	ldr	r2, [pc, #24]	; (7438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    741e:	9b01      	ldr	r3, [sp, #4]
    7420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7424:	1c5a      	adds	r2, r3, #1
    7426:	4904      	ldr	r1, [pc, #16]	; (7438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    7428:	9b01      	ldr	r3, [sp, #4]
    742a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    742e:	bf00      	nop
    7430:	b003      	add	sp, #12
    7432:	f85d fb04 	ldr.w	pc, [sp], #4
    7436:	bf00      	nop
    7438:	1fff8d54 	.word	0x1fff8d54
    743c:	1fff8d50 	.word	0x1fff8d50

00007440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    7440:	b500      	push	{lr}
    7442:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7444:	f7f9 fe6a 	bl	111c <Sys_GetCoreID>
    7448:	4603      	mov	r3, r0
    744a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    744c:	4a0d      	ldr	r2, [pc, #52]	; (7484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    744e:	9b01      	ldr	r3, [sp, #4]
    7450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7454:	1e5a      	subs	r2, r3, #1
    7456:	490b      	ldr	r1, [pc, #44]	; (7484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    7458:	9b01      	ldr	r3, [sp, #4]
    745a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    745e:	4a0a      	ldr	r2, [pc, #40]	; (7488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    7460:	9b01      	ldr	r3, [sp, #4]
    7462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7466:	f003 0301 	and.w	r3, r3, #1
    746a:	2b00      	cmp	r3, #0
    746c:	d106      	bne.n	747c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    746e:	4a05      	ldr	r2, [pc, #20]	; (7484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    7470:	9b01      	ldr	r3, [sp, #4]
    7472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7476:	2b00      	cmp	r3, #0
    7478:	d100      	bne.n	747c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    747a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    747c:	bf00      	nop
    747e:	b003      	add	sp, #12
    7480:	f85d fb04 	ldr.w	pc, [sp], #4
    7484:	1fff8d54 	.word	0x1fff8d54
    7488:	1fff8d50 	.word	0x1fff8d50

0000748c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    748c:	b500      	push	{lr}
    748e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7490:	f7f9 fe44 	bl	111c <Sys_GetCoreID>
    7494:	4603      	mov	r3, r0
    7496:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    7498:	4a10      	ldr	r2, [pc, #64]	; (74dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    749a:	9b01      	ldr	r3, [sp, #4]
    749c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74a0:	2b00      	cmp	r3, #0
    74a2:	d10d      	bne.n	74c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    74a4:	f7f9 fb56 	bl	b54 <Port_schm_read_msr>
    74a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74aa:	9b00      	ldr	r3, [sp, #0]
    74ac:	f003 0301 	and.w	r3, r3, #1
    74b0:	2b00      	cmp	r3, #0
    74b2:	d100      	bne.n	74b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    74b6:	490a      	ldr	r1, [pc, #40]	; (74e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    74b8:	9b01      	ldr	r3, [sp, #4]
    74ba:	9a00      	ldr	r2, [sp, #0]
    74bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    74c0:	4a06      	ldr	r2, [pc, #24]	; (74dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    74c2:	9b01      	ldr	r3, [sp, #4]
    74c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c8:	1c5a      	adds	r2, r3, #1
    74ca:	4904      	ldr	r1, [pc, #16]	; (74dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    74cc:	9b01      	ldr	r3, [sp, #4]
    74ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74d2:	bf00      	nop
    74d4:	b003      	add	sp, #12
    74d6:	f85d fb04 	ldr.w	pc, [sp], #4
    74da:	bf00      	nop
    74dc:	1fff8d5c 	.word	0x1fff8d5c
    74e0:	1fff8d58 	.word	0x1fff8d58

000074e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    74e4:	b500      	push	{lr}
    74e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74e8:	f7f9 fe18 	bl	111c <Sys_GetCoreID>
    74ec:	4603      	mov	r3, r0
    74ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    74f0:	4a0d      	ldr	r2, [pc, #52]	; (7528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    74f2:	9b01      	ldr	r3, [sp, #4]
    74f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f8:	1e5a      	subs	r2, r3, #1
    74fa:	490b      	ldr	r1, [pc, #44]	; (7528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    74fc:	9b01      	ldr	r3, [sp, #4]
    74fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    7502:	4a0a      	ldr	r2, [pc, #40]	; (752c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    7504:	9b01      	ldr	r3, [sp, #4]
    7506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    750a:	f003 0301 	and.w	r3, r3, #1
    750e:	2b00      	cmp	r3, #0
    7510:	d106      	bne.n	7520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    7512:	4a05      	ldr	r2, [pc, #20]	; (7528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    7514:	9b01      	ldr	r3, [sp, #4]
    7516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    751a:	2b00      	cmp	r3, #0
    751c:	d100      	bne.n	7520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    751e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7520:	bf00      	nop
    7522:	b003      	add	sp, #12
    7524:	f85d fb04 	ldr.w	pc, [sp], #4
    7528:	1fff8d5c 	.word	0x1fff8d5c
    752c:	1fff8d58 	.word	0x1fff8d58

00007530 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    7530:	b500      	push	{lr}
    7532:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7534:	f7f9 fdf2 	bl	111c <Sys_GetCoreID>
    7538:	4603      	mov	r3, r0
    753a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    753c:	4a10      	ldr	r2, [pc, #64]	; (7580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    753e:	9b01      	ldr	r3, [sp, #4]
    7540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7544:	2b00      	cmp	r3, #0
    7546:	d10d      	bne.n	7564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7548:	f7f9 fb04 	bl	b54 <Port_schm_read_msr>
    754c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    754e:	9b00      	ldr	r3, [sp, #0]
    7550:	f003 0301 	and.w	r3, r3, #1
    7554:	2b00      	cmp	r3, #0
    7556:	d100      	bne.n	755a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7558:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    755a:	490a      	ldr	r1, [pc, #40]	; (7584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    755c:	9b01      	ldr	r3, [sp, #4]
    755e:	9a00      	ldr	r2, [sp, #0]
    7560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    7564:	4a06      	ldr	r2, [pc, #24]	; (7580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    7566:	9b01      	ldr	r3, [sp, #4]
    7568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    756c:	1c5a      	adds	r2, r3, #1
    756e:	4904      	ldr	r1, [pc, #16]	; (7580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    7570:	9b01      	ldr	r3, [sp, #4]
    7572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7576:	bf00      	nop
    7578:	b003      	add	sp, #12
    757a:	f85d fb04 	ldr.w	pc, [sp], #4
    757e:	bf00      	nop
    7580:	1fff8d64 	.word	0x1fff8d64
    7584:	1fff8d60 	.word	0x1fff8d60

00007588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    7588:	b500      	push	{lr}
    758a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    758c:	f7f9 fdc6 	bl	111c <Sys_GetCoreID>
    7590:	4603      	mov	r3, r0
    7592:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    7594:	4a0d      	ldr	r2, [pc, #52]	; (75cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    7596:	9b01      	ldr	r3, [sp, #4]
    7598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    759c:	1e5a      	subs	r2, r3, #1
    759e:	490b      	ldr	r1, [pc, #44]	; (75cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    75a0:	9b01      	ldr	r3, [sp, #4]
    75a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    75a6:	4a0a      	ldr	r2, [pc, #40]	; (75d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    75a8:	9b01      	ldr	r3, [sp, #4]
    75aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ae:	f003 0301 	and.w	r3, r3, #1
    75b2:	2b00      	cmp	r3, #0
    75b4:	d106      	bne.n	75c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    75b6:	4a05      	ldr	r2, [pc, #20]	; (75cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    75b8:	9b01      	ldr	r3, [sp, #4]
    75ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75be:	2b00      	cmp	r3, #0
    75c0:	d100      	bne.n	75c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    75c4:	bf00      	nop
    75c6:	b003      	add	sp, #12
    75c8:	f85d fb04 	ldr.w	pc, [sp], #4
    75cc:	1fff8d64 	.word	0x1fff8d64
    75d0:	1fff8d60 	.word	0x1fff8d60

000075d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    75d4:	b500      	push	{lr}
    75d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75d8:	f7f9 fda0 	bl	111c <Sys_GetCoreID>
    75dc:	4603      	mov	r3, r0
    75de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    75e0:	4a10      	ldr	r2, [pc, #64]	; (7624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    75e2:	9b01      	ldr	r3, [sp, #4]
    75e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e8:	2b00      	cmp	r3, #0
    75ea:	d10d      	bne.n	7608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    75ec:	f7f9 fab2 	bl	b54 <Port_schm_read_msr>
    75f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    75f2:	9b00      	ldr	r3, [sp, #0]
    75f4:	f003 0301 	and.w	r3, r3, #1
    75f8:	2b00      	cmp	r3, #0
    75fa:	d100      	bne.n	75fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    75fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    75fe:	490a      	ldr	r1, [pc, #40]	; (7628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    7600:	9b01      	ldr	r3, [sp, #4]
    7602:	9a00      	ldr	r2, [sp, #0]
    7604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    7608:	4a06      	ldr	r2, [pc, #24]	; (7624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    760a:	9b01      	ldr	r3, [sp, #4]
    760c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7610:	1c5a      	adds	r2, r3, #1
    7612:	4904      	ldr	r1, [pc, #16]	; (7624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    7614:	9b01      	ldr	r3, [sp, #4]
    7616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    761a:	bf00      	nop
    761c:	b003      	add	sp, #12
    761e:	f85d fb04 	ldr.w	pc, [sp], #4
    7622:	bf00      	nop
    7624:	1fff8d6c 	.word	0x1fff8d6c
    7628:	1fff8d68 	.word	0x1fff8d68

0000762c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    762c:	b500      	push	{lr}
    762e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7630:	f7f9 fd74 	bl	111c <Sys_GetCoreID>
    7634:	4603      	mov	r3, r0
    7636:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    7638:	4a0d      	ldr	r2, [pc, #52]	; (7670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    763a:	9b01      	ldr	r3, [sp, #4]
    763c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7640:	1e5a      	subs	r2, r3, #1
    7642:	490b      	ldr	r1, [pc, #44]	; (7670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7644:	9b01      	ldr	r3, [sp, #4]
    7646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    764a:	4a0a      	ldr	r2, [pc, #40]	; (7674 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    764c:	9b01      	ldr	r3, [sp, #4]
    764e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7652:	f003 0301 	and.w	r3, r3, #1
    7656:	2b00      	cmp	r3, #0
    7658:	d106      	bne.n	7668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    765a:	4a05      	ldr	r2, [pc, #20]	; (7670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    765c:	9b01      	ldr	r3, [sp, #4]
    765e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7662:	2b00      	cmp	r3, #0
    7664:	d100      	bne.n	7668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7666:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7668:	bf00      	nop
    766a:	b003      	add	sp, #12
    766c:	f85d fb04 	ldr.w	pc, [sp], #4
    7670:	1fff8d6c 	.word	0x1fff8d6c
    7674:	1fff8d68 	.word	0x1fff8d68

00007678 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7678:	b500      	push	{lr}
    767a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    767c:	f7f9 fd4e 	bl	111c <Sys_GetCoreID>
    7680:	4603      	mov	r3, r0
    7682:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    7684:	4a10      	ldr	r2, [pc, #64]	; (76c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7686:	9b01      	ldr	r3, [sp, #4]
    7688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    768c:	2b00      	cmp	r3, #0
    768e:	d10d      	bne.n	76ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7690:	f7f9 fa60 	bl	b54 <Port_schm_read_msr>
    7694:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7696:	9b00      	ldr	r3, [sp, #0]
    7698:	f003 0301 	and.w	r3, r3, #1
    769c:	2b00      	cmp	r3, #0
    769e:	d100      	bne.n	76a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    76a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    76a2:	490a      	ldr	r1, [pc, #40]	; (76cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    76a4:	9b01      	ldr	r3, [sp, #4]
    76a6:	9a00      	ldr	r2, [sp, #0]
    76a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    76ac:	4a06      	ldr	r2, [pc, #24]	; (76c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    76ae:	9b01      	ldr	r3, [sp, #4]
    76b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b4:	1c5a      	adds	r2, r3, #1
    76b6:	4904      	ldr	r1, [pc, #16]	; (76c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    76b8:	9b01      	ldr	r3, [sp, #4]
    76ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76be:	bf00      	nop
    76c0:	b003      	add	sp, #12
    76c2:	f85d fb04 	ldr.w	pc, [sp], #4
    76c6:	bf00      	nop
    76c8:	1fff8d74 	.word	0x1fff8d74
    76cc:	1fff8d70 	.word	0x1fff8d70

000076d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    76d0:	b500      	push	{lr}
    76d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76d4:	f7f9 fd22 	bl	111c <Sys_GetCoreID>
    76d8:	4603      	mov	r3, r0
    76da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    76dc:	4a0d      	ldr	r2, [pc, #52]	; (7714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    76de:	9b01      	ldr	r3, [sp, #4]
    76e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e4:	1e5a      	subs	r2, r3, #1
    76e6:	490b      	ldr	r1, [pc, #44]	; (7714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    76e8:	9b01      	ldr	r3, [sp, #4]
    76ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    76ee:	4a0a      	ldr	r2, [pc, #40]	; (7718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    76f0:	9b01      	ldr	r3, [sp, #4]
    76f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f6:	f003 0301 	and.w	r3, r3, #1
    76fa:	2b00      	cmp	r3, #0
    76fc:	d106      	bne.n	770c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    76fe:	4a05      	ldr	r2, [pc, #20]	; (7714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7700:	9b01      	ldr	r3, [sp, #4]
    7702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7706:	2b00      	cmp	r3, #0
    7708:	d100      	bne.n	770c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    770a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    770c:	bf00      	nop
    770e:	b003      	add	sp, #12
    7710:	f85d fb04 	ldr.w	pc, [sp], #4
    7714:	1fff8d74 	.word	0x1fff8d74
    7718:	1fff8d70 	.word	0x1fff8d70

0000771c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    771c:	b500      	push	{lr}
    771e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7720:	f7f9 fcfc 	bl	111c <Sys_GetCoreID>
    7724:	4603      	mov	r3, r0
    7726:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    7728:	4a10      	ldr	r2, [pc, #64]	; (776c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    772a:	9b01      	ldr	r3, [sp, #4]
    772c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7730:	2b00      	cmp	r3, #0
    7732:	d10d      	bne.n	7750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7734:	f7f9 fa0e 	bl	b54 <Port_schm_read_msr>
    7738:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    773a:	9b00      	ldr	r3, [sp, #0]
    773c:	f003 0301 	and.w	r3, r3, #1
    7740:	2b00      	cmp	r3, #0
    7742:	d100      	bne.n	7746 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7744:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    7746:	490a      	ldr	r1, [pc, #40]	; (7770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    7748:	9b01      	ldr	r3, [sp, #4]
    774a:	9a00      	ldr	r2, [sp, #0]
    774c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    7750:	4a06      	ldr	r2, [pc, #24]	; (776c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7752:	9b01      	ldr	r3, [sp, #4]
    7754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7758:	1c5a      	adds	r2, r3, #1
    775a:	4904      	ldr	r1, [pc, #16]	; (776c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    775c:	9b01      	ldr	r3, [sp, #4]
    775e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7762:	bf00      	nop
    7764:	b003      	add	sp, #12
    7766:	f85d fb04 	ldr.w	pc, [sp], #4
    776a:	bf00      	nop
    776c:	1fff8d7c 	.word	0x1fff8d7c
    7770:	1fff8d78 	.word	0x1fff8d78

00007774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7774:	b500      	push	{lr}
    7776:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7778:	f7f9 fcd0 	bl	111c <Sys_GetCoreID>
    777c:	4603      	mov	r3, r0
    777e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    7780:	4a0d      	ldr	r2, [pc, #52]	; (77b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7782:	9b01      	ldr	r3, [sp, #4]
    7784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7788:	1e5a      	subs	r2, r3, #1
    778a:	490b      	ldr	r1, [pc, #44]	; (77b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    778c:	9b01      	ldr	r3, [sp, #4]
    778e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    7792:	4a0a      	ldr	r2, [pc, #40]	; (77bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    7794:	9b01      	ldr	r3, [sp, #4]
    7796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    779a:	f003 0301 	and.w	r3, r3, #1
    779e:	2b00      	cmp	r3, #0
    77a0:	d106      	bne.n	77b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    77a2:	4a05      	ldr	r2, [pc, #20]	; (77b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    77a4:	9b01      	ldr	r3, [sp, #4]
    77a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77aa:	2b00      	cmp	r3, #0
    77ac:	d100      	bne.n	77b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    77ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    77b0:	bf00      	nop
    77b2:	b003      	add	sp, #12
    77b4:	f85d fb04 	ldr.w	pc, [sp], #4
    77b8:	1fff8d7c 	.word	0x1fff8d7c
    77bc:	1fff8d78 	.word	0x1fff8d78

000077c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    77c0:	b500      	push	{lr}
    77c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77c4:	f7f9 fcaa 	bl	111c <Sys_GetCoreID>
    77c8:	4603      	mov	r3, r0
    77ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    77cc:	4a10      	ldr	r2, [pc, #64]	; (7810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    77ce:	9b01      	ldr	r3, [sp, #4]
    77d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77d4:	2b00      	cmp	r3, #0
    77d6:	d10d      	bne.n	77f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77d8:	f7f9 f9bc 	bl	b54 <Port_schm_read_msr>
    77dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77de:	9b00      	ldr	r3, [sp, #0]
    77e0:	f003 0301 	and.w	r3, r3, #1
    77e4:	2b00      	cmp	r3, #0
    77e6:	d100      	bne.n	77ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    77ea:	490a      	ldr	r1, [pc, #40]	; (7814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    77ec:	9b01      	ldr	r3, [sp, #4]
    77ee:	9a00      	ldr	r2, [sp, #0]
    77f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    77f4:	4a06      	ldr	r2, [pc, #24]	; (7810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    77f6:	9b01      	ldr	r3, [sp, #4]
    77f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77fc:	1c5a      	adds	r2, r3, #1
    77fe:	4904      	ldr	r1, [pc, #16]	; (7810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7800:	9b01      	ldr	r3, [sp, #4]
    7802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7806:	bf00      	nop
    7808:	b003      	add	sp, #12
    780a:	f85d fb04 	ldr.w	pc, [sp], #4
    780e:	bf00      	nop
    7810:	1fff8d84 	.word	0x1fff8d84
    7814:	1fff8d80 	.word	0x1fff8d80

00007818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7818:	b500      	push	{lr}
    781a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    781c:	f7f9 fc7e 	bl	111c <Sys_GetCoreID>
    7820:	4603      	mov	r3, r0
    7822:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    7824:	4a0d      	ldr	r2, [pc, #52]	; (785c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7826:	9b01      	ldr	r3, [sp, #4]
    7828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    782c:	1e5a      	subs	r2, r3, #1
    782e:	490b      	ldr	r1, [pc, #44]	; (785c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7830:	9b01      	ldr	r3, [sp, #4]
    7832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    7836:	4a0a      	ldr	r2, [pc, #40]	; (7860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    7838:	9b01      	ldr	r3, [sp, #4]
    783a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783e:	f003 0301 	and.w	r3, r3, #1
    7842:	2b00      	cmp	r3, #0
    7844:	d106      	bne.n	7854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    7846:	4a05      	ldr	r2, [pc, #20]	; (785c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7848:	9b01      	ldr	r3, [sp, #4]
    784a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    784e:	2b00      	cmp	r3, #0
    7850:	d100      	bne.n	7854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7852:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7854:	bf00      	nop
    7856:	b003      	add	sp, #12
    7858:	f85d fb04 	ldr.w	pc, [sp], #4
    785c:	1fff8d84 	.word	0x1fff8d84
    7860:	1fff8d80 	.word	0x1fff8d80

00007864 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7864:	b500      	push	{lr}
    7866:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7868:	f7f9 fc58 	bl	111c <Sys_GetCoreID>
    786c:	4603      	mov	r3, r0
    786e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    7870:	4a10      	ldr	r2, [pc, #64]	; (78b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7872:	9b01      	ldr	r3, [sp, #4]
    7874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7878:	2b00      	cmp	r3, #0
    787a:	d10d      	bne.n	7898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    787c:	f7f9 f96a 	bl	b54 <Port_schm_read_msr>
    7880:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7882:	9b00      	ldr	r3, [sp, #0]
    7884:	f003 0301 	and.w	r3, r3, #1
    7888:	2b00      	cmp	r3, #0
    788a:	d100      	bne.n	788e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    788c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    788e:	490a      	ldr	r1, [pc, #40]	; (78b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    7890:	9b01      	ldr	r3, [sp, #4]
    7892:	9a00      	ldr	r2, [sp, #0]
    7894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    7898:	4a06      	ldr	r2, [pc, #24]	; (78b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    789a:	9b01      	ldr	r3, [sp, #4]
    789c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78a0:	1c5a      	adds	r2, r3, #1
    78a2:	4904      	ldr	r1, [pc, #16]	; (78b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    78a4:	9b01      	ldr	r3, [sp, #4]
    78a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78aa:	bf00      	nop
    78ac:	b003      	add	sp, #12
    78ae:	f85d fb04 	ldr.w	pc, [sp], #4
    78b2:	bf00      	nop
    78b4:	1fff8d8c 	.word	0x1fff8d8c
    78b8:	1fff8d88 	.word	0x1fff8d88

000078bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    78bc:	b500      	push	{lr}
    78be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78c0:	f7f9 fc2c 	bl	111c <Sys_GetCoreID>
    78c4:	4603      	mov	r3, r0
    78c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    78c8:	4a0d      	ldr	r2, [pc, #52]	; (7900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    78ca:	9b01      	ldr	r3, [sp, #4]
    78cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78d0:	1e5a      	subs	r2, r3, #1
    78d2:	490b      	ldr	r1, [pc, #44]	; (7900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    78d4:	9b01      	ldr	r3, [sp, #4]
    78d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    78da:	4a0a      	ldr	r2, [pc, #40]	; (7904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    78dc:	9b01      	ldr	r3, [sp, #4]
    78de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e2:	f003 0301 	and.w	r3, r3, #1
    78e6:	2b00      	cmp	r3, #0
    78e8:	d106      	bne.n	78f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    78ea:	4a05      	ldr	r2, [pc, #20]	; (7900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    78ec:	9b01      	ldr	r3, [sp, #4]
    78ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f2:	2b00      	cmp	r3, #0
    78f4:	d100      	bne.n	78f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    78f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    78f8:	bf00      	nop
    78fa:	b003      	add	sp, #12
    78fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7900:	1fff8d8c 	.word	0x1fff8d8c
    7904:	1fff8d88 	.word	0x1fff8d88

00007908 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7908:	b500      	push	{lr}
    790a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    790c:	f7f9 fc06 	bl	111c <Sys_GetCoreID>
    7910:	4603      	mov	r3, r0
    7912:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    7914:	4a10      	ldr	r2, [pc, #64]	; (7958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7916:	9b01      	ldr	r3, [sp, #4]
    7918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    791c:	2b00      	cmp	r3, #0
    791e:	d10d      	bne.n	793c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7920:	f7f9 f918 	bl	b54 <Port_schm_read_msr>
    7924:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7926:	9b00      	ldr	r3, [sp, #0]
    7928:	f003 0301 	and.w	r3, r3, #1
    792c:	2b00      	cmp	r3, #0
    792e:	d100      	bne.n	7932 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7930:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    7932:	490a      	ldr	r1, [pc, #40]	; (795c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    7934:	9b01      	ldr	r3, [sp, #4]
    7936:	9a00      	ldr	r2, [sp, #0]
    7938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    793c:	4a06      	ldr	r2, [pc, #24]	; (7958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    793e:	9b01      	ldr	r3, [sp, #4]
    7940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7944:	1c5a      	adds	r2, r3, #1
    7946:	4904      	ldr	r1, [pc, #16]	; (7958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7948:	9b01      	ldr	r3, [sp, #4]
    794a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    794e:	bf00      	nop
    7950:	b003      	add	sp, #12
    7952:	f85d fb04 	ldr.w	pc, [sp], #4
    7956:	bf00      	nop
    7958:	1fff8d94 	.word	0x1fff8d94
    795c:	1fff8d90 	.word	0x1fff8d90

00007960 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7960:	b500      	push	{lr}
    7962:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7964:	f7f9 fbda 	bl	111c <Sys_GetCoreID>
    7968:	4603      	mov	r3, r0
    796a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    796c:	4a0d      	ldr	r2, [pc, #52]	; (79a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    796e:	9b01      	ldr	r3, [sp, #4]
    7970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7974:	1e5a      	subs	r2, r3, #1
    7976:	490b      	ldr	r1, [pc, #44]	; (79a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7978:	9b01      	ldr	r3, [sp, #4]
    797a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    797e:	4a0a      	ldr	r2, [pc, #40]	; (79a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    7980:	9b01      	ldr	r3, [sp, #4]
    7982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7986:	f003 0301 	and.w	r3, r3, #1
    798a:	2b00      	cmp	r3, #0
    798c:	d106      	bne.n	799c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    798e:	4a05      	ldr	r2, [pc, #20]	; (79a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7990:	9b01      	ldr	r3, [sp, #4]
    7992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7996:	2b00      	cmp	r3, #0
    7998:	d100      	bne.n	799c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    799a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    799c:	bf00      	nop
    799e:	b003      	add	sp, #12
    79a0:	f85d fb04 	ldr.w	pc, [sp], #4
    79a4:	1fff8d94 	.word	0x1fff8d94
    79a8:	1fff8d90 	.word	0x1fff8d90

000079ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    79ac:	b500      	push	{lr}
    79ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79b0:	f7f9 fbb4 	bl	111c <Sys_GetCoreID>
    79b4:	4603      	mov	r3, r0
    79b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    79b8:	4a10      	ldr	r2, [pc, #64]	; (79fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    79ba:	9b01      	ldr	r3, [sp, #4]
    79bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d10d      	bne.n	79e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    79c4:	f7f9 f8c6 	bl	b54 <Port_schm_read_msr>
    79c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    79ca:	9b00      	ldr	r3, [sp, #0]
    79cc:	f003 0301 	and.w	r3, r3, #1
    79d0:	2b00      	cmp	r3, #0
    79d2:	d100      	bne.n	79d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    79d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    79d6:	490a      	ldr	r1, [pc, #40]	; (7a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    79d8:	9b01      	ldr	r3, [sp, #4]
    79da:	9a00      	ldr	r2, [sp, #0]
    79dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    79e0:	4a06      	ldr	r2, [pc, #24]	; (79fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    79e2:	9b01      	ldr	r3, [sp, #4]
    79e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79e8:	1c5a      	adds	r2, r3, #1
    79ea:	4904      	ldr	r1, [pc, #16]	; (79fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    79ec:	9b01      	ldr	r3, [sp, #4]
    79ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79f2:	bf00      	nop
    79f4:	b003      	add	sp, #12
    79f6:	f85d fb04 	ldr.w	pc, [sp], #4
    79fa:	bf00      	nop
    79fc:	1fff8d9c 	.word	0x1fff8d9c
    7a00:	1fff8d98 	.word	0x1fff8d98

00007a04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7a04:	b500      	push	{lr}
    7a06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a08:	f7f9 fb88 	bl	111c <Sys_GetCoreID>
    7a0c:	4603      	mov	r3, r0
    7a0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    7a10:	4a0d      	ldr	r2, [pc, #52]	; (7a48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7a12:	9b01      	ldr	r3, [sp, #4]
    7a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a18:	1e5a      	subs	r2, r3, #1
    7a1a:	490b      	ldr	r1, [pc, #44]	; (7a48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7a1c:	9b01      	ldr	r3, [sp, #4]
    7a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    7a22:	4a0a      	ldr	r2, [pc, #40]	; (7a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    7a24:	9b01      	ldr	r3, [sp, #4]
    7a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a2a:	f003 0301 	and.w	r3, r3, #1
    7a2e:	2b00      	cmp	r3, #0
    7a30:	d106      	bne.n	7a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    7a32:	4a05      	ldr	r2, [pc, #20]	; (7a48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7a34:	9b01      	ldr	r3, [sp, #4]
    7a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	d100      	bne.n	7a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a40:	bf00      	nop
    7a42:	b003      	add	sp, #12
    7a44:	f85d fb04 	ldr.w	pc, [sp], #4
    7a48:	1fff8d9c 	.word	0x1fff8d9c
    7a4c:	1fff8d98 	.word	0x1fff8d98

00007a50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7a50:	b500      	push	{lr}
    7a52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a54:	f7f9 fb62 	bl	111c <Sys_GetCoreID>
    7a58:	4603      	mov	r3, r0
    7a5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    7a5c:	4a10      	ldr	r2, [pc, #64]	; (7aa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7a5e:	9b01      	ldr	r3, [sp, #4]
    7a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a64:	2b00      	cmp	r3, #0
    7a66:	d10d      	bne.n	7a84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a68:	f7f9 f874 	bl	b54 <Port_schm_read_msr>
    7a6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a6e:	9b00      	ldr	r3, [sp, #0]
    7a70:	f003 0301 	and.w	r3, r3, #1
    7a74:	2b00      	cmp	r3, #0
    7a76:	d100      	bne.n	7a7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    7a7a:	490a      	ldr	r1, [pc, #40]	; (7aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    7a7c:	9b01      	ldr	r3, [sp, #4]
    7a7e:	9a00      	ldr	r2, [sp, #0]
    7a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    7a84:	4a06      	ldr	r2, [pc, #24]	; (7aa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7a86:	9b01      	ldr	r3, [sp, #4]
    7a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a8c:	1c5a      	adds	r2, r3, #1
    7a8e:	4904      	ldr	r1, [pc, #16]	; (7aa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7a90:	9b01      	ldr	r3, [sp, #4]
    7a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a96:	bf00      	nop
    7a98:	b003      	add	sp, #12
    7a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a9e:	bf00      	nop
    7aa0:	1fff8da4 	.word	0x1fff8da4
    7aa4:	1fff8da0 	.word	0x1fff8da0

00007aa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7aa8:	b500      	push	{lr}
    7aaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7aac:	f7f9 fb36 	bl	111c <Sys_GetCoreID>
    7ab0:	4603      	mov	r3, r0
    7ab2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    7ab4:	4a0d      	ldr	r2, [pc, #52]	; (7aec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7ab6:	9b01      	ldr	r3, [sp, #4]
    7ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7abc:	1e5a      	subs	r2, r3, #1
    7abe:	490b      	ldr	r1, [pc, #44]	; (7aec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7ac0:	9b01      	ldr	r3, [sp, #4]
    7ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    7ac6:	4a0a      	ldr	r2, [pc, #40]	; (7af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    7ac8:	9b01      	ldr	r3, [sp, #4]
    7aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ace:	f003 0301 	and.w	r3, r3, #1
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d106      	bne.n	7ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    7ad6:	4a05      	ldr	r2, [pc, #20]	; (7aec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7ad8:	9b01      	ldr	r3, [sp, #4]
    7ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d100      	bne.n	7ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ae2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ae4:	bf00      	nop
    7ae6:	b003      	add	sp, #12
    7ae8:	f85d fb04 	ldr.w	pc, [sp], #4
    7aec:	1fff8da4 	.word	0x1fff8da4
    7af0:	1fff8da0 	.word	0x1fff8da0

00007af4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7af4:	b500      	push	{lr}
    7af6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7af8:	f7f9 fb10 	bl	111c <Sys_GetCoreID>
    7afc:	4603      	mov	r3, r0
    7afe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    7b00:	4a10      	ldr	r2, [pc, #64]	; (7b44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7b02:	9b01      	ldr	r3, [sp, #4]
    7b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b08:	2b00      	cmp	r3, #0
    7b0a:	d10d      	bne.n	7b28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7b0c:	f7f9 f822 	bl	b54 <Port_schm_read_msr>
    7b10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b12:	9b00      	ldr	r3, [sp, #0]
    7b14:	f003 0301 	and.w	r3, r3, #1
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d100      	bne.n	7b1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    7b1e:	490a      	ldr	r1, [pc, #40]	; (7b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    7b20:	9b01      	ldr	r3, [sp, #4]
    7b22:	9a00      	ldr	r2, [sp, #0]
    7b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7b28:	4a06      	ldr	r2, [pc, #24]	; (7b44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7b2a:	9b01      	ldr	r3, [sp, #4]
    7b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b30:	1c5a      	adds	r2, r3, #1
    7b32:	4904      	ldr	r1, [pc, #16]	; (7b44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7b34:	9b01      	ldr	r3, [sp, #4]
    7b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b3a:	bf00      	nop
    7b3c:	b003      	add	sp, #12
    7b3e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b42:	bf00      	nop
    7b44:	1fff8dac 	.word	0x1fff8dac
    7b48:	1fff8da8 	.word	0x1fff8da8

00007b4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7b4c:	b500      	push	{lr}
    7b4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b50:	f7f9 fae4 	bl	111c <Sys_GetCoreID>
    7b54:	4603      	mov	r3, r0
    7b56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7b58:	4a0d      	ldr	r2, [pc, #52]	; (7b90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7b5a:	9b01      	ldr	r3, [sp, #4]
    7b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b60:	1e5a      	subs	r2, r3, #1
    7b62:	490b      	ldr	r1, [pc, #44]	; (7b90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7b64:	9b01      	ldr	r3, [sp, #4]
    7b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    7b6a:	4a0a      	ldr	r2, [pc, #40]	; (7b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    7b6c:	9b01      	ldr	r3, [sp, #4]
    7b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b72:	f003 0301 	and.w	r3, r3, #1
    7b76:	2b00      	cmp	r3, #0
    7b78:	d106      	bne.n	7b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    7b7a:	4a05      	ldr	r2, [pc, #20]	; (7b90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7b7c:	9b01      	ldr	r3, [sp, #4]
    7b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b82:	2b00      	cmp	r3, #0
    7b84:	d100      	bne.n	7b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7b88:	bf00      	nop
    7b8a:	b003      	add	sp, #12
    7b8c:	f85d fb04 	ldr.w	pc, [sp], #4
    7b90:	1fff8dac 	.word	0x1fff8dac
    7b94:	1fff8da8 	.word	0x1fff8da8

00007b98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7b98:	b500      	push	{lr}
    7b9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b9c:	f7f9 fabe 	bl	111c <Sys_GetCoreID>
    7ba0:	4603      	mov	r3, r0
    7ba2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    7ba4:	4a10      	ldr	r2, [pc, #64]	; (7be8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7ba6:	9b01      	ldr	r3, [sp, #4]
    7ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bac:	2b00      	cmp	r3, #0
    7bae:	d10d      	bne.n	7bcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7bb0:	f7f8 ffd0 	bl	b54 <Port_schm_read_msr>
    7bb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7bb6:	9b00      	ldr	r3, [sp, #0]
    7bb8:	f003 0301 	and.w	r3, r3, #1
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	d100      	bne.n	7bc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7bc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    7bc2:	490a      	ldr	r1, [pc, #40]	; (7bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    7bc4:	9b01      	ldr	r3, [sp, #4]
    7bc6:	9a00      	ldr	r2, [sp, #0]
    7bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    7bcc:	4a06      	ldr	r2, [pc, #24]	; (7be8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7bce:	9b01      	ldr	r3, [sp, #4]
    7bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd4:	1c5a      	adds	r2, r3, #1
    7bd6:	4904      	ldr	r1, [pc, #16]	; (7be8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7bd8:	9b01      	ldr	r3, [sp, #4]
    7bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7bde:	bf00      	nop
    7be0:	b003      	add	sp, #12
    7be2:	f85d fb04 	ldr.w	pc, [sp], #4
    7be6:	bf00      	nop
    7be8:	1fff8db4 	.word	0x1fff8db4
    7bec:	1fff8db0 	.word	0x1fff8db0

00007bf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7bf0:	b500      	push	{lr}
    7bf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7bf4:	f7f9 fa92 	bl	111c <Sys_GetCoreID>
    7bf8:	4603      	mov	r3, r0
    7bfa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    7bfc:	4a0d      	ldr	r2, [pc, #52]	; (7c34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c04:	1e5a      	subs	r2, r3, #1
    7c06:	490b      	ldr	r1, [pc, #44]	; (7c34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7c08:	9b01      	ldr	r3, [sp, #4]
    7c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    7c0e:	4a0a      	ldr	r2, [pc, #40]	; (7c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    7c10:	9b01      	ldr	r3, [sp, #4]
    7c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c16:	f003 0301 	and.w	r3, r3, #1
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	d106      	bne.n	7c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    7c1e:	4a05      	ldr	r2, [pc, #20]	; (7c34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7c20:	9b01      	ldr	r3, [sp, #4]
    7c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c26:	2b00      	cmp	r3, #0
    7c28:	d100      	bne.n	7c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7c2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7c2c:	bf00      	nop
    7c2e:	b003      	add	sp, #12
    7c30:	f85d fb04 	ldr.w	pc, [sp], #4
    7c34:	1fff8db4 	.word	0x1fff8db4
    7c38:	1fff8db0 	.word	0x1fff8db0

00007c3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7c3c:	b500      	push	{lr}
    7c3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c40:	f7f9 fa6c 	bl	111c <Sys_GetCoreID>
    7c44:	4603      	mov	r3, r0
    7c46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7c48:	4a10      	ldr	r2, [pc, #64]	; (7c8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7c4a:	9b01      	ldr	r3, [sp, #4]
    7c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c50:	2b00      	cmp	r3, #0
    7c52:	d10d      	bne.n	7c70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7c54:	f7f8 ff7e 	bl	b54 <Port_schm_read_msr>
    7c58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7c5a:	9b00      	ldr	r3, [sp, #0]
    7c5c:	f003 0301 	and.w	r3, r3, #1
    7c60:	2b00      	cmp	r3, #0
    7c62:	d100      	bne.n	7c66 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7c64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7c66:	490a      	ldr	r1, [pc, #40]	; (7c90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7c68:	9b01      	ldr	r3, [sp, #4]
    7c6a:	9a00      	ldr	r2, [sp, #0]
    7c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    7c70:	4a06      	ldr	r2, [pc, #24]	; (7c8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7c72:	9b01      	ldr	r3, [sp, #4]
    7c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c78:	1c5a      	adds	r2, r3, #1
    7c7a:	4904      	ldr	r1, [pc, #16]	; (7c8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7c7c:	9b01      	ldr	r3, [sp, #4]
    7c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c82:	bf00      	nop
    7c84:	b003      	add	sp, #12
    7c86:	f85d fb04 	ldr.w	pc, [sp], #4
    7c8a:	bf00      	nop
    7c8c:	1fff8dbc 	.word	0x1fff8dbc
    7c90:	1fff8db8 	.word	0x1fff8db8

00007c94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7c94:	b500      	push	{lr}
    7c96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c98:	f7f9 fa40 	bl	111c <Sys_GetCoreID>
    7c9c:	4603      	mov	r3, r0
    7c9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    7ca0:	4a0d      	ldr	r2, [pc, #52]	; (7cd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7ca2:	9b01      	ldr	r3, [sp, #4]
    7ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ca8:	1e5a      	subs	r2, r3, #1
    7caa:	490b      	ldr	r1, [pc, #44]	; (7cd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7cac:	9b01      	ldr	r3, [sp, #4]
    7cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    7cb2:	4a0a      	ldr	r2, [pc, #40]	; (7cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    7cb4:	9b01      	ldr	r3, [sp, #4]
    7cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cba:	f003 0301 	and.w	r3, r3, #1
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d106      	bne.n	7cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    7cc2:	4a05      	ldr	r2, [pc, #20]	; (7cd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7cc4:	9b01      	ldr	r3, [sp, #4]
    7cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d100      	bne.n	7cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7cce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7cd0:	bf00      	nop
    7cd2:	b003      	add	sp, #12
    7cd4:	f85d fb04 	ldr.w	pc, [sp], #4
    7cd8:	1fff8dbc 	.word	0x1fff8dbc
    7cdc:	1fff8db8 	.word	0x1fff8db8

00007ce0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7ce0:	b500      	push	{lr}
    7ce2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ce4:	f7f9 fa1a 	bl	111c <Sys_GetCoreID>
    7ce8:	4603      	mov	r3, r0
    7cea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    7cec:	4a10      	ldr	r2, [pc, #64]	; (7d30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7cee:	9b01      	ldr	r3, [sp, #4]
    7cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	d10d      	bne.n	7d14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7cf8:	f7f8 ff2c 	bl	b54 <Port_schm_read_msr>
    7cfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7cfe:	9b00      	ldr	r3, [sp, #0]
    7d00:	f003 0301 	and.w	r3, r3, #1
    7d04:	2b00      	cmp	r3, #0
    7d06:	d100      	bne.n	7d0a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7d08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    7d0a:	490a      	ldr	r1, [pc, #40]	; (7d34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    7d0c:	9b01      	ldr	r3, [sp, #4]
    7d0e:	9a00      	ldr	r2, [sp, #0]
    7d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    7d14:	4a06      	ldr	r2, [pc, #24]	; (7d30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7d16:	9b01      	ldr	r3, [sp, #4]
    7d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d1c:	1c5a      	adds	r2, r3, #1
    7d1e:	4904      	ldr	r1, [pc, #16]	; (7d30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7d20:	9b01      	ldr	r3, [sp, #4]
    7d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d26:	bf00      	nop
    7d28:	b003      	add	sp, #12
    7d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    7d2e:	bf00      	nop
    7d30:	1fff8dc4 	.word	0x1fff8dc4
    7d34:	1fff8dc0 	.word	0x1fff8dc0

00007d38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7d38:	b500      	push	{lr}
    7d3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d3c:	f7f9 f9ee 	bl	111c <Sys_GetCoreID>
    7d40:	4603      	mov	r3, r0
    7d42:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    7d44:	4a0d      	ldr	r2, [pc, #52]	; (7d7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7d46:	9b01      	ldr	r3, [sp, #4]
    7d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d4c:	1e5a      	subs	r2, r3, #1
    7d4e:	490b      	ldr	r1, [pc, #44]	; (7d7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7d50:	9b01      	ldr	r3, [sp, #4]
    7d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    7d56:	4a0a      	ldr	r2, [pc, #40]	; (7d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    7d58:	9b01      	ldr	r3, [sp, #4]
    7d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d5e:	f003 0301 	and.w	r3, r3, #1
    7d62:	2b00      	cmp	r3, #0
    7d64:	d106      	bne.n	7d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    7d66:	4a05      	ldr	r2, [pc, #20]	; (7d7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7d68:	9b01      	ldr	r3, [sp, #4]
    7d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d6e:	2b00      	cmp	r3, #0
    7d70:	d100      	bne.n	7d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7d72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7d74:	bf00      	nop
    7d76:	b003      	add	sp, #12
    7d78:	f85d fb04 	ldr.w	pc, [sp], #4
    7d7c:	1fff8dc4 	.word	0x1fff8dc4
    7d80:	1fff8dc0 	.word	0x1fff8dc0

00007d84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7d84:	b500      	push	{lr}
    7d86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d88:	f7f9 f9c8 	bl	111c <Sys_GetCoreID>
    7d8c:	4603      	mov	r3, r0
    7d8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    7d90:	4a10      	ldr	r2, [pc, #64]	; (7dd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7d92:	9b01      	ldr	r3, [sp, #4]
    7d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d10d      	bne.n	7db8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7d9c:	f7f8 feda 	bl	b54 <Port_schm_read_msr>
    7da0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7da2:	9b00      	ldr	r3, [sp, #0]
    7da4:	f003 0301 	and.w	r3, r3, #1
    7da8:	2b00      	cmp	r3, #0
    7daa:	d100      	bne.n	7dae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7dac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    7dae:	490a      	ldr	r1, [pc, #40]	; (7dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    7db0:	9b01      	ldr	r3, [sp, #4]
    7db2:	9a00      	ldr	r2, [sp, #0]
    7db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    7db8:	4a06      	ldr	r2, [pc, #24]	; (7dd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7dba:	9b01      	ldr	r3, [sp, #4]
    7dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dc0:	1c5a      	adds	r2, r3, #1
    7dc2:	4904      	ldr	r1, [pc, #16]	; (7dd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7dc4:	9b01      	ldr	r3, [sp, #4]
    7dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dca:	bf00      	nop
    7dcc:	b003      	add	sp, #12
    7dce:	f85d fb04 	ldr.w	pc, [sp], #4
    7dd2:	bf00      	nop
    7dd4:	1fff8dcc 	.word	0x1fff8dcc
    7dd8:	1fff8dc8 	.word	0x1fff8dc8

00007ddc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7ddc:	b500      	push	{lr}
    7dde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7de0:	f7f9 f99c 	bl	111c <Sys_GetCoreID>
    7de4:	4603      	mov	r3, r0
    7de6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    7de8:	4a0d      	ldr	r2, [pc, #52]	; (7e20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7dea:	9b01      	ldr	r3, [sp, #4]
    7dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df0:	1e5a      	subs	r2, r3, #1
    7df2:	490b      	ldr	r1, [pc, #44]	; (7e20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7df4:	9b01      	ldr	r3, [sp, #4]
    7df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    7dfa:	4a0a      	ldr	r2, [pc, #40]	; (7e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    7dfc:	9b01      	ldr	r3, [sp, #4]
    7dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e02:	f003 0301 	and.w	r3, r3, #1
    7e06:	2b00      	cmp	r3, #0
    7e08:	d106      	bne.n	7e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    7e0a:	4a05      	ldr	r2, [pc, #20]	; (7e20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7e0c:	9b01      	ldr	r3, [sp, #4]
    7e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e12:	2b00      	cmp	r3, #0
    7e14:	d100      	bne.n	7e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7e16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7e18:	bf00      	nop
    7e1a:	b003      	add	sp, #12
    7e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e20:	1fff8dcc 	.word	0x1fff8dcc
    7e24:	1fff8dc8 	.word	0x1fff8dc8

00007e28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7e28:	b500      	push	{lr}
    7e2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e2c:	f7f9 f976 	bl	111c <Sys_GetCoreID>
    7e30:	4603      	mov	r3, r0
    7e32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    7e34:	4a10      	ldr	r2, [pc, #64]	; (7e78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7e36:	9b01      	ldr	r3, [sp, #4]
    7e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d10d      	bne.n	7e5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7e40:	f7f8 fe88 	bl	b54 <Port_schm_read_msr>
    7e44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7e46:	9b00      	ldr	r3, [sp, #0]
    7e48:	f003 0301 	and.w	r3, r3, #1
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d100      	bne.n	7e52 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7e50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    7e52:	490a      	ldr	r1, [pc, #40]	; (7e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    7e54:	9b01      	ldr	r3, [sp, #4]
    7e56:	9a00      	ldr	r2, [sp, #0]
    7e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    7e5c:	4a06      	ldr	r2, [pc, #24]	; (7e78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7e5e:	9b01      	ldr	r3, [sp, #4]
    7e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e64:	1c5a      	adds	r2, r3, #1
    7e66:	4904      	ldr	r1, [pc, #16]	; (7e78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7e68:	9b01      	ldr	r3, [sp, #4]
    7e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e6e:	bf00      	nop
    7e70:	b003      	add	sp, #12
    7e72:	f85d fb04 	ldr.w	pc, [sp], #4
    7e76:	bf00      	nop
    7e78:	1fff8dd4 	.word	0x1fff8dd4
    7e7c:	1fff8dd0 	.word	0x1fff8dd0

00007e80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7e80:	b500      	push	{lr}
    7e82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e84:	f7f9 f94a 	bl	111c <Sys_GetCoreID>
    7e88:	4603      	mov	r3, r0
    7e8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    7e8c:	4a0d      	ldr	r2, [pc, #52]	; (7ec4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7e8e:	9b01      	ldr	r3, [sp, #4]
    7e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e94:	1e5a      	subs	r2, r3, #1
    7e96:	490b      	ldr	r1, [pc, #44]	; (7ec4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7e98:	9b01      	ldr	r3, [sp, #4]
    7e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    7e9e:	4a0a      	ldr	r2, [pc, #40]	; (7ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    7ea0:	9b01      	ldr	r3, [sp, #4]
    7ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ea6:	f003 0301 	and.w	r3, r3, #1
    7eaa:	2b00      	cmp	r3, #0
    7eac:	d106      	bne.n	7ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    7eae:	4a05      	ldr	r2, [pc, #20]	; (7ec4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7eb0:	9b01      	ldr	r3, [sp, #4]
    7eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	d100      	bne.n	7ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7eba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ebc:	bf00      	nop
    7ebe:	b003      	add	sp, #12
    7ec0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ec4:	1fff8dd4 	.word	0x1fff8dd4
    7ec8:	1fff8dd0 	.word	0x1fff8dd0

00007ecc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7ecc:	b500      	push	{lr}
    7ece:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ed0:	f7f9 f924 	bl	111c <Sys_GetCoreID>
    7ed4:	4603      	mov	r3, r0
    7ed6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    7ed8:	4a10      	ldr	r2, [pc, #64]	; (7f1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7eda:	9b01      	ldr	r3, [sp, #4]
    7edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	d10d      	bne.n	7f00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ee4:	f7f8 fe36 	bl	b54 <Port_schm_read_msr>
    7ee8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7eea:	9b00      	ldr	r3, [sp, #0]
    7eec:	f003 0301 	and.w	r3, r3, #1
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d100      	bne.n	7ef6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7ef4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    7ef6:	490a      	ldr	r1, [pc, #40]	; (7f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    7ef8:	9b01      	ldr	r3, [sp, #4]
    7efa:	9a00      	ldr	r2, [sp, #0]
    7efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    7f00:	4a06      	ldr	r2, [pc, #24]	; (7f1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7f02:	9b01      	ldr	r3, [sp, #4]
    7f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f08:	1c5a      	adds	r2, r3, #1
    7f0a:	4904      	ldr	r1, [pc, #16]	; (7f1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7f0c:	9b01      	ldr	r3, [sp, #4]
    7f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7f12:	bf00      	nop
    7f14:	b003      	add	sp, #12
    7f16:	f85d fb04 	ldr.w	pc, [sp], #4
    7f1a:	bf00      	nop
    7f1c:	1fff8ddc 	.word	0x1fff8ddc
    7f20:	1fff8dd8 	.word	0x1fff8dd8

00007f24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7f24:	b500      	push	{lr}
    7f26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f28:	f7f9 f8f8 	bl	111c <Sys_GetCoreID>
    7f2c:	4603      	mov	r3, r0
    7f2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    7f30:	4a0d      	ldr	r2, [pc, #52]	; (7f68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7f32:	9b01      	ldr	r3, [sp, #4]
    7f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f38:	1e5a      	subs	r2, r3, #1
    7f3a:	490b      	ldr	r1, [pc, #44]	; (7f68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7f3c:	9b01      	ldr	r3, [sp, #4]
    7f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    7f42:	4a0a      	ldr	r2, [pc, #40]	; (7f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    7f44:	9b01      	ldr	r3, [sp, #4]
    7f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f4a:	f003 0301 	and.w	r3, r3, #1
    7f4e:	2b00      	cmp	r3, #0
    7f50:	d106      	bne.n	7f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    7f52:	4a05      	ldr	r2, [pc, #20]	; (7f68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7f54:	9b01      	ldr	r3, [sp, #4]
    7f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f5a:	2b00      	cmp	r3, #0
    7f5c:	d100      	bne.n	7f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7f5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7f60:	bf00      	nop
    7f62:	b003      	add	sp, #12
    7f64:	f85d fb04 	ldr.w	pc, [sp], #4
    7f68:	1fff8ddc 	.word	0x1fff8ddc
    7f6c:	1fff8dd8 	.word	0x1fff8dd8

00007f70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7f70:	b500      	push	{lr}
    7f72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f74:	f7f9 f8d2 	bl	111c <Sys_GetCoreID>
    7f78:	4603      	mov	r3, r0
    7f7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    7f7c:	4a10      	ldr	r2, [pc, #64]	; (7fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7f7e:	9b01      	ldr	r3, [sp, #4]
    7f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f84:	2b00      	cmp	r3, #0
    7f86:	d10d      	bne.n	7fa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7f88:	f7f8 fde4 	bl	b54 <Port_schm_read_msr>
    7f8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7f8e:	9b00      	ldr	r3, [sp, #0]
    7f90:	f003 0301 	and.w	r3, r3, #1
    7f94:	2b00      	cmp	r3, #0
    7f96:	d100      	bne.n	7f9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7f98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    7f9a:	490a      	ldr	r1, [pc, #40]	; (7fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    7f9c:	9b01      	ldr	r3, [sp, #4]
    7f9e:	9a00      	ldr	r2, [sp, #0]
    7fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    7fa4:	4a06      	ldr	r2, [pc, #24]	; (7fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7fa6:	9b01      	ldr	r3, [sp, #4]
    7fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fac:	1c5a      	adds	r2, r3, #1
    7fae:	4904      	ldr	r1, [pc, #16]	; (7fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7fb0:	9b01      	ldr	r3, [sp, #4]
    7fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7fb6:	bf00      	nop
    7fb8:	b003      	add	sp, #12
    7fba:	f85d fb04 	ldr.w	pc, [sp], #4
    7fbe:	bf00      	nop
    7fc0:	1fff8de4 	.word	0x1fff8de4
    7fc4:	1fff8de0 	.word	0x1fff8de0

00007fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7fc8:	b500      	push	{lr}
    7fca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7fcc:	f7f9 f8a6 	bl	111c <Sys_GetCoreID>
    7fd0:	4603      	mov	r3, r0
    7fd2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    7fd4:	4a0d      	ldr	r2, [pc, #52]	; (800c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7fd6:	9b01      	ldr	r3, [sp, #4]
    7fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fdc:	1e5a      	subs	r2, r3, #1
    7fde:	490b      	ldr	r1, [pc, #44]	; (800c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7fe0:	9b01      	ldr	r3, [sp, #4]
    7fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    7fe6:	4a0a      	ldr	r2, [pc, #40]	; (8010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    7fe8:	9b01      	ldr	r3, [sp, #4]
    7fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fee:	f003 0301 	and.w	r3, r3, #1
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	d106      	bne.n	8004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    7ff6:	4a05      	ldr	r2, [pc, #20]	; (800c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7ff8:	9b01      	ldr	r3, [sp, #4]
    7ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ffe:	2b00      	cmp	r3, #0
    8000:	d100      	bne.n	8004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8002:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8004:	bf00      	nop
    8006:	b003      	add	sp, #12
    8008:	f85d fb04 	ldr.w	pc, [sp], #4
    800c:	1fff8de4 	.word	0x1fff8de4
    8010:	1fff8de0 	.word	0x1fff8de0

00008014 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    8014:	b500      	push	{lr}
    8016:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8018:	f7f9 f880 	bl	111c <Sys_GetCoreID>
    801c:	4603      	mov	r3, r0
    801e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    8020:	4a10      	ldr	r2, [pc, #64]	; (8064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    8022:	9b01      	ldr	r3, [sp, #4]
    8024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8028:	2b00      	cmp	r3, #0
    802a:	d10d      	bne.n	8048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    802c:	f7f8 fd92 	bl	b54 <Port_schm_read_msr>
    8030:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8032:	9b00      	ldr	r3, [sp, #0]
    8034:	f003 0301 	and.w	r3, r3, #1
    8038:	2b00      	cmp	r3, #0
    803a:	d100      	bne.n	803e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    803c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    803e:	490a      	ldr	r1, [pc, #40]	; (8068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    8040:	9b01      	ldr	r3, [sp, #4]
    8042:	9a00      	ldr	r2, [sp, #0]
    8044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    8048:	4a06      	ldr	r2, [pc, #24]	; (8064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    804a:	9b01      	ldr	r3, [sp, #4]
    804c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8050:	1c5a      	adds	r2, r3, #1
    8052:	4904      	ldr	r1, [pc, #16]	; (8064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    8054:	9b01      	ldr	r3, [sp, #4]
    8056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    805a:	bf00      	nop
    805c:	b003      	add	sp, #12
    805e:	f85d fb04 	ldr.w	pc, [sp], #4
    8062:	bf00      	nop
    8064:	1fff8dec 	.word	0x1fff8dec
    8068:	1fff8de8 	.word	0x1fff8de8

0000806c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    806c:	b500      	push	{lr}
    806e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8070:	f7f9 f854 	bl	111c <Sys_GetCoreID>
    8074:	4603      	mov	r3, r0
    8076:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    8078:	4a0d      	ldr	r2, [pc, #52]	; (80b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    807a:	9b01      	ldr	r3, [sp, #4]
    807c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8080:	1e5a      	subs	r2, r3, #1
    8082:	490b      	ldr	r1, [pc, #44]	; (80b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    8084:	9b01      	ldr	r3, [sp, #4]
    8086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    808a:	4a0a      	ldr	r2, [pc, #40]	; (80b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    808c:	9b01      	ldr	r3, [sp, #4]
    808e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8092:	f003 0301 	and.w	r3, r3, #1
    8096:	2b00      	cmp	r3, #0
    8098:	d106      	bne.n	80a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    809a:	4a05      	ldr	r2, [pc, #20]	; (80b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    809c:	9b01      	ldr	r3, [sp, #4]
    809e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80a2:	2b00      	cmp	r3, #0
    80a4:	d100      	bne.n	80a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    80a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    80a8:	bf00      	nop
    80aa:	b003      	add	sp, #12
    80ac:	f85d fb04 	ldr.w	pc, [sp], #4
    80b0:	1fff8dec 	.word	0x1fff8dec
    80b4:	1fff8de8 	.word	0x1fff8de8

000080b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    80b8:	b500      	push	{lr}
    80ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80bc:	f7f9 f82e 	bl	111c <Sys_GetCoreID>
    80c0:	4603      	mov	r3, r0
    80c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    80c4:	4a10      	ldr	r2, [pc, #64]	; (8108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    80c6:	9b01      	ldr	r3, [sp, #4]
    80c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80cc:	2b00      	cmp	r3, #0
    80ce:	d10d      	bne.n	80ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    80d0:	f7f8 fd40 	bl	b54 <Port_schm_read_msr>
    80d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    80d6:	9b00      	ldr	r3, [sp, #0]
    80d8:	f003 0301 	and.w	r3, r3, #1
    80dc:	2b00      	cmp	r3, #0
    80de:	d100      	bne.n	80e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    80e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    80e2:	490a      	ldr	r1, [pc, #40]	; (810c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    80e4:	9b01      	ldr	r3, [sp, #4]
    80e6:	9a00      	ldr	r2, [sp, #0]
    80e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    80ec:	4a06      	ldr	r2, [pc, #24]	; (8108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    80ee:	9b01      	ldr	r3, [sp, #4]
    80f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f4:	1c5a      	adds	r2, r3, #1
    80f6:	4904      	ldr	r1, [pc, #16]	; (8108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    80f8:	9b01      	ldr	r3, [sp, #4]
    80fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80fe:	bf00      	nop
    8100:	b003      	add	sp, #12
    8102:	f85d fb04 	ldr.w	pc, [sp], #4
    8106:	bf00      	nop
    8108:	1fff8df4 	.word	0x1fff8df4
    810c:	1fff8df0 	.word	0x1fff8df0

00008110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    8110:	b500      	push	{lr}
    8112:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8114:	f7f9 f802 	bl	111c <Sys_GetCoreID>
    8118:	4603      	mov	r3, r0
    811a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    811c:	4a0d      	ldr	r2, [pc, #52]	; (8154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    811e:	9b01      	ldr	r3, [sp, #4]
    8120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8124:	1e5a      	subs	r2, r3, #1
    8126:	490b      	ldr	r1, [pc, #44]	; (8154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    8128:	9b01      	ldr	r3, [sp, #4]
    812a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    812e:	4a0a      	ldr	r2, [pc, #40]	; (8158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    8130:	9b01      	ldr	r3, [sp, #4]
    8132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8136:	f003 0301 	and.w	r3, r3, #1
    813a:	2b00      	cmp	r3, #0
    813c:	d106      	bne.n	814c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    813e:	4a05      	ldr	r2, [pc, #20]	; (8154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    8140:	9b01      	ldr	r3, [sp, #4]
    8142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8146:	2b00      	cmp	r3, #0
    8148:	d100      	bne.n	814c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    814a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    814c:	bf00      	nop
    814e:	b003      	add	sp, #12
    8150:	f85d fb04 	ldr.w	pc, [sp], #4
    8154:	1fff8df4 	.word	0x1fff8df4
    8158:	1fff8df0 	.word	0x1fff8df0

0000815c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    815c:	b500      	push	{lr}
    815e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8160:	f7f8 ffdc 	bl	111c <Sys_GetCoreID>
    8164:	4603      	mov	r3, r0
    8166:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    8168:	4a10      	ldr	r2, [pc, #64]	; (81ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    816a:	9b01      	ldr	r3, [sp, #4]
    816c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8170:	2b00      	cmp	r3, #0
    8172:	d10d      	bne.n	8190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8174:	f7f8 fcee 	bl	b54 <Port_schm_read_msr>
    8178:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    817a:	9b00      	ldr	r3, [sp, #0]
    817c:	f003 0301 	and.w	r3, r3, #1
    8180:	2b00      	cmp	r3, #0
    8182:	d100      	bne.n	8186 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8184:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    8186:	490a      	ldr	r1, [pc, #40]	; (81b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    8188:	9b01      	ldr	r3, [sp, #4]
    818a:	9a00      	ldr	r2, [sp, #0]
    818c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    8190:	4a06      	ldr	r2, [pc, #24]	; (81ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    8192:	9b01      	ldr	r3, [sp, #4]
    8194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8198:	1c5a      	adds	r2, r3, #1
    819a:	4904      	ldr	r1, [pc, #16]	; (81ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    819c:	9b01      	ldr	r3, [sp, #4]
    819e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81a2:	bf00      	nop
    81a4:	b003      	add	sp, #12
    81a6:	f85d fb04 	ldr.w	pc, [sp], #4
    81aa:	bf00      	nop
    81ac:	1fff8dfc 	.word	0x1fff8dfc
    81b0:	1fff8df8 	.word	0x1fff8df8

000081b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    81b4:	b500      	push	{lr}
    81b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81b8:	f7f8 ffb0 	bl	111c <Sys_GetCoreID>
    81bc:	4603      	mov	r3, r0
    81be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    81c0:	4a0d      	ldr	r2, [pc, #52]	; (81f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    81c2:	9b01      	ldr	r3, [sp, #4]
    81c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81c8:	1e5a      	subs	r2, r3, #1
    81ca:	490b      	ldr	r1, [pc, #44]	; (81f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    81cc:	9b01      	ldr	r3, [sp, #4]
    81ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    81d2:	4a0a      	ldr	r2, [pc, #40]	; (81fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    81d4:	9b01      	ldr	r3, [sp, #4]
    81d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81da:	f003 0301 	and.w	r3, r3, #1
    81de:	2b00      	cmp	r3, #0
    81e0:	d106      	bne.n	81f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    81e2:	4a05      	ldr	r2, [pc, #20]	; (81f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    81e4:	9b01      	ldr	r3, [sp, #4]
    81e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d100      	bne.n	81f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    81ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    81f0:	bf00      	nop
    81f2:	b003      	add	sp, #12
    81f4:	f85d fb04 	ldr.w	pc, [sp], #4
    81f8:	1fff8dfc 	.word	0x1fff8dfc
    81fc:	1fff8df8 	.word	0x1fff8df8

00008200 <Fls_ACEraseRomEnd>:
    8200:	74747542 	.word	0x74747542
    8204:	31206e6f 	.word	0x31206e6f
    8208:	74636120 	.word	0x74636120
    820c:	3a6e6f69 	.word	0x3a6e6f69
    8210:	4e495320 	.word	0x4e495320
    8214:	5f454c47 	.word	0x5f454c47
    8218:	43494c43 	.word	0x43494c43
    821c:	000a204b 	.word	0x000a204b
    8220:	74747542 	.word	0x74747542
    8224:	31206e6f 	.word	0x31206e6f
    8228:	74636120 	.word	0x74636120
    822c:	3a6e6f69 	.word	0x3a6e6f69
    8230:	554f4420 	.word	0x554f4420
    8234:	5f454c42 	.word	0x5f454c42
    8238:	43494c43 	.word	0x43494c43
    823c:	000a204b 	.word	0x000a204b
    8240:	74747542 	.word	0x74747542
    8244:	31206e6f 	.word	0x31206e6f
    8248:	74636120 	.word	0x74636120
    824c:	3a6e6f69 	.word	0x3a6e6f69
    8250:	4c4f4820 	.word	0x4c4f4820
    8254:	4c435f44 	.word	0x4c435f44
    8258:	204b4349 	.word	0x204b4349
    825c:	0000000a 	.word	0x0000000a
    8260:	74747542 	.word	0x74747542
    8264:	31206e6f 	.word	0x31206e6f
    8268:	74636120 	.word	0x74636120
    826c:	3a6e6f69 	.word	0x3a6e6f69
    8270:	4c455220 	.word	0x4c455220
    8274:	45534145 	.word	0x45534145
    8278:	00000a20 	.word	0x00000a20
    827c:	74747542 	.word	0x74747542
    8280:	32206e6f 	.word	0x32206e6f
    8284:	74636120 	.word	0x74636120
    8288:	3a6e6f69 	.word	0x3a6e6f69
    828c:	4e495320 	.word	0x4e495320
    8290:	5f454c47 	.word	0x5f454c47
    8294:	43494c43 	.word	0x43494c43
    8298:	000a204b 	.word	0x000a204b
    829c:	74747542 	.word	0x74747542
    82a0:	32206e6f 	.word	0x32206e6f
    82a4:	74636120 	.word	0x74636120
    82a8:	3a6e6f69 	.word	0x3a6e6f69
    82ac:	554f4420 	.word	0x554f4420
    82b0:	5f454c42 	.word	0x5f454c42
    82b4:	43494c43 	.word	0x43494c43
    82b8:	000a204b 	.word	0x000a204b
    82bc:	74747542 	.word	0x74747542
    82c0:	32206e6f 	.word	0x32206e6f
    82c4:	74636120 	.word	0x74636120
    82c8:	3a6e6f69 	.word	0x3a6e6f69
    82cc:	4c4f4820 	.word	0x4c4f4820
    82d0:	4c435f44 	.word	0x4c435f44
    82d4:	204b4349 	.word	0x204b4349
    82d8:	0000000a 	.word	0x0000000a
    82dc:	74747542 	.word	0x74747542
    82e0:	32206e6f 	.word	0x32206e6f
    82e4:	74636120 	.word	0x74636120
    82e8:	3a6e6f69 	.word	0x3a6e6f69
    82ec:	4c455220 	.word	0x4c455220
    82f0:	45534145 	.word	0x45534145
    82f4:	00000a20 	.word	0x00000a20
    82f8:	74747542 	.word	0x74747542
    82fc:	33206e6f 	.word	0x33206e6f
    8300:	74636120 	.word	0x74636120
    8304:	3a6e6f69 	.word	0x3a6e6f69
    8308:	4e495320 	.word	0x4e495320
    830c:	5f454c47 	.word	0x5f454c47
    8310:	43494c43 	.word	0x43494c43
    8314:	000a204b 	.word	0x000a204b
    8318:	74747542 	.word	0x74747542
    831c:	33206e6f 	.word	0x33206e6f
    8320:	74636120 	.word	0x74636120
    8324:	3a6e6f69 	.word	0x3a6e6f69
    8328:	554f4420 	.word	0x554f4420
    832c:	5f454c42 	.word	0x5f454c42
    8330:	43494c43 	.word	0x43494c43
    8334:	000a204b 	.word	0x000a204b
    8338:	74747542 	.word	0x74747542
    833c:	33206e6f 	.word	0x33206e6f
    8340:	74636120 	.word	0x74636120
    8344:	3a6e6f69 	.word	0x3a6e6f69
    8348:	4c4f4820 	.word	0x4c4f4820
    834c:	4c435f44 	.word	0x4c435f44
    8350:	204b4349 	.word	0x204b4349
    8354:	0000000a 	.word	0x0000000a
    8358:	74747542 	.word	0x74747542
    835c:	33206e6f 	.word	0x33206e6f
    8360:	74636120 	.word	0x74636120
    8364:	3a6e6f69 	.word	0x3a6e6f69
    8368:	4c455220 	.word	0x4c455220
    836c:	45534145 	.word	0x45534145
    8370:	00000a20 	.word	0x00000a20
    8374:	6d726554 	.word	0x6d726554
    8378:	6c616e69 	.word	0x6c616e69
    837c:	00000000 	.word	0x00000000
    8380:	4c554e28 	.word	0x4c554e28
    8384:	0000294c 	.word	0x0000294c

00008388 <Clock_Ip_au8DividerCallbackIndex>:
    8388:	0e0d0c00 06030201 0a070409 000b0805     ................

00008398 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000083a8 <Clock_Ip_au8XoscCallbackIndex>:
    83a8:	00000100 00000000 00000000 00000000     ................

000083b8 <Clock_Ip_au8IrcoscCallbackIndex>:
    83b8:	03020100 00000004 00000000 00000000     ................

000083c8 <Clock_Ip_au8GateCallbackIndex>:
    83c8:	06010200 01040301 00000500 00000000     ................

000083d8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000083e8 <Clock_Ip_au8PllCallbackIndex>:
    83e8:	00000100 00000000 00000000 00000000     ................

000083f8 <Clock_Ip_au8SelectorCallbackIndex>:
    83f8:	0a090800 03020109 07060504 00000000     ................

00008408 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00008418 <Clock_Ip_au8CmuCallbackIndex>:
	...

00008428 <Clock_Ip_au8ClockFeatures>:
	...
    8438:	01000000 00000000 00000000 00000002     ................
    8448:	00000000 00000300 00000000 00040000     ................
    8458:	00000000 05000000 00000000 00000000     ................
    8468:	00000006 00000000 00000100 00000000     ................
    8478:	00010000 00000000 04000000 00000000     ................
    8488:	00000000 00000005 00000001 00000401     ................
    8498:	00000200 00050100 00030000 04020000     ................
    84a8:	04000000 02000000 00000005 00000005     ................
    84b8:	00000403 00000600 00050300 00070000     ................
    84c8:	05000000 00000000 00000000 00000006     ................
	...
    8508:	00050000 00000000 06000000 00000100     ................
    8518:	00000000 00030007 00000000 00000000     ................
    8528:	00000000 00060000 00000000 07000000     ................
    8538:	00000100 00000000 00030008 00000000     ................
	...
    8550:	00090000 00000000 0a000000 00000100     ................
    8560:	00000000 0003000b 00000000 00000000     ................
    8570:	00000000 000c0000 00000000 0d000000     ................
    8580:	00000100 00000000 0003000e 00000000     ................
    8590:	00000800 00000000 00090000 00000000     ................
    85a0:	0a000000 00000000 00000000 0000000b     ................
    85b0:	00000000 00000b01 00000000 000b0200     ................
    85c0:	00000000 0b030000 00000000 00000000     ................
	...
    85d8:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    85e8:	01000000 00000000 00000000 00000007     ................
    85f8:	00007300 00000700 00320000 00090000     .s........2.....
    8608:	02000000 07000000 00000000 00000021     ............!...
    8618:	00000009 00000400 00000900 00030000     ................
    8628:	00070000 61000000 07000000 00000000     .......a........
    8638:	00000024 00000007 00002500 00000700     $........%......
    8648:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    8658:	00000000 00000020 38000004 00003800     .... ......8.8..
    8668:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    8678:	04000000 00260000 00000026 66000004     ......&.&......f
    8688:	00006600 00000400 00370037 00040000     .f......7.7.....
    8698:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    86a8:	2e000004 00002e00 00000200 00404040     ............@@@.
    86b8:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    86c8:	0000006b 6c000004 00006c00 00000900     k......l.l......
    86d8:	00010000 00090000 00000000 07000000     ................
    86e8:	00000000 00000036 00000007 00003100     ....6........1..
    86f8:	00000700 00490000 00070000 4a000000     ......I........J
    8708:	07000000 00000000 0000004b 00000007     ........K.......
    8718:	00004c00 00000700 004d0000 00070000     .L........M.....
    8728:	3d000000 03000000 00000000 00000000     ...=............

00008738 <Clock_Ip_au16SelectorEntryHardwareValue>:
    8738:	01010a03 01010001 04040002 02000603     ................
    8748:	00010810 02020100 00000000 00000007     ................
    8758:	00000009 00000000 00000c0e 00000000     ................
	...

00008790 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    8790:	00020000 00000300 00000601 00000000     ................
	...

000087c0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    87c0:	00000700 00000000 02020000 01010303     ................
    87d0:	03020606 00000000 00000000 00000000     ................
	...

000087f0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    87f0:	00000001 00000000 02020000 01010303     ................
    8800:	03020606 00000000 00000000 00000000     ................
	...

00008820 <Clock_Ip_au8DividerValueHardwareValue>:
    8820:	00020100 00000003 00000004 00000000     ................
    8830:	00000005 00000000 00000000 00000000     ................
    8840:	00000006 00000000 00000000 00000000     ................
	...
    8860:	00000007                                ....

00008864 <Clock_Ip_apxScgPeriphAsyncDivs>:
    8864:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00008874 <Clock_Ip_aeSourceTypeClockName>:
    8874:	00000000 00000001 00000001 00000001     ................
    8884:	00000001 00000001 00000001 00000001     ................
    8894:	00000002 00000003 00000001 00000001     ................
    88a4:	00000001 00000001 00000002 00000002     ................
    88b4:	00000003 00000003 00000001 00000001     ................
    88c4:	00000004 00000004 00000004 00000004     ................
	...

00008930 <Clock_Ip_aeHwPllName>:
    8930:	00000009                                ....

00008934 <Clock_Ip_aeHwDfsName>:
    8934:	00000057                                W...

00008938 <Clock_Ip_axDividerCallbacks>:
    8938:	00002c79 00002c83 00002c9d 00002cb7     y,...,...,...,..
    8948:	00002cd1 00002ceb 00002d05 00002d1f     .,...,...-...-..
    8958:	00002d39 00002d53 00002d6d 00002d87     9-..S-..m-...-..
    8968:	00002da1 00002dbb 00002dd5              .-...-...-..

00008974 <Clock_Ip_axDividerTriggerCallbacks>:
    8974:	00003149 00003149                       I1..I1..

0000897c <Clock_Ip_axExtOscCallbacks>:
    897c:	00003155 00003155 00003155 0000315f     U1..U1..U1.._1..
    898c:	00003155 00003169 00003183 0000319d     U1..i1...1...1..
    899c:	00003221 00003235                       !2..52..

000089a4 <Clock_Ip_axFracDivCallbacks>:
    89a4:	000033f5 000033f5 000033ff              .3...3...3..

000089b0 <Clock_Ip_axGateCallbacks>:
    89b0:	00003419 00003423 00003523 0000353d     .4..#4..#5..=5..
    89c0:	000034d3 000034ed 00003483 0000349d     .4...4...4...4..
    89d0:	00003433 0000344d 00003573 0000358d     34..M4..s5...5..
    89e0:	000035c3 000035dd                       .5...5..

000089e8 <Clock_Ip_axIntOscCallbacks>:
    89e8:	00003789 00003789 00003793 0000379d     .7...7...7...7..
    89f8:	000037b7 000037d1 000037e5 000037ff     .7...7...7...7..
    8a08:	00003819 0000382d 00003847 00003861     .8..-8..G8..a8..
    8a18:	00003909 00003923 0000393d              .9..#9..=9..

00008a24 <Clock_Ip_axCmuCallbacks>:
    8a24:	00003ed9 00003ee3 00003eef 00003ed9     .>...>...>...>..

00008a34 <Clock_Ip_axPllCallbacks>:
    8a34:	00003ef9 00003ef9 00003f03 00003ef9     .>...>...?...>..
    8a44:	00003f0f 00003f19 00003f33 00003f4d     .?...?..3?..M?..
    8a54:	00003ff1 00003fdd                       .?...?..

00008a5c <Clock_Ip_axPcfsCallbacks>:
    8a5c:	0000414d                                MA..

00008a60 <Clock_Ip_axSelectorCallbacks>:
    8a60:	00004159 00004159 00004163 0000417d     YA..YA..cA..}A..
    8a70:	00004159 00004197 000041b1 000041cb     YA...A...A...A..
    8a80:	000041e5 000041ff 00004219 00004233     .A...A...B..3B..
    8a90:	0000424d 00004267 00004281 0000429b     MB..gB...B...B..
    8aa0:	000042b5 000042cf 000042e9 00004303     .B...B...B...C..
    8ab0:	0000431d 00004337                       .C..7C..

00008ab8 <ClockSource>:
    8ab8:	00000000 00000008 00000002 00000005     ................
	...
    8ad0:	00000009                                ....

00008ad4 <ResetReasonArray>:
    8ad4:	00000000 00000001 00000002 00000003     ................
    8ae4:	00000004 00000005 00000006 00000007     ................
    8af4:	00000008 00000009 0000000a 0000000b     ................
    8b04:	0000000c 0000000d 0000000e              ............

00008b10 <Port_au32PortCiPortBaseAddr>:
    8b10:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    8b20:	4004d000                                ...@

00008b24 <Port_au32PortCiGpioBaseAddr>:
    8b24:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    8b34:	400ff100                                ...@

00008b38 <ButtonsCfg>:
    8b38:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
    8b48:	0000000c 0000012c                       ....,...

00008b50 <LedsCfg>:
    8b50:	00000060 0000006f 00000070              `...o...p...

00008b5c <Mcu_aClockConfigPB>:
	...
    8b64:	1c000101 04000010 01000029 00000005     ........).......
    8b74:	00000001 00000000 00000057 00000000     ........W.......
    8b84:	00000000 00000008 007a1200 00000001     ..........z.....
    8b94:	00000001 00000000 00000057 00000000     ........W.......
    8ba4:	00000057 00000000 00000000 00000000     W...............
	...
    8bc4:	00000019 00000005 0000001a 00000002     ................
    8bd4:	0000001b 00000005 0000002a 00000005     ........*.......
    8be4:	00000028 0000000e 00000029 00000001     (.......).......
    8bf4:	00000056 0000001c 00000032 0000002a     V.......2...*...
    8c04:	0000002b 00000014 0000002c 00000014     +.......,.......
    8c14:	0000002d 00000014 0000002e 00000014     -...............
    8c24:	0000003f 00000000 00000040 00000000     ?.......@.......
    8c34:	00000041 00000000 00000042 00000000     A.......B.......
    8c44:	00000031 00000000 00000045 00000000     1.......E.......
    8c54:	00000046 00000000 00000047 00000000     F.......G.......
    8c64:	00000044 00000000 00000030 00000000     D.......0.......
    8c74:	0000003d 00000000 00000043 00000000     =.......C.......
    8c84:	00000049 00000000 0000004a 00000000     I.......J.......
    8c94:	0000004b 00000000 00000048 00000000     K.......H.......
    8ca4:	0000000c 00000001 00000000 0000000d     ................
    8cb4:	00000002 00000000 0000000e 00000001     ................
    8cc4:	00000000 0000000f 00000001 00000000     ................
    8cd4:	0000001d 00000001 00000000 0000001e     ................
    8ce4:	00000008 00000000 0000001f 00000001     ................
    8cf4:	00000000 00000021 00000001 00000000     ....!...........
    8d04:	00000022 00000002 00000000 00000023     "...........#...
    8d14:	00000001 00000000 00000025 00000003     ........%.......
    8d24:	00000000 00000026 00000004 00000000     ....&...........
    8d34:	00000027 00000002 00000000 00000032     '...........2...
    8d44:	00000001 00000000 00000048 00000001     ........H.......
    8d54:	00000001 00000056 00000001 00000001     ....V...........
    8d64:	00000057 00000000 00000000 00000057     W...........W...
	...
    8d7c:	00000057 00000000 00000000 00000057     W...........W...
	...
    8d94:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    8db0:	00000014 00007d00 00000015 00007d00     .....}.......}..
    8dc0:	00000016 00007d00 00000017 00008000     .....}..........
    8dd0:	00000012 00000001 00000013 00000001     ................
    8de0:	00000030 00000000 00000031 00000000     0.......1.......
    8df0:	00000032 00000000 00000033 00000000     2.......3.......
    8e00:	00000034 00000000 00000035 00000001     4.......5.......
    8e10:	00000036 00000000 00000037 00000001     6.......7.......
    8e20:	00000038 00000001 00000039 00000000     8.......9.......
    8e30:	0000003a 00000000 0000003b 00000000     :.......;.......
    8e40:	0000003c 00000000 0000003d 00000000     <.......=.......
    8e50:	0000003e 00000000 0000003f 00000000     >.......?.......
    8e60:	00000040 00000000 00000041 00000000     @.......A.......
    8e70:	00000042 00000000 00000043 00000000     B.......C.......
    8e80:	00000044 00000000 00000045 00000000     D.......E.......
    8e90:	00000046 00000000 00000047 00000000     F.......G.......
    8ea0:	00000048 00000000 00000049 00000000     H.......I.......
    8eb0:	0000004a 00000000 0000004b 00000000     J.......K.......
    8ec0:	0000004c 00000001 0000004d 00000001     L.......M.......
    8ed0:	0000004e 00000000 0000004f 00000000     N.......O.......
    8ee0:	00000050 00000001 00000051 00000001     P.......Q.......
    8ef0:	00000052 00000001 00000053 00000001     R.......S.......
    8f00:	00000054 00000001 00000055 00000000     T.......U.......
    8f10:	00000056 00000001 00000057 00000000     V.......W.......
    8f20:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00008f54 <Mcu_Config>:
    8f54:	0000005a 00000000 00000001 00000001     Z...............
    8f64:	000091dc 00008b5c 000091e8              ....\.......

00008f70 <OsIf_xPredefinedConfig>:
    8f70:	00000000 02dc6c00                       .....l..

00008f78 <OsIf_apxPredefinedConfig>:
    8f78:	00008f70                                p...

00008f7c <g_pin_mux_InitConfigArr>:
    8f7c:	4004c000 400ff0c0 00000010 00000002     ...@...@........
    8f8c:	00000001 00000002 00000000 00000000     ................
    8f9c:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    8fac:	00000011 00000002 00000001 00000001     ................
	...
    8fcc:	4004c000 400ff0c0 0000000f 00000002     ...@...@........
    8fdc:	00000001 00000002 00000000 00000000     ................
    8fec:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    8ffc:	00000000 00000002 00000001 00000002     ................
	...
    9018:	00000100 4004d000 400ff100 0000000c     .......@...@....
    9028:	00000002 00000001 00000001 00000000     ................
	...
    9044:	40049000 400ff000 0000000c 00000002     ...@...@........
    9054:	00000001 00000001 00000000 00000000     ................
	...

0000906c <au8Port_PartitionList>:
    906c:	00000001                                ....

00009070 <au32Port_PinToPartitionMap>:
    9070:	00000001 00000001 00000001 00000001     ................
    9080:	00000001 00000001                       ........

00009088 <Port_au16NoUnUsedPadsArrayDefault>:
    9088:	00010000 00030002 00070006 00090008     ................
    9098:	000d000b 000f000e 00110010 00210020     ............ .!.
    90a8:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    90b8:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    90c8:	00410040 00430042 00470046 00490048     @.A.B.C.F.G.H.I.
    90d8:	004b004a 004d004c 004f004e 00510050     J.K.L.M.N.O.P.Q.
    90e8:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    90f8:	006a0069 006c006b 006e006d 00810080     i.j.k.l.m.n.....
    9108:	00830082 00850084 00870086 00890088     ................
    9118:	008b008a 008e008d 0090008f              ............

00009124 <Port_UnUsedPin>:
    9124:	00000000 00000001 00000000              ............

00009130 <Port_aPinConfigDefault>:
    9130:	00000070 00000100 00000001 00000002     p...............
    9140:	00010001 00000071 00000100 00000000     ....q...........
    9150:	00000001 00010001 0000006f 00000100     ........o.......
    9160:	00000001 00000002 00010001 00000060     ............`...
    9170:	00000100 00000001 00000002 00010001     ................
    9180:	0000008c 00000100 00000000 00000001     ................
    9190:	00010001 0000000c 00000100 00000000     ................
    91a0:	00000001 00010001                       ........

000091a8 <Port_Config>:
    91a8:	004e0006 00009088 00009124 00009130     ..N.....$...0...
	...
    91c0:	00009070 0000906c 00008f7c              p...l...|...

000091cc <Power_Ip_RCM_ConfigPB>:
	...

000091d4 <Power_Ip_PMC_ConfigPB>:
    91d4:	00000000                                ....

000091d8 <Power_Ip_SMC_ConfigPB>:
    91d8:	00000000                                ....

000091dc <Power_Ip_aModeConfigPB>:
	...

000091e8 <Power_Ip_HwIPsConfigPB>:
    91e8:	000091cc 000091d4 000091d8              ............

000091f4 <_aInitStr.0>:
    91f4:	00000000 54540000 45522052 53454747     ......TTR REGGES
    9204:	00000000                                ....

00009208 <_aV2C.0>:
    9208:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00009218 <__INIT_TABLE>:
    9218:	00000002 	.word	0x00000002
    921c:	1fff8b10 	.word	0x1fff8b10
    9220:	00009240 	.word	0x00009240
    9224:	00009270 	.word	0x00009270
    9228:	1fff8800 	.word	0x1fff8800
    922c:	00000000 	.word	0x00000000
    9230:	00000310 	.word	0x00000310

00009234 <__ZERO_TABLE>:
    9234:	00000001 	.word	0x00000001
    9238:	1fff8b40 	.word	0x1fff8b40
    923c:	1fff92f0 	.word	0x1fff92f0
