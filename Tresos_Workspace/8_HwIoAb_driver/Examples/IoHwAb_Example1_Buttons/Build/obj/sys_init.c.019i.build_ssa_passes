EUnit_GetCoreID ()
{
  uint8 D.6106;

  <bb 2> :
  D.6106 = Sys_GetCoreID ();

  <bb 3> :
<L0>:
  return D.6106;

}


sys_stop ()
{
  <bb 2> :
  __asm__ __volatile__("  wfi");
  return;

}


sys_halt ()
{
  <bb 2> :
  __asm__ __volatile__("  wfi");
  return;

}


__attribute__((section (".systeminit")))
sys_init ()
{
  Std_ReturnType D.6104;

  <bb 2> :
  _1 = 1074151424B;
  _1->FIRCDIV = 513;
  _2 = 1074151424B;
  _2->FIRCCFG = 0;

  <bb 3> :
  _3 = 1074151424B;
  _4 = _3->FIRCCSR;
  _5 = _4 & 8388608;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _6 = 1074151424B;
  _6->FIRCCSR = 1;

  <bb 5> :
  _7 = 1074151424B;
  _8 = _7->FIRCCSR;
  _9 = _8 & 16777216;
  if (_9 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _10 = 1074151424B;
  _10->SIRCDIV = 513;
  _11 = 1074151424B;
  _11->SIRCCFG = 1;

  <bb 7> :
  _12 = 1074151424B;
  _13 = _12->SIRCCSR;
  _14 = _13 & 8388608;
  if (_14 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _15 = 1074151424B;
  _15->SIRCCSR = 1;

  <bb 9> :
  _16 = 1074151424B;
  _17 = _16->SIRCCSR;
  _18 = _17 & 16777216;
  if (_18 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _19 = 1074151424B;
  _19->SOSCDIV = 65793;
  _20 = 1074151424B;
  _20->SOSCCFG = 52;

  <bb 11> :
  _21 = 1074151424B;
  _22 = _21->SOSCCSR;
  _23 = _22 & 8388608;
  if (_23 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _24 = 1074151424B;
  _24->SOSCCSR = 5;

  <bb 13> :
  _25 = 1074151424B;
  _26 = _25->SOSCCSR;
  _27 = _26 & 16777216;
  if (_27 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :

  <bb 15> :
  _28 = 1074151424B;
  _29 = _28->SPLLCSR;
  _30 = _29 & 8388608;
  if (_30 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _31 = 1074151424B;
  _31->SPLLCSR = 0;
  _32 = 1074151424B;
  _32->SPLLDIV = 513;
  _33 = 1074151424B;
  _33->SPLLCFG = 262144;
  _34 = 1074151424B;
  _34->SPLLCSR = 1;

  <bb 17> :
  _35 = 1074151424B;
  _36 = _35->SPLLCSR;
  _37 = _36 & 16777216;
  if (_37 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _38 = 1074151424B;
  _38->RCCR = 100728851;
  _39 = 1074151424B;
  _39->VCCR = 33619971;
  _40 = 1074151424B;
  _40->HCCR = 100728850;
  _41 = 1074155520B;
  _42 = _41->PCCn[33];
  _43 = 1074155520B;
  _44 = _42 & 3221225471;
  _43->PCCn[33] = _44;
  _45 = 1074155520B;
  _46 = _45->PCCn[36];
  _47 = 1074155520B;
  _48 = _46 & 3221225471;
  _47->PCCn[36] = _48;
  _49 = 1074155520B;
  _50 = _49->PCCn[37];
  _51 = 1074155520B;
  _52 = _50 & 3221225471;
  _51->PCCn[37] = _52;
  _53 = 1074155520B;
  _54 = _53->PCCn[39];
  _55 = 1074155520B;
  _56 = _54 & 3221225471;
  _55->PCCn[39] = _56;
  _57 = 1074155520B;
  _58 = _57->PCCn[58];
  _59 = 1074155520B;
  _60 = _58 & 3221225471;
  _59->PCCn[58] = _60;
  _61 = 1074155520B;
  _62 = _61->PCCn[38];
  _63 = 1074155520B;
  _64 = _62 & 3221225471;
  _63->PCCn[38] = _64;
  _65 = 1074155520B;
  _66 = _65->PCCn[49];
  _67 = 1074155520B;
  _68 = _66 & 3221225471;
  _67->PCCn[49] = _68;
  _69 = 1074155520B;
  _70 = _69->PCCn[97];
  _71 = 1074155520B;
  _72 = _70 & 3221225471;
  _71->PCCn[97] = _72;
  _73 = 1074155520B;
  _74 = _73->PCCn[43];
  _75 = 1074155520B;
  _76 = _74 & 3221225471;
  _75->PCCn[43] = _76;
  _77 = 1074155520B;
  _78 = _77->PCCn[44];
  _79 = 1074155520B;
  _80 = _78 & 3221225471;
  _79->PCCn[44] = _80;
  _81 = 1074155520B;
  _82 = _81->PCCn[45];
  _83 = 1074155520B;
  _84 = _82 & 3221225471;
  _83->PCCn[45] = _84;
  _85 = 1074155520B;
  _86 = _85->PCCn[46];
  _87 = 1074155520B;
  _88 = _86 & 3221225471;
  _87->PCCn[46] = _88;
  _89 = 1074155520B;
  _90 = _89->PCCn[50];
  _91 = 1074155520B;
  _92 = _90 & 3221225471;
  _91->PCCn[50] = _92;
  _93 = 1074155520B;
  _94 = _93->PCCn[54];
  _95 = 1074155520B;
  _96 = _94 & 3221225471;
  _95->PCCn[54] = _96;
  _97 = 1074155520B;
  _98 = _97->PCCn[55];
  _99 = 1074155520B;
  _100 = _98 & 3221225471;
  _99->PCCn[55] = _100;
  _101 = 1074155520B;
  _102 = _101->PCCn[56];
  _103 = 1074155520B;
  _104 = _102 & 3221225471;
  _103->PCCn[56] = _104;
  _105 = 1074155520B;
  _106 = _105->PCCn[57];
  _107 = 1074155520B;
  _108 = _106 & 3221225471;
  _107->PCCn[57] = _108;
  _109 = 1074155520B;
  _110 = _109->PCCn[59];
  _111 = 1074155520B;
  _112 = _110 & 3221225471;
  _111->PCCn[59] = _112;
  _113 = 1074155520B;
  _114 = _113->PCCn[61];
  _115 = 1074155520B;
  _116 = _114 & 3221225471;
  _115->PCCn[61] = _116;
  _117 = 1074155520B;
  _118 = _117->PCCn[64];
  _119 = 1074155520B;
  _120 = _118 & 3221225471;
  _119->PCCn[64] = _120;
  _121 = 1074155520B;
  _122 = _121->PCCn[73];
  _123 = 1074155520B;
  _124 = _122 & 3221225471;
  _123->PCCn[73] = _124;
  _125 = 1074155520B;
  _126 = _125->PCCn[74];
  _127 = 1074155520B;
  _128 = _126 & 3221225471;
  _127->PCCn[74] = _128;
  _129 = 1074155520B;
  _130 = _129->PCCn[75];
  _131 = 1074155520B;
  _132 = _130 & 3221225471;
  _131->PCCn[75] = _132;
  _133 = 1074155520B;
  _134 = _133->PCCn[76];
  _135 = 1074155520B;
  _136 = _134 & 3221225471;
  _135->PCCn[76] = _136;
  _137 = 1074155520B;
  _138 = _137->PCCn[77];
  _139 = 1074155520B;
  _140 = _138 & 3221225471;
  _139->PCCn[77] = _140;
  _141 = 1074155520B;
  _142 = _141->PCCn[90];
  _143 = 1074155520B;
  _144 = _142 & 3221225471;
  _143->PCCn[90] = _144;
  _145 = 1074155520B;
  _146 = _145->PCCn[102];
  _147 = 1074155520B;
  _148 = _146 & 3221225471;
  _147->PCCn[102] = _148;
  _149 = 1074155520B;
  _150 = _149->PCCn[106];
  _151 = 1074155520B;
  _152 = _150 & 3221225471;
  _151->PCCn[106] = _152;
  _153 = 1074155520B;
  _154 = _153->PCCn[107];
  _155 = 1074155520B;
  _156 = _154 & 3221225471;
  _155->PCCn[107] = _156;
  _157 = 1074155520B;
  _158 = _157->PCCn[108];
  _159 = 1074155520B;
  _160 = _158 & 3221225471;
  _159->PCCn[108] = _160;
  _161 = 1074155520B;
  _162 = _161->PCCn[115];
  _163 = 1074155520B;
  _164 = _162 & 3221225471;
  _163->PCCn[115] = _164;
  _165 = 1074155520B;
  _165->PCCn[33] = 1124073472;
  _166 = 1074155520B;
  _166->PCCn[36] = 1124073472;
  _167 = 1074155520B;
  _167->PCCn[37] = 1124073472;
  _168 = 1074155520B;
  _168->PCCn[39] = 1124073472;
  _169 = 1074155520B;
  _169->PCCn[58] = 1124073472;
  _170 = 1074155520B;
  _170->PCCn[38] = 1124073472;
  _171 = 1074155520B;
  _171->PCCn[49] = 1124073472;
  _172 = 1074155520B;
  _172->PCCn[97] = 1124073472;
  _173 = 1074155520B;
  _173->PCCn[43] = 1124073472;
  _174 = 1074155520B;
  _174->PCCn[44] = 1124073472;
  _175 = 1074155520B;
  _175->PCCn[45] = 1124073472;
  _176 = 1074155520B;
  _176->PCCn[46] = 1124073472;
  _177 = 1074155520B;
  _177->PCCn[50] = 1124073472;
  _178 = 1074155520B;
  _178->PCCn[54] = 1124073472;
  _179 = 1074155520B;
  _179->PCCn[55] = 1124073472;
  _180 = 1074155520B;
  _180->PCCn[56] = 1124073472;
  _181 = 1074155520B;
  _181->PCCn[57] = 1124073472;
  _182 = 1074155520B;
  _182->PCCn[59] = 1124073472;
  _183 = 1074155520B;
  _183->PCCn[61] = 1124073472;
  _184 = 1074155520B;
  _184->PCCn[64] = 1124073472;
  _185 = 1074155520B;
  _185->PCCn[73] = 1124073472;
  _186 = 1074155520B;
  _186->PCCn[74] = 1124073472;
  _187 = 1074155520B;
  _187->PCCn[75] = 1124073472;
  _188 = 1074155520B;
  _188->PCCn[76] = 1124073472;
  _189 = 1074155520B;
  _189->PCCn[77] = 1124073472;
  _190 = 1074155520B;
  _190->PCCn[90] = 1124073472;
  _191 = 1074155520B;
  _191->PCCn[102] = 1124073472;
  _192 = 1074155520B;
  _192->PCCn[106] = 1124073472;
  _193 = 1074155520B;
  _193->PCCn[107] = 1124073472;
  _194 = 1074155520B;
  _194->PCCn[108] = 1124073472;
  _195 = 1074155520B;
  _195->PCCn[115] = 1124073472;
  _196 = 1073795072B;
  _196->CESR = 8475136;
  D.6104 = 0;

  <bb 19> :
<L24>:
  return D.6104;

}


sys_registerIsrHandler (uint8 irq_id, void (*int_function_t) (void) isr_handler)
{
  <bb 2> :
  __asm__ __volatile__(" cpsid i");
  _1 = 3758157064B;
  _2 = *_1;
  _3 = (long unsigned int) irq_id;
  _4 = _3 + 16;
  _5 = _4 << 2;
  _6 = _2 + _5;
  _7 = (volatile uint32 *) _6;
  isr_handler.0_8 = (long unsigned int) isr_handler;
  *_7 = isr_handler.0_8;
  __asm__ __volatile__(" cpsie i");
  return;

}


sys_enableIsrSource (uint8 id, uint8 prio)
{
  <bb 2> :
  NVIC_SetPriority (id, prio);
  NVIC_EnableIRQ (id);
  return;

}


sys_disableIsrSource (uint8 id)
{
  <bb 2> :
  NVIC_DisableIRQ (id);
  return;

}


sys_disableAllInterrupts ()
{
  <bb 2> :
  __asm__ __volatile__(" cpsid i");
  return;

}


sys_enableAllInterrupts ()
{
  <bb 2> :
  __asm__ __volatile__(" cpsie i");
  return;

}


