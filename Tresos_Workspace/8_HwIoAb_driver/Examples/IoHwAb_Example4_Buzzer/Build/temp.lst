
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000015f7 	.word	0x000015f7
  10:	000015f9 	.word	0x000015f9
  14:	000015fb 	.word	0x000015fb
  18:	000015fd 	.word	0x000015fd
	...
  2c:	000015ff 	.word	0x000015ff
  30:	00001601 	.word	0x00001601
  34:	00000000 	.word	0x00000000
  38:	00001603 	.word	0x00001603
  3c:	00001605 	.word	0x00001605
  40:	00001607 	.word	0x00001607
  44:	00001607 	.word	0x00001607
  48:	00001607 	.word	0x00001607
  4c:	00001607 	.word	0x00001607
  50:	00001607 	.word	0x00001607
  54:	00001607 	.word	0x00001607
  58:	00001607 	.word	0x00001607
  5c:	00001607 	.word	0x00001607
  60:	00001607 	.word	0x00001607
  64:	00001607 	.word	0x00001607
  68:	00001607 	.word	0x00001607
  6c:	00001607 	.word	0x00001607
  70:	00001607 	.word	0x00001607
  74:	00001607 	.word	0x00001607
  78:	00001607 	.word	0x00001607
  7c:	00001607 	.word	0x00001607
  80:	00001607 	.word	0x00001607
  84:	00001607 	.word	0x00001607
  88:	00001607 	.word	0x00001607
  8c:	00001607 	.word	0x00001607
  90:	00001607 	.word	0x00001607
  94:	00001607 	.word	0x00001607
  98:	00001607 	.word	0x00001607
  9c:	00001607 	.word	0x00001607
  a0:	00001607 	.word	0x00001607
  a4:	00001607 	.word	0x00001607
  a8:	00001607 	.word	0x00001607
  ac:	00001607 	.word	0x00001607
  b0:	00001607 	.word	0x00001607
  b4:	00001607 	.word	0x00001607
  b8:	00001607 	.word	0x00001607
  bc:	00001607 	.word	0x00001607
  c0:	00001607 	.word	0x00001607
  c4:	00001607 	.word	0x00001607
  c8:	00001607 	.word	0x00001607
  cc:	00001607 	.word	0x00001607
  d0:	00001607 	.word	0x00001607
  d4:	00001607 	.word	0x00001607
  d8:	00001607 	.word	0x00001607
  dc:	00001607 	.word	0x00001607
  e0:	00001607 	.word	0x00001607
  e4:	00001607 	.word	0x00001607
  e8:	00001607 	.word	0x00001607
  ec:	00001607 	.word	0x00001607
  f0:	00001607 	.word	0x00001607
  f4:	00001607 	.word	0x00001607
  f8:	00001607 	.word	0x00001607
  fc:	00001607 	.word	0x00001607
 100:	00001607 	.word	0x00001607
 104:	00001607 	.word	0x00001607
 108:	00001607 	.word	0x00001607
 10c:	00001607 	.word	0x00001607
 110:	00001607 	.word	0x00001607
 114:	00001607 	.word	0x00001607
 118:	00001607 	.word	0x00001607
 11c:	00001607 	.word	0x00001607
 120:	00001607 	.word	0x00001607
 124:	00001607 	.word	0x00001607
 128:	00001607 	.word	0x00001607
 12c:	00001607 	.word	0x00001607
 130:	00001607 	.word	0x00001607
 134:	00001607 	.word	0x00001607
 138:	00001607 	.word	0x00001607
 13c:	00001607 	.word	0x00001607
 140:	00001607 	.word	0x00001607
 144:	00001607 	.word	0x00001607
 148:	00001607 	.word	0x00001607
 14c:	00001607 	.word	0x00001607
 150:	00001607 	.word	0x00001607
 154:	00001607 	.word	0x00001607
 158:	00001607 	.word	0x00001607
 15c:	00001607 	.word	0x00001607
 160:	00001607 	.word	0x00001607
 164:	00001607 	.word	0x00001607
 168:	00001607 	.word	0x00001607
 16c:	00001607 	.word	0x00001607
 170:	00001607 	.word	0x00001607
 174:	00001607 	.word	0x00001607
 178:	00001607 	.word	0x00001607
 17c:	00001607 	.word	0x00001607
 180:	00001607 	.word	0x00001607
 184:	00001607 	.word	0x00001607
 188:	00001607 	.word	0x00001607
 18c:	00001607 	.word	0x00001607
 190:	00001607 	.word	0x00001607
 194:	00001607 	.word	0x00001607
 198:	00001607 	.word	0x00001607
 19c:	00001607 	.word	0x00001607
 1a0:	00001607 	.word	0x00001607
 1a4:	00001607 	.word	0x00001607
 1a8:	00001607 	.word	0x00001607
 1ac:	00001607 	.word	0x00001607
 1b0:	00001607 	.word	0x00001607
 1b4:	00001607 	.word	0x00001607
 1b8:	00001607 	.word	0x00001607
 1bc:	00001607 	.word	0x00001607
 1c0:	00001607 	.word	0x00001607
 1c4:	00001607 	.word	0x00001607
 1c8:	00001607 	.word	0x00001607
 1cc:	00001607 	.word	0x00001607
 1d0:	00001607 	.word	0x00001607
 1d4:	00001607 	.word	0x00001607
 1d8:	00001607 	.word	0x00001607
 1dc:	00001607 	.word	0x00001607
 1e0:	00001607 	.word	0x00001607
 1e4:	00001607 	.word	0x00001607
 1e8:	00001607 	.word	0x00001607
 1ec:	00001607 	.word	0x00001607
 1f0:	00001607 	.word	0x00001607
 1f4:	00001607 	.word	0x00001607
 1f8:	00001607 	.word	0x00001607
 1fc:	00001607 	.word	0x00001607
 200:	00001607 	.word	0x00001607
 204:	00001607 	.word	0x00001607
 208:	00001607 	.word	0x00001607
 20c:	00001607 	.word	0x00001607
 210:	00001607 	.word	0x00001607
 214:	00001607 	.word	0x00001607
 218:	00001607 	.word	0x00001607
 21c:	00001607 	.word	0x00001607
 220:	00001607 	.word	0x00001607
 224:	00001607 	.word	0x00001607
 228:	00001607 	.word	0x00001607
 22c:	00001607 	.word	0x00001607
 230:	00001607 	.word	0x00001607
 234:	00001607 	.word	0x00001607
 238:	00001607 	.word	0x00001607
 23c:	00001607 	.word	0x00001607
 240:	00001607 	.word	0x00001607
 244:	00001607 	.word	0x00001607
 248:	00001607 	.word	0x00001607
 24c:	00001607 	.word	0x00001607
 250:	00001607 	.word	0x00001607
 254:	00001607 	.word	0x00001607
 258:	00001607 	.word	0x00001607
 25c:	00001607 	.word	0x00001607
 260:	00001607 	.word	0x00001607
 264:	00001607 	.word	0x00001607
 268:	00001607 	.word	0x00001607
 26c:	00001607 	.word	0x00001607
 270:	00001607 	.word	0x00001607
 274:	00001607 	.word	0x00001607
 278:	00001607 	.word	0x00001607
 27c:	00001607 	.word	0x00001607
 280:	00001607 	.word	0x00001607
 284:	00001607 	.word	0x00001607
 288:	00001607 	.word	0x00001607
 28c:	00001607 	.word	0x00001607
 290:	00001607 	.word	0x00001607
 294:	00001607 	.word	0x00001607
 298:	00001607 	.word	0x00001607
 29c:	00001607 	.word	0x00001607
 2a0:	00001607 	.word	0x00001607
 2a4:	00001607 	.word	0x00001607
 2a8:	00001607 	.word	0x00001607
 2ac:	00001607 	.word	0x00001607
 2b0:	00001607 	.word	0x00001607
 2b4:	00001607 	.word	0x00001607
 2b8:	00001607 	.word	0x00001607
 2bc:	00001607 	.word	0x00001607
 2c0:	00001607 	.word	0x00001607
 2c4:	00001607 	.word	0x00001607
 2c8:	00001607 	.word	0x00001607
 2cc:	00001607 	.word	0x00001607
 2d0:	00001607 	.word	0x00001607
 2d4:	00001607 	.word	0x00001607
 2d8:	00001607 	.word	0x00001607
 2dc:	00001607 	.word	0x00001607
 2e0:	00001607 	.word	0x00001607
 2e4:	00001607 	.word	0x00001607
 2e8:	00001607 	.word	0x00001607
 2ec:	00001607 	.word	0x00001607
 2f0:	00001607 	.word	0x00001607
 2f4:	00001607 	.word	0x00001607
 2f8:	00001607 	.word	0x00001607
 2fc:	00001607 	.word	0x00001607
 300:	00001607 	.word	0x00001607
 304:	00001607 	.word	0x00001607
 308:	00001607 	.word	0x00001607
 30c:	00001607 	.word	0x00001607

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 ffef 	bl	1464 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f8ae 	bl	15ec <startup_go_to_user_mode>
     490:	f000 fa34 	bl	8fc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9784 	.word	0x1fff9784

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fff9 	bl	1590 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void Delay( uint32 ms );

/* This is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 fea0 	bl	2608 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 fe50 	bl	2570 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 fe60 	bl	25a2 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8fc:	b500      	push	{lr}
     8fe:	b083      	sub	sp, #12
    uint8 RealEvent = 0;    // Actual event of button.
     900:	2300      	movs	r3, #0
     902:	f88d 3006 	strb.w	r3, [sp, #6]

    EcuM_Init();
     906:	f000 fa09 	bl	d1c <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     90a:	f001 f80f 	bl	192c <SEGGER_RTT_Init>

    while( 1u )
    {
        HwIoAb_Buttons_MainFunction();
     90e:	f000 fac3 	bl	e98 <HwIoAb_Buttons_MainFunction>
        Delay( 10 );   
     912:	200a      	movs	r0, #10
     914:	f7ff ffcc 	bl	8b0 <Delay>

        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     918:	2300      	movs	r3, #0
     91a:	f88d 3007 	strb.w	r3, [sp, #7]
     91e:	e1ef      	b.n	d00 <main+0x404>
        {  
            RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     920:	f89d 3007 	ldrb.w	r3, [sp, #7]
     924:	4618      	mov	r0, r3
     926:	f000 fa99 	bl	e5c <HwIoAb_Buttons_GetEvent>
     92a:	4603      	mov	r3, r0
     92c:	f88d 3006 	strb.w	r3, [sp, #6]

            if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     930:	f89d 3006 	ldrb.w	r3, [sp, #6]
     934:	2b00      	cmp	r3, #0
     936:	f000 81db 	beq.w	cf0 <main+0x3f4>
            {
                switch( CurrentButton )
     93a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     93e:	2b02      	cmp	r3, #2
     940:	f000 8121 	beq.w	b86 <main+0x28a>
     944:	2b02      	cmp	r3, #2
     946:	f300 81d5 	bgt.w	cf4 <main+0x3f8>
     94a:	2b00      	cmp	r3, #0
     94c:	d003      	beq.n	956 <main+0x5a>
     94e:	2b01      	cmp	r3, #1
     950:	f000 808d 	beq.w	a6e <main+0x172>
                            break;
                        }
                    break;
                    default :
                      // If jump here is an error
                    break;
     954:	e1ce      	b.n	cf4 <main+0x3f8>
                        switch( RealEvent )
     956:	f89d 3006 	ldrb.w	r3, [sp, #6]
     95a:	3b01      	subs	r3, #1
     95c:	2b03      	cmp	r3, #3
     95e:	f200 8084 	bhi.w	a6a <main+0x16e>
     962:	a201      	add	r2, pc, #4	; (adr r2, 968 <main+0x6c>)
     964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     968:	00000979 	.word	0x00000979
     96c:	000009b3 	.word	0x000009b3
     970:	000009ed 	.word	0x000009ed
     974:	00000a27 	.word	0x00000a27
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     978:	2000      	movs	r0, #0
     97a:	f000 fc3b 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     97e:	49b6      	ldr	r1, [pc, #728]	; (c58 <main+0x35c>)
     980:	2000      	movs	r0, #0
     982:	f001 fb3b 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     986:	4bb5      	ldr	r3, [pc, #724]	; (c5c <main+0x360>)
     988:	681b      	ldr	r3, [r3, #0]
     98a:	330a      	adds	r3, #10
     98c:	4618      	mov	r0, r3
     98e:	f000 fc71 	bl	1274 <HwIoAb_Pots_GetValue>
                                SEGGER_RTT_printf( 0, "Pot 1 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     992:	4bb2      	ldr	r3, [pc, #712]	; (c5c <main+0x360>)
     994:	681b      	ldr	r3, [r3, #0]
     996:	895b      	ldrh	r3, [r3, #10]
     998:	461a      	mov	r2, r3
     99a:	49b1      	ldr	r1, [pc, #708]	; (c60 <main+0x364>)
     99c:	2000      	movs	r0, #0
     99e:	f001 fb2d 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     9a2:	2000      	movs	r0, #0
     9a4:	f000 fd2b 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 1 at 3Khz \n" );
     9a8:	49ae      	ldr	r1, [pc, #696]	; (c64 <main+0x368>)
     9aa:	2000      	movs	r0, #0
     9ac:	f001 fb26 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     9b0:	e05c      	b.n	a6c <main+0x170>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     9b2:	2001      	movs	r0, #1
     9b4:	f000 fc1e 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     9b8:	49ab      	ldr	r1, [pc, #684]	; (c68 <main+0x36c>)
     9ba:	2000      	movs	r0, #0
     9bc:	f001 fb1e 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     9c0:	4ba6      	ldr	r3, [pc, #664]	; (c5c <main+0x360>)
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	330a      	adds	r3, #10
     9c6:	4618      	mov	r0, r3
     9c8:	f000 fc54 	bl	1274 <HwIoAb_Pots_GetValue>
                                SEGGER_RTT_printf( 0, "Pot 2 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     9cc:	4ba3      	ldr	r3, [pc, #652]	; (c5c <main+0x360>)
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	899b      	ldrh	r3, [r3, #12]
     9d2:	461a      	mov	r2, r3
     9d4:	49a5      	ldr	r1, [pc, #660]	; (c6c <main+0x370>)
     9d6:	2000      	movs	r0, #0
     9d8:	f001 fb10 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     9dc:	2001      	movs	r0, #1
     9de:	f000 fd0e 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 2 at 5Khz \n" );
     9e2:	49a3      	ldr	r1, [pc, #652]	; (c70 <main+0x374>)
     9e4:	2000      	movs	r0, #0
     9e6:	f001 fb09 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     9ea:	e03f      	b.n	a6c <main+0x170>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     9ec:	2002      	movs	r0, #2
     9ee:	f000 fc01 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     9f2:	49a0      	ldr	r1, [pc, #640]	; (c74 <main+0x378>)
     9f4:	2000      	movs	r0, #0
     9f6:	f001 fb01 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     9fa:	4b98      	ldr	r3, [pc, #608]	; (c5c <main+0x360>)
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	330e      	adds	r3, #14
     a00:	4618      	mov	r0, r3
     a02:	f000 fc97 	bl	1334 <HwIoAb_Pots_GetAltValue>
                                SEGGER_RTT_printf( 0, "Pot 1 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[0] );
     a06:	4b95      	ldr	r3, [pc, #596]	; (c5c <main+0x360>)
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	89db      	ldrh	r3, [r3, #14]
     a0c:	461a      	mov	r2, r3
     a0e:	499a      	ldr	r1, [pc, #616]	; (c78 <main+0x37c>)
     a10:	2000      	movs	r0, #0
     a12:	f001 faf3 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     a16:	2002      	movs	r0, #2
     a18:	f000 fcf1 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 3 at 7.5Khz \n" );
     a1c:	4997      	ldr	r1, [pc, #604]	; (c7c <main+0x380>)
     a1e:	2000      	movs	r0, #0
     a20:	f001 faec 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     a24:	e022      	b.n	a6c <main+0x170>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     a26:	2000      	movs	r0, #0
     a28:	f000 fbc0 	bl	11ac <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     a2c:	2001      	movs	r0, #1
     a2e:	f000 fbbd 	bl	11ac <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     a32:	2002      	movs	r0, #2
     a34:	f000 fbba 	bl	11ac <HwIoAb_Leds_TurnOff>
                                SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     a38:	4991      	ldr	r1, [pc, #580]	; (c80 <main+0x384>)
     a3a:	2000      	movs	r0, #0
     a3c:	f001 fade 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     a40:	4b86      	ldr	r3, [pc, #536]	; (c5c <main+0x360>)
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	330e      	adds	r3, #14
     a46:	4618      	mov	r0, r3
     a48:	f000 fc74 	bl	1334 <HwIoAb_Pots_GetAltValue>
                                SEGGER_RTT_printf( 0, "Pot 2 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[1] );
     a4c:	4b83      	ldr	r3, [pc, #524]	; (c5c <main+0x360>)
     a4e:	681b      	ldr	r3, [r3, #0]
     a50:	8a1b      	ldrh	r3, [r3, #16]
     a52:	461a      	mov	r2, r3
     a54:	498b      	ldr	r1, [pc, #556]	; (c84 <main+0x388>)
     a56:	2000      	movs	r0, #0
     a58:	f001 fad0 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Stop();
     a5c:	f000 fcfc 	bl	1458 <HwIoAb_Buzzer_Stop>
                                SEGGER_RTT_printf( 0, "Buzzer stopped \n" );
     a60:	4989      	ldr	r1, [pc, #548]	; (c88 <main+0x38c>)
     a62:	2000      	movs	r0, #0
     a64:	f001 faca 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     a68:	e000      	b.n	a6c <main+0x170>
                            break;
     a6a:	bf00      	nop
                    break;
     a6c:	e143      	b.n	cf6 <main+0x3fa>
                        switch( RealEvent )
     a6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a72:	3b01      	subs	r3, #1
     a74:	2b03      	cmp	r3, #3
     a76:	f200 8084 	bhi.w	b82 <main+0x286>
     a7a:	a201      	add	r2, pc, #4	; (adr r2, a80 <main+0x184>)
     a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a80:	00000a91 	.word	0x00000a91
     a84:	00000acb 	.word	0x00000acb
     a88:	00000b05 	.word	0x00000b05
     a8c:	00000b3f 	.word	0x00000b3f
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     a90:	2000      	movs	r0, #0
     a92:	f000 fbaf 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     a96:	497d      	ldr	r1, [pc, #500]	; (c8c <main+0x390>)
     a98:	2000      	movs	r0, #0
     a9a:	f001 faaf 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     a9e:	4b6f      	ldr	r3, [pc, #444]	; (c5c <main+0x360>)
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	330a      	adds	r3, #10
     aa4:	4618      	mov	r0, r3
     aa6:	f000 fbe5 	bl	1274 <HwIoAb_Pots_GetValue>
                                SEGGER_RTT_printf( 0, "Pot 1 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     aaa:	4b6c      	ldr	r3, [pc, #432]	; (c5c <main+0x360>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	895b      	ldrh	r3, [r3, #10]
     ab0:	461a      	mov	r2, r3
     ab2:	496b      	ldr	r1, [pc, #428]	; (c60 <main+0x364>)
     ab4:	2000      	movs	r0, #0
     ab6:	f001 faa1 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     aba:	2000      	movs	r0, #0
     abc:	f000 fc9f 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 1 at 3Khz \n" );
     ac0:	4968      	ldr	r1, [pc, #416]	; (c64 <main+0x368>)
     ac2:	2000      	movs	r0, #0
     ac4:	f001 fa9a 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     ac8:	e05c      	b.n	b84 <main+0x288>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     aca:	2001      	movs	r0, #1
     acc:	f000 fb92 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     ad0:	496f      	ldr	r1, [pc, #444]	; (c90 <main+0x394>)
     ad2:	2000      	movs	r0, #0
     ad4:	f001 fa92 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     ad8:	4b60      	ldr	r3, [pc, #384]	; (c5c <main+0x360>)
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	330a      	adds	r3, #10
     ade:	4618      	mov	r0, r3
     ae0:	f000 fbc8 	bl	1274 <HwIoAb_Pots_GetValue>
                                SEGGER_RTT_printf( 0, "Pot 2 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     ae4:	4b5d      	ldr	r3, [pc, #372]	; (c5c <main+0x360>)
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	899b      	ldrh	r3, [r3, #12]
     aea:	461a      	mov	r2, r3
     aec:	495f      	ldr	r1, [pc, #380]	; (c6c <main+0x370>)
     aee:	2000      	movs	r0, #0
     af0:	f001 fa84 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     af4:	2001      	movs	r0, #1
     af6:	f000 fc82 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 2 at 5Khz \n" );
     afa:	495d      	ldr	r1, [pc, #372]	; (c70 <main+0x374>)
     afc:	2000      	movs	r0, #0
     afe:	f001 fa7d 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     b02:	e03f      	b.n	b84 <main+0x288>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     b04:	2002      	movs	r0, #2
     b06:	f000 fb75 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     b0a:	4962      	ldr	r1, [pc, #392]	; (c94 <main+0x398>)
     b0c:	2000      	movs	r0, #0
     b0e:	f001 fa75 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     b12:	4b52      	ldr	r3, [pc, #328]	; (c5c <main+0x360>)
     b14:	681b      	ldr	r3, [r3, #0]
     b16:	330e      	adds	r3, #14
     b18:	4618      	mov	r0, r3
     b1a:	f000 fc0b 	bl	1334 <HwIoAb_Pots_GetAltValue>
                                SEGGER_RTT_printf( 0, "Pot 1 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[0] );
     b1e:	4b4f      	ldr	r3, [pc, #316]	; (c5c <main+0x360>)
     b20:	681b      	ldr	r3, [r3, #0]
     b22:	89db      	ldrh	r3, [r3, #14]
     b24:	461a      	mov	r2, r3
     b26:	4954      	ldr	r1, [pc, #336]	; (c78 <main+0x37c>)
     b28:	2000      	movs	r0, #0
     b2a:	f001 fa67 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     b2e:	2002      	movs	r0, #2
     b30:	f000 fc65 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 3 at 7.5Khz \n" );
     b34:	4951      	ldr	r1, [pc, #324]	; (c7c <main+0x380>)
     b36:	2000      	movs	r0, #0
     b38:	f001 fa60 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     b3c:	e022      	b.n	b84 <main+0x288>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     b3e:	2000      	movs	r0, #0
     b40:	f000 fb34 	bl	11ac <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     b44:	2001      	movs	r0, #1
     b46:	f000 fb31 	bl	11ac <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     b4a:	2002      	movs	r0, #2
     b4c:	f000 fb2e 	bl	11ac <HwIoAb_Leds_TurnOff>
                                SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     b50:	4951      	ldr	r1, [pc, #324]	; (c98 <main+0x39c>)
     b52:	2000      	movs	r0, #0
     b54:	f001 fa52 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     b58:	4b40      	ldr	r3, [pc, #256]	; (c5c <main+0x360>)
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	330e      	adds	r3, #14
     b5e:	4618      	mov	r0, r3
     b60:	f000 fbe8 	bl	1334 <HwIoAb_Pots_GetAltValue>
                                SEGGER_RTT_printf( 0, "Pot 2 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[1] );
     b64:	4b3d      	ldr	r3, [pc, #244]	; (c5c <main+0x360>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	8a1b      	ldrh	r3, [r3, #16]
     b6a:	461a      	mov	r2, r3
     b6c:	4945      	ldr	r1, [pc, #276]	; (c84 <main+0x388>)
     b6e:	2000      	movs	r0, #0
     b70:	f001 fa44 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Stop();
     b74:	f000 fc70 	bl	1458 <HwIoAb_Buzzer_Stop>
                                SEGGER_RTT_printf( 0, "Buzzer stopped \n" );
     b78:	4943      	ldr	r1, [pc, #268]	; (c88 <main+0x38c>)
     b7a:	2000      	movs	r0, #0
     b7c:	f001 fa3e 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     b80:	e000      	b.n	b84 <main+0x288>
                            break;
     b82:	bf00      	nop
                    break;
     b84:	e0b7      	b.n	cf6 <main+0x3fa>
                        switch( RealEvent )
     b86:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b8a:	3b01      	subs	r3, #1
     b8c:	2b03      	cmp	r3, #3
     b8e:	f200 80ad 	bhi.w	cec <main+0x3f0>
     b92:	a201      	add	r2, pc, #4	; (adr r2, b98 <main+0x29c>)
     b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b98:	00000ba9 	.word	0x00000ba9
     b9c:	00000be3 	.word	0x00000be3
     ba0:	00000c1d 	.word	0x00000c1d
     ba4:	00000ca9 	.word	0x00000ca9
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     ba8:	2000      	movs	r0, #0
     baa:	f000 fb23 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     bae:	493b      	ldr	r1, [pc, #236]	; (c9c <main+0x3a0>)
     bb0:	2000      	movs	r0, #0
     bb2:	f001 fa23 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     bb6:	4b29      	ldr	r3, [pc, #164]	; (c5c <main+0x360>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	330a      	adds	r3, #10
     bbc:	4618      	mov	r0, r3
     bbe:	f000 fb59 	bl	1274 <HwIoAb_Pots_GetValue>
                                SEGGER_RTT_printf( 0, "Pot 1 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     bc2:	4b26      	ldr	r3, [pc, #152]	; (c5c <main+0x360>)
     bc4:	681b      	ldr	r3, [r3, #0]
     bc6:	895b      	ldrh	r3, [r3, #10]
     bc8:	461a      	mov	r2, r3
     bca:	4925      	ldr	r1, [pc, #148]	; (c60 <main+0x364>)
     bcc:	2000      	movs	r0, #0
     bce:	f001 fa15 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     bd2:	2000      	movs	r0, #0
     bd4:	f000 fc13 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 1 at 3Khz \n" );
     bd8:	4922      	ldr	r1, [pc, #136]	; (c64 <main+0x368>)
     bda:	2000      	movs	r0, #0
     bdc:	f001 fa0e 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     be0:	e085      	b.n	cee <main+0x3f2>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     be2:	2001      	movs	r0, #1
     be4:	f000 fb06 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     be8:	492d      	ldr	r1, [pc, #180]	; (ca0 <main+0x3a4>)
     bea:	2000      	movs	r0, #0
     bec:	f001 fa06 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     bf0:	4b1a      	ldr	r3, [pc, #104]	; (c5c <main+0x360>)
     bf2:	681b      	ldr	r3, [r3, #0]
     bf4:	330a      	adds	r3, #10
     bf6:	4618      	mov	r0, r3
     bf8:	f000 fb3c 	bl	1274 <HwIoAb_Pots_GetValue>
                                SEGGER_RTT_printf( 0, "Pot 2 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     bfc:	4b17      	ldr	r3, [pc, #92]	; (c5c <main+0x360>)
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	899b      	ldrh	r3, [r3, #12]
     c02:	461a      	mov	r2, r3
     c04:	4919      	ldr	r1, [pc, #100]	; (c6c <main+0x370>)
     c06:	2000      	movs	r0, #0
     c08:	f001 f9f8 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     c0c:	2001      	movs	r0, #1
     c0e:	f000 fbf6 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 2 at 5Khz \n" );
     c12:	4917      	ldr	r1, [pc, #92]	; (c70 <main+0x374>)
     c14:	2000      	movs	r0, #0
     c16:	f001 f9f1 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     c1a:	e068      	b.n	cee <main+0x3f2>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     c1c:	2002      	movs	r0, #2
     c1e:	f000 fae9 	bl	11f4 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     c22:	4920      	ldr	r1, [pc, #128]	; (ca4 <main+0x3a8>)
     c24:	2000      	movs	r0, #0
     c26:	f001 f9e9 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     c2a:	4b0c      	ldr	r3, [pc, #48]	; (c5c <main+0x360>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	330e      	adds	r3, #14
     c30:	4618      	mov	r0, r3
     c32:	f000 fb7f 	bl	1334 <HwIoAb_Pots_GetAltValue>
                                SEGGER_RTT_printf( 0, "Pot 1 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[0] );
     c36:	4b09      	ldr	r3, [pc, #36]	; (c5c <main+0x360>)
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	89db      	ldrh	r3, [r3, #14]
     c3c:	461a      	mov	r2, r3
     c3e:	490e      	ldr	r1, [pc, #56]	; (c78 <main+0x37c>)
     c40:	2000      	movs	r0, #0
     c42:	f001 f9db 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     c46:	2002      	movs	r0, #2
     c48:	f000 fbd9 	bl	13fe <HwIoAb_Buzzer_Beep>
                                SEGGER_RTT_printf( 0, "Buzzer playing Tone 3 at 7.5Khz \n" );
     c4c:	490b      	ldr	r1, [pc, #44]	; (c7c <main+0x380>)
     c4e:	2000      	movs	r0, #0
     c50:	f001 f9d4 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     c54:	e04b      	b.n	cee <main+0x3f2>
     c56:	bf00      	nop
     c58:	00015a10 	.word	0x00015a10
     c5c:	1fff8b54 	.word	0x1fff8b54
     c60:	00015a30 	.word	0x00015a30
     c64:	00015a5c 	.word	0x00015a5c
     c68:	00015a7c 	.word	0x00015a7c
     c6c:	00015a9c 	.word	0x00015a9c
     c70:	00015ac8 	.word	0x00015ac8
     c74:	00015ae8 	.word	0x00015ae8
     c78:	00015b08 	.word	0x00015b08
     c7c:	00015b34 	.word	0x00015b34
     c80:	00015b58 	.word	0x00015b58
     c84:	00015b74 	.word	0x00015b74
     c88:	00015ba0 	.word	0x00015ba0
     c8c:	00015bb4 	.word	0x00015bb4
     c90:	00015bd4 	.word	0x00015bd4
     c94:	00015bf4 	.word	0x00015bf4
     c98:	00015c14 	.word	0x00015c14
     c9c:	00015c30 	.word	0x00015c30
     ca0:	00015c50 	.word	0x00015c50
     ca4:	00015c70 	.word	0x00015c70
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     ca8:	2000      	movs	r0, #0
     caa:	f000 fa7f 	bl	11ac <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     cae:	2001      	movs	r0, #1
     cb0:	f000 fa7c 	bl	11ac <HwIoAb_Leds_TurnOff>
                                HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     cb4:	2002      	movs	r0, #2
     cb6:	f000 fa79 	bl	11ac <HwIoAb_Leds_TurnOff>
                                SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     cba:	4914      	ldr	r1, [pc, #80]	; (d0c <main+0x410>)
     cbc:	2000      	movs	r0, #0
     cbe:	f001 f99d 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     cc2:	4b13      	ldr	r3, [pc, #76]	; (d10 <main+0x414>)
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	330e      	adds	r3, #14
     cc8:	4618      	mov	r0, r3
     cca:	f000 fb33 	bl	1334 <HwIoAb_Pots_GetAltValue>
                                SEGGER_RTT_printf( 0, "Pot 2 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[1] );
     cce:	4b10      	ldr	r3, [pc, #64]	; (d10 <main+0x414>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	8a1b      	ldrh	r3, [r3, #16]
     cd4:	461a      	mov	r2, r3
     cd6:	490f      	ldr	r1, [pc, #60]	; (d14 <main+0x418>)
     cd8:	2000      	movs	r0, #0
     cda:	f001 f98f 	bl	1ffc <SEGGER_RTT_printf>
                                HwIoAb_Buzzer_Stop();
     cde:	f000 fbbb 	bl	1458 <HwIoAb_Buzzer_Stop>
                                SEGGER_RTT_printf( 0, "Buzzer stopped \n" );
     ce2:	490d      	ldr	r1, [pc, #52]	; (d18 <main+0x41c>)
     ce4:	2000      	movs	r0, #0
     ce6:	f001 f989 	bl	1ffc <SEGGER_RTT_printf>
                            break;
     cea:	e000      	b.n	cee <main+0x3f2>
                            break;
     cec:	bf00      	nop
                    break;
     cee:	e002      	b.n	cf6 <main+0x3fa>
                }  
            }
     cf0:	bf00      	nop
     cf2:	e000      	b.n	cf6 <main+0x3fa>
                    break;
     cf4:	bf00      	nop
        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cfa:	3301      	adds	r3, #1
     cfc:	f88d 3007 	strb.w	r3, [sp, #7]
     d00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d04:	2b02      	cmp	r3, #2
     d06:	f67f ae0b 	bls.w	920 <main+0x24>
        HwIoAb_Buttons_MainFunction();
     d0a:	e600      	b.n	90e <main+0x12>
     d0c:	00015c90 	.word	0x00015c90
     d10:	1fff8b54 	.word	0x1fff8b54
     d14:	00015b74 	.word	0x00015b74
     d18:	00015ba0 	.word	0x00015ba0

00000d1c <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     d1c:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     d1e:	4818      	ldr	r0, [pc, #96]	; (d80 <EcuM_Init+0x64>)
     d20:	f005 f9b2 	bl	6088 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     d24:	2000      	movs	r0, #0
     d26:	f005 fa03 	bl	6130 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     d2a:	2000      	movs	r0, #0
     d2c:	f005 fa24 	bl	6178 <Mcu_SetMode>

    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     d30:	2000      	movs	r0, #0
     d32:	f001 fc14 	bl	255e <OsIf_Init>
    /* Enable and setup interrupts */
    Platform_Init( NULL_PTR );
     d36:	2000      	movs	r0, #0
     d38:	f001 fb0e 	bl	2358 <Platform_Init>

    /* Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 for RGB LEDs and A12, D17, E12 for Buttons. */
    Port_Init( &Port_Config );
     d3c:	4811      	ldr	r0, [pc, #68]	; (d84 <EcuM_Init+0x68>)
     d3e:	f005 fda5 	bl	688c <Port_Init>

    /* Init the ADC with the parameters set in Tresos*/
    Adc_Init( &Adc_Config );
     d42:	4811      	ldr	r0, [pc, #68]	; (d88 <EcuM_Init+0x6c>)
     d44:	f007 fbc8 	bl	84d8 <Adc_Init>
    • ADC0_SE5 and ADC1_SE15 channels are interleaved on PTB1 pin 
    • ADC1_SE8 and ADC0_SE8 channels are interleaved on PTB13 pin 
    • ADC1_SE9 and ADC0_SE9 channels are interleaved on PTB14 pin
    */
    /* By default ADC0-CH5 is not connected to B1, but with this function it will */
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
     d48:	2208      	movs	r2, #8
     d4a:	2101      	movs	r1, #1
     d4c:	480f      	ldr	r0, [pc, #60]	; (d8c <EcuM_Init+0x70>)
     d4e:	f005 ff71 	bl	6c34 <Port_Ci_Port_Ip_SetMuxModeSel>
    /* By default ADC0-CH8 is not connected to B13, but with this function it will */
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     d52:	2208      	movs	r2, #8
     d54:	210d      	movs	r1, #13
     d56:	480d      	ldr	r0, [pc, #52]	; (d8c <EcuM_Init+0x70>)
     d58:	f005 ff6c 	bl	6c34 <Port_Ci_Port_Ip_SetMuxModeSel>
 
    /* Init Pwm driver and configuration for FTM1-CH7 */
    Pwm_Init( &Pwm_Config );    
     d5c:	480c      	ldr	r0, [pc, #48]	; (d90 <EcuM_Init+0x74>)
     d5e:	f00d fd03 	bl	e768 <Pwm_Init>

    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     d62:	480c      	ldr	r0, [pc, #48]	; (d94 <EcuM_Init+0x78>)
     d64:	f000 f848 	bl	df8 <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
     d68:	480b      	ldr	r0, [pc, #44]	; (d98 <EcuM_Init+0x7c>)
     d6a:	f000 fa0b 	bl	1184 <HwIoAb_Leds_Init>
    /* Pots init */
    HwIoAb_Pots_Init( NULL_PTR );
     d6e:	2000      	movs	r0, #0
     d70:	f000 fa56 	bl	1220 <HwIoAb_Pots_Init>
    /* Buzzer init */
    HwIoAb_Buzzer_Init( NULL_PTR );
     d74:	2000      	movs	r0, #0
     d76:	f000 fb3d 	bl	13f4 <HwIoAb_Buzzer_Init>
}
     d7a:	bf00      	nop
     d7c:	bd08      	pop	{r3, pc}
     d7e:	bf00      	nop
     d80:	00016b04 	.word	0x00016b04
     d84:	00016e64 	.word	0x00016e64
     d88:	00016620 	.word	0x00016620
     d8c:	4004a000 	.word	0x4004a000
     d90:	00016ed4 	.word	0x00016ed4
     d94:	00016490 	.word	0x00016490
     d98:	000164a8 	.word	0x000164a8

00000d9c <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     d9c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     d9e:	f3ef 8310 	mrs	r3, PRIMASK
     da2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     da4:	4623      	mov	r3, r4
}
     da6:	4618      	mov	r0, r3
     da8:	f85d 4b04 	ldr.w	r4, [sp], #4
     dac:	4770      	bx	lr

00000dae <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     dae:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     db0:	f3ef 8310 	mrs	r3, PRIMASK
     db4:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     db6:	4623      	mov	r3, r4
}
     db8:	4618      	mov	r0, r3
     dba:	f85d 4b04 	ldr.w	r4, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     dc0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     dc2:	f3ef 8310 	mrs	r3, PRIMASK
     dc6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     dc8:	4623      	mov	r3, r4
}
     dca:	4618      	mov	r0, r3
     dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
     dd0:	4770      	bx	lr

00000dd2 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     dd2:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     dd4:	f3ef 8310 	mrs	r3, PRIMASK
     dd8:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     dda:	4623      	mov	r3, r4
}
     ddc:	4618      	mov	r0, r3
     dde:	f85d 4b04 	ldr.w	r4, [sp], #4
     de2:	4770      	bx	lr

00000de4 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     de4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     de6:	f3ef 8310 	mrs	r3, PRIMASK
     dea:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     dec:	4623      	mov	r3, r4
}
     dee:	4618      	mov	r0, r3
     df0:	f85d 4b04 	ldr.w	r4, [sp], #4
     df4:	4770      	bx	lr
	...

00000df8 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     df8:	b084      	sub	sp, #16
     dfa:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     dfc:	4b16      	ldr	r3, [pc, #88]	; (e58 <HwIoAb_Buttons_Init+0x60>)
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	2203      	movs	r2, #3
     e02:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     e04:	4b14      	ldr	r3, [pc, #80]	; (e58 <HwIoAb_Buttons_Init+0x60>)
     e06:	681b      	ldr	r3, [r3, #0]
     e08:	9a01      	ldr	r2, [sp, #4]
     e0a:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     e0c:	2300      	movs	r3, #0
     e0e:	f88d 300f 	strb.w	r3, [sp, #15]
     e12:	e012      	b.n	e3a <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e14:	4b10      	ldr	r3, [pc, #64]	; (e58 <HwIoAb_Buttons_Init+0x60>)
     e16:	681a      	ldr	r2, [r3, #0]
     e18:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e1c:	4413      	add	r3, r2
     e1e:	2200      	movs	r2, #0
     e20:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     e22:	4b0d      	ldr	r3, [pc, #52]	; (e58 <HwIoAb_Buttons_Init+0x60>)
     e24:	681a      	ldr	r2, [r3, #0]
     e26:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e2a:	4413      	add	r3, r2
     e2c:	2200      	movs	r2, #0
     e2e:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     e30:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e34:	3301      	adds	r3, #1
     e36:	f88d 300f 	strb.w	r3, [sp, #15]
     e3a:	4b07      	ldr	r3, [pc, #28]	; (e58 <HwIoAb_Buttons_Init+0x60>)
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	781b      	ldrb	r3, [r3, #0]
     e40:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e44:	429a      	cmp	r2, r3
     e46:	d3e5      	bcc.n	e14 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     e48:	4b03      	ldr	r3, [pc, #12]	; (e58 <HwIoAb_Buttons_Init+0x60>)
     e4a:	681b      	ldr	r3, [r3, #0]
     e4c:	2201      	movs	r2, #1
     e4e:	739a      	strb	r2, [r3, #14]
}
     e50:	bf00      	nop
     e52:	b004      	add	sp, #16
     e54:	4770      	bx	lr
     e56:	bf00      	nop
     e58:	1fff8b4c 	.word	0x1fff8b4c

00000e5c <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     e5c:	b084      	sub	sp, #16
     e5e:	4603      	mov	r3, r0
     e60:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     e64:	2300      	movs	r3, #0
     e66:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     e6a:	4b0a      	ldr	r3, [pc, #40]	; (e94 <HwIoAb_Buttons_GetEvent+0x38>)
     e6c:	681a      	ldr	r2, [r3, #0]
     e6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e72:	4413      	add	r3, r2
     e74:	7adb      	ldrb	r3, [r3, #11]
     e76:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     e7a:	4b06      	ldr	r3, [pc, #24]	; (e94 <HwIoAb_Buttons_GetEvent+0x38>)
     e7c:	681a      	ldr	r2, [r3, #0]
     e7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e82:	4413      	add	r3, r2
     e84:	2200      	movs	r2, #0
     e86:	72da      	strb	r2, [r3, #11]
    return temp;
     e88:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     e8c:	4618      	mov	r0, r3
     e8e:	b004      	add	sp, #16
     e90:	4770      	bx	lr
     e92:	bf00      	nop
     e94:	1fff8b4c 	.word	0x1fff8b4c

00000e98 <HwIoAb_Buttons_MainFunction>:
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void )
{
     e98:	b500      	push	{lr}
     e9a:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     e9c:	2300      	movs	r3, #0
     e9e:	f88d 3007 	strb.w	r3, [sp, #7]
     ea2:	e15d      	b.n	1160 <__BSS_SRAM_SIZE+0x80>
    {
        switch( ButtonsControl_Ptr->States[i] )
     ea4:	4bb5      	ldr	r3, [pc, #724]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     ea6:	681a      	ldr	r2, [r3, #0]
     ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eac:	4413      	add	r3, r2
     eae:	7a1b      	ldrb	r3, [r3, #8]
     eb0:	2b04      	cmp	r3, #4
     eb2:	f200 8145 	bhi.w	1140 <__BSS_SRAM_SIZE+0x60>
     eb6:	a201      	add	r2, pc, #4	; (adr r2, ebc <HwIoAb_Buttons_MainFunction+0x24>)
     eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ebc:	00000ed1 	.word	0x00000ed1
     ec0:	00000f1d 	.word	0x00000f1d
     ec4:	00001045 	.word	0x00001045
     ec8:	000010dd 	.word	0x000010dd
     ecc:	00000fa9 	.word	0x00000fa9
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     ed0:	4baa      	ldr	r3, [pc, #680]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     ed2:	681b      	ldr	r3, [r3, #0]
     ed4:	685a      	ldr	r2, [r3, #4]
     ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eda:	00db      	lsls	r3, r3, #3
     edc:	4413      	add	r3, r2
     ede:	881b      	ldrh	r3, [r3, #0]
     ee0:	4618      	mov	r0, r3
     ee2:	f006 f9e7 	bl	72b4 <Dio_ReadChannel>
     ee6:	4603      	mov	r3, r0
     ee8:	4619      	mov	r1, r3
     eea:	4ba4      	ldr	r3, [pc, #656]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	685a      	ldr	r2, [r3, #4]
     ef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ef4:	00db      	lsls	r3, r3, #3
     ef6:	4413      	add	r3, r2
     ef8:	789b      	ldrb	r3, [r3, #2]
     efa:	4299      	cmp	r1, r3
     efc:	f040 8122 	bne.w	1144 <__BSS_SRAM_SIZE+0x64>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f04:	4a9e      	ldr	r2, [pc, #632]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
     f06:	2100      	movs	r1, #0
     f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     f0c:	4b9b      	ldr	r3, [pc, #620]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     f0e:	681a      	ldr	r2, [r3, #0]
     f10:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f14:	4413      	add	r3, r2
     f16:	2201      	movs	r2, #1
     f18:	721a      	strb	r2, [r3, #8]

                }
            break;
     f1a:	e113      	b.n	1144 <__BSS_SRAM_SIZE+0x64>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     f1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f20:	4a97      	ldr	r2, [pc, #604]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
     f22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f2a:	320a      	adds	r2, #10
     f2c:	4994      	ldr	r1, [pc, #592]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
     f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f36:	4a92      	ldr	r2, [pc, #584]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
     f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f3c:	4b8f      	ldr	r3, [pc, #572]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	6859      	ldr	r1, [r3, #4]
     f42:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f46:	00db      	lsls	r3, r3, #3
     f48:	440b      	add	r3, r1
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	429a      	cmp	r2, r3
     f4e:	d106      	bne.n	f5e <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     f50:	4b8a      	ldr	r3, [pc, #552]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     f52:	681a      	ldr	r2, [r3, #0]
     f54:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f58:	4413      	add	r3, r2
     f5a:	2203      	movs	r2, #3
     f5c:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     f5e:	4b87      	ldr	r3, [pc, #540]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	685a      	ldr	r2, [r3, #4]
     f64:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f68:	00db      	lsls	r3, r3, #3
     f6a:	4413      	add	r3, r2
     f6c:	881b      	ldrh	r3, [r3, #0]
     f6e:	4618      	mov	r0, r3
     f70:	f006 f9a0 	bl	72b4 <Dio_ReadChannel>
     f74:	4603      	mov	r3, r0
     f76:	4619      	mov	r1, r3
     f78:	4b80      	ldr	r3, [pc, #512]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     f7a:	681b      	ldr	r3, [r3, #0]
     f7c:	685a      	ldr	r2, [r3, #4]
     f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f82:	00db      	lsls	r3, r3, #3
     f84:	4413      	add	r3, r2
     f86:	789b      	ldrb	r3, [r3, #2]
     f88:	2b00      	cmp	r3, #0
     f8a:	bf0c      	ite	eq
     f8c:	2301      	moveq	r3, #1
     f8e:	2300      	movne	r3, #0
     f90:	b2db      	uxtb	r3, r3
     f92:	4299      	cmp	r1, r3
     f94:	f040 80d8 	bne.w	1148 <__BSS_SRAM_SIZE+0x68>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     f98:	4b78      	ldr	r3, [pc, #480]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     f9a:	681a      	ldr	r2, [r3, #0]
     f9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fa0:	4413      	add	r3, r2
     fa2:	2204      	movs	r2, #4
     fa4:	721a      	strb	r2, [r3, #8]
                }    
            break;
     fa6:	e0cf      	b.n	1148 <__BSS_SRAM_SIZE+0x68>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fac:	4a74      	ldr	r2, [pc, #464]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
     fae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     fb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fb6:	320a      	adds	r2, #10
     fb8:	4971      	ldr	r1, [pc, #452]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
     fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     fbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fc2:	4a6f      	ldr	r2, [pc, #444]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
     fc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     fc8:	4b6c      	ldr	r3, [pc, #432]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     fca:	681b      	ldr	r3, [r3, #0]
     fcc:	6859      	ldr	r1, [r3, #4]
     fce:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fd2:	00db      	lsls	r3, r3, #3
     fd4:	440b      	add	r3, r1
     fd6:	685b      	ldr	r3, [r3, #4]
     fd8:	429a      	cmp	r2, r3
     fda:	d10d      	bne.n	ff8 <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     fdc:	4b67      	ldr	r3, [pc, #412]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     fde:	681a      	ldr	r2, [r3, #0]
     fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fe4:	4413      	add	r3, r2
     fe6:	2201      	movs	r2, #1
     fe8:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     fea:	4b64      	ldr	r3, [pc, #400]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     fec:	681a      	ldr	r2, [r3, #0]
     fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ff2:	4413      	add	r3, r2
     ff4:	2200      	movs	r2, #0
     ff6:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     ff8:	4b60      	ldr	r3, [pc, #384]	; (117c <__BSS_SRAM_SIZE+0x9c>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	685a      	ldr	r2, [r3, #4]
     ffe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1002:	00db      	lsls	r3, r3, #3
    1004:	4413      	add	r3, r2
    1006:	881b      	ldrh	r3, [r3, #0]
    1008:	4618      	mov	r0, r3
    100a:	f006 f953 	bl	72b4 <Dio_ReadChannel>
    100e:	4603      	mov	r3, r0
    1010:	4619      	mov	r1, r3
    1012:	4b5a      	ldr	r3, [pc, #360]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1014:	681b      	ldr	r3, [r3, #0]
    1016:	685a      	ldr	r2, [r3, #4]
    1018:	f89d 3007 	ldrb.w	r3, [sp, #7]
    101c:	00db      	lsls	r3, r3, #3
    101e:	4413      	add	r3, r2
    1020:	789b      	ldrb	r3, [r3, #2]
    1022:	4299      	cmp	r1, r3
    1024:	f040 8092 	bne.w	114c <__BSS_SRAM_SIZE+0x6c>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
    1028:	f89d 3007 	ldrb.w	r3, [sp, #7]
    102c:	4a54      	ldr	r2, [pc, #336]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
    102e:	2100      	movs	r1, #0
    1030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
    1034:	4b51      	ldr	r3, [pc, #324]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1036:	681a      	ldr	r2, [r3, #0]
    1038:	f89d 3007 	ldrb.w	r3, [sp, #7]
    103c:	4413      	add	r3, r2
    103e:	2202      	movs	r2, #2
    1040:	721a      	strb	r2, [r3, #8]
                } 
            break;
    1042:	e083      	b.n	114c <__BSS_SRAM_SIZE+0x6c>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
    1044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1048:	4a4d      	ldr	r2, [pc, #308]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
    104a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    104e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1052:	320a      	adds	r2, #10
    1054:	494a      	ldr	r1, [pc, #296]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
    1056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
    105a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    105e:	4a48      	ldr	r2, [pc, #288]	; (1180 <__BSS_SRAM_SIZE+0xa0>)
    1060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1064:	4b45      	ldr	r3, [pc, #276]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	6859      	ldr	r1, [r3, #4]
    106a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    106e:	00db      	lsls	r3, r3, #3
    1070:	440b      	add	r3, r1
    1072:	685b      	ldr	r3, [r3, #4]
    1074:	429a      	cmp	r2, r3
    1076:	d106      	bne.n	1086 <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
    1078:	4b40      	ldr	r3, [pc, #256]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    107a:	681a      	ldr	r2, [r3, #0]
    107c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1080:	4413      	add	r3, r2
    1082:	2203      	movs	r2, #3
    1084:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
    1086:	4b3d      	ldr	r3, [pc, #244]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	685a      	ldr	r2, [r3, #4]
    108c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1090:	00db      	lsls	r3, r3, #3
    1092:	4413      	add	r3, r2
    1094:	881b      	ldrh	r3, [r3, #0]
    1096:	4618      	mov	r0, r3
    1098:	f006 f90c 	bl	72b4 <Dio_ReadChannel>
    109c:	4603      	mov	r3, r0
    109e:	4619      	mov	r1, r3
    10a0:	4b36      	ldr	r3, [pc, #216]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	685a      	ldr	r2, [r3, #4]
    10a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10aa:	00db      	lsls	r3, r3, #3
    10ac:	4413      	add	r3, r2
    10ae:	789b      	ldrb	r3, [r3, #2]
    10b0:	2b00      	cmp	r3, #0
    10b2:	bf0c      	ite	eq
    10b4:	2301      	moveq	r3, #1
    10b6:	2300      	movne	r3, #0
    10b8:	b2db      	uxtb	r3, r3
    10ba:	4299      	cmp	r1, r3
    10bc:	d148      	bne.n	1150 <__BSS_SRAM_SIZE+0x70>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    10be:	4b2f      	ldr	r3, [pc, #188]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    10c0:	681a      	ldr	r2, [r3, #0]
    10c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10c6:	4413      	add	r3, r2
    10c8:	2202      	movs	r2, #2
    10ca:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    10cc:	4b2b      	ldr	r3, [pc, #172]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    10ce:	681a      	ldr	r2, [r3, #0]
    10d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10d4:	4413      	add	r3, r2
    10d6:	2200      	movs	r2, #0
    10d8:	721a      	strb	r2, [r3, #8]
                } 
            break;
    10da:	e039      	b.n	1150 <__BSS_SRAM_SIZE+0x70>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    10dc:	4b27      	ldr	r3, [pc, #156]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    10de:	681a      	ldr	r2, [r3, #0]
    10e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10e4:	4413      	add	r3, r2
    10e6:	2203      	movs	r2, #3
    10e8:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
    10ea:	4b24      	ldr	r3, [pc, #144]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10f4:	00db      	lsls	r3, r3, #3
    10f6:	4413      	add	r3, r2
    10f8:	881b      	ldrh	r3, [r3, #0]
    10fa:	4618      	mov	r0, r3
    10fc:	f006 f8da 	bl	72b4 <Dio_ReadChannel>
    1100:	4603      	mov	r3, r0
    1102:	4619      	mov	r1, r3
    1104:	4b1d      	ldr	r3, [pc, #116]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1106:	681b      	ldr	r3, [r3, #0]
    1108:	685a      	ldr	r2, [r3, #4]
    110a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    110e:	00db      	lsls	r3, r3, #3
    1110:	4413      	add	r3, r2
    1112:	789b      	ldrb	r3, [r3, #2]
    1114:	2b00      	cmp	r3, #0
    1116:	bf0c      	ite	eq
    1118:	2301      	moveq	r3, #1
    111a:	2300      	movne	r3, #0
    111c:	b2db      	uxtb	r3, r3
    111e:	4299      	cmp	r1, r3
    1120:	d118      	bne.n	1154 <__BSS_SRAM_SIZE+0x74>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    1122:	4b16      	ldr	r3, [pc, #88]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1124:	681a      	ldr	r2, [r3, #0]
    1126:	f89d 3007 	ldrb.w	r3, [sp, #7]
    112a:	4413      	add	r3, r2
    112c:	2204      	movs	r2, #4
    112e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1130:	4b12      	ldr	r3, [pc, #72]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1132:	681a      	ldr	r2, [r3, #0]
    1134:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1138:	4413      	add	r3, r2
    113a:	2200      	movs	r2, #0
    113c:	721a      	strb	r2, [r3, #8]
                }
            break;
    113e:	e009      	b.n	1154 <__BSS_SRAM_SIZE+0x74>
            default :
              // If jump here is an error
            break;
    1140:	bf00      	nop
    1142:	e008      	b.n	1156 <__BSS_SRAM_SIZE+0x76>
            break;
    1144:	bf00      	nop
    1146:	e006      	b.n	1156 <__BSS_SRAM_SIZE+0x76>
            break;
    1148:	bf00      	nop
    114a:	e004      	b.n	1156 <__BSS_SRAM_SIZE+0x76>
            break;
    114c:	bf00      	nop
    114e:	e002      	b.n	1156 <__BSS_SRAM_SIZE+0x76>
            break;
    1150:	bf00      	nop
    1152:	e000      	b.n	1156 <__BSS_SRAM_SIZE+0x76>
            break;
    1154:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
    1156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    115a:	3301      	adds	r3, #1
    115c:	f88d 3007 	strb.w	r3, [sp, #7]
    1160:	4b06      	ldr	r3, [pc, #24]	; (117c <__BSS_SRAM_SIZE+0x9c>)
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	781b      	ldrb	r3, [r3, #0]
    1166:	f89d 2007 	ldrb.w	r2, [sp, #7]
    116a:	429a      	cmp	r2, r3
    116c:	f4ff ae9a 	bcc.w	ea4 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
    1170:	bf00      	nop
    1172:	bf00      	nop
    1174:	b003      	add	sp, #12
    1176:	f85d fb04 	ldr.w	pc, [sp], #4
    117a:	bf00      	nop
    117c:	1fff8b4c 	.word	0x1fff8b4c
    1180:	1fff9758 	.word	0x1fff9758

00001184 <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
    1184:	b082      	sub	sp, #8
    1186:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
    1188:	4b07      	ldr	r3, [pc, #28]	; (11a8 <HwIoAb_Leds_Init+0x24>)
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	2203      	movs	r2, #3
    118e:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1190:	4b05      	ldr	r3, [pc, #20]	; (11a8 <HwIoAb_Leds_Init+0x24>)
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	9a01      	ldr	r2, [sp, #4]
    1196:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
    1198:	4b03      	ldr	r3, [pc, #12]	; (11a8 <HwIoAb_Leds_Init+0x24>)
    119a:	681b      	ldr	r3, [r3, #0]
    119c:	2201      	movs	r2, #1
    119e:	721a      	strb	r2, [r3, #8]
}
    11a0:	bf00      	nop
    11a2:	b002      	add	sp, #8
    11a4:	4770      	bx	lr
    11a6:	bf00      	nop
    11a8:	1fff8b50 	.word	0x1fff8b50

000011ac <HwIoAb_Leds_TurnOff>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnOff( uint8 Led ) 
{
    11ac:	b500      	push	{lr}
    11ae:	b083      	sub	sp, #12
    11b0:	4603      	mov	r3, r0
    11b2:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_WriteChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led, !LedsControl_Ptr->LedsConfig_Ptr[ Led ].Active );
    11b6:	4b0e      	ldr	r3, [pc, #56]	; (11f0 <HwIoAb_Leds_TurnOff+0x44>)
    11b8:	681b      	ldr	r3, [r3, #0]
    11ba:	685a      	ldr	r2, [r3, #4]
    11bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11c0:	009b      	lsls	r3, r3, #2
    11c2:	4413      	add	r3, r2
    11c4:	8818      	ldrh	r0, [r3, #0]
    11c6:	4b0a      	ldr	r3, [pc, #40]	; (11f0 <HwIoAb_Leds_TurnOff+0x44>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	685a      	ldr	r2, [r3, #4]
    11cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11d0:	009b      	lsls	r3, r3, #2
    11d2:	4413      	add	r3, r2
    11d4:	789b      	ldrb	r3, [r3, #2]
    11d6:	2b00      	cmp	r3, #0
    11d8:	bf0c      	ite	eq
    11da:	2301      	moveq	r3, #1
    11dc:	2300      	movne	r3, #0
    11de:	b2db      	uxtb	r3, r3
    11e0:	4619      	mov	r1, r3
    11e2:	f006 f87d 	bl	72e0 <Dio_WriteChannel>
}
    11e6:	bf00      	nop
    11e8:	b003      	add	sp, #12
    11ea:	f85d fb04 	ldr.w	pc, [sp], #4
    11ee:	bf00      	nop
    11f0:	1fff8b50 	.word	0x1fff8b50

000011f4 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
    11f4:	b500      	push	{lr}
    11f6:	b083      	sub	sp, #12
    11f8:	4603      	mov	r3, r0
    11fa:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    11fe:	4b07      	ldr	r3, [pc, #28]	; (121c <HwIoAb_Leds_TurnToggle+0x28>)
    1200:	681b      	ldr	r3, [r3, #0]
    1202:	685a      	ldr	r2, [r3, #4]
    1204:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1208:	009b      	lsls	r3, r3, #2
    120a:	4413      	add	r3, r2
    120c:	881b      	ldrh	r3, [r3, #0]
    120e:	4618      	mov	r0, r3
    1210:	f006 f87b 	bl	730a <Dio_FlipChannel>
}
    1214:	bf00      	nop
    1216:	b003      	add	sp, #12
    1218:	f85d fb04 	ldr.w	pc, [sp], #4
    121c:	1fff8b50 	.word	0x1fff8b50

00001220 <HwIoAb_Pots_Init>:
 * @param Pots_Config Pointer to configuration array.
 * 
 * @note Hardware interleave for pins PTB1 and PTB13 is done in EcuM_Init(). 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config * Pots_Config )
{
    1220:	b500      	push	{lr}
    1222:	b085      	sub	sp, #20
    1224:	9001      	str	r0, [sp, #4]
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    /* Calibrating ADC modules */
    Adc_Calibrate( ADC0HwUnit, &Calib_Status_ADC0 );
    1226:	ab03      	add	r3, sp, #12
    1228:	4619      	mov	r1, r3
    122a:	2000      	movs	r0, #0
    122c:	f007 fc00 	bl	8a30 <Adc_Calibrate>
    Adc_Calibrate( ADC1HwUnit, &Calib_Status_ADC1 );
    1230:	ab02      	add	r3, sp, #8
    1232:	4619      	mov	r1, r3
    1234:	2001      	movs	r0, #1
    1236:	f007 fbfb 	bl	8a30 <Adc_Calibrate>

    /* Initializing raw results array/buffer */
    Adc_SetupResultBuffer( ADC0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    123a:	4b0d      	ldr	r3, [pc, #52]	; (1270 <HwIoAb_Pots_Init+0x50>)
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	3302      	adds	r3, #2
    1240:	4619      	mov	r1, r3
    1242:	2000      	movs	r0, #0
    1244:	f007 f996 	bl	8574 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( ADC1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    1248:	4b09      	ldr	r3, [pc, #36]	; (1270 <HwIoAb_Pots_Init+0x50>)
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	3306      	adds	r3, #6
    124e:	4619      	mov	r1, r3
    1250:	2001      	movs	r0, #1
    1252:	f007 f98f 	bl	8574 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS_MAX;
    1256:	4b06      	ldr	r3, [pc, #24]	; (1270 <HwIoAb_Pots_Init+0x50>)
    1258:	681b      	ldr	r3, [r3, #0]
    125a:	2202      	movs	r2, #2
    125c:	701a      	strb	r2, [r3, #0]
    PotsControl_Ptr->Pots_init = TRUE;
    125e:	4b04      	ldr	r3, [pc, #16]	; (1270 <HwIoAb_Pots_Init+0x50>)
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	2201      	movs	r2, #1
    1264:	749a      	strb	r2, [r3, #18]
}
    1266:	bf00      	nop
    1268:	b005      	add	sp, #20
    126a:	f85d fb04 	ldr.w	pc, [sp], #4
    126e:	bf00      	nop
    1270:	1fff8b54 	.word	0x1fff8b54

00001274 <HwIoAb_Pots_GetValue>:
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) 
{
    1274:	b500      	push	{lr}
    1276:	b085      	sub	sp, #20
    1278:	9001      	str	r0, [sp, #4]
    /* Software trigger conversion */
    Adc_StartGroupConversion( ADC0Group_0 );
    127a:	2000      	movs	r0, #0
    127c:	f007 fa14 	bl	86a8 <Adc_StartGroupConversion>
    /* Wait until the conversion is done */
    while( Adc_GetGroupStatus( ADC0Group_0 ) == ADC_BUSY );
    1280:	bf00      	nop
    1282:	2000      	movs	r0, #0
    1284:	f007 faed 	bl	8862 <Adc_GetGroupStatus>
    1288:	4603      	mov	r3, r0
    128a:	2b01      	cmp	r3, #1
    128c:	d0f9      	beq.n	1282 <HwIoAb_Pots_GetValue+0xe>
    /* Reading group conversion values and storing them to the raw result array */
    Adc_ReadGroup( ADC0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); 
    128e:	4b26      	ldr	r3, [pc, #152]	; (1328 <HwIoAb_Pots_GetValue+0xb4>)
    1290:	681b      	ldr	r3, [r3, #0]
    1292:	3302      	adds	r3, #2
    1294:	4619      	mov	r1, r3
    1296:	2000      	movs	r0, #0
    1298:	f007 fa9e 	bl	87d8 <Adc_ReadGroup>

    /* Calculating resistance of each Pot */
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    129c:	2300      	movs	r3, #0
    129e:	f88d 300f 	strb.w	r3, [sp, #15]
    12a2:	e034      	b.n	130e <HwIoAb_Pots_GetValue+0x9a>
    {
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12B_RES );
    12a4:	4b20      	ldr	r3, [pc, #128]	; (1328 <HwIoAb_Pots_GetValue+0xb4>)
    12a6:	681a      	ldr	r2, [r3, #0]
    12a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    12ac:	005b      	lsls	r3, r3, #1
    12ae:	4413      	add	r3, r2
    12b0:	885b      	ldrh	r3, [r3, #2]
    12b2:	ee07 3a90 	vmov	s15, r3
    12b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    12ba:	eddf 6a1c 	vldr	s13, [pc, #112]	; 132c <HwIoAb_Pots_GetValue+0xb8>
    12be:	eec7 7a26 	vdiv.f32	s15, s14, s13
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    12c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 1330 <HwIoAb_Pots_GetValue+0xbc>
    12c6:	ee67 7a87 	vmul.f32	s15, s15, s14
    12ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    12ce:	005b      	lsls	r3, r3, #1
    12d0:	9a01      	ldr	r2, [sp, #4]
    12d2:	4413      	add	r3, r2
    12d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    12d8:	ee17 2a90 	vmov	r2, s15
    12dc:	b292      	uxth	r2, r2
    12de:	801a      	strh	r2, [r3, #0]

        /* Locking value if needed*/
        if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) 
    12e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    12e4:	005b      	lsls	r3, r3, #1
    12e6:	9a01      	ldr	r2, [sp, #4]
    12e8:	4413      	add	r3, r2
    12ea:	881b      	ldrh	r3, [r3, #0]
    12ec:	f242 7210 	movw	r2, #10000	; 0x2710
    12f0:	4293      	cmp	r3, r2
    12f2:	d907      	bls.n	1304 <HwIoAb_Pots_GetValue+0x90>
        { 
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    12f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    12f8:	005b      	lsls	r3, r3, #1
    12fa:	9a01      	ldr	r2, [sp, #4]
    12fc:	4413      	add	r3, r2
    12fe:	f242 7210 	movw	r2, #10000	; 0x2710
    1302:	801a      	strh	r2, [r3, #0]
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    1304:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1308:	3301      	adds	r3, #1
    130a:	f88d 300f 	strb.w	r3, [sp, #15]
    130e:	4b06      	ldr	r3, [pc, #24]	; (1328 <HwIoAb_Pots_GetValue+0xb4>)
    1310:	681b      	ldr	r3, [r3, #0]
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1318:	429a      	cmp	r2, r3
    131a:	d3c3      	bcc.n	12a4 <HwIoAb_Pots_GetValue+0x30>
        }
    }
}
    131c:	bf00      	nop
    131e:	bf00      	nop
    1320:	b005      	add	sp, #20
    1322:	f85d fb04 	ldr.w	pc, [sp], #4
    1326:	bf00      	nop
    1328:	1fff8b54 	.word	0x1fff8b54
    132c:	4528f000 	.word	0x4528f000
    1330:	461c4000 	.word	0x461c4000

00001334 <HwIoAb_Pots_GetAltValue>:
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) 
{
    1334:	b500      	push	{lr}
    1336:	b085      	sub	sp, #20
    1338:	9001      	str	r0, [sp, #4]
    /* Software trigger conversion */
    Adc_StartGroupConversion( ADC1Group_0 );
    133a:	2001      	movs	r0, #1
    133c:	f007 f9b4 	bl	86a8 <Adc_StartGroupConversion>
    /* Wait until the conversion is done */
    while( Adc_GetGroupStatus( ADC1Group_0 ) == ADC_BUSY );
    1340:	bf00      	nop
    1342:	2001      	movs	r0, #1
    1344:	f007 fa8d 	bl	8862 <Adc_GetGroupStatus>
    1348:	4603      	mov	r3, r0
    134a:	2b01      	cmp	r3, #1
    134c:	d0f9      	beq.n	1342 <HwIoAb_Pots_GetAltValue+0xe>
    /* Reading group conversion values and storing them to the raw result array */
    Adc_ReadGroup( ADC1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); 
    134e:	4b26      	ldr	r3, [pc, #152]	; (13e8 <HwIoAb_Pots_GetAltValue+0xb4>)
    1350:	681b      	ldr	r3, [r3, #0]
    1352:	3306      	adds	r3, #6
    1354:	4619      	mov	r1, r3
    1356:	2001      	movs	r0, #1
    1358:	f007 fa3e 	bl	87d8 <Adc_ReadGroup>

    /* Calculating resistance of each Pot */
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    135c:	2300      	movs	r3, #0
    135e:	f88d 300f 	strb.w	r3, [sp, #15]
    1362:	e034      	b.n	13ce <HwIoAb_Pots_GetAltValue+0x9a>
    {
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12B_RES );
    1364:	4b20      	ldr	r3, [pc, #128]	; (13e8 <HwIoAb_Pots_GetAltValue+0xb4>)
    1366:	681a      	ldr	r2, [r3, #0]
    1368:	f89d 300f 	ldrb.w	r3, [sp, #15]
    136c:	005b      	lsls	r3, r3, #1
    136e:	4413      	add	r3, r2
    1370:	88db      	ldrh	r3, [r3, #6]
    1372:	ee07 3a90 	vmov	s15, r3
    1376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    137a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 13ec <HwIoAb_Pots_GetAltValue+0xb8>
    137e:	eec7 7a26 	vdiv.f32	s15, s14, s13
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    1382:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 13f0 <HwIoAb_Pots_GetAltValue+0xbc>
    1386:	ee67 7a87 	vmul.f32	s15, s15, s14
    138a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    138e:	005b      	lsls	r3, r3, #1
    1390:	9a01      	ldr	r2, [sp, #4]
    1392:	4413      	add	r3, r2
    1394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1398:	ee17 2a90 	vmov	r2, s15
    139c:	b292      	uxth	r2, r2
    139e:	801a      	strh	r2, [r3, #0]

        /* Locking value if needed*/
        if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) 
    13a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13a4:	005b      	lsls	r3, r3, #1
    13a6:	9a01      	ldr	r2, [sp, #4]
    13a8:	4413      	add	r3, r2
    13aa:	881b      	ldrh	r3, [r3, #0]
    13ac:	f242 7210 	movw	r2, #10000	; 0x2710
    13b0:	4293      	cmp	r3, r2
    13b2:	d907      	bls.n	13c4 <HwIoAb_Pots_GetAltValue+0x90>
        { 
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    13b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13b8:	005b      	lsls	r3, r3, #1
    13ba:	9a01      	ldr	r2, [sp, #4]
    13bc:	4413      	add	r3, r2
    13be:	f242 7210 	movw	r2, #10000	; 0x2710
    13c2:	801a      	strh	r2, [r3, #0]
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    13c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13c8:	3301      	adds	r3, #1
    13ca:	f88d 300f 	strb.w	r3, [sp, #15]
    13ce:	4b06      	ldr	r3, [pc, #24]	; (13e8 <HwIoAb_Pots_GetAltValue+0xb4>)
    13d0:	681b      	ldr	r3, [r3, #0]
    13d2:	781b      	ldrb	r3, [r3, #0]
    13d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13d8:	429a      	cmp	r2, r3
    13da:	d3c3      	bcc.n	1364 <HwIoAb_Pots_GetAltValue+0x30>
        }
    }
}
    13dc:	bf00      	nop
    13de:	bf00      	nop
    13e0:	b005      	add	sp, #20
    13e2:	f85d fb04 	ldr.w	pc, [sp], #4
    13e6:	bf00      	nop
    13e8:	1fff8b54 	.word	0x1fff8b54
    13ec:	4528f000 	.word	0x4528f000
    13f0:	461c4000 	.word	0x461c4000

000013f4 <HwIoAb_Buzzer_Init>:
 * @param Buzzer_Config Pointer to configuration array, in this case is not used.
 * 
 * @note In this case no configurations are needeed.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config )
{
    13f4:	b082      	sub	sp, #8
    13f6:	9001      	str	r0, [sp, #4]

}
    13f8:	bf00      	nop
    13fa:	b002      	add	sp, #8
    13fc:	4770      	bx	lr

000013fe <HwIoAb_Buzzer_Beep>:
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) 
{
    13fe:	b500      	push	{lr}
    1400:	b083      	sub	sp, #12
    1402:	4603      	mov	r3, r0
    1404:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) 
    1408:	f89d 3007 	ldrb.w	r3, [sp, #7]
    140c:	2b02      	cmp	r3, #2
    140e:	d016      	beq.n	143e <HwIoAb_Buzzer_Beep+0x40>
    1410:	2b02      	cmp	r3, #2
    1412:	dc1c      	bgt.n	144e <HwIoAb_Buzzer_Beep+0x50>
    1414:	2b00      	cmp	r3, #0
    1416:	d002      	beq.n	141e <HwIoAb_Buzzer_Beep+0x20>
    1418:	2b01      	cmp	r3, #1
    141a:	d008      	beq.n	142e <HwIoAb_Buzzer_Beep+0x30>
        case HWIOAB_BUZZER_TONE_3:  /* Setting frequency to 7.5 Khz and 50% duty cycle */
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_50_DUTY_CYCLE );
        break;
        default:    
        /* Invalid tone */
        break;
    141c:	e017      	b.n	144e <HwIoAb_Buzzer_Beep+0x50>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_50_DUTY_CYCLE );
    141e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1422:	f640 216a 	movw	r1, #2666	; 0xa6a
    1426:	2000      	movs	r0, #0
    1428:	f00d faf0 	bl	ea0c <Pwm_SetPeriodAndDuty>
        break;
    142c:	e010      	b.n	1450 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_50_DUTY_CYCLE );
    142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1432:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    1436:	2000      	movs	r0, #0
    1438:	f00d fae8 	bl	ea0c <Pwm_SetPeriodAndDuty>
        break;
    143c:	e008      	b.n	1450 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_50_DUTY_CYCLE );
    143e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1442:	f240 412a 	movw	r1, #1066	; 0x42a
    1446:	2000      	movs	r0, #0
    1448:	f00d fae0 	bl	ea0c <Pwm_SetPeriodAndDuty>
        break;
    144c:	e000      	b.n	1450 <HwIoAb_Buzzer_Beep+0x52>
        break;
    144e:	bf00      	nop
    }
}
    1450:	bf00      	nop
    1452:	b003      	add	sp, #12
    1454:	f85d fb04 	ldr.w	pc, [sp], #4

00001458 <HwIoAb_Buzzer_Stop>:
/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) 
{
    1458:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    /* Stopping buzzer */
    145a:	2000      	movs	r0, #0
    145c:	f00d fb0c 	bl	ea78 <Pwm_SetOutputToIdle>
}
    1460:	bf00      	nop
    1462:	bd08      	pop	{r3, pc}

00001464 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1464:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    1466:	2300      	movs	r3, #0
    1468:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    146a:	2300      	movs	r3, #0
    146c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    146e:	2300      	movs	r3, #0
    1470:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    1472:	2300      	movs	r3, #0
    1474:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    1476:	4b44      	ldr	r3, [pc, #272]	; (1588 <init_data_bss+0x124>)
    1478:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    147a:	4b44      	ldr	r3, [pc, #272]	; (158c <init_data_bss+0x128>)
    147c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    147e:	9b05      	ldr	r3, [sp, #20]
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1484:	9b05      	ldr	r3, [sp, #20]
    1486:	3304      	adds	r3, #4
    1488:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    148a:	9b05      	ldr	r3, [sp, #20]
    148c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    148e:	2300      	movs	r3, #0
    1490:	9309      	str	r3, [sp, #36]	; 0x24
    1492:	e03d      	b.n	1510 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1494:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1496:	4613      	mov	r3, r2
    1498:	005b      	lsls	r3, r3, #1
    149a:	4413      	add	r3, r2
    149c:	009b      	lsls	r3, r3, #2
    149e:	461a      	mov	r2, r3
    14a0:	9b03      	ldr	r3, [sp, #12]
    14a2:	4413      	add	r3, r2
    14a4:	685b      	ldr	r3, [r3, #4]
    14a6:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    14a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    14aa:	4613      	mov	r3, r2
    14ac:	005b      	lsls	r3, r3, #1
    14ae:	4413      	add	r3, r2
    14b0:	009b      	lsls	r3, r3, #2
    14b2:	461a      	mov	r2, r3
    14b4:	9b03      	ldr	r3, [sp, #12]
    14b6:	4413      	add	r3, r2
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    14bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    14be:	4613      	mov	r3, r2
    14c0:	005b      	lsls	r3, r3, #1
    14c2:	4413      	add	r3, r2
    14c4:	009b      	lsls	r3, r3, #2
    14c6:	461a      	mov	r2, r3
    14c8:	9b03      	ldr	r3, [sp, #12]
    14ca:	4413      	add	r3, r2
    14cc:	689b      	ldr	r3, [r3, #8]
    14ce:	4619      	mov	r1, r3
    14d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    14d2:	4613      	mov	r3, r2
    14d4:	005b      	lsls	r3, r3, #1
    14d6:	4413      	add	r3, r2
    14d8:	009b      	lsls	r3, r3, #2
    14da:	461a      	mov	r2, r3
    14dc:	9b03      	ldr	r3, [sp, #12]
    14de:	4413      	add	r3, r2
    14e0:	685b      	ldr	r3, [r3, #4]
    14e2:	1acb      	subs	r3, r1, r3
    14e4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    14e6:	2300      	movs	r3, #0
    14e8:	9308      	str	r3, [sp, #32]
    14ea:	e00a      	b.n	1502 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    14ec:	9a00      	ldr	r2, [sp, #0]
    14ee:	9b08      	ldr	r3, [sp, #32]
    14f0:	441a      	add	r2, r3
    14f2:	9901      	ldr	r1, [sp, #4]
    14f4:	9b08      	ldr	r3, [sp, #32]
    14f6:	440b      	add	r3, r1
    14f8:	7812      	ldrb	r2, [r2, #0]
    14fa:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    14fc:	9b08      	ldr	r3, [sp, #32]
    14fe:	3301      	adds	r3, #1
    1500:	9308      	str	r3, [sp, #32]
    1502:	9a08      	ldr	r2, [sp, #32]
    1504:	9b06      	ldr	r3, [sp, #24]
    1506:	429a      	cmp	r2, r3
    1508:	d3f0      	bcc.n	14ec <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    150a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    150c:	3301      	adds	r3, #1
    150e:	9309      	str	r3, [sp, #36]	; 0x24
    1510:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1512:	9b07      	ldr	r3, [sp, #28]
    1514:	429a      	cmp	r2, r3
    1516:	d3bd      	bcc.n	1494 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1518:	9b04      	ldr	r3, [sp, #16]
    151a:	681b      	ldr	r3, [r3, #0]
    151c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    151e:	9b04      	ldr	r3, [sp, #16]
    1520:	3304      	adds	r3, #4
    1522:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1524:	9b04      	ldr	r3, [sp, #16]
    1526:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1528:	2300      	movs	r3, #0
    152a:	9309      	str	r3, [sp, #36]	; 0x24
    152c:	e024      	b.n	1578 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    152e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1530:	00db      	lsls	r3, r3, #3
    1532:	9a02      	ldr	r2, [sp, #8]
    1534:	4413      	add	r3, r2
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    153a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    153c:	00db      	lsls	r3, r3, #3
    153e:	9a02      	ldr	r2, [sp, #8]
    1540:	4413      	add	r3, r2
    1542:	685b      	ldr	r3, [r3, #4]
    1544:	4619      	mov	r1, r3
    1546:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1548:	00db      	lsls	r3, r3, #3
    154a:	9a02      	ldr	r2, [sp, #8]
    154c:	4413      	add	r3, r2
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	1acb      	subs	r3, r1, r3
    1552:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1554:	2300      	movs	r3, #0
    1556:	9308      	str	r3, [sp, #32]
    1558:	e007      	b.n	156a <init_data_bss+0x106>
        {
            ram[j] = 0U;
    155a:	9a01      	ldr	r2, [sp, #4]
    155c:	9b08      	ldr	r3, [sp, #32]
    155e:	4413      	add	r3, r2
    1560:	2200      	movs	r2, #0
    1562:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1564:	9b08      	ldr	r3, [sp, #32]
    1566:	3301      	adds	r3, #1
    1568:	9308      	str	r3, [sp, #32]
    156a:	9a08      	ldr	r2, [sp, #32]
    156c:	9b06      	ldr	r3, [sp, #24]
    156e:	429a      	cmp	r2, r3
    1570:	d3f3      	bcc.n	155a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1572:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1574:	3301      	adds	r3, #1
    1576:	9309      	str	r3, [sp, #36]	; 0x24
    1578:	9a09      	ldr	r2, [sp, #36]	; 0x24
    157a:	9b07      	ldr	r3, [sp, #28]
    157c:	429a      	cmp	r2, r3
    157e:	d3d6      	bcc.n	152e <init_data_bss+0xca>
        }
    }
}
    1580:	bf00      	nop
    1582:	bf00      	nop
    1584:	b00a      	add	sp, #40	; 0x28
    1586:	4770      	bx	lr
    1588:	00016f08 	.word	0x00016f08
    158c:	00016f24 	.word	0x00016f24

00001590 <sys_m4_cache_init>:
{
    1590:	b084      	sub	sp, #16
    1592:	4603      	mov	r3, r0
    1594:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1598:	2300      	movs	r3, #0
    159a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    159e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d118      	bne.n	15d8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    15a6:	4b10      	ldr	r3, [pc, #64]	; (15e8 <sys_m4_cache_init+0x58>)
    15a8:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    15ac:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    15ae:	4b0e      	ldr	r3, [pc, #56]	; (15e8 <sys_m4_cache_init+0x58>)
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	4a0d      	ldr	r2, [pc, #52]	; (15e8 <sys_m4_cache_init+0x58>)
    15b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    15b8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    15ba:	bf00      	nop
    15bc:	4b0a      	ldr	r3, [pc, #40]	; (15e8 <sys_m4_cache_init+0x58>)
    15be:	681b      	ldr	r3, [r3, #0]
    15c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    15c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    15c8:	d0f8      	beq.n	15bc <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    15ca:	4b07      	ldr	r3, [pc, #28]	; (15e8 <sys_m4_cache_init+0x58>)
    15cc:	681b      	ldr	r3, [r3, #0]
    15ce:	4a06      	ldr	r2, [pc, #24]	; (15e8 <sys_m4_cache_init+0x58>)
    15d0:	f043 0301 	orr.w	r3, r3, #1
    15d4:	6013      	str	r3, [r2, #0]
    15d6:	e002      	b.n	15de <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    15d8:	2301      	movs	r3, #1
    15da:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    15de:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    15e2:	4618      	mov	r0, r3
    15e4:	b004      	add	sp, #16
    15e6:	4770      	bx	lr
    15e8:	e0082000 	.word	0xe0082000

000015ec <startup_go_to_user_mode>:
}
    15ec:	bf00      	nop
    15ee:	4770      	bx	lr

000015f0 <Sys_GetCoreID>:
    return 0U;
    15f0:	2300      	movs	r3, #0
}
    15f2:	4618      	mov	r0, r3
    15f4:	4770      	bx	lr

000015f6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    15f6:	e7fe      	b.n	15f6 <HardFault_Handler>

000015f8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    15f8:	e7fe      	b.n	15f8 <MemManage_Handler>

000015fa <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    15fa:	e7fe      	b.n	15fa <BusFault_Handler>

000015fc <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    15fc:	e7fe      	b.n	15fc <UsageFault_Handler>

000015fe <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    15fe:	e7fe      	b.n	15fe <SVC_Handler>

00001600 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1600:	e7fe      	b.n	1600 <DebugMon_Handler>

00001602 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    1602:	e7fe      	b.n	1602 <PendSV_Handler>

00001604 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1604:	e7fe      	b.n	1604 <SysTick_Handler>

00001606 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1606:	e7fe      	b.n	1606 <undefined_handler>

00001608 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1608:	b500      	push	{lr}
    160a:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    160c:	4b26      	ldr	r3, [pc, #152]	; (16a8 <_DoInit+0xa0>)
    160e:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1610:	22a8      	movs	r2, #168	; 0xa8
    1612:	2100      	movs	r1, #0
    1614:	9800      	ldr	r0, [sp, #0]
    1616:	f000 fd13 	bl	2040 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    161a:	9b00      	ldr	r3, [sp, #0]
    161c:	2203      	movs	r2, #3
    161e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1620:	9b00      	ldr	r3, [sp, #0]
    1622:	2203      	movs	r2, #3
    1624:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1626:	9b00      	ldr	r3, [sp, #0]
    1628:	4a20      	ldr	r2, [pc, #128]	; (16ac <_DoInit+0xa4>)
    162a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    162c:	9b00      	ldr	r3, [sp, #0]
    162e:	4a20      	ldr	r2, [pc, #128]	; (16b0 <_DoInit+0xa8>)
    1630:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    1632:	9b00      	ldr	r3, [sp, #0]
    1634:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1638:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    163a:	9b00      	ldr	r3, [sp, #0]
    163c:	2200      	movs	r2, #0
    163e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1640:	9b00      	ldr	r3, [sp, #0]
    1642:	2200      	movs	r2, #0
    1644:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1646:	9b00      	ldr	r3, [sp, #0]
    1648:	2200      	movs	r2, #0
    164a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    164c:	9b00      	ldr	r3, [sp, #0]
    164e:	4a17      	ldr	r2, [pc, #92]	; (16ac <_DoInit+0xa4>)
    1650:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    1652:	9b00      	ldr	r3, [sp, #0]
    1654:	4a17      	ldr	r2, [pc, #92]	; (16b4 <_DoInit+0xac>)
    1656:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1658:	9b00      	ldr	r3, [sp, #0]
    165a:	2210      	movs	r2, #16
    165c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    165e:	9b00      	ldr	r3, [sp, #0]
    1660:	2200      	movs	r2, #0
    1662:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1664:	9b00      	ldr	r3, [sp, #0]
    1666:	2200      	movs	r2, #0
    1668:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    166a:	9b00      	ldr	r3, [sp, #0]
    166c:	2200      	movs	r2, #0
    166e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1670:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1674:	2300      	movs	r3, #0
    1676:	9301      	str	r3, [sp, #4]
    1678:	e00c      	b.n	1694 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    167a:	9b01      	ldr	r3, [sp, #4]
    167c:	f1c3 030f 	rsb	r3, r3, #15
    1680:	4a0d      	ldr	r2, [pc, #52]	; (16b8 <_DoInit+0xb0>)
    1682:	5cd1      	ldrb	r1, [r2, r3]
    1684:	9a00      	ldr	r2, [sp, #0]
    1686:	9b01      	ldr	r3, [sp, #4]
    1688:	4413      	add	r3, r2
    168a:	460a      	mov	r2, r1
    168c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    168e:	9b01      	ldr	r3, [sp, #4]
    1690:	3301      	adds	r3, #1
    1692:	9301      	str	r3, [sp, #4]
    1694:	9b01      	ldr	r3, [sp, #4]
    1696:	2b0f      	cmp	r3, #15
    1698:	d9ef      	bls.n	167a <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    169a:	f3bf 8f5f 	dmb	sy
}
    169e:	bf00      	nop
    16a0:	b003      	add	sp, #12
    16a2:	f85d fb04 	ldr.w	pc, [sp], #4
    16a6:	bf00      	nop
    16a8:	1fff9788 	.word	0x1fff9788
    16ac:	00015cac 	.word	0x00015cac
    16b0:	1fff9830 	.word	0x1fff9830
    16b4:	1fff9c30 	.word	0x1fff9c30
    16b8:	00016ee4 	.word	0x00016ee4

000016bc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    16bc:	b500      	push	{lr}
    16be:	b08b      	sub	sp, #44	; 0x2c
    16c0:	9003      	str	r0, [sp, #12]
    16c2:	9102      	str	r1, [sp, #8]
    16c4:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    16c6:	2300      	movs	r3, #0
    16c8:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    16ca:	9b03      	ldr	r3, [sp, #12]
    16cc:	68db      	ldr	r3, [r3, #12]
    16ce:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    16d0:	9b03      	ldr	r3, [sp, #12]
    16d2:	691b      	ldr	r3, [r3, #16]
    16d4:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    16d6:	9a06      	ldr	r2, [sp, #24]
    16d8:	9b07      	ldr	r3, [sp, #28]
    16da:	429a      	cmp	r2, r3
    16dc:	d905      	bls.n	16ea <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    16de:	9a06      	ldr	r2, [sp, #24]
    16e0:	9b07      	ldr	r3, [sp, #28]
    16e2:	1ad3      	subs	r3, r2, r3
    16e4:	3b01      	subs	r3, #1
    16e6:	9309      	str	r3, [sp, #36]	; 0x24
    16e8:	e007      	b.n	16fa <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    16ea:	9b03      	ldr	r3, [sp, #12]
    16ec:	689a      	ldr	r2, [r3, #8]
    16ee:	9906      	ldr	r1, [sp, #24]
    16f0:	9b07      	ldr	r3, [sp, #28]
    16f2:	1acb      	subs	r3, r1, r3
    16f4:	4413      	add	r3, r2
    16f6:	3b01      	subs	r3, #1
    16f8:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    16fa:	9b03      	ldr	r3, [sp, #12]
    16fc:	689a      	ldr	r2, [r3, #8]
    16fe:	9b07      	ldr	r3, [sp, #28]
    1700:	1ad3      	subs	r3, r2, r3
    1702:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1704:	4293      	cmp	r3, r2
    1706:	bf28      	it	cs
    1708:	4613      	movcs	r3, r2
    170a:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    170c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    170e:	9b01      	ldr	r3, [sp, #4]
    1710:	4293      	cmp	r3, r2
    1712:	bf28      	it	cs
    1714:	4613      	movcs	r3, r2
    1716:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1718:	9b03      	ldr	r3, [sp, #12]
    171a:	685a      	ldr	r2, [r3, #4]
    171c:	9b07      	ldr	r3, [sp, #28]
    171e:	4413      	add	r3, r2
    1720:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    1722:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1724:	9902      	ldr	r1, [sp, #8]
    1726:	9805      	ldr	r0, [sp, #20]
    1728:	f000 fc7c 	bl	2024 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    172c:	9a08      	ldr	r2, [sp, #32]
    172e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1730:	4413      	add	r3, r2
    1732:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1734:	9a02      	ldr	r2, [sp, #8]
    1736:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1738:	4413      	add	r3, r2
    173a:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    173c:	9a01      	ldr	r2, [sp, #4]
    173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1740:	1ad3      	subs	r3, r2, r3
    1742:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1744:	9a07      	ldr	r2, [sp, #28]
    1746:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1748:	4413      	add	r3, r2
    174a:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    174c:	9b03      	ldr	r3, [sp, #12]
    174e:	689b      	ldr	r3, [r3, #8]
    1750:	9a07      	ldr	r2, [sp, #28]
    1752:	429a      	cmp	r2, r3
    1754:	d101      	bne.n	175a <_WriteBlocking+0x9e>
      WrOff = 0u;
    1756:	2300      	movs	r3, #0
    1758:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    175a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    175e:	9b03      	ldr	r3, [sp, #12]
    1760:	9a07      	ldr	r2, [sp, #28]
    1762:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1764:	9b01      	ldr	r3, [sp, #4]
    1766:	2b00      	cmp	r3, #0
    1768:	d1b2      	bne.n	16d0 <_WriteBlocking+0x14>
  return NumBytesWritten;
    176a:	9b08      	ldr	r3, [sp, #32]
}
    176c:	4618      	mov	r0, r3
    176e:	b00b      	add	sp, #44	; 0x2c
    1770:	f85d fb04 	ldr.w	pc, [sp], #4

00001774 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1774:	b500      	push	{lr}
    1776:	b089      	sub	sp, #36	; 0x24
    1778:	9003      	str	r0, [sp, #12]
    177a:	9102      	str	r1, [sp, #8]
    177c:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    177e:	9b03      	ldr	r3, [sp, #12]
    1780:	68db      	ldr	r3, [r3, #12]
    1782:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1784:	9b03      	ldr	r3, [sp, #12]
    1786:	689a      	ldr	r2, [r3, #8]
    1788:	9b07      	ldr	r3, [sp, #28]
    178a:	1ad3      	subs	r3, r2, r3
    178c:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    178e:	9a06      	ldr	r2, [sp, #24]
    1790:	9b01      	ldr	r3, [sp, #4]
    1792:	429a      	cmp	r2, r3
    1794:	d911      	bls.n	17ba <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1796:	9b03      	ldr	r3, [sp, #12]
    1798:	685a      	ldr	r2, [r3, #4]
    179a:	9b07      	ldr	r3, [sp, #28]
    179c:	4413      	add	r3, r2
    179e:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    17a0:	9a01      	ldr	r2, [sp, #4]
    17a2:	9902      	ldr	r1, [sp, #8]
    17a4:	9804      	ldr	r0, [sp, #16]
    17a6:	f000 fc3d 	bl	2024 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    17aa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    17ae:	9a07      	ldr	r2, [sp, #28]
    17b0:	9b01      	ldr	r3, [sp, #4]
    17b2:	441a      	add	r2, r3
    17b4:	9b03      	ldr	r3, [sp, #12]
    17b6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    17b8:	e01f      	b.n	17fa <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    17ba:	9b06      	ldr	r3, [sp, #24]
    17bc:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    17be:	9b03      	ldr	r3, [sp, #12]
    17c0:	685a      	ldr	r2, [r3, #4]
    17c2:	9b07      	ldr	r3, [sp, #28]
    17c4:	4413      	add	r3, r2
    17c6:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    17c8:	9a05      	ldr	r2, [sp, #20]
    17ca:	9902      	ldr	r1, [sp, #8]
    17cc:	9804      	ldr	r0, [sp, #16]
    17ce:	f000 fc29 	bl	2024 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    17d2:	9a01      	ldr	r2, [sp, #4]
    17d4:	9b06      	ldr	r3, [sp, #24]
    17d6:	1ad3      	subs	r3, r2, r3
    17d8:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    17da:	9b03      	ldr	r3, [sp, #12]
    17dc:	685b      	ldr	r3, [r3, #4]
    17de:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    17e0:	9a02      	ldr	r2, [sp, #8]
    17e2:	9b06      	ldr	r3, [sp, #24]
    17e4:	4413      	add	r3, r2
    17e6:	9a05      	ldr	r2, [sp, #20]
    17e8:	4619      	mov	r1, r3
    17ea:	9804      	ldr	r0, [sp, #16]
    17ec:	f000 fc1a 	bl	2024 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    17f0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    17f4:	9b03      	ldr	r3, [sp, #12]
    17f6:	9a05      	ldr	r2, [sp, #20]
    17f8:	60da      	str	r2, [r3, #12]
}
    17fa:	bf00      	nop
    17fc:	b009      	add	sp, #36	; 0x24
    17fe:	f85d fb04 	ldr.w	pc, [sp], #4

00001802 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1802:	b086      	sub	sp, #24
    1804:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1806:	9b01      	ldr	r3, [sp, #4]
    1808:	691b      	ldr	r3, [r3, #16]
    180a:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    180c:	9b01      	ldr	r3, [sp, #4]
    180e:	68db      	ldr	r3, [r3, #12]
    1810:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1812:	9a04      	ldr	r2, [sp, #16]
    1814:	9b03      	ldr	r3, [sp, #12]
    1816:	429a      	cmp	r2, r3
    1818:	d808      	bhi.n	182c <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    181a:	9b01      	ldr	r3, [sp, #4]
    181c:	689a      	ldr	r2, [r3, #8]
    181e:	9b03      	ldr	r3, [sp, #12]
    1820:	1ad2      	subs	r2, r2, r3
    1822:	9b04      	ldr	r3, [sp, #16]
    1824:	4413      	add	r3, r2
    1826:	3b01      	subs	r3, #1
    1828:	9305      	str	r3, [sp, #20]
    182a:	e004      	b.n	1836 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    182c:	9a04      	ldr	r2, [sp, #16]
    182e:	9b03      	ldr	r3, [sp, #12]
    1830:	1ad3      	subs	r3, r2, r3
    1832:	3b01      	subs	r3, #1
    1834:	9305      	str	r3, [sp, #20]
  }
  return r;
    1836:	9b05      	ldr	r3, [sp, #20]
}
    1838:	4618      	mov	r0, r3
    183a:	b006      	add	sp, #24
    183c:	4770      	bx	lr
	...

00001840 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1840:	b500      	push	{lr}
    1842:	b089      	sub	sp, #36	; 0x24
    1844:	9003      	str	r0, [sp, #12]
    1846:	9102      	str	r1, [sp, #8]
    1848:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    184a:	9b02      	ldr	r3, [sp, #8]
    184c:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    184e:	9b03      	ldr	r3, [sp, #12]
    1850:	1c5a      	adds	r2, r3, #1
    1852:	4613      	mov	r3, r2
    1854:	005b      	lsls	r3, r3, #1
    1856:	4413      	add	r3, r2
    1858:	00db      	lsls	r3, r3, #3
    185a:	4a20      	ldr	r2, [pc, #128]	; (18dc <SEGGER_RTT_WriteNoLock+0x9c>)
    185c:	4413      	add	r3, r2
    185e:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1860:	9b05      	ldr	r3, [sp, #20]
    1862:	695b      	ldr	r3, [r3, #20]
    1864:	2b02      	cmp	r3, #2
    1866:	d029      	beq.n	18bc <SEGGER_RTT_WriteNoLock+0x7c>
    1868:	2b02      	cmp	r3, #2
    186a:	d82e      	bhi.n	18ca <SEGGER_RTT_WriteNoLock+0x8a>
    186c:	2b00      	cmp	r3, #0
    186e:	d002      	beq.n	1876 <SEGGER_RTT_WriteNoLock+0x36>
    1870:	2b01      	cmp	r3, #1
    1872:	d013      	beq.n	189c <SEGGER_RTT_WriteNoLock+0x5c>
    1874:	e029      	b.n	18ca <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1876:	9805      	ldr	r0, [sp, #20]
    1878:	f7ff ffc3 	bl	1802 <_GetAvailWriteSpace>
    187c:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    187e:	9a04      	ldr	r2, [sp, #16]
    1880:	9b01      	ldr	r3, [sp, #4]
    1882:	429a      	cmp	r2, r3
    1884:	d202      	bcs.n	188c <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1886:	2300      	movs	r3, #0
    1888:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    188a:	e021      	b.n	18d0 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    188c:	9b01      	ldr	r3, [sp, #4]
    188e:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1890:	9a01      	ldr	r2, [sp, #4]
    1892:	9906      	ldr	r1, [sp, #24]
    1894:	9805      	ldr	r0, [sp, #20]
    1896:	f7ff ff6d 	bl	1774 <_WriteNoCheck>
    break;
    189a:	e019      	b.n	18d0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    189c:	9805      	ldr	r0, [sp, #20]
    189e:	f7ff ffb0 	bl	1802 <_GetAvailWriteSpace>
    18a2:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    18a4:	9a01      	ldr	r2, [sp, #4]
    18a6:	9b04      	ldr	r3, [sp, #16]
    18a8:	4293      	cmp	r3, r2
    18aa:	bf28      	it	cs
    18ac:	4613      	movcs	r3, r2
    18ae:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    18b0:	9a07      	ldr	r2, [sp, #28]
    18b2:	9906      	ldr	r1, [sp, #24]
    18b4:	9805      	ldr	r0, [sp, #20]
    18b6:	f7ff ff5d 	bl	1774 <_WriteNoCheck>
    break;
    18ba:	e009      	b.n	18d0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    18bc:	9a01      	ldr	r2, [sp, #4]
    18be:	9906      	ldr	r1, [sp, #24]
    18c0:	9805      	ldr	r0, [sp, #20]
    18c2:	f7ff fefb 	bl	16bc <_WriteBlocking>
    18c6:	9007      	str	r0, [sp, #28]
    break;
    18c8:	e002      	b.n	18d0 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    18ca:	2300      	movs	r3, #0
    18cc:	9307      	str	r3, [sp, #28]
    break;
    18ce:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    18d0:	9b07      	ldr	r3, [sp, #28]
}
    18d2:	4618      	mov	r0, r3
    18d4:	b009      	add	sp, #36	; 0x24
    18d6:	f85d fb04 	ldr.w	pc, [sp], #4
    18da:	bf00      	nop
    18dc:	1fff9788 	.word	0x1fff9788

000018e0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    18e0:	b500      	push	{lr}
    18e2:	b089      	sub	sp, #36	; 0x24
    18e4:	9003      	str	r0, [sp, #12]
    18e6:	9102      	str	r1, [sp, #8]
    18e8:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    18ea:	4b0f      	ldr	r3, [pc, #60]	; (1928 <SEGGER_RTT_Write+0x48>)
    18ec:	9307      	str	r3, [sp, #28]
    18ee:	9b07      	ldr	r3, [sp, #28]
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	b2db      	uxtb	r3, r3
    18f4:	2b53      	cmp	r3, #83	; 0x53
    18f6:	d001      	beq.n	18fc <SEGGER_RTT_Write+0x1c>
    18f8:	f7ff fe86 	bl	1608 <_DoInit>
  SEGGER_RTT_LOCK();
    18fc:	f3ef 8311 	mrs	r3, BASEPRI
    1900:	f04f 0120 	mov.w	r1, #32
    1904:	f381 8811 	msr	BASEPRI, r1
    1908:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    190a:	9a01      	ldr	r2, [sp, #4]
    190c:	9902      	ldr	r1, [sp, #8]
    190e:	9803      	ldr	r0, [sp, #12]
    1910:	f7ff ff96 	bl	1840 <SEGGER_RTT_WriteNoLock>
    1914:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1916:	9b06      	ldr	r3, [sp, #24]
    1918:	f383 8811 	msr	BASEPRI, r3
  return Status;
    191c:	9b05      	ldr	r3, [sp, #20]
}
    191e:	4618      	mov	r0, r3
    1920:	b009      	add	sp, #36	; 0x24
    1922:	f85d fb04 	ldr.w	pc, [sp], #4
    1926:	bf00      	nop
    1928:	1fff9788 	.word	0x1fff9788

0000192c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    192c:	b508      	push	{r3, lr}
  _DoInit();
    192e:	f7ff fe6b 	bl	1608 <_DoInit>
}
    1932:	bf00      	nop
    1934:	bd08      	pop	{r3, pc}

00001936 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1936:	b500      	push	{lr}
    1938:	b085      	sub	sp, #20
    193a:	9001      	str	r0, [sp, #4]
    193c:	460b      	mov	r3, r1
    193e:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1942:	9b01      	ldr	r3, [sp, #4]
    1944:	689b      	ldr	r3, [r3, #8]
    1946:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1948:	9b03      	ldr	r3, [sp, #12]
    194a:	1c5a      	adds	r2, r3, #1
    194c:	9b01      	ldr	r3, [sp, #4]
    194e:	685b      	ldr	r3, [r3, #4]
    1950:	429a      	cmp	r2, r3
    1952:	d80f      	bhi.n	1974 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1954:	9b01      	ldr	r3, [sp, #4]
    1956:	681a      	ldr	r2, [r3, #0]
    1958:	9b03      	ldr	r3, [sp, #12]
    195a:	4413      	add	r3, r2
    195c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1960:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1962:	9b03      	ldr	r3, [sp, #12]
    1964:	1c5a      	adds	r2, r3, #1
    1966:	9b01      	ldr	r3, [sp, #4]
    1968:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    196a:	9b01      	ldr	r3, [sp, #4]
    196c:	68db      	ldr	r3, [r3, #12]
    196e:	1c5a      	adds	r2, r3, #1
    1970:	9b01      	ldr	r3, [sp, #4]
    1972:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1974:	9b01      	ldr	r3, [sp, #4]
    1976:	689a      	ldr	r2, [r3, #8]
    1978:	9b01      	ldr	r3, [sp, #4]
    197a:	685b      	ldr	r3, [r3, #4]
    197c:	429a      	cmp	r2, r3
    197e:	d115      	bne.n	19ac <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1980:	9b01      	ldr	r3, [sp, #4]
    1982:	6918      	ldr	r0, [r3, #16]
    1984:	9b01      	ldr	r3, [sp, #4]
    1986:	6819      	ldr	r1, [r3, #0]
    1988:	9b01      	ldr	r3, [sp, #4]
    198a:	689b      	ldr	r3, [r3, #8]
    198c:	461a      	mov	r2, r3
    198e:	f7ff ffa7 	bl	18e0 <SEGGER_RTT_Write>
    1992:	4602      	mov	r2, r0
    1994:	9b01      	ldr	r3, [sp, #4]
    1996:	689b      	ldr	r3, [r3, #8]
    1998:	429a      	cmp	r2, r3
    199a:	d004      	beq.n	19a6 <_StoreChar+0x70>
      p->ReturnValue = -1;
    199c:	9b01      	ldr	r3, [sp, #4]
    199e:	f04f 32ff 	mov.w	r2, #4294967295
    19a2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    19a4:	e002      	b.n	19ac <_StoreChar+0x76>
      p->Cnt = 0u;
    19a6:	9b01      	ldr	r3, [sp, #4]
    19a8:	2200      	movs	r2, #0
    19aa:	609a      	str	r2, [r3, #8]
}
    19ac:	bf00      	nop
    19ae:	b005      	add	sp, #20
    19b0:	f85d fb04 	ldr.w	pc, [sp], #4

000019b4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    19b4:	b500      	push	{lr}
    19b6:	b08b      	sub	sp, #44	; 0x2c
    19b8:	9003      	str	r0, [sp, #12]
    19ba:	9102      	str	r1, [sp, #8]
    19bc:	9201      	str	r2, [sp, #4]
    19be:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    19c0:	9b02      	ldr	r3, [sp, #8]
    19c2:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    19c4:	2301      	movs	r3, #1
    19c6:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    19c8:	2301      	movs	r3, #1
    19ca:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    19cc:	e007      	b.n	19de <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    19ce:	9a08      	ldr	r2, [sp, #32]
    19d0:	9b01      	ldr	r3, [sp, #4]
    19d2:	fbb2 f3f3 	udiv	r3, r2, r3
    19d6:	9308      	str	r3, [sp, #32]
    Width++;
    19d8:	9b07      	ldr	r3, [sp, #28]
    19da:	3301      	adds	r3, #1
    19dc:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    19de:	9a08      	ldr	r2, [sp, #32]
    19e0:	9b01      	ldr	r3, [sp, #4]
    19e2:	429a      	cmp	r2, r3
    19e4:	d2f3      	bcs.n	19ce <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    19e6:	9a00      	ldr	r2, [sp, #0]
    19e8:	9b07      	ldr	r3, [sp, #28]
    19ea:	429a      	cmp	r2, r3
    19ec:	d901      	bls.n	19f2 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    19ee:	9b00      	ldr	r3, [sp, #0]
    19f0:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    19f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    19f4:	f003 0301 	and.w	r3, r3, #1
    19f8:	2b00      	cmp	r3, #0
    19fa:	d128      	bne.n	1a4e <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    19fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    19fe:	2b00      	cmp	r3, #0
    1a00:	d025      	beq.n	1a4e <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a04:	f003 0302 	and.w	r3, r3, #2
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d006      	beq.n	1a1a <_PrintUnsigned+0x66>
    1a0c:	9b00      	ldr	r3, [sp, #0]
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d103      	bne.n	1a1a <_PrintUnsigned+0x66>
        c = '0';
    1a12:	2330      	movs	r3, #48	; 0x30
    1a14:	f88d 301b 	strb.w	r3, [sp, #27]
    1a18:	e002      	b.n	1a20 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1a1a:	2320      	movs	r3, #32
    1a1c:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1a20:	e00c      	b.n	1a3c <_PrintUnsigned+0x88>
        FieldWidth--;
    1a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1a24:	3b01      	subs	r3, #1
    1a26:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1a28:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1a2c:	4619      	mov	r1, r3
    1a2e:	9803      	ldr	r0, [sp, #12]
    1a30:	f7ff ff81 	bl	1936 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1a34:	9b03      	ldr	r3, [sp, #12]
    1a36:	68db      	ldr	r3, [r3, #12]
    1a38:	2b00      	cmp	r3, #0
    1a3a:	db07      	blt.n	1a4c <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d005      	beq.n	1a4e <_PrintUnsigned+0x9a>
    1a42:	9a07      	ldr	r2, [sp, #28]
    1a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1a46:	429a      	cmp	r2, r3
    1a48:	d3eb      	bcc.n	1a22 <_PrintUnsigned+0x6e>
    1a4a:	e000      	b.n	1a4e <_PrintUnsigned+0x9a>
          break;
    1a4c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1a4e:	9b03      	ldr	r3, [sp, #12]
    1a50:	68db      	ldr	r3, [r3, #12]
    1a52:	2b00      	cmp	r3, #0
    1a54:	db55      	blt.n	1b02 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1a56:	9b00      	ldr	r3, [sp, #0]
    1a58:	2b01      	cmp	r3, #1
    1a5a:	d903      	bls.n	1a64 <_PrintUnsigned+0xb0>
        NumDigits--;
    1a5c:	9b00      	ldr	r3, [sp, #0]
    1a5e:	3b01      	subs	r3, #1
    1a60:	9300      	str	r3, [sp, #0]
    1a62:	e009      	b.n	1a78 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1a64:	9a02      	ldr	r2, [sp, #8]
    1a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a68:	fbb2 f3f3 	udiv	r3, r2, r3
    1a6c:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1a6e:	9a05      	ldr	r2, [sp, #20]
    1a70:	9b01      	ldr	r3, [sp, #4]
    1a72:	429a      	cmp	r2, r3
    1a74:	d200      	bcs.n	1a78 <_PrintUnsigned+0xc4>
          break;
    1a76:	e005      	b.n	1a84 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a7a:	9a01      	ldr	r2, [sp, #4]
    1a7c:	fb02 f303 	mul.w	r3, r2, r3
    1a80:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1a82:	e7e8      	b.n	1a56 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1a84:	9a02      	ldr	r2, [sp, #8]
    1a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a88:	fbb2 f3f3 	udiv	r3, r2, r3
    1a8c:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1a8e:	9b05      	ldr	r3, [sp, #20]
    1a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a92:	fb02 f303 	mul.w	r3, r2, r3
    1a96:	9a02      	ldr	r2, [sp, #8]
    1a98:	1ad3      	subs	r3, r2, r3
    1a9a:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1a9c:	4a1b      	ldr	r2, [pc, #108]	; (1b0c <_PrintUnsigned+0x158>)
    1a9e:	9b05      	ldr	r3, [sp, #20]
    1aa0:	4413      	add	r3, r2
    1aa2:	781b      	ldrb	r3, [r3, #0]
    1aa4:	4619      	mov	r1, r3
    1aa6:	9803      	ldr	r0, [sp, #12]
    1aa8:	f7ff ff45 	bl	1936 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1aac:	9b03      	ldr	r3, [sp, #12]
    1aae:	68db      	ldr	r3, [r3, #12]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	db08      	blt.n	1ac6 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1ab6:	9b01      	ldr	r3, [sp, #4]
    1ab8:	fbb2 f3f3 	udiv	r3, r2, r3
    1abc:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d1df      	bne.n	1a84 <_PrintUnsigned+0xd0>
    1ac4:	e000      	b.n	1ac8 <_PrintUnsigned+0x114>
        break;
    1ac6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1aca:	f003 0301 	and.w	r3, r3, #1
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d017      	beq.n	1b02 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d014      	beq.n	1b02 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ad8:	e00a      	b.n	1af0 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1adc:	3b01      	subs	r3, #1
    1ade:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1ae0:	2120      	movs	r1, #32
    1ae2:	9803      	ldr	r0, [sp, #12]
    1ae4:	f7ff ff27 	bl	1936 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1ae8:	9b03      	ldr	r3, [sp, #12]
    1aea:	68db      	ldr	r3, [r3, #12]
    1aec:	2b00      	cmp	r3, #0
    1aee:	db07      	blt.n	1b00 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1af2:	2b00      	cmp	r3, #0
    1af4:	d005      	beq.n	1b02 <_PrintUnsigned+0x14e>
    1af6:	9a07      	ldr	r2, [sp, #28]
    1af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1afa:	429a      	cmp	r2, r3
    1afc:	d3ed      	bcc.n	1ada <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1afe:	e000      	b.n	1b02 <_PrintUnsigned+0x14e>
            break;
    1b00:	bf00      	nop
}
    1b02:	bf00      	nop
    1b04:	b00b      	add	sp, #44	; 0x2c
    1b06:	f85d fb04 	ldr.w	pc, [sp], #4
    1b0a:	bf00      	nop
    1b0c:	00016ef8 	.word	0x00016ef8

00001b10 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1b10:	b500      	push	{lr}
    1b12:	b089      	sub	sp, #36	; 0x24
    1b14:	9005      	str	r0, [sp, #20]
    1b16:	9104      	str	r1, [sp, #16]
    1b18:	9203      	str	r2, [sp, #12]
    1b1a:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1b1c:	9b04      	ldr	r3, [sp, #16]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	bfb8      	it	lt
    1b22:	425b      	neglt	r3, r3
    1b24:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1b26:	2301      	movs	r3, #1
    1b28:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1b2a:	e007      	b.n	1b3c <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1b2c:	9b03      	ldr	r3, [sp, #12]
    1b2e:	9a06      	ldr	r2, [sp, #24]
    1b30:	fb92 f3f3 	sdiv	r3, r2, r3
    1b34:	9306      	str	r3, [sp, #24]
    Width++;
    1b36:	9b07      	ldr	r3, [sp, #28]
    1b38:	3301      	adds	r3, #1
    1b3a:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1b3c:	9b03      	ldr	r3, [sp, #12]
    1b3e:	9a06      	ldr	r2, [sp, #24]
    1b40:	429a      	cmp	r2, r3
    1b42:	daf3      	bge.n	1b2c <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1b44:	9a02      	ldr	r2, [sp, #8]
    1b46:	9b07      	ldr	r3, [sp, #28]
    1b48:	429a      	cmp	r2, r3
    1b4a:	d901      	bls.n	1b50 <_PrintInt+0x40>
    Width = NumDigits;
    1b4c:	9b02      	ldr	r3, [sp, #8]
    1b4e:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b52:	2b00      	cmp	r3, #0
    1b54:	d00a      	beq.n	1b6c <_PrintInt+0x5c>
    1b56:	9b04      	ldr	r3, [sp, #16]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	db04      	blt.n	1b66 <_PrintInt+0x56>
    1b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b5e:	f003 0304 	and.w	r3, r3, #4
    1b62:	2b00      	cmp	r3, #0
    1b64:	d002      	beq.n	1b6c <_PrintInt+0x5c>
    FieldWidth--;
    1b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b68:	3b01      	subs	r3, #1
    1b6a:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b6e:	f003 0302 	and.w	r3, r3, #2
    1b72:	2b00      	cmp	r3, #0
    1b74:	d002      	beq.n	1b7c <_PrintInt+0x6c>
    1b76:	9b02      	ldr	r3, [sp, #8]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d01c      	beq.n	1bb6 <_PrintInt+0xa6>
    1b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b7e:	f003 0301 	and.w	r3, r3, #1
    1b82:	2b00      	cmp	r3, #0
    1b84:	d117      	bne.n	1bb6 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d014      	beq.n	1bb6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1b8c:	e00a      	b.n	1ba4 <_PrintInt+0x94>
        FieldWidth--;
    1b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b90:	3b01      	subs	r3, #1
    1b92:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1b94:	2120      	movs	r1, #32
    1b96:	9805      	ldr	r0, [sp, #20]
    1b98:	f7ff fecd 	bl	1936 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1b9c:	9b05      	ldr	r3, [sp, #20]
    1b9e:	68db      	ldr	r3, [r3, #12]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	db07      	blt.n	1bb4 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d005      	beq.n	1bb6 <_PrintInt+0xa6>
    1baa:	9a07      	ldr	r2, [sp, #28]
    1bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1bae:	429a      	cmp	r2, r3
    1bb0:	d3ed      	bcc.n	1b8e <_PrintInt+0x7e>
    1bb2:	e000      	b.n	1bb6 <_PrintInt+0xa6>
          break;
    1bb4:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1bb6:	9b05      	ldr	r3, [sp, #20]
    1bb8:	68db      	ldr	r3, [r3, #12]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	db4a      	blt.n	1c54 <_PrintInt+0x144>
    if (v < 0) {
    1bbe:	9b04      	ldr	r3, [sp, #16]
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	da07      	bge.n	1bd4 <_PrintInt+0xc4>
      v = -v;
    1bc4:	9b04      	ldr	r3, [sp, #16]
    1bc6:	425b      	negs	r3, r3
    1bc8:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1bca:	212d      	movs	r1, #45	; 0x2d
    1bcc:	9805      	ldr	r0, [sp, #20]
    1bce:	f7ff feb2 	bl	1936 <_StoreChar>
    1bd2:	e008      	b.n	1be6 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bd6:	f003 0304 	and.w	r3, r3, #4
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d003      	beq.n	1be6 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1bde:	212b      	movs	r1, #43	; 0x2b
    1be0:	9805      	ldr	r0, [sp, #20]
    1be2:	f7ff fea8 	bl	1936 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1be6:	9b05      	ldr	r3, [sp, #20]
    1be8:	68db      	ldr	r3, [r3, #12]
    1bea:	2b00      	cmp	r3, #0
    1bec:	db32      	blt.n	1c54 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bf0:	f003 0302 	and.w	r3, r3, #2
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d01f      	beq.n	1c38 <_PrintInt+0x128>
    1bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bfa:	f003 0301 	and.w	r3, r3, #1
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d11a      	bne.n	1c38 <_PrintInt+0x128>
    1c02:	9b02      	ldr	r3, [sp, #8]
    1c04:	2b00      	cmp	r3, #0
    1c06:	d117      	bne.n	1c38 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d014      	beq.n	1c38 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c0e:	e00a      	b.n	1c26 <_PrintInt+0x116>
            FieldWidth--;
    1c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c12:	3b01      	subs	r3, #1
    1c14:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1c16:	2130      	movs	r1, #48	; 0x30
    1c18:	9805      	ldr	r0, [sp, #20]
    1c1a:	f7ff fe8c 	bl	1936 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1c1e:	9b05      	ldr	r3, [sp, #20]
    1c20:	68db      	ldr	r3, [r3, #12]
    1c22:	2b00      	cmp	r3, #0
    1c24:	db07      	blt.n	1c36 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d005      	beq.n	1c38 <_PrintInt+0x128>
    1c2c:	9a07      	ldr	r2, [sp, #28]
    1c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c30:	429a      	cmp	r2, r3
    1c32:	d3ed      	bcc.n	1c10 <_PrintInt+0x100>
    1c34:	e000      	b.n	1c38 <_PrintInt+0x128>
              break;
    1c36:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1c38:	9b05      	ldr	r3, [sp, #20]
    1c3a:	68db      	ldr	r3, [r3, #12]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	db09      	blt.n	1c54 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1c40:	9904      	ldr	r1, [sp, #16]
    1c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c44:	9301      	str	r3, [sp, #4]
    1c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c48:	9300      	str	r3, [sp, #0]
    1c4a:	9b02      	ldr	r3, [sp, #8]
    1c4c:	9a03      	ldr	r2, [sp, #12]
    1c4e:	9805      	ldr	r0, [sp, #20]
    1c50:	f7ff feb0 	bl	19b4 <_PrintUnsigned>
      }
    }
  }
}
    1c54:	bf00      	nop
    1c56:	b009      	add	sp, #36	; 0x24
    1c58:	f85d fb04 	ldr.w	pc, [sp], #4

00001c5c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1c5c:	b500      	push	{lr}
    1c5e:	b0a3      	sub	sp, #140	; 0x8c
    1c60:	9005      	str	r0, [sp, #20]
    1c62:	9104      	str	r1, [sp, #16]
    1c64:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1c66:	ab06      	add	r3, sp, #24
    1c68:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1c6a:	2340      	movs	r3, #64	; 0x40
    1c6c:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1c6e:	2300      	movs	r3, #0
    1c70:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1c72:	9b05      	ldr	r3, [sp, #20]
    1c74:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1c76:	2300      	movs	r3, #0
    1c78:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1c7a:	9b04      	ldr	r3, [sp, #16]
    1c7c:	781b      	ldrb	r3, [r3, #0]
    1c7e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1c82:	9b04      	ldr	r3, [sp, #16]
    1c84:	3301      	adds	r3, #1
    1c86:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1c88:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	f000 819c 	beq.w	1fca <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1c92:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c96:	2b25      	cmp	r3, #37	; 0x25
    1c98:	f040 818b 	bne.w	1fb2 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1c9c:	2300      	movs	r3, #0
    1c9e:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1ca0:	2301      	movs	r3, #1
    1ca2:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1ca4:	9b04      	ldr	r3, [sp, #16]
    1ca6:	781b      	ldrb	r3, [r3, #0]
    1ca8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1cac:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1cb0:	3b23      	subs	r3, #35	; 0x23
    1cb2:	2b0d      	cmp	r3, #13
    1cb4:	d83e      	bhi.n	1d34 <SEGGER_RTT_vprintf+0xd8>
    1cb6:	a201      	add	r2, pc, #4	; (adr r2, 1cbc <SEGGER_RTT_vprintf+0x60>)
    1cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1cbc:	00001d25 	.word	0x00001d25
    1cc0:	00001d35 	.word	0x00001d35
    1cc4:	00001d35 	.word	0x00001d35
    1cc8:	00001d35 	.word	0x00001d35
    1ccc:	00001d35 	.word	0x00001d35
    1cd0:	00001d35 	.word	0x00001d35
    1cd4:	00001d35 	.word	0x00001d35
    1cd8:	00001d35 	.word	0x00001d35
    1cdc:	00001d15 	.word	0x00001d15
    1ce0:	00001d35 	.word	0x00001d35
    1ce4:	00001cf5 	.word	0x00001cf5
    1ce8:	00001d35 	.word	0x00001d35
    1cec:	00001d35 	.word	0x00001d35
    1cf0:	00001d05 	.word	0x00001d05
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1cf4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1cf6:	f043 0301 	orr.w	r3, r3, #1
    1cfa:	931e      	str	r3, [sp, #120]	; 0x78
    1cfc:	9b04      	ldr	r3, [sp, #16]
    1cfe:	3301      	adds	r3, #1
    1d00:	9304      	str	r3, [sp, #16]
    1d02:	e01a      	b.n	1d3a <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1d04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1d06:	f043 0302 	orr.w	r3, r3, #2
    1d0a:	931e      	str	r3, [sp, #120]	; 0x78
    1d0c:	9b04      	ldr	r3, [sp, #16]
    1d0e:	3301      	adds	r3, #1
    1d10:	9304      	str	r3, [sp, #16]
    1d12:	e012      	b.n	1d3a <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1d14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1d16:	f043 0304 	orr.w	r3, r3, #4
    1d1a:	931e      	str	r3, [sp, #120]	; 0x78
    1d1c:	9b04      	ldr	r3, [sp, #16]
    1d1e:	3301      	adds	r3, #1
    1d20:	9304      	str	r3, [sp, #16]
    1d22:	e00a      	b.n	1d3a <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1d24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1d26:	f043 0308 	orr.w	r3, r3, #8
    1d2a:	931e      	str	r3, [sp, #120]	; 0x78
    1d2c:	9b04      	ldr	r3, [sp, #16]
    1d2e:	3301      	adds	r3, #1
    1d30:	9304      	str	r3, [sp, #16]
    1d32:	e002      	b.n	1d3a <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1d34:	2300      	movs	r3, #0
    1d36:	9320      	str	r3, [sp, #128]	; 0x80
    1d38:	bf00      	nop
        }
      } while (v);
    1d3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d1b1      	bne.n	1ca4 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1d40:	2300      	movs	r3, #0
    1d42:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1d44:	9b04      	ldr	r3, [sp, #16]
    1d46:	781b      	ldrb	r3, [r3, #0]
    1d48:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1d4c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1d50:	2b2f      	cmp	r3, #47	; 0x2f
    1d52:	d912      	bls.n	1d7a <SEGGER_RTT_vprintf+0x11e>
    1d54:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1d58:	2b39      	cmp	r3, #57	; 0x39
    1d5a:	d80e      	bhi.n	1d7a <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1d5c:	9b04      	ldr	r3, [sp, #16]
    1d5e:	3301      	adds	r3, #1
    1d60:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1d62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1d64:	4613      	mov	r3, r2
    1d66:	009b      	lsls	r3, r3, #2
    1d68:	4413      	add	r3, r2
    1d6a:	005b      	lsls	r3, r3, #1
    1d6c:	461a      	mov	r2, r3
    1d6e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1d72:	4413      	add	r3, r2
    1d74:	3b30      	subs	r3, #48	; 0x30
    1d76:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1d78:	e7e4      	b.n	1d44 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1d7a:	2300      	movs	r3, #0
    1d7c:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1d7e:	9b04      	ldr	r3, [sp, #16]
    1d80:	781b      	ldrb	r3, [r3, #0]
    1d82:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1d86:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1d8a:	2b2e      	cmp	r3, #46	; 0x2e
    1d8c:	d11d      	bne.n	1dca <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1d8e:	9b04      	ldr	r3, [sp, #16]
    1d90:	3301      	adds	r3, #1
    1d92:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1d94:	9b04      	ldr	r3, [sp, #16]
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1d9c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1da0:	2b2f      	cmp	r3, #47	; 0x2f
    1da2:	d912      	bls.n	1dca <SEGGER_RTT_vprintf+0x16e>
    1da4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1da8:	2b39      	cmp	r3, #57	; 0x39
    1daa:	d80e      	bhi.n	1dca <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1dac:	9b04      	ldr	r3, [sp, #16]
    1dae:	3301      	adds	r3, #1
    1db0:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1db2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1db4:	4613      	mov	r3, r2
    1db6:	009b      	lsls	r3, r3, #2
    1db8:	4413      	add	r3, r2
    1dba:	005b      	lsls	r3, r3, #1
    1dbc:	461a      	mov	r2, r3
    1dbe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1dc2:	4413      	add	r3, r2
    1dc4:	3b30      	subs	r3, #48	; 0x30
    1dc6:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1dc8:	e7e4      	b.n	1d94 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1dca:	9b04      	ldr	r3, [sp, #16]
    1dcc:	781b      	ldrb	r3, [r3, #0]
    1dce:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1dd2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1dd6:	2b6c      	cmp	r3, #108	; 0x6c
    1dd8:	d003      	beq.n	1de2 <SEGGER_RTT_vprintf+0x186>
    1dda:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1dde:	2b68      	cmp	r3, #104	; 0x68
    1de0:	d107      	bne.n	1df2 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1de2:	9b04      	ldr	r3, [sp, #16]
    1de4:	3301      	adds	r3, #1
    1de6:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1de8:	9b04      	ldr	r3, [sp, #16]
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1df0:	e7ef      	b.n	1dd2 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1df2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1df6:	2b25      	cmp	r3, #37	; 0x25
    1df8:	f000 80d0 	beq.w	1f9c <SEGGER_RTT_vprintf+0x340>
    1dfc:	2b25      	cmp	r3, #37	; 0x25
    1dfe:	f2c0 80d3 	blt.w	1fa8 <SEGGER_RTT_vprintf+0x34c>
    1e02:	2b78      	cmp	r3, #120	; 0x78
    1e04:	f300 80d0 	bgt.w	1fa8 <SEGGER_RTT_vprintf+0x34c>
    1e08:	2b58      	cmp	r3, #88	; 0x58
    1e0a:	f2c0 80cd 	blt.w	1fa8 <SEGGER_RTT_vprintf+0x34c>
    1e0e:	3b58      	subs	r3, #88	; 0x58
    1e10:	2b20      	cmp	r3, #32
    1e12:	f200 80c9 	bhi.w	1fa8 <SEGGER_RTT_vprintf+0x34c>
    1e16:	a201      	add	r2, pc, #4	; (adr r2, 1e1c <SEGGER_RTT_vprintf+0x1c0>)
    1e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1e1c:	00001f0d 	.word	0x00001f0d
    1e20:	00001fa9 	.word	0x00001fa9
    1e24:	00001fa9 	.word	0x00001fa9
    1e28:	00001fa9 	.word	0x00001fa9
    1e2c:	00001fa9 	.word	0x00001fa9
    1e30:	00001fa9 	.word	0x00001fa9
    1e34:	00001fa9 	.word	0x00001fa9
    1e38:	00001fa9 	.word	0x00001fa9
    1e3c:	00001fa9 	.word	0x00001fa9
    1e40:	00001fa9 	.word	0x00001fa9
    1e44:	00001fa9 	.word	0x00001fa9
    1e48:	00001ea1 	.word	0x00001ea1
    1e4c:	00001ec5 	.word	0x00001ec5
    1e50:	00001fa9 	.word	0x00001fa9
    1e54:	00001fa9 	.word	0x00001fa9
    1e58:	00001fa9 	.word	0x00001fa9
    1e5c:	00001fa9 	.word	0x00001fa9
    1e60:	00001fa9 	.word	0x00001fa9
    1e64:	00001fa9 	.word	0x00001fa9
    1e68:	00001fa9 	.word	0x00001fa9
    1e6c:	00001fa9 	.word	0x00001fa9
    1e70:	00001fa9 	.word	0x00001fa9
    1e74:	00001fa9 	.word	0x00001fa9
    1e78:	00001fa9 	.word	0x00001fa9
    1e7c:	00001f79 	.word	0x00001f79
    1e80:	00001fa9 	.word	0x00001fa9
    1e84:	00001fa9 	.word	0x00001fa9
    1e88:	00001f31 	.word	0x00001f31
    1e8c:	00001fa9 	.word	0x00001fa9
    1e90:	00001ee9 	.word	0x00001ee9
    1e94:	00001fa9 	.word	0x00001fa9
    1e98:	00001fa9 	.word	0x00001fa9
    1e9c:	00001f0d 	.word	0x00001f0d
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1ea0:	9b03      	ldr	r3, [sp, #12]
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	1d19      	adds	r1, r3, #4
    1ea6:	9a03      	ldr	r2, [sp, #12]
    1ea8:	6011      	str	r1, [r2, #0]
    1eaa:	681b      	ldr	r3, [r3, #0]
    1eac:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1eae:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1eb0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1eb4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1eb8:	ab16      	add	r3, sp, #88	; 0x58
    1eba:	4611      	mov	r1, r2
    1ebc:	4618      	mov	r0, r3
    1ebe:	f7ff fd3a 	bl	1936 <_StoreChar>
        break;
    1ec2:	e072      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1ec4:	9b03      	ldr	r3, [sp, #12]
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	1d19      	adds	r1, r3, #4
    1eca:	9a03      	ldr	r2, [sp, #12]
    1ecc:	6011      	str	r1, [r2, #0]
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1ed2:	a816      	add	r0, sp, #88	; 0x58
    1ed4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ed6:	9301      	str	r3, [sp, #4]
    1ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1eda:	9300      	str	r3, [sp, #0]
    1edc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1ede:	220a      	movs	r2, #10
    1ee0:	9920      	ldr	r1, [sp, #128]	; 0x80
    1ee2:	f7ff fe15 	bl	1b10 <_PrintInt>
        break;
    1ee6:	e060      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1ee8:	9b03      	ldr	r3, [sp, #12]
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	1d19      	adds	r1, r3, #4
    1eee:	9a03      	ldr	r2, [sp, #12]
    1ef0:	6011      	str	r1, [r2, #0]
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1ef6:	9920      	ldr	r1, [sp, #128]	; 0x80
    1ef8:	a816      	add	r0, sp, #88	; 0x58
    1efa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1efc:	9301      	str	r3, [sp, #4]
    1efe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1f00:	9300      	str	r3, [sp, #0]
    1f02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1f04:	220a      	movs	r2, #10
    1f06:	f7ff fd55 	bl	19b4 <_PrintUnsigned>
        break;
    1f0a:	e04e      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1f0c:	9b03      	ldr	r3, [sp, #12]
    1f0e:	681b      	ldr	r3, [r3, #0]
    1f10:	1d19      	adds	r1, r3, #4
    1f12:	9a03      	ldr	r2, [sp, #12]
    1f14:	6011      	str	r1, [r2, #0]
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1f1a:	9920      	ldr	r1, [sp, #128]	; 0x80
    1f1c:	a816      	add	r0, sp, #88	; 0x58
    1f1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f20:	9301      	str	r3, [sp, #4]
    1f22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1f24:	9300      	str	r3, [sp, #0]
    1f26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1f28:	2210      	movs	r2, #16
    1f2a:	f7ff fd43 	bl	19b4 <_PrintUnsigned>
        break;
    1f2e:	e03c      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1f30:	9b03      	ldr	r3, [sp, #12]
    1f32:	681b      	ldr	r3, [r3, #0]
    1f34:	1d19      	adds	r1, r3, #4
    1f36:	9a03      	ldr	r2, [sp, #12]
    1f38:	6011      	str	r1, [r2, #0]
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1f3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1f40:	2b00      	cmp	r3, #0
    1f42:	d101      	bne.n	1f48 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1f44:	4b2c      	ldr	r3, [pc, #176]	; (1ff8 <SEGGER_RTT_vprintf+0x39c>)
    1f46:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1f48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1f4a:	781b      	ldrb	r3, [r3, #0]
    1f4c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1f50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1f52:	3301      	adds	r3, #1
    1f54:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1f56:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d00a      	beq.n	1f74 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1f5e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1f62:	ab16      	add	r3, sp, #88	; 0x58
    1f64:	4611      	mov	r1, r2
    1f66:	4618      	mov	r0, r3
    1f68:	f7ff fce5 	bl	1936 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1f6e:	2b00      	cmp	r3, #0
    1f70:	daea      	bge.n	1f48 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1f72:	e01a      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
              break;
    1f74:	bf00      	nop
        break;
    1f76:	e018      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1f78:	9b03      	ldr	r3, [sp, #12]
    1f7a:	681b      	ldr	r3, [r3, #0]
    1f7c:	1d19      	adds	r1, r3, #4
    1f7e:	9a03      	ldr	r2, [sp, #12]
    1f80:	6011      	str	r1, [r2, #0]
    1f82:	681b      	ldr	r3, [r3, #0]
    1f84:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1f86:	9920      	ldr	r1, [sp, #128]	; 0x80
    1f88:	a816      	add	r0, sp, #88	; 0x58
    1f8a:	2300      	movs	r3, #0
    1f8c:	9301      	str	r3, [sp, #4]
    1f8e:	2308      	movs	r3, #8
    1f90:	9300      	str	r3, [sp, #0]
    1f92:	2308      	movs	r3, #8
    1f94:	2210      	movs	r2, #16
    1f96:	f7ff fd0d 	bl	19b4 <_PrintUnsigned>
        break;
    1f9a:	e006      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1f9c:	ab16      	add	r3, sp, #88	; 0x58
    1f9e:	2125      	movs	r1, #37	; 0x25
    1fa0:	4618      	mov	r0, r3
    1fa2:	f7ff fcc8 	bl	1936 <_StoreChar>
        break;
    1fa6:	e000      	b.n	1faa <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1fa8:	bf00      	nop
      }
      sFormat++;
    1faa:	9b04      	ldr	r3, [sp, #16]
    1fac:	3301      	adds	r3, #1
    1fae:	9304      	str	r3, [sp, #16]
    1fb0:	e006      	b.n	1fc0 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1fb2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1fb6:	ab16      	add	r3, sp, #88	; 0x58
    1fb8:	4611      	mov	r1, r2
    1fba:	4618      	mov	r0, r3
    1fbc:	f7ff fcbb 	bl	1936 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	f6bf ae59 	bge.w	1c7a <SEGGER_RTT_vprintf+0x1e>
    1fc8:	e000      	b.n	1fcc <SEGGER_RTT_vprintf+0x370>
      break;
    1fca:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1fce:	2b00      	cmp	r3, #0
    1fd0:	dd0c      	ble.n	1fec <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1fd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d005      	beq.n	1fe4 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1fd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1fda:	ab06      	add	r3, sp, #24
    1fdc:	4619      	mov	r1, r3
    1fde:	9805      	ldr	r0, [sp, #20]
    1fe0:	f7ff fc7e 	bl	18e0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1fe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1fe6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1fe8:	4413      	add	r3, r2
    1fea:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1fec:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1fee:	4618      	mov	r0, r3
    1ff0:	b023      	add	sp, #140	; 0x8c
    1ff2:	f85d fb04 	ldr.w	pc, [sp], #4
    1ff6:	bf00      	nop
    1ff8:	00015cb8 	.word	0x00015cb8

00001ffc <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1ffc:	b40e      	push	{r1, r2, r3}
    1ffe:	b500      	push	{lr}
    2000:	b084      	sub	sp, #16
    2002:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    2004:	ab06      	add	r3, sp, #24
    2006:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    2008:	ab02      	add	r3, sp, #8
    200a:	461a      	mov	r2, r3
    200c:	9905      	ldr	r1, [sp, #20]
    200e:	9801      	ldr	r0, [sp, #4]
    2010:	f7ff fe24 	bl	1c5c <SEGGER_RTT_vprintf>
    2014:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    2016:	9b03      	ldr	r3, [sp, #12]
}
    2018:	4618      	mov	r0, r3
    201a:	b004      	add	sp, #16
    201c:	f85d eb04 	ldr.w	lr, [sp], #4
    2020:	b003      	add	sp, #12
    2022:	4770      	bx	lr

00002024 <memcpy>:
    2024:	440a      	add	r2, r1
    2026:	4291      	cmp	r1, r2
    2028:	f100 33ff 	add.w	r3, r0, #4294967295
    202c:	d100      	bne.n	2030 <memcpy+0xc>
    202e:	4770      	bx	lr
    2030:	b510      	push	{r4, lr}
    2032:	f811 4b01 	ldrb.w	r4, [r1], #1
    2036:	f803 4f01 	strb.w	r4, [r3, #1]!
    203a:	4291      	cmp	r1, r2
    203c:	d1f9      	bne.n	2032 <memcpy+0xe>
    203e:	bd10      	pop	{r4, pc}

00002040 <memset>:
    2040:	4402      	add	r2, r0
    2042:	4603      	mov	r3, r0
    2044:	4293      	cmp	r3, r2
    2046:	d100      	bne.n	204a <memset+0xa>
    2048:	4770      	bx	lr
    204a:	f803 1b01 	strb.w	r1, [r3], #1
    204e:	e7f9      	b.n	2044 <memset+0x4>

00002050 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2050:	b086      	sub	sp, #24
    2052:	9003      	str	r0, [sp, #12]
    2054:	9102      	str	r1, [sp, #8]
    2056:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    2058:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    205c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    2060:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    2062:	9b01      	ldr	r3, [sp, #4]
    2064:	2b00      	cmp	r3, #0
    2066:	d007      	beq.n	2078 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    2068:	9b03      	ldr	r3, [sp, #12]
    206a:	3310      	adds	r3, #16
    206c:	009b      	lsls	r3, r3, #2
    206e:	9a05      	ldr	r2, [sp, #20]
    2070:	4413      	add	r3, r2
    2072:	681a      	ldr	r2, [r3, #0]
    2074:	9b01      	ldr	r3, [sp, #4]
    2076:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    2078:	9b03      	ldr	r3, [sp, #12]
    207a:	3310      	adds	r3, #16
    207c:	009b      	lsls	r3, r3, #2
    207e:	9a05      	ldr	r2, [sp, #20]
    2080:	4413      	add	r3, r2
    2082:	9a02      	ldr	r2, [sp, #8]
    2084:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    2086:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    208a:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    208e:	bf00      	nop
    2090:	b006      	add	sp, #24
    2092:	4770      	bx	lr

00002094 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    2094:	b082      	sub	sp, #8
    2096:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2098:	9b01      	ldr	r3, [sp, #4]
    209a:	f003 021f 	and.w	r2, r3, #31
    209e:	4905      	ldr	r1, [pc, #20]	; (20b4 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    20a0:	9b01      	ldr	r3, [sp, #4]
    20a2:	095b      	lsrs	r3, r3, #5
    20a4:	2001      	movs	r0, #1
    20a6:	fa00 f202 	lsl.w	r2, r0, r2
    20aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    20ae:	bf00      	nop
    20b0:	b002      	add	sp, #8
    20b2:	4770      	bx	lr
    20b4:	e000e100 	.word	0xe000e100

000020b8 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    20b8:	b082      	sub	sp, #8
    20ba:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    20bc:	9b01      	ldr	r3, [sp, #4]
    20be:	f003 021f 	and.w	r2, r3, #31
    20c2:	4906      	ldr	r1, [pc, #24]	; (20dc <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    20c4:	9b01      	ldr	r3, [sp, #4]
    20c6:	095b      	lsrs	r3, r3, #5
    20c8:	2001      	movs	r0, #1
    20ca:	fa00 f202 	lsl.w	r2, r0, r2
    20ce:	3320      	adds	r3, #32
    20d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    20d4:	bf00      	nop
    20d6:	b002      	add	sp, #8
    20d8:	4770      	bx	lr
    20da:	bf00      	nop
    20dc:	e000e100 	.word	0xe000e100

000020e0 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    20e0:	b084      	sub	sp, #16
    20e2:	9001      	str	r0, [sp, #4]
    20e4:	460b      	mov	r3, r1
    20e6:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    20ea:	2304      	movs	r3, #4
    20ec:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    20f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    20f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    20f8:	fa02 f103 	lsl.w	r1, r2, r3
    20fc:	4a04      	ldr	r2, [pc, #16]	; (2110 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    20fe:	9b01      	ldr	r3, [sp, #4]
    2100:	b2c9      	uxtb	r1, r1
    2102:	4413      	add	r3, r2
    2104:	460a      	mov	r2, r1
    2106:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    210a:	bf00      	nop
    210c:	b004      	add	sp, #16
    210e:	4770      	bx	lr
    2110:	e000e100 	.word	0xe000e100

00002114 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    2114:	b084      	sub	sp, #16
    2116:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2118:	2304      	movs	r3, #4
    211a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    211e:	4a09      	ldr	r2, [pc, #36]	; (2144 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    2120:	9b01      	ldr	r3, [sp, #4]
    2122:	4413      	add	r3, r2
    2124:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    2128:	b2db      	uxtb	r3, r3
    212a:	461a      	mov	r2, r3
    212c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2130:	fa42 f303 	asr.w	r3, r2, r3
    2134:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    2138:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    213c:	4618      	mov	r0, r3
    213e:	b004      	add	sp, #16
    2140:	4770      	bx	lr
    2142:	bf00      	nop
    2144:	e000e100 	.word	0xe000e100

00002148 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    2148:	b082      	sub	sp, #8
    214a:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    214c:	9b01      	ldr	r3, [sp, #4]
    214e:	f003 021f 	and.w	r2, r3, #31
    2152:	4906      	ldr	r1, [pc, #24]	; (216c <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    2154:	9b01      	ldr	r3, [sp, #4]
    2156:	095b      	lsrs	r3, r3, #5
    2158:	2001      	movs	r0, #1
    215a:	fa00 f202 	lsl.w	r2, r0, r2
    215e:	3360      	adds	r3, #96	; 0x60
    2160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    2164:	bf00      	nop
    2166:	b002      	add	sp, #8
    2168:	4770      	bx	lr
    216a:	bf00      	nop
    216c:	e000e100 	.word	0xe000e100

00002170 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2170:	b500      	push	{lr}
    2172:	b085      	sub	sp, #20
    2174:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2176:	2300      	movs	r3, #0
    2178:	9303      	str	r3, [sp, #12]
    217a:	e05d      	b.n	2238 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    217c:	9b01      	ldr	r3, [sp, #4]
    217e:	6859      	ldr	r1, [r3, #4]
    2180:	9a03      	ldr	r2, [sp, #12]
    2182:	4613      	mov	r3, r2
    2184:	005b      	lsls	r3, r3, #1
    2186:	4413      	add	r3, r2
    2188:	009b      	lsls	r3, r3, #2
    218a:	440b      	add	r3, r1
    218c:	681b      	ldr	r3, [r3, #0]
    218e:	4618      	mov	r0, r3
    2190:	f000 f899 	bl	22c6 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2194:	9b01      	ldr	r3, [sp, #4]
    2196:	6859      	ldr	r1, [r3, #4]
    2198:	9a03      	ldr	r2, [sp, #12]
    219a:	4613      	mov	r3, r2
    219c:	005b      	lsls	r3, r3, #1
    219e:	4413      	add	r3, r2
    21a0:	009b      	lsls	r3, r3, #2
    21a2:	440b      	add	r3, r1
    21a4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    21a6:	9b01      	ldr	r3, [sp, #4]
    21a8:	6859      	ldr	r1, [r3, #4]
    21aa:	9a03      	ldr	r2, [sp, #12]
    21ac:	4613      	mov	r3, r2
    21ae:	005b      	lsls	r3, r3, #1
    21b0:	4413      	add	r3, r2
    21b2:	009b      	lsls	r3, r3, #2
    21b4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    21b6:	795b      	ldrb	r3, [r3, #5]
    21b8:	4619      	mov	r1, r3
    21ba:	f000 f869 	bl	2290 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    21be:	9b01      	ldr	r3, [sp, #4]
    21c0:	6859      	ldr	r1, [r3, #4]
    21c2:	9a03      	ldr	r2, [sp, #12]
    21c4:	4613      	mov	r3, r2
    21c6:	005b      	lsls	r3, r3, #1
    21c8:	4413      	add	r3, r2
    21ca:	009b      	lsls	r3, r3, #2
    21cc:	440b      	add	r3, r1
    21ce:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    21d0:	9b01      	ldr	r3, [sp, #4]
    21d2:	6859      	ldr	r1, [r3, #4]
    21d4:	9a03      	ldr	r2, [sp, #12]
    21d6:	4613      	mov	r3, r2
    21d8:	005b      	lsls	r3, r3, #1
    21da:	4413      	add	r3, r2
    21dc:	009b      	lsls	r3, r3, #2
    21de:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    21e0:	689b      	ldr	r3, [r3, #8]
    21e2:	2200      	movs	r2, #0
    21e4:	4619      	mov	r1, r3
    21e6:	f000 f831 	bl	224c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    21ea:	9b01      	ldr	r3, [sp, #4]
    21ec:	6859      	ldr	r1, [r3, #4]
    21ee:	9a03      	ldr	r2, [sp, #12]
    21f0:	4613      	mov	r3, r2
    21f2:	005b      	lsls	r3, r3, #1
    21f4:	4413      	add	r3, r2
    21f6:	009b      	lsls	r3, r3, #2
    21f8:	440b      	add	r3, r1
    21fa:	791b      	ldrb	r3, [r3, #4]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d00c      	beq.n	221a <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2200:	9b01      	ldr	r3, [sp, #4]
    2202:	6859      	ldr	r1, [r3, #4]
    2204:	9a03      	ldr	r2, [sp, #12]
    2206:	4613      	mov	r3, r2
    2208:	005b      	lsls	r3, r3, #1
    220a:	4413      	add	r3, r2
    220c:	009b      	lsls	r3, r3, #2
    220e:	440b      	add	r3, r1
    2210:	681b      	ldr	r3, [r3, #0]
    2212:	4618      	mov	r0, r3
    2214:	f000 f828 	bl	2268 <IntCtrl_Ip_EnableIrq>
    2218:	e00b      	b.n	2232 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    221a:	9b01      	ldr	r3, [sp, #4]
    221c:	6859      	ldr	r1, [r3, #4]
    221e:	9a03      	ldr	r2, [sp, #12]
    2220:	4613      	mov	r3, r2
    2222:	005b      	lsls	r3, r3, #1
    2224:	4413      	add	r3, r2
    2226:	009b      	lsls	r3, r3, #2
    2228:	440b      	add	r3, r1
    222a:	681b      	ldr	r3, [r3, #0]
    222c:	4618      	mov	r0, r3
    222e:	f000 f825 	bl	227c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2232:	9b03      	ldr	r3, [sp, #12]
    2234:	3301      	adds	r3, #1
    2236:	9303      	str	r3, [sp, #12]
    2238:	9b01      	ldr	r3, [sp, #4]
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	9a03      	ldr	r2, [sp, #12]
    223e:	429a      	cmp	r2, r3
    2240:	d39c      	bcc.n	217c <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    2242:	2300      	movs	r3, #0
}
    2244:	4618      	mov	r0, r3
    2246:	b005      	add	sp, #20
    2248:	f85d fb04 	ldr.w	pc, [sp], #4

0000224c <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    224c:	b500      	push	{lr}
    224e:	b085      	sub	sp, #20
    2250:	9003      	str	r0, [sp, #12]
    2252:	9102      	str	r1, [sp, #8]
    2254:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    2256:	9a01      	ldr	r2, [sp, #4]
    2258:	9902      	ldr	r1, [sp, #8]
    225a:	9803      	ldr	r0, [sp, #12]
    225c:	f7ff fef8 	bl	2050 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    2260:	bf00      	nop
    2262:	b005      	add	sp, #20
    2264:	f85d fb04 	ldr.w	pc, [sp], #4

00002268 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    2268:	b500      	push	{lr}
    226a:	b083      	sub	sp, #12
    226c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    226e:	9801      	ldr	r0, [sp, #4]
    2270:	f7ff ff10 	bl	2094 <IntCtrl_Ip_EnableIrqPrivileged>
}
    2274:	bf00      	nop
    2276:	b003      	add	sp, #12
    2278:	f85d fb04 	ldr.w	pc, [sp], #4

0000227c <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    227c:	b500      	push	{lr}
    227e:	b083      	sub	sp, #12
    2280:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    2282:	9801      	ldr	r0, [sp, #4]
    2284:	f7ff ff18 	bl	20b8 <IntCtrl_Ip_DisableIrqPrivileged>
}
    2288:	bf00      	nop
    228a:	b003      	add	sp, #12
    228c:	f85d fb04 	ldr.w	pc, [sp], #4

00002290 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2290:	b500      	push	{lr}
    2292:	b083      	sub	sp, #12
    2294:	9001      	str	r0, [sp, #4]
    2296:	460b      	mov	r3, r1
    2298:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    229c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    22a0:	4619      	mov	r1, r3
    22a2:	9801      	ldr	r0, [sp, #4]
    22a4:	f7ff ff1c 	bl	20e0 <IntCtrl_Ip_SetPriorityPrivileged>
}
    22a8:	bf00      	nop
    22aa:	b003      	add	sp, #12
    22ac:	f85d fb04 	ldr.w	pc, [sp], #4

000022b0 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    22b0:	b500      	push	{lr}
    22b2:	b083      	sub	sp, #12
    22b4:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    22b6:	9801      	ldr	r0, [sp, #4]
    22b8:	f7ff ff2c 	bl	2114 <IntCtrl_Ip_GetPriorityPrivileged>
    22bc:	4603      	mov	r3, r0
}
    22be:	4618      	mov	r0, r3
    22c0:	b003      	add	sp, #12
    22c2:	f85d fb04 	ldr.w	pc, [sp], #4

000022c6 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    22c6:	b500      	push	{lr}
    22c8:	b083      	sub	sp, #12
    22ca:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    22cc:	9801      	ldr	r0, [sp, #4]
    22ce:	f7ff ff3b 	bl	2148 <IntCtrl_Ip_ClearPendingPrivileged>
}
    22d2:	bf00      	nop
    22d4:	b003      	add	sp, #12
    22d6:	f85d fb04 	ldr.w	pc, [sp], #4
    22da:	bf00      	nop

000022dc <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    22dc:	b500      	push	{lr}
    22de:	b083      	sub	sp, #12
    22e0:	9001      	str	r0, [sp, #4]
    22e2:	460b      	mov	r3, r1
    22e4:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    22e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d003      	beq.n	22f8 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    22f0:	9801      	ldr	r0, [sp, #4]
    22f2:	f7ff ffb9 	bl	2268 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    22f6:	e002      	b.n	22fe <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    22f8:	9801      	ldr	r0, [sp, #4]
    22fa:	f7ff ffbf 	bl	227c <IntCtrl_Ip_DisableIrq>
}
    22fe:	bf00      	nop
    2300:	b003      	add	sp, #12
    2302:	f85d fb04 	ldr.w	pc, [sp], #4

00002306 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2306:	b500      	push	{lr}
    2308:	b083      	sub	sp, #12
    230a:	9001      	str	r0, [sp, #4]
    230c:	460b      	mov	r3, r1
    230e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    2312:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2316:	4619      	mov	r1, r3
    2318:	9801      	ldr	r0, [sp, #4]
    231a:	f7ff ffb9 	bl	2290 <IntCtrl_Ip_SetPriority>
}
    231e:	bf00      	nop
    2320:	b003      	add	sp, #12
    2322:	f85d fb04 	ldr.w	pc, [sp], #4

00002326 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    2326:	b500      	push	{lr}
    2328:	b083      	sub	sp, #12
    232a:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    232c:	9801      	ldr	r0, [sp, #4]
    232e:	f7ff ffbf 	bl	22b0 <IntCtrl_Ip_GetPriority>
    2332:	4603      	mov	r3, r0
}
    2334:	4618      	mov	r0, r3
    2336:	b003      	add	sp, #12
    2338:	f85d fb04 	ldr.w	pc, [sp], #4

0000233c <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    233c:	b500      	push	{lr}
    233e:	b085      	sub	sp, #20
    2340:	9003      	str	r0, [sp, #12]
    2342:	9102      	str	r1, [sp, #8]
    2344:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2346:	9a01      	ldr	r2, [sp, #4]
    2348:	9902      	ldr	r1, [sp, #8]
    234a:	9803      	ldr	r0, [sp, #12]
    234c:	f7ff ff7e 	bl	224c <IntCtrl_Ip_InstallHandler>
}
    2350:	bf00      	nop
    2352:	b005      	add	sp, #20
    2354:	f85d fb04 	ldr.w	pc, [sp], #4

00002358 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    2358:	b500      	push	{lr}
    235a:	b085      	sub	sp, #20
    235c:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    235e:	2300      	movs	r3, #0
    2360:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    2364:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2368:	4a05      	ldr	r2, [pc, #20]	; (2380 <Platform_Init+0x28>)
    236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    236e:	681b      	ldr	r3, [r3, #0]
    2370:	4618      	mov	r0, r3
    2372:	f000 f8c7 	bl	2504 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    2376:	bf00      	nop
    2378:	b005      	add	sp, #20
    237a:	f85d fb04 	ldr.w	pc, [sp], #4
    237e:	bf00      	nop
    2380:	00016b70 	.word	0x00016b70

00002384 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2384:	b500      	push	{lr}
    2386:	b085      	sub	sp, #20
    2388:	9001      	str	r0, [sp, #4]
    238a:	460b      	mov	r3, r1
    238c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2390:	2300      	movs	r3, #0
    2392:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    2396:	f89d 3003 	ldrb.w	r3, [sp, #3]
    239a:	4619      	mov	r1, r3
    239c:	9801      	ldr	r0, [sp, #4]
    239e:	f7ff ff9d 	bl	22dc <Platform_Ipw_SetIrq>
    }
    return RetValue;
    23a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    23a6:	4618      	mov	r0, r3
    23a8:	b005      	add	sp, #20
    23aa:	f85d fb04 	ldr.w	pc, [sp], #4

000023ae <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    23ae:	b500      	push	{lr}
    23b0:	b085      	sub	sp, #20
    23b2:	9001      	str	r0, [sp, #4]
    23b4:	460b      	mov	r3, r1
    23b6:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    23ba:	2300      	movs	r3, #0
    23bc:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    23c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23c4:	4619      	mov	r1, r3
    23c6:	9801      	ldr	r0, [sp, #4]
    23c8:	f7ff ff9d 	bl	2306 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    23cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    23d0:	4618      	mov	r0, r3
    23d2:	b005      	add	sp, #20
    23d4:	f85d fb04 	ldr.w	pc, [sp], #4

000023d8 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    23d8:	b500      	push	{lr}
    23da:	b085      	sub	sp, #20
    23dc:	9001      	str	r0, [sp, #4]
    23de:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    23e0:	2300      	movs	r3, #0
    23e2:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    23e6:	9801      	ldr	r0, [sp, #4]
    23e8:	f7ff ff9d 	bl	2326 <Platform_Ipw_GetIrqPriority>
    23ec:	4603      	mov	r3, r0
    23ee:	461a      	mov	r2, r3
    23f0:	9b00      	ldr	r3, [sp, #0]
    23f2:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    23f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    23f8:	4618      	mov	r0, r3
    23fa:	b005      	add	sp, #20
    23fc:	f85d fb04 	ldr.w	pc, [sp], #4

00002400 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2400:	b500      	push	{lr}
    2402:	b087      	sub	sp, #28
    2404:	9003      	str	r0, [sp, #12]
    2406:	9102      	str	r1, [sp, #8]
    2408:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    240a:	2300      	movs	r3, #0
    240c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2410:	9a01      	ldr	r2, [sp, #4]
    2412:	9902      	ldr	r1, [sp, #8]
    2414:	9803      	ldr	r0, [sp, #12]
    2416:	f7ff ff91 	bl	233c <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    241a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    241e:	4618      	mov	r0, r3
    2420:	b007      	add	sp, #28
    2422:	f85d fb04 	ldr.w	pc, [sp], #4
    2426:	bf00      	nop

00002428 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2428:	b500      	push	{lr}
    242a:	b085      	sub	sp, #20
    242c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    242e:	2300      	movs	r3, #0
    2430:	9303      	str	r3, [sp, #12]
    2432:	e05d      	b.n	24f0 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2434:	9b01      	ldr	r3, [sp, #4]
    2436:	6859      	ldr	r1, [r3, #4]
    2438:	9a03      	ldr	r2, [sp, #12]
    243a:	4613      	mov	r3, r2
    243c:	005b      	lsls	r3, r3, #1
    243e:	4413      	add	r3, r2
    2440:	009b      	lsls	r3, r3, #2
    2442:	440b      	add	r3, r1
    2444:	681b      	ldr	r3, [r3, #0]
    2446:	4618      	mov	r0, r3
    2448:	f7ff ff3d 	bl	22c6 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    244c:	9b01      	ldr	r3, [sp, #4]
    244e:	6859      	ldr	r1, [r3, #4]
    2450:	9a03      	ldr	r2, [sp, #12]
    2452:	4613      	mov	r3, r2
    2454:	005b      	lsls	r3, r3, #1
    2456:	4413      	add	r3, r2
    2458:	009b      	lsls	r3, r3, #2
    245a:	440b      	add	r3, r1
    245c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    245e:	9b01      	ldr	r3, [sp, #4]
    2460:	6859      	ldr	r1, [r3, #4]
    2462:	9a03      	ldr	r2, [sp, #12]
    2464:	4613      	mov	r3, r2
    2466:	005b      	lsls	r3, r3, #1
    2468:	4413      	add	r3, r2
    246a:	009b      	lsls	r3, r3, #2
    246c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    246e:	795b      	ldrb	r3, [r3, #5]
    2470:	4619      	mov	r1, r3
    2472:	f7ff ff0d 	bl	2290 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2476:	9b01      	ldr	r3, [sp, #4]
    2478:	6859      	ldr	r1, [r3, #4]
    247a:	9a03      	ldr	r2, [sp, #12]
    247c:	4613      	mov	r3, r2
    247e:	005b      	lsls	r3, r3, #1
    2480:	4413      	add	r3, r2
    2482:	009b      	lsls	r3, r3, #2
    2484:	440b      	add	r3, r1
    2486:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    2488:	9b01      	ldr	r3, [sp, #4]
    248a:	6859      	ldr	r1, [r3, #4]
    248c:	9a03      	ldr	r2, [sp, #12]
    248e:	4613      	mov	r3, r2
    2490:	005b      	lsls	r3, r3, #1
    2492:	4413      	add	r3, r2
    2494:	009b      	lsls	r3, r3, #2
    2496:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2498:	689b      	ldr	r3, [r3, #8]
    249a:	2200      	movs	r2, #0
    249c:	4619      	mov	r1, r3
    249e:	f7ff fed5 	bl	224c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    24a2:	9b01      	ldr	r3, [sp, #4]
    24a4:	6859      	ldr	r1, [r3, #4]
    24a6:	9a03      	ldr	r2, [sp, #12]
    24a8:	4613      	mov	r3, r2
    24aa:	005b      	lsls	r3, r3, #1
    24ac:	4413      	add	r3, r2
    24ae:	009b      	lsls	r3, r3, #2
    24b0:	440b      	add	r3, r1
    24b2:	791b      	ldrb	r3, [r3, #4]
    24b4:	2b00      	cmp	r3, #0
    24b6:	d00c      	beq.n	24d2 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    24b8:	9b01      	ldr	r3, [sp, #4]
    24ba:	6859      	ldr	r1, [r3, #4]
    24bc:	9a03      	ldr	r2, [sp, #12]
    24be:	4613      	mov	r3, r2
    24c0:	005b      	lsls	r3, r3, #1
    24c2:	4413      	add	r3, r2
    24c4:	009b      	lsls	r3, r3, #2
    24c6:	440b      	add	r3, r1
    24c8:	681b      	ldr	r3, [r3, #0]
    24ca:	4618      	mov	r0, r3
    24cc:	f7ff fecc 	bl	2268 <IntCtrl_Ip_EnableIrq>
    24d0:	e00b      	b.n	24ea <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    24d2:	9b01      	ldr	r3, [sp, #4]
    24d4:	6859      	ldr	r1, [r3, #4]
    24d6:	9a03      	ldr	r2, [sp, #12]
    24d8:	4613      	mov	r3, r2
    24da:	005b      	lsls	r3, r3, #1
    24dc:	4413      	add	r3, r2
    24de:	009b      	lsls	r3, r3, #2
    24e0:	440b      	add	r3, r1
    24e2:	681b      	ldr	r3, [r3, #0]
    24e4:	4618      	mov	r0, r3
    24e6:	f7ff fec9 	bl	227c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    24ea:	9b03      	ldr	r3, [sp, #12]
    24ec:	3301      	adds	r3, #1
    24ee:	9303      	str	r3, [sp, #12]
    24f0:	9b01      	ldr	r3, [sp, #4]
    24f2:	681b      	ldr	r3, [r3, #0]
    24f4:	9a03      	ldr	r2, [sp, #12]
    24f6:	429a      	cmp	r2, r3
    24f8:	d39c      	bcc.n	2434 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    24fa:	2300      	movs	r3, #0
}
    24fc:	4618      	mov	r0, r3
    24fe:	b005      	add	sp, #20
    2500:	f85d fb04 	ldr.w	pc, [sp], #4

00002504 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2504:	b500      	push	{lr}
    2506:	b085      	sub	sp, #20
    2508:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    250a:	2300      	movs	r3, #0
    250c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2510:	9b01      	ldr	r3, [sp, #4]
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	2b00      	cmp	r3, #0
    2516:	d007      	beq.n	2528 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2518:	9b01      	ldr	r3, [sp, #4]
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	4618      	mov	r0, r3
    251e:	f7ff ff83 	bl	2428 <Platform_Ipw_InitIntCtrl>
    2522:	4603      	mov	r3, r0
    2524:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2528:	f89d 300f 	ldrb.w	r3, [sp, #15]
    252c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    252e:	bf00      	nop
    2530:	b005      	add	sp, #20
    2532:	f85d fb04 	ldr.w	pc, [sp], #4

00002536 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    2536:	2300      	movs	r3, #0
}
    2538:	4618      	mov	r0, r3
    253a:	4770      	bx	lr

0000253c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    253c:	b082      	sub	sp, #8
    253e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    2540:	2301      	movs	r3, #1
}
    2542:	4618      	mov	r0, r3
    2544:	b002      	add	sp, #8
    2546:	4770      	bx	lr

00002548 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    2548:	b082      	sub	sp, #8
    254a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    254c:	bf00      	nop
    254e:	b002      	add	sp, #8
    2550:	4770      	bx	lr

00002552 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    2552:	b082      	sub	sp, #8
    2554:	9001      	str	r0, [sp, #4]
    return Micros;
    2556:	9b01      	ldr	r3, [sp, #4]
}
    2558:	4618      	mov	r0, r3
    255a:	b002      	add	sp, #8
    255c:	4770      	bx	lr

0000255e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    255e:	b500      	push	{lr}
    2560:	b083      	sub	sp, #12
    2562:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    2564:	f000 f86c 	bl	2640 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    2568:	bf00      	nop
    256a:	b003      	add	sp, #12
    256c:	f85d fb04 	ldr.w	pc, [sp], #4

00002570 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    2570:	b500      	push	{lr}
    2572:	b085      	sub	sp, #20
    2574:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    2576:	2300      	movs	r3, #0
    2578:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    257a:	9b01      	ldr	r3, [sp, #4]
    257c:	2b00      	cmp	r3, #0
    257e:	d003      	beq.n	2588 <OsIf_GetCounter+0x18>
    2580:	9b01      	ldr	r3, [sp, #4]
    2582:	2b01      	cmp	r3, #1
    2584:	d004      	beq.n	2590 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2586:	e007      	b.n	2598 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    2588:	f7ff ffd5 	bl	2536 <OsIf_Timer_Dummy_GetCounter>
    258c:	9003      	str	r0, [sp, #12]
            break;
    258e:	e003      	b.n	2598 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    2590:	f000 f872 	bl	2678 <OsIf_Timer_System_GetCounter>
    2594:	9003      	str	r0, [sp, #12]
            break;
    2596:	bf00      	nop
    }

    return Value;
    2598:	9b03      	ldr	r3, [sp, #12]
}
    259a:	4618      	mov	r0, r3
    259c:	b005      	add	sp, #20
    259e:	f85d fb04 	ldr.w	pc, [sp], #4

000025a2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    25a2:	b500      	push	{lr}
    25a4:	b085      	sub	sp, #20
    25a6:	9001      	str	r0, [sp, #4]
    25a8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    25aa:	2300      	movs	r3, #0
    25ac:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    25ae:	9b00      	ldr	r3, [sp, #0]
    25b0:	2b00      	cmp	r3, #0
    25b2:	d003      	beq.n	25bc <OsIf_GetElapsed+0x1a>
    25b4:	9b00      	ldr	r3, [sp, #0]
    25b6:	2b01      	cmp	r3, #1
    25b8:	d005      	beq.n	25c6 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    25ba:	e009      	b.n	25d0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    25bc:	9801      	ldr	r0, [sp, #4]
    25be:	f7ff ffbd 	bl	253c <OsIf_Timer_Dummy_GetElapsed>
    25c2:	9003      	str	r0, [sp, #12]
            break;
    25c4:	e004      	b.n	25d0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    25c6:	9801      	ldr	r0, [sp, #4]
    25c8:	f000 f864 	bl	2694 <OsIf_Timer_System_GetElapsed>
    25cc:	9003      	str	r0, [sp, #12]
            break;
    25ce:	bf00      	nop
    }

    return Value;
    25d0:	9b03      	ldr	r3, [sp, #12]
}
    25d2:	4618      	mov	r0, r3
    25d4:	b005      	add	sp, #20
    25d6:	f85d fb04 	ldr.w	pc, [sp], #4

000025da <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    25da:	b500      	push	{lr}
    25dc:	b083      	sub	sp, #12
    25de:	9001      	str	r0, [sp, #4]
    25e0:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    25e2:	9b00      	ldr	r3, [sp, #0]
    25e4:	2b00      	cmp	r3, #0
    25e6:	d003      	beq.n	25f0 <OsIf_SetTimerFrequency+0x16>
    25e8:	9b00      	ldr	r3, [sp, #0]
    25ea:	2b01      	cmp	r3, #1
    25ec:	d004      	beq.n	25f8 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    25ee:	e007      	b.n	2600 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    25f0:	9801      	ldr	r0, [sp, #4]
    25f2:	f7ff ffa9 	bl	2548 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    25f6:	e003      	b.n	2600 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    25f8:	9801      	ldr	r0, [sp, #4]
    25fa:	f000 f85b 	bl	26b4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    25fe:	bf00      	nop
    }
}
    2600:	bf00      	nop
    2602:	b003      	add	sp, #12
    2604:	f85d fb04 	ldr.w	pc, [sp], #4

00002608 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2608:	b500      	push	{lr}
    260a:	b085      	sub	sp, #20
    260c:	9001      	str	r0, [sp, #4]
    260e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2610:	2300      	movs	r3, #0
    2612:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2614:	9b00      	ldr	r3, [sp, #0]
    2616:	2b00      	cmp	r3, #0
    2618:	d003      	beq.n	2622 <OsIf_MicrosToTicks+0x1a>
    261a:	9b00      	ldr	r3, [sp, #0]
    261c:	2b01      	cmp	r3, #1
    261e:	d005      	beq.n	262c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2620:	e009      	b.n	2636 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    2622:	9801      	ldr	r0, [sp, #4]
    2624:	f7ff ff95 	bl	2552 <OsIf_Timer_Dummy_MicrosToTicks>
    2628:	9003      	str	r0, [sp, #12]
            break;
    262a:	e004      	b.n	2636 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    262c:	9801      	ldr	r0, [sp, #4]
    262e:	f000 f84f 	bl	26d0 <OsIf_Timer_System_MicrosToTicks>
    2632:	9003      	str	r0, [sp, #12]
            break;
    2634:	bf00      	nop
    }

    return Value;
    2636:	9b03      	ldr	r3, [sp, #12]
}
    2638:	4618      	mov	r0, r3
    263a:	b005      	add	sp, #20
    263c:	f85d fb04 	ldr.w	pc, [sp], #4

00002640 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2640:	b500      	push	{lr}
    2642:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2644:	2300      	movs	r3, #0
    2646:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2648:	4a09      	ldr	r2, [pc, #36]	; (2670 <OsIf_Timer_System_Init+0x30>)
    264a:	9b01      	ldr	r3, [sp, #4]
    264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2650:	685a      	ldr	r2, [r3, #4]
    2652:	4908      	ldr	r1, [pc, #32]	; (2674 <OsIf_Timer_System_Init+0x34>)
    2654:	9b01      	ldr	r3, [sp, #4]
    2656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    265a:	4a06      	ldr	r2, [pc, #24]	; (2674 <OsIf_Timer_System_Init+0x34>)
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2662:	4618      	mov	r0, r3
    2664:	f000 f868 	bl	2738 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2668:	bf00      	nop
    266a:	b003      	add	sp, #12
    266c:	f85d fb04 	ldr.w	pc, [sp], #4
    2670:	00016b28 	.word	0x00016b28
    2674:	1fff8b60 	.word	0x1fff8b60

00002678 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2678:	b500      	push	{lr}
    267a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    267c:	2300      	movs	r3, #0
    267e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2680:	2300      	movs	r3, #0
    2682:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2684:	f000 f86c 	bl	2760 <OsIf_Timer_System_Internal_GetCounter>
    2688:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    268a:	9b01      	ldr	r3, [sp, #4]
}
    268c:	4618      	mov	r0, r3
    268e:	b003      	add	sp, #12
    2690:	f85d fb04 	ldr.w	pc, [sp], #4

00002694 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2694:	b500      	push	{lr}
    2696:	b085      	sub	sp, #20
    2698:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    269a:	2300      	movs	r3, #0
    269c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    269e:	2300      	movs	r3, #0
    26a0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    26a2:	9801      	ldr	r0, [sp, #4]
    26a4:	f000 f864 	bl	2770 <OsIf_Timer_System_Internal_GetElapsed>
    26a8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    26aa:	9b03      	ldr	r3, [sp, #12]
}
    26ac:	4618      	mov	r0, r3
    26ae:	b005      	add	sp, #20
    26b0:	f85d fb04 	ldr.w	pc, [sp], #4

000026b4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    26b4:	b084      	sub	sp, #16
    26b6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    26b8:	2300      	movs	r3, #0
    26ba:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    26bc:	4903      	ldr	r1, [pc, #12]	; (26cc <OsIf_Timer_System_SetTimerFrequency+0x18>)
    26be:	9b03      	ldr	r3, [sp, #12]
    26c0:	9a01      	ldr	r2, [sp, #4]
    26c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    26c6:	bf00      	nop
    26c8:	b004      	add	sp, #16
    26ca:	4770      	bx	lr
    26cc:	1fff8b60 	.word	0x1fff8b60

000026d0 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    26d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d2:	b087      	sub	sp, #28
    26d4:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    26d6:	2100      	movs	r1, #0
    26d8:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    26da:	2100      	movs	r1, #0
    26dc:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    26de:	9901      	ldr	r1, [sp, #4]
    26e0:	2000      	movs	r0, #0
    26e2:	460e      	mov	r6, r1
    26e4:	4607      	mov	r7, r0
    26e6:	4812      	ldr	r0, [pc, #72]	; (2730 <OsIf_Timer_System_MicrosToTicks+0x60>)
    26e8:	9904      	ldr	r1, [sp, #16]
    26ea:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    26ee:	2000      	movs	r0, #0
    26f0:	460c      	mov	r4, r1
    26f2:	4605      	mov	r5, r0
    26f4:	fb04 f007 	mul.w	r0, r4, r7
    26f8:	fb06 f105 	mul.w	r1, r6, r5
    26fc:	4401      	add	r1, r0
    26fe:	fba6 2304 	umull	r2, r3, r6, r4
    2702:	4419      	add	r1, r3
    2704:	460b      	mov	r3, r1
    2706:	e9cd 2302 	strd	r2, r3, [sp, #8]
    270a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    270e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2712:	4a08      	ldr	r2, [pc, #32]	; (2734 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2714:	f04f 0300 	mov.w	r3, #0
    2718:	f7fd ff44 	bl	5a4 <__aeabi_uldivmod>
    271c:	4602      	mov	r2, r0
    271e:	460b      	mov	r3, r1
    2720:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2724:	9b02      	ldr	r3, [sp, #8]
    2726:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2728:	9b05      	ldr	r3, [sp, #20]
}
    272a:	4618      	mov	r0, r3
    272c:	b007      	add	sp, #28
    272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2730:	1fff8b60 	.word	0x1fff8b60
    2734:	000f4240 	.word	0x000f4240

00002738 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2738:	b082      	sub	sp, #8
    273a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    273c:	4b07      	ldr	r3, [pc, #28]	; (275c <OsIf_Timer_System_Internal_Init+0x24>)
    273e:	2200      	movs	r2, #0
    2740:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    2742:	4b06      	ldr	r3, [pc, #24]	; (275c <OsIf_Timer_System_Internal_Init+0x24>)
    2744:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2748:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    274a:	4b04      	ldr	r3, [pc, #16]	; (275c <OsIf_Timer_System_Internal_Init+0x24>)
    274c:	2200      	movs	r2, #0
    274e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2750:	4b02      	ldr	r3, [pc, #8]	; (275c <OsIf_Timer_System_Internal_Init+0x24>)
    2752:	2205      	movs	r2, #5
    2754:	601a      	str	r2, [r3, #0]
}
    2756:	bf00      	nop
    2758:	b002      	add	sp, #8
    275a:	4770      	bx	lr
    275c:	e000e010 	.word	0xe000e010

00002760 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    2760:	4b02      	ldr	r3, [pc, #8]	; (276c <OsIf_Timer_System_Internal_GetCounter+0xc>)
    2762:	689b      	ldr	r3, [r3, #8]
    2764:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2768:	4618      	mov	r0, r3
    276a:	4770      	bx	lr
    276c:	e000e010 	.word	0xe000e010

00002770 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2770:	b084      	sub	sp, #16
    2772:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2774:	4b10      	ldr	r3, [pc, #64]	; (27b8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2776:	689b      	ldr	r3, [r3, #8]
    2778:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    277c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    277e:	2300      	movs	r3, #0
    2780:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    2782:	9b01      	ldr	r3, [sp, #4]
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	9a02      	ldr	r2, [sp, #8]
    2788:	429a      	cmp	r2, r3
    278a:	d909      	bls.n	27a0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    278c:	9b01      	ldr	r3, [sp, #4]
    278e:	681a      	ldr	r2, [r3, #0]
    2790:	9b02      	ldr	r3, [sp, #8]
    2792:	1ad3      	subs	r3, r2, r3
    2794:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2798:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    279c:	9303      	str	r3, [sp, #12]
    279e:	e004      	b.n	27aa <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    27a0:	9b01      	ldr	r3, [sp, #4]
    27a2:	681a      	ldr	r2, [r3, #0]
    27a4:	9b02      	ldr	r3, [sp, #8]
    27a6:	1ad3      	subs	r3, r2, r3
    27a8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    27aa:	9b01      	ldr	r3, [sp, #4]
    27ac:	9a02      	ldr	r2, [sp, #8]
    27ae:	601a      	str	r2, [r3, #0]

    return dif;
    27b0:	9b03      	ldr	r3, [sp, #12]
}
    27b2:	4618      	mov	r0, r3
    27b4:	b004      	add	sp, #16
    27b6:	4770      	bx	lr
    27b8:	e000e010 	.word	0xe000e010

000027bc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    27bc:	b082      	sub	sp, #8
    27be:	9001      	str	r0, [sp, #4]
    27c0:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    27c2:	bf00      	nop
    27c4:	b002      	add	sp, #8
    27c6:	4770      	bx	lr

000027c8 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    27c8:	b500      	push	{lr}
    27ca:	b085      	sub	sp, #20
    27cc:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    27ce:	4b24      	ldr	r3, [pc, #144]	; (2860 <Clock_Ip_UpdateDriverContext+0x98>)
    27d0:	2201      	movs	r2, #1
    27d2:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    27d4:	4b23      	ldr	r3, [pc, #140]	; (2864 <Clock_Ip_UpdateDriverContext+0x9c>)
    27d6:	681b      	ldr	r3, [r3, #0]
    27d8:	2102      	movs	r1, #2
    27da:	4618      	mov	r0, r3
    27dc:	f003 fc32 	bl	6044 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    27e0:	2300      	movs	r3, #0
    27e2:	f88d 300f 	strb.w	r3, [sp, #15]
    27e6:	e015      	b.n	2814 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    27e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    27ec:	9a01      	ldr	r2, [sp, #4]
    27ee:	334a      	adds	r3, #74	; 0x4a
    27f0:	00db      	lsls	r3, r3, #3
    27f2:	4413      	add	r3, r2
    27f4:	6858      	ldr	r0, [r3, #4]
    27f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    27fa:	9a01      	ldr	r2, [sp, #4]
    27fc:	334a      	adds	r3, #74	; 0x4a
    27fe:	00db      	lsls	r3, r3, #3
    2800:	4413      	add	r3, r2
    2802:	689b      	ldr	r3, [r3, #8]
    2804:	4619      	mov	r1, r3
    2806:	f001 fadc 	bl	3dc2 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    280a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    280e:	3301      	adds	r3, #1
    2810:	f88d 300f 	strb.w	r3, [sp, #15]
    2814:	9b01      	ldr	r3, [sp, #4]
    2816:	7bdb      	ldrb	r3, [r3, #15]
    2818:	f89d 200f 	ldrb.w	r2, [sp, #15]
    281c:	429a      	cmp	r2, r3
    281e:	d3e3      	bcc.n	27e8 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2820:	f000 f824 	bl	286c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2824:	2301      	movs	r3, #1
    2826:	f88d 300f 	strb.w	r3, [sp, #15]
    282a:	e00e      	b.n	284a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    282c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2830:	9b01      	ldr	r3, [sp, #4]
    2832:	327e      	adds	r2, #126	; 0x7e
    2834:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2838:	490b      	ldr	r1, [pc, #44]	; (2868 <Clock_Ip_UpdateDriverContext+0xa0>)
    283a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    283e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2840:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2844:	3301      	adds	r3, #1
    2846:	f88d 300f 	strb.w	r3, [sp, #15]
    284a:	9b01      	ldr	r3, [sp, #4]
    284c:	7cdb      	ldrb	r3, [r3, #19]
    284e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2852:	429a      	cmp	r2, r3
    2854:	d3ea      	bcc.n	282c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2856:	bf00      	nop
    2858:	bf00      	nop
    285a:	b005      	add	sp, #20
    285c:	f85d fb04 	ldr.w	pc, [sp], #4
    2860:	1fff8b10 	.word	0x1fff8b10
    2864:	1fff8b64 	.word	0x1fff8b64
    2868:	1fff8b70 	.word	0x1fff8b70

0000286c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    286c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    286e:	4b23      	ldr	r3, [pc, #140]	; (28fc <Clock_Ip_CallEmptyCallbacks+0x90>)
    2870:	781b      	ldrb	r3, [r3, #0]
    2872:	f083 0301 	eor.w	r3, r3, #1
    2876:	b2db      	uxtb	r3, r3
    2878:	2b00      	cmp	r3, #0
    287a:	d03d      	beq.n	28f8 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    287c:	4b1f      	ldr	r3, [pc, #124]	; (28fc <Clock_Ip_CallEmptyCallbacks+0x90>)
    287e:	2201      	movs	r2, #1
    2880:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2882:	4b1f      	ldr	r3, [pc, #124]	; (2900 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2884:	685b      	ldr	r3, [r3, #4]
    2886:	2100      	movs	r1, #0
    2888:	2000      	movs	r0, #0
    288a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    288c:	4b1c      	ldr	r3, [pc, #112]	; (2900 <Clock_Ip_CallEmptyCallbacks+0x94>)
    288e:	689b      	ldr	r3, [r3, #8]
    2890:	2057      	movs	r0, #87	; 0x57
    2892:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2894:	4b1b      	ldr	r3, [pc, #108]	; (2904 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2896:	681b      	ldr	r3, [r3, #0]
    2898:	2000      	movs	r0, #0
    289a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    289c:	4b1a      	ldr	r3, [pc, #104]	; (2908 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    289e:	681b      	ldr	r3, [r3, #0]
    28a0:	2000      	movs	r0, #0
    28a2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    28a4:	4b19      	ldr	r3, [pc, #100]	; (290c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    28a6:	681b      	ldr	r3, [r3, #0]
    28a8:	2000      	movs	r0, #0
    28aa:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    28ac:	4b18      	ldr	r3, [pc, #96]	; (2910 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    28ae:	685b      	ldr	r3, [r3, #4]
    28b0:	2000      	movs	r0, #0
    28b2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    28b4:	4b16      	ldr	r3, [pc, #88]	; (2910 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    28b6:	689b      	ldr	r3, [r3, #8]
    28b8:	2057      	movs	r0, #87	; 0x57
    28ba:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    28bc:	4b15      	ldr	r3, [pc, #84]	; (2914 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    28be:	681b      	ldr	r3, [r3, #0]
    28c0:	2000      	movs	r0, #0
    28c2:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    28c4:	4b13      	ldr	r3, [pc, #76]	; (2914 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    28c6:	685b      	ldr	r3, [r3, #4]
    28c8:	2100      	movs	r1, #0
    28ca:	2057      	movs	r0, #87	; 0x57
    28cc:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    28ce:	4b12      	ldr	r3, [pc, #72]	; (2918 <Clock_Ip_CallEmptyCallbacks+0xac>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	2000      	movs	r0, #0
    28d4:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    28d6:	4b11      	ldr	r3, [pc, #68]	; (291c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    28d8:	685b      	ldr	r3, [r3, #4]
    28da:	2000      	movs	r0, #0
    28dc:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    28de:	4b0f      	ldr	r3, [pc, #60]	; (291c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    28e0:	689b      	ldr	r3, [r3, #8]
    28e2:	2057      	movs	r0, #87	; 0x57
    28e4:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    28e6:	4b0e      	ldr	r3, [pc, #56]	; (2920 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    28e8:	685b      	ldr	r3, [r3, #4]
    28ea:	2000      	movs	r0, #0
    28ec:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    28ee:	4b0d      	ldr	r3, [pc, #52]	; (2924 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	2100      	movs	r1, #0
    28f4:	2000      	movs	r0, #0
    28f6:	4798      	blx	r3
    }
}
    28f8:	bf00      	nop
    28fa:	bd08      	pop	{r3, pc}
    28fc:	1fff8b68 	.word	0x1fff8b68
    2900:	0001635c 	.word	0x0001635c
    2904:	00016270 	.word	0x00016270
    2908:	000162ac 	.word	0x000162ac
    290c:	000162b4 	.word	0x000162b4
    2910:	000162dc 	.word	0x000162dc
    2914:	000162e8 	.word	0x000162e8
    2918:	00016320 	.word	0x00016320
    291c:	0001636c 	.word	0x0001636c
    2920:	00016398 	.word	0x00016398
    2924:	00016394 	.word	0x00016394

00002928 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2928:	b500      	push	{lr}
    292a:	b085      	sub	sp, #20
    292c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    292e:	9b01      	ldr	r3, [sp, #4]
    2930:	7adb      	ldrb	r3, [r3, #11]
    2932:	9303      	str	r3, [sp, #12]
    2934:	e01f      	b.n	2976 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2936:	9b03      	ldr	r3, [sp, #12]
    2938:	1e5a      	subs	r2, r3, #1
    293a:	9b01      	ldr	r3, [sp, #4]
    293c:	320d      	adds	r2, #13
    293e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2942:	495a      	ldr	r1, [pc, #360]	; (2aac <Clock_Ip_ResetClockConfiguration+0x184>)
    2944:	4613      	mov	r3, r2
    2946:	00db      	lsls	r3, r3, #3
    2948:	4413      	add	r3, r2
    294a:	440b      	add	r3, r1
    294c:	3301      	adds	r3, #1
    294e:	781b      	ldrb	r3, [r3, #0]
    2950:	461a      	mov	r2, r3
    2952:	4b57      	ldr	r3, [pc, #348]	; (2ab0 <Clock_Ip_ResetClockConfiguration+0x188>)
    2954:	5c9b      	ldrb	r3, [r3, r2]
    2956:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2958:	4a56      	ldr	r2, [pc, #344]	; (2ab4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    295a:	9b02      	ldr	r3, [sp, #8]
    295c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2960:	9a03      	ldr	r2, [sp, #12]
    2962:	3a01      	subs	r2, #1
    2964:	320d      	adds	r2, #13
    2966:	00d2      	lsls	r2, r2, #3
    2968:	9901      	ldr	r1, [sp, #4]
    296a:	440a      	add	r2, r1
    296c:	4610      	mov	r0, r2
    296e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2970:	9b03      	ldr	r3, [sp, #12]
    2972:	3b01      	subs	r3, #1
    2974:	9303      	str	r3, [sp, #12]
    2976:	9b03      	ldr	r3, [sp, #12]
    2978:	2b00      	cmp	r3, #0
    297a:	d1dc      	bne.n	2936 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    297c:	9b01      	ldr	r3, [sp, #4]
    297e:	7b9b      	ldrb	r3, [r3, #14]
    2980:	9303      	str	r3, [sp, #12]
    2982:	e026      	b.n	29d2 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2984:	9b03      	ldr	r3, [sp, #12]
    2986:	3b01      	subs	r3, #1
    2988:	9a01      	ldr	r2, [sp, #4]
    298a:	3324      	adds	r3, #36	; 0x24
    298c:	011b      	lsls	r3, r3, #4
    298e:	4413      	add	r3, r2
    2990:	3304      	adds	r3, #4
    2992:	681a      	ldr	r2, [r3, #0]
    2994:	4945      	ldr	r1, [pc, #276]	; (2aac <Clock_Ip_ResetClockConfiguration+0x184>)
    2996:	4613      	mov	r3, r2
    2998:	00db      	lsls	r3, r3, #3
    299a:	4413      	add	r3, r2
    299c:	440b      	add	r3, r1
    299e:	3301      	adds	r3, #1
    29a0:	781b      	ldrb	r3, [r3, #0]
    29a2:	461a      	mov	r2, r3
    29a4:	4b44      	ldr	r3, [pc, #272]	; (2ab8 <Clock_Ip_ResetClockConfiguration+0x190>)
    29a6:	5c9b      	ldrb	r3, [r3, r2]
    29a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    29aa:	4944      	ldr	r1, [pc, #272]	; (2abc <Clock_Ip_ResetClockConfiguration+0x194>)
    29ac:	9a02      	ldr	r2, [sp, #8]
    29ae:	4613      	mov	r3, r2
    29b0:	005b      	lsls	r3, r3, #1
    29b2:	4413      	add	r3, r2
    29b4:	009b      	lsls	r3, r3, #2
    29b6:	440b      	add	r3, r1
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	9a03      	ldr	r2, [sp, #12]
    29bc:	3a01      	subs	r2, #1
    29be:	3224      	adds	r2, #36	; 0x24
    29c0:	0112      	lsls	r2, r2, #4
    29c2:	9901      	ldr	r1, [sp, #4]
    29c4:	440a      	add	r2, r1
    29c6:	3204      	adds	r2, #4
    29c8:	4610      	mov	r0, r2
    29ca:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    29cc:	9b03      	ldr	r3, [sp, #12]
    29ce:	3b01      	subs	r3, #1
    29d0:	9303      	str	r3, [sp, #12]
    29d2:	9b03      	ldr	r3, [sp, #12]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d1d5      	bne.n	2984 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    29d8:	9b01      	ldr	r3, [sp, #4]
    29da:	7a9b      	ldrb	r3, [r3, #10]
    29dc:	9303      	str	r3, [sp, #12]
    29de:	e02a      	b.n	2a36 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    29e0:	9b03      	ldr	r3, [sp, #12]
    29e2:	1e5a      	subs	r2, r3, #1
    29e4:	9901      	ldr	r1, [sp, #4]
    29e6:	4613      	mov	r3, r2
    29e8:	009b      	lsls	r3, r3, #2
    29ea:	4413      	add	r3, r2
    29ec:	00db      	lsls	r3, r3, #3
    29ee:	440b      	add	r3, r1
    29f0:	3340      	adds	r3, #64	; 0x40
    29f2:	681a      	ldr	r2, [r3, #0]
    29f4:	492d      	ldr	r1, [pc, #180]	; (2aac <Clock_Ip_ResetClockConfiguration+0x184>)
    29f6:	4613      	mov	r3, r2
    29f8:	00db      	lsls	r3, r3, #3
    29fa:	4413      	add	r3, r2
    29fc:	440b      	add	r3, r1
    29fe:	3301      	adds	r3, #1
    2a00:	781b      	ldrb	r3, [r3, #0]
    2a02:	461a      	mov	r2, r3
    2a04:	4b2e      	ldr	r3, [pc, #184]	; (2ac0 <Clock_Ip_ResetClockConfiguration+0x198>)
    2a06:	5c9b      	ldrb	r3, [r3, r2]
    2a08:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2a0a:	492e      	ldr	r1, [pc, #184]	; (2ac4 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2a0c:	9a02      	ldr	r2, [sp, #8]
    2a0e:	4613      	mov	r3, r2
    2a10:	009b      	lsls	r3, r3, #2
    2a12:	4413      	add	r3, r2
    2a14:	009b      	lsls	r3, r3, #2
    2a16:	440b      	add	r3, r1
    2a18:	6819      	ldr	r1, [r3, #0]
    2a1a:	9b03      	ldr	r3, [sp, #12]
    2a1c:	1e5a      	subs	r2, r3, #1
    2a1e:	4613      	mov	r3, r2
    2a20:	009b      	lsls	r3, r3, #2
    2a22:	4413      	add	r3, r2
    2a24:	00db      	lsls	r3, r3, #3
    2a26:	3340      	adds	r3, #64	; 0x40
    2a28:	9a01      	ldr	r2, [sp, #4]
    2a2a:	4413      	add	r3, r2
    2a2c:	4618      	mov	r0, r3
    2a2e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2a30:	9b03      	ldr	r3, [sp, #12]
    2a32:	3b01      	subs	r3, #1
    2a34:	9303      	str	r3, [sp, #12]
    2a36:	9b03      	ldr	r3, [sp, #12]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d1d1      	bne.n	29e0 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2a3c:	9b01      	ldr	r3, [sp, #4]
    2a3e:	7a5b      	ldrb	r3, [r3, #9]
    2a40:	9303      	str	r3, [sp, #12]
    2a42:	e02b      	b.n	2a9c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2a44:	9b03      	ldr	r3, [sp, #12]
    2a46:	1e5a      	subs	r2, r3, #1
    2a48:	9901      	ldr	r1, [sp, #4]
    2a4a:	4613      	mov	r3, r2
    2a4c:	009b      	lsls	r3, r3, #2
    2a4e:	4413      	add	r3, r2
    2a50:	009b      	lsls	r3, r3, #2
    2a52:	440b      	add	r3, r1
    2a54:	332c      	adds	r3, #44	; 0x2c
    2a56:	681a      	ldr	r2, [r3, #0]
    2a58:	4914      	ldr	r1, [pc, #80]	; (2aac <Clock_Ip_ResetClockConfiguration+0x184>)
    2a5a:	4613      	mov	r3, r2
    2a5c:	00db      	lsls	r3, r3, #3
    2a5e:	4413      	add	r3, r2
    2a60:	440b      	add	r3, r1
    2a62:	3301      	adds	r3, #1
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	461a      	mov	r2, r3
    2a68:	4b17      	ldr	r3, [pc, #92]	; (2ac8 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2a6a:	5c9b      	ldrb	r3, [r3, r2]
    2a6c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2a6e:	4917      	ldr	r1, [pc, #92]	; (2acc <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2a70:	9a02      	ldr	r2, [sp, #8]
    2a72:	4613      	mov	r3, r2
    2a74:	009b      	lsls	r3, r3, #2
    2a76:	4413      	add	r3, r2
    2a78:	009b      	lsls	r3, r3, #2
    2a7a:	440b      	add	r3, r1
    2a7c:	6819      	ldr	r1, [r3, #0]
    2a7e:	9b03      	ldr	r3, [sp, #12]
    2a80:	1e5a      	subs	r2, r3, #1
    2a82:	4613      	mov	r3, r2
    2a84:	009b      	lsls	r3, r3, #2
    2a86:	4413      	add	r3, r2
    2a88:	009b      	lsls	r3, r3, #2
    2a8a:	3328      	adds	r3, #40	; 0x28
    2a8c:	9a01      	ldr	r2, [sp, #4]
    2a8e:	4413      	add	r3, r2
    2a90:	3304      	adds	r3, #4
    2a92:	4618      	mov	r0, r3
    2a94:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2a96:	9b03      	ldr	r3, [sp, #12]
    2a98:	3b01      	subs	r3, #1
    2a9a:	9303      	str	r3, [sp, #12]
    2a9c:	9b03      	ldr	r3, [sp, #12]
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d1d0      	bne.n	2a44 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2aa2:	bf00      	nop
    2aa4:	bf00      	nop
    2aa6:	b005      	add	sp, #20
    2aa8:	f85d fb04 	ldr.w	pc, [sp], #4
    2aac:	00015d60 	.word	0x00015d60
    2ab0:	00015d30 	.word	0x00015d30
    2ab4:	00016398 	.word	0x00016398
    2ab8:	00015d10 	.word	0x00015d10
    2abc:	000162dc 	.word	0x000162dc
    2ac0:	00015d20 	.word	0x00015d20
    2ac4:	0001636c 	.word	0x0001636c
    2ac8:	00015ce0 	.word	0x00015ce0
    2acc:	000162b4 	.word	0x000162b4

00002ad0 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2ad0:	b500      	push	{lr}
    2ad2:	b085      	sub	sp, #20
    2ad4:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2ad6:	2301      	movs	r3, #1
    2ad8:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2ada:	9801      	ldr	r0, [sp, #4]
    2adc:	f000 f818 	bl	2b10 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2ae0:	4b0a      	ldr	r3, [pc, #40]	; (2b0c <Clock_Ip_Init+0x3c>)
    2ae2:	781b      	ldrb	r3, [r3, #0]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d00a      	beq.n	2afe <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2ae8:	f000 fb74 	bl	31d4 <Clock_Ip_GetPllStatus>
    2aec:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2aee:	9b02      	ldr	r3, [sp, #8]
    2af0:	2b00      	cmp	r3, #0
    2af2:	d106      	bne.n	2b02 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2af4:	f000 fbf2 	bl	32dc <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2af8:	2300      	movs	r3, #0
    2afa:	9303      	str	r3, [sp, #12]
    2afc:	e001      	b.n	2b02 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2afe:	2300      	movs	r3, #0
    2b00:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2b02:	9b03      	ldr	r3, [sp, #12]
}
    2b04:	4618      	mov	r0, r3
    2b06:	b005      	add	sp, #20
    2b08:	f85d fb04 	ldr.w	pc, [sp], #4
    2b0c:	1fff8b6c 	.word	0x1fff8b6c

00002b10 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2b10:	b510      	push	{r4, lr}
    2b12:	b084      	sub	sp, #16
    2b14:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2b16:	4a9f      	ldr	r2, [pc, #636]	; (2d94 <Clock_Ip_InitClock+0x284>)
    2b18:	9b01      	ldr	r3, [sp, #4]
    2b1a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2b1c:	2101      	movs	r1, #1
    2b1e:	9801      	ldr	r0, [sp, #4]
    2b20:	f003 fa90 	bl	6044 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2b24:	4b9b      	ldr	r3, [pc, #620]	; (2d94 <Clock_Ip_InitClock+0x284>)
    2b26:	681b      	ldr	r3, [r3, #0]
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d030      	beq.n	2b8e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2b2c:	2300      	movs	r3, #0
    2b2e:	9303      	str	r3, [sp, #12]
    2b30:	e027      	b.n	2b82 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2b32:	9901      	ldr	r1, [sp, #4]
    2b34:	9a03      	ldr	r2, [sp, #12]
    2b36:	4613      	mov	r3, r2
    2b38:	009b      	lsls	r3, r3, #2
    2b3a:	4413      	add	r3, r2
    2b3c:	009b      	lsls	r3, r3, #2
    2b3e:	440b      	add	r3, r1
    2b40:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b44:	681a      	ldr	r2, [r3, #0]
    2b46:	4994      	ldr	r1, [pc, #592]	; (2d98 <Clock_Ip_InitClock+0x288>)
    2b48:	4613      	mov	r3, r2
    2b4a:	00db      	lsls	r3, r3, #3
    2b4c:	4413      	add	r3, r2
    2b4e:	440b      	add	r3, r1
    2b50:	3301      	adds	r3, #1
    2b52:	781b      	ldrb	r3, [r3, #0]
    2b54:	461a      	mov	r2, r3
    2b56:	4b91      	ldr	r3, [pc, #580]	; (2d9c <Clock_Ip_InitClock+0x28c>)
    2b58:	5c9b      	ldrb	r3, [r3, r2]
    2b5a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2b5c:	4a90      	ldr	r2, [pc, #576]	; (2da0 <Clock_Ip_InitClock+0x290>)
    2b5e:	9b02      	ldr	r3, [sp, #8]
    2b60:	011b      	lsls	r3, r3, #4
    2b62:	4413      	add	r3, r2
    2b64:	6819      	ldr	r1, [r3, #0]
    2b66:	9a03      	ldr	r2, [sp, #12]
    2b68:	4613      	mov	r3, r2
    2b6a:	009b      	lsls	r3, r3, #2
    2b6c:	4413      	add	r3, r2
    2b6e:	009b      	lsls	r3, r3, #2
    2b70:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b74:	9a01      	ldr	r2, [sp, #4]
    2b76:	4413      	add	r3, r2
    2b78:	4618      	mov	r0, r3
    2b7a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2b7c:	9b03      	ldr	r3, [sp, #12]
    2b7e:	3301      	adds	r3, #1
    2b80:	9303      	str	r3, [sp, #12]
    2b82:	9b01      	ldr	r3, [sp, #4]
    2b84:	7c9b      	ldrb	r3, [r3, #18]
    2b86:	461a      	mov	r2, r3
    2b88:	9b03      	ldr	r3, [sp, #12]
    2b8a:	4293      	cmp	r3, r2
    2b8c:	d3d1      	bcc.n	2b32 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2b8e:	9801      	ldr	r0, [sp, #4]
    2b90:	f7ff feca 	bl	2928 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2b94:	2300      	movs	r3, #0
    2b96:	9303      	str	r3, [sp, #12]
    2b98:	e029      	b.n	2bee <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2b9a:	9901      	ldr	r1, [sp, #4]
    2b9c:	9a03      	ldr	r2, [sp, #12]
    2b9e:	4613      	mov	r3, r2
    2ba0:	005b      	lsls	r3, r3, #1
    2ba2:	4413      	add	r3, r2
    2ba4:	009b      	lsls	r3, r3, #2
    2ba6:	440b      	add	r3, r1
    2ba8:	3314      	adds	r3, #20
    2baa:	681a      	ldr	r2, [r3, #0]
    2bac:	497a      	ldr	r1, [pc, #488]	; (2d98 <Clock_Ip_InitClock+0x288>)
    2bae:	4613      	mov	r3, r2
    2bb0:	00db      	lsls	r3, r3, #3
    2bb2:	4413      	add	r3, r2
    2bb4:	440b      	add	r3, r1
    2bb6:	3301      	adds	r3, #1
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	461a      	mov	r2, r3
    2bbc:	4b79      	ldr	r3, [pc, #484]	; (2da4 <Clock_Ip_InitClock+0x294>)
    2bbe:	5c9b      	ldrb	r3, [r3, r2]
    2bc0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2bc2:	4979      	ldr	r1, [pc, #484]	; (2da8 <Clock_Ip_InitClock+0x298>)
    2bc4:	9a02      	ldr	r2, [sp, #8]
    2bc6:	4613      	mov	r3, r2
    2bc8:	005b      	lsls	r3, r3, #1
    2bca:	4413      	add	r3, r2
    2bcc:	009b      	lsls	r3, r3, #2
    2bce:	440b      	add	r3, r1
    2bd0:	6819      	ldr	r1, [r3, #0]
    2bd2:	9a03      	ldr	r2, [sp, #12]
    2bd4:	4613      	mov	r3, r2
    2bd6:	005b      	lsls	r3, r3, #1
    2bd8:	4413      	add	r3, r2
    2bda:	009b      	lsls	r3, r3, #2
    2bdc:	3310      	adds	r3, #16
    2bde:	9a01      	ldr	r2, [sp, #4]
    2be0:	4413      	add	r3, r2
    2be2:	3304      	adds	r3, #4
    2be4:	4618      	mov	r0, r3
    2be6:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2be8:	9b03      	ldr	r3, [sp, #12]
    2bea:	3301      	adds	r3, #1
    2bec:	9303      	str	r3, [sp, #12]
    2bee:	9b01      	ldr	r3, [sp, #4]
    2bf0:	7a1b      	ldrb	r3, [r3, #8]
    2bf2:	461a      	mov	r2, r3
    2bf4:	9b03      	ldr	r3, [sp, #12]
    2bf6:	4293      	cmp	r3, r2
    2bf8:	d3cf      	bcc.n	2b9a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2bfa:	2300      	movs	r3, #0
    2bfc:	9303      	str	r3, [sp, #12]
    2bfe:	e02a      	b.n	2c56 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2c00:	9901      	ldr	r1, [sp, #4]
    2c02:	9a03      	ldr	r2, [sp, #12]
    2c04:	4613      	mov	r3, r2
    2c06:	009b      	lsls	r3, r3, #2
    2c08:	4413      	add	r3, r2
    2c0a:	009b      	lsls	r3, r3, #2
    2c0c:	440b      	add	r3, r1
    2c0e:	332c      	adds	r3, #44	; 0x2c
    2c10:	681a      	ldr	r2, [r3, #0]
    2c12:	4961      	ldr	r1, [pc, #388]	; (2d98 <Clock_Ip_InitClock+0x288>)
    2c14:	4613      	mov	r3, r2
    2c16:	00db      	lsls	r3, r3, #3
    2c18:	4413      	add	r3, r2
    2c1a:	440b      	add	r3, r1
    2c1c:	3301      	adds	r3, #1
    2c1e:	781b      	ldrb	r3, [r3, #0]
    2c20:	461a      	mov	r2, r3
    2c22:	4b62      	ldr	r3, [pc, #392]	; (2dac <Clock_Ip_InitClock+0x29c>)
    2c24:	5c9b      	ldrb	r3, [r3, r2]
    2c26:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2c28:	4961      	ldr	r1, [pc, #388]	; (2db0 <Clock_Ip_InitClock+0x2a0>)
    2c2a:	9a02      	ldr	r2, [sp, #8]
    2c2c:	4613      	mov	r3, r2
    2c2e:	009b      	lsls	r3, r3, #2
    2c30:	4413      	add	r3, r2
    2c32:	009b      	lsls	r3, r3, #2
    2c34:	440b      	add	r3, r1
    2c36:	3304      	adds	r3, #4
    2c38:	6819      	ldr	r1, [r3, #0]
    2c3a:	9a03      	ldr	r2, [sp, #12]
    2c3c:	4613      	mov	r3, r2
    2c3e:	009b      	lsls	r3, r3, #2
    2c40:	4413      	add	r3, r2
    2c42:	009b      	lsls	r3, r3, #2
    2c44:	3328      	adds	r3, #40	; 0x28
    2c46:	9a01      	ldr	r2, [sp, #4]
    2c48:	4413      	add	r3, r2
    2c4a:	3304      	adds	r3, #4
    2c4c:	4618      	mov	r0, r3
    2c4e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2c50:	9b03      	ldr	r3, [sp, #12]
    2c52:	3301      	adds	r3, #1
    2c54:	9303      	str	r3, [sp, #12]
    2c56:	9b01      	ldr	r3, [sp, #4]
    2c58:	7a5b      	ldrb	r3, [r3, #9]
    2c5a:	461a      	mov	r2, r3
    2c5c:	9b03      	ldr	r3, [sp, #12]
    2c5e:	4293      	cmp	r3, r2
    2c60:	d3ce      	bcc.n	2c00 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2c62:	9801      	ldr	r0, [sp, #4]
    2c64:	f7ff fdb0 	bl	27c8 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2c68:	2300      	movs	r3, #0
    2c6a:	9303      	str	r3, [sp, #12]
    2c6c:	e028      	b.n	2cc0 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2c6e:	9901      	ldr	r1, [sp, #4]
    2c70:	9a03      	ldr	r2, [sp, #12]
    2c72:	4613      	mov	r3, r2
    2c74:	009b      	lsls	r3, r3, #2
    2c76:	4413      	add	r3, r2
    2c78:	009b      	lsls	r3, r3, #2
    2c7a:	440b      	add	r3, r1
    2c7c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2c80:	681a      	ldr	r2, [r3, #0]
    2c82:	4945      	ldr	r1, [pc, #276]	; (2d98 <Clock_Ip_InitClock+0x288>)
    2c84:	4613      	mov	r3, r2
    2c86:	00db      	lsls	r3, r3, #3
    2c88:	4413      	add	r3, r2
    2c8a:	440b      	add	r3, r1
    2c8c:	3301      	adds	r3, #1
    2c8e:	781b      	ldrb	r3, [r3, #0]
    2c90:	461a      	mov	r2, r3
    2c92:	4b48      	ldr	r3, [pc, #288]	; (2db4 <Clock_Ip_InitClock+0x2a4>)
    2c94:	5c9b      	ldrb	r3, [r3, r2]
    2c96:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2c98:	4a47      	ldr	r2, [pc, #284]	; (2db8 <Clock_Ip_InitClock+0x2a8>)
    2c9a:	9b02      	ldr	r3, [sp, #8]
    2c9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2ca0:	9a03      	ldr	r2, [sp, #12]
    2ca2:	4613      	mov	r3, r2
    2ca4:	009b      	lsls	r3, r3, #2
    2ca6:	4413      	add	r3, r2
    2ca8:	009b      	lsls	r3, r3, #2
    2caa:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2cae:	9a01      	ldr	r2, [sp, #4]
    2cb0:	4413      	add	r3, r2
    2cb2:	3304      	adds	r3, #4
    2cb4:	9903      	ldr	r1, [sp, #12]
    2cb6:	4618      	mov	r0, r3
    2cb8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2cba:	9b03      	ldr	r3, [sp, #12]
    2cbc:	3301      	adds	r3, #1
    2cbe:	9303      	str	r3, [sp, #12]
    2cc0:	9b01      	ldr	r3, [sp, #4]
    2cc2:	7c5b      	ldrb	r3, [r3, #17]
    2cc4:	461a      	mov	r2, r3
    2cc6:	9b03      	ldr	r3, [sp, #12]
    2cc8:	4293      	cmp	r3, r2
    2cca:	d3d0      	bcc.n	2c6e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2ccc:	2300      	movs	r3, #0
    2cce:	9303      	str	r3, [sp, #12]
    2cd0:	e026      	b.n	2d20 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2cd2:	9901      	ldr	r1, [sp, #4]
    2cd4:	9a03      	ldr	r2, [sp, #12]
    2cd6:	4613      	mov	r3, r2
    2cd8:	005b      	lsls	r3, r3, #1
    2cda:	4413      	add	r3, r2
    2cdc:	009b      	lsls	r3, r3, #2
    2cde:	440b      	add	r3, r1
    2ce0:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2ce4:	681a      	ldr	r2, [r3, #0]
    2ce6:	492c      	ldr	r1, [pc, #176]	; (2d98 <Clock_Ip_InitClock+0x288>)
    2ce8:	4613      	mov	r3, r2
    2cea:	00db      	lsls	r3, r3, #3
    2cec:	4413      	add	r3, r2
    2cee:	440b      	add	r3, r1
    2cf0:	3301      	adds	r3, #1
    2cf2:	781b      	ldrb	r3, [r3, #0]
    2cf4:	461a      	mov	r2, r3
    2cf6:	4b31      	ldr	r3, [pc, #196]	; (2dbc <Clock_Ip_InitClock+0x2ac>)
    2cf8:	5c9b      	ldrb	r3, [r3, r2]
    2cfa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2cfc:	4a30      	ldr	r2, [pc, #192]	; (2dc0 <Clock_Ip_InitClock+0x2b0>)
    2cfe:	9b02      	ldr	r3, [sp, #8]
    2d00:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2d04:	9a03      	ldr	r2, [sp, #12]
    2d06:	4613      	mov	r3, r2
    2d08:	005b      	lsls	r3, r3, #1
    2d0a:	4413      	add	r3, r2
    2d0c:	009b      	lsls	r3, r3, #2
    2d0e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2d12:	9a01      	ldr	r2, [sp, #4]
    2d14:	4413      	add	r3, r2
    2d16:	4618      	mov	r0, r3
    2d18:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2d1a:	9b03      	ldr	r3, [sp, #12]
    2d1c:	3301      	adds	r3, #1
    2d1e:	9303      	str	r3, [sp, #12]
    2d20:	9b01      	ldr	r3, [sp, #4]
    2d22:	7b5b      	ldrb	r3, [r3, #13]
    2d24:	461a      	mov	r2, r3
    2d26:	9b03      	ldr	r3, [sp, #12]
    2d28:	4293      	cmp	r3, r2
    2d2a:	d3d2      	bcc.n	2cd2 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2d2c:	2300      	movs	r3, #0
    2d2e:	9303      	str	r3, [sp, #12]
    2d30:	e026      	b.n	2d80 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2d32:	9901      	ldr	r1, [sp, #4]
    2d34:	9a03      	ldr	r2, [sp, #12]
    2d36:	4613      	mov	r3, r2
    2d38:	005b      	lsls	r3, r3, #1
    2d3a:	4413      	add	r3, r2
    2d3c:	009b      	lsls	r3, r3, #2
    2d3e:	440b      	add	r3, r1
    2d40:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2d44:	681a      	ldr	r2, [r3, #0]
    2d46:	4914      	ldr	r1, [pc, #80]	; (2d98 <Clock_Ip_InitClock+0x288>)
    2d48:	4613      	mov	r3, r2
    2d4a:	00db      	lsls	r3, r3, #3
    2d4c:	4413      	add	r3, r2
    2d4e:	440b      	add	r3, r1
    2d50:	3301      	adds	r3, #1
    2d52:	781b      	ldrb	r3, [r3, #0]
    2d54:	461a      	mov	r2, r3
    2d56:	4b1b      	ldr	r3, [pc, #108]	; (2dc4 <Clock_Ip_InitClock+0x2b4>)
    2d58:	5c9b      	ldrb	r3, [r3, r2]
    2d5a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2d5c:	4a1a      	ldr	r2, [pc, #104]	; (2dc8 <Clock_Ip_InitClock+0x2b8>)
    2d5e:	9b02      	ldr	r3, [sp, #8]
    2d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2d64:	9a03      	ldr	r2, [sp, #12]
    2d66:	4613      	mov	r3, r2
    2d68:	005b      	lsls	r3, r3, #1
    2d6a:	4413      	add	r3, r2
    2d6c:	009b      	lsls	r3, r3, #2
    2d6e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2d72:	9a01      	ldr	r2, [sp, #4]
    2d74:	4413      	add	r3, r2
    2d76:	4618      	mov	r0, r3
    2d78:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2d7a:	9b03      	ldr	r3, [sp, #12]
    2d7c:	3301      	adds	r3, #1
    2d7e:	9303      	str	r3, [sp, #12]
    2d80:	9b01      	ldr	r3, [sp, #4]
    2d82:	7b1b      	ldrb	r3, [r3, #12]
    2d84:	461a      	mov	r2, r3
    2d86:	9b03      	ldr	r3, [sp, #12]
    2d88:	4293      	cmp	r3, r2
    2d8a:	d3d2      	bcc.n	2d32 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2d8c:	2300      	movs	r3, #0
    2d8e:	9303      	str	r3, [sp, #12]
    2d90:	e044      	b.n	2e1c <Clock_Ip_InitClock+0x30c>
    2d92:	bf00      	nop
    2d94:	1fff8b64 	.word	0x1fff8b64
    2d98:	00015d60 	.word	0x00015d60
    2d9c:	00015d50 	.word	0x00015d50
    2da0:	0001635c 	.word	0x0001635c
    2da4:	00015cf0 	.word	0x00015cf0
    2da8:	00016320 	.word	0x00016320
    2dac:	00015ce0 	.word	0x00015ce0
    2db0:	000162b4 	.word	0x000162b4
    2db4:	00015d40 	.word	0x00015d40
    2db8:	00016394 	.word	0x00016394
    2dbc:	00015cd0 	.word	0x00015cd0
    2dc0:	000162ac 	.word	0x000162ac
    2dc4:	00015cc0 	.word	0x00015cc0
    2dc8:	00016270 	.word	0x00016270
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2dcc:	9901      	ldr	r1, [sp, #4]
    2dce:	9a03      	ldr	r2, [sp, #12]
    2dd0:	4613      	mov	r3, r2
    2dd2:	005b      	lsls	r3, r3, #1
    2dd4:	4413      	add	r3, r2
    2dd6:	009b      	lsls	r3, r3, #2
    2dd8:	440b      	add	r3, r1
    2dda:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2dde:	681a      	ldr	r2, [r3, #0]
    2de0:	49ac      	ldr	r1, [pc, #688]	; (3094 <Clock_Ip_InitClock+0x584>)
    2de2:	4613      	mov	r3, r2
    2de4:	00db      	lsls	r3, r3, #3
    2de6:	4413      	add	r3, r2
    2de8:	440b      	add	r3, r1
    2dea:	3301      	adds	r3, #1
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	461a      	mov	r2, r3
    2df0:	4ba9      	ldr	r3, [pc, #676]	; (3098 <Clock_Ip_InitClock+0x588>)
    2df2:	5c9b      	ldrb	r3, [r3, r2]
    2df4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2df6:	4aa9      	ldr	r2, [pc, #676]	; (309c <Clock_Ip_InitClock+0x58c>)
    2df8:	9b02      	ldr	r3, [sp, #8]
    2dfa:	00db      	lsls	r3, r3, #3
    2dfc:	4413      	add	r3, r2
    2dfe:	6859      	ldr	r1, [r3, #4]
    2e00:	9a03      	ldr	r2, [sp, #12]
    2e02:	4613      	mov	r3, r2
    2e04:	005b      	lsls	r3, r3, #1
    2e06:	4413      	add	r3, r2
    2e08:	009b      	lsls	r3, r3, #2
    2e0a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2e0e:	9a01      	ldr	r2, [sp, #4]
    2e10:	4413      	add	r3, r2
    2e12:	4618      	mov	r0, r3
    2e14:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2e16:	9b03      	ldr	r3, [sp, #12]
    2e18:	3301      	adds	r3, #1
    2e1a:	9303      	str	r3, [sp, #12]
    2e1c:	9b01      	ldr	r3, [sp, #4]
    2e1e:	7b5b      	ldrb	r3, [r3, #13]
    2e20:	461a      	mov	r2, r3
    2e22:	9b03      	ldr	r3, [sp, #12]
    2e24:	4293      	cmp	r3, r2
    2e26:	d3d1      	bcc.n	2dcc <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2e28:	2300      	movs	r3, #0
    2e2a:	9303      	str	r3, [sp, #12]
    2e2c:	e029      	b.n	2e82 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2e2e:	9901      	ldr	r1, [sp, #4]
    2e30:	9a03      	ldr	r2, [sp, #12]
    2e32:	4613      	mov	r3, r2
    2e34:	009b      	lsls	r3, r3, #2
    2e36:	4413      	add	r3, r2
    2e38:	00db      	lsls	r3, r3, #3
    2e3a:	440b      	add	r3, r1
    2e3c:	3340      	adds	r3, #64	; 0x40
    2e3e:	681a      	ldr	r2, [r3, #0]
    2e40:	4994      	ldr	r1, [pc, #592]	; (3094 <Clock_Ip_InitClock+0x584>)
    2e42:	4613      	mov	r3, r2
    2e44:	00db      	lsls	r3, r3, #3
    2e46:	4413      	add	r3, r2
    2e48:	440b      	add	r3, r1
    2e4a:	3301      	adds	r3, #1
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	461a      	mov	r2, r3
    2e50:	4b93      	ldr	r3, [pc, #588]	; (30a0 <Clock_Ip_InitClock+0x590>)
    2e52:	5c9b      	ldrb	r3, [r3, r2]
    2e54:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2e56:	4993      	ldr	r1, [pc, #588]	; (30a4 <Clock_Ip_InitClock+0x594>)
    2e58:	9a02      	ldr	r2, [sp, #8]
    2e5a:	4613      	mov	r3, r2
    2e5c:	009b      	lsls	r3, r3, #2
    2e5e:	4413      	add	r3, r2
    2e60:	009b      	lsls	r3, r3, #2
    2e62:	440b      	add	r3, r1
    2e64:	3304      	adds	r3, #4
    2e66:	6819      	ldr	r1, [r3, #0]
    2e68:	9a03      	ldr	r2, [sp, #12]
    2e6a:	4613      	mov	r3, r2
    2e6c:	009b      	lsls	r3, r3, #2
    2e6e:	4413      	add	r3, r2
    2e70:	00db      	lsls	r3, r3, #3
    2e72:	3340      	adds	r3, #64	; 0x40
    2e74:	9a01      	ldr	r2, [sp, #4]
    2e76:	4413      	add	r3, r2
    2e78:	4618      	mov	r0, r3
    2e7a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2e7c:	9b03      	ldr	r3, [sp, #12]
    2e7e:	3301      	adds	r3, #1
    2e80:	9303      	str	r3, [sp, #12]
    2e82:	9b01      	ldr	r3, [sp, #4]
    2e84:	7a9b      	ldrb	r3, [r3, #10]
    2e86:	461a      	mov	r2, r3
    2e88:	9b03      	ldr	r3, [sp, #12]
    2e8a:	4293      	cmp	r3, r2
    2e8c:	d3cf      	bcc.n	2e2e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2e8e:	2300      	movs	r3, #0
    2e90:	9303      	str	r3, [sp, #12]
    2e92:	e029      	b.n	2ee8 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2e94:	9901      	ldr	r1, [sp, #4]
    2e96:	9a03      	ldr	r2, [sp, #12]
    2e98:	4613      	mov	r3, r2
    2e9a:	009b      	lsls	r3, r3, #2
    2e9c:	4413      	add	r3, r2
    2e9e:	009b      	lsls	r3, r3, #2
    2ea0:	440b      	add	r3, r1
    2ea2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2ea6:	681a      	ldr	r2, [r3, #0]
    2ea8:	497a      	ldr	r1, [pc, #488]	; (3094 <Clock_Ip_InitClock+0x584>)
    2eaa:	4613      	mov	r3, r2
    2eac:	00db      	lsls	r3, r3, #3
    2eae:	4413      	add	r3, r2
    2eb0:	440b      	add	r3, r1
    2eb2:	3301      	adds	r3, #1
    2eb4:	781b      	ldrb	r3, [r3, #0]
    2eb6:	461a      	mov	r2, r3
    2eb8:	4b7b      	ldr	r3, [pc, #492]	; (30a8 <Clock_Ip_InitClock+0x598>)
    2eba:	5c9b      	ldrb	r3, [r3, r2]
    2ebc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2ebe:	4a7b      	ldr	r2, [pc, #492]	; (30ac <Clock_Ip_InitClock+0x59c>)
    2ec0:	9b02      	ldr	r3, [sp, #8]
    2ec2:	011b      	lsls	r3, r3, #4
    2ec4:	4413      	add	r3, r2
    2ec6:	3304      	adds	r3, #4
    2ec8:	681c      	ldr	r4, [r3, #0]
    2eca:	9a03      	ldr	r2, [sp, #12]
    2ecc:	4613      	mov	r3, r2
    2ece:	009b      	lsls	r3, r3, #2
    2ed0:	4413      	add	r3, r2
    2ed2:	009b      	lsls	r3, r3, #2
    2ed4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2ed8:	9a01      	ldr	r2, [sp, #4]
    2eda:	4413      	add	r3, r2
    2edc:	9903      	ldr	r1, [sp, #12]
    2ede:	4618      	mov	r0, r3
    2ee0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2ee2:	9b03      	ldr	r3, [sp, #12]
    2ee4:	3301      	adds	r3, #1
    2ee6:	9303      	str	r3, [sp, #12]
    2ee8:	9b01      	ldr	r3, [sp, #4]
    2eea:	7c9b      	ldrb	r3, [r3, #18]
    2eec:	461a      	mov	r2, r3
    2eee:	9b03      	ldr	r3, [sp, #12]
    2ef0:	4293      	cmp	r3, r2
    2ef2:	d3cf      	bcc.n	2e94 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2ef4:	2300      	movs	r3, #0
    2ef6:	9303      	str	r3, [sp, #12]
    2ef8:	e02a      	b.n	2f50 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2efa:	9901      	ldr	r1, [sp, #4]
    2efc:	9a03      	ldr	r2, [sp, #12]
    2efe:	4613      	mov	r3, r2
    2f00:	009b      	lsls	r3, r3, #2
    2f02:	4413      	add	r3, r2
    2f04:	009b      	lsls	r3, r3, #2
    2f06:	440b      	add	r3, r1
    2f08:	332c      	adds	r3, #44	; 0x2c
    2f0a:	681a      	ldr	r2, [r3, #0]
    2f0c:	4961      	ldr	r1, [pc, #388]	; (3094 <Clock_Ip_InitClock+0x584>)
    2f0e:	4613      	mov	r3, r2
    2f10:	00db      	lsls	r3, r3, #3
    2f12:	4413      	add	r3, r2
    2f14:	440b      	add	r3, r1
    2f16:	3301      	adds	r3, #1
    2f18:	781b      	ldrb	r3, [r3, #0]
    2f1a:	461a      	mov	r2, r3
    2f1c:	4b64      	ldr	r3, [pc, #400]	; (30b0 <Clock_Ip_InitClock+0x5a0>)
    2f1e:	5c9b      	ldrb	r3, [r3, r2]
    2f20:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2f22:	4964      	ldr	r1, [pc, #400]	; (30b4 <Clock_Ip_InitClock+0x5a4>)
    2f24:	9a02      	ldr	r2, [sp, #8]
    2f26:	4613      	mov	r3, r2
    2f28:	009b      	lsls	r3, r3, #2
    2f2a:	4413      	add	r3, r2
    2f2c:	009b      	lsls	r3, r3, #2
    2f2e:	440b      	add	r3, r1
    2f30:	3308      	adds	r3, #8
    2f32:	6819      	ldr	r1, [r3, #0]
    2f34:	9a03      	ldr	r2, [sp, #12]
    2f36:	4613      	mov	r3, r2
    2f38:	009b      	lsls	r3, r3, #2
    2f3a:	4413      	add	r3, r2
    2f3c:	009b      	lsls	r3, r3, #2
    2f3e:	3328      	adds	r3, #40	; 0x28
    2f40:	9a01      	ldr	r2, [sp, #4]
    2f42:	4413      	add	r3, r2
    2f44:	3304      	adds	r3, #4
    2f46:	4618      	mov	r0, r3
    2f48:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2f4a:	9b03      	ldr	r3, [sp, #12]
    2f4c:	3301      	adds	r3, #1
    2f4e:	9303      	str	r3, [sp, #12]
    2f50:	9b01      	ldr	r3, [sp, #4]
    2f52:	7a5b      	ldrb	r3, [r3, #9]
    2f54:	461a      	mov	r2, r3
    2f56:	9b03      	ldr	r3, [sp, #12]
    2f58:	4293      	cmp	r3, r2
    2f5a:	d3ce      	bcc.n	2efa <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2f5c:	2300      	movs	r3, #0
    2f5e:	9303      	str	r3, [sp, #12]
    2f60:	e029      	b.n	2fb6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2f62:	9901      	ldr	r1, [sp, #4]
    2f64:	9a03      	ldr	r2, [sp, #12]
    2f66:	4613      	mov	r3, r2
    2f68:	009b      	lsls	r3, r3, #2
    2f6a:	4413      	add	r3, r2
    2f6c:	00db      	lsls	r3, r3, #3
    2f6e:	440b      	add	r3, r1
    2f70:	3340      	adds	r3, #64	; 0x40
    2f72:	681a      	ldr	r2, [r3, #0]
    2f74:	4947      	ldr	r1, [pc, #284]	; (3094 <Clock_Ip_InitClock+0x584>)
    2f76:	4613      	mov	r3, r2
    2f78:	00db      	lsls	r3, r3, #3
    2f7a:	4413      	add	r3, r2
    2f7c:	440b      	add	r3, r1
    2f7e:	3301      	adds	r3, #1
    2f80:	781b      	ldrb	r3, [r3, #0]
    2f82:	461a      	mov	r2, r3
    2f84:	4b46      	ldr	r3, [pc, #280]	; (30a0 <Clock_Ip_InitClock+0x590>)
    2f86:	5c9b      	ldrb	r3, [r3, r2]
    2f88:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2f8a:	4946      	ldr	r1, [pc, #280]	; (30a4 <Clock_Ip_InitClock+0x594>)
    2f8c:	9a02      	ldr	r2, [sp, #8]
    2f8e:	4613      	mov	r3, r2
    2f90:	009b      	lsls	r3, r3, #2
    2f92:	4413      	add	r3, r2
    2f94:	009b      	lsls	r3, r3, #2
    2f96:	440b      	add	r3, r1
    2f98:	330c      	adds	r3, #12
    2f9a:	6819      	ldr	r1, [r3, #0]
    2f9c:	9a03      	ldr	r2, [sp, #12]
    2f9e:	4613      	mov	r3, r2
    2fa0:	009b      	lsls	r3, r3, #2
    2fa2:	4413      	add	r3, r2
    2fa4:	00db      	lsls	r3, r3, #3
    2fa6:	3340      	adds	r3, #64	; 0x40
    2fa8:	9a01      	ldr	r2, [sp, #4]
    2faa:	4413      	add	r3, r2
    2fac:	4618      	mov	r0, r3
    2fae:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2fb0:	9b03      	ldr	r3, [sp, #12]
    2fb2:	3301      	adds	r3, #1
    2fb4:	9303      	str	r3, [sp, #12]
    2fb6:	9b01      	ldr	r3, [sp, #4]
    2fb8:	7a9b      	ldrb	r3, [r3, #10]
    2fba:	461a      	mov	r2, r3
    2fbc:	9b03      	ldr	r3, [sp, #12]
    2fbe:	4293      	cmp	r3, r2
    2fc0:	d3cf      	bcc.n	2f62 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2fc2:	2300      	movs	r3, #0
    2fc4:	9303      	str	r3, [sp, #12]
    2fc6:	e025      	b.n	3014 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2fc8:	9a01      	ldr	r2, [sp, #4]
    2fca:	9b03      	ldr	r3, [sp, #12]
    2fcc:	3324      	adds	r3, #36	; 0x24
    2fce:	011b      	lsls	r3, r3, #4
    2fd0:	4413      	add	r3, r2
    2fd2:	3304      	adds	r3, #4
    2fd4:	681a      	ldr	r2, [r3, #0]
    2fd6:	492f      	ldr	r1, [pc, #188]	; (3094 <Clock_Ip_InitClock+0x584>)
    2fd8:	4613      	mov	r3, r2
    2fda:	00db      	lsls	r3, r3, #3
    2fdc:	4413      	add	r3, r2
    2fde:	440b      	add	r3, r1
    2fe0:	3301      	adds	r3, #1
    2fe2:	781b      	ldrb	r3, [r3, #0]
    2fe4:	461a      	mov	r2, r3
    2fe6:	4b34      	ldr	r3, [pc, #208]	; (30b8 <Clock_Ip_InitClock+0x5a8>)
    2fe8:	5c9b      	ldrb	r3, [r3, r2]
    2fea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2fec:	4933      	ldr	r1, [pc, #204]	; (30bc <Clock_Ip_InitClock+0x5ac>)
    2fee:	9a02      	ldr	r2, [sp, #8]
    2ff0:	4613      	mov	r3, r2
    2ff2:	005b      	lsls	r3, r3, #1
    2ff4:	4413      	add	r3, r2
    2ff6:	009b      	lsls	r3, r3, #2
    2ff8:	440b      	add	r3, r1
    2ffa:	3304      	adds	r3, #4
    2ffc:	681b      	ldr	r3, [r3, #0]
    2ffe:	9a03      	ldr	r2, [sp, #12]
    3000:	3224      	adds	r2, #36	; 0x24
    3002:	0112      	lsls	r2, r2, #4
    3004:	9901      	ldr	r1, [sp, #4]
    3006:	440a      	add	r2, r1
    3008:	3204      	adds	r2, #4
    300a:	4610      	mov	r0, r2
    300c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    300e:	9b03      	ldr	r3, [sp, #12]
    3010:	3301      	adds	r3, #1
    3012:	9303      	str	r3, [sp, #12]
    3014:	9b01      	ldr	r3, [sp, #4]
    3016:	7b9b      	ldrb	r3, [r3, #14]
    3018:	461a      	mov	r2, r3
    301a:	9b03      	ldr	r3, [sp, #12]
    301c:	4293      	cmp	r3, r2
    301e:	d3d3      	bcc.n	2fc8 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    3020:	4b27      	ldr	r3, [pc, #156]	; (30c0 <Clock_Ip_InitClock+0x5b0>)
    3022:	2200      	movs	r2, #0
    3024:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    3026:	4b26      	ldr	r3, [pc, #152]	; (30c0 <Clock_Ip_InitClock+0x5b0>)
    3028:	2200      	movs	r2, #0
    302a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    302c:	4b24      	ldr	r3, [pc, #144]	; (30c0 <Clock_Ip_InitClock+0x5b0>)
    302e:	2201      	movs	r2, #1
    3030:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    3032:	4b23      	ldr	r3, [pc, #140]	; (30c0 <Clock_Ip_InitClock+0x5b0>)
    3034:	2200      	movs	r2, #0
    3036:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    3038:	f000 fa9c 	bl	3574 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    303c:	2300      	movs	r3, #0
    303e:	9303      	str	r3, [sp, #12]
    3040:	e04c      	b.n	30dc <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    3042:	9a01      	ldr	r2, [sp, #4]
    3044:	9b03      	ldr	r3, [sp, #12]
    3046:	330d      	adds	r3, #13
    3048:	00db      	lsls	r3, r3, #3
    304a:	4413      	add	r3, r2
    304c:	685b      	ldr	r3, [r3, #4]
    304e:	4a1d      	ldr	r2, [pc, #116]	; (30c4 <Clock_Ip_InitClock+0x5b4>)
    3050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3054:	2b03      	cmp	r3, #3
    3056:	d03b      	beq.n	30d0 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3058:	9b01      	ldr	r3, [sp, #4]
    305a:	9a03      	ldr	r2, [sp, #12]
    305c:	320d      	adds	r2, #13
    305e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3062:	490c      	ldr	r1, [pc, #48]	; (3094 <Clock_Ip_InitClock+0x584>)
    3064:	4613      	mov	r3, r2
    3066:	00db      	lsls	r3, r3, #3
    3068:	4413      	add	r3, r2
    306a:	440b      	add	r3, r1
    306c:	3301      	adds	r3, #1
    306e:	781b      	ldrb	r3, [r3, #0]
    3070:	461a      	mov	r2, r3
    3072:	4b15      	ldr	r3, [pc, #84]	; (30c8 <Clock_Ip_InitClock+0x5b8>)
    3074:	5c9b      	ldrb	r3, [r3, r2]
    3076:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    3078:	4a14      	ldr	r2, [pc, #80]	; (30cc <Clock_Ip_InitClock+0x5bc>)
    307a:	9b02      	ldr	r3, [sp, #8]
    307c:	00db      	lsls	r3, r3, #3
    307e:	4413      	add	r3, r2
    3080:	685b      	ldr	r3, [r3, #4]
    3082:	9a03      	ldr	r2, [sp, #12]
    3084:	320d      	adds	r2, #13
    3086:	00d2      	lsls	r2, r2, #3
    3088:	9901      	ldr	r1, [sp, #4]
    308a:	440a      	add	r2, r1
    308c:	4610      	mov	r0, r2
    308e:	4798      	blx	r3
    3090:	e021      	b.n	30d6 <Clock_Ip_InitClock+0x5c6>
    3092:	bf00      	nop
    3094:	00015d60 	.word	0x00015d60
    3098:	00015cd0 	.word	0x00015cd0
    309c:	000162ac 	.word	0x000162ac
    30a0:	00015d20 	.word	0x00015d20
    30a4:	0001636c 	.word	0x0001636c
    30a8:	00015d50 	.word	0x00015d50
    30ac:	0001635c 	.word	0x0001635c
    30b0:	00015ce0 	.word	0x00015ce0
    30b4:	000162b4 	.word	0x000162b4
    30b8:	00015d10 	.word	0x00015d10
    30bc:	000162dc 	.word	0x000162dc
    30c0:	1fff8b6c 	.word	0x1fff8b6c
    30c4:	000161ac 	.word	0x000161ac
    30c8:	00015d30 	.word	0x00015d30
    30cc:	00016398 	.word	0x00016398
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    30d0:	4b3a      	ldr	r3, [pc, #232]	; (31bc <Clock_Ip_InitClock+0x6ac>)
    30d2:	2201      	movs	r2, #1
    30d4:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    30d6:	9b03      	ldr	r3, [sp, #12]
    30d8:	3301      	adds	r3, #1
    30da:	9303      	str	r3, [sp, #12]
    30dc:	9b01      	ldr	r3, [sp, #4]
    30de:	7adb      	ldrb	r3, [r3, #11]
    30e0:	461a      	mov	r2, r3
    30e2:	9b03      	ldr	r3, [sp, #12]
    30e4:	4293      	cmp	r3, r2
    30e6:	d3ac      	bcc.n	3042 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    30e8:	4b34      	ldr	r3, [pc, #208]	; (31bc <Clock_Ip_InitClock+0x6ac>)
    30ea:	781b      	ldrb	r3, [r3, #0]
    30ec:	f083 0301 	eor.w	r3, r3, #1
    30f0:	b2db      	uxtb	r3, r3
    30f2:	2b00      	cmp	r3, #0
    30f4:	d05e      	beq.n	31b4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    30f6:	2300      	movs	r3, #0
    30f8:	9303      	str	r3, [sp, #12]
    30fa:	e01f      	b.n	313c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    30fc:	9a01      	ldr	r2, [sp, #4]
    30fe:	9b03      	ldr	r3, [sp, #12]
    3100:	334e      	adds	r3, #78	; 0x4e
    3102:	00db      	lsls	r3, r3, #3
    3104:	4413      	add	r3, r2
    3106:	685a      	ldr	r2, [r3, #4]
    3108:	492d      	ldr	r1, [pc, #180]	; (31c0 <Clock_Ip_InitClock+0x6b0>)
    310a:	4613      	mov	r3, r2
    310c:	00db      	lsls	r3, r3, #3
    310e:	4413      	add	r3, r2
    3110:	440b      	add	r3, r1
    3112:	3301      	adds	r3, #1
    3114:	781b      	ldrb	r3, [r3, #0]
    3116:	461a      	mov	r2, r3
    3118:	4b2a      	ldr	r3, [pc, #168]	; (31c4 <Clock_Ip_InitClock+0x6b4>)
    311a:	5c9b      	ldrb	r3, [r3, r2]
    311c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    311e:	4a2a      	ldr	r2, [pc, #168]	; (31c8 <Clock_Ip_InitClock+0x6b8>)
    3120:	9b02      	ldr	r3, [sp, #8]
    3122:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3126:	9a03      	ldr	r2, [sp, #12]
    3128:	324e      	adds	r2, #78	; 0x4e
    312a:	00d2      	lsls	r2, r2, #3
    312c:	9901      	ldr	r1, [sp, #4]
    312e:	440a      	add	r2, r1
    3130:	3204      	adds	r2, #4
    3132:	4610      	mov	r0, r2
    3134:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3136:	9b03      	ldr	r3, [sp, #12]
    3138:	3301      	adds	r3, #1
    313a:	9303      	str	r3, [sp, #12]
    313c:	9b01      	ldr	r3, [sp, #4]
    313e:	7c1b      	ldrb	r3, [r3, #16]
    3140:	461a      	mov	r2, r3
    3142:	9b03      	ldr	r3, [sp, #12]
    3144:	4293      	cmp	r3, r2
    3146:	d3d9      	bcc.n	30fc <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    3148:	2300      	movs	r3, #0
    314a:	9303      	str	r3, [sp, #12]
    314c:	e028      	b.n	31a0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    314e:	9901      	ldr	r1, [sp, #4]
    3150:	9a03      	ldr	r2, [sp, #12]
    3152:	4613      	mov	r3, r2
    3154:	009b      	lsls	r3, r3, #2
    3156:	4413      	add	r3, r2
    3158:	009b      	lsls	r3, r3, #2
    315a:	440b      	add	r3, r1
    315c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3160:	681a      	ldr	r2, [r3, #0]
    3162:	4917      	ldr	r1, [pc, #92]	; (31c0 <Clock_Ip_InitClock+0x6b0>)
    3164:	4613      	mov	r3, r2
    3166:	00db      	lsls	r3, r3, #3
    3168:	4413      	add	r3, r2
    316a:	440b      	add	r3, r1
    316c:	3301      	adds	r3, #1
    316e:	781b      	ldrb	r3, [r3, #0]
    3170:	461a      	mov	r2, r3
    3172:	4b16      	ldr	r3, [pc, #88]	; (31cc <Clock_Ip_InitClock+0x6bc>)
    3174:	5c9b      	ldrb	r3, [r3, r2]
    3176:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    3178:	4a15      	ldr	r2, [pc, #84]	; (31d0 <Clock_Ip_InitClock+0x6c0>)
    317a:	9b02      	ldr	r3, [sp, #8]
    317c:	011b      	lsls	r3, r3, #4
    317e:	4413      	add	r3, r2
    3180:	330c      	adds	r3, #12
    3182:	6819      	ldr	r1, [r3, #0]
    3184:	9a03      	ldr	r2, [sp, #12]
    3186:	4613      	mov	r3, r2
    3188:	009b      	lsls	r3, r3, #2
    318a:	4413      	add	r3, r2
    318c:	009b      	lsls	r3, r3, #2
    318e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3192:	9a01      	ldr	r2, [sp, #4]
    3194:	4413      	add	r3, r2
    3196:	4618      	mov	r0, r3
    3198:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    319a:	9b03      	ldr	r3, [sp, #12]
    319c:	3301      	adds	r3, #1
    319e:	9303      	str	r3, [sp, #12]
    31a0:	9b01      	ldr	r3, [sp, #4]
    31a2:	7c9b      	ldrb	r3, [r3, #18]
    31a4:	461a      	mov	r2, r3
    31a6:	9b03      	ldr	r3, [sp, #12]
    31a8:	4293      	cmp	r3, r2
    31aa:	d3d0      	bcc.n	314e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    31ac:	2104      	movs	r1, #4
    31ae:	9801      	ldr	r0, [sp, #4]
    31b0:	f002 ff48 	bl	6044 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    31b4:	bf00      	nop
    31b6:	b004      	add	sp, #16
    31b8:	bd10      	pop	{r4, pc}
    31ba:	bf00      	nop
    31bc:	1fff8b6c 	.word	0x1fff8b6c
    31c0:	00015d60 	.word	0x00015d60
    31c4:	00015d00 	.word	0x00015d00
    31c8:	000162e8 	.word	0x000162e8
    31cc:	00015d50 	.word	0x00015d50
    31d0:	0001635c 	.word	0x0001635c

000031d4 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    31d4:	b500      	push	{lr}
    31d6:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    31d8:	2302      	movs	r3, #2
    31da:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    31dc:	2300      	movs	r3, #0
    31de:	9304      	str	r3, [sp, #16]
    31e0:	e02c      	b.n	323c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    31e2:	4a36      	ldr	r2, [pc, #216]	; (32bc <Clock_Ip_GetPllStatus+0xe8>)
    31e4:	9b04      	ldr	r3, [sp, #16]
    31e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    31ea:	4935      	ldr	r1, [pc, #212]	; (32c0 <Clock_Ip_GetPllStatus+0xec>)
    31ec:	4613      	mov	r3, r2
    31ee:	00db      	lsls	r3, r3, #3
    31f0:	4413      	add	r3, r2
    31f2:	440b      	add	r3, r1
    31f4:	3301      	adds	r3, #1
    31f6:	781b      	ldrb	r3, [r3, #0]
    31f8:	461a      	mov	r2, r3
    31fa:	4b32      	ldr	r3, [pc, #200]	; (32c4 <Clock_Ip_GetPllStatus+0xf0>)
    31fc:	5c9b      	ldrb	r3, [r3, r2]
    31fe:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    3200:	4931      	ldr	r1, [pc, #196]	; (32c8 <Clock_Ip_GetPllStatus+0xf4>)
    3202:	9a03      	ldr	r2, [sp, #12]
    3204:	4613      	mov	r3, r2
    3206:	009b      	lsls	r3, r3, #2
    3208:	4413      	add	r3, r2
    320a:	009b      	lsls	r3, r3, #2
    320c:	440b      	add	r3, r1
    320e:	3308      	adds	r3, #8
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	492a      	ldr	r1, [pc, #168]	; (32bc <Clock_Ip_GetPllStatus+0xe8>)
    3214:	9a04      	ldr	r2, [sp, #16]
    3216:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    321a:	4610      	mov	r0, r2
    321c:	4798      	blx	r3
    321e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    3220:	9b02      	ldr	r3, [sp, #8]
    3222:	2b01      	cmp	r3, #1
    3224:	d102      	bne.n	322c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    3226:	2301      	movs	r3, #1
    3228:	9305      	str	r3, [sp, #20]
            break;
    322a:	e00d      	b.n	3248 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    322c:	9b02      	ldr	r3, [sp, #8]
    322e:	2b02      	cmp	r3, #2
    3230:	d101      	bne.n	3236 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    3232:	2300      	movs	r3, #0
    3234:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    3236:	9b04      	ldr	r3, [sp, #16]
    3238:	3301      	adds	r3, #1
    323a:	9304      	str	r3, [sp, #16]
    323c:	4b23      	ldr	r3, [pc, #140]	; (32cc <Clock_Ip_GetPllStatus+0xf8>)
    323e:	789b      	ldrb	r3, [r3, #2]
    3240:	461a      	mov	r2, r3
    3242:	9b04      	ldr	r3, [sp, #16]
    3244:	4293      	cmp	r3, r2
    3246:	d3cc      	bcc.n	31e2 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    3248:	9b05      	ldr	r3, [sp, #20]
    324a:	2b00      	cmp	r3, #0
    324c:	d130      	bne.n	32b0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    324e:	2300      	movs	r3, #0
    3250:	9304      	str	r3, [sp, #16]
    3252:	e027      	b.n	32a4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    3254:	4a1e      	ldr	r2, [pc, #120]	; (32d0 <Clock_Ip_GetPllStatus+0xfc>)
    3256:	9b04      	ldr	r3, [sp, #16]
    3258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    325c:	4918      	ldr	r1, [pc, #96]	; (32c0 <Clock_Ip_GetPllStatus+0xec>)
    325e:	4613      	mov	r3, r2
    3260:	00db      	lsls	r3, r3, #3
    3262:	4413      	add	r3, r2
    3264:	440b      	add	r3, r1
    3266:	3301      	adds	r3, #1
    3268:	781b      	ldrb	r3, [r3, #0]
    326a:	461a      	mov	r2, r3
    326c:	4b19      	ldr	r3, [pc, #100]	; (32d4 <Clock_Ip_GetPllStatus+0x100>)
    326e:	5c9b      	ldrb	r3, [r3, r2]
    3270:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    3272:	4919      	ldr	r1, [pc, #100]	; (32d8 <Clock_Ip_GetPllStatus+0x104>)
    3274:	9a03      	ldr	r2, [sp, #12]
    3276:	4613      	mov	r3, r2
    3278:	005b      	lsls	r3, r3, #1
    327a:	4413      	add	r3, r2
    327c:	009b      	lsls	r3, r3, #2
    327e:	440b      	add	r3, r1
    3280:	3308      	adds	r3, #8
    3282:	681b      	ldr	r3, [r3, #0]
    3284:	4912      	ldr	r1, [pc, #72]	; (32d0 <Clock_Ip_GetPllStatus+0xfc>)
    3286:	9a04      	ldr	r2, [sp, #16]
    3288:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    328c:	4610      	mov	r0, r2
    328e:	4798      	blx	r3
    3290:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    3292:	9b01      	ldr	r3, [sp, #4]
    3294:	2b01      	cmp	r3, #1
    3296:	d102      	bne.n	329e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    3298:	2301      	movs	r3, #1
    329a:	9305      	str	r3, [sp, #20]
                break;
    329c:	e008      	b.n	32b0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    329e:	9b04      	ldr	r3, [sp, #16]
    32a0:	3301      	adds	r3, #1
    32a2:	9304      	str	r3, [sp, #16]
    32a4:	4b09      	ldr	r3, [pc, #36]	; (32cc <Clock_Ip_GetPllStatus+0xf8>)
    32a6:	78db      	ldrb	r3, [r3, #3]
    32a8:	461a      	mov	r2, r3
    32aa:	9b04      	ldr	r3, [sp, #16]
    32ac:	4293      	cmp	r3, r2
    32ae:	d3d1      	bcc.n	3254 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    32b0:	9b05      	ldr	r3, [sp, #20]
}
    32b2:	4618      	mov	r0, r3
    32b4:	b007      	add	sp, #28
    32b6:	f85d fb04 	ldr.w	pc, [sp], #4
    32ba:	bf00      	nop
    32bc:	00016268 	.word	0x00016268
    32c0:	00015d60 	.word	0x00015d60
    32c4:	00015d20 	.word	0x00015d20
    32c8:	0001636c 	.word	0x0001636c
    32cc:	1fff8b6c 	.word	0x1fff8b6c
    32d0:	0001626c 	.word	0x0001626c
    32d4:	00015d10 	.word	0x00015d10
    32d8:	000162dc 	.word	0x000162dc

000032dc <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    32dc:	b500      	push	{lr}
    32de:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    32e0:	4b55      	ldr	r3, [pc, #340]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	2b00      	cmp	r3, #0
    32e6:	f000 80a2 	beq.w	342e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    32ea:	2300      	movs	r3, #0
    32ec:	9301      	str	r3, [sp, #4]
    32ee:	e02c      	b.n	334a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    32f0:	4b51      	ldr	r3, [pc, #324]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    32f2:	681a      	ldr	r2, [r3, #0]
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	330d      	adds	r3, #13
    32f8:	00db      	lsls	r3, r3, #3
    32fa:	4413      	add	r3, r2
    32fc:	685b      	ldr	r3, [r3, #4]
    32fe:	4a4f      	ldr	r2, [pc, #316]	; (343c <Clock_Ip_DistributePll+0x160>)
    3300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3304:	2b03      	cmp	r3, #3
    3306:	d11d      	bne.n	3344 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3308:	4b4b      	ldr	r3, [pc, #300]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    330a:	681b      	ldr	r3, [r3, #0]
    330c:	9a01      	ldr	r2, [sp, #4]
    330e:	320d      	adds	r2, #13
    3310:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3314:	494a      	ldr	r1, [pc, #296]	; (3440 <Clock_Ip_DistributePll+0x164>)
    3316:	4613      	mov	r3, r2
    3318:	00db      	lsls	r3, r3, #3
    331a:	4413      	add	r3, r2
    331c:	440b      	add	r3, r1
    331e:	3301      	adds	r3, #1
    3320:	781b      	ldrb	r3, [r3, #0]
    3322:	461a      	mov	r2, r3
    3324:	4b47      	ldr	r3, [pc, #284]	; (3444 <Clock_Ip_DistributePll+0x168>)
    3326:	5c9b      	ldrb	r3, [r3, r2]
    3328:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    332a:	4a47      	ldr	r2, [pc, #284]	; (3448 <Clock_Ip_DistributePll+0x16c>)
    332c:	9b00      	ldr	r3, [sp, #0]
    332e:	00db      	lsls	r3, r3, #3
    3330:	4413      	add	r3, r2
    3332:	685b      	ldr	r3, [r3, #4]
    3334:	4a40      	ldr	r2, [pc, #256]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    3336:	6811      	ldr	r1, [r2, #0]
    3338:	9a01      	ldr	r2, [sp, #4]
    333a:	320d      	adds	r2, #13
    333c:	00d2      	lsls	r2, r2, #3
    333e:	440a      	add	r2, r1
    3340:	4610      	mov	r0, r2
    3342:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    3344:	9b01      	ldr	r3, [sp, #4]
    3346:	3301      	adds	r3, #1
    3348:	9301      	str	r3, [sp, #4]
    334a:	4b3b      	ldr	r3, [pc, #236]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	7adb      	ldrb	r3, [r3, #11]
    3350:	461a      	mov	r2, r3
    3352:	9b01      	ldr	r3, [sp, #4]
    3354:	4293      	cmp	r3, r2
    3356:	d3cb      	bcc.n	32f0 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    3358:	4b3c      	ldr	r3, [pc, #240]	; (344c <Clock_Ip_DistributePll+0x170>)
    335a:	781b      	ldrb	r3, [r3, #0]
    335c:	2b00      	cmp	r3, #0
    335e:	d066      	beq.n	342e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3360:	2300      	movs	r3, #0
    3362:	9301      	str	r3, [sp, #4]
    3364:	e021      	b.n	33aa <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3366:	4b34      	ldr	r3, [pc, #208]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    3368:	681a      	ldr	r2, [r3, #0]
    336a:	9b01      	ldr	r3, [sp, #4]
    336c:	334e      	adds	r3, #78	; 0x4e
    336e:	00db      	lsls	r3, r3, #3
    3370:	4413      	add	r3, r2
    3372:	685a      	ldr	r2, [r3, #4]
    3374:	4932      	ldr	r1, [pc, #200]	; (3440 <Clock_Ip_DistributePll+0x164>)
    3376:	4613      	mov	r3, r2
    3378:	00db      	lsls	r3, r3, #3
    337a:	4413      	add	r3, r2
    337c:	440b      	add	r3, r1
    337e:	3301      	adds	r3, #1
    3380:	781b      	ldrb	r3, [r3, #0]
    3382:	461a      	mov	r2, r3
    3384:	4b32      	ldr	r3, [pc, #200]	; (3450 <Clock_Ip_DistributePll+0x174>)
    3386:	5c9b      	ldrb	r3, [r3, r2]
    3388:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    338a:	4a32      	ldr	r2, [pc, #200]	; (3454 <Clock_Ip_DistributePll+0x178>)
    338c:	9b00      	ldr	r3, [sp, #0]
    338e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3392:	4a29      	ldr	r2, [pc, #164]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    3394:	6811      	ldr	r1, [r2, #0]
    3396:	9a01      	ldr	r2, [sp, #4]
    3398:	324e      	adds	r2, #78	; 0x4e
    339a:	00d2      	lsls	r2, r2, #3
    339c:	440a      	add	r2, r1
    339e:	3204      	adds	r2, #4
    33a0:	4610      	mov	r0, r2
    33a2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    33a4:	9b01      	ldr	r3, [sp, #4]
    33a6:	3301      	adds	r3, #1
    33a8:	9301      	str	r3, [sp, #4]
    33aa:	4b23      	ldr	r3, [pc, #140]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    33ac:	681b      	ldr	r3, [r3, #0]
    33ae:	7c1b      	ldrb	r3, [r3, #16]
    33b0:	461a      	mov	r2, r3
    33b2:	9b01      	ldr	r3, [sp, #4]
    33b4:	4293      	cmp	r3, r2
    33b6:	d3d6      	bcc.n	3366 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    33b8:	2300      	movs	r3, #0
    33ba:	9301      	str	r3, [sp, #4]
    33bc:	e02a      	b.n	3414 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    33be:	4b1e      	ldr	r3, [pc, #120]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    33c0:	6819      	ldr	r1, [r3, #0]
    33c2:	9a01      	ldr	r2, [sp, #4]
    33c4:	4613      	mov	r3, r2
    33c6:	009b      	lsls	r3, r3, #2
    33c8:	4413      	add	r3, r2
    33ca:	009b      	lsls	r3, r3, #2
    33cc:	440b      	add	r3, r1
    33ce:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33d2:	681a      	ldr	r2, [r3, #0]
    33d4:	491a      	ldr	r1, [pc, #104]	; (3440 <Clock_Ip_DistributePll+0x164>)
    33d6:	4613      	mov	r3, r2
    33d8:	00db      	lsls	r3, r3, #3
    33da:	4413      	add	r3, r2
    33dc:	440b      	add	r3, r1
    33de:	3301      	adds	r3, #1
    33e0:	781b      	ldrb	r3, [r3, #0]
    33e2:	461a      	mov	r2, r3
    33e4:	4b1c      	ldr	r3, [pc, #112]	; (3458 <Clock_Ip_DistributePll+0x17c>)
    33e6:	5c9b      	ldrb	r3, [r3, r2]
    33e8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    33ea:	4a1c      	ldr	r2, [pc, #112]	; (345c <Clock_Ip_DistributePll+0x180>)
    33ec:	9b00      	ldr	r3, [sp, #0]
    33ee:	011b      	lsls	r3, r3, #4
    33f0:	4413      	add	r3, r2
    33f2:	330c      	adds	r3, #12
    33f4:	6819      	ldr	r1, [r3, #0]
    33f6:	4b10      	ldr	r3, [pc, #64]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    33f8:	6818      	ldr	r0, [r3, #0]
    33fa:	9a01      	ldr	r2, [sp, #4]
    33fc:	4613      	mov	r3, r2
    33fe:	009b      	lsls	r3, r3, #2
    3400:	4413      	add	r3, r2
    3402:	009b      	lsls	r3, r3, #2
    3404:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3408:	4403      	add	r3, r0
    340a:	4618      	mov	r0, r3
    340c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    340e:	9b01      	ldr	r3, [sp, #4]
    3410:	3301      	adds	r3, #1
    3412:	9301      	str	r3, [sp, #4]
    3414:	4b08      	ldr	r3, [pc, #32]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	7c9b      	ldrb	r3, [r3, #18]
    341a:	461a      	mov	r2, r3
    341c:	9b01      	ldr	r3, [sp, #4]
    341e:	4293      	cmp	r3, r2
    3420:	d3cd      	bcc.n	33be <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3422:	4b05      	ldr	r3, [pc, #20]	; (3438 <Clock_Ip_DistributePll+0x15c>)
    3424:	681b      	ldr	r3, [r3, #0]
    3426:	2104      	movs	r1, #4
    3428:	4618      	mov	r0, r3
    342a:	f002 fe0b 	bl	6044 <Clock_Ip_Command>
        }
    }
}
    342e:	bf00      	nop
    3430:	b003      	add	sp, #12
    3432:	f85d fb04 	ldr.w	pc, [sp], #4
    3436:	bf00      	nop
    3438:	1fff8b64 	.word	0x1fff8b64
    343c:	000161ac 	.word	0x000161ac
    3440:	00015d60 	.word	0x00015d60
    3444:	00015d30 	.word	0x00015d30
    3448:	00016398 	.word	0x00016398
    344c:	1fff8b6c 	.word	0x1fff8b6c
    3450:	00015d00 	.word	0x00015d00
    3454:	000162e8 	.word	0x000162e8
    3458:	00015d50 	.word	0x00015d50
    345c:	0001635c 	.word	0x0001635c

00003460 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    3460:	b500      	push	{lr}
    3462:	b085      	sub	sp, #20
    3464:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3466:	490c      	ldr	r1, [pc, #48]	; (3498 <Clock_Ip_DisableClockMonitor+0x38>)
    3468:	9a01      	ldr	r2, [sp, #4]
    346a:	4613      	mov	r3, r2
    346c:	00db      	lsls	r3, r3, #3
    346e:	4413      	add	r3, r2
    3470:	440b      	add	r3, r1
    3472:	3301      	adds	r3, #1
    3474:	781b      	ldrb	r3, [r3, #0]
    3476:	461a      	mov	r2, r3
    3478:	4b08      	ldr	r3, [pc, #32]	; (349c <Clock_Ip_DisableClockMonitor+0x3c>)
    347a:	5c9b      	ldrb	r3, [r3, r2]
    347c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    347e:	4a08      	ldr	r2, [pc, #32]	; (34a0 <Clock_Ip_DisableClockMonitor+0x40>)
    3480:	9b03      	ldr	r3, [sp, #12]
    3482:	011b      	lsls	r3, r3, #4
    3484:	4413      	add	r3, r2
    3486:	3308      	adds	r3, #8
    3488:	681b      	ldr	r3, [r3, #0]
    348a:	9801      	ldr	r0, [sp, #4]
    348c:	4798      	blx	r3
}
    348e:	bf00      	nop
    3490:	b005      	add	sp, #20
    3492:	f85d fb04 	ldr.w	pc, [sp], #4
    3496:	bf00      	nop
    3498:	00015d60 	.word	0x00015d60
    349c:	00015d50 	.word	0x00015d50
    34a0:	0001635c 	.word	0x0001635c

000034a4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    34a4:	b082      	sub	sp, #8
    34a6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    34a8:	4a02      	ldr	r2, [pc, #8]	; (34b4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    34aa:	9b01      	ldr	r3, [sp, #4]
    34ac:	6013      	str	r3, [r2, #0]
}
    34ae:	bf00      	nop
    34b0:	b002      	add	sp, #8
    34b2:	4770      	bx	lr
    34b4:	1fff8b14 	.word	0x1fff8b14

000034b8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    34b8:	b500      	push	{lr}
    34ba:	b085      	sub	sp, #20
    34bc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    34be:	490c      	ldr	r1, [pc, #48]	; (34f0 <Clock_Ip_DisableModuleClock+0x38>)
    34c0:	9a01      	ldr	r2, [sp, #4]
    34c2:	4613      	mov	r3, r2
    34c4:	00db      	lsls	r3, r3, #3
    34c6:	4413      	add	r3, r2
    34c8:	440b      	add	r3, r1
    34ca:	3301      	adds	r3, #1
    34cc:	781b      	ldrb	r3, [r3, #0]
    34ce:	461a      	mov	r2, r3
    34d0:	4b08      	ldr	r3, [pc, #32]	; (34f4 <Clock_Ip_DisableModuleClock+0x3c>)
    34d2:	5c9b      	ldrb	r3, [r3, r2]
    34d4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    34d6:	4a08      	ldr	r2, [pc, #32]	; (34f8 <Clock_Ip_DisableModuleClock+0x40>)
    34d8:	9b03      	ldr	r3, [sp, #12]
    34da:	00db      	lsls	r3, r3, #3
    34dc:	4413      	add	r3, r2
    34de:	685b      	ldr	r3, [r3, #4]
    34e0:	2101      	movs	r1, #1
    34e2:	9801      	ldr	r0, [sp, #4]
    34e4:	4798      	blx	r3
}
    34e6:	bf00      	nop
    34e8:	b005      	add	sp, #20
    34ea:	f85d fb04 	ldr.w	pc, [sp], #4
    34ee:	bf00      	nop
    34f0:	00015d60 	.word	0x00015d60
    34f4:	00015d00 	.word	0x00015d00
    34f8:	000162e8 	.word	0x000162e8

000034fc <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    34fc:	b500      	push	{lr}
    34fe:	b085      	sub	sp, #20
    3500:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3502:	490c      	ldr	r1, [pc, #48]	; (3534 <Clock_Ip_EnableModuleClock+0x38>)
    3504:	9a01      	ldr	r2, [sp, #4]
    3506:	4613      	mov	r3, r2
    3508:	00db      	lsls	r3, r3, #3
    350a:	4413      	add	r3, r2
    350c:	440b      	add	r3, r1
    350e:	3301      	adds	r3, #1
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	461a      	mov	r2, r3
    3514:	4b08      	ldr	r3, [pc, #32]	; (3538 <Clock_Ip_EnableModuleClock+0x3c>)
    3516:	5c9b      	ldrb	r3, [r3, r2]
    3518:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    351a:	4a08      	ldr	r2, [pc, #32]	; (353c <Clock_Ip_EnableModuleClock+0x40>)
    351c:	9b03      	ldr	r3, [sp, #12]
    351e:	00db      	lsls	r3, r3, #3
    3520:	4413      	add	r3, r2
    3522:	685b      	ldr	r3, [r3, #4]
    3524:	2100      	movs	r1, #0
    3526:	9801      	ldr	r0, [sp, #4]
    3528:	4798      	blx	r3
}
    352a:	bf00      	nop
    352c:	b005      	add	sp, #20
    352e:	f85d fb04 	ldr.w	pc, [sp], #4
    3532:	bf00      	nop
    3534:	00015d60 	.word	0x00015d60
    3538:	00015d00 	.word	0x00015d00
    353c:	000162e8 	.word	0x000162e8

00003540 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    3540:	b500      	push	{lr}
    3542:	b083      	sub	sp, #12
    3544:	9001      	str	r0, [sp, #4]
    3546:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    3548:	4b08      	ldr	r3, [pc, #32]	; (356c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    354a:	2200      	movs	r2, #0
    354c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    354e:	4b08      	ldr	r3, [pc, #32]	; (3570 <Clock_Ip_PowerModeChangeNotification+0x30>)
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	2102      	movs	r1, #2
    3554:	4618      	mov	r0, r3
    3556:	f002 fd75 	bl	6044 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    355a:	9900      	ldr	r1, [sp, #0]
    355c:	9801      	ldr	r0, [sp, #4]
    355e:	f002 fc51 	bl	5e04 <Clock_Ip_ClockPowerModeChangeNotification>
}
    3562:	bf00      	nop
    3564:	b003      	add	sp, #12
    3566:	f85d fb04 	ldr.w	pc, [sp], #4
    356a:	bf00      	nop
    356c:	1fff8b10 	.word	0x1fff8b10
    3570:	1fff8b64 	.word	0x1fff8b64

00003574 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    3574:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    3576:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    357a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    357c:	4b06      	ldr	r3, [pc, #24]	; (3598 <Clock_Ip_SetWaitStates+0x24>)
    357e:	785b      	ldrb	r3, [r3, #1]
    3580:	2b00      	cmp	r3, #0
    3582:	d005      	beq.n	3590 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    3584:	9b01      	ldr	r3, [sp, #4]
    3586:	3b01      	subs	r3, #1
    3588:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    358a:	9b01      	ldr	r3, [sp, #4]
    358c:	2b00      	cmp	r3, #0
    358e:	d1f9      	bne.n	3584 <Clock_Ip_SetWaitStates+0x10>
    }
}
    3590:	bf00      	nop
    3592:	b002      	add	sp, #8
    3594:	4770      	bx	lr
    3596:	bf00      	nop
    3598:	1fff8b6c 	.word	0x1fff8b6c

0000359c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    359c:	b500      	push	{lr}
    359e:	b083      	sub	sp, #12
    35a0:	9001      	str	r0, [sp, #4]
    35a2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    35a4:	4b04      	ldr	r3, [pc, #16]	; (35b8 <Clock_Ip_ReportClockErrors+0x1c>)
    35a6:	681b      	ldr	r3, [r3, #0]
    35a8:	9900      	ldr	r1, [sp, #0]
    35aa:	9801      	ldr	r0, [sp, #4]
    35ac:	4798      	blx	r3
}
    35ae:	bf00      	nop
    35b0:	b003      	add	sp, #12
    35b2:	f85d fb04 	ldr.w	pc, [sp], #4
    35b6:	bf00      	nop
    35b8:	1fff8b14 	.word	0x1fff8b14

000035bc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    35bc:	b500      	push	{lr}
    35be:	b085      	sub	sp, #20
    35c0:	9003      	str	r0, [sp, #12]
    35c2:	9102      	str	r1, [sp, #8]
    35c4:	9201      	str	r2, [sp, #4]
    35c6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    35c8:	2000      	movs	r0, #0
    35ca:	f7fe ffd1 	bl	2570 <OsIf_GetCounter>
    35ce:	4602      	mov	r2, r0
    35d0:	9b03      	ldr	r3, [sp, #12]
    35d2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    35d4:	9b02      	ldr	r3, [sp, #8]
    35d6:	2200      	movs	r2, #0
    35d8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    35da:	2100      	movs	r1, #0
    35dc:	9800      	ldr	r0, [sp, #0]
    35de:	f7ff f813 	bl	2608 <OsIf_MicrosToTicks>
    35e2:	4602      	mov	r2, r0
    35e4:	9b01      	ldr	r3, [sp, #4]
    35e6:	601a      	str	r2, [r3, #0]
}
    35e8:	bf00      	nop
    35ea:	b005      	add	sp, #20
    35ec:	f85d fb04 	ldr.w	pc, [sp], #4

000035f0 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    35f0:	b500      	push	{lr}
    35f2:	b087      	sub	sp, #28
    35f4:	9003      	str	r0, [sp, #12]
    35f6:	9102      	str	r1, [sp, #8]
    35f8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    35fa:	2300      	movs	r3, #0
    35fc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3600:	2100      	movs	r1, #0
    3602:	9803      	ldr	r0, [sp, #12]
    3604:	f7fe ffcd 	bl	25a2 <OsIf_GetElapsed>
    3608:	4602      	mov	r2, r0
    360a:	9b02      	ldr	r3, [sp, #8]
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	441a      	add	r2, r3
    3610:	9b02      	ldr	r3, [sp, #8]
    3612:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3614:	9b02      	ldr	r3, [sp, #8]
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	9a01      	ldr	r2, [sp, #4]
    361a:	429a      	cmp	r2, r3
    361c:	d802      	bhi.n	3624 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    361e:	2301      	movs	r3, #1
    3620:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3624:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3628:	4618      	mov	r0, r3
    362a:	b007      	add	sp, #28
    362c:	f85d fb04 	ldr.w	pc, [sp], #4

00003630 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3630:	b082      	sub	sp, #8
    3632:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3634:	bf00      	nop
    3636:	b002      	add	sp, #8
    3638:	4770      	bx	lr

0000363a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    363a:	b500      	push	{lr}
    363c:	b083      	sub	sp, #12
    363e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3640:	9b01      	ldr	r3, [sp, #4]
    3642:	2b00      	cmp	r3, #0
    3644:	d002      	beq.n	364c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3646:	9801      	ldr	r0, [sp, #4]
    3648:	f000 f8ad 	bl	37a6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    364c:	bf00      	nop
    364e:	b003      	add	sp, #12
    3650:	f85d fb04 	ldr.w	pc, [sp], #4

00003654 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3654:	b500      	push	{lr}
    3656:	b083      	sub	sp, #12
    3658:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    365a:	9b01      	ldr	r3, [sp, #4]
    365c:	2b00      	cmp	r3, #0
    365e:	d002      	beq.n	3666 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    3660:	9801      	ldr	r0, [sp, #4]
    3662:	f000 f8cd 	bl	3800 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3666:	bf00      	nop
    3668:	b003      	add	sp, #12
    366a:	f85d fb04 	ldr.w	pc, [sp], #4

0000366e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    366e:	b500      	push	{lr}
    3670:	b083      	sub	sp, #12
    3672:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3674:	9b01      	ldr	r3, [sp, #4]
    3676:	2b00      	cmp	r3, #0
    3678:	d002      	beq.n	3680 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    367a:	9801      	ldr	r0, [sp, #4]
    367c:	f000 f8ee 	bl	385c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3680:	bf00      	nop
    3682:	b003      	add	sp, #12
    3684:	f85d fb04 	ldr.w	pc, [sp], #4

00003688 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3688:	b500      	push	{lr}
    368a:	b083      	sub	sp, #12
    368c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    368e:	9b01      	ldr	r3, [sp, #4]
    3690:	2b00      	cmp	r3, #0
    3692:	d002      	beq.n	369a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3694:	9801      	ldr	r0, [sp, #4]
    3696:	f000 f8f9 	bl	388c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    369a:	bf00      	nop
    369c:	b003      	add	sp, #12
    369e:	f85d fb04 	ldr.w	pc, [sp], #4

000036a2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    36a2:	b500      	push	{lr}
    36a4:	b083      	sub	sp, #12
    36a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	2b00      	cmp	r3, #0
    36ac:	d002      	beq.n	36b4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    36ae:	9801      	ldr	r0, [sp, #4]
    36b0:	f000 f904 	bl	38bc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36b4:	bf00      	nop
    36b6:	b003      	add	sp, #12
    36b8:	f85d fb04 	ldr.w	pc, [sp], #4

000036bc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    36bc:	b500      	push	{lr}
    36be:	b083      	sub	sp, #12
    36c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36c2:	9b01      	ldr	r3, [sp, #4]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d002      	beq.n	36ce <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    36c8:	9801      	ldr	r0, [sp, #4]
    36ca:	f000 f90f 	bl	38ec <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ce:	bf00      	nop
    36d0:	b003      	add	sp, #12
    36d2:	f85d fb04 	ldr.w	pc, [sp], #4

000036d6 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    36d6:	b500      	push	{lr}
    36d8:	b083      	sub	sp, #12
    36da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36dc:	9b01      	ldr	r3, [sp, #4]
    36de:	2b00      	cmp	r3, #0
    36e0:	d002      	beq.n	36e8 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    36e2:	9801      	ldr	r0, [sp, #4]
    36e4:	f000 f91a 	bl	391c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36e8:	bf00      	nop
    36ea:	b003      	add	sp, #12
    36ec:	f85d fb04 	ldr.w	pc, [sp], #4

000036f0 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    36f0:	b500      	push	{lr}
    36f2:	b083      	sub	sp, #12
    36f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36f6:	9b01      	ldr	r3, [sp, #4]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d002      	beq.n	3702 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    36fc:	9801      	ldr	r0, [sp, #4]
    36fe:	f000 f925 	bl	394c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3702:	bf00      	nop
    3704:	b003      	add	sp, #12
    3706:	f85d fb04 	ldr.w	pc, [sp], #4

0000370a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    370a:	b500      	push	{lr}
    370c:	b083      	sub	sp, #12
    370e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3710:	9b01      	ldr	r3, [sp, #4]
    3712:	2b00      	cmp	r3, #0
    3714:	d002      	beq.n	371c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3716:	9801      	ldr	r0, [sp, #4]
    3718:	f000 f930 	bl	397c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    371c:	bf00      	nop
    371e:	b003      	add	sp, #12
    3720:	f85d fb04 	ldr.w	pc, [sp], #4

00003724 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3724:	b500      	push	{lr}
    3726:	b083      	sub	sp, #12
    3728:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	2b00      	cmp	r3, #0
    372e:	d002      	beq.n	3736 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3730:	9801      	ldr	r0, [sp, #4]
    3732:	f000 f93b 	bl	39ac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3736:	bf00      	nop
    3738:	b003      	add	sp, #12
    373a:	f85d fb04 	ldr.w	pc, [sp], #4

0000373e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    373e:	b500      	push	{lr}
    3740:	b083      	sub	sp, #12
    3742:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3744:	9b01      	ldr	r3, [sp, #4]
    3746:	2b00      	cmp	r3, #0
    3748:	d002      	beq.n	3750 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    374a:	9801      	ldr	r0, [sp, #4]
    374c:	f000 f946 	bl	39dc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3750:	bf00      	nop
    3752:	b003      	add	sp, #12
    3754:	f85d fb04 	ldr.w	pc, [sp], #4

00003758 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3758:	b500      	push	{lr}
    375a:	b083      	sub	sp, #12
    375c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    375e:	9b01      	ldr	r3, [sp, #4]
    3760:	2b00      	cmp	r3, #0
    3762:	d002      	beq.n	376a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3764:	9801      	ldr	r0, [sp, #4]
    3766:	f000 f951 	bl	3a0c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    376a:	bf00      	nop
    376c:	b003      	add	sp, #12
    376e:	f85d fb04 	ldr.w	pc, [sp], #4

00003772 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    3772:	b500      	push	{lr}
    3774:	b083      	sub	sp, #12
    3776:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	2b00      	cmp	r3, #0
    377c:	d002      	beq.n	3784 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    377e:	9801      	ldr	r0, [sp, #4]
    3780:	f000 f95e 	bl	3a40 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3784:	bf00      	nop
    3786:	b003      	add	sp, #12
    3788:	f85d fb04 	ldr.w	pc, [sp], #4

0000378c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    378c:	b500      	push	{lr}
    378e:	b083      	sub	sp, #12
    3790:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	2b00      	cmp	r3, #0
    3796:	d002      	beq.n	379e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3798:	9801      	ldr	r0, [sp, #4]
    379a:	f000 f98b 	bl	3ab4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    379e:	bf00      	nop
    37a0:	b003      	add	sp, #12
    37a2:	f85d fb04 	ldr.w	pc, [sp], #4

000037a6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    37a6:	b086      	sub	sp, #24
    37a8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	681a      	ldr	r2, [r3, #0]
    37ae:	4911      	ldr	r1, [pc, #68]	; (37f4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    37b0:	4613      	mov	r3, r2
    37b2:	00db      	lsls	r3, r3, #3
    37b4:	4413      	add	r3, r2
    37b6:	440b      	add	r3, r1
    37b8:	781b      	ldrb	r3, [r3, #0]
    37ba:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    37bc:	9b01      	ldr	r3, [sp, #4]
    37be:	685b      	ldr	r3, [r3, #4]
    37c0:	4a0d      	ldr	r2, [pc, #52]	; (37f8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    37c2:	5cd3      	ldrb	r3, [r2, r3]
    37c4:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    37c6:	4a0d      	ldr	r2, [pc, #52]	; (37fc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    37c8:	9b05      	ldr	r3, [sp, #20]
    37ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    37d2:	9b03      	ldr	r3, [sp, #12]
    37d4:	f023 0307 	bic.w	r3, r3, #7
    37d8:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    37da:	9a03      	ldr	r2, [sp, #12]
    37dc:	9b04      	ldr	r3, [sp, #16]
    37de:	4313      	orrs	r3, r2
    37e0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    37e2:	4a06      	ldr	r2, [pc, #24]	; (37fc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    37e4:	9b05      	ldr	r3, [sp, #20]
    37e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    37ea:	9a03      	ldr	r2, [sp, #12]
    37ec:	601a      	str	r2, [r3, #0]
}
    37ee:	bf00      	nop
    37f0:	b006      	add	sp, #24
    37f2:	4770      	bx	lr
    37f4:	00015d60 	.word	0x00015d60
    37f8:	00016158 	.word	0x00016158
    37fc:	0001619c 	.word	0x0001619c

00003800 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3800:	b086      	sub	sp, #24
    3802:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3804:	9b01      	ldr	r3, [sp, #4]
    3806:	681a      	ldr	r2, [r3, #0]
    3808:	4911      	ldr	r1, [pc, #68]	; (3850 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    380a:	4613      	mov	r3, r2
    380c:	00db      	lsls	r3, r3, #3
    380e:	4413      	add	r3, r2
    3810:	440b      	add	r3, r1
    3812:	781b      	ldrb	r3, [r3, #0]
    3814:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3816:	9b01      	ldr	r3, [sp, #4]
    3818:	685b      	ldr	r3, [r3, #4]
    381a:	4a0e      	ldr	r2, [pc, #56]	; (3854 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    381c:	5cd3      	ldrb	r3, [r2, r3]
    381e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3820:	4a0d      	ldr	r2, [pc, #52]	; (3858 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3822:	9b05      	ldr	r3, [sp, #20]
    3824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3828:	681b      	ldr	r3, [r3, #0]
    382a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    382c:	9b03      	ldr	r3, [sp, #12]
    382e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3832:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3834:	9b04      	ldr	r3, [sp, #16]
    3836:	021b      	lsls	r3, r3, #8
    3838:	9a03      	ldr	r2, [sp, #12]
    383a:	4313      	orrs	r3, r2
    383c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    383e:	4a06      	ldr	r2, [pc, #24]	; (3858 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3840:	9b05      	ldr	r3, [sp, #20]
    3842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3846:	9a03      	ldr	r2, [sp, #12]
    3848:	601a      	str	r2, [r3, #0]
}
    384a:	bf00      	nop
    384c:	b006      	add	sp, #24
    384e:	4770      	bx	lr
    3850:	00015d60 	.word	0x00015d60
    3854:	00016158 	.word	0x00016158
    3858:	0001619c 	.word	0x0001619c

0000385c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    385c:	b084      	sub	sp, #16
    385e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3860:	4b09      	ldr	r3, [pc, #36]	; (3888 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3862:	695b      	ldr	r3, [r3, #20]
    3864:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3866:	9b03      	ldr	r3, [sp, #12]
    3868:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    386c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    386e:	9b01      	ldr	r3, [sp, #4]
    3870:	685b      	ldr	r3, [r3, #4]
    3872:	3b01      	subs	r3, #1
    3874:	041b      	lsls	r3, r3, #16
    3876:	9a03      	ldr	r2, [sp, #12]
    3878:	4313      	orrs	r3, r2
    387a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    387c:	4a02      	ldr	r2, [pc, #8]	; (3888 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    387e:	9b03      	ldr	r3, [sp, #12]
    3880:	6153      	str	r3, [r2, #20]
}
    3882:	bf00      	nop
    3884:	b004      	add	sp, #16
    3886:	4770      	bx	lr
    3888:	40064000 	.word	0x40064000

0000388c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    388c:	b084      	sub	sp, #16
    388e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3890:	4b09      	ldr	r3, [pc, #36]	; (38b8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3892:	695b      	ldr	r3, [r3, #20]
    3894:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3896:	9b03      	ldr	r3, [sp, #12]
    3898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    389c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    389e:	9b01      	ldr	r3, [sp, #4]
    38a0:	685b      	ldr	r3, [r3, #4]
    38a2:	3b01      	subs	r3, #1
    38a4:	011b      	lsls	r3, r3, #4
    38a6:	9a03      	ldr	r2, [sp, #12]
    38a8:	4313      	orrs	r3, r2
    38aa:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    38ac:	4a02      	ldr	r2, [pc, #8]	; (38b8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    38ae:	9b03      	ldr	r3, [sp, #12]
    38b0:	6153      	str	r3, [r2, #20]
}
    38b2:	bf00      	nop
    38b4:	b004      	add	sp, #16
    38b6:	4770      	bx	lr
    38b8:	40064000 	.word	0x40064000

000038bc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    38bc:	b084      	sub	sp, #16
    38be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    38c0:	4b09      	ldr	r3, [pc, #36]	; (38e8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    38c2:	695b      	ldr	r3, [r3, #20]
    38c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    38c6:	9b03      	ldr	r3, [sp, #12]
    38c8:	f023 030f 	bic.w	r3, r3, #15
    38cc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    38ce:	9b01      	ldr	r3, [sp, #4]
    38d0:	685b      	ldr	r3, [r3, #4]
    38d2:	3b01      	subs	r3, #1
    38d4:	9a03      	ldr	r2, [sp, #12]
    38d6:	4313      	orrs	r3, r2
    38d8:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    38da:	4a03      	ldr	r2, [pc, #12]	; (38e8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    38dc:	9b03      	ldr	r3, [sp, #12]
    38de:	6153      	str	r3, [r2, #20]
}
    38e0:	bf00      	nop
    38e2:	b004      	add	sp, #16
    38e4:	4770      	bx	lr
    38e6:	bf00      	nop
    38e8:	40064000 	.word	0x40064000

000038ec <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    38ec:	b084      	sub	sp, #16
    38ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    38f0:	4b09      	ldr	r3, [pc, #36]	; (3918 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    38f2:	699b      	ldr	r3, [r3, #24]
    38f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    38f6:	9b03      	ldr	r3, [sp, #12]
    38f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    38fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    38fe:	9b01      	ldr	r3, [sp, #4]
    3900:	685b      	ldr	r3, [r3, #4]
    3902:	3b01      	subs	r3, #1
    3904:	041b      	lsls	r3, r3, #16
    3906:	9a03      	ldr	r2, [sp, #12]
    3908:	4313      	orrs	r3, r2
    390a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    390c:	4a02      	ldr	r2, [pc, #8]	; (3918 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    390e:	9b03      	ldr	r3, [sp, #12]
    3910:	6193      	str	r3, [r2, #24]
}
    3912:	bf00      	nop
    3914:	b004      	add	sp, #16
    3916:	4770      	bx	lr
    3918:	40064000 	.word	0x40064000

0000391c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    391c:	b084      	sub	sp, #16
    391e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3920:	4b09      	ldr	r3, [pc, #36]	; (3948 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3922:	699b      	ldr	r3, [r3, #24]
    3924:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3926:	9b03      	ldr	r3, [sp, #12]
    3928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    392c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    392e:	9b01      	ldr	r3, [sp, #4]
    3930:	685b      	ldr	r3, [r3, #4]
    3932:	3b01      	subs	r3, #1
    3934:	011b      	lsls	r3, r3, #4
    3936:	9a03      	ldr	r2, [sp, #12]
    3938:	4313      	orrs	r3, r2
    393a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    393c:	4a02      	ldr	r2, [pc, #8]	; (3948 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    393e:	9b03      	ldr	r3, [sp, #12]
    3940:	6193      	str	r3, [r2, #24]
}
    3942:	bf00      	nop
    3944:	b004      	add	sp, #16
    3946:	4770      	bx	lr
    3948:	40064000 	.word	0x40064000

0000394c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    394c:	b084      	sub	sp, #16
    394e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3950:	4b09      	ldr	r3, [pc, #36]	; (3978 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3952:	699b      	ldr	r3, [r3, #24]
    3954:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3956:	9b03      	ldr	r3, [sp, #12]
    3958:	f023 030f 	bic.w	r3, r3, #15
    395c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    395e:	9b01      	ldr	r3, [sp, #4]
    3960:	685b      	ldr	r3, [r3, #4]
    3962:	3b01      	subs	r3, #1
    3964:	9a03      	ldr	r2, [sp, #12]
    3966:	4313      	orrs	r3, r2
    3968:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    396a:	4a03      	ldr	r2, [pc, #12]	; (3978 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    396c:	9b03      	ldr	r3, [sp, #12]
    396e:	6193      	str	r3, [r2, #24]
}
    3970:	bf00      	nop
    3972:	b004      	add	sp, #16
    3974:	4770      	bx	lr
    3976:	bf00      	nop
    3978:	40064000 	.word	0x40064000

0000397c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    397c:	b084      	sub	sp, #16
    397e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3980:	4b09      	ldr	r3, [pc, #36]	; (39a8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3982:	69db      	ldr	r3, [r3, #28]
    3984:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3986:	9b03      	ldr	r3, [sp, #12]
    3988:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    398c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    398e:	9b01      	ldr	r3, [sp, #4]
    3990:	685b      	ldr	r3, [r3, #4]
    3992:	3b01      	subs	r3, #1
    3994:	041b      	lsls	r3, r3, #16
    3996:	9a03      	ldr	r2, [sp, #12]
    3998:	4313      	orrs	r3, r2
    399a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    399c:	4a02      	ldr	r2, [pc, #8]	; (39a8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    399e:	9b03      	ldr	r3, [sp, #12]
    39a0:	61d3      	str	r3, [r2, #28]
}
    39a2:	bf00      	nop
    39a4:	b004      	add	sp, #16
    39a6:	4770      	bx	lr
    39a8:	40064000 	.word	0x40064000

000039ac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    39ac:	b084      	sub	sp, #16
    39ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    39b0:	4b09      	ldr	r3, [pc, #36]	; (39d8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    39b2:	69db      	ldr	r3, [r3, #28]
    39b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    39b6:	9b03      	ldr	r3, [sp, #12]
    39b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    39bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    39be:	9b01      	ldr	r3, [sp, #4]
    39c0:	685b      	ldr	r3, [r3, #4]
    39c2:	3b01      	subs	r3, #1
    39c4:	011b      	lsls	r3, r3, #4
    39c6:	9a03      	ldr	r2, [sp, #12]
    39c8:	4313      	orrs	r3, r2
    39ca:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    39cc:	4a02      	ldr	r2, [pc, #8]	; (39d8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    39ce:	9b03      	ldr	r3, [sp, #12]
    39d0:	61d3      	str	r3, [r2, #28]
}
    39d2:	bf00      	nop
    39d4:	b004      	add	sp, #16
    39d6:	4770      	bx	lr
    39d8:	40064000 	.word	0x40064000

000039dc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    39dc:	b084      	sub	sp, #16
    39de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    39e0:	4b09      	ldr	r3, [pc, #36]	; (3a08 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    39e2:	69db      	ldr	r3, [r3, #28]
    39e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    39e6:	9b03      	ldr	r3, [sp, #12]
    39e8:	f023 030f 	bic.w	r3, r3, #15
    39ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    39ee:	9b01      	ldr	r3, [sp, #4]
    39f0:	685b      	ldr	r3, [r3, #4]
    39f2:	3b01      	subs	r3, #1
    39f4:	9a03      	ldr	r2, [sp, #12]
    39f6:	4313      	orrs	r3, r2
    39f8:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    39fa:	4a03      	ldr	r2, [pc, #12]	; (3a08 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    39fc:	9b03      	ldr	r3, [sp, #12]
    39fe:	61d3      	str	r3, [r2, #28]
}
    3a00:	bf00      	nop
    3a02:	b004      	add	sp, #16
    3a04:	4770      	bx	lr
    3a06:	bf00      	nop
    3a08:	40064000 	.word	0x40064000

00003a0c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3a0c:	b084      	sub	sp, #16
    3a0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3a10:	4b0a      	ldr	r3, [pc, #40]	; (3a3c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3a12:	685b      	ldr	r3, [r3, #4]
    3a14:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3a16:	9b03      	ldr	r3, [sp, #12]
    3a18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3a1c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3a1e:	9b01      	ldr	r3, [sp, #4]
    3a20:	685b      	ldr	r3, [r3, #4]
    3a22:	3b01      	subs	r3, #1
    3a24:	021b      	lsls	r3, r3, #8
    3a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3a2a:	9a03      	ldr	r2, [sp, #12]
    3a2c:	4313      	orrs	r3, r2
    3a2e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3a30:	4a02      	ldr	r2, [pc, #8]	; (3a3c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3a32:	9b03      	ldr	r3, [sp, #12]
    3a34:	6053      	str	r3, [r2, #4]
}
    3a36:	bf00      	nop
    3a38:	b004      	add	sp, #16
    3a3a:	4770      	bx	lr
    3a3c:	40048000 	.word	0x40048000

00003a40 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a40:	b084      	sub	sp, #16
    3a42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3a44:	4919      	ldr	r1, [pc, #100]	; (3aac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3a46:	9b01      	ldr	r3, [sp, #4]
    3a48:	681a      	ldr	r2, [r3, #0]
    3a4a:	4819      	ldr	r0, [pc, #100]	; (3ab0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3a4c:	4613      	mov	r3, r2
    3a4e:	00db      	lsls	r3, r3, #3
    3a50:	4413      	add	r3, r2
    3a52:	4403      	add	r3, r0
    3a54:	3305      	adds	r3, #5
    3a56:	781b      	ldrb	r3, [r3, #0]
    3a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3a5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3a5e:	9b03      	ldr	r3, [sp, #12]
    3a60:	f023 030f 	bic.w	r3, r3, #15
    3a64:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3a66:	9b01      	ldr	r3, [sp, #4]
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	3b01      	subs	r3, #1
    3a6c:	f003 0307 	and.w	r3, r3, #7
    3a70:	9a03      	ldr	r2, [sp, #12]
    3a72:	4313      	orrs	r3, r2
    3a74:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3a76:	9b01      	ldr	r3, [sp, #4]
    3a78:	7a1b      	ldrb	r3, [r3, #8]
    3a7a:	3b01      	subs	r3, #1
    3a7c:	00db      	lsls	r3, r3, #3
    3a7e:	f003 0308 	and.w	r3, r3, #8
    3a82:	9a03      	ldr	r2, [sp, #12]
    3a84:	4313      	orrs	r3, r2
    3a86:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3a88:	4908      	ldr	r1, [pc, #32]	; (3aac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3a8a:	9b01      	ldr	r3, [sp, #4]
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	4808      	ldr	r0, [pc, #32]	; (3ab0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3a90:	4613      	mov	r3, r2
    3a92:	00db      	lsls	r3, r3, #3
    3a94:	4413      	add	r3, r2
    3a96:	4403      	add	r3, r0
    3a98:	3305      	adds	r3, #5
    3a9a:	781b      	ldrb	r3, [r3, #0]
    3a9c:	461a      	mov	r2, r3
    3a9e:	9b03      	ldr	r3, [sp, #12]
    3aa0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3aa4:	bf00      	nop
    3aa6:	b004      	add	sp, #16
    3aa8:	4770      	bx	lr
    3aaa:	bf00      	nop
    3aac:	40065000 	.word	0x40065000
    3ab0:	00015d60 	.word	0x00015d60

00003ab4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ab4:	b084      	sub	sp, #16
    3ab6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3ab8:	4b10      	ldr	r3, [pc, #64]	; (3afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3abc:	4a0f      	ldr	r2, [pc, #60]	; (3afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3ac2:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3ac4:	4b0d      	ldr	r3, [pc, #52]	; (3afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3ac8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3aca:	9b03      	ldr	r3, [sp, #12]
    3acc:	f023 030f 	bic.w	r3, r3, #15
    3ad0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3ad2:	9b01      	ldr	r3, [sp, #4]
    3ad4:	685b      	ldr	r3, [r3, #4]
    3ad6:	3b01      	subs	r3, #1
    3ad8:	005b      	lsls	r3, r3, #1
    3ada:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3ade:	9b01      	ldr	r3, [sp, #4]
    3ae0:	7a1b      	ldrb	r3, [r3, #8]
    3ae2:	3b01      	subs	r3, #1
    3ae4:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3ae8:	4313      	orrs	r3, r2
    3aea:	9a03      	ldr	r2, [sp, #12]
    3aec:	4313      	orrs	r3, r2
    3aee:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3af0:	4a02      	ldr	r2, [pc, #8]	; (3afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3af2:	9b03      	ldr	r3, [sp, #12]
    3af4:	6693      	str	r3, [r2, #104]	; 0x68
}
    3af6:	bf00      	nop
    3af8:	b004      	add	sp, #16
    3afa:	4770      	bx	lr
    3afc:	40048000 	.word	0x40048000

00003b00 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3b00:	b082      	sub	sp, #8
    3b02:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3b04:	bf00      	nop
    3b06:	b002      	add	sp, #8
    3b08:	4770      	bx	lr
	...

00003b0c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3b0c:	b082      	sub	sp, #8
    3b0e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3b10:	bf00      	nop
    3b12:	b002      	add	sp, #8
    3b14:	4770      	bx	lr

00003b16 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3b16:	b082      	sub	sp, #8
    3b18:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3b1a:	bf00      	nop
    3b1c:	b002      	add	sp, #8
    3b1e:	4770      	bx	lr

00003b20 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3b20:	b500      	push	{lr}
    3b22:	b083      	sub	sp, #12
    3b24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b26:	9b01      	ldr	r3, [sp, #4]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	d002      	beq.n	3b32 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3b2c:	9801      	ldr	r0, [sp, #4]
    3b2e:	f000 f86a 	bl	3c06 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b32:	bf00      	nop
    3b34:	b003      	add	sp, #12
    3b36:	f85d fb04 	ldr.w	pc, [sp], #4

00003b3a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3b3a:	b500      	push	{lr}
    3b3c:	b083      	sub	sp, #12
    3b3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b40:	9b01      	ldr	r3, [sp, #4]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d002      	beq.n	3b4c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3b46:	9801      	ldr	r0, [sp, #4]
    3b48:	f000 f884 	bl	3c54 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3b4c:	bf00      	nop
    3b4e:	b003      	add	sp, #12
    3b50:	f85d fb04 	ldr.w	pc, [sp], #4

00003b54 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3b54:	b500      	push	{lr}
    3b56:	b089      	sub	sp, #36	; 0x24
    3b58:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3b5a:	2300      	movs	r3, #0
    3b5c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3b60:	9b01      	ldr	r3, [sp, #4]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d031      	beq.n	3bca <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3b66:	4b1b      	ldr	r3, [pc, #108]	; (3bd4 <Clock_Ip_CompleteSOSC+0x80>)
    3b68:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3b6c:	f003 0301 	and.w	r3, r3, #1
    3b70:	2b00      	cmp	r3, #0
    3b72:	d02a      	beq.n	3bca <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3b74:	aa03      	add	r2, sp, #12
    3b76:	a904      	add	r1, sp, #16
    3b78:	a805      	add	r0, sp, #20
    3b7a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3b7e:	f7ff fd1d 	bl	35bc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3b82:	4b14      	ldr	r3, [pc, #80]	; (3bd4 <Clock_Ip_CompleteSOSC+0x80>)
    3b84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3b88:	0e1b      	lsrs	r3, r3, #24
    3b8a:	f003 0301 	and.w	r3, r3, #1
    3b8e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3b90:	9a03      	ldr	r2, [sp, #12]
    3b92:	a904      	add	r1, sp, #16
    3b94:	ab05      	add	r3, sp, #20
    3b96:	4618      	mov	r0, r3
    3b98:	f7ff fd2a 	bl	35f0 <Clock_Ip_TimeoutExpired>
    3b9c:	4603      	mov	r3, r0
    3b9e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3ba2:	9b06      	ldr	r3, [sp, #24]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d106      	bne.n	3bb6 <Clock_Ip_CompleteSOSC+0x62>
    3ba8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bac:	f083 0301 	eor.w	r3, r3, #1
    3bb0:	b2db      	uxtb	r3, r3
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d1e5      	bne.n	3b82 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3bb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d005      	beq.n	3bca <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	681b      	ldr	r3, [r3, #0]
    3bc2:	4619      	mov	r1, r3
    3bc4:	2001      	movs	r0, #1
    3bc6:	f7ff fce9 	bl	359c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3bca:	bf00      	nop
    3bcc:	b009      	add	sp, #36	; 0x24
    3bce:	f85d fb04 	ldr.w	pc, [sp], #4
    3bd2:	bf00      	nop
    3bd4:	40064000 	.word	0x40064000

00003bd8 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3bd8:	b500      	push	{lr}
    3bda:	b083      	sub	sp, #12
    3bdc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3bde:	9801      	ldr	r0, [sp, #4]
    3be0:	f000 f8c0 	bl	3d64 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3be4:	bf00      	nop
    3be6:	b003      	add	sp, #12
    3be8:	f85d fb04 	ldr.w	pc, [sp], #4

00003bec <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3bec:	b500      	push	{lr}
    3bee:	b083      	sub	sp, #12
    3bf0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bf2:	9b01      	ldr	r3, [sp, #4]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d002      	beq.n	3bfe <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3bf8:	9801      	ldr	r0, [sp, #4]
    3bfa:	f000 f8c3 	bl	3d84 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bfe:	bf00      	nop
    3c00:	b003      	add	sp, #12
    3c02:	f85d fb04 	ldr.w	pc, [sp], #4

00003c06 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3c06:	b082      	sub	sp, #8
    3c08:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3c0a:	4b11      	ldr	r3, [pc, #68]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3c10:	4a0f      	ldr	r2, [pc, #60]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c16:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3c1a:	4b0d      	ldr	r3, [pc, #52]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3c20:	4a0b      	ldr	r2, [pc, #44]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3c26:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3c2a:	4b09      	ldr	r3, [pc, #36]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3c30:	4a07      	ldr	r2, [pc, #28]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c32:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3c36:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3c3a:	4b05      	ldr	r3, [pc, #20]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3c40:	4a03      	ldr	r2, [pc, #12]	; (3c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3c42:	f023 0301 	bic.w	r3, r3, #1
    3c46:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3c4a:	bf00      	nop
    3c4c:	b002      	add	sp, #8
    3c4e:	4770      	bx	lr
    3c50:	40064000 	.word	0x40064000

00003c54 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3c54:	b082      	sub	sp, #8
    3c56:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3c58:	9b01      	ldr	r3, [sp, #4]
    3c5a:	891b      	ldrh	r3, [r3, #8]
    3c5c:	2b01      	cmp	r3, #1
    3c5e:	d174      	bne.n	3d4a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3c60:	9b01      	ldr	r3, [sp, #4]
    3c62:	7bdb      	ldrb	r3, [r3, #15]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d002      	beq.n	3c6e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3c68:	2b01      	cmp	r3, #1
    3c6a:	d009      	beq.n	3c80 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3c6c:	e011      	b.n	3c92 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3c6e:	4b39      	ldr	r3, [pc, #228]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3c70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3c74:	4a37      	ldr	r2, [pc, #220]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3c76:	f023 0308 	bic.w	r3, r3, #8
    3c7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3c7e:	e008      	b.n	3c92 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3c80:	4b34      	ldr	r3, [pc, #208]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3c82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3c86:	4a33      	ldr	r2, [pc, #204]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3c88:	f043 0308 	orr.w	r3, r3, #8
    3c8c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3c90:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3c92:	4b30      	ldr	r3, [pc, #192]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3c94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3c98:	4a2e      	ldr	r2, [pc, #184]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3c9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3c9e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3ca2:	9b01      	ldr	r3, [sp, #4]
    3ca4:	685b      	ldr	r3, [r3, #4]
    3ca6:	4a2c      	ldr	r2, [pc, #176]	; (3d58 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3ca8:	4293      	cmp	r3, r2
    3caa:	d90d      	bls.n	3cc8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3cac:	9b01      	ldr	r3, [sp, #4]
    3cae:	685b      	ldr	r3, [r3, #4]
    3cb0:	4a2a      	ldr	r2, [pc, #168]	; (3d5c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3cb2:	4293      	cmp	r3, r2
    3cb4:	d208      	bcs.n	3cc8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3cb6:	4b27      	ldr	r3, [pc, #156]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3cb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3cbc:	4a25      	ldr	r2, [pc, #148]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3cbe:	f043 0320 	orr.w	r3, r3, #32
    3cc2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3cc6:	e007      	b.n	3cd8 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3cc8:	4b22      	ldr	r3, [pc, #136]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3cca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3cce:	4a21      	ldr	r2, [pc, #132]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3cd0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3cd4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	7b1b      	ldrb	r3, [r3, #12]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d108      	bne.n	3cf2 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3ce0:	4b1c      	ldr	r3, [pc, #112]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ce6:	4a1b      	ldr	r2, [pc, #108]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ce8:	f043 0304 	orr.w	r3, r3, #4
    3cec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3cf0:	e007      	b.n	3d02 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3cf2:	4b18      	ldr	r3, [pc, #96]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3cf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3cf8:	4a16      	ldr	r2, [pc, #88]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3cfa:	f023 0304 	bic.w	r3, r3, #4
    3cfe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	7c1b      	ldrb	r3, [r3, #16]
    3d06:	2b02      	cmp	r3, #2
    3d08:	d011      	beq.n	3d2e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3d0a:	2b02      	cmp	r3, #2
    3d0c:	dc14      	bgt.n	3d38 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d002      	beq.n	3d18 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3d12:	2b01      	cmp	r3, #1
    3d14:	d005      	beq.n	3d22 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3d16:	e00f      	b.n	3d38 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3d18:	4b0e      	ldr	r3, [pc, #56]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3d1a:	2201      	movs	r2, #1
    3d1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3d20:	e014      	b.n	3d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3d22:	4b0c      	ldr	r3, [pc, #48]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3d24:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3d28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3d2c:	e00e      	b.n	3d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3d2e:	4b09      	ldr	r3, [pc, #36]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3d30:	4a0b      	ldr	r2, [pc, #44]	; (3d60 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3d32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3d36:	e009      	b.n	3d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3d38:	4b06      	ldr	r3, [pc, #24]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3d3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3d3e:	4a05      	ldr	r2, [pc, #20]	; (3d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3d40:	f043 0301 	orr.w	r3, r3, #1
    3d44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3d48:	e000      	b.n	3d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3d4a:	bf00      	nop
}
    3d4c:	bf00      	nop
    3d4e:	b002      	add	sp, #8
    3d50:	4770      	bx	lr
    3d52:	bf00      	nop
    3d54:	40064000 	.word	0x40064000
    3d58:	003d08ff 	.word	0x003d08ff
    3d5c:	007a1200 	.word	0x007a1200
    3d60:	00030001 	.word	0x00030001

00003d64 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3d64:	b082      	sub	sp, #8
    3d66:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3d68:	4b05      	ldr	r3, [pc, #20]	; (3d80 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3d6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3d6e:	4a04      	ldr	r2, [pc, #16]	; (3d80 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3d70:	f023 0301 	bic.w	r3, r3, #1
    3d74:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3d78:	bf00      	nop
    3d7a:	b002      	add	sp, #8
    3d7c:	4770      	bx	lr
    3d7e:	bf00      	nop
    3d80:	40064000 	.word	0x40064000

00003d84 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3d84:	b082      	sub	sp, #8
    3d86:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3d88:	9b01      	ldr	r3, [sp, #4]
    3d8a:	891b      	ldrh	r3, [r3, #8]
    3d8c:	2b01      	cmp	r3, #1
    3d8e:	d107      	bne.n	3da0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3d90:	4b05      	ldr	r3, [pc, #20]	; (3da8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3d92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3d96:	4a04      	ldr	r2, [pc, #16]	; (3da8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3d98:	f043 0301 	orr.w	r3, r3, #1
    3d9c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3da0:	bf00      	nop
    3da2:	b002      	add	sp, #8
    3da4:	4770      	bx	lr
    3da6:	bf00      	nop
    3da8:	40064000 	.word	0x40064000

00003dac <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3dac:	b082      	sub	sp, #8
    3dae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3db0:	bf00      	nop
    3db2:	b002      	add	sp, #8
    3db4:	4770      	bx	lr

00003db6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3db6:	b082      	sub	sp, #8
    3db8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3dba:	2300      	movs	r3, #0
}
    3dbc:	4618      	mov	r0, r3
    3dbe:	b002      	add	sp, #8
    3dc0:	4770      	bx	lr

00003dc2 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3dc2:	b082      	sub	sp, #8
    3dc4:	9001      	str	r0, [sp, #4]
    3dc6:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3dc8:	bf00      	nop
    3dca:	b002      	add	sp, #8
    3dcc:	4770      	bx	lr
	...

00003dd0 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3dd0:	b082      	sub	sp, #8
    3dd2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3dd4:	bf00      	nop
    3dd6:	b002      	add	sp, #8
    3dd8:	4770      	bx	lr

00003dda <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3dda:	b082      	sub	sp, #8
    3ddc:	9001      	str	r0, [sp, #4]
    3dde:	460b      	mov	r3, r1
    3de0:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3de4:	bf00      	nop
    3de6:	b002      	add	sp, #8
    3de8:	4770      	bx	lr

00003dea <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3dea:	b500      	push	{lr}
    3dec:	b083      	sub	sp, #12
    3dee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3df0:	9b01      	ldr	r3, [sp, #4]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d002      	beq.n	3dfc <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3df6:	9801      	ldr	r0, [sp, #4]
    3df8:	f000 f8e7 	bl	3fca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dfc:	bf00      	nop
    3dfe:	b003      	add	sp, #12
    3e00:	f85d fb04 	ldr.w	pc, [sp], #4

00003e04 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3e04:	b500      	push	{lr}
    3e06:	b085      	sub	sp, #20
    3e08:	9001      	str	r0, [sp, #4]
    3e0a:	460b      	mov	r3, r1
    3e0c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3e10:	9b01      	ldr	r3, [sp, #4]
    3e12:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3e14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d003      	beq.n	3e24 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3e1c:	2300      	movs	r3, #0
    3e1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3e22:	e002      	b.n	3e2a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3e24:	2301      	movs	r3, #1
    3e26:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3e2a:	ab02      	add	r3, sp, #8
    3e2c:	4618      	mov	r0, r3
    3e2e:	f7ff ffdc 	bl	3dea <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3e32:	bf00      	nop
    3e34:	b005      	add	sp, #20
    3e36:	f85d fb04 	ldr.w	pc, [sp], #4

00003e3a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3e3a:	b500      	push	{lr}
    3e3c:	b083      	sub	sp, #12
    3e3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e40:	9b01      	ldr	r3, [sp, #4]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d002      	beq.n	3e4c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3e46:	9801      	ldr	r0, [sp, #4]
    3e48:	f000 f8d6 	bl	3ff8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e4c:	bf00      	nop
    3e4e:	b003      	add	sp, #12
    3e50:	f85d fb04 	ldr.w	pc, [sp], #4

00003e54 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3e54:	b500      	push	{lr}
    3e56:	b085      	sub	sp, #20
    3e58:	9001      	str	r0, [sp, #4]
    3e5a:	460b      	mov	r3, r1
    3e5c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3e60:	9b01      	ldr	r3, [sp, #4]
    3e62:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3e64:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d003      	beq.n	3e74 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3e6c:	2300      	movs	r3, #0
    3e6e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3e72:	e002      	b.n	3e7a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3e74:	2301      	movs	r3, #1
    3e76:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3e7a:	ab02      	add	r3, sp, #8
    3e7c:	4618      	mov	r0, r3
    3e7e:	f7ff ffdc 	bl	3e3a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3e82:	bf00      	nop
    3e84:	b005      	add	sp, #20
    3e86:	f85d fb04 	ldr.w	pc, [sp], #4

00003e8a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3e8a:	b500      	push	{lr}
    3e8c:	b083      	sub	sp, #12
    3e8e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e90:	9b01      	ldr	r3, [sp, #4]
    3e92:	2b00      	cmp	r3, #0
    3e94:	d002      	beq.n	3e9c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3e96:	9801      	ldr	r0, [sp, #4]
    3e98:	f000 f8c6 	bl	4028 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e9c:	bf00      	nop
    3e9e:	b003      	add	sp, #12
    3ea0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ea4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3ea4:	b500      	push	{lr}
    3ea6:	b085      	sub	sp, #20
    3ea8:	9001      	str	r0, [sp, #4]
    3eaa:	460b      	mov	r3, r1
    3eac:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3eb0:	9b01      	ldr	r3, [sp, #4]
    3eb2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3eb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d003      	beq.n	3ec4 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3ebc:	2300      	movs	r3, #0
    3ebe:	f8ad 300c 	strh.w	r3, [sp, #12]
    3ec2:	e002      	b.n	3eca <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3ec4:	2301      	movs	r3, #1
    3ec6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3eca:	ab02      	add	r3, sp, #8
    3ecc:	4618      	mov	r0, r3
    3ece:	f7ff ffdc 	bl	3e8a <Clock_Ip_ClockSetSimClkoutEnable>
}
    3ed2:	bf00      	nop
    3ed4:	b005      	add	sp, #20
    3ed6:	f85d fb04 	ldr.w	pc, [sp], #4

00003eda <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3eda:	b500      	push	{lr}
    3edc:	b083      	sub	sp, #12
    3ede:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ee0:	9b01      	ldr	r3, [sp, #4]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d002      	beq.n	3eec <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3ee6:	9801      	ldr	r0, [sp, #4]
    3ee8:	f000 f8b6 	bl	4058 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3eec:	bf00      	nop
    3eee:	b003      	add	sp, #12
    3ef0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ef4 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3ef4:	b500      	push	{lr}
    3ef6:	b085      	sub	sp, #20
    3ef8:	9001      	str	r0, [sp, #4]
    3efa:	460b      	mov	r3, r1
    3efc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3f00:	9b01      	ldr	r3, [sp, #4]
    3f02:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3f04:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d003      	beq.n	3f14 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3f0c:	2300      	movs	r3, #0
    3f0e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3f12:	e002      	b.n	3f1a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3f14:	2301      	movs	r3, #1
    3f16:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3f1a:	ab02      	add	r3, sp, #8
    3f1c:	4618      	mov	r0, r3
    3f1e:	f7ff ffdc 	bl	3eda <Clock_Ip_ClockSetPccCgcEnable>
}
    3f22:	bf00      	nop
    3f24:	b005      	add	sp, #20
    3f26:	f85d fb04 	ldr.w	pc, [sp], #4

00003f2a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3f2a:	b500      	push	{lr}
    3f2c:	b083      	sub	sp, #12
    3f2e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f30:	9b01      	ldr	r3, [sp, #4]
    3f32:	2b00      	cmp	r3, #0
    3f34:	d002      	beq.n	3f3c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3f36:	9801      	ldr	r0, [sp, #4]
    3f38:	f000 f8bc 	bl	40b4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f3c:	bf00      	nop
    3f3e:	b003      	add	sp, #12
    3f40:	f85d fb04 	ldr.w	pc, [sp], #4

00003f44 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3f44:	b500      	push	{lr}
    3f46:	b085      	sub	sp, #20
    3f48:	9001      	str	r0, [sp, #4]
    3f4a:	460b      	mov	r3, r1
    3f4c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3f50:	9b01      	ldr	r3, [sp, #4]
    3f52:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3f54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d003      	beq.n	3f64 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3f5c:	2300      	movs	r3, #0
    3f5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3f62:	e002      	b.n	3f6a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3f64:	2301      	movs	r3, #1
    3f66:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3f6a:	ab02      	add	r3, sp, #8
    3f6c:	4618      	mov	r0, r3
    3f6e:	f7ff ffdc 	bl	3f2a <Clock_Ip_ClockSetSimGate>
}
    3f72:	bf00      	nop
    3f74:	b005      	add	sp, #20
    3f76:	f85d fb04 	ldr.w	pc, [sp], #4

00003f7a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3f7a:	b500      	push	{lr}
    3f7c:	b083      	sub	sp, #12
    3f7e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f80:	9b01      	ldr	r3, [sp, #4]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d002      	beq.n	3f8c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3f86:	9801      	ldr	r0, [sp, #4]
    3f88:	f000 f8c0 	bl	410c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f8c:	bf00      	nop
    3f8e:	b003      	add	sp, #12
    3f90:	f85d fb04 	ldr.w	pc, [sp], #4

00003f94 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3f94:	b500      	push	{lr}
    3f96:	b085      	sub	sp, #20
    3f98:	9001      	str	r0, [sp, #4]
    3f9a:	460b      	mov	r3, r1
    3f9c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3fa0:	9b01      	ldr	r3, [sp, #4]
    3fa2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3fa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d003      	beq.n	3fb4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3fac:	2300      	movs	r3, #0
    3fae:	f8ad 300c 	strh.w	r3, [sp, #12]
    3fb2:	e002      	b.n	3fba <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3fb4:	2301      	movs	r3, #1
    3fb6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3fba:	ab02      	add	r3, sp, #8
    3fbc:	4618      	mov	r0, r3
    3fbe:	f7ff ffdc 	bl	3f7a <Clock_Ip_ClockSetSimTraceEnable>
}
    3fc2:	bf00      	nop
    3fc4:	b005      	add	sp, #20
    3fc6:	f85d fb04 	ldr.w	pc, [sp], #4

00003fca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3fca:	b084      	sub	sp, #16
    3fcc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3fce:	4b09      	ldr	r3, [pc, #36]	; (3ff4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3fd0:	691b      	ldr	r3, [r3, #16]
    3fd2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3fd4:	9b03      	ldr	r3, [sp, #12]
    3fd6:	f023 0301 	bic.w	r3, r3, #1
    3fda:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3fdc:	9b01      	ldr	r3, [sp, #4]
    3fde:	889b      	ldrh	r3, [r3, #4]
    3fe0:	461a      	mov	r2, r3
    3fe2:	9b03      	ldr	r3, [sp, #12]
    3fe4:	4313      	orrs	r3, r2
    3fe6:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3fe8:	4a02      	ldr	r2, [pc, #8]	; (3ff4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3fea:	9b03      	ldr	r3, [sp, #12]
    3fec:	6113      	str	r3, [r2, #16]
}
    3fee:	bf00      	nop
    3ff0:	b004      	add	sp, #16
    3ff2:	4770      	bx	lr
    3ff4:	40048000 	.word	0x40048000

00003ff8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3ff8:	b084      	sub	sp, #16
    3ffa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3ffc:	4b09      	ldr	r3, [pc, #36]	; (4024 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3ffe:	691b      	ldr	r3, [r3, #16]
    4000:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    4002:	9b03      	ldr	r3, [sp, #12]
    4004:	f023 0302 	bic.w	r3, r3, #2
    4008:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    400a:	9b01      	ldr	r3, [sp, #4]
    400c:	889b      	ldrh	r3, [r3, #4]
    400e:	005b      	lsls	r3, r3, #1
    4010:	9a03      	ldr	r2, [sp, #12]
    4012:	4313      	orrs	r3, r2
    4014:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4016:	4a03      	ldr	r2, [pc, #12]	; (4024 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4018:	9b03      	ldr	r3, [sp, #12]
    401a:	6113      	str	r3, [r2, #16]
}
    401c:	bf00      	nop
    401e:	b004      	add	sp, #16
    4020:	4770      	bx	lr
    4022:	bf00      	nop
    4024:	40048000 	.word	0x40048000

00004028 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4028:	b084      	sub	sp, #16
    402a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    402c:	4b09      	ldr	r3, [pc, #36]	; (4054 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    402e:	685b      	ldr	r3, [r3, #4]
    4030:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    4032:	9b03      	ldr	r3, [sp, #12]
    4034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4038:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    403a:	9b01      	ldr	r3, [sp, #4]
    403c:	889b      	ldrh	r3, [r3, #4]
    403e:	02db      	lsls	r3, r3, #11
    4040:	9a03      	ldr	r2, [sp, #12]
    4042:	4313      	orrs	r3, r2
    4044:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4046:	4a03      	ldr	r2, [pc, #12]	; (4054 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    4048:	9b03      	ldr	r3, [sp, #12]
    404a:	6053      	str	r3, [r2, #4]
}
    404c:	bf00      	nop
    404e:	b004      	add	sp, #16
    4050:	4770      	bx	lr
    4052:	bf00      	nop
    4054:	40048000 	.word	0x40048000

00004058 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4058:	b084      	sub	sp, #16
    405a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    405c:	4913      	ldr	r1, [pc, #76]	; (40ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    405e:	9b01      	ldr	r3, [sp, #4]
    4060:	681a      	ldr	r2, [r3, #0]
    4062:	4813      	ldr	r0, [pc, #76]	; (40b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    4064:	4613      	mov	r3, r2
    4066:	00db      	lsls	r3, r3, #3
    4068:	4413      	add	r3, r2
    406a:	4403      	add	r3, r0
    406c:	3306      	adds	r3, #6
    406e:	781b      	ldrb	r3, [r3, #0]
    4070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4074:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    4076:	9b03      	ldr	r3, [sp, #12]
    4078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    407c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    407e:	9b01      	ldr	r3, [sp, #4]
    4080:	889b      	ldrh	r3, [r3, #4]
    4082:	079b      	lsls	r3, r3, #30
    4084:	9a03      	ldr	r2, [sp, #12]
    4086:	4313      	orrs	r3, r2
    4088:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    408a:	4908      	ldr	r1, [pc, #32]	; (40ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    408c:	9b01      	ldr	r3, [sp, #4]
    408e:	681a      	ldr	r2, [r3, #0]
    4090:	4807      	ldr	r0, [pc, #28]	; (40b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    4092:	4613      	mov	r3, r2
    4094:	00db      	lsls	r3, r3, #3
    4096:	4413      	add	r3, r2
    4098:	4403      	add	r3, r0
    409a:	3306      	adds	r3, #6
    409c:	781b      	ldrb	r3, [r3, #0]
    409e:	461a      	mov	r2, r3
    40a0:	9b03      	ldr	r3, [sp, #12]
    40a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    40a6:	bf00      	nop
    40a8:	b004      	add	sp, #16
    40aa:	4770      	bx	lr
    40ac:	40065000 	.word	0x40065000
    40b0:	00015d60 	.word	0x00015d60

000040b4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    40b4:	b086      	sub	sp, #24
    40b6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    40b8:	9b01      	ldr	r3, [sp, #4]
    40ba:	889b      	ldrh	r3, [r3, #4]
    40bc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    40be:	9b01      	ldr	r3, [sp, #4]
    40c0:	681a      	ldr	r2, [r3, #0]
    40c2:	4910      	ldr	r1, [pc, #64]	; (4104 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    40c4:	4613      	mov	r3, r2
    40c6:	00db      	lsls	r3, r3, #3
    40c8:	4413      	add	r3, r2
    40ca:	440b      	add	r3, r1
    40cc:	3306      	adds	r3, #6
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    40d2:	4b0d      	ldr	r3, [pc, #52]	; (4108 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    40d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40d6:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    40d8:	2201      	movs	r2, #1
    40da:	9b04      	ldr	r3, [sp, #16]
    40dc:	fa02 f303 	lsl.w	r3, r2, r3
    40e0:	43db      	mvns	r3, r3
    40e2:	9a03      	ldr	r2, [sp, #12]
    40e4:	4013      	ands	r3, r2
    40e6:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    40e8:	9a05      	ldr	r2, [sp, #20]
    40ea:	9b04      	ldr	r3, [sp, #16]
    40ec:	fa02 f303 	lsl.w	r3, r2, r3
    40f0:	9a03      	ldr	r2, [sp, #12]
    40f2:	4313      	orrs	r3, r2
    40f4:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    40f6:	4a04      	ldr	r2, [pc, #16]	; (4108 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    40f8:	9b03      	ldr	r3, [sp, #12]
    40fa:	6413      	str	r3, [r2, #64]	; 0x40
}
    40fc:	bf00      	nop
    40fe:	b006      	add	sp, #24
    4100:	4770      	bx	lr
    4102:	bf00      	nop
    4104:	00015d60 	.word	0x00015d60
    4108:	40048000 	.word	0x40048000

0000410c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    410c:	b084      	sub	sp, #16
    410e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    4110:	4b0a      	ldr	r3, [pc, #40]	; (413c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4114:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    4116:	9b01      	ldr	r3, [sp, #4]
    4118:	889b      	ldrh	r3, [r3, #4]
    411a:	2b01      	cmp	r3, #1
    411c:	d104      	bne.n	4128 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    411e:	9b03      	ldr	r3, [sp, #12]
    4120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4124:	9303      	str	r3, [sp, #12]
    4126:	e003      	b.n	4130 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    4128:	9b03      	ldr	r3, [sp, #12]
    412a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    412e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    4130:	4a02      	ldr	r2, [pc, #8]	; (413c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4132:	9b03      	ldr	r3, [sp, #12]
    4134:	6693      	str	r3, [r2, #104]	; 0x68
}
    4136:	bf00      	nop
    4138:	b004      	add	sp, #16
    413a:	4770      	bx	lr
    413c:	40048000 	.word	0x40048000

00004140 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    4140:	b082      	sub	sp, #8
    4142:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4144:	bf00      	nop
    4146:	b002      	add	sp, #8
    4148:	4770      	bx	lr

0000414a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    414a:	b082      	sub	sp, #8
    414c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    414e:	bf00      	nop
    4150:	b002      	add	sp, #8
    4152:	4770      	bx	lr

00004154 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4154:	b500      	push	{lr}
    4156:	b083      	sub	sp, #12
    4158:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    415a:	9b01      	ldr	r3, [sp, #4]
    415c:	2b00      	cmp	r3, #0
    415e:	d002      	beq.n	4166 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    4160:	9801      	ldr	r0, [sp, #4]
    4162:	f000 f8d1 	bl	4308 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4166:	bf00      	nop
    4168:	b003      	add	sp, #12
    416a:	f85d fb04 	ldr.w	pc, [sp], #4

0000416e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    416e:	b500      	push	{lr}
    4170:	b083      	sub	sp, #12
    4172:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4174:	9b01      	ldr	r3, [sp, #4]
    4176:	2b00      	cmp	r3, #0
    4178:	d002      	beq.n	4180 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    417a:	9801      	ldr	r0, [sp, #4]
    417c:	f000 f950 	bl	4420 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4180:	bf00      	nop
    4182:	b003      	add	sp, #12
    4184:	f85d fb04 	ldr.w	pc, [sp], #4

00004188 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    4188:	b500      	push	{lr}
    418a:	b083      	sub	sp, #12
    418c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    418e:	9801      	ldr	r0, [sp, #4]
    4190:	f000 f98e 	bl	44b0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4194:	bf00      	nop
    4196:	b003      	add	sp, #12
    4198:	f85d fb04 	ldr.w	pc, [sp], #4

0000419c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    419c:	b500      	push	{lr}
    419e:	b083      	sub	sp, #12
    41a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a2:	9b01      	ldr	r3, [sp, #4]
    41a4:	2b00      	cmp	r3, #0
    41a6:	d002      	beq.n	41ae <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    41a8:	9801      	ldr	r0, [sp, #4]
    41aa:	f000 f999 	bl	44e0 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ae:	bf00      	nop
    41b0:	b003      	add	sp, #12
    41b2:	f85d fb04 	ldr.w	pc, [sp], #4

000041b6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    41b6:	b500      	push	{lr}
    41b8:	b083      	sub	sp, #12
    41ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41bc:	9b01      	ldr	r3, [sp, #4]
    41be:	2b00      	cmp	r3, #0
    41c0:	d002      	beq.n	41c8 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    41c2:	9801      	ldr	r0, [sp, #4]
    41c4:	f000 f9b0 	bl	4528 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41c8:	bf00      	nop
    41ca:	b003      	add	sp, #12
    41cc:	f85d fb04 	ldr.w	pc, [sp], #4

000041d0 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    41d0:	b500      	push	{lr}
    41d2:	b083      	sub	sp, #12
    41d4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    41d6:	9801      	ldr	r0, [sp, #4]
    41d8:	f000 f9ba 	bl	4550 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    41dc:	bf00      	nop
    41de:	b003      	add	sp, #12
    41e0:	f85d fb04 	ldr.w	pc, [sp], #4

000041e4 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    41e4:	b500      	push	{lr}
    41e6:	b083      	sub	sp, #12
    41e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ea:	9b01      	ldr	r3, [sp, #4]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d002      	beq.n	41f6 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    41f0:	9801      	ldr	r0, [sp, #4]
    41f2:	f000 f9bd 	bl	4570 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f6:	bf00      	nop
    41f8:	b003      	add	sp, #12
    41fa:	f85d fb04 	ldr.w	pc, [sp], #4

000041fe <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    41fe:	b500      	push	{lr}
    4200:	b083      	sub	sp, #12
    4202:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4204:	9b01      	ldr	r3, [sp, #4]
    4206:	2b00      	cmp	r3, #0
    4208:	d002      	beq.n	4210 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    420a:	9801      	ldr	r0, [sp, #4]
    420c:	f000 f9d4 	bl	45b8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4210:	bf00      	nop
    4212:	b003      	add	sp, #12
    4214:	f85d fb04 	ldr.w	pc, [sp], #4

00004218 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    4218:	b500      	push	{lr}
    421a:	b083      	sub	sp, #12
    421c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    421e:	9801      	ldr	r0, [sp, #4]
    4220:	f000 f9de 	bl	45e0 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4224:	bf00      	nop
    4226:	b003      	add	sp, #12
    4228:	f85d fb04 	ldr.w	pc, [sp], #4

0000422c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    422c:	b500      	push	{lr}
    422e:	b089      	sub	sp, #36	; 0x24
    4230:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    4232:	2300      	movs	r3, #0
    4234:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    4238:	4b20      	ldr	r3, [pc, #128]	; (42bc <SetInputSouceSytemClock+0x90>)
    423a:	695b      	ldr	r3, [r3, #20]
    423c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    423e:	9b06      	ldr	r3, [sp, #24]
    4240:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4244:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    4246:	9b01      	ldr	r3, [sp, #4]
    4248:	061b      	lsls	r3, r3, #24
    424a:	9a06      	ldr	r2, [sp, #24]
    424c:	4313      	orrs	r3, r2
    424e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    4250:	4a1a      	ldr	r2, [pc, #104]	; (42bc <SetInputSouceSytemClock+0x90>)
    4252:	9b06      	ldr	r3, [sp, #24]
    4254:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4256:	aa02      	add	r2, sp, #8
    4258:	a903      	add	r1, sp, #12
    425a:	a804      	add	r0, sp, #16
    425c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4260:	f7ff f9ac 	bl	35bc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    4264:	4b15      	ldr	r3, [pc, #84]	; (42bc <SetInputSouceSytemClock+0x90>)
    4266:	691b      	ldr	r3, [r3, #16]
    4268:	0e1b      	lsrs	r3, r3, #24
    426a:	f003 030f 	and.w	r3, r3, #15
    426e:	9a01      	ldr	r2, [sp, #4]
    4270:	429a      	cmp	r2, r3
    4272:	bf0c      	ite	eq
    4274:	2301      	moveq	r3, #1
    4276:	2300      	movne	r3, #0
    4278:	b2db      	uxtb	r3, r3
    427a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    427c:	9a02      	ldr	r2, [sp, #8]
    427e:	a903      	add	r1, sp, #12
    4280:	ab04      	add	r3, sp, #16
    4282:	4618      	mov	r0, r3
    4284:	f7ff f9b4 	bl	35f0 <Clock_Ip_TimeoutExpired>
    4288:	4603      	mov	r3, r0
    428a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    428e:	9b05      	ldr	r3, [sp, #20]
    4290:	2b00      	cmp	r3, #0
    4292:	d106      	bne.n	42a2 <SetInputSouceSytemClock+0x76>
    4294:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4298:	f083 0301 	eor.w	r3, r3, #1
    429c:	b2db      	uxtb	r3, r3
    429e:	2b00      	cmp	r3, #0
    42a0:	d1e0      	bne.n	4264 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    42a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    42a6:	2b00      	cmp	r3, #0
    42a8:	d003      	beq.n	42b2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    42aa:	2105      	movs	r1, #5
    42ac:	2001      	movs	r0, #1
    42ae:	f7ff f975 	bl	359c <Clock_Ip_ReportClockErrors>
    }
}
    42b2:	bf00      	nop
    42b4:	b009      	add	sp, #36	; 0x24
    42b6:	f85d fb04 	ldr.w	pc, [sp], #4
    42ba:	bf00      	nop
    42bc:	40064000 	.word	0x40064000

000042c0 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    42c0:	b500      	push	{lr}
    42c2:	b083      	sub	sp, #12
    42c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42c6:	9b01      	ldr	r3, [sp, #4]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d002      	beq.n	42d2 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    42cc:	9801      	ldr	r0, [sp, #4]
    42ce:	f000 f997 	bl	4600 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42d2:	bf00      	nop
    42d4:	b003      	add	sp, #12
    42d6:	f85d fb04 	ldr.w	pc, [sp], #4

000042da <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    42da:	b500      	push	{lr}
    42dc:	b083      	sub	sp, #12
    42de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42e0:	9b01      	ldr	r3, [sp, #4]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d002      	beq.n	42ec <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    42e6:	9801      	ldr	r0, [sp, #4]
    42e8:	f000 fa7e 	bl	47e8 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42ec:	bf00      	nop
    42ee:	b003      	add	sp, #12
    42f0:	f85d fb04 	ldr.w	pc, [sp], #4

000042f4 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    42f4:	b500      	push	{lr}
    42f6:	b083      	sub	sp, #12
    42f8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    42fa:	9801      	ldr	r0, [sp, #4]
    42fc:	f000 fab8 	bl	4870 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4300:	bf00      	nop
    4302:	b003      	add	sp, #12
    4304:	f85d fb04 	ldr.w	pc, [sp], #4

00004308 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4308:	b500      	push	{lr}
    430a:	b08b      	sub	sp, #44	; 0x2c
    430c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    430e:	2300      	movs	r3, #0
    4310:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    4314:	9b01      	ldr	r3, [sp, #4]
    4316:	2b00      	cmp	r3, #0
    4318:	d10b      	bne.n	4332 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    431a:	2305      	movs	r3, #5
    431c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    431e:	2301      	movs	r3, #1
    4320:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    4324:	2301      	movs	r3, #1
    4326:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    432a:	2301      	movs	r3, #1
    432c:	f88d 3010 	strb.w	r3, [sp, #16]
    4330:	e00e      	b.n	4350 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    4332:	9b01      	ldr	r3, [sp, #4]
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    4338:	9b01      	ldr	r3, [sp, #4]
    433a:	79db      	ldrb	r3, [r3, #7]
    433c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    4340:	9b01      	ldr	r3, [sp, #4]
    4342:	889b      	ldrh	r3, [r3, #4]
    4344:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    4348:	9b01      	ldr	r3, [sp, #4]
    434a:	7a1b      	ldrb	r3, [r3, #8]
    434c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4350:	4b32      	ldr	r3, [pc, #200]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4356:	4a31      	ldr	r2, [pc, #196]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4358:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    435c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    4360:	4b2e      	ldr	r3, [pc, #184]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4366:	4a2d      	ldr	r2, [pc, #180]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4368:	f023 0301 	bic.w	r3, r3, #1
    436c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4370:	4b2a      	ldr	r3, [pc, #168]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4376:	4a29      	ldr	r2, [pc, #164]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4378:	f023 0304 	bic.w	r3, r3, #4
    437c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    4380:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    4384:	2b01      	cmp	r3, #1
    4386:	d144      	bne.n	4412 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    4388:	f89d 300f 	ldrb.w	r3, [sp, #15]
    438c:	4a23      	ldr	r2, [pc, #140]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    438e:	f003 0301 	and.w	r3, r3, #1
    4392:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4396:	4b21      	ldr	r3, [pc, #132]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    439c:	4a1f      	ldr	r2, [pc, #124]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    439e:	f043 0301 	orr.w	r3, r3, #1
    43a2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    43a6:	4b1d      	ldr	r3, [pc, #116]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    43a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    43ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
    43b0:	009b      	lsls	r3, r3, #2
    43b2:	f003 0304 	and.w	r3, r3, #4
    43b6:	4919      	ldr	r1, [pc, #100]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    43b8:	4313      	orrs	r3, r2
    43ba:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    43be:	aa05      	add	r2, sp, #20
    43c0:	a906      	add	r1, sp, #24
    43c2:	a807      	add	r0, sp, #28
    43c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    43c8:	f7ff f8f8 	bl	35bc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    43cc:	4b13      	ldr	r3, [pc, #76]	; (441c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    43ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    43d2:	0e1b      	lsrs	r3, r3, #24
    43d4:	f003 0301 	and.w	r3, r3, #1
    43d8:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    43da:	9a05      	ldr	r2, [sp, #20]
    43dc:	a906      	add	r1, sp, #24
    43de:	ab07      	add	r3, sp, #28
    43e0:	4618      	mov	r0, r3
    43e2:	f7ff f905 	bl	35f0 <Clock_Ip_TimeoutExpired>
    43e6:	4603      	mov	r3, r0
    43e8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    43ec:	9b08      	ldr	r3, [sp, #32]
    43ee:	2b00      	cmp	r3, #0
    43f0:	d106      	bne.n	4400 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    43f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    43f6:	f083 0301 	eor.w	r3, r3, #1
    43fa:	b2db      	uxtb	r3, r3
    43fc:	2b00      	cmp	r3, #0
    43fe:	d1e5      	bne.n	43cc <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4400:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4404:	2b00      	cmp	r3, #0
    4406:	d004      	beq.n	4412 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4408:	9b02      	ldr	r3, [sp, #8]
    440a:	4619      	mov	r1, r3
    440c:	2001      	movs	r0, #1
    440e:	f7ff f8c5 	bl	359c <Clock_Ip_ReportClockErrors>
        }
    }
}
    4412:	bf00      	nop
    4414:	b00b      	add	sp, #44	; 0x2c
    4416:	f85d fb04 	ldr.w	pc, [sp], #4
    441a:	bf00      	nop
    441c:	40064000 	.word	0x40064000

00004420 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4420:	b500      	push	{lr}
    4422:	b089      	sub	sp, #36	; 0x24
    4424:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4426:	2300      	movs	r3, #0
    4428:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    442c:	4b1f      	ldr	r3, [pc, #124]	; (44ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    442e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4432:	4a1e      	ldr	r2, [pc, #120]	; (44ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4434:	f043 0301 	orr.w	r3, r3, #1
    4438:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    443c:	4b1b      	ldr	r3, [pc, #108]	; (44ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    443e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4442:	4a1a      	ldr	r2, [pc, #104]	; (44ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4444:	f043 0304 	orr.w	r3, r3, #4
    4448:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    444c:	aa03      	add	r2, sp, #12
    444e:	a904      	add	r1, sp, #16
    4450:	a805      	add	r0, sp, #20
    4452:	f24c 3350 	movw	r3, #50000	; 0xc350
    4456:	f7ff f8b1 	bl	35bc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    445a:	4b14      	ldr	r3, [pc, #80]	; (44ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    445c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4460:	0e1b      	lsrs	r3, r3, #24
    4462:	f003 0301 	and.w	r3, r3, #1
    4466:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4468:	9a03      	ldr	r2, [sp, #12]
    446a:	a904      	add	r1, sp, #16
    446c:	ab05      	add	r3, sp, #20
    446e:	4618      	mov	r0, r3
    4470:	f7ff f8be 	bl	35f0 <Clock_Ip_TimeoutExpired>
    4474:	4603      	mov	r3, r0
    4476:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    447a:	9b06      	ldr	r3, [sp, #24]
    447c:	2b00      	cmp	r3, #0
    447e:	d106      	bne.n	448e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    4480:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4484:	f083 0301 	eor.w	r3, r3, #1
    4488:	b2db      	uxtb	r3, r3
    448a:	2b00      	cmp	r3, #0
    448c:	d1e5      	bne.n	445a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    448e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4492:	2b00      	cmp	r3, #0
    4494:	d005      	beq.n	44a2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4496:	9b01      	ldr	r3, [sp, #4]
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	4619      	mov	r1, r3
    449c:	2001      	movs	r0, #1
    449e:	f7ff f87d 	bl	359c <Clock_Ip_ReportClockErrors>
    }
}
    44a2:	bf00      	nop
    44a4:	b009      	add	sp, #36	; 0x24
    44a6:	f85d fb04 	ldr.w	pc, [sp], #4
    44aa:	bf00      	nop
    44ac:	40064000 	.word	0x40064000

000044b0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    44b0:	b082      	sub	sp, #8
    44b2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    44b4:	4b09      	ldr	r3, [pc, #36]	; (44dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    44b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    44ba:	4a08      	ldr	r2, [pc, #32]	; (44dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    44bc:	f023 0301 	bic.w	r3, r3, #1
    44c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    44c4:	4b05      	ldr	r3, [pc, #20]	; (44dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    44c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    44ca:	4a04      	ldr	r2, [pc, #16]	; (44dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    44cc:	f023 0304 	bic.w	r3, r3, #4
    44d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    44d4:	bf00      	nop
    44d6:	b002      	add	sp, #8
    44d8:	4770      	bx	lr
    44da:	bf00      	nop
    44dc:	40064000 	.word	0x40064000

000044e0 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    44e0:	b082      	sub	sp, #8
    44e2:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    44e4:	4b0f      	ldr	r3, [pc, #60]	; (4524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    44e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    44ea:	4a0e      	ldr	r2, [pc, #56]	; (4524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    44ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    44f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    44f4:	4b0b      	ldr	r3, [pc, #44]	; (4524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    44f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    44fa:	4a0a      	ldr	r2, [pc, #40]	; (4524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    44fc:	f023 0304 	bic.w	r3, r3, #4
    4500:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4504:	4b07      	ldr	r3, [pc, #28]	; (4524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4506:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    450a:	9b01      	ldr	r3, [sp, #4]
    450c:	7a1b      	ldrb	r3, [r3, #8]
    450e:	009b      	lsls	r3, r3, #2
    4510:	f003 0304 	and.w	r3, r3, #4
    4514:	4903      	ldr	r1, [pc, #12]	; (4524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4516:	4313      	orrs	r3, r2
    4518:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    451c:	bf00      	nop
    451e:	b002      	add	sp, #8
    4520:	4770      	bx	lr
    4522:	bf00      	nop
    4524:	40064000 	.word	0x40064000

00004528 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4528:	b082      	sub	sp, #8
    452a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    452c:	9b01      	ldr	r3, [sp, #4]
    452e:	889b      	ldrh	r3, [r3, #4]
    4530:	2b01      	cmp	r3, #1
    4532:	d107      	bne.n	4544 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    4534:	4b05      	ldr	r3, [pc, #20]	; (454c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4536:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    453a:	4a04      	ldr	r2, [pc, #16]	; (454c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    453c:	f043 0304 	orr.w	r3, r3, #4
    4540:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4544:	bf00      	nop
    4546:	b002      	add	sp, #8
    4548:	4770      	bx	lr
    454a:	bf00      	nop
    454c:	40064000 	.word	0x40064000

00004550 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    4550:	b082      	sub	sp, #8
    4552:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4554:	4b05      	ldr	r3, [pc, #20]	; (456c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    455a:	4a04      	ldr	r2, [pc, #16]	; (456c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    455c:	f023 0304 	bic.w	r3, r3, #4
    4560:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4564:	bf00      	nop
    4566:	b002      	add	sp, #8
    4568:	4770      	bx	lr
    456a:	bf00      	nop
    456c:	40064000 	.word	0x40064000

00004570 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4570:	b082      	sub	sp, #8
    4572:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4574:	4b0f      	ldr	r3, [pc, #60]	; (45b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    457a:	4a0e      	ldr	r2, [pc, #56]	; (45b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    457c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4580:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4584:	4b0b      	ldr	r3, [pc, #44]	; (45b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    458a:	4a0a      	ldr	r2, [pc, #40]	; (45b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    458c:	f023 0302 	bic.w	r3, r3, #2
    4590:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    4594:	4b07      	ldr	r3, [pc, #28]	; (45b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4596:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    459a:	9b01      	ldr	r3, [sp, #4]
    459c:	7a5b      	ldrb	r3, [r3, #9]
    459e:	005b      	lsls	r3, r3, #1
    45a0:	f003 0302 	and.w	r3, r3, #2
    45a4:	4903      	ldr	r1, [pc, #12]	; (45b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    45a6:	4313      	orrs	r3, r2
    45a8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    45ac:	bf00      	nop
    45ae:	b002      	add	sp, #8
    45b0:	4770      	bx	lr
    45b2:	bf00      	nop
    45b4:	40064000 	.word	0x40064000

000045b8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    45b8:	b082      	sub	sp, #8
    45ba:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    45bc:	9b01      	ldr	r3, [sp, #4]
    45be:	889b      	ldrh	r3, [r3, #4]
    45c0:	2b01      	cmp	r3, #1
    45c2:	d107      	bne.n	45d4 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    45c4:	4b05      	ldr	r3, [pc, #20]	; (45dc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    45c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45ca:	4a04      	ldr	r2, [pc, #16]	; (45dc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    45cc:	f043 0302 	orr.w	r3, r3, #2
    45d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    45d4:	bf00      	nop
    45d6:	b002      	add	sp, #8
    45d8:	4770      	bx	lr
    45da:	bf00      	nop
    45dc:	40064000 	.word	0x40064000

000045e0 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    45e0:	b082      	sub	sp, #8
    45e2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    45e4:	4b05      	ldr	r3, [pc, #20]	; (45fc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    45e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45ea:	4a04      	ldr	r2, [pc, #16]	; (45fc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    45ec:	f023 0302 	bic.w	r3, r3, #2
    45f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    45f4:	bf00      	nop
    45f6:	b002      	add	sp, #8
    45f8:	4770      	bx	lr
    45fa:	bf00      	nop
    45fc:	40064000 	.word	0x40064000

00004600 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4600:	b500      	push	{lr}
    4602:	b08b      	sub	sp, #44	; 0x2c
    4604:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4606:	9b01      	ldr	r3, [sp, #4]
    4608:	681a      	ldr	r2, [r3, #0]
    460a:	4975      	ldr	r1, [pc, #468]	; (47e0 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    460c:	4613      	mov	r3, r2
    460e:	00db      	lsls	r3, r3, #3
    4610:	4413      	add	r3, r2
    4612:	440b      	add	r3, r1
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4618:	2300      	movs	r3, #0
    461a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    461e:	2300      	movs	r3, #0
    4620:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4624:	4b6f      	ldr	r3, [pc, #444]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4626:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    462a:	4a6e      	ldr	r2, [pc, #440]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    462c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4630:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4634:	4b6b      	ldr	r3, [pc, #428]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    463e:	2b00      	cmp	r3, #0
    4640:	d07d      	beq.n	473e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4642:	9b01      	ldr	r3, [sp, #4]
    4644:	79db      	ldrb	r3, [r3, #7]
    4646:	461a      	mov	r2, r3
    4648:	4b66      	ldr	r3, [pc, #408]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    464a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    464e:	f003 0303 	and.w	r3, r3, #3
    4652:	429a      	cmp	r2, r3
    4654:	d10b      	bne.n	466e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4656:	9b01      	ldr	r3, [sp, #4]
    4658:	799b      	ldrb	r3, [r3, #6]
    465a:	461a      	mov	r2, r3
    465c:	4b61      	ldr	r3, [pc, #388]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    465e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4662:	08db      	lsrs	r3, r3, #3
    4664:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4668:	429a      	cmp	r2, r3
    466a:	f000 80b4 	beq.w	47d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    466e:	4b5d      	ldr	r3, [pc, #372]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4674:	f003 0301 	and.w	r3, r3, #1
    4678:	2b00      	cmp	r3, #0
    467a:	d105      	bne.n	4688 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    467c:	2301      	movs	r3, #1
    467e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    4682:	2000      	movs	r0, #0
    4684:	f7ff fd66 	bl	4154 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4688:	2002      	movs	r0, #2
    468a:	f7ff fdcf 	bl	422c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    468e:	4b55      	ldr	r3, [pc, #340]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4690:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4694:	4a53      	ldr	r2, [pc, #332]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4696:	f023 0301 	bic.w	r3, r3, #1
    469a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    469e:	9b01      	ldr	r3, [sp, #4]
    46a0:	889b      	ldrh	r3, [r3, #4]
    46a2:	2b01      	cmp	r3, #1
    46a4:	f040 8097 	bne.w	47d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    46a8:	9b01      	ldr	r3, [sp, #4]
    46aa:	79db      	ldrb	r3, [r3, #7]
    46ac:	4a4d      	ldr	r2, [pc, #308]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    46ae:	f003 0303 	and.w	r3, r3, #3
    46b2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    46b6:	4b4b      	ldr	r3, [pc, #300]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    46b8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    46bc:	9b01      	ldr	r3, [sp, #4]
    46be:	799b      	ldrb	r3, [r3, #6]
    46c0:	00db      	lsls	r3, r3, #3
    46c2:	f003 0308 	and.w	r3, r3, #8
    46c6:	4313      	orrs	r3, r2
    46c8:	4a46      	ldr	r2, [pc, #280]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    46ca:	f043 0301 	orr.w	r3, r3, #1
    46ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    46d2:	aa03      	add	r2, sp, #12
    46d4:	a904      	add	r1, sp, #16
    46d6:	a805      	add	r0, sp, #20
    46d8:	f24c 3350 	movw	r3, #50000	; 0xc350
    46dc:	f7fe ff6e 	bl	35bc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    46e0:	4b40      	ldr	r3, [pc, #256]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    46e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    46e6:	0e1b      	lsrs	r3, r3, #24
    46e8:	f003 0301 	and.w	r3, r3, #1
    46ec:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    46ee:	9a03      	ldr	r2, [sp, #12]
    46f0:	a904      	add	r1, sp, #16
    46f2:	ab05      	add	r3, sp, #20
    46f4:	4618      	mov	r0, r3
    46f6:	f7fe ff7b 	bl	35f0 <Clock_Ip_TimeoutExpired>
    46fa:	4603      	mov	r3, r0
    46fc:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4700:	9b06      	ldr	r3, [sp, #24]
    4702:	2b00      	cmp	r3, #0
    4704:	d106      	bne.n	4714 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4706:	f89d 301f 	ldrb.w	r3, [sp, #31]
    470a:	f083 0301 	eor.w	r3, r3, #1
    470e:	b2db      	uxtb	r3, r3
    4710:	2b00      	cmp	r3, #0
    4712:	d1e5      	bne.n	46e0 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4714:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4718:	2b00      	cmp	r3, #0
    471a:	d005      	beq.n	4728 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    471c:	9b01      	ldr	r3, [sp, #4]
    471e:	681b      	ldr	r3, [r3, #0]
    4720:	4619      	mov	r1, r3
    4722:	2001      	movs	r0, #1
    4724:	f7fe ff3a 	bl	359c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4728:	2003      	movs	r0, #3
    472a:	f7ff fd7f 	bl	422c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    472e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4732:	2b00      	cmp	r3, #0
    4734:	d04f      	beq.n	47d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4736:	2002      	movs	r0, #2
    4738:	f7ff fd26 	bl	4188 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    473c:	e04b      	b.n	47d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    473e:	4b29      	ldr	r3, [pc, #164]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4740:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4744:	4a27      	ldr	r2, [pc, #156]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4746:	f023 0301 	bic.w	r3, r3, #1
    474a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    474e:	9b01      	ldr	r3, [sp, #4]
    4750:	889b      	ldrh	r3, [r3, #4]
    4752:	2b01      	cmp	r3, #1
    4754:	d13f      	bne.n	47d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4756:	9b01      	ldr	r3, [sp, #4]
    4758:	79db      	ldrb	r3, [r3, #7]
    475a:	4a22      	ldr	r2, [pc, #136]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    475c:	f003 0303 	and.w	r3, r3, #3
    4760:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4764:	4b1f      	ldr	r3, [pc, #124]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4766:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    476a:	9b01      	ldr	r3, [sp, #4]
    476c:	799b      	ldrb	r3, [r3, #6]
    476e:	00db      	lsls	r3, r3, #3
    4770:	f003 0308 	and.w	r3, r3, #8
    4774:	4313      	orrs	r3, r2
    4776:	4a1b      	ldr	r2, [pc, #108]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4778:	f043 0301 	orr.w	r3, r3, #1
    477c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4780:	aa03      	add	r2, sp, #12
    4782:	a904      	add	r1, sp, #16
    4784:	a805      	add	r0, sp, #20
    4786:	f24c 3350 	movw	r3, #50000	; 0xc350
    478a:	f7fe ff17 	bl	35bc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    478e:	4b15      	ldr	r3, [pc, #84]	; (47e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4790:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4794:	0e1b      	lsrs	r3, r3, #24
    4796:	f003 0301 	and.w	r3, r3, #1
    479a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    479c:	9a03      	ldr	r2, [sp, #12]
    479e:	a904      	add	r1, sp, #16
    47a0:	ab05      	add	r3, sp, #20
    47a2:	4618      	mov	r0, r3
    47a4:	f7fe ff24 	bl	35f0 <Clock_Ip_TimeoutExpired>
    47a8:	4603      	mov	r3, r0
    47aa:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    47ae:	9b06      	ldr	r3, [sp, #24]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d106      	bne.n	47c2 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    47b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    47b8:	f083 0301 	eor.w	r3, r3, #1
    47bc:	b2db      	uxtb	r3, r3
    47be:	2b00      	cmp	r3, #0
    47c0:	d1e5      	bne.n	478e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    47c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d005      	beq.n	47d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    47ca:	9b01      	ldr	r3, [sp, #4]
    47cc:	681b      	ldr	r3, [r3, #0]
    47ce:	4619      	mov	r1, r3
    47d0:	2001      	movs	r0, #1
    47d2:	f7fe fee3 	bl	359c <Clock_Ip_ReportClockErrors>
}
    47d6:	bf00      	nop
    47d8:	b00b      	add	sp, #44	; 0x2c
    47da:	f85d fb04 	ldr.w	pc, [sp], #4
    47de:	bf00      	nop
    47e0:	00015d60 	.word	0x00015d60
    47e4:	40064000 	.word	0x40064000

000047e8 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    47e8:	b500      	push	{lr}
    47ea:	b089      	sub	sp, #36	; 0x24
    47ec:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    47ee:	2300      	movs	r3, #0
    47f0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    47f4:	9b01      	ldr	r3, [sp, #4]
    47f6:	889b      	ldrh	r3, [r3, #4]
    47f8:	2b01      	cmp	r3, #1
    47fa:	d132      	bne.n	4862 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    47fc:	4b1b      	ldr	r3, [pc, #108]	; (486c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    47fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4802:	4a1a      	ldr	r2, [pc, #104]	; (486c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4804:	f043 0301 	orr.w	r3, r3, #1
    4808:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    480c:	aa03      	add	r2, sp, #12
    480e:	a904      	add	r1, sp, #16
    4810:	a805      	add	r0, sp, #20
    4812:	f24c 3350 	movw	r3, #50000	; 0xc350
    4816:	f7fe fed1 	bl	35bc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    481a:	4b14      	ldr	r3, [pc, #80]	; (486c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    481c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4820:	0e1b      	lsrs	r3, r3, #24
    4822:	f003 0301 	and.w	r3, r3, #1
    4826:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4828:	9a03      	ldr	r2, [sp, #12]
    482a:	a904      	add	r1, sp, #16
    482c:	ab05      	add	r3, sp, #20
    482e:	4618      	mov	r0, r3
    4830:	f7fe fede 	bl	35f0 <Clock_Ip_TimeoutExpired>
    4834:	4603      	mov	r3, r0
    4836:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    483a:	9b06      	ldr	r3, [sp, #24]
    483c:	2b00      	cmp	r3, #0
    483e:	d106      	bne.n	484e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4840:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4844:	f083 0301 	eor.w	r3, r3, #1
    4848:	b2db      	uxtb	r3, r3
    484a:	2b00      	cmp	r3, #0
    484c:	d1e5      	bne.n	481a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    484e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4852:	2b00      	cmp	r3, #0
    4854:	d005      	beq.n	4862 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4856:	9b01      	ldr	r3, [sp, #4]
    4858:	681b      	ldr	r3, [r3, #0]
    485a:	4619      	mov	r1, r3
    485c:	2001      	movs	r0, #1
    485e:	f7fe fe9d 	bl	359c <Clock_Ip_ReportClockErrors>
        }
    }
}
    4862:	bf00      	nop
    4864:	b009      	add	sp, #36	; 0x24
    4866:	f85d fb04 	ldr.w	pc, [sp], #4
    486a:	bf00      	nop
    486c:	40064000 	.word	0x40064000

00004870 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4870:	b082      	sub	sp, #8
    4872:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4874:	4b05      	ldr	r3, [pc, #20]	; (488c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4876:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    487a:	4a04      	ldr	r2, [pc, #16]	; (488c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    487c:	f023 0301 	bic.w	r3, r3, #1
    4880:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4884:	bf00      	nop
    4886:	b002      	add	sp, #8
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	40064000 	.word	0x40064000

00004890 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4890:	b082      	sub	sp, #8
    4892:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4894:	bf00      	nop
    4896:	b002      	add	sp, #8
    4898:	4770      	bx	lr

0000489a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    489a:	b082      	sub	sp, #8
    489c:	9001      	str	r0, [sp, #4]
    489e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    48a0:	bf00      	nop
    48a2:	b002      	add	sp, #8
    48a4:	4770      	bx	lr

000048a6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    48a6:	b082      	sub	sp, #8
    48a8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    48aa:	bf00      	nop
    48ac:	b002      	add	sp, #8
    48ae:	4770      	bx	lr

000048b0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    48b0:	b082      	sub	sp, #8
    48b2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    48b4:	bf00      	nop
    48b6:	b002      	add	sp, #8
    48b8:	4770      	bx	lr

000048ba <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    48ba:	b082      	sub	sp, #8
    48bc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    48be:	2302      	movs	r3, #2
}
    48c0:	4618      	mov	r0, r3
    48c2:	b002      	add	sp, #8
    48c4:	4770      	bx	lr

000048c6 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    48c6:	b082      	sub	sp, #8
    48c8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    48ca:	bf00      	nop
    48cc:	b002      	add	sp, #8
    48ce:	4770      	bx	lr

000048d0 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    48d0:	b500      	push	{lr}
    48d2:	b083      	sub	sp, #12
    48d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48d6:	9b01      	ldr	r3, [sp, #4]
    48d8:	2b00      	cmp	r3, #0
    48da:	d002      	beq.n	48e2 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    48dc:	9801      	ldr	r0, [sp, #4]
    48de:	f000 f870 	bl	49c2 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48e2:	bf00      	nop
    48e4:	b003      	add	sp, #12
    48e6:	f85d fb04 	ldr.w	pc, [sp], #4

000048ea <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    48ea:	b500      	push	{lr}
    48ec:	b083      	sub	sp, #12
    48ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48f0:	9b01      	ldr	r3, [sp, #4]
    48f2:	2b00      	cmp	r3, #0
    48f4:	d002      	beq.n	48fc <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    48f6:	9801      	ldr	r0, [sp, #4]
    48f8:	f000 f89a 	bl	4a30 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48fc:	bf00      	nop
    48fe:	b003      	add	sp, #12
    4900:	f85d fb04 	ldr.w	pc, [sp], #4

00004904 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4904:	b500      	push	{lr}
    4906:	b089      	sub	sp, #36	; 0x24
    4908:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    490a:	2301      	movs	r3, #1
    490c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    490e:	2300      	movs	r3, #0
    4910:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4914:	4b1e      	ldr	r3, [pc, #120]	; (4990 <Clock_Ip_CompleteSpll+0x8c>)
    4916:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    491a:	f003 0301 	and.w	r3, r3, #1
    491e:	2b00      	cmp	r3, #0
    4920:	d02f      	beq.n	4982 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4922:	aa02      	add	r2, sp, #8
    4924:	a903      	add	r1, sp, #12
    4926:	a804      	add	r0, sp, #16
    4928:	f24c 3350 	movw	r3, #50000	; 0xc350
    492c:	f7fe fe46 	bl	35bc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4930:	4b17      	ldr	r3, [pc, #92]	; (4990 <Clock_Ip_CompleteSpll+0x8c>)
    4932:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4936:	0e1b      	lsrs	r3, r3, #24
    4938:	f003 0301 	and.w	r3, r3, #1
    493c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    493e:	9a02      	ldr	r2, [sp, #8]
    4940:	a903      	add	r1, sp, #12
    4942:	ab04      	add	r3, sp, #16
    4944:	4618      	mov	r0, r3
    4946:	f7fe fe53 	bl	35f0 <Clock_Ip_TimeoutExpired>
    494a:	4603      	mov	r3, r0
    494c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4950:	9b05      	ldr	r3, [sp, #20]
    4952:	2b00      	cmp	r3, #0
    4954:	d106      	bne.n	4964 <Clock_Ip_CompleteSpll+0x60>
    4956:	f89d 301b 	ldrb.w	r3, [sp, #27]
    495a:	f083 0301 	eor.w	r3, r3, #1
    495e:	b2db      	uxtb	r3, r3
    4960:	2b00      	cmp	r3, #0
    4962:	d1e5      	bne.n	4930 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4964:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4968:	f083 0301 	eor.w	r3, r3, #1
    496c:	b2db      	uxtb	r3, r3
    496e:	2b00      	cmp	r3, #0
    4970:	d002      	beq.n	4978 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4972:	2302      	movs	r3, #2
    4974:	9307      	str	r3, [sp, #28]
    4976:	e006      	b.n	4986 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4978:	9901      	ldr	r1, [sp, #4]
    497a:	2001      	movs	r0, #1
    497c:	f7fe fe0e 	bl	359c <Clock_Ip_ReportClockErrors>
    4980:	e001      	b.n	4986 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4982:	2300      	movs	r3, #0
    4984:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4986:	9b07      	ldr	r3, [sp, #28]
}
    4988:	4618      	mov	r0, r3
    498a:	b009      	add	sp, #36	; 0x24
    498c:	f85d fb04 	ldr.w	pc, [sp], #4
    4990:	40064000 	.word	0x40064000

00004994 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4994:	b500      	push	{lr}
    4996:	b083      	sub	sp, #12
    4998:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    499a:	9801      	ldr	r0, [sp, #4]
    499c:	f000 f886 	bl	4aac <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    49a0:	bf00      	nop
    49a2:	b003      	add	sp, #12
    49a4:	f85d fb04 	ldr.w	pc, [sp], #4

000049a8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    49a8:	b500      	push	{lr}
    49aa:	b083      	sub	sp, #12
    49ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    49ae:	9b01      	ldr	r3, [sp, #4]
    49b0:	2b00      	cmp	r3, #0
    49b2:	d002      	beq.n	49ba <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    49b4:	9801      	ldr	r0, [sp, #4]
    49b6:	f000 f891 	bl	4adc <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    49ba:	bf00      	nop
    49bc:	b003      	add	sp, #12
    49be:	f85d fb04 	ldr.w	pc, [sp], #4

000049c2 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    49c2:	b082      	sub	sp, #8
    49c4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    49c6:	4b19      	ldr	r3, [pc, #100]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49c8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    49cc:	4a17      	ldr	r2, [pc, #92]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    49d2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    49d6:	4b15      	ldr	r3, [pc, #84]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49d8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    49dc:	4a13      	ldr	r2, [pc, #76]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    49e2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    49e6:	4b11      	ldr	r3, [pc, #68]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49e8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    49ec:	4a0f      	ldr	r2, [pc, #60]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    49f2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    49f6:	4b0d      	ldr	r3, [pc, #52]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49f8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    49fc:	4a0b      	ldr	r2, [pc, #44]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    49fe:	f023 0301 	bic.w	r3, r3, #1
    4a02:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4a06:	4b09      	ldr	r3, [pc, #36]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4a08:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4a0c:	4a07      	ldr	r2, [pc, #28]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4a0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4a12:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4a16:	4b05      	ldr	r3, [pc, #20]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4a18:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4a1c:	4a03      	ldr	r2, [pc, #12]	; (4a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4a1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4a22:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4a26:	bf00      	nop
    4a28:	b002      	add	sp, #8
    4a2a:	4770      	bx	lr
    4a2c:	40064000 	.word	0x40064000

00004a30 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4a30:	b082      	sub	sp, #8
    4a32:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4a34:	9b01      	ldr	r3, [sp, #4]
    4a36:	889b      	ldrh	r3, [r3, #4]
    4a38:	2b01      	cmp	r3, #1
    4a3a:	d12f      	bne.n	4a9c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4a3c:	4b1a      	ldr	r3, [pc, #104]	; (4aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4a3e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4a42:	9b01      	ldr	r3, [sp, #4]
    4a44:	7b5b      	ldrb	r3, [r3, #13]
    4a46:	3b01      	subs	r3, #1
    4a48:	021b      	lsls	r3, r3, #8
    4a4a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4a4e:	9b01      	ldr	r3, [sp, #4]
    4a50:	7d1b      	ldrb	r3, [r3, #20]
    4a52:	3b10      	subs	r3, #16
    4a54:	041b      	lsls	r3, r3, #16
    4a56:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4a5a:	430b      	orrs	r3, r1
    4a5c:	4912      	ldr	r1, [pc, #72]	; (4aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4a5e:	4313      	orrs	r3, r2
    4a60:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4a64:	9b01      	ldr	r3, [sp, #4]
    4a66:	7fdb      	ldrb	r3, [r3, #31]
    4a68:	2b02      	cmp	r3, #2
    4a6a:	d011      	beq.n	4a90 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4a6c:	2b02      	cmp	r3, #2
    4a6e:	dc17      	bgt.n	4aa0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4a70:	2b00      	cmp	r3, #0
    4a72:	d002      	beq.n	4a7a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4a74:	2b01      	cmp	r3, #1
    4a76:	d005      	beq.n	4a84 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4a78:	e012      	b.n	4aa0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4a7a:	4b0b      	ldr	r3, [pc, #44]	; (4aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4a7c:	2200      	movs	r2, #0
    4a7e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4a82:	e00e      	b.n	4aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4a84:	4b08      	ldr	r3, [pc, #32]	; (4aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4a8a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4a8e:	e008      	b.n	4aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4a90:	4b05      	ldr	r3, [pc, #20]	; (4aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4a92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4a96:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4a9a:	e002      	b.n	4aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4a9c:	bf00      	nop
    4a9e:	e000      	b.n	4aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4aa0:	bf00      	nop
}
    4aa2:	bf00      	nop
    4aa4:	b002      	add	sp, #8
    4aa6:	4770      	bx	lr
    4aa8:	40064000 	.word	0x40064000

00004aac <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4aac:	b082      	sub	sp, #8
    4aae:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4ab0:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ab2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ab6:	4a08      	ldr	r2, [pc, #32]	; (4ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ab8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4abc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4ac0:	4b05      	ldr	r3, [pc, #20]	; (4ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ac2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ac6:	4a04      	ldr	r2, [pc, #16]	; (4ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ac8:	f023 0301 	bic.w	r3, r3, #1
    4acc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4ad0:	bf00      	nop
    4ad2:	b002      	add	sp, #8
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop
    4ad8:	40064000 	.word	0x40064000

00004adc <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4adc:	b082      	sub	sp, #8
    4ade:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4ae0:	9b01      	ldr	r3, [sp, #4]
    4ae2:	889b      	ldrh	r3, [r3, #4]
    4ae4:	2b01      	cmp	r3, #1
    4ae6:	d107      	bne.n	4af8 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4ae8:	4b05      	ldr	r3, [pc, #20]	; (4b00 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4aea:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4aee:	4a04      	ldr	r2, [pc, #16]	; (4b00 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4af0:	f043 0301 	orr.w	r3, r3, #1
    4af4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4af8:	bf00      	nop
    4afa:	b002      	add	sp, #8
    4afc:	4770      	bx	lr
    4afe:	bf00      	nop
    4b00:	40064000 	.word	0x40064000

00004b04 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4b04:	b082      	sub	sp, #8
    4b06:	9001      	str	r0, [sp, #4]
    4b08:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4b0a:	bf00      	nop
    4b0c:	b002      	add	sp, #8
    4b0e:	4770      	bx	lr

00004b10 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4b10:	b082      	sub	sp, #8
    4b12:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4b14:	bf00      	nop
    4b16:	b002      	add	sp, #8
    4b18:	4770      	bx	lr

00004b1a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4b1a:	b500      	push	{lr}
    4b1c:	b083      	sub	sp, #12
    4b1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b20:	9b01      	ldr	r3, [sp, #4]
    4b22:	2b00      	cmp	r3, #0
    4b24:	d002      	beq.n	4b2c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4b26:	9801      	ldr	r0, [sp, #4]
    4b28:	f000 f8ee 	bl	4d08 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b2c:	bf00      	nop
    4b2e:	b003      	add	sp, #12
    4b30:	f85d fb04 	ldr.w	pc, [sp], #4

00004b34 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4b34:	b500      	push	{lr}
    4b36:	b083      	sub	sp, #12
    4b38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b3a:	9b01      	ldr	r3, [sp, #4]
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d002      	beq.n	4b46 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4b40:	9801      	ldr	r0, [sp, #4]
    4b42:	f000 f8ff 	bl	4d44 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b46:	bf00      	nop
    4b48:	b003      	add	sp, #12
    4b4a:	f85d fb04 	ldr.w	pc, [sp], #4

00004b4e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4b4e:	b500      	push	{lr}
    4b50:	b083      	sub	sp, #12
    4b52:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b54:	9b01      	ldr	r3, [sp, #4]
    4b56:	2b00      	cmp	r3, #0
    4b58:	d002      	beq.n	4b60 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4b5a:	9801      	ldr	r0, [sp, #4]
    4b5c:	f000 f912 	bl	4d84 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b60:	bf00      	nop
    4b62:	b003      	add	sp, #12
    4b64:	f85d fb04 	ldr.w	pc, [sp], #4

00004b68 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4b68:	b500      	push	{lr}
    4b6a:	b083      	sub	sp, #12
    4b6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b6e:	9b01      	ldr	r3, [sp, #4]
    4b70:	2b00      	cmp	r3, #0
    4b72:	d002      	beq.n	4b7a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4b74:	9801      	ldr	r0, [sp, #4]
    4b76:	f000 f925 	bl	4dc4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b7a:	bf00      	nop
    4b7c:	b003      	add	sp, #12
    4b7e:	f85d fb04 	ldr.w	pc, [sp], #4

00004b82 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4b82:	b500      	push	{lr}
    4b84:	b083      	sub	sp, #12
    4b86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b88:	9b01      	ldr	r3, [sp, #4]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d002      	beq.n	4b94 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4b8e:	9801      	ldr	r0, [sp, #4]
    4b90:	f000 f936 	bl	4e00 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b94:	bf00      	nop
    4b96:	b003      	add	sp, #12
    4b98:	f85d fb04 	ldr.w	pc, [sp], #4

00004b9c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4b9c:	b500      	push	{lr}
    4b9e:	b083      	sub	sp, #12
    4ba0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ba2:	9b01      	ldr	r3, [sp, #4]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d002      	beq.n	4bae <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4ba8:	9801      	ldr	r0, [sp, #4]
    4baa:	f000 f949 	bl	4e40 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4bae:	bf00      	nop
    4bb0:	b003      	add	sp, #12
    4bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00004bb6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4bb6:	b500      	push	{lr}
    4bb8:	b083      	sub	sp, #12
    4bba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4bbc:	9b01      	ldr	r3, [sp, #4]
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d002      	beq.n	4bc8 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4bc2:	9801      	ldr	r0, [sp, #4]
    4bc4:	f000 f958 	bl	4e78 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4bc8:	bf00      	nop
    4bca:	b003      	add	sp, #12
    4bcc:	f85d fb04 	ldr.w	pc, [sp], #4

00004bd0 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4bd0:	b500      	push	{lr}
    4bd2:	b083      	sub	sp, #12
    4bd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4bd6:	9b01      	ldr	r3, [sp, #4]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d002      	beq.n	4be2 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4bdc:	9801      	ldr	r0, [sp, #4]
    4bde:	f000 f969 	bl	4eb4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4be2:	bf00      	nop
    4be4:	b003      	add	sp, #12
    4be6:	f85d fb04 	ldr.w	pc, [sp], #4

00004bea <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4bea:	b500      	push	{lr}
    4bec:	b083      	sub	sp, #12
    4bee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4bf0:	9b01      	ldr	r3, [sp, #4]
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d002      	beq.n	4bfc <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4bf6:	9801      	ldr	r0, [sp, #4]
    4bf8:	f000 f978 	bl	4eec <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4bfc:	bf00      	nop
    4bfe:	b003      	add	sp, #12
    4c00:	f85d fb04 	ldr.w	pc, [sp], #4

00004c04 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4c04:	b500      	push	{lr}
    4c06:	b083      	sub	sp, #12
    4c08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c0a:	9b01      	ldr	r3, [sp, #4]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d002      	beq.n	4c16 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4c10:	9801      	ldr	r0, [sp, #4]
    4c12:	f000 f989 	bl	4f28 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c16:	bf00      	nop
    4c18:	b003      	add	sp, #12
    4c1a:	f85d fb04 	ldr.w	pc, [sp], #4

00004c1e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4c1e:	b500      	push	{lr}
    4c20:	b083      	sub	sp, #12
    4c22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c24:	9b01      	ldr	r3, [sp, #4]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d002      	beq.n	4c30 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4c2a:	9801      	ldr	r0, [sp, #4]
    4c2c:	f000 f998 	bl	4f60 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c30:	bf00      	nop
    4c32:	b003      	add	sp, #12
    4c34:	f85d fb04 	ldr.w	pc, [sp], #4

00004c38 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4c38:	b500      	push	{lr}
    4c3a:	b083      	sub	sp, #12
    4c3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c3e:	9b01      	ldr	r3, [sp, #4]
    4c40:	2b00      	cmp	r3, #0
    4c42:	d002      	beq.n	4c4a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4c44:	9801      	ldr	r0, [sp, #4]
    4c46:	f000 f9a9 	bl	4f9c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c4a:	bf00      	nop
    4c4c:	b003      	add	sp, #12
    4c4e:	f85d fb04 	ldr.w	pc, [sp], #4

00004c52 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4c52:	b500      	push	{lr}
    4c54:	b083      	sub	sp, #12
    4c56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c58:	9b01      	ldr	r3, [sp, #4]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d002      	beq.n	4c64 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4c5e:	9801      	ldr	r0, [sp, #4]
    4c60:	f000 f9e6 	bl	5030 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c64:	bf00      	nop
    4c66:	b003      	add	sp, #12
    4c68:	f85d fb04 	ldr.w	pc, [sp], #4

00004c6c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4c6c:	b500      	push	{lr}
    4c6e:	b083      	sub	sp, #12
    4c70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c72:	9b01      	ldr	r3, [sp, #4]
    4c74:	2b00      	cmp	r3, #0
    4c76:	d002      	beq.n	4c7e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4c78:	9801      	ldr	r0, [sp, #4]
    4c7a:	f000 fa25 	bl	50c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c7e:	bf00      	nop
    4c80:	b003      	add	sp, #12
    4c82:	f85d fb04 	ldr.w	pc, [sp], #4

00004c86 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4c86:	b500      	push	{lr}
    4c88:	b083      	sub	sp, #12
    4c8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c8c:	9b01      	ldr	r3, [sp, #4]
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d002      	beq.n	4c98 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4c92:	9801      	ldr	r0, [sp, #4]
    4c94:	f000 fa2a 	bl	50ec <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c98:	bf00      	nop
    4c9a:	b003      	add	sp, #12
    4c9c:	f85d fb04 	ldr.w	pc, [sp], #4

00004ca0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4ca0:	b500      	push	{lr}
    4ca2:	b083      	sub	sp, #12
    4ca4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ca6:	9b01      	ldr	r3, [sp, #4]
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d002      	beq.n	4cb2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4cac:	9801      	ldr	r0, [sp, #4]
    4cae:	f000 fa3b 	bl	5128 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4cb2:	bf00      	nop
    4cb4:	b003      	add	sp, #12
    4cb6:	f85d fb04 	ldr.w	pc, [sp], #4

00004cba <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4cba:	b500      	push	{lr}
    4cbc:	b083      	sub	sp, #12
    4cbe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4cc0:	9b01      	ldr	r3, [sp, #4]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d002      	beq.n	4ccc <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4cc6:	9801      	ldr	r0, [sp, #4]
    4cc8:	f000 fa56 	bl	5178 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ccc:	bf00      	nop
    4cce:	b003      	add	sp, #12
    4cd0:	f85d fb04 	ldr.w	pc, [sp], #4

00004cd4 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4cd4:	b500      	push	{lr}
    4cd6:	b083      	sub	sp, #12
    4cd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4cda:	9b01      	ldr	r3, [sp, #4]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d002      	beq.n	4ce6 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4ce0:	9801      	ldr	r0, [sp, #4]
    4ce2:	f000 fa79 	bl	51d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ce6:	bf00      	nop
    4ce8:	b003      	add	sp, #12
    4cea:	f85d fb04 	ldr.w	pc, [sp], #4

00004cee <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4cee:	b500      	push	{lr}
    4cf0:	b083      	sub	sp, #12
    4cf2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4cf4:	9b01      	ldr	r3, [sp, #4]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d002      	beq.n	4d00 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4cfa:	9801      	ldr	r0, [sp, #4]
    4cfc:	f000 fa8a 	bl	5214 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d00:	bf00      	nop
    4d02:	b003      	add	sp, #12
    4d04:	f85d fb04 	ldr.w	pc, [sp], #4

00004d08 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d08:	b084      	sub	sp, #16
    4d0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4d0c:	4b0b      	ldr	r3, [pc, #44]	; (4d3c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4d0e:	795b      	ldrb	r3, [r3, #5]
    4d10:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4d12:	4b0b      	ldr	r3, [pc, #44]	; (4d40 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4d14:	695b      	ldr	r3, [r3, #20]
    4d16:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4d18:	9b02      	ldr	r3, [sp, #8]
    4d1a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4d1e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4d20:	9b03      	ldr	r3, [sp, #12]
    4d22:	061b      	lsls	r3, r3, #24
    4d24:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4d28:	9a02      	ldr	r2, [sp, #8]
    4d2a:	4313      	orrs	r3, r2
    4d2c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4d2e:	4a04      	ldr	r2, [pc, #16]	; (4d40 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4d30:	9b02      	ldr	r3, [sp, #8]
    4d32:	6153      	str	r3, [r2, #20]
}
    4d34:	bf00      	nop
    4d36:	b004      	add	sp, #16
    4d38:	4770      	bx	lr
    4d3a:	bf00      	nop
    4d3c:	000160c8 	.word	0x000160c8
    4d40:	40064000 	.word	0x40064000

00004d44 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d44:	b084      	sub	sp, #16
    4d46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4d48:	9b01      	ldr	r3, [sp, #4]
    4d4a:	685b      	ldr	r3, [r3, #4]
    4d4c:	4a0b      	ldr	r2, [pc, #44]	; (4d7c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4d4e:	5cd3      	ldrb	r3, [r2, r3]
    4d50:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4d52:	4b0b      	ldr	r3, [pc, #44]	; (4d80 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4d54:	695b      	ldr	r3, [r3, #20]
    4d56:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4d58:	9b02      	ldr	r3, [sp, #8]
    4d5a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4d5e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4d60:	9b03      	ldr	r3, [sp, #12]
    4d62:	061b      	lsls	r3, r3, #24
    4d64:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4d68:	9a02      	ldr	r2, [sp, #8]
    4d6a:	4313      	orrs	r3, r2
    4d6c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4d6e:	4a04      	ldr	r2, [pc, #16]	; (4d80 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4d70:	9b02      	ldr	r3, [sp, #8]
    4d72:	6153      	str	r3, [r2, #20]
}
    4d74:	bf00      	nop
    4d76:	b004      	add	sp, #16
    4d78:	4770      	bx	lr
    4d7a:	bf00      	nop
    4d7c:	000160c8 	.word	0x000160c8
    4d80:	40064000 	.word	0x40064000

00004d84 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d84:	b084      	sub	sp, #16
    4d86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4d88:	9b01      	ldr	r3, [sp, #4]
    4d8a:	685b      	ldr	r3, [r3, #4]
    4d8c:	4a0b      	ldr	r2, [pc, #44]	; (4dbc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4d8e:	5cd3      	ldrb	r3, [r2, r3]
    4d90:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4d92:	4b0b      	ldr	r3, [pc, #44]	; (4dc0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4d94:	699b      	ldr	r3, [r3, #24]
    4d96:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4d98:	9b02      	ldr	r3, [sp, #8]
    4d9a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4d9e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4da0:	9b03      	ldr	r3, [sp, #12]
    4da2:	061b      	lsls	r3, r3, #24
    4da4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4da8:	9a02      	ldr	r2, [sp, #8]
    4daa:	4313      	orrs	r3, r2
    4dac:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4dae:	4a04      	ldr	r2, [pc, #16]	; (4dc0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4db0:	9b02      	ldr	r3, [sp, #8]
    4db2:	6193      	str	r3, [r2, #24]
}
    4db4:	bf00      	nop
    4db6:	b004      	add	sp, #16
    4db8:	4770      	bx	lr
    4dba:	bf00      	nop
    4dbc:	000160c8 	.word	0x000160c8
    4dc0:	40064000 	.word	0x40064000

00004dc4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4dc4:	b084      	sub	sp, #16
    4dc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4dc8:	4b0b      	ldr	r3, [pc, #44]	; (4df8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4dca:	795b      	ldrb	r3, [r3, #5]
    4dcc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4dce:	4b0b      	ldr	r3, [pc, #44]	; (4dfc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4dd0:	69db      	ldr	r3, [r3, #28]
    4dd2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4dd4:	9b02      	ldr	r3, [sp, #8]
    4dd6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4dda:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4ddc:	9b03      	ldr	r3, [sp, #12]
    4dde:	061b      	lsls	r3, r3, #24
    4de0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4de4:	9a02      	ldr	r2, [sp, #8]
    4de6:	4313      	orrs	r3, r2
    4de8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4dea:	4a04      	ldr	r2, [pc, #16]	; (4dfc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4dec:	9b02      	ldr	r3, [sp, #8]
    4dee:	61d3      	str	r3, [r2, #28]
}
    4df0:	bf00      	nop
    4df2:	b004      	add	sp, #16
    4df4:	4770      	bx	lr
    4df6:	bf00      	nop
    4df8:	000160c8 	.word	0x000160c8
    4dfc:	40064000 	.word	0x40064000

00004e00 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e00:	b084      	sub	sp, #16
    4e02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e04:	9b01      	ldr	r3, [sp, #4]
    4e06:	685b      	ldr	r3, [r3, #4]
    4e08:	4a0b      	ldr	r2, [pc, #44]	; (4e38 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4e0a:	5cd3      	ldrb	r3, [r2, r3]
    4e0c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4e0e:	4b0b      	ldr	r3, [pc, #44]	; (4e3c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4e10:	69db      	ldr	r3, [r3, #28]
    4e12:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4e14:	9b02      	ldr	r3, [sp, #8]
    4e16:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4e1a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4e1c:	9b03      	ldr	r3, [sp, #12]
    4e1e:	061b      	lsls	r3, r3, #24
    4e20:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4e24:	9a02      	ldr	r2, [sp, #8]
    4e26:	4313      	orrs	r3, r2
    4e28:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4e2a:	4a04      	ldr	r2, [pc, #16]	; (4e3c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4e2c:	9b02      	ldr	r3, [sp, #8]
    4e2e:	61d3      	str	r3, [r2, #28]
}
    4e30:	bf00      	nop
    4e32:	b004      	add	sp, #16
    4e34:	4770      	bx	lr
    4e36:	bf00      	nop
    4e38:	000160c8 	.word	0x000160c8
    4e3c:	40064000 	.word	0x40064000

00004e40 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e40:	b084      	sub	sp, #16
    4e42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e44:	4b0a      	ldr	r3, [pc, #40]	; (4e70 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4e46:	7b9b      	ldrb	r3, [r3, #14]
    4e48:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4e4a:	4b0a      	ldr	r3, [pc, #40]	; (4e74 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4e4c:	691b      	ldr	r3, [r3, #16]
    4e4e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4e50:	9b02      	ldr	r3, [sp, #8]
    4e52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4e56:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4e58:	9b03      	ldr	r3, [sp, #12]
    4e5a:	011b      	lsls	r3, r3, #4
    4e5c:	9a02      	ldr	r2, [sp, #8]
    4e5e:	4313      	orrs	r3, r2
    4e60:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4e62:	4a04      	ldr	r2, [pc, #16]	; (4e74 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4e64:	9b02      	ldr	r3, [sp, #8]
    4e66:	6113      	str	r3, [r2, #16]
}
    4e68:	bf00      	nop
    4e6a:	b004      	add	sp, #16
    4e6c:	4770      	bx	lr
    4e6e:	bf00      	nop
    4e70:	00016070 	.word	0x00016070
    4e74:	40048000 	.word	0x40048000

00004e78 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e78:	b084      	sub	sp, #16
    4e7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e7c:	9b01      	ldr	r3, [sp, #4]
    4e7e:	685b      	ldr	r3, [r3, #4]
    4e80:	4a0a      	ldr	r2, [pc, #40]	; (4eac <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4e82:	5cd3      	ldrb	r3, [r2, r3]
    4e84:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4e86:	4b0a      	ldr	r3, [pc, #40]	; (4eb0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4e88:	691b      	ldr	r3, [r3, #16]
    4e8a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4e8c:	9b02      	ldr	r3, [sp, #8]
    4e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4e92:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4e94:	9b03      	ldr	r3, [sp, #12]
    4e96:	011b      	lsls	r3, r3, #4
    4e98:	9a02      	ldr	r2, [sp, #8]
    4e9a:	4313      	orrs	r3, r2
    4e9c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4e9e:	4a04      	ldr	r2, [pc, #16]	; (4eb0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4ea0:	9b02      	ldr	r3, [sp, #8]
    4ea2:	6113      	str	r3, [r2, #16]
}
    4ea4:	bf00      	nop
    4ea6:	b004      	add	sp, #16
    4ea8:	4770      	bx	lr
    4eaa:	bf00      	nop
    4eac:	00016070 	.word	0x00016070
    4eb0:	40048000 	.word	0x40048000

00004eb4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4eb4:	b084      	sub	sp, #16
    4eb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4eb8:	4b0a      	ldr	r3, [pc, #40]	; (4ee4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4eba:	785b      	ldrb	r3, [r3, #1]
    4ebc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4ebe:	4b0a      	ldr	r3, [pc, #40]	; (4ee8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4ec0:	691b      	ldr	r3, [r3, #16]
    4ec2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4ec4:	9b02      	ldr	r3, [sp, #8]
    4ec6:	f023 030c 	bic.w	r3, r3, #12
    4eca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4ecc:	9b03      	ldr	r3, [sp, #12]
    4ece:	009b      	lsls	r3, r3, #2
    4ed0:	9a02      	ldr	r2, [sp, #8]
    4ed2:	4313      	orrs	r3, r2
    4ed4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4ed6:	4a04      	ldr	r2, [pc, #16]	; (4ee8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4ed8:	9b02      	ldr	r3, [sp, #8]
    4eda:	6113      	str	r3, [r2, #16]
}
    4edc:	bf00      	nop
    4ede:	b004      	add	sp, #16
    4ee0:	4770      	bx	lr
    4ee2:	bf00      	nop
    4ee4:	00016128 	.word	0x00016128
    4ee8:	40048000 	.word	0x40048000

00004eec <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4eec:	b084      	sub	sp, #16
    4eee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ef0:	9b01      	ldr	r3, [sp, #4]
    4ef2:	685b      	ldr	r3, [r3, #4]
    4ef4:	4a0a      	ldr	r2, [pc, #40]	; (4f20 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4ef6:	5cd3      	ldrb	r3, [r2, r3]
    4ef8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4efa:	4b0a      	ldr	r3, [pc, #40]	; (4f24 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4efc:	691b      	ldr	r3, [r3, #16]
    4efe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4f00:	9b02      	ldr	r3, [sp, #8]
    4f02:	f023 030c 	bic.w	r3, r3, #12
    4f06:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4f08:	9b03      	ldr	r3, [sp, #12]
    4f0a:	009b      	lsls	r3, r3, #2
    4f0c:	9a02      	ldr	r2, [sp, #8]
    4f0e:	4313      	orrs	r3, r2
    4f10:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4f12:	4a04      	ldr	r2, [pc, #16]	; (4f24 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4f14:	9b02      	ldr	r3, [sp, #8]
    4f16:	6113      	str	r3, [r2, #16]
}
    4f18:	bf00      	nop
    4f1a:	b004      	add	sp, #16
    4f1c:	4770      	bx	lr
    4f1e:	bf00      	nop
    4f20:	00016128 	.word	0x00016128
    4f24:	40048000 	.word	0x40048000

00004f28 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f28:	b084      	sub	sp, #16
    4f2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f2c:	4b0a      	ldr	r3, [pc, #40]	; (4f58 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4f2e:	795b      	ldrb	r3, [r3, #5]
    4f30:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4f32:	4b0a      	ldr	r3, [pc, #40]	; (4f5c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4f34:	6a1b      	ldr	r3, [r3, #32]
    4f36:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4f38:	9b02      	ldr	r3, [sp, #8]
    4f3a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f3e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4f40:	9b03      	ldr	r3, [sp, #12]
    4f42:	061b      	lsls	r3, r3, #24
    4f44:	9a02      	ldr	r2, [sp, #8]
    4f46:	4313      	orrs	r3, r2
    4f48:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4f4a:	4a04      	ldr	r2, [pc, #16]	; (4f5c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4f4c:	9b02      	ldr	r3, [sp, #8]
    4f4e:	6213      	str	r3, [r2, #32]
}
    4f50:	bf00      	nop
    4f52:	b004      	add	sp, #16
    4f54:	4770      	bx	lr
    4f56:	bf00      	nop
    4f58:	000160c8 	.word	0x000160c8
    4f5c:	40064000 	.word	0x40064000

00004f60 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f60:	b084      	sub	sp, #16
    4f62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	685b      	ldr	r3, [r3, #4]
    4f68:	4a0a      	ldr	r2, [pc, #40]	; (4f94 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4f6a:	5cd3      	ldrb	r3, [r2, r3]
    4f6c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4f6e:	4b0a      	ldr	r3, [pc, #40]	; (4f98 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4f70:	6a1b      	ldr	r3, [r3, #32]
    4f72:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4f74:	9b02      	ldr	r3, [sp, #8]
    4f76:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f7a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4f7c:	9b03      	ldr	r3, [sp, #12]
    4f7e:	061b      	lsls	r3, r3, #24
    4f80:	9a02      	ldr	r2, [sp, #8]
    4f82:	4313      	orrs	r3, r2
    4f84:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4f86:	4a04      	ldr	r2, [pc, #16]	; (4f98 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4f88:	9b02      	ldr	r3, [sp, #8]
    4f8a:	6213      	str	r3, [r2, #32]
}
    4f8c:	bf00      	nop
    4f8e:	b004      	add	sp, #16
    4f90:	4770      	bx	lr
    4f92:	bf00      	nop
    4f94:	000160c8 	.word	0x000160c8
    4f98:	40064000 	.word	0x40064000

00004f9c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f9c:	b086      	sub	sp, #24
    4f9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fa0:	4b20      	ldr	r3, [pc, #128]	; (5024 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4fa2:	795b      	ldrb	r3, [r3, #5]
    4fa4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4fa6:	9b01      	ldr	r3, [sp, #4]
    4fa8:	681a      	ldr	r2, [r3, #0]
    4faa:	491f      	ldr	r1, [pc, #124]	; (5028 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4fac:	4613      	mov	r3, r2
    4fae:	00db      	lsls	r3, r3, #3
    4fb0:	4413      	add	r3, r2
    4fb2:	440b      	add	r3, r1
    4fb4:	781b      	ldrb	r3, [r3, #0]
    4fb6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4fb8:	4b1c      	ldr	r3, [pc, #112]	; (502c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4fba:	68db      	ldr	r3, [r3, #12]
    4fbc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4fbe:	9b03      	ldr	r3, [sp, #12]
    4fc0:	2b03      	cmp	r3, #3
    4fc2:	d813      	bhi.n	4fec <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4fc4:	9b03      	ldr	r3, [sp, #12]
    4fc6:	005b      	lsls	r3, r3, #1
    4fc8:	3318      	adds	r3, #24
    4fca:	2203      	movs	r2, #3
    4fcc:	fa02 f303 	lsl.w	r3, r2, r3
    4fd0:	43db      	mvns	r3, r3
    4fd2:	9a05      	ldr	r2, [sp, #20]
    4fd4:	4013      	ands	r3, r2
    4fd6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4fd8:	9b03      	ldr	r3, [sp, #12]
    4fda:	005b      	lsls	r3, r3, #1
    4fdc:	3318      	adds	r3, #24
    4fde:	9a04      	ldr	r2, [sp, #16]
    4fe0:	fa02 f303 	lsl.w	r3, r2, r3
    4fe4:	9a05      	ldr	r2, [sp, #20]
    4fe6:	4313      	orrs	r3, r2
    4fe8:	9305      	str	r3, [sp, #20]
    4fea:	e014      	b.n	5016 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4fec:	9b03      	ldr	r3, [sp, #12]
    4fee:	3b04      	subs	r3, #4
    4ff0:	005b      	lsls	r3, r3, #1
    4ff2:	3310      	adds	r3, #16
    4ff4:	2203      	movs	r2, #3
    4ff6:	fa02 f303 	lsl.w	r3, r2, r3
    4ffa:	43db      	mvns	r3, r3
    4ffc:	9a05      	ldr	r2, [sp, #20]
    4ffe:	4013      	ands	r3, r2
    5000:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    5002:	9b03      	ldr	r3, [sp, #12]
    5004:	3b04      	subs	r3, #4
    5006:	005b      	lsls	r3, r3, #1
    5008:	3310      	adds	r3, #16
    500a:	9a04      	ldr	r2, [sp, #16]
    500c:	fa02 f303 	lsl.w	r3, r2, r3
    5010:	9a05      	ldr	r2, [sp, #20]
    5012:	4313      	orrs	r3, r2
    5014:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    5016:	4a05      	ldr	r2, [pc, #20]	; (502c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5018:	9b05      	ldr	r3, [sp, #20]
    501a:	60d3      	str	r3, [r2, #12]
}
    501c:	bf00      	nop
    501e:	b006      	add	sp, #24
    5020:	4770      	bx	lr
    5022:	bf00      	nop
    5024:	00016070 	.word	0x00016070
    5028:	00015d60 	.word	0x00015d60
    502c:	40048000 	.word	0x40048000

00005030 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5030:	b086      	sub	sp, #24
    5032:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5034:	9b01      	ldr	r3, [sp, #4]
    5036:	685b      	ldr	r3, [r3, #4]
    5038:	4a20      	ldr	r2, [pc, #128]	; (50bc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    503a:	5cd3      	ldrb	r3, [r2, r3]
    503c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    503e:	9b01      	ldr	r3, [sp, #4]
    5040:	681a      	ldr	r2, [r3, #0]
    5042:	491f      	ldr	r1, [pc, #124]	; (50c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    5044:	4613      	mov	r3, r2
    5046:	00db      	lsls	r3, r3, #3
    5048:	4413      	add	r3, r2
    504a:	440b      	add	r3, r1
    504c:	781b      	ldrb	r3, [r3, #0]
    504e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5050:	4b1c      	ldr	r3, [pc, #112]	; (50c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5052:	68db      	ldr	r3, [r3, #12]
    5054:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    5056:	9b03      	ldr	r3, [sp, #12]
    5058:	2b03      	cmp	r3, #3
    505a:	d813      	bhi.n	5084 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    505c:	9b03      	ldr	r3, [sp, #12]
    505e:	005b      	lsls	r3, r3, #1
    5060:	3318      	adds	r3, #24
    5062:	2203      	movs	r2, #3
    5064:	fa02 f303 	lsl.w	r3, r2, r3
    5068:	43db      	mvns	r3, r3
    506a:	9a05      	ldr	r2, [sp, #20]
    506c:	4013      	ands	r3, r2
    506e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5070:	9b03      	ldr	r3, [sp, #12]
    5072:	005b      	lsls	r3, r3, #1
    5074:	3318      	adds	r3, #24
    5076:	9a04      	ldr	r2, [sp, #16]
    5078:	fa02 f303 	lsl.w	r3, r2, r3
    507c:	9a05      	ldr	r2, [sp, #20]
    507e:	4313      	orrs	r3, r2
    5080:	9305      	str	r3, [sp, #20]
    5082:	e014      	b.n	50ae <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5084:	9b03      	ldr	r3, [sp, #12]
    5086:	3b04      	subs	r3, #4
    5088:	005b      	lsls	r3, r3, #1
    508a:	3310      	adds	r3, #16
    508c:	2203      	movs	r2, #3
    508e:	fa02 f303 	lsl.w	r3, r2, r3
    5092:	43db      	mvns	r3, r3
    5094:	9a05      	ldr	r2, [sp, #20]
    5096:	4013      	ands	r3, r2
    5098:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    509a:	9b03      	ldr	r3, [sp, #12]
    509c:	3b04      	subs	r3, #4
    509e:	005b      	lsls	r3, r3, #1
    50a0:	3310      	adds	r3, #16
    50a2:	9a04      	ldr	r2, [sp, #16]
    50a4:	fa02 f303 	lsl.w	r3, r2, r3
    50a8:	9a05      	ldr	r2, [sp, #20]
    50aa:	4313      	orrs	r3, r2
    50ac:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    50ae:	4a05      	ldr	r2, [pc, #20]	; (50c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    50b0:	9b05      	ldr	r3, [sp, #20]
    50b2:	60d3      	str	r3, [r2, #12]
}
    50b4:	bf00      	nop
    50b6:	b006      	add	sp, #24
    50b8:	4770      	bx	lr
    50ba:	bf00      	nop
    50bc:	00016070 	.word	0x00016070
    50c0:	00015d60 	.word	0x00015d60
    50c4:	40048000 	.word	0x40048000

000050c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    50c8:	b084      	sub	sp, #16
    50ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    50cc:	4b06      	ldr	r3, [pc, #24]	; (50e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    50ce:	685b      	ldr	r3, [r3, #4]
    50d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    50d2:	9b03      	ldr	r3, [sp, #12]
    50d4:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    50d8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    50da:	4a03      	ldr	r2, [pc, #12]	; (50e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    50dc:	9b03      	ldr	r3, [sp, #12]
    50de:	6053      	str	r3, [r2, #4]
}
    50e0:	bf00      	nop
    50e2:	b004      	add	sp, #16
    50e4:	4770      	bx	lr
    50e6:	bf00      	nop
    50e8:	40048000 	.word	0x40048000

000050ec <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    50ec:	b084      	sub	sp, #16
    50ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    50f0:	9b01      	ldr	r3, [sp, #4]
    50f2:	685b      	ldr	r3, [r3, #4]
    50f4:	4a0a      	ldr	r2, [pc, #40]	; (5120 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    50f6:	5cd3      	ldrb	r3, [r2, r3]
    50f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    50fa:	4b0a      	ldr	r3, [pc, #40]	; (5124 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    50fc:	685b      	ldr	r3, [r3, #4]
    50fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    5100:	9b02      	ldr	r3, [sp, #8]
    5102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    5106:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    5108:	9b03      	ldr	r3, [sp, #12]
    510a:	011b      	lsls	r3, r3, #4
    510c:	9a02      	ldr	r2, [sp, #8]
    510e:	4313      	orrs	r3, r2
    5110:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    5112:	4a04      	ldr	r2, [pc, #16]	; (5124 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5114:	9b02      	ldr	r3, [sp, #8]
    5116:	6053      	str	r3, [r2, #4]
}
    5118:	bf00      	nop
    511a:	b004      	add	sp, #16
    511c:	4770      	bx	lr
    511e:	bf00      	nop
    5120:	00016070 	.word	0x00016070
    5124:	40048000 	.word	0x40048000

00005128 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5128:	b084      	sub	sp, #16
    512a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    512c:	9b01      	ldr	r3, [sp, #4]
    512e:	681a      	ldr	r2, [r3, #0]
    5130:	490f      	ldr	r1, [pc, #60]	; (5170 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    5132:	4613      	mov	r3, r2
    5134:	00db      	lsls	r3, r3, #3
    5136:	4413      	add	r3, r2
    5138:	440b      	add	r3, r1
    513a:	3304      	adds	r3, #4
    513c:	781b      	ldrb	r3, [r3, #0]
    513e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    5140:	4a0c      	ldr	r2, [pc, #48]	; (5174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5142:	9b03      	ldr	r3, [sp, #12]
    5144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5148:	490a      	ldr	r1, [pc, #40]	; (5174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    514a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    514e:	9b03      	ldr	r3, [sp, #12]
    5150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    5154:	4a07      	ldr	r2, [pc, #28]	; (5174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5156:	9b03      	ldr	r3, [sp, #12]
    5158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    515c:	4905      	ldr	r1, [pc, #20]	; (5174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    515e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    5162:	9b03      	ldr	r3, [sp, #12]
    5164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5168:	bf00      	nop
    516a:	b004      	add	sp, #16
    516c:	4770      	bx	lr
    516e:	bf00      	nop
    5170:	00015d60 	.word	0x00015d60
    5174:	40065000 	.word	0x40065000

00005178 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5178:	b086      	sub	sp, #24
    517a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    517c:	9b01      	ldr	r3, [sp, #4]
    517e:	681a      	ldr	r2, [r3, #0]
    5180:	4912      	ldr	r1, [pc, #72]	; (51cc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    5182:	4613      	mov	r3, r2
    5184:	00db      	lsls	r3, r3, #3
    5186:	4413      	add	r3, r2
    5188:	440b      	add	r3, r1
    518a:	3304      	adds	r3, #4
    518c:	781b      	ldrb	r3, [r3, #0]
    518e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5190:	9b01      	ldr	r3, [sp, #4]
    5192:	685b      	ldr	r3, [r3, #4]
    5194:	4a0e      	ldr	r2, [pc, #56]	; (51d0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    5196:	5cd3      	ldrb	r3, [r2, r3]
    5198:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    519a:	4a0e      	ldr	r2, [pc, #56]	; (51d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    519c:	9b05      	ldr	r3, [sp, #20]
    519e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    51a2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    51a4:	9b03      	ldr	r3, [sp, #12]
    51a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    51aa:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    51ac:	9b04      	ldr	r3, [sp, #16]
    51ae:	061b      	lsls	r3, r3, #24
    51b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    51b4:	9a03      	ldr	r2, [sp, #12]
    51b6:	4313      	orrs	r3, r2
    51b8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    51ba:	4906      	ldr	r1, [pc, #24]	; (51d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    51bc:	9b05      	ldr	r3, [sp, #20]
    51be:	9a03      	ldr	r2, [sp, #12]
    51c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    51c4:	bf00      	nop
    51c6:	b006      	add	sp, #24
    51c8:	4770      	bx	lr
    51ca:	bf00      	nop
    51cc:	00015d60 	.word	0x00015d60
    51d0:	000160f8 	.word	0x000160f8
    51d4:	40065000 	.word	0x40065000

000051d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51d8:	b084      	sub	sp, #16
    51da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51dc:	4b0b      	ldr	r3, [pc, #44]	; (520c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    51de:	7f1b      	ldrb	r3, [r3, #28]
    51e0:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    51e2:	4b0b      	ldr	r3, [pc, #44]	; (5210 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    51e4:	685b      	ldr	r3, [r3, #4]
    51e6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    51e8:	9b02      	ldr	r3, [sp, #8]
    51ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    51ee:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    51f0:	9b03      	ldr	r3, [sp, #12]
    51f2:	031b      	lsls	r3, r3, #12
    51f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    51f8:	9a02      	ldr	r2, [sp, #8]
    51fa:	4313      	orrs	r3, r2
    51fc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    51fe:	4a04      	ldr	r2, [pc, #16]	; (5210 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5200:	9b02      	ldr	r3, [sp, #8]
    5202:	6053      	str	r3, [r2, #4]
}
    5204:	bf00      	nop
    5206:	b004      	add	sp, #16
    5208:	4770      	bx	lr
    520a:	bf00      	nop
    520c:	00016070 	.word	0x00016070
    5210:	40048000 	.word	0x40048000

00005214 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5214:	b084      	sub	sp, #16
    5216:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5218:	9b01      	ldr	r3, [sp, #4]
    521a:	685b      	ldr	r3, [r3, #4]
    521c:	4a0b      	ldr	r2, [pc, #44]	; (524c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    521e:	5cd3      	ldrb	r3, [r2, r3]
    5220:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    5222:	4b0b      	ldr	r3, [pc, #44]	; (5250 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5224:	685b      	ldr	r3, [r3, #4]
    5226:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5228:	9b02      	ldr	r3, [sp, #8]
    522a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    522e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5230:	9b03      	ldr	r3, [sp, #12]
    5232:	031b      	lsls	r3, r3, #12
    5234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5238:	9a02      	ldr	r2, [sp, #8]
    523a:	4313      	orrs	r3, r2
    523c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    523e:	4a04      	ldr	r2, [pc, #16]	; (5250 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5240:	9b02      	ldr	r3, [sp, #8]
    5242:	6053      	str	r3, [r2, #4]
}
    5244:	bf00      	nop
    5246:	b004      	add	sp, #16
    5248:	4770      	bx	lr
    524a:	bf00      	nop
    524c:	00016070 	.word	0x00016070
    5250:	40048000 	.word	0x40048000

00005254 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    5254:	b500      	push	{lr}
    5256:	b085      	sub	sp, #20
    5258:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    525a:	2300      	movs	r3, #0
    525c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    5260:	9b01      	ldr	r3, [sp, #4]
    5262:	2b00      	cmp	r3, #0
    5264:	d037      	beq.n	52d6 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5266:	2300      	movs	r3, #0
    5268:	9303      	str	r3, [sp, #12]
    526a:	e02b      	b.n	52c4 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    526c:	4b29      	ldr	r3, [pc, #164]	; (5314 <DisableSafeClock+0xc0>)
    526e:	6819      	ldr	r1, [r3, #0]
    5270:	9a03      	ldr	r2, [sp, #12]
    5272:	4613      	mov	r3, r2
    5274:	005b      	lsls	r3, r3, #1
    5276:	4413      	add	r3, r2
    5278:	009b      	lsls	r3, r3, #2
    527a:	440b      	add	r3, r1
    527c:	3314      	adds	r3, #20
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	2b05      	cmp	r3, #5
    5282:	d11c      	bne.n	52be <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    5284:	2301      	movs	r3, #1
    5286:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    528a:	4b22      	ldr	r3, [pc, #136]	; (5314 <DisableSafeClock+0xc0>)
    528c:	6819      	ldr	r1, [r3, #0]
    528e:	9a03      	ldr	r2, [sp, #12]
    5290:	4613      	mov	r3, r2
    5292:	005b      	lsls	r3, r3, #1
    5294:	4413      	add	r3, r2
    5296:	009b      	lsls	r3, r3, #2
    5298:	440b      	add	r3, r1
    529a:	3318      	adds	r3, #24
    529c:	881b      	ldrh	r3, [r3, #0]
    529e:	2b00      	cmp	r3, #0
    52a0:	d118      	bne.n	52d4 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    52a2:	4b1d      	ldr	r3, [pc, #116]	; (5318 <DisableSafeClock+0xc4>)
    52a4:	791b      	ldrb	r3, [r3, #4]
    52a6:	4619      	mov	r1, r3
    52a8:	4a1c      	ldr	r2, [pc, #112]	; (531c <DisableSafeClock+0xc8>)
    52aa:	460b      	mov	r3, r1
    52ac:	005b      	lsls	r3, r3, #1
    52ae:	440b      	add	r3, r1
    52b0:	009b      	lsls	r3, r3, #2
    52b2:	4413      	add	r3, r2
    52b4:	3308      	adds	r3, #8
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	2005      	movs	r0, #5
    52ba:	4798      	blx	r3
                }
                break;
    52bc:	e00a      	b.n	52d4 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    52be:	9b03      	ldr	r3, [sp, #12]
    52c0:	3301      	adds	r3, #1
    52c2:	9303      	str	r3, [sp, #12]
    52c4:	4b13      	ldr	r3, [pc, #76]	; (5314 <DisableSafeClock+0xc0>)
    52c6:	681b      	ldr	r3, [r3, #0]
    52c8:	7a1b      	ldrb	r3, [r3, #8]
    52ca:	461a      	mov	r2, r3
    52cc:	9b03      	ldr	r3, [sp, #12]
    52ce:	4293      	cmp	r3, r2
    52d0:	d3cc      	bcc.n	526c <DisableSafeClock+0x18>
    52d2:	e000      	b.n	52d6 <DisableSafeClock+0x82>
                break;
    52d4:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    52d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    52da:	f083 0301 	eor.w	r3, r3, #1
    52de:	b2db      	uxtb	r3, r3
    52e0:	2b00      	cmp	r3, #0
    52e2:	d013      	beq.n	530c <DisableSafeClock+0xb8>
    52e4:	4b0e      	ldr	r3, [pc, #56]	; (5320 <DisableSafeClock+0xcc>)
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	f083 0301 	eor.w	r3, r3, #1
    52ec:	b2db      	uxtb	r3, r3
    52ee:	2b00      	cmp	r3, #0
    52f0:	d00c      	beq.n	530c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    52f2:	4b09      	ldr	r3, [pc, #36]	; (5318 <DisableSafeClock+0xc4>)
    52f4:	791b      	ldrb	r3, [r3, #4]
    52f6:	4619      	mov	r1, r3
    52f8:	4a08      	ldr	r2, [pc, #32]	; (531c <DisableSafeClock+0xc8>)
    52fa:	460b      	mov	r3, r1
    52fc:	005b      	lsls	r3, r3, #1
    52fe:	440b      	add	r3, r1
    5300:	009b      	lsls	r3, r3, #2
    5302:	4413      	add	r3, r2
    5304:	3308      	adds	r3, #8
    5306:	681b      	ldr	r3, [r3, #0]
    5308:	2005      	movs	r0, #5
    530a:	4798      	blx	r3
    }
}
    530c:	bf00      	nop
    530e:	b005      	add	sp, #20
    5310:	f85d fb04 	ldr.w	pc, [sp], #4
    5314:	1fff8bc8 	.word	0x1fff8bc8
    5318:	00015cf0 	.word	0x00015cf0
    531c:	00016320 	.word	0x00016320
    5320:	1fff8b18 	.word	0x1fff8b18

00005324 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    5324:	4b06      	ldr	r3, [pc, #24]	; (5340 <SetFircToResetValue_TrustedCall+0x1c>)
    5326:	2200      	movs	r2, #0
    5328:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    532c:	4b04      	ldr	r3, [pc, #16]	; (5340 <SetFircToResetValue_TrustedCall+0x1c>)
    532e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5332:	4a03      	ldr	r2, [pc, #12]	; (5340 <SetFircToResetValue_TrustedCall+0x1c>)
    5334:	f043 0301 	orr.w	r3, r3, #1
    5338:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    533c:	bf00      	nop
    533e:	4770      	bx	lr
    5340:	40064000 	.word	0x40064000

00005344 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    5344:	b084      	sub	sp, #16
    5346:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    5348:	2303      	movs	r3, #3
    534a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    534c:	2300      	movs	r3, #0
    534e:	9302      	str	r3, [sp, #8]
    5350:	e028      	b.n	53a4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    5352:	9b01      	ldr	r3, [sp, #4]
    5354:	9a02      	ldr	r2, [sp, #8]
    5356:	320d      	adds	r2, #13
    5358:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    535c:	2b28      	cmp	r3, #40	; 0x28
    535e:	d10b      	bne.n	5378 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5360:	9a01      	ldr	r2, [sp, #4]
    5362:	9b02      	ldr	r3, [sp, #8]
    5364:	330d      	adds	r3, #13
    5366:	00db      	lsls	r3, r3, #3
    5368:	4413      	add	r3, r2
    536a:	685b      	ldr	r3, [r3, #4]
    536c:	4a2b      	ldr	r2, [pc, #172]	; (541c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    536e:	5cd3      	ldrb	r3, [r2, r3]
    5370:	011b      	lsls	r3, r3, #4
    5372:	9a03      	ldr	r2, [sp, #12]
    5374:	4313      	orrs	r3, r2
    5376:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    5378:	9b01      	ldr	r3, [sp, #4]
    537a:	9a02      	ldr	r2, [sp, #8]
    537c:	320d      	adds	r2, #13
    537e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5382:	2b29      	cmp	r3, #41	; 0x29
    5384:	d10b      	bne.n	539e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5386:	9a01      	ldr	r2, [sp, #4]
    5388:	9b02      	ldr	r3, [sp, #8]
    538a:	330d      	adds	r3, #13
    538c:	00db      	lsls	r3, r3, #3
    538e:	4413      	add	r3, r2
    5390:	685b      	ldr	r3, [r3, #4]
    5392:	4a23      	ldr	r2, [pc, #140]	; (5420 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    5394:	5cd3      	ldrb	r3, [r2, r3]
    5396:	009b      	lsls	r3, r3, #2
    5398:	9a03      	ldr	r2, [sp, #12]
    539a:	4313      	orrs	r3, r2
    539c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    539e:	9b02      	ldr	r3, [sp, #8]
    53a0:	3301      	adds	r3, #1
    53a2:	9302      	str	r3, [sp, #8]
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	7adb      	ldrb	r3, [r3, #11]
    53a8:	461a      	mov	r2, r3
    53aa:	9b02      	ldr	r3, [sp, #8]
    53ac:	4293      	cmp	r3, r2
    53ae:	d3d0      	bcc.n	5352 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    53b0:	2300      	movs	r3, #0
    53b2:	9302      	str	r3, [sp, #8]
    53b4:	e026      	b.n	5404 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    53b6:	9a01      	ldr	r2, [sp, #4]
    53b8:	9b02      	ldr	r3, [sp, #8]
    53ba:	334e      	adds	r3, #78	; 0x4e
    53bc:	00db      	lsls	r3, r3, #3
    53be:	4413      	add	r3, r2
    53c0:	685b      	ldr	r3, [r3, #4]
    53c2:	2b12      	cmp	r3, #18
    53c4:	d109      	bne.n	53da <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    53c6:	9a01      	ldr	r2, [sp, #4]
    53c8:	9b02      	ldr	r3, [sp, #8]
    53ca:	334e      	adds	r3, #78	; 0x4e
    53cc:	00db      	lsls	r3, r3, #3
    53ce:	4413      	add	r3, r2
    53d0:	891b      	ldrh	r3, [r3, #8]
    53d2:	005b      	lsls	r3, r3, #1
    53d4:	9a03      	ldr	r2, [sp, #12]
    53d6:	4313      	orrs	r3, r2
    53d8:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    53da:	9a01      	ldr	r2, [sp, #4]
    53dc:	9b02      	ldr	r3, [sp, #8]
    53de:	334e      	adds	r3, #78	; 0x4e
    53e0:	00db      	lsls	r3, r3, #3
    53e2:	4413      	add	r3, r2
    53e4:	685b      	ldr	r3, [r3, #4]
    53e6:	2b13      	cmp	r3, #19
    53e8:	d109      	bne.n	53fe <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    53ea:	9a01      	ldr	r2, [sp, #4]
    53ec:	9b02      	ldr	r3, [sp, #8]
    53ee:	334e      	adds	r3, #78	; 0x4e
    53f0:	00db      	lsls	r3, r3, #3
    53f2:	4413      	add	r3, r2
    53f4:	891b      	ldrh	r3, [r3, #8]
    53f6:	461a      	mov	r2, r3
    53f8:	9b03      	ldr	r3, [sp, #12]
    53fa:	4313      	orrs	r3, r2
    53fc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    53fe:	9b02      	ldr	r3, [sp, #8]
    5400:	3301      	adds	r3, #1
    5402:	9302      	str	r3, [sp, #8]
    5404:	9b01      	ldr	r3, [sp, #4]
    5406:	7c1b      	ldrb	r3, [r3, #16]
    5408:	461a      	mov	r2, r3
    540a:	9b02      	ldr	r3, [sp, #8]
    540c:	4293      	cmp	r3, r2
    540e:	d3d2      	bcc.n	53b6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5410:	4a04      	ldr	r2, [pc, #16]	; (5424 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    5412:	9b03      	ldr	r3, [sp, #12]
    5414:	6113      	str	r3, [r2, #16]
}
    5416:	bf00      	nop
    5418:	b004      	add	sp, #16
    541a:	4770      	bx	lr
    541c:	00016070 	.word	0x00016070
    5420:	00016128 	.word	0x00016128
    5424:	40048000 	.word	0x40048000

00005428 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5428:	b500      	push	{lr}
    542a:	b089      	sub	sp, #36	; 0x24
    542c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    542e:	2300      	movs	r3, #0
    5430:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    5434:	4a21      	ldr	r2, [pc, #132]	; (54bc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    5436:	9b01      	ldr	r3, [sp, #4]
    5438:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    543a:	4b21      	ldr	r3, [pc, #132]	; (54c0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    543c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5440:	f003 0301 	and.w	r3, r3, #1
    5444:	2b00      	cmp	r3, #0
    5446:	d12e      	bne.n	54a6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    5448:	4b1e      	ldr	r3, [pc, #120]	; (54c4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    544a:	2200      	movs	r2, #0
    544c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    544e:	f7ff ff69 	bl	5324 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    5452:	aa03      	add	r2, sp, #12
    5454:	a904      	add	r1, sp, #16
    5456:	a805      	add	r0, sp, #20
    5458:	f24c 3350 	movw	r3, #50000	; 0xc350
    545c:	f7fe f8ae 	bl	35bc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    5460:	4b17      	ldr	r3, [pc, #92]	; (54c0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5466:	0e1b      	lsrs	r3, r3, #24
    5468:	f003 0301 	and.w	r3, r3, #1
    546c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    546e:	9a03      	ldr	r2, [sp, #12]
    5470:	a904      	add	r1, sp, #16
    5472:	ab05      	add	r3, sp, #20
    5474:	4618      	mov	r0, r3
    5476:	f7fe f8bb 	bl	35f0 <Clock_Ip_TimeoutExpired>
    547a:	4603      	mov	r3, r0
    547c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    5480:	9b06      	ldr	r3, [sp, #24]
    5482:	2b00      	cmp	r3, #0
    5484:	d106      	bne.n	5494 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    5486:	f89d 301f 	ldrb.w	r3, [sp, #31]
    548a:	f083 0301 	eor.w	r3, r3, #1
    548e:	b2db      	uxtb	r3, r3
    5490:	2b00      	cmp	r3, #0
    5492:	d1e5      	bne.n	5460 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    5494:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5498:	2b00      	cmp	r3, #0
    549a:	d007      	beq.n	54ac <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    549c:	2105      	movs	r1, #5
    549e:	2001      	movs	r0, #1
    54a0:	f7fe f87c 	bl	359c <Clock_Ip_ReportClockErrors>
    54a4:	e002      	b.n	54ac <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    54a6:	4b07      	ldr	r3, [pc, #28]	; (54c4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    54a8:	2201      	movs	r2, #1
    54aa:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    54ac:	9801      	ldr	r0, [sp, #4]
    54ae:	f7ff ff49 	bl	5344 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    54b2:	bf00      	nop
    54b4:	b009      	add	sp, #36	; 0x24
    54b6:	f85d fb04 	ldr.w	pc, [sp], #4
    54ba:	bf00      	nop
    54bc:	1fff8bc8 	.word	0x1fff8bc8
    54c0:	40064000 	.word	0x40064000
    54c4:	1fff8b18 	.word	0x1fff8b18

000054c8 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    54c8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    54ca:	2300      	movs	r3, #0
    54cc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    54ce:	4b29      	ldr	r3, [pc, #164]	; (5574 <getFircConfig+0xac>)
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	2b00      	cmp	r3, #0
    54d4:	d024      	beq.n	5520 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    54d6:	2300      	movs	r3, #0
    54d8:	9301      	str	r3, [sp, #4]
    54da:	e01a      	b.n	5512 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    54dc:	4b25      	ldr	r3, [pc, #148]	; (5574 <getFircConfig+0xac>)
    54de:	6819      	ldr	r1, [r3, #0]
    54e0:	9a01      	ldr	r2, [sp, #4]
    54e2:	4613      	mov	r3, r2
    54e4:	005b      	lsls	r3, r3, #1
    54e6:	4413      	add	r3, r2
    54e8:	009b      	lsls	r3, r3, #2
    54ea:	440b      	add	r3, r1
    54ec:	3314      	adds	r3, #20
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	2b05      	cmp	r3, #5
    54f2:	d10b      	bne.n	550c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    54f4:	4b1f      	ldr	r3, [pc, #124]	; (5574 <getFircConfig+0xac>)
    54f6:	6819      	ldr	r1, [r3, #0]
    54f8:	9a01      	ldr	r2, [sp, #4]
    54fa:	4613      	mov	r3, r2
    54fc:	005b      	lsls	r3, r3, #1
    54fe:	4413      	add	r3, r2
    5500:	009b      	lsls	r3, r3, #2
    5502:	3310      	adds	r3, #16
    5504:	440b      	add	r3, r1
    5506:	3304      	adds	r3, #4
    5508:	9300      	str	r3, [sp, #0]
                break;
    550a:	e009      	b.n	5520 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    550c:	9b01      	ldr	r3, [sp, #4]
    550e:	3301      	adds	r3, #1
    5510:	9301      	str	r3, [sp, #4]
    5512:	4b18      	ldr	r3, [pc, #96]	; (5574 <getFircConfig+0xac>)
    5514:	681b      	ldr	r3, [r3, #0]
    5516:	7a1b      	ldrb	r3, [r3, #8]
    5518:	461a      	mov	r2, r3
    551a:	9b01      	ldr	r3, [sp, #4]
    551c:	4293      	cmp	r3, r2
    551e:	d3dd      	bcc.n	54dc <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5520:	9b00      	ldr	r3, [sp, #0]
    5522:	2b00      	cmp	r3, #0
    5524:	d121      	bne.n	556a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    5526:	4b14      	ldr	r3, [pc, #80]	; (5578 <getFircConfig+0xb0>)
    5528:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    552a:	4b13      	ldr	r3, [pc, #76]	; (5578 <getFircConfig+0xb0>)
    552c:	2205      	movs	r2, #5
    552e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    5530:	4b12      	ldr	r3, [pc, #72]	; (557c <getFircConfig+0xb4>)
    5532:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5536:	b29b      	uxth	r3, r3
    5538:	f003 0301 	and.w	r3, r3, #1
    553c:	b29a      	uxth	r2, r3
    553e:	4b0e      	ldr	r3, [pc, #56]	; (5578 <getFircConfig+0xb0>)
    5540:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    5542:	4b0e      	ldr	r3, [pc, #56]	; (557c <getFircConfig+0xb4>)
    5544:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    5548:	b2db      	uxtb	r3, r3
    554a:	f003 0303 	and.w	r3, r3, #3
    554e:	b2da      	uxtb	r2, r3
    5550:	4b09      	ldr	r3, [pc, #36]	; (5578 <getFircConfig+0xb0>)
    5552:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    5554:	4b09      	ldr	r3, [pc, #36]	; (557c <getFircConfig+0xb4>)
    5556:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    555a:	b2db      	uxtb	r3, r3
    555c:	10db      	asrs	r3, r3, #3
    555e:	b2db      	uxtb	r3, r3
    5560:	f003 0301 	and.w	r3, r3, #1
    5564:	b2da      	uxtb	r2, r3
    5566:	4b04      	ldr	r3, [pc, #16]	; (5578 <getFircConfig+0xb0>)
    5568:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    556a:	9b00      	ldr	r3, [sp, #0]
}
    556c:	4618      	mov	r0, r3
    556e:	b002      	add	sp, #8
    5570:	4770      	bx	lr
    5572:	bf00      	nop
    5574:	1fff8bc8 	.word	0x1fff8bc8
    5578:	1fff8c34 	.word	0x1fff8c34
    557c:	40064000 	.word	0x40064000

00005580 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    5580:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    5582:	2300      	movs	r3, #0
    5584:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5586:	4b20      	ldr	r3, [pc, #128]	; (5608 <getSoscConfig+0x88>)
    5588:	681b      	ldr	r3, [r3, #0]
    558a:	2b00      	cmp	r3, #0
    558c:	d024      	beq.n	55d8 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    558e:	2300      	movs	r3, #0
    5590:	9301      	str	r3, [sp, #4]
    5592:	e01a      	b.n	55ca <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    5594:	4b1c      	ldr	r3, [pc, #112]	; (5608 <getSoscConfig+0x88>)
    5596:	6819      	ldr	r1, [r3, #0]
    5598:	9a01      	ldr	r2, [sp, #4]
    559a:	4613      	mov	r3, r2
    559c:	009b      	lsls	r3, r3, #2
    559e:	4413      	add	r3, r2
    55a0:	009b      	lsls	r3, r3, #2
    55a2:	440b      	add	r3, r1
    55a4:	332c      	adds	r3, #44	; 0x2c
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	2b08      	cmp	r3, #8
    55aa:	d10b      	bne.n	55c4 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    55ac:	4b16      	ldr	r3, [pc, #88]	; (5608 <getSoscConfig+0x88>)
    55ae:	6819      	ldr	r1, [r3, #0]
    55b0:	9a01      	ldr	r2, [sp, #4]
    55b2:	4613      	mov	r3, r2
    55b4:	009b      	lsls	r3, r3, #2
    55b6:	4413      	add	r3, r2
    55b8:	009b      	lsls	r3, r3, #2
    55ba:	3328      	adds	r3, #40	; 0x28
    55bc:	440b      	add	r3, r1
    55be:	3304      	adds	r3, #4
    55c0:	9300      	str	r3, [sp, #0]
                break;
    55c2:	e009      	b.n	55d8 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    55c4:	9b01      	ldr	r3, [sp, #4]
    55c6:	3301      	adds	r3, #1
    55c8:	9301      	str	r3, [sp, #4]
    55ca:	4b0f      	ldr	r3, [pc, #60]	; (5608 <getSoscConfig+0x88>)
    55cc:	681b      	ldr	r3, [r3, #0]
    55ce:	7a5b      	ldrb	r3, [r3, #9]
    55d0:	461a      	mov	r2, r3
    55d2:	9b01      	ldr	r3, [sp, #4]
    55d4:	4293      	cmp	r3, r2
    55d6:	d3dd      	bcc.n	5594 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    55d8:	9b00      	ldr	r3, [sp, #0]
    55da:	2b00      	cmp	r3, #0
    55dc:	d110      	bne.n	5600 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    55de:	4b0b      	ldr	r3, [pc, #44]	; (560c <getSoscConfig+0x8c>)
    55e0:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    55e2:	4b0a      	ldr	r3, [pc, #40]	; (560c <getSoscConfig+0x8c>)
    55e4:	2208      	movs	r2, #8
    55e6:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    55e8:	4b09      	ldr	r3, [pc, #36]	; (5610 <getSoscConfig+0x90>)
    55ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    55ee:	b29b      	uxth	r3, r3
    55f0:	f003 0301 	and.w	r3, r3, #1
    55f4:	b29a      	uxth	r2, r3
    55f6:	4b05      	ldr	r3, [pc, #20]	; (560c <getSoscConfig+0x8c>)
    55f8:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    55fa:	4b04      	ldr	r3, [pc, #16]	; (560c <getSoscConfig+0x8c>)
    55fc:	4a05      	ldr	r2, [pc, #20]	; (5614 <getSoscConfig+0x94>)
    55fe:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5600:	9b00      	ldr	r3, [sp, #0]
}
    5602:	4618      	mov	r0, r3
    5604:	b002      	add	sp, #8
    5606:	4770      	bx	lr
    5608:	1fff8bc8 	.word	0x1fff8bc8
    560c:	1fff8c40 	.word	0x1fff8c40
    5610:	40064000 	.word	0x40064000
    5614:	02625a00 	.word	0x02625a00

00005618 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5618:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    561a:	2300      	movs	r3, #0
    561c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    561e:	4b28      	ldr	r3, [pc, #160]	; (56c0 <getSpllConfig+0xa8>)
    5620:	681b      	ldr	r3, [r3, #0]
    5622:	2b00      	cmp	r3, #0
    5624:	d023      	beq.n	566e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5626:	2300      	movs	r3, #0
    5628:	9301      	str	r3, [sp, #4]
    562a:	e019      	b.n	5660 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    562c:	4b24      	ldr	r3, [pc, #144]	; (56c0 <getSpllConfig+0xa8>)
    562e:	6819      	ldr	r1, [r3, #0]
    5630:	9a01      	ldr	r2, [sp, #4]
    5632:	4613      	mov	r3, r2
    5634:	009b      	lsls	r3, r3, #2
    5636:	4413      	add	r3, r2
    5638:	00db      	lsls	r3, r3, #3
    563a:	440b      	add	r3, r1
    563c:	3340      	adds	r3, #64	; 0x40
    563e:	681b      	ldr	r3, [r3, #0]
    5640:	2b09      	cmp	r3, #9
    5642:	d10a      	bne.n	565a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5644:	4b1e      	ldr	r3, [pc, #120]	; (56c0 <getSpllConfig+0xa8>)
    5646:	6819      	ldr	r1, [r3, #0]
    5648:	9a01      	ldr	r2, [sp, #4]
    564a:	4613      	mov	r3, r2
    564c:	009b      	lsls	r3, r3, #2
    564e:	4413      	add	r3, r2
    5650:	00db      	lsls	r3, r3, #3
    5652:	3340      	adds	r3, #64	; 0x40
    5654:	440b      	add	r3, r1
    5656:	9300      	str	r3, [sp, #0]
                break;
    5658:	e009      	b.n	566e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    565a:	9b01      	ldr	r3, [sp, #4]
    565c:	3301      	adds	r3, #1
    565e:	9301      	str	r3, [sp, #4]
    5660:	4b17      	ldr	r3, [pc, #92]	; (56c0 <getSpllConfig+0xa8>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	7a9b      	ldrb	r3, [r3, #10]
    5666:	461a      	mov	r2, r3
    5668:	9b01      	ldr	r3, [sp, #4]
    566a:	4293      	cmp	r3, r2
    566c:	d3de      	bcc.n	562c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    566e:	9b00      	ldr	r3, [sp, #0]
    5670:	2b00      	cmp	r3, #0
    5672:	d121      	bne.n	56b8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5674:	4b13      	ldr	r3, [pc, #76]	; (56c4 <getSpllConfig+0xac>)
    5676:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5678:	4b12      	ldr	r3, [pc, #72]	; (56c4 <getSpllConfig+0xac>)
    567a:	2209      	movs	r2, #9
    567c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    567e:	4b12      	ldr	r3, [pc, #72]	; (56c8 <getSpllConfig+0xb0>)
    5680:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5684:	b29b      	uxth	r3, r3
    5686:	f003 0301 	and.w	r3, r3, #1
    568a:	b29a      	uxth	r2, r3
    568c:	4b0d      	ldr	r3, [pc, #52]	; (56c4 <getSpllConfig+0xac>)
    568e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5690:	4b0d      	ldr	r3, [pc, #52]	; (56c8 <getSpllConfig+0xb0>)
    5692:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5696:	0a1b      	lsrs	r3, r3, #8
    5698:	b2db      	uxtb	r3, r3
    569a:	f003 0307 	and.w	r3, r3, #7
    569e:	b2da      	uxtb	r2, r3
    56a0:	4b08      	ldr	r3, [pc, #32]	; (56c4 <getSpllConfig+0xac>)
    56a2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    56a4:	4b08      	ldr	r3, [pc, #32]	; (56c8 <getSpllConfig+0xb0>)
    56a6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    56aa:	0c1b      	lsrs	r3, r3, #16
    56ac:	b2db      	uxtb	r3, r3
    56ae:	f003 031f 	and.w	r3, r3, #31
    56b2:	b2da      	uxtb	r2, r3
    56b4:	4b03      	ldr	r3, [pc, #12]	; (56c4 <getSpllConfig+0xac>)
    56b6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    56b8:	9b00      	ldr	r3, [sp, #0]
}
    56ba:	4618      	mov	r0, r3
    56bc:	b002      	add	sp, #8
    56be:	4770      	bx	lr
    56c0:	1fff8bc8 	.word	0x1fff8bc8
    56c4:	1fff8c54 	.word	0x1fff8c54
    56c8:	40064000 	.word	0x40064000

000056cc <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    56cc:	b086      	sub	sp, #24
    56ce:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    56d0:	2300      	movs	r3, #0
    56d2:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    56d4:	9b01      	ldr	r3, [sp, #4]
    56d6:	2b1b      	cmp	r3, #27
    56d8:	d00f      	beq.n	56fa <getSelectorConfig+0x2e>
    56da:	9b01      	ldr	r3, [sp, #4]
    56dc:	2b1b      	cmp	r3, #27
    56de:	d80f      	bhi.n	5700 <getSelectorConfig+0x34>
    56e0:	9b01      	ldr	r3, [sp, #4]
    56e2:	2b19      	cmp	r3, #25
    56e4:	d003      	beq.n	56ee <getSelectorConfig+0x22>
    56e6:	9b01      	ldr	r3, [sp, #4]
    56e8:	2b1a      	cmp	r3, #26
    56ea:	d003      	beq.n	56f4 <getSelectorConfig+0x28>
    56ec:	e008      	b.n	5700 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    56ee:	2300      	movs	r3, #0
    56f0:	9304      	str	r3, [sp, #16]
            break;
    56f2:	e008      	b.n	5706 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    56f4:	2301      	movs	r3, #1
    56f6:	9304      	str	r3, [sp, #16]
            break;
    56f8:	e005      	b.n	5706 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    56fa:	2302      	movs	r3, #2
    56fc:	9304      	str	r3, [sp, #16]
            break;
    56fe:	e002      	b.n	5706 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5700:	2300      	movs	r3, #0
    5702:	9304      	str	r3, [sp, #16]
            break;
    5704:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5706:	4b36      	ldr	r3, [pc, #216]	; (57e0 <getSelectorConfig+0x114>)
    5708:	681b      	ldr	r3, [r3, #0]
    570a:	2b00      	cmp	r3, #0
    570c:	d01d      	beq.n	574a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    570e:	2300      	movs	r3, #0
    5710:	9303      	str	r3, [sp, #12]
    5712:	e013      	b.n	573c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5714:	4b32      	ldr	r3, [pc, #200]	; (57e0 <getSelectorConfig+0x114>)
    5716:	681b      	ldr	r3, [r3, #0]
    5718:	9a03      	ldr	r2, [sp, #12]
    571a:	320d      	adds	r2, #13
    571c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5720:	9a01      	ldr	r2, [sp, #4]
    5722:	429a      	cmp	r2, r3
    5724:	d107      	bne.n	5736 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5726:	4b2e      	ldr	r3, [pc, #184]	; (57e0 <getSelectorConfig+0x114>)
    5728:	681a      	ldr	r2, [r3, #0]
    572a:	9b03      	ldr	r3, [sp, #12]
    572c:	330d      	adds	r3, #13
    572e:	00db      	lsls	r3, r3, #3
    5730:	4413      	add	r3, r2
    5732:	9305      	str	r3, [sp, #20]
                break;
    5734:	e009      	b.n	574a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5736:	9b03      	ldr	r3, [sp, #12]
    5738:	3301      	adds	r3, #1
    573a:	9303      	str	r3, [sp, #12]
    573c:	4b28      	ldr	r3, [pc, #160]	; (57e0 <getSelectorConfig+0x114>)
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	7adb      	ldrb	r3, [r3, #11]
    5742:	461a      	mov	r2, r3
    5744:	9b03      	ldr	r3, [sp, #12]
    5746:	4293      	cmp	r3, r2
    5748:	d3e4      	bcc.n	5714 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    574a:	9b05      	ldr	r3, [sp, #20]
    574c:	2b00      	cmp	r3, #0
    574e:	d140      	bne.n	57d2 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5750:	9b04      	ldr	r3, [sp, #16]
    5752:	00db      	lsls	r3, r3, #3
    5754:	4a23      	ldr	r2, [pc, #140]	; (57e4 <getSelectorConfig+0x118>)
    5756:	4413      	add	r3, r2
    5758:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    575a:	4922      	ldr	r1, [pc, #136]	; (57e4 <getSelectorConfig+0x118>)
    575c:	9b04      	ldr	r3, [sp, #16]
    575e:	9a01      	ldr	r2, [sp, #4]
    5760:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5764:	9b01      	ldr	r3, [sp, #4]
    5766:	2b1b      	cmp	r3, #27
    5768:	d025      	beq.n	57b6 <getSelectorConfig+0xea>
    576a:	9b01      	ldr	r3, [sp, #4]
    576c:	2b1b      	cmp	r3, #27
    576e:	d832      	bhi.n	57d6 <getSelectorConfig+0x10a>
    5770:	9b01      	ldr	r3, [sp, #4]
    5772:	2b19      	cmp	r3, #25
    5774:	d003      	beq.n	577e <getSelectorConfig+0xb2>
    5776:	9b01      	ldr	r3, [sp, #4]
    5778:	2b1a      	cmp	r3, #26
    577a:	d00e      	beq.n	579a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    577c:	e02b      	b.n	57d6 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    577e:	4b1a      	ldr	r3, [pc, #104]	; (57e8 <getSelectorConfig+0x11c>)
    5780:	695b      	ldr	r3, [r3, #20]
    5782:	0e1b      	lsrs	r3, r3, #24
    5784:	f003 030f 	and.w	r3, r3, #15
    5788:	4a18      	ldr	r2, [pc, #96]	; (57ec <getSelectorConfig+0x120>)
    578a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    578e:	4915      	ldr	r1, [pc, #84]	; (57e4 <getSelectorConfig+0x118>)
    5790:	9b04      	ldr	r3, [sp, #16]
    5792:	00db      	lsls	r3, r3, #3
    5794:	440b      	add	r3, r1
    5796:	605a      	str	r2, [r3, #4]
                break;
    5798:	e01e      	b.n	57d8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    579a:	4b13      	ldr	r3, [pc, #76]	; (57e8 <getSelectorConfig+0x11c>)
    579c:	699b      	ldr	r3, [r3, #24]
    579e:	0e1b      	lsrs	r3, r3, #24
    57a0:	f003 030f 	and.w	r3, r3, #15
    57a4:	4a11      	ldr	r2, [pc, #68]	; (57ec <getSelectorConfig+0x120>)
    57a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    57aa:	490e      	ldr	r1, [pc, #56]	; (57e4 <getSelectorConfig+0x118>)
    57ac:	9b04      	ldr	r3, [sp, #16]
    57ae:	00db      	lsls	r3, r3, #3
    57b0:	440b      	add	r3, r1
    57b2:	605a      	str	r2, [r3, #4]
                break;
    57b4:	e010      	b.n	57d8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    57b6:	4b0c      	ldr	r3, [pc, #48]	; (57e8 <getSelectorConfig+0x11c>)
    57b8:	69db      	ldr	r3, [r3, #28]
    57ba:	0e1b      	lsrs	r3, r3, #24
    57bc:	f003 030f 	and.w	r3, r3, #15
    57c0:	4a0a      	ldr	r2, [pc, #40]	; (57ec <getSelectorConfig+0x120>)
    57c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    57c6:	4907      	ldr	r1, [pc, #28]	; (57e4 <getSelectorConfig+0x118>)
    57c8:	9b04      	ldr	r3, [sp, #16]
    57ca:	00db      	lsls	r3, r3, #3
    57cc:	440b      	add	r3, r1
    57ce:	605a      	str	r2, [r3, #4]
                break;
    57d0:	e002      	b.n	57d8 <getSelectorConfig+0x10c>
        }
    }
    57d2:	bf00      	nop
    57d4:	e000      	b.n	57d8 <getSelectorConfig+0x10c>
                break;
    57d6:	bf00      	nop

    return ReturnValue;
    57d8:	9b05      	ldr	r3, [sp, #20]
}
    57da:	4618      	mov	r0, r3
    57dc:	b006      	add	sp, #24
    57de:	4770      	bx	lr
    57e0:	1fff8bc8 	.word	0x1fff8bc8
    57e4:	1fff8c7c 	.word	0x1fff8c7c
    57e8:	40064000 	.word	0x40064000
    57ec:	000163f0 	.word	0x000163f0

000057f0 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    57f0:	b086      	sub	sp, #24
    57f2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    57f4:	2300      	movs	r3, #0
    57f6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    57f8:	2300      	movs	r3, #0
    57fa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    57fc:	9b01      	ldr	r3, [sp, #4]
    57fe:	2b1f      	cmp	r3, #31
    5800:	d00f      	beq.n	5822 <getCoreDividerConfig+0x32>
    5802:	9b01      	ldr	r3, [sp, #4]
    5804:	2b1f      	cmp	r3, #31
    5806:	d80f      	bhi.n	5828 <getCoreDividerConfig+0x38>
    5808:	9b01      	ldr	r3, [sp, #4]
    580a:	2b1d      	cmp	r3, #29
    580c:	d003      	beq.n	5816 <getCoreDividerConfig+0x26>
    580e:	9b01      	ldr	r3, [sp, #4]
    5810:	2b1e      	cmp	r3, #30
    5812:	d003      	beq.n	581c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5814:	e008      	b.n	5828 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5816:	2300      	movs	r3, #0
    5818:	9304      	str	r3, [sp, #16]
            break;
    581a:	e006      	b.n	582a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    581c:	2301      	movs	r3, #1
    581e:	9304      	str	r3, [sp, #16]
            break;
    5820:	e003      	b.n	582a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5822:	2302      	movs	r3, #2
    5824:	9304      	str	r3, [sp, #16]
            break;
    5826:	e000      	b.n	582a <getCoreDividerConfig+0x3a>
                break;
    5828:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    582a:	4b41      	ldr	r3, [pc, #260]	; (5930 <getCoreDividerConfig+0x140>)
    582c:	681b      	ldr	r3, [r3, #0]
    582e:	2b00      	cmp	r3, #0
    5830:	d026      	beq.n	5880 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5832:	2300      	movs	r3, #0
    5834:	9303      	str	r3, [sp, #12]
    5836:	e01c      	b.n	5872 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5838:	4b3d      	ldr	r3, [pc, #244]	; (5930 <getCoreDividerConfig+0x140>)
    583a:	6819      	ldr	r1, [r3, #0]
    583c:	9a03      	ldr	r2, [sp, #12]
    583e:	4613      	mov	r3, r2
    5840:	005b      	lsls	r3, r3, #1
    5842:	4413      	add	r3, r2
    5844:	009b      	lsls	r3, r3, #2
    5846:	440b      	add	r3, r1
    5848:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	9a01      	ldr	r2, [sp, #4]
    5850:	429a      	cmp	r2, r3
    5852:	d10b      	bne.n	586c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5854:	4b36      	ldr	r3, [pc, #216]	; (5930 <getCoreDividerConfig+0x140>)
    5856:	6819      	ldr	r1, [r3, #0]
    5858:	9a03      	ldr	r2, [sp, #12]
    585a:	4613      	mov	r3, r2
    585c:	005b      	lsls	r3, r3, #1
    585e:	4413      	add	r3, r2
    5860:	009b      	lsls	r3, r3, #2
    5862:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5866:	440b      	add	r3, r1
    5868:	9305      	str	r3, [sp, #20]
                break;
    586a:	e009      	b.n	5880 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    586c:	9b03      	ldr	r3, [sp, #12]
    586e:	3301      	adds	r3, #1
    5870:	9303      	str	r3, [sp, #12]
    5872:	4b2f      	ldr	r3, [pc, #188]	; (5930 <getCoreDividerConfig+0x140>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	7b1b      	ldrb	r3, [r3, #12]
    5878:	461a      	mov	r2, r3
    587a:	9b03      	ldr	r3, [sp, #12]
    587c:	4293      	cmp	r3, r2
    587e:	d3db      	bcc.n	5838 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5880:	9b05      	ldr	r3, [sp, #20]
    5882:	2b00      	cmp	r3, #0
    5884:	d14d      	bne.n	5922 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5886:	9a04      	ldr	r2, [sp, #16]
    5888:	4613      	mov	r3, r2
    588a:	005b      	lsls	r3, r3, #1
    588c:	4413      	add	r3, r2
    588e:	009b      	lsls	r3, r3, #2
    5890:	4a28      	ldr	r2, [pc, #160]	; (5934 <getCoreDividerConfig+0x144>)
    5892:	4413      	add	r3, r2
    5894:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5896:	4927      	ldr	r1, [pc, #156]	; (5934 <getCoreDividerConfig+0x144>)
    5898:	9a04      	ldr	r2, [sp, #16]
    589a:	4613      	mov	r3, r2
    589c:	005b      	lsls	r3, r3, #1
    589e:	4413      	add	r3, r2
    58a0:	009b      	lsls	r3, r3, #2
    58a2:	440b      	add	r3, r1
    58a4:	9a01      	ldr	r2, [sp, #4]
    58a6:	601a      	str	r2, [r3, #0]
        switch(Name)
    58a8:	9b01      	ldr	r3, [sp, #4]
    58aa:	2b1f      	cmp	r3, #31
    58ac:	d029      	beq.n	5902 <getCoreDividerConfig+0x112>
    58ae:	9b01      	ldr	r3, [sp, #4]
    58b0:	2b1f      	cmp	r3, #31
    58b2:	d838      	bhi.n	5926 <getCoreDividerConfig+0x136>
    58b4:	9b01      	ldr	r3, [sp, #4]
    58b6:	2b1d      	cmp	r3, #29
    58b8:	d003      	beq.n	58c2 <getCoreDividerConfig+0xd2>
    58ba:	9b01      	ldr	r3, [sp, #4]
    58bc:	2b1e      	cmp	r3, #30
    58be:	d010      	beq.n	58e2 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    58c0:	e031      	b.n	5926 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    58c2:	4b1d      	ldr	r3, [pc, #116]	; (5938 <getCoreDividerConfig+0x148>)
    58c4:	695b      	ldr	r3, [r3, #20]
    58c6:	0c1b      	lsrs	r3, r3, #16
    58c8:	f003 030f 	and.w	r3, r3, #15
    58cc:	1c59      	adds	r1, r3, #1
    58ce:	4819      	ldr	r0, [pc, #100]	; (5934 <getCoreDividerConfig+0x144>)
    58d0:	9a04      	ldr	r2, [sp, #16]
    58d2:	4613      	mov	r3, r2
    58d4:	005b      	lsls	r3, r3, #1
    58d6:	4413      	add	r3, r2
    58d8:	009b      	lsls	r3, r3, #2
    58da:	4403      	add	r3, r0
    58dc:	3304      	adds	r3, #4
    58de:	6019      	str	r1, [r3, #0]
                break;
    58e0:	e022      	b.n	5928 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    58e2:	4b15      	ldr	r3, [pc, #84]	; (5938 <getCoreDividerConfig+0x148>)
    58e4:	699b      	ldr	r3, [r3, #24]
    58e6:	0c1b      	lsrs	r3, r3, #16
    58e8:	f003 030f 	and.w	r3, r3, #15
    58ec:	1c59      	adds	r1, r3, #1
    58ee:	4811      	ldr	r0, [pc, #68]	; (5934 <getCoreDividerConfig+0x144>)
    58f0:	9a04      	ldr	r2, [sp, #16]
    58f2:	4613      	mov	r3, r2
    58f4:	005b      	lsls	r3, r3, #1
    58f6:	4413      	add	r3, r2
    58f8:	009b      	lsls	r3, r3, #2
    58fa:	4403      	add	r3, r0
    58fc:	3304      	adds	r3, #4
    58fe:	6019      	str	r1, [r3, #0]
                break;
    5900:	e012      	b.n	5928 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5902:	4b0d      	ldr	r3, [pc, #52]	; (5938 <getCoreDividerConfig+0x148>)
    5904:	69db      	ldr	r3, [r3, #28]
    5906:	0c1b      	lsrs	r3, r3, #16
    5908:	f003 030f 	and.w	r3, r3, #15
    590c:	1c59      	adds	r1, r3, #1
    590e:	4809      	ldr	r0, [pc, #36]	; (5934 <getCoreDividerConfig+0x144>)
    5910:	9a04      	ldr	r2, [sp, #16]
    5912:	4613      	mov	r3, r2
    5914:	005b      	lsls	r3, r3, #1
    5916:	4413      	add	r3, r2
    5918:	009b      	lsls	r3, r3, #2
    591a:	4403      	add	r3, r0
    591c:	3304      	adds	r3, #4
    591e:	6019      	str	r1, [r3, #0]
                break;
    5920:	e002      	b.n	5928 <getCoreDividerConfig+0x138>
        }
    }
    5922:	bf00      	nop
    5924:	e000      	b.n	5928 <getCoreDividerConfig+0x138>
                break;
    5926:	bf00      	nop

    return ReturnValue;
    5928:	9b05      	ldr	r3, [sp, #20]
}
    592a:	4618      	mov	r0, r3
    592c:	b006      	add	sp, #24
    592e:	4770      	bx	lr
    5930:	1fff8bc8 	.word	0x1fff8bc8
    5934:	1fff8c94 	.word	0x1fff8c94
    5938:	40064000 	.word	0x40064000

0000593c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    593c:	b086      	sub	sp, #24
    593e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5940:	2300      	movs	r3, #0
    5942:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5944:	2300      	movs	r3, #0
    5946:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5948:	9b01      	ldr	r3, [sp, #4]
    594a:	2b23      	cmp	r3, #35	; 0x23
    594c:	d00f      	beq.n	596e <getBusDividerConfig+0x32>
    594e:	9b01      	ldr	r3, [sp, #4]
    5950:	2b23      	cmp	r3, #35	; 0x23
    5952:	d80f      	bhi.n	5974 <getBusDividerConfig+0x38>
    5954:	9b01      	ldr	r3, [sp, #4]
    5956:	2b21      	cmp	r3, #33	; 0x21
    5958:	d003      	beq.n	5962 <getBusDividerConfig+0x26>
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	2b22      	cmp	r3, #34	; 0x22
    595e:	d003      	beq.n	5968 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5960:	e008      	b.n	5974 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5962:	2300      	movs	r3, #0
    5964:	9304      	str	r3, [sp, #16]
            break;
    5966:	e006      	b.n	5976 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5968:	2301      	movs	r3, #1
    596a:	9304      	str	r3, [sp, #16]
            break;
    596c:	e003      	b.n	5976 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    596e:	2302      	movs	r3, #2
    5970:	9304      	str	r3, [sp, #16]
            break;
    5972:	e000      	b.n	5976 <getBusDividerConfig+0x3a>
                break;
    5974:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5976:	4b41      	ldr	r3, [pc, #260]	; (5a7c <getBusDividerConfig+0x140>)
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	2b00      	cmp	r3, #0
    597c:	d026      	beq.n	59cc <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    597e:	2300      	movs	r3, #0
    5980:	9303      	str	r3, [sp, #12]
    5982:	e01c      	b.n	59be <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5984:	4b3d      	ldr	r3, [pc, #244]	; (5a7c <getBusDividerConfig+0x140>)
    5986:	6819      	ldr	r1, [r3, #0]
    5988:	9a03      	ldr	r2, [sp, #12]
    598a:	4613      	mov	r3, r2
    598c:	005b      	lsls	r3, r3, #1
    598e:	4413      	add	r3, r2
    5990:	009b      	lsls	r3, r3, #2
    5992:	440b      	add	r3, r1
    5994:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	9a01      	ldr	r2, [sp, #4]
    599c:	429a      	cmp	r2, r3
    599e:	d10b      	bne.n	59b8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    59a0:	4b36      	ldr	r3, [pc, #216]	; (5a7c <getBusDividerConfig+0x140>)
    59a2:	6819      	ldr	r1, [r3, #0]
    59a4:	9a03      	ldr	r2, [sp, #12]
    59a6:	4613      	mov	r3, r2
    59a8:	005b      	lsls	r3, r3, #1
    59aa:	4413      	add	r3, r2
    59ac:	009b      	lsls	r3, r3, #2
    59ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    59b2:	440b      	add	r3, r1
    59b4:	9305      	str	r3, [sp, #20]
                break;
    59b6:	e009      	b.n	59cc <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    59b8:	9b03      	ldr	r3, [sp, #12]
    59ba:	3301      	adds	r3, #1
    59bc:	9303      	str	r3, [sp, #12]
    59be:	4b2f      	ldr	r3, [pc, #188]	; (5a7c <getBusDividerConfig+0x140>)
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	7b1b      	ldrb	r3, [r3, #12]
    59c4:	461a      	mov	r2, r3
    59c6:	9b03      	ldr	r3, [sp, #12]
    59c8:	4293      	cmp	r3, r2
    59ca:	d3db      	bcc.n	5984 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    59cc:	9b05      	ldr	r3, [sp, #20]
    59ce:	2b00      	cmp	r3, #0
    59d0:	d14d      	bne.n	5a6e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    59d2:	9a04      	ldr	r2, [sp, #16]
    59d4:	4613      	mov	r3, r2
    59d6:	005b      	lsls	r3, r3, #1
    59d8:	4413      	add	r3, r2
    59da:	009b      	lsls	r3, r3, #2
    59dc:	4a28      	ldr	r2, [pc, #160]	; (5a80 <getBusDividerConfig+0x144>)
    59de:	4413      	add	r3, r2
    59e0:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    59e2:	4927      	ldr	r1, [pc, #156]	; (5a80 <getBusDividerConfig+0x144>)
    59e4:	9a04      	ldr	r2, [sp, #16]
    59e6:	4613      	mov	r3, r2
    59e8:	005b      	lsls	r3, r3, #1
    59ea:	4413      	add	r3, r2
    59ec:	009b      	lsls	r3, r3, #2
    59ee:	440b      	add	r3, r1
    59f0:	9a01      	ldr	r2, [sp, #4]
    59f2:	601a      	str	r2, [r3, #0]
        switch(Name)
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	2b23      	cmp	r3, #35	; 0x23
    59f8:	d029      	beq.n	5a4e <getBusDividerConfig+0x112>
    59fa:	9b01      	ldr	r3, [sp, #4]
    59fc:	2b23      	cmp	r3, #35	; 0x23
    59fe:	d838      	bhi.n	5a72 <getBusDividerConfig+0x136>
    5a00:	9b01      	ldr	r3, [sp, #4]
    5a02:	2b21      	cmp	r3, #33	; 0x21
    5a04:	d003      	beq.n	5a0e <getBusDividerConfig+0xd2>
    5a06:	9b01      	ldr	r3, [sp, #4]
    5a08:	2b22      	cmp	r3, #34	; 0x22
    5a0a:	d010      	beq.n	5a2e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5a0c:	e031      	b.n	5a72 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5a0e:	4b1d      	ldr	r3, [pc, #116]	; (5a84 <getBusDividerConfig+0x148>)
    5a10:	695b      	ldr	r3, [r3, #20]
    5a12:	091b      	lsrs	r3, r3, #4
    5a14:	f003 030f 	and.w	r3, r3, #15
    5a18:	1c59      	adds	r1, r3, #1
    5a1a:	4819      	ldr	r0, [pc, #100]	; (5a80 <getBusDividerConfig+0x144>)
    5a1c:	9a04      	ldr	r2, [sp, #16]
    5a1e:	4613      	mov	r3, r2
    5a20:	005b      	lsls	r3, r3, #1
    5a22:	4413      	add	r3, r2
    5a24:	009b      	lsls	r3, r3, #2
    5a26:	4403      	add	r3, r0
    5a28:	3304      	adds	r3, #4
    5a2a:	6019      	str	r1, [r3, #0]
                break;
    5a2c:	e022      	b.n	5a74 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5a2e:	4b15      	ldr	r3, [pc, #84]	; (5a84 <getBusDividerConfig+0x148>)
    5a30:	699b      	ldr	r3, [r3, #24]
    5a32:	091b      	lsrs	r3, r3, #4
    5a34:	f003 030f 	and.w	r3, r3, #15
    5a38:	1c59      	adds	r1, r3, #1
    5a3a:	4811      	ldr	r0, [pc, #68]	; (5a80 <getBusDividerConfig+0x144>)
    5a3c:	9a04      	ldr	r2, [sp, #16]
    5a3e:	4613      	mov	r3, r2
    5a40:	005b      	lsls	r3, r3, #1
    5a42:	4413      	add	r3, r2
    5a44:	009b      	lsls	r3, r3, #2
    5a46:	4403      	add	r3, r0
    5a48:	3304      	adds	r3, #4
    5a4a:	6019      	str	r1, [r3, #0]
                break;
    5a4c:	e012      	b.n	5a74 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5a4e:	4b0d      	ldr	r3, [pc, #52]	; (5a84 <getBusDividerConfig+0x148>)
    5a50:	69db      	ldr	r3, [r3, #28]
    5a52:	091b      	lsrs	r3, r3, #4
    5a54:	f003 030f 	and.w	r3, r3, #15
    5a58:	1c59      	adds	r1, r3, #1
    5a5a:	4809      	ldr	r0, [pc, #36]	; (5a80 <getBusDividerConfig+0x144>)
    5a5c:	9a04      	ldr	r2, [sp, #16]
    5a5e:	4613      	mov	r3, r2
    5a60:	005b      	lsls	r3, r3, #1
    5a62:	4413      	add	r3, r2
    5a64:	009b      	lsls	r3, r3, #2
    5a66:	4403      	add	r3, r0
    5a68:	3304      	adds	r3, #4
    5a6a:	6019      	str	r1, [r3, #0]
                break;
    5a6c:	e002      	b.n	5a74 <getBusDividerConfig+0x138>
        }
    }
    5a6e:	bf00      	nop
    5a70:	e000      	b.n	5a74 <getBusDividerConfig+0x138>
                break;
    5a72:	bf00      	nop

    return ReturnValue;
    5a74:	9b05      	ldr	r3, [sp, #20]
}
    5a76:	4618      	mov	r0, r3
    5a78:	b006      	add	sp, #24
    5a7a:	4770      	bx	lr
    5a7c:	1fff8bc8 	.word	0x1fff8bc8
    5a80:	1fff8cb8 	.word	0x1fff8cb8
    5a84:	40064000 	.word	0x40064000

00005a88 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5a88:	b086      	sub	sp, #24
    5a8a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5a8c:	2300      	movs	r3, #0
    5a8e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5a90:	2300      	movs	r3, #0
    5a92:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5a94:	9b01      	ldr	r3, [sp, #4]
    5a96:	2b27      	cmp	r3, #39	; 0x27
    5a98:	d00f      	beq.n	5aba <getSlowDividerConfig+0x32>
    5a9a:	9b01      	ldr	r3, [sp, #4]
    5a9c:	2b27      	cmp	r3, #39	; 0x27
    5a9e:	d80f      	bhi.n	5ac0 <getSlowDividerConfig+0x38>
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	2b25      	cmp	r3, #37	; 0x25
    5aa4:	d003      	beq.n	5aae <getSlowDividerConfig+0x26>
    5aa6:	9b01      	ldr	r3, [sp, #4]
    5aa8:	2b26      	cmp	r3, #38	; 0x26
    5aaa:	d003      	beq.n	5ab4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5aac:	e008      	b.n	5ac0 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5aae:	2300      	movs	r3, #0
    5ab0:	9304      	str	r3, [sp, #16]
            break;
    5ab2:	e006      	b.n	5ac2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5ab4:	2301      	movs	r3, #1
    5ab6:	9304      	str	r3, [sp, #16]
            break;
    5ab8:	e003      	b.n	5ac2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5aba:	2302      	movs	r3, #2
    5abc:	9304      	str	r3, [sp, #16]
            break;
    5abe:	e000      	b.n	5ac2 <getSlowDividerConfig+0x3a>
                break;
    5ac0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5ac2:	4b40      	ldr	r3, [pc, #256]	; (5bc4 <getSlowDividerConfig+0x13c>)
    5ac4:	681b      	ldr	r3, [r3, #0]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d026      	beq.n	5b18 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5aca:	2300      	movs	r3, #0
    5acc:	9303      	str	r3, [sp, #12]
    5ace:	e01c      	b.n	5b0a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5ad0:	4b3c      	ldr	r3, [pc, #240]	; (5bc4 <getSlowDividerConfig+0x13c>)
    5ad2:	6819      	ldr	r1, [r3, #0]
    5ad4:	9a03      	ldr	r2, [sp, #12]
    5ad6:	4613      	mov	r3, r2
    5ad8:	005b      	lsls	r3, r3, #1
    5ada:	4413      	add	r3, r2
    5adc:	009b      	lsls	r3, r3, #2
    5ade:	440b      	add	r3, r1
    5ae0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5ae4:	681b      	ldr	r3, [r3, #0]
    5ae6:	9a01      	ldr	r2, [sp, #4]
    5ae8:	429a      	cmp	r2, r3
    5aea:	d10b      	bne.n	5b04 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5aec:	4b35      	ldr	r3, [pc, #212]	; (5bc4 <getSlowDividerConfig+0x13c>)
    5aee:	6819      	ldr	r1, [r3, #0]
    5af0:	9a03      	ldr	r2, [sp, #12]
    5af2:	4613      	mov	r3, r2
    5af4:	005b      	lsls	r3, r3, #1
    5af6:	4413      	add	r3, r2
    5af8:	009b      	lsls	r3, r3, #2
    5afa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5afe:	440b      	add	r3, r1
    5b00:	9305      	str	r3, [sp, #20]
                break;
    5b02:	e009      	b.n	5b18 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5b04:	9b03      	ldr	r3, [sp, #12]
    5b06:	3301      	adds	r3, #1
    5b08:	9303      	str	r3, [sp, #12]
    5b0a:	4b2e      	ldr	r3, [pc, #184]	; (5bc4 <getSlowDividerConfig+0x13c>)
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	7b1b      	ldrb	r3, [r3, #12]
    5b10:	461a      	mov	r2, r3
    5b12:	9b03      	ldr	r3, [sp, #12]
    5b14:	4293      	cmp	r3, r2
    5b16:	d3db      	bcc.n	5ad0 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5b18:	9b05      	ldr	r3, [sp, #20]
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	d14a      	bne.n	5bb4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5b1e:	9a04      	ldr	r2, [sp, #16]
    5b20:	4613      	mov	r3, r2
    5b22:	005b      	lsls	r3, r3, #1
    5b24:	4413      	add	r3, r2
    5b26:	009b      	lsls	r3, r3, #2
    5b28:	4a27      	ldr	r2, [pc, #156]	; (5bc8 <getSlowDividerConfig+0x140>)
    5b2a:	4413      	add	r3, r2
    5b2c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5b2e:	4926      	ldr	r1, [pc, #152]	; (5bc8 <getSlowDividerConfig+0x140>)
    5b30:	9a04      	ldr	r2, [sp, #16]
    5b32:	4613      	mov	r3, r2
    5b34:	005b      	lsls	r3, r3, #1
    5b36:	4413      	add	r3, r2
    5b38:	009b      	lsls	r3, r3, #2
    5b3a:	440b      	add	r3, r1
    5b3c:	9a01      	ldr	r2, [sp, #4]
    5b3e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5b40:	9b01      	ldr	r3, [sp, #4]
    5b42:	2b27      	cmp	r3, #39	; 0x27
    5b44:	d027      	beq.n	5b96 <getSlowDividerConfig+0x10e>
    5b46:	9b01      	ldr	r3, [sp, #4]
    5b48:	2b27      	cmp	r3, #39	; 0x27
    5b4a:	d835      	bhi.n	5bb8 <getSlowDividerConfig+0x130>
    5b4c:	9b01      	ldr	r3, [sp, #4]
    5b4e:	2b25      	cmp	r3, #37	; 0x25
    5b50:	d003      	beq.n	5b5a <getSlowDividerConfig+0xd2>
    5b52:	9b01      	ldr	r3, [sp, #4]
    5b54:	2b26      	cmp	r3, #38	; 0x26
    5b56:	d00f      	beq.n	5b78 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5b58:	e02e      	b.n	5bb8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5b5a:	4b1c      	ldr	r3, [pc, #112]	; (5bcc <getSlowDividerConfig+0x144>)
    5b5c:	695b      	ldr	r3, [r3, #20]
    5b5e:	f003 030f 	and.w	r3, r3, #15
    5b62:	1c59      	adds	r1, r3, #1
    5b64:	4818      	ldr	r0, [pc, #96]	; (5bc8 <getSlowDividerConfig+0x140>)
    5b66:	9a04      	ldr	r2, [sp, #16]
    5b68:	4613      	mov	r3, r2
    5b6a:	005b      	lsls	r3, r3, #1
    5b6c:	4413      	add	r3, r2
    5b6e:	009b      	lsls	r3, r3, #2
    5b70:	4403      	add	r3, r0
    5b72:	3304      	adds	r3, #4
    5b74:	6019      	str	r1, [r3, #0]
                break;
    5b76:	e020      	b.n	5bba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5b78:	4b14      	ldr	r3, [pc, #80]	; (5bcc <getSlowDividerConfig+0x144>)
    5b7a:	699b      	ldr	r3, [r3, #24]
    5b7c:	f003 030f 	and.w	r3, r3, #15
    5b80:	1c59      	adds	r1, r3, #1
    5b82:	4811      	ldr	r0, [pc, #68]	; (5bc8 <getSlowDividerConfig+0x140>)
    5b84:	9a04      	ldr	r2, [sp, #16]
    5b86:	4613      	mov	r3, r2
    5b88:	005b      	lsls	r3, r3, #1
    5b8a:	4413      	add	r3, r2
    5b8c:	009b      	lsls	r3, r3, #2
    5b8e:	4403      	add	r3, r0
    5b90:	3304      	adds	r3, #4
    5b92:	6019      	str	r1, [r3, #0]
                break;
    5b94:	e011      	b.n	5bba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5b96:	4b0d      	ldr	r3, [pc, #52]	; (5bcc <getSlowDividerConfig+0x144>)
    5b98:	69db      	ldr	r3, [r3, #28]
    5b9a:	f003 030f 	and.w	r3, r3, #15
    5b9e:	1c59      	adds	r1, r3, #1
    5ba0:	4809      	ldr	r0, [pc, #36]	; (5bc8 <getSlowDividerConfig+0x140>)
    5ba2:	9a04      	ldr	r2, [sp, #16]
    5ba4:	4613      	mov	r3, r2
    5ba6:	005b      	lsls	r3, r3, #1
    5ba8:	4413      	add	r3, r2
    5baa:	009b      	lsls	r3, r3, #2
    5bac:	4403      	add	r3, r0
    5bae:	3304      	adds	r3, #4
    5bb0:	6019      	str	r1, [r3, #0]
                break;
    5bb2:	e002      	b.n	5bba <getSlowDividerConfig+0x132>
        }
    }
    5bb4:	bf00      	nop
    5bb6:	e000      	b.n	5bba <getSlowDividerConfig+0x132>
                break;
    5bb8:	bf00      	nop

    return ReturnValue;
    5bba:	9b05      	ldr	r3, [sp, #20]
}
    5bbc:	4618      	mov	r0, r3
    5bbe:	b006      	add	sp, #24
    5bc0:	4770      	bx	lr
    5bc2:	bf00      	nop
    5bc4:	1fff8bc8 	.word	0x1fff8bc8
    5bc8:	1fff8cdc 	.word	0x1fff8cdc
    5bcc:	40064000 	.word	0x40064000

00005bd0 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5bd0:	b500      	push	{lr}
    5bd2:	b083      	sub	sp, #12
    5bd4:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5bd6:	4b64      	ldr	r3, [pc, #400]	; (5d68 <Clock_Ip_ClockInitializeObjects+0x198>)
    5bd8:	781b      	ldrb	r3, [r3, #0]
    5bda:	f083 0301 	eor.w	r3, r3, #1
    5bde:	b2db      	uxtb	r3, r3
    5be0:	2b00      	cmp	r3, #0
    5be2:	d05b      	beq.n	5c9c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5be4:	4b60      	ldr	r3, [pc, #384]	; (5d68 <Clock_Ip_ClockInitializeObjects+0x198>)
    5be6:	2201      	movs	r2, #1
    5be8:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5bea:	4b60      	ldr	r3, [pc, #384]	; (5d6c <Clock_Ip_ClockInitializeObjects+0x19c>)
    5bec:	785b      	ldrb	r3, [r3, #1]
    5bee:	461a      	mov	r2, r3
    5bf0:	4613      	mov	r3, r2
    5bf2:	009b      	lsls	r3, r3, #2
    5bf4:	4413      	add	r3, r2
    5bf6:	009b      	lsls	r3, r3, #2
    5bf8:	4a5d      	ldr	r2, [pc, #372]	; (5d70 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5bfa:	4413      	add	r3, r2
    5bfc:	4a5d      	ldr	r2, [pc, #372]	; (5d74 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5bfe:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5c00:	4b5d      	ldr	r3, [pc, #372]	; (5d78 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5c02:	785b      	ldrb	r3, [r3, #1]
    5c04:	461a      	mov	r2, r3
    5c06:	4613      	mov	r3, r2
    5c08:	009b      	lsls	r3, r3, #2
    5c0a:	4413      	add	r3, r2
    5c0c:	009b      	lsls	r3, r3, #2
    5c0e:	4a5b      	ldr	r2, [pc, #364]	; (5d7c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5c10:	4413      	add	r3, r2
    5c12:	4a5b      	ldr	r2, [pc, #364]	; (5d80 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5c14:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5c16:	4b5b      	ldr	r3, [pc, #364]	; (5d84 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5c18:	791b      	ldrb	r3, [r3, #4]
    5c1a:	461a      	mov	r2, r3
    5c1c:	4613      	mov	r3, r2
    5c1e:	005b      	lsls	r3, r3, #1
    5c20:	4413      	add	r3, r2
    5c22:	009b      	lsls	r3, r3, #2
    5c24:	4a58      	ldr	r2, [pc, #352]	; (5d88 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5c26:	4413      	add	r3, r2
    5c28:	4a58      	ldr	r2, [pc, #352]	; (5d8c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5c2a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5c2c:	4b58      	ldr	r3, [pc, #352]	; (5d90 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5c2e:	795b      	ldrb	r3, [r3, #5]
    5c30:	00db      	lsls	r3, r3, #3
    5c32:	4a58      	ldr	r2, [pc, #352]	; (5d94 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5c34:	4413      	add	r3, r2
    5c36:	4a58      	ldr	r2, [pc, #352]	; (5d98 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5c38:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5c3a:	4b55      	ldr	r3, [pc, #340]	; (5d90 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5c3c:	79db      	ldrb	r3, [r3, #7]
    5c3e:	00db      	lsls	r3, r3, #3
    5c40:	4a54      	ldr	r2, [pc, #336]	; (5d94 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5c42:	4413      	add	r3, r2
    5c44:	4a55      	ldr	r2, [pc, #340]	; (5d9c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5c46:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5c48:	4b55      	ldr	r3, [pc, #340]	; (5da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5c4a:	799b      	ldrb	r3, [r3, #6]
    5c4c:	009b      	lsls	r3, r3, #2
    5c4e:	4a55      	ldr	r2, [pc, #340]	; (5da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5c50:	4413      	add	r3, r2
    5c52:	4a55      	ldr	r2, [pc, #340]	; (5da8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5c54:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5c56:	4b52      	ldr	r3, [pc, #328]	; (5da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5c58:	7a1b      	ldrb	r3, [r3, #8]
    5c5a:	009b      	lsls	r3, r3, #2
    5c5c:	4a51      	ldr	r2, [pc, #324]	; (5da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5c5e:	4413      	add	r3, r2
    5c60:	4a52      	ldr	r2, [pc, #328]	; (5dac <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5c62:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5c64:	4b4e      	ldr	r3, [pc, #312]	; (5da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5c66:	7a5b      	ldrb	r3, [r3, #9]
    5c68:	009b      	lsls	r3, r3, #2
    5c6a:	4a4e      	ldr	r2, [pc, #312]	; (5da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5c6c:	4413      	add	r3, r2
    5c6e:	4a50      	ldr	r2, [pc, #320]	; (5db0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5c70:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5c72:	4b4b      	ldr	r3, [pc, #300]	; (5da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5c74:	7adb      	ldrb	r3, [r3, #11]
    5c76:	009b      	lsls	r3, r3, #2
    5c78:	4a4a      	ldr	r2, [pc, #296]	; (5da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5c7a:	4413      	add	r3, r2
    5c7c:	4a4d      	ldr	r2, [pc, #308]	; (5db4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5c7e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5c80:	4b47      	ldr	r3, [pc, #284]	; (5da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5c82:	7b1b      	ldrb	r3, [r3, #12]
    5c84:	009b      	lsls	r3, r3, #2
    5c86:	4a47      	ldr	r2, [pc, #284]	; (5da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5c88:	4413      	add	r3, r2
    5c8a:	4a4b      	ldr	r2, [pc, #300]	; (5db8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5c8c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5c8e:	4b44      	ldr	r3, [pc, #272]	; (5da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5c90:	7b9b      	ldrb	r3, [r3, #14]
    5c92:	009b      	lsls	r3, r3, #2
    5c94:	4a43      	ldr	r2, [pc, #268]	; (5da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5c96:	4413      	add	r3, r2
    5c98:	4a48      	ldr	r2, [pc, #288]	; (5dbc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5c9a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5c9c:	4b48      	ldr	r3, [pc, #288]	; (5dc0 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5c9e:	781b      	ldrb	r3, [r3, #0]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d002      	beq.n	5caa <Clock_Ip_ClockInitializeObjects+0xda>
    5ca4:	9b01      	ldr	r3, [sp, #4]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d003      	beq.n	5cb2 <Clock_Ip_ClockInitializeObjects+0xe2>
    5caa:	4b46      	ldr	r3, [pc, #280]	; (5dc4 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d056      	beq.n	5d60 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5cb2:	f7ff fc09 	bl	54c8 <getFircConfig>
    5cb6:	4603      	mov	r3, r0
    5cb8:	4a43      	ldr	r2, [pc, #268]	; (5dc8 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5cba:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5cbc:	f7ff fc60 	bl	5580 <getSoscConfig>
    5cc0:	4603      	mov	r3, r0
    5cc2:	4a42      	ldr	r2, [pc, #264]	; (5dcc <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5cc4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5cc6:	f7ff fca7 	bl	5618 <getSpllConfig>
    5cca:	4603      	mov	r3, r0
    5ccc:	4a40      	ldr	r2, [pc, #256]	; (5dd0 <Clock_Ip_ClockInitializeObjects+0x200>)
    5cce:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5cd0:	2019      	movs	r0, #25
    5cd2:	f7ff fcfb 	bl	56cc <getSelectorConfig>
    5cd6:	4603      	mov	r3, r0
    5cd8:	4a3e      	ldr	r2, [pc, #248]	; (5dd4 <Clock_Ip_ClockInitializeObjects+0x204>)
    5cda:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5cdc:	201a      	movs	r0, #26
    5cde:	f7ff fcf5 	bl	56cc <getSelectorConfig>
    5ce2:	4603      	mov	r3, r0
    5ce4:	4a3c      	ldr	r2, [pc, #240]	; (5dd8 <Clock_Ip_ClockInitializeObjects+0x208>)
    5ce6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5ce8:	201b      	movs	r0, #27
    5cea:	f7ff fcef 	bl	56cc <getSelectorConfig>
    5cee:	4603      	mov	r3, r0
    5cf0:	4a3a      	ldr	r2, [pc, #232]	; (5ddc <Clock_Ip_ClockInitializeObjects+0x20c>)
    5cf2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5cf4:	201d      	movs	r0, #29
    5cf6:	f7ff fd7b 	bl	57f0 <getCoreDividerConfig>
    5cfa:	4603      	mov	r3, r0
    5cfc:	4a38      	ldr	r2, [pc, #224]	; (5de0 <Clock_Ip_ClockInitializeObjects+0x210>)
    5cfe:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5d00:	201e      	movs	r0, #30
    5d02:	f7ff fd75 	bl	57f0 <getCoreDividerConfig>
    5d06:	4603      	mov	r3, r0
    5d08:	4a36      	ldr	r2, [pc, #216]	; (5de4 <Clock_Ip_ClockInitializeObjects+0x214>)
    5d0a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5d0c:	201f      	movs	r0, #31
    5d0e:	f7ff fd6f 	bl	57f0 <getCoreDividerConfig>
    5d12:	4603      	mov	r3, r0
    5d14:	4a34      	ldr	r2, [pc, #208]	; (5de8 <Clock_Ip_ClockInitializeObjects+0x218>)
    5d16:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5d18:	2021      	movs	r0, #33	; 0x21
    5d1a:	f7ff fe0f 	bl	593c <getBusDividerConfig>
    5d1e:	4603      	mov	r3, r0
    5d20:	4a32      	ldr	r2, [pc, #200]	; (5dec <Clock_Ip_ClockInitializeObjects+0x21c>)
    5d22:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5d24:	2022      	movs	r0, #34	; 0x22
    5d26:	f7ff fe09 	bl	593c <getBusDividerConfig>
    5d2a:	4603      	mov	r3, r0
    5d2c:	4a30      	ldr	r2, [pc, #192]	; (5df0 <Clock_Ip_ClockInitializeObjects+0x220>)
    5d2e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5d30:	2023      	movs	r0, #35	; 0x23
    5d32:	f7ff fe03 	bl	593c <getBusDividerConfig>
    5d36:	4603      	mov	r3, r0
    5d38:	4a2e      	ldr	r2, [pc, #184]	; (5df4 <Clock_Ip_ClockInitializeObjects+0x224>)
    5d3a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5d3c:	2025      	movs	r0, #37	; 0x25
    5d3e:	f7ff fea3 	bl	5a88 <getSlowDividerConfig>
    5d42:	4603      	mov	r3, r0
    5d44:	4a2c      	ldr	r2, [pc, #176]	; (5df8 <Clock_Ip_ClockInitializeObjects+0x228>)
    5d46:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5d48:	2026      	movs	r0, #38	; 0x26
    5d4a:	f7ff fe9d 	bl	5a88 <getSlowDividerConfig>
    5d4e:	4603      	mov	r3, r0
    5d50:	4a2a      	ldr	r2, [pc, #168]	; (5dfc <Clock_Ip_ClockInitializeObjects+0x22c>)
    5d52:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5d54:	2027      	movs	r0, #39	; 0x27
    5d56:	f7ff fe97 	bl	5a88 <getSlowDividerConfig>
    5d5a:	4603      	mov	r3, r0
    5d5c:	4a28      	ldr	r2, [pc, #160]	; (5e00 <Clock_Ip_ClockInitializeObjects+0x230>)
    5d5e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5d60:	bf00      	nop
    5d62:	b003      	add	sp, #12
    5d64:	f85d fb04 	ldr.w	pc, [sp], #4
    5d68:	1fff8d00 	.word	0x1fff8d00
    5d6c:	00015d20 	.word	0x00015d20
    5d70:	0001636c 	.word	0x0001636c
    5d74:	1fff8bcc 	.word	0x1fff8bcc
    5d78:	00015ce0 	.word	0x00015ce0
    5d7c:	000162b4 	.word	0x000162b4
    5d80:	1fff8bd0 	.word	0x1fff8bd0
    5d84:	00015cf0 	.word	0x00015cf0
    5d88:	00016320 	.word	0x00016320
    5d8c:	1fff8bd4 	.word	0x1fff8bd4
    5d90:	00015d30 	.word	0x00015d30
    5d94:	00016398 	.word	0x00016398
    5d98:	1fff8bd8 	.word	0x1fff8bd8
    5d9c:	1fff8c14 	.word	0x1fff8c14
    5da0:	00015cc0 	.word	0x00015cc0
    5da4:	00016270 	.word	0x00016270
    5da8:	1fff8bdc 	.word	0x1fff8bdc
    5dac:	1fff8c18 	.word	0x1fff8c18
    5db0:	1fff8be0 	.word	0x1fff8be0
    5db4:	1fff8c1c 	.word	0x1fff8c1c
    5db8:	1fff8be4 	.word	0x1fff8be4
    5dbc:	1fff8c20 	.word	0x1fff8c20
    5dc0:	1fff8b19 	.word	0x1fff8b19
    5dc4:	1fff8b10 	.word	0x1fff8b10
    5dc8:	1fff8be8 	.word	0x1fff8be8
    5dcc:	1fff8bec 	.word	0x1fff8bec
    5dd0:	1fff8bf0 	.word	0x1fff8bf0
    5dd4:	1fff8bf4 	.word	0x1fff8bf4
    5dd8:	1fff8bf8 	.word	0x1fff8bf8
    5ddc:	1fff8c24 	.word	0x1fff8c24
    5de0:	1fff8bfc 	.word	0x1fff8bfc
    5de4:	1fff8c00 	.word	0x1fff8c00
    5de8:	1fff8c28 	.word	0x1fff8c28
    5dec:	1fff8c04 	.word	0x1fff8c04
    5df0:	1fff8c08 	.word	0x1fff8c08
    5df4:	1fff8c2c 	.word	0x1fff8c2c
    5df8:	1fff8c0c 	.word	0x1fff8c0c
    5dfc:	1fff8c10 	.word	0x1fff8c10
    5e00:	1fff8c30 	.word	0x1fff8c30

00005e04 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5e04:	b500      	push	{lr}
    5e06:	b083      	sub	sp, #12
    5e08:	9001      	str	r0, [sp, #4]
    5e0a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5e0c:	9b01      	ldr	r3, [sp, #4]
    5e0e:	2b03      	cmp	r3, #3
    5e10:	f000 8090 	beq.w	5f34 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5e14:	9b01      	ldr	r3, [sp, #4]
    5e16:	2b03      	cmp	r3, #3
    5e18:	f200 80d3 	bhi.w	5fc2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5e1c:	9b01      	ldr	r3, [sp, #4]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d040      	beq.n	5ea4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	3b01      	subs	r3, #1
    5e26:	2b01      	cmp	r3, #1
    5e28:	f200 80cb 	bhi.w	5fc2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5e2c:	9b00      	ldr	r3, [sp, #0]
    5e2e:	2b00      	cmp	r3, #0
    5e30:	f040 80c9 	bne.w	5fc6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5e34:	4b68      	ldr	r3, [pc, #416]	; (5fd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5e36:	2200      	movs	r2, #0
    5e38:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5e3a:	4b68      	ldr	r3, [pc, #416]	; (5fdc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5e3c:	681b      	ldr	r3, [r3, #0]
    5e3e:	685b      	ldr	r3, [r3, #4]
    5e40:	4a67      	ldr	r2, [pc, #412]	; (5fe0 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5e42:	6812      	ldr	r2, [r2, #0]
    5e44:	4610      	mov	r0, r2
    5e46:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5e48:	4b66      	ldr	r3, [pc, #408]	; (5fe4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5e4a:	681b      	ldr	r3, [r3, #0]
    5e4c:	681b      	ldr	r3, [r3, #0]
    5e4e:	4a66      	ldr	r2, [pc, #408]	; (5fe8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5e50:	6812      	ldr	r2, [r2, #0]
    5e52:	4610      	mov	r0, r2
    5e54:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5e56:	4b65      	ldr	r3, [pc, #404]	; (5fec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5e58:	681b      	ldr	r3, [r3, #0]
    5e5a:	681b      	ldr	r3, [r3, #0]
    5e5c:	4a64      	ldr	r2, [pc, #400]	; (5ff0 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5e5e:	6812      	ldr	r2, [r2, #0]
    5e60:	4610      	mov	r0, r2
    5e62:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5e64:	4b63      	ldr	r3, [pc, #396]	; (5ff4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5e66:	681b      	ldr	r3, [r3, #0]
    5e68:	681b      	ldr	r3, [r3, #0]
    5e6a:	4a63      	ldr	r2, [pc, #396]	; (5ff8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5e6c:	6812      	ldr	r2, [r2, #0]
    5e6e:	4610      	mov	r0, r2
    5e70:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5e72:	4b62      	ldr	r3, [pc, #392]	; (5ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5e74:	681b      	ldr	r3, [r3, #0]
    5e76:	691b      	ldr	r3, [r3, #16]
    5e78:	4a61      	ldr	r2, [pc, #388]	; (6000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5e7a:	6812      	ldr	r2, [r2, #0]
    5e7c:	6812      	ldr	r2, [r2, #0]
    5e7e:	4610      	mov	r0, r2
    5e80:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5e82:	4b60      	ldr	r3, [pc, #384]	; (6004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5e84:	681b      	ldr	r3, [r3, #0]
    5e86:	68db      	ldr	r3, [r3, #12]
    5e88:	4a5f      	ldr	r2, [pc, #380]	; (6008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5e8a:	6812      	ldr	r2, [r2, #0]
    5e8c:	6812      	ldr	r2, [r2, #0]
    5e8e:	4610      	mov	r0, r2
    5e90:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5e92:	4b5e      	ldr	r3, [pc, #376]	; (600c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5e94:	681b      	ldr	r3, [r3, #0]
    5e96:	689b      	ldr	r3, [r3, #8]
    5e98:	4a5d      	ldr	r2, [pc, #372]	; (6010 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5e9a:	6812      	ldr	r2, [r2, #0]
    5e9c:	6812      	ldr	r2, [r2, #0]
    5e9e:	4610      	mov	r0, r2
    5ea0:	4798      	blx	r3
            }
        }
        break;
    5ea2:	e090      	b.n	5fc6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5ea4:	9b00      	ldr	r3, [sp, #0]
    5ea6:	2b02      	cmp	r3, #2
    5ea8:	f040 808f 	bne.w	5fca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5eac:	4b4a      	ldr	r3, [pc, #296]	; (5fd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5eae:	2201      	movs	r2, #1
    5eb0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5eb2:	4b56      	ldr	r3, [pc, #344]	; (600c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	685b      	ldr	r3, [r3, #4]
    5eb8:	4a55      	ldr	r2, [pc, #340]	; (6010 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5eba:	6812      	ldr	r2, [r2, #0]
    5ebc:	4610      	mov	r0, r2
    5ebe:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5ec0:	4b50      	ldr	r3, [pc, #320]	; (6004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5ec2:	681b      	ldr	r3, [r3, #0]
    5ec4:	691b      	ldr	r3, [r3, #16]
    5ec6:	4a50      	ldr	r2, [pc, #320]	; (6008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5ec8:	6812      	ldr	r2, [r2, #0]
    5eca:	4610      	mov	r0, r2
    5ecc:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5ece:	4b4d      	ldr	r3, [pc, #308]	; (6004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5ed0:	681b      	ldr	r3, [r3, #0]
    5ed2:	689b      	ldr	r3, [r3, #8]
    5ed4:	4a4c      	ldr	r2, [pc, #304]	; (6008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5ed6:	6812      	ldr	r2, [r2, #0]
    5ed8:	4610      	mov	r0, r2
    5eda:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5edc:	4b47      	ldr	r3, [pc, #284]	; (5ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	68db      	ldr	r3, [r3, #12]
    5ee2:	4a47      	ldr	r2, [pc, #284]	; (6000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5ee4:	6812      	ldr	r2, [r2, #0]
    5ee6:	4610      	mov	r0, r2
    5ee8:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5eea:	4b44      	ldr	r3, [pc, #272]	; (5ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5eec:	681b      	ldr	r3, [r3, #0]
    5eee:	689b      	ldr	r3, [r3, #8]
    5ef0:	4a43      	ldr	r2, [pc, #268]	; (6000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5ef2:	6812      	ldr	r2, [r2, #0]
    5ef4:	6812      	ldr	r2, [r2, #0]
    5ef6:	4610      	mov	r0, r2
    5ef8:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5efa:	4b38      	ldr	r3, [pc, #224]	; (5fdc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	685b      	ldr	r3, [r3, #4]
    5f00:	4a44      	ldr	r2, [pc, #272]	; (6014 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5f02:	6812      	ldr	r2, [r2, #0]
    5f04:	4610      	mov	r0, r2
    5f06:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5f08:	4b36      	ldr	r3, [pc, #216]	; (5fe4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5f0a:	681b      	ldr	r3, [r3, #0]
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	4a42      	ldr	r2, [pc, #264]	; (6018 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5f10:	6812      	ldr	r2, [r2, #0]
    5f12:	4610      	mov	r0, r2
    5f14:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5f16:	4b35      	ldr	r3, [pc, #212]	; (5fec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5f18:	681b      	ldr	r3, [r3, #0]
    5f1a:	681b      	ldr	r3, [r3, #0]
    5f1c:	4a3f      	ldr	r2, [pc, #252]	; (601c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5f1e:	6812      	ldr	r2, [r2, #0]
    5f20:	4610      	mov	r0, r2
    5f22:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5f24:	4b33      	ldr	r3, [pc, #204]	; (5ff4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5f26:	681b      	ldr	r3, [r3, #0]
    5f28:	681b      	ldr	r3, [r3, #0]
    5f2a:	4a3d      	ldr	r2, [pc, #244]	; (6020 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5f2c:	6812      	ldr	r2, [r2, #0]
    5f2e:	4610      	mov	r0, r2
    5f30:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5f32:	e04a      	b.n	5fca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5f34:	9b00      	ldr	r3, [sp, #0]
    5f36:	2b02      	cmp	r3, #2
    5f38:	d149      	bne.n	5fce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5f3a:	4b27      	ldr	r3, [pc, #156]	; (5fd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5f3c:	2201      	movs	r2, #1
    5f3e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5f40:	4b32      	ldr	r3, [pc, #200]	; (600c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5f42:	681b      	ldr	r3, [r3, #0]
    5f44:	685b      	ldr	r3, [r3, #4]
    5f46:	4a32      	ldr	r2, [pc, #200]	; (6010 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5f48:	6812      	ldr	r2, [r2, #0]
    5f4a:	4610      	mov	r0, r2
    5f4c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5f4e:	4b2d      	ldr	r3, [pc, #180]	; (6004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	691b      	ldr	r3, [r3, #16]
    5f54:	4a2c      	ldr	r2, [pc, #176]	; (6008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5f56:	6812      	ldr	r2, [r2, #0]
    5f58:	4610      	mov	r0, r2
    5f5a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5f5c:	4b29      	ldr	r3, [pc, #164]	; (6004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5f5e:	681b      	ldr	r3, [r3, #0]
    5f60:	689b      	ldr	r3, [r3, #8]
    5f62:	4a29      	ldr	r2, [pc, #164]	; (6008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5f64:	6812      	ldr	r2, [r2, #0]
    5f66:	4610      	mov	r0, r2
    5f68:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5f6a:	4b24      	ldr	r3, [pc, #144]	; (5ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5f6c:	681b      	ldr	r3, [r3, #0]
    5f6e:	68db      	ldr	r3, [r3, #12]
    5f70:	4a23      	ldr	r2, [pc, #140]	; (6000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5f72:	6812      	ldr	r2, [r2, #0]
    5f74:	4610      	mov	r0, r2
    5f76:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5f78:	4b20      	ldr	r3, [pc, #128]	; (5ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	689b      	ldr	r3, [r3, #8]
    5f7e:	4a20      	ldr	r2, [pc, #128]	; (6000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5f80:	6812      	ldr	r2, [r2, #0]
    5f82:	6812      	ldr	r2, [r2, #0]
    5f84:	4610      	mov	r0, r2
    5f86:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5f88:	4b26      	ldr	r3, [pc, #152]	; (6024 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5f8a:	681b      	ldr	r3, [r3, #0]
    5f8c:	685b      	ldr	r3, [r3, #4]
    5f8e:	4a26      	ldr	r2, [pc, #152]	; (6028 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5f90:	6812      	ldr	r2, [r2, #0]
    5f92:	4610      	mov	r0, r2
    5f94:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5f96:	4b25      	ldr	r3, [pc, #148]	; (602c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5f98:	681b      	ldr	r3, [r3, #0]
    5f9a:	681b      	ldr	r3, [r3, #0]
    5f9c:	4a24      	ldr	r2, [pc, #144]	; (6030 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5f9e:	6812      	ldr	r2, [r2, #0]
    5fa0:	4610      	mov	r0, r2
    5fa2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5fa4:	4b23      	ldr	r3, [pc, #140]	; (6034 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5fa6:	681b      	ldr	r3, [r3, #0]
    5fa8:	681b      	ldr	r3, [r3, #0]
    5faa:	4a23      	ldr	r2, [pc, #140]	; (6038 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5fac:	6812      	ldr	r2, [r2, #0]
    5fae:	4610      	mov	r0, r2
    5fb0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5fb2:	4b22      	ldr	r3, [pc, #136]	; (603c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5fb4:	681b      	ldr	r3, [r3, #0]
    5fb6:	681b      	ldr	r3, [r3, #0]
    5fb8:	4a21      	ldr	r2, [pc, #132]	; (6040 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5fba:	6812      	ldr	r2, [r2, #0]
    5fbc:	4610      	mov	r0, r2
    5fbe:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5fc0:	e005      	b.n	5fce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5fc2:	bf00      	nop
    5fc4:	e004      	b.n	5fd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5fc6:	bf00      	nop
    5fc8:	e002      	b.n	5fd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5fca:	bf00      	nop
    5fcc:	e000      	b.n	5fd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5fce:	bf00      	nop
    }

}
    5fd0:	bf00      	nop
    5fd2:	b003      	add	sp, #12
    5fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    5fd8:	1fff8b19 	.word	0x1fff8b19
    5fdc:	1fff8bd8 	.word	0x1fff8bd8
    5fe0:	1fff8bf8 	.word	0x1fff8bf8
    5fe4:	1fff8bdc 	.word	0x1fff8bdc
    5fe8:	1fff8c00 	.word	0x1fff8c00
    5fec:	1fff8be0 	.word	0x1fff8be0
    5ff0:	1fff8c08 	.word	0x1fff8c08
    5ff4:	1fff8be4 	.word	0x1fff8be4
    5ff8:	1fff8c10 	.word	0x1fff8c10
    5ffc:	1fff8bcc 	.word	0x1fff8bcc
    6000:	1fff8bf0 	.word	0x1fff8bf0
    6004:	1fff8bd0 	.word	0x1fff8bd0
    6008:	1fff8bec 	.word	0x1fff8bec
    600c:	1fff8bd4 	.word	0x1fff8bd4
    6010:	1fff8be8 	.word	0x1fff8be8
    6014:	1fff8bf4 	.word	0x1fff8bf4
    6018:	1fff8bfc 	.word	0x1fff8bfc
    601c:	1fff8c04 	.word	0x1fff8c04
    6020:	1fff8c0c 	.word	0x1fff8c0c
    6024:	1fff8c14 	.word	0x1fff8c14
    6028:	1fff8c24 	.word	0x1fff8c24
    602c:	1fff8c18 	.word	0x1fff8c18
    6030:	1fff8c28 	.word	0x1fff8c28
    6034:	1fff8c1c 	.word	0x1fff8c1c
    6038:	1fff8c2c 	.word	0x1fff8c2c
    603c:	1fff8c20 	.word	0x1fff8c20
    6040:	1fff8c30 	.word	0x1fff8c30

00006044 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    6044:	b500      	push	{lr}
    6046:	b083      	sub	sp, #12
    6048:	9001      	str	r0, [sp, #4]
    604a:	9100      	str	r1, [sp, #0]
    switch(Command)
    604c:	9b00      	ldr	r3, [sp, #0]
    604e:	2b04      	cmp	r3, #4
    6050:	d010      	beq.n	6074 <Clock_Ip_Command+0x30>
    6052:	9b00      	ldr	r3, [sp, #0]
    6054:	2b04      	cmp	r3, #4
    6056:	d811      	bhi.n	607c <Clock_Ip_Command+0x38>
    6058:	9b00      	ldr	r3, [sp, #0]
    605a:	2b01      	cmp	r3, #1
    605c:	d006      	beq.n	606c <Clock_Ip_Command+0x28>
    605e:	9b00      	ldr	r3, [sp, #0]
    6060:	2b02      	cmp	r3, #2
    6062:	d10b      	bne.n	607c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    6064:	9801      	ldr	r0, [sp, #4]
    6066:	f7ff fdb3 	bl	5bd0 <Clock_Ip_ClockInitializeObjects>
            break;
    606a:	e008      	b.n	607e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    606c:	9801      	ldr	r0, [sp, #4]
    606e:	f7ff f9db 	bl	5428 <Clock_Ip_SpecificPlatformInitClock>
            break;
    6072:	e004      	b.n	607e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    6074:	9801      	ldr	r0, [sp, #4]
    6076:	f7ff f8ed 	bl	5254 <DisableSafeClock>
            break;
    607a:	e000      	b.n	607e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    607c:	bf00      	nop
    }
}
    607e:	bf00      	nop
    6080:	b003      	add	sp, #12
    6082:	f85d fb04 	ldr.w	pc, [sp], #4
    6086:	bf00      	nop

00006088 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    6088:	b500      	push	{lr}
    608a:	b085      	sub	sp, #20
    608c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    608e:	4a20      	ldr	r2, [pc, #128]	; (6110 <Mcu_Init+0x88>)
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    6094:	2300      	movs	r3, #0
    6096:	9303      	str	r3, [sp, #12]
    6098:	e010      	b.n	60bc <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    609a:	4b1d      	ldr	r3, [pc, #116]	; (6110 <Mcu_Init+0x88>)
    609c:	681b      	ldr	r3, [r3, #0]
    609e:	6919      	ldr	r1, [r3, #16]
    60a0:	9a03      	ldr	r2, [sp, #12]
    60a2:	4613      	mov	r3, r2
    60a4:	005b      	lsls	r3, r3, #1
    60a6:	4413      	add	r3, r2
    60a8:	009b      	lsls	r3, r3, #2
    60aa:	440b      	add	r3, r1
    60ac:	681b      	ldr	r3, [r3, #0]
    60ae:	9a03      	ldr	r2, [sp, #12]
    60b0:	b2d1      	uxtb	r1, r2
    60b2:	4a18      	ldr	r2, [pc, #96]	; (6114 <Mcu_Init+0x8c>)
    60b4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    60b6:	9b03      	ldr	r3, [sp, #12]
    60b8:	3301      	adds	r3, #1
    60ba:	9303      	str	r3, [sp, #12]
    60bc:	4b14      	ldr	r3, [pc, #80]	; (6110 <Mcu_Init+0x88>)
    60be:	681b      	ldr	r3, [r3, #0]
    60c0:	689b      	ldr	r3, [r3, #8]
    60c2:	9a03      	ldr	r2, [sp, #12]
    60c4:	429a      	cmp	r2, r3
    60c6:	d3e8      	bcc.n	609a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    60c8:	2300      	movs	r3, #0
    60ca:	9303      	str	r3, [sp, #12]
    60cc:	e010      	b.n	60f0 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    60ce:	4b10      	ldr	r3, [pc, #64]	; (6110 <Mcu_Init+0x88>)
    60d0:	681b      	ldr	r3, [r3, #0]
    60d2:	6959      	ldr	r1, [r3, #20]
    60d4:	9a03      	ldr	r2, [sp, #12]
    60d6:	4613      	mov	r3, r2
    60d8:	01db      	lsls	r3, r3, #7
    60da:	1a9b      	subs	r3, r3, r2
    60dc:	00db      	lsls	r3, r3, #3
    60de:	440b      	add	r3, r1
    60e0:	681b      	ldr	r3, [r3, #0]
    60e2:	9a03      	ldr	r2, [sp, #12]
    60e4:	b2d1      	uxtb	r1, r2
    60e6:	4a0c      	ldr	r2, [pc, #48]	; (6118 <Mcu_Init+0x90>)
    60e8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    60ea:	9b03      	ldr	r3, [sp, #12]
    60ec:	3301      	adds	r3, #1
    60ee:	9303      	str	r3, [sp, #12]
    60f0:	4b07      	ldr	r3, [pc, #28]	; (6110 <Mcu_Init+0x88>)
    60f2:	681b      	ldr	r3, [r3, #0]
    60f4:	68db      	ldr	r3, [r3, #12]
    60f6:	9a03      	ldr	r2, [sp, #12]
    60f8:	429a      	cmp	r2, r3
    60fa:	d3e8      	bcc.n	60ce <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    60fc:	4b04      	ldr	r3, [pc, #16]	; (6110 <Mcu_Init+0x88>)
    60fe:	681b      	ldr	r3, [r3, #0]
    6100:	699b      	ldr	r3, [r3, #24]
    6102:	4618      	mov	r0, r3
    6104:	f000 f88a 	bl	621c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6108:	bf00      	nop
    610a:	b005      	add	sp, #20
    610c:	f85d fb04 	ldr.w	pc, [sp], #4
    6110:	1fff8d0c 	.word	0x1fff8d0c
    6114:	1fff8d08 	.word	0x1fff8d08
    6118:	1fff8d04 	.word	0x1fff8d04

0000611c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    611c:	b084      	sub	sp, #16
    611e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6120:	2301      	movs	r3, #1
    6122:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    6126:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    612a:	4618      	mov	r0, r3
    612c:	b004      	add	sp, #16
    612e:	4770      	bx	lr

00006130 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    6130:	b500      	push	{lr}
    6132:	b085      	sub	sp, #20
    6134:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    6136:	4a0e      	ldr	r2, [pc, #56]	; (6170 <Mcu_InitClock+0x40>)
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	4413      	add	r3, r2
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    6142:	4b0c      	ldr	r3, [pc, #48]	; (6174 <Mcu_InitClock+0x44>)
    6144:	681b      	ldr	r3, [r3, #0]
    6146:	6959      	ldr	r1, [r3, #20]
    6148:	f89d 200f 	ldrb.w	r2, [sp, #15]
    614c:	4613      	mov	r3, r2
    614e:	01db      	lsls	r3, r3, #7
    6150:	1a9b      	subs	r3, r3, r2
    6152:	00db      	lsls	r3, r3, #3
    6154:	440b      	add	r3, r1
    6156:	4618      	mov	r0, r3
    6158:	f000 f86a 	bl	6230 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    615c:	2300      	movs	r3, #0
    615e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    6162:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6166:	4618      	mov	r0, r3
    6168:	b005      	add	sp, #20
    616a:	f85d fb04 	ldr.w	pc, [sp], #4
    616e:	bf00      	nop
    6170:	1fff8d04 	.word	0x1fff8d04
    6174:	1fff8d0c 	.word	0x1fff8d0c

00006178 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    6178:	b500      	push	{lr}
    617a:	b085      	sub	sp, #20
    617c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    617e:	4a0d      	ldr	r2, [pc, #52]	; (61b4 <Mcu_SetMode+0x3c>)
    6180:	9b01      	ldr	r3, [sp, #4]
    6182:	4413      	add	r3, r2
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    618a:	f00c fe6b 	bl	12e64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    618e:	4b0a      	ldr	r3, [pc, #40]	; (61b8 <Mcu_SetMode+0x40>)
    6190:	681b      	ldr	r3, [r3, #0]
    6192:	6919      	ldr	r1, [r3, #16]
    6194:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6198:	4613      	mov	r3, r2
    619a:	005b      	lsls	r3, r3, #1
    619c:	4413      	add	r3, r2
    619e:	009b      	lsls	r3, r3, #2
    61a0:	440b      	add	r3, r1
    61a2:	4618      	mov	r0, r3
    61a4:	f000 f84e 	bl	6244 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    61a8:	f00c fe88 	bl	12ebc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    61ac:	bf00      	nop
    61ae:	b005      	add	sp, #20
    61b0:	f85d fb04 	ldr.w	pc, [sp], #4
    61b4:	1fff8d08 	.word	0x1fff8d08
    61b8:	1fff8d0c 	.word	0x1fff8d0c

000061bc <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    61bc:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    61be:	2302      	movs	r3, #2
    61c0:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    61c2:	9b01      	ldr	r3, [sp, #4]
}
    61c4:	4618      	mov	r0, r3
    61c6:	b002      	add	sp, #8
    61c8:	4770      	bx	lr

000061ca <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    61ca:	b500      	push	{lr}
    61cc:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    61ce:	f000 f843 	bl	6258 <Mcu_Ipw_GetResetReason>
    61d2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    61d4:	9b01      	ldr	r3, [sp, #4]
}
    61d6:	4618      	mov	r0, r3
    61d8:	b003      	add	sp, #12
    61da:	f85d fb04 	ldr.w	pc, [sp], #4

000061de <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    61de:	b500      	push	{lr}
    61e0:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    61e2:	f000 f83f 	bl	6264 <Mcu_Ipw_GetResetRawValue>
    61e6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    61e8:	9b01      	ldr	r3, [sp, #4]
}
    61ea:	4618      	mov	r0, r3
    61ec:	b003      	add	sp, #12
    61ee:	f85d fb04 	ldr.w	pc, [sp], #4

000061f2 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    61f2:	b500      	push	{lr}
    61f4:	b083      	sub	sp, #12
    61f6:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    61f8:	9801      	ldr	r0, [sp, #4]
    61fa:	f000 f839 	bl	6270 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    61fe:	bf00      	nop
    6200:	b003      	add	sp, #12
    6202:	f85d fb04 	ldr.w	pc, [sp], #4

00006206 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    6206:	b082      	sub	sp, #8
    6208:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    620a:	4b03      	ldr	r3, [pc, #12]	; (6218 <Mcu_ClkSrcFailureNotification+0x12>)
    620c:	681b      	ldr	r3, [r3, #0]
    620e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    6210:	bf00      	nop
    6212:	b002      	add	sp, #8
    6214:	4770      	bx	lr
    6216:	bf00      	nop
    6218:	1fff8d0c 	.word	0x1fff8d0c

0000621c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    621c:	b500      	push	{lr}
    621e:	b083      	sub	sp, #12
    6220:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    6222:	9801      	ldr	r0, [sp, #4]
    6224:	f000 f882 	bl	632c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    6228:	bf00      	nop
    622a:	b003      	add	sp, #12
    622c:	f85d fb04 	ldr.w	pc, [sp], #4

00006230 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6230:	b500      	push	{lr}
    6232:	b083      	sub	sp, #12
    6234:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    6236:	9801      	ldr	r0, [sp, #4]
    6238:	f7fc fc6a 	bl	2b10 <Clock_Ip_InitClock>
}
    623c:	bf00      	nop
    623e:	b003      	add	sp, #12
    6240:	f85d fb04 	ldr.w	pc, [sp], #4

00006244 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    6244:	b500      	push	{lr}
    6246:	b083      	sub	sp, #12
    6248:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    624a:	9801      	ldr	r0, [sp, #4]
    624c:	f000 f820 	bl	6290 <Power_Ip_SetMode>
}
    6250:	bf00      	nop
    6252:	b003      	add	sp, #12
    6254:	f85d fb04 	ldr.w	pc, [sp], #4

00006258 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    6258:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    625a:	f000 f84f 	bl	62fc <Power_Ip_GetResetReason>
    625e:	4603      	mov	r3, r0
}
    6260:	4618      	mov	r0, r3
    6262:	bd08      	pop	{r3, pc}

00006264 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    6264:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    6266:	f000 f857 	bl	6318 <Power_Ip_GetResetRawValue>
    626a:	4603      	mov	r3, r0
}
    626c:	4618      	mov	r0, r3
    626e:	bd08      	pop	{r3, pc}

00006270 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6270:	b500      	push	{lr}
    6272:	b083      	sub	sp, #12
    6274:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    6276:	9b01      	ldr	r3, [sp, #4]
    6278:	2b00      	cmp	r3, #0
    627a:	d102      	bne.n	6282 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    627c:	f000 f86c 	bl	6358 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    6280:	e001      	b.n	6286 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    6282:	f000 f86e 	bl	6362 <Power_Ip_EnableSleepOnExit>
}
    6286:	bf00      	nop
    6288:	b003      	add	sp, #12
    628a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006290 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6290:	b500      	push	{lr}
    6292:	b085      	sub	sp, #20
    6294:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    6296:	9b01      	ldr	r3, [sp, #4]
    6298:	685b      	ldr	r3, [r3, #4]
    629a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    629c:	9802      	ldr	r0, [sp, #8]
    629e:	f000 f9f5 	bl	668c <Power_Ip_SMC_ModeCheckEntry>
    62a2:	4603      	mov	r3, r0
    62a4:	2b00      	cmp	r3, #0
    62a6:	d002      	beq.n	62ae <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    62a8:	2301      	movs	r3, #1
    62aa:	9303      	str	r3, [sp, #12]
    62ac:	e003      	b.n	62b6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    62ae:	9801      	ldr	r0, [sp, #4]
    62b0:	f000 fa1e 	bl	66f0 <Power_Ip_SMC_ModeConfig>
    62b4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    62b6:	9b03      	ldr	r3, [sp, #12]
    62b8:	2b01      	cmp	r3, #1
    62ba:	d103      	bne.n	62c4 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    62bc:	21ff      	movs	r1, #255	; 0xff
    62be:	2003      	movs	r0, #3
    62c0:	f000 f8f4 	bl	64ac <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    62c4:	bf00      	nop
    62c6:	b005      	add	sp, #20
    62c8:	f85d fb04 	ldr.w	pc, [sp], #4

000062cc <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    62cc:	b084      	sub	sp, #16
    62ce:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    62d0:	230c      	movs	r3, #12
    62d2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    62d4:	4a08      	ldr	r2, [pc, #32]	; (62f8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    62d6:	9b01      	ldr	r3, [sp, #4]
    62d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62dc:	2b0e      	cmp	r3, #14
    62de:	d805      	bhi.n	62ec <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    62e0:	4a05      	ldr	r2, [pc, #20]	; (62f8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    62e2:	9b01      	ldr	r3, [sp, #4]
    62e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62e8:	9303      	str	r3, [sp, #12]
    62ea:	e001      	b.n	62f0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    62ec:	230c      	movs	r3, #12
    62ee:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    62f0:	9b03      	ldr	r3, [sp, #12]
}
    62f2:	4618      	mov	r0, r3
    62f4:	b004      	add	sp, #16
    62f6:	4770      	bx	lr
    62f8:	0001640c 	.word	0x0001640c

000062fc <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    62fc:	b500      	push	{lr}
    62fe:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    6300:	f000 f940 	bl	6584 <Power_Ip_RCM_GetResetReason>
    6304:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    6306:	9801      	ldr	r0, [sp, #4]
    6308:	f7ff ffe0 	bl	62cc <Power_Ip_ConvertIntergeToResetType>
    630c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    630e:	9b00      	ldr	r3, [sp, #0]
}
    6310:	4618      	mov	r0, r3
    6312:	b003      	add	sp, #12
    6314:	f85d fb04 	ldr.w	pc, [sp], #4

00006318 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6318:	b500      	push	{lr}
    631a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    631c:	f000 f98a 	bl	6634 <Power_Ip_RCM_GetResetRawValue>
    6320:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    6322:	9b01      	ldr	r3, [sp, #4]
}
    6324:	4618      	mov	r0, r3
    6326:	b003      	add	sp, #12
    6328:	f85d fb04 	ldr.w	pc, [sp], #4

0000632c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    632c:	b500      	push	{lr}
    632e:	b083      	sub	sp, #12
    6330:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    6332:	9b01      	ldr	r3, [sp, #4]
    6334:	681b      	ldr	r3, [r3, #0]
    6336:	4618      	mov	r0, r3
    6338:	f000 f90e 	bl	6558 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    633c:	9b01      	ldr	r3, [sp, #4]
    633e:	685b      	ldr	r3, [r3, #4]
    6340:	4618      	mov	r0, r3
    6342:	f000 f86d 	bl	6420 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    6346:	9b01      	ldr	r3, [sp, #4]
    6348:	689b      	ldr	r3, [r3, #8]
    634a:	4618      	mov	r0, r3
    634c:	f000 f990 	bl	6670 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    6350:	bf00      	nop
    6352:	b003      	add	sp, #12
    6354:	f85d fb04 	ldr.w	pc, [sp], #4

00006358 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    6358:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    635a:	f000 f811 	bl	6380 <Power_Ip_CM4_DisableSleepOnExit>
}
    635e:	bf00      	nop
    6360:	bd08      	pop	{r3, pc}

00006362 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    6362:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    6364:	f000 f820 	bl	63a8 <Power_Ip_CM4_EnableSleepOnExit>
}
    6368:	bf00      	nop
    636a:	bd08      	pop	{r3, pc}

0000636c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    636c:	b082      	sub	sp, #8
    636e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    6370:	4a02      	ldr	r2, [pc, #8]	; (637c <Power_Ip_InstallNotificationsCallback+0x10>)
    6372:	9b01      	ldr	r3, [sp, #4]
    6374:	6013      	str	r3, [r2, #0]
}
    6376:	bf00      	nop
    6378:	b002      	add	sp, #8
    637a:	4770      	bx	lr
    637c:	1fff8b1c 	.word	0x1fff8b1c

00006380 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    6380:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6382:	2300      	movs	r3, #0
    6384:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6386:	4b07      	ldr	r3, [pc, #28]	; (63a4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6388:	681b      	ldr	r3, [r3, #0]
    638a:	685b      	ldr	r3, [r3, #4]
    638c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    638e:	9b01      	ldr	r3, [sp, #4]
    6390:	f023 0302 	bic.w	r3, r3, #2
    6394:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6396:	4b03      	ldr	r3, [pc, #12]	; (63a4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6398:	681b      	ldr	r3, [r3, #0]
    639a:	9a01      	ldr	r2, [sp, #4]
    639c:	605a      	str	r2, [r3, #4]
}
    639e:	bf00      	nop
    63a0:	b002      	add	sp, #8
    63a2:	4770      	bx	lr
    63a4:	1fff8b20 	.word	0x1fff8b20

000063a8 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    63a8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    63aa:	2300      	movs	r3, #0
    63ac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    63ae:	4b07      	ldr	r3, [pc, #28]	; (63cc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    63b0:	681b      	ldr	r3, [r3, #0]
    63b2:	685b      	ldr	r3, [r3, #4]
    63b4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    63b6:	9b01      	ldr	r3, [sp, #4]
    63b8:	f043 0302 	orr.w	r3, r3, #2
    63bc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    63be:	4b03      	ldr	r3, [pc, #12]	; (63cc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    63c0:	681b      	ldr	r3, [r3, #0]
    63c2:	9a01      	ldr	r2, [sp, #4]
    63c4:	605a      	str	r2, [r3, #4]
}
    63c6:	bf00      	nop
    63c8:	b002      	add	sp, #8
    63ca:	4770      	bx	lr
    63cc:	1fff8b20 	.word	0x1fff8b20

000063d0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    63d0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    63d2:	2300      	movs	r3, #0
    63d4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    63d6:	4b07      	ldr	r3, [pc, #28]	; (63f4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    63d8:	681b      	ldr	r3, [r3, #0]
    63da:	685b      	ldr	r3, [r3, #4]
    63dc:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    63de:	9b01      	ldr	r3, [sp, #4]
    63e0:	f043 0304 	orr.w	r3, r3, #4
    63e4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    63e6:	4b03      	ldr	r3, [pc, #12]	; (63f4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	9a01      	ldr	r2, [sp, #4]
    63ec:	605a      	str	r2, [r3, #4]
}
    63ee:	bf00      	nop
    63f0:	b002      	add	sp, #8
    63f2:	4770      	bx	lr
    63f4:	1fff8b20 	.word	0x1fff8b20

000063f8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    63f8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    63fa:	2300      	movs	r3, #0
    63fc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    63fe:	4b07      	ldr	r3, [pc, #28]	; (641c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6400:	681b      	ldr	r3, [r3, #0]
    6402:	685b      	ldr	r3, [r3, #4]
    6404:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6406:	9b01      	ldr	r3, [sp, #4]
    6408:	f023 0304 	bic.w	r3, r3, #4
    640c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    640e:	4b03      	ldr	r3, [pc, #12]	; (641c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6410:	681b      	ldr	r3, [r3, #0]
    6412:	9a01      	ldr	r2, [sp, #4]
    6414:	605a      	str	r2, [r3, #4]
}
    6416:	bf00      	nop
    6418:	b002      	add	sp, #8
    641a:	4770      	bx	lr
    641c:	1fff8b20 	.word	0x1fff8b20

00006420 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6420:	b084      	sub	sp, #16
    6422:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6424:	4b20      	ldr	r3, [pc, #128]	; (64a8 <Power_Ip_PMC_PowerInit+0x88>)
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    642c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6430:	f003 030f 	and.w	r3, r3, #15
    6434:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6438:	9b01      	ldr	r3, [sp, #4]
    643a:	781a      	ldrb	r2, [r3, #0]
    643c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6440:	4313      	orrs	r3, r2
    6442:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    6446:	4a18      	ldr	r2, [pc, #96]	; (64a8 <Power_Ip_PMC_PowerInit+0x88>)
    6448:	f89d 300f 	ldrb.w	r3, [sp, #15]
    644c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    644e:	4b16      	ldr	r3, [pc, #88]	; (64a8 <Power_Ip_PMC_PowerInit+0x88>)
    6450:	785b      	ldrb	r3, [r3, #1]
    6452:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6456:	f89d 300f 	ldrb.w	r3, [sp, #15]
    645a:	f003 031f 	and.w	r3, r3, #31
    645e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    6462:	9b01      	ldr	r3, [sp, #4]
    6464:	785a      	ldrb	r2, [r3, #1]
    6466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    646a:	4313      	orrs	r3, r2
    646c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6470:	4a0d      	ldr	r2, [pc, #52]	; (64a8 <Power_Ip_PMC_PowerInit+0x88>)
    6472:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6476:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6478:	4b0b      	ldr	r3, [pc, #44]	; (64a8 <Power_Ip_PMC_PowerInit+0x88>)
    647a:	789b      	ldrb	r3, [r3, #2]
    647c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6480:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6484:	f003 0338 	and.w	r3, r3, #56	; 0x38
    6488:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    648c:	9b01      	ldr	r3, [sp, #4]
    648e:	789a      	ldrb	r2, [r3, #2]
    6490:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6494:	4313      	orrs	r3, r2
    6496:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    649a:	4a03      	ldr	r2, [pc, #12]	; (64a8 <Power_Ip_PMC_PowerInit+0x88>)
    649c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    64a0:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    64a2:	bf00      	nop
    64a4:	b004      	add	sp, #16
    64a6:	4770      	bx	lr
    64a8:	4007d000 	.word	0x4007d000

000064ac <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    64ac:	b500      	push	{lr}
    64ae:	b083      	sub	sp, #12
    64b0:	9001      	str	r0, [sp, #4]
    64b2:	460b      	mov	r3, r1
    64b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    64b8:	4b05      	ldr	r3, [pc, #20]	; (64d0 <Power_Ip_ReportPowerErrors+0x24>)
    64ba:	681b      	ldr	r3, [r3, #0]
    64bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    64c0:	4611      	mov	r1, r2
    64c2:	9801      	ldr	r0, [sp, #4]
    64c4:	4798      	blx	r3
}
    64c6:	bf00      	nop
    64c8:	b003      	add	sp, #12
    64ca:	f85d fb04 	ldr.w	pc, [sp], #4
    64ce:	bf00      	nop
    64d0:	1fff8b1c 	.word	0x1fff8b1c

000064d4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    64d4:	b082      	sub	sp, #8
    64d6:	9001      	str	r0, [sp, #4]
    64d8:	460b      	mov	r3, r1
    64da:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    64de:	bf00      	nop
    64e0:	b002      	add	sp, #8
    64e2:	4770      	bx	lr

000064e4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    64e4:	b500      	push	{lr}
    64e6:	b085      	sub	sp, #20
    64e8:	9003      	str	r0, [sp, #12]
    64ea:	9102      	str	r1, [sp, #8]
    64ec:	9201      	str	r2, [sp, #4]
    64ee:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    64f0:	2000      	movs	r0, #0
    64f2:	f7fc f83d 	bl	2570 <OsIf_GetCounter>
    64f6:	4602      	mov	r2, r0
    64f8:	9b03      	ldr	r3, [sp, #12]
    64fa:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    64fc:	9b02      	ldr	r3, [sp, #8]
    64fe:	2200      	movs	r2, #0
    6500:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    6502:	2100      	movs	r1, #0
    6504:	9800      	ldr	r0, [sp, #0]
    6506:	f7fc f87f 	bl	2608 <OsIf_MicrosToTicks>
    650a:	4602      	mov	r2, r0
    650c:	9b01      	ldr	r3, [sp, #4]
    650e:	601a      	str	r2, [r3, #0]
}
    6510:	bf00      	nop
    6512:	b005      	add	sp, #20
    6514:	f85d fb04 	ldr.w	pc, [sp], #4

00006518 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6518:	b500      	push	{lr}
    651a:	b087      	sub	sp, #28
    651c:	9003      	str	r0, [sp, #12]
    651e:	9102      	str	r1, [sp, #8]
    6520:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6522:	2300      	movs	r3, #0
    6524:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6528:	2100      	movs	r1, #0
    652a:	9803      	ldr	r0, [sp, #12]
    652c:	f7fc f839 	bl	25a2 <OsIf_GetElapsed>
    6530:	4602      	mov	r2, r0
    6532:	9b02      	ldr	r3, [sp, #8]
    6534:	681b      	ldr	r3, [r3, #0]
    6536:	441a      	add	r2, r3
    6538:	9b02      	ldr	r3, [sp, #8]
    653a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    653c:	9b02      	ldr	r3, [sp, #8]
    653e:	681b      	ldr	r3, [r3, #0]
    6540:	9a01      	ldr	r2, [sp, #4]
    6542:	429a      	cmp	r2, r3
    6544:	d802      	bhi.n	654c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6546:	2301      	movs	r3, #1
    6548:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    654c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6550:	4618      	mov	r0, r3
    6552:	b007      	add	sp, #28
    6554:	f85d fb04 	ldr.w	pc, [sp], #4

00006558 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6558:	b082      	sub	sp, #8
    655a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    655c:	9b01      	ldr	r3, [sp, #4]
    655e:	681a      	ldr	r2, [r3, #0]
    6560:	4907      	ldr	r1, [pc, #28]	; (6580 <Power_Ip_RCM_ResetInit+0x28>)
    6562:	f641 7307 	movw	r3, #7943	; 0x1f07
    6566:	4013      	ands	r3, r2
    6568:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	685a      	ldr	r2, [r3, #4]
    656e:	4904      	ldr	r1, [pc, #16]	; (6580 <Power_Ip_RCM_ResetInit+0x28>)
    6570:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6574:	4013      	ands	r3, r2
    6576:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6578:	bf00      	nop
    657a:	b002      	add	sp, #8
    657c:	4770      	bx	lr
    657e:	bf00      	nop
    6580:	4007f000 	.word	0x4007f000

00006584 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6584:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6586:	230c      	movs	r3, #12
    6588:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    658a:	2300      	movs	r3, #0
    658c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    658e:	2300      	movs	r3, #0
    6590:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6592:	2300      	movs	r3, #0
    6594:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6596:	4b25      	ldr	r3, [pc, #148]	; (662c <Power_Ip_RCM_GetResetReason+0xa8>)
    6598:	699a      	ldr	r2, [r3, #24]
    659a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    659e:	4013      	ands	r3, r2
    65a0:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    65a2:	9b03      	ldr	r3, [sp, #12]
    65a4:	2b00      	cmp	r3, #0
    65a6:	d008      	beq.n	65ba <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    65a8:	4920      	ldr	r1, [pc, #128]	; (662c <Power_Ip_RCM_GetResetReason+0xa8>)
    65aa:	9a03      	ldr	r2, [sp, #12]
    65ac:	f642 73ee 	movw	r3, #12270	; 0x2fee
    65b0:	4013      	ands	r3, r2
    65b2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    65b4:	4a1e      	ldr	r2, [pc, #120]	; (6630 <Power_Ip_RCM_GetResetReason+0xac>)
    65b6:	9b03      	ldr	r3, [sp, #12]
    65b8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    65ba:	4b1d      	ldr	r3, [pc, #116]	; (6630 <Power_Ip_RCM_GetResetReason+0xac>)
    65bc:	681b      	ldr	r3, [r3, #0]
    65be:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    65c0:	9a02      	ldr	r2, [sp, #8]
    65c2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    65c6:	4013      	ands	r3, r2
    65c8:	2b82      	cmp	r3, #130	; 0x82
    65ca:	d102      	bne.n	65d2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    65cc:	2305      	movs	r3, #5
    65ce:	9307      	str	r3, [sp, #28]
    65d0:	e027      	b.n	6622 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    65d2:	2300      	movs	r3, #0
    65d4:	9306      	str	r3, [sp, #24]
    65d6:	e021      	b.n	661c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    65d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    65dc:	9b06      	ldr	r3, [sp, #24]
    65de:	fa22 f303 	lsr.w	r3, r2, r3
    65e2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    65e4:	9a01      	ldr	r2, [sp, #4]
    65e6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    65ea:	4013      	ands	r3, r2
    65ec:	2b00      	cmp	r3, #0
    65ee:	d012      	beq.n	6616 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    65f0:	9a01      	ldr	r2, [sp, #4]
    65f2:	9b02      	ldr	r3, [sp, #8]
    65f4:	4013      	ands	r3, r2
    65f6:	2b00      	cmp	r3, #0
    65f8:	d00a      	beq.n	6610 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    65fa:	9b05      	ldr	r3, [sp, #20]
    65fc:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    65fe:	9b04      	ldr	r3, [sp, #16]
    6600:	3301      	adds	r3, #1
    6602:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6604:	9b04      	ldr	r3, [sp, #16]
    6606:	2b01      	cmp	r3, #1
    6608:	d902      	bls.n	6610 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    660a:	230d      	movs	r3, #13
    660c:	9307      	str	r3, [sp, #28]
                        break;
    660e:	e008      	b.n	6622 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6610:	9b05      	ldr	r3, [sp, #20]
    6612:	3301      	adds	r3, #1
    6614:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6616:	9b06      	ldr	r3, [sp, #24]
    6618:	3301      	adds	r3, #1
    661a:	9306      	str	r3, [sp, #24]
    661c:	9b06      	ldr	r3, [sp, #24]
    661e:	2b1f      	cmp	r3, #31
    6620:	d9da      	bls.n	65d8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6622:	9b07      	ldr	r3, [sp, #28]
}
    6624:	4618      	mov	r0, r3
    6626:	b008      	add	sp, #32
    6628:	4770      	bx	lr
    662a:	bf00      	nop
    662c:	4007f000 	.word	0x4007f000
    6630:	1fff8d10 	.word	0x1fff8d10

00006634 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6634:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6636:	4b0c      	ldr	r3, [pc, #48]	; (6668 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6638:	699a      	ldr	r2, [r3, #24]
    663a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    663e:	4013      	ands	r3, r2
    6640:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6642:	9b01      	ldr	r3, [sp, #4]
    6644:	2b00      	cmp	r3, #0
    6646:	d008      	beq.n	665a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6648:	4907      	ldr	r1, [pc, #28]	; (6668 <Power_Ip_RCM_GetResetRawValue+0x34>)
    664a:	9a01      	ldr	r2, [sp, #4]
    664c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6650:	4013      	ands	r3, r2
    6652:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6654:	4a05      	ldr	r2, [pc, #20]	; (666c <Power_Ip_RCM_GetResetRawValue+0x38>)
    6656:	9b01      	ldr	r3, [sp, #4]
    6658:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    665a:	4b04      	ldr	r3, [pc, #16]	; (666c <Power_Ip_RCM_GetResetRawValue+0x38>)
    665c:	681b      	ldr	r3, [r3, #0]
    665e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6660:	9b00      	ldr	r3, [sp, #0]
}
    6662:	4618      	mov	r0, r3
    6664:	b002      	add	sp, #8
    6666:	4770      	bx	lr
    6668:	4007f000 	.word	0x4007f000
    666c:	1fff8d10 	.word	0x1fff8d10

00006670 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6670:	b082      	sub	sp, #8
    6672:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6674:	9b01      	ldr	r3, [sp, #4]
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	4a03      	ldr	r2, [pc, #12]	; (6688 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    667a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    667e:	6093      	str	r3, [r2, #8]
}
    6680:	bf00      	nop
    6682:	b002      	add	sp, #8
    6684:	4770      	bx	lr
    6686:	bf00      	nop
    6688:	4007e000 	.word	0x4007e000

0000668c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    668c:	b084      	sub	sp, #16
    668e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6690:	2301      	movs	r3, #1
    6692:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6694:	4b15      	ldr	r3, [pc, #84]	; (66ec <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6696:	695b      	ldr	r3, [r3, #20]
    6698:	b2db      	uxtb	r3, r3
    669a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    669c:	9b01      	ldr	r3, [sp, #4]
    669e:	2b02      	cmp	r3, #2
    66a0:	d012      	beq.n	66c8 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    66a2:	9b01      	ldr	r3, [sp, #4]
    66a4:	2b02      	cmp	r3, #2
    66a6:	d818      	bhi.n	66da <Power_Ip_SMC_ModeCheckEntry+0x4e>
    66a8:	9b01      	ldr	r3, [sp, #4]
    66aa:	2b00      	cmp	r3, #0
    66ac:	d003      	beq.n	66b6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    66ae:	9b01      	ldr	r3, [sp, #4]
    66b0:	2b01      	cmp	r3, #1
    66b2:	d003      	beq.n	66bc <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    66b4:	e011      	b.n	66da <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    66b6:	2300      	movs	r3, #0
    66b8:	9303      	str	r3, [sp, #12]
            break;
    66ba:	e013      	b.n	66e4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    66bc:	9b02      	ldr	r3, [sp, #8]
    66be:	2b01      	cmp	r3, #1
    66c0:	d10d      	bne.n	66de <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    66c2:	2300      	movs	r3, #0
    66c4:	9303      	str	r3, [sp, #12]
            break;
    66c6:	e00a      	b.n	66de <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    66c8:	9b02      	ldr	r3, [sp, #8]
    66ca:	2b01      	cmp	r3, #1
    66cc:	d002      	beq.n	66d4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    66ce:	9b02      	ldr	r3, [sp, #8]
    66d0:	2b10      	cmp	r3, #16
    66d2:	d106      	bne.n	66e2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    66d4:	2300      	movs	r3, #0
    66d6:	9303      	str	r3, [sp, #12]
            break;
    66d8:	e003      	b.n	66e2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    66da:	bf00      	nop
    66dc:	e002      	b.n	66e4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    66de:	bf00      	nop
    66e0:	e000      	b.n	66e4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    66e2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    66e4:	9b03      	ldr	r3, [sp, #12]
}
    66e6:	4618      	mov	r0, r3
    66e8:	b004      	add	sp, #16
    66ea:	4770      	bx	lr
    66ec:	4007e000 	.word	0x4007e000

000066f0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    66f0:	b500      	push	{lr}
    66f2:	b08b      	sub	sp, #44	; 0x2c
    66f4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    66f6:	2300      	movs	r3, #0
    66f8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    66fa:	2300      	movs	r3, #0
    66fc:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    66fe:	2300      	movs	r3, #0
    6700:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6704:	9b01      	ldr	r3, [sp, #4]
    6706:	685b      	ldr	r3, [r3, #4]
    6708:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    670a:	9b08      	ldr	r3, [sp, #32]
    670c:	2b02      	cmp	r3, #2
    670e:	d076      	beq.n	67fe <Power_Ip_SMC_ModeConfig+0x10e>
    6710:	9b08      	ldr	r3, [sp, #32]
    6712:	2b02      	cmp	r3, #2
    6714:	f200 80ab 	bhi.w	686e <Power_Ip_SMC_ModeConfig+0x17e>
    6718:	9b08      	ldr	r3, [sp, #32]
    671a:	2b00      	cmp	r3, #0
    671c:	d003      	beq.n	6726 <Power_Ip_SMC_ModeConfig+0x36>
    671e:	9b08      	ldr	r3, [sp, #32]
    6720:	2b01      	cmp	r3, #1
    6722:	d034      	beq.n	678e <Power_Ip_SMC_ModeConfig+0x9e>
    6724:	e0a3      	b.n	686e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6726:	4b58      	ldr	r3, [pc, #352]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    6728:	68db      	ldr	r3, [r3, #12]
    672a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    672c:	9b06      	ldr	r3, [sp, #24]
    672e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6732:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6734:	4a54      	ldr	r2, [pc, #336]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    6736:	9b06      	ldr	r3, [sp, #24]
    6738:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    673a:	aa02      	add	r2, sp, #8
    673c:	a903      	add	r1, sp, #12
    673e:	a804      	add	r0, sp, #16
    6740:	f24c 3350 	movw	r3, #50000	; 0xc350
    6744:	f7ff fece 	bl	64e4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6748:	9a02      	ldr	r2, [sp, #8]
    674a:	a903      	add	r1, sp, #12
    674c:	ab04      	add	r3, sp, #16
    674e:	4618      	mov	r0, r3
    6750:	f7ff fee2 	bl	6518 <Power_Ip_TimeoutExpired>
    6754:	4603      	mov	r3, r0
    6756:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    675a:	4b4b      	ldr	r3, [pc, #300]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    675c:	695b      	ldr	r3, [r3, #20]
    675e:	f003 0301 	and.w	r3, r3, #1
    6762:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6764:	9b05      	ldr	r3, [sp, #20]
    6766:	2b01      	cmp	r3, #1
    6768:	d006      	beq.n	6778 <Power_Ip_SMC_ModeConfig+0x88>
    676a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    676e:	f083 0301 	eor.w	r3, r3, #1
    6772:	b2db      	uxtb	r3, r3
    6774:	2b00      	cmp	r3, #0
    6776:	d1e7      	bne.n	6748 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6778:	f89d 301f 	ldrb.w	r3, [sp, #31]
    677c:	2b00      	cmp	r3, #0
    677e:	d079      	beq.n	6874 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6780:	2301      	movs	r3, #1
    6782:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6784:	21ff      	movs	r1, #255	; 0xff
    6786:	2000      	movs	r0, #0
    6788:	f7ff fe90 	bl	64ac <Power_Ip_ReportPowerErrors>
            }

            break;
    678c:	e072      	b.n	6874 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    678e:	4b3e      	ldr	r3, [pc, #248]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    6790:	68db      	ldr	r3, [r3, #12]
    6792:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6794:	9b06      	ldr	r3, [sp, #24]
    6796:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    679a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    679c:	9b06      	ldr	r3, [sp, #24]
    679e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    67a2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    67a4:	4a38      	ldr	r2, [pc, #224]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    67a6:	9b06      	ldr	r3, [sp, #24]
    67a8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    67aa:	aa02      	add	r2, sp, #8
    67ac:	a903      	add	r1, sp, #12
    67ae:	a804      	add	r0, sp, #16
    67b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    67b4:	f7ff fe96 	bl	64e4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    67b8:	9a02      	ldr	r2, [sp, #8]
    67ba:	a903      	add	r1, sp, #12
    67bc:	ab04      	add	r3, sp, #16
    67be:	4618      	mov	r0, r3
    67c0:	f7ff feaa 	bl	6518 <Power_Ip_TimeoutExpired>
    67c4:	4603      	mov	r3, r0
    67c6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    67ca:	4b2f      	ldr	r3, [pc, #188]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    67cc:	695b      	ldr	r3, [r3, #20]
    67ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    67d2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    67d4:	9b05      	ldr	r3, [sp, #20]
    67d6:	2b80      	cmp	r3, #128	; 0x80
    67d8:	d006      	beq.n	67e8 <Power_Ip_SMC_ModeConfig+0xf8>
    67da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    67de:	f083 0301 	eor.w	r3, r3, #1
    67e2:	b2db      	uxtb	r3, r3
    67e4:	2b00      	cmp	r3, #0
    67e6:	d1e7      	bne.n	67b8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    67e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    67ec:	2b00      	cmp	r3, #0
    67ee:	d043      	beq.n	6878 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    67f0:	2301      	movs	r3, #1
    67f2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    67f4:	21ff      	movs	r1, #255	; 0xff
    67f6:	2000      	movs	r0, #0
    67f8:	f7ff fe58 	bl	64ac <Power_Ip_ReportPowerErrors>
            }

            break;
    67fc:	e03c      	b.n	6878 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    67fe:	4b22      	ldr	r3, [pc, #136]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    6800:	68db      	ldr	r3, [r3, #12]
    6802:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6804:	9b06      	ldr	r3, [sp, #24]
    6806:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    680a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    680c:	9b06      	ldr	r3, [sp, #24]
    680e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6812:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6814:	4a1c      	ldr	r2, [pc, #112]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    6816:	9b06      	ldr	r3, [sp, #24]
    6818:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    681a:	aa02      	add	r2, sp, #8
    681c:	a903      	add	r1, sp, #12
    681e:	a804      	add	r0, sp, #16
    6820:	f24c 3350 	movw	r3, #50000	; 0xc350
    6824:	f7ff fe5e 	bl	64e4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6828:	9a02      	ldr	r2, [sp, #8]
    682a:	a903      	add	r1, sp, #12
    682c:	ab04      	add	r3, sp, #16
    682e:	4618      	mov	r0, r3
    6830:	f7ff fe72 	bl	6518 <Power_Ip_TimeoutExpired>
    6834:	4603      	mov	r3, r0
    6836:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    683a:	4b13      	ldr	r3, [pc, #76]	; (6888 <Power_Ip_SMC_ModeConfig+0x198>)
    683c:	695b      	ldr	r3, [r3, #20]
    683e:	f003 0304 	and.w	r3, r3, #4
    6842:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6844:	9b05      	ldr	r3, [sp, #20]
    6846:	2b04      	cmp	r3, #4
    6848:	d006      	beq.n	6858 <Power_Ip_SMC_ModeConfig+0x168>
    684a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    684e:	f083 0301 	eor.w	r3, r3, #1
    6852:	b2db      	uxtb	r3, r3
    6854:	2b00      	cmp	r3, #0
    6856:	d1e7      	bne.n	6828 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6858:	f89d 301f 	ldrb.w	r3, [sp, #31]
    685c:	2b00      	cmp	r3, #0
    685e:	d00d      	beq.n	687c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6860:	2301      	movs	r3, #1
    6862:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6864:	21ff      	movs	r1, #255	; 0xff
    6866:	2000      	movs	r0, #0
    6868:	f7ff fe20 	bl	64ac <Power_Ip_ReportPowerErrors>
            }

            break;
    686c:	e006      	b.n	687c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    686e:	2301      	movs	r3, #1
    6870:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6872:	e004      	b.n	687e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6874:	bf00      	nop
    6876:	e002      	b.n	687e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6878:	bf00      	nop
    687a:	e000      	b.n	687e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    687c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    687e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6880:	4618      	mov	r0, r3
    6882:	b00b      	add	sp, #44	; 0x2c
    6884:	f85d fb04 	ldr.w	pc, [sp], #4
    6888:	4007e000 	.word	0x4007e000

0000688c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    688c:	b500      	push	{lr}
    688e:	b085      	sub	sp, #20
    6890:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6892:	9b01      	ldr	r3, [sp, #4]
    6894:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6896:	9803      	ldr	r0, [sp, #12]
    6898:	f000 fbc8 	bl	702c <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    689c:	4a03      	ldr	r2, [pc, #12]	; (68ac <Port_Init+0x20>)
    689e:	9b03      	ldr	r3, [sp, #12]
    68a0:	6013      	str	r3, [r2, #0]
        }
    }
}
    68a2:	bf00      	nop
    68a4:	b005      	add	sp, #20
    68a6:	f85d fb04 	ldr.w	pc, [sp], #4
    68aa:	bf00      	nop
    68ac:	1fff8d14 	.word	0x1fff8d14

000068b0 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    68b0:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    68b2:	4b03      	ldr	r3, [pc, #12]	; (68c0 <Port_RefreshPortDirection+0x10>)
    68b4:	681b      	ldr	r3, [r3, #0]
    68b6:	4618      	mov	r0, r3
    68b8:	f000 fc10 	bl	70dc <Port_Ipw_RefreshPortDirection>
    }
}
    68bc:	bf00      	nop
    68be:	bd08      	pop	{r3, pc}
    68c0:	1fff8d14 	.word	0x1fff8d14

000068c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    68c4:	b086      	sub	sp, #24
    68c6:	9003      	str	r0, [sp, #12]
    68c8:	9102      	str	r1, [sp, #8]
    68ca:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    68cc:	23ff      	movs	r3, #255	; 0xff
    68ce:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    68d0:	9b03      	ldr	r3, [sp, #12]
    68d2:	4a39      	ldr	r2, [pc, #228]	; (69b8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    68d4:	4293      	cmp	r3, r2
    68d6:	d151      	bne.n	697c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    68d8:	9b02      	ldr	r3, [sp, #8]
    68da:	2b10      	cmp	r3, #16
    68dc:	d867      	bhi.n	69ae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    68de:	a201      	add	r2, pc, #4	; (adr r2, 68e4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    68e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    68e4:	00006929 	.word	0x00006929
    68e8:	00006937 	.word	0x00006937
    68ec:	000069af 	.word	0x000069af
    68f0:	000069af 	.word	0x000069af
    68f4:	000069af 	.word	0x000069af
    68f8:	000069af 	.word	0x000069af
    68fc:	000069af 	.word	0x000069af
    6900:	000069af 	.word	0x000069af
    6904:	000069af 	.word	0x000069af
    6908:	000069af 	.word	0x000069af
    690c:	000069af 	.word	0x000069af
    6910:	000069af 	.word	0x000069af
    6914:	000069af 	.word	0x000069af
    6918:	00006945 	.word	0x00006945
    691c:	00006953 	.word	0x00006953
    6920:	00006961 	.word	0x00006961
    6924:	0000696f 	.word	0x0000696f
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6928:	2301      	movs	r3, #1
    692a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    692c:	9a05      	ldr	r2, [sp, #20]
    692e:	9b01      	ldr	r3, [sp, #4]
    6930:	4313      	orrs	r3, r2
    6932:	9305      	str	r3, [sp, #20]
                break;
    6934:	e03c      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6936:	2302      	movs	r3, #2
    6938:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    693a:	9a05      	ldr	r2, [sp, #20]
    693c:	9b01      	ldr	r3, [sp, #4]
    693e:	4313      	orrs	r3, r2
    6940:	9305      	str	r3, [sp, #20]
                break;
    6942:	e035      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6944:	2304      	movs	r3, #4
    6946:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6948:	9a05      	ldr	r2, [sp, #20]
    694a:	9b01      	ldr	r3, [sp, #4]
    694c:	4313      	orrs	r3, r2
    694e:	9305      	str	r3, [sp, #20]
                break;
    6950:	e02e      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6952:	2308      	movs	r3, #8
    6954:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6956:	9a05      	ldr	r2, [sp, #20]
    6958:	9b01      	ldr	r3, [sp, #4]
    695a:	4313      	orrs	r3, r2
    695c:	9305      	str	r3, [sp, #20]
                break;
    695e:	e027      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    6960:	230e      	movs	r3, #14
    6962:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6964:	9a05      	ldr	r2, [sp, #20]
    6966:	9b01      	ldr	r3, [sp, #4]
    6968:	4013      	ands	r3, r2
    696a:	9305      	str	r3, [sp, #20]
                break;
    696c:	e020      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    696e:	230d      	movs	r3, #13
    6970:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6972:	9a05      	ldr	r2, [sp, #20]
    6974:	9b01      	ldr	r3, [sp, #4]
    6976:	4013      	ands	r3, r2
    6978:	9305      	str	r3, [sp, #20]
                break;
    697a:	e019      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    697c:	9b03      	ldr	r3, [sp, #12]
    697e:	4a0f      	ldr	r2, [pc, #60]	; (69bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6980:	4293      	cmp	r3, r2
    6982:	d115      	bne.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6984:	9b02      	ldr	r3, [sp, #8]
    6986:	2b00      	cmp	r3, #0
    6988:	d003      	beq.n	6992 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    698a:	9b02      	ldr	r3, [sp, #8]
    698c:	2b01      	cmp	r3, #1
    698e:	d007      	beq.n	69a0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6990:	e00e      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6992:	230b      	movs	r3, #11
    6994:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6996:	9a05      	ldr	r2, [sp, #20]
    6998:	9b01      	ldr	r3, [sp, #4]
    699a:	4013      	ands	r3, r2
    699c:	9305      	str	r3, [sp, #20]
                break;
    699e:	e007      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    69a0:	2307      	movs	r3, #7
    69a2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    69a4:	9a05      	ldr	r2, [sp, #20]
    69a6:	9b01      	ldr	r3, [sp, #4]
    69a8:	4013      	ands	r3, r2
    69aa:	9305      	str	r3, [sp, #20]
                break;
    69ac:	e000      	b.n	69b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    69ae:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    69b0:	9b05      	ldr	r3, [sp, #20]
}
    69b2:	4618      	mov	r0, r3
    69b4:	b006      	add	sp, #24
    69b6:	4770      	bx	lr
    69b8:	4004a000 	.word	0x4004a000
    69bc:	4004b000 	.word	0x4004b000

000069c0 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    69c0:	b500      	push	{lr}
    69c2:	b089      	sub	sp, #36	; 0x24
    69c4:	9003      	str	r0, [sp, #12]
    69c6:	9102      	str	r1, [sp, #8]
    69c8:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    69ca:	9b01      	ldr	r3, [sp, #4]
    69cc:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    69ce:	9b01      	ldr	r3, [sp, #4]
    69d0:	2b08      	cmp	r3, #8
    69d2:	d121      	bne.n	6a18 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    69d4:	4b13      	ldr	r3, [pc, #76]	; (6a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    69d6:	685b      	ldr	r3, [r3, #4]
    69d8:	f003 030f 	and.w	r3, r3, #15
    69dc:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    69de:	9a06      	ldr	r2, [sp, #24]
    69e0:	9902      	ldr	r1, [sp, #8]
    69e2:	9803      	ldr	r0, [sp, #12]
    69e4:	f7ff ff6e 	bl	68c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    69e8:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    69ea:	9b05      	ldr	r3, [sp, #20]
    69ec:	2bff      	cmp	r3, #255	; 0xff
    69ee:	d011      	beq.n	6a14 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    69f0:	f00c fcc8 	bl	13384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    69f4:	4b0b      	ldr	r3, [pc, #44]	; (6a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    69f6:	685b      	ldr	r3, [r3, #4]
    69f8:	4a0a      	ldr	r2, [pc, #40]	; (6a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    69fa:	f023 030f 	bic.w	r3, r3, #15
    69fe:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6a00:	4b08      	ldr	r3, [pc, #32]	; (6a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6a02:	685a      	ldr	r2, [r3, #4]
    6a04:	9b05      	ldr	r3, [sp, #20]
    6a06:	f003 030f 	and.w	r3, r3, #15
    6a0a:	4906      	ldr	r1, [pc, #24]	; (6a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6a0c:	4313      	orrs	r3, r2
    6a0e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6a10:	f00c fce4 	bl	133dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6a14:	2300      	movs	r3, #0
    6a16:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6a18:	9b07      	ldr	r3, [sp, #28]
}
    6a1a:	4618      	mov	r0, r3
    6a1c:	b009      	add	sp, #36	; 0x24
    6a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    6a22:	bf00      	nop
    6a24:	40048000 	.word	0x40048000

00006a28 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6a28:	b500      	push	{lr}
    6a2a:	b087      	sub	sp, #28
    6a2c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6a2e:	2300      	movs	r3, #0
    6a30:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6a32:	2300      	movs	r3, #0
    6a34:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6a36:	2300      	movs	r3, #0
    6a38:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6a3a:	9b01      	ldr	r3, [sp, #4]
    6a3c:	68db      	ldr	r3, [r3, #12]
    6a3e:	2b02      	cmp	r3, #2
    6a40:	d00a      	beq.n	6a58 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6a42:	9b05      	ldr	r3, [sp, #20]
    6a44:	f043 0302 	orr.w	r3, r3, #2
    6a48:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6a4a:	9b01      	ldr	r3, [sp, #4]
    6a4c:	68db      	ldr	r3, [r3, #12]
    6a4e:	f003 0301 	and.w	r3, r3, #1
    6a52:	9a05      	ldr	r2, [sp, #20]
    6a54:	4313      	orrs	r3, r2
    6a56:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6a58:	9b01      	ldr	r3, [sp, #4]
    6a5a:	699b      	ldr	r3, [r3, #24]
    6a5c:	019b      	lsls	r3, r3, #6
    6a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6a62:	9a05      	ldr	r2, [sp, #20]
    6a64:	4313      	orrs	r3, r2
    6a66:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6a68:	9b01      	ldr	r3, [sp, #4]
    6a6a:	6a1b      	ldr	r3, [r3, #32]
    6a6c:	03db      	lsls	r3, r3, #15
    6a6e:	b29b      	uxth	r3, r3
    6a70:	9a05      	ldr	r2, [sp, #20]
    6a72:	4313      	orrs	r3, r2
    6a74:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6a76:	9b01      	ldr	r3, [sp, #4]
    6a78:	7f1b      	ldrb	r3, [r3, #28]
    6a7a:	2b00      	cmp	r3, #0
    6a7c:	d001      	beq.n	6a82 <Port_Ci_Port_Ip_PinInit+0x5a>
    6a7e:	2310      	movs	r3, #16
    6a80:	e000      	b.n	6a84 <Port_Ci_Port_Ip_PinInit+0x5c>
    6a82:	2300      	movs	r3, #0
    6a84:	9a05      	ldr	r2, [sp, #20]
    6a86:	4313      	orrs	r3, r2
    6a88:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6a8a:	9b01      	ldr	r3, [sp, #4]
    6a8c:	691b      	ldr	r3, [r3, #16]
    6a8e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6a90:	9b01      	ldr	r3, [sp, #4]
    6a92:	6818      	ldr	r0, [r3, #0]
    6a94:	9b01      	ldr	r3, [sp, #4]
    6a96:	689b      	ldr	r3, [r3, #8]
    6a98:	9a04      	ldr	r2, [sp, #16]
    6a9a:	4619      	mov	r1, r3
    6a9c:	f7ff ff90 	bl	69c0 <Port_Ci_Port_Ip_ConfigureInterleave>
    6aa0:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6aa2:	9b03      	ldr	r3, [sp, #12]
    6aa4:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6aa6:	9b04      	ldr	r3, [sp, #16]
    6aa8:	021b      	lsls	r3, r3, #8
    6aaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6aae:	9a05      	ldr	r2, [sp, #20]
    6ab0:	4313      	orrs	r3, r2
    6ab2:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6ab4:	f00c facc 	bl	13050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6ab8:	9b01      	ldr	r3, [sp, #4]
    6aba:	681b      	ldr	r3, [r3, #0]
    6abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6ac0:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6ac2:	9b01      	ldr	r3, [sp, #4]
    6ac4:	689b      	ldr	r3, [r3, #8]
    6ac6:	2201      	movs	r2, #1
    6ac8:	fa02 f303 	lsl.w	r3, r2, r3
    6acc:	43db      	mvns	r3, r3
    6ace:	9a02      	ldr	r2, [sp, #8]
    6ad0:	4013      	ands	r3, r2
    6ad2:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6ad4:	9b01      	ldr	r3, [sp, #4]
    6ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6ada:	2b00      	cmp	r3, #0
    6adc:	d001      	beq.n	6ae2 <Port_Ci_Port_Ip_PinInit+0xba>
    6ade:	2201      	movs	r2, #1
    6ae0:	e000      	b.n	6ae4 <Port_Ci_Port_Ip_PinInit+0xbc>
    6ae2:	2200      	movs	r2, #0
    6ae4:	9b01      	ldr	r3, [sp, #4]
    6ae6:	689b      	ldr	r3, [r3, #8]
    6ae8:	fa02 f303 	lsl.w	r3, r2, r3
    6aec:	9a02      	ldr	r2, [sp, #8]
    6aee:	4313      	orrs	r3, r2
    6af0:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6af2:	9b01      	ldr	r3, [sp, #4]
    6af4:	681b      	ldr	r3, [r3, #0]
    6af6:	9a02      	ldr	r2, [sp, #8]
    6af8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6afc:	f00c fad4 	bl	130a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6b00:	9b04      	ldr	r3, [sp, #16]
    6b02:	2b01      	cmp	r3, #1
    6b04:	d16d      	bne.n	6be2 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6b06:	9b01      	ldr	r3, [sp, #4]
    6b08:	695b      	ldr	r3, [r3, #20]
    6b0a:	2b02      	cmp	r3, #2
    6b0c:	d138      	bne.n	6b80 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6b0e:	9b01      	ldr	r3, [sp, #4]
    6b10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6b14:	2b01      	cmp	r3, #1
    6b16:	d10f      	bne.n	6b38 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6b18:	f00c faec 	bl	130f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6b1c:	9b01      	ldr	r3, [sp, #4]
    6b1e:	685b      	ldr	r3, [r3, #4]
    6b20:	6859      	ldr	r1, [r3, #4]
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	689b      	ldr	r3, [r3, #8]
    6b26:	2201      	movs	r2, #1
    6b28:	409a      	lsls	r2, r3
    6b2a:	9b01      	ldr	r3, [sp, #4]
    6b2c:	685b      	ldr	r3, [r3, #4]
    6b2e:	430a      	orrs	r2, r1
    6b30:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6b32:	f00c fb0b 	bl	1314c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6b36:	e013      	b.n	6b60 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d10e      	bne.n	6b60 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6b42:	f00c fb29 	bl	13198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6b46:	9b01      	ldr	r3, [sp, #4]
    6b48:	685b      	ldr	r3, [r3, #4]
    6b4a:	6899      	ldr	r1, [r3, #8]
    6b4c:	9b01      	ldr	r3, [sp, #4]
    6b4e:	689b      	ldr	r3, [r3, #8]
    6b50:	2201      	movs	r2, #1
    6b52:	409a      	lsls	r2, r3
    6b54:	9b01      	ldr	r3, [sp, #4]
    6b56:	685b      	ldr	r3, [r3, #4]
    6b58:	430a      	orrs	r2, r1
    6b5a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6b5c:	f00c fb48 	bl	131f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6b60:	f00c fb6c 	bl	1323c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6b64:	9b01      	ldr	r3, [sp, #4]
    6b66:	685b      	ldr	r3, [r3, #4]
    6b68:	6959      	ldr	r1, [r3, #20]
    6b6a:	9b01      	ldr	r3, [sp, #4]
    6b6c:	689b      	ldr	r3, [r3, #8]
    6b6e:	2201      	movs	r2, #1
    6b70:	409a      	lsls	r2, r3
    6b72:	9b01      	ldr	r3, [sp, #4]
    6b74:	685b      	ldr	r3, [r3, #4]
    6b76:	430a      	orrs	r2, r1
    6b78:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6b7a:	f00c fb8b 	bl	13294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6b7e:	e030      	b.n	6be2 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6b80:	f00c fb5c 	bl	1323c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6b84:	9b01      	ldr	r3, [sp, #4]
    6b86:	685b      	ldr	r3, [r3, #4]
    6b88:	6959      	ldr	r1, [r3, #20]
    6b8a:	9b01      	ldr	r3, [sp, #4]
    6b8c:	689b      	ldr	r3, [r3, #8]
    6b8e:	2201      	movs	r2, #1
    6b90:	fa02 f303 	lsl.w	r3, r2, r3
    6b94:	43da      	mvns	r2, r3
    6b96:	9b01      	ldr	r3, [sp, #4]
    6b98:	685b      	ldr	r3, [r3, #4]
    6b9a:	400a      	ands	r2, r1
    6b9c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6b9e:	f00c fb79 	bl	13294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6ba2:	f00c fb9d 	bl	132e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6ba6:	9b01      	ldr	r3, [sp, #4]
    6ba8:	685b      	ldr	r3, [r3, #4]
    6baa:	6999      	ldr	r1, [r3, #24]
    6bac:	9b01      	ldr	r3, [sp, #4]
    6bae:	689b      	ldr	r3, [r3, #8]
    6bb0:	2201      	movs	r2, #1
    6bb2:	fa02 f303 	lsl.w	r3, r2, r3
    6bb6:	43da      	mvns	r2, r3
    6bb8:	9b01      	ldr	r3, [sp, #4]
    6bba:	685b      	ldr	r3, [r3, #4]
    6bbc:	400a      	ands	r2, r1
    6bbe:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6bc0:	9b01      	ldr	r3, [sp, #4]
    6bc2:	695b      	ldr	r3, [r3, #20]
    6bc4:	2b03      	cmp	r3, #3
    6bc6:	d10a      	bne.n	6bde <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6bc8:	9b01      	ldr	r3, [sp, #4]
    6bca:	685b      	ldr	r3, [r3, #4]
    6bcc:	6999      	ldr	r1, [r3, #24]
    6bce:	9b01      	ldr	r3, [sp, #4]
    6bd0:	689b      	ldr	r3, [r3, #8]
    6bd2:	2201      	movs	r2, #1
    6bd4:	409a      	lsls	r2, r3
    6bd6:	9b01      	ldr	r3, [sp, #4]
    6bd8:	685b      	ldr	r3, [r3, #4]
    6bda:	430a      	orrs	r2, r1
    6bdc:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6bde:	f00c fbab 	bl	13338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6be2:	9b01      	ldr	r3, [sp, #4]
    6be4:	681b      	ldr	r3, [r3, #0]
    6be6:	9a01      	ldr	r2, [sp, #4]
    6be8:	6892      	ldr	r2, [r2, #8]
    6bea:	9905      	ldr	r1, [sp, #20]
    6bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6bf0:	bf00      	nop
    6bf2:	b007      	add	sp, #28
    6bf4:	f85d fb04 	ldr.w	pc, [sp], #4

00006bf8 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6bf8:	b500      	push	{lr}
    6bfa:	b085      	sub	sp, #20
    6bfc:	9001      	str	r0, [sp, #4]
    6bfe:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6c00:	2300      	movs	r3, #0
    6c02:	9303      	str	r3, [sp, #12]
    6c04:	e00d      	b.n	6c22 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6c06:	9a03      	ldr	r2, [sp, #12]
    6c08:	4613      	mov	r3, r2
    6c0a:	009b      	lsls	r3, r3, #2
    6c0c:	4413      	add	r3, r2
    6c0e:	00db      	lsls	r3, r3, #3
    6c10:	461a      	mov	r2, r3
    6c12:	9b00      	ldr	r3, [sp, #0]
    6c14:	4413      	add	r3, r2
    6c16:	4618      	mov	r0, r3
    6c18:	f7ff ff06 	bl	6a28 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6c1c:	9b03      	ldr	r3, [sp, #12]
    6c1e:	3301      	adds	r3, #1
    6c20:	9303      	str	r3, [sp, #12]
    6c22:	9a03      	ldr	r2, [sp, #12]
    6c24:	9b01      	ldr	r3, [sp, #4]
    6c26:	429a      	cmp	r2, r3
    6c28:	d3ed      	bcc.n	6c06 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6c2a:	2300      	movs	r3, #0
}
    6c2c:	4618      	mov	r0, r3
    6c2e:	b005      	add	sp, #20
    6c30:	f85d fb04 	ldr.w	pc, [sp], #4

00006c34 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6c34:	b500      	push	{lr}
    6c36:	b087      	sub	sp, #28
    6c38:	9003      	str	r0, [sp, #12]
    6c3a:	9102      	str	r1, [sp, #8]
    6c3c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6c3e:	9a01      	ldr	r2, [sp, #4]
    6c40:	9902      	ldr	r1, [sp, #8]
    6c42:	9803      	ldr	r0, [sp, #12]
    6c44:	f7ff febc 	bl	69c0 <Port_Ci_Port_Ip_ConfigureInterleave>
    6c48:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6c4a:	f00c fbed 	bl	13428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6c4e:	9b03      	ldr	r3, [sp, #12]
    6c50:	9a02      	ldr	r2, [sp, #8]
    6c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c56:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6c58:	9b04      	ldr	r3, [sp, #16]
    6c5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6c5e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6c60:	9b05      	ldr	r3, [sp, #20]
    6c62:	021b      	lsls	r3, r3, #8
    6c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6c68:	9a04      	ldr	r2, [sp, #16]
    6c6a:	4313      	orrs	r3, r2
    6c6c:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6c6e:	9b03      	ldr	r3, [sp, #12]
    6c70:	9a02      	ldr	r2, [sp, #8]
    6c72:	9904      	ldr	r1, [sp, #16]
    6c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6c78:	f00c fc02 	bl	13480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6c7c:	bf00      	nop
    6c7e:	b007      	add	sp, #28
    6c80:	f85d fb04 	ldr.w	pc, [sp], #4

00006c84 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6c84:	b500      	push	{lr}
    6c86:	b083      	sub	sp, #12
    6c88:	9001      	str	r0, [sp, #4]
    6c8a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6c8c:	f00c fc1e 	bl	134cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6c90:	9b01      	ldr	r3, [sp, #4]
    6c92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6c96:	2101      	movs	r1, #1
    6c98:	9b00      	ldr	r3, [sp, #0]
    6c9a:	fa01 f303 	lsl.w	r3, r1, r3
    6c9e:	431a      	orrs	r2, r3
    6ca0:	9b01      	ldr	r3, [sp, #4]
    6ca2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6ca6:	f00c fc3d 	bl	13524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6caa:	bf00      	nop
    6cac:	b003      	add	sp, #12
    6cae:	f85d fb04 	ldr.w	pc, [sp], #4

00006cb2 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6cb2:	b500      	push	{lr}
    6cb4:	b083      	sub	sp, #12
    6cb6:	9001      	str	r0, [sp, #4]
    6cb8:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6cba:	f00c fc59 	bl	13570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6cbe:	9b01      	ldr	r3, [sp, #4]
    6cc0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6cc4:	2101      	movs	r1, #1
    6cc6:	9b00      	ldr	r3, [sp, #0]
    6cc8:	fa01 f303 	lsl.w	r3, r1, r3
    6ccc:	43db      	mvns	r3, r3
    6cce:	401a      	ands	r2, r3
    6cd0:	9b01      	ldr	r3, [sp, #4]
    6cd2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6cd6:	f00c fc77 	bl	135c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6cda:	bf00      	nop
    6cdc:	b003      	add	sp, #12
    6cde:	f85d fb04 	ldr.w	pc, [sp], #4

00006ce2 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6ce2:	b082      	sub	sp, #8
    6ce4:	9001      	str	r0, [sp, #4]
    6ce6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6ce8:	9b00      	ldr	r3, [sp, #0]
    6cea:	785b      	ldrb	r3, [r3, #1]
    6cec:	f003 0201 	and.w	r2, r3, #1
    6cf0:	9b01      	ldr	r3, [sp, #4]
    6cf2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6cf6:	9b00      	ldr	r3, [sp, #0]
    6cf8:	789b      	ldrb	r3, [r3, #2]
    6cfa:	f003 021f 	and.w	r2, r3, #31
    6cfe:	9b01      	ldr	r3, [sp, #4]
    6d00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6d04:	bf00      	nop
    6d06:	b002      	add	sp, #8
    6d08:	4770      	bx	lr

00006d0a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6d0a:	b086      	sub	sp, #24
    6d0c:	9003      	str	r0, [sp, #12]
    6d0e:	9301      	str	r3, [sp, #4]
    6d10:	460b      	mov	r3, r1
    6d12:	f8ad 300a 	strh.w	r3, [sp, #10]
    6d16:	4613      	mov	r3, r2
    6d18:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6d1c:	2300      	movs	r3, #0
    6d1e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6d22:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d26:	f043 0301 	orr.w	r3, r3, #1
    6d2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6d2e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d32:	f043 0302 	orr.w	r3, r3, #2
    6d36:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6d3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d3e:	f043 0310 	orr.w	r3, r3, #16
    6d42:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6d46:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6d4e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6d52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6d5a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6d5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6d6a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6d6e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6d72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6d76:	4013      	ands	r3, r2
    6d78:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6d7c:	9b01      	ldr	r3, [sp, #4]
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d003      	beq.n	6d8a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6d82:	9b01      	ldr	r3, [sp, #4]
    6d84:	2b01      	cmp	r3, #1
    6d86:	d00a      	beq.n	6d9e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6d88:	e013      	b.n	6db2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6d8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6d8e:	041a      	lsls	r2, r3, #16
    6d90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d94:	431a      	orrs	r2, r3
    6d96:	9b03      	ldr	r3, [sp, #12]
    6d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6d9c:	e009      	b.n	6db2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6d9e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6da2:	041a      	lsls	r2, r3, #16
    6da4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6da8:	431a      	orrs	r2, r3
    6daa:	9b03      	ldr	r3, [sp, #12]
    6dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6db0:	bf00      	nop
    }
}
    6db2:	bf00      	nop
    6db4:	b006      	add	sp, #24
    6db6:	4770      	bx	lr

00006db8 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6db8:	b500      	push	{lr}
    6dba:	b087      	sub	sp, #28
    6dbc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6dbe:	9b01      	ldr	r3, [sp, #4]
    6dc0:	885b      	ldrh	r3, [r3, #2]
    6dc2:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6dc6:	9b01      	ldr	r3, [sp, #4]
    6dc8:	689b      	ldr	r3, [r3, #8]
    6dca:	7a1b      	ldrb	r3, [r3, #8]
    6dcc:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6dd0:	9b01      	ldr	r3, [sp, #4]
    6dd2:	689b      	ldr	r3, [r3, #8]
    6dd4:	681b      	ldr	r3, [r3, #0]
    6dd6:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6dd8:	9b01      	ldr	r3, [sp, #4]
    6dda:	689b      	ldr	r3, [r3, #8]
    6ddc:	685b      	ldr	r3, [r3, #4]
    6dde:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6de0:	2300      	movs	r3, #0
    6de2:	f8ad 3016 	strh.w	r3, [sp, #22]
    6de6:	e111      	b.n	700c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6de8:	9b02      	ldr	r3, [sp, #8]
    6dea:	2b02      	cmp	r3, #2
    6dec:	d169      	bne.n	6ec2 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6dee:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6df2:	2b01      	cmp	r3, #1
    6df4:	d11a      	bne.n	6e2c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6df6:	9b01      	ldr	r3, [sp, #4]
    6df8:	685a      	ldr	r2, [r3, #4]
    6dfa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6dfe:	005b      	lsls	r3, r3, #1
    6e00:	4413      	add	r3, r2
    6e02:	881b      	ldrh	r3, [r3, #0]
    6e04:	f003 021f 	and.w	r2, r3, #31
    6e08:	9b01      	ldr	r3, [sp, #4]
    6e0a:	6859      	ldr	r1, [r3, #4]
    6e0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e10:	005b      	lsls	r3, r3, #1
    6e12:	440b      	add	r3, r1
    6e14:	881b      	ldrh	r3, [r3, #0]
    6e16:	095b      	lsrs	r3, r3, #5
    6e18:	b29b      	uxth	r3, r3
    6e1a:	4619      	mov	r1, r3
    6e1c:	4b81      	ldr	r3, [pc, #516]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6e1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6e22:	2101      	movs	r1, #1
    6e24:	fa01 f202 	lsl.w	r2, r1, r2
    6e28:	605a      	str	r2, [r3, #4]
    6e2a:	e01d      	b.n	6e68 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6e2c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d119      	bne.n	6e68 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6e34:	9b01      	ldr	r3, [sp, #4]
    6e36:	685a      	ldr	r2, [r3, #4]
    6e38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e3c:	005b      	lsls	r3, r3, #1
    6e3e:	4413      	add	r3, r2
    6e40:	881b      	ldrh	r3, [r3, #0]
    6e42:	f003 021f 	and.w	r2, r3, #31
    6e46:	9b01      	ldr	r3, [sp, #4]
    6e48:	6859      	ldr	r1, [r3, #4]
    6e4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e4e:	005b      	lsls	r3, r3, #1
    6e50:	440b      	add	r3, r1
    6e52:	881b      	ldrh	r3, [r3, #0]
    6e54:	095b      	lsrs	r3, r3, #5
    6e56:	b29b      	uxth	r3, r3
    6e58:	4619      	mov	r1, r3
    6e5a:	4b72      	ldr	r3, [pc, #456]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6e5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6e60:	2101      	movs	r1, #1
    6e62:	fa01 f202 	lsl.w	r2, r1, r2
    6e66:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6e68:	f00c fbd4 	bl	13614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6e6c:	9b01      	ldr	r3, [sp, #4]
    6e6e:	685a      	ldr	r2, [r3, #4]
    6e70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e74:	005b      	lsls	r3, r3, #1
    6e76:	4413      	add	r3, r2
    6e78:	881b      	ldrh	r3, [r3, #0]
    6e7a:	095b      	lsrs	r3, r3, #5
    6e7c:	b29b      	uxth	r3, r3
    6e7e:	461a      	mov	r2, r3
    6e80:	4b68      	ldr	r3, [pc, #416]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e86:	6959      	ldr	r1, [r3, #20]
    6e88:	9b01      	ldr	r3, [sp, #4]
    6e8a:	685a      	ldr	r2, [r3, #4]
    6e8c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e90:	005b      	lsls	r3, r3, #1
    6e92:	4413      	add	r3, r2
    6e94:	881b      	ldrh	r3, [r3, #0]
    6e96:	f003 031f 	and.w	r3, r3, #31
    6e9a:	2201      	movs	r2, #1
    6e9c:	409a      	lsls	r2, r3
    6e9e:	9b01      	ldr	r3, [sp, #4]
    6ea0:	6858      	ldr	r0, [r3, #4]
    6ea2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ea6:	005b      	lsls	r3, r3, #1
    6ea8:	4403      	add	r3, r0
    6eaa:	881b      	ldrh	r3, [r3, #0]
    6eac:	095b      	lsrs	r3, r3, #5
    6eae:	b29b      	uxth	r3, r3
    6eb0:	4618      	mov	r0, r3
    6eb2:	4b5c      	ldr	r3, [pc, #368]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6eb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6eb8:	430a      	orrs	r2, r1
    6eba:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6ebc:	f00c fbd6 	bl	1366c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6ec0:	e086      	b.n	6fd0 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6ec2:	f00c fba7 	bl	13614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6ec6:	9b01      	ldr	r3, [sp, #4]
    6ec8:	685a      	ldr	r2, [r3, #4]
    6eca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ece:	005b      	lsls	r3, r3, #1
    6ed0:	4413      	add	r3, r2
    6ed2:	881b      	ldrh	r3, [r3, #0]
    6ed4:	095b      	lsrs	r3, r3, #5
    6ed6:	b29b      	uxth	r3, r3
    6ed8:	461a      	mov	r2, r3
    6eda:	4b52      	ldr	r3, [pc, #328]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ee0:	6959      	ldr	r1, [r3, #20]
    6ee2:	9b01      	ldr	r3, [sp, #4]
    6ee4:	685a      	ldr	r2, [r3, #4]
    6ee6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6eea:	005b      	lsls	r3, r3, #1
    6eec:	4413      	add	r3, r2
    6eee:	881b      	ldrh	r3, [r3, #0]
    6ef0:	f003 031f 	and.w	r3, r3, #31
    6ef4:	2201      	movs	r2, #1
    6ef6:	fa02 f303 	lsl.w	r3, r2, r3
    6efa:	43da      	mvns	r2, r3
    6efc:	9b01      	ldr	r3, [sp, #4]
    6efe:	6858      	ldr	r0, [r3, #4]
    6f00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f04:	005b      	lsls	r3, r3, #1
    6f06:	4403      	add	r3, r0
    6f08:	881b      	ldrh	r3, [r3, #0]
    6f0a:	095b      	lsrs	r3, r3, #5
    6f0c:	b29b      	uxth	r3, r3
    6f0e:	4618      	mov	r0, r3
    6f10:	4b44      	ldr	r3, [pc, #272]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6f12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f16:	400a      	ands	r2, r1
    6f18:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6f1a:	f00c fba7 	bl	1366c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6f1e:	f00c fbcb 	bl	136b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6f22:	9b01      	ldr	r3, [sp, #4]
    6f24:	685a      	ldr	r2, [r3, #4]
    6f26:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f2a:	005b      	lsls	r3, r3, #1
    6f2c:	4413      	add	r3, r2
    6f2e:	881b      	ldrh	r3, [r3, #0]
    6f30:	095b      	lsrs	r3, r3, #5
    6f32:	b29b      	uxth	r3, r3
    6f34:	461a      	mov	r2, r3
    6f36:	4b3b      	ldr	r3, [pc, #236]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f3c:	6999      	ldr	r1, [r3, #24]
    6f3e:	9b01      	ldr	r3, [sp, #4]
    6f40:	685a      	ldr	r2, [r3, #4]
    6f42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f46:	005b      	lsls	r3, r3, #1
    6f48:	4413      	add	r3, r2
    6f4a:	881b      	ldrh	r3, [r3, #0]
    6f4c:	f003 031f 	and.w	r3, r3, #31
    6f50:	2201      	movs	r2, #1
    6f52:	fa02 f303 	lsl.w	r3, r2, r3
    6f56:	43da      	mvns	r2, r3
    6f58:	9b01      	ldr	r3, [sp, #4]
    6f5a:	6858      	ldr	r0, [r3, #4]
    6f5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f60:	005b      	lsls	r3, r3, #1
    6f62:	4403      	add	r3, r0
    6f64:	881b      	ldrh	r3, [r3, #0]
    6f66:	095b      	lsrs	r3, r3, #5
    6f68:	b29b      	uxth	r3, r3
    6f6a:	4618      	mov	r0, r3
    6f6c:	4b2d      	ldr	r3, [pc, #180]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6f6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f72:	400a      	ands	r2, r1
    6f74:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6f76:	9b02      	ldr	r3, [sp, #8]
    6f78:	2b03      	cmp	r3, #3
    6f7a:	d127      	bne.n	6fcc <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6f7c:	9b01      	ldr	r3, [sp, #4]
    6f7e:	685a      	ldr	r2, [r3, #4]
    6f80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f84:	005b      	lsls	r3, r3, #1
    6f86:	4413      	add	r3, r2
    6f88:	881b      	ldrh	r3, [r3, #0]
    6f8a:	095b      	lsrs	r3, r3, #5
    6f8c:	b29b      	uxth	r3, r3
    6f8e:	461a      	mov	r2, r3
    6f90:	4b24      	ldr	r3, [pc, #144]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f96:	6999      	ldr	r1, [r3, #24]
    6f98:	9b01      	ldr	r3, [sp, #4]
    6f9a:	685a      	ldr	r2, [r3, #4]
    6f9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fa0:	005b      	lsls	r3, r3, #1
    6fa2:	4413      	add	r3, r2
    6fa4:	881b      	ldrh	r3, [r3, #0]
    6fa6:	f003 031f 	and.w	r3, r3, #31
    6faa:	2201      	movs	r2, #1
    6fac:	409a      	lsls	r2, r3
    6fae:	9b01      	ldr	r3, [sp, #4]
    6fb0:	6858      	ldr	r0, [r3, #4]
    6fb2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fb6:	005b      	lsls	r3, r3, #1
    6fb8:	4403      	add	r3, r0
    6fba:	881b      	ldrh	r3, [r3, #0]
    6fbc:	095b      	lsrs	r3, r3, #5
    6fbe:	b29b      	uxth	r3, r3
    6fc0:	4618      	mov	r0, r3
    6fc2:	4b18      	ldr	r3, [pc, #96]	; (7024 <Port_Ipw_Init_UnusedPins+0x26c>)
    6fc4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6fc8:	430a      	orrs	r2, r1
    6fca:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6fcc:	f00c fba0 	bl	13710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6fd0:	9b01      	ldr	r3, [sp, #4]
    6fd2:	685a      	ldr	r2, [r3, #4]
    6fd4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fd8:	005b      	lsls	r3, r3, #1
    6fda:	4413      	add	r3, r2
    6fdc:	881b      	ldrh	r3, [r3, #0]
    6fde:	095b      	lsrs	r3, r3, #5
    6fe0:	b29b      	uxth	r3, r3
    6fe2:	461a      	mov	r2, r3
    6fe4:	4b10      	ldr	r3, [pc, #64]	; (7028 <Port_Ipw_Init_UnusedPins+0x270>)
    6fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6fea:	9a01      	ldr	r2, [sp, #4]
    6fec:	6851      	ldr	r1, [r2, #4]
    6fee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6ff2:	0052      	lsls	r2, r2, #1
    6ff4:	440a      	add	r2, r1
    6ff6:	8812      	ldrh	r2, [r2, #0]
    6ff8:	f002 021f 	and.w	r2, r2, #31
    6ffc:	9903      	ldr	r1, [sp, #12]
    6ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7002:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7006:	3301      	adds	r3, #1
    7008:	f8ad 3016 	strh.w	r3, [sp, #22]
    700c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7010:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7014:	429a      	cmp	r2, r3
    7016:	f4ff aee7 	bcc.w	6de8 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    701a:	bf00      	nop
    701c:	bf00      	nop
    701e:	b007      	add	sp, #28
    7020:	f85d fb04 	ldr.w	pc, [sp], #4
    7024:	0001645c 	.word	0x0001645c
    7028:	00016448 	.word	0x00016448

0000702c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    702c:	b500      	push	{lr}
    702e:	b085      	sub	sp, #20
    7030:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    7032:	9b01      	ldr	r3, [sp, #4]
    7034:	7c1b      	ldrb	r3, [r3, #16]
    7036:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    703a:	2300      	movs	r3, #0
    703c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7040:	e035      	b.n	70ae <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    7042:	9b01      	ldr	r3, [sp, #4]
    7044:	695a      	ldr	r2, [r3, #20]
    7046:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    704a:	00db      	lsls	r3, r3, #3
    704c:	4413      	add	r3, r2
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    7054:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7058:	4a1f      	ldr	r2, [pc, #124]	; (70d8 <Port_Ipw_Init+0xac>)
    705a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    705e:	9b01      	ldr	r3, [sp, #4]
    7060:	695a      	ldr	r2, [r3, #20]
    7062:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7066:	00db      	lsls	r3, r3, #3
    7068:	4413      	add	r3, r2
    706a:	4619      	mov	r1, r3
    706c:	f7ff fe39 	bl	6ce2 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    7070:	f00c fcbc 	bl	139ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    7074:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7078:	4a17      	ldr	r2, [pc, #92]	; (70d8 <Port_Ipw_Init+0xac>)
    707a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    707e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    7082:	9b01      	ldr	r3, [sp, #4]
    7084:	695a      	ldr	r2, [r3, #20]
    7086:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    708a:	00db      	lsls	r3, r3, #3
    708c:	4413      	add	r3, r2
    708e:	685a      	ldr	r2, [r3, #4]
    7090:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7094:	4810      	ldr	r0, [pc, #64]	; (70d8 <Port_Ipw_Init+0xac>)
    7096:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    709a:	430a      	orrs	r2, r1
    709c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    70a0:	f00c fcd0 	bl	13a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    70a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    70a8:	3301      	adds	r3, #1
    70aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    70ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    70b2:	b29b      	uxth	r3, r3
    70b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    70b8:	429a      	cmp	r2, r3
    70ba:	d3c2      	bcc.n	7042 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    70bc:	9b01      	ldr	r3, [sp, #4]
    70be:	6a1b      	ldr	r3, [r3, #32]
    70c0:	4619      	mov	r1, r3
    70c2:	2009      	movs	r0, #9
    70c4:	f7ff fd98 	bl	6bf8 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    70c8:	9801      	ldr	r0, [sp, #4]
    70ca:	f7ff fe75 	bl	6db8 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    70ce:	bf00      	nop
    70d0:	b005      	add	sp, #20
    70d2:	f85d fb04 	ldr.w	pc, [sp], #4
    70d6:	bf00      	nop
    70d8:	00016448 	.word	0x00016448

000070dc <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    70dc:	b500      	push	{lr}
    70de:	b085      	sub	sp, #20
    70e0:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    70e2:	9b01      	ldr	r3, [sp, #4]
    70e4:	881b      	ldrh	r3, [r3, #0]
    70e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    70ea:	2300      	movs	r3, #0
    70ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    70f0:	e0d2      	b.n	7298 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    70f2:	9b01      	ldr	r3, [sp, #4]
    70f4:	68d9      	ldr	r1, [r3, #12]
    70f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    70fa:	4613      	mov	r3, r2
    70fc:	009b      	lsls	r3, r3, #2
    70fe:	4413      	add	r3, r2
    7100:	009b      	lsls	r3, r3, #2
    7102:	440b      	add	r3, r1
    7104:	7c5b      	ldrb	r3, [r3, #17]
    7106:	f083 0301 	eor.w	r3, r3, #1
    710a:	b2db      	uxtb	r3, r3
    710c:	2b00      	cmp	r3, #0
    710e:	f000 80be 	beq.w	728e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    7112:	9b01      	ldr	r3, [sp, #4]
    7114:	68d9      	ldr	r1, [r3, #12]
    7116:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    711a:	4613      	mov	r3, r2
    711c:	009b      	lsls	r3, r3, #2
    711e:	4413      	add	r3, r2
    7120:	009b      	lsls	r3, r3, #2
    7122:	440b      	add	r3, r1
    7124:	7c1b      	ldrb	r3, [r3, #16]
    7126:	2b00      	cmp	r3, #0
    7128:	f000 80b1 	beq.w	728e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    712c:	9b01      	ldr	r3, [sp, #4]
    712e:	68d9      	ldr	r1, [r3, #12]
    7130:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7134:	4613      	mov	r3, r2
    7136:	009b      	lsls	r3, r3, #2
    7138:	4413      	add	r3, r2
    713a:	009b      	lsls	r3, r3, #2
    713c:	440b      	add	r3, r1
    713e:	881b      	ldrh	r3, [r3, #0]
    7140:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7144:	9b01      	ldr	r3, [sp, #4]
    7146:	68d9      	ldr	r1, [r3, #12]
    7148:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    714c:	4613      	mov	r3, r2
    714e:	009b      	lsls	r3, r3, #2
    7150:	4413      	add	r3, r2
    7152:	009b      	lsls	r3, r3, #2
    7154:	440b      	add	r3, r1
    7156:	68db      	ldr	r3, [r3, #12]
    7158:	2b02      	cmp	r3, #2
    715a:	d11d      	bne.n	7198 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    715c:	f00c fd8e 	bl	13c7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7160:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7164:	095b      	lsrs	r3, r3, #5
    7166:	b29b      	uxth	r3, r3
    7168:	461a      	mov	r2, r3
    716a:	4b51      	ldr	r3, [pc, #324]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    716c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7170:	6959      	ldr	r1, [r3, #20]
    7172:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7176:	f003 031f 	and.w	r3, r3, #31
    717a:	2201      	movs	r2, #1
    717c:	409a      	lsls	r2, r3
    717e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7182:	095b      	lsrs	r3, r3, #5
    7184:	b29b      	uxth	r3, r3
    7186:	4618      	mov	r0, r3
    7188:	4b49      	ldr	r3, [pc, #292]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    718a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    718e:	430a      	orrs	r2, r1
    7190:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7192:	f00c fd9f 	bl	13cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    7196:	e07a      	b.n	728e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7198:	9b01      	ldr	r3, [sp, #4]
    719a:	68d9      	ldr	r1, [r3, #12]
    719c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    71a0:	4613      	mov	r3, r2
    71a2:	009b      	lsls	r3, r3, #2
    71a4:	4413      	add	r3, r2
    71a6:	009b      	lsls	r3, r3, #2
    71a8:	440b      	add	r3, r1
    71aa:	68db      	ldr	r3, [r3, #12]
    71ac:	2b01      	cmp	r3, #1
    71ae:	d00b      	beq.n	71c8 <Port_Ipw_RefreshPortDirection+0xec>
    71b0:	9b01      	ldr	r3, [sp, #4]
    71b2:	68d9      	ldr	r1, [r3, #12]
    71b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    71b8:	4613      	mov	r3, r2
    71ba:	009b      	lsls	r3, r3, #2
    71bc:	4413      	add	r3, r2
    71be:	009b      	lsls	r3, r3, #2
    71c0:	440b      	add	r3, r1
    71c2:	68db      	ldr	r3, [r3, #12]
    71c4:	2b03      	cmp	r3, #3
    71c6:	d162      	bne.n	728e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    71c8:	f00c fd58 	bl	13c7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    71cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    71d0:	095b      	lsrs	r3, r3, #5
    71d2:	b29b      	uxth	r3, r3
    71d4:	461a      	mov	r2, r3
    71d6:	4b36      	ldr	r3, [pc, #216]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    71d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71dc:	6959      	ldr	r1, [r3, #20]
    71de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    71e2:	f003 031f 	and.w	r3, r3, #31
    71e6:	2201      	movs	r2, #1
    71e8:	fa02 f303 	lsl.w	r3, r2, r3
    71ec:	43da      	mvns	r2, r3
    71ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    71f2:	095b      	lsrs	r3, r3, #5
    71f4:	b29b      	uxth	r3, r3
    71f6:	4618      	mov	r0, r3
    71f8:	4b2d      	ldr	r3, [pc, #180]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    71fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    71fe:	400a      	ands	r2, r1
    7200:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7202:	f00c fd67 	bl	13cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    7206:	f00c fd8b 	bl	13d20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    720a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    720e:	095b      	lsrs	r3, r3, #5
    7210:	b29b      	uxth	r3, r3
    7212:	461a      	mov	r2, r3
    7214:	4b26      	ldr	r3, [pc, #152]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    721a:	6999      	ldr	r1, [r3, #24]
    721c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7220:	f003 031f 	and.w	r3, r3, #31
    7224:	2201      	movs	r2, #1
    7226:	fa02 f303 	lsl.w	r3, r2, r3
    722a:	43da      	mvns	r2, r3
    722c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7230:	095b      	lsrs	r3, r3, #5
    7232:	b29b      	uxth	r3, r3
    7234:	4618      	mov	r0, r3
    7236:	4b1e      	ldr	r3, [pc, #120]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7238:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    723c:	400a      	ands	r2, r1
    723e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7240:	9b01      	ldr	r3, [sp, #4]
    7242:	68d9      	ldr	r1, [r3, #12]
    7244:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7248:	4613      	mov	r3, r2
    724a:	009b      	lsls	r3, r3, #2
    724c:	4413      	add	r3, r2
    724e:	009b      	lsls	r3, r3, #2
    7250:	440b      	add	r3, r1
    7252:	68db      	ldr	r3, [r3, #12]
    7254:	2b03      	cmp	r3, #3
    7256:	d118      	bne.n	728a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7258:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    725c:	095b      	lsrs	r3, r3, #5
    725e:	b29b      	uxth	r3, r3
    7260:	461a      	mov	r2, r3
    7262:	4b13      	ldr	r3, [pc, #76]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7268:	6999      	ldr	r1, [r3, #24]
    726a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    726e:	f003 031f 	and.w	r3, r3, #31
    7272:	2201      	movs	r2, #1
    7274:	409a      	lsls	r2, r3
    7276:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    727a:	095b      	lsrs	r3, r3, #5
    727c:	b29b      	uxth	r3, r3
    727e:	4618      	mov	r0, r3
    7280:	4b0b      	ldr	r3, [pc, #44]	; (72b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7282:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7286:	430a      	orrs	r2, r1
    7288:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    728a:	f00c fd75 	bl	13d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    728e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7292:	3301      	adds	r3, #1
    7294:	f8ad 300e 	strh.w	r3, [sp, #14]
    7298:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    729c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    72a0:	429a      	cmp	r2, r3
    72a2:	f4ff af26 	bcc.w	70f2 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    72a6:	bf00      	nop
    72a8:	bf00      	nop
    72aa:	b005      	add	sp, #20
    72ac:	f85d fb04 	ldr.w	pc, [sp], #4
    72b0:	0001645c 	.word	0x0001645c

000072b4 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    72b4:	b500      	push	{lr}
    72b6:	b085      	sub	sp, #20
    72b8:	4603      	mov	r3, r0
    72ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    72be:	2300      	movs	r3, #0
    72c0:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    72c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72c8:	4618      	mov	r0, r3
    72ca:	f000 f871 	bl	73b0 <Dio_Ipw_ReadChannel>
    72ce:	4603      	mov	r3, r0
    72d0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    72d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    72d8:	4618      	mov	r0, r3
    72da:	b005      	add	sp, #20
    72dc:	f85d fb04 	ldr.w	pc, [sp], #4

000072e0 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    72e0:	b500      	push	{lr}
    72e2:	b083      	sub	sp, #12
    72e4:	4603      	mov	r3, r0
    72e6:	460a      	mov	r2, r1
    72e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    72ec:	4613      	mov	r3, r2
    72ee:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    72f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    72f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72fa:	4611      	mov	r1, r2
    72fc:	4618      	mov	r0, r3
    72fe:	f000 f87d 	bl	73fc <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    7302:	bf00      	nop
    7304:	b003      	add	sp, #12
    7306:	f85d fb04 	ldr.w	pc, [sp], #4

0000730a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    730a:	b500      	push	{lr}
    730c:	b085      	sub	sp, #20
    730e:	4603      	mov	r3, r0
    7310:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    7314:	2300      	movs	r3, #0
    7316:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    731a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    731e:	4618      	mov	r0, r3
    7320:	f000 f892 	bl	7448 <Dio_Ipw_FlipChannel>
    7324:	4603      	mov	r3, r0
    7326:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    732a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    732e:	4618      	mov	r0, r3
    7330:	b005      	add	sp, #20
    7332:	f85d fb04 	ldr.w	pc, [sp], #4

00007336 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    7336:	b500      	push	{lr}
    7338:	b085      	sub	sp, #20
    733a:	4603      	mov	r3, r0
    733c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7340:	2300      	movs	r3, #0
    7342:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    7344:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7348:	4618      	mov	r0, r3
    734a:	f000 f8b3 	bl	74b4 <Dio_Ipw_ReadPort>
    734e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    7350:	9b03      	ldr	r3, [sp, #12]
}
    7352:	4618      	mov	r0, r3
    7354:	b005      	add	sp, #20
    7356:	f85d fb04 	ldr.w	pc, [sp], #4

0000735a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    735a:	b500      	push	{lr}
    735c:	b083      	sub	sp, #12
    735e:	4603      	mov	r3, r0
    7360:	9100      	str	r1, [sp, #0]
    7362:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    7366:	f89d 3007 	ldrb.w	r3, [sp, #7]
    736a:	9900      	ldr	r1, [sp, #0]
    736c:	4618      	mov	r0, r3
    736e:	f000 f8b9 	bl	74e4 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    7372:	bf00      	nop
    7374:	b003      	add	sp, #12
    7376:	f85d fb04 	ldr.w	pc, [sp], #4

0000737a <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    737a:	b500      	push	{lr}
    737c:	b085      	sub	sp, #20
    737e:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7380:	2300      	movs	r3, #0
    7382:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    7384:	9801      	ldr	r0, [sp, #4]
    7386:	f000 f8c5 	bl	7514 <Dio_Ipw_ReadChannelGroup>
    738a:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    738c:	9b03      	ldr	r3, [sp, #12]
}
    738e:	4618      	mov	r0, r3
    7390:	b005      	add	sp, #20
    7392:	f85d fb04 	ldr.w	pc, [sp], #4

00007396 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    7396:	b500      	push	{lr}
    7398:	b083      	sub	sp, #12
    739a:	9001      	str	r0, [sp, #4]
    739c:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    739e:	9900      	ldr	r1, [sp, #0]
    73a0:	9801      	ldr	r0, [sp, #4]
    73a2:	f000 f8d7 	bl	7554 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    73a6:	bf00      	nop
    73a8:	b003      	add	sp, #12
    73aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000073b0 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    73b0:	b500      	push	{lr}
    73b2:	b087      	sub	sp, #28
    73b4:	4603      	mov	r3, r0
    73b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    73ba:	2300      	movs	r3, #0
    73bc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    73c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73c4:	095b      	lsrs	r3, r3, #5
    73c6:	b29b      	uxth	r3, r3
    73c8:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    73ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73ce:	f003 031f 	and.w	r3, r3, #31
    73d2:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    73d4:	4a08      	ldr	r2, [pc, #32]	; (73f8 <Dio_Ipw_ReadChannel+0x48>)
    73d6:	9b04      	ldr	r3, [sp, #16]
    73d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73dc:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    73de:	9903      	ldr	r1, [sp, #12]
    73e0:	9802      	ldr	r0, [sp, #8]
    73e2:	f000 f940 	bl	7666 <Gpio_Dio_Ip_ReadPin>
    73e6:	4603      	mov	r3, r0
    73e8:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    73ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    73f0:	4618      	mov	r0, r3
    73f2:	b007      	add	sp, #28
    73f4:	f85d fb04 	ldr.w	pc, [sp], #4
    73f8:	1fff8b24 	.word	0x1fff8b24

000073fc <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    73fc:	b500      	push	{lr}
    73fe:	b087      	sub	sp, #28
    7400:	4603      	mov	r3, r0
    7402:	460a      	mov	r2, r1
    7404:	f8ad 3006 	strh.w	r3, [sp, #6]
    7408:	4613      	mov	r3, r2
    740a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    740e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7412:	095b      	lsrs	r3, r3, #5
    7414:	b29b      	uxth	r3, r3
    7416:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    741c:	f003 031f 	and.w	r3, r3, #31
    7420:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    7422:	4a08      	ldr	r2, [pc, #32]	; (7444 <Dio_Ipw_WriteChannel+0x48>)
    7424:	9b05      	ldr	r3, [sp, #20]
    7426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    742a:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    742c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7430:	461a      	mov	r2, r3
    7432:	9904      	ldr	r1, [sp, #16]
    7434:	9803      	ldr	r0, [sp, #12]
    7436:	f000 f8b7 	bl	75a8 <Gpio_Dio_Ip_WritePin>
}
    743a:	bf00      	nop
    743c:	b007      	add	sp, #28
    743e:	f85d fb04 	ldr.w	pc, [sp], #4
    7442:	bf00      	nop
    7444:	1fff8b24 	.word	0x1fff8b24

00007448 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7448:	b500      	push	{lr}
    744a:	b089      	sub	sp, #36	; 0x24
    744c:	4603      	mov	r3, r0
    744e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    7452:	2300      	movs	r3, #0
    7454:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7458:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    745c:	095b      	lsrs	r3, r3, #5
    745e:	b29b      	uxth	r3, r3
    7460:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7462:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7466:	f003 031f 	and.w	r3, r3, #31
    746a:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    746c:	4a10      	ldr	r2, [pc, #64]	; (74b0 <Dio_Ipw_FlipChannel+0x68>)
    746e:	9b06      	ldr	r3, [sp, #24]
    7470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7474:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    7476:	2201      	movs	r2, #1
    7478:	9b05      	ldr	r3, [sp, #20]
    747a:	fa02 f303 	lsl.w	r3, r2, r3
    747e:	4619      	mov	r1, r3
    7480:	9804      	ldr	r0, [sp, #16]
    7482:	f000 f8dc 	bl	763e <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    7486:	9804      	ldr	r0, [sp, #16]
    7488:	f000 f8bc 	bl	7604 <Gpio_Dio_Ip_GetPinsOutput>
    748c:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    748e:	2201      	movs	r2, #1
    7490:	9b05      	ldr	r3, [sp, #20]
    7492:	409a      	lsls	r2, r3
    7494:	9b03      	ldr	r3, [sp, #12]
    7496:	401a      	ands	r2, r3
    7498:	9b05      	ldr	r3, [sp, #20]
    749a:	fa22 f303 	lsr.w	r3, r2, r3
    749e:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    74a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    74a6:	4618      	mov	r0, r3
    74a8:	b009      	add	sp, #36	; 0x24
    74aa:	f85d fb04 	ldr.w	pc, [sp], #4
    74ae:	bf00      	nop
    74b0:	1fff8b24 	.word	0x1fff8b24

000074b4 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    74b4:	b500      	push	{lr}
    74b6:	b085      	sub	sp, #20
    74b8:	4603      	mov	r3, r0
    74ba:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    74be:	2300      	movs	r3, #0
    74c0:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    74c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74c6:	4a06      	ldr	r2, [pc, #24]	; (74e0 <Dio_Ipw_ReadPort+0x2c>)
    74c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74cc:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    74ce:	9802      	ldr	r0, [sp, #8]
    74d0:	f000 f8be 	bl	7650 <Gpio_Dio_Ip_ReadPins>
    74d4:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    74d6:	9b03      	ldr	r3, [sp, #12]
}
    74d8:	4618      	mov	r0, r3
    74da:	b005      	add	sp, #20
    74dc:	f85d fb04 	ldr.w	pc, [sp], #4
    74e0:	1fff8b24 	.word	0x1fff8b24

000074e4 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    74e4:	b500      	push	{lr}
    74e6:	b085      	sub	sp, #20
    74e8:	4603      	mov	r3, r0
    74ea:	9100      	str	r1, [sp, #0]
    74ec:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    74f0:	9b00      	ldr	r3, [sp, #0]
    74f2:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    74f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74f8:	4a05      	ldr	r2, [pc, #20]	; (7510 <Dio_Ipw_WritePort+0x2c>)
    74fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74fe:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    7500:	9903      	ldr	r1, [sp, #12]
    7502:	9802      	ldr	r0, [sp, #8]
    7504:	f000 f875 	bl	75f2 <Gpio_Dio_Ip_WritePins>
}
    7508:	bf00      	nop
    750a:	b005      	add	sp, #20
    750c:	f85d fb04 	ldr.w	pc, [sp], #4
    7510:	1fff8b24 	.word	0x1fff8b24

00007514 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    7514:	b500      	push	{lr}
    7516:	b087      	sub	sp, #28
    7518:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    751a:	2300      	movs	r3, #0
    751c:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    751e:	9b01      	ldr	r3, [sp, #4]
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	461a      	mov	r2, r3
    7524:	4b0a      	ldr	r3, [pc, #40]	; (7550 <Dio_Ipw_ReadChannelGroup+0x3c>)
    7526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    752a:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    752c:	9804      	ldr	r0, [sp, #16]
    752e:	f000 f88f 	bl	7650 <Gpio_Dio_Ip_ReadPins>
    7532:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    7534:	9b01      	ldr	r3, [sp, #4]
    7536:	685a      	ldr	r2, [r3, #4]
    7538:	9b03      	ldr	r3, [sp, #12]
    753a:	4013      	ands	r3, r2
    753c:	9a01      	ldr	r2, [sp, #4]
    753e:	7852      	ldrb	r2, [r2, #1]
    7540:	40d3      	lsrs	r3, r2
    7542:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    7544:	9b05      	ldr	r3, [sp, #20]
}
    7546:	4618      	mov	r0, r3
    7548:	b007      	add	sp, #28
    754a:	f85d fb04 	ldr.w	pc, [sp], #4
    754e:	bf00      	nop
    7550:	1fff8b24 	.word	0x1fff8b24

00007554 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    7554:	b500      	push	{lr}
    7556:	b087      	sub	sp, #28
    7558:	9001      	str	r0, [sp, #4]
    755a:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    755c:	9b01      	ldr	r3, [sp, #4]
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	461a      	mov	r2, r3
    7562:	4b10      	ldr	r3, [pc, #64]	; (75a4 <Dio_Ipw_WriteChannelGroup+0x50>)
    7564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7568:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    756a:	9b01      	ldr	r3, [sp, #4]
    756c:	785b      	ldrb	r3, [r3, #1]
    756e:	461a      	mov	r2, r3
    7570:	9b00      	ldr	r3, [sp, #0]
    7572:	fa03 f202 	lsl.w	r2, r3, r2
    7576:	9b01      	ldr	r3, [sp, #4]
    7578:	685b      	ldr	r3, [r3, #4]
    757a:	4013      	ands	r3, r2
    757c:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    757e:	9904      	ldr	r1, [sp, #16]
    7580:	9805      	ldr	r0, [sp, #20]
    7582:	f000 f84a 	bl	761a <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    7586:	9b04      	ldr	r3, [sp, #16]
    7588:	43da      	mvns	r2, r3
    758a:	9b01      	ldr	r3, [sp, #4]
    758c:	685b      	ldr	r3, [r3, #4]
    758e:	4013      	ands	r3, r2
    7590:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    7592:	9903      	ldr	r1, [sp, #12]
    7594:	9805      	ldr	r0, [sp, #20]
    7596:	f000 f849 	bl	762c <Gpio_Dio_Ip_ClearPins>

}
    759a:	bf00      	nop
    759c:	b007      	add	sp, #28
    759e:	f85d fb04 	ldr.w	pc, [sp], #4
    75a2:	bf00      	nop
    75a4:	1fff8b24 	.word	0x1fff8b24

000075a8 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    75a8:	b500      	push	{lr}
    75aa:	b087      	sub	sp, #28
    75ac:	9003      	str	r0, [sp, #12]
    75ae:	9102      	str	r1, [sp, #8]
    75b0:	4613      	mov	r3, r2
    75b2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    75b6:	f00b fbb1 	bl	12d1c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    75ba:	9b03      	ldr	r3, [sp, #12]
    75bc:	681b      	ldr	r3, [r3, #0]
    75be:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    75c0:	2201      	movs	r2, #1
    75c2:	9b02      	ldr	r3, [sp, #8]
    75c4:	fa02 f303 	lsl.w	r3, r2, r3
    75c8:	43db      	mvns	r3, r3
    75ca:	9a05      	ldr	r2, [sp, #20]
    75cc:	4013      	ands	r3, r2
    75ce:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    75d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    75d4:	9b02      	ldr	r3, [sp, #8]
    75d6:	fa02 f303 	lsl.w	r3, r2, r3
    75da:	9a05      	ldr	r2, [sp, #20]
    75dc:	4313      	orrs	r3, r2
    75de:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    75e0:	9b03      	ldr	r3, [sp, #12]
    75e2:	9a05      	ldr	r2, [sp, #20]
    75e4:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    75e6:	f00b fbc5 	bl	12d74 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    75ea:	bf00      	nop
    75ec:	b007      	add	sp, #28
    75ee:	f85d fb04 	ldr.w	pc, [sp], #4

000075f2 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    75f2:	b082      	sub	sp, #8
    75f4:	9001      	str	r0, [sp, #4]
    75f6:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    75f8:	9b01      	ldr	r3, [sp, #4]
    75fa:	9a00      	ldr	r2, [sp, #0]
    75fc:	601a      	str	r2, [r3, #0]
}
    75fe:	bf00      	nop
    7600:	b002      	add	sp, #8
    7602:	4770      	bx	lr

00007604 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    7604:	b084      	sub	sp, #16
    7606:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7608:	2300      	movs	r3, #0
    760a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    760c:	9b01      	ldr	r3, [sp, #4]
    760e:	681b      	ldr	r3, [r3, #0]
    7610:	9303      	str	r3, [sp, #12]
    return returnValue;
    7612:	9b03      	ldr	r3, [sp, #12]
}
    7614:	4618      	mov	r0, r3
    7616:	b004      	add	sp, #16
    7618:	4770      	bx	lr

0000761a <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    761a:	b082      	sub	sp, #8
    761c:	9001      	str	r0, [sp, #4]
    761e:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    7620:	9b01      	ldr	r3, [sp, #4]
    7622:	9a00      	ldr	r2, [sp, #0]
    7624:	605a      	str	r2, [r3, #4]
}
    7626:	bf00      	nop
    7628:	b002      	add	sp, #8
    762a:	4770      	bx	lr

0000762c <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    762c:	b082      	sub	sp, #8
    762e:	9001      	str	r0, [sp, #4]
    7630:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    7632:	9b01      	ldr	r3, [sp, #4]
    7634:	9a00      	ldr	r2, [sp, #0]
    7636:	609a      	str	r2, [r3, #8]
}
    7638:	bf00      	nop
    763a:	b002      	add	sp, #8
    763c:	4770      	bx	lr

0000763e <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    763e:	b082      	sub	sp, #8
    7640:	9001      	str	r0, [sp, #4]
    7642:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    7644:	9b01      	ldr	r3, [sp, #4]
    7646:	9a00      	ldr	r2, [sp, #0]
    7648:	60da      	str	r2, [r3, #12]
}
    764a:	bf00      	nop
    764c:	b002      	add	sp, #8
    764e:	4770      	bx	lr

00007650 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    7650:	b084      	sub	sp, #16
    7652:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7654:	2300      	movs	r3, #0
    7656:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    7658:	9b01      	ldr	r3, [sp, #4]
    765a:	691b      	ldr	r3, [r3, #16]
    765c:	9303      	str	r3, [sp, #12]
    return returnValue;
    765e:	9b03      	ldr	r3, [sp, #12]
}
    7660:	4618      	mov	r0, r3
    7662:	b004      	add	sp, #16
    7664:	4770      	bx	lr

00007666 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    7666:	b084      	sub	sp, #16
    7668:	9001      	str	r0, [sp, #4]
    766a:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    766c:	2300      	movs	r3, #0
    766e:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    7672:	9b01      	ldr	r3, [sp, #4]
    7674:	691a      	ldr	r2, [r3, #16]
    7676:	2101      	movs	r1, #1
    7678:	9b00      	ldr	r3, [sp, #0]
    767a:	fa01 f303 	lsl.w	r3, r1, r3
    767e:	401a      	ands	r2, r3
    7680:	9b00      	ldr	r3, [sp, #0]
    7682:	fa22 f303 	lsr.w	r3, r2, r3
    7686:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    768a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    768e:	4618      	mov	r0, r3
    7690:	b004      	add	sp, #16
    7692:	4770      	bx	lr

00007694 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    7694:	b500      	push	{lr}
    7696:	b083      	sub	sp, #12
    7698:	4603      	mov	r3, r0
    769a:	460a      	mov	r2, r1
    769c:	f88d 3007 	strb.w	r3, [sp, #7]
    76a0:	4613      	mov	r3, r2
    76a2:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    76a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    76aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    76ae:	2100      	movs	r1, #0
    76b0:	207b      	movs	r0, #123	; 0x7b
    76b2:	f00e f937 	bl	15924 <Det_ReportRuntimeError>
}
    76b6:	bf00      	nop
    76b8:	b003      	add	sp, #12
    76ba:	f85d fb04 	ldr.w	pc, [sp], #4

000076be <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    76be:	b500      	push	{lr}
    76c0:	b085      	sub	sp, #20
    76c2:	4603      	mov	r3, r0
    76c4:	460a      	mov	r2, r1
    76c6:	f88d 3007 	strb.w	r3, [sp, #7]
    76ca:	4613      	mov	r3, r2
    76cc:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    76d0:	2300      	movs	r3, #0
    76d2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    76d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76da:	4a0c      	ldr	r2, [pc, #48]	; (770c <Adc_ValidateNotBusyNoQueue+0x4e>)
    76dc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    76e0:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    76e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    76e8:	2b00      	cmp	r3, #0
    76ea:	d008      	beq.n	76fe <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    76ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    76f0:	210b      	movs	r1, #11
    76f2:	4618      	mov	r0, r3
    76f4:	f7ff ffce 	bl	7694 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    76f8:	2301      	movs	r3, #1
    76fa:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    76fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7702:	4618      	mov	r0, r3
    7704:	b005      	add	sp, #20
    7706:	f85d fb04 	ldr.w	pc, [sp], #4
    770a:	bf00      	nop
    770c:	1fff8d44 	.word	0x1fff8d44

00007710 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    7710:	b500      	push	{lr}
    7712:	b085      	sub	sp, #20
    7714:	4603      	mov	r3, r0
    7716:	f8ad 3006 	strh.w	r3, [sp, #6]
    771a:	460b      	mov	r3, r1
    771c:	f88d 3005 	strb.w	r3, [sp, #5]
    7720:	4613      	mov	r3, r2
    7722:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7726:	2301      	movs	r3, #1
    7728:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    772c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7730:	4917      	ldr	r1, [pc, #92]	; (7790 <Adc_ValidateNotBusyNoPrio+0x80>)
    7732:	4613      	mov	r3, r2
    7734:	009b      	lsls	r3, r3, #2
    7736:	4413      	add	r3, r2
    7738:	009b      	lsls	r3, r3, #2
    773a:	440b      	add	r3, r1
    773c:	681b      	ldr	r3, [r3, #0]
    773e:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    7740:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7744:	f083 0301 	eor.w	r3, r3, #1
    7748:	b2db      	uxtb	r3, r3
    774a:	2b00      	cmp	r3, #0
    774c:	d007      	beq.n	775e <Adc_ValidateNotBusyNoPrio+0x4e>
    774e:	9b02      	ldr	r3, [sp, #8]
    7750:	2b00      	cmp	r3, #0
    7752:	d004      	beq.n	775e <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7754:	210b      	movs	r1, #11
    7756:	2002      	movs	r0, #2
    7758:	f7ff ff9c 	bl	7694 <Adc_ReportDetRuntimeError>
    775c:	e011      	b.n	7782 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    775e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7762:	2b00      	cmp	r3, #0
    7764:	d00a      	beq.n	777c <Adc_ValidateNotBusyNoPrio+0x6c>
    7766:	9b02      	ldr	r3, [sp, #8]
    7768:	2b00      	cmp	r3, #0
    776a:	d007      	beq.n	777c <Adc_ValidateNotBusyNoPrio+0x6c>
    776c:	9b02      	ldr	r3, [sp, #8]
    776e:	2b03      	cmp	r3, #3
    7770:	d004      	beq.n	777c <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7772:	210b      	movs	r1, #11
    7774:	2002      	movs	r0, #2
    7776:	f7ff ff8d 	bl	7694 <Adc_ReportDetRuntimeError>
    777a:	e002      	b.n	7782 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    777c:	2300      	movs	r3, #0
    777e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    7782:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7786:	4618      	mov	r0, r3
    7788:	b005      	add	sp, #20
    778a:	f85d fb04 	ldr.w	pc, [sp], #4
    778e:	bf00      	nop
    7790:	1fff8d1c 	.word	0x1fff8d1c

00007794 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    7794:	b500      	push	{lr}
    7796:	b087      	sub	sp, #28
    7798:	4603      	mov	r3, r0
    779a:	460a      	mov	r2, r1
    779c:	f88d 3007 	strb.w	r3, [sp, #7]
    77a0:	4613      	mov	r3, r2
    77a2:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    77a6:	2300      	movs	r3, #0
    77a8:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    77ac:	2300      	movs	r3, #0
    77ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    77b2:	e02c      	b.n	780e <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    77b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    77b8:	4a1d      	ldr	r2, [pc, #116]	; (7830 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    77ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77be:	685a      	ldr	r2, [r3, #4]
    77c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77c4:	2134      	movs	r1, #52	; 0x34
    77c6:	fb01 f303 	mul.w	r3, r1, r3
    77ca:	4413      	add	r3, r2
    77cc:	881b      	ldrh	r3, [r3, #0]
    77ce:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    77d2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    77d6:	4917      	ldr	r1, [pc, #92]	; (7834 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    77d8:	4613      	mov	r3, r2
    77da:	009b      	lsls	r3, r3, #2
    77dc:	4413      	add	r3, r2
    77de:	009b      	lsls	r3, r3, #2
    77e0:	440b      	add	r3, r1
    77e2:	681b      	ldr	r3, [r3, #0]
    77e4:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    77e6:	9b03      	ldr	r3, [sp, #12]
    77e8:	2b00      	cmp	r3, #0
    77ea:	d00b      	beq.n	7804 <Adc_ValidateCheckGroupNotConversion+0x70>
    77ec:	9b03      	ldr	r3, [sp, #12]
    77ee:	2b03      	cmp	r3, #3
    77f0:	d008      	beq.n	7804 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    77f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77f6:	210b      	movs	r1, #11
    77f8:	4618      	mov	r0, r3
    77fa:	f7ff ff4b 	bl	7694 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    77fe:	2301      	movs	r3, #1
    7800:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7804:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7808:	3301      	adds	r3, #1
    780a:	f8ad 3016 	strh.w	r3, [sp, #22]
    780e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7812:	4a07      	ldr	r2, [pc, #28]	; (7830 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    7814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7818:	891b      	ldrh	r3, [r3, #8]
    781a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    781e:	429a      	cmp	r2, r3
    7820:	d3c8      	bcc.n	77b4 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    7822:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    7826:	4618      	mov	r0, r3
    7828:	b007      	add	sp, #28
    782a:	f85d fb04 	ldr.w	pc, [sp], #4
    782e:	bf00      	nop
    7830:	1fff8d18 	.word	0x1fff8d18
    7834:	1fff8d1c 	.word	0x1fff8d1c

00007838 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    7838:	b500      	push	{lr}
    783a:	b085      	sub	sp, #20
    783c:	4603      	mov	r3, r0
    783e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    7842:	2300      	movs	r3, #0
    7844:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7848:	2301      	movs	r3, #1
    784a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    784e:	2300      	movs	r3, #0
    7850:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7854:	2300      	movs	r3, #0
    7856:	f88d 300d 	strb.w	r3, [sp, #13]
    785a:	e01d      	b.n	7898 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    785c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7860:	4a1b      	ldr	r2, [pc, #108]	; (78d0 <Adc_ValidateDeInitNotBusy+0x98>)
    7862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7866:	681a      	ldr	r2, [r3, #0]
    7868:	f89d 300d 	ldrb.w	r3, [sp, #13]
    786c:	4413      	add	r3, r2
    786e:	7f9b      	ldrb	r3, [r3, #30]
    7870:	2b01      	cmp	r3, #1
    7872:	d10c      	bne.n	788e <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    7874:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7878:	2101      	movs	r1, #1
    787a:	4618      	mov	r0, r3
    787c:	f7ff ff1f 	bl	76be <Adc_ValidateNotBusyNoQueue>
    7880:	4603      	mov	r3, r0
    7882:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    7886:	f89d 300f 	ldrb.w	r3, [sp, #15]
    788a:	2b01      	cmp	r3, #1
    788c:	d009      	beq.n	78a2 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    788e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7892:	3301      	adds	r3, #1
    7894:	f88d 300d 	strb.w	r3, [sp, #13]
    7898:	f89d 300d 	ldrb.w	r3, [sp, #13]
    789c:	2b01      	cmp	r3, #1
    789e:	d9dd      	bls.n	785c <Adc_ValidateDeInitNotBusy+0x24>
    78a0:	e000      	b.n	78a4 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    78a2:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    78a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    78a8:	2b00      	cmp	r3, #0
    78aa:	d10b      	bne.n	78c4 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    78ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b0:	4619      	mov	r1, r3
    78b2:	2001      	movs	r0, #1
    78b4:	f7ff ff6e 	bl	7794 <Adc_ValidateCheckGroupNotConversion>
    78b8:	4603      	mov	r3, r0
    78ba:	2b00      	cmp	r3, #0
    78bc:	d102      	bne.n	78c4 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    78be:	2300      	movs	r3, #0
    78c0:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    78c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    78c8:	4618      	mov	r0, r3
    78ca:	b005      	add	sp, #20
    78cc:	f85d fb04 	ldr.w	pc, [sp], #4
    78d0:	1fff8d18 	.word	0x1fff8d18

000078d4 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    78d4:	b500      	push	{lr}
    78d6:	b085      	sub	sp, #20
    78d8:	4603      	mov	r3, r0
    78da:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    78de:	2301      	movs	r3, #1
    78e0:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    78e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    78e8:	490b      	ldr	r1, [pc, #44]	; (7918 <Adc_ValidateSetupBufferNotBusy+0x44>)
    78ea:	4613      	mov	r3, r2
    78ec:	009b      	lsls	r3, r3, #2
    78ee:	4413      	add	r3, r2
    78f0:	009b      	lsls	r3, r3, #2
    78f2:	440b      	add	r3, r1
    78f4:	681b      	ldr	r3, [r3, #0]
    78f6:	2b00      	cmp	r3, #0
    78f8:	d004      	beq.n	7904 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    78fa:	210b      	movs	r1, #11
    78fc:	200c      	movs	r0, #12
    78fe:	f7ff fec9 	bl	7694 <Adc_ReportDetRuntimeError>
    7902:	e002      	b.n	790a <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    7904:	2300      	movs	r3, #0
    7906:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    790a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    790e:	4618      	mov	r0, r3
    7910:	b005      	add	sp, #20
    7912:	f85d fb04 	ldr.w	pc, [sp], #4
    7916:	bf00      	nop
    7918:	1fff8d1c 	.word	0x1fff8d1c

0000791c <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    791c:	b500      	push	{lr}
    791e:	b085      	sub	sp, #20
    7920:	4603      	mov	r3, r0
    7922:	460a      	mov	r2, r1
    7924:	f8ad 3006 	strh.w	r3, [sp, #6]
    7928:	4613      	mov	r3, r2
    792a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    792e:	2300      	movs	r3, #0
    7930:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    7934:	2300      	movs	r3, #0
    7936:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    793a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    793e:	4a32      	ldr	r2, [pc, #200]	; (7a08 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7944:	68da      	ldr	r2, [r3, #12]
    7946:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    794a:	005b      	lsls	r3, r3, #1
    794c:	4413      	add	r3, r2
    794e:	881b      	ldrh	r3, [r3, #0]
    7950:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7954:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7958:	4a2b      	ldr	r2, [pc, #172]	; (7a08 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    795a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    795e:	685a      	ldr	r2, [r3, #4]
    7960:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7964:	2134      	movs	r1, #52	; 0x34
    7966:	fb01 f303 	mul.w	r3, r1, r3
    796a:	4413      	add	r3, r2
    796c:	689b      	ldr	r3, [r3, #8]
    796e:	2b00      	cmp	r3, #0
    7970:	d02c      	beq.n	79cc <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7972:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7976:	4a24      	ldr	r2, [pc, #144]	; (7a08 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    797c:	685a      	ldr	r2, [r3, #4]
    797e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7982:	2134      	movs	r1, #52	; 0x34
    7984:	fb01 f303 	mul.w	r3, r1, r3
    7988:	4413      	add	r3, r2
    798a:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    798c:	2b01      	cmp	r3, #1
    798e:	d120      	bne.n	79d2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7990:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7994:	4a1c      	ldr	r2, [pc, #112]	; (7a08 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    799a:	685a      	ldr	r2, [r3, #4]
    799c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    79a0:	2134      	movs	r1, #52	; 0x34
    79a2:	fb01 f303 	mul.w	r3, r1, r3
    79a6:	4413      	add	r3, r2
    79a8:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    79aa:	2b01      	cmp	r3, #1
    79ac:	d111      	bne.n	79d2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    79ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79b2:	4a15      	ldr	r2, [pc, #84]	; (7a08 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    79b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79b8:	685a      	ldr	r2, [r3, #4]
    79ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    79be:	2134      	movs	r1, #52	; 0x34
    79c0:	fb01 f303 	mul.w	r3, r1, r3
    79c4:	4413      	add	r3, r2
    79c6:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    79c8:	2b00      	cmp	r3, #0
    79ca:	d102      	bne.n	79d2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    79cc:	2301      	movs	r3, #1
    79ce:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    79d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79d6:	2b01      	cmp	r3, #1
    79d8:	d104      	bne.n	79e4 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    79da:	210b      	movs	r1, #11
    79dc:	2002      	movs	r0, #2
    79de:	f7ff fe59 	bl	7694 <Adc_ReportDetRuntimeError>
    79e2:	e00b      	b.n	79fc <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    79e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    79e8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    79ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79f0:	4618      	mov	r0, r3
    79f2:	f7ff fe8d 	bl	7710 <Adc_ValidateNotBusyNoPrio>
    79f6:	4603      	mov	r3, r0
    79f8:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    79fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7a00:	4618      	mov	r0, r3
    7a02:	b005      	add	sp, #20
    7a04:	f85d fb04 	ldr.w	pc, [sp], #4
    7a08:	1fff8d18 	.word	0x1fff8d18

00007a0c <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    7a0c:	b500      	push	{lr}
    7a0e:	b085      	sub	sp, #20
    7a10:	4603      	mov	r3, r0
    7a12:	f88d 3007 	strb.w	r3, [sp, #7]
    7a16:	460b      	mov	r3, r1
    7a18:	f8ad 3004 	strh.w	r3, [sp, #4]
    7a1c:	4613      	mov	r3, r2
    7a1e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7a22:	2300      	movs	r3, #0
    7a24:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    7a28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a2c:	2b0b      	cmp	r3, #11
    7a2e:	d03b      	beq.n	7aa8 <Adc_ValidateStateNotIdle+0x9c>
    7a30:	2b0b      	cmp	r3, #11
    7a32:	dc4e      	bgt.n	7ad2 <Adc_ValidateStateNotIdle+0xc6>
    7a34:	2b03      	cmp	r3, #3
    7a36:	d022      	beq.n	7a7e <Adc_ValidateStateNotIdle+0x72>
    7a38:	2b04      	cmp	r3, #4
    7a3a:	d14a      	bne.n	7ad2 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7a3c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7a40:	492a      	ldr	r1, [pc, #168]	; (7aec <Adc_ValidateStateNotIdle+0xe0>)
    7a42:	4613      	mov	r3, r2
    7a44:	009b      	lsls	r3, r3, #2
    7a46:	4413      	add	r3, r2
    7a48:	009b      	lsls	r3, r3, #2
    7a4a:	440b      	add	r3, r1
    7a4c:	681b      	ldr	r3, [r3, #0]
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d141      	bne.n	7ad6 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    7a52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7a56:	4925      	ldr	r1, [pc, #148]	; (7aec <Adc_ValidateStateNotIdle+0xe0>)
    7a58:	4613      	mov	r3, r2
    7a5a:	009b      	lsls	r3, r3, #2
    7a5c:	4413      	add	r3, r2
    7a5e:	009b      	lsls	r3, r3, #2
    7a60:	440b      	add	r3, r1
    7a62:	3304      	adds	r3, #4
    7a64:	681b      	ldr	r3, [r3, #0]
    7a66:	2b00      	cmp	r3, #0
    7a68:	d135      	bne.n	7ad6 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a6e:	210c      	movs	r1, #12
    7a70:	4618      	mov	r0, r3
    7a72:	f7ff fe0f 	bl	7694 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    7a76:	2301      	movs	r3, #1
    7a78:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    7a7c:	e02b      	b.n	7ad6 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7a7e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7a82:	491a      	ldr	r1, [pc, #104]	; (7aec <Adc_ValidateStateNotIdle+0xe0>)
    7a84:	4613      	mov	r3, r2
    7a86:	009b      	lsls	r3, r3, #2
    7a88:	4413      	add	r3, r2
    7a8a:	009b      	lsls	r3, r3, #2
    7a8c:	440b      	add	r3, r1
    7a8e:	681b      	ldr	r3, [r3, #0]
    7a90:	2b00      	cmp	r3, #0
    7a92:	d122      	bne.n	7ada <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a98:	210c      	movs	r1, #12
    7a9a:	4618      	mov	r0, r3
    7a9c:	f7ff fdfa 	bl	7694 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    7aa0:	2301      	movs	r3, #1
    7aa2:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    7aa6:	e018      	b.n	7ada <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7aa8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7aac:	490f      	ldr	r1, [pc, #60]	; (7aec <Adc_ValidateStateNotIdle+0xe0>)
    7aae:	4613      	mov	r3, r2
    7ab0:	009b      	lsls	r3, r3, #2
    7ab2:	4413      	add	r3, r2
    7ab4:	009b      	lsls	r3, r3, #2
    7ab6:	440b      	add	r3, r1
    7ab8:	681b      	ldr	r3, [r3, #0]
    7aba:	2b00      	cmp	r3, #0
    7abc:	d10f      	bne.n	7ade <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ac2:	210c      	movs	r1, #12
    7ac4:	4618      	mov	r0, r3
    7ac6:	f7ff fde5 	bl	7694 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    7aca:	2301      	movs	r3, #1
    7acc:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    7ad0:	e005      	b.n	7ade <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    7ad2:	bf00      	nop
    7ad4:	e004      	b.n	7ae0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7ad6:	bf00      	nop
    7ad8:	e002      	b.n	7ae0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7ada:	bf00      	nop
    7adc:	e000      	b.n	7ae0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7ade:	bf00      	nop
        }
    }

    return ValidState;
    7ae0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7ae4:	4618      	mov	r0, r3
    7ae6:	b005      	add	sp, #20
    7ae8:	f85d fb04 	ldr.w	pc, [sp], #4
    7aec:	1fff8d1c 	.word	0x1fff8d1c

00007af0 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    7af0:	b084      	sub	sp, #16
    7af2:	4603      	mov	r3, r0
    7af4:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    7af8:	2300      	movs	r3, #0
    7afa:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    7afe:	2300      	movs	r3, #0
    7b00:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7b04:	2300      	movs	r3, #0
    7b06:	f8ad 300e 	strh.w	r3, [sp, #14]
    7b0a:	e049      	b.n	7ba0 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    7b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b10:	4a2a      	ldr	r2, [pc, #168]	; (7bbc <Adc_InitGroupsStatus+0xcc>)
    7b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b16:	685a      	ldr	r2, [r3, #4]
    7b18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b1c:	2134      	movs	r1, #52	; 0x34
    7b1e:	fb01 f303 	mul.w	r3, r1, r3
    7b22:	4413      	add	r3, r2
    7b24:	881b      	ldrh	r3, [r3, #0]
    7b26:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    7b2a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7b2e:	4924      	ldr	r1, [pc, #144]	; (7bc0 <Adc_InitGroupsStatus+0xd0>)
    7b30:	4613      	mov	r3, r2
    7b32:	009b      	lsls	r3, r3, #2
    7b34:	4413      	add	r3, r2
    7b36:	009b      	lsls	r3, r3, #2
    7b38:	440b      	add	r3, r1
    7b3a:	2200      	movs	r2, #0
    7b3c:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    7b3e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7b42:	491f      	ldr	r1, [pc, #124]	; (7bc0 <Adc_InitGroupsStatus+0xd0>)
    7b44:	4613      	mov	r3, r2
    7b46:	009b      	lsls	r3, r3, #2
    7b48:	4413      	add	r3, r2
    7b4a:	009b      	lsls	r3, r3, #2
    7b4c:	440b      	add	r3, r1
    7b4e:	3304      	adds	r3, #4
    7b50:	2200      	movs	r2, #0
    7b52:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7b54:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7b58:	4919      	ldr	r1, [pc, #100]	; (7bc0 <Adc_InitGroupsStatus+0xd0>)
    7b5a:	4613      	mov	r3, r2
    7b5c:	009b      	lsls	r3, r3, #2
    7b5e:	4413      	add	r3, r2
    7b60:	009b      	lsls	r3, r3, #2
    7b62:	440b      	add	r3, r1
    7b64:	3308      	adds	r3, #8
    7b66:	2200      	movs	r2, #0
    7b68:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    7b6a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7b6e:	4914      	ldr	r1, [pc, #80]	; (7bc0 <Adc_InitGroupsStatus+0xd0>)
    7b70:	4613      	mov	r3, r2
    7b72:	009b      	lsls	r3, r3, #2
    7b74:	4413      	add	r3, r2
    7b76:	009b      	lsls	r3, r3, #2
    7b78:	440b      	add	r3, r1
    7b7a:	330c      	adds	r3, #12
    7b7c:	2200      	movs	r2, #0
    7b7e:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7b80:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7b84:	490e      	ldr	r1, [pc, #56]	; (7bc0 <Adc_InitGroupsStatus+0xd0>)
    7b86:	4613      	mov	r3, r2
    7b88:	009b      	lsls	r3, r3, #2
    7b8a:	4413      	add	r3, r2
    7b8c:	009b      	lsls	r3, r3, #2
    7b8e:	440b      	add	r3, r1
    7b90:	3310      	adds	r3, #16
    7b92:	2200      	movs	r2, #0
    7b94:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7b96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b9a:	3301      	adds	r3, #1
    7b9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ba4:	4a05      	ldr	r2, [pc, #20]	; (7bbc <Adc_InitGroupsStatus+0xcc>)
    7ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7baa:	891b      	ldrh	r3, [r3, #8]
    7bac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7bb0:	429a      	cmp	r2, r3
    7bb2:	d3ab      	bcc.n	7b0c <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7bb4:	bf00      	nop
    7bb6:	bf00      	nop
    7bb8:	b004      	add	sp, #16
    7bba:	4770      	bx	lr
    7bbc:	1fff8d18 	.word	0x1fff8d18
    7bc0:	1fff8d1c 	.word	0x1fff8d1c

00007bc4 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    7bc4:	b084      	sub	sp, #16
    7bc6:	4603      	mov	r3, r0
    7bc8:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7bcc:	2300      	movs	r3, #0
    7bce:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    7bd2:	2300      	movs	r3, #0
    7bd4:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7bd8:	2300      	movs	r3, #0
    7bda:	f88d 300f 	strb.w	r3, [sp, #15]
    7bde:	e035      	b.n	7c4c <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7be0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7be4:	4a1d      	ldr	r2, [pc, #116]	; (7c5c <Adc_InitUnitStatus+0x98>)
    7be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bea:	681a      	ldr	r2, [r3, #0]
    7bec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7bf0:	4413      	add	r3, r2
    7bf2:	7f9b      	ldrb	r3, [r3, #30]
    7bf4:	2b01      	cmp	r3, #1
    7bf6:	d124      	bne.n	7c42 <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    7bf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7bfc:	4a18      	ldr	r2, [pc, #96]	; (7c60 <Adc_InitUnitStatus+0x9c>)
    7bfe:	2100      	movs	r1, #0
    7c00:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7c04:	2300      	movs	r3, #0
    7c06:	f8ad 300c 	strh.w	r3, [sp, #12]
    7c0a:	e00f      	b.n	7c2c <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    7c0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7c10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c14:	4912      	ldr	r1, [pc, #72]	; (7c60 <Adc_InitUnitStatus+0x9c>)
    7c16:	0092      	lsls	r2, r2, #2
    7c18:	4413      	add	r3, r2
    7c1a:	005b      	lsls	r3, r3, #1
    7c1c:	440b      	add	r3, r1
    7c1e:	2200      	movs	r2, #0
    7c20:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7c22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c26:	3301      	adds	r3, #1
    7c28:	f8ad 300c 	strh.w	r3, [sp, #12]
    7c2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c30:	2b01      	cmp	r3, #1
    7c32:	d9eb      	bls.n	7c0c <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7c34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c38:	4a09      	ldr	r2, [pc, #36]	; (7c60 <Adc_InitUnitStatus+0x9c>)
    7c3a:	00db      	lsls	r3, r3, #3
    7c3c:	4413      	add	r3, r2
    7c3e:	2200      	movs	r2, #0
    7c40:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7c42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c46:	3301      	adds	r3, #1
    7c48:	f88d 300f 	strb.w	r3, [sp, #15]
    7c4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c50:	2b01      	cmp	r3, #1
    7c52:	d9c5      	bls.n	7be0 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7c54:	bf00      	nop
    7c56:	bf00      	nop
    7c58:	b004      	add	sp, #16
    7c5a:	4770      	bx	lr
    7c5c:	1fff8d18 	.word	0x1fff8d18
    7c60:	1fff8d44 	.word	0x1fff8d44

00007c64 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7c64:	b084      	sub	sp, #16
    7c66:	9001      	str	r0, [sp, #4]
    7c68:	460b      	mov	r3, r1
    7c6a:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7c6e:	2300      	movs	r3, #0
    7c70:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7c74:	2301      	movs	r3, #1
    7c76:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    7c7a:	9b01      	ldr	r3, [sp, #4]
    7c7c:	7c1b      	ldrb	r3, [r3, #16]
    7c7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7c82:	429a      	cmp	r2, r3
    7c84:	d11c      	bne.n	7cc0 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7c86:	2300      	movs	r3, #0
    7c88:	f88d 300f 	strb.w	r3, [sp, #15]
    7c8c:	e012      	b.n	7cb4 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7c8e:	9b01      	ldr	r3, [sp, #4]
    7c90:	695a      	ldr	r2, [r3, #20]
    7c92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c96:	4413      	add	r3, r2
    7c98:	781b      	ldrb	r3, [r3, #0]
    7c9a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7c9e:	429a      	cmp	r2, r3
    7ca0:	d103      	bne.n	7caa <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7ca2:	2300      	movs	r3, #0
    7ca4:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    7ca8:	e00a      	b.n	7cc0 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7caa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cae:	3301      	adds	r3, #1
    7cb0:	f88d 300f 	strb.w	r3, [sp, #15]
    7cb4:	9b01      	ldr	r3, [sp, #4]
    7cb6:	7e1b      	ldrb	r3, [r3, #24]
    7cb8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7cbc:	429a      	cmp	r2, r3
    7cbe:	d3e6      	bcc.n	7c8e <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    7cc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7cc4:	4618      	mov	r0, r3
    7cc6:	b004      	add	sp, #16
    7cc8:	4770      	bx	lr

00007cca <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    7cca:	b500      	push	{lr}
    7ccc:	b085      	sub	sp, #20
    7cce:	4603      	mov	r3, r0
    7cd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    7cd4:	460b      	mov	r3, r1
    7cd6:	f88d 3005 	strb.w	r3, [sp, #5]
    7cda:	4613      	mov	r3, r2
    7cdc:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    7ce0:	2300      	movs	r3, #0
    7ce2:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7ce6:	2300      	movs	r3, #0
    7ce8:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7cec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7cf0:	493e      	ldr	r1, [pc, #248]	; (7dec <Adc_UpdateStatusStartConversion+0x122>)
    7cf2:	4613      	mov	r3, r2
    7cf4:	009b      	lsls	r3, r3, #2
    7cf6:	4413      	add	r3, r2
    7cf8:	009b      	lsls	r3, r3, #2
    7cfa:	440b      	add	r3, r1
    7cfc:	2201      	movs	r2, #1
    7cfe:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    7d00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d04:	4939      	ldr	r1, [pc, #228]	; (7dec <Adc_UpdateStatusStartConversion+0x122>)
    7d06:	4613      	mov	r3, r2
    7d08:	009b      	lsls	r3, r3, #2
    7d0a:	4413      	add	r3, r2
    7d0c:	009b      	lsls	r3, r3, #2
    7d0e:	440b      	add	r3, r1
    7d10:	3308      	adds	r3, #8
    7d12:	2200      	movs	r2, #0
    7d14:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7d16:	f007 f8ef 	bl	eef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7d1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d1e:	4a34      	ldr	r2, [pc, #208]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7d20:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7d24:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    7d28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	d016      	beq.n	7d5e <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    7d30:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7d34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d38:	492d      	ldr	r1, [pc, #180]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7d3a:	0092      	lsls	r2, r2, #2
    7d3c:	4413      	add	r3, r2
    7d3e:	005b      	lsls	r3, r3, #1
    7d40:	440b      	add	r3, r1
    7d42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d46:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7d48:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d4c:	4a28      	ldr	r2, [pc, #160]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7d4e:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7d52:	b292      	uxth	r2, r2
    7d54:	3201      	adds	r2, #1
    7d56:	b291      	uxth	r1, r2
    7d58:	4a25      	ldr	r2, [pc, #148]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7d5a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7d5e:	f007 f8f7 	bl	ef50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7d62:	f007 f8c9 	bl	eef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7d66:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d6a:	4a21      	ldr	r2, [pc, #132]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7d6c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7d70:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7d74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d78:	4a1d      	ldr	r2, [pc, #116]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7d7a:	00db      	lsls	r3, r3, #3
    7d7c:	4413      	add	r3, r2
    7d7e:	885b      	ldrh	r3, [r3, #2]
    7d80:	b29b      	uxth	r3, r3
    7d82:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d86:	429a      	cmp	r2, r3
    7d88:	d003      	beq.n	7d92 <Adc_UpdateStatusStartConversion+0xc8>
    7d8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d125      	bne.n	7dde <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    7d92:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d96:	4a16      	ldr	r2, [pc, #88]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7d98:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7d9c:	b29b      	uxth	r3, r3
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d112      	bne.n	7dc8 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    7da2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7da6:	4a12      	ldr	r2, [pc, #72]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7da8:	00db      	lsls	r3, r3, #3
    7daa:	4413      	add	r3, r2
    7dac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7db0:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7db2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7db6:	4a0e      	ldr	r2, [pc, #56]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7db8:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7dbc:	b292      	uxth	r2, r2
    7dbe:	3201      	adds	r2, #1
    7dc0:	b291      	uxth	r1, r2
    7dc2:	4a0b      	ldr	r2, [pc, #44]	; (7df0 <Adc_UpdateStatusStartConversion+0x126>)
    7dc4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7dc8:	f007 f8c2 	bl	ef50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7dcc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7dd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7dd4:	4611      	mov	r1, r2
    7dd6:	4618      	mov	r0, r3
    7dd8:	f002 fbf2 	bl	a5c0 <Adc_Ipw_StartNormalConversion>
    7ddc:	e002      	b.n	7de4 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7dde:	f007 f8b7 	bl	ef50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    7de2:	bf00      	nop
    7de4:	bf00      	nop
    7de6:	b005      	add	sp, #20
    7de8:	f85d fb04 	ldr.w	pc, [sp], #4
    7dec:	1fff8d1c 	.word	0x1fff8d1c
    7df0:	1fff8d44 	.word	0x1fff8d44

00007df4 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    7df4:	b500      	push	{lr}
    7df6:	b085      	sub	sp, #20
    7df8:	9001      	str	r0, [sp, #4]
    7dfa:	4608      	mov	r0, r1
    7dfc:	4611      	mov	r1, r2
    7dfe:	461a      	mov	r2, r3
    7e00:	4603      	mov	r3, r0
    7e02:	f8ad 3002 	strh.w	r3, [sp, #2]
    7e06:	460b      	mov	r3, r1
    7e08:	f88d 3001 	strb.w	r3, [sp, #1]
    7e0c:	4613      	mov	r3, r2
    7e0e:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7e12:	2300      	movs	r3, #0
    7e14:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    7e18:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7e1c:	4a26      	ldr	r2, [pc, #152]	; (7eb8 <Adc_StopSwGroupConversion+0xc4>)
    7e1e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7e22:	b29a      	uxth	r2, r3
    7e24:	9b01      	ldr	r3, [sp, #4]
    7e26:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7e28:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7e2c:	4a22      	ldr	r2, [pc, #136]	; (7eb8 <Adc_StopSwGroupConversion+0xc4>)
    7e2e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7e32:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7e36:	2300      	movs	r3, #0
    7e38:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e3c:	e02f      	b.n	7e9e <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    7e3e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7e42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e46:	491c      	ldr	r1, [pc, #112]	; (7eb8 <Adc_StopSwGroupConversion+0xc4>)
    7e48:	0092      	lsls	r2, r2, #2
    7e4a:	4413      	add	r3, r2
    7e4c:	005b      	lsls	r3, r3, #1
    7e4e:	440b      	add	r3, r1
    7e50:	885b      	ldrh	r3, [r3, #2]
    7e52:	b29b      	uxth	r3, r3
    7e54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    7e58:	429a      	cmp	r2, r3
    7e5a:	d11b      	bne.n	7e94 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    7e5c:	9b01      	ldr	r3, [sp, #4]
    7e5e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7e62:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    7e64:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d10b      	bne.n	7e84 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    7e6c:	f89d 2000 	ldrb.w	r2, [sp]
    7e70:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7e74:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7e78:	4618      	mov	r0, r3
    7e7a:	f002 fc4b 	bl	a714 <Adc_Ipw_StopCurrentConversion>
    7e7e:	4603      	mov	r3, r0
    7e80:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    7e84:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7e88:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7e8c:	4611      	mov	r1, r2
    7e8e:	4618      	mov	r0, r3
    7e90:	f001 fd88 	bl	99a4 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7e94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e98:	3301      	adds	r3, #1
    7e9a:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e9e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7ea2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7ea6:	429a      	cmp	r2, r3
    7ea8:	d3c9      	bcc.n	7e3e <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    7eaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7eae:	4618      	mov	r0, r3
    7eb0:	b005      	add	sp, #20
    7eb2:	f85d fb04 	ldr.w	pc, [sp], #4
    7eb6:	bf00      	nop
    7eb8:	1fff8d44 	.word	0x1fff8d44

00007ebc <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7ebc:	b500      	push	{lr}
    7ebe:	b089      	sub	sp, #36	; 0x24
    7ec0:	4603      	mov	r3, r0
    7ec2:	f8ad 3006 	strh.w	r3, [sp, #6]
    7ec6:	460b      	mov	r3, r1
    7ec8:	f88d 3005 	strb.w	r3, [sp, #5]
    7ecc:	4613      	mov	r3, r2
    7ece:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7ed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7ed6:	4a4f      	ldr	r2, [pc, #316]	; (8014 <Adc_UpdateStatusStopConversion+0x158>)
    7ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7edc:	68da      	ldr	r2, [r3, #12]
    7ede:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ee2:	005b      	lsls	r3, r3, #1
    7ee4:	4413      	add	r3, r2
    7ee6:	881b      	ldrh	r3, [r3, #0]
    7ee8:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    7eec:	2300      	movs	r3, #0
    7eee:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7ef2:	2300      	movs	r3, #0
    7ef4:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    7ef8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7efc:	4a45      	ldr	r2, [pc, #276]	; (8014 <Adc_UpdateStatusStopConversion+0x158>)
    7efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f02:	685a      	ldr	r2, [r3, #4]
    7f04:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7f08:	2134      	movs	r1, #52	; 0x34
    7f0a:	fb01 f303 	mul.w	r3, r1, r3
    7f0e:	4413      	add	r3, r2
    7f10:	689b      	ldr	r3, [r3, #8]
    7f12:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    7f14:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7f18:	4a3e      	ldr	r2, [pc, #248]	; (8014 <Adc_UpdateStatusStopConversion+0x158>)
    7f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f1e:	685a      	ldr	r2, [r3, #4]
    7f20:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7f24:	2134      	movs	r1, #52	; 0x34
    7f26:	fb01 f303 	mul.w	r3, r1, r3
    7f2a:	4413      	add	r3, r2
    7f2c:	685b      	ldr	r3, [r3, #4]
    7f2e:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    7f30:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7f34:	4a37      	ldr	r2, [pc, #220]	; (8014 <Adc_UpdateStatusStopConversion+0x158>)
    7f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f3a:	685a      	ldr	r2, [r3, #4]
    7f3c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7f40:	2134      	movs	r1, #52	; 0x34
    7f42:	fb01 f303 	mul.w	r3, r1, r3
    7f46:	4413      	add	r3, r2
    7f48:	699b      	ldr	r3, [r3, #24]
    7f4a:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7f4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f50:	4931      	ldr	r1, [pc, #196]	; (8018 <Adc_UpdateStatusStopConversion+0x15c>)
    7f52:	4613      	mov	r3, r2
    7f54:	009b      	lsls	r3, r3, #2
    7f56:	4413      	add	r3, r2
    7f58:	009b      	lsls	r3, r3, #2
    7f5a:	440b      	add	r3, r1
    7f5c:	681b      	ldr	r3, [r3, #0]
    7f5e:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    7f60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f64:	492c      	ldr	r1, [pc, #176]	; (8018 <Adc_UpdateStatusStopConversion+0x15c>)
    7f66:	4613      	mov	r3, r2
    7f68:	009b      	lsls	r3, r3, #2
    7f6a:	4413      	add	r3, r2
    7f6c:	009b      	lsls	r3, r3, #2
    7f6e:	440b      	add	r3, r1
    7f70:	3308      	adds	r3, #8
    7f72:	2200      	movs	r2, #0
    7f74:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    7f76:	9b06      	ldr	r3, [sp, #24]
    7f78:	2b00      	cmp	r3, #0
    7f7a:	d005      	beq.n	7f88 <Adc_UpdateStatusStopConversion+0xcc>
    7f7c:	9b05      	ldr	r3, [sp, #20]
    7f7e:	2b01      	cmp	r3, #1
    7f80:	d110      	bne.n	7fa4 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    7f82:	9b04      	ldr	r3, [sp, #16]
    7f84:	2b00      	cmp	r3, #0
    7f86:	d10d      	bne.n	7fa4 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    7f88:	9b03      	ldr	r3, [sp, #12]
    7f8a:	2b03      	cmp	r3, #3
    7f8c:	d10a      	bne.n	7fa4 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7f8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f92:	4921      	ldr	r1, [pc, #132]	; (8018 <Adc_UpdateStatusStopConversion+0x15c>)
    7f94:	4613      	mov	r3, r2
    7f96:	009b      	lsls	r3, r3, #2
    7f98:	4413      	add	r3, r2
    7f9a:	009b      	lsls	r3, r3, #2
    7f9c:	440b      	add	r3, r1
    7f9e:	2200      	movs	r2, #0
    7fa0:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    7fa2:	e032      	b.n	800a <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    7fa4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7fa8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7fac:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7fb0:	f10d 000a 	add.w	r0, sp, #10
    7fb4:	f7ff ff1e 	bl	7df4 <Adc_StopSwGroupConversion>
    7fb8:	4603      	mov	r3, r0
    7fba:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7fbe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fc2:	4915      	ldr	r1, [pc, #84]	; (8018 <Adc_UpdateStatusStopConversion+0x15c>)
    7fc4:	4613      	mov	r3, r2
    7fc6:	009b      	lsls	r3, r3, #2
    7fc8:	4413      	add	r3, r2
    7fca:	009b      	lsls	r3, r3, #2
    7fcc:	440b      	add	r3, r1
    7fce:	2200      	movs	r2, #0
    7fd0:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    7fd2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fd6:	2b00      	cmp	r3, #0
    7fd8:	d10f      	bne.n	7ffa <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7fda:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fde:	4a0f      	ldr	r2, [pc, #60]	; (801c <Adc_UpdateStatusStopConversion+0x160>)
    7fe0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7fe4:	b29b      	uxth	r3, r3
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	d007      	beq.n	7ffa <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7fea:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7fee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ff2:	4611      	mov	r1, r2
    7ff4:	4618      	mov	r0, r3
    7ff6:	f002 fae3 	bl	a5c0 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7ffa:	f89d 301d 	ldrb.w	r3, [sp, #29]
    7ffe:	2b01      	cmp	r3, #1
    8000:	d103      	bne.n	800a <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    8002:	212b      	movs	r1, #43	; 0x2b
    8004:	2003      	movs	r0, #3
    8006:	f7ff fb45 	bl	7694 <Adc_ReportDetRuntimeError>
}
    800a:	bf00      	nop
    800c:	b009      	add	sp, #36	; 0x24
    800e:	f85d fb04 	ldr.w	pc, [sp], #4
    8012:	bf00      	nop
    8014:	1fff8d18 	.word	0x1fff8d18
    8018:	1fff8d1c 	.word	0x1fff8d1c
    801c:	1fff8d44 	.word	0x1fff8d44

00008020 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    8020:	b500      	push	{lr}
    8022:	b085      	sub	sp, #20
    8024:	4603      	mov	r3, r0
    8026:	f8ad 3006 	strh.w	r3, [sp, #6]
    802a:	460b      	mov	r3, r1
    802c:	f88d 3005 	strb.w	r3, [sp, #5]
    8030:	4613      	mov	r3, r2
    8032:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8036:	f89d 3004 	ldrb.w	r3, [sp, #4]
    803a:	4a18      	ldr	r2, [pc, #96]	; (809c <Adc_UpdateStatusReadGroup+0x7c>)
    803c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8040:	68da      	ldr	r2, [r3, #12]
    8042:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8046:	005b      	lsls	r3, r3, #1
    8048:	4413      	add	r3, r2
    804a:	881b      	ldrh	r3, [r3, #0]
    804c:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    8050:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8054:	4a11      	ldr	r2, [pc, #68]	; (809c <Adc_UpdateStatusReadGroup+0x7c>)
    8056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    805a:	685a      	ldr	r2, [r3, #4]
    805c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8060:	2134      	movs	r1, #52	; 0x34
    8062:	fb01 f303 	mul.w	r3, r1, r3
    8066:	4413      	add	r3, r2
    8068:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    806c:	2b01      	cmp	r3, #1
    806e:	d109      	bne.n	8084 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    8070:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8074:	f89d 1005 	ldrb.w	r1, [sp, #5]
    8078:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    807c:	4618      	mov	r0, r3
    807e:	f000 f80f 	bl	80a0 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    8082:	e007      	b.n	8094 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    8084:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8088:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    808c:	4611      	mov	r1, r2
    808e:	4618      	mov	r0, r3
    8090:	f000 f8e8 	bl	8264 <Adc_UpdateStatusReadGroupInt>
}
    8094:	bf00      	nop
    8096:	b005      	add	sp, #20
    8098:	f85d fb04 	ldr.w	pc, [sp], #4
    809c:	1fff8d18 	.word	0x1fff8d18

000080a0 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    80a0:	b500      	push	{lr}
    80a2:	b085      	sub	sp, #20
    80a4:	4603      	mov	r3, r0
    80a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    80aa:	460b      	mov	r3, r1
    80ac:	f88d 3005 	strb.w	r3, [sp, #5]
    80b0:	4613      	mov	r3, r2
    80b2:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    80b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    80ba:	4a2c      	ldr	r2, [pc, #176]	; (816c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    80bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80c0:	68da      	ldr	r2, [r3, #12]
    80c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80c6:	005b      	lsls	r3, r3, #1
    80c8:	4413      	add	r3, r2
    80ca:	881b      	ldrh	r3, [r3, #0]
    80cc:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    80d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    80d4:	4926      	ldr	r1, [pc, #152]	; (8170 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    80d6:	4613      	mov	r3, r2
    80d8:	009b      	lsls	r3, r3, #2
    80da:	4413      	add	r3, r2
    80dc:	009b      	lsls	r3, r3, #2
    80de:	440b      	add	r3, r1
    80e0:	3304      	adds	r3, #4
    80e2:	2201      	movs	r2, #1
    80e4:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    80e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    80ea:	2b00      	cmp	r3, #0
    80ec:	d03a      	beq.n	8164 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    80ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    80f2:	4a1e      	ldr	r2, [pc, #120]	; (816c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    80f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f8:	685a      	ldr	r2, [r3, #4]
    80fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    80fe:	2134      	movs	r1, #52	; 0x34
    8100:	fb01 f303 	mul.w	r3, r1, r3
    8104:	4413      	add	r3, r2
    8106:	689b      	ldr	r3, [r3, #8]
    8108:	2b01      	cmp	r3, #1
    810a:	d10a      	bne.n	8122 <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    810c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8110:	4917      	ldr	r1, [pc, #92]	; (8170 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    8112:	4613      	mov	r3, r2
    8114:	009b      	lsls	r3, r3, #2
    8116:	4413      	add	r3, r2
    8118:	009b      	lsls	r3, r3, #2
    811a:	440b      	add	r3, r1
    811c:	2201      	movs	r2, #1
    811e:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    8120:	e020      	b.n	8164 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8122:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8126:	4a11      	ldr	r2, [pc, #68]	; (816c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    812c:	685a      	ldr	r2, [r3, #4]
    812e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8132:	2134      	movs	r1, #52	; 0x34
    8134:	fb01 f303 	mul.w	r3, r1, r3
    8138:	4413      	add	r3, r2
    813a:	695b      	ldr	r3, [r3, #20]
    813c:	2b00      	cmp	r3, #0
    813e:	d111      	bne.n	8164 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    8140:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8144:	490a      	ldr	r1, [pc, #40]	; (8170 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    8146:	4613      	mov	r3, r2
    8148:	009b      	lsls	r3, r3, #2
    814a:	4413      	add	r3, r2
    814c:	009b      	lsls	r3, r3, #2
    814e:	440b      	add	r3, r1
    8150:	2200      	movs	r2, #0
    8152:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    8154:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8158:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    815c:	4611      	mov	r1, r2
    815e:	4618      	mov	r0, r3
    8160:	f000 f808 	bl	8174 <Adc_UpdateSwQueueIndexNoInt>
}
    8164:	bf00      	nop
    8166:	b005      	add	sp, #20
    8168:	f85d fb04 	ldr.w	pc, [sp], #4
    816c:	1fff8d18 	.word	0x1fff8d18
    8170:	1fff8d1c 	.word	0x1fff8d1c

00008174 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    8174:	b500      	push	{lr}
    8176:	b085      	sub	sp, #20
    8178:	4603      	mov	r3, r0
    817a:	460a      	mov	r2, r1
    817c:	f8ad 3006 	strh.w	r3, [sp, #6]
    8180:	4613      	mov	r3, r2
    8182:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8186:	f89d 3005 	ldrb.w	r3, [sp, #5]
    818a:	4a34      	ldr	r2, [pc, #208]	; (825c <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    818c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8190:	68da      	ldr	r2, [r3, #12]
    8192:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8196:	005b      	lsls	r3, r3, #1
    8198:	4413      	add	r3, r2
    819a:	881b      	ldrh	r3, [r3, #0]
    819c:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    81a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    81a4:	4a2d      	ldr	r2, [pc, #180]	; (825c <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    81a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81aa:	685a      	ldr	r2, [r3, #4]
    81ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    81b0:	2134      	movs	r1, #52	; 0x34
    81b2:	fb01 f303 	mul.w	r3, r1, r3
    81b6:	4413      	add	r3, r2
    81b8:	789b      	ldrb	r3, [r3, #2]
    81ba:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    81be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    81c2:	4a27      	ldr	r2, [pc, #156]	; (8260 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    81c4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    81c8:	b29b      	uxth	r3, r3
    81ca:	2b00      	cmp	r3, #0
    81cc:	d041      	beq.n	8252 <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    81ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    81d2:	4a23      	ldr	r2, [pc, #140]	; (8260 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    81d4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    81d8:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    81dc:	2300      	movs	r3, #0
    81de:	f8ad 300e 	strh.w	r3, [sp, #14]
    81e2:	e01c      	b.n	821e <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    81e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    81e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    81ec:	491c      	ldr	r1, [pc, #112]	; (8260 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    81ee:	0092      	lsls	r2, r2, #2
    81f0:	4413      	add	r3, r2
    81f2:	005b      	lsls	r3, r3, #1
    81f4:	440b      	add	r3, r1
    81f6:	885b      	ldrh	r3, [r3, #2]
    81f8:	b29b      	uxth	r3, r3
    81fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81fe:	429a      	cmp	r2, r3
    8200:	d108      	bne.n	8214 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    8202:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8206:	f89d 300b 	ldrb.w	r3, [sp, #11]
    820a:	4611      	mov	r1, r2
    820c:	4618      	mov	r0, r3
    820e:	f001 fbc9 	bl	99a4 <Adc_Ipw_RemoveFromQueue>
                    break;
    8212:	e00a      	b.n	822a <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    8214:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8218:	3301      	adds	r3, #1
    821a:	f8ad 300e 	strh.w	r3, [sp, #14]
    821e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8222:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    8226:	429a      	cmp	r2, r3
    8228:	d3dc      	bcc.n	81e4 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    822a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    822e:	2b00      	cmp	r3, #0
    8230:	d10f      	bne.n	8252 <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    8232:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8236:	4a0a      	ldr	r2, [pc, #40]	; (8260 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8238:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    823c:	b29b      	uxth	r3, r3
    823e:	2b00      	cmp	r3, #0
    8240:	d007      	beq.n	8252 <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    8242:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8246:	f89d 300b 	ldrb.w	r3, [sp, #11]
    824a:	4611      	mov	r1, r2
    824c:	4618      	mov	r0, r3
    824e:	f002 f9b7 	bl	a5c0 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    8252:	bf00      	nop
    8254:	b005      	add	sp, #20
    8256:	f85d fb04 	ldr.w	pc, [sp], #4
    825a:	bf00      	nop
    825c:	1fff8d18 	.word	0x1fff8d18
    8260:	1fff8d44 	.word	0x1fff8d44

00008264 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    8264:	b084      	sub	sp, #16
    8266:	4603      	mov	r3, r0
    8268:	460a      	mov	r2, r1
    826a:	f8ad 3006 	strh.w	r3, [sp, #6]
    826e:	4613      	mov	r3, r2
    8270:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8274:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8278:	4a47      	ldr	r2, [pc, #284]	; (8398 <Adc_UpdateStatusReadGroupInt+0x134>)
    827a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    827e:	68da      	ldr	r2, [r3, #12]
    8280:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8284:	005b      	lsls	r3, r3, #1
    8286:	4413      	add	r3, r2
    8288:	881b      	ldrh	r3, [r3, #0]
    828a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    828e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8292:	4942      	ldr	r1, [pc, #264]	; (839c <Adc_UpdateStatusReadGroupInt+0x138>)
    8294:	4613      	mov	r3, r2
    8296:	009b      	lsls	r3, r3, #2
    8298:	4413      	add	r3, r2
    829a:	009b      	lsls	r3, r3, #2
    829c:	440b      	add	r3, r1
    829e:	681b      	ldr	r3, [r3, #0]
    82a0:	2b02      	cmp	r3, #2
    82a2:	d10a      	bne.n	82ba <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    82a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    82a8:	493c      	ldr	r1, [pc, #240]	; (839c <Adc_UpdateStatusReadGroupInt+0x138>)
    82aa:	4613      	mov	r3, r2
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	4413      	add	r3, r2
    82b0:	009b      	lsls	r3, r3, #2
    82b2:	440b      	add	r3, r1
    82b4:	2201      	movs	r2, #1
    82b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    82b8:	e06a      	b.n	8390 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    82ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    82be:	4937      	ldr	r1, [pc, #220]	; (839c <Adc_UpdateStatusReadGroupInt+0x138>)
    82c0:	4613      	mov	r3, r2
    82c2:	009b      	lsls	r3, r3, #2
    82c4:	4413      	add	r3, r2
    82c6:	009b      	lsls	r3, r3, #2
    82c8:	440b      	add	r3, r1
    82ca:	681b      	ldr	r3, [r3, #0]
    82cc:	2b03      	cmp	r3, #3
    82ce:	d15f      	bne.n	8390 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    82d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    82d4:	4a30      	ldr	r2, [pc, #192]	; (8398 <Adc_UpdateStatusReadGroupInt+0x134>)
    82d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82da:	685a      	ldr	r2, [r3, #4]
    82dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    82e0:	2134      	movs	r1, #52	; 0x34
    82e2:	fb01 f303 	mul.w	r3, r1, r3
    82e6:	4413      	add	r3, r2
    82e8:	695b      	ldr	r3, [r3, #20]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d150      	bne.n	8390 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    82ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    82f2:	4a29      	ldr	r2, [pc, #164]	; (8398 <Adc_UpdateStatusReadGroupInt+0x134>)
    82f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82f8:	685a      	ldr	r2, [r3, #4]
    82fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    82fe:	2134      	movs	r1, #52	; 0x34
    8300:	fb01 f303 	mul.w	r3, r1, r3
    8304:	4413      	add	r3, r2
    8306:	689b      	ldr	r3, [r3, #8]
    8308:	2b00      	cmp	r3, #0
    830a:	d02c      	beq.n	8366 <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    830c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8310:	4a21      	ldr	r2, [pc, #132]	; (8398 <Adc_UpdateStatusReadGroupInt+0x134>)
    8312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8316:	685a      	ldr	r2, [r3, #4]
    8318:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    831c:	2134      	movs	r1, #52	; 0x34
    831e:	fb01 f303 	mul.w	r3, r1, r3
    8322:	4413      	add	r3, r2
    8324:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    8326:	2b01      	cmp	r3, #1
    8328:	d128      	bne.n	837c <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    832a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    832e:	4a1a      	ldr	r2, [pc, #104]	; (8398 <Adc_UpdateStatusReadGroupInt+0x134>)
    8330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8334:	685a      	ldr	r2, [r3, #4]
    8336:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    833a:	2134      	movs	r1, #52	; 0x34
    833c:	fb01 f303 	mul.w	r3, r1, r3
    8340:	4413      	add	r3, r2
    8342:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8344:	2b01      	cmp	r3, #1
    8346:	d119      	bne.n	837c <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    8348:	f89d 3005 	ldrb.w	r3, [sp, #5]
    834c:	4a12      	ldr	r2, [pc, #72]	; (8398 <Adc_UpdateStatusReadGroupInt+0x134>)
    834e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8352:	685a      	ldr	r2, [r3, #4]
    8354:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8358:	2134      	movs	r1, #52	; 0x34
    835a:	fb01 f303 	mul.w	r3, r1, r3
    835e:	4413      	add	r3, r2
    8360:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8362:	2b00      	cmp	r3, #0
    8364:	d10a      	bne.n	837c <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    8366:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    836a:	490c      	ldr	r1, [pc, #48]	; (839c <Adc_UpdateStatusReadGroupInt+0x138>)
    836c:	4613      	mov	r3, r2
    836e:	009b      	lsls	r3, r3, #2
    8370:	4413      	add	r3, r2
    8372:	009b      	lsls	r3, r3, #2
    8374:	440b      	add	r3, r1
    8376:	2200      	movs	r2, #0
    8378:	601a      	str	r2, [r3, #0]
}
    837a:	e009      	b.n	8390 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    837c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8380:	4906      	ldr	r1, [pc, #24]	; (839c <Adc_UpdateStatusReadGroupInt+0x138>)
    8382:	4613      	mov	r3, r2
    8384:	009b      	lsls	r3, r3, #2
    8386:	4413      	add	r3, r2
    8388:	009b      	lsls	r3, r3, #2
    838a:	440b      	add	r3, r1
    838c:	2201      	movs	r2, #1
    838e:	601a      	str	r2, [r3, #0]
}
    8390:	bf00      	nop
    8392:	b004      	add	sp, #16
    8394:	4770      	bx	lr
    8396:	bf00      	nop
    8398:	1fff8d18 	.word	0x1fff8d18
    839c:	1fff8d1c 	.word	0x1fff8d1c

000083a0 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    83a0:	b084      	sub	sp, #16
    83a2:	4603      	mov	r3, r0
    83a4:	460a      	mov	r2, r1
    83a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    83aa:	4613      	mov	r3, r2
    83ac:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    83b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    83b4:	4a46      	ldr	r2, [pc, #280]	; (84d0 <Adc_UpdateStatusAfterGetStream+0x130>)
    83b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83ba:	68da      	ldr	r2, [r3, #12]
    83bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83c0:	005b      	lsls	r3, r3, #1
    83c2:	4413      	add	r3, r2
    83c4:	881b      	ldrh	r3, [r3, #0]
    83c6:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    83ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    83ce:	4941      	ldr	r1, [pc, #260]	; (84d4 <Adc_UpdateStatusAfterGetStream+0x134>)
    83d0:	4613      	mov	r3, r2
    83d2:	009b      	lsls	r3, r3, #2
    83d4:	4413      	add	r3, r2
    83d6:	009b      	lsls	r3, r3, #2
    83d8:	440b      	add	r3, r1
    83da:	681b      	ldr	r3, [r3, #0]
    83dc:	2b02      	cmp	r3, #2
    83de:	d109      	bne.n	83f4 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    83e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    83e4:	493b      	ldr	r1, [pc, #236]	; (84d4 <Adc_UpdateStatusAfterGetStream+0x134>)
    83e6:	4613      	mov	r3, r2
    83e8:	009b      	lsls	r3, r3, #2
    83ea:	4413      	add	r3, r2
    83ec:	009b      	lsls	r3, r3, #2
    83ee:	440b      	add	r3, r1
    83f0:	2201      	movs	r2, #1
    83f2:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    83f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    83f8:	4936      	ldr	r1, [pc, #216]	; (84d4 <Adc_UpdateStatusAfterGetStream+0x134>)
    83fa:	4613      	mov	r3, r2
    83fc:	009b      	lsls	r3, r3, #2
    83fe:	4413      	add	r3, r2
    8400:	009b      	lsls	r3, r3, #2
    8402:	440b      	add	r3, r1
    8404:	681b      	ldr	r3, [r3, #0]
    8406:	2b03      	cmp	r3, #3
    8408:	d15f      	bne.n	84ca <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    840a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    840e:	4a30      	ldr	r2, [pc, #192]	; (84d0 <Adc_UpdateStatusAfterGetStream+0x130>)
    8410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8414:	685a      	ldr	r2, [r3, #4]
    8416:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    841a:	2134      	movs	r1, #52	; 0x34
    841c:	fb01 f303 	mul.w	r3, r1, r3
    8420:	4413      	add	r3, r2
    8422:	695b      	ldr	r3, [r3, #20]
    8424:	2b00      	cmp	r3, #0
    8426:	d150      	bne.n	84ca <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8428:	f89d 3005 	ldrb.w	r3, [sp, #5]
    842c:	4a28      	ldr	r2, [pc, #160]	; (84d0 <Adc_UpdateStatusAfterGetStream+0x130>)
    842e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8432:	685a      	ldr	r2, [r3, #4]
    8434:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8438:	2134      	movs	r1, #52	; 0x34
    843a:	fb01 f303 	mul.w	r3, r1, r3
    843e:	4413      	add	r3, r2
    8440:	689b      	ldr	r3, [r3, #8]
    8442:	2b00      	cmp	r3, #0
    8444:	d02c      	beq.n	84a0 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8446:	f89d 3005 	ldrb.w	r3, [sp, #5]
    844a:	4a21      	ldr	r2, [pc, #132]	; (84d0 <Adc_UpdateStatusAfterGetStream+0x130>)
    844c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8450:	685a      	ldr	r2, [r3, #4]
    8452:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8456:	2134      	movs	r1, #52	; 0x34
    8458:	fb01 f303 	mul.w	r3, r1, r3
    845c:	4413      	add	r3, r2
    845e:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8460:	2b01      	cmp	r3, #1
    8462:	d128      	bne.n	84b6 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8464:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8468:	4a19      	ldr	r2, [pc, #100]	; (84d0 <Adc_UpdateStatusAfterGetStream+0x130>)
    846a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    846e:	685a      	ldr	r2, [r3, #4]
    8470:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8474:	2134      	movs	r1, #52	; 0x34
    8476:	fb01 f303 	mul.w	r3, r1, r3
    847a:	4413      	add	r3, r2
    847c:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    847e:	2b01      	cmp	r3, #1
    8480:	d119      	bne.n	84b6 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    8482:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8486:	4a12      	ldr	r2, [pc, #72]	; (84d0 <Adc_UpdateStatusAfterGetStream+0x130>)
    8488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    848c:	685a      	ldr	r2, [r3, #4]
    848e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8492:	2134      	movs	r1, #52	; 0x34
    8494:	fb01 f303 	mul.w	r3, r1, r3
    8498:	4413      	add	r3, r2
    849a:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    849c:	2b00      	cmp	r3, #0
    849e:	d10a      	bne.n	84b6 <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    84a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84a4:	490b      	ldr	r1, [pc, #44]	; (84d4 <Adc_UpdateStatusAfterGetStream+0x134>)
    84a6:	4613      	mov	r3, r2
    84a8:	009b      	lsls	r3, r3, #2
    84aa:	4413      	add	r3, r2
    84ac:	009b      	lsls	r3, r3, #2
    84ae:	440b      	add	r3, r1
    84b0:	2200      	movs	r2, #0
    84b2:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    84b4:	e009      	b.n	84ca <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    84b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84ba:	4906      	ldr	r1, [pc, #24]	; (84d4 <Adc_UpdateStatusAfterGetStream+0x134>)
    84bc:	4613      	mov	r3, r2
    84be:	009b      	lsls	r3, r3, #2
    84c0:	4413      	add	r3, r2
    84c2:	009b      	lsls	r3, r3, #2
    84c4:	440b      	add	r3, r1
    84c6:	2201      	movs	r2, #1
    84c8:	601a      	str	r2, [r3, #0]
}
    84ca:	bf00      	nop
    84cc:	b004      	add	sp, #16
    84ce:	4770      	bx	lr
    84d0:	1fff8d18 	.word	0x1fff8d18
    84d4:	1fff8d1c 	.word	0x1fff8d1c

000084d8 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    84d8:	b500      	push	{lr}
    84da:	b085      	sub	sp, #20
    84dc:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    84de:	f002 fa5b 	bl	a998 <Adc_GetCoreID>
    84e2:	4603      	mov	r3, r0
    84e4:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    84e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    84ec:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    84f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    84f4:	b2db      	uxtb	r3, r3
    84f6:	4619      	mov	r1, r3
    84f8:	9801      	ldr	r0, [sp, #4]
    84fa:	f7ff fbb3 	bl	7c64 <Adc_CheckCurrentCoreId>
    84fe:	4603      	mov	r3, r0
    8500:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    8504:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8508:	2b00      	cmp	r3, #0
    850a:	d12c      	bne.n	8566 <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    850c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8510:	b2db      	uxtb	r3, r3
    8512:	4619      	mov	r1, r3
    8514:	4a16      	ldr	r2, [pc, #88]	; (8570 <Adc_Init+0x98>)
    8516:	9b01      	ldr	r3, [sp, #4]
    8518:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    851c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8520:	b2db      	uxtb	r3, r3
    8522:	4618      	mov	r0, r3
    8524:	f7ff fb4e 	bl	7bc4 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    8528:	f89d 300c 	ldrb.w	r3, [sp, #12]
    852c:	b2db      	uxtb	r3, r3
    852e:	4618      	mov	r0, r3
    8530:	f7ff fade 	bl	7af0 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    8534:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8538:	b2db      	uxtb	r3, r3
    853a:	461a      	mov	r2, r3
    853c:	4b0c      	ldr	r3, [pc, #48]	; (8570 <Adc_Init+0x98>)
    853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8542:	681b      	ldr	r3, [r3, #0]
    8544:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8548:	4611      	mov	r1, r2
    854a:	4618      	mov	r0, r3
    854c:	f001 ff78 	bl	a440 <Adc_Ipw_Init>
    8550:	4603      	mov	r3, r0
    8552:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    8556:	f89d 300d 	ldrb.w	r3, [sp, #13]
    855a:	2b01      	cmp	r3, #1
    855c:	d103      	bne.n	8566 <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    855e:	212b      	movs	r1, #43	; 0x2b
    8560:	2000      	movs	r0, #0
    8562:	f7ff f897 	bl	7694 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    8566:	bf00      	nop
    8568:	b005      	add	sp, #20
    856a:	f85d fb04 	ldr.w	pc, [sp], #4
    856e:	bf00      	nop
    8570:	1fff8d18 	.word	0x1fff8d18

00008574 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    8574:	b500      	push	{lr}
    8576:	b085      	sub	sp, #20
    8578:	4603      	mov	r3, r0
    857a:	9100      	str	r1, [sp, #0]
    857c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    8580:	2301      	movs	r3, #1
    8582:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    8586:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    858a:	4618      	mov	r0, r3
    858c:	f7ff f9a2 	bl	78d4 <Adc_ValidateSetupBufferNotBusy>
    8590:	4603      	mov	r3, r0
    8592:	2b00      	cmp	r3, #0
    8594:	d10d      	bne.n	85b2 <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    8596:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    859a:	4909      	ldr	r1, [pc, #36]	; (85c0 <Adc_SetupResultBuffer+0x4c>)
    859c:	4613      	mov	r3, r2
    859e:	009b      	lsls	r3, r3, #2
    85a0:	4413      	add	r3, r2
    85a2:	009b      	lsls	r3, r3, #2
    85a4:	440b      	add	r3, r1
    85a6:	330c      	adds	r3, #12
    85a8:	9a00      	ldr	r2, [sp, #0]
    85aa:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    85ac:	2300      	movs	r3, #0
    85ae:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    85b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    85b6:	4618      	mov	r0, r3
    85b8:	b005      	add	sp, #20
    85ba:	f85d fb04 	ldr.w	pc, [sp], #4
    85be:	bf00      	nop
    85c0:	1fff8d1c 	.word	0x1fff8d1c

000085c4 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    85c4:	b500      	push	{lr}
    85c6:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    85c8:	2300      	movs	r3, #0
    85ca:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    85ce:	f002 f9e3 	bl	a998 <Adc_GetCoreID>
    85d2:	4603      	mov	r3, r0
    85d4:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    85d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    85dc:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    85e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    85e4:	b2db      	uxtb	r3, r3
    85e6:	461a      	mov	r2, r3
    85e8:	4b2d      	ldr	r3, [pc, #180]	; (86a0 <Adc_DeInit+0xdc>)
    85ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    85ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
    85f2:	4611      	mov	r1, r2
    85f4:	4618      	mov	r0, r3
    85f6:	f7ff fb35 	bl	7c64 <Adc_CheckCurrentCoreId>
    85fa:	4603      	mov	r3, r0
    85fc:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    8600:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8604:	2b00      	cmp	r3, #0
    8606:	d147      	bne.n	8698 <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    8608:	f89d 3002 	ldrb.w	r3, [sp, #2]
    860c:	b2db      	uxtb	r3, r3
    860e:	4618      	mov	r0, r3
    8610:	f7ff f912 	bl	7838 <Adc_ValidateDeInitNotBusy>
    8614:	4603      	mov	r3, r0
    8616:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    861a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    861e:	2b00      	cmp	r3, #0
    8620:	d13a      	bne.n	8698 <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    8622:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8626:	b2db      	uxtb	r3, r3
    8628:	4618      	mov	r0, r3
    862a:	f001 ff4e 	bl	a4ca <Adc_Ipw_DeInit>
    862e:	4603      	mov	r3, r0
    8630:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    8634:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8638:	2b01      	cmp	r3, #1
    863a:	d103      	bne.n	8644 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    863c:	212b      	movs	r1, #43	; 0x2b
    863e:	2001      	movs	r0, #1
    8640:	f7ff f828 	bl	7694 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8644:	2300      	movs	r3, #0
    8646:	f88d 3007 	strb.w	r3, [sp, #7]
    864a:	e019      	b.n	8680 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    864c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8650:	b2db      	uxtb	r3, r3
    8652:	461a      	mov	r2, r3
    8654:	4b12      	ldr	r3, [pc, #72]	; (86a0 <Adc_DeInit+0xdc>)
    8656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    865a:	681a      	ldr	r2, [r3, #0]
    865c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8660:	4413      	add	r3, r2
    8662:	7f9b      	ldrb	r3, [r3, #30]
    8664:	2b01      	cmp	r3, #1
    8666:	d106      	bne.n	8676 <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    8668:	f89d 3007 	ldrb.w	r3, [sp, #7]
    866c:	4a0d      	ldr	r2, [pc, #52]	; (86a4 <Adc_DeInit+0xe0>)
    866e:	00db      	lsls	r3, r3, #3
    8670:	4413      	add	r3, r2
    8672:	2200      	movs	r2, #0
    8674:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8676:	f89d 3007 	ldrb.w	r3, [sp, #7]
    867a:	3301      	adds	r3, #1
    867c:	f88d 3007 	strb.w	r3, [sp, #7]
    8680:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8684:	2b01      	cmp	r3, #1
    8686:	d9e1      	bls.n	864c <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    8688:	f89d 3002 	ldrb.w	r3, [sp, #2]
    868c:	b2db      	uxtb	r3, r3
    868e:	4619      	mov	r1, r3
    8690:	4b03      	ldr	r3, [pc, #12]	; (86a0 <Adc_DeInit+0xdc>)
    8692:	2200      	movs	r2, #0
    8694:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    8698:	bf00      	nop
    869a:	b003      	add	sp, #12
    869c:	f85d fb04 	ldr.w	pc, [sp], #4
    86a0:	1fff8d18 	.word	0x1fff8d18
    86a4:	1fff8d44 	.word	0x1fff8d44

000086a8 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    86a8:	b500      	push	{lr}
    86aa:	b085      	sub	sp, #20
    86ac:	4603      	mov	r3, r0
    86ae:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    86b2:	2300      	movs	r3, #0
    86b4:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    86b8:	2300      	movs	r3, #0
    86ba:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    86be:	f002 f96b 	bl	a998 <Adc_GetCoreID>
    86c2:	4603      	mov	r3, r0
    86c4:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    86c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    86cc:	b2db      	uxtb	r3, r3
    86ce:	461a      	mov	r2, r3
    86d0:	4b1a      	ldr	r3, [pc, #104]	; (873c <Adc_StartGroupConversion+0x94>)
    86d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86d6:	68da      	ldr	r2, [r3, #12]
    86d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86dc:	005b      	lsls	r3, r3, #1
    86de:	4413      	add	r3, r2
    86e0:	881b      	ldrh	r3, [r3, #0]
    86e2:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    86e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    86ea:	b2da      	uxtb	r2, r3
    86ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86f0:	4611      	mov	r1, r2
    86f2:	4618      	mov	r0, r3
    86f4:	f7ff f912 	bl	791c <Adc_ValidateStateStartGroupConvNotBusy>
    86f8:	4603      	mov	r3, r0
    86fa:	2b00      	cmp	r3, #0
    86fc:	d11a      	bne.n	8734 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    86fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8702:	b2db      	uxtb	r3, r3
    8704:	461a      	mov	r2, r3
    8706:	4b0d      	ldr	r3, [pc, #52]	; (873c <Adc_StartGroupConversion+0x94>)
    8708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    870c:	685a      	ldr	r2, [r3, #4]
    870e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8712:	2134      	movs	r1, #52	; 0x34
    8714:	fb01 f303 	mul.w	r3, r1, r3
    8718:	4413      	add	r3, r2
    871a:	789b      	ldrb	r3, [r3, #2]
    871c:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    8720:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8724:	b2da      	uxtb	r2, r3
    8726:	f89d 100d 	ldrb.w	r1, [sp, #13]
    872a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    872e:	4618      	mov	r0, r3
    8730:	f7ff facb 	bl	7cca <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    8734:	bf00      	nop
    8736:	b005      	add	sp, #20
    8738:	f85d fb04 	ldr.w	pc, [sp], #4
    873c:	1fff8d18 	.word	0x1fff8d18

00008740 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    8740:	b500      	push	{lr}
    8742:	b085      	sub	sp, #20
    8744:	4603      	mov	r3, r0
    8746:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    874a:	2300      	movs	r3, #0
    874c:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    8750:	2300      	movs	r3, #0
    8752:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    8756:	f002 f91f 	bl	a998 <Adc_GetCoreID>
    875a:	4603      	mov	r3, r0
    875c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    8760:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8764:	b2da      	uxtb	r2, r3
    8766:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    876a:	4619      	mov	r1, r3
    876c:	2003      	movs	r0, #3
    876e:	f7ff f94d 	bl	7a0c <Adc_ValidateStateNotIdle>
    8772:	4603      	mov	r3, r0
    8774:	2b00      	cmp	r3, #0
    8776:	d129      	bne.n	87cc <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8778:	f89d 300b 	ldrb.w	r3, [sp, #11]
    877c:	b2db      	uxtb	r3, r3
    877e:	461a      	mov	r2, r3
    8780:	4b14      	ldr	r3, [pc, #80]	; (87d4 <Adc_StopGroupConversion+0x94>)
    8782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8786:	68da      	ldr	r2, [r3, #12]
    8788:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    878c:	005b      	lsls	r3, r3, #1
    878e:	4413      	add	r3, r2
    8790:	881b      	ldrh	r3, [r3, #0]
    8792:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8796:	f89d 300b 	ldrb.w	r3, [sp, #11]
    879a:	b2db      	uxtb	r3, r3
    879c:	461a      	mov	r2, r3
    879e:	4b0d      	ldr	r3, [pc, #52]	; (87d4 <Adc_StopGroupConversion+0x94>)
    87a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    87a4:	685a      	ldr	r2, [r3, #4]
    87a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    87aa:	2134      	movs	r1, #52	; 0x34
    87ac:	fb01 f303 	mul.w	r3, r1, r3
    87b0:	4413      	add	r3, r2
    87b2:	789b      	ldrb	r3, [r3, #2]
    87b4:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    87b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    87bc:	b2da      	uxtb	r2, r3
    87be:	f89d 100f 	ldrb.w	r1, [sp, #15]
    87c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    87c6:	4618      	mov	r0, r3
    87c8:	f7ff fb78 	bl	7ebc <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    87cc:	bf00      	nop
    87ce:	b005      	add	sp, #20
    87d0:	f85d fb04 	ldr.w	pc, [sp], #4
    87d4:	1fff8d18 	.word	0x1fff8d18

000087d8 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    87d8:	b500      	push	{lr}
    87da:	b085      	sub	sp, #20
    87dc:	4603      	mov	r3, r0
    87de:	9100      	str	r1, [sp, #0]
    87e0:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    87e4:	2301      	movs	r3, #1
    87e6:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    87ea:	2301      	movs	r3, #1
    87ec:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    87f0:	f002 f8d2 	bl	a998 <Adc_GetCoreID>
    87f4:	4603      	mov	r3, r0
    87f6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    87fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    87fe:	b2da      	uxtb	r2, r3
    8800:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8804:	4619      	mov	r1, r3
    8806:	2004      	movs	r0, #4
    8808:	f7ff f900 	bl	7a0c <Adc_ValidateStateNotIdle>
    880c:	4603      	mov	r3, r0
    880e:	2b00      	cmp	r3, #0
    8810:	d121      	bne.n	8856 <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    8812:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8816:	b2db      	uxtb	r3, r3
    8818:	f10d 020d 	add.w	r2, sp, #13
    881c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    8820:	9900      	ldr	r1, [sp, #0]
    8822:	f002 f812 	bl	a84a <Adc_Ipw_ReadGroup>
    8826:	4603      	mov	r3, r0
    8828:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    882c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8830:	2b00      	cmp	r3, #0
    8832:	d006      	beq.n	8842 <Adc_ReadGroup+0x6a>
    8834:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8838:	f083 0301 	eor.w	r3, r3, #1
    883c:	b2db      	uxtb	r3, r3
    883e:	2b00      	cmp	r3, #0
    8840:	d009      	beq.n	8856 <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    8842:	f89d 100d 	ldrb.w	r1, [sp, #13]
    8846:	f89d 300e 	ldrb.w	r3, [sp, #14]
    884a:	b2da      	uxtb	r2, r3
    884c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8850:	4618      	mov	r0, r3
    8852:	f7ff fbe5 	bl	8020 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    8856:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    885a:	4618      	mov	r0, r3
    885c:	b005      	add	sp, #20
    885e:	f85d fb04 	ldr.w	pc, [sp], #4

00008862 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    8862:	b084      	sub	sp, #16
    8864:	4603      	mov	r3, r0
    8866:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    886a:	2300      	movs	r3, #0
    886c:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    886e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8872:	4906      	ldr	r1, [pc, #24]	; (888c <Adc_GetGroupStatus+0x2a>)
    8874:	4613      	mov	r3, r2
    8876:	009b      	lsls	r3, r3, #2
    8878:	4413      	add	r3, r2
    887a:	009b      	lsls	r3, r3, #2
    887c:	440b      	add	r3, r1
    887e:	681b      	ldr	r3, [r3, #0]
    8880:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    8882:	9b03      	ldr	r3, [sp, #12]
}
    8884:	4618      	mov	r0, r3
    8886:	b004      	add	sp, #16
    8888:	4770      	bx	lr
    888a:	bf00      	nop
    888c:	1fff8d1c 	.word	0x1fff8d1c

00008890 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    8890:	b500      	push	{lr}
    8892:	b085      	sub	sp, #20
    8894:	4603      	mov	r3, r0
    8896:	9100      	str	r1, [sp, #0]
    8898:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    889c:	f002 f87c 	bl	a998 <Adc_GetCoreID>
    88a0:	4603      	mov	r3, r0
    88a2:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    88a6:	2300      	movs	r3, #0
    88a8:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    88ac:	2300      	movs	r3, #0
    88ae:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    88b2:	2300      	movs	r3, #0
    88b4:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    88b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    88bc:	b2da      	uxtb	r2, r3
    88be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    88c2:	4619      	mov	r1, r3
    88c4:	200b      	movs	r0, #11
    88c6:	f7ff f8a1 	bl	7a0c <Adc_ValidateStateNotIdle>
    88ca:	4603      	mov	r3, r0
    88cc:	2b00      	cmp	r3, #0
    88ce:	f040 808e 	bne.w	89ee <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    88d2:	9b00      	ldr	r3, [sp, #0]
    88d4:	2200      	movs	r2, #0
    88d6:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    88d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    88dc:	4948      	ldr	r1, [pc, #288]	; (8a00 <Adc_GetStreamLastPointer+0x170>)
    88de:	4613      	mov	r3, r2
    88e0:	009b      	lsls	r3, r3, #2
    88e2:	4413      	add	r3, r2
    88e4:	009b      	lsls	r3, r3, #2
    88e6:	440b      	add	r3, r1
    88e8:	681b      	ldr	r3, [r3, #0]
    88ea:	2b00      	cmp	r3, #0
    88ec:	f000 8082 	beq.w	89f4 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    88f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    88f4:	4942      	ldr	r1, [pc, #264]	; (8a00 <Adc_GetStreamLastPointer+0x170>)
    88f6:	4613      	mov	r3, r2
    88f8:	009b      	lsls	r3, r3, #2
    88fa:	4413      	add	r3, r2
    88fc:	009b      	lsls	r3, r3, #2
    88fe:	440b      	add	r3, r1
    8900:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8902:	2b01      	cmp	r3, #1
    8904:	d076      	beq.n	89f4 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8906:	f89d 3009 	ldrb.w	r3, [sp, #9]
    890a:	b2db      	uxtb	r3, r3
    890c:	461a      	mov	r2, r3
    890e:	4b3d      	ldr	r3, [pc, #244]	; (8a04 <Adc_GetStreamLastPointer+0x174>)
    8910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8914:	68da      	ldr	r2, [r3, #12]
    8916:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    891a:	005b      	lsls	r3, r3, #1
    891c:	4413      	add	r3, r2
    891e:	881b      	ldrh	r3, [r3, #0]
    8920:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8924:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8928:	4935      	ldr	r1, [pc, #212]	; (8a00 <Adc_GetStreamLastPointer+0x170>)
    892a:	4613      	mov	r3, r2
    892c:	009b      	lsls	r3, r3, #2
    892e:	4413      	add	r3, r2
    8930:	009b      	lsls	r3, r3, #2
    8932:	440b      	add	r3, r1
    8934:	3308      	adds	r3, #8
    8936:	881b      	ldrh	r3, [r3, #0]
    8938:	b29b      	uxth	r3, r3
    893a:	2b00      	cmp	r3, #0
    893c:	d123      	bne.n	8986 <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    893e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8942:	b2db      	uxtb	r3, r3
    8944:	461a      	mov	r2, r3
    8946:	4b2f      	ldr	r3, [pc, #188]	; (8a04 <Adc_GetStreamLastPointer+0x174>)
    8948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    894c:	685a      	ldr	r2, [r3, #4]
    894e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8952:	2134      	movs	r1, #52	; 0x34
    8954:	fb01 f303 	mul.w	r3, r1, r3
    8958:	4413      	add	r3, r2
    895a:	8b9b      	ldrh	r3, [r3, #28]
    895c:	3b01      	subs	r3, #1
    895e:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    8962:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8966:	b2db      	uxtb	r3, r3
    8968:	461a      	mov	r2, r3
    896a:	4b26      	ldr	r3, [pc, #152]	; (8a04 <Adc_GetStreamLastPointer+0x174>)
    896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8970:	685a      	ldr	r2, [r3, #4]
    8972:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8976:	2134      	movs	r1, #52	; 0x34
    8978:	fb01 f303 	mul.w	r3, r1, r3
    897c:	4413      	add	r3, r2
    897e:	8b9b      	ldrh	r3, [r3, #28]
    8980:	f8ad 300e 	strh.w	r3, [sp, #14]
    8984:	e019      	b.n	89ba <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8986:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    898a:	491d      	ldr	r1, [pc, #116]	; (8a00 <Adc_GetStreamLastPointer+0x170>)
    898c:	4613      	mov	r3, r2
    898e:	009b      	lsls	r3, r3, #2
    8990:	4413      	add	r3, r2
    8992:	009b      	lsls	r3, r3, #2
    8994:	440b      	add	r3, r1
    8996:	3308      	adds	r3, #8
    8998:	881b      	ldrh	r3, [r3, #0]
    899a:	b29b      	uxth	r3, r3
    899c:	3b01      	subs	r3, #1
    899e:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    89a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    89a6:	4916      	ldr	r1, [pc, #88]	; (8a00 <Adc_GetStreamLastPointer+0x170>)
    89a8:	4613      	mov	r3, r2
    89aa:	009b      	lsls	r3, r3, #2
    89ac:	4413      	add	r3, r2
    89ae:	009b      	lsls	r3, r3, #2
    89b0:	440b      	add	r3, r1
    89b2:	3308      	adds	r3, #8
    89b4:	881b      	ldrh	r3, [r3, #0]
    89b6:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    89ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    89be:	4910      	ldr	r1, [pc, #64]	; (8a00 <Adc_GetStreamLastPointer+0x170>)
    89c0:	4613      	mov	r3, r2
    89c2:	009b      	lsls	r3, r3, #2
    89c4:	4413      	add	r3, r2
    89c6:	009b      	lsls	r3, r3, #2
    89c8:	440b      	add	r3, r1
    89ca:	330c      	adds	r3, #12
    89cc:	681a      	ldr	r2, [r3, #0]
    89ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    89d2:	005b      	lsls	r3, r3, #1
    89d4:	441a      	add	r2, r3
    89d6:	9b00      	ldr	r3, [sp, #0]
    89d8:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    89da:	f89d 3009 	ldrb.w	r3, [sp, #9]
    89de:	b2da      	uxtb	r2, r3
    89e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89e4:	4611      	mov	r1, r2
    89e6:	4618      	mov	r0, r3
    89e8:	f7ff fcda 	bl	83a0 <Adc_UpdateStatusAfterGetStream>
    89ec:	e002      	b.n	89f4 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    89ee:	9b00      	ldr	r3, [sp, #0]
    89f0:	2200      	movs	r2, #0
    89f2:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    89f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    89f8:	4618      	mov	r0, r3
    89fa:	b005      	add	sp, #20
    89fc:	f85d fb04 	ldr.w	pc, [sp], #4
    8a00:	1fff8d1c 	.word	0x1fff8d1c
    8a04:	1fff8d18 	.word	0x1fff8d18

00008a08 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    8a08:	b082      	sub	sp, #8
    8a0a:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    8a0c:	9b01      	ldr	r3, [sp, #4]
    8a0e:	222b      	movs	r2, #43	; 0x2b
    8a10:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    8a12:	9b01      	ldr	r3, [sp, #4]
    8a14:	227b      	movs	r2, #123	; 0x7b
    8a16:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    8a18:	9b01      	ldr	r3, [sp, #4]
    8a1a:	2202      	movs	r2, #2
    8a1c:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    8a1e:	9b01      	ldr	r3, [sp, #4]
    8a20:	2200      	movs	r2, #0
    8a22:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    8a24:	9b01      	ldr	r3, [sp, #4]
    8a26:	2200      	movs	r2, #0
    8a28:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    8a2a:	bf00      	nop
    8a2c:	b002      	add	sp, #8
    8a2e:	4770      	bx	lr

00008a30 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    8a30:	b500      	push	{lr}
    8a32:	b085      	sub	sp, #20
    8a34:	4603      	mov	r3, r0
    8a36:	9100      	str	r1, [sp, #0]
    8a38:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    8a3c:	2300      	movs	r3, #0
    8a3e:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    8a42:	f001 ffa9 	bl	a998 <Adc_GetCoreID>
    8a46:	4603      	mov	r3, r0
    8a48:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    8a4c:	9b00      	ldr	r3, [sp, #0]
    8a4e:	2201      	movs	r2, #1
    8a50:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    8a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a56:	2129      	movs	r1, #41	; 0x29
    8a58:	4618      	mov	r0, r3
    8a5a:	f7fe fe30 	bl	76be <Adc_ValidateNotBusyNoQueue>
    8a5e:	4603      	mov	r3, r0
    8a60:	2b00      	cmp	r3, #0
    8a62:	d115      	bne.n	8a90 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    8a64:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a68:	b2db      	uxtb	r3, r3
    8a6a:	4619      	mov	r1, r3
    8a6c:	2029      	movs	r0, #41	; 0x29
    8a6e:	f7fe fe91 	bl	7794 <Adc_ValidateCheckGroupNotConversion>
    8a72:	4603      	mov	r3, r0
    8a74:	2b00      	cmp	r3, #0
    8a76:	d10b      	bne.n	8a90 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    8a78:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a7c:	b2da      	uxtb	r2, r3
    8a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a82:	9900      	ldr	r1, [sp, #0]
    8a84:	4618      	mov	r0, r3
    8a86:	f001 ff5d 	bl	a944 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    8a8a:	2301      	movs	r3, #1
    8a8c:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    8a90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a94:	2b00      	cmp	r3, #0
    8a96:	d007      	beq.n	8aa8 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    8a98:	9b00      	ldr	r3, [sp, #0]
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	2b01      	cmp	r3, #1
    8a9e:	d103      	bne.n	8aa8 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    8aa0:	212b      	movs	r1, #43	; 0x2b
    8aa2:	2029      	movs	r0, #41	; 0x29
    8aa4:	f7fe fdf6 	bl	7694 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    8aa8:	bf00      	nop
    8aaa:	b005      	add	sp, #20
    8aac:	f85d fb04 	ldr.w	pc, [sp], #4

00008ab0 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    8ab0:	b086      	sub	sp, #24
    8ab2:	9003      	str	r0, [sp, #12]
    8ab4:	9102      	str	r1, [sp, #8]
    8ab6:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    8ab8:	9b03      	ldr	r3, [sp, #12]
    8aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8abe:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    8ac0:	9b02      	ldr	r3, [sp, #8]
    8ac2:	43db      	mvns	r3, r3
    8ac4:	9a05      	ldr	r2, [sp, #20]
    8ac6:	4013      	ands	r3, r2
    8ac8:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    8aca:	9a05      	ldr	r2, [sp, #20]
    8acc:	9b01      	ldr	r3, [sp, #4]
    8ace:	4313      	orrs	r3, r2
    8ad0:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    8ad2:	9b03      	ldr	r3, [sp, #12]
    8ad4:	9a05      	ldr	r2, [sp, #20]
    8ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8ada:	bf00      	nop
    8adc:	b006      	add	sp, #24
    8ade:	4770      	bx	lr

00008ae0 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    8ae0:	b086      	sub	sp, #24
    8ae2:	9003      	str	r0, [sp, #12]
    8ae4:	9102      	str	r1, [sp, #8]
    8ae6:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    8ae8:	9b03      	ldr	r3, [sp, #12]
    8aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8aec:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    8aee:	9b05      	ldr	r3, [sp, #20]
    8af0:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    8af4:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    8af6:	9b02      	ldr	r3, [sp, #8]
    8af8:	015b      	lsls	r3, r3, #5
    8afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
    8afe:	9a05      	ldr	r2, [sp, #20]
    8b00:	4313      	orrs	r3, r2
    8b02:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    8b04:	9b01      	ldr	r3, [sp, #4]
    8b06:	f003 0303 	and.w	r3, r3, #3
    8b0a:	9a05      	ldr	r2, [sp, #20]
    8b0c:	4313      	orrs	r3, r2
    8b0e:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    8b10:	9b03      	ldr	r3, [sp, #12]
    8b12:	9a05      	ldr	r2, [sp, #20]
    8b14:	641a      	str	r2, [r3, #64]	; 0x40
}
    8b16:	bf00      	nop
    8b18:	b006      	add	sp, #24
    8b1a:	4770      	bx	lr

00008b1c <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    8b1c:	b084      	sub	sp, #16
    8b1e:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    8b20:	2300      	movs	r3, #0
    8b22:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    8b24:	9b01      	ldr	r3, [sp, #4]
    8b26:	095b      	lsrs	r3, r3, #5
    8b28:	f003 0303 	and.w	r3, r3, #3
    8b2c:	2b03      	cmp	r3, #3
    8b2e:	d00c      	beq.n	8b4a <Adc_HwAcc_GetClockDivide+0x2e>
    8b30:	2b03      	cmp	r3, #3
    8b32:	d80d      	bhi.n	8b50 <Adc_HwAcc_GetClockDivide+0x34>
    8b34:	2b01      	cmp	r3, #1
    8b36:	d002      	beq.n	8b3e <Adc_HwAcc_GetClockDivide+0x22>
    8b38:	2b02      	cmp	r3, #2
    8b3a:	d003      	beq.n	8b44 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    8b3c:	e008      	b.n	8b50 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    8b3e:	2301      	movs	r3, #1
    8b40:	9303      	str	r3, [sp, #12]
            break;
    8b42:	e006      	b.n	8b52 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    8b44:	2302      	movs	r3, #2
    8b46:	9303      	str	r3, [sp, #12]
            break;
    8b48:	e003      	b.n	8b52 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    8b4a:	2303      	movs	r3, #3
    8b4c:	9303      	str	r3, [sp, #12]
            break;
    8b4e:	e000      	b.n	8b52 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8b50:	bf00      	nop
    }
    return ReturnValue;
    8b52:	9b03      	ldr	r3, [sp, #12]
}
    8b54:	4618      	mov	r0, r3
    8b56:	b004      	add	sp, #16
    8b58:	4770      	bx	lr

00008b5a <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    8b5a:	b084      	sub	sp, #16
    8b5c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8b5e:	2300      	movs	r3, #0
    8b60:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8b62:	9b01      	ldr	r3, [sp, #4]
    8b64:	f003 0303 	and.w	r3, r3, #3
    8b68:	2b03      	cmp	r3, #3
    8b6a:	d00c      	beq.n	8b86 <Adc_HwAcc_GetInputClock+0x2c>
    8b6c:	2b03      	cmp	r3, #3
    8b6e:	d80d      	bhi.n	8b8c <Adc_HwAcc_GetInputClock+0x32>
    8b70:	2b01      	cmp	r3, #1
    8b72:	d002      	beq.n	8b7a <Adc_HwAcc_GetInputClock+0x20>
    8b74:	2b02      	cmp	r3, #2
    8b76:	d003      	beq.n	8b80 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    8b78:	e008      	b.n	8b8c <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    8b7a:	2301      	movs	r3, #1
    8b7c:	9303      	str	r3, [sp, #12]
            break;
    8b7e:	e006      	b.n	8b8e <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8b80:	2302      	movs	r3, #2
    8b82:	9303      	str	r3, [sp, #12]
            break;
    8b84:	e003      	b.n	8b8e <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    8b86:	2303      	movs	r3, #3
    8b88:	9303      	str	r3, [sp, #12]
            break;
    8b8a:	e000      	b.n	8b8e <Adc_HwAcc_GetInputClock+0x34>
            break;
    8b8c:	bf00      	nop
    }
    return ReturnValue;
    8b8e:	9b03      	ldr	r3, [sp, #12]
}
    8b90:	4618      	mov	r0, r3
    8b92:	b004      	add	sp, #16
    8b94:	4770      	bx	lr

00008b96 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    8b96:	b084      	sub	sp, #16
    8b98:	9001      	str	r0, [sp, #4]
    8b9a:	460b      	mov	r3, r1
    8b9c:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8ba0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ba4:	2b00      	cmp	r3, #0
    8ba6:	d002      	beq.n	8bae <Adc_HwAcc_SetSampleTime+0x18>
    8ba8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8bac:	e000      	b.n	8bb0 <Adc_HwAcc_SetSampleTime+0x1a>
    8bae:	2301      	movs	r3, #1
    8bb0:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8bb4:	9b01      	ldr	r3, [sp, #4]
    8bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8bb8:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    8bba:	9b02      	ldr	r3, [sp, #8]
    8bbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8bc0:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    8bc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bc6:	9a02      	ldr	r2, [sp, #8]
    8bc8:	4313      	orrs	r3, r2
    8bca:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    8bcc:	9b01      	ldr	r3, [sp, #4]
    8bce:	9a02      	ldr	r2, [sp, #8]
    8bd0:	645a      	str	r2, [r3, #68]	; 0x44
}
    8bd2:	bf00      	nop
    8bd4:	b004      	add	sp, #16
    8bd6:	4770      	bx	lr

00008bd8 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    8bd8:	b086      	sub	sp, #24
    8bda:	9003      	str	r0, [sp, #12]
    8bdc:	460b      	mov	r3, r1
    8bde:	9201      	str	r2, [sp, #4]
    8be0:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    8be4:	9b03      	ldr	r3, [sp, #12]
    8be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8bea:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    8bec:	9b05      	ldr	r3, [sp, #20]
    8bee:	f023 0307 	bic.w	r3, r3, #7
    8bf2:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    8bf4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d001      	beq.n	8c00 <Adc_HwAcc_SetAveraging+0x28>
    8bfc:	2304      	movs	r3, #4
    8bfe:	e000      	b.n	8c02 <Adc_HwAcc_SetAveraging+0x2a>
    8c00:	2300      	movs	r3, #0
    8c02:	9a05      	ldr	r2, [sp, #20]
    8c04:	4313      	orrs	r3, r2
    8c06:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    8c08:	9b01      	ldr	r3, [sp, #4]
    8c0a:	f003 0303 	and.w	r3, r3, #3
    8c0e:	9a05      	ldr	r2, [sp, #20]
    8c10:	4313      	orrs	r3, r2
    8c12:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    8c14:	9b03      	ldr	r3, [sp, #12]
    8c16:	9a05      	ldr	r2, [sp, #20]
    8c18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8c1c:	bf00      	nop
    8c1e:	b006      	add	sp, #24
    8c20:	4770      	bx	lr

00008c22 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    8c22:	b084      	sub	sp, #16
    8c24:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    8c26:	2300      	movs	r3, #0
    8c28:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    8c2a:	9b01      	ldr	r3, [sp, #4]
    8c2c:	f003 0303 	and.w	r3, r3, #3
    8c30:	2b03      	cmp	r3, #3
    8c32:	d00c      	beq.n	8c4e <Adc_HwAcc_GetAverageSelect+0x2c>
    8c34:	2b03      	cmp	r3, #3
    8c36:	d80d      	bhi.n	8c54 <Adc_HwAcc_GetAverageSelect+0x32>
    8c38:	2b01      	cmp	r3, #1
    8c3a:	d002      	beq.n	8c42 <Adc_HwAcc_GetAverageSelect+0x20>
    8c3c:	2b02      	cmp	r3, #2
    8c3e:	d003      	beq.n	8c48 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    8c40:	e008      	b.n	8c54 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    8c42:	2301      	movs	r3, #1
    8c44:	9303      	str	r3, [sp, #12]
            break;
    8c46:	e006      	b.n	8c56 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    8c48:	2302      	movs	r3, #2
    8c4a:	9303      	str	r3, [sp, #12]
            break;
    8c4c:	e003      	b.n	8c56 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    8c4e:	2303      	movs	r3, #3
    8c50:	9303      	str	r3, [sp, #12]
            break;
    8c52:	e000      	b.n	8c56 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8c54:	bf00      	nop
    }
    return ReturnValue;
    8c56:	9b03      	ldr	r3, [sp, #12]
}
    8c58:	4618      	mov	r0, r3
    8c5a:	b004      	add	sp, #16
    8c5c:	4770      	bx	lr

00008c5e <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8c5e:	b084      	sub	sp, #16
    8c60:	9001      	str	r0, [sp, #4]
    8c62:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8c64:	9b01      	ldr	r3, [sp, #4]
    8c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8c6a:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8c6c:	9b03      	ldr	r3, [sp, #12]
    8c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8c72:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8c74:	9b00      	ldr	r3, [sp, #0]
    8c76:	019b      	lsls	r3, r3, #6
    8c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8c7c:	9a03      	ldr	r2, [sp, #12]
    8c7e:	4313      	orrs	r3, r2
    8c80:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8c82:	9b01      	ldr	r3, [sp, #4]
    8c84:	9a03      	ldr	r2, [sp, #12]
    8c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8c8a:	bf00      	nop
    8c8c:	b004      	add	sp, #16
    8c8e:	4770      	bx	lr

00008c90 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8c90:	b084      	sub	sp, #16
    8c92:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8c94:	2300      	movs	r3, #0
    8c96:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    8c98:	9b01      	ldr	r3, [sp, #4]
    8c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	d001      	beq.n	8ca6 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8ca2:	2301      	movs	r3, #1
    8ca4:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    8ca6:	9b03      	ldr	r3, [sp, #12]
}
    8ca8:	4618      	mov	r0, r3
    8caa:	b004      	add	sp, #16
    8cac:	4770      	bx	lr

00008cae <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8cae:	b086      	sub	sp, #24
    8cb0:	9003      	str	r0, [sp, #12]
    8cb2:	9201      	str	r2, [sp, #4]
    8cb4:	461a      	mov	r2, r3
    8cb6:	460b      	mov	r3, r1
    8cb8:	f88d 300b 	strb.w	r3, [sp, #11]
    8cbc:	4613      	mov	r3, r2
    8cbe:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    8cc2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8cc6:	9b03      	ldr	r3, [sp, #12]
    8cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ccc:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    8cce:	9b05      	ldr	r3, [sp, #20]
    8cd0:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    8cd4:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    8cd6:	9b01      	ldr	r3, [sp, #4]
    8cd8:	f003 031f 	and.w	r3, r3, #31
    8cdc:	9a05      	ldr	r2, [sp, #20]
    8cde:	4313      	orrs	r3, r2
    8ce0:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    8ce2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d001      	beq.n	8cee <Adc_HwAcc_SetChannel+0x40>
    8cea:	2340      	movs	r3, #64	; 0x40
    8cec:	e000      	b.n	8cf0 <Adc_HwAcc_SetChannel+0x42>
    8cee:	2300      	movs	r3, #0
    8cf0:	9a05      	ldr	r2, [sp, #20]
    8cf2:	4313      	orrs	r3, r2
    8cf4:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    8cf6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8cfa:	9b03      	ldr	r3, [sp, #12]
    8cfc:	9905      	ldr	r1, [sp, #20]
    8cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8d02:	bf00      	nop
    8d04:	b006      	add	sp, #24
    8d06:	4770      	bx	lr

00008d08 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    8d08:	b082      	sub	sp, #8
    8d0a:	9001      	str	r0, [sp, #4]
    8d0c:	460b      	mov	r3, r1
    8d0e:	f8ad 3002 	strh.w	r3, [sp, #2]
    8d12:	4613      	mov	r3, r2
    8d14:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    8d18:	f8bd 3000 	ldrh.w	r3, [sp]
    8d1c:	b2da      	uxtb	r2, r3
    8d1e:	9b01      	ldr	r3, [sp, #4]
    8d20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    8d24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8d2c:	9b01      	ldr	r3, [sp, #4]
    8d2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    8d32:	bf00      	nop
    8d34:	b002      	add	sp, #8
    8d36:	4770      	bx	lr

00008d38 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    8d38:	b082      	sub	sp, #8
    8d3a:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    8d3c:	9b01      	ldr	r3, [sp, #4]
    8d3e:	099b      	lsrs	r3, r3, #6
    8d40:	f003 0301 	and.w	r3, r3, #1
    8d44:	2b00      	cmp	r3, #0
    8d46:	bf14      	ite	ne
    8d48:	2301      	movne	r3, #1
    8d4a:	2300      	moveq	r3, #0
    8d4c:	b2db      	uxtb	r3, r3
}
    8d4e:	4618      	mov	r0, r3
    8d50:	b002      	add	sp, #8
    8d52:	4770      	bx	lr

00008d54 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8d54:	b082      	sub	sp, #8
    8d56:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    8d58:	9b01      	ldr	r3, [sp, #4]
    8d5a:	09db      	lsrs	r3, r3, #7
    8d5c:	f003 0301 	and.w	r3, r3, #1
    8d60:	2b00      	cmp	r3, #0
    8d62:	bf14      	ite	ne
    8d64:	2301      	movne	r3, #1
    8d66:	2300      	moveq	r3, #0
    8d68:	b2db      	uxtb	r3, r3
}
    8d6a:	4618      	mov	r0, r3
    8d6c:	b002      	add	sp, #8
    8d6e:	4770      	bx	lr

00008d70 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8d70:	b084      	sub	sp, #16
    8d72:	9001      	str	r0, [sp, #4]
    8d74:	460b      	mov	r3, r1
    8d76:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    8d7a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8d7e:	9b01      	ldr	r3, [sp, #4]
    8d80:	3212      	adds	r2, #18
    8d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8d86:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8d8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8d92:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    8d96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8d9a:	4618      	mov	r0, r3
    8d9c:	b004      	add	sp, #16
    8d9e:	4770      	bx	lr

00008da0 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8da0:	b500      	push	{lr}
    8da2:	b085      	sub	sp, #20
    8da4:	9003      	str	r0, [sp, #12]
    8da6:	9102      	str	r1, [sp, #8]
    8da8:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8daa:	f007 f99d 	bl	100e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8dae:	9b02      	ldr	r3, [sp, #8]
    8db0:	7a59      	ldrb	r1, [r3, #9]
    8db2:	9b02      	ldr	r3, [sp, #8]
    8db4:	68db      	ldr	r3, [r3, #12]
    8db6:	461a      	mov	r2, r3
    8db8:	9803      	ldr	r0, [sp, #12]
    8dba:	f7ff ff0d 	bl	8bd8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8dbe:	f007 f9bf 	bl	10140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    8dc2:	f006 fff7 	bl	fdb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8dc6:	9901      	ldr	r1, [sp, #4]
    8dc8:	9803      	ldr	r0, [sp, #12]
    8dca:	f7ff ff48 	bl	8c5e <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8dce:	f007 f81d 	bl	fe0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    8dd2:	f006 fd0d 	bl	f7f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8dd6:	9b02      	ldr	r3, [sp, #8]
    8dd8:	7a1b      	ldrb	r3, [r3, #8]
    8dda:	4619      	mov	r1, r3
    8ddc:	9803      	ldr	r0, [sp, #12]
    8dde:	f7ff feda 	bl	8b96 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    8de2:	f006 fd31 	bl	f848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    8de6:	f006 fc5f 	bl	f6a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8dea:	9b02      	ldr	r3, [sp, #8]
    8dec:	6819      	ldr	r1, [r3, #0]
    8dee:	9b02      	ldr	r3, [sp, #8]
    8df0:	685b      	ldr	r3, [r3, #4]
    8df2:	461a      	mov	r2, r3
    8df4:	9803      	ldr	r0, [sp, #12]
    8df6:	f7ff fe73 	bl	8ae0 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    8dfa:	f006 fc81 	bl	f700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    8dfe:	bf00      	nop
    8e00:	b005      	add	sp, #20
    8e02:	f85d fb04 	ldr.w	pc, [sp], #4

00008e06 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    8e06:	b500      	push	{lr}
    8e08:	b087      	sub	sp, #28
    8e0a:	9001      	str	r0, [sp, #4]
    8e0c:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8e0e:	4a67      	ldr	r2, [pc, #412]	; (8fac <Adc_Ip_Init+0x1a6>)
    8e10:	9b01      	ldr	r3, [sp, #4]
    8e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e16:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    8e18:	2300      	movs	r3, #0
    8e1a:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    8e1c:	2300      	movs	r3, #0
    8e1e:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8e20:	9b00      	ldr	r3, [sp, #0]
    8e22:	6819      	ldr	r1, [r3, #0]
    8e24:	9b00      	ldr	r3, [sp, #0]
    8e26:	689b      	ldr	r3, [r3, #8]
    8e28:	461a      	mov	r2, r3
    8e2a:	9802      	ldr	r0, [sp, #8]
    8e2c:	f7ff fe58 	bl	8ae0 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8e30:	9b00      	ldr	r3, [sp, #0]
    8e32:	7b1b      	ldrb	r3, [r3, #12]
    8e34:	4619      	mov	r1, r3
    8e36:	9802      	ldr	r0, [sp, #8]
    8e38:	f7ff fead 	bl	8b96 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8e3c:	9b00      	ldr	r3, [sp, #0]
    8e3e:	7b59      	ldrb	r1, [r3, #13]
    8e40:	9b00      	ldr	r3, [sp, #0]
    8e42:	691b      	ldr	r3, [r3, #16]
    8e44:	461a      	mov	r2, r3
    8e46:	9802      	ldr	r0, [sp, #8]
    8e48:	f7ff fec6 	bl	8bd8 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    8e4c:	9b00      	ldr	r3, [sp, #0]
    8e4e:	695b      	ldr	r3, [r3, #20]
    8e50:	4619      	mov	r1, r3
    8e52:	9801      	ldr	r0, [sp, #4]
    8e54:	f000 f9ea 	bl	922c <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    8e58:	9b04      	ldr	r3, [sp, #16]
    8e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e5e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    8e60:	9b00      	ldr	r3, [sp, #0]
    8e62:	699b      	ldr	r3, [r3, #24]
    8e64:	019b      	lsls	r3, r3, #6
    8e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e6a:	9a05      	ldr	r2, [sp, #20]
    8e6c:	4313      	orrs	r3, r2
    8e6e:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8e70:	9b00      	ldr	r3, [sp, #0]
    8e72:	7f1b      	ldrb	r3, [r3, #28]
    8e74:	2b00      	cmp	r3, #0
    8e76:	d004      	beq.n	8e82 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    8e78:	9b05      	ldr	r3, [sp, #20]
    8e7a:	f043 0304 	orr.w	r3, r3, #4
    8e7e:	9305      	str	r3, [sp, #20]
    8e80:	e003      	b.n	8e8a <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    8e82:	9b04      	ldr	r3, [sp, #16]
    8e84:	f043 0304 	orr.w	r3, r3, #4
    8e88:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    8e8a:	9b04      	ldr	r3, [sp, #16]
    8e8c:	f043 0303 	orr.w	r3, r3, #3
    8e90:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    8e92:	9b00      	ldr	r3, [sp, #0]
    8e94:	6a1b      	ldr	r3, [r3, #32]
    8e96:	f003 0303 	and.w	r3, r3, #3
    8e9a:	9a05      	ldr	r2, [sp, #20]
    8e9c:	4313      	orrs	r3, r2
    8e9e:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8ea0:	9b04      	ldr	r3, [sp, #16]
    8ea2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    8ea6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    8ea8:	9b00      	ldr	r3, [sp, #0]
    8eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d001      	beq.n	8eb6 <Adc_Ip_Init+0xb0>
    8eb2:	2320      	movs	r3, #32
    8eb4:	e000      	b.n	8eb8 <Adc_Ip_Init+0xb2>
    8eb6:	2300      	movs	r3, #0
    8eb8:	9a05      	ldr	r2, [sp, #20]
    8eba:	4313      	orrs	r3, r2
    8ebc:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8ebe:	9b00      	ldr	r3, [sp, #0]
    8ec0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d001      	beq.n	8ecc <Adc_Ip_Init+0xc6>
    8ec8:	2310      	movs	r3, #16
    8eca:	e000      	b.n	8ece <Adc_Ip_Init+0xc8>
    8ecc:	2300      	movs	r3, #0
    8ece:	9a05      	ldr	r2, [sp, #20]
    8ed0:	4313      	orrs	r3, r2
    8ed2:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    8ed4:	9b00      	ldr	r3, [sp, #0]
    8ed6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    8eda:	2b00      	cmp	r3, #0
    8edc:	d001      	beq.n	8ee2 <Adc_Ip_Init+0xdc>
    8ede:	2308      	movs	r3, #8
    8ee0:	e000      	b.n	8ee4 <Adc_Ip_Init+0xde>
    8ee2:	2300      	movs	r3, #0
    8ee4:	9a05      	ldr	r2, [sp, #20]
    8ee6:	4313      	orrs	r3, r2
    8ee8:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    8eea:	9b00      	ldr	r3, [sp, #0]
    8eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8eee:	461a      	mov	r2, r3
    8ef0:	9b02      	ldr	r3, [sp, #8]
    8ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    8ef6:	9b00      	ldr	r3, [sp, #0]
    8ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    8efa:	461a      	mov	r2, r3
    8efc:	9b02      	ldr	r3, [sp, #8]
    8efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    8f02:	9a05      	ldr	r2, [sp, #20]
    8f04:	9904      	ldr	r1, [sp, #16]
    8f06:	9802      	ldr	r0, [sp, #8]
    8f08:	f7ff fdd2 	bl	8ab0 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    8f0c:	9b00      	ldr	r3, [sp, #0]
    8f0e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    8f10:	9b00      	ldr	r3, [sp, #0]
    8f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8f14:	461a      	mov	r2, r3
    8f16:	9802      	ldr	r0, [sp, #8]
    8f18:	f7ff fef6 	bl	8d08 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    8f1c:	9b00      	ldr	r3, [sp, #0]
    8f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8f22:	4619      	mov	r1, r3
    8f24:	9801      	ldr	r0, [sp, #4]
    8f26:	f000 f955 	bl	91d4 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    8f2a:	9b00      	ldr	r3, [sp, #0]
    8f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d01c      	beq.n	8f6c <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8f32:	2300      	movs	r3, #0
    8f34:	f88d 300f 	strb.w	r3, [sp, #15]
    8f38:	e011      	b.n	8f5e <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    8f3a:	9b00      	ldr	r3, [sp, #0]
    8f3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    8f3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8f42:	4613      	mov	r3, r2
    8f44:	005b      	lsls	r3, r3, #1
    8f46:	4413      	add	r3, r2
    8f48:	009b      	lsls	r3, r3, #2
    8f4a:	440b      	add	r3, r1
    8f4c:	4619      	mov	r1, r3
    8f4e:	9801      	ldr	r0, [sp, #4]
    8f50:	f000 f9c2 	bl	92d8 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8f54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f58:	3301      	adds	r3, #1
    8f5a:	f88d 300f 	strb.w	r3, [sp, #15]
    8f5e:	9b00      	ldr	r3, [sp, #0]
    8f60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8f64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8f68:	429a      	cmp	r2, r3
    8f6a:	d3e6      	bcc.n	8f3a <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    8f6c:	9b00      	ldr	r3, [sp, #0]
    8f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8f70:	490f      	ldr	r1, [pc, #60]	; (8fb0 <Adc_Ip_Init+0x1aa>)
    8f72:	9b01      	ldr	r3, [sp, #4]
    8f74:	204c      	movs	r0, #76	; 0x4c
    8f76:	fb00 f303 	mul.w	r3, r0, r3
    8f7a:	440b      	add	r3, r1
    8f7c:	3308      	adds	r3, #8
    8f7e:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8f80:	9b00      	ldr	r3, [sp, #0]
    8f82:	685a      	ldr	r2, [r3, #4]
    8f84:	490a      	ldr	r1, [pc, #40]	; (8fb0 <Adc_Ip_Init+0x1aa>)
    8f86:	9b01      	ldr	r3, [sp, #4]
    8f88:	204c      	movs	r0, #76	; 0x4c
    8f8a:	fb00 f303 	mul.w	r3, r0, r3
    8f8e:	440b      	add	r3, r1
    8f90:	3304      	adds	r3, #4
    8f92:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    8f94:	4a06      	ldr	r2, [pc, #24]	; (8fb0 <Adc_Ip_Init+0x1aa>)
    8f96:	9b01      	ldr	r3, [sp, #4]
    8f98:	214c      	movs	r1, #76	; 0x4c
    8f9a:	fb01 f303 	mul.w	r3, r1, r3
    8f9e:	4413      	add	r3, r2
    8fa0:	2201      	movs	r2, #1
    8fa2:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    8fa4:	bf00      	nop
    8fa6:	b007      	add	sp, #28
    8fa8:	f85d fb04 	ldr.w	pc, [sp], #4
    8fac:	00016470 	.word	0x00016470
    8fb0:	1fff8d54 	.word	0x1fff8d54

00008fb4 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    8fb4:	b500      	push	{lr}
    8fb6:	b0c3      	sub	sp, #268	; 0x10c
    8fb8:	ab42      	add	r3, sp, #264	; 0x108
    8fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8fbe:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8fc0:	2300      	movs	r3, #0
    8fc2:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    8fc4:	2303      	movs	r3, #3
    8fc6:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    8fc8:	2300      	movs	r3, #0
    8fca:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8fcc:	230c      	movs	r3, #12
    8fce:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    8fd2:	2300      	movs	r3, #0
    8fd4:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    8fd8:	2300      	movs	r3, #0
    8fda:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    8fdc:	2300      	movs	r3, #0
    8fde:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8fe0:	2300      	movs	r3, #0
    8fe2:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    8fe4:	2300      	movs	r3, #0
    8fe6:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    8fea:	2300      	movs	r3, #0
    8fec:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    8fee:	2300      	movs	r3, #0
    8ff0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    8ff4:	2300      	movs	r3, #0
    8ff6:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    8ffa:	2300      	movs	r3, #0
    8ffc:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    9000:	2300      	movs	r3, #0
    9002:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    9006:	2300      	movs	r3, #0
    9008:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    900c:	2300      	movs	r3, #0
    900e:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    9012:	2304      	movs	r3, #4
    9014:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    9018:	2300      	movs	r3, #0
    901a:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    901e:	2310      	movs	r3, #16
    9020:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    9024:	2300      	movs	r3, #0
    9026:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    902a:	e02b      	b.n	9084 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    902c:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9030:	ab42      	add	r3, sp, #264	; 0x108
    9032:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    9036:	4613      	mov	r3, r2
    9038:	005b      	lsls	r3, r3, #1
    903a:	4413      	add	r3, r2
    903c:	009b      	lsls	r3, r3, #2
    903e:	440b      	add	r3, r1
    9040:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9044:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    9046:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    904a:	ab42      	add	r3, sp, #264	; 0x108
    904c:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    9050:	4613      	mov	r3, r2
    9052:	005b      	lsls	r3, r3, #1
    9054:	4413      	add	r3, r2
    9056:	009b      	lsls	r3, r3, #2
    9058:	440b      	add	r3, r1
    905a:	3304      	adds	r3, #4
    905c:	221f      	movs	r2, #31
    905e:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    9060:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9064:	ab42      	add	r3, sp, #264	; 0x108
    9066:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    906a:	4613      	mov	r3, r2
    906c:	005b      	lsls	r3, r3, #1
    906e:	4413      	add	r3, r2
    9070:	009b      	lsls	r3, r3, #2
    9072:	440b      	add	r3, r1
    9074:	3308      	adds	r3, #8
    9076:	2200      	movs	r2, #0
    9078:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    907a:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    907e:	3301      	adds	r3, #1
    9080:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    9084:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    9088:	2b0f      	cmp	r3, #15
    908a:	d9cf      	bls.n	902c <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    908c:	ab02      	add	r3, sp, #8
    908e:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    9090:	2300      	movs	r3, #0
    9092:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    9094:	aa32      	add	r2, sp, #200	; 0xc8
    9096:	ab42      	add	r3, sp, #264	; 0x108
    9098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    909c:	4611      	mov	r1, r2
    909e:	6818      	ldr	r0, [r3, #0]
    90a0:	f7ff feb1 	bl	8e06 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    90a4:	4a07      	ldr	r2, [pc, #28]	; (90c4 <Adc_Ip_DeInit+0x110>)
    90a6:	ab42      	add	r3, sp, #264	; 0x108
    90a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    90ac:	681b      	ldr	r3, [r3, #0]
    90ae:	214c      	movs	r1, #76	; 0x4c
    90b0:	fb01 f303 	mul.w	r3, r1, r3
    90b4:	4413      	add	r3, r2
    90b6:	2200      	movs	r2, #0
    90b8:	701a      	strb	r2, [r3, #0]
}
    90ba:	bf00      	nop
    90bc:	b043      	add	sp, #268	; 0x10c
    90be:	f85d fb04 	ldr.w	pc, [sp], #4
    90c2:	bf00      	nop
    90c4:	1fff8d54 	.word	0x1fff8d54

000090c8 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    90c8:	b500      	push	{lr}
    90ca:	b087      	sub	sp, #28
    90cc:	9003      	str	r0, [sp, #12]
    90ce:	460b      	mov	r3, r1
    90d0:	9201      	str	r2, [sp, #4]
    90d2:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    90d6:	4a0a      	ldr	r2, [pc, #40]	; (9100 <Adc_Ip_SetAveraging+0x38>)
    90d8:	9b03      	ldr	r3, [sp, #12]
    90da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90de:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    90e0:	f006 ff5e 	bl	ffa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    90e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    90e8:	9a01      	ldr	r2, [sp, #4]
    90ea:	4619      	mov	r1, r3
    90ec:	9805      	ldr	r0, [sp, #20]
    90ee:	f7ff fd73 	bl	8bd8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    90f2:	f006 ff81 	bl	fff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    90f6:	bf00      	nop
    90f8:	b007      	add	sp, #28
    90fa:	f85d fb04 	ldr.w	pc, [sp], #4
    90fe:	bf00      	nop
    9100:	00016470 	.word	0x00016470

00009104 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    9104:	b500      	push	{lr}
    9106:	b085      	sub	sp, #20
    9108:	9001      	str	r0, [sp, #4]
    910a:	460b      	mov	r3, r1
    910c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9110:	4a09      	ldr	r2, [pc, #36]	; (9138 <Adc_Ip_SetSampleTime+0x34>)
    9112:	9b01      	ldr	r3, [sp, #4]
    9114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9118:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    911a:	f006 fbbb 	bl	f894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    911e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9122:	4619      	mov	r1, r3
    9124:	9803      	ldr	r0, [sp, #12]
    9126:	f7ff fd36 	bl	8b96 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    912a:	f006 fbdf 	bl	f8ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    912e:	bf00      	nop
    9130:	b005      	add	sp, #20
    9132:	f85d fb04 	ldr.w	pc, [sp], #4
    9136:	bf00      	nop
    9138:	00016470 	.word	0x00016470

0000913c <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    913c:	b500      	push	{lr}
    913e:	b085      	sub	sp, #20
    9140:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9142:	4a0a      	ldr	r2, [pc, #40]	; (916c <Adc_Ip_EnableDma+0x30>)
    9144:	9b01      	ldr	r3, [sp, #4]
    9146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    914a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    914c:	f006 fed6 	bl	fefc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    9150:	9b03      	ldr	r3, [sp, #12]
    9152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9156:	f043 0204 	orr.w	r2, r3, #4
    915a:	9b03      	ldr	r3, [sp, #12]
    915c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    9160:	f006 fef8 	bl	ff54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    9164:	bf00      	nop
    9166:	b005      	add	sp, #20
    9168:	f85d fb04 	ldr.w	pc, [sp], #4
    916c:	00016470 	.word	0x00016470

00009170 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    9170:	b500      	push	{lr}
    9172:	b085      	sub	sp, #20
    9174:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9176:	4a0a      	ldr	r2, [pc, #40]	; (91a0 <Adc_Ip_DisableDma+0x30>)
    9178:	9b01      	ldr	r3, [sp, #4]
    917a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    917e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    9180:	f006 fd74 	bl	fc6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    9184:	9b03      	ldr	r3, [sp, #12]
    9186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    918a:	f023 0204 	bic.w	r2, r3, #4
    918e:	9b03      	ldr	r3, [sp, #12]
    9190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    9194:	f006 fd96 	bl	fcc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    9198:	bf00      	nop
    919a:	b005      	add	sp, #20
    919c:	f85d fb04 	ldr.w	pc, [sp], #4
    91a0:	00016470 	.word	0x00016470

000091a4 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    91a4:	b500      	push	{lr}
    91a6:	b085      	sub	sp, #20
    91a8:	9001      	str	r0, [sp, #4]
    91aa:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    91ac:	4a08      	ldr	r2, [pc, #32]	; (91d0 <Adc_Ip_SetTriggerMode+0x2c>)
    91ae:	9b01      	ldr	r3, [sp, #4]
    91b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91b4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    91b6:	f006 fdab 	bl	fd10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    91ba:	9900      	ldr	r1, [sp, #0]
    91bc:	9803      	ldr	r0, [sp, #12]
    91be:	f7ff fd4e 	bl	8c5e <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    91c2:	f006 fdd1 	bl	fd68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    91c6:	bf00      	nop
    91c8:	b005      	add	sp, #20
    91ca:	f85d fb04 	ldr.w	pc, [sp], #4
    91ce:	bf00      	nop
    91d0:	00016470 	.word	0x00016470

000091d4 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    91d4:	b500      	push	{lr}
    91d6:	b085      	sub	sp, #20
    91d8:	9001      	str	r0, [sp, #4]
    91da:	460b      	mov	r3, r1
    91dc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    91e0:	4a11      	ldr	r2, [pc, #68]	; (9228 <Adc_Ip_SetContinuousMode+0x54>)
    91e2:	9b01      	ldr	r3, [sp, #4]
    91e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91e8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    91ea:	f006 ffcf 	bl	1018c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    91ee:	9b03      	ldr	r3, [sp, #12]
    91f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    91f4:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    91f6:	9b02      	ldr	r3, [sp, #8]
    91f8:	f023 0308 	bic.w	r3, r3, #8
    91fc:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    91fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9202:	2b00      	cmp	r3, #0
    9204:	d001      	beq.n	920a <Adc_Ip_SetContinuousMode+0x36>
    9206:	2308      	movs	r3, #8
    9208:	e000      	b.n	920c <Adc_Ip_SetContinuousMode+0x38>
    920a:	2300      	movs	r3, #0
    920c:	9a02      	ldr	r2, [sp, #8]
    920e:	4313      	orrs	r3, r2
    9210:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    9212:	9b03      	ldr	r3, [sp, #12]
    9214:	9a02      	ldr	r2, [sp, #8]
    9216:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    921a:	f006 ffe3 	bl	101e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    921e:	bf00      	nop
    9220:	b005      	add	sp, #20
    9222:	f85d fb04 	ldr.w	pc, [sp], #4
    9226:	bf00      	nop
    9228:	00016470 	.word	0x00016470

0000922c <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    922c:	b500      	push	{lr}
    922e:	b085      	sub	sp, #20
    9230:	9001      	str	r0, [sp, #4]
    9232:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9234:	4a0e      	ldr	r2, [pc, #56]	; (9270 <Adc_Ip_SetResolution+0x44>)
    9236:	9b01      	ldr	r3, [sp, #4]
    9238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    923c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    923e:	f005 fff5 	bl	f22c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    9242:	9b03      	ldr	r3, [sp, #12]
    9244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9246:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    9248:	9b02      	ldr	r3, [sp, #8]
    924a:	f023 030c 	bic.w	r3, r3, #12
    924e:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    9250:	9b00      	ldr	r3, [sp, #0]
    9252:	009b      	lsls	r3, r3, #2
    9254:	f003 030c 	and.w	r3, r3, #12
    9258:	9a02      	ldr	r2, [sp, #8]
    925a:	4313      	orrs	r3, r2
    925c:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    925e:	9b03      	ldr	r3, [sp, #12]
    9260:	9a02      	ldr	r2, [sp, #8]
    9262:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    9264:	f006 f80e 	bl	f284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    9268:	bf00      	nop
    926a:	b005      	add	sp, #20
    926c:	f85d fb04 	ldr.w	pc, [sp], #4
    9270:	00016470 	.word	0x00016470

00009274 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    9274:	b500      	push	{lr}
    9276:	b085      	sub	sp, #20
    9278:	9001      	str	r0, [sp, #4]
    927a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    927c:	4a15      	ldr	r2, [pc, #84]	; (92d4 <Adc_Ip_SetClockMode+0x60>)
    927e:	9b01      	ldr	r3, [sp, #4]
    9280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9284:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    9286:	f006 f96b 	bl	f560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    928a:	9b00      	ldr	r3, [sp, #0]
    928c:	6819      	ldr	r1, [r3, #0]
    928e:	9b00      	ldr	r3, [sp, #0]
    9290:	685b      	ldr	r3, [r3, #4]
    9292:	461a      	mov	r2, r3
    9294:	9803      	ldr	r0, [sp, #12]
    9296:	f7ff fc23 	bl	8ae0 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    929a:	f006 f98d 	bl	f5b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    929e:	f006 fa55 	bl	f74c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    92a2:	9b00      	ldr	r3, [sp, #0]
    92a4:	7a1b      	ldrb	r3, [r3, #8]
    92a6:	4619      	mov	r1, r3
    92a8:	9803      	ldr	r0, [sp, #12]
    92aa:	f7ff fc74 	bl	8b96 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    92ae:	f006 fa79 	bl	f7a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    92b2:	f006 fec7 	bl	10044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    92b6:	9b00      	ldr	r3, [sp, #0]
    92b8:	7a59      	ldrb	r1, [r3, #9]
    92ba:	9b00      	ldr	r3, [sp, #0]
    92bc:	68db      	ldr	r3, [r3, #12]
    92be:	461a      	mov	r2, r3
    92c0:	9803      	ldr	r0, [sp, #12]
    92c2:	f7ff fc89 	bl	8bd8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    92c6:	f006 fee9 	bl	1009c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    92ca:	bf00      	nop
    92cc:	b005      	add	sp, #20
    92ce:	f85d fb04 	ldr.w	pc, [sp], #4
    92d2:	bf00      	nop
    92d4:	00016470 	.word	0x00016470

000092d8 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    92d8:	b510      	push	{r4, lr}
    92da:	b084      	sub	sp, #16
    92dc:	9001      	str	r0, [sp, #4]
    92de:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    92e0:	4a13      	ldr	r2, [pc, #76]	; (9330 <Adc_Ip_ConfigChannel+0x58>)
    92e2:	9b01      	ldr	r3, [sp, #4]
    92e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e8:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    92ea:	9b00      	ldr	r3, [sp, #0]
    92ec:	685b      	ldr	r3, [r3, #4]
    92ee:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    92f0:	f006 fc6a 	bl	fbc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    92f4:	9b00      	ldr	r3, [sp, #0]
    92f6:	7819      	ldrb	r1, [r3, #0]
    92f8:	9b00      	ldr	r3, [sp, #0]
    92fa:	7a1b      	ldrb	r3, [r3, #8]
    92fc:	9a02      	ldr	r2, [sp, #8]
    92fe:	9803      	ldr	r0, [sp, #12]
    9300:	f7ff fcd5 	bl	8cae <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    9304:	f006 fc8c 	bl	fc20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    9308:	9b00      	ldr	r3, [sp, #0]
    930a:	781b      	ldrb	r3, [r3, #0]
    930c:	461c      	mov	r4, r3
    930e:	9b00      	ldr	r3, [sp, #0]
    9310:	6859      	ldr	r1, [r3, #4]
    9312:	4808      	ldr	r0, [pc, #32]	; (9334 <Adc_Ip_ConfigChannel+0x5c>)
    9314:	9a01      	ldr	r2, [sp, #4]
    9316:	4613      	mov	r3, r2
    9318:	00db      	lsls	r3, r3, #3
    931a:	4413      	add	r3, r2
    931c:	005b      	lsls	r3, r3, #1
    931e:	4413      	add	r3, r2
    9320:	4423      	add	r3, r4
    9322:	3302      	adds	r3, #2
    9324:	009b      	lsls	r3, r3, #2
    9326:	4403      	add	r3, r0
    9328:	6059      	str	r1, [r3, #4]
}
    932a:	bf00      	nop
    932c:	b004      	add	sp, #16
    932e:	bd10      	pop	{r4, pc}
    9330:	00016470 	.word	0x00016470
    9334:	1fff8d54 	.word	0x1fff8d54

00009338 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    9338:	b500      	push	{lr}
    933a:	b089      	sub	sp, #36	; 0x24
    933c:	9001      	str	r0, [sp, #4]
    933e:	460b      	mov	r3, r1
    9340:	f88d 3003 	strb.w	r3, [sp, #3]
    9344:	4613      	mov	r3, r2
    9346:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    934a:	4a24      	ldr	r2, [pc, #144]	; (93dc <Adc_Ip_SetDisabledChannel+0xa4>)
    934c:	9b01      	ldr	r3, [sp, #4]
    934e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9352:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9354:	2300      	movs	r3, #0
    9356:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    9358:	2100      	movs	r1, #0
    935a:	4821      	ldr	r0, [pc, #132]	; (93e0 <Adc_Ip_SetDisabledChannel+0xa8>)
    935c:	f7f9 f954 	bl	2608 <OsIf_MicrosToTicks>
    9360:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    9362:	2000      	movs	r0, #0
    9364:	f7f9 f904 	bl	2570 <OsIf_GetCounter>
    9368:	4603      	mov	r3, r0
    936a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    936c:	2300      	movs	r3, #0
    936e:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    9370:	f006 fae2 	bl	f938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    9374:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9378:	9b05      	ldr	r3, [sp, #20]
    937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    937e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9382:	f043 011f 	orr.w	r1, r3, #31
    9386:	9b05      	ldr	r3, [sp, #20]
    9388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    938c:	f006 fb00 	bl	f990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    9390:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9394:	2b00      	cmp	r3, #0
    9396:	d01c      	beq.n	93d2 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    9398:	e008      	b.n	93ac <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    939a:	ab03      	add	r3, sp, #12
    939c:	2100      	movs	r1, #0
    939e:	4618      	mov	r0, r3
    93a0:	f7f9 f8ff 	bl	25a2 <OsIf_GetElapsed>
    93a4:	4602      	mov	r2, r0
    93a6:	9b06      	ldr	r3, [sp, #24]
    93a8:	4413      	add	r3, r2
    93aa:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    93ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    93b0:	9b05      	ldr	r3, [sp, #20]
    93b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    93b6:	f003 031f 	and.w	r3, r3, #31
    93ba:	2b1f      	cmp	r3, #31
    93bc:	d003      	beq.n	93c6 <Adc_Ip_SetDisabledChannel+0x8e>
    93be:	9a06      	ldr	r2, [sp, #24]
    93c0:	9b04      	ldr	r3, [sp, #16]
    93c2:	429a      	cmp	r2, r3
    93c4:	d3e9      	bcc.n	939a <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    93c6:	9a06      	ldr	r2, [sp, #24]
    93c8:	9b04      	ldr	r3, [sp, #16]
    93ca:	429a      	cmp	r2, r3
    93cc:	d301      	bcc.n	93d2 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    93ce:	2302      	movs	r3, #2
    93d0:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    93d2:	9b07      	ldr	r3, [sp, #28]
}
    93d4:	4618      	mov	r0, r3
    93d6:	b009      	add	sp, #36	; 0x24
    93d8:	f85d fb04 	ldr.w	pc, [sp], #4
    93dc:	00016470 	.word	0x00016470
    93e0:	000186a0 	.word	0x000186a0

000093e4 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    93e4:	b500      	push	{lr}
    93e6:	b087      	sub	sp, #28
    93e8:	9003      	str	r0, [sp, #12]
    93ea:	9102      	str	r1, [sp, #8]
    93ec:	4613      	mov	r3, r2
    93ee:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    93f2:	4a0a      	ldr	r2, [pc, #40]	; (941c <Adc_Ip_StartConversion+0x38>)
    93f4:	9b03      	ldr	r3, [sp, #12]
    93f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93fa:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    93fc:	f006 faee 	bl	f9dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    9400:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9404:	9a02      	ldr	r2, [sp, #8]
    9406:	2100      	movs	r1, #0
    9408:	9805      	ldr	r0, [sp, #20]
    940a:	f7ff fc50 	bl	8cae <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    940e:	f006 fb11 	bl	fa34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    9412:	bf00      	nop
    9414:	b007      	add	sp, #28
    9416:	f85d fb04 	ldr.w	pc, [sp], #4
    941a:	bf00      	nop
    941c:	00016470 	.word	0x00016470

00009420 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    9420:	b084      	sub	sp, #16
    9422:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9424:	4a0b      	ldr	r2, [pc, #44]	; (9454 <Adc_Ip_GetConvActiveFlag+0x34>)
    9426:	9b01      	ldr	r3, [sp, #4]
    9428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942c:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    942e:	9b03      	ldr	r3, [sp, #12]
    9430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9434:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    9436:	9b02      	ldr	r3, [sp, #8]
    9438:	09db      	lsrs	r3, r3, #7
    943a:	f003 0301 	and.w	r3, r3, #1
    943e:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    9440:	9b02      	ldr	r3, [sp, #8]
    9442:	2b00      	cmp	r3, #0
    9444:	bf14      	ite	ne
    9446:	2301      	movne	r3, #1
    9448:	2300      	moveq	r3, #0
    944a:	b2db      	uxtb	r3, r3
}
    944c:	4618      	mov	r0, r3
    944e:	b004      	add	sp, #16
    9450:	4770      	bx	lr
    9452:	bf00      	nop
    9454:	00016470 	.word	0x00016470

00009458 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    9458:	b500      	push	{lr}
    945a:	b085      	sub	sp, #20
    945c:	9001      	str	r0, [sp, #4]
    945e:	460b      	mov	r3, r1
    9460:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9464:	4a08      	ldr	r2, [pc, #32]	; (9488 <Adc_Ip_GetChanInterrupt+0x30>)
    9466:	9b01      	ldr	r3, [sp, #4]
    9468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    946c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9474:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    9476:	9803      	ldr	r0, [sp, #12]
    9478:	f7ff fc5e 	bl	8d38 <Adc_HwAcc_GetAIEN>
    947c:	4603      	mov	r3, r0
}
    947e:	4618      	mov	r0, r3
    9480:	b005      	add	sp, #20
    9482:	f85d fb04 	ldr.w	pc, [sp], #4
    9486:	bf00      	nop
    9488:	00016470 	.word	0x00016470

0000948c <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    948c:	b500      	push	{lr}
    948e:	b085      	sub	sp, #20
    9490:	9001      	str	r0, [sp, #4]
    9492:	460b      	mov	r3, r1
    9494:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9498:	4a08      	ldr	r2, [pc, #32]	; (94bc <Adc_Ip_GetConvCompleteFlag+0x30>)
    949a:	9b01      	ldr	r3, [sp, #4]
    949c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    94a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    94a8:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    94aa:	9803      	ldr	r0, [sp, #12]
    94ac:	f7ff fc52 	bl	8d54 <Adc_HwAcc_GetCOCO>
    94b0:	4603      	mov	r3, r0
}
    94b2:	4618      	mov	r0, r3
    94b4:	b005      	add	sp, #20
    94b6:	f85d fb04 	ldr.w	pc, [sp], #4
    94ba:	bf00      	nop
    94bc:	00016470 	.word	0x00016470

000094c0 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    94c0:	b500      	push	{lr}
    94c2:	b085      	sub	sp, #20
    94c4:	9001      	str	r0, [sp, #4]
    94c6:	460b      	mov	r3, r1
    94c8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    94cc:	4a07      	ldr	r2, [pc, #28]	; (94ec <Adc_Ip_GetConvData+0x2c>)
    94ce:	9b01      	ldr	r3, [sp, #4]
    94d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94d4:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    94d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    94da:	4619      	mov	r1, r3
    94dc:	9803      	ldr	r0, [sp, #12]
    94de:	f7ff fc47 	bl	8d70 <Adc_HwAcc_GetData>
    94e2:	4603      	mov	r3, r0
}
    94e4:	4618      	mov	r0, r3
    94e6:	b005      	add	sp, #20
    94e8:	f85d fb04 	ldr.w	pc, [sp], #4
    94ec:	00016470 	.word	0x00016470

000094f0 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    94f0:	b500      	push	{lr}
    94f2:	b093      	sub	sp, #76	; 0x4c
    94f4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    94f6:	4a59      	ldr	r2, [pc, #356]	; (965c <Adc_Ip_DoCalibration+0x16c>)
    94f8:	9b01      	ldr	r3, [sp, #4]
    94fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94fe:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9500:	2300      	movs	r3, #0
    9502:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    9504:	2100      	movs	r1, #0
    9506:	4856      	ldr	r0, [pc, #344]	; (9660 <Adc_Ip_DoCalibration+0x170>)
    9508:	f7f9 f87e 	bl	2608 <OsIf_MicrosToTicks>
    950c:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    950e:	2000      	movs	r0, #0
    9510:	f7f9 f82e 	bl	2570 <OsIf_GetCounter>
    9514:	4603      	mov	r3, r0
    9516:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    9518:	2300      	movs	r3, #0
    951a:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    951c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    951e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9522:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    9524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9526:	089b      	lsrs	r3, r3, #2
    9528:	f003 0301 	and.w	r3, r3, #1
    952c:	2b00      	cmp	r3, #0
    952e:	bf14      	ite	ne
    9530:	2301      	movne	r3, #1
    9532:	2300      	moveq	r3, #0
    9534:	b2db      	uxtb	r3, r3
    9536:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    953a:	980d      	ldr	r0, [sp, #52]	; 0x34
    953c:	f7ff fb71 	bl	8c22 <Adc_HwAcc_GetAverageSelect>
    9540:	4603      	mov	r3, r0
    9542:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    9544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9548:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    954a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    954c:	b2db      	uxtb	r3, r3
    954e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    9552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9558:	4618      	mov	r0, r3
    955a:	f7ff fb99 	bl	8c90 <Adc_HwAcc_GetTriggerMode>
    955e:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    9560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9564:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    9566:	980d      	ldr	r0, [sp, #52]	; 0x34
    9568:	f7ff fad8 	bl	8b1c <Adc_HwAcc_GetClockDivide>
    956c:	4603      	mov	r3, r0
    956e:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    9570:	980d      	ldr	r0, [sp, #52]	; 0x34
    9572:	f7ff faf2 	bl	8b5a <Adc_HwAcc_GetInputClock>
    9576:	4603      	mov	r3, r0
    9578:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    957a:	2301      	movs	r3, #1
    957c:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    9580:	2303      	movs	r3, #3
    9582:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    9584:	230c      	movs	r3, #12
    9586:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    958a:	4a36      	ldr	r2, [pc, #216]	; (9664 <Adc_Ip_DoCalibration+0x174>)
    958c:	9b01      	ldr	r3, [sp, #4]
    958e:	214c      	movs	r1, #76	; 0x4c
    9590:	fb01 f303 	mul.w	r3, r1, r3
    9594:	4413      	add	r3, r2
    9596:	3304      	adds	r3, #4
    9598:	681b      	ldr	r3, [r3, #0]
    959a:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    959c:	9b08      	ldr	r3, [sp, #32]
    959e:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    95a0:	ab03      	add	r3, sp, #12
    95a2:	2200      	movs	r2, #0
    95a4:	4619      	mov	r1, r3
    95a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    95a8:	f7ff fbfa 	bl	8da0 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    95ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95ae:	2200      	movs	r2, #0
    95b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    95b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95b6:	2200      	movs	r2, #0
    95b8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    95bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95be:	2200      	movs	r2, #0
    95c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    95c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95c6:	2200      	movs	r2, #0
    95c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    95cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95ce:	2200      	movs	r2, #0
    95d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    95d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95d6:	2200      	movs	r2, #0
    95d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    95dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95de:	2200      	movs	r2, #0
    95e0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    95e4:	f006 fd80 	bl	100e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    95e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    95ee:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    95f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    95f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    95f6:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    95f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    95fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    95fe:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    9600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9604:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    9608:	f006 fd9a 	bl	10140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    960c:	e008      	b.n	9620 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    960e:	ab0b      	add	r3, sp, #44	; 0x2c
    9610:	2100      	movs	r1, #0
    9612:	4618      	mov	r0, r3
    9614:	f7f8 ffc5 	bl	25a2 <OsIf_GetElapsed>
    9618:	4602      	mov	r2, r0
    961a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    961c:	4413      	add	r3, r2
    961e:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9626:	f003 0380 	and.w	r3, r3, #128	; 0x80
    962a:	2b00      	cmp	r3, #0
    962c:	d003      	beq.n	9636 <Adc_Ip_DoCalibration+0x146>
    962e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9632:	429a      	cmp	r2, r3
    9634:	d3eb      	bcc.n	960e <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    9636:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    963a:	429a      	cmp	r2, r3
    963c:	d301      	bcc.n	9642 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    963e:	2302      	movs	r3, #2
    9640:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    9642:	ab07      	add	r3, sp, #28
    9644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9646:	4619      	mov	r1, r3
    9648:	980f      	ldr	r0, [sp, #60]	; 0x3c
    964a:	f7ff fba9 	bl	8da0 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    964e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9650:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    9652:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    9654:	4618      	mov	r0, r3
    9656:	b013      	add	sp, #76	; 0x4c
    9658:	f85d fb04 	ldr.w	pc, [sp], #4
    965c:	00016470 	.word	0x00016470
    9660:	000186a0 	.word	0x000186a0
    9664:	1fff8d54 	.word	0x1fff8d54

00009668 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    9668:	b500      	push	{lr}
    966a:	b089      	sub	sp, #36	; 0x24
    966c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    966e:	4a1e      	ldr	r2, [pc, #120]	; (96e8 <Adc_Ip_ClearLatchedTriggers+0x80>)
    9670:	9b01      	ldr	r3, [sp, #4]
    9672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9676:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9678:	2300      	movs	r3, #0
    967a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    967c:	2100      	movs	r1, #0
    967e:	481b      	ldr	r0, [pc, #108]	; (96ec <Adc_Ip_ClearLatchedTriggers+0x84>)
    9680:	f7f8 ffc2 	bl	2608 <OsIf_MicrosToTicks>
    9684:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    9686:	2000      	movs	r0, #0
    9688:	f7f8 ff72 	bl	2570 <OsIf_GetCounter>
    968c:	4603      	mov	r3, r0
    968e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    9690:	2300      	movs	r3, #0
    9692:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    9694:	f005 ffb6 	bl	f604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    9698:	9b05      	ldr	r3, [sp, #20]
    969a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    969c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    96a0:	9b05      	ldr	r3, [sp, #20]
    96a2:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    96a4:	f005 ffda 	bl	f65c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    96a8:	e008      	b.n	96bc <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    96aa:	ab03      	add	r3, sp, #12
    96ac:	2100      	movs	r1, #0
    96ae:	4618      	mov	r0, r3
    96b0:	f7f8 ff77 	bl	25a2 <OsIf_GetElapsed>
    96b4:	4602      	mov	r2, r0
    96b6:	9b06      	ldr	r3, [sp, #24]
    96b8:	4413      	add	r3, r2
    96ba:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    96bc:	9b05      	ldr	r3, [sp, #20]
    96be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    96c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    96c6:	2b00      	cmp	r3, #0
    96c8:	d003      	beq.n	96d2 <Adc_Ip_ClearLatchedTriggers+0x6a>
    96ca:	9a06      	ldr	r2, [sp, #24]
    96cc:	9b04      	ldr	r3, [sp, #16]
    96ce:	429a      	cmp	r2, r3
    96d0:	d3eb      	bcc.n	96aa <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    96d2:	9a06      	ldr	r2, [sp, #24]
    96d4:	9b04      	ldr	r3, [sp, #16]
    96d6:	429a      	cmp	r2, r3
    96d8:	d301      	bcc.n	96de <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    96da:	2302      	movs	r3, #2
    96dc:	9307      	str	r3, [sp, #28]
    }

    return Status;
    96de:	9b07      	ldr	r3, [sp, #28]
}
    96e0:	4618      	mov	r0, r3
    96e2:	b009      	add	sp, #36	; 0x24
    96e4:	f85d fb04 	ldr.w	pc, [sp], #4
    96e8:	00016470 	.word	0x00016470
    96ec:	000186a0 	.word	0x000186a0

000096f0 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    96f0:	b500      	push	{lr}
    96f2:	b085      	sub	sp, #20
    96f4:	9001      	str	r0, [sp, #4]
    96f6:	460b      	mov	r3, r1
    96f8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    96fc:	4a0c      	ldr	r2, [pc, #48]	; (9730 <Adc_Ip_EnableChannelNotification+0x40>)
    96fe:	9b01      	ldr	r3, [sp, #4]
    9700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9704:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    9706:	f006 f9bb 	bl	fa80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    970a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    970e:	9b03      	ldr	r3, [sp, #12]
    9710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9714:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9718:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    971c:	9b03      	ldr	r3, [sp, #12]
    971e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    9722:	f006 f9d9 	bl	fad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    9726:	bf00      	nop
    9728:	b005      	add	sp, #20
    972a:	f85d fb04 	ldr.w	pc, [sp], #4
    972e:	bf00      	nop
    9730:	00016470 	.word	0x00016470

00009734 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    9734:	b500      	push	{lr}
    9736:	b085      	sub	sp, #20
    9738:	9001      	str	r0, [sp, #4]
    973a:	460b      	mov	r3, r1
    973c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9740:	4a0c      	ldr	r2, [pc, #48]	; (9774 <Adc_Ip_DisableChannelNotification+0x40>)
    9742:	9b01      	ldr	r3, [sp, #4]
    9744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9748:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    974a:	f006 f9eb 	bl	fb24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    974e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9752:	9b03      	ldr	r3, [sp, #12]
    9754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9758:	f89d 2003 	ldrb.w	r2, [sp, #3]
    975c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    9760:	9b03      	ldr	r3, [sp, #12]
    9762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    9766:	f006 fa09 	bl	fb7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    976a:	bf00      	nop
    976c:	b005      	add	sp, #20
    976e:	f85d fb04 	ldr.w	pc, [sp], #4
    9772:	bf00      	nop
    9774:	00016470 	.word	0x00016470

00009778 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    9778:	b500      	push	{lr}
    977a:	b085      	sub	sp, #20
    977c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    977e:	4a0a      	ldr	r2, [pc, #40]	; (97a8 <Adc_Ip_ClearTrigErrReg+0x30>)
    9780:	9b01      	ldr	r3, [sp, #4]
    9782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9786:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    9788:	f006 fb66 	bl	fe58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    978c:	9b03      	ldr	r3, [sp, #12]
    978e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9792:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    9796:	9b03      	ldr	r3, [sp, #12]
    9798:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    979c:	f006 fb88 	bl	feb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    97a0:	bf00      	nop
    97a2:	b005      	add	sp, #20
    97a4:	f85d fb04 	ldr.w	pc, [sp], #4
    97a8:	00016470 	.word	0x00016470

000097ac <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    97ac:	b084      	sub	sp, #16
    97ae:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    97b0:	4a06      	ldr	r2, [pc, #24]	; (97cc <Adc_Ip_GetTrigErrReg+0x20>)
    97b2:	9b01      	ldr	r3, [sp, #4]
    97b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b8:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    97ba:	9b03      	ldr	r3, [sp, #12]
    97bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    97c0:	0e1b      	lsrs	r3, r3, #24
    97c2:	f003 030f 	and.w	r3, r3, #15
}
    97c6:	4618      	mov	r0, r3
    97c8:	b004      	add	sp, #16
    97ca:	4770      	bx	lr
    97cc:	00016470 	.word	0x00016470

000097d0 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    97d0:	b082      	sub	sp, #8
    97d2:	9001      	str	r0, [sp, #4]
    97d4:	460b      	mov	r3, r1
    97d6:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    97da:	4a06      	ldr	r2, [pc, #24]	; (97f4 <Adc_Ip_GetDataAddress+0x24>)
    97dc:	9b01      	ldr	r3, [sp, #4]
    97de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    97e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    97e6:	3312      	adds	r3, #18
    97e8:	009b      	lsls	r3, r3, #2
    97ea:	4413      	add	r3, r2
}
    97ec:	4618      	mov	r0, r3
    97ee:	b002      	add	sp, #8
    97f0:	4770      	bx	lr
    97f2:	bf00      	nop
    97f4:	00016470 	.word	0x00016470

000097f8 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    97f8:	b088      	sub	sp, #32
    97fa:	9003      	str	r0, [sp, #12]
    97fc:	9102      	str	r1, [sp, #8]
    97fe:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9800:	4a25      	ldr	r2, [pc, #148]	; (9898 <Adc_Ip_GetChanData+0xa0>)
    9802:	9b03      	ldr	r3, [sp, #12]
    9804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9808:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    980a:	2300      	movs	r3, #0
    980c:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    980e:	2300      	movs	r3, #0
    9810:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    9814:	2300      	movs	r3, #0
    9816:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    981a:	2300      	movs	r3, #0
    981c:	f88d 3019 	strb.w	r3, [sp, #25]
    9820:	e019      	b.n	9856 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    9822:	f89d 1019 	ldrb.w	r1, [sp, #25]
    9826:	481d      	ldr	r0, [pc, #116]	; (989c <Adc_Ip_GetChanData+0xa4>)
    9828:	9a03      	ldr	r2, [sp, #12]
    982a:	4613      	mov	r3, r2
    982c:	00db      	lsls	r3, r3, #3
    982e:	4413      	add	r3, r2
    9830:	005b      	lsls	r3, r3, #1
    9832:	4413      	add	r3, r2
    9834:	440b      	add	r3, r1
    9836:	3302      	adds	r3, #2
    9838:	009b      	lsls	r3, r3, #2
    983a:	4403      	add	r3, r0
    983c:	685b      	ldr	r3, [r3, #4]
    983e:	9a02      	ldr	r2, [sp, #8]
    9840:	429a      	cmp	r2, r3
    9842:	d103      	bne.n	984c <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    9844:	2301      	movs	r3, #1
    9846:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    984a:	e008      	b.n	985e <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    984c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9850:	3301      	adds	r3, #1
    9852:	f88d 3019 	strb.w	r3, [sp, #25]
    9856:	f89d 3019 	ldrb.w	r3, [sp, #25]
    985a:	2b0f      	cmp	r3, #15
    985c:	d9e1      	bls.n	9822 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    985e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9862:	2b00      	cmp	r3, #0
    9864:	d00e      	beq.n	9884 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    9866:	f89d 2019 	ldrb.w	r2, [sp, #25]
    986a:	9b05      	ldr	r3, [sp, #20]
    986c:	3212      	adds	r2, #18
    986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9872:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    9876:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    987a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    987e:	f8ad 301a 	strh.w	r3, [sp, #26]
    9882:	e001      	b.n	9888 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    9884:	2301      	movs	r3, #1
    9886:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    9888:	9b01      	ldr	r3, [sp, #4]
    988a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    988e:	801a      	strh	r2, [r3, #0]

    return Status;
    9890:	9b07      	ldr	r3, [sp, #28]
}
    9892:	4618      	mov	r0, r3
    9894:	b008      	add	sp, #32
    9896:	4770      	bx	lr
    9898:	00016470 	.word	0x00016470
    989c:	1fff8d54 	.word	0x1fff8d54

000098a0 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    98a0:	b500      	push	{lr}
    98a2:	b085      	sub	sp, #20
    98a4:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    98a6:	2300      	movs	r3, #0
    98a8:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    98ac:	2300      	movs	r3, #0
    98ae:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    98b2:	4a32      	ldr	r2, [pc, #200]	; (997c <Adc_Ip_IRQHandler+0xdc>)
    98b4:	9b01      	ldr	r3, [sp, #4]
    98b6:	214c      	movs	r1, #76	; 0x4c
    98b8:	fb01 f303 	mul.w	r3, r1, r3
    98bc:	4413      	add	r3, r2
    98be:	781b      	ldrb	r3, [r3, #0]
    98c0:	2b00      	cmp	r3, #0
    98c2:	d040      	beq.n	9946 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    98c4:	4a2d      	ldr	r2, [pc, #180]	; (997c <Adc_Ip_IRQHandler+0xdc>)
    98c6:	9b01      	ldr	r3, [sp, #4]
    98c8:	214c      	movs	r1, #76	; 0x4c
    98ca:	fb01 f303 	mul.w	r3, r1, r3
    98ce:	4413      	add	r3, r2
    98d0:	3308      	adds	r3, #8
    98d2:	681b      	ldr	r3, [r3, #0]
    98d4:	2b00      	cmp	r3, #0
    98d6:	d04d      	beq.n	9974 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    98d8:	2300      	movs	r3, #0
    98da:	f88d 300f 	strb.w	r3, [sp, #15]
    98de:	e02d      	b.n	993c <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    98e0:	4a27      	ldr	r2, [pc, #156]	; (9980 <Adc_Ip_IRQHandler+0xe0>)
    98e2:	9b01      	ldr	r3, [sp, #4]
    98e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    98ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    98f0:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    98f2:	9802      	ldr	r0, [sp, #8]
    98f4:	f7ff fa20 	bl	8d38 <Adc_HwAcc_GetAIEN>
    98f8:	4603      	mov	r3, r0
    98fa:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    98fe:	9802      	ldr	r0, [sp, #8]
    9900:	f7ff fa28 	bl	8d54 <Adc_HwAcc_GetCOCO>
    9904:	4603      	mov	r3, r0
    9906:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    990a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    990e:	2b00      	cmp	r3, #0
    9910:	d00f      	beq.n	9932 <Adc_Ip_IRQHandler+0x92>
    9912:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9916:	2b00      	cmp	r3, #0
    9918:	d00b      	beq.n	9932 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    991a:	4a18      	ldr	r2, [pc, #96]	; (997c <Adc_Ip_IRQHandler+0xdc>)
    991c:	9b01      	ldr	r3, [sp, #4]
    991e:	214c      	movs	r1, #76	; 0x4c
    9920:	fb01 f303 	mul.w	r3, r1, r3
    9924:	4413      	add	r3, r2
    9926:	3308      	adds	r3, #8
    9928:	681b      	ldr	r3, [r3, #0]
    992a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    992e:	4610      	mov	r0, r2
    9930:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9932:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9936:	3301      	adds	r3, #1
    9938:	f88d 300f 	strb.w	r3, [sp, #15]
    993c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9940:	2b0f      	cmp	r3, #15
    9942:	d9cd      	bls.n	98e0 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    9944:	e016      	b.n	9974 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9946:	2300      	movs	r3, #0
    9948:	f88d 300f 	strb.w	r3, [sp, #15]
    994c:	e00e      	b.n	996c <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    994e:	4a0c      	ldr	r2, [pc, #48]	; (9980 <Adc_Ip_IRQHandler+0xe0>)
    9950:	9b01      	ldr	r3, [sp, #4]
    9952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9956:	f89d 200f 	ldrb.w	r2, [sp, #15]
    995a:	4611      	mov	r1, r2
    995c:	4618      	mov	r0, r3
    995e:	f7ff fa07 	bl	8d70 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9962:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9966:	3301      	adds	r3, #1
    9968:	f88d 300f 	strb.w	r3, [sp, #15]
    996c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9970:	2b0f      	cmp	r3, #15
    9972:	d9ec      	bls.n	994e <Adc_Ip_IRQHandler+0xae>
}
    9974:	bf00      	nop
    9976:	b005      	add	sp, #20
    9978:	f85d fb04 	ldr.w	pc, [sp], #4
    997c:	1fff8d54 	.word	0x1fff8d54
    9980:	00016470 	.word	0x00016470

00009984 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    9984:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    9986:	2000      	movs	r0, #0
    9988:	f7ff ff8a 	bl	98a0 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    998c:	f3bf 8f4f 	dsb	sy
}
    9990:	bf00      	nop
    9992:	bd08      	pop	{r3, pc}

00009994 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    9994:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    9996:	2001      	movs	r0, #1
    9998:	f7ff ff82 	bl	98a0 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    999c:	f3bf 8f4f 	dsb	sy
}
    99a0:	bf00      	nop
    99a2:	bd08      	pop	{r3, pc}

000099a4 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    99a4:	b510      	push	{r4, lr}
    99a6:	b084      	sub	sp, #16
    99a8:	4603      	mov	r3, r0
    99aa:	460a      	mov	r2, r1
    99ac:	f88d 3007 	strb.w	r3, [sp, #7]
    99b0:	4613      	mov	r3, r2
    99b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    99b6:	2300      	movs	r3, #0
    99b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    99bc:	2300      	movs	r3, #0
    99be:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    99c2:	f005 fa47 	bl	ee54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    99c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99ca:	4a24      	ldr	r2, [pc, #144]	; (9a5c <Adc_Ipw_RemoveFromQueue+0xb8>)
    99cc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    99d0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    99d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    99d8:	2b01      	cmp	r3, #1
    99da:	d806      	bhi.n	99ea <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    99dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99e0:	4a1e      	ldr	r2, [pc, #120]	; (9a5c <Adc_Ipw_RemoveFromQueue+0xb8>)
    99e2:	2100      	movs	r1, #0
    99e4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    99e8:	e032      	b.n	9a50 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    99ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    99ee:	3301      	adds	r3, #1
    99f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    99f4:	e01b      	b.n	9a2e <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    99f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    99fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    99fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9a02:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9a06:	3a01      	subs	r2, #1
    9a08:	4c14      	ldr	r4, [pc, #80]	; (9a5c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9a0a:	0080      	lsls	r0, r0, #2
    9a0c:	4403      	add	r3, r0
    9a0e:	005b      	lsls	r3, r3, #1
    9a10:	4423      	add	r3, r4
    9a12:	885b      	ldrh	r3, [r3, #2]
    9a14:	b29c      	uxth	r4, r3
    9a16:	4811      	ldr	r0, [pc, #68]	; (9a5c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9a18:	008b      	lsls	r3, r1, #2
    9a1a:	4413      	add	r3, r2
    9a1c:	005b      	lsls	r3, r3, #1
    9a1e:	4403      	add	r3, r0
    9a20:	4622      	mov	r2, r4
    9a22:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9a24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9a28:	3301      	adds	r3, #1
    9a2a:	f8ad 300e 	strh.w	r3, [sp, #14]
    9a2e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9a32:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9a36:	429a      	cmp	r2, r3
    9a38:	d3dd      	bcc.n	99f6 <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    9a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a3e:	4a07      	ldr	r2, [pc, #28]	; (9a5c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9a40:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    9a44:	b292      	uxth	r2, r2
    9a46:	3a01      	subs	r2, #1
    9a48:	b291      	uxth	r1, r2
    9a4a:	4a04      	ldr	r2, [pc, #16]	; (9a5c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9a4c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    9a50:	f005 fa2c 	bl	eeac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    9a54:	bf00      	nop
    9a56:	b004      	add	sp, #16
    9a58:	bd10      	pop	{r4, pc}
    9a5a:	bf00      	nop
    9a5c:	1fff8d44 	.word	0x1fff8d44

00009a60 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    9a60:	b500      	push	{lr}
    9a62:	b087      	sub	sp, #28
    9a64:	9003      	str	r0, [sp, #12]
    9a66:	9102      	str	r1, [sp, #8]
    9a68:	9201      	str	r2, [sp, #4]
    9a6a:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9a6e:	2300      	movs	r3, #0
    9a70:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9a74:	9b03      	ldr	r3, [sp, #12]
    9a76:	789b      	ldrb	r3, [r3, #2]
    9a78:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9a7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9a80:	4a29      	ldr	r2, [pc, #164]	; (9b28 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a86:	681a      	ldr	r2, [r3, #0]
    9a88:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9a8c:	4413      	add	r3, r2
    9a8e:	7c1b      	ldrb	r3, [r3, #16]
    9a90:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    9a94:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9a98:	4a23      	ldr	r2, [pc, #140]	; (9b28 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a9e:	681b      	ldr	r3, [r3, #0]
    9aa0:	f89d 2015 	ldrb.w	r2, [sp, #21]
    9aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9aa8:	695b      	ldr	r3, [r3, #20]
    9aaa:	4618      	mov	r0, r3
    9aac:	f000 fbce 	bl	a24c <Adc_Ipw_CalculateNumsBitShift>
    9ab0:	4603      	mov	r3, r0
    9ab2:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9ab6:	9b03      	ldr	r3, [sp, #12]
    9ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9abc:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9ac0:	2300      	movs	r3, #0
    9ac2:	f88d 3017 	strb.w	r3, [sp, #23]
    9ac6:	e022      	b.n	9b0e <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    9ac8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9acc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9ad0:	4611      	mov	r1, r2
    9ad2:	4618      	mov	r0, r3
    9ad4:	f7ff fcf4 	bl	94c0 <Adc_Ip_GetConvData>
    9ad8:	4603      	mov	r3, r0
    9ada:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    9ade:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9ae2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9ae6:	fa02 f303 	lsl.w	r3, r2, r3
    9aea:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    9aee:	9b01      	ldr	r3, [sp, #4]
    9af0:	2201      	movs	r2, #1
    9af2:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    9af4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9af8:	005b      	lsls	r3, r3, #1
    9afa:	9a02      	ldr	r2, [sp, #8]
    9afc:	4413      	add	r3, r2
    9afe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9b02:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9b04:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b08:	3301      	adds	r3, #1
    9b0a:	f88d 3017 	strb.w	r3, [sp, #23]
    9b0e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9b12:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9b16:	429a      	cmp	r2, r3
    9b18:	d3d6      	bcc.n	9ac8 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    9b1a:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    9b1e:	4618      	mov	r0, r3
    9b20:	b007      	add	sp, #28
    9b22:	f85d fb04 	ldr.w	pc, [sp], #4
    9b26:	bf00      	nop
    9b28:	1fff8d18 	.word	0x1fff8d18

00009b2c <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    9b2c:	b500      	push	{lr}
    9b2e:	b087      	sub	sp, #28
    9b30:	9003      	str	r0, [sp, #12]
    9b32:	9102      	str	r1, [sp, #8]
    9b34:	9201      	str	r2, [sp, #4]
    9b36:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    9b3a:	2301      	movs	r3, #1
    9b3c:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9b40:	2300      	movs	r3, #0
    9b42:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9b46:	9b03      	ldr	r3, [sp, #12]
    9b48:	789b      	ldrb	r3, [r3, #2]
    9b4a:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9b4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9b52:	4a19      	ldr	r2, [pc, #100]	; (9bb8 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    9b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b58:	681a      	ldr	r2, [r3, #0]
    9b5a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9b5e:	4413      	add	r3, r2
    9b60:	7c1b      	ldrb	r3, [r3, #16]
    9b62:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    9b66:	9b03      	ldr	r3, [sp, #12]
    9b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9b6c:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9b70:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9b74:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9b78:	2100      	movs	r1, #0
    9b7a:	4618      	mov	r0, r3
    9b7c:	f000 fe2a 	bl	a7d4 <Adc_Ipw_CheckValidConversion>
    9b80:	4603      	mov	r3, r0
    9b82:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    9b86:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d00a      	beq.n	9ba4 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9b8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9b92:	9a01      	ldr	r2, [sp, #4]
    9b94:	9902      	ldr	r1, [sp, #8]
    9b96:	9803      	ldr	r0, [sp, #12]
    9b98:	f7ff ff62 	bl	9a60 <Adc_Ipw_ReadGroupConvData>
    9b9c:	4603      	mov	r3, r0
    9b9e:	f88d 3017 	strb.w	r3, [sp, #23]
    9ba2:	e002      	b.n	9baa <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9ba4:	2301      	movs	r3, #1
    9ba6:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    9baa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9bae:	4618      	mov	r0, r3
    9bb0:	b007      	add	sp, #28
    9bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    9bb6:	bf00      	nop
    9bb8:	1fff8d18 	.word	0x1fff8d18

00009bbc <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    9bbc:	b088      	sub	sp, #32
    9bbe:	4603      	mov	r3, r0
    9bc0:	9100      	str	r1, [sp, #0]
    9bc2:	f8ad 3006 	strh.w	r3, [sp, #6]
    9bc6:	4613      	mov	r3, r2
    9bc8:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9bcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bd0:	4a3a      	ldr	r2, [pc, #232]	; (9cbc <Adc_Ipw_WriteDataBuffer+0x100>)
    9bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd6:	68da      	ldr	r2, [r3, #12]
    9bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9bdc:	005b      	lsls	r3, r3, #1
    9bde:	4413      	add	r3, r2
    9be0:	881b      	ldrh	r3, [r3, #0]
    9be2:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9be6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bea:	4a34      	ldr	r2, [pc, #208]	; (9cbc <Adc_Ipw_WriteDataBuffer+0x100>)
    9bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bf0:	685a      	ldr	r2, [r3, #4]
    9bf2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9bf6:	2134      	movs	r1, #52	; 0x34
    9bf8:	fb01 f303 	mul.w	r3, r1, r3
    9bfc:	4413      	add	r3, r2
    9bfe:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9c00:	9b04      	ldr	r3, [sp, #16]
    9c02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9c06:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    9c0a:	2300      	movs	r3, #0
    9c0c:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    9c0e:	2300      	movs	r3, #0
    9c10:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    9c14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c18:	4929      	ldr	r1, [pc, #164]	; (9cc0 <Adc_Ipw_WriteDataBuffer+0x104>)
    9c1a:	4613      	mov	r3, r2
    9c1c:	009b      	lsls	r3, r3, #2
    9c1e:	4413      	add	r3, r2
    9c20:	009b      	lsls	r3, r3, #2
    9c22:	440b      	add	r3, r1
    9c24:	3308      	adds	r3, #8
    9c26:	881b      	ldrh	r3, [r3, #0]
    9c28:	b29b      	uxth	r3, r3
    9c2a:	3b01      	subs	r3, #1
    9c2c:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    9c30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c34:	4922      	ldr	r1, [pc, #136]	; (9cc0 <Adc_Ipw_WriteDataBuffer+0x104>)
    9c36:	4613      	mov	r3, r2
    9c38:	009b      	lsls	r3, r3, #2
    9c3a:	4413      	add	r3, r2
    9c3c:	009b      	lsls	r3, r3, #2
    9c3e:	440b      	add	r3, r1
    9c40:	3308      	adds	r3, #8
    9c42:	881b      	ldrh	r3, [r3, #0]
    9c44:	b29b      	uxth	r3, r3
    9c46:	2b00      	cmp	r3, #0
    9c48:	d104      	bne.n	9c54 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    9c4a:	9b04      	ldr	r3, [sp, #16]
    9c4c:	8b9b      	ldrh	r3, [r3, #28]
    9c4e:	3b01      	subs	r3, #1
    9c50:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    9c54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c58:	4919      	ldr	r1, [pc, #100]	; (9cc0 <Adc_Ipw_WriteDataBuffer+0x104>)
    9c5a:	4613      	mov	r3, r2
    9c5c:	009b      	lsls	r3, r3, #2
    9c5e:	4413      	add	r3, r2
    9c60:	009b      	lsls	r3, r3, #2
    9c62:	440b      	add	r3, r1
    9c64:	330c      	adds	r3, #12
    9c66:	681a      	ldr	r2, [r3, #0]
    9c68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9c6c:	005b      	lsls	r3, r3, #1
    9c6e:	4413      	add	r3, r2
    9c70:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9c72:	9b04      	ldr	r3, [sp, #16]
    9c74:	8b9b      	ldrh	r3, [r3, #28]
    9c76:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    9c7a:	2300      	movs	r3, #0
    9c7c:	f88d 301f 	strb.w	r3, [sp, #31]
    9c80:	e012      	b.n	9ca8 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9c82:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9c86:	005b      	lsls	r3, r3, #1
    9c88:	9a00      	ldr	r2, [sp, #0]
    9c8a:	4413      	add	r3, r2
    9c8c:	9a06      	ldr	r2, [sp, #24]
    9c8e:	8812      	ldrh	r2, [r2, #0]
    9c90:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9c92:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c96:	005b      	lsls	r3, r3, #1
    9c98:	9a06      	ldr	r2, [sp, #24]
    9c9a:	4413      	add	r3, r2
    9c9c:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9c9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ca2:	3301      	adds	r3, #1
    9ca4:	f88d 301f 	strb.w	r3, [sp, #31]
    9ca8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9cac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9cb0:	429a      	cmp	r2, r3
    9cb2:	d3e6      	bcc.n	9c82 <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9cb4:	bf00      	nop
    9cb6:	bf00      	nop
    9cb8:	b008      	add	sp, #32
    9cba:	4770      	bx	lr
    9cbc:	1fff8d18 	.word	0x1fff8d18
    9cc0:	1fff8d1c 	.word	0x1fff8d1c

00009cc4 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    9cc4:	b500      	push	{lr}
    9cc6:	b089      	sub	sp, #36	; 0x24
    9cc8:	9200      	str	r2, [sp, #0]
    9cca:	461a      	mov	r2, r3
    9ccc:	4603      	mov	r3, r0
    9cce:	f88d 3007 	strb.w	r3, [sp, #7]
    9cd2:	460b      	mov	r3, r1
    9cd4:	f8ad 3004 	strh.w	r3, [sp, #4]
    9cd8:	4613      	mov	r3, r2
    9cda:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    9cde:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ce2:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9ce6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9cea:	f003 0307 	and.w	r3, r3, #7
    9cee:	b2db      	uxtb	r3, r3
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d006      	beq.n	9d02 <Adc_Ipw_ConfigurePdbChannels+0x3e>
    9cf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9cf8:	08db      	lsrs	r3, r3, #3
    9cfa:	b2db      	uxtb	r3, r3
    9cfc:	3301      	adds	r3, #1
    9cfe:	b2db      	uxtb	r3, r3
    9d00:	e003      	b.n	9d0a <Adc_Ipw_ConfigurePdbChannels+0x46>
    9d02:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9d06:	08db      	lsrs	r3, r3, #3
    9d08:	b2db      	uxtb	r3, r3
    9d0a:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    9d0e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9d12:	4987      	ldr	r1, [pc, #540]	; (9f30 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    9d14:	4613      	mov	r3, r2
    9d16:	009b      	lsls	r3, r3, #2
    9d18:	4413      	add	r3, r2
    9d1a:	009b      	lsls	r3, r3, #2
    9d1c:	440b      	add	r3, r1
    9d1e:	3310      	adds	r3, #16
    9d20:	781b      	ldrb	r3, [r3, #0]
    9d22:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9d26:	4b83      	ldr	r3, [pc, #524]	; (9f34 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	681a      	ldr	r2, [r3, #0]
    9d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d30:	4413      	add	r3, r2
    9d32:	7c1b      	ldrb	r3, [r3, #16]
    9d34:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9d38:	9b00      	ldr	r3, [sp, #0]
    9d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9d3c:	691b      	ldr	r3, [r3, #16]
    9d3e:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9d40:	2300      	movs	r3, #0
    9d42:	f88d 301f 	strb.w	r3, [sp, #31]
    9d46:	e0e6      	b.n	9f16 <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    9d48:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9d4c:	08db      	lsrs	r3, r3, #3
    9d4e:	b2db      	uxtb	r3, r3
    9d50:	2b00      	cmp	r3, #0
    9d52:	d102      	bne.n	9d5a <Adc_Ipw_ConfigurePdbChannels+0x96>
    9d54:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9d58:	e000      	b.n	9d5c <Adc_Ipw_ConfigurePdbChannels+0x98>
    9d5a:	2308      	movs	r3, #8
    9d5c:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9d60:	9b00      	ldr	r3, [sp, #0]
    9d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9d64:	7bdb      	ldrb	r3, [r3, #15]
    9d66:	2b00      	cmp	r3, #0
    9d68:	d05e      	beq.n	9e28 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9d6a:	9b00      	ldr	r3, [sp, #0]
    9d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9d6e:	7b9b      	ldrb	r3, [r3, #14]
    9d70:	f083 0301 	eor.w	r3, r3, #1
    9d74:	b2db      	uxtb	r3, r3
    9d76:	2b00      	cmp	r3, #0
    9d78:	d02a      	beq.n	9dd0 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9d7a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d7e:	f1c3 0308 	rsb	r3, r3, #8
    9d82:	22ff      	movs	r2, #255	; 0xff
    9d84:	fa22 f303 	lsr.w	r3, r2, r3
    9d88:	b2db      	uxtb	r3, r3
    9d8a:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9d8e:	2300      	movs	r3, #0
    9d90:	f88d 301e 	strb.w	r3, [sp, #30]
    9d94:	e015      	b.n	9dc2 <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    9d96:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9d9a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9d9e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9da2:	4413      	add	r3, r2
    9da4:	005b      	lsls	r3, r3, #1
    9da6:	9a05      	ldr	r2, [sp, #20]
    9da8:	4413      	add	r3, r2
    9daa:	881b      	ldrh	r3, [r3, #0]
    9dac:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9db0:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9db4:	f001 fd16 	bl	b7e4 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9db8:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9dbc:	3301      	adds	r3, #1
    9dbe:	f88d 301e 	strb.w	r3, [sp, #30]
    9dc2:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9dc6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9dca:	429a      	cmp	r2, r3
    9dcc:	d3e3      	bcc.n	9d96 <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9dce:	e051      	b.n	9e74 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9dd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9dd4:	2b00      	cmp	r3, #0
    9dd6:	d110      	bne.n	9dfa <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9dd8:	2301      	movs	r3, #1
    9dda:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    9dde:	9b05      	ldr	r3, [sp, #20]
    9de0:	881b      	ldrh	r3, [r3, #0]
    9de2:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9de6:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9dea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9dee:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9df2:	2200      	movs	r2, #0
    9df4:	f001 fcf6 	bl	b7e4 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9df8:	e03c      	b.n	9e74 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    9dfa:	2301      	movs	r3, #1
    9dfc:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9e00:	9b00      	ldr	r3, [sp, #0]
    9e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9e04:	899a      	ldrh	r2, [r3, #12]
    9e06:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e0a:	b29b      	uxth	r3, r3
    9e0c:	fb12 f303 	smulbb	r3, r2, r3
    9e10:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9e14:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9e18:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9e1c:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9e20:	2200      	movs	r2, #0
    9e22:	f001 fcdf 	bl	b7e4 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9e26:	e025      	b.n	9e74 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    9e28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e2c:	2b00      	cmp	r3, #0
    9e2e:	d10b      	bne.n	9e48 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    9e30:	2301      	movs	r3, #1
    9e32:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    9e36:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9e3a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9e3e:	2300      	movs	r3, #0
    9e40:	2200      	movs	r2, #0
    9e42:	f001 fccf 	bl	b7e4 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9e46:	e015      	b.n	9e74 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9e48:	2301      	movs	r3, #1
    9e4a:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9e4e:	9b00      	ldr	r3, [sp, #0]
    9e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9e52:	899a      	ldrh	r2, [r3, #12]
    9e54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e58:	b29b      	uxth	r3, r3
    9e5a:	fb12 f303 	smulbb	r3, r2, r3
    9e5e:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9e62:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9e66:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9e6a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9e6e:	2200      	movs	r2, #0
    9e70:	f001 fcb8 	bl	b7e4 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9e74:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9e78:	4618      	mov	r0, r3
    9e7a:	f001 fb87 	bl	b58c <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    9e7e:	f89d 201d 	ldrb.w	r2, [sp, #29]
    9e82:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9e86:	1ad3      	subs	r3, r2, r3
    9e88:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9e8c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9e90:	b29a      	uxth	r2, r3
    9e92:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9e96:	4413      	add	r3, r2
    9e98:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9e9c:	9b00      	ldr	r3, [sp, #0]
    9e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9ea0:	7b9b      	ldrb	r3, [r3, #14]
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	d01d      	beq.n	9ee2 <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    9ea6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9eaa:	2b00      	cmp	r3, #0
    9eac:	d10c      	bne.n	9ec8 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9eae:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9eb2:	f1c3 0308 	rsb	r3, r3, #8
    9eb6:	22ff      	movs	r2, #255	; 0xff
    9eb8:	fa22 f303 	lsr.w	r3, r2, r3
    9ebc:	b2db      	uxtb	r3, r3
    9ebe:	3b01      	subs	r3, #1
    9ec0:	b2db      	uxtb	r3, r3
    9ec2:	f88d 300e 	strb.w	r3, [sp, #14]
    9ec6:	e00f      	b.n	9ee8 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9ec8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9ecc:	f1c3 0308 	rsb	r3, r3, #8
    9ed0:	22ff      	movs	r2, #255	; 0xff
    9ed2:	fa22 f303 	lsr.w	r3, r2, r3
    9ed6:	b2db      	uxtb	r3, r3
    9ed8:	3b01      	subs	r3, #1
    9eda:	b2db      	uxtb	r3, r3
    9edc:	f88d 300e 	strb.w	r3, [sp, #14]
    9ee0:	e002      	b.n	9ee8 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    9ee2:	2300      	movs	r3, #0
    9ee4:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9ee8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9eec:	f1c3 0308 	rsb	r3, r3, #8
    9ef0:	22ff      	movs	r2, #255	; 0xff
    9ef2:	fa22 f303 	lsr.w	r3, r2, r3
    9ef6:	b2db      	uxtb	r3, r3
    9ef8:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9efc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9f00:	aa03      	add	r2, sp, #12
    9f02:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9f06:	4618      	mov	r0, r3
    9f08:	f001 fb7c 	bl	b604 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9f0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f10:	3301      	adds	r3, #1
    9f12:	f88d 301f 	strb.w	r3, [sp, #31]
    9f16:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f1a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9f1e:	429a      	cmp	r2, r3
    9f20:	f4ff af12 	bcc.w	9d48 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    9f24:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9f28:	4618      	mov	r0, r3
    9f2a:	b009      	add	sp, #36	; 0x24
    9f2c:	f85d fb04 	ldr.w	pc, [sp], #4
    9f30:	1fff8d1c 	.word	0x1fff8d1c
    9f34:	1fff8d18 	.word	0x1fff8d18

00009f38 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    9f38:	b500      	push	{lr}
    9f3a:	b089      	sub	sp, #36	; 0x24
    9f3c:	9202      	str	r2, [sp, #8]
    9f3e:	9301      	str	r3, [sp, #4]
    9f40:	4603      	mov	r3, r0
    9f42:	f88d 300f 	strb.w	r3, [sp, #15]
    9f46:	460b      	mov	r3, r1
    9f48:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9f4c:	2300      	movs	r3, #0
    9f4e:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9f52:	4b62      	ldr	r3, [pc, #392]	; (a0dc <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    9f54:	681b      	ldr	r3, [r3, #0]
    9f56:	681a      	ldr	r2, [r3, #0]
    9f58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f5c:	4413      	add	r3, r2
    9f5e:	7c1b      	ldrb	r3, [r3, #16]
    9f60:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9f64:	9b02      	ldr	r3, [sp, #8]
    9f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f68:	691b      	ldr	r3, [r3, #16]
    9f6a:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9f6c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9f70:	f003 0307 	and.w	r3, r3, #7
    9f74:	b2db      	uxtb	r3, r3
    9f76:	2b00      	cmp	r3, #0
    9f78:	d006      	beq.n	9f88 <Adc_Ipw_ConfigurePdbConversion+0x50>
    9f7a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9f7e:	08db      	lsrs	r3, r3, #3
    9f80:	b2db      	uxtb	r3, r3
    9f82:	3301      	adds	r3, #1
    9f84:	b2db      	uxtb	r3, r3
    9f86:	e003      	b.n	9f90 <Adc_Ipw_ConfigurePdbConversion+0x58>
    9f88:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9f8c:	08db      	lsrs	r3, r3, #3
    9f8e:	b2db      	uxtb	r3, r3
    9f90:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    9f94:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9f98:	4618      	mov	r0, r3
    9f9a:	f001 fa61 	bl	b460 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    9f9e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9fa2:	9901      	ldr	r1, [sp, #4]
    9fa4:	4618      	mov	r0, r3
    9fa6:	f001 fa89 	bl	b4bc <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    9faa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9fae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9fb2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9fb6:	9a02      	ldr	r2, [sp, #8]
    9fb8:	f7ff fe84 	bl	9cc4 <Adc_Ipw_ConfigurePdbChannels>
    9fbc:	4603      	mov	r3, r0
    9fbe:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9fc2:	9b02      	ldr	r3, [sp, #8]
    9fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fc6:	7bdb      	ldrb	r3, [r3, #15]
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d02f      	beq.n	a02c <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9fcc:	9b02      	ldr	r3, [sp, #8]
    9fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fd0:	7b9b      	ldrb	r3, [r3, #14]
    9fd2:	f083 0301 	eor.w	r3, r3, #1
    9fd6:	b2db      	uxtb	r3, r3
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d017      	beq.n	a00c <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    9fdc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9fe0:	493f      	ldr	r1, [pc, #252]	; (a0e0 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9fe2:	4613      	mov	r3, r2
    9fe4:	009b      	lsls	r3, r3, #2
    9fe6:	4413      	add	r3, r2
    9fe8:	009b      	lsls	r3, r3, #2
    9fea:	440b      	add	r3, r1
    9fec:	3310      	adds	r3, #16
    9fee:	781b      	ldrb	r3, [r3, #0]
    9ff0:	461a      	mov	r2, r3
    9ff2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9ff6:	4413      	add	r3, r2
    9ff8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9ffc:	3b01      	subs	r3, #1
    9ffe:	005b      	lsls	r3, r3, #1
    a000:	9a05      	ldr	r2, [sp, #20]
    a002:	4413      	add	r3, r2
    a004:	881b      	ldrh	r3, [r3, #0]
    a006:	f8ad 301c 	strh.w	r3, [sp, #28]
    a00a:	e01a      	b.n	a042 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    a00c:	9b05      	ldr	r3, [sp, #20]
    a00e:	881a      	ldrh	r2, [r3, #0]
    a010:	9b02      	ldr	r3, [sp, #8]
    a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a014:	8999      	ldrh	r1, [r3, #12]
    a016:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a01a:	3b01      	subs	r3, #1
    a01c:	b29b      	uxth	r3, r3
    a01e:	fb11 f303 	smulbb	r3, r1, r3
    a022:	b29b      	uxth	r3, r3
    a024:	4413      	add	r3, r2
    a026:	f8ad 301c 	strh.w	r3, [sp, #28]
    a02a:	e00a      	b.n	a042 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    a02c:	9b02      	ldr	r3, [sp, #8]
    a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a030:	899a      	ldrh	r2, [r3, #12]
    a032:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a036:	3b01      	subs	r3, #1
    a038:	b29b      	uxth	r3, r3
    a03a:	fb12 f303 	smulbb	r3, r2, r3
    a03e:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    a042:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a046:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a04a:	4611      	mov	r1, r2
    a04c:	4618      	mov	r0, r3
    a04e:	f001 fab5 	bl	b5bc <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a052:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a056:	4618      	mov	r0, r3
    a058:	f001 fa98 	bl	b58c <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    a05c:	2300      	movs	r3, #0
    a05e:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    a062:	2300      	movs	r3, #0
    a064:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a068:	2300      	movs	r3, #0
    a06a:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a06e:	e00c      	b.n	a08a <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a070:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a074:	aa04      	add	r2, sp, #16
    a076:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a07a:	4618      	mov	r0, r3
    a07c:	f001 fac2 	bl	b604 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a080:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a084:	3301      	adds	r3, #1
    a086:	f88d 301f 	strb.w	r3, [sp, #31]
    a08a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a08e:	2b01      	cmp	r3, #1
    a090:	d9ee      	bls.n	a070 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    a092:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a096:	4912      	ldr	r1, [pc, #72]	; (a0e0 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a098:	4613      	mov	r3, r2
    a09a:	009b      	lsls	r3, r3, #2
    a09c:	4413      	add	r3, r2
    a09e:	009b      	lsls	r3, r3, #2
    a0a0:	440b      	add	r3, r1
    a0a2:	3310      	adds	r3, #16
    a0a4:	7819      	ldrb	r1, [r3, #0]
    a0a6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a0aa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a0ae:	440b      	add	r3, r1
    a0b0:	b2d8      	uxtb	r0, r3
    a0b2:	490b      	ldr	r1, [pc, #44]	; (a0e0 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a0b4:	4613      	mov	r3, r2
    a0b6:	009b      	lsls	r3, r3, #2
    a0b8:	4413      	add	r3, r2
    a0ba:	009b      	lsls	r3, r3, #2
    a0bc:	440b      	add	r3, r1
    a0be:	3310      	adds	r3, #16
    a0c0:	4602      	mov	r2, r0
    a0c2:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    a0c4:	9b01      	ldr	r3, [sp, #4]
    a0c6:	2b0f      	cmp	r3, #15
    a0c8:	d104      	bne.n	a0d4 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a0ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a0ce:	4618      	mov	r0, r3
    a0d0:	f001 fa34 	bl	b53c <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    a0d4:	bf00      	nop
    a0d6:	b009      	add	sp, #36	; 0x24
    a0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0dc:	1fff8d18 	.word	0x1fff8d18
    a0e0:	1fff8d1c 	.word	0x1fff8d1c

0000a0e4 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    a0e4:	b500      	push	{lr}
    a0e6:	b087      	sub	sp, #28
    a0e8:	4603      	mov	r3, r0
    a0ea:	f88d 3007 	strb.w	r3, [sp, #7]
    a0ee:	460b      	mov	r3, r1
    a0f0:	f8ad 3004 	strh.w	r3, [sp, #4]
    a0f4:	4613      	mov	r3, r2
    a0f6:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a0fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0fe:	4a36      	ldr	r2, [pc, #216]	; (a1d8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a104:	68da      	ldr	r2, [r3, #12]
    a106:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a10a:	005b      	lsls	r3, r3, #1
    a10c:	4413      	add	r3, r2
    a10e:	881b      	ldrh	r3, [r3, #0]
    a110:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a114:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a118:	4a2f      	ldr	r2, [pc, #188]	; (a1d8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a11e:	681a      	ldr	r2, [r3, #0]
    a120:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a124:	4413      	add	r3, r2
    a126:	7c1b      	ldrb	r3, [r3, #16]
    a128:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    a12c:	2300      	movs	r3, #0
    a12e:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    a132:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a136:	4618      	mov	r0, r3
    a138:	f001 fb7e 	bl	b838 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    a13c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a140:	4a25      	ldr	r2, [pc, #148]	; (a1d8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a146:	685a      	ldr	r2, [r3, #4]
    a148:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a14c:	2134      	movs	r1, #52	; 0x34
    a14e:	fb01 f303 	mul.w	r3, r1, r3
    a152:	4413      	add	r3, r2
    a154:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a158:	2b01      	cmp	r3, #1
    a15a:	d114      	bne.n	a186 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    a15c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a160:	4a1d      	ldr	r2, [pc, #116]	; (a1d8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a166:	685a      	ldr	r2, [r3, #4]
    a168:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a16c:	2134      	movs	r1, #52	; 0x34
    a16e:	fb01 f303 	mul.w	r3, r1, r3
    a172:	4413      	add	r3, r2
    a174:	689b      	ldr	r3, [r3, #8]
    a176:	2b01      	cmp	r3, #1
    a178:	d105      	bne.n	a186 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    a17a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a17e:	2100      	movs	r1, #0
    a180:	4618      	mov	r0, r3
    a182:	f7ff f827 	bl	91d4 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a186:	2300      	movs	r3, #0
    a188:	f88d 3016 	strb.w	r3, [sp, #22]
    a18c:	e013      	b.n	a1b6 <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    a18e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a192:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a196:	2201      	movs	r2, #1
    a198:	4618      	mov	r0, r3
    a19a:	f7ff f8cd 	bl	9338 <Adc_Ip_SetDisabledChannel>
    a19e:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    a1a0:	9b03      	ldr	r3, [sp, #12]
    a1a2:	2b02      	cmp	r3, #2
    a1a4:	d102      	bne.n	a1ac <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    a1a6:	2301      	movs	r3, #1
    a1a8:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a1ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1b0:	3301      	adds	r3, #1
    a1b2:	f88d 3016 	strb.w	r3, [sp, #22]
    a1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1ba:	4a08      	ldr	r2, [pc, #32]	; (a1dc <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    a1bc:	00db      	lsls	r3, r3, #3
    a1be:	4413      	add	r3, r2
    a1c0:	799b      	ldrb	r3, [r3, #6]
    a1c2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a1c6:	429a      	cmp	r2, r3
    a1c8:	d3e1      	bcc.n	a18e <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    a1ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a1ce:	4618      	mov	r0, r3
    a1d0:	b007      	add	sp, #28
    a1d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a1d6:	bf00      	nop
    a1d8:	1fff8d18 	.word	0x1fff8d18
    a1dc:	1fff8d44 	.word	0x1fff8d44

0000a1e0 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    a1e0:	b500      	push	{lr}
    a1e2:	b085      	sub	sp, #20
    a1e4:	4603      	mov	r3, r0
    a1e6:	9100      	str	r1, [sp, #0]
    a1e8:	f88d 3007 	strb.w	r3, [sp, #7]
    a1ec:	4613      	mov	r3, r2
    a1ee:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a1f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1f6:	4a14      	ldr	r2, [pc, #80]	; (a248 <Adc_Ipw_PrepareGroupStart+0x68>)
    a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1fc:	681a      	ldr	r2, [r3, #0]
    a1fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a202:	4413      	add	r3, r2
    a204:	7c1b      	ldrb	r3, [r3, #16]
    a206:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    a20a:	9b00      	ldr	r3, [sp, #0]
    a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a20e:	781b      	ldrb	r3, [r3, #0]
    a210:	2b01      	cmp	r3, #1
    a212:	d108      	bne.n	a226 <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    a214:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a218:	9b00      	ldr	r3, [sp, #0]
    a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a21c:	685b      	ldr	r3, [r3, #4]
    a21e:	461a      	mov	r2, r3
    a220:	2101      	movs	r1, #1
    a222:	f7fe ff51 	bl	90c8 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    a226:	9b00      	ldr	r3, [sp, #0]
    a228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a22a:	7a1b      	ldrb	r3, [r3, #8]
    a22c:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    a230:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a234:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a238:	4611      	mov	r1, r2
    a23a:	4618      	mov	r0, r3
    a23c:	f7fe ff62 	bl	9104 <Adc_Ip_SetSampleTime>
}
    a240:	bf00      	nop
    a242:	b005      	add	sp, #20
    a244:	f85d fb04 	ldr.w	pc, [sp], #4
    a248:	1fff8d18 	.word	0x1fff8d18

0000a24c <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    a24c:	b084      	sub	sp, #16
    a24e:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    a250:	2300      	movs	r3, #0
    a252:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    a256:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a25a:	4618      	mov	r0, r3
    a25c:	b004      	add	sp, #16
    a25e:	4770      	bx	lr

0000a260 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    a260:	b500      	push	{lr}
    a262:	b08f      	sub	sp, #60	; 0x3c
    a264:	9202      	str	r2, [sp, #8]
    a266:	461a      	mov	r2, r3
    a268:	4603      	mov	r3, r0
    a26a:	f88d 300f 	strb.w	r3, [sp, #15]
    a26e:	460b      	mov	r3, r1
    a270:	f8ad 300c 	strh.w	r3, [sp, #12]
    a274:	4613      	mov	r3, r2
    a276:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a27a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a27e:	4a6d      	ldr	r2, [pc, #436]	; (a434 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a284:	68da      	ldr	r2, [r3, #12]
    a286:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a28a:	005b      	lsls	r3, r3, #1
    a28c:	4413      	add	r3, r2
    a28e:	881b      	ldrh	r3, [r3, #0]
    a290:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a294:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a298:	4a66      	ldr	r2, [pc, #408]	; (a434 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a29e:	685a      	ldr	r2, [r3, #4]
    a2a0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    a2a4:	2134      	movs	r1, #52	; 0x34
    a2a6:	fb01 f303 	mul.w	r3, r1, r3
    a2aa:	4413      	add	r3, r2
    a2ac:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a2ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a2b2:	4a60      	ldr	r2, [pc, #384]	; (a434 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2b8:	681a      	ldr	r2, [r3, #0]
    a2ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2be:	4413      	add	r3, r2
    a2c0:	7c1b      	ldrb	r3, [r3, #16]
    a2c2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    a2c6:	2300      	movs	r3, #0
    a2c8:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    a2ca:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2ce:	495a      	ldr	r1, [pc, #360]	; (a438 <Adc_Ipw_ConfigureConversion+0x1d8>)
    a2d0:	4613      	mov	r3, r2
    a2d2:	009b      	lsls	r3, r3, #2
    a2d4:	4413      	add	r3, r2
    a2d6:	009b      	lsls	r3, r3, #2
    a2d8:	440b      	add	r3, r1
    a2da:	3310      	adds	r3, #16
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    a2e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a2e4:	6a1b      	ldr	r3, [r3, #32]
    a2e6:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a2e8:	2300      	movs	r3, #0
    a2ea:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a2ee:	e030      	b.n	a352 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a2f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a2f4:	4a4f      	ldr	r2, [pc, #316]	; (a434 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2fa:	681b      	ldr	r3, [r3, #0]
    a2fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a306:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a30a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a30e:	440b      	add	r3, r1
    a310:	005b      	lsls	r3, r3, #1
    a312:	990a      	ldr	r1, [sp, #40]	; 0x28
    a314:	440b      	add	r3, r1
    a316:	881b      	ldrh	r3, [r3, #0]
    a318:	4619      	mov	r1, r3
    a31a:	460b      	mov	r3, r1
    a31c:	005b      	lsls	r3, r3, #1
    a31e:	440b      	add	r3, r1
    a320:	009b      	lsls	r3, r3, #2
    a322:	4413      	add	r3, r2
    a324:	685b      	ldr	r3, [r3, #4]
    a326:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    a328:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a32c:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    a330:	9b08      	ldr	r3, [sp, #32]
    a332:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    a334:	2300      	movs	r3, #0
    a336:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a33a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a33e:	aa05      	add	r2, sp, #20
    a340:	4611      	mov	r1, r2
    a342:	4618      	mov	r0, r3
    a344:	f7fe ffc8 	bl	92d8 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a348:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a34c:	3301      	adds	r3, #1
    a34e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a352:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    a356:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a35a:	3b01      	subs	r3, #1
    a35c:	429a      	cmp	r2, r3
    a35e:	d3c7      	bcc.n	a2f0 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a360:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a364:	4a33      	ldr	r2, [pc, #204]	; (a434 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a36a:	681b      	ldr	r3, [r3, #0]
    a36c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a376:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a37a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a37e:	440b      	add	r3, r1
    a380:	005b      	lsls	r3, r3, #1
    a382:	990a      	ldr	r1, [sp, #40]	; 0x28
    a384:	440b      	add	r3, r1
    a386:	881b      	ldrh	r3, [r3, #0]
    a388:	4619      	mov	r1, r3
    a38a:	460b      	mov	r3, r1
    a38c:	005b      	lsls	r3, r3, #1
    a38e:	440b      	add	r3, r1
    a390:	009b      	lsls	r3, r3, #2
    a392:	4413      	add	r3, r2
    a394:	685b      	ldr	r3, [r3, #4]
    a396:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    a398:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a39c:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    a3a0:	9b08      	ldr	r3, [sp, #32]
    a3a2:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    a3a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a3a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d103      	bne.n	a3b6 <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    a3ae:	2301      	movs	r3, #1
    a3b0:	f88d 301c 	strb.w	r3, [sp, #28]
    a3b4:	e002      	b.n	a3bc <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    a3b6:	2300      	movs	r3, #0
    a3b8:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a3bc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a3c0:	aa05      	add	r2, sp, #20
    a3c2:	4611      	mov	r1, r2
    a3c4:	4618      	mov	r0, r3
    a3c6:	f7fe ff87 	bl	92d8 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a3ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a3ce:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a3d2:	e014      	b.n	a3fe <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    a3d4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a3d8:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    a3dc:	231f      	movs	r3, #31
    a3de:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    a3e0:	2300      	movs	r3, #0
    a3e2:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a3e6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a3ea:	aa05      	add	r2, sp, #20
    a3ec:	4611      	mov	r1, r2
    a3ee:	4618      	mov	r0, r3
    a3f0:	f7fe ff72 	bl	92d8 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a3f4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a3f8:	3301      	adds	r3, #1
    a3fa:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a3fe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a402:	2b0f      	cmp	r3, #15
    a404:	d9e6      	bls.n	a3d4 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a406:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a40a:	4a0c      	ldr	r2, [pc, #48]	; (a43c <Adc_Ipw_ConfigureConversion+0x1dc>)
    a40c:	00db      	lsls	r3, r3, #3
    a40e:	4413      	add	r3, r2
    a410:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a414:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    a416:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a41a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a41e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a422:	9300      	str	r3, [sp, #0]
    a424:	9b02      	ldr	r3, [sp, #8]
    a426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a428:	f7ff fd86 	bl	9f38 <Adc_Ipw_ConfigurePdbConversion>
}
    a42c:	bf00      	nop
    a42e:	b00f      	add	sp, #60	; 0x3c
    a430:	f85d fb04 	ldr.w	pc, [sp], #4
    a434:	1fff8d18 	.word	0x1fff8d18
    a438:	1fff8d1c 	.word	0x1fff8d1c
    a43c:	1fff8d44 	.word	0x1fff8d44

0000a440 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    a440:	b500      	push	{lr}
    a442:	b085      	sub	sp, #20
    a444:	9001      	str	r0, [sp, #4]
    a446:	460b      	mov	r3, r1
    a448:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a44c:	2300      	movs	r3, #0
    a44e:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a452:	2300      	movs	r3, #0
    a454:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    a458:	2300      	movs	r3, #0
    a45a:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a45e:	2300      	movs	r3, #0
    a460:	f88d 300f 	strb.w	r3, [sp, #15]
    a464:	e027      	b.n	a4b6 <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    a466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a46a:	9a01      	ldr	r2, [sp, #4]
    a46c:	4413      	add	r3, r2
    a46e:	7f9b      	ldrb	r3, [r3, #30]
    a470:	2b01      	cmp	r3, #1
    a472:	d11b      	bne.n	a4ac <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a474:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a478:	9a01      	ldr	r2, [sp, #4]
    a47a:	4413      	add	r3, r2
    a47c:	7c1b      	ldrb	r3, [r3, #16]
    a47e:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    a482:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a486:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a48a:	9b01      	ldr	r3, [sp, #4]
    a48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a490:	4619      	mov	r1, r3
    a492:	f7fe fcb8 	bl	8e06 <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    a496:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a49a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a49e:	9b01      	ldr	r3, [sp, #4]
    a4a0:	3202      	adds	r2, #2
    a4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a4a6:	4619      	mov	r1, r3
    a4a8:	f000 fead 	bl	b206 <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a4ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4b0:	3301      	adds	r3, #1
    a4b2:	f88d 300f 	strb.w	r3, [sp, #15]
    a4b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4ba:	2b01      	cmp	r3, #1
    a4bc:	d9d3      	bls.n	a466 <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    a4be:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    a4c2:	4618      	mov	r0, r3
    a4c4:	b005      	add	sp, #20
    a4c6:	f85d fb04 	ldr.w	pc, [sp], #4

0000a4ca <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    a4ca:	b500      	push	{lr}
    a4cc:	b087      	sub	sp, #28
    a4ce:	4603      	mov	r3, r0
    a4d0:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a4d4:	2300      	movs	r3, #0
    a4d6:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a4da:	2300      	movs	r3, #0
    a4dc:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    a4e0:	2300      	movs	r3, #0
    a4e2:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    a4e6:	2300      	movs	r3, #0
    a4e8:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    a4ec:	2300      	movs	r3, #0
    a4ee:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a4f2:	2300      	movs	r3, #0
    a4f4:	f88d 3017 	strb.w	r3, [sp, #23]
    a4f8:	e026      	b.n	a548 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    a4fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4fe:	4a2e      	ldr	r2, [pc, #184]	; (a5b8 <Adc_Ipw_DeInit+0xee>)
    a500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a504:	681a      	ldr	r2, [r3, #0]
    a506:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a50a:	4413      	add	r3, r2
    a50c:	7f9b      	ldrb	r3, [r3, #30]
    a50e:	2b01      	cmp	r3, #1
    a510:	d115      	bne.n	a53e <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a512:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a516:	4a28      	ldr	r2, [pc, #160]	; (a5b8 <Adc_Ipw_DeInit+0xee>)
    a518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a51c:	681a      	ldr	r2, [r3, #0]
    a51e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a522:	4413      	add	r3, r2
    a524:	7c1b      	ldrb	r3, [r3, #16]
    a526:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    a52a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a52e:	4618      	mov	r0, r3
    a530:	f7fe fd40 	bl	8fb4 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    a534:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a538:	4618      	mov	r0, r3
    a53a:	f000 ff0d 	bl	b358 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a53e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a542:	3301      	adds	r3, #1
    a544:	f88d 3017 	strb.w	r3, [sp, #23]
    a548:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a54c:	2b01      	cmp	r3, #1
    a54e:	d9d4      	bls.n	a4fa <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a550:	2300      	movs	r3, #0
    a552:	f8ad 3014 	strh.w	r3, [sp, #20]
    a556:	e01e      	b.n	a596 <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    a558:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a55c:	4a16      	ldr	r2, [pc, #88]	; (a5b8 <Adc_Ipw_DeInit+0xee>)
    a55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a562:	685a      	ldr	r2, [r3, #4]
    a564:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a568:	2134      	movs	r1, #52	; 0x34
    a56a:	fb01 f303 	mul.w	r3, r1, r3
    a56e:	4413      	add	r3, r2
    a570:	881b      	ldrh	r3, [r3, #0]
    a572:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    a576:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a57a:	4910      	ldr	r1, [pc, #64]	; (a5bc <Adc_Ipw_DeInit+0xf2>)
    a57c:	4613      	mov	r3, r2
    a57e:	009b      	lsls	r3, r3, #2
    a580:	4413      	add	r3, r2
    a582:	009b      	lsls	r3, r3, #2
    a584:	440b      	add	r3, r1
    a586:	330c      	adds	r3, #12
    a588:	2200      	movs	r2, #0
    a58a:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a58c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a590:	3301      	adds	r3, #1
    a592:	f8ad 3014 	strh.w	r3, [sp, #20]
    a596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a59a:	4a07      	ldr	r2, [pc, #28]	; (a5b8 <Adc_Ipw_DeInit+0xee>)
    a59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5a0:	891b      	ldrh	r3, [r3, #8]
    a5a2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a5a6:	429a      	cmp	r2, r3
    a5a8:	d3d6      	bcc.n	a558 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    a5aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a5ae:	4618      	mov	r0, r3
    a5b0:	b007      	add	sp, #28
    a5b2:	f85d fb04 	ldr.w	pc, [sp], #4
    a5b6:	bf00      	nop
    a5b8:	1fff8d18 	.word	0x1fff8d18
    a5bc:	1fff8d1c 	.word	0x1fff8d1c

0000a5c0 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    a5c0:	b500      	push	{lr}
    a5c2:	b089      	sub	sp, #36	; 0x24
    a5c4:	4603      	mov	r3, r0
    a5c6:	460a      	mov	r2, r1
    a5c8:	f88d 300f 	strb.w	r3, [sp, #15]
    a5cc:	4613      	mov	r3, r2
    a5ce:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    a5d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a5d6:	4a4c      	ldr	r2, [pc, #304]	; (a708 <Adc_Ipw_StartNormalConversion+0x148>)
    a5d8:	00db      	lsls	r3, r3, #3
    a5da:	4413      	add	r3, r2
    a5dc:	885b      	ldrh	r3, [r3, #2]
    a5de:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    a5e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a5e6:	4a49      	ldr	r2, [pc, #292]	; (a70c <Adc_Ipw_StartNormalConversion+0x14c>)
    a5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ec:	68da      	ldr	r2, [r3, #12]
    a5ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    a5f2:	005b      	lsls	r3, r3, #1
    a5f4:	4413      	add	r3, r2
    a5f6:	881b      	ldrh	r3, [r3, #0]
    a5f8:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    a5fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a600:	4a42      	ldr	r2, [pc, #264]	; (a70c <Adc_Ipw_StartNormalConversion+0x14c>)
    a602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a606:	685a      	ldr	r2, [r3, #4]
    a608:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a60c:	2134      	movs	r1, #52	; 0x34
    a60e:	fb01 f303 	mul.w	r3, r1, r3
    a612:	4413      	add	r3, r2
    a614:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a616:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a61a:	4a3c      	ldr	r2, [pc, #240]	; (a70c <Adc_Ipw_StartNormalConversion+0x14c>)
    a61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a620:	681a      	ldr	r2, [r3, #0]
    a622:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a626:	4413      	add	r3, r2
    a628:	7c1b      	ldrb	r3, [r3, #16]
    a62a:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    a62e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a632:	4a35      	ldr	r2, [pc, #212]	; (a708 <Adc_Ipw_StartNormalConversion+0x148>)
    a634:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a638:	b29b      	uxth	r3, r3
    a63a:	2b00      	cmp	r3, #0
    a63c:	d05f      	beq.n	a6fe <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    a63e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a642:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a646:	9905      	ldr	r1, [sp, #20]
    a648:	4618      	mov	r0, r3
    a64a:	f7ff fdc9 	bl	a1e0 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a64e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a652:	492f      	ldr	r1, [pc, #188]	; (a710 <Adc_Ipw_StartNormalConversion+0x150>)
    a654:	4613      	mov	r3, r2
    a656:	009b      	lsls	r3, r3, #2
    a658:	4413      	add	r3, r2
    a65a:	009b      	lsls	r3, r3, #2
    a65c:	440b      	add	r3, r1
    a65e:	3310      	adds	r3, #16
    a660:	2200      	movs	r2, #0
    a662:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    a664:	9b05      	ldr	r3, [sp, #20]
    a666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a66a:	2b0f      	cmp	r3, #15
    a66c:	d806      	bhi.n	a67c <Adc_Ipw_StartNormalConversion+0xbc>
    a66e:	9b05      	ldr	r3, [sp, #20]
    a670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a674:	f003 030f 	and.w	r3, r3, #15
    a678:	b2db      	uxtb	r3, r3
    a67a:	e000      	b.n	a67e <Adc_Ipw_StartNormalConversion+0xbe>
    a67c:	2310      	movs	r3, #16
    a67e:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    a682:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a686:	4a20      	ldr	r2, [pc, #128]	; (a708 <Adc_Ipw_StartNormalConversion+0x148>)
    a688:	00db      	lsls	r3, r3, #3
    a68a:	4413      	add	r3, r2
    a68c:	799b      	ldrb	r3, [r3, #6]
    a68e:	2b00      	cmp	r3, #0
    a690:	d107      	bne.n	a6a2 <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a692:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a696:	4a1c      	ldr	r2, [pc, #112]	; (a708 <Adc_Ipw_StartNormalConversion+0x148>)
    a698:	00db      	lsls	r3, r3, #3
    a69a:	4413      	add	r3, r2
    a69c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a6a0:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a6a2:	2300      	movs	r3, #0
    a6a4:	f88d 301f 	strb.w	r3, [sp, #31]
    a6a8:	e00c      	b.n	a6c4 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a6aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a6ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a6b2:	4611      	mov	r1, r2
    a6b4:	4618      	mov	r0, r3
    a6b6:	f7fe ff03 	bl	94c0 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a6ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a6be:	3301      	adds	r3, #1
    a6c0:	f88d 301f 	strb.w	r3, [sp, #31]
    a6c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6c8:	4a0f      	ldr	r2, [pc, #60]	; (a708 <Adc_Ipw_StartNormalConversion+0x148>)
    a6ca:	00db      	lsls	r3, r3, #3
    a6cc:	4413      	add	r3, r2
    a6ce:	799b      	ldrb	r3, [r3, #6]
    a6d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a6d4:	429a      	cmp	r2, r3
    a6d6:	d3e8      	bcc.n	a6aa <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    a6d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a6dc:	2101      	movs	r1, #1
    a6de:	4618      	mov	r0, r3
    a6e0:	f7fe fd60 	bl	91a4 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a6e4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a6e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    a6ec:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a6f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a6f4:	9300      	str	r3, [sp, #0]
    a6f6:	4613      	mov	r3, r2
    a6f8:	220f      	movs	r2, #15
    a6fa:	f7ff fdb1 	bl	a260 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    a6fe:	bf00      	nop
    a700:	b009      	add	sp, #36	; 0x24
    a702:	f85d fb04 	ldr.w	pc, [sp], #4
    a706:	bf00      	nop
    a708:	1fff8d44 	.word	0x1fff8d44
    a70c:	1fff8d18 	.word	0x1fff8d18
    a710:	1fff8d1c 	.word	0x1fff8d1c

0000a714 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a714:	b500      	push	{lr}
    a716:	b085      	sub	sp, #20
    a718:	4603      	mov	r3, r0
    a71a:	f88d 3007 	strb.w	r3, [sp, #7]
    a71e:	460b      	mov	r3, r1
    a720:	f8ad 3004 	strh.w	r3, [sp, #4]
    a724:	4613      	mov	r3, r2
    a726:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    a72a:	2300      	movs	r3, #0
    a72c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a730:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a734:	4a24      	ldr	r2, [pc, #144]	; (a7c8 <Adc_Ipw_StopCurrentConversion+0xb4>)
    a736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a73a:	681a      	ldr	r2, [r3, #0]
    a73c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a740:	4413      	add	r3, r2
    a742:	7c1b      	ldrb	r3, [r3, #16]
    a744:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a748:	2300      	movs	r3, #0
    a74a:	f88d 300f 	strb.w	r3, [sp, #15]
    a74e:	e014      	b.n	a77a <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    a750:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a754:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a758:	2200      	movs	r2, #0
    a75a:	4618      	mov	r0, r3
    a75c:	f7fe fdec 	bl	9338 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a760:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a764:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a768:	4611      	mov	r1, r2
    a76a:	4618      	mov	r0, r3
    a76c:	f7fe fea8 	bl	94c0 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a770:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a774:	3301      	adds	r3, #1
    a776:	f88d 300f 	strb.w	r3, [sp, #15]
    a77a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a77e:	4a13      	ldr	r2, [pc, #76]	; (a7cc <Adc_Ipw_StopCurrentConversion+0xb8>)
    a780:	00db      	lsls	r3, r3, #3
    a782:	4413      	add	r3, r2
    a784:	799b      	ldrb	r3, [r3, #6]
    a786:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a78a:	429a      	cmp	r2, r3
    a78c:	d3e0      	bcc.n	a750 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a78e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a792:	490f      	ldr	r1, [pc, #60]	; (a7d0 <Adc_Ipw_StopCurrentConversion+0xbc>)
    a794:	4613      	mov	r3, r2
    a796:	009b      	lsls	r3, r3, #2
    a798:	4413      	add	r3, r2
    a79a:	009b      	lsls	r3, r3, #2
    a79c:	440b      	add	r3, r1
    a79e:	3310      	adds	r3, #16
    a7a0:	2200      	movs	r2, #0
    a7a2:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    a7a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a7a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a7ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7b0:	4618      	mov	r0, r3
    a7b2:	f7ff fc97 	bl	a0e4 <Adc_Ipw_StopConversionCheckTimeout>
    a7b6:	4603      	mov	r3, r0
    a7b8:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    a7bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    a7c0:	4618      	mov	r0, r3
    a7c2:	b005      	add	sp, #20
    a7c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a7c8:	1fff8d18 	.word	0x1fff8d18
    a7cc:	1fff8d44 	.word	0x1fff8d44
    a7d0:	1fff8d1c 	.word	0x1fff8d1c

0000a7d4 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    a7d4:	b500      	push	{lr}
    a7d6:	b085      	sub	sp, #20
    a7d8:	4603      	mov	r3, r0
    a7da:	f88d 3007 	strb.w	r3, [sp, #7]
    a7de:	460b      	mov	r3, r1
    a7e0:	f88d 3006 	strb.w	r3, [sp, #6]
    a7e4:	4613      	mov	r3, r2
    a7e6:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    a7ea:	2301      	movs	r3, #1
    a7ec:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    a7f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a7f4:	f88d 300f 	strb.w	r3, [sp, #15]
    a7f8:	e019      	b.n	a82e <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    a7fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a7fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a802:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a806:	1ad3      	subs	r3, r2, r3
    a808:	b2db      	uxtb	r3, r3
    a80a:	4619      	mov	r1, r3
    a80c:	f7fe fe3e 	bl	948c <Adc_Ip_GetConvCompleteFlag>
    a810:	4603      	mov	r3, r0
    a812:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    a816:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a81a:	f083 0301 	eor.w	r3, r3, #1
    a81e:	b2db      	uxtb	r3, r3
    a820:	2b00      	cmp	r3, #0
    a822:	d10b      	bne.n	a83c <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    a824:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a828:	3301      	adds	r3, #1
    a82a:	f88d 300f 	strb.w	r3, [sp, #15]
    a82e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a832:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a836:	429a      	cmp	r2, r3
    a838:	d3df      	bcc.n	a7fa <Adc_Ipw_CheckValidConversion+0x26>
    a83a:	e000      	b.n	a83e <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    a83c:	bf00      	nop
        }
    }

    return ValidConversion;
    a83e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    a842:	4618      	mov	r0, r3
    a844:	b005      	add	sp, #20
    a846:	f85d fb04 	ldr.w	pc, [sp], #4

0000a84a <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    a84a:	b500      	push	{lr}
    a84c:	b089      	sub	sp, #36	; 0x24
    a84e:	9102      	str	r1, [sp, #8]
    a850:	9201      	str	r2, [sp, #4]
    a852:	461a      	mov	r2, r3
    a854:	4603      	mov	r3, r0
    a856:	f8ad 300e 	strh.w	r3, [sp, #14]
    a85a:	4613      	mov	r3, r2
    a85c:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    a860:	2300      	movs	r3, #0
    a862:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a866:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a86a:	4a33      	ldr	r2, [pc, #204]	; (a938 <Adc_Ipw_ReadGroup+0xee>)
    a86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a870:	68da      	ldr	r2, [r3, #12]
    a872:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a876:	005b      	lsls	r3, r3, #1
    a878:	4413      	add	r3, r2
    a87a:	881b      	ldrh	r3, [r3, #0]
    a87c:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a880:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a884:	4a2c      	ldr	r2, [pc, #176]	; (a938 <Adc_Ipw_ReadGroup+0xee>)
    a886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a88a:	685a      	ldr	r2, [r3, #4]
    a88c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    a890:	2134      	movs	r1, #52	; 0x34
    a892:	fb01 f303 	mul.w	r3, r1, r3
    a896:	4413      	add	r3, r2
    a898:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    a89a:	9b06      	ldr	r3, [sp, #24]
    a89c:	789b      	ldrb	r3, [r3, #2]
    a89e:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    a8a2:	9b06      	ldr	r3, [sp, #24]
    a8a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a8a8:	2b01      	cmp	r3, #1
    a8aa:	d124      	bne.n	a8f6 <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    a8ac:	9b06      	ldr	r3, [sp, #24]
    a8ae:	68db      	ldr	r3, [r3, #12]
    a8b0:	2b00      	cmp	r3, #0
    a8b2:	d111      	bne.n	a8d8 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    a8b4:	9b06      	ldr	r3, [sp, #24]
    a8b6:	695b      	ldr	r3, [r3, #20]
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d10d      	bne.n	a8d8 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    a8bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a8c0:	4a1e      	ldr	r2, [pc, #120]	; (a93c <Adc_Ipw_ReadGroup+0xf2>)
    a8c2:	00db      	lsls	r3, r3, #3
    a8c4:	4413      	add	r3, r2
    a8c6:	885b      	ldrh	r3, [r3, #2]
    a8c8:	b29b      	uxth	r3, r3
    a8ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a8ce:	429a      	cmp	r2, r3
    a8d0:	d002      	beq.n	a8d8 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    a8d2:	2301      	movs	r3, #1
    a8d4:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    a8d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d124      	bne.n	a92a <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    a8e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a8e4:	9a01      	ldr	r2, [sp, #4]
    a8e6:	9902      	ldr	r1, [sp, #8]
    a8e8:	9806      	ldr	r0, [sp, #24]
    a8ea:	f7ff f91f 	bl	9b2c <Adc_Ipw_ReadGroupNoInt>
    a8ee:	4603      	mov	r3, r0
    a8f0:	f88d 301f 	strb.w	r3, [sp, #31]
    a8f4:	e019      	b.n	a92a <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a8f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a8fa:	4911      	ldr	r1, [pc, #68]	; (a940 <Adc_Ipw_ReadGroup+0xf6>)
    a8fc:	4613      	mov	r3, r2
    a8fe:	009b      	lsls	r3, r3, #2
    a900:	4413      	add	r3, r2
    a902:	009b      	lsls	r3, r3, #2
    a904:	440b      	add	r3, r1
    a906:	681b      	ldr	r3, [r3, #0]
    a908:	2b01      	cmp	r3, #1
    a90a:	d102      	bne.n	a912 <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    a90c:	2301      	movs	r3, #1
    a90e:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    a912:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a916:	2b00      	cmp	r3, #0
    a918:	d107      	bne.n	a92a <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    a91a:	f89d 200d 	ldrb.w	r2, [sp, #13]
    a91e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a922:	9902      	ldr	r1, [sp, #8]
    a924:	4618      	mov	r0, r3
    a926:	f7ff f949 	bl	9bbc <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    a92a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a92e:	4618      	mov	r0, r3
    a930:	b009      	add	sp, #36	; 0x24
    a932:	f85d fb04 	ldr.w	pc, [sp], #4
    a936:	bf00      	nop
    a938:	1fff8d18 	.word	0x1fff8d18
    a93c:	1fff8d44 	.word	0x1fff8d44
    a940:	1fff8d1c 	.word	0x1fff8d1c

0000a944 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    a944:	b500      	push	{lr}
    a946:	b085      	sub	sp, #20
    a948:	4603      	mov	r3, r0
    a94a:	9100      	str	r1, [sp, #0]
    a94c:	f88d 3007 	strb.w	r3, [sp, #7]
    a950:	4613      	mov	r3, r2
    a952:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a956:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a95a:	4a0e      	ldr	r2, [pc, #56]	; (a994 <Adc_Ipw_Calibrate+0x50>)
    a95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a960:	681a      	ldr	r2, [r3, #0]
    a962:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a966:	4413      	add	r3, r2
    a968:	7c1b      	ldrb	r3, [r3, #16]
    a96a:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    a96e:	9b00      	ldr	r3, [sp, #0]
    a970:	2200      	movs	r2, #0
    a972:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    a974:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a978:	4618      	mov	r0, r3
    a97a:	f7fe fdb9 	bl	94f0 <Adc_Ip_DoCalibration>
    a97e:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    a980:	9b02      	ldr	r3, [sp, #8]
    a982:	2b00      	cmp	r3, #0
    a984:	d002      	beq.n	a98c <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    a986:	9b00      	ldr	r3, [sp, #0]
    a988:	2201      	movs	r2, #1
    a98a:	701a      	strb	r2, [r3, #0]
    }
}
    a98c:	bf00      	nop
    a98e:	b005      	add	sp, #20
    a990:	f85d fb04 	ldr.w	pc, [sp], #4
    a994:	1fff8d18 	.word	0x1fff8d18

0000a998 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    a998:	2300      	movs	r3, #0
}
    a99a:	4618      	mov	r0, r3
    a99c:	4770      	bx	lr
    a99e:	bf00      	nop

0000a9a0 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    a9a0:	b500      	push	{lr}
    a9a2:	b083      	sub	sp, #12
    a9a4:	4603      	mov	r3, r0
    a9a6:	460a      	mov	r2, r1
    a9a8:	f88d 3007 	strb.w	r3, [sp, #7]
    a9ac:	4613      	mov	r3, r2
    a9ae:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    a9b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9b6:	2100      	movs	r1, #0
    a9b8:	4618      	mov	r0, r3
    a9ba:	f7fe fff3 	bl	99a4 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a9be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9c2:	4a09      	ldr	r2, [pc, #36]	; (a9e8 <Adc_Ipw_UpdateQueue+0x48>)
    a9c4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a9c8:	b29b      	uxth	r3, r3
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d007      	beq.n	a9de <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    a9ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a9d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9d6:	4611      	mov	r1, r2
    a9d8:	4618      	mov	r0, r3
    a9da:	f7ff fdf1 	bl	a5c0 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    a9de:	bf00      	nop
    a9e0:	b003      	add	sp, #12
    a9e2:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e6:	bf00      	nop
    a9e8:	1fff8d44 	.word	0x1fff8d44

0000a9ec <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    a9ec:	b510      	push	{r4, lr}
    a9ee:	b08a      	sub	sp, #40	; 0x28
    a9f0:	4604      	mov	r4, r0
    a9f2:	4608      	mov	r0, r1
    a9f4:	4611      	mov	r1, r2
    a9f6:	461a      	mov	r2, r3
    a9f8:	4623      	mov	r3, r4
    a9fa:	f88d 300f 	strb.w	r3, [sp, #15]
    a9fe:	4603      	mov	r3, r0
    aa00:	f8ad 300c 	strh.w	r3, [sp, #12]
    aa04:	460b      	mov	r3, r1
    aa06:	f8ad 300a 	strh.w	r3, [sp, #10]
    aa0a:	4613      	mov	r3, r2
    aa0c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    aa10:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa14:	4a68      	ldr	r2, [pc, #416]	; (abb8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    aa16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa1a:	68da      	ldr	r2, [r3, #12]
    aa1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    aa20:	005b      	lsls	r3, r3, #1
    aa22:	4413      	add	r3, r2
    aa24:	881b      	ldrh	r3, [r3, #0]
    aa26:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    aa2a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aa2e:	4963      	ldr	r1, [pc, #396]	; (abbc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    aa30:	4613      	mov	r3, r2
    aa32:	009b      	lsls	r3, r3, #2
    aa34:	4413      	add	r3, r2
    aa36:	009b      	lsls	r3, r3, #2
    aa38:	440b      	add	r3, r1
    aa3a:	3310      	adds	r3, #16
    aa3c:	781b      	ldrb	r3, [r3, #0]
    aa3e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    aa42:	2300      	movs	r3, #0
    aa44:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    aa46:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa4a:	4a5b      	ldr	r2, [pc, #364]	; (abb8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    aa4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa50:	681a      	ldr	r2, [r3, #0]
    aa52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aa56:	4413      	add	r3, r2
    aa58:	7c1b      	ldrb	r3, [r3, #16]
    aa5a:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    aa5e:	2300      	movs	r3, #0
    aa60:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    aa64:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa68:	4a53      	ldr	r2, [pc, #332]	; (abb8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    aa6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa6e:	681b      	ldr	r3, [r3, #0]
    aa70:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    aa78:	695b      	ldr	r3, [r3, #20]
    aa7a:	4618      	mov	r0, r3
    aa7c:	f7ff fbe6 	bl	a24c <Adc_Ipw_CalculateNumsBitShift>
    aa80:	4603      	mov	r3, r0
    aa82:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    aa86:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa8a:	4a4b      	ldr	r2, [pc, #300]	; (abb8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    aa8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa90:	685a      	ldr	r2, [r3, #4]
    aa92:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    aa96:	2134      	movs	r1, #52	; 0x34
    aa98:	fb01 f303 	mul.w	r3, r1, r3
    aa9c:	4413      	add	r3, r2
    aa9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    aaa2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    aaa6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aaaa:	4a43      	ldr	r2, [pc, #268]	; (abb8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    aaac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab0:	685a      	ldr	r2, [r3, #4]
    aab2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    aab6:	2134      	movs	r1, #52	; 0x34
    aab8:	fb01 f303 	mul.w	r3, r1, r3
    aabc:	4413      	add	r3, r2
    aabe:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    aac0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    aac4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    aac8:	429a      	cmp	r2, r3
    aaca:	d870      	bhi.n	abae <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    aacc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    aad0:	f003 030f 	and.w	r3, r3, #15
    aad4:	b2db      	uxtb	r3, r3
    aad6:	2b00      	cmp	r3, #0
    aad8:	d104      	bne.n	aae4 <Adc_Ipw_CheckConversionChannels+0xf8>
    aada:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    aade:	3b10      	subs	r3, #16
    aae0:	b2db      	uxtb	r3, r3
    aae2:	e004      	b.n	aaee <Adc_Ipw_CheckConversionChannels+0x102>
    aae4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    aae8:	f023 030f 	bic.w	r3, r3, #15
    aaec:	b2db      	uxtb	r3, r3
    aaee:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    aaf2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aaf6:	4931      	ldr	r1, [pc, #196]	; (abbc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    aaf8:	4613      	mov	r3, r2
    aafa:	009b      	lsls	r3, r3, #2
    aafc:	4413      	add	r3, r2
    aafe:	009b      	lsls	r3, r3, #2
    ab00:	440b      	add	r3, r1
    ab02:	330c      	adds	r3, #12
    ab04:	6819      	ldr	r1, [r3, #0]
    ab06:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ab0a:	482c      	ldr	r0, [pc, #176]	; (abbc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ab0c:	4613      	mov	r3, r2
    ab0e:	009b      	lsls	r3, r3, #2
    ab10:	4413      	add	r3, r2
    ab12:	009b      	lsls	r3, r3, #2
    ab14:	4403      	add	r3, r0
    ab16:	3308      	adds	r3, #8
    ab18:	881b      	ldrh	r3, [r3, #0]
    ab1a:	b29b      	uxth	r3, r3
    ab1c:	005b      	lsls	r3, r3, #1
    ab1e:	440b      	add	r3, r1
    ab20:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    ab22:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ab26:	f89d 1013 	ldrb.w	r1, [sp, #19]
    ab2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ab2e:	4618      	mov	r0, r3
    ab30:	f7ff fe50 	bl	a7d4 <Adc_Ipw_CheckValidConversion>
    ab34:	4603      	mov	r3, r0
    ab36:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    ab3a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ab3e:	2b00      	cmp	r3, #0
    ab40:	d032      	beq.n	aba8 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    ab42:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ab46:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    ab4a:	e026      	b.n	ab9a <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    ab4c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ab50:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ab54:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ab58:	1ad3      	subs	r3, r2, r3
    ab5a:	b2db      	uxtb	r3, r3
    ab5c:	4619      	mov	r1, r3
    ab5e:	f7fe fcaf 	bl	94c0 <Adc_Ip_GetConvData>
    ab62:	4603      	mov	r3, r0
    ab64:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    ab68:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ab6c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    ab70:	fa02 f303 	lsl.w	r3, r2, r3
    ab74:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    ab78:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    ab7c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    ab80:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ab84:	9300      	str	r3, [sp, #0]
    ab86:	460b      	mov	r3, r1
    ab88:	9907      	ldr	r1, [sp, #28]
    ab8a:	9805      	ldr	r0, [sp, #20]
    ab8c:	f000 fa02 	bl	af94 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    ab90:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ab94:	3301      	adds	r3, #1
    ab96:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    ab9a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ab9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    aba2:	429a      	cmp	r2, r3
    aba4:	d3d2      	bcc.n	ab4c <Adc_Ipw_CheckConversionChannels+0x160>
    aba6:	e002      	b.n	abae <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    aba8:	2301      	movs	r3, #1
    abaa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    abae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    abb2:	4618      	mov	r0, r3
    abb4:	b00a      	add	sp, #40	; 0x28
    abb6:	bd10      	pop	{r4, pc}
    abb8:	1fff8d18 	.word	0x1fff8d18
    abbc:	1fff8d1c 	.word	0x1fff8d1c

0000abc0 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    abc0:	b500      	push	{lr}
    abc2:	b087      	sub	sp, #28
    abc4:	4603      	mov	r3, r0
    abc6:	f88d 300f 	strb.w	r3, [sp, #15]
    abca:	460b      	mov	r3, r1
    abcc:	f8ad 300c 	strh.w	r3, [sp, #12]
    abd0:	4613      	mov	r3, r2
    abd2:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    abd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    abda:	4a33      	ldr	r2, [pc, #204]	; (aca8 <Adc_Ipw_RestartConversion+0xe8>)
    abdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abe0:	68da      	ldr	r2, [r3, #12]
    abe2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    abe6:	005b      	lsls	r3, r3, #1
    abe8:	4413      	add	r3, r2
    abea:	881b      	ldrh	r3, [r3, #0]
    abec:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    abf0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    abf4:	4a2c      	ldr	r2, [pc, #176]	; (aca8 <Adc_Ipw_RestartConversion+0xe8>)
    abf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abfa:	681a      	ldr	r2, [r3, #0]
    abfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ac00:	4413      	add	r3, r2
    ac02:	7c1b      	ldrb	r3, [r3, #16]
    ac04:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    ac08:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac0c:	4a26      	ldr	r2, [pc, #152]	; (aca8 <Adc_Ipw_RestartConversion+0xe8>)
    ac0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac12:	685a      	ldr	r2, [r3, #4]
    ac14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ac18:	2134      	movs	r1, #52	; 0x34
    ac1a:	fb01 f303 	mul.w	r3, r1, r3
    ac1e:	4413      	add	r3, r2
    ac20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    ac24:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    ac28:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ac2c:	2b0f      	cmp	r3, #15
    ac2e:	d805      	bhi.n	ac3c <Adc_Ipw_RestartConversion+0x7c>
    ac30:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ac34:	f003 030f 	and.w	r3, r3, #15
    ac38:	b2db      	uxtb	r3, r3
    ac3a:	e000      	b.n	ac3e <Adc_Ipw_RestartConversion+0x7e>
    ac3c:	2310      	movs	r3, #16
    ac3e:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    ac42:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ac46:	2b10      	cmp	r3, #16
    ac48:	d811      	bhi.n	ac6e <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    ac4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ac4e:	4917      	ldr	r1, [pc, #92]	; (acac <Adc_Ipw_RestartConversion+0xec>)
    ac50:	4613      	mov	r3, r2
    ac52:	009b      	lsls	r3, r3, #2
    ac54:	4413      	add	r3, r2
    ac56:	009b      	lsls	r3, r3, #2
    ac58:	440b      	add	r3, r1
    ac5a:	3310      	adds	r3, #16
    ac5c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    ac60:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    ac62:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ac66:	4618      	mov	r0, r3
    ac68:	f000 fc68 	bl	b53c <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    ac6c:	e017      	b.n	ac9e <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    ac6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ac72:	490e      	ldr	r1, [pc, #56]	; (acac <Adc_Ipw_RestartConversion+0xec>)
    ac74:	4613      	mov	r3, r2
    ac76:	009b      	lsls	r3, r3, #2
    ac78:	4413      	add	r3, r2
    ac7a:	009b      	lsls	r3, r3, #2
    ac7c:	440b      	add	r3, r1
    ac7e:	3310      	adds	r3, #16
    ac80:	2200      	movs	r2, #0
    ac82:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    ac84:	f89d 2013 	ldrb.w	r2, [sp, #19]
    ac88:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ac8c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ac90:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac94:	9300      	str	r3, [sp, #0]
    ac96:	4613      	mov	r3, r2
    ac98:	220f      	movs	r2, #15
    ac9a:	f7ff fae1 	bl	a260 <Adc_Ipw_ConfigureConversion>
}
    ac9e:	bf00      	nop
    aca0:	b007      	add	sp, #28
    aca2:	f85d fb04 	ldr.w	pc, [sp], #4
    aca6:	bf00      	nop
    aca8:	1fff8d18 	.word	0x1fff8d18
    acac:	1fff8d1c 	.word	0x1fff8d1c

0000acb0 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    acb0:	b084      	sub	sp, #16
    acb2:	4603      	mov	r3, r0
    acb4:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    acb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    acbc:	4907      	ldr	r1, [pc, #28]	; (acdc <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    acbe:	4613      	mov	r3, r2
    acc0:	009b      	lsls	r3, r3, #2
    acc2:	4413      	add	r3, r2
    acc4:	009b      	lsls	r3, r3, #2
    acc6:	440b      	add	r3, r1
    acc8:	3308      	adds	r3, #8
    acca:	881b      	ldrh	r3, [r3, #0]
    accc:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    acd0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    acd4:	4618      	mov	r0, r3
    acd6:	b004      	add	sp, #16
    acd8:	4770      	bx	lr
    acda:	bf00      	nop
    acdc:	1fff8d1c 	.word	0x1fff8d1c

0000ace0 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    ace0:	b510      	push	{r4, lr}
    ace2:	b084      	sub	sp, #16
    ace4:	4604      	mov	r4, r0
    ace6:	4608      	mov	r0, r1
    ace8:	4611      	mov	r1, r2
    acea:	461a      	mov	r2, r3
    acec:	4623      	mov	r3, r4
    acee:	f88d 3007 	strb.w	r3, [sp, #7]
    acf2:	4603      	mov	r3, r0
    acf4:	f8ad 3004 	strh.w	r3, [sp, #4]
    acf8:	460b      	mov	r3, r1
    acfa:	f8ad 3002 	strh.w	r3, [sp, #2]
    acfe:	4613      	mov	r3, r2
    ad00:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ad04:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ad08:	4a4f      	ldr	r2, [pc, #316]	; (ae48 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    ad0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad0e:	68da      	ldr	r2, [r3, #12]
    ad10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ad14:	005b      	lsls	r3, r3, #1
    ad16:	4413      	add	r3, r2
    ad18:	881b      	ldrh	r3, [r3, #0]
    ad1a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    ad1e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ad22:	494a      	ldr	r1, [pc, #296]	; (ae4c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    ad24:	4613      	mov	r3, r2
    ad26:	009b      	lsls	r3, r3, #2
    ad28:	4413      	add	r3, r2
    ad2a:	009b      	lsls	r3, r3, #2
    ad2c:	440b      	add	r3, r1
    ad2e:	3304      	adds	r3, #4
    ad30:	2201      	movs	r2, #1
    ad32:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    ad34:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ad38:	4944      	ldr	r1, [pc, #272]	; (ae4c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    ad3a:	4613      	mov	r3, r2
    ad3c:	009b      	lsls	r3, r3, #2
    ad3e:	4413      	add	r3, r2
    ad40:	009b      	lsls	r3, r3, #2
    ad42:	440b      	add	r3, r1
    ad44:	681b      	ldr	r3, [r3, #0]
    ad46:	2b01      	cmp	r3, #1
    ad48:	d109      	bne.n	ad5e <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    ad4a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ad4e:	493f      	ldr	r1, [pc, #252]	; (ae4c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    ad50:	4613      	mov	r3, r2
    ad52:	009b      	lsls	r3, r3, #2
    ad54:	4413      	add	r3, r2
    ad56:	009b      	lsls	r3, r3, #2
    ad58:	440b      	add	r3, r1
    ad5a:	2202      	movs	r2, #2
    ad5c:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    ad5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ad62:	4618      	mov	r0, r3
    ad64:	f7ff ffa4 	bl	acb0 <Adc_Ipw_GetCurrentSampleCount>
    ad68:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    ad6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ad6e:	9a02      	ldr	r2, [sp, #8]
    ad70:	429a      	cmp	r2, r3
    ad72:	d35d      	bcc.n	ae30 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    ad74:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ad78:	4934      	ldr	r1, [pc, #208]	; (ae4c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    ad7a:	4613      	mov	r3, r2
    ad7c:	009b      	lsls	r3, r3, #2
    ad7e:	4413      	add	r3, r2
    ad80:	009b      	lsls	r3, r3, #2
    ad82:	440b      	add	r3, r1
    ad84:	2203      	movs	r2, #3
    ad86:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    ad88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ad8c:	4a2e      	ldr	r2, [pc, #184]	; (ae48 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    ad8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad92:	685a      	ldr	r2, [r3, #4]
    ad94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ad98:	2134      	movs	r1, #52	; 0x34
    ad9a:	fb01 f303 	mul.w	r3, r1, r3
    ad9e:	4413      	add	r3, r2
    ada0:	699b      	ldr	r3, [r3, #24]
    ada2:	2b00      	cmp	r3, #0
    ada4:	d117      	bne.n	add6 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    ada6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    adaa:	4a27      	ldr	r2, [pc, #156]	; (ae48 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    adac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adb0:	685a      	ldr	r2, [r3, #4]
    adb2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    adb6:	2134      	movs	r1, #52	; 0x34
    adb8:	fb01 f303 	mul.w	r3, r1, r3
    adbc:	4413      	add	r3, r2
    adbe:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    adc0:	2b01      	cmp	r3, #1
    adc2:	d108      	bne.n	add6 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    adc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    adc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    adcc:	4611      	mov	r1, r2
    adce:	4618      	mov	r0, r3
    add0:	f7ff fde6 	bl	a9a0 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    add4:	e035      	b.n	ae42 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    add6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    adda:	4a1b      	ldr	r2, [pc, #108]	; (ae48 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    addc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ade0:	685a      	ldr	r2, [r3, #4]
    ade2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ade6:	2134      	movs	r1, #52	; 0x34
    ade8:	fb01 f303 	mul.w	r3, r1, r3
    adec:	4413      	add	r3, r2
    adee:	689b      	ldr	r3, [r3, #8]
    adf0:	2b01      	cmp	r3, #1
    adf2:	d114      	bne.n	ae1e <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    adf4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    adf8:	4914      	ldr	r1, [pc, #80]	; (ae4c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    adfa:	4613      	mov	r3, r2
    adfc:	009b      	lsls	r3, r3, #2
    adfe:	4413      	add	r3, r2
    ae00:	009b      	lsls	r3, r3, #2
    ae02:	440b      	add	r3, r1
    ae04:	3308      	adds	r3, #8
    ae06:	2200      	movs	r2, #0
    ae08:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    ae0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ae0e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ae12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae16:	4618      	mov	r0, r3
    ae18:	f7ff fed2 	bl	abc0 <Adc_Ipw_RestartConversion>
}
    ae1c:	e011      	b.n	ae42 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    ae1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ae22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae26:	4611      	mov	r1, r2
    ae28:	4618      	mov	r0, r3
    ae2a:	f7ff fdb9 	bl	a9a0 <Adc_Ipw_UpdateQueue>
}
    ae2e:	e008      	b.n	ae42 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    ae30:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ae34:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ae38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae3c:	4618      	mov	r0, r3
    ae3e:	f7ff febf 	bl	abc0 <Adc_Ipw_RestartConversion>
}
    ae42:	bf00      	nop
    ae44:	b004      	add	sp, #16
    ae46:	bd10      	pop	{r4, pc}
    ae48:	1fff8d18 	.word	0x1fff8d18
    ae4c:	1fff8d1c 	.word	0x1fff8d1c

0000ae50 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    ae50:	b510      	push	{r4, lr}
    ae52:	b088      	sub	sp, #32
    ae54:	4604      	mov	r4, r0
    ae56:	4608      	mov	r0, r1
    ae58:	4611      	mov	r1, r2
    ae5a:	461a      	mov	r2, r3
    ae5c:	4623      	mov	r3, r4
    ae5e:	f88d 300f 	strb.w	r3, [sp, #15]
    ae62:	4603      	mov	r3, r0
    ae64:	f8ad 300c 	strh.w	r3, [sp, #12]
    ae68:	460b      	mov	r3, r1
    ae6a:	f88d 300e 	strb.w	r3, [sp, #14]
    ae6e:	4613      	mov	r3, r2
    ae70:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ae74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae78:	4a44      	ldr	r2, [pc, #272]	; (af8c <Adc_Ipw_EndConversion+0x13c>)
    ae7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7e:	68da      	ldr	r2, [r3, #12]
    ae80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ae84:	005b      	lsls	r3, r3, #1
    ae86:	4413      	add	r3, r2
    ae88:	881b      	ldrh	r3, [r3, #0]
    ae8a:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    ae8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae92:	4a3e      	ldr	r2, [pc, #248]	; (af8c <Adc_Ipw_EndConversion+0x13c>)
    ae94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae98:	685a      	ldr	r2, [r3, #4]
    ae9a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    ae9e:	2134      	movs	r1, #52	; 0x34
    aea0:	fb01 f303 	mul.w	r3, r1, r3
    aea4:	4413      	add	r3, r2
    aea6:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    aea8:	9b06      	ldr	r3, [sp, #24]
    aeaa:	8b9a      	ldrh	r2, [r3, #28]
    aeac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aeb0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    aeb4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    aeb8:	f7ff fd98 	bl	a9ec <Adc_Ipw_CheckConversionChannels>
    aebc:	4603      	mov	r3, r0
    aebe:	2b00      	cmp	r3, #0
    aec0:	d160      	bne.n	af84 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    aec2:	9b06      	ldr	r3, [sp, #24]
    aec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    aec8:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    aecc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aed0:	492f      	ldr	r1, [pc, #188]	; (af90 <Adc_Ipw_EndConversion+0x140>)
    aed2:	4613      	mov	r3, r2
    aed4:	009b      	lsls	r3, r3, #2
    aed6:	4413      	add	r3, r2
    aed8:	009b      	lsls	r3, r3, #2
    aeda:	440b      	add	r3, r1
    aedc:	3310      	adds	r3, #16
    aede:	781b      	ldrb	r3, [r3, #0]
    aee0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aee4:	429a      	cmp	r2, r3
    aee6:	d929      	bls.n	af3c <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    aee8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aeec:	4928      	ldr	r1, [pc, #160]	; (af90 <Adc_Ipw_EndConversion+0x140>)
    aeee:	4613      	mov	r3, r2
    aef0:	009b      	lsls	r3, r3, #2
    aef2:	4413      	add	r3, r2
    aef4:	009b      	lsls	r3, r3, #2
    aef6:	440b      	add	r3, r1
    aef8:	3310      	adds	r3, #16
    aefa:	781b      	ldrb	r3, [r3, #0]
    aefc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    af00:	1ad3      	subs	r3, r2, r3
    af02:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    af06:	f89d 3016 	ldrb.w	r3, [sp, #22]
    af0a:	2b0f      	cmp	r3, #15
    af0c:	d805      	bhi.n	af1a <Adc_Ipw_EndConversion+0xca>
    af0e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    af12:	f003 030f 	and.w	r3, r3, #15
    af16:	b2db      	uxtb	r3, r3
    af18:	e000      	b.n	af1c <Adc_Ipw_EndConversion+0xcc>
    af1a:	2310      	movs	r3, #16
    af1c:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    af20:	f89d 2015 	ldrb.w	r2, [sp, #21]
    af24:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    af28:	f89d 000f 	ldrb.w	r0, [sp, #15]
    af2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af30:	9300      	str	r3, [sp, #0]
    af32:	4613      	mov	r3, r2
    af34:	220f      	movs	r2, #15
    af36:	f7ff f993 	bl	a260 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    af3a:	e023      	b.n	af84 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    af3c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    af40:	4913      	ldr	r1, [pc, #76]	; (af90 <Adc_Ipw_EndConversion+0x140>)
    af42:	4613      	mov	r3, r2
    af44:	009b      	lsls	r3, r3, #2
    af46:	4413      	add	r3, r2
    af48:	009b      	lsls	r3, r3, #2
    af4a:	440b      	add	r3, r1
    af4c:	3308      	adds	r3, #8
    af4e:	881b      	ldrh	r3, [r3, #0]
    af50:	b29b      	uxth	r3, r3
    af52:	3301      	adds	r3, #1
    af54:	b298      	uxth	r0, r3
    af56:	490e      	ldr	r1, [pc, #56]	; (af90 <Adc_Ipw_EndConversion+0x140>)
    af58:	4613      	mov	r3, r2
    af5a:	009b      	lsls	r3, r3, #2
    af5c:	4413      	add	r3, r2
    af5e:	009b      	lsls	r3, r3, #2
    af60:	440b      	add	r3, r1
    af62:	3308      	adds	r3, #8
    af64:	4602      	mov	r2, r0
    af66:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    af68:	f89d 300e 	ldrb.w	r3, [sp, #14]
    af6c:	2b00      	cmp	r3, #0
    af6e:	d009      	beq.n	af84 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    af70:	9b06      	ldr	r3, [sp, #24]
    af72:	8b9a      	ldrh	r2, [r3, #28]
    af74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af78:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    af7c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    af80:	f7ff feae 	bl	ace0 <Adc_Ipw_UpdateSoftwareGroupState>
}
    af84:	bf00      	nop
    af86:	b008      	add	sp, #32
    af88:	bd10      	pop	{r4, pc}
    af8a:	bf00      	nop
    af8c:	1fff8d18 	.word	0x1fff8d18
    af90:	1fff8d1c 	.word	0x1fff8d1c

0000af94 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    af94:	b084      	sub	sp, #16
    af96:	9003      	str	r0, [sp, #12]
    af98:	9102      	str	r1, [sp, #8]
    af9a:	4611      	mov	r1, r2
    af9c:	461a      	mov	r2, r3
    af9e:	460b      	mov	r3, r1
    afa0:	f8ad 3006 	strh.w	r3, [sp, #6]
    afa4:	4613      	mov	r3, r2
    afa6:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    afaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    afae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    afb2:	fb02 f303 	mul.w	r3, r2, r3
    afb6:	005b      	lsls	r3, r3, #1
    afb8:	9a02      	ldr	r2, [sp, #8]
    afba:	4413      	add	r3, r2
    afbc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    afc0:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    afc2:	bf00      	nop
    afc4:	b004      	add	sp, #16
    afc6:	4770      	bx	lr

0000afc8 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    afc8:	b500      	push	{lr}
    afca:	b085      	sub	sp, #20
    afcc:	4603      	mov	r3, r0
    afce:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    afd2:	f7ff fce1 	bl	a998 <Adc_GetCoreID>
    afd6:	4603      	mov	r3, r0
    afd8:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    afdc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    afe0:	b2db      	uxtb	r3, r3
    afe2:	461a      	mov	r2, r3
    afe4:	4b14      	ldr	r3, [pc, #80]	; (b038 <Adc_Ipw_EndConversionNotification+0x70>)
    afe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    afea:	681a      	ldr	r2, [r3, #0]
    afec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aff0:	4413      	add	r3, r2
    aff2:	f893 3020 	ldrb.w	r3, [r3, #32]
    aff6:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    affa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    affe:	4a0f      	ldr	r2, [pc, #60]	; (b03c <Adc_Ipw_EndConversionNotification+0x74>)
    b000:	00db      	lsls	r3, r3, #3
    b002:	4413      	add	r3, r2
    b004:	885b      	ldrh	r3, [r3, #2]
    b006:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    b00a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b00e:	4a0b      	ldr	r2, [pc, #44]	; (b03c <Adc_Ipw_EndConversionNotification+0x74>)
    b010:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b014:	b29b      	uxth	r3, r3
    b016:	2b00      	cmp	r3, #0
    b018:	d009      	beq.n	b02e <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    b01a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b01e:	b2db      	uxtb	r3, r3
    b020:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b024:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b028:	2201      	movs	r2, #1
    b02a:	f7ff ff11 	bl	ae50 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    b02e:	bf00      	nop
    b030:	b005      	add	sp, #20
    b032:	f85d fb04 	ldr.w	pc, [sp], #4
    b036:	bf00      	nop
    b038:	1fff8d18 	.word	0x1fff8d18
    b03c:	1fff8d44 	.word	0x1fff8d44

0000b040 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    b040:	b500      	push	{lr}
    b042:	b085      	sub	sp, #20
    b044:	4603      	mov	r3, r0
    b046:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    b04a:	2300      	movs	r3, #0
    b04c:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b050:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b054:	4618      	mov	r0, r3
    b056:	f7ff ffb7 	bl	afc8 <Adc_Ipw_EndConversionNotification>
}
    b05a:	bf00      	nop
    b05c:	b005      	add	sp, #20
    b05e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b062 <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    b062:	b500      	push	{lr}
    b064:	b085      	sub	sp, #20
    b066:	4603      	mov	r3, r0
    b068:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    b06c:	2301      	movs	r3, #1
    b06e:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b072:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b076:	4618      	mov	r0, r3
    b078:	f7ff ffa6 	bl	afc8 <Adc_Ipw_EndConversionNotification>
}
    b07c:	bf00      	nop
    b07e:	b005      	add	sp, #20
    b080:	f85d fb04 	ldr.w	pc, [sp], #4

0000b084 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    b084:	b084      	sub	sp, #16
    b086:	9003      	str	r0, [sp, #12]
    b088:	9201      	str	r2, [sp, #4]
    b08a:	461a      	mov	r2, r3
    b08c:	460b      	mov	r3, r1
    b08e:	f88d 300b 	strb.w	r3, [sp, #11]
    b092:	4613      	mov	r3, r2
    b094:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    b098:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b09c:	2b00      	cmp	r3, #0
    b09e:	d016      	beq.n	b0ce <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    b0a0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b0a4:	9903      	ldr	r1, [sp, #12]
    b0a6:	4613      	mov	r3, r2
    b0a8:	009b      	lsls	r3, r3, #2
    b0aa:	4413      	add	r3, r2
    b0ac:	00db      	lsls	r3, r3, #3
    b0ae:	440b      	add	r3, r1
    b0b0:	3310      	adds	r3, #16
    b0b2:	6819      	ldr	r1, [r3, #0]
    b0b4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b0b8:	9b01      	ldr	r3, [sp, #4]
    b0ba:	4319      	orrs	r1, r3
    b0bc:	9803      	ldr	r0, [sp, #12]
    b0be:	4613      	mov	r3, r2
    b0c0:	009b      	lsls	r3, r3, #2
    b0c2:	4413      	add	r3, r2
    b0c4:	00db      	lsls	r3, r3, #3
    b0c6:	4403      	add	r3, r0
    b0c8:	3310      	adds	r3, #16
    b0ca:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    b0cc:	e016      	b.n	b0fc <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    b0ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b0d2:	9903      	ldr	r1, [sp, #12]
    b0d4:	4613      	mov	r3, r2
    b0d6:	009b      	lsls	r3, r3, #2
    b0d8:	4413      	add	r3, r2
    b0da:	00db      	lsls	r3, r3, #3
    b0dc:	440b      	add	r3, r1
    b0de:	3310      	adds	r3, #16
    b0e0:	6819      	ldr	r1, [r3, #0]
    b0e2:	9b01      	ldr	r3, [sp, #4]
    b0e4:	43db      	mvns	r3, r3
    b0e6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b0ea:	4019      	ands	r1, r3
    b0ec:	9803      	ldr	r0, [sp, #12]
    b0ee:	4613      	mov	r3, r2
    b0f0:	009b      	lsls	r3, r3, #2
    b0f2:	4413      	add	r3, r2
    b0f4:	00db      	lsls	r3, r3, #3
    b0f6:	4403      	add	r3, r0
    b0f8:	3310      	adds	r3, #16
    b0fa:	6019      	str	r1, [r3, #0]
}
    b0fc:	bf00      	nop
    b0fe:	b004      	add	sp, #16
    b100:	4770      	bx	lr

0000b102 <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    b102:	b082      	sub	sp, #8
    b104:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	681b      	ldr	r3, [r3, #0]
    b10a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    b10e:	9b01      	ldr	r3, [sp, #4]
    b110:	601a      	str	r2, [r3, #0]
}
    b112:	bf00      	nop
    b114:	b002      	add	sp, #8
    b116:	4770      	bx	lr

0000b118 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    b118:	b082      	sub	sp, #8
    b11a:	9001      	str	r0, [sp, #4]
    b11c:	460b      	mov	r3, r1
    b11e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    b122:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b126:	2b00      	cmp	r3, #0
    b128:	d006      	beq.n	b138 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    b12a:	9b01      	ldr	r3, [sp, #4]
    b12c:	681b      	ldr	r3, [r3, #0]
    b12e:	f043 0202 	orr.w	r2, r3, #2
    b132:	9b01      	ldr	r3, [sp, #4]
    b134:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    b136:	e005      	b.n	b144 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    b138:	9b01      	ldr	r3, [sp, #4]
    b13a:	681b      	ldr	r3, [r3, #0]
    b13c:	f023 0202 	bic.w	r2, r3, #2
    b140:	9b01      	ldr	r3, [sp, #4]
    b142:	601a      	str	r2, [r3, #0]
}
    b144:	bf00      	nop
    b146:	b002      	add	sp, #8
    b148:	4770      	bx	lr

0000b14a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b14a:	b086      	sub	sp, #24
    b14c:	9003      	str	r0, [sp, #12]
    b14e:	460b      	mov	r3, r1
    b150:	9201      	str	r2, [sp, #4]
    b152:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    b156:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b15a:	9903      	ldr	r1, [sp, #12]
    b15c:	4613      	mov	r3, r2
    b15e:	009b      	lsls	r3, r3, #2
    b160:	4413      	add	r3, r2
    b162:	00db      	lsls	r3, r3, #3
    b164:	440b      	add	r3, r1
    b166:	3310      	adds	r3, #16
    b168:	681b      	ldr	r3, [r3, #0]
    b16a:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    b16c:	9b05      	ldr	r3, [sp, #20]
    b16e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    b172:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    b174:	9b01      	ldr	r3, [sp, #4]
    b176:	781b      	ldrb	r3, [r3, #0]
    b178:	461a      	mov	r2, r3
    b17a:	9b05      	ldr	r3, [sp, #20]
    b17c:	4313      	orrs	r3, r2
    b17e:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    b180:	9b01      	ldr	r3, [sp, #4]
    b182:	785b      	ldrb	r3, [r3, #1]
    b184:	021b      	lsls	r3, r3, #8
    b186:	b29b      	uxth	r3, r3
    b188:	9a05      	ldr	r2, [sp, #20]
    b18a:	4313      	orrs	r3, r2
    b18c:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    b18e:	9b01      	ldr	r3, [sp, #4]
    b190:	789b      	ldrb	r3, [r3, #2]
    b192:	041b      	lsls	r3, r3, #16
    b194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b198:	9a05      	ldr	r2, [sp, #20]
    b19a:	4313      	orrs	r3, r2
    b19c:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    b19e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b1a2:	9903      	ldr	r1, [sp, #12]
    b1a4:	4613      	mov	r3, r2
    b1a6:	009b      	lsls	r3, r3, #2
    b1a8:	4413      	add	r3, r2
    b1aa:	00db      	lsls	r3, r3, #3
    b1ac:	440b      	add	r3, r1
    b1ae:	3310      	adds	r3, #16
    b1b0:	9a05      	ldr	r2, [sp, #20]
    b1b2:	601a      	str	r2, [r3, #0]
}
    b1b4:	bf00      	nop
    b1b6:	b006      	add	sp, #24
    b1b8:	4770      	bx	lr

0000b1ba <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    b1ba:	b082      	sub	sp, #8
    b1bc:	9001      	str	r0, [sp, #4]
    b1be:	460b      	mov	r3, r1
    b1c0:	f88d 3003 	strb.w	r3, [sp, #3]
    b1c4:	4613      	mov	r3, r2
    b1c6:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    b1ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1ce:	9901      	ldr	r1, [sp, #4]
    b1d0:	4613      	mov	r3, r2
    b1d2:	009b      	lsls	r3, r3, #2
    b1d4:	4413      	add	r3, r2
    b1d6:	00db      	lsls	r3, r3, #3
    b1d8:	440b      	add	r3, r1
    b1da:	3314      	adds	r3, #20
    b1dc:	6819      	ldr	r1, [r3, #0]
    b1de:	f8bd 3000 	ldrh.w	r3, [sp]
    b1e2:	041b      	lsls	r3, r3, #16
    b1e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b1e8:	43db      	mvns	r3, r3
    b1ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1ee:	4019      	ands	r1, r3
    b1f0:	9801      	ldr	r0, [sp, #4]
    b1f2:	4613      	mov	r3, r2
    b1f4:	009b      	lsls	r3, r3, #2
    b1f6:	4413      	add	r3, r2
    b1f8:	00db      	lsls	r3, r3, #3
    b1fa:	4403      	add	r3, r0
    b1fc:	3314      	adds	r3, #20
    b1fe:	6019      	str	r1, [r3, #0]
}
    b200:	bf00      	nop
    b202:	b002      	add	sp, #8
    b204:	4770      	bx	lr

0000b206 <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    b206:	b500      	push	{lr}
    b208:	b087      	sub	sp, #28
    b20a:	9001      	str	r0, [sp, #4]
    b20c:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b20e:	4a50      	ldr	r2, [pc, #320]	; (b350 <Pdb_Adc_Ip_Init+0x14a>)
    b210:	9b01      	ldr	r3, [sp, #4]
    b212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b216:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    b218:	2300      	movs	r3, #0
    b21a:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    b21c:	9b00      	ldr	r3, [sp, #0]
    b21e:	681b      	ldr	r3, [r3, #0]
    b220:	049b      	lsls	r3, r3, #18
    b222:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    b226:	9a04      	ldr	r2, [sp, #16]
    b228:	4313      	orrs	r3, r2
    b22a:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    b22c:	9b00      	ldr	r3, [sp, #0]
    b22e:	685b      	ldr	r3, [r3, #4]
    b230:	031b      	lsls	r3, r3, #12
    b232:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    b236:	9a04      	ldr	r2, [sp, #16]
    b238:	4313      	orrs	r3, r2
    b23a:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    b23c:	9b00      	ldr	r3, [sp, #0]
    b23e:	689b      	ldr	r3, [r3, #8]
    b240:	009b      	lsls	r3, r3, #2
    b242:	f003 030c 	and.w	r3, r3, #12
    b246:	9a04      	ldr	r2, [sp, #16]
    b248:	4313      	orrs	r3, r2
    b24a:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    b24c:	9b00      	ldr	r3, [sp, #0]
    b24e:	68db      	ldr	r3, [r3, #12]
    b250:	021b      	lsls	r3, r3, #8
    b252:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b256:	9a04      	ldr	r2, [sp, #16]
    b258:	4313      	orrs	r3, r2
    b25a:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    b25c:	9b00      	ldr	r3, [sp, #0]
    b25e:	7c1b      	ldrb	r3, [r3, #16]
    b260:	2b00      	cmp	r3, #0
    b262:	d003      	beq.n	b26c <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    b264:	9b04      	ldr	r3, [sp, #16]
    b266:	f043 0302 	orr.w	r3, r3, #2
    b26a:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    b26c:	9b00      	ldr	r3, [sp, #0]
    b26e:	7c5b      	ldrb	r3, [r3, #17]
    b270:	2b00      	cmp	r3, #0
    b272:	d003      	beq.n	b27c <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    b274:	9b04      	ldr	r3, [sp, #16]
    b276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b27a:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    b27c:	9b00      	ldr	r3, [sp, #0]
    b27e:	69db      	ldr	r3, [r3, #28]
    b280:	2b00      	cmp	r3, #0
    b282:	d003      	beq.n	b28c <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    b284:	9b04      	ldr	r3, [sp, #16]
    b286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b28a:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    b28c:	9b03      	ldr	r3, [sp, #12]
    b28e:	9a04      	ldr	r2, [sp, #16]
    b290:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    b292:	9b00      	ldr	r3, [sp, #0]
    b294:	8a5b      	ldrh	r3, [r3, #18]
    b296:	4619      	mov	r1, r3
    b298:	9801      	ldr	r0, [sp, #4]
    b29a:	f000 f98f 	bl	b5bc <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    b29e:	9b00      	ldr	r3, [sp, #0]
    b2a0:	7d1b      	ldrb	r3, [r3, #20]
    b2a2:	2b00      	cmp	r3, #0
    b2a4:	d03e      	beq.n	b324 <Pdb_Adc_Ip_Init+0x11e>
    b2a6:	9b00      	ldr	r3, [sp, #0]
    b2a8:	699b      	ldr	r3, [r3, #24]
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	d03a      	beq.n	b324 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b2ae:	2300      	movs	r3, #0
    b2b0:	f88d 3017 	strb.w	r3, [sp, #23]
    b2b4:	e030      	b.n	b318 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    b2b6:	9b00      	ldr	r3, [sp, #0]
    b2b8:	6999      	ldr	r1, [r3, #24]
    b2ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b2be:	4613      	mov	r3, r2
    b2c0:	009b      	lsls	r3, r3, #2
    b2c2:	4413      	add	r3, r2
    b2c4:	009b      	lsls	r3, r3, #2
    b2c6:	440b      	add	r3, r1
    b2c8:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    b2ca:	9b02      	ldr	r3, [sp, #8]
    b2cc:	7819      	ldrb	r1, [r3, #0]
    b2ce:	9b02      	ldr	r3, [sp, #8]
    b2d0:	3301      	adds	r3, #1
    b2d2:	461a      	mov	r2, r3
    b2d4:	9803      	ldr	r0, [sp, #12]
    b2d6:	f7ff ff38 	bl	b14a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b2da:	2300      	movs	r3, #0
    b2dc:	f88d 3016 	strb.w	r3, [sp, #22]
    b2e0:	e011      	b.n	b306 <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    b2e2:	9b02      	ldr	r3, [sp, #8]
    b2e4:	7819      	ldrb	r1, [r3, #0]
    b2e6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b2ea:	9a02      	ldr	r2, [sp, #8]
    b2ec:	005b      	lsls	r3, r3, #1
    b2ee:	4413      	add	r3, r2
    b2f0:	889b      	ldrh	r3, [r3, #4]
    b2f2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    b2f6:	9801      	ldr	r0, [sp, #4]
    b2f8:	f000 fa74 	bl	b7e4 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b2fc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b300:	3301      	adds	r3, #1
    b302:	f88d 3016 	strb.w	r3, [sp, #22]
    b306:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b30a:	2b07      	cmp	r3, #7
    b30c:	d9e9      	bls.n	b2e2 <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b30e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b312:	3301      	adds	r3, #1
    b314:	f88d 3017 	strb.w	r3, [sp, #23]
    b318:	9b00      	ldr	r3, [sp, #0]
    b31a:	7d1b      	ldrb	r3, [r3, #20]
    b31c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b320:	429a      	cmp	r2, r3
    b322:	d3c8      	bcc.n	b2b6 <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    b324:	9801      	ldr	r0, [sp, #4]
    b326:	f000 f89b 	bl	b460 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    b32a:	9801      	ldr	r0, [sp, #4]
    b32c:	f000 f92e 	bl	b58c <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    b330:	9b00      	ldr	r3, [sp, #0]
    b332:	69da      	ldr	r2, [r3, #28]
    b334:	4907      	ldr	r1, [pc, #28]	; (b354 <Pdb_Adc_Ip_Init+0x14e>)
    b336:	9b01      	ldr	r3, [sp, #4]
    b338:	00db      	lsls	r3, r3, #3
    b33a:	440b      	add	r3, r1
    b33c:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    b33e:	4a05      	ldr	r2, [pc, #20]	; (b354 <Pdb_Adc_Ip_Init+0x14e>)
    b340:	9b01      	ldr	r3, [sp, #4]
    b342:	2101      	movs	r1, #1
    b344:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b348:	bf00      	nop
    b34a:	b007      	add	sp, #28
    b34c:	f85d fb04 	ldr.w	pc, [sp], #4
    b350:	00016478 	.word	0x00016478
    b354:	1fff8dec 	.word	0x1fff8dec

0000b358 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    b358:	b500      	push	{lr}
    b35a:	b097      	sub	sp, #92	; 0x5c
    b35c:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    b35e:	2300      	movs	r3, #0
    b360:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    b362:	2300      	movs	r3, #0
    b364:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    b366:	2300      	movs	r3, #0
    b368:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    b36a:	2300      	movs	r3, #0
    b36c:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    b36e:	2300      	movs	r3, #0
    b370:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    b374:	2300      	movs	r3, #0
    b376:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    b37a:	2300      	movs	r3, #0
    b37c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    b380:	2302      	movs	r3, #2
    b382:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b386:	2300      	movs	r3, #0
    b388:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b38c:	e04d      	b.n	b42a <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    b38e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b392:	4613      	mov	r3, r2
    b394:	009b      	lsls	r3, r3, #2
    b396:	4413      	add	r3, r2
    b398:	009b      	lsls	r3, r3, #2
    b39a:	aa16      	add	r2, sp, #88	; 0x58
    b39c:	4413      	add	r3, r2
    b39e:	3b4c      	subs	r3, #76	; 0x4c
    b3a0:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b3a4:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    b3a6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b3aa:	4613      	mov	r3, r2
    b3ac:	009b      	lsls	r3, r3, #2
    b3ae:	4413      	add	r3, r2
    b3b0:	009b      	lsls	r3, r3, #2
    b3b2:	aa16      	add	r2, sp, #88	; 0x58
    b3b4:	4413      	add	r3, r2
    b3b6:	3b4b      	subs	r3, #75	; 0x4b
    b3b8:	2200      	movs	r2, #0
    b3ba:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    b3bc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b3c0:	4613      	mov	r3, r2
    b3c2:	009b      	lsls	r3, r3, #2
    b3c4:	4413      	add	r3, r2
    b3c6:	009b      	lsls	r3, r3, #2
    b3c8:	aa16      	add	r2, sp, #88	; 0x58
    b3ca:	4413      	add	r3, r2
    b3cc:	3b4a      	subs	r3, #74	; 0x4a
    b3ce:	2200      	movs	r2, #0
    b3d0:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    b3d2:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b3d6:	4613      	mov	r3, r2
    b3d8:	009b      	lsls	r3, r3, #2
    b3da:	4413      	add	r3, r2
    b3dc:	009b      	lsls	r3, r3, #2
    b3de:	aa16      	add	r2, sp, #88	; 0x58
    b3e0:	4413      	add	r3, r2
    b3e2:	3b49      	subs	r3, #73	; 0x49
    b3e4:	2200      	movs	r2, #0
    b3e6:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b3e8:	2300      	movs	r3, #0
    b3ea:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b3ee:	e013      	b.n	b418 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    b3f0:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b3f4:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    b3f8:	4613      	mov	r3, r2
    b3fa:	009b      	lsls	r3, r3, #2
    b3fc:	4413      	add	r3, r2
    b3fe:	005b      	lsls	r3, r3, #1
    b400:	440b      	add	r3, r1
    b402:	005b      	lsls	r3, r3, #1
    b404:	aa16      	add	r2, sp, #88	; 0x58
    b406:	4413      	add	r3, r2
    b408:	2200      	movs	r2, #0
    b40a:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b40e:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b412:	3301      	adds	r3, #1
    b414:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b418:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b41c:	2b07      	cmp	r3, #7
    b41e:	d9e7      	bls.n	b3f0 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b420:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b424:	3301      	adds	r3, #1
    b426:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b42a:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b42e:	2b01      	cmp	r3, #1
    b430:	d9ad      	bls.n	b38e <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    b432:	ab03      	add	r3, sp, #12
    b434:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    b436:	2300      	movs	r3, #0
    b438:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    b43a:	ab0d      	add	r3, sp, #52	; 0x34
    b43c:	4619      	mov	r1, r3
    b43e:	9801      	ldr	r0, [sp, #4]
    b440:	f7ff fee1 	bl	b206 <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    b444:	9801      	ldr	r0, [sp, #4]
    b446:	f000 f823 	bl	b490 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    b44a:	4a04      	ldr	r2, [pc, #16]	; (b45c <Pdb_Adc_Ip_DeInit+0x104>)
    b44c:	9b01      	ldr	r3, [sp, #4]
    b44e:	2100      	movs	r1, #0
    b450:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b454:	bf00      	nop
    b456:	b017      	add	sp, #92	; 0x5c
    b458:	f85d fb04 	ldr.w	pc, [sp], #4
    b45c:	1fff8dec 	.word	0x1fff8dec

0000b460 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    b460:	b500      	push	{lr}
    b462:	b085      	sub	sp, #20
    b464:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b466:	4a09      	ldr	r2, [pc, #36]	; (b48c <Pdb_Adc_Ip_Enable+0x2c>)
    b468:	9b01      	ldr	r3, [sp, #4]
    b46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b46e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    b470:	f004 ffd4 	bl	1041c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    b474:	9b03      	ldr	r3, [sp, #12]
    b476:	681b      	ldr	r3, [r3, #0]
    b478:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    b47c:	9b03      	ldr	r3, [sp, #12]
    b47e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    b480:	f004 fff8 	bl	10474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    b484:	bf00      	nop
    b486:	b005      	add	sp, #20
    b488:	f85d fb04 	ldr.w	pc, [sp], #4
    b48c:	00016478 	.word	0x00016478

0000b490 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    b490:	b500      	push	{lr}
    b492:	b085      	sub	sp, #20
    b494:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b496:	4a08      	ldr	r2, [pc, #32]	; (b4b8 <Pdb_Adc_Ip_Disable+0x28>)
    b498:	9b01      	ldr	r3, [sp, #4]
    b49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b49e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    b4a0:	f005 f80e 	bl	104c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b4a4:	9803      	ldr	r0, [sp, #12]
    b4a6:	f7ff fe2c 	bl	b102 <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    b4aa:	f005 f835 	bl	10518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    b4ae:	bf00      	nop
    b4b0:	b005      	add	sp, #20
    b4b2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4b6:	bf00      	nop
    b4b8:	00016478 	.word	0x00016478

0000b4bc <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    b4bc:	b500      	push	{lr}
    b4be:	b085      	sub	sp, #20
    b4c0:	9001      	str	r0, [sp, #4]
    b4c2:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b4c4:	4a0e      	ldr	r2, [pc, #56]	; (b500 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    b4c6:	9b01      	ldr	r3, [sp, #4]
    b4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4cc:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    b4ce:	f005 f849 	bl	10564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    b4d2:	9b03      	ldr	r3, [sp, #12]
    b4d4:	681b      	ldr	r3, [r3, #0]
    b4d6:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    b4d8:	9b02      	ldr	r3, [sp, #8]
    b4da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    b4de:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    b4e0:	9b00      	ldr	r3, [sp, #0]
    b4e2:	021b      	lsls	r3, r3, #8
    b4e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b4e8:	9a02      	ldr	r2, [sp, #8]
    b4ea:	4313      	orrs	r3, r2
    b4ec:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    b4ee:	9b03      	ldr	r3, [sp, #12]
    b4f0:	9a02      	ldr	r2, [sp, #8]
    b4f2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    b4f4:	f005 f862 	bl	105bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    b4f8:	bf00      	nop
    b4fa:	b005      	add	sp, #20
    b4fc:	f85d fb04 	ldr.w	pc, [sp], #4
    b500:	00016478 	.word	0x00016478

0000b504 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    b504:	b500      	push	{lr}
    b506:	b085      	sub	sp, #20
    b508:	9001      	str	r0, [sp, #4]
    b50a:	460b      	mov	r3, r1
    b50c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b510:	4a09      	ldr	r2, [pc, #36]	; (b538 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    b512:	9b01      	ldr	r3, [sp, #4]
    b514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b518:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    b51a:	f005 f875 	bl	10608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    b51e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b522:	4619      	mov	r1, r3
    b524:	9803      	ldr	r0, [sp, #12]
    b526:	f7ff fdf7 	bl	b118 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    b52a:	f005 f899 	bl	10660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    b52e:	bf00      	nop
    b530:	b005      	add	sp, #20
    b532:	f85d fb04 	ldr.w	pc, [sp], #4
    b536:	bf00      	nop
    b538:	00016478 	.word	0x00016478

0000b53c <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    b53c:	b500      	push	{lr}
    b53e:	b085      	sub	sp, #20
    b540:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b542:	4a09      	ldr	r2, [pc, #36]	; (b568 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    b544:	9b01      	ldr	r3, [sp, #4]
    b546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b54a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    b54c:	f005 f8ae 	bl	106ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    b550:	9b03      	ldr	r3, [sp, #12]
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    b558:	9b03      	ldr	r3, [sp, #12]
    b55a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    b55c:	f005 f8d2 	bl	10704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    b560:	bf00      	nop
    b562:	b005      	add	sp, #20
    b564:	f85d fb04 	ldr.w	pc, [sp], #4
    b568:	00016478 	.word	0x00016478

0000b56c <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    b56c:	b084      	sub	sp, #16
    b56e:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b570:	4a05      	ldr	r2, [pc, #20]	; (b588 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    b572:	9b01      	ldr	r3, [sp, #4]
    b574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b578:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    b57a:	9b03      	ldr	r3, [sp, #12]
    b57c:	689b      	ldr	r3, [r3, #8]
    b57e:	b29b      	uxth	r3, r3
}
    b580:	4618      	mov	r0, r3
    b582:	b004      	add	sp, #16
    b584:	4770      	bx	lr
    b586:	bf00      	nop
    b588:	00016478 	.word	0x00016478

0000b58c <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    b58c:	b500      	push	{lr}
    b58e:	b085      	sub	sp, #20
    b590:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b592:	4a09      	ldr	r2, [pc, #36]	; (b5b8 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    b594:	9b01      	ldr	r3, [sp, #4]
    b596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b59a:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    b59c:	f005 f8d8 	bl	10750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    b5a0:	9b03      	ldr	r3, [sp, #12]
    b5a2:	681b      	ldr	r3, [r3, #0]
    b5a4:	f043 0201 	orr.w	r2, r3, #1
    b5a8:	9b03      	ldr	r3, [sp, #12]
    b5aa:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    b5ac:	f005 f8fc 	bl	107a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    b5b0:	bf00      	nop
    b5b2:	b005      	add	sp, #20
    b5b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5b8:	00016478 	.word	0x00016478

0000b5bc <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    b5bc:	b500      	push	{lr}
    b5be:	b085      	sub	sp, #20
    b5c0:	9001      	str	r0, [sp, #4]
    b5c2:	460b      	mov	r3, r1
    b5c4:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b5c8:	4a0d      	ldr	r2, [pc, #52]	; (b600 <Pdb_Adc_Ip_SetModulus+0x44>)
    b5ca:	9b01      	ldr	r3, [sp, #4]
    b5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d0:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    b5d2:	f005 fb9f 	bl	10d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    b5d6:	9b03      	ldr	r3, [sp, #12]
    b5d8:	685b      	ldr	r3, [r3, #4]
    b5da:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    b5dc:	9b02      	ldr	r3, [sp, #8]
    b5de:	0c1b      	lsrs	r3, r3, #16
    b5e0:	041b      	lsls	r3, r3, #16
    b5e2:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    b5e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b5e8:	9a02      	ldr	r2, [sp, #8]
    b5ea:	4313      	orrs	r3, r2
    b5ec:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    b5ee:	9b03      	ldr	r3, [sp, #12]
    b5f0:	9a02      	ldr	r2, [sp, #8]
    b5f2:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    b5f4:	f005 fbba 	bl	10d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    b5f8:	bf00      	nop
    b5fa:	b005      	add	sp, #20
    b5fc:	f85d fb04 	ldr.w	pc, [sp], #4
    b600:	00016478 	.word	0x00016478

0000b604 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b604:	b500      	push	{lr}
    b606:	b087      	sub	sp, #28
    b608:	9003      	str	r0, [sp, #12]
    b60a:	460b      	mov	r3, r1
    b60c:	9201      	str	r2, [sp, #4]
    b60e:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b612:	4a0a      	ldr	r2, [pc, #40]	; (b63c <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    b614:	9b03      	ldr	r3, [sp, #12]
    b616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b61a:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    b61c:	f005 f93c 	bl	10898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    b620:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b624:	9a01      	ldr	r2, [sp, #4]
    b626:	4619      	mov	r1, r3
    b628:	9805      	ldr	r0, [sp, #20]
    b62a:	f7ff fd8e 	bl	b14a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    b62e:	f005 f95f 	bl	108f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    b632:	bf00      	nop
    b634:	b007      	add	sp, #28
    b636:	f85d fb04 	ldr.w	pc, [sp], #4
    b63a:	bf00      	nop
    b63c:	00016478 	.word	0x00016478

0000b640 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    b640:	b084      	sub	sp, #16
    b642:	9001      	str	r0, [sp, #4]
    b644:	460b      	mov	r3, r1
    b646:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b64a:	4a0c      	ldr	r2, [pc, #48]	; (b67c <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    b64c:	9b01      	ldr	r3, [sp, #4]
    b64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b652:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    b654:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b658:	9903      	ldr	r1, [sp, #12]
    b65a:	4613      	mov	r3, r2
    b65c:	009b      	lsls	r3, r3, #2
    b65e:	4413      	add	r3, r2
    b660:	00db      	lsls	r3, r3, #3
    b662:	440b      	add	r3, r1
    b664:	3314      	adds	r3, #20
    b666:	681b      	ldr	r3, [r3, #0]
    b668:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    b66a:	9b02      	ldr	r3, [sp, #8]
    b66c:	0c1b      	lsrs	r3, r3, #16
    b66e:	b2db      	uxtb	r3, r3
    b670:	9302      	str	r3, [sp, #8]

    return Result;
    b672:	9b02      	ldr	r3, [sp, #8]
}
    b674:	4618      	mov	r0, r3
    b676:	b004      	add	sp, #16
    b678:	4770      	bx	lr
    b67a:	bf00      	nop
    b67c:	00016478 	.word	0x00016478

0000b680 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    b680:	b500      	push	{lr}
    b682:	b085      	sub	sp, #20
    b684:	9001      	str	r0, [sp, #4]
    b686:	460b      	mov	r3, r1
    b688:	f88d 3003 	strb.w	r3, [sp, #3]
    b68c:	4613      	mov	r3, r2
    b68e:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b692:	4a0a      	ldr	r2, [pc, #40]	; (b6bc <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    b694:	9b01      	ldr	r3, [sp, #4]
    b696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b69a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    b69c:	f005 fa96 	bl	10bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    b6a0:	f8bd 2000 	ldrh.w	r2, [sp]
    b6a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b6a8:	4619      	mov	r1, r3
    b6aa:	9803      	ldr	r0, [sp, #12]
    b6ac:	f7ff fd85 	bl	b1ba <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    b6b0:	f005 fab8 	bl	10c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    b6b4:	bf00      	nop
    b6b6:	b005      	add	sp, #20
    b6b8:	f85d fb04 	ldr.w	pc, [sp], #4
    b6bc:	00016478 	.word	0x00016478

0000b6c0 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    b6c0:	b500      	push	{lr}
    b6c2:	b085      	sub	sp, #20
    b6c4:	9001      	str	r0, [sp, #4]
    b6c6:	4608      	mov	r0, r1
    b6c8:	4611      	mov	r1, r2
    b6ca:	461a      	mov	r2, r3
    b6cc:	4603      	mov	r3, r0
    b6ce:	f88d 3003 	strb.w	r3, [sp, #3]
    b6d2:	460b      	mov	r3, r1
    b6d4:	f88d 3002 	strb.w	r3, [sp, #2]
    b6d8:	4613      	mov	r3, r2
    b6da:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6de:	4a10      	ldr	r2, [pc, #64]	; (b720 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    b6e0:	9b01      	ldr	r3, [sp, #4]
    b6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6e6:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b6e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b6ec:	2201      	movs	r2, #1
    b6ee:	fa02 f303 	lsl.w	r3, r2, r3
    b6f2:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    b6f4:	9b02      	ldr	r3, [sp, #8]
    b6f6:	041b      	lsls	r3, r3, #16
    b6f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b6fc:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    b6fe:	f005 f91d 	bl	1093c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b702:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b706:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b70a:	9a02      	ldr	r2, [sp, #8]
    b70c:	9803      	ldr	r0, [sp, #12]
    b70e:	f7ff fcb9 	bl	b084 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    b712:	f005 f93f 	bl	10994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    b716:	bf00      	nop
    b718:	b005      	add	sp, #20
    b71a:	f85d fb04 	ldr.w	pc, [sp], #4
    b71e:	bf00      	nop
    b720:	00016478 	.word	0x00016478

0000b724 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    b724:	b500      	push	{lr}
    b726:	b085      	sub	sp, #20
    b728:	9001      	str	r0, [sp, #4]
    b72a:	4608      	mov	r0, r1
    b72c:	4611      	mov	r1, r2
    b72e:	461a      	mov	r2, r3
    b730:	4603      	mov	r3, r0
    b732:	f88d 3003 	strb.w	r3, [sp, #3]
    b736:	460b      	mov	r3, r1
    b738:	f88d 3002 	strb.w	r3, [sp, #2]
    b73c:	4613      	mov	r3, r2
    b73e:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b742:	4a0f      	ldr	r2, [pc, #60]	; (b780 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    b744:	9b01      	ldr	r3, [sp, #4]
    b746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b74a:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b74c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b750:	2201      	movs	r2, #1
    b752:	fa02 f303 	lsl.w	r3, r2, r3
    b756:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    b758:	9b02      	ldr	r3, [sp, #8]
    b75a:	b2db      	uxtb	r3, r3
    b75c:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    b75e:	f005 f93f 	bl	109e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b762:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b766:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b76a:	9a02      	ldr	r2, [sp, #8]
    b76c:	9803      	ldr	r0, [sp, #12]
    b76e:	f7ff fc89 	bl	b084 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    b772:	f005 f961 	bl	10a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    b776:	bf00      	nop
    b778:	b005      	add	sp, #20
    b77a:	f85d fb04 	ldr.w	pc, [sp], #4
    b77e:	bf00      	nop
    b780:	00016478 	.word	0x00016478

0000b784 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    b784:	b500      	push	{lr}
    b786:	b085      	sub	sp, #20
    b788:	9001      	str	r0, [sp, #4]
    b78a:	4608      	mov	r0, r1
    b78c:	4611      	mov	r1, r2
    b78e:	461a      	mov	r2, r3
    b790:	4603      	mov	r3, r0
    b792:	f88d 3003 	strb.w	r3, [sp, #3]
    b796:	460b      	mov	r3, r1
    b798:	f88d 3002 	strb.w	r3, [sp, #2]
    b79c:	4613      	mov	r3, r2
    b79e:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7a2:	4a0f      	ldr	r2, [pc, #60]	; (b7e0 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    b7a4:	9b01      	ldr	r3, [sp, #4]
    b7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7aa:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b7ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b7b0:	2201      	movs	r2, #1
    b7b2:	fa02 f303 	lsl.w	r3, r2, r3
    b7b6:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    b7b8:	9b02      	ldr	r3, [sp, #8]
    b7ba:	021b      	lsls	r3, r3, #8
    b7bc:	b29b      	uxth	r3, r3
    b7be:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    b7c0:	f005 f960 	bl	10a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b7c4:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b7c8:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b7cc:	9a02      	ldr	r2, [sp, #8]
    b7ce:	9803      	ldr	r0, [sp, #12]
    b7d0:	f7ff fc58 	bl	b084 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    b7d4:	f005 f982 	bl	10adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    b7d8:	bf00      	nop
    b7da:	b005      	add	sp, #20
    b7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b7e0:	00016478 	.word	0x00016478

0000b7e4 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    b7e4:	b410      	push	{r4}
    b7e6:	b085      	sub	sp, #20
    b7e8:	9001      	str	r0, [sp, #4]
    b7ea:	4608      	mov	r0, r1
    b7ec:	4611      	mov	r1, r2
    b7ee:	461a      	mov	r2, r3
    b7f0:	4603      	mov	r3, r0
    b7f2:	f88d 3003 	strb.w	r3, [sp, #3]
    b7f6:	460b      	mov	r3, r1
    b7f8:	f88d 3002 	strb.w	r3, [sp, #2]
    b7fc:	4613      	mov	r3, r2
    b7fe:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b802:	4a0c      	ldr	r2, [pc, #48]	; (b834 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    b804:	9b01      	ldr	r3, [sp, #4]
    b806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b80a:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    b80c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b810:	f89d 4002 	ldrb.w	r4, [sp, #2]
    b814:	f8bd 0000 	ldrh.w	r0, [sp]
    b818:	9903      	ldr	r1, [sp, #12]
    b81a:	4613      	mov	r3, r2
    b81c:	009b      	lsls	r3, r3, #2
    b81e:	4413      	add	r3, r2
    b820:	005b      	lsls	r3, r3, #1
    b822:	4423      	add	r3, r4
    b824:	3306      	adds	r3, #6
    b826:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    b82a:	bf00      	nop
    b82c:	b005      	add	sp, #20
    b82e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b832:	4770      	bx	lr
    b834:	00016478 	.word	0x00016478

0000b838 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    b838:	b500      	push	{lr}
    b83a:	b087      	sub	sp, #28
    b83c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b83e:	4a19      	ldr	r2, [pc, #100]	; (b8a4 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    b840:	9b01      	ldr	r3, [sp, #4]
    b842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b846:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    b848:	2300      	movs	r3, #0
    b84a:	f88d 300c 	strb.w	r3, [sp, #12]
    b84e:	2300      	movs	r3, #0
    b850:	f88d 300d 	strb.w	r3, [sp, #13]
    b854:	2300      	movs	r3, #0
    b856:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    b85a:	f004 ffcb 	bl	107f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b85e:	9804      	ldr	r0, [sp, #16]
    b860:	f7ff fc4f 	bl	b102 <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    b864:	2100      	movs	r1, #0
    b866:	9804      	ldr	r0, [sp, #16]
    b868:	f7ff fc56 	bl	b118 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    b86c:	f004 ffee 	bl	1084c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b870:	2300      	movs	r3, #0
    b872:	f88d 3017 	strb.w	r3, [sp, #23]
    b876:	e00b      	b.n	b890 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    b878:	aa03      	add	r2, sp, #12
    b87a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b87e:	4619      	mov	r1, r3
    b880:	9804      	ldr	r0, [sp, #16]
    b882:	f000 f899 	bl	b9b8 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b886:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b88a:	3301      	adds	r3, #1
    b88c:	f88d 3017 	strb.w	r3, [sp, #23]
    b890:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b894:	2b01      	cmp	r3, #1
    b896:	d9ef      	bls.n	b878 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    b898:	bf00      	nop
    b89a:	bf00      	nop
    b89c:	b007      	add	sp, #28
    b89e:	f85d fb04 	ldr.w	pc, [sp], #4
    b8a2:	bf00      	nop
    b8a4:	00016478 	.word	0x00016478

0000b8a8 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    b8a8:	b500      	push	{lr}
    b8aa:	b087      	sub	sp, #28
    b8ac:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8ae:	4a40      	ldr	r2, [pc, #256]	; (b9b0 <Pdb_Adc_Ip_IRQHandler+0x108>)
    b8b0:	9b01      	ldr	r3, [sp, #4]
    b8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8b6:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    b8b8:	4a3e      	ldr	r2, [pc, #248]	; (b9b4 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b8ba:	9b01      	ldr	r3, [sp, #4]
    b8bc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d04d      	beq.n	b960 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    b8c4:	9b04      	ldr	r3, [sp, #16]
    b8c6:	681b      	ldr	r3, [r3, #0]
    b8c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    b8cc:	2b00      	cmp	r3, #0
    b8ce:	d06a      	beq.n	b9a6 <Pdb_Adc_Ip_IRQHandler+0xfe>
    b8d0:	4a38      	ldr	r2, [pc, #224]	; (b9b4 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b8d2:	9b01      	ldr	r3, [sp, #4]
    b8d4:	00db      	lsls	r3, r3, #3
    b8d6:	4413      	add	r3, r2
    b8d8:	685b      	ldr	r3, [r3, #4]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d063      	beq.n	b9a6 <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b8de:	2300      	movs	r3, #0
    b8e0:	f88d 3017 	strb.w	r3, [sp, #23]
    b8e4:	e037      	b.n	b956 <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    b8e6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b8ea:	9904      	ldr	r1, [sp, #16]
    b8ec:	4613      	mov	r3, r2
    b8ee:	009b      	lsls	r3, r3, #2
    b8f0:	4413      	add	r3, r2
    b8f2:	00db      	lsls	r3, r3, #3
    b8f4:	440b      	add	r3, r1
    b8f6:	3314      	adds	r3, #20
    b8f8:	681b      	ldr	r3, [r3, #0]
    b8fa:	b29b      	uxth	r3, r3
    b8fc:	b2db      	uxtb	r3, r3
    b8fe:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    b902:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b906:	2b00      	cmp	r3, #0
    b908:	d020      	beq.n	b94c <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b90a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b90e:	9904      	ldr	r1, [sp, #16]
    b910:	4613      	mov	r3, r2
    b912:	009b      	lsls	r3, r3, #2
    b914:	4413      	add	r3, r2
    b916:	00db      	lsls	r3, r3, #3
    b918:	440b      	add	r3, r1
    b91a:	3314      	adds	r3, #20
    b91c:	681b      	ldr	r3, [r3, #0]
    b91e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b926:	9804      	ldr	r0, [sp, #16]
    b928:	4613      	mov	r3, r2
    b92a:	009b      	lsls	r3, r3, #2
    b92c:	4413      	add	r3, r2
    b92e:	00db      	lsls	r3, r3, #3
    b930:	4403      	add	r3, r0
    b932:	3314      	adds	r3, #20
    b934:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    b936:	4a1f      	ldr	r2, [pc, #124]	; (b9b4 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b938:	9b01      	ldr	r3, [sp, #4]
    b93a:	00db      	lsls	r3, r3, #3
    b93c:	4413      	add	r3, r2
    b93e:	685b      	ldr	r3, [r3, #4]
    b940:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b944:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b948:	4610      	mov	r0, r2
    b94a:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b94c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b950:	3301      	adds	r3, #1
    b952:	f88d 3017 	strb.w	r3, [sp, #23]
    b956:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b95a:	2b01      	cmp	r3, #1
    b95c:	d9c3      	bls.n	b8e6 <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    b95e:	e022      	b.n	b9a6 <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b960:	2300      	movs	r3, #0
    b962:	f88d 3017 	strb.w	r3, [sp, #23]
    b966:	e01a      	b.n	b99e <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b968:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b96c:	9904      	ldr	r1, [sp, #16]
    b96e:	4613      	mov	r3, r2
    b970:	009b      	lsls	r3, r3, #2
    b972:	4413      	add	r3, r2
    b974:	00db      	lsls	r3, r3, #3
    b976:	440b      	add	r3, r1
    b978:	3314      	adds	r3, #20
    b97a:	681b      	ldr	r3, [r3, #0]
    b97c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b980:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b984:	9804      	ldr	r0, [sp, #16]
    b986:	4613      	mov	r3, r2
    b988:	009b      	lsls	r3, r3, #2
    b98a:	4413      	add	r3, r2
    b98c:	00db      	lsls	r3, r3, #3
    b98e:	4403      	add	r3, r0
    b990:	3314      	adds	r3, #20
    b992:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b994:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b998:	3301      	adds	r3, #1
    b99a:	f88d 3017 	strb.w	r3, [sp, #23]
    b99e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b9a2:	2b01      	cmp	r3, #1
    b9a4:	d9e0      	bls.n	b968 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    b9a6:	bf00      	nop
    b9a8:	b007      	add	sp, #28
    b9aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b9ae:	bf00      	nop
    b9b0:	00016478 	.word	0x00016478
    b9b4:	1fff8dec 	.word	0x1fff8dec

0000b9b8 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    b9b8:	b500      	push	{lr}
    b9ba:	b085      	sub	sp, #20
    b9bc:	9003      	str	r0, [sp, #12]
    b9be:	460b      	mov	r3, r1
    b9c0:	9201      	str	r2, [sp, #4]
    b9c2:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    b9c6:	f005 f8af 	bl	10b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    b9ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9ce:	9a01      	ldr	r2, [sp, #4]
    b9d0:	4619      	mov	r1, r3
    b9d2:	9803      	ldr	r0, [sp, #12]
    b9d4:	f7ff fbb9 	bl	b14a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    b9d8:	f005 f8d2 	bl	10b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    b9dc:	f005 f948 	bl	10c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    b9e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9e4:	22ff      	movs	r2, #255	; 0xff
    b9e6:	4619      	mov	r1, r3
    b9e8:	9803      	ldr	r0, [sp, #12]
    b9ea:	f7ff fbe6 	bl	b1ba <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b9ee:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b9f2:	9903      	ldr	r1, [sp, #12]
    b9f4:	4613      	mov	r3, r2
    b9f6:	009b      	lsls	r3, r3, #2
    b9f8:	4413      	add	r3, r2
    b9fa:	00db      	lsls	r3, r3, #3
    b9fc:	440b      	add	r3, r1
    b9fe:	3314      	adds	r3, #20
    ba00:	681b      	ldr	r3, [r3, #0]
    ba02:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ba06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ba0a:	9803      	ldr	r0, [sp, #12]
    ba0c:	4613      	mov	r3, r2
    ba0e:	009b      	lsls	r3, r3, #2
    ba10:	4413      	add	r3, r2
    ba12:	00db      	lsls	r3, r3, #3
    ba14:	4403      	add	r3, r0
    ba16:	3314      	adds	r3, #20
    ba18:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    ba1a:	f005 f955 	bl	10cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    ba1e:	bf00      	nop
    ba20:	b005      	add	sp, #20
    ba22:	f85d fb04 	ldr.w	pc, [sp], #4
    ba26:	bf00      	nop

0000ba28 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    ba28:	b082      	sub	sp, #8
    ba2a:	9001      	str	r0, [sp, #4]
    ba2c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    ba2e:	9b01      	ldr	r3, [sp, #4]
    ba30:	681b      	ldr	r3, [r3, #0]
    ba32:	f023 0207 	bic.w	r2, r3, #7
    ba36:	9b00      	ldr	r3, [sp, #0]
    ba38:	f003 0307 	and.w	r3, r3, #7
    ba3c:	431a      	orrs	r2, r3
    ba3e:	9b01      	ldr	r3, [sp, #4]
    ba40:	601a      	str	r2, [r3, #0]
}
    ba42:	bf00      	nop
    ba44:	b002      	add	sp, #8
    ba46:	4770      	bx	lr

0000ba48 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    ba48:	b082      	sub	sp, #8
    ba4a:	9001      	str	r0, [sp, #4]
    ba4c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    ba4e:	9b01      	ldr	r3, [sp, #4]
    ba50:	681b      	ldr	r3, [r3, #0]
    ba52:	f023 0218 	bic.w	r2, r3, #24
    ba56:	9b00      	ldr	r3, [sp, #0]
    ba58:	00db      	lsls	r3, r3, #3
    ba5a:	f003 0318 	and.w	r3, r3, #24
    ba5e:	431a      	orrs	r2, r3
    ba60:	9b01      	ldr	r3, [sp, #4]
    ba62:	601a      	str	r2, [r3, #0]
}
    ba64:	bf00      	nop
    ba66:	b002      	add	sp, #8
    ba68:	4770      	bx	lr

0000ba6a <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    ba6a:	b082      	sub	sp, #8
    ba6c:	9001      	str	r0, [sp, #4]
    ba6e:	460b      	mov	r3, r1
    ba70:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    ba74:	9b01      	ldr	r3, [sp, #4]
    ba76:	681b      	ldr	r3, [r3, #0]
    ba78:	f023 0320 	bic.w	r3, r3, #32
    ba7c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba80:	2a00      	cmp	r2, #0
    ba82:	d001      	beq.n	ba88 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    ba84:	2220      	movs	r2, #32
    ba86:	e000      	b.n	ba8a <Ftm_Pwm_Ip_SetCpwms+0x20>
    ba88:	2200      	movs	r2, #0
    ba8a:	431a      	orrs	r2, r3
    ba8c:	9b01      	ldr	r3, [sp, #4]
    ba8e:	601a      	str	r2, [r3, #0]
}
    ba90:	bf00      	nop
    ba92:	b002      	add	sp, #8
    ba94:	4770      	bx	lr

0000ba96 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    ba96:	b082      	sub	sp, #8
    ba98:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    ba9a:	9b01      	ldr	r3, [sp, #4]
    ba9c:	681b      	ldr	r3, [r3, #0]
    ba9e:	f003 0320 	and.w	r3, r3, #32
    baa2:	2b00      	cmp	r3, #0
    baa4:	bf14      	ite	ne
    baa6:	2301      	movne	r3, #1
    baa8:	2300      	moveq	r3, #0
    baaa:	b2db      	uxtb	r3, r3
}
    baac:	4618      	mov	r0, r3
    baae:	b002      	add	sp, #8
    bab0:	4770      	bx	lr

0000bab2 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    bab2:	b082      	sub	sp, #8
    bab4:	9001      	str	r0, [sp, #4]
    bab6:	460b      	mov	r3, r1
    bab8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    babc:	9b01      	ldr	r3, [sp, #4]
    babe:	681b      	ldr	r3, [r3, #0]
    bac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bac4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bac8:	2a00      	cmp	r2, #0
    baca:	d002      	beq.n	bad2 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    bacc:	f44f 7280 	mov.w	r2, #256	; 0x100
    bad0:	e000      	b.n	bad4 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    bad2:	2200      	movs	r2, #0
    bad4:	431a      	orrs	r2, r3
    bad6:	9b01      	ldr	r3, [sp, #4]
    bad8:	601a      	str	r2, [r3, #0]
}
    bada:	bf00      	nop
    badc:	b002      	add	sp, #8
    bade:	4770      	bx	lr

0000bae0 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bae0:	b082      	sub	sp, #8
    bae2:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    bae4:	9b01      	ldr	r3, [sp, #4]
    bae6:	681b      	ldr	r3, [r3, #0]
    bae8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    baec:	9b01      	ldr	r3, [sp, #4]
    baee:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    baf0:	bf00      	nop
    baf2:	b002      	add	sp, #8
    baf4:	4770      	bx	lr

0000baf6 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    baf6:	b082      	sub	sp, #8
    baf8:	9001      	str	r0, [sp, #4]
    bafa:	460b      	mov	r3, r1
    bafc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    bb00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bb04:	3310      	adds	r3, #16
    bb06:	2201      	movs	r2, #1
    bb08:	409a      	lsls	r2, r3
    bb0a:	9b01      	ldr	r3, [sp, #4]
    bb0c:	681b      	ldr	r3, [r3, #0]
    bb0e:	431a      	orrs	r2, r3
    bb10:	9b01      	ldr	r3, [sp, #4]
    bb12:	601a      	str	r2, [r3, #0]
}
    bb14:	bf00      	nop
    bb16:	b002      	add	sp, #8
    bb18:	4770      	bx	lr

0000bb1a <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    bb1a:	b082      	sub	sp, #8
    bb1c:	9001      	str	r0, [sp, #4]
    bb1e:	460b      	mov	r3, r1
    bb20:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    bb24:	9b01      	ldr	r3, [sp, #4]
    bb26:	685b      	ldr	r3, [r3, #4]
    bb28:	0c1b      	lsrs	r3, r3, #16
    bb2a:	041b      	lsls	r3, r3, #16
    bb2c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bb30:	431a      	orrs	r2, r3
    bb32:	9b01      	ldr	r3, [sp, #4]
    bb34:	605a      	str	r2, [r3, #4]
}
    bb36:	bf00      	nop
    bb38:	b002      	add	sp, #8
    bb3a:	4770      	bx	lr

0000bb3c <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    bb3c:	b082      	sub	sp, #8
    bb3e:	9001      	str	r0, [sp, #4]
    bb40:	460b      	mov	r3, r1
    bb42:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    bb46:	9b01      	ldr	r3, [sp, #4]
    bb48:	689b      	ldr	r3, [r3, #8]
    bb4a:	0c1b      	lsrs	r3, r3, #16
    bb4c:	041b      	lsls	r3, r3, #16
    bb4e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bb52:	431a      	orrs	r2, r3
    bb54:	9b01      	ldr	r3, [sp, #4]
    bb56:	609a      	str	r2, [r3, #8]
}
    bb58:	bf00      	nop
    bb5a:	b002      	add	sp, #8
    bb5c:	4770      	bx	lr

0000bb5e <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    bb5e:	b084      	sub	sp, #16
    bb60:	9001      	str	r0, [sp, #4]
    bb62:	460b      	mov	r3, r1
    bb64:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    bb68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bb6c:	9a01      	ldr	r2, [sp, #4]
    bb6e:	3301      	adds	r3, #1
    bb70:	00db      	lsls	r3, r3, #3
    bb72:	4413      	add	r3, r2
    bb74:	685b      	ldr	r3, [r3, #4]
    bb76:	089b      	lsrs	r3, r3, #2
    bb78:	b2db      	uxtb	r3, r3
    bb7a:	f003 0301 	and.w	r3, r3, #1
    bb7e:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    bb82:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bb86:	9a01      	ldr	r2, [sp, #4]
    bb88:	3301      	adds	r3, #1
    bb8a:	00db      	lsls	r3, r3, #3
    bb8c:	4413      	add	r3, r2
    bb8e:	685b      	ldr	r3, [r3, #4]
    bb90:	08db      	lsrs	r3, r3, #3
    bb92:	b2db      	uxtb	r3, r3
    bb94:	005b      	lsls	r3, r3, #1
    bb96:	b2db      	uxtb	r3, r3
    bb98:	f003 0302 	and.w	r3, r3, #2
    bb9c:	b2da      	uxtb	r2, r3
    bb9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bba2:	4313      	orrs	r3, r2
    bba4:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    bba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bbac:	4618      	mov	r0, r3
    bbae:	b004      	add	sp, #16
    bbb0:	4770      	bx	lr

0000bbb2 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    bbb2:	b086      	sub	sp, #24
    bbb4:	9003      	str	r0, [sp, #12]
    bbb6:	460b      	mov	r3, r1
    bbb8:	9201      	str	r2, [sp, #4]
    bbba:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    bbbe:	9b01      	ldr	r3, [sp, #4]
    bbc0:	009b      	lsls	r3, r3, #2
    bbc2:	f003 0304 	and.w	r3, r3, #4
    bbc6:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    bbc8:	9b01      	ldr	r3, [sp, #4]
    bbca:	009b      	lsls	r3, r3, #2
    bbcc:	f003 0308 	and.w	r3, r3, #8
    bbd0:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    bbd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbd6:	9a03      	ldr	r2, [sp, #12]
    bbd8:	3301      	adds	r3, #1
    bbda:	00db      	lsls	r3, r3, #3
    bbdc:	4413      	add	r3, r2
    bbde:	685b      	ldr	r3, [r3, #4]
    bbe0:	f023 0104 	bic.w	r1, r3, #4
    bbe4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbe8:	9a05      	ldr	r2, [sp, #20]
    bbea:	430a      	orrs	r2, r1
    bbec:	9903      	ldr	r1, [sp, #12]
    bbee:	3301      	adds	r3, #1
    bbf0:	00db      	lsls	r3, r3, #3
    bbf2:	440b      	add	r3, r1
    bbf4:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    bbf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbfa:	9a03      	ldr	r2, [sp, #12]
    bbfc:	3301      	adds	r3, #1
    bbfe:	00db      	lsls	r3, r3, #3
    bc00:	4413      	add	r3, r2
    bc02:	685b      	ldr	r3, [r3, #4]
    bc04:	f023 0108 	bic.w	r1, r3, #8
    bc08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc0c:	9a04      	ldr	r2, [sp, #16]
    bc0e:	430a      	orrs	r2, r1
    bc10:	9903      	ldr	r1, [sp, #12]
    bc12:	3301      	adds	r3, #1
    bc14:	00db      	lsls	r3, r3, #3
    bc16:	440b      	add	r3, r1
    bc18:	605a      	str	r2, [r3, #4]
}
    bc1a:	bf00      	nop
    bc1c:	b006      	add	sp, #24
    bc1e:	4770      	bx	lr

0000bc20 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    bc20:	b086      	sub	sp, #24
    bc22:	9003      	str	r0, [sp, #12]
    bc24:	460b      	mov	r3, r1
    bc26:	9201      	str	r2, [sp, #4]
    bc28:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    bc2c:	9b01      	ldr	r3, [sp, #4]
    bc2e:	009b      	lsls	r3, r3, #2
    bc30:	f003 0310 	and.w	r3, r3, #16
    bc34:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    bc36:	9b01      	ldr	r3, [sp, #4]
    bc38:	009b      	lsls	r3, r3, #2
    bc3a:	f003 0320 	and.w	r3, r3, #32
    bc3e:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    bc40:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc44:	9a03      	ldr	r2, [sp, #12]
    bc46:	3301      	adds	r3, #1
    bc48:	00db      	lsls	r3, r3, #3
    bc4a:	4413      	add	r3, r2
    bc4c:	685b      	ldr	r3, [r3, #4]
    bc4e:	f023 0110 	bic.w	r1, r3, #16
    bc52:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc56:	9a05      	ldr	r2, [sp, #20]
    bc58:	430a      	orrs	r2, r1
    bc5a:	9903      	ldr	r1, [sp, #12]
    bc5c:	3301      	adds	r3, #1
    bc5e:	00db      	lsls	r3, r3, #3
    bc60:	440b      	add	r3, r1
    bc62:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    bc64:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc68:	9a03      	ldr	r2, [sp, #12]
    bc6a:	3301      	adds	r3, #1
    bc6c:	00db      	lsls	r3, r3, #3
    bc6e:	4413      	add	r3, r2
    bc70:	685b      	ldr	r3, [r3, #4]
    bc72:	f023 0120 	bic.w	r1, r3, #32
    bc76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc7a:	9a04      	ldr	r2, [sp, #16]
    bc7c:	430a      	orrs	r2, r1
    bc7e:	9903      	ldr	r1, [sp, #12]
    bc80:	3301      	adds	r3, #1
    bc82:	00db      	lsls	r3, r3, #3
    bc84:	440b      	add	r3, r1
    bc86:	605a      	str	r2, [r3, #4]
}
    bc88:	bf00      	nop
    bc8a:	b006      	add	sp, #24
    bc8c:	4770      	bx	lr

0000bc8e <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    bc8e:	b084      	sub	sp, #16
    bc90:	9001      	str	r0, [sp, #4]
    bc92:	460b      	mov	r3, r1
    bc94:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    bc98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bc9c:	9a01      	ldr	r2, [sp, #4]
    bc9e:	3301      	adds	r3, #1
    bca0:	00db      	lsls	r3, r3, #3
    bca2:	4413      	add	r3, r2
    bca4:	685b      	ldr	r3, [r3, #4]
    bca6:	091b      	lsrs	r3, r3, #4
    bca8:	b2db      	uxtb	r3, r3
    bcaa:	f003 0301 	and.w	r3, r3, #1
    bcae:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    bcb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bcb6:	9a01      	ldr	r2, [sp, #4]
    bcb8:	3301      	adds	r3, #1
    bcba:	00db      	lsls	r3, r3, #3
    bcbc:	4413      	add	r3, r2
    bcbe:	685b      	ldr	r3, [r3, #4]
    bcc0:	095b      	lsrs	r3, r3, #5
    bcc2:	b2db      	uxtb	r3, r3
    bcc4:	005b      	lsls	r3, r3, #1
    bcc6:	b2db      	uxtb	r3, r3
    bcc8:	f003 0302 	and.w	r3, r3, #2
    bccc:	b2da      	uxtb	r2, r3
    bcce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bcd2:	4313      	orrs	r3, r2
    bcd4:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    bcd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bcdc:	4618      	mov	r0, r3
    bcde:	b004      	add	sp, #16
    bce0:	4770      	bx	lr

0000bce2 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    bce2:	b082      	sub	sp, #8
    bce4:	9001      	str	r0, [sp, #4]
    bce6:	460b      	mov	r3, r1
    bce8:	f88d 3003 	strb.w	r3, [sp, #3]
    bcec:	4613      	mov	r3, r2
    bcee:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    bcf2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bcf6:	9a01      	ldr	r2, [sp, #4]
    bcf8:	3301      	adds	r3, #1
    bcfa:	00db      	lsls	r3, r3, #3
    bcfc:	4413      	add	r3, r2
    bcfe:	685b      	ldr	r3, [r3, #4]
    bd00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    bd04:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d001      	beq.n	bd10 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    bd0c:	2140      	movs	r1, #64	; 0x40
    bd0e:	e000      	b.n	bd12 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    bd10:	2100      	movs	r1, #0
    bd12:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd16:	430a      	orrs	r2, r1
    bd18:	9901      	ldr	r1, [sp, #4]
    bd1a:	3301      	adds	r3, #1
    bd1c:	00db      	lsls	r3, r3, #3
    bd1e:	440b      	add	r3, r1
    bd20:	605a      	str	r2, [r3, #4]
}
    bd22:	bf00      	nop
    bd24:	b002      	add	sp, #8
    bd26:	4770      	bx	lr

0000bd28 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    bd28:	b082      	sub	sp, #8
    bd2a:	9001      	str	r0, [sp, #4]
    bd2c:	460b      	mov	r3, r1
    bd2e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    bd32:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd36:	9a01      	ldr	r2, [sp, #4]
    bd38:	3301      	adds	r3, #1
    bd3a:	00db      	lsls	r3, r3, #3
    bd3c:	4413      	add	r3, r2
    bd3e:	685a      	ldr	r2, [r3, #4]
    bd40:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    bd48:	9901      	ldr	r1, [sp, #4]
    bd4a:	3301      	adds	r3, #1
    bd4c:	00db      	lsls	r3, r3, #3
    bd4e:	440b      	add	r3, r1
    bd50:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    bd52:	bf00      	nop
    bd54:	b002      	add	sp, #8
    bd56:	4770      	bx	lr

0000bd58 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    bd58:	b082      	sub	sp, #8
    bd5a:	9001      	str	r0, [sp, #4]
    bd5c:	460b      	mov	r3, r1
    bd5e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    bd62:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd66:	9a01      	ldr	r2, [sp, #4]
    bd68:	3301      	adds	r3, #1
    bd6a:	00db      	lsls	r3, r3, #3
    bd6c:	4413      	add	r3, r2
    bd6e:	685b      	ldr	r3, [r3, #4]
    bd70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bd74:	2b00      	cmp	r3, #0
    bd76:	bf14      	ite	ne
    bd78:	2301      	movne	r3, #1
    bd7a:	2300      	moveq	r3, #0
    bd7c:	b2db      	uxtb	r3, r3
}
    bd7e:	4618      	mov	r0, r3
    bd80:	b002      	add	sp, #8
    bd82:	4770      	bx	lr

0000bd84 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    bd84:	b082      	sub	sp, #8
    bd86:	9001      	str	r0, [sp, #4]
    bd88:	460b      	mov	r3, r1
    bd8a:	f88d 3003 	strb.w	r3, [sp, #3]
    bd8e:	4613      	mov	r3, r2
    bd90:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    bd94:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd98:	f8bd 2000 	ldrh.w	r2, [sp]
    bd9c:	9901      	ldr	r1, [sp, #4]
    bd9e:	3301      	adds	r3, #1
    bda0:	00db      	lsls	r3, r3, #3
    bda2:	440b      	add	r3, r1
    bda4:	609a      	str	r2, [r3, #8]
}
    bda6:	bf00      	nop
    bda8:	b002      	add	sp, #8
    bdaa:	4770      	bx	lr

0000bdac <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    bdac:	b082      	sub	sp, #8
    bdae:	9001      	str	r0, [sp, #4]
    bdb0:	460b      	mov	r3, r1
    bdb2:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    bdb6:	9b01      	ldr	r3, [sp, #4]
    bdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bdba:	0c1b      	lsrs	r3, r3, #16
    bdbc:	041b      	lsls	r3, r3, #16
    bdbe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bdc2:	431a      	orrs	r2, r3
    bdc4:	9b01      	ldr	r3, [sp, #4]
    bdc6:	64da      	str	r2, [r3, #76]	; 0x4c
}
    bdc8:	bf00      	nop
    bdca:	b002      	add	sp, #8
    bdcc:	4770      	bx	lr

0000bdce <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    bdce:	b082      	sub	sp, #8
    bdd0:	9001      	str	r0, [sp, #4]
    bdd2:	460b      	mov	r3, r1
    bdd4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    bdd8:	9b01      	ldr	r3, [sp, #4]
    bdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bddc:	f023 0301 	bic.w	r3, r3, #1
    bde0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bde4:	2a00      	cmp	r2, #0
    bde6:	d001      	beq.n	bdec <Ftm_Pwm_Ip_Enable+0x1e>
    bde8:	2201      	movs	r2, #1
    bdea:	e000      	b.n	bdee <Ftm_Pwm_Ip_Enable+0x20>
    bdec:	2200      	movs	r2, #0
    bdee:	431a      	orrs	r2, r3
    bdf0:	9b01      	ldr	r3, [sp, #4]
    bdf2:	655a      	str	r2, [r3, #84]	; 0x54
}
    bdf4:	bf00      	nop
    bdf6:	b002      	add	sp, #8
    bdf8:	4770      	bx	lr

0000bdfa <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    bdfa:	b082      	sub	sp, #8
    bdfc:	9001      	str	r0, [sp, #4]
    bdfe:	460b      	mov	r3, r1
    be00:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    be04:	9b01      	ldr	r3, [sp, #4]
    be06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    be08:	f023 0308 	bic.w	r3, r3, #8
    be0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    be10:	2a00      	cmp	r2, #0
    be12:	d001      	beq.n	be18 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    be14:	2208      	movs	r2, #8
    be16:	e000      	b.n	be1a <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    be18:	2200      	movs	r2, #0
    be1a:	431a      	orrs	r2, r3
    be1c:	9b01      	ldr	r3, [sp, #4]
    be1e:	655a      	str	r2, [r3, #84]	; 0x54
}
    be20:	bf00      	nop
    be22:	b002      	add	sp, #8
    be24:	4770      	bx	lr

0000be26 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    be26:	b082      	sub	sp, #8
    be28:	9001      	str	r0, [sp, #4]
    be2a:	460b      	mov	r3, r1
    be2c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    be30:	9b01      	ldr	r3, [sp, #4]
    be32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    be34:	f023 0301 	bic.w	r3, r3, #1
    be38:	f89d 2003 	ldrb.w	r2, [sp, #3]
    be3c:	2a00      	cmp	r2, #0
    be3e:	d001      	beq.n	be44 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    be40:	2201      	movs	r2, #1
    be42:	e000      	b.n	be46 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    be44:	2200      	movs	r2, #0
    be46:	431a      	orrs	r2, r3
    be48:	9b01      	ldr	r3, [sp, #4]
    be4a:	659a      	str	r2, [r3, #88]	; 0x58
}
    be4c:	bf00      	nop
    be4e:	b002      	add	sp, #8
    be50:	4770      	bx	lr

0000be52 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    be52:	b082      	sub	sp, #8
    be54:	9001      	str	r0, [sp, #4]
    be56:	460b      	mov	r3, r1
    be58:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    be5c:	9b01      	ldr	r3, [sp, #4]
    be5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    be60:	f023 0302 	bic.w	r3, r3, #2
    be64:	f89d 2003 	ldrb.w	r2, [sp, #3]
    be68:	2a00      	cmp	r2, #0
    be6a:	d001      	beq.n	be70 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    be6c:	2202      	movs	r2, #2
    be6e:	e000      	b.n	be72 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    be70:	2200      	movs	r2, #0
    be72:	431a      	orrs	r2, r3
    be74:	9b01      	ldr	r3, [sp, #4]
    be76:	659a      	str	r2, [r3, #88]	; 0x58
}
    be78:	bf00      	nop
    be7a:	b002      	add	sp, #8
    be7c:	4770      	bx	lr

0000be7e <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    be7e:	b082      	sub	sp, #8
    be80:	9001      	str	r0, [sp, #4]
    be82:	460b      	mov	r3, r1
    be84:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    be88:	9b01      	ldr	r3, [sp, #4]
    be8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    be8c:	f023 0308 	bic.w	r3, r3, #8
    be90:	f89d 2003 	ldrb.w	r2, [sp, #3]
    be94:	2a00      	cmp	r2, #0
    be96:	d001      	beq.n	be9c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    be98:	2208      	movs	r2, #8
    be9a:	e000      	b.n	be9e <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    be9c:	2200      	movs	r2, #0
    be9e:	431a      	orrs	r2, r3
    bea0:	9b01      	ldr	r3, [sp, #4]
    bea2:	659a      	str	r2, [r3, #88]	; 0x58
}
    bea4:	bf00      	nop
    bea6:	b002      	add	sp, #8
    bea8:	4770      	bx	lr

0000beaa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    beaa:	b082      	sub	sp, #8
    beac:	9001      	str	r0, [sp, #4]
    beae:	460b      	mov	r3, r1
    beb0:	f88d 3003 	strb.w	r3, [sp, #3]
    beb4:	4613      	mov	r3, r2
    beb6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    beba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bebe:	2b00      	cmp	r3, #0
    bec0:	d00a      	beq.n	bed8 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    bec2:	9b01      	ldr	r3, [sp, #4]
    bec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    bec6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    beca:	2110      	movs	r1, #16
    becc:	fa01 f303 	lsl.w	r3, r1, r3
    bed0:	431a      	orrs	r2, r3
    bed2:	9b01      	ldr	r3, [sp, #4]
    bed4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    bed6:	e00a      	b.n	beee <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    bed8:	9b01      	ldr	r3, [sp, #4]
    beda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    bedc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bee0:	2110      	movs	r1, #16
    bee2:	fa01 f303 	lsl.w	r3, r1, r3
    bee6:	43db      	mvns	r3, r3
    bee8:	401a      	ands	r2, r3
    beea:	9b01      	ldr	r3, [sp, #4]
    beec:	659a      	str	r2, [r3, #88]	; 0x58
}
    beee:	bf00      	nop
    bef0:	b002      	add	sp, #8
    bef2:	4770      	bx	lr

0000bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    bef4:	b082      	sub	sp, #8
    bef6:	9001      	str	r0, [sp, #4]
    bef8:	460b      	mov	r3, r1
    befa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    befe:	9b01      	ldr	r3, [sp, #4]
    bf00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    bf02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bf06:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bf0a:	2a00      	cmp	r2, #0
    bf0c:	d001      	beq.n	bf12 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    bf0e:	2280      	movs	r2, #128	; 0x80
    bf10:	e000      	b.n	bf14 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    bf12:	2200      	movs	r2, #0
    bf14:	431a      	orrs	r2, r3
    bf16:	9b01      	ldr	r3, [sp, #4]
    bf18:	659a      	str	r2, [r3, #88]	; 0x58
}
    bf1a:	bf00      	nop
    bf1c:	b002      	add	sp, #8
    bf1e:	4770      	bx	lr

0000bf20 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    bf20:	b084      	sub	sp, #16
    bf22:	9003      	str	r0, [sp, #12]
    bf24:	460b      	mov	r3, r1
    bf26:	9201      	str	r2, [sp, #4]
    bf28:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    bf2c:	9b01      	ldr	r3, [sp, #4]
    bf2e:	2b01      	cmp	r3, #1
    bf30:	d10a      	bne.n	bf48 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    bf32:	9b03      	ldr	r3, [sp, #12]
    bf34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    bf36:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bf3a:	2101      	movs	r1, #1
    bf3c:	fa01 f303 	lsl.w	r3, r1, r3
    bf40:	431a      	orrs	r2, r3
    bf42:	9b03      	ldr	r3, [sp, #12]
    bf44:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    bf46:	e00a      	b.n	bf5e <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    bf48:	9b03      	ldr	r3, [sp, #12]
    bf4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    bf4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bf50:	2101      	movs	r1, #1
    bf52:	fa01 f303 	lsl.w	r3, r1, r3
    bf56:	43db      	mvns	r3, r3
    bf58:	401a      	ands	r2, r3
    bf5a:	9b03      	ldr	r3, [sp, #12]
    bf5c:	65da      	str	r2, [r3, #92]	; 0x5c
}
    bf5e:	bf00      	nop
    bf60:	b004      	add	sp, #16
    bf62:	4770      	bx	lr

0000bf64 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    bf64:	b082      	sub	sp, #8
    bf66:	9001      	str	r0, [sp, #4]
    bf68:	460b      	mov	r3, r1
    bf6a:	f88d 3003 	strb.w	r3, [sp, #3]
    bf6e:	4613      	mov	r3, r2
    bf70:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    bf74:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d00a      	beq.n	bf92 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    bf7c:	9b01      	ldr	r3, [sp, #4]
    bf7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    bf80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf84:	2101      	movs	r1, #1
    bf86:	fa01 f303 	lsl.w	r3, r1, r3
    bf8a:	431a      	orrs	r2, r3
    bf8c:	9b01      	ldr	r3, [sp, #4]
    bf8e:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    bf90:	e00a      	b.n	bfa8 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    bf92:	9b01      	ldr	r3, [sp, #4]
    bf94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    bf96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf9a:	2101      	movs	r1, #1
    bf9c:	fa01 f303 	lsl.w	r3, r1, r3
    bfa0:	43db      	mvns	r3, r3
    bfa2:	401a      	ands	r2, r3
    bfa4:	9b01      	ldr	r3, [sp, #4]
    bfa6:	661a      	str	r2, [r3, #96]	; 0x60
}
    bfa8:	bf00      	nop
    bfaa:	b002      	add	sp, #8
    bfac:	4770      	bx	lr

0000bfae <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    bfae:	b082      	sub	sp, #8
    bfb0:	9001      	str	r0, [sp, #4]
    bfb2:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    bfb4:	9b01      	ldr	r3, [sp, #4]
    bfb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    bfb8:	9b00      	ldr	r3, [sp, #0]
    bfba:	43db      	mvns	r3, r3
    bfbc:	401a      	ands	r2, r3
    bfbe:	9b00      	ldr	r3, [sp, #0]
    bfc0:	431a      	orrs	r2, r3
    bfc2:	9b01      	ldr	r3, [sp, #4]
    bfc4:	661a      	str	r2, [r3, #96]	; 0x60
}
    bfc6:	bf00      	nop
    bfc8:	b002      	add	sp, #8
    bfca:	4770      	bx	lr

0000bfcc <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    bfcc:	b082      	sub	sp, #8
    bfce:	9001      	str	r0, [sp, #4]
    bfd0:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    bfd2:	9b01      	ldr	r3, [sp, #4]
    bfd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    bfd6:	9b00      	ldr	r3, [sp, #0]
    bfd8:	43db      	mvns	r3, r3
    bfda:	401a      	ands	r2, r3
    bfdc:	9b01      	ldr	r3, [sp, #4]
    bfde:	661a      	str	r2, [r3, #96]	; 0x60
}
    bfe0:	bf00      	nop
    bfe2:	b002      	add	sp, #8
    bfe4:	4770      	bx	lr

0000bfe6 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    bfe6:	b082      	sub	sp, #8
    bfe8:	9001      	str	r0, [sp, #4]
    bfea:	460b      	mov	r3, r1
    bfec:	f88d 3003 	strb.w	r3, [sp, #3]
    bff0:	4613      	mov	r3, r2
    bff2:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    bff6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bffa:	2b00      	cmp	r3, #0
    bffc:	d00b      	beq.n	c016 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    bffe:	9b01      	ldr	r3, [sp, #4]
    c000:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c002:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c006:	00db      	lsls	r3, r3, #3
    c008:	2101      	movs	r1, #1
    c00a:	fa01 f303 	lsl.w	r3, r1, r3
    c00e:	431a      	orrs	r2, r3
    c010:	9b01      	ldr	r3, [sp, #4]
    c012:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c014:	e00b      	b.n	c02e <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c016:	9b01      	ldr	r3, [sp, #4]
    c018:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c01a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c01e:	00db      	lsls	r3, r3, #3
    c020:	2101      	movs	r1, #1
    c022:	fa01 f303 	lsl.w	r3, r1, r3
    c026:	43db      	mvns	r3, r3
    c028:	401a      	ands	r2, r3
    c02a:	9b01      	ldr	r3, [sp, #4]
    c02c:	665a      	str	r2, [r3, #100]	; 0x64
}
    c02e:	bf00      	nop
    c030:	b002      	add	sp, #8
    c032:	4770      	bx	lr

0000c034 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    c034:	b082      	sub	sp, #8
    c036:	9001      	str	r0, [sp, #4]
    c038:	460b      	mov	r3, r1
    c03a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    c03e:	9b01      	ldr	r3, [sp, #4]
    c040:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c042:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c046:	00db      	lsls	r3, r3, #3
    c048:	fa22 f303 	lsr.w	r3, r2, r3
    c04c:	f003 0301 	and.w	r3, r3, #1
    c050:	2b00      	cmp	r3, #0
    c052:	bf14      	ite	ne
    c054:	2301      	movne	r3, #1
    c056:	2300      	moveq	r3, #0
    c058:	b2db      	uxtb	r3, r3
}
    c05a:	4618      	mov	r0, r3
    c05c:	b002      	add	sp, #8
    c05e:	4770      	bx	lr

0000c060 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    c060:	b082      	sub	sp, #8
    c062:	9001      	str	r0, [sp, #4]
    c064:	460b      	mov	r3, r1
    c066:	f88d 3003 	strb.w	r3, [sp, #3]
    c06a:	4613      	mov	r3, r2
    c06c:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    c070:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c074:	2b00      	cmp	r3, #0
    c076:	d00b      	beq.n	c090 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c078:	9b01      	ldr	r3, [sp, #4]
    c07a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c07c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c080:	00db      	lsls	r3, r3, #3
    c082:	2102      	movs	r1, #2
    c084:	fa01 f303 	lsl.w	r3, r1, r3
    c088:	431a      	orrs	r2, r3
    c08a:	9b01      	ldr	r3, [sp, #4]
    c08c:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c08e:	e00b      	b.n	c0a8 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c090:	9b01      	ldr	r3, [sp, #4]
    c092:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c094:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c098:	00db      	lsls	r3, r3, #3
    c09a:	2102      	movs	r1, #2
    c09c:	fa01 f303 	lsl.w	r3, r1, r3
    c0a0:	43db      	mvns	r3, r3
    c0a2:	401a      	ands	r2, r3
    c0a4:	9b01      	ldr	r3, [sp, #4]
    c0a6:	665a      	str	r2, [r3, #100]	; 0x64
}
    c0a8:	bf00      	nop
    c0aa:	b002      	add	sp, #8
    c0ac:	4770      	bx	lr

0000c0ae <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c0ae:	b082      	sub	sp, #8
    c0b0:	9001      	str	r0, [sp, #4]
    c0b2:	460b      	mov	r3, r1
    c0b4:	f88d 3003 	strb.w	r3, [sp, #3]
    c0b8:	4613      	mov	r3, r2
    c0ba:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c0be:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c0c2:	2b00      	cmp	r3, #0
    c0c4:	d00b      	beq.n	c0de <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c0c6:	9b01      	ldr	r3, [sp, #4]
    c0c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c0ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c0ce:	00db      	lsls	r3, r3, #3
    c0d0:	2110      	movs	r1, #16
    c0d2:	fa01 f303 	lsl.w	r3, r1, r3
    c0d6:	431a      	orrs	r2, r3
    c0d8:	9b01      	ldr	r3, [sp, #4]
    c0da:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c0dc:	e00b      	b.n	c0f6 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c0de:	9b01      	ldr	r3, [sp, #4]
    c0e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c0e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c0e6:	00db      	lsls	r3, r3, #3
    c0e8:	2110      	movs	r1, #16
    c0ea:	fa01 f303 	lsl.w	r3, r1, r3
    c0ee:	43db      	mvns	r3, r3
    c0f0:	401a      	ands	r2, r3
    c0f2:	9b01      	ldr	r3, [sp, #4]
    c0f4:	665a      	str	r2, [r3, #100]	; 0x64
}
    c0f6:	bf00      	nop
    c0f8:	b002      	add	sp, #8
    c0fa:	4770      	bx	lr

0000c0fc <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    c0fc:	b082      	sub	sp, #8
    c0fe:	9001      	str	r0, [sp, #4]
    c100:	460b      	mov	r3, r1
    c102:	f88d 3003 	strb.w	r3, [sp, #3]
    c106:	4613      	mov	r3, r2
    c108:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c10c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c110:	2b00      	cmp	r3, #0
    c112:	d00b      	beq.n	c12c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c114:	9b01      	ldr	r3, [sp, #4]
    c116:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c118:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c11c:	00db      	lsls	r3, r3, #3
    c11e:	2120      	movs	r1, #32
    c120:	fa01 f303 	lsl.w	r3, r1, r3
    c124:	431a      	orrs	r2, r3
    c126:	9b01      	ldr	r3, [sp, #4]
    c128:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c12a:	e00b      	b.n	c144 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c12c:	9b01      	ldr	r3, [sp, #4]
    c12e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c130:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c134:	00db      	lsls	r3, r3, #3
    c136:	2120      	movs	r1, #32
    c138:	fa01 f303 	lsl.w	r3, r1, r3
    c13c:	43db      	mvns	r3, r3
    c13e:	401a      	ands	r2, r3
    c140:	9b01      	ldr	r3, [sp, #4]
    c142:	665a      	str	r2, [r3, #100]	; 0x64
}
    c144:	bf00      	nop
    c146:	b002      	add	sp, #8
    c148:	4770      	bx	lr

0000c14a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c14a:	b082      	sub	sp, #8
    c14c:	9001      	str	r0, [sp, #4]
    c14e:	460b      	mov	r3, r1
    c150:	f88d 3003 	strb.w	r3, [sp, #3]
    c154:	4613      	mov	r3, r2
    c156:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c15a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c15e:	2b00      	cmp	r3, #0
    c160:	d00b      	beq.n	c17a <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c162:	9b01      	ldr	r3, [sp, #4]
    c164:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c166:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c16a:	00db      	lsls	r3, r3, #3
    c16c:	2180      	movs	r1, #128	; 0x80
    c16e:	fa01 f303 	lsl.w	r3, r1, r3
    c172:	431a      	orrs	r2, r3
    c174:	9b01      	ldr	r3, [sp, #4]
    c176:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c178:	e00b      	b.n	c192 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c17a:	9b01      	ldr	r3, [sp, #4]
    c17c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c17e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c182:	00db      	lsls	r3, r3, #3
    c184:	2180      	movs	r1, #128	; 0x80
    c186:	fa01 f303 	lsl.w	r3, r1, r3
    c18a:	43db      	mvns	r3, r3
    c18c:	401a      	ands	r2, r3
    c18e:	9b01      	ldr	r3, [sp, #4]
    c190:	665a      	str	r2, [r3, #100]	; 0x64
}
    c192:	bf00      	nop
    c194:	b002      	add	sp, #8
    c196:	4770      	bx	lr

0000c198 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    c198:	b082      	sub	sp, #8
    c19a:	9001      	str	r0, [sp, #4]
    c19c:	460b      	mov	r3, r1
    c19e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    c1a2:	9b01      	ldr	r3, [sp, #4]
    c1a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c1a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    c1aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c1b2:	431a      	orrs	r2, r3
    c1b4:	9b01      	ldr	r3, [sp, #4]
    c1b6:	669a      	str	r2, [r3, #104]	; 0x68
}
    c1b8:	bf00      	nop
    c1ba:	b002      	add	sp, #8
    c1bc:	4770      	bx	lr

0000c1be <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    c1be:	b082      	sub	sp, #8
    c1c0:	9001      	str	r0, [sp, #4]
    c1c2:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    c1c4:	9b01      	ldr	r3, [sp, #4]
    c1c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c1c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c1cc:	9b00      	ldr	r3, [sp, #0]
    c1ce:	b2db      	uxtb	r3, r3
    c1d0:	019b      	lsls	r3, r3, #6
    c1d2:	b2db      	uxtb	r3, r3
    c1d4:	431a      	orrs	r2, r3
    c1d6:	9b01      	ldr	r3, [sp, #4]
    c1d8:	669a      	str	r2, [r3, #104]	; 0x68
}
    c1da:	bf00      	nop
    c1dc:	b002      	add	sp, #8
    c1de:	4770      	bx	lr

0000c1e0 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    c1e0:	b082      	sub	sp, #8
    c1e2:	9001      	str	r0, [sp, #4]
    c1e4:	460b      	mov	r3, r1
    c1e6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    c1ea:	9b01      	ldr	r3, [sp, #4]
    c1ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c1ee:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    c1f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1f6:	041b      	lsls	r3, r3, #16
    c1f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c1fc:	431a      	orrs	r2, r3
    c1fe:	9b01      	ldr	r3, [sp, #4]
    c200:	669a      	str	r2, [r3, #104]	; 0x68
}
    c202:	bf00      	nop
    c204:	b002      	add	sp, #8
    c206:	4770      	bx	lr

0000c208 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    c208:	b082      	sub	sp, #8
    c20a:	9001      	str	r0, [sp, #4]
    c20c:	460b      	mov	r3, r1
    c20e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    c212:	9b01      	ldr	r3, [sp, #4]
    c214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    c216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    c21a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c21e:	2a00      	cmp	r2, #0
    c220:	d001      	beq.n	c226 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    c222:	2240      	movs	r2, #64	; 0x40
    c224:	e000      	b.n	c228 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    c226:	2200      	movs	r2, #0
    c228:	431a      	orrs	r2, r3
    c22a:	9b01      	ldr	r3, [sp, #4]
    c22c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c22e:	bf00      	nop
    c230:	b002      	add	sp, #8
    c232:	4770      	bx	lr

0000c234 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    c234:	b082      	sub	sp, #8
    c236:	9001      	str	r0, [sp, #4]
    c238:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    c23a:	9b01      	ldr	r3, [sp, #4]
    c23c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c23e:	9b00      	ldr	r3, [sp, #0]
    c240:	43db      	mvns	r3, r3
    c242:	401a      	ands	r2, r3
    c244:	9b01      	ldr	r3, [sp, #4]
    c246:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c248:	bf00      	nop
    c24a:	b002      	add	sp, #8
    c24c:	4770      	bx	lr

0000c24e <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    c24e:	b082      	sub	sp, #8
    c250:	9001      	str	r0, [sp, #4]
    c252:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    c254:	9b01      	ldr	r3, [sp, #4]
    c256:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c258:	9b00      	ldr	r3, [sp, #0]
    c25a:	43db      	mvns	r3, r3
    c25c:	401a      	ands	r2, r3
    c25e:	9b00      	ldr	r3, [sp, #0]
    c260:	431a      	orrs	r2, r3
    c262:	9b01      	ldr	r3, [sp, #4]
    c264:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c266:	bf00      	nop
    c268:	b002      	add	sp, #8
    c26a:	4770      	bx	lr

0000c26c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    c26c:	b084      	sub	sp, #16
    c26e:	9003      	str	r0, [sp, #12]
    c270:	460b      	mov	r3, r1
    c272:	9201      	str	r2, [sp, #4]
    c274:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    c278:	9b01      	ldr	r3, [sp, #4]
    c27a:	2b00      	cmp	r3, #0
    c27c:	d10b      	bne.n	c296 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    c27e:	9b03      	ldr	r3, [sp, #12]
    c280:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c282:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c286:	2101      	movs	r1, #1
    c288:	fa01 f303 	lsl.w	r3, r1, r3
    c28c:	43db      	mvns	r3, r3
    c28e:	401a      	ands	r2, r3
    c290:	9b03      	ldr	r3, [sp, #12]
    c292:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    c294:	e009      	b.n	c2aa <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    c296:	9b03      	ldr	r3, [sp, #12]
    c298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c29a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c29e:	2101      	movs	r1, #1
    c2a0:	fa01 f303 	lsl.w	r3, r1, r3
    c2a4:	431a      	orrs	r2, r3
    c2a6:	9b03      	ldr	r3, [sp, #12]
    c2a8:	671a      	str	r2, [r3, #112]	; 0x70
}
    c2aa:	bf00      	nop
    c2ac:	b004      	add	sp, #16
    c2ae:	4770      	bx	lr

0000c2b0 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    c2b0:	b082      	sub	sp, #8
    c2b2:	9001      	str	r0, [sp, #4]
    c2b4:	460b      	mov	r3, r1
    c2b6:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    c2ba:	9b01      	ldr	r3, [sp, #4]
    c2bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c2be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2c2:	fa22 f303 	lsr.w	r3, r2, r3
    c2c6:	f003 0301 	and.w	r3, r3, #1
    c2ca:	2b01      	cmp	r3, #1
    c2cc:	bf0c      	ite	eq
    c2ce:	2301      	moveq	r3, #1
    c2d0:	2300      	movne	r3, #0
    c2d2:	b2db      	uxtb	r3, r3
}
    c2d4:	4618      	mov	r0, r3
    c2d6:	b002      	add	sp, #8
    c2d8:	4770      	bx	lr

0000c2da <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    c2da:	b082      	sub	sp, #8
    c2dc:	9001      	str	r0, [sp, #4]
    c2de:	460b      	mov	r3, r1
    c2e0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    c2e4:	9b01      	ldr	r3, [sp, #4]
    c2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c2ea:	f023 021f 	bic.w	r2, r3, #31
    c2ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2f2:	f003 031f 	and.w	r3, r3, #31
    c2f6:	431a      	orrs	r2, r3
    c2f8:	9b01      	ldr	r3, [sp, #4]
    c2fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c2fe:	bf00      	nop
    c300:	b002      	add	sp, #8
    c302:	4770      	bx	lr

0000c304 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    c304:	b082      	sub	sp, #8
    c306:	9001      	str	r0, [sp, #4]
    c308:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    c30a:	9b01      	ldr	r3, [sp, #4]
    c30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c310:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c314:	9b00      	ldr	r3, [sp, #0]
    c316:	019b      	lsls	r3, r3, #6
    c318:	b2db      	uxtb	r3, r3
    c31a:	431a      	orrs	r2, r3
    c31c:	9b01      	ldr	r3, [sp, #4]
    c31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c322:	bf00      	nop
    c324:	b002      	add	sp, #8
    c326:	4770      	bx	lr

0000c328 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    c328:	b082      	sub	sp, #8
    c32a:	9001      	str	r0, [sp, #4]
    c32c:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    c32e:	9b01      	ldr	r3, [sp, #4]
    c330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c334:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    c338:	9b00      	ldr	r3, [sp, #0]
    c33a:	02db      	lsls	r3, r3, #11
    c33c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c340:	431a      	orrs	r2, r3
    c342:	9b01      	ldr	r3, [sp, #4]
    c344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c348:	bf00      	nop
    c34a:	b002      	add	sp, #8
    c34c:	4770      	bx	lr

0000c34e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    c34e:	b082      	sub	sp, #8
    c350:	9001      	str	r0, [sp, #4]
    c352:	460b      	mov	r3, r1
    c354:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    c358:	9b01      	ldr	r3, [sp, #4]
    c35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c35e:	f023 0301 	bic.w	r3, r3, #1
    c362:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c366:	2a00      	cmp	r2, #0
    c368:	d001      	beq.n	c36e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    c36a:	2201      	movs	r2, #1
    c36c:	e000      	b.n	c370 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    c36e:	2200      	movs	r2, #0
    c370:	431a      	orrs	r2, r3
    c372:	9b01      	ldr	r3, [sp, #4]
    c374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c378:	bf00      	nop
    c37a:	b002      	add	sp, #8
    c37c:	4770      	bx	lr

0000c37e <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    c37e:	b082      	sub	sp, #8
    c380:	9001      	str	r0, [sp, #4]
    c382:	460b      	mov	r3, r1
    c384:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    c388:	9b01      	ldr	r3, [sp, #4]
    c38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c38e:	f023 0304 	bic.w	r3, r3, #4
    c392:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c396:	2a00      	cmp	r2, #0
    c398:	d001      	beq.n	c39e <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    c39a:	2204      	movs	r2, #4
    c39c:	e000      	b.n	c3a0 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    c39e:	2200      	movs	r2, #0
    c3a0:	431a      	orrs	r2, r3
    c3a2:	9b01      	ldr	r3, [sp, #4]
    c3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c3a8:	bf00      	nop
    c3aa:	b002      	add	sp, #8
    c3ac:	4770      	bx	lr

0000c3ae <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c3ae:	b082      	sub	sp, #8
    c3b0:	9001      	str	r0, [sp, #4]
    c3b2:	460b      	mov	r3, r1
    c3b4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    c3b8:	9b01      	ldr	r3, [sp, #4]
    c3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c3be:	f023 0310 	bic.w	r3, r3, #16
    c3c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c3c6:	2a00      	cmp	r2, #0
    c3c8:	d001      	beq.n	c3ce <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    c3ca:	2210      	movs	r2, #16
    c3cc:	e000      	b.n	c3d0 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    c3ce:	2200      	movs	r2, #0
    c3d0:	431a      	orrs	r2, r3
    c3d2:	9b01      	ldr	r3, [sp, #4]
    c3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c3d8:	bf00      	nop
    c3da:	b002      	add	sp, #8
    c3dc:	4770      	bx	lr

0000c3de <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c3de:	b082      	sub	sp, #8
    c3e0:	9001      	str	r0, [sp, #4]
    c3e2:	460b      	mov	r3, r1
    c3e4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    c3e8:	9b01      	ldr	r3, [sp, #4]
    c3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c3ee:	f023 0320 	bic.w	r3, r3, #32
    c3f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c3f6:	2a00      	cmp	r2, #0
    c3f8:	d001      	beq.n	c3fe <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    c3fa:	2220      	movs	r2, #32
    c3fc:	e000      	b.n	c400 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    c3fe:	2200      	movs	r2, #0
    c400:	431a      	orrs	r2, r3
    c402:	9b01      	ldr	r3, [sp, #4]
    c404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c408:	bf00      	nop
    c40a:	b002      	add	sp, #8
    c40c:	4770      	bx	lr

0000c40e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    c40e:	b082      	sub	sp, #8
    c410:	9001      	str	r0, [sp, #4]
    c412:	460b      	mov	r3, r1
    c414:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    c418:	9b01      	ldr	r3, [sp, #4]
    c41a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c41e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c422:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c426:	2a00      	cmp	r2, #0
    c428:	d001      	beq.n	c42e <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    c42a:	2280      	movs	r2, #128	; 0x80
    c42c:	e000      	b.n	c430 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    c42e:	2200      	movs	r2, #0
    c430:	431a      	orrs	r2, r3
    c432:	9b01      	ldr	r3, [sp, #4]
    c434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c438:	bf00      	nop
    c43a:	b002      	add	sp, #8
    c43c:	4770      	bx	lr

0000c43e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    c43e:	b082      	sub	sp, #8
    c440:	9001      	str	r0, [sp, #4]
    c442:	460b      	mov	r3, r1
    c444:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c448:	9b01      	ldr	r3, [sp, #4]
    c44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c44e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c452:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c456:	2a00      	cmp	r2, #0
    c458:	d002      	beq.n	c460 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    c45a:	f44f 7280 	mov.w	r2, #256	; 0x100
    c45e:	e000      	b.n	c462 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    c460:	2200      	movs	r2, #0
    c462:	431a      	orrs	r2, r3
    c464:	9b01      	ldr	r3, [sp, #4]
    c466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c46a:	bf00      	nop
    c46c:	b002      	add	sp, #8
    c46e:	4770      	bx	lr

0000c470 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c470:	b082      	sub	sp, #8
    c472:	9001      	str	r0, [sp, #4]
    c474:	460b      	mov	r3, r1
    c476:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c47a:	9b01      	ldr	r3, [sp, #4]
    c47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    c484:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c488:	2a00      	cmp	r2, #0
    c48a:	d002      	beq.n	c492 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    c48c:	f44f 7200 	mov.w	r2, #512	; 0x200
    c490:	e000      	b.n	c494 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    c492:	2200      	movs	r2, #0
    c494:	431a      	orrs	r2, r3
    c496:	9b01      	ldr	r3, [sp, #4]
    c498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c49c:	bf00      	nop
    c49e:	b002      	add	sp, #8
    c4a0:	4770      	bx	lr

0000c4a2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c4a2:	b082      	sub	sp, #8
    c4a4:	9001      	str	r0, [sp, #4]
    c4a6:	460b      	mov	r3, r1
    c4a8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c4ac:	9b01      	ldr	r3, [sp, #4]
    c4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c4b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    c4b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c4ba:	2a00      	cmp	r2, #0
    c4bc:	d002      	beq.n	c4c4 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    c4be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c4c2:	e000      	b.n	c4c6 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    c4c4:	2200      	movs	r2, #0
    c4c6:	431a      	orrs	r2, r3
    c4c8:	9b01      	ldr	r3, [sp, #4]
    c4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c4ce:	bf00      	nop
    c4d0:	b002      	add	sp, #8
    c4d2:	4770      	bx	lr

0000c4d4 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c4d4:	b082      	sub	sp, #8
    c4d6:	9001      	str	r0, [sp, #4]
    c4d8:	460b      	mov	r3, r1
    c4da:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c4de:	9b01      	ldr	r3, [sp, #4]
    c4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c4e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c4e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c4ec:	2a00      	cmp	r2, #0
    c4ee:	d002      	beq.n	c4f6 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    c4f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c4f4:	e000      	b.n	c4f8 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    c4f6:	2200      	movs	r2, #0
    c4f8:	431a      	orrs	r2, r3
    c4fa:	9b01      	ldr	r3, [sp, #4]
    c4fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c500:	bf00      	nop
    c502:	b002      	add	sp, #8
    c504:	4770      	bx	lr

0000c506 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c506:	b082      	sub	sp, #8
    c508:	9001      	str	r0, [sp, #4]
    c50a:	460b      	mov	r3, r1
    c50c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    c510:	9b01      	ldr	r3, [sp, #4]
    c512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c51a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c51e:	2a00      	cmp	r2, #0
    c520:	d002      	beq.n	c528 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    c522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c526:	e000      	b.n	c52a <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    c528:	2200      	movs	r2, #0
    c52a:	431a      	orrs	r2, r3
    c52c:	9b01      	ldr	r3, [sp, #4]
    c52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c532:	bf00      	nop
    c534:	b002      	add	sp, #8
    c536:	4770      	bx	lr

0000c538 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c538:	b082      	sub	sp, #8
    c53a:	9001      	str	r0, [sp, #4]
    c53c:	460b      	mov	r3, r1
    c53e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c542:	9b01      	ldr	r3, [sp, #4]
    c544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c54c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c550:	2a00      	cmp	r2, #0
    c552:	d002      	beq.n	c55a <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    c554:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c558:	e000      	b.n	c55c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    c55a:	2200      	movs	r2, #0
    c55c:	431a      	orrs	r2, r3
    c55e:	9b01      	ldr	r3, [sp, #4]
    c560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c564:	bf00      	nop
    c566:	b002      	add	sp, #8
    c568:	4770      	bx	lr

0000c56a <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c56a:	b082      	sub	sp, #8
    c56c:	9001      	str	r0, [sp, #4]
    c56e:	460b      	mov	r3, r1
    c570:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c574:	9b01      	ldr	r3, [sp, #4]
    c576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c57a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    c57e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c582:	2a00      	cmp	r2, #0
    c584:	d002      	beq.n	c58c <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    c586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c58a:	e000      	b.n	c58e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    c58c:	2200      	movs	r2, #0
    c58e:	431a      	orrs	r2, r3
    c590:	9b01      	ldr	r3, [sp, #4]
    c592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c596:	bf00      	nop
    c598:	b002      	add	sp, #8
    c59a:	4770      	bx	lr

0000c59c <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c59c:	b082      	sub	sp, #8
    c59e:	9001      	str	r0, [sp, #4]
    c5a0:	460b      	mov	r3, r1
    c5a2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c5a6:	9b01      	ldr	r3, [sp, #4]
    c5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    c5b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5b4:	2a00      	cmp	r2, #0
    c5b6:	d002      	beq.n	c5be <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    c5b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    c5bc:	e000      	b.n	c5c0 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    c5be:	2200      	movs	r2, #0
    c5c0:	431a      	orrs	r2, r3
    c5c2:	9b01      	ldr	r3, [sp, #4]
    c5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c5c8:	bf00      	nop
    c5ca:	b002      	add	sp, #8
    c5cc:	4770      	bx	lr

0000c5ce <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c5ce:	b082      	sub	sp, #8
    c5d0:	9001      	str	r0, [sp, #4]
    c5d2:	460b      	mov	r3, r1
    c5d4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c5d8:	9b01      	ldr	r3, [sp, #4]
    c5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    c5e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5e6:	2a00      	cmp	r2, #0
    c5e8:	d002      	beq.n	c5f0 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    c5ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    c5ee:	e000      	b.n	c5f2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    c5f0:	2200      	movs	r2, #0
    c5f2:	431a      	orrs	r2, r3
    c5f4:	9b01      	ldr	r3, [sp, #4]
    c5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c5fa:	bf00      	nop
    c5fc:	b002      	add	sp, #8
    c5fe:	4770      	bx	lr

0000c600 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c600:	b084      	sub	sp, #16
    c602:	9001      	str	r0, [sp, #4]
    c604:	460b      	mov	r3, r1
    c606:	f88d 3003 	strb.w	r3, [sp, #3]
    c60a:	4613      	mov	r3, r2
    c60c:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    c610:	9b01      	ldr	r3, [sp, #4]
    c612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c614:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c618:	fa22 f303 	lsr.w	r3, r2, r3
    c61c:	b2db      	uxtb	r3, r3
    c61e:	f003 0301 	and.w	r3, r3, #1
    c622:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    c626:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c62a:	2b00      	cmp	r3, #0
    c62c:	bf14      	ite	ne
    c62e:	2301      	movne	r3, #1
    c630:	2300      	moveq	r3, #0
    c632:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    c636:	f89d 2002 	ldrb.w	r2, [sp, #2]
    c63a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c63e:	429a      	cmp	r2, r3
    c640:	d00d      	beq.n	c65e <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    c642:	9b01      	ldr	r3, [sp, #4]
    c644:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c648:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c64c:	3308      	adds	r3, #8
    c64e:	2101      	movs	r1, #1
    c650:	fa01 f303 	lsl.w	r3, r1, r3
    c654:	431a      	orrs	r2, r3
    c656:	9b01      	ldr	r3, [sp, #4]
    c658:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    c65c:	e00d      	b.n	c67a <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    c65e:	9b01      	ldr	r3, [sp, #4]
    c660:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c664:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c668:	3308      	adds	r3, #8
    c66a:	2101      	movs	r1, #1
    c66c:	fa01 f303 	lsl.w	r3, r1, r3
    c670:	43db      	mvns	r3, r3
    c672:	401a      	ands	r2, r3
    c674:	9b01      	ldr	r3, [sp, #4]
    c676:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c67a:	bf00      	nop
    c67c:	b004      	add	sp, #16
    c67e:	4770      	bx	lr

0000c680 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c680:	b082      	sub	sp, #8
    c682:	9001      	str	r0, [sp, #4]
    c684:	460b      	mov	r3, r1
    c686:	f88d 3003 	strb.w	r3, [sp, #3]
    c68a:	4613      	mov	r3, r2
    c68c:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c690:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c694:	2b00      	cmp	r3, #0
    c696:	d00c      	beq.n	c6b2 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    c698:	9b01      	ldr	r3, [sp, #4]
    c69a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c69e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c6a2:	2101      	movs	r1, #1
    c6a4:	fa01 f303 	lsl.w	r3, r1, r3
    c6a8:	431a      	orrs	r2, r3
    c6aa:	9b01      	ldr	r3, [sp, #4]
    c6ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    c6b0:	e00c      	b.n	c6cc <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    c6b2:	9b01      	ldr	r3, [sp, #4]
    c6b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c6b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c6bc:	2101      	movs	r1, #1
    c6be:	fa01 f303 	lsl.w	r3, r1, r3
    c6c2:	43db      	mvns	r3, r3
    c6c4:	401a      	ands	r2, r3
    c6c6:	9b01      	ldr	r3, [sp, #4]
    c6c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c6cc:	bf00      	nop
    c6ce:	b002      	add	sp, #8
    c6d0:	4770      	bx	lr

0000c6d2 <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    c6d2:	b082      	sub	sp, #8
    c6d4:	9001      	str	r0, [sp, #4]
    c6d6:	460b      	mov	r3, r1
    c6d8:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    c6dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c6e0:	9b01      	ldr	r3, [sp, #4]
    c6e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c6e6:	bf00      	nop
    c6e8:	b002      	add	sp, #8
    c6ea:	4770      	bx	lr

0000c6ec <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    c6ec:	b082      	sub	sp, #8
    c6ee:	9001      	str	r0, [sp, #4]
    c6f0:	460b      	mov	r3, r1
    c6f2:	f88d 3003 	strb.w	r3, [sp, #3]
    c6f6:	4613      	mov	r3, r2
    c6f8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c6fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c700:	2b00      	cmp	r3, #0
    c702:	d00c      	beq.n	c71e <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    c704:	9b01      	ldr	r3, [sp, #4]
    c706:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c70a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c70e:	2101      	movs	r1, #1
    c710:	fa01 f303 	lsl.w	r3, r1, r3
    c714:	431a      	orrs	r2, r3
    c716:	9b01      	ldr	r3, [sp, #4]
    c718:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    c71c:	e00c      	b.n	c738 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    c71e:	9b01      	ldr	r3, [sp, #4]
    c720:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c724:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c728:	2101      	movs	r1, #1
    c72a:	fa01 f303 	lsl.w	r3, r1, r3
    c72e:	43db      	mvns	r3, r3
    c730:	401a      	ands	r2, r3
    c732:	9b01      	ldr	r3, [sp, #4]
    c734:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c738:	bf00      	nop
    c73a:	b002      	add	sp, #8
    c73c:	4770      	bx	lr

0000c73e <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    c73e:	b082      	sub	sp, #8
    c740:	9001      	str	r0, [sp, #4]
    c742:	460b      	mov	r3, r1
    c744:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    c748:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c74c:	2b00      	cmp	r3, #0
    c74e:	d008      	beq.n	c762 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    c750:	9b01      	ldr	r3, [sp, #4]
    c752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    c75a:	9b01      	ldr	r3, [sp, #4]
    c75c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    c760:	e007      	b.n	c772 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    c76c:	9b01      	ldr	r3, [sp, #4]
    c76e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c772:	bf00      	nop
    c774:	b002      	add	sp, #8
    c776:	4770      	bx	lr

0000c778 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    c778:	b082      	sub	sp, #8
    c77a:	9001      	str	r0, [sp, #4]
    c77c:	460b      	mov	r3, r1
    c77e:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    c782:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c786:	9b01      	ldr	r3, [sp, #4]
    c788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    c78c:	bf00      	nop
    c78e:	b002      	add	sp, #8
    c790:	4770      	bx	lr

0000c792 <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c792:	b082      	sub	sp, #8
    c794:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    c796:	9b01      	ldr	r3, [sp, #4]
    c798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    c79c:	b29b      	uxth	r3, r3
}
    c79e:	4618      	mov	r0, r3
    c7a0:	b002      	add	sp, #8
    c7a2:	4770      	bx	lr

0000c7a4 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c7a4:	b082      	sub	sp, #8
    c7a6:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    c7a8:	9b01      	ldr	r3, [sp, #4]
    c7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    c7ac:	b29b      	uxth	r3, r3
}
    c7ae:	4618      	mov	r0, r3
    c7b0:	b002      	add	sp, #8
    c7b2:	4770      	bx	lr

0000c7b4 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    c7b4:	b500      	push	{lr}
    c7b6:	b085      	sub	sp, #20
    c7b8:	9001      	str	r0, [sp, #4]
    c7ba:	460b      	mov	r3, r1
    c7bc:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    c7c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c7c4:	085b      	lsrs	r3, r3, #1
    c7c6:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c7ca:	9b01      	ldr	r3, [sp, #4]
    c7cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c7ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c7d2:	00db      	lsls	r3, r3, #3
    c7d4:	2101      	movs	r1, #1
    c7d6:	fa01 f303 	lsl.w	r3, r1, r3
    c7da:	401a      	ands	r2, r3
    c7dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c7e0:	00db      	lsls	r3, r3, #3
    c7e2:	fa22 f303 	lsr.w	r3, r2, r3
    c7e6:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c7ea:	9b01      	ldr	r3, [sp, #4]
    c7ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c7ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c7f2:	00db      	lsls	r3, r3, #3
    c7f4:	2180      	movs	r1, #128	; 0x80
    c7f6:	fa01 f303 	lsl.w	r3, r1, r3
    c7fa:	401a      	ands	r2, r3
    c7fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c800:	00db      	lsls	r3, r3, #3
    c802:	fa22 f303 	lsr.w	r3, r2, r3
    c806:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    c80a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    c80e:	2b80      	cmp	r3, #128	; 0x80
    c810:	d101      	bne.n	c816 <Ftm_Pwm_Ip_GetChannelMode+0x62>
    c812:	2301      	movs	r3, #1
    c814:	e000      	b.n	c818 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    c816:	2300      	movs	r3, #0
    c818:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    c81c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c820:	4619      	mov	r1, r3
    c822:	9801      	ldr	r0, [sp, #4]
    c824:	f7ff f99b 	bl	bb5e <Ftm_Pwm_Ip_GetChnEdgeLevel>
    c828:	4603      	mov	r3, r0
    c82a:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    c82e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c832:	4619      	mov	r1, r3
    c834:	9801      	ldr	r0, [sp, #4]
    c836:	f7ff fa2a 	bl	bc8e <Ftm_Pwm_Ip_GetChnMode>
    c83a:	4603      	mov	r3, r0
    c83c:	009b      	lsls	r3, r3, #2
    c83e:	b2da      	uxtb	r2, r3
    c840:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c844:	4313      	orrs	r3, r2
    c846:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    c84a:	9801      	ldr	r0, [sp, #4]
    c84c:	f7ff f923 	bl	ba96 <Ftm_Pwm_Ip_GetCpwms>
    c850:	4603      	mov	r3, r0
    c852:	b2db      	uxtb	r3, r3
    c854:	011b      	lsls	r3, r3, #4
    c856:	b2da      	uxtb	r2, r3
    c858:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c85c:	4313      	orrs	r3, r2
    c85e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    c862:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c866:	015b      	lsls	r3, r3, #5
    c868:	b2da      	uxtb	r2, r3
    c86a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c86e:	4313      	orrs	r3, r2
    c870:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    c874:	f89d 3009 	ldrb.w	r3, [sp, #9]
    c878:	019b      	lsls	r3, r3, #6
    c87a:	b2da      	uxtb	r2, r3
    c87c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c880:	4313      	orrs	r3, r2
    c882:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    c886:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c88a:	2b62      	cmp	r3, #98	; 0x62
    c88c:	d055      	beq.n	c93a <Ftm_Pwm_Ip_GetChannelMode+0x186>
    c88e:	2b62      	cmp	r3, #98	; 0x62
    c890:	dc59      	bgt.n	c946 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    c892:	2b22      	cmp	r3, #34	; 0x22
    c894:	dc3c      	bgt.n	c910 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    c896:	2b09      	cmp	r3, #9
    c898:	db55      	blt.n	c946 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    c89a:	3b09      	subs	r3, #9
    c89c:	2b19      	cmp	r3, #25
    c89e:	d852      	bhi.n	c946 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    c8a0:	a201      	add	r2, pc, #4	; (adr r2, c8a8 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    c8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c8a6:	bf00      	nop
    c8a8:	0000c91d 	.word	0x0000c91d
    c8ac:	0000c917 	.word	0x0000c917
    c8b0:	0000c947 	.word	0x0000c947
    c8b4:	0000c947 	.word	0x0000c947
    c8b8:	0000c947 	.word	0x0000c947
    c8bc:	0000c947 	.word	0x0000c947
    c8c0:	0000c947 	.word	0x0000c947
    c8c4:	0000c947 	.word	0x0000c947
    c8c8:	0000c929 	.word	0x0000c929
    c8cc:	0000c923 	.word	0x0000c923
    c8d0:	0000c947 	.word	0x0000c947
    c8d4:	0000c947 	.word	0x0000c947
    c8d8:	0000c947 	.word	0x0000c947
    c8dc:	0000c947 	.word	0x0000c947
    c8e0:	0000c947 	.word	0x0000c947
    c8e4:	0000c947 	.word	0x0000c947
    c8e8:	0000c947 	.word	0x0000c947
    c8ec:	0000c947 	.word	0x0000c947
    c8f0:	0000c947 	.word	0x0000c947
    c8f4:	0000c947 	.word	0x0000c947
    c8f8:	0000c947 	.word	0x0000c947
    c8fc:	0000c947 	.word	0x0000c947
    c900:	0000c947 	.word	0x0000c947
    c904:	0000c947 	.word	0x0000c947
    c908:	0000c935 	.word	0x0000c935
    c90c:	0000c92f 	.word	0x0000c92f
    c910:	2b61      	cmp	r3, #97	; 0x61
    c912:	d015      	beq.n	c940 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    c914:	e017      	b.n	c946 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    c916:	230a      	movs	r3, #10
    c918:	9303      	str	r3, [sp, #12]
            break;
    c91a:	e017      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    c91c:	2309      	movs	r3, #9
    c91e:	9303      	str	r3, [sp, #12]
            break;
    c920:	e014      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    c922:	2312      	movs	r3, #18
    c924:	9303      	str	r3, [sp, #12]
            break;
    c926:	e011      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    c928:	2311      	movs	r3, #17
    c92a:	9303      	str	r3, [sp, #12]
            break;
    c92c:	e00e      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    c92e:	2322      	movs	r3, #34	; 0x22
    c930:	9303      	str	r3, [sp, #12]
            break;
    c932:	e00b      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    c934:	2321      	movs	r3, #33	; 0x21
    c936:	9303      	str	r3, [sp, #12]
            break;
    c938:	e008      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    c93a:	2362      	movs	r3, #98	; 0x62
    c93c:	9303      	str	r3, [sp, #12]
            break;
    c93e:	e005      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    c940:	2361      	movs	r3, #97	; 0x61
    c942:	9303      	str	r3, [sp, #12]
            break;
    c944:	e002      	b.n	c94c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    c946:	23ff      	movs	r3, #255	; 0xff
    c948:	9303      	str	r3, [sp, #12]
            break;
    c94a:	bf00      	nop
    }

    return ChMode; 
    c94c:	9b03      	ldr	r3, [sp, #12]
}
    c94e:	4618      	mov	r0, r3
    c950:	b005      	add	sp, #20
    c952:	f85d fb04 	ldr.w	pc, [sp], #4

0000c956 <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    c956:	b082      	sub	sp, #8
    c958:	9001      	str	r0, [sp, #4]
    c95a:	460b      	mov	r3, r1
    c95c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    c960:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c964:	2b00      	cmp	r3, #0
    c966:	d006      	beq.n	c976 <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    c968:	9b01      	ldr	r3, [sp, #4]
    c96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    c96c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    c970:	9b01      	ldr	r3, [sp, #4]
    c972:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    c974:	e00b      	b.n	c98e <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    c976:	9b01      	ldr	r3, [sp, #4]
    c978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    c97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c97e:	2b00      	cmp	r3, #0
    c980:	d005      	beq.n	c98e <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    c982:	9b01      	ldr	r3, [sp, #4]
    c984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c986:	f043 0204 	orr.w	r2, r3, #4
    c98a:	9b01      	ldr	r3, [sp, #4]
    c98c:	655a      	str	r2, [r3, #84]	; 0x54
}
    c98e:	bf00      	nop
    c990:	b002      	add	sp, #8
    c992:	4770      	bx	lr

0000c994 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c994:	b500      	push	{lr}
    c996:	b085      	sub	sp, #20
    c998:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    c99a:	2100      	movs	r1, #0
    c99c:	9801      	ldr	r0, [sp, #4]
    c99e:	f7ff ffda 	bl	c956 <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    c9a2:	9b01      	ldr	r3, [sp, #4]
    c9a4:	681a      	ldr	r2, [r3, #0]
    c9a6:	9b01      	ldr	r3, [sp, #4]
    c9a8:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    c9aa:	9b01      	ldr	r3, [sp, #4]
    c9ac:	2200      	movs	r2, #0
    c9ae:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    c9b0:	9b01      	ldr	r3, [sp, #4]
    c9b2:	2200      	movs	r2, #0
    c9b4:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    c9b6:	9b01      	ldr	r3, [sp, #4]
    c9b8:	2200      	movs	r2, #0
    c9ba:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    c9bc:	9b01      	ldr	r3, [sp, #4]
    c9be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    c9c0:	9b01      	ldr	r3, [sp, #4]
    c9c2:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    c9c4:	9b01      	ldr	r3, [sp, #4]
    c9c6:	2204      	movs	r2, #4
    c9c8:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    c9ca:	9b01      	ldr	r3, [sp, #4]
    c9cc:	2200      	movs	r2, #0
    c9ce:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    c9d0:	9b01      	ldr	r3, [sp, #4]
    c9d2:	2200      	movs	r2, #0
    c9d4:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    c9d6:	9b01      	ldr	r3, [sp, #4]
    c9d8:	2200      	movs	r2, #0
    c9da:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    c9dc:	9b01      	ldr	r3, [sp, #4]
    c9de:	2200      	movs	r2, #0
    c9e0:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    c9e2:	9b01      	ldr	r3, [sp, #4]
    c9e4:	2200      	movs	r2, #0
    c9e6:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    c9e8:	9b01      	ldr	r3, [sp, #4]
    c9ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c9ec:	9b01      	ldr	r3, [sp, #4]
    c9ee:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    c9f0:	9b01      	ldr	r3, [sp, #4]
    c9f2:	2200      	movs	r2, #0
    c9f4:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    c9f6:	9b01      	ldr	r3, [sp, #4]
    c9f8:	2200      	movs	r2, #0
    c9fa:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	2200      	movs	r2, #0
    ca00:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    ca02:	9b01      	ldr	r3, [sp, #4]
    ca04:	2200      	movs	r2, #0
    ca06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    ca0a:	9b01      	ldr	r3, [sp, #4]
    ca0c:	2200      	movs	r2, #0
    ca0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    ca12:	9b01      	ldr	r3, [sp, #4]
    ca14:	2200      	movs	r2, #0
    ca16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    ca1a:	9b01      	ldr	r3, [sp, #4]
    ca1c:	2200      	movs	r2, #0
    ca1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	2200      	movs	r2, #0
    ca26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    ca2a:	9b01      	ldr	r3, [sp, #4]
    ca2c:	2200      	movs	r2, #0
    ca2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    ca32:	9b01      	ldr	r3, [sp, #4]
    ca34:	2200      	movs	r2, #0
    ca36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    ca3a:	2300      	movs	r3, #0
    ca3c:	f88d 300f 	strb.w	r3, [sp, #15]
    ca40:	e014      	b.n	ca6c <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    ca42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca46:	9a01      	ldr	r2, [sp, #4]
    ca48:	3301      	adds	r3, #1
    ca4a:	00db      	lsls	r3, r3, #3
    ca4c:	4413      	add	r3, r2
    ca4e:	2200      	movs	r2, #0
    ca50:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    ca52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca56:	9a01      	ldr	r2, [sp, #4]
    ca58:	3301      	adds	r3, #1
    ca5a:	00db      	lsls	r3, r3, #3
    ca5c:	4413      	add	r3, r2
    ca5e:	2200      	movs	r2, #0
    ca60:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    ca62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca66:	3301      	adds	r3, #1
    ca68:	f88d 300f 	strb.w	r3, [sp, #15]
    ca6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca70:	2b07      	cmp	r3, #7
    ca72:	d9e6      	bls.n	ca42 <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    ca74:	bf00      	nop
    ca76:	bf00      	nop
    ca78:	b005      	add	sp, #20
    ca7a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca7e <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    ca7e:	b084      	sub	sp, #16
    ca80:	9001      	str	r0, [sp, #4]
    ca82:	460b      	mov	r3, r1
    ca84:	f88d 3003 	strb.w	r3, [sp, #3]
    ca88:	4613      	mov	r3, r2
    ca8a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    ca8e:	2300      	movs	r3, #0
    ca90:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    ca92:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca96:	2b01      	cmp	r3, #1
    ca98:	d806      	bhi.n	caa8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    ca9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca9e:	2210      	movs	r2, #16
    caa0:	fa02 f303 	lsl.w	r3, r2, r3
    caa4:	9303      	str	r3, [sp, #12]
    caa6:	e013      	b.n	cad0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    caa8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    caac:	2b05      	cmp	r3, #5
    caae:	d807      	bhi.n	cac0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    cab0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cab4:	3b02      	subs	r3, #2
    cab6:	2201      	movs	r2, #1
    cab8:	fa02 f303 	lsl.w	r3, r2, r3
    cabc:	9303      	str	r3, [sp, #12]
    cabe:	e007      	b.n	cad0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    cac0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cac4:	3b06      	subs	r3, #6
    cac6:	f44f 7280 	mov.w	r2, #256	; 0x100
    caca:	fa02 f303 	lsl.w	r3, r2, r3
    cace:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    cad0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cad4:	2b00      	cmp	r3, #0
    cad6:	d006      	beq.n	cae6 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cadc:	9b03      	ldr	r3, [sp, #12]
    cade:	431a      	orrs	r2, r3
    cae0:	9b01      	ldr	r3, [sp, #4]
    cae2:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    cae4:	e006      	b.n	caf4 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    cae6:	9b01      	ldr	r3, [sp, #4]
    cae8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    caea:	9b03      	ldr	r3, [sp, #12]
    caec:	43db      	mvns	r3, r3
    caee:	401a      	ands	r2, r3
    caf0:	9b01      	ldr	r3, [sp, #4]
    caf2:	66da      	str	r2, [r3, #108]	; 0x6c
}
    caf4:	bf00      	nop
    caf6:	b004      	add	sp, #16
    caf8:	4770      	bx	lr

0000cafa <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    cafa:	b082      	sub	sp, #8
    cafc:	9001      	str	r0, [sp, #4]
    cafe:	9100      	str	r1, [sp, #0]
    cb00:	9b00      	ldr	r3, [sp, #0]
    cb02:	2b03      	cmp	r3, #3
    cb04:	d82a      	bhi.n	cb5c <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    cb06:	a201      	add	r2, pc, #4	; (adr r2, cb0c <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb0c:	0000cb1d 	.word	0x0000cb1d
    cb10:	0000cb2b 	.word	0x0000cb2b
    cb14:	0000cb3d 	.word	0x0000cb3d
    cb18:	0000cb4f 	.word	0x0000cb4f
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    cb1c:	9b01      	ldr	r3, [sp, #4]
    cb1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cb20:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    cb24:	9b01      	ldr	r3, [sp, #4]
    cb26:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cb28:	e019      	b.n	cb5e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    cb2a:	9b01      	ldr	r3, [sp, #4]
    cb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cb2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cb32:	f043 0220 	orr.w	r2, r3, #32
    cb36:	9b01      	ldr	r3, [sp, #4]
    cb38:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cb3a:	e010      	b.n	cb5e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    cb3c:	9b01      	ldr	r3, [sp, #4]
    cb3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cb40:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cb44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    cb48:	9b01      	ldr	r3, [sp, #4]
    cb4a:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cb4c:	e007      	b.n	cb5e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    cb4e:	9b01      	ldr	r3, [sp, #4]
    cb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cb52:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    cb56:	9b01      	ldr	r3, [sp, #4]
    cb58:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cb5a:	e000      	b.n	cb5e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    cb5c:	bf00      	nop
    }
}
    cb5e:	bf00      	nop
    cb60:	b002      	add	sp, #8
    cb62:	4770      	bx	lr

0000cb64 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    cb64:	b082      	sub	sp, #8
    cb66:	9001      	str	r0, [sp, #4]
    cb68:	460b      	mov	r3, r1
    cb6a:	f88d 3003 	strb.w	r3, [sp, #3]
    cb6e:	4613      	mov	r3, r2
    cb70:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    cb74:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cb78:	2b00      	cmp	r3, #0
    cb7a:	d00b      	beq.n	cb94 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    cb7c:	9b01      	ldr	r3, [sp, #4]
    cb7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cb80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb84:	00db      	lsls	r3, r3, #3
    cb86:	2140      	movs	r1, #64	; 0x40
    cb88:	fa01 f303 	lsl.w	r3, r1, r3
    cb8c:	431a      	orrs	r2, r3
    cb8e:	9b01      	ldr	r3, [sp, #4]
    cb90:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    cb92:	e00b      	b.n	cbac <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    cb94:	9b01      	ldr	r3, [sp, #4]
    cb96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cb98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb9c:	00db      	lsls	r3, r3, #3
    cb9e:	2140      	movs	r1, #64	; 0x40
    cba0:	fa01 f303 	lsl.w	r3, r1, r3
    cba4:	43db      	mvns	r3, r3
    cba6:	401a      	ands	r2, r3
    cba8:	9b01      	ldr	r3, [sp, #4]
    cbaa:	665a      	str	r2, [r3, #100]	; 0x64
}
    cbac:	bf00      	nop
    cbae:	b002      	add	sp, #8
    cbb0:	4770      	bx	lr

0000cbb2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    cbb2:	b082      	sub	sp, #8
    cbb4:	9001      	str	r0, [sp, #4]
    cbb6:	460b      	mov	r3, r1
    cbb8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    cbbc:	9b01      	ldr	r3, [sp, #4]
    cbbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cbc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cbc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cbc8:	2a00      	cmp	r2, #0
    cbca:	d001      	beq.n	cbd0 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    cbcc:	2280      	movs	r2, #128	; 0x80
    cbce:	e000      	b.n	cbd2 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    cbd0:	2200      	movs	r2, #0
    cbd2:	431a      	orrs	r2, r3
    cbd4:	9b01      	ldr	r3, [sp, #4]
    cbd6:	655a      	str	r2, [r3, #84]	; 0x54
}
    cbd8:	bf00      	nop
    cbda:	b002      	add	sp, #8
    cbdc:	4770      	bx	lr

0000cbde <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    cbde:	b082      	sub	sp, #8
    cbe0:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    cbe2:	9b01      	ldr	r3, [sp, #4]
    cbe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cbe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    cbea:	9b01      	ldr	r3, [sp, #4]
    cbec:	675a      	str	r2, [r3, #116]	; 0x74
}
    cbee:	bf00      	nop
    cbf0:	b002      	add	sp, #8
    cbf2:	4770      	bx	lr

0000cbf4 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    cbf4:	b082      	sub	sp, #8
    cbf6:	9001      	str	r0, [sp, #4]
    cbf8:	460b      	mov	r3, r1
    cbfa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    cbfe:	9b01      	ldr	r3, [sp, #4]
    cc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    cc02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    cc06:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cc0a:	021b      	lsls	r3, r3, #8
    cc0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    cc10:	431a      	orrs	r2, r3
    cc12:	9b01      	ldr	r3, [sp, #4]
    cc14:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cc16:	bf00      	nop
    cc18:	b002      	add	sp, #8
    cc1a:	4770      	bx	lr

0000cc1c <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    cc1c:	b082      	sub	sp, #8
    cc1e:	9001      	str	r0, [sp, #4]
    cc20:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    cc22:	9b01      	ldr	r3, [sp, #4]
    cc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    cc26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    cc2a:	9a00      	ldr	r2, [sp, #0]
    cc2c:	2a00      	cmp	r2, #0
    cc2e:	d002      	beq.n	cc36 <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    cc30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    cc34:	e000      	b.n	cc38 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    cc36:	2200      	movs	r2, #0
    cc38:	431a      	orrs	r2, r3
    cc3a:	9b01      	ldr	r3, [sp, #4]
    cc3c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cc3e:	bf00      	nop
    cc40:	b002      	add	sp, #8
    cc42:	4770      	bx	lr

0000cc44 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    cc44:	b086      	sub	sp, #24
    cc46:	9003      	str	r0, [sp, #12]
    cc48:	460b      	mov	r3, r1
    cc4a:	9201      	str	r2, [sp, #4]
    cc4c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    cc50:	9b01      	ldr	r3, [sp, #4]
    cc52:	2b00      	cmp	r3, #0
    cc54:	bf14      	ite	ne
    cc56:	2301      	movne	r3, #1
    cc58:	2300      	moveq	r3, #0
    cc5a:	b2db      	uxtb	r3, r3
    cc5c:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    cc5e:	9b03      	ldr	r3, [sp, #12]
    cc60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cc64:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cc68:	2101      	movs	r1, #1
    cc6a:	fa01 f303 	lsl.w	r3, r1, r3
    cc6e:	43db      	mvns	r3, r3
    cc70:	401a      	ands	r2, r3
    cc72:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cc76:	9905      	ldr	r1, [sp, #20]
    cc78:	fa01 f303 	lsl.w	r3, r1, r3
    cc7c:	431a      	orrs	r2, r3
    cc7e:	9b03      	ldr	r3, [sp, #12]
    cc80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    cc84:	bf00      	nop
    cc86:	b006      	add	sp, #24
    cc88:	4770      	bx	lr

0000cc8a <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    cc8a:	b084      	sub	sp, #16
    cc8c:	9001      	str	r0, [sp, #4]
    cc8e:	460b      	mov	r3, r1
    cc90:	f88d 3003 	strb.w	r3, [sp, #3]
    cc94:	4613      	mov	r3, r2
    cc96:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    cc9a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d001      	beq.n	cca6 <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    cca2:	2301      	movs	r3, #1
    cca4:	e000      	b.n	cca8 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    cca6:	2300      	movs	r3, #0
    cca8:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    ccaa:	9b01      	ldr	r3, [sp, #4]
    ccac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    ccae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccb2:	2101      	movs	r1, #1
    ccb4:	fa01 f303 	lsl.w	r3, r1, r3
    ccb8:	43db      	mvns	r3, r3
    ccba:	401a      	ands	r2, r3
    ccbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccc0:	9903      	ldr	r1, [sp, #12]
    ccc2:	fa01 f303 	lsl.w	r3, r1, r3
    ccc6:	431a      	orrs	r2, r3
    ccc8:	9b01      	ldr	r3, [sp, #4]
    ccca:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cccc:	bf00      	nop
    ccce:	b004      	add	sp, #16
    ccd0:	4770      	bx	lr

0000ccd2 <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    ccd2:	b084      	sub	sp, #16
    ccd4:	9001      	str	r0, [sp, #4]
    ccd6:	460b      	mov	r3, r1
    ccd8:	f88d 3003 	strb.w	r3, [sp, #3]
    ccdc:	4613      	mov	r3, r2
    ccde:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    cce2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cce6:	2b00      	cmp	r3, #0
    cce8:	d001      	beq.n	ccee <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    ccea:	2301      	movs	r3, #1
    ccec:	e000      	b.n	ccf0 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    ccee:	2300      	movs	r3, #0
    ccf0:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    ccf2:	9b01      	ldr	r3, [sp, #4]
    ccf4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    ccf6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccfa:	2110      	movs	r1, #16
    ccfc:	fa01 f303 	lsl.w	r3, r1, r3
    cd00:	43db      	mvns	r3, r3
    cd02:	401a      	ands	r2, r3
    cd04:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cd08:	9903      	ldr	r1, [sp, #12]
    cd0a:	fa01 f303 	lsl.w	r3, r1, r3
    cd0e:	011b      	lsls	r3, r3, #4
    cd10:	431a      	orrs	r2, r3
    cd12:	9b01      	ldr	r3, [sp, #4]
    cd14:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cd16:	bf00      	nop
    cd18:	b004      	add	sp, #16
    cd1a:	4770      	bx	lr

0000cd1c <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    cd1c:	b082      	sub	sp, #8
    cd1e:	9001      	str	r0, [sp, #4]
    cd20:	460b      	mov	r3, r1
    cd22:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    cd26:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cd2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cd2e:	409a      	lsls	r2, r3
    cd30:	9b01      	ldr	r3, [sp, #4]
    cd32:	6a1b      	ldr	r3, [r3, #32]
    cd34:	431a      	orrs	r2, r3
    cd36:	9b01      	ldr	r3, [sp, #4]
    cd38:	621a      	str	r2, [r3, #32]
}
    cd3a:	bf00      	nop
    cd3c:	b002      	add	sp, #8
    cd3e:	4770      	bx	lr

0000cd40 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    cd40:	b084      	sub	sp, #16
    cd42:	4603      	mov	r3, r0
    cd44:	f88d 3007 	strb.w	r3, [sp, #7]
    cd48:	460b      	mov	r3, r1
    cd4a:	f8ad 3004 	strh.w	r3, [sp, #4]
    cd4e:	4613      	mov	r3, r2
    cd50:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    cd54:	2300      	movs	r3, #0
    cd56:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    cd5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cd5e:	4a17      	ldr	r2, [pc, #92]	; (cdbc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cd60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cd64:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cd68:	429a      	cmp	r2, r3
    cd6a:	d107      	bne.n	cd7c <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    cd6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cd70:	4a12      	ldr	r2, [pc, #72]	; (cdbc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cd72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cd76:	f8ad 300e 	strh.w	r3, [sp, #14]
    cd7a:	e019      	b.n	cdb0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    cd7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d104      	bne.n	cd8e <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    cd84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    cd88:	f8ad 300e 	strh.w	r3, [sp, #14]
    cd8c:	e010      	b.n	cdb0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    cd8e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    cd92:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cd96:	4413      	add	r3, r2
    cd98:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cd9c:	4907      	ldr	r1, [pc, #28]	; (cdbc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cd9e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    cda2:	fb93 f1f2 	sdiv	r1, r3, r2
    cda6:	fb01 f202 	mul.w	r2, r1, r2
    cdaa:	1a9b      	subs	r3, r3, r2
    cdac:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    cdb0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    cdb4:	4618      	mov	r0, r3
    cdb6:	b004      	add	sp, #16
    cdb8:	4770      	bx	lr
    cdba:	bf00      	nop
    cdbc:	1fff8e00 	.word	0x1fff8e00

0000cdc0 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    cdc0:	b500      	push	{lr}
    cdc2:	b085      	sub	sp, #20
    cdc4:	4603      	mov	r3, r0
    cdc6:	9100      	str	r1, [sp, #0]
    cdc8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cdcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cdd0:	4a40      	ldr	r2, [pc, #256]	; (ced4 <Ftm_Pwm_Ip_InitPair+0x114>)
    cdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdd6:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    cdd8:	2300      	movs	r3, #0
    cdda:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    cdde:	2300      	movs	r3, #0
    cde0:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    cde4:	9b00      	ldr	r3, [sp, #0]
    cde6:	781b      	ldrb	r3, [r3, #0]
    cde8:	005b      	lsls	r3, r3, #1
    cdea:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    cdee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cdf2:	3301      	adds	r3, #1
    cdf4:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    cdf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cdfc:	9a00      	ldr	r2, [sp, #0]
    cdfe:	7812      	ldrb	r2, [r2, #0]
    ce00:	4610      	mov	r0, r2
    ce02:	9a00      	ldr	r2, [sp, #0]
    ce04:	8951      	ldrh	r1, [r2, #10]
    ce06:	4a34      	ldr	r2, [pc, #208]	; (ced8 <Ftm_Pwm_Ip_InitPair+0x118>)
    ce08:	009b      	lsls	r3, r3, #2
    ce0a:	4403      	add	r3, r0
    ce0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    ce10:	9b00      	ldr	r3, [sp, #0]
    ce12:	7819      	ldrb	r1, [r3, #0]
    ce14:	9b00      	ldr	r3, [sp, #0]
    ce16:	789b      	ldrb	r3, [r3, #2]
    ce18:	461a      	mov	r2, r3
    ce1a:	9803      	ldr	r0, [sp, #12]
    ce1c:	f7ff f920 	bl	c060 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    ce20:	9b00      	ldr	r3, [sp, #0]
    ce22:	789b      	ldrb	r3, [r3, #2]
    ce24:	2b00      	cmp	r3, #0
    ce26:	d02f      	beq.n	ce88 <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    ce28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ce2c:	4619      	mov	r1, r3
    ce2e:	9803      	ldr	r0, [sp, #12]
    ce30:	f7ff fa3e 	bl	c2b0 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    ce34:	4603      	mov	r3, r0
    ce36:	2b01      	cmp	r3, #1
    ce38:	d113      	bne.n	ce62 <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ce3a:	9b00      	ldr	r3, [sp, #0]
    ce3c:	685b      	ldr	r3, [r3, #4]
    ce3e:	2b01      	cmp	r3, #1
    ce40:	d107      	bne.n	ce52 <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ce42:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ce46:	2200      	movs	r2, #0
    ce48:	4619      	mov	r1, r3
    ce4a:	9803      	ldr	r0, [sp, #12]
    ce4c:	f7ff fa0e 	bl	c26c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ce50:	e01a      	b.n	ce88 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    ce52:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ce56:	2201      	movs	r2, #1
    ce58:	4619      	mov	r1, r3
    ce5a:	9803      	ldr	r0, [sp, #12]
    ce5c:	f7ff fa06 	bl	c26c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ce60:	e012      	b.n	ce88 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ce62:	9b00      	ldr	r3, [sp, #0]
    ce64:	685b      	ldr	r3, [r3, #4]
    ce66:	2b01      	cmp	r3, #1
    ce68:	d107      	bne.n	ce7a <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    ce6a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ce6e:	2201      	movs	r2, #1
    ce70:	4619      	mov	r1, r3
    ce72:	9803      	ldr	r0, [sp, #12]
    ce74:	f7ff f9fa 	bl	c26c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ce78:	e006      	b.n	ce88 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ce7a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ce7e:	2200      	movs	r2, #0
    ce80:	4619      	mov	r1, r3
    ce82:	9803      	ldr	r0, [sp, #12]
    ce84:	f7ff f9f2 	bl	c26c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    ce88:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ce8c:	4619      	mov	r1, r3
    ce8e:	9803      	ldr	r0, [sp, #12]
    ce90:	f7fe fe31 	bl	baf6 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    ce94:	9b00      	ldr	r3, [sp, #0]
    ce96:	7819      	ldrb	r1, [r3, #0]
    ce98:	9b00      	ldr	r3, [sp, #0]
    ce9a:	7a5b      	ldrb	r3, [r3, #9]
    ce9c:	461a      	mov	r2, r3
    ce9e:	9803      	ldr	r0, [sp, #12]
    cea0:	f7ff f92c 	bl	c0fc <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    cea4:	9b00      	ldr	r3, [sp, #0]
    cea6:	7819      	ldrb	r1, [r3, #0]
    cea8:	9b00      	ldr	r3, [sp, #0]
    ceaa:	785b      	ldrb	r3, [r3, #1]
    ceac:	461a      	mov	r2, r3
    ceae:	9803      	ldr	r0, [sp, #12]
    ceb0:	f7ff f8fd 	bl	c0ae <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    ceb4:	9b00      	ldr	r3, [sp, #0]
    ceb6:	7a1a      	ldrb	r2, [r3, #8]
    ceb8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    cebc:	4619      	mov	r1, r3
    cebe:	9803      	ldr	r0, [sp, #12]
    cec0:	f7ff fddd 	bl	ca7e <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    cec4:	2101      	movs	r1, #1
    cec6:	9803      	ldr	r0, [sp, #12]
    cec8:	f7ff f814 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    cecc:	bf00      	nop
    cece:	b005      	add	sp, #20
    ced0:	f85d fb04 	ldr.w	pc, [sp], #4
    ced4:	00016480 	.word	0x00016480
    ced8:	1fff8e48 	.word	0x1fff8e48

0000cedc <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    cedc:	b500      	push	{lr}
    cede:	b085      	sub	sp, #20
    cee0:	4603      	mov	r3, r0
    cee2:	460a      	mov	r2, r1
    cee4:	f88d 3007 	strb.w	r3, [sp, #7]
    cee8:	4613      	mov	r3, r2
    ceea:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ceee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cef2:	4a0a      	ldr	r2, [pc, #40]	; (cf1c <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    cef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cef8:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    cefa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cefe:	2200      	movs	r2, #0
    cf00:	4619      	mov	r1, r3
    cf02:	9803      	ldr	r0, [sp, #12]
    cf04:	f7fe feed 	bl	bce2 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    cf08:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cf0c:	4619      	mov	r1, r3
    cf0e:	9803      	ldr	r0, [sp, #12]
    cf10:	f7fe ff0a 	bl	bd28 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    cf14:	bf00      	nop
    cf16:	b005      	add	sp, #20
    cf18:	f85d fb04 	ldr.w	pc, [sp], #4
    cf1c:	00016480 	.word	0x00016480

0000cf20 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    cf20:	b500      	push	{lr}
    cf22:	b085      	sub	sp, #20
    cf24:	4603      	mov	r3, r0
    cf26:	9100      	str	r1, [sp, #0]
    cf28:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cf2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf30:	4a53      	ldr	r2, [pc, #332]	; (d080 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    cf32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf36:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    cf38:	9b00      	ldr	r3, [sp, #0]
    cf3a:	681b      	ldr	r3, [r3, #0]
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	d002      	beq.n	cf46 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    cf40:	2b01      	cmp	r3, #1
    cf42:	d04c      	beq.n	cfde <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    cf44:	e097      	b.n	d076 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    cf46:	9b00      	ldr	r3, [sp, #0]
    cf48:	699b      	ldr	r3, [r3, #24]
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	bf14      	ite	ne
    cf4e:	2301      	movne	r3, #1
    cf50:	2300      	moveq	r3, #0
    cf52:	b2db      	uxtb	r3, r3
    cf54:	4619      	mov	r1, r3
    cf56:	9803      	ldr	r0, [sp, #12]
    cf58:	f7ff faa3 	bl	c4a2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    cf5c:	2100      	movs	r1, #0
    cf5e:	9803      	ldr	r0, [sp, #12]
    cf60:	f7ff fb1c 	bl	c59c <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    cf64:	9b00      	ldr	r3, [sp, #0]
    cf66:	691b      	ldr	r3, [r3, #16]
    cf68:	2b00      	cmp	r3, #0
    cf6a:	bf14      	ite	ne
    cf6c:	2301      	movne	r3, #1
    cf6e:	2300      	moveq	r3, #0
    cf70:	b2db      	uxtb	r3, r3
    cf72:	4619      	mov	r1, r3
    cf74:	9803      	ldr	r0, [sp, #12]
    cf76:	f7ff faad 	bl	c4d4 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    cf7a:	2100      	movs	r1, #0
    cf7c:	9803      	ldr	r0, [sp, #12]
    cf7e:	f7ff fb26 	bl	c5ce <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    cf82:	9b00      	ldr	r3, [sp, #0]
    cf84:	695b      	ldr	r3, [r3, #20]
    cf86:	2b00      	cmp	r3, #0
    cf88:	bf14      	ite	ne
    cf8a:	2301      	movne	r3, #1
    cf8c:	2300      	moveq	r3, #0
    cf8e:	b2db      	uxtb	r3, r3
    cf90:	4619      	mov	r1, r3
    cf92:	9803      	ldr	r0, [sp, #12]
    cf94:	f7ff fab7 	bl	c506 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    cf98:	2100      	movs	r1, #0
    cf9a:	9803      	ldr	r0, [sp, #12]
    cf9c:	f7ff fb17 	bl	c5ce <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    cfa0:	9b00      	ldr	r3, [sp, #0]
    cfa2:	69db      	ldr	r3, [r3, #28]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	bf14      	ite	ne
    cfa8:	2301      	movne	r3, #1
    cfaa:	2300      	moveq	r3, #0
    cfac:	b2db      	uxtb	r3, r3
    cfae:	4619      	mov	r1, r3
    cfb0:	9803      	ldr	r0, [sp, #12]
    cfb2:	f7ff fa5d 	bl	c470 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    cfb6:	2100      	movs	r1, #0
    cfb8:	9803      	ldr	r0, [sp, #12]
    cfba:	f7ff fad6 	bl	c56a <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    cfbe:	9b00      	ldr	r3, [sp, #0]
    cfc0:	6a1b      	ldr	r3, [r3, #32]
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	bf14      	ite	ne
    cfc6:	2301      	movne	r3, #1
    cfc8:	2300      	moveq	r3, #0
    cfca:	b2db      	uxtb	r3, r3
    cfcc:	4619      	mov	r1, r3
    cfce:	9803      	ldr	r0, [sp, #12]
    cfd0:	f7ff fa35 	bl	c43e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    cfd4:	2100      	movs	r1, #0
    cfd6:	9803      	ldr	r0, [sp, #12]
    cfd8:	f7ff faae 	bl	c538 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    cfdc:	e04b      	b.n	d076 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    cfde:	2100      	movs	r1, #0
    cfe0:	9803      	ldr	r0, [sp, #12]
    cfe2:	f7ff fa5e 	bl	c4a2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    cfe6:	9b00      	ldr	r3, [sp, #0]
    cfe8:	699b      	ldr	r3, [r3, #24]
    cfea:	2b00      	cmp	r3, #0
    cfec:	bf14      	ite	ne
    cfee:	2301      	movne	r3, #1
    cff0:	2300      	moveq	r3, #0
    cff2:	b2db      	uxtb	r3, r3
    cff4:	4619      	mov	r1, r3
    cff6:	9803      	ldr	r0, [sp, #12]
    cff8:	f7ff fad0 	bl	c59c <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    cffc:	2100      	movs	r1, #0
    cffe:	9803      	ldr	r0, [sp, #12]
    d000:	f7ff fa68 	bl	c4d4 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    d004:	9b00      	ldr	r3, [sp, #0]
    d006:	691b      	ldr	r3, [r3, #16]
    d008:	2b00      	cmp	r3, #0
    d00a:	bf14      	ite	ne
    d00c:	2301      	movne	r3, #1
    d00e:	2300      	moveq	r3, #0
    d010:	b2db      	uxtb	r3, r3
    d012:	4619      	mov	r1, r3
    d014:	9803      	ldr	r0, [sp, #12]
    d016:	f7ff fada 	bl	c5ce <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    d01a:	2100      	movs	r1, #0
    d01c:	9803      	ldr	r0, [sp, #12]
    d01e:	f7ff fa72 	bl	c506 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    d022:	9b00      	ldr	r3, [sp, #0]
    d024:	695b      	ldr	r3, [r3, #20]
    d026:	2b00      	cmp	r3, #0
    d028:	bf14      	ite	ne
    d02a:	2301      	movne	r3, #1
    d02c:	2300      	moveq	r3, #0
    d02e:	b2db      	uxtb	r3, r3
    d030:	4619      	mov	r1, r3
    d032:	9803      	ldr	r0, [sp, #12]
    d034:	f7ff facb 	bl	c5ce <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    d038:	2100      	movs	r1, #0
    d03a:	9803      	ldr	r0, [sp, #12]
    d03c:	f7ff fa18 	bl	c470 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d040:	9b00      	ldr	r3, [sp, #0]
    d042:	69db      	ldr	r3, [r3, #28]
    d044:	2b00      	cmp	r3, #0
    d046:	bf14      	ite	ne
    d048:	2301      	movne	r3, #1
    d04a:	2300      	moveq	r3, #0
    d04c:	b2db      	uxtb	r3, r3
    d04e:	4619      	mov	r1, r3
    d050:	9803      	ldr	r0, [sp, #12]
    d052:	f7ff fa8a 	bl	c56a <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    d056:	2100      	movs	r1, #0
    d058:	9803      	ldr	r0, [sp, #12]
    d05a:	f7ff f9f0 	bl	c43e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d05e:	9b00      	ldr	r3, [sp, #0]
    d060:	6a1b      	ldr	r3, [r3, #32]
    d062:	2b00      	cmp	r3, #0
    d064:	bf14      	ite	ne
    d066:	2301      	movne	r3, #1
    d068:	2300      	moveq	r3, #0
    d06a:	b2db      	uxtb	r3, r3
    d06c:	4619      	mov	r1, r3
    d06e:	9803      	ldr	r0, [sp, #12]
    d070:	f7ff fa62 	bl	c538 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    d074:	bf00      	nop
    }
}
    d076:	bf00      	nop
    d078:	b005      	add	sp, #20
    d07a:	f85d fb04 	ldr.w	pc, [sp], #4
    d07e:	bf00      	nop
    d080:	00016480 	.word	0x00016480

0000d084 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d084:	b500      	push	{lr}
    d086:	b085      	sub	sp, #20
    d088:	4603      	mov	r3, r0
    d08a:	9100      	str	r1, [sp, #0]
    d08c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d090:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d094:	4a19      	ldr	r2, [pc, #100]	; (d0fc <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    d096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d09a:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d09c:	9b00      	ldr	r3, [sp, #0]
    d09e:	699b      	ldr	r3, [r3, #24]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	bf14      	ite	ne
    d0a4:	2301      	movne	r3, #1
    d0a6:	2300      	moveq	r3, #0
    d0a8:	b2db      	uxtb	r3, r3
    d0aa:	4619      	mov	r1, r3
    d0ac:	9803      	ldr	r0, [sp, #12]
    d0ae:	f7fe fee6 	bl	be7e <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d0b2:	9b00      	ldr	r3, [sp, #0]
    d0b4:	691b      	ldr	r3, [r3, #16]
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	bf14      	ite	ne
    d0ba:	2301      	movne	r3, #1
    d0bc:	2300      	moveq	r3, #0
    d0be:	b2db      	uxtb	r3, r3
    d0c0:	4619      	mov	r1, r3
    d0c2:	9803      	ldr	r0, [sp, #12]
    d0c4:	f7ff f973 	bl	c3ae <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d0c8:	9b00      	ldr	r3, [sp, #0]
    d0ca:	695b      	ldr	r3, [r3, #20]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	bf14      	ite	ne
    d0d0:	2301      	movne	r3, #1
    d0d2:	2300      	moveq	r3, #0
    d0d4:	b2db      	uxtb	r3, r3
    d0d6:	4619      	mov	r1, r3
    d0d8:	9803      	ldr	r0, [sp, #12]
    d0da:	f7ff f980 	bl	c3de <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d0de:	9b00      	ldr	r3, [sp, #0]
    d0e0:	69db      	ldr	r3, [r3, #28]
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	bf14      	ite	ne
    d0e6:	2301      	movne	r3, #1
    d0e8:	2300      	moveq	r3, #0
    d0ea:	b2db      	uxtb	r3, r3
    d0ec:	4619      	mov	r1, r3
    d0ee:	9803      	ldr	r0, [sp, #12]
    d0f0:	f7ff f945 	bl	c37e <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    d0f4:	bf00      	nop
    d0f6:	b005      	add	sp, #20
    d0f8:	f85d fb04 	ldr.w	pc, [sp], #4
    d0fc:	00016480 	.word	0x00016480

0000d100 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d100:	b500      	push	{lr}
    d102:	b087      	sub	sp, #28
    d104:	4603      	mov	r3, r0
    d106:	9100      	str	r1, [sp, #0]
    d108:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d10c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d110:	4a42      	ldr	r2, [pc, #264]	; (d21c <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    d112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d116:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    d118:	2300      	movs	r3, #0
    d11a:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    d11c:	2300      	movs	r3, #0
    d11e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    d122:	9b00      	ldr	r3, [sp, #0]
    d124:	791b      	ldrb	r3, [r3, #4]
    d126:	2b00      	cmp	r3, #0
    d128:	d107      	bne.n	d13a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d12a:	9b00      	ldr	r3, [sp, #0]
    d12c:	795b      	ldrb	r3, [r3, #5]
    d12e:	2b00      	cmp	r3, #0
    d130:	d103      	bne.n	d13a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d132:	9b00      	ldr	r3, [sp, #0]
    d134:	799b      	ldrb	r3, [r3, #6]
    d136:	2b00      	cmp	r3, #0
    d138:	d001      	beq.n	d13e <Ftm_Pwm_Ip_UpdateSync+0x3e>
    d13a:	2301      	movs	r3, #1
    d13c:	e000      	b.n	d140 <Ftm_Pwm_Ip_UpdateSync+0x40>
    d13e:	2300      	movs	r3, #0
    d140:	f88d 300f 	strb.w	r3, [sp, #15]
    d144:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d148:	f003 0301 	and.w	r3, r3, #1
    d14c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    d150:	9b00      	ldr	r3, [sp, #0]
    d152:	681b      	ldr	r3, [r3, #0]
    d154:	2b00      	cmp	r3, #0
    d156:	d105      	bne.n	d164 <Ftm_Pwm_Ip_UpdateSync+0x64>
    d158:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d001      	beq.n	d164 <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d160:	2301      	movs	r3, #1
    d162:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    d164:	9b00      	ldr	r3, [sp, #0]
    d166:	6a1b      	ldr	r3, [r3, #32]
    d168:	2b02      	cmp	r3, #2
    d16a:	d101      	bne.n	d170 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d16c:	2301      	movs	r3, #1
    d16e:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    d170:	9b05      	ldr	r3, [sp, #20]
    d172:	2b00      	cmp	r3, #0
    d174:	d14c      	bne.n	d210 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    d176:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d17a:	9900      	ldr	r1, [sp, #0]
    d17c:	4618      	mov	r0, r3
    d17e:	f7ff fecf 	bl	cf20 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    d182:	2101      	movs	r1, #1
    d184:	9804      	ldr	r0, [sp, #16]
    d186:	f7ff f942 	bl	c40e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    d18a:	9b00      	ldr	r3, [sp, #0]
    d18c:	791b      	ldrb	r3, [r3, #4]
    d18e:	461a      	mov	r2, r3
    d190:	2100      	movs	r1, #0
    d192:	9804      	ldr	r0, [sp, #16]
    d194:	f7fe fe89 	bl	beaa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    d198:	9b00      	ldr	r3, [sp, #0]
    d19a:	795b      	ldrb	r3, [r3, #5]
    d19c:	461a      	mov	r2, r3
    d19e:	2101      	movs	r1, #1
    d1a0:	9804      	ldr	r0, [sp, #16]
    d1a2:	f7fe fe82 	bl	beaa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    d1a6:	9b00      	ldr	r3, [sp, #0]
    d1a8:	799b      	ldrb	r3, [r3, #6]
    d1aa:	461a      	mov	r2, r3
    d1ac:	2102      	movs	r1, #2
    d1ae:	9804      	ldr	r0, [sp, #16]
    d1b0:	f7fe fe7b 	bl	beaa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    d1b4:	9b00      	ldr	r3, [sp, #0]
    d1b6:	79db      	ldrb	r3, [r3, #7]
    d1b8:	4619      	mov	r1, r3
    d1ba:	9804      	ldr	r0, [sp, #16]
    d1bc:	f7ff f8c7 	bl	c34e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    d1c0:	9b00      	ldr	r3, [sp, #0]
    d1c2:	7a1b      	ldrb	r3, [r3, #8]
    d1c4:	4619      	mov	r1, r3
    d1c6:	9804      	ldr	r0, [sp, #16]
    d1c8:	f7fe fe43 	bl	be52 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    d1cc:	9b00      	ldr	r3, [sp, #0]
    d1ce:	7a5b      	ldrb	r3, [r3, #9]
    d1d0:	4619      	mov	r1, r3
    d1d2:	9804      	ldr	r0, [sp, #16]
    d1d4:	f7fe fe27 	bl	be26 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    d1d8:	9b00      	ldr	r3, [sp, #0]
    d1da:	7a9b      	ldrb	r3, [r3, #10]
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d005      	beq.n	d1ec <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    d1e0:	9b00      	ldr	r3, [sp, #0]
    d1e2:	899b      	ldrh	r3, [r3, #12]
    d1e4:	4619      	mov	r1, r3
    d1e6:	9804      	ldr	r0, [sp, #16]
    d1e8:	f7ff fac6 	bl	c778 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    d1ec:	9b00      	ldr	r3, [sp, #0]
    d1ee:	7a9b      	ldrb	r3, [r3, #10]
    d1f0:	4619      	mov	r1, r3
    d1f2:	9804      	ldr	r0, [sp, #16]
    d1f4:	f7ff faa3 	bl	c73e <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    d1f8:	9b00      	ldr	r3, [sp, #0]
    d1fa:	7b9b      	ldrb	r3, [r3, #14]
    d1fc:	4619      	mov	r1, r3
    d1fe:	9804      	ldr	r0, [sp, #16]
    d200:	f7ff f86b 	bl	c2da <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    d204:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d208:	9900      	ldr	r1, [sp, #0]
    d20a:	4618      	mov	r0, r3
    d20c:	f7ff ff3a 	bl	d084 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    d210:	9b05      	ldr	r3, [sp, #20]
}
    d212:	4618      	mov	r0, r3
    d214:	b007      	add	sp, #28
    d216:	f85d fb04 	ldr.w	pc, [sp], #4
    d21a:	bf00      	nop
    d21c:	00016480 	.word	0x00016480

0000d220 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d220:	b500      	push	{lr}
    d222:	b085      	sub	sp, #20
    d224:	4603      	mov	r3, r0
    d226:	9100      	str	r1, [sp, #0]
    d228:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d22c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d230:	4a1f      	ldr	r2, [pc, #124]	; (d2b0 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    d232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d236:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    d238:	9803      	ldr	r0, [sp, #12]
    d23a:	f7ff fbab 	bl	c994 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d23e:	2100      	movs	r1, #0
    d240:	9803      	ldr	r0, [sp, #12]
    d242:	f7fe fc01 	bl	ba48 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d246:	9803      	ldr	r0, [sp, #12]
    d248:	f7fe fc4a 	bl	bae0 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    d24c:	9b00      	ldr	r3, [sp, #0]
    d24e:	68db      	ldr	r3, [r3, #12]
    d250:	2b00      	cmp	r3, #0
    d252:	bf14      	ite	ne
    d254:	2301      	movne	r3, #1
    d256:	2300      	moveq	r3, #0
    d258:	b2db      	uxtb	r3, r3
    d25a:	4619      	mov	r1, r3
    d25c:	9803      	ldr	r0, [sp, #12]
    d25e:	f7fe fc04 	bl	ba6a <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    d262:	2100      	movs	r1, #0
    d264:	9803      	ldr	r0, [sp, #12]
    d266:	f7fe fdb2 	bl	bdce <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    d26a:	9b00      	ldr	r3, [sp, #0]
    d26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d26e:	4619      	mov	r1, r3
    d270:	9803      	ldr	r0, [sp, #12]
    d272:	f7ff f847 	bl	c304 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    d276:	9b00      	ldr	r3, [sp, #0]
    d278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d27a:	b2db      	uxtb	r3, r3
    d27c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d280:	b2db      	uxtb	r3, r3
    d282:	4619      	mov	r1, r3
    d284:	9803      	ldr	r0, [sp, #12]
    d286:	f7fe ff87 	bl	c198 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    d28a:	9b00      	ldr	r3, [sp, #0]
    d28c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d28e:	099b      	lsrs	r3, r3, #6
    d290:	b29b      	uxth	r3, r3
    d292:	b2db      	uxtb	r3, r3
    d294:	4619      	mov	r1, r3
    d296:	9803      	ldr	r0, [sp, #12]
    d298:	f7fe ffa2 	bl	c1e0 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    d29c:	9b00      	ldr	r3, [sp, #0]
    d29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d2a0:	4619      	mov	r1, r3
    d2a2:	9803      	ldr	r0, [sp, #12]
    d2a4:	f7fe ff8b 	bl	c1be <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    d2a8:	bf00      	nop
    d2aa:	b005      	add	sp, #20
    d2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    d2b0:	00016480 	.word	0x00016480

0000d2b4 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d2b4:	b500      	push	{lr}
    d2b6:	b085      	sub	sp, #20
    d2b8:	4603      	mov	r3, r0
    d2ba:	9100      	str	r1, [sp, #0]
    d2bc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d2c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2c4:	4a39      	ldr	r2, [pc, #228]	; (d3ac <Ftm_Pwm_Ip_InitInstance+0xf8>)
    d2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ca:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    d2cc:	4b38      	ldr	r3, [pc, #224]	; (d3b0 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    d2ce:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    d2d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2d4:	4619      	mov	r1, r3
    d2d6:	9802      	ldr	r0, [sp, #8]
    d2d8:	f7ff fd20 	bl	cd1c <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    d2dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2e0:	9900      	ldr	r1, [sp, #0]
    d2e2:	4618      	mov	r0, r3
    d2e4:	f7ff ff9c 	bl	d220 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    d2e8:	9b00      	ldr	r3, [sp, #0]
    d2ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d2ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2f0:	4611      	mov	r1, r2
    d2f2:	4618      	mov	r0, r3
    d2f4:	f7ff ff04 	bl	d100 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    d2f8:	2100      	movs	r1, #0
    d2fa:	9803      	ldr	r0, [sp, #12]
    d2fc:	f7fe fd56 	bl	bdac <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    d300:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d304:	9a00      	ldr	r2, [sp, #0]
    d306:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    d308:	4a2a      	ldr	r2, [pc, #168]	; (d3b4 <Ftm_Pwm_Ip_InitInstance+0x100>)
    d30a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    d30e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d312:	9a00      	ldr	r2, [sp, #0]
    d314:	6812      	ldr	r2, [r2, #0]
    d316:	4928      	ldr	r1, [pc, #160]	; (d3b8 <Ftm_Pwm_Ip_InitInstance+0x104>)
    d318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    d31c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d320:	9a00      	ldr	r2, [sp, #0]
    d322:	6852      	ldr	r2, [r2, #4]
    d324:	4925      	ldr	r1, [pc, #148]	; (d3bc <Ftm_Pwm_Ip_InitInstance+0x108>)
    d326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    d32a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d32e:	9a00      	ldr	r2, [sp, #0]
    d330:	6892      	ldr	r2, [r2, #8]
    d332:	4923      	ldr	r1, [pc, #140]	; (d3c0 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    d334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    d338:	9b00      	ldr	r3, [sp, #0]
    d33a:	7c1b      	ldrb	r3, [r3, #16]
    d33c:	2b00      	cmp	r3, #0
    d33e:	d00e      	beq.n	d35e <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    d340:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d344:	9a00      	ldr	r2, [sp, #0]
    d346:	6952      	ldr	r2, [r2, #20]
    d348:	491e      	ldr	r1, [pc, #120]	; (d3c4 <Ftm_Pwm_Ip_InitInstance+0x110>)
    d34a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    d34e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d352:	9a00      	ldr	r2, [sp, #0]
    d354:	6992      	ldr	r2, [r2, #24]
    d356:	491b      	ldr	r1, [pc, #108]	; (d3c4 <Ftm_Pwm_Ip_InitInstance+0x110>)
    d358:	00db      	lsls	r3, r3, #3
    d35a:	440b      	add	r3, r1
    d35c:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    d35e:	9b00      	ldr	r3, [sp, #0]
    d360:	68db      	ldr	r3, [r3, #12]
    d362:	2b01      	cmp	r3, #1
    d364:	d108      	bne.n	d378 <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    d366:	9b00      	ldr	r3, [sp, #0]
    d368:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d36a:	085b      	lsrs	r3, r3, #1
    d36c:	b29b      	uxth	r3, r3
    d36e:	4619      	mov	r1, r3
    d370:	9803      	ldr	r0, [sp, #12]
    d372:	f7fe fbe3 	bl	bb3c <Ftm_Pwm_Ip_SetMod>
    d376:	e007      	b.n	d388 <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    d378:	9b00      	ldr	r3, [sp, #0]
    d37a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d37c:	3b01      	subs	r3, #1
    d37e:	b29b      	uxth	r3, r3
    d380:	4619      	mov	r1, r3
    d382:	9803      	ldr	r0, [sp, #12]
    d384:	f7fe fbda 	bl	bb3c <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    d388:	9b00      	ldr	r3, [sp, #0]
    d38a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    d38e:	4619      	mov	r1, r3
    d390:	9803      	ldr	r0, [sp, #12]
    d392:	f7fe ff39 	bl	c208 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    d396:	9b00      	ldr	r3, [sp, #0]
    d398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d39a:	4619      	mov	r1, r3
    d39c:	9803      	ldr	r0, [sp, #12]
    d39e:	f7fe ffc3 	bl	c328 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    d3a2:	bf00      	nop
    d3a4:	b005      	add	sp, #20
    d3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    d3aa:	bf00      	nop
    d3ac:	00016480 	.word	0x00016480
    d3b0:	40048000 	.word	0x40048000
    d3b4:	1fff8e00 	.word	0x1fff8e00
    d3b8:	1fff90f8 	.word	0x1fff90f8
    d3bc:	1fff9108 	.word	0x1fff9108
    d3c0:	1fff9118 	.word	0x1fff9118
    d3c4:	1fff8fa8 	.word	0x1fff8fa8

0000d3c8 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d3c8:	b500      	push	{lr}
    d3ca:	b085      	sub	sp, #20
    d3cc:	4603      	mov	r3, r0
    d3ce:	9100      	str	r1, [sp, #0]
    d3d0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d3d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3d8:	4a1a      	ldr	r2, [pc, #104]	; (d444 <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    d3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3de:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    d3e0:	9b00      	ldr	r3, [sp, #0]
    d3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d3e6:	4619      	mov	r1, r3
    d3e8:	9803      	ldr	r0, [sp, #12]
    d3ea:	f7ff fc03 	bl	cbf4 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    d3ee:	9b00      	ldr	r3, [sp, #0]
    d3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d3f2:	4619      	mov	r1, r3
    d3f4:	9803      	ldr	r0, [sp, #12]
    d3f6:	f7ff fc11 	bl	cc1c <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    d3fa:	9b00      	ldr	r3, [sp, #0]
    d3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d3fe:	4619      	mov	r1, r3
    d400:	9803      	ldr	r0, [sp, #12]
    d402:	f7ff fb7a 	bl	cafa <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    d406:	2101      	movs	r1, #1
    d408:	9803      	ldr	r0, [sp, #12]
    d40a:	f7fe fce0 	bl	bdce <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    d40e:	2101      	movs	r1, #1
    d410:	9803      	ldr	r0, [sp, #12]
    d412:	f7fe fcf2 	bl	bdfa <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    d416:	9b00      	ldr	r3, [sp, #0]
    d418:	685b      	ldr	r3, [r3, #4]
    d41a:	4619      	mov	r1, r3
    d41c:	9803      	ldr	r0, [sp, #12]
    d41e:	f7fe fb03 	bl	ba28 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    d422:	9b00      	ldr	r3, [sp, #0]
    d424:	681b      	ldr	r3, [r3, #0]
    d426:	4619      	mov	r1, r3
    d428:	9803      	ldr	r0, [sp, #12]
    d42a:	f7fe fb0d 	bl	ba48 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d42e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d432:	4a05      	ldr	r2, [pc, #20]	; (d448 <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    d434:	2101      	movs	r1, #1
    d436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    d43a:	bf00      	nop
    d43c:	b005      	add	sp, #20
    d43e:	f85d fb04 	ldr.w	pc, [sp], #4
    d442:	bf00      	nop
    d444:	00016480 	.word	0x00016480
    d448:	1fff8fc8 	.word	0x1fff8fc8

0000d44c <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d44c:	b500      	push	{lr}
    d44e:	b085      	sub	sp, #20
    d450:	4603      	mov	r3, r0
    d452:	9100      	str	r1, [sp, #0]
    d454:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d458:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d45c:	4a37      	ldr	r2, [pc, #220]	; (d53c <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    d45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d462:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d464:	2300      	movs	r3, #0
    d466:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    d46a:	2300      	movs	r3, #0
    d46c:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d470:	9b00      	ldr	r3, [sp, #0]
    d472:	781b      	ldrb	r3, [r3, #0]
    d474:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    d478:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d47c:	085b      	lsrs	r3, r3, #1
    d47e:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    d482:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d486:	2201      	movs	r2, #1
    d488:	4619      	mov	r1, r3
    d48a:	9803      	ldr	r0, [sp, #12]
    d48c:	f7fe fe36 	bl	c0fc <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    d490:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d494:	2201      	movs	r2, #1
    d496:	4619      	mov	r1, r3
    d498:	9803      	ldr	r0, [sp, #12]
    d49a:	f7ff fb63 	bl	cb64 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d49e:	9b00      	ldr	r3, [sp, #0]
    d4a0:	685b      	ldr	r3, [r3, #4]
    d4a2:	2b22      	cmp	r3, #34	; 0x22
    d4a4:	d003      	beq.n	d4ae <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    d4a6:	9b00      	ldr	r3, [sp, #0]
    d4a8:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d4aa:	2b21      	cmp	r3, #33	; 0x21
    d4ac:	d113      	bne.n	d4d6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d4ae:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d4b2:	005b      	lsls	r3, r3, #1
    d4b4:	b2db      	uxtb	r3, r3
    d4b6:	3301      	adds	r3, #1
    d4b8:	b2d9      	uxtb	r1, r3
    d4ba:	9b00      	ldr	r3, [sp, #0]
    d4bc:	685b      	ldr	r3, [r3, #4]
    d4be:	461a      	mov	r2, r3
    d4c0:	9803      	ldr	r0, [sp, #12]
    d4c2:	f7fe fb76 	bl	bbb2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d4c6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d4ca:	2201      	movs	r2, #1
    d4cc:	4619      	mov	r1, r3
    d4ce:	9803      	ldr	r0, [sp, #12]
    d4d0:	f7fe fd89 	bl	bfe6 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    d4d4:	e021      	b.n	d51a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d4d6:	9b00      	ldr	r3, [sp, #0]
    d4d8:	685b      	ldr	r3, [r3, #4]
    d4da:	2b62      	cmp	r3, #98	; 0x62
    d4dc:	d003      	beq.n	d4e6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    d4de:	9b00      	ldr	r3, [sp, #0]
    d4e0:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d4e2:	2b61      	cmp	r3, #97	; 0x61
    d4e4:	d119      	bne.n	d51a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d4e6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d4ea:	005b      	lsls	r3, r3, #1
    d4ec:	b2db      	uxtb	r3, r3
    d4ee:	3301      	adds	r3, #1
    d4f0:	b2d9      	uxtb	r1, r3
    d4f2:	9b00      	ldr	r3, [sp, #0]
    d4f4:	685b      	ldr	r3, [r3, #4]
    d4f6:	461a      	mov	r2, r3
    d4f8:	9803      	ldr	r0, [sp, #12]
    d4fa:	f7fe fb5a 	bl	bbb2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d4fe:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d502:	2201      	movs	r2, #1
    d504:	4619      	mov	r1, r3
    d506:	9803      	ldr	r0, [sp, #12]
    d508:	f7fe fd6d 	bl	bfe6 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    d50c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d510:	2201      	movs	r2, #1
    d512:	4619      	mov	r1, r3
    d514:	9803      	ldr	r0, [sp, #12]
    d516:	f7fe fe18 	bl	c14a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    d51a:	9b00      	ldr	r3, [sp, #0]
    d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d51e:	2b00      	cmp	r3, #0
    d520:	d007      	beq.n	d532 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    d522:	9b00      	ldr	r3, [sp, #0]
    d524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d526:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d52a:	4611      	mov	r1, r2
    d52c:	4618      	mov	r0, r3
    d52e:	f7ff fc47 	bl	cdc0 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    d532:	bf00      	nop
    d534:	b005      	add	sp, #20
    d536:	f85d fb04 	ldr.w	pc, [sp], #4
    d53a:	bf00      	nop
    d53c:	00016480 	.word	0x00016480

0000d540 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d540:	b500      	push	{lr}
    d542:	b085      	sub	sp, #20
    d544:	4603      	mov	r3, r0
    d546:	9100      	str	r1, [sp, #0]
    d548:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d54c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d550:	4a15      	ldr	r2, [pc, #84]	; (d5a8 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    d552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d556:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    d558:	9b00      	ldr	r3, [sp, #0]
    d55a:	7819      	ldrb	r1, [r3, #0]
    d55c:	9b00      	ldr	r3, [sp, #0]
    d55e:	7ddb      	ldrb	r3, [r3, #23]
    d560:	461a      	mov	r2, r3
    d562:	9803      	ldr	r0, [sp, #12]
    d564:	f7ff fa8b 	bl	ca7e <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    d568:	9b00      	ldr	r3, [sp, #0]
    d56a:	7819      	ldrb	r1, [r3, #0]
    d56c:	9b00      	ldr	r3, [sp, #0]
    d56e:	7e1b      	ldrb	r3, [r3, #24]
    d570:	461a      	mov	r2, r3
    d572:	9803      	ldr	r0, [sp, #12]
    d574:	f7ff f8ba 	bl	c6ec <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    d578:	9b00      	ldr	r3, [sp, #0]
    d57a:	7819      	ldrb	r1, [r3, #0]
    d57c:	9b00      	ldr	r3, [sp, #0]
    d57e:	7d5b      	ldrb	r3, [r3, #21]
    d580:	461a      	mov	r2, r3
    d582:	9803      	ldr	r0, [sp, #12]
    d584:	f7ff f87c 	bl	c680 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    d588:	9b00      	ldr	r3, [sp, #0]
    d58a:	7819      	ldrb	r1, [r3, #0]
    d58c:	9b00      	ldr	r3, [sp, #0]
    d58e:	7d9b      	ldrb	r3, [r3, #22]
    d590:	461a      	mov	r2, r3
    d592:	9803      	ldr	r0, [sp, #12]
    d594:	f7ff f834 	bl	c600 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d598:	2101      	movs	r1, #1
    d59a:	9803      	ldr	r0, [sp, #12]
    d59c:	f7fe fcaa 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d5a0:	bf00      	nop
    d5a2:	b005      	add	sp, #20
    d5a4:	f85d fb04 	ldr.w	pc, [sp], #4
    d5a8:	00016480 	.word	0x00016480

0000d5ac <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d5ac:	b500      	push	{lr}
    d5ae:	b085      	sub	sp, #20
    d5b0:	4603      	mov	r3, r0
    d5b2:	9100      	str	r1, [sp, #0]
    d5b4:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d5b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d5bc:	4a48      	ldr	r2, [pc, #288]	; (d6e0 <Ftm_Pwm_Ip_InitChannel+0x134>)
    d5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c2:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d5c4:	2300      	movs	r3, #0
    d5c6:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d5ca:	9b00      	ldr	r3, [sp, #0]
    d5cc:	781b      	ldrb	r3, [r3, #0]
    d5ce:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    d5d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d5d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5da:	9900      	ldr	r1, [sp, #0]
    d5dc:	8b48      	ldrh	r0, [r1, #26]
    d5de:	4941      	ldr	r1, [pc, #260]	; (d6e4 <Ftm_Pwm_Ip_InitChannel+0x138>)
    d5e0:	00d2      	lsls	r2, r2, #3
    d5e2:	4413      	add	r3, r2
    d5e4:	4602      	mov	r2, r0
    d5e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    d5ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d5ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5f2:	9a00      	ldr	r2, [sp, #0]
    d5f4:	69d2      	ldr	r2, [r2, #28]
    d5f6:	483c      	ldr	r0, [pc, #240]	; (d6e8 <Ftm_Pwm_Ip_InitChannel+0x13c>)
    d5f8:	00c9      	lsls	r1, r1, #3
    d5fa:	440b      	add	r3, r1
    d5fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    d600:	9b00      	ldr	r3, [sp, #0]
    d602:	6a1a      	ldr	r2, [r3, #32]
    d604:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d608:	4619      	mov	r1, r3
    d60a:	9803      	ldr	r0, [sp, #12]
    d60c:	f7fe fe2e 	bl	c26c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    d610:	9b00      	ldr	r3, [sp, #0]
    d612:	69da      	ldr	r2, [r3, #28]
    d614:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d618:	4619      	mov	r1, r3
    d61a:	9803      	ldr	r0, [sp, #12]
    d61c:	f7fe fc80 	bl	bf20 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d620:	9b00      	ldr	r3, [sp, #0]
    d622:	685a      	ldr	r2, [r3, #4]
    d624:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d628:	4619      	mov	r1, r3
    d62a:	9803      	ldr	r0, [sp, #12]
    d62c:	f7fe fac1 	bl	bbb2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d630:	9b00      	ldr	r3, [sp, #0]
    d632:	685a      	ldr	r2, [r3, #4]
    d634:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d638:	4619      	mov	r1, r3
    d63a:	9803      	ldr	r0, [sp, #12]
    d63c:	f7fe faf0 	bl	bc20 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    d640:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d644:	9900      	ldr	r1, [sp, #0]
    d646:	4618      	mov	r0, r3
    d648:	f7ff ff00 	bl	d44c <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    d64c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d650:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d654:	4923      	ldr	r1, [pc, #140]	; (d6e4 <Ftm_Pwm_Ip_InitChannel+0x138>)
    d656:	00d2      	lsls	r2, r2, #3
    d658:	4413      	add	r3, r2
    d65a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    d65e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    d662:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d666:	2301      	movs	r3, #1
    d668:	f000 f9c0 	bl	d9ec <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    d66c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d670:	9900      	ldr	r1, [sp, #0]
    d672:	4618      	mov	r0, r3
    d674:	f7ff ff64 	bl	d540 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    d678:	9b00      	ldr	r3, [sp, #0]
    d67a:	7d1b      	ldrb	r3, [r3, #20]
    d67c:	2b00      	cmp	r3, #0
    d67e:	d005      	beq.n	d68c <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    d680:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d684:	4619      	mov	r1, r3
    d686:	9803      	ldr	r0, [sp, #12]
    d688:	f7fe fa35 	bl	baf6 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d68c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d690:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d694:	4915      	ldr	r1, [pc, #84]	; (d6ec <Ftm_Pwm_Ip_InitChannel+0x140>)
    d696:	00d2      	lsls	r2, r2, #3
    d698:	4413      	add	r3, r2
    d69a:	2201      	movs	r2, #1
    d69c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    d6a0:	9b00      	ldr	r3, [sp, #0]
    d6a2:	7a1b      	ldrb	r3, [r3, #8]
    d6a4:	2b00      	cmp	r3, #0
    d6a6:	d016      	beq.n	d6d6 <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    d6a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d6ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6b0:	9a00      	ldr	r2, [sp, #0]
    d6b2:	68d2      	ldr	r2, [r2, #12]
    d6b4:	480e      	ldr	r0, [pc, #56]	; (d6f0 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d6b6:	00c9      	lsls	r1, r1, #3
    d6b8:	440b      	add	r3, r1
    d6ba:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    d6be:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d6c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6c6:	9a00      	ldr	r2, [sp, #0]
    d6c8:	6912      	ldr	r2, [r2, #16]
    d6ca:	4809      	ldr	r0, [pc, #36]	; (d6f0 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d6cc:	00c9      	lsls	r1, r1, #3
    d6ce:	440b      	add	r3, r1
    d6d0:	00db      	lsls	r3, r3, #3
    d6d2:	4403      	add	r3, r0
    d6d4:	605a      	str	r2, [r3, #4]
    }

}
    d6d6:	bf00      	nop
    d6d8:	b005      	add	sp, #20
    d6da:	f85d fb04 	ldr.w	pc, [sp], #4
    d6de:	bf00      	nop
    d6e0:	00016480 	.word	0x00016480
    d6e4:	1fff8e08 	.word	0x1fff8e08
    d6e8:	1fff9078 	.word	0x1fff9078
    d6ec:	1fff8fd8 	.word	0x1fff8fd8
    d6f0:	1fff8ea8 	.word	0x1fff8ea8

0000d6f4 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    d6f4:	b500      	push	{lr}
    d6f6:	b085      	sub	sp, #20
    d6f8:	4603      	mov	r3, r0
    d6fa:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d6fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d702:	4a17      	ldr	r2, [pc, #92]	; (d760 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    d704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d708:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d70a:	2100      	movs	r1, #0
    d70c:	9803      	ldr	r0, [sp, #12]
    d70e:	f7fe f99b 	bl	ba48 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    d712:	2100      	movs	r1, #0
    d714:	9803      	ldr	r0, [sp, #12]
    d716:	f7fe fd63 	bl	c1e0 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    d71a:	2101      	movs	r1, #1
    d71c:	9803      	ldr	r0, [sp, #12]
    d71e:	f7fe fd4e 	bl	c1be <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    d722:	2100      	movs	r1, #0
    d724:	9803      	ldr	r0, [sp, #12]
    d726:	f7fe fd37 	bl	c198 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    d72a:	2100      	movs	r1, #0
    d72c:	9803      	ldr	r0, [sp, #12]
    d72e:	f7fe fde9 	bl	c304 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    d732:	2100      	movs	r1, #0
    d734:	9803      	ldr	r0, [sp, #12]
    d736:	f7fe f9bc 	bl	bab2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    d73a:	2100      	movs	r1, #0
    d73c:	9803      	ldr	r0, [sp, #12]
    d73e:	f7fe f9fd 	bl	bb3c <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    d742:	2100      	movs	r1, #0
    d744:	9803      	ldr	r0, [sp, #12]
    d746:	f7fe f9e8 	bl	bb1a <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    d74a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d74e:	4a05      	ldr	r2, [pc, #20]	; (d764 <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    d750:	2100      	movs	r1, #0
    d752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    d756:	bf00      	nop
    d758:	b005      	add	sp, #20
    d75a:	f85d fb04 	ldr.w	pc, [sp], #4
    d75e:	bf00      	nop
    d760:	00016480 	.word	0x00016480
    d764:	1fff8fc8 	.word	0x1fff8fc8

0000d768 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    d768:	b500      	push	{lr}
    d76a:	b085      	sub	sp, #20
    d76c:	4603      	mov	r3, r0
    d76e:	460a      	mov	r2, r1
    d770:	f88d 3007 	strb.w	r3, [sp, #7]
    d774:	4613      	mov	r3, r2
    d776:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d77a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d77e:	4a29      	ldr	r2, [pc, #164]	; (d824 <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    d780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d784:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    d786:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d78a:	085b      	lsrs	r3, r3, #1
    d78c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    d790:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d794:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d798:	4611      	mov	r1, r2
    d79a:	4618      	mov	r0, r3
    d79c:	f7ff fb9e 	bl	cedc <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    d7a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d7a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d7a8:	491f      	ldr	r1, [pc, #124]	; (d828 <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    d7aa:	00d2      	lsls	r2, r2, #3
    d7ac:	4413      	add	r3, r2
    d7ae:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d7b2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    d7b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d7ba:	2301      	movs	r3, #1
    d7bc:	f000 fa4c 	bl	dc58 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    d7c0:	2100      	movs	r1, #0
    d7c2:	9803      	ldr	r0, [sp, #12]
    d7c4:	f7fe fb96 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    d7c8:	2101      	movs	r1, #1
    d7ca:	9803      	ldr	r0, [sp, #12]
    d7cc:	f7fe fb57 	bl	be7e <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    d7d0:	2101      	movs	r1, #1
    d7d2:	9803      	ldr	r0, [sp, #12]
    d7d4:	f7fe fe65 	bl	c4a2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    d7d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d7dc:	2200      	movs	r2, #0
    d7de:	4619      	mov	r1, r3
    d7e0:	9803      	ldr	r0, [sp, #12]
    d7e2:	f7fe fbbf 	bl	bf64 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d7e6:	2101      	movs	r1, #1
    d7e8:	9803      	ldr	r0, [sp, #12]
    d7ea:	f7fe fb83 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    d7ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d7f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7f6:	005b      	lsls	r3, r3, #1
    d7f8:	490c      	ldr	r1, [pc, #48]	; (d82c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    d7fa:	00d2      	lsls	r2, r2, #3
    d7fc:	440a      	add	r2, r1
    d7fe:	4413      	add	r3, r2
    d800:	2200      	movs	r2, #0
    d802:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    d804:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d808:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d80c:	005b      	lsls	r3, r3, #1
    d80e:	3301      	adds	r3, #1
    d810:	4906      	ldr	r1, [pc, #24]	; (d82c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    d812:	00d2      	lsls	r2, r2, #3
    d814:	440a      	add	r2, r1
    d816:	4413      	add	r3, r2
    d818:	2200      	movs	r2, #0
    d81a:	701a      	strb	r2, [r3, #0]

}
    d81c:	bf00      	nop
    d81e:	b005      	add	sp, #20
    d820:	f85d fb04 	ldr.w	pc, [sp], #4
    d824:	00016480 	.word	0x00016480
    d828:	1fff9078 	.word	0x1fff9078
    d82c:	1fff9058 	.word	0x1fff9058

0000d830 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    d830:	b500      	push	{lr}
    d832:	b085      	sub	sp, #20
    d834:	4603      	mov	r3, r0
    d836:	9100      	str	r1, [sp, #0]
    d838:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d83c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d840:	4a15      	ldr	r2, [pc, #84]	; (d898 <Ftm_Pwm_Ip_InitChFault+0x68>)
    d842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d846:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    d848:	9b00      	ldr	r3, [sp, #0]
    d84a:	7819      	ldrb	r1, [r3, #0]
    d84c:	9b00      	ldr	r3, [sp, #0]
    d84e:	685b      	ldr	r3, [r3, #4]
    d850:	461a      	mov	r2, r3
    d852:	9803      	ldr	r0, [sp, #12]
    d854:	f7ff f9f6 	bl	cc44 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    d858:	9b00      	ldr	r3, [sp, #0]
    d85a:	7819      	ldrb	r1, [r3, #0]
    d85c:	9b00      	ldr	r3, [sp, #0]
    d85e:	7a1b      	ldrb	r3, [r3, #8]
    d860:	461a      	mov	r2, r3
    d862:	9803      	ldr	r0, [sp, #12]
    d864:	f7ff fa35 	bl	ccd2 <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    d868:	9b00      	ldr	r3, [sp, #0]
    d86a:	781b      	ldrb	r3, [r3, #0]
    d86c:	2201      	movs	r2, #1
    d86e:	4619      	mov	r1, r3
    d870:	9803      	ldr	r0, [sp, #12]
    d872:	f7ff fa0a 	bl	cc8a <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    d876:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d87a:	9a00      	ldr	r2, [sp, #0]
    d87c:	7812      	ldrb	r2, [r2, #0]
    d87e:	4610      	mov	r0, r2
    d880:	9a00      	ldr	r2, [sp, #0]
    d882:	68d2      	ldr	r2, [r2, #12]
    d884:	4905      	ldr	r1, [pc, #20]	; (d89c <Ftm_Pwm_Ip_InitChFault+0x6c>)
    d886:	009b      	lsls	r3, r3, #2
    d888:	4403      	add	r3, r0
    d88a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d88e:	bf00      	nop
    d890:	b005      	add	sp, #20
    d892:	f85d fb04 	ldr.w	pc, [sp], #4
    d896:	bf00      	nop
    d898:	00016480 	.word	0x00016480
    d89c:	1fff8e68 	.word	0x1fff8e68

0000d8a0 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    d8a0:	b500      	push	{lr}
    d8a2:	b085      	sub	sp, #20
    d8a4:	4603      	mov	r3, r0
    d8a6:	9100      	str	r1, [sp, #0]
    d8a8:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    d8ac:	2300      	movs	r3, #0
    d8ae:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    d8b2:	4b29      	ldr	r3, [pc, #164]	; (d958 <Ftm_Pwm_Ip_Init+0xb8>)
    d8b4:	2200      	movs	r2, #0
    d8b6:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    d8b8:	9b00      	ldr	r3, [sp, #0]
    d8ba:	681a      	ldr	r2, [r3, #0]
    d8bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8c0:	4611      	mov	r1, r2
    d8c2:	4618      	mov	r0, r3
    d8c4:	f7ff fcf6 	bl	d2b4 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    d8c8:	2300      	movs	r3, #0
    d8ca:	f88d 300f 	strb.w	r3, [sp, #15]
    d8ce:	e011      	b.n	d8f4 <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    d8d0:	9b00      	ldr	r3, [sp, #0]
    d8d2:	685a      	ldr	r2, [r3, #4]
    d8d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d8d8:	009b      	lsls	r3, r3, #2
    d8da:	4413      	add	r3, r2
    d8dc:	681a      	ldr	r2, [r3, #0]
    d8de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8e2:	4611      	mov	r1, r2
    d8e4:	4618      	mov	r0, r3
    d8e6:	f7ff fe61 	bl	d5ac <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    d8ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d8ee:	3301      	adds	r3, #1
    d8f0:	f88d 300f 	strb.w	r3, [sp, #15]
    d8f4:	9b00      	ldr	r3, [sp, #0]
    d8f6:	7a1b      	ldrb	r3, [r3, #8]
    d8f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d8fc:	429a      	cmp	r2, r3
    d8fe:	d3e7      	bcc.n	d8d0 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    d900:	9b00      	ldr	r3, [sp, #0]
    d902:	7c1b      	ldrb	r3, [r3, #16]
    d904:	2b00      	cmp	r3, #0
    d906:	d01b      	beq.n	d940 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    d908:	2300      	movs	r3, #0
    d90a:	f88d 300f 	strb.w	r3, [sp, #15]
    d90e:	e011      	b.n	d934 <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    d910:	9b00      	ldr	r3, [sp, #0]
    d912:	68da      	ldr	r2, [r3, #12]
    d914:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d918:	009b      	lsls	r3, r3, #2
    d91a:	4413      	add	r3, r2
    d91c:	681a      	ldr	r2, [r3, #0]
    d91e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d922:	4611      	mov	r1, r2
    d924:	4618      	mov	r0, r3
    d926:	f7ff ff83 	bl	d830 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    d92a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d92e:	3301      	adds	r3, #1
    d930:	f88d 300f 	strb.w	r3, [sp, #15]
    d934:	9b00      	ldr	r3, [sp, #0]
    d936:	7c1b      	ldrb	r3, [r3, #16]
    d938:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d93c:	429a      	cmp	r2, r3
    d93e:	d3e7      	bcc.n	d910 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    d940:	9b00      	ldr	r3, [sp, #0]
    d942:	681a      	ldr	r2, [r3, #0]
    d944:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d948:	4611      	mov	r1, r2
    d94a:	4618      	mov	r0, r3
    d94c:	f7ff fd3c 	bl	d3c8 <Ftm_Pwm_Ip_InitInstanceStart>
}
    d950:	bf00      	nop
    d952:	b005      	add	sp, #20
    d954:	f85d fb04 	ldr.w	pc, [sp], #4
    d958:	1fff8dfc 	.word	0x1fff8dfc

0000d95c <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    d95c:	b500      	push	{lr}
    d95e:	b085      	sub	sp, #20
    d960:	4603      	mov	r3, r0
    d962:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d966:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d96a:	4a1e      	ldr	r2, [pc, #120]	; (d9e4 <Ftm_Pwm_Ip_DeInit+0x88>)
    d96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d970:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    d972:	2300      	movs	r3, #0
    d974:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    d978:	9802      	ldr	r0, [sp, #8]
    d97a:	f7ff f80b 	bl	c994 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    d97e:	2300      	movs	r3, #0
    d980:	f88d 300f 	strb.w	r3, [sp, #15]
    d984:	e021      	b.n	d9ca <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    d986:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d98a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d98e:	4916      	ldr	r1, [pc, #88]	; (d9e8 <Ftm_Pwm_Ip_DeInit+0x8c>)
    d990:	00d2      	lsls	r2, r2, #3
    d992:	4413      	add	r3, r2
    d994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d998:	2b00      	cmp	r3, #0
    d99a:	d011      	beq.n	d9c0 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    d99c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d9a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9a4:	4611      	mov	r1, r2
    d9a6:	4618      	mov	r0, r3
    d9a8:	f7ff fede 	bl	d768 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    d9ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d9b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d9b4:	490c      	ldr	r1, [pc, #48]	; (d9e8 <Ftm_Pwm_Ip_DeInit+0x8c>)
    d9b6:	00d2      	lsls	r2, r2, #3
    d9b8:	4413      	add	r3, r2
    d9ba:	2200      	movs	r2, #0
    d9bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    d9c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d9c4:	3301      	adds	r3, #1
    d9c6:	f88d 300f 	strb.w	r3, [sp, #15]
    d9ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d9ce:	2b07      	cmp	r3, #7
    d9d0:	d9d9      	bls.n	d986 <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    d9d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9d6:	4618      	mov	r0, r3
    d9d8:	f7ff fe8c 	bl	d6f4 <Ftm_Pwm_Ip_DeInitInstance>
}
    d9dc:	bf00      	nop
    d9de:	b005      	add	sp, #20
    d9e0:	f85d fb04 	ldr.w	pc, [sp], #4
    d9e4:	00016480 	.word	0x00016480
    d9e8:	1fff8fd8 	.word	0x1fff8fd8

0000d9ec <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    d9ec:	b510      	push	{r4, lr}
    d9ee:	b088      	sub	sp, #32
    d9f0:	4604      	mov	r4, r0
    d9f2:	4608      	mov	r0, r1
    d9f4:	4611      	mov	r1, r2
    d9f6:	461a      	mov	r2, r3
    d9f8:	4623      	mov	r3, r4
    d9fa:	f88d 300f 	strb.w	r3, [sp, #15]
    d9fe:	4603      	mov	r3, r0
    da00:	f88d 300e 	strb.w	r3, [sp, #14]
    da04:	460b      	mov	r3, r1
    da06:	f8ad 300c 	strh.w	r3, [sp, #12]
    da0a:	4613      	mov	r3, r2
    da0c:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    da10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    da14:	4a54      	ldr	r2, [pc, #336]	; (db68 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    da16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da1a:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    da1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    da20:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    da24:	f89d 300e 	ldrb.w	r3, [sp, #14]
    da28:	085b      	lsrs	r3, r3, #1
    da2a:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    da2e:	f006 fc07 	bl	14240 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    da32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da36:	f89d 300e 	ldrb.w	r3, [sp, #14]
    da3a:	494c      	ldr	r1, [pc, #304]	; (db6c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    da3c:	00d2      	lsls	r2, r2, #3
    da3e:	4413      	add	r3, r2
    da40:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    da44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    da48:	f89d 300e 	ldrb.w	r3, [sp, #14]
    da4c:	4619      	mov	r1, r3
    da4e:	9807      	ldr	r0, [sp, #28]
    da50:	f7fe feb0 	bl	c7b4 <Ftm_Pwm_Ip_GetChannelMode>
    da54:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    da56:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    da5e:	4944      	ldr	r1, [pc, #272]	; (db70 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    da60:	00d2      	lsls	r2, r2, #3
    da62:	4413      	add	r3, r2
    da64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    da68:	2b02      	cmp	r3, #2
    da6a:	d111      	bne.n	da90 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    da6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da70:	f89d 300e 	ldrb.w	r3, [sp, #14]
    da74:	493e      	ldr	r1, [pc, #248]	; (db70 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    da76:	00d2      	lsls	r2, r2, #3
    da78:	4413      	add	r3, r2
    da7a:	2201      	movs	r2, #1
    da7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    da80:	f89d 100e 	ldrb.w	r1, [sp, #14]
    da84:	f89d 000f 	ldrb.w	r0, [sp, #15]
    da88:	2300      	movs	r3, #0
    da8a:	2200      	movs	r2, #0
    da8c:	f000 f8e4 	bl	dc58 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    da90:	9b05      	ldr	r3, [sp, #20]
    da92:	2b0a      	cmp	r3, #10
    da94:	d008      	beq.n	daa8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    da96:	9b05      	ldr	r3, [sp, #20]
    da98:	2b09      	cmp	r3, #9
    da9a:	d005      	beq.n	daa8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    da9c:	9b05      	ldr	r3, [sp, #20]
    da9e:	2b12      	cmp	r3, #18
    daa0:	d002      	beq.n	daa8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    daa2:	9b05      	ldr	r3, [sp, #20]
    daa4:	2b11      	cmp	r3, #17
    daa6:	d10c      	bne.n	dac2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    daa8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    daac:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dab0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dab4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dab8:	9300      	str	r3, [sp, #0]
    daba:	2300      	movs	r3, #0
    dabc:	f000 f992 	bl	dde4 <Ftm_Pwm_Ip_UpdatePwmChannel>
    dac0:	e04c      	b.n	db5c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    dac2:	9b05      	ldr	r3, [sp, #20]
    dac4:	2b22      	cmp	r3, #34	; 0x22
    dac6:	d008      	beq.n	dada <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    dac8:	9b05      	ldr	r3, [sp, #20]
    daca:	2b62      	cmp	r3, #98	; 0x62
    dacc:	d005      	beq.n	dada <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    dace:	9b05      	ldr	r3, [sp, #20]
    dad0:	2b61      	cmp	r3, #97	; 0x61
    dad2:	d002      	beq.n	dada <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    dad4:	9b05      	ldr	r3, [sp, #20]
    dad6:	2b21      	cmp	r3, #33	; 0x21
    dad8:	d140      	bne.n	db5c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    dada:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dade:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dae2:	4924      	ldr	r1, [pc, #144]	; (db74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dae4:	0092      	lsls	r2, r2, #2
    dae6:	4413      	add	r3, r2
    dae8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    daec:	2b00      	cmp	r3, #0
    daee:	d10d      	bne.n	db0c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    daf0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    daf4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    daf8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dafc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db00:	9300      	str	r3, [sp, #0]
    db02:	4613      	mov	r3, r2
    db04:	2200      	movs	r2, #0
    db06:	f000 f96d 	bl	dde4 <Ftm_Pwm_Ip_UpdatePwmChannel>
    db0a:	e027      	b.n	db5c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    db0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db10:	f89d 3019 	ldrb.w	r3, [sp, #25]
    db14:	4917      	ldr	r1, [pc, #92]	; (db74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    db16:	0092      	lsls	r2, r2, #2
    db18:	4413      	add	r3, r2
    db1a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    db1e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    db22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db26:	4618      	mov	r0, r3
    db28:	f7ff f90a 	bl	cd40 <Ftm_Pwm_Ip_CalculatePhaseShift>
    db2c:	4603      	mov	r3, r0
    db2e:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    db32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db36:	f89d 3019 	ldrb.w	r3, [sp, #25]
    db3a:	490e      	ldr	r1, [pc, #56]	; (db74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    db3c:	0092      	lsls	r2, r2, #2
    db3e:	4413      	add	r3, r2
    db40:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    db44:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    db48:	f89d 100e 	ldrb.w	r1, [sp, #14]
    db4c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    db50:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db54:	9300      	str	r3, [sp, #0]
    db56:	4623      	mov	r3, r4
    db58:	f000 f944 	bl	dde4 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    db5c:	f006 fb9c 	bl	14298 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    db60:	bf00      	nop
    db62:	b008      	add	sp, #32
    db64:	bd10      	pop	{r4, pc}
    db66:	bf00      	nop
    db68:	00016480 	.word	0x00016480
    db6c:	1fff8e08 	.word	0x1fff8e08
    db70:	1fff8fd8 	.word	0x1fff8fd8
    db74:	1fff8e48 	.word	0x1fff8e48

0000db78 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    db78:	b510      	push	{r4, lr}
    db7a:	b084      	sub	sp, #16
    db7c:	4604      	mov	r4, r0
    db7e:	4608      	mov	r0, r1
    db80:	4611      	mov	r1, r2
    db82:	461a      	mov	r2, r3
    db84:	4623      	mov	r3, r4
    db86:	f88d 3007 	strb.w	r3, [sp, #7]
    db8a:	4603      	mov	r3, r0
    db8c:	f88d 3006 	strb.w	r3, [sp, #6]
    db90:	460b      	mov	r3, r1
    db92:	f8ad 3004 	strh.w	r3, [sp, #4]
    db96:	4613      	mov	r3, r2
    db98:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    db9c:	2300      	movs	r3, #0
    db9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dba6:	4a29      	ldr	r2, [pc, #164]	; (dc4c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    dba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbac:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    dbae:	f006 fb99 	bl	142e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    dbb2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dbb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dbba:	4925      	ldr	r1, [pc, #148]	; (dc50 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    dbbc:	00d2      	lsls	r2, r2, #3
    dbbe:	4413      	add	r3, r2
    dbc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dbc4:	2b02      	cmp	r3, #2
    dbc6:	d111      	bne.n	dbec <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    dbc8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dbcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dbd0:	491f      	ldr	r1, [pc, #124]	; (dc50 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    dbd2:	00d2      	lsls	r2, r2, #3
    dbd4:	4413      	add	r3, r2
    dbd6:	2201      	movs	r2, #1
    dbd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    dbdc:	f89d 1006 	ldrb.w	r1, [sp, #6]
    dbe0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dbe4:	2300      	movs	r3, #0
    dbe6:	2200      	movs	r2, #0
    dbe8:	f000 f836 	bl	dc58 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    dbec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    dbf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbf4:	2200      	movs	r2, #0
    dbf6:	4618      	mov	r0, r3
    dbf8:	f000 f988 	bl	df0c <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    dbfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc00:	4914      	ldr	r1, [pc, #80]	; (dc54 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    dc02:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    dc06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    dc0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dc0e:	2b00      	cmp	r3, #0
    dc10:	d103      	bne.n	dc1a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    dc12:	2300      	movs	r3, #0
    dc14:	f8ad 300e 	strh.w	r3, [sp, #14]
    dc18:	e003      	b.n	dc22 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    dc1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    dc1e:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    dc22:	f89d 3018 	ldrb.w	r3, [sp, #24]
    dc26:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    dc2a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    dc2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dc32:	f7ff fedb 	bl	d9ec <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    dc36:	f89d 3018 	ldrb.w	r3, [sp, #24]
    dc3a:	4619      	mov	r1, r3
    dc3c:	9802      	ldr	r0, [sp, #8]
    dc3e:	f7fe f959 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    dc42:	f006 fb7b 	bl	1433c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    dc46:	bf00      	nop
    dc48:	b004      	add	sp, #16
    dc4a:	bd10      	pop	{r4, pc}
    dc4c:	00016480 	.word	0x00016480
    dc50:	1fff8fd8 	.word	0x1fff8fd8
    dc54:	1fff8e00 	.word	0x1fff8e00

0000dc58 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    dc58:	b500      	push	{lr}
    dc5a:	b089      	sub	sp, #36	; 0x24
    dc5c:	9200      	str	r2, [sp, #0]
    dc5e:	461a      	mov	r2, r3
    dc60:	4603      	mov	r3, r0
    dc62:	f88d 3007 	strb.w	r3, [sp, #7]
    dc66:	460b      	mov	r3, r1
    dc68:	f88d 3006 	strb.w	r3, [sp, #6]
    dc6c:	4613      	mov	r3, r2
    dc6e:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dc72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc76:	4a58      	ldr	r2, [pc, #352]	; (ddd8 <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    dc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc7c:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    dc7e:	2300      	movs	r3, #0
    dc80:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    dc84:	2300      	movs	r3, #0
    dc86:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    dc8a:	2300      	movs	r3, #0
    dc8c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    dc90:	2300      	movs	r3, #0
    dc92:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    dc96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dc9a:	4619      	mov	r1, r3
    dc9c:	9805      	ldr	r0, [sp, #20]
    dc9e:	f7fe fd89 	bl	c7b4 <Ftm_Pwm_Ip_GetChannelMode>
    dca2:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    dca4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dca8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dcac:	494b      	ldr	r1, [pc, #300]	; (dddc <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    dcae:	00d2      	lsls	r2, r2, #3
    dcb0:	4413      	add	r3, r2
    dcb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dcb6:	2b02      	cmp	r3, #2
    dcb8:	d109      	bne.n	dcce <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    dcba:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dcbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dcc2:	4947      	ldr	r1, [pc, #284]	; (dde0 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    dcc4:	00d2      	lsls	r2, r2, #3
    dcc6:	4413      	add	r3, r2
    dcc8:	2200      	movs	r2, #0
    dcca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    dcce:	9805      	ldr	r0, [sp, #20]
    dcd0:	f7fe fd5f 	bl	c792 <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    dcd4:	4603      	mov	r3, r0
    dcd6:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    dcda:	9b03      	ldr	r3, [sp, #12]
    dcdc:	2b22      	cmp	r3, #34	; 0x22
    dcde:	d008      	beq.n	dcf2 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    dce0:	9b03      	ldr	r3, [sp, #12]
    dce2:	2b62      	cmp	r3, #98	; 0x62
    dce4:	d005      	beq.n	dcf2 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    dce6:	9b03      	ldr	r3, [sp, #12]
    dce8:	2b61      	cmp	r3, #97	; 0x61
    dcea:	d002      	beq.n	dcf2 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    dcec:	9b03      	ldr	r3, [sp, #12]
    dcee:	2b21      	cmp	r3, #33	; 0x21
    dcf0:	d103      	bne.n	dcfa <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    dcf2:	2303      	movs	r3, #3
    dcf4:	f8ad 301c 	strh.w	r3, [sp, #28]
    dcf8:	e002      	b.n	dd00 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    dcfa:	2301      	movs	r3, #1
    dcfc:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    dd00:	9805      	ldr	r0, [sp, #20]
    dd02:	f7fe fd4f 	bl	c7a4 <Ftm_Pwm_Ip_GetPolInstance>
    dd06:	4603      	mov	r3, r0
    dd08:	4619      	mov	r1, r3
    dd0a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dd0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dd12:	fa02 f303 	lsl.w	r3, r2, r3
    dd16:	b29b      	uxth	r3, r3
    dd18:	400b      	ands	r3, r1
    dd1a:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    dd1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    dd22:	021b      	lsls	r3, r3, #8
    dd24:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    dd28:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dd2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dd30:	3308      	adds	r3, #8
    dd32:	fa02 f303 	lsl.w	r3, r2, r3
    dd36:	b29b      	uxth	r3, r3
    dd38:	43db      	mvns	r3, r3
    dd3a:	b29a      	uxth	r2, r3
    dd3c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dd40:	4013      	ands	r3, r2
    dd42:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    dd46:	f89d 3005 	ldrb.w	r3, [sp, #5]
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d027      	beq.n	dd9e <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    dd4e:	9b00      	ldr	r3, [sp, #0]
    dd50:	2b01      	cmp	r3, #1
    dd52:	d109      	bne.n	dd68 <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    dd54:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dd58:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dd5c:	3308      	adds	r3, #8
    dd5e:	fa02 f303 	lsl.w	r3, r2, r3
    dd62:	f8ad 301a 	strh.w	r3, [sp, #26]
    dd66:	e002      	b.n	dd6e <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    dd68:	2300      	movs	r3, #0
    dd6a:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    dd6e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dd72:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    dd76:	4053      	eors	r3, r2
    dd78:	b29a      	uxth	r2, r3
    dd7a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dd7e:	4313      	orrs	r3, r2
    dd80:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    dd84:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dd88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dd8c:	fa02 f303 	lsl.w	r3, r2, r3
    dd90:	b29a      	uxth	r2, r3
    dd92:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dd96:	4313      	orrs	r3, r2
    dd98:	f8ad 301e 	strh.w	r3, [sp, #30]
    dd9c:	e00d      	b.n	ddba <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    dd9e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dda2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dda6:	fa02 f303 	lsl.w	r3, r2, r3
    ddaa:	b29b      	uxth	r3, r3
    ddac:	43db      	mvns	r3, r3
    ddae:	b29a      	uxth	r2, r3
    ddb0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    ddb4:	4013      	ands	r3, r2
    ddb6:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    ddba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    ddbe:	4619      	mov	r1, r3
    ddc0:	9805      	ldr	r0, [sp, #20]
    ddc2:	f7fe fc86 	bl	c6d2 <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    ddc6:	2101      	movs	r1, #1
    ddc8:	9805      	ldr	r0, [sp, #20]
    ddca:	f7fe f893 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    ddce:	bf00      	nop
    ddd0:	b009      	add	sp, #36	; 0x24
    ddd2:	f85d fb04 	ldr.w	pc, [sp], #4
    ddd6:	bf00      	nop
    ddd8:	00016480 	.word	0x00016480
    dddc:	1fff8fd8 	.word	0x1fff8fd8
    dde0:	1fff8e08 	.word	0x1fff8e08

0000dde4 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    dde4:	b510      	push	{r4, lr}
    dde6:	b086      	sub	sp, #24
    dde8:	4604      	mov	r4, r0
    ddea:	4608      	mov	r0, r1
    ddec:	4611      	mov	r1, r2
    ddee:	461a      	mov	r2, r3
    ddf0:	4623      	mov	r3, r4
    ddf2:	f88d 3007 	strb.w	r3, [sp, #7]
    ddf6:	4603      	mov	r3, r0
    ddf8:	f88d 3006 	strb.w	r3, [sp, #6]
    ddfc:	460b      	mov	r3, r1
    ddfe:	f8ad 3004 	strh.w	r3, [sp, #4]
    de02:	4613      	mov	r3, r2
    de04:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    de08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de0c:	4a3d      	ldr	r2, [pc, #244]	; (df04 <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    de0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de12:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    de14:	2300      	movs	r3, #0
    de16:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    de18:	2300      	movs	r3, #0
    de1a:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    de1e:	2300      	movs	r3, #0
    de20:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    de24:	2300      	movs	r3, #0
    de26:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    de2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    de2e:	085b      	lsrs	r3, r3, #1
    de30:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    de34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de38:	4a33      	ldr	r2, [pc, #204]	; (df08 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    de3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    de3e:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    de42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    de46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    de4a:	429a      	cmp	r2, r3
    de4c:	d805      	bhi.n	de5a <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    de4e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    de52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    de56:	429a      	cmp	r2, r3
    de58:	d903      	bls.n	de62 <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    de5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    de5e:	2b00      	cmp	r3, #0
    de60:	d108      	bne.n	de74 <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    de62:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    de66:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    de6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    de6e:	f8ad 3010 	strh.w	r3, [sp, #16]
    de72:	e001      	b.n	de78 <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    de74:	2301      	movs	r3, #1
    de76:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    de78:	9b05      	ldr	r3, [sp, #20]
    de7a:	2b00      	cmp	r3, #0
    de7c:	d13e      	bne.n	defc <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    de7e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    de82:	4619      	mov	r1, r3
    de84:	9803      	ldr	r0, [sp, #12]
    de86:	f7fe f8d5 	bl	c034 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    de8a:	4603      	mov	r3, r0
    de8c:	2b00      	cmp	r3, #0
    de8e:	d016      	beq.n	debe <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    de90:	f89d 3009 	ldrb.w	r3, [sp, #9]
    de94:	005b      	lsls	r3, r3, #1
    de96:	b2db      	uxtb	r3, r3
    de98:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    de9c:	4619      	mov	r1, r3
    de9e:	9803      	ldr	r0, [sp, #12]
    dea0:	f7fd ff70 	bl	bd84 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    dea4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    dea8:	005b      	lsls	r3, r3, #1
    deaa:	b2db      	uxtb	r3, r3
    deac:	3301      	adds	r3, #1
    deae:	b2db      	uxtb	r3, r3
    deb0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    deb4:	4619      	mov	r1, r3
    deb6:	9803      	ldr	r0, [sp, #12]
    deb8:	f7fd ff64 	bl	bd84 <Ftm_Pwm_Ip_SetChnCountVal>
    debc:	e018      	b.n	def0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    debe:	9803      	ldr	r0, [sp, #12]
    dec0:	f7fd fde9 	bl	ba96 <Ftm_Pwm_Ip_GetCpwms>
    dec4:	4603      	mov	r3, r0
    dec6:	2b01      	cmp	r3, #1
    dec8:	d10a      	bne.n	dee0 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    deca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    dece:	085b      	lsrs	r3, r3, #1
    ded0:	b29a      	uxth	r2, r3
    ded2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ded6:	4619      	mov	r1, r3
    ded8:	9803      	ldr	r0, [sp, #12]
    deda:	f7fd ff53 	bl	bd84 <Ftm_Pwm_Ip_SetChnCountVal>
    dede:	e007      	b.n	def0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    dee0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    dee4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dee8:	4619      	mov	r1, r3
    deea:	9803      	ldr	r0, [sp, #12]
    deec:	f7fd ff4a 	bl	bd84 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    def0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    def4:	4619      	mov	r1, r3
    def6:	9803      	ldr	r0, [sp, #12]
    def8:	f7fd fffc 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    defc:	9b05      	ldr	r3, [sp, #20]
}
    defe:	4618      	mov	r0, r3
    df00:	b006      	add	sp, #24
    df02:	bd10      	pop	{r4, pc}
    df04:	00016480 	.word	0x00016480
    df08:	1fff8e00 	.word	0x1fff8e00

0000df0c <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    df0c:	b500      	push	{lr}
    df0e:	b085      	sub	sp, #20
    df10:	4603      	mov	r3, r0
    df12:	9100      	str	r1, [sp, #0]
    df14:	f88d 3007 	strb.w	r3, [sp, #7]
    df18:	4613      	mov	r3, r2
    df1a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    df1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df22:	4a16      	ldr	r2, [pc, #88]	; (df7c <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    df24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df28:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    df2a:	2300      	movs	r3, #0
    df2c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    df2e:	9b00      	ldr	r3, [sp, #0]
    df30:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    df32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df36:	9a00      	ldr	r2, [sp, #0]
    df38:	b291      	uxth	r1, r2
    df3a:	4a11      	ldr	r2, [pc, #68]	; (df80 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    df3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    df40:	9802      	ldr	r0, [sp, #8]
    df42:	f7fd fda8 	bl	ba96 <Ftm_Pwm_Ip_GetCpwms>
    df46:	4603      	mov	r3, r0
    df48:	2b01      	cmp	r3, #1
    df4a:	d103      	bne.n	df54 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    df4c:	9b03      	ldr	r3, [sp, #12]
    df4e:	085b      	lsrs	r3, r3, #1
    df50:	9303      	str	r3, [sp, #12]
    df52:	e002      	b.n	df5a <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    df54:	9b03      	ldr	r3, [sp, #12]
    df56:	3b01      	subs	r3, #1
    df58:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    df5a:	9b03      	ldr	r3, [sp, #12]
    df5c:	b29b      	uxth	r3, r3
    df5e:	4619      	mov	r1, r3
    df60:	9802      	ldr	r0, [sp, #8]
    df62:	f7fd fdeb 	bl	bb3c <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    df66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df6a:	4619      	mov	r1, r3
    df6c:	9802      	ldr	r0, [sp, #8]
    df6e:	f7fd ffc1 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    df72:	2300      	movs	r3, #0
}
    df74:	4618      	mov	r0, r3
    df76:	b005      	add	sp, #20
    df78:	f85d fb04 	ldr.w	pc, [sp], #4
    df7c:	00016480 	.word	0x00016480
    df80:	1fff8e00 	.word	0x1fff8e00

0000df84 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    df84:	b500      	push	{lr}
    df86:	b085      	sub	sp, #20
    df88:	4603      	mov	r3, r0
    df8a:	460a      	mov	r2, r1
    df8c:	f88d 3007 	strb.w	r3, [sp, #7]
    df90:	4613      	mov	r3, r2
    df92:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    df96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df9a:	4a0d      	ldr	r2, [pc, #52]	; (dfd0 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    df9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa0:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    dfa2:	f006 fa43 	bl	1442c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    dfa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfaa:	4619      	mov	r1, r3
    dfac:	9802      	ldr	r0, [sp, #8]
    dfae:	f7fd fed3 	bl	bd58 <Ftm_Pwm_Ip_GetChOutputValue>
    dfb2:	4603      	mov	r3, r0
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d002      	beq.n	dfbe <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    dfb8:	2301      	movs	r3, #1
    dfba:	9303      	str	r3, [sp, #12]
    dfbc:	e001      	b.n	dfc2 <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    dfbe:	2300      	movs	r3, #0
    dfc0:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    dfc2:	f006 fa5f 	bl	14484 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    dfc6:	9b03      	ldr	r3, [sp, #12]
}
    dfc8:	4618      	mov	r0, r3
    dfca:	b005      	add	sp, #20
    dfcc:	f85d fb04 	ldr.w	pc, [sp], #4
    dfd0:	00016480 	.word	0x00016480

0000dfd4 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    dfd4:	b500      	push	{lr}
    dfd6:	b087      	sub	sp, #28
    dfd8:	4603      	mov	r3, r0
    dfda:	9100      	str	r1, [sp, #0]
    dfdc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dfe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfe4:	4a38      	ldr	r2, [pc, #224]	; (e0c8 <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    dfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfea:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    dfec:	9b00      	ldr	r3, [sp, #0]
    dfee:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    dff2:	f006 fa6d 	bl	144d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    dff6:	9b00      	ldr	r3, [sp, #0]
    dff8:	2b00      	cmp	r3, #0
    dffa:	d014      	beq.n	e026 <Ftm_Pwm_Ip_DisableNotification+0x52>
    dffc:	9b00      	ldr	r3, [sp, #0]
    dffe:	2b01      	cmp	r3, #1
    e000:	d011      	beq.n	e026 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e002:	9b00      	ldr	r3, [sp, #0]
    e004:	2b02      	cmp	r3, #2
    e006:	d00e      	beq.n	e026 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e008:	9b00      	ldr	r3, [sp, #0]
    e00a:	2b03      	cmp	r3, #3
    e00c:	d00b      	beq.n	e026 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e00e:	9b00      	ldr	r3, [sp, #0]
    e010:	2b04      	cmp	r3, #4
    e012:	d008      	beq.n	e026 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e014:	9b00      	ldr	r3, [sp, #0]
    e016:	2b05      	cmp	r3, #5
    e018:	d005      	beq.n	e026 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e01a:	9b00      	ldr	r3, [sp, #0]
    e01c:	2b06      	cmp	r3, #6
    e01e:	d002      	beq.n	e026 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e020:	9b00      	ldr	r3, [sp, #0]
    e022:	2b07      	cmp	r3, #7
    e024:	d136      	bne.n	e094 <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    e026:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e02a:	085b      	lsrs	r3, r3, #1
    e02c:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    e030:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e034:	4619      	mov	r1, r3
    e036:	9805      	ldr	r0, [sp, #20]
    e038:	f7fe fbbc 	bl	c7b4 <Ftm_Pwm_Ip_GetChannelMode>
    e03c:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    e03e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    e042:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e046:	4611      	mov	r1, r2
    e048:	4618      	mov	r0, r3
    e04a:	f7fe ff47 	bl	cedc <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e04e:	9b03      	ldr	r3, [sp, #12]
    e050:	2b22      	cmp	r3, #34	; 0x22
    e052:	d008      	beq.n	e066 <Ftm_Pwm_Ip_DisableNotification+0x92>
    e054:	9b03      	ldr	r3, [sp, #12]
    e056:	2b62      	cmp	r3, #98	; 0x62
    e058:	d005      	beq.n	e066 <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e05a:	9b03      	ldr	r3, [sp, #12]
    e05c:	2b61      	cmp	r3, #97	; 0x61
    e05e:	d002      	beq.n	e066 <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e060:	9b03      	ldr	r3, [sp, #12]
    e062:	2b21      	cmp	r3, #33	; 0x21
    e064:	d129      	bne.n	e0ba <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    e066:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e06a:	005b      	lsls	r3, r3, #1
    e06c:	b2da      	uxtb	r2, r3
    e06e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e072:	4611      	mov	r1, r2
    e074:	4618      	mov	r0, r3
    e076:	f7fe ff31 	bl	cedc <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    e07a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e07e:	005b      	lsls	r3, r3, #1
    e080:	b2db      	uxtb	r3, r3
    e082:	3301      	adds	r3, #1
    e084:	b2da      	uxtb	r2, r3
    e086:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e08a:	4611      	mov	r1, r2
    e08c:	4618      	mov	r0, r3
    e08e:	f7fe ff25 	bl	cedc <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e092:	e012      	b.n	e0ba <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e094:	9b00      	ldr	r3, [sp, #0]
    e096:	2b0a      	cmp	r3, #10
    e098:	d107      	bne.n	e0aa <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    e09a:	2100      	movs	r1, #0
    e09c:	9805      	ldr	r0, [sp, #20]
    e09e:	f7fe fd88 	bl	cbb2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e0a2:	9805      	ldr	r0, [sp, #20]
    e0a4:	f7fe fd9b 	bl	cbde <Ftm_Pwm_Ip_ClearFaultFlag>
    e0a8:	e008      	b.n	e0bc <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e0aa:	9805      	ldr	r0, [sp, #20]
    e0ac:	f7fd fd18 	bl	bae0 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    e0b0:	2100      	movs	r1, #0
    e0b2:	9805      	ldr	r0, [sp, #20]
    e0b4:	f7fd fcfd 	bl	bab2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    e0b8:	e000      	b.n	e0bc <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e0ba:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    e0bc:	f006 fa34 	bl	14528 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    e0c0:	bf00      	nop
    e0c2:	b007      	add	sp, #28
    e0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e0c8:	00016480 	.word	0x00016480

0000e0cc <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    e0cc:	b500      	push	{lr}
    e0ce:	b087      	sub	sp, #28
    e0d0:	4603      	mov	r3, r0
    e0d2:	460a      	mov	r2, r1
    e0d4:	f88d 3007 	strb.w	r3, [sp, #7]
    e0d8:	4613      	mov	r3, r2
    e0da:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e0de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0e2:	4a22      	ldr	r2, [pc, #136]	; (e16c <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    e0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e8:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    e0ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e0ee:	085b      	lsrs	r3, r3, #1
    e0f0:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    e0f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e0f8:	4619      	mov	r1, r3
    e0fa:	9805      	ldr	r0, [sp, #20]
    e0fc:	f7fe fb5a 	bl	c7b4 <Ftm_Pwm_Ip_GetChannelMode>
    e100:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    e102:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e106:	2201      	movs	r2, #1
    e108:	4619      	mov	r1, r3
    e10a:	9805      	ldr	r0, [sp, #20]
    e10c:	f7fd fde9 	bl	bce2 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e110:	9b03      	ldr	r3, [sp, #12]
    e112:	2b22      	cmp	r3, #34	; 0x22
    e114:	d008      	beq.n	e128 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    e116:	9b03      	ldr	r3, [sp, #12]
    e118:	2b62      	cmp	r3, #98	; 0x62
    e11a:	d005      	beq.n	e128 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e11c:	9b03      	ldr	r3, [sp, #12]
    e11e:	2b61      	cmp	r3, #97	; 0x61
    e120:	d002      	beq.n	e128 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e122:	9b03      	ldr	r3, [sp, #12]
    e124:	2b21      	cmp	r3, #33	; 0x21
    e126:	d11d      	bne.n	e164 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    e128:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e12c:	005b      	lsls	r3, r3, #1
    e12e:	b2db      	uxtb	r3, r3
    e130:	3301      	adds	r3, #1
    e132:	b2db      	uxtb	r3, r3
    e134:	4619      	mov	r1, r3
    e136:	9805      	ldr	r0, [sp, #20]
    e138:	f7fd fdf6 	bl	bd28 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    e13c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e140:	005b      	lsls	r3, r3, #1
    e142:	b2db      	uxtb	r3, r3
    e144:	2201      	movs	r2, #1
    e146:	4619      	mov	r1, r3
    e148:	9805      	ldr	r0, [sp, #20]
    e14a:	f7fd fdca 	bl	bce2 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    e14e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e152:	005b      	lsls	r3, r3, #1
    e154:	b2db      	uxtb	r3, r3
    e156:	3301      	adds	r3, #1
    e158:	b2db      	uxtb	r3, r3
    e15a:	2201      	movs	r2, #1
    e15c:	4619      	mov	r1, r3
    e15e:	9805      	ldr	r0, [sp, #20]
    e160:	f7fd fdbf 	bl	bce2 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    e164:	bf00      	nop
    e166:	b007      	add	sp, #28
    e168:	f85d fb04 	ldr.w	pc, [sp], #4
    e16c:	00016480 	.word	0x00016480

0000e170 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    e170:	b500      	push	{lr}
    e172:	b085      	sub	sp, #20
    e174:	4603      	mov	r3, r0
    e176:	9100      	str	r1, [sp, #0]
    e178:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e17c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e180:	4a23      	ldr	r2, [pc, #140]	; (e210 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    e182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e186:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    e188:	9b00      	ldr	r3, [sp, #0]
    e18a:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    e18e:	f006 f9f1 	bl	14574 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    e192:	9b00      	ldr	r3, [sp, #0]
    e194:	2b00      	cmp	r3, #0
    e196:	d014      	beq.n	e1c2 <Ftm_Pwm_Ip_EnableNotification+0x52>
    e198:	9b00      	ldr	r3, [sp, #0]
    e19a:	2b01      	cmp	r3, #1
    e19c:	d011      	beq.n	e1c2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e19e:	9b00      	ldr	r3, [sp, #0]
    e1a0:	2b02      	cmp	r3, #2
    e1a2:	d00e      	beq.n	e1c2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e1a4:	9b00      	ldr	r3, [sp, #0]
    e1a6:	2b03      	cmp	r3, #3
    e1a8:	d00b      	beq.n	e1c2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e1aa:	9b00      	ldr	r3, [sp, #0]
    e1ac:	2b04      	cmp	r3, #4
    e1ae:	d008      	beq.n	e1c2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e1b0:	9b00      	ldr	r3, [sp, #0]
    e1b2:	2b05      	cmp	r3, #5
    e1b4:	d005      	beq.n	e1c2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e1b6:	9b00      	ldr	r3, [sp, #0]
    e1b8:	2b06      	cmp	r3, #6
    e1ba:	d002      	beq.n	e1c2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e1bc:	9b00      	ldr	r3, [sp, #0]
    e1be:	2b07      	cmp	r3, #7
    e1c0:	d10e      	bne.n	e1e0 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    e1c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e1c6:	4619      	mov	r1, r3
    e1c8:	9803      	ldr	r0, [sp, #12]
    e1ca:	f7fd fdad 	bl	bd28 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    e1ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
    e1d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1d6:	4611      	mov	r1, r2
    e1d8:	4618      	mov	r0, r3
    e1da:	f7ff ff77 	bl	e0cc <Ftm_Pwm_Ip_SetNormalNotificationCase>
    e1de:	e011      	b.n	e204 <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e1e0:	9b00      	ldr	r3, [sp, #0]
    e1e2:	2b0a      	cmp	r3, #10
    e1e4:	d107      	bne.n	e1f6 <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e1e6:	9803      	ldr	r0, [sp, #12]
    e1e8:	f7fe fcf9 	bl	cbde <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    e1ec:	2101      	movs	r1, #1
    e1ee:	9803      	ldr	r0, [sp, #12]
    e1f0:	f7fe fcdf 	bl	cbb2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    e1f4:	e006      	b.n	e204 <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e1f6:	9803      	ldr	r0, [sp, #12]
    e1f8:	f7fd fc72 	bl	bae0 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    e1fc:	2101      	movs	r1, #1
    e1fe:	9803      	ldr	r0, [sp, #12]
    e200:	f7fd fc57 	bl	bab2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    e204:	f006 f9e2 	bl	145cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    e208:	bf00      	nop
    e20a:	b005      	add	sp, #20
    e20c:	f85d fb04 	ldr.w	pc, [sp], #4
    e210:	00016480 	.word	0x00016480

0000e214 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    e214:	b500      	push	{lr}
    e216:	b085      	sub	sp, #20
    e218:	4603      	mov	r3, r0
    e21a:	9100      	str	r1, [sp, #0]
    e21c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e220:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e224:	4a0c      	ldr	r2, [pc, #48]	; (e258 <Ftm_Pwm_Ip_SetPowerState+0x44>)
    e226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e22a:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    e22c:	9b00      	ldr	r3, [sp, #0]
    e22e:	2b01      	cmp	r3, #1
    e230:	d104      	bne.n	e23c <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    e232:	2100      	movs	r1, #0
    e234:	9803      	ldr	r0, [sp, #12]
    e236:	f7fd fc07 	bl	ba48 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    e23a:	e008      	b.n	e24e <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    e23c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e240:	4a06      	ldr	r2, [pc, #24]	; (e25c <Ftm_Pwm_Ip_SetPowerState+0x48>)
    e242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e246:	4619      	mov	r1, r3
    e248:	9803      	ldr	r0, [sp, #12]
    e24a:	f7fd fbfd 	bl	ba48 <Ftm_Pwm_Ip_SetClockSource>
}
    e24e:	bf00      	nop
    e250:	b005      	add	sp, #20
    e252:	f85d fb04 	ldr.w	pc, [sp], #4
    e256:	bf00      	nop
    e258:	00016480 	.word	0x00016480
    e25c:	1fff90f8 	.word	0x1fff90f8

0000e260 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    e260:	b500      	push	{lr}
    e262:	b085      	sub	sp, #20
    e264:	4603      	mov	r3, r0
    e266:	9100      	str	r1, [sp, #0]
    e268:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e26c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e270:	4a0e      	ldr	r2, [pc, #56]	; (e2ac <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    e272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e276:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    e278:	9b00      	ldr	r3, [sp, #0]
    e27a:	2b01      	cmp	r3, #1
    e27c:	d109      	bne.n	e292 <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    e27e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e282:	4a0b      	ldr	r2, [pc, #44]	; (e2b0 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    e284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e288:	4619      	mov	r1, r3
    e28a:	9803      	ldr	r0, [sp, #12]
    e28c:	f7fd fbcc 	bl	ba28 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    e290:	e008      	b.n	e2a4 <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    e292:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e296:	4a07      	ldr	r2, [pc, #28]	; (e2b4 <Ftm_Pwm_Ip_SetClockMode+0x54>)
    e298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e29c:	4619      	mov	r1, r3
    e29e:	9803      	ldr	r0, [sp, #12]
    e2a0:	f7fd fbc2 	bl	ba28 <Ftm_Pwm_Ip_SetClockPs>
}
    e2a4:	bf00      	nop
    e2a6:	b005      	add	sp, #20
    e2a8:	f85d fb04 	ldr.w	pc, [sp], #4
    e2ac:	00016480 	.word	0x00016480
    e2b0:	1fff9118 	.word	0x1fff9118
    e2b4:	1fff9108 	.word	0x1fff9108

0000e2b8 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    e2b8:	b500      	push	{lr}
    e2ba:	b085      	sub	sp, #20
    e2bc:	4603      	mov	r3, r0
    e2be:	460a      	mov	r2, r1
    e2c0:	f88d 3007 	strb.w	r3, [sp, #7]
    e2c4:	4613      	mov	r3, r2
    e2c6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e2ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2ce:	4a07      	ldr	r2, [pc, #28]	; (e2ec <Ftm_Pwm_Ip_ResetCounter+0x34>)
    e2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2d4:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    e2d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2da:	4619      	mov	r1, r3
    e2dc:	9803      	ldr	r0, [sp, #12]
    e2de:	f7fe f8ae 	bl	c43e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    e2e2:	bf00      	nop
    e2e4:	b005      	add	sp, #20
    e2e6:	f85d fb04 	ldr.w	pc, [sp], #4
    e2ea:	bf00      	nop
    e2ec:	00016480 	.word	0x00016480

0000e2f0 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    e2f0:	b084      	sub	sp, #16
    e2f2:	4603      	mov	r3, r0
    e2f4:	460a      	mov	r2, r1
    e2f6:	f88d 3007 	strb.w	r3, [sp, #7]
    e2fa:	4613      	mov	r3, r2
    e2fc:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    e300:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e304:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e308:	4905      	ldr	r1, [pc, #20]	; (e320 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    e30a:	00d2      	lsls	r2, r2, #3
    e30c:	4413      	add	r3, r2
    e30e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e312:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    e316:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    e31a:	4618      	mov	r0, r3
    e31c:	b004      	add	sp, #16
    e31e:	4770      	bx	lr
    e320:	1fff8e08 	.word	0x1fff8e08

0000e324 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    e324:	b500      	push	{lr}
    e326:	b087      	sub	sp, #28
    e328:	9202      	str	r2, [sp, #8]
    e32a:	9301      	str	r3, [sp, #4]
    e32c:	4603      	mov	r3, r0
    e32e:	f88d 300f 	strb.w	r3, [sp, #15]
    e332:	460b      	mov	r3, r1
    e334:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e338:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e33c:	4a1f      	ldr	r2, [pc, #124]	; (e3bc <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    e33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e342:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e344:	2300      	movs	r3, #0
    e346:	f88d 3017 	strb.w	r3, [sp, #23]
    e34a:	e026      	b.n	e39a <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    e34c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e350:	9a02      	ldr	r2, [sp, #8]
    e352:	4413      	add	r3, r2
    e354:	7819      	ldrb	r1, [r3, #0]
    e356:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e35a:	005b      	lsls	r3, r3, #1
    e35c:	9a01      	ldr	r2, [sp, #4]
    e35e:	4413      	add	r3, r2
    e360:	881b      	ldrh	r3, [r3, #0]
    e362:	461a      	mov	r2, r3
    e364:	9804      	ldr	r0, [sp, #16]
    e366:	f7fd fd0d 	bl	bd84 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    e36a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e36e:	005b      	lsls	r3, r3, #1
    e370:	9a01      	ldr	r2, [sp, #4]
    e372:	441a      	add	r2, r3
    e374:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e378:	f89d 1017 	ldrb.w	r1, [sp, #23]
    e37c:	9802      	ldr	r0, [sp, #8]
    e37e:	4401      	add	r1, r0
    e380:	7809      	ldrb	r1, [r1, #0]
    e382:	4608      	mov	r0, r1
    e384:	8811      	ldrh	r1, [r2, #0]
    e386:	4a0e      	ldr	r2, [pc, #56]	; (e3c0 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    e388:	00db      	lsls	r3, r3, #3
    e38a:	4403      	add	r3, r0
    e38c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e390:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e394:	3301      	adds	r3, #1
    e396:	f88d 3017 	strb.w	r3, [sp, #23]
    e39a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e39e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e3a2:	429a      	cmp	r2, r3
    e3a4:	d3d2      	bcc.n	e34c <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e3a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e3aa:	4619      	mov	r1, r3
    e3ac:	9804      	ldr	r0, [sp, #16]
    e3ae:	f7fd fda1 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    e3b2:	bf00      	nop
    e3b4:	b007      	add	sp, #28
    e3b6:	f85d fb04 	ldr.w	pc, [sp], #4
    e3ba:	bf00      	nop
    e3bc:	00016480 	.word	0x00016480
    e3c0:	1fff8e08 	.word	0x1fff8e08

0000e3c4 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    e3c4:	b500      	push	{lr}
    e3c6:	b085      	sub	sp, #20
    e3c8:	4603      	mov	r3, r0
    e3ca:	9100      	str	r1, [sp, #0]
    e3cc:	f88d 3007 	strb.w	r3, [sp, #7]
    e3d0:	4613      	mov	r3, r2
    e3d2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e3d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3da:	4a0b      	ldr	r2, [pc, #44]	; (e408 <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    e3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e0:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    e3e2:	f006 f96b 	bl	146bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    e3e6:	9900      	ldr	r1, [sp, #0]
    e3e8:	9803      	ldr	r0, [sp, #12]
    e3ea:	f7fd fde0 	bl	bfae <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e3ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e3f2:	4619      	mov	r1, r3
    e3f4:	9803      	ldr	r0, [sp, #12]
    e3f6:	f7fd fd7d 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    e3fa:	f006 f98b 	bl	14714 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    e3fe:	bf00      	nop
    e400:	b005      	add	sp, #20
    e402:	f85d fb04 	ldr.w	pc, [sp], #4
    e406:	bf00      	nop
    e408:	00016480 	.word	0x00016480

0000e40c <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    e40c:	b500      	push	{lr}
    e40e:	b085      	sub	sp, #20
    e410:	4603      	mov	r3, r0
    e412:	9100      	str	r1, [sp, #0]
    e414:	f88d 3007 	strb.w	r3, [sp, #7]
    e418:	4613      	mov	r3, r2
    e41a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e41e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e422:	4a0b      	ldr	r2, [pc, #44]	; (e450 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    e424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e428:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    e42a:	f006 f999 	bl	14760 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    e42e:	9900      	ldr	r1, [sp, #0]
    e430:	9803      	ldr	r0, [sp, #12]
    e432:	f7fd fdcb 	bl	bfcc <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e436:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e43a:	4619      	mov	r1, r3
    e43c:	9803      	ldr	r0, [sp, #12]
    e43e:	f7fd fd59 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    e442:	f006 f9b9 	bl	147b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    e446:	bf00      	nop
    e448:	b005      	add	sp, #20
    e44a:	f85d fb04 	ldr.w	pc, [sp], #4
    e44e:	bf00      	nop
    e450:	00016480 	.word	0x00016480

0000e454 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    e454:	b510      	push	{r4, lr}
    e456:	b084      	sub	sp, #16
    e458:	4604      	mov	r4, r0
    e45a:	4608      	mov	r0, r1
    e45c:	4611      	mov	r1, r2
    e45e:	461a      	mov	r2, r3
    e460:	4623      	mov	r3, r4
    e462:	f88d 3007 	strb.w	r3, [sp, #7]
    e466:	4603      	mov	r3, r0
    e468:	f88d 3006 	strb.w	r3, [sp, #6]
    e46c:	460b      	mov	r3, r1
    e46e:	f8ad 3004 	strh.w	r3, [sp, #4]
    e472:	4613      	mov	r3, r2
    e474:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e478:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e47c:	4a2e      	ldr	r2, [pc, #184]	; (e538 <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    e47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e482:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    e484:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e488:	085b      	lsrs	r3, r3, #1
    e48a:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    e48e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e492:	492a      	ldr	r1, [pc, #168]	; (e53c <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    e494:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e498:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    e49c:	f006 f9b2 	bl	14804 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e4a0:	9803      	ldr	r0, [sp, #12]
    e4a2:	f7fd faf8 	bl	ba96 <Ftm_Pwm_Ip_GetCpwms>
    e4a6:	4603      	mov	r3, r0
    e4a8:	2b01      	cmp	r3, #1
    e4aa:	d108      	bne.n	e4be <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    e4ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e4b0:	085b      	lsrs	r3, r3, #1
    e4b2:	b29b      	uxth	r3, r3
    e4b4:	4619      	mov	r1, r3
    e4b6:	9803      	ldr	r0, [sp, #12]
    e4b8:	f7fd fb40 	bl	bb3c <Ftm_Pwm_Ip_SetMod>
    e4bc:	e007      	b.n	e4ce <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    e4be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e4c2:	3b01      	subs	r3, #1
    e4c4:	b29b      	uxth	r3, r3
    e4c6:	4619      	mov	r1, r3
    e4c8:	9803      	ldr	r0, [sp, #12]
    e4ca:	f7fd fb37 	bl	bb3c <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    e4ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4d2:	005b      	lsls	r3, r3, #1
    e4d4:	b2db      	uxtb	r3, r3
    e4d6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e4da:	4619      	mov	r1, r3
    e4dc:	9803      	ldr	r0, [sp, #12]
    e4de:	f7fd fc51 	bl	bd84 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    e4e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e4e6:	085b      	lsrs	r3, r3, #1
    e4e8:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    e4ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e4f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e4f4:	4912      	ldr	r1, [pc, #72]	; (e540 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    e4f6:	00d2      	lsls	r2, r2, #3
    e4f8:	4413      	add	r3, r2
    e4fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    e4fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    e502:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e506:	005b      	lsls	r3, r3, #1
    e508:	b2db      	uxtb	r3, r3
    e50a:	3301      	adds	r3, #1
    e50c:	b2d9      	uxtb	r1, r3
    e50e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e512:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e516:	4413      	add	r3, r2
    e518:	b29b      	uxth	r3, r3
    e51a:	461a      	mov	r2, r3
    e51c:	9803      	ldr	r0, [sp, #12]
    e51e:	f7fd fc31 	bl	bd84 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e522:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e526:	4619      	mov	r1, r3
    e528:	9803      	ldr	r0, [sp, #12]
    e52a:	f7fd fce3 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    e52e:	f006 f995 	bl	1485c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    e532:	bf00      	nop
    e534:	b004      	add	sp, #16
    e536:	bd10      	pop	{r4, pc}
    e538:	00016480 	.word	0x00016480
    e53c:	1fff8e00 	.word	0x1fff8e00
    e540:	1fff8e08 	.word	0x1fff8e08

0000e544 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    e544:	b510      	push	{r4, lr}
    e546:	b086      	sub	sp, #24
    e548:	4604      	mov	r4, r0
    e54a:	4608      	mov	r0, r1
    e54c:	4611      	mov	r1, r2
    e54e:	461a      	mov	r2, r3
    e550:	4623      	mov	r3, r4
    e552:	f88d 300f 	strb.w	r3, [sp, #15]
    e556:	4603      	mov	r3, r0
    e558:	f88d 300e 	strb.w	r3, [sp, #14]
    e55c:	460b      	mov	r3, r1
    e55e:	f8ad 300c 	strh.w	r3, [sp, #12]
    e562:	4613      	mov	r3, r2
    e564:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    e568:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e56c:	085b      	lsrs	r3, r3, #1
    e56e:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    e572:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e576:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e57a:	492d      	ldr	r1, [pc, #180]	; (e630 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    e57c:	0092      	lsls	r2, r2, #2
    e57e:	4413      	add	r3, r2
    e580:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e584:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    e588:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e58c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e590:	4928      	ldr	r1, [pc, #160]	; (e634 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    e592:	00d2      	lsls	r2, r2, #3
    e594:	4413      	add	r3, r2
    e596:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e59a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    e59e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e5a2:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    e5a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e5aa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    e5ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e5b2:	4618      	mov	r0, r3
    e5b4:	f7fe fbc4 	bl	cd40 <Ftm_Pwm_Ip_CalculatePhaseShift>
    e5b8:	4603      	mov	r3, r0
    e5ba:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    e5be:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e5c2:	2b00      	cmp	r3, #0
    e5c4:	d003      	beq.n	e5ce <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    e5c6:	2300      	movs	r3, #0
    e5c8:	f88d 3017 	strb.w	r3, [sp, #23]
    e5cc:	e002      	b.n	e5d4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    e5ce:	2301      	movs	r3, #1
    e5d0:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    e5d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e5d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e5dc:	4916      	ldr	r1, [pc, #88]	; (e638 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e5de:	00d2      	lsls	r2, r2, #3
    e5e0:	4413      	add	r3, r2
    e5e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e5e6:	2b02      	cmp	r3, #2
    e5e8:	d111      	bne.n	e60e <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    e5ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e5ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e5f2:	4911      	ldr	r1, [pc, #68]	; (e638 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e5f4:	00d2      	lsls	r2, r2, #3
    e5f6:	4413      	add	r3, r2
    e5f8:	2201      	movs	r2, #1
    e5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    e5fe:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e602:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e606:	2300      	movs	r3, #0
    e608:	2200      	movs	r2, #0
    e60a:	f7ff fb25 	bl	dc58 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    e60e:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    e612:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e616:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e61a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e61e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e622:	9300      	str	r3, [sp, #0]
    e624:	4623      	mov	r3, r4
    e626:	f7ff fbdd 	bl	dde4 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    e62a:	bf00      	nop
    e62c:	b006      	add	sp, #24
    e62e:	bd10      	pop	{r4, pc}
    e630:	1fff8e48 	.word	0x1fff8e48
    e634:	1fff8e08 	.word	0x1fff8e08
    e638:	1fff8fd8 	.word	0x1fff8fd8

0000e63c <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    e63c:	b500      	push	{lr}
    e63e:	b085      	sub	sp, #20
    e640:	4603      	mov	r3, r0
    e642:	9100      	str	r1, [sp, #0]
    e644:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e64c:	4a07      	ldr	r2, [pc, #28]	; (e66c <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    e64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e652:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    e654:	f006 f928 	bl	148a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    e658:	9900      	ldr	r1, [sp, #0]
    e65a:	9803      	ldr	r0, [sp, #12]
    e65c:	f7fd fdea 	bl	c234 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    e660:	f006 f94e 	bl	14900 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    e664:	bf00      	nop
    e666:	b005      	add	sp, #20
    e668:	f85d fb04 	ldr.w	pc, [sp], #4
    e66c:	00016480 	.word	0x00016480

0000e670 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    e670:	b500      	push	{lr}
    e672:	b085      	sub	sp, #20
    e674:	4603      	mov	r3, r0
    e676:	9100      	str	r1, [sp, #0]
    e678:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e67c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e680:	4a07      	ldr	r2, [pc, #28]	; (e6a0 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    e682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e686:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    e688:	f006 f960 	bl	1494c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    e68c:	9900      	ldr	r1, [sp, #0]
    e68e:	9803      	ldr	r0, [sp, #12]
    e690:	f7fd fddd 	bl	c24e <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    e694:	f006 f986 	bl	149a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    e698:	bf00      	nop
    e69a:	b005      	add	sp, #20
    e69c:	f85d fb04 	ldr.w	pc, [sp], #4
    e6a0:	00016480 	.word	0x00016480

0000e6a4 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    e6a4:	b500      	push	{lr}
    e6a6:	b085      	sub	sp, #20
    e6a8:	4603      	mov	r3, r0
    e6aa:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e6ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6b2:	4a08      	ldr	r2, [pc, #32]	; (e6d4 <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    e6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6b8:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    e6ba:	f006 f999 	bl	149f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    e6be:	2101      	movs	r1, #1
    e6c0:	9803      	ldr	r0, [sp, #12]
    e6c2:	f7fd fc17 	bl	bef4 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    e6c6:	f006 f9bf 	bl	14a48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    e6ca:	bf00      	nop
    e6cc:	b005      	add	sp, #20
    e6ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e6d2:	bf00      	nop
    e6d4:	00016480 	.word	0x00016480

0000e6d8 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    e6d8:	b500      	push	{lr}
    e6da:	b085      	sub	sp, #20
    e6dc:	4603      	mov	r3, r0
    e6de:	f88d 3007 	strb.w	r3, [sp, #7]
    e6e2:	460b      	mov	r3, r1
    e6e4:	f88d 3006 	strb.w	r3, [sp, #6]
    e6e8:	4613      	mov	r3, r2
    e6ea:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e6ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6f2:	4a17      	ldr	r2, [pc, #92]	; (e750 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    e6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6f8:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    e6fa:	f006 f9cb 	bl	14a94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    e6fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e702:	2b3f      	cmp	r3, #63	; 0x3f
    e704:	d80b      	bhi.n	e71e <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    e706:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e70a:	b2db      	uxtb	r3, r3
    e70c:	4619      	mov	r1, r3
    e70e:	9803      	ldr	r0, [sp, #12]
    e710:	f7fd fd42 	bl	c198 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    e714:	2100      	movs	r1, #0
    e716:	9803      	ldr	r0, [sp, #12]
    e718:	f7fd fd62 	bl	c1e0 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    e71c:	e012      	b.n	e744 <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    e71e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e722:	b2db      	uxtb	r3, r3
    e724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e728:	b2db      	uxtb	r3, r3
    e72a:	4619      	mov	r1, r3
    e72c:	9803      	ldr	r0, [sp, #12]
    e72e:	f7fd fd33 	bl	c198 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    e732:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e736:	099b      	lsrs	r3, r3, #6
    e738:	b29b      	uxth	r3, r3
    e73a:	b2db      	uxtb	r3, r3
    e73c:	4619      	mov	r1, r3
    e73e:	9803      	ldr	r0, [sp, #12]
    e740:	f7fd fd4e 	bl	c1e0 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    e744:	f006 f9d2 	bl	14aec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    e748:	bf00      	nop
    e74a:	b005      	add	sp, #20
    e74c:	f85d fb04 	ldr.w	pc, [sp], #4
    e750:	00016480 	.word	0x00016480

0000e754 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    e754:	b082      	sub	sp, #8
    e756:	9001      	str	r0, [sp, #4]
    e758:	460b      	mov	r3, r1
    e75a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    e75e:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    e762:	4618      	mov	r0, r3
    e764:	b002      	add	sp, #8
    e766:	4770      	bx	lr

0000e768 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    e768:	b510      	push	{r4, lr}
    e76a:	b084      	sub	sp, #16
    e76c:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    e76e:	2300      	movs	r3, #0
    e770:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    e772:	493e      	ldr	r1, [pc, #248]	; (e86c <Pwm_Init+0x104>)
    e774:	9a02      	ldr	r2, [sp, #8]
    e776:	4613      	mov	r3, r2
    e778:	009b      	lsls	r3, r3, #2
    e77a:	4413      	add	r3, r2
    e77c:	009b      	lsls	r3, r3, #2
    e77e:	440b      	add	r3, r1
    e780:	9a01      	ldr	r2, [sp, #4]
    e782:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e784:	2300      	movs	r3, #0
    e786:	f88d 300f 	strb.w	r3, [sp, #15]
    e78a:	e017      	b.n	e7bc <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    e78c:	4937      	ldr	r1, [pc, #220]	; (e86c <Pwm_Init+0x104>)
    e78e:	9a02      	ldr	r2, [sp, #8]
    e790:	4613      	mov	r3, r2
    e792:	009b      	lsls	r3, r3, #2
    e794:	4413      	add	r3, r2
    e796:	009b      	lsls	r3, r3, #2
    e798:	440b      	add	r3, r1
    e79a:	681b      	ldr	r3, [r3, #0]
    e79c:	68d9      	ldr	r1, [r3, #12]
    e79e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7a2:	4613      	mov	r3, r2
    e7a4:	005b      	lsls	r3, r3, #1
    e7a6:	4413      	add	r3, r2
    e7a8:	009b      	lsls	r3, r3, #2
    e7aa:	440b      	add	r3, r1
    e7ac:	4618      	mov	r0, r3
    e7ae:	f000 f9cd 	bl	eb4c <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e7b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e7b6:	3301      	adds	r3, #1
    e7b8:	f88d 300f 	strb.w	r3, [sp, #15]
    e7bc:	492b      	ldr	r1, [pc, #172]	; (e86c <Pwm_Init+0x104>)
    e7be:	9a02      	ldr	r2, [sp, #8]
    e7c0:	4613      	mov	r3, r2
    e7c2:	009b      	lsls	r3, r3, #2
    e7c4:	4413      	add	r3, r2
    e7c6:	009b      	lsls	r3, r3, #2
    e7c8:	440b      	add	r3, r1
    e7ca:	681b      	ldr	r3, [r3, #0]
    e7cc:	7a1b      	ldrb	r3, [r3, #8]
    e7ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7d2:	429a      	cmp	r2, r3
    e7d4:	d3da      	bcc.n	e78c <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    e7d6:	2300      	movs	r3, #0
    e7d8:	f88d 300f 	strb.w	r3, [sp, #15]
    e7dc:	e034      	b.n	e848 <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    e7de:	4923      	ldr	r1, [pc, #140]	; (e86c <Pwm_Init+0x104>)
    e7e0:	9a02      	ldr	r2, [sp, #8]
    e7e2:	4613      	mov	r3, r2
    e7e4:	009b      	lsls	r3, r3, #2
    e7e6:	4413      	add	r3, r2
    e7e8:	009b      	lsls	r3, r3, #2
    e7ea:	440b      	add	r3, r1
    e7ec:	681b      	ldr	r3, [r3, #0]
    e7ee:	6859      	ldr	r1, [r3, #4]
    e7f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e7f8:	4613      	mov	r3, r2
    e7fa:	005b      	lsls	r3, r3, #1
    e7fc:	4413      	add	r3, r2
    e7fe:	00db      	lsls	r3, r3, #3
    e800:	4419      	add	r1, r3
    e802:	4c1a      	ldr	r4, [pc, #104]	; (e86c <Pwm_Init+0x104>)
    e804:	9a02      	ldr	r2, [sp, #8]
    e806:	4613      	mov	r3, r2
    e808:	009b      	lsls	r3, r3, #2
    e80a:	4413      	add	r3, r2
    e80c:	4403      	add	r3, r0
    e80e:	3302      	adds	r3, #2
    e810:	009b      	lsls	r3, r3, #2
    e812:	4423      	add	r3, r4
    e814:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    e816:	4915      	ldr	r1, [pc, #84]	; (e86c <Pwm_Init+0x104>)
    e818:	9a02      	ldr	r2, [sp, #8]
    e81a:	4613      	mov	r3, r2
    e81c:	009b      	lsls	r3, r3, #2
    e81e:	4413      	add	r3, r2
    e820:	009b      	lsls	r3, r3, #2
    e822:	440b      	add	r3, r1
    e824:	681b      	ldr	r3, [r3, #0]
    e826:	6859      	ldr	r1, [r3, #4]
    e828:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e82c:	4613      	mov	r3, r2
    e82e:	005b      	lsls	r3, r3, #1
    e830:	4413      	add	r3, r2
    e832:	00db      	lsls	r3, r3, #3
    e834:	3308      	adds	r3, #8
    e836:	440b      	add	r3, r1
    e838:	4618      	mov	r0, r3
    e83a:	f000 f965 	bl	eb08 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    e83e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e842:	3301      	adds	r3, #1
    e844:	f88d 300f 	strb.w	r3, [sp, #15]
    e848:	4908      	ldr	r1, [pc, #32]	; (e86c <Pwm_Init+0x104>)
    e84a:	9a02      	ldr	r2, [sp, #8]
    e84c:	4613      	mov	r3, r2
    e84e:	009b      	lsls	r3, r3, #2
    e850:	4413      	add	r3, r2
    e852:	009b      	lsls	r3, r3, #2
    e854:	440b      	add	r3, r1
    e856:	681b      	ldr	r3, [r3, #0]
    e858:	781b      	ldrb	r3, [r3, #0]
    e85a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e85e:	429a      	cmp	r2, r3
    e860:	d3bd      	bcc.n	e7de <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    e862:	bf00      	nop
    e864:	bf00      	nop
    e866:	b004      	add	sp, #16
    e868:	bd10      	pop	{r4, pc}
    e86a:	bf00      	nop
    e86c:	1fff8b38 	.word	0x1fff8b38

0000e870 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    e870:	b500      	push	{lr}
    e872:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    e874:	2300      	movs	r3, #0
    e876:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    e878:	2300      	movs	r3, #0
    e87a:	f88d 300f 	strb.w	r3, [sp, #15]
    e87e:	e02a      	b.n	e8d6 <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    e880:	4945      	ldr	r1, [pc, #276]	; (e998 <Pwm_DeInit+0x128>)
    e882:	9a02      	ldr	r2, [sp, #8]
    e884:	4613      	mov	r3, r2
    e886:	009b      	lsls	r3, r3, #2
    e888:	4413      	add	r3, r2
    e88a:	009b      	lsls	r3, r3, #2
    e88c:	440b      	add	r3, r1
    e88e:	330c      	adds	r3, #12
    e890:	6819      	ldr	r1, [r3, #0]
    e892:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e896:	4613      	mov	r3, r2
    e898:	005b      	lsls	r3, r3, #1
    e89a:	4413      	add	r3, r2
    e89c:	00db      	lsls	r3, r3, #3
    e89e:	440b      	add	r3, r1
    e8a0:	f103 0008 	add.w	r0, r3, #8
    e8a4:	493c      	ldr	r1, [pc, #240]	; (e998 <Pwm_DeInit+0x128>)
    e8a6:	9a02      	ldr	r2, [sp, #8]
    e8a8:	4613      	mov	r3, r2
    e8aa:	009b      	lsls	r3, r3, #2
    e8ac:	4413      	add	r3, r2
    e8ae:	009b      	lsls	r3, r3, #2
    e8b0:	440b      	add	r3, r1
    e8b2:	330c      	adds	r3, #12
    e8b4:	6819      	ldr	r1, [r3, #0]
    e8b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e8ba:	4613      	mov	r3, r2
    e8bc:	005b      	lsls	r3, r3, #1
    e8be:	4413      	add	r3, r2
    e8c0:	00db      	lsls	r3, r3, #3
    e8c2:	440b      	add	r3, r1
    e8c4:	695b      	ldr	r3, [r3, #20]
    e8c6:	4619      	mov	r1, r3
    e8c8:	f000 f996 	bl	ebf8 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    e8cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e8d0:	3301      	adds	r3, #1
    e8d2:	f88d 300f 	strb.w	r3, [sp, #15]
    e8d6:	4930      	ldr	r1, [pc, #192]	; (e998 <Pwm_DeInit+0x128>)
    e8d8:	9a02      	ldr	r2, [sp, #8]
    e8da:	4613      	mov	r3, r2
    e8dc:	009b      	lsls	r3, r3, #2
    e8de:	4413      	add	r3, r2
    e8e0:	009b      	lsls	r3, r3, #2
    e8e2:	440b      	add	r3, r1
    e8e4:	681b      	ldr	r3, [r3, #0]
    e8e6:	781b      	ldrb	r3, [r3, #0]
    e8e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e8ec:	429a      	cmp	r2, r3
    e8ee:	d3c7      	bcc.n	e880 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    e8f0:	4929      	ldr	r1, [pc, #164]	; (e998 <Pwm_DeInit+0x128>)
    e8f2:	9a02      	ldr	r2, [sp, #8]
    e8f4:	4613      	mov	r3, r2
    e8f6:	009b      	lsls	r3, r3, #2
    e8f8:	4413      	add	r3, r2
    e8fa:	009b      	lsls	r3, r3, #2
    e8fc:	440b      	add	r3, r1
    e8fe:	681b      	ldr	r3, [r3, #0]
    e900:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e902:	2300      	movs	r3, #0
    e904:	f88d 300f 	strb.w	r3, [sp, #15]
    e908:	e010      	b.n	e92c <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    e90a:	9b01      	ldr	r3, [sp, #4]
    e90c:	68d9      	ldr	r1, [r3, #12]
    e90e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e912:	4613      	mov	r3, r2
    e914:	005b      	lsls	r3, r3, #1
    e916:	4413      	add	r3, r2
    e918:	009b      	lsls	r3, r3, #2
    e91a:	440b      	add	r3, r1
    e91c:	4618      	mov	r0, r3
    e91e:	f000 f98b 	bl	ec38 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e922:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e926:	3301      	adds	r3, #1
    e928:	f88d 300f 	strb.w	r3, [sp, #15]
    e92c:	491a      	ldr	r1, [pc, #104]	; (e998 <Pwm_DeInit+0x128>)
    e92e:	9a02      	ldr	r2, [sp, #8]
    e930:	4613      	mov	r3, r2
    e932:	009b      	lsls	r3, r3, #2
    e934:	4413      	add	r3, r2
    e936:	009b      	lsls	r3, r3, #2
    e938:	440b      	add	r3, r1
    e93a:	681b      	ldr	r3, [r3, #0]
    e93c:	7a1b      	ldrb	r3, [r3, #8]
    e93e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e942:	429a      	cmp	r2, r3
    e944:	d3e1      	bcc.n	e90a <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    e946:	4914      	ldr	r1, [pc, #80]	; (e998 <Pwm_DeInit+0x128>)
    e948:	9a02      	ldr	r2, [sp, #8]
    e94a:	4613      	mov	r3, r2
    e94c:	009b      	lsls	r3, r3, #2
    e94e:	4413      	add	r3, r2
    e950:	009b      	lsls	r3, r3, #2
    e952:	440b      	add	r3, r1
    e954:	2200      	movs	r2, #0
    e956:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    e958:	2300      	movs	r3, #0
    e95a:	f88d 300f 	strb.w	r3, [sp, #15]
    e95e:	e011      	b.n	e984 <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    e960:	f89d 100f 	ldrb.w	r1, [sp, #15]
    e964:	480c      	ldr	r0, [pc, #48]	; (e998 <Pwm_DeInit+0x128>)
    e966:	9a02      	ldr	r2, [sp, #8]
    e968:	4613      	mov	r3, r2
    e96a:	009b      	lsls	r3, r3, #2
    e96c:	4413      	add	r3, r2
    e96e:	440b      	add	r3, r1
    e970:	3302      	adds	r3, #2
    e972:	009b      	lsls	r3, r3, #2
    e974:	4403      	add	r3, r0
    e976:	2200      	movs	r2, #0
    e978:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    e97a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e97e:	3301      	adds	r3, #1
    e980:	f88d 300f 	strb.w	r3, [sp, #15]
    e984:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e988:	2b00      	cmp	r3, #0
    e98a:	d0e9      	beq.n	e960 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    e98c:	bf00      	nop
    e98e:	bf00      	nop
    e990:	b005      	add	sp, #20
    e992:	f85d fb04 	ldr.w	pc, [sp], #4
    e996:	bf00      	nop
    e998:	1fff8b38 	.word	0x1fff8b38

0000e99c <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    e99c:	b500      	push	{lr}
    e99e:	b087      	sub	sp, #28
    e9a0:	4603      	mov	r3, r0
    e9a2:	460a      	mov	r2, r1
    e9a4:	f88d 3007 	strb.w	r3, [sp, #7]
    e9a8:	4613      	mov	r3, r2
    e9aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    e9ae:	2300      	movs	r3, #0
    e9b0:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    e9b4:	2300      	movs	r3, #0
    e9b6:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    e9b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e9bc:	4619      	mov	r1, r3
    e9be:	9804      	ldr	r0, [sp, #16]
    e9c0:	f7ff fec8 	bl	e754 <Pwm_GetPartitionChannelIdx>
    e9c4:	4603      	mov	r3, r0
    e9c6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    e9ca:	490f      	ldr	r1, [pc, #60]	; (ea08 <Pwm_SetDutyCycle+0x6c>)
    e9cc:	9a04      	ldr	r2, [sp, #16]
    e9ce:	4613      	mov	r3, r2
    e9d0:	009b      	lsls	r3, r3, #2
    e9d2:	4413      	add	r3, r2
    e9d4:	009b      	lsls	r3, r3, #2
    e9d6:	440b      	add	r3, r1
    e9d8:	330c      	adds	r3, #12
    e9da:	6819      	ldr	r1, [r3, #0]
    e9dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e9e0:	4613      	mov	r3, r2
    e9e2:	005b      	lsls	r3, r3, #1
    e9e4:	4413      	add	r3, r2
    e9e6:	00db      	lsls	r3, r3, #3
    e9e8:	440b      	add	r3, r1
    e9ea:	f103 0208 	add.w	r2, r3, #8
    e9ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e9f2:	4611      	mov	r1, r2
    e9f4:	4618      	mov	r0, r3
    e9f6:	f000 f93b 	bl	ec70 <Pwm_Ipw_SetDutyCycle>
    e9fa:	4603      	mov	r3, r0
    e9fc:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ea00:	bf00      	nop
    ea02:	b007      	add	sp, #28
    ea04:	f85d fb04 	ldr.w	pc, [sp], #4
    ea08:	1fff8b38 	.word	0x1fff8b38

0000ea0c <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    ea0c:	b500      	push	{lr}
    ea0e:	b085      	sub	sp, #20
    ea10:	4603      	mov	r3, r0
    ea12:	f88d 3007 	strb.w	r3, [sp, #7]
    ea16:	460b      	mov	r3, r1
    ea18:	f8ad 3004 	strh.w	r3, [sp, #4]
    ea1c:	4613      	mov	r3, r2
    ea1e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ea22:	2300      	movs	r3, #0
    ea24:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ea26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea2a:	4619      	mov	r1, r3
    ea2c:	9803      	ldr	r0, [sp, #12]
    ea2e:	f7ff fe91 	bl	e754 <Pwm_GetPartitionChannelIdx>
    ea32:	4603      	mov	r3, r0
    ea34:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ea38:	490e      	ldr	r1, [pc, #56]	; (ea74 <Pwm_SetPeriodAndDuty+0x68>)
    ea3a:	9a03      	ldr	r2, [sp, #12]
    ea3c:	4613      	mov	r3, r2
    ea3e:	009b      	lsls	r3, r3, #2
    ea40:	4413      	add	r3, r2
    ea42:	009b      	lsls	r3, r3, #2
    ea44:	440b      	add	r3, r1
    ea46:	330c      	adds	r3, #12
    ea48:	6819      	ldr	r1, [r3, #0]
    ea4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ea4e:	4613      	mov	r3, r2
    ea50:	005b      	lsls	r3, r3, #1
    ea52:	4413      	add	r3, r2
    ea54:	00db      	lsls	r3, r3, #3
    ea56:	440b      	add	r3, r1
    ea58:	f103 0208 	add.w	r2, r3, #8
    ea5c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ea60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ea64:	4618      	mov	r0, r3
    ea66:	f000 f94f 	bl	ed08 <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ea6a:	bf00      	nop
    ea6c:	b005      	add	sp, #20
    ea6e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea72:	bf00      	nop
    ea74:	1fff8b38 	.word	0x1fff8b38

0000ea78 <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
    ea78:	b500      	push	{lr}
    ea7a:	b085      	sub	sp, #20
    ea7c:	4603      	mov	r3, r0
    ea7e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ea82:	2300      	movs	r3, #0
    ea84:	9303      	str	r3, [sp, #12]
#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ea86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea8a:	4619      	mov	r1, r3
    ea8c:	9803      	ldr	r0, [sp, #12]
    ea8e:	f7ff fe61 	bl	e754 <Pwm_GetPartitionChannelIdx>
    ea92:	4603      	mov	r3, r0
    ea94:	f88d 300b 	strb.w	r3, [sp, #11]
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ea98:	491a      	ldr	r1, [pc, #104]	; (eb04 <Pwm_SetOutputToIdle+0x8c>)
    ea9a:	9a03      	ldr	r2, [sp, #12]
    ea9c:	4613      	mov	r3, r2
    ea9e:	009b      	lsls	r3, r3, #2
    eaa0:	4413      	add	r3, r2
    eaa2:	009b      	lsls	r3, r3, #2
    eaa4:	440b      	add	r3, r1
    eaa6:	330c      	adds	r3, #12
    eaa8:	6819      	ldr	r1, [r3, #0]
    eaaa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    eaae:	4613      	mov	r3, r2
    eab0:	005b      	lsls	r3, r3, #1
    eab2:	4413      	add	r3, r2
    eab4:	00db      	lsls	r3, r3, #3
    eab6:	440b      	add	r3, r1
    eab8:	6958      	ldr	r0, [r3, #20]
    eaba:	4912      	ldr	r1, [pc, #72]	; (eb04 <Pwm_SetOutputToIdle+0x8c>)
    eabc:	9a03      	ldr	r2, [sp, #12]
    eabe:	4613      	mov	r3, r2
    eac0:	009b      	lsls	r3, r3, #2
    eac2:	4413      	add	r3, r2
    eac4:	009b      	lsls	r3, r3, #2
    eac6:	440b      	add	r3, r1
    eac8:	330c      	adds	r3, #12
    eaca:	6819      	ldr	r1, [r3, #0]
    eacc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ead0:	4613      	mov	r3, r2
    ead2:	005b      	lsls	r3, r3, #1
    ead4:	4413      	add	r3, r2
    ead6:	00db      	lsls	r3, r3, #3
    ead8:	440b      	add	r3, r1
    eada:	3308      	adds	r3, #8
    eadc:	4619      	mov	r1, r3
    eade:	f000 f959 	bl	ed94 <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
    eae2:	f89d 100b 	ldrb.w	r1, [sp, #11]
    eae6:	4807      	ldr	r0, [pc, #28]	; (eb04 <Pwm_SetOutputToIdle+0x8c>)
    eae8:	9a03      	ldr	r2, [sp, #12]
    eaea:	4613      	mov	r3, r2
    eaec:	009b      	lsls	r3, r3, #2
    eaee:	4413      	add	r3, r2
    eaf0:	009b      	lsls	r3, r3, #2
    eaf2:	4403      	add	r3, r0
    eaf4:	440b      	add	r3, r1
    eaf6:	3310      	adds	r3, #16
    eaf8:	2201      	movs	r2, #1
    eafa:	701a      	strb	r2, [r3, #0]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    eafc:	bf00      	nop
    eafe:	b005      	add	sp, #20
    eb00:	f85d fb04 	ldr.w	pc, [sp], #4
    eb04:	1fff8b38 	.word	0x1fff8b38

0000eb08 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    eb08:	b410      	push	{r4}
    eb0a:	b083      	sub	sp, #12
    eb0c:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    eb0e:	9b01      	ldr	r3, [sp, #4]
    eb10:	681b      	ldr	r3, [r3, #0]
    eb12:	2b00      	cmp	r3, #0
    eb14:	d010      	beq.n	eb38 <Pwm_Ipw_Init+0x30>
    eb16:	2b01      	cmp	r3, #1
    eb18:	d110      	bne.n	eb3c <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    eb1a:	9b01      	ldr	r3, [sp, #4]
    eb1c:	7a1b      	ldrb	r3, [r3, #8]
    eb1e:	461c      	mov	r4, r3
    eb20:	9b01      	ldr	r3, [sp, #4]
    eb22:	685b      	ldr	r3, [r3, #4]
    eb24:	781b      	ldrb	r3, [r3, #0]
    eb26:	4618      	mov	r0, r3
    eb28:	9b01      	ldr	r3, [sp, #4]
    eb2a:	8959      	ldrh	r1, [r3, #10]
    eb2c:	4a06      	ldr	r2, [pc, #24]	; (eb48 <Pwm_Ipw_Init+0x40>)
    eb2e:	00e3      	lsls	r3, r4, #3
    eb30:	4403      	add	r3, r0
    eb32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    eb36:	e002      	b.n	eb3e <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    eb38:	bf00      	nop
    eb3a:	e000      	b.n	eb3e <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    eb3c:	bf00      	nop
    }
}
    eb3e:	bf00      	nop
    eb40:	b003      	add	sp, #12
    eb42:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb46:	4770      	bx	lr
    eb48:	1fff91a8 	.word	0x1fff91a8

0000eb4c <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    eb4c:	b500      	push	{lr}
    eb4e:	b085      	sub	sp, #20
    eb50:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    eb52:	2300      	movs	r3, #0
    eb54:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    eb58:	2300      	movs	r3, #0
    eb5a:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    eb5e:	9b01      	ldr	r3, [sp, #4]
    eb60:	685b      	ldr	r3, [r3, #4]
    eb62:	2b00      	cmp	r3, #0
    eb64:	d03c      	beq.n	ebe0 <Pwm_Ipw_InitInstance+0x94>
    eb66:	2b01      	cmp	r3, #1
    eb68:	d13c      	bne.n	ebe4 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    eb6a:	9b01      	ldr	r3, [sp, #4]
    eb6c:	689b      	ldr	r3, [r3, #8]
    eb6e:	2b00      	cmp	r3, #0
    eb70:	d03a      	beq.n	ebe8 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    eb72:	9b01      	ldr	r3, [sp, #4]
    eb74:	781a      	ldrb	r2, [r3, #0]
    eb76:	9b01      	ldr	r3, [sp, #4]
    eb78:	689b      	ldr	r3, [r3, #8]
    eb7a:	4619      	mov	r1, r3
    eb7c:	4610      	mov	r0, r2
    eb7e:	f7fe fe8f 	bl	d8a0 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    eb82:	2300      	movs	r3, #0
    eb84:	f88d 300f 	strb.w	r3, [sp, #15]
    eb88:	e022      	b.n	ebd0 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    eb8a:	9b01      	ldr	r3, [sp, #4]
    eb8c:	689b      	ldr	r3, [r3, #8]
    eb8e:	685a      	ldr	r2, [r3, #4]
    eb90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb94:	009b      	lsls	r3, r3, #2
    eb96:	4413      	add	r3, r2
    eb98:	681b      	ldr	r3, [r3, #0]
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    eba0:	9b01      	ldr	r3, [sp, #4]
    eba2:	689b      	ldr	r3, [r3, #8]
    eba4:	685a      	ldr	r2, [r3, #4]
    eba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ebaa:	009b      	lsls	r3, r3, #2
    ebac:	4413      	add	r3, r2
    ebae:	681a      	ldr	r2, [r3, #0]
    ebb0:	9b01      	ldr	r3, [sp, #4]
    ebb2:	781b      	ldrb	r3, [r3, #0]
    ebb4:	4619      	mov	r1, r3
    ebb6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ebba:	6a12      	ldr	r2, [r2, #32]
    ebbc:	480d      	ldr	r0, [pc, #52]	; (ebf4 <Pwm_Ipw_InitInstance+0xa8>)
    ebbe:	00c9      	lsls	r1, r1, #3
    ebc0:	440b      	add	r3, r1
    ebc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    ebc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ebca:	3301      	adds	r3, #1
    ebcc:	f88d 300f 	strb.w	r3, [sp, #15]
    ebd0:	9b01      	ldr	r3, [sp, #4]
    ebd2:	689b      	ldr	r3, [r3, #8]
    ebd4:	7a1b      	ldrb	r3, [r3, #8]
    ebd6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ebda:	429a      	cmp	r2, r3
    ebdc:	d3d5      	bcc.n	eb8a <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    ebde:	e003      	b.n	ebe8 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    ebe0:	bf00      	nop
    ebe2:	e002      	b.n	ebea <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    ebe4:	bf00      	nop
    ebe6:	e000      	b.n	ebea <Pwm_Ipw_InitInstance+0x9e>
            break;
    ebe8:	bf00      	nop
    }
}
    ebea:	bf00      	nop
    ebec:	b005      	add	sp, #20
    ebee:	f85d fb04 	ldr.w	pc, [sp], #4
    ebf2:	bf00      	nop
    ebf4:	1fff9128 	.word	0x1fff9128

0000ebf8 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    ebf8:	b082      	sub	sp, #8
    ebfa:	9001      	str	r0, [sp, #4]
    ebfc:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    ebfe:	9b01      	ldr	r3, [sp, #4]
    ec00:	681b      	ldr	r3, [r3, #0]
    ec02:	2b00      	cmp	r3, #0
    ec04:	d00f      	beq.n	ec26 <Pwm_Ipw_DeInit+0x2e>
    ec06:	2b01      	cmp	r3, #1
    ec08:	d10f      	bne.n	ec2a <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    ec0a:	9b01      	ldr	r3, [sp, #4]
    ec0c:	7a1b      	ldrb	r3, [r3, #8]
    ec0e:	4618      	mov	r0, r3
    ec10:	9b01      	ldr	r3, [sp, #4]
    ec12:	685b      	ldr	r3, [r3, #4]
    ec14:	781b      	ldrb	r3, [r3, #0]
    ec16:	4619      	mov	r1, r3
    ec18:	4a06      	ldr	r2, [pc, #24]	; (ec34 <Pwm_Ipw_DeInit+0x3c>)
    ec1a:	00c3      	lsls	r3, r0, #3
    ec1c:	440b      	add	r3, r1
    ec1e:	2100      	movs	r1, #0
    ec20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ec24:	e002      	b.n	ec2c <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ec26:	bf00      	nop
    ec28:	e000      	b.n	ec2c <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    ec2a:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    ec2c:	bf00      	nop
    ec2e:	b002      	add	sp, #8
    ec30:	4770      	bx	lr
    ec32:	bf00      	nop
    ec34:	1fff91a8 	.word	0x1fff91a8

0000ec38 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    ec38:	b500      	push	{lr}
    ec3a:	b083      	sub	sp, #12
    ec3c:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    ec3e:	9b01      	ldr	r3, [sp, #4]
    ec40:	685b      	ldr	r3, [r3, #4]
    ec42:	2b00      	cmp	r3, #0
    ec44:	d00b      	beq.n	ec5e <Pwm_Ipw_DeInitInstance+0x26>
    ec46:	2b01      	cmp	r3, #1
    ec48:	d10b      	bne.n	ec62 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    ec4a:	9b01      	ldr	r3, [sp, #4]
    ec4c:	689b      	ldr	r3, [r3, #8]
    ec4e:	2b00      	cmp	r3, #0
    ec50:	d009      	beq.n	ec66 <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    ec52:	9b01      	ldr	r3, [sp, #4]
    ec54:	781b      	ldrb	r3, [r3, #0]
    ec56:	4618      	mov	r0, r3
    ec58:	f7fe fe80 	bl	d95c <Ftm_Pwm_Ip_DeInit>
            }
            break;
    ec5c:	e003      	b.n	ec66 <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    ec5e:	bf00      	nop
    ec60:	e002      	b.n	ec68 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    ec62:	bf00      	nop
    ec64:	e000      	b.n	ec68 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    ec66:	bf00      	nop
    }
}
    ec68:	bf00      	nop
    ec6a:	b003      	add	sp, #12
    ec6c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ec70 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    ec70:	b500      	push	{lr}
    ec72:	b085      	sub	sp, #20
    ec74:	4603      	mov	r3, r0
    ec76:	9100      	str	r1, [sp, #0]
    ec78:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    ec7c:	2300      	movs	r3, #0
    ec7e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    ec82:	2300      	movs	r3, #0
    ec84:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    ec88:	9b00      	ldr	r3, [sp, #0]
    ec8a:	681b      	ldr	r3, [r3, #0]
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	d02c      	beq.n	ecea <Pwm_Ipw_SetDutyCycle+0x7a>
    ec90:	2b01      	cmp	r3, #1
    ec92:	d12c      	bne.n	ecee <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    ec94:	9b00      	ldr	r3, [sp, #0]
    ec96:	685b      	ldr	r3, [r3, #4]
    ec98:	2b00      	cmp	r3, #0
    ec9a:	d02a      	beq.n	ecf2 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    ec9c:	9b00      	ldr	r3, [sp, #0]
    ec9e:	7a1b      	ldrb	r3, [r3, #8]
    eca0:	461a      	mov	r2, r3
    eca2:	4b17      	ldr	r3, [pc, #92]	; (ed00 <Pwm_Ipw_SetDutyCycle+0x90>)
    eca4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    eca8:	461a      	mov	r2, r3
    ecaa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ecae:	fb02 f303 	mul.w	r3, r2, r3
    ecb2:	0bdb      	lsrs	r3, r3, #15
    ecb4:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    ecb8:	9b00      	ldr	r3, [sp, #0]
    ecba:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    ecbc:	9b00      	ldr	r3, [sp, #0]
    ecbe:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    ecc0:	7819      	ldrb	r1, [r3, #0]
    ecc2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ecc6:	2301      	movs	r3, #1
    ecc8:	f7fe fe90 	bl	d9ec <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    eccc:	9b00      	ldr	r3, [sp, #0]
    ecce:	7a1b      	ldrb	r3, [r3, #8]
    ecd0:	4618      	mov	r0, r3
    ecd2:	9b00      	ldr	r3, [sp, #0]
    ecd4:	685b      	ldr	r3, [r3, #4]
    ecd6:	781b      	ldrb	r3, [r3, #0]
    ecd8:	461a      	mov	r2, r3
    ecda:	490a      	ldr	r1, [pc, #40]	; (ed04 <Pwm_Ipw_SetDutyCycle+0x94>)
    ecdc:	00c3      	lsls	r3, r0, #3
    ecde:	4413      	add	r3, r2
    ece0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ece4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    ece8:	e003      	b.n	ecf2 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ecea:	bf00      	nop
    ecec:	e002      	b.n	ecf4 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    ecee:	bf00      	nop
    ecf0:	e000      	b.n	ecf4 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    ecf2:	bf00      	nop
    }

    return RetVal;
    ecf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    ecf8:	4618      	mov	r0, r3
    ecfa:	b005      	add	sp, #20
    ecfc:	f85d fb04 	ldr.w	pc, [sp], #4
    ed00:	1fff8e00 	.word	0x1fff8e00
    ed04:	1fff91a8 	.word	0x1fff91a8

0000ed08 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    ed08:	b510      	push	{r4, lr}
    ed0a:	b086      	sub	sp, #24
    ed0c:	4603      	mov	r3, r0
    ed0e:	9202      	str	r2, [sp, #8]
    ed10:	f8ad 300e 	strh.w	r3, [sp, #14]
    ed14:	460b      	mov	r3, r1
    ed16:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    ed1a:	2300      	movs	r3, #0
    ed1c:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    ed20:	9b02      	ldr	r3, [sp, #8]
    ed22:	681b      	ldr	r3, [r3, #0]
    ed24:	2b00      	cmp	r3, #0
    ed26:	d02a      	beq.n	ed7e <Pwm_Ipw_SetPeriodAndDuty+0x76>
    ed28:	2b01      	cmp	r3, #1
    ed2a:	d12a      	bne.n	ed82 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    ed2c:	9b02      	ldr	r3, [sp, #8]
    ed2e:	685b      	ldr	r3, [r3, #4]
    ed30:	2b00      	cmp	r3, #0
    ed32:	d028      	beq.n	ed86 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    ed34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ed38:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ed3c:	fb02 f303 	mul.w	r3, r2, r3
    ed40:	0bdb      	lsrs	r3, r3, #15
    ed42:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    ed46:	9b02      	ldr	r3, [sp, #8]
    ed48:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    ed4a:	9b02      	ldr	r3, [sp, #8]
    ed4c:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    ed4e:	7819      	ldrb	r1, [r3, #0]
    ed50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ed54:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ed58:	2401      	movs	r4, #1
    ed5a:	9400      	str	r4, [sp, #0]
    ed5c:	f7fe ff0c 	bl	db78 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    ed60:	9b02      	ldr	r3, [sp, #8]
    ed62:	7a1b      	ldrb	r3, [r3, #8]
    ed64:	4618      	mov	r0, r3
    ed66:	9b02      	ldr	r3, [sp, #8]
    ed68:	685b      	ldr	r3, [r3, #4]
    ed6a:	781b      	ldrb	r3, [r3, #0]
    ed6c:	461a      	mov	r2, r3
    ed6e:	4908      	ldr	r1, [pc, #32]	; (ed90 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    ed70:	00c3      	lsls	r3, r0, #3
    ed72:	4413      	add	r3, r2
    ed74:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ed78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    ed7c:	e003      	b.n	ed86 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ed7e:	bf00      	nop
    ed80:	e002      	b.n	ed88 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    ed82:	bf00      	nop
    ed84:	e000      	b.n	ed88 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    ed86:	bf00      	nop
    }
}
    ed88:	bf00      	nop
    ed8a:	b006      	add	sp, #24
    ed8c:	bd10      	pop	{r4, pc}
    ed8e:	bf00      	nop
    ed90:	1fff91a8 	.word	0x1fff91a8

0000ed94 <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
    ed94:	b500      	push	{lr}
    ed96:	b085      	sub	sp, #20
    ed98:	9001      	str	r0, [sp, #4]
    ed9a:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
    ed9c:	9b00      	ldr	r3, [sp, #0]
    ed9e:	7a1b      	ldrb	r3, [r3, #8]
    eda0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
    eda4:	9b00      	ldr	r3, [sp, #0]
    eda6:	685b      	ldr	r3, [r3, #4]
    eda8:	781b      	ldrb	r3, [r3, #0]
    edaa:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
    edae:	9b00      	ldr	r3, [sp, #0]
    edb0:	681b      	ldr	r3, [r3, #0]
    edb2:	2b00      	cmp	r3, #0
    edb4:	d02e      	beq.n	ee14 <Pwm_Ipw_SetOutputToIdle+0x80>
    edb6:	2b01      	cmp	r3, #1
    edb8:	d12e      	bne.n	ee18 <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    edba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    edbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    edc2:	4919      	ldr	r1, [pc, #100]	; (ee28 <Pwm_Ipw_SetOutputToIdle+0x94>)
    edc4:	00d2      	lsls	r2, r2, #3
    edc6:	4413      	add	r3, r2
    edc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    edcc:	2b01      	cmp	r3, #1
    edce:	d125      	bne.n	ee1c <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
    edd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    edd4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    edd8:	4913      	ldr	r1, [pc, #76]	; (ee28 <Pwm_Ipw_SetOutputToIdle+0x94>)
    edda:	00d2      	lsls	r2, r2, #3
    eddc:	4413      	add	r3, r2
    edde:	2202      	movs	r2, #2
    ede0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
    ede4:	9b00      	ldr	r3, [sp, #0]
    ede6:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
    ede8:	69da      	ldr	r2, [r3, #28]
    edea:	f89d 100e 	ldrb.w	r1, [sp, #14]
    edee:	f89d 000f 	ldrb.w	r0, [sp, #15]
    edf2:	2301      	movs	r3, #1
    edf4:	f7fe ff30 	bl	dc58 <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    edf8:	9b00      	ldr	r3, [sp, #0]
    edfa:	7a1b      	ldrb	r3, [r3, #8]
    edfc:	4618      	mov	r0, r3
    edfe:	9b00      	ldr	r3, [sp, #0]
    ee00:	685b      	ldr	r3, [r3, #4]
    ee02:	781b      	ldrb	r3, [r3, #0]
    ee04:	4619      	mov	r1, r3
    ee06:	4a09      	ldr	r2, [pc, #36]	; (ee2c <Pwm_Ipw_SetOutputToIdle+0x98>)
    ee08:	00c3      	lsls	r3, r0, #3
    ee0a:	440b      	add	r3, r1
    ee0c:	2100      	movs	r1, #0
    ee0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
    ee12:	e003      	b.n	ee1c <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ee14:	bf00      	nop
    ee16:	e002      	b.n	ee1e <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
    ee18:	bf00      	nop
    ee1a:	e000      	b.n	ee1e <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
    ee1c:	bf00      	nop
    }

    (void) IdleState;

}
    ee1e:	bf00      	nop
    ee20:	b005      	add	sp, #20
    ee22:	f85d fb04 	ldr.w	pc, [sp], #4
    ee26:	bf00      	nop
    ee28:	1fff8fd8 	.word	0x1fff8fd8
    ee2c:	1fff91a8 	.word	0x1fff91a8

0000ee30 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    ee30:	b084      	sub	sp, #16
    ee32:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    ee34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ee38:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    ee3a:	9b01      	ldr	r3, [sp, #4]
    ee3c:	681b      	ldr	r3, [r3, #0]
    ee3e:	2b01      	cmp	r3, #1
    ee40:	d103      	bne.n	ee4a <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    ee42:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    ee46:	9303      	str	r3, [sp, #12]
            break;
    ee48:	e000      	b.n	ee4c <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    ee4a:	bf00      	nop
    }

    return RetVal;
    ee4c:	9b03      	ldr	r3, [sp, #12]
}
    ee4e:	4618      	mov	r0, r3
    ee50:	b004      	add	sp, #16
    ee52:	4770      	bx	lr

0000ee54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    ee54:	b500      	push	{lr}
    ee56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee58:	f7f2 fbca 	bl	15f0 <Sys_GetCoreID>
    ee5c:	4603      	mov	r3, r0
    ee5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    ee60:	4a10      	ldr	r2, [pc, #64]	; (eea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ee62:	9b01      	ldr	r3, [sp, #4]
    ee64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee68:	2b00      	cmp	r3, #0
    ee6a:	d10d      	bne.n	ee88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee6c:	f7f1 ff96 	bl	d9c <Adc_schm_read_msr>
    ee70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee72:	9b00      	ldr	r3, [sp, #0]
    ee74:	f003 0301 	and.w	r3, r3, #1
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d100      	bne.n	ee7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ee7e:	490a      	ldr	r1, [pc, #40]	; (eea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	9a00      	ldr	r2, [sp, #0]
    ee84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    ee88:	4a06      	ldr	r2, [pc, #24]	; (eea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ee8a:	9b01      	ldr	r3, [sp, #4]
    ee8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee90:	1c5a      	adds	r2, r3, #1
    ee92:	4904      	ldr	r1, [pc, #16]	; (eea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ee94:	9b01      	ldr	r3, [sp, #4]
    ee96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee9a:	bf00      	nop
    ee9c:	b003      	add	sp, #12
    ee9e:	f85d fb04 	ldr.w	pc, [sp], #4
    eea2:	bf00      	nop
    eea4:	1fff91ec 	.word	0x1fff91ec
    eea8:	1fff91e8 	.word	0x1fff91e8

0000eeac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    eeac:	b500      	push	{lr}
    eeae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eeb0:	f7f2 fb9e 	bl	15f0 <Sys_GetCoreID>
    eeb4:	4603      	mov	r3, r0
    eeb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    eeb8:	4a0d      	ldr	r2, [pc, #52]	; (eef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    eeba:	9b01      	ldr	r3, [sp, #4]
    eebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec0:	1e5a      	subs	r2, r3, #1
    eec2:	490b      	ldr	r1, [pc, #44]	; (eef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    eec4:	9b01      	ldr	r3, [sp, #4]
    eec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    eeca:	4a0a      	ldr	r2, [pc, #40]	; (eef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    eecc:	9b01      	ldr	r3, [sp, #4]
    eece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed2:	f003 0301 	and.w	r3, r3, #1
    eed6:	2b00      	cmp	r3, #0
    eed8:	d106      	bne.n	eee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    eeda:	4a05      	ldr	r2, [pc, #20]	; (eef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    eedc:	9b01      	ldr	r3, [sp, #4]
    eede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eee2:	2b00      	cmp	r3, #0
    eee4:	d100      	bne.n	eee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eee8:	bf00      	nop
    eeea:	b003      	add	sp, #12
    eeec:	f85d fb04 	ldr.w	pc, [sp], #4
    eef0:	1fff91ec 	.word	0x1fff91ec
    eef4:	1fff91e8 	.word	0x1fff91e8

0000eef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    eef8:	b500      	push	{lr}
    eefa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eefc:	f7f2 fb78 	bl	15f0 <Sys_GetCoreID>
    ef00:	4603      	mov	r3, r0
    ef02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    ef04:	4a10      	ldr	r2, [pc, #64]	; (ef48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ef06:	9b01      	ldr	r3, [sp, #4]
    ef08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef0c:	2b00      	cmp	r3, #0
    ef0e:	d10d      	bne.n	ef2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef10:	f7f1 ff44 	bl	d9c <Adc_schm_read_msr>
    ef14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef16:	9b00      	ldr	r3, [sp, #0]
    ef18:	f003 0301 	and.w	r3, r3, #1
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	d100      	bne.n	ef22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ef22:	490a      	ldr	r1, [pc, #40]	; (ef4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	9a00      	ldr	r2, [sp, #0]
    ef28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    ef2c:	4a06      	ldr	r2, [pc, #24]	; (ef48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ef2e:	9b01      	ldr	r3, [sp, #4]
    ef30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef34:	1c5a      	adds	r2, r3, #1
    ef36:	4904      	ldr	r1, [pc, #16]	; (ef48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ef38:	9b01      	ldr	r3, [sp, #4]
    ef3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef3e:	bf00      	nop
    ef40:	b003      	add	sp, #12
    ef42:	f85d fb04 	ldr.w	pc, [sp], #4
    ef46:	bf00      	nop
    ef48:	1fff91f4 	.word	0x1fff91f4
    ef4c:	1fff91f0 	.word	0x1fff91f0

0000ef50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ef50:	b500      	push	{lr}
    ef52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef54:	f7f2 fb4c 	bl	15f0 <Sys_GetCoreID>
    ef58:	4603      	mov	r3, r0
    ef5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    ef5c:	4a0d      	ldr	r2, [pc, #52]	; (ef94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ef5e:	9b01      	ldr	r3, [sp, #4]
    ef60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef64:	1e5a      	subs	r2, r3, #1
    ef66:	490b      	ldr	r1, [pc, #44]	; (ef94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ef68:	9b01      	ldr	r3, [sp, #4]
    ef6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ef6e:	4a0a      	ldr	r2, [pc, #40]	; (ef98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    ef70:	9b01      	ldr	r3, [sp, #4]
    ef72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef76:	f003 0301 	and.w	r3, r3, #1
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d106      	bne.n	ef8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    ef7e:	4a05      	ldr	r2, [pc, #20]	; (ef94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ef80:	9b01      	ldr	r3, [sp, #4]
    ef82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef86:	2b00      	cmp	r3, #0
    ef88:	d100      	bne.n	ef8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef8c:	bf00      	nop
    ef8e:	b003      	add	sp, #12
    ef90:	f85d fb04 	ldr.w	pc, [sp], #4
    ef94:	1fff91f4 	.word	0x1fff91f4
    ef98:	1fff91f0 	.word	0x1fff91f0

0000ef9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ef9c:	b500      	push	{lr}
    ef9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efa0:	f7f2 fb26 	bl	15f0 <Sys_GetCoreID>
    efa4:	4603      	mov	r3, r0
    efa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    efa8:	4a10      	ldr	r2, [pc, #64]	; (efec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    efaa:	9b01      	ldr	r3, [sp, #4]
    efac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efb0:	2b00      	cmp	r3, #0
    efb2:	d10d      	bne.n	efd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efb4:	f7f1 fef2 	bl	d9c <Adc_schm_read_msr>
    efb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efba:	9b00      	ldr	r3, [sp, #0]
    efbc:	f003 0301 	and.w	r3, r3, #1
    efc0:	2b00      	cmp	r3, #0
    efc2:	d100      	bne.n	efc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    efc6:	490a      	ldr	r1, [pc, #40]	; (eff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    efc8:	9b01      	ldr	r3, [sp, #4]
    efca:	9a00      	ldr	r2, [sp, #0]
    efcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    efd0:	4a06      	ldr	r2, [pc, #24]	; (efec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    efd2:	9b01      	ldr	r3, [sp, #4]
    efd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efd8:	1c5a      	adds	r2, r3, #1
    efda:	4904      	ldr	r1, [pc, #16]	; (efec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    efdc:	9b01      	ldr	r3, [sp, #4]
    efde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efe2:	bf00      	nop
    efe4:	b003      	add	sp, #12
    efe6:	f85d fb04 	ldr.w	pc, [sp], #4
    efea:	bf00      	nop
    efec:	1fff91fc 	.word	0x1fff91fc
    eff0:	1fff91f8 	.word	0x1fff91f8

0000eff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    eff4:	b500      	push	{lr}
    eff6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eff8:	f7f2 fafa 	bl	15f0 <Sys_GetCoreID>
    effc:	4603      	mov	r3, r0
    effe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    f000:	4a0d      	ldr	r2, [pc, #52]	; (f038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f002:	9b01      	ldr	r3, [sp, #4]
    f004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f008:	1e5a      	subs	r2, r3, #1
    f00a:	490b      	ldr	r1, [pc, #44]	; (f038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f00c:	9b01      	ldr	r3, [sp, #4]
    f00e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f012:	4a0a      	ldr	r2, [pc, #40]	; (f03c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    f014:	9b01      	ldr	r3, [sp, #4]
    f016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f01a:	f003 0301 	and.w	r3, r3, #1
    f01e:	2b00      	cmp	r3, #0
    f020:	d106      	bne.n	f030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    f022:	4a05      	ldr	r2, [pc, #20]	; (f038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f024:	9b01      	ldr	r3, [sp, #4]
    f026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f02a:	2b00      	cmp	r3, #0
    f02c:	d100      	bne.n	f030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f02e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f030:	bf00      	nop
    f032:	b003      	add	sp, #12
    f034:	f85d fb04 	ldr.w	pc, [sp], #4
    f038:	1fff91fc 	.word	0x1fff91fc
    f03c:	1fff91f8 	.word	0x1fff91f8

0000f040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f040:	b500      	push	{lr}
    f042:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f044:	f7f2 fad4 	bl	15f0 <Sys_GetCoreID>
    f048:	4603      	mov	r3, r0
    f04a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    f04c:	4a10      	ldr	r2, [pc, #64]	; (f090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f04e:	9b01      	ldr	r3, [sp, #4]
    f050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f054:	2b00      	cmp	r3, #0
    f056:	d10d      	bne.n	f074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f058:	f7f1 fea0 	bl	d9c <Adc_schm_read_msr>
    f05c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f05e:	9b00      	ldr	r3, [sp, #0]
    f060:	f003 0301 	and.w	r3, r3, #1
    f064:	2b00      	cmp	r3, #0
    f066:	d100      	bne.n	f06a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f068:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f06a:	490a      	ldr	r1, [pc, #40]	; (f094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    f06c:	9b01      	ldr	r3, [sp, #4]
    f06e:	9a00      	ldr	r2, [sp, #0]
    f070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    f074:	4a06      	ldr	r2, [pc, #24]	; (f090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f076:	9b01      	ldr	r3, [sp, #4]
    f078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f07c:	1c5a      	adds	r2, r3, #1
    f07e:	4904      	ldr	r1, [pc, #16]	; (f090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f080:	9b01      	ldr	r3, [sp, #4]
    f082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f086:	bf00      	nop
    f088:	b003      	add	sp, #12
    f08a:	f85d fb04 	ldr.w	pc, [sp], #4
    f08e:	bf00      	nop
    f090:	1fff9204 	.word	0x1fff9204
    f094:	1fff9200 	.word	0x1fff9200

0000f098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f098:	b500      	push	{lr}
    f09a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f09c:	f7f2 faa8 	bl	15f0 <Sys_GetCoreID>
    f0a0:	4603      	mov	r3, r0
    f0a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    f0a4:	4a0d      	ldr	r2, [pc, #52]	; (f0dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f0a6:	9b01      	ldr	r3, [sp, #4]
    f0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ac:	1e5a      	subs	r2, r3, #1
    f0ae:	490b      	ldr	r1, [pc, #44]	; (f0dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f0b0:	9b01      	ldr	r3, [sp, #4]
    f0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f0b6:	4a0a      	ldr	r2, [pc, #40]	; (f0e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    f0b8:	9b01      	ldr	r3, [sp, #4]
    f0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0be:	f003 0301 	and.w	r3, r3, #1
    f0c2:	2b00      	cmp	r3, #0
    f0c4:	d106      	bne.n	f0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    f0c6:	4a05      	ldr	r2, [pc, #20]	; (f0dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f0c8:	9b01      	ldr	r3, [sp, #4]
    f0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	d100      	bne.n	f0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0d4:	bf00      	nop
    f0d6:	b003      	add	sp, #12
    f0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    f0dc:	1fff9204 	.word	0x1fff9204
    f0e0:	1fff9200 	.word	0x1fff9200

0000f0e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f0e4:	b500      	push	{lr}
    f0e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0e8:	f7f2 fa82 	bl	15f0 <Sys_GetCoreID>
    f0ec:	4603      	mov	r3, r0
    f0ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    f0f0:	4a10      	ldr	r2, [pc, #64]	; (f134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f0f2:	9b01      	ldr	r3, [sp, #4]
    f0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f8:	2b00      	cmp	r3, #0
    f0fa:	d10d      	bne.n	f118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0fc:	f7f1 fe4e 	bl	d9c <Adc_schm_read_msr>
    f100:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f102:	9b00      	ldr	r3, [sp, #0]
    f104:	f003 0301 	and.w	r3, r3, #1
    f108:	2b00      	cmp	r3, #0
    f10a:	d100      	bne.n	f10e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f10c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f10e:	490a      	ldr	r1, [pc, #40]	; (f138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	9a00      	ldr	r2, [sp, #0]
    f114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    f118:	4a06      	ldr	r2, [pc, #24]	; (f134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f11a:	9b01      	ldr	r3, [sp, #4]
    f11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f120:	1c5a      	adds	r2, r3, #1
    f122:	4904      	ldr	r1, [pc, #16]	; (f134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f124:	9b01      	ldr	r3, [sp, #4]
    f126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f12a:	bf00      	nop
    f12c:	b003      	add	sp, #12
    f12e:	f85d fb04 	ldr.w	pc, [sp], #4
    f132:	bf00      	nop
    f134:	1fff920c 	.word	0x1fff920c
    f138:	1fff9208 	.word	0x1fff9208

0000f13c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f13c:	b500      	push	{lr}
    f13e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f140:	f7f2 fa56 	bl	15f0 <Sys_GetCoreID>
    f144:	4603      	mov	r3, r0
    f146:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    f148:	4a0d      	ldr	r2, [pc, #52]	; (f180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f14a:	9b01      	ldr	r3, [sp, #4]
    f14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f150:	1e5a      	subs	r2, r3, #1
    f152:	490b      	ldr	r1, [pc, #44]	; (f180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f154:	9b01      	ldr	r3, [sp, #4]
    f156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f15a:	4a0a      	ldr	r2, [pc, #40]	; (f184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    f15c:	9b01      	ldr	r3, [sp, #4]
    f15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f162:	f003 0301 	and.w	r3, r3, #1
    f166:	2b00      	cmp	r3, #0
    f168:	d106      	bne.n	f178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    f16a:	4a05      	ldr	r2, [pc, #20]	; (f180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f172:	2b00      	cmp	r3, #0
    f174:	d100      	bne.n	f178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f176:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f178:	bf00      	nop
    f17a:	b003      	add	sp, #12
    f17c:	f85d fb04 	ldr.w	pc, [sp], #4
    f180:	1fff920c 	.word	0x1fff920c
    f184:	1fff9208 	.word	0x1fff9208

0000f188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f188:	b500      	push	{lr}
    f18a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f18c:	f7f2 fa30 	bl	15f0 <Sys_GetCoreID>
    f190:	4603      	mov	r3, r0
    f192:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    f194:	4a10      	ldr	r2, [pc, #64]	; (f1d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f196:	9b01      	ldr	r3, [sp, #4]
    f198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f19c:	2b00      	cmp	r3, #0
    f19e:	d10d      	bne.n	f1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1a0:	f7f1 fdfc 	bl	d9c <Adc_schm_read_msr>
    f1a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1a6:	9b00      	ldr	r3, [sp, #0]
    f1a8:	f003 0301 	and.w	r3, r3, #1
    f1ac:	2b00      	cmp	r3, #0
    f1ae:	d100      	bne.n	f1b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f1b2:	490a      	ldr	r1, [pc, #40]	; (f1dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	9a00      	ldr	r2, [sp, #0]
    f1b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    f1bc:	4a06      	ldr	r2, [pc, #24]	; (f1d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f1be:	9b01      	ldr	r3, [sp, #4]
    f1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1c4:	1c5a      	adds	r2, r3, #1
    f1c6:	4904      	ldr	r1, [pc, #16]	; (f1d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f1c8:	9b01      	ldr	r3, [sp, #4]
    f1ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1ce:	bf00      	nop
    f1d0:	b003      	add	sp, #12
    f1d2:	f85d fb04 	ldr.w	pc, [sp], #4
    f1d6:	bf00      	nop
    f1d8:	1fff9214 	.word	0x1fff9214
    f1dc:	1fff9210 	.word	0x1fff9210

0000f1e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f1e0:	b500      	push	{lr}
    f1e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1e4:	f7f2 fa04 	bl	15f0 <Sys_GetCoreID>
    f1e8:	4603      	mov	r3, r0
    f1ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    f1ec:	4a0d      	ldr	r2, [pc, #52]	; (f224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f1ee:	9b01      	ldr	r3, [sp, #4]
    f1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f4:	1e5a      	subs	r2, r3, #1
    f1f6:	490b      	ldr	r1, [pc, #44]	; (f224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f1f8:	9b01      	ldr	r3, [sp, #4]
    f1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f1fe:	4a0a      	ldr	r2, [pc, #40]	; (f228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    f200:	9b01      	ldr	r3, [sp, #4]
    f202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f206:	f003 0301 	and.w	r3, r3, #1
    f20a:	2b00      	cmp	r3, #0
    f20c:	d106      	bne.n	f21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    f20e:	4a05      	ldr	r2, [pc, #20]	; (f224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f210:	9b01      	ldr	r3, [sp, #4]
    f212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f216:	2b00      	cmp	r3, #0
    f218:	d100      	bne.n	f21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f21a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f21c:	bf00      	nop
    f21e:	b003      	add	sp, #12
    f220:	f85d fb04 	ldr.w	pc, [sp], #4
    f224:	1fff9214 	.word	0x1fff9214
    f228:	1fff9210 	.word	0x1fff9210

0000f22c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f22c:	b500      	push	{lr}
    f22e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f230:	f7f2 f9de 	bl	15f0 <Sys_GetCoreID>
    f234:	4603      	mov	r3, r0
    f236:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    f238:	4a10      	ldr	r2, [pc, #64]	; (f27c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f23a:	9b01      	ldr	r3, [sp, #4]
    f23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f240:	2b00      	cmp	r3, #0
    f242:	d10d      	bne.n	f260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f244:	f7f1 fdaa 	bl	d9c <Adc_schm_read_msr>
    f248:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f24a:	9b00      	ldr	r3, [sp, #0]
    f24c:	f003 0301 	and.w	r3, r3, #1
    f250:	2b00      	cmp	r3, #0
    f252:	d100      	bne.n	f256 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f254:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f256:	490a      	ldr	r1, [pc, #40]	; (f280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    f258:	9b01      	ldr	r3, [sp, #4]
    f25a:	9a00      	ldr	r2, [sp, #0]
    f25c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    f260:	4a06      	ldr	r2, [pc, #24]	; (f27c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f262:	9b01      	ldr	r3, [sp, #4]
    f264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f268:	1c5a      	adds	r2, r3, #1
    f26a:	4904      	ldr	r1, [pc, #16]	; (f27c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f26c:	9b01      	ldr	r3, [sp, #4]
    f26e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f272:	bf00      	nop
    f274:	b003      	add	sp, #12
    f276:	f85d fb04 	ldr.w	pc, [sp], #4
    f27a:	bf00      	nop
    f27c:	1fff921c 	.word	0x1fff921c
    f280:	1fff9218 	.word	0x1fff9218

0000f284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f284:	b500      	push	{lr}
    f286:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f288:	f7f2 f9b2 	bl	15f0 <Sys_GetCoreID>
    f28c:	4603      	mov	r3, r0
    f28e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    f290:	4a0d      	ldr	r2, [pc, #52]	; (f2c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f292:	9b01      	ldr	r3, [sp, #4]
    f294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f298:	1e5a      	subs	r2, r3, #1
    f29a:	490b      	ldr	r1, [pc, #44]	; (f2c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f29c:	9b01      	ldr	r3, [sp, #4]
    f29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f2a2:	4a0a      	ldr	r2, [pc, #40]	; (f2cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    f2a4:	9b01      	ldr	r3, [sp, #4]
    f2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2aa:	f003 0301 	and.w	r3, r3, #1
    f2ae:	2b00      	cmp	r3, #0
    f2b0:	d106      	bne.n	f2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    f2b2:	4a05      	ldr	r2, [pc, #20]	; (f2c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f2b4:	9b01      	ldr	r3, [sp, #4]
    f2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2ba:	2b00      	cmp	r3, #0
    f2bc:	d100      	bne.n	f2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2c0:	bf00      	nop
    f2c2:	b003      	add	sp, #12
    f2c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f2c8:	1fff921c 	.word	0x1fff921c
    f2cc:	1fff9218 	.word	0x1fff9218

0000f2d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f2d0:	b500      	push	{lr}
    f2d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2d4:	f7f2 f98c 	bl	15f0 <Sys_GetCoreID>
    f2d8:	4603      	mov	r3, r0
    f2da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    f2dc:	4a10      	ldr	r2, [pc, #64]	; (f320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f2de:	9b01      	ldr	r3, [sp, #4]
    f2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2e4:	2b00      	cmp	r3, #0
    f2e6:	d10d      	bne.n	f304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2e8:	f7f1 fd58 	bl	d9c <Adc_schm_read_msr>
    f2ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2ee:	9b00      	ldr	r3, [sp, #0]
    f2f0:	f003 0301 	and.w	r3, r3, #1
    f2f4:	2b00      	cmp	r3, #0
    f2f6:	d100      	bne.n	f2fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    f2fa:	490a      	ldr	r1, [pc, #40]	; (f324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    f2fc:	9b01      	ldr	r3, [sp, #4]
    f2fe:	9a00      	ldr	r2, [sp, #0]
    f300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    f304:	4a06      	ldr	r2, [pc, #24]	; (f320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f306:	9b01      	ldr	r3, [sp, #4]
    f308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f30c:	1c5a      	adds	r2, r3, #1
    f30e:	4904      	ldr	r1, [pc, #16]	; (f320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f310:	9b01      	ldr	r3, [sp, #4]
    f312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f316:	bf00      	nop
    f318:	b003      	add	sp, #12
    f31a:	f85d fb04 	ldr.w	pc, [sp], #4
    f31e:	bf00      	nop
    f320:	1fff9224 	.word	0x1fff9224
    f324:	1fff9220 	.word	0x1fff9220

0000f328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f328:	b500      	push	{lr}
    f32a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f32c:	f7f2 f960 	bl	15f0 <Sys_GetCoreID>
    f330:	4603      	mov	r3, r0
    f332:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    f334:	4a0d      	ldr	r2, [pc, #52]	; (f36c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f336:	9b01      	ldr	r3, [sp, #4]
    f338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f33c:	1e5a      	subs	r2, r3, #1
    f33e:	490b      	ldr	r1, [pc, #44]	; (f36c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f340:	9b01      	ldr	r3, [sp, #4]
    f342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    f346:	4a0a      	ldr	r2, [pc, #40]	; (f370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    f348:	9b01      	ldr	r3, [sp, #4]
    f34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f34e:	f003 0301 	and.w	r3, r3, #1
    f352:	2b00      	cmp	r3, #0
    f354:	d106      	bne.n	f364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    f356:	4a05      	ldr	r2, [pc, #20]	; (f36c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f358:	9b01      	ldr	r3, [sp, #4]
    f35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f35e:	2b00      	cmp	r3, #0
    f360:	d100      	bne.n	f364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f362:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f364:	bf00      	nop
    f366:	b003      	add	sp, #12
    f368:	f85d fb04 	ldr.w	pc, [sp], #4
    f36c:	1fff9224 	.word	0x1fff9224
    f370:	1fff9220 	.word	0x1fff9220

0000f374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f374:	b500      	push	{lr}
    f376:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f378:	f7f2 f93a 	bl	15f0 <Sys_GetCoreID>
    f37c:	4603      	mov	r3, r0
    f37e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    f380:	4a10      	ldr	r2, [pc, #64]	; (f3c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f382:	9b01      	ldr	r3, [sp, #4]
    f384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f388:	2b00      	cmp	r3, #0
    f38a:	d10d      	bne.n	f3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f38c:	f7f1 fd06 	bl	d9c <Adc_schm_read_msr>
    f390:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f392:	9b00      	ldr	r3, [sp, #0]
    f394:	f003 0301 	and.w	r3, r3, #1
    f398:	2b00      	cmp	r3, #0
    f39a:	d100      	bne.n	f39e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f39c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    f39e:	490a      	ldr	r1, [pc, #40]	; (f3c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    f3a0:	9b01      	ldr	r3, [sp, #4]
    f3a2:	9a00      	ldr	r2, [sp, #0]
    f3a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    f3a8:	4a06      	ldr	r2, [pc, #24]	; (f3c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f3aa:	9b01      	ldr	r3, [sp, #4]
    f3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3b0:	1c5a      	adds	r2, r3, #1
    f3b2:	4904      	ldr	r1, [pc, #16]	; (f3c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f3b4:	9b01      	ldr	r3, [sp, #4]
    f3b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3ba:	bf00      	nop
    f3bc:	b003      	add	sp, #12
    f3be:	f85d fb04 	ldr.w	pc, [sp], #4
    f3c2:	bf00      	nop
    f3c4:	1fff922c 	.word	0x1fff922c
    f3c8:	1fff9228 	.word	0x1fff9228

0000f3cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f3cc:	b500      	push	{lr}
    f3ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3d0:	f7f2 f90e 	bl	15f0 <Sys_GetCoreID>
    f3d4:	4603      	mov	r3, r0
    f3d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    f3d8:	4a0d      	ldr	r2, [pc, #52]	; (f410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f3da:	9b01      	ldr	r3, [sp, #4]
    f3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3e0:	1e5a      	subs	r2, r3, #1
    f3e2:	490b      	ldr	r1, [pc, #44]	; (f410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f3e4:	9b01      	ldr	r3, [sp, #4]
    f3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    f3ea:	4a0a      	ldr	r2, [pc, #40]	; (f414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    f3ec:	9b01      	ldr	r3, [sp, #4]
    f3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f2:	f003 0301 	and.w	r3, r3, #1
    f3f6:	2b00      	cmp	r3, #0
    f3f8:	d106      	bne.n	f408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    f3fa:	4a05      	ldr	r2, [pc, #20]	; (f410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f3fc:	9b01      	ldr	r3, [sp, #4]
    f3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f402:	2b00      	cmp	r3, #0
    f404:	d100      	bne.n	f408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f406:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f408:	bf00      	nop
    f40a:	b003      	add	sp, #12
    f40c:	f85d fb04 	ldr.w	pc, [sp], #4
    f410:	1fff922c 	.word	0x1fff922c
    f414:	1fff9228 	.word	0x1fff9228

0000f418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f418:	b500      	push	{lr}
    f41a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f41c:	f7f2 f8e8 	bl	15f0 <Sys_GetCoreID>
    f420:	4603      	mov	r3, r0
    f422:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    f424:	4a10      	ldr	r2, [pc, #64]	; (f468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f426:	9b01      	ldr	r3, [sp, #4]
    f428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f42c:	2b00      	cmp	r3, #0
    f42e:	d10d      	bne.n	f44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f430:	f7f1 fcb4 	bl	d9c <Adc_schm_read_msr>
    f434:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f436:	9b00      	ldr	r3, [sp, #0]
    f438:	f003 0301 	and.w	r3, r3, #1
    f43c:	2b00      	cmp	r3, #0
    f43e:	d100      	bne.n	f442 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f440:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    f442:	490a      	ldr	r1, [pc, #40]	; (f46c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    f444:	9b01      	ldr	r3, [sp, #4]
    f446:	9a00      	ldr	r2, [sp, #0]
    f448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    f44c:	4a06      	ldr	r2, [pc, #24]	; (f468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f44e:	9b01      	ldr	r3, [sp, #4]
    f450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f454:	1c5a      	adds	r2, r3, #1
    f456:	4904      	ldr	r1, [pc, #16]	; (f468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f458:	9b01      	ldr	r3, [sp, #4]
    f45a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f45e:	bf00      	nop
    f460:	b003      	add	sp, #12
    f462:	f85d fb04 	ldr.w	pc, [sp], #4
    f466:	bf00      	nop
    f468:	1fff9234 	.word	0x1fff9234
    f46c:	1fff9230 	.word	0x1fff9230

0000f470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f470:	b500      	push	{lr}
    f472:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f474:	f7f2 f8bc 	bl	15f0 <Sys_GetCoreID>
    f478:	4603      	mov	r3, r0
    f47a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    f47c:	4a0d      	ldr	r2, [pc, #52]	; (f4b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f47e:	9b01      	ldr	r3, [sp, #4]
    f480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f484:	1e5a      	subs	r2, r3, #1
    f486:	490b      	ldr	r1, [pc, #44]	; (f4b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f488:	9b01      	ldr	r3, [sp, #4]
    f48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    f48e:	4a0a      	ldr	r2, [pc, #40]	; (f4b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    f490:	9b01      	ldr	r3, [sp, #4]
    f492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f496:	f003 0301 	and.w	r3, r3, #1
    f49a:	2b00      	cmp	r3, #0
    f49c:	d106      	bne.n	f4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    f49e:	4a05      	ldr	r2, [pc, #20]	; (f4b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f4a0:	9b01      	ldr	r3, [sp, #4]
    f4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4a6:	2b00      	cmp	r3, #0
    f4a8:	d100      	bne.n	f4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4ac:	bf00      	nop
    f4ae:	b003      	add	sp, #12
    f4b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f4b4:	1fff9234 	.word	0x1fff9234
    f4b8:	1fff9230 	.word	0x1fff9230

0000f4bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f4bc:	b500      	push	{lr}
    f4be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4c0:	f7f2 f896 	bl	15f0 <Sys_GetCoreID>
    f4c4:	4603      	mov	r3, r0
    f4c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    f4c8:	4a10      	ldr	r2, [pc, #64]	; (f50c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f4ca:	9b01      	ldr	r3, [sp, #4]
    f4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	d10d      	bne.n	f4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4d4:	f7f1 fc62 	bl	d9c <Adc_schm_read_msr>
    f4d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4da:	9b00      	ldr	r3, [sp, #0]
    f4dc:	f003 0301 	and.w	r3, r3, #1
    f4e0:	2b00      	cmp	r3, #0
    f4e2:	d100      	bne.n	f4e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    f4e6:	490a      	ldr	r1, [pc, #40]	; (f510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	9a00      	ldr	r2, [sp, #0]
    f4ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    f4f0:	4a06      	ldr	r2, [pc, #24]	; (f50c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f4f2:	9b01      	ldr	r3, [sp, #4]
    f4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f8:	1c5a      	adds	r2, r3, #1
    f4fa:	4904      	ldr	r1, [pc, #16]	; (f50c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f502:	bf00      	nop
    f504:	b003      	add	sp, #12
    f506:	f85d fb04 	ldr.w	pc, [sp], #4
    f50a:	bf00      	nop
    f50c:	1fff923c 	.word	0x1fff923c
    f510:	1fff9238 	.word	0x1fff9238

0000f514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f514:	b500      	push	{lr}
    f516:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f518:	f7f2 f86a 	bl	15f0 <Sys_GetCoreID>
    f51c:	4603      	mov	r3, r0
    f51e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    f520:	4a0d      	ldr	r2, [pc, #52]	; (f558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f522:	9b01      	ldr	r3, [sp, #4]
    f524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f528:	1e5a      	subs	r2, r3, #1
    f52a:	490b      	ldr	r1, [pc, #44]	; (f558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f52c:	9b01      	ldr	r3, [sp, #4]
    f52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    f532:	4a0a      	ldr	r2, [pc, #40]	; (f55c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    f534:	9b01      	ldr	r3, [sp, #4]
    f536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f53a:	f003 0301 	and.w	r3, r3, #1
    f53e:	2b00      	cmp	r3, #0
    f540:	d106      	bne.n	f550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    f542:	4a05      	ldr	r2, [pc, #20]	; (f558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f544:	9b01      	ldr	r3, [sp, #4]
    f546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f54a:	2b00      	cmp	r3, #0
    f54c:	d100      	bne.n	f550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f54e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f550:	bf00      	nop
    f552:	b003      	add	sp, #12
    f554:	f85d fb04 	ldr.w	pc, [sp], #4
    f558:	1fff923c 	.word	0x1fff923c
    f55c:	1fff9238 	.word	0x1fff9238

0000f560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f560:	b500      	push	{lr}
    f562:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f564:	f7f2 f844 	bl	15f0 <Sys_GetCoreID>
    f568:	4603      	mov	r3, r0
    f56a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    f56c:	4a10      	ldr	r2, [pc, #64]	; (f5b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f56e:	9b01      	ldr	r3, [sp, #4]
    f570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f574:	2b00      	cmp	r3, #0
    f576:	d10d      	bne.n	f594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f578:	f7f1 fc10 	bl	d9c <Adc_schm_read_msr>
    f57c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f57e:	9b00      	ldr	r3, [sp, #0]
    f580:	f003 0301 	and.w	r3, r3, #1
    f584:	2b00      	cmp	r3, #0
    f586:	d100      	bne.n	f58a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f588:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f58a:	490a      	ldr	r1, [pc, #40]	; (f5b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    f58c:	9b01      	ldr	r3, [sp, #4]
    f58e:	9a00      	ldr	r2, [sp, #0]
    f590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    f594:	4a06      	ldr	r2, [pc, #24]	; (f5b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f596:	9b01      	ldr	r3, [sp, #4]
    f598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f59c:	1c5a      	adds	r2, r3, #1
    f59e:	4904      	ldr	r1, [pc, #16]	; (f5b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f5a0:	9b01      	ldr	r3, [sp, #4]
    f5a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5a6:	bf00      	nop
    f5a8:	b003      	add	sp, #12
    f5aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f5ae:	bf00      	nop
    f5b0:	1fff9244 	.word	0x1fff9244
    f5b4:	1fff9240 	.word	0x1fff9240

0000f5b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f5b8:	b500      	push	{lr}
    f5ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5bc:	f7f2 f818 	bl	15f0 <Sys_GetCoreID>
    f5c0:	4603      	mov	r3, r0
    f5c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    f5c4:	4a0d      	ldr	r2, [pc, #52]	; (f5fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f5c6:	9b01      	ldr	r3, [sp, #4]
    f5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5cc:	1e5a      	subs	r2, r3, #1
    f5ce:	490b      	ldr	r1, [pc, #44]	; (f5fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f5d0:	9b01      	ldr	r3, [sp, #4]
    f5d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f5d6:	4a0a      	ldr	r2, [pc, #40]	; (f600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    f5d8:	9b01      	ldr	r3, [sp, #4]
    f5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5de:	f003 0301 	and.w	r3, r3, #1
    f5e2:	2b00      	cmp	r3, #0
    f5e4:	d106      	bne.n	f5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    f5e6:	4a05      	ldr	r2, [pc, #20]	; (f5fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5ee:	2b00      	cmp	r3, #0
    f5f0:	d100      	bne.n	f5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5f4:	bf00      	nop
    f5f6:	b003      	add	sp, #12
    f5f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f5fc:	1fff9244 	.word	0x1fff9244
    f600:	1fff9240 	.word	0x1fff9240

0000f604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f604:	b500      	push	{lr}
    f606:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f608:	f7f1 fff2 	bl	15f0 <Sys_GetCoreID>
    f60c:	4603      	mov	r3, r0
    f60e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    f610:	4a10      	ldr	r2, [pc, #64]	; (f654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f612:	9b01      	ldr	r3, [sp, #4]
    f614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f618:	2b00      	cmp	r3, #0
    f61a:	d10d      	bne.n	f638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f61c:	f7f1 fbbe 	bl	d9c <Adc_schm_read_msr>
    f620:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f622:	9b00      	ldr	r3, [sp, #0]
    f624:	f003 0301 	and.w	r3, r3, #1
    f628:	2b00      	cmp	r3, #0
    f62a:	d100      	bne.n	f62e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f62c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f62e:	490a      	ldr	r1, [pc, #40]	; (f658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    f630:	9b01      	ldr	r3, [sp, #4]
    f632:	9a00      	ldr	r2, [sp, #0]
    f634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    f638:	4a06      	ldr	r2, [pc, #24]	; (f654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f63a:	9b01      	ldr	r3, [sp, #4]
    f63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f640:	1c5a      	adds	r2, r3, #1
    f642:	4904      	ldr	r1, [pc, #16]	; (f654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f644:	9b01      	ldr	r3, [sp, #4]
    f646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f64a:	bf00      	nop
    f64c:	b003      	add	sp, #12
    f64e:	f85d fb04 	ldr.w	pc, [sp], #4
    f652:	bf00      	nop
    f654:	1fff924c 	.word	0x1fff924c
    f658:	1fff9248 	.word	0x1fff9248

0000f65c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f65c:	b500      	push	{lr}
    f65e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f660:	f7f1 ffc6 	bl	15f0 <Sys_GetCoreID>
    f664:	4603      	mov	r3, r0
    f666:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    f668:	4a0d      	ldr	r2, [pc, #52]	; (f6a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f66a:	9b01      	ldr	r3, [sp, #4]
    f66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f670:	1e5a      	subs	r2, r3, #1
    f672:	490b      	ldr	r1, [pc, #44]	; (f6a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f674:	9b01      	ldr	r3, [sp, #4]
    f676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f67a:	4a0a      	ldr	r2, [pc, #40]	; (f6a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    f67c:	9b01      	ldr	r3, [sp, #4]
    f67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f682:	f003 0301 	and.w	r3, r3, #1
    f686:	2b00      	cmp	r3, #0
    f688:	d106      	bne.n	f698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    f68a:	4a05      	ldr	r2, [pc, #20]	; (f6a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f68c:	9b01      	ldr	r3, [sp, #4]
    f68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f692:	2b00      	cmp	r3, #0
    f694:	d100      	bne.n	f698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f696:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f698:	bf00      	nop
    f69a:	b003      	add	sp, #12
    f69c:	f85d fb04 	ldr.w	pc, [sp], #4
    f6a0:	1fff924c 	.word	0x1fff924c
    f6a4:	1fff9248 	.word	0x1fff9248

0000f6a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f6a8:	b500      	push	{lr}
    f6aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6ac:	f7f1 ffa0 	bl	15f0 <Sys_GetCoreID>
    f6b0:	4603      	mov	r3, r0
    f6b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    f6b4:	4a10      	ldr	r2, [pc, #64]	; (f6f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f6b6:	9b01      	ldr	r3, [sp, #4]
    f6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6bc:	2b00      	cmp	r3, #0
    f6be:	d10d      	bne.n	f6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6c0:	f7f1 fb6c 	bl	d9c <Adc_schm_read_msr>
    f6c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6c6:	9b00      	ldr	r3, [sp, #0]
    f6c8:	f003 0301 	and.w	r3, r3, #1
    f6cc:	2b00      	cmp	r3, #0
    f6ce:	d100      	bne.n	f6d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f6d2:	490a      	ldr	r1, [pc, #40]	; (f6fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    f6d4:	9b01      	ldr	r3, [sp, #4]
    f6d6:	9a00      	ldr	r2, [sp, #0]
    f6d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    f6dc:	4a06      	ldr	r2, [pc, #24]	; (f6f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f6de:	9b01      	ldr	r3, [sp, #4]
    f6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6e4:	1c5a      	adds	r2, r3, #1
    f6e6:	4904      	ldr	r1, [pc, #16]	; (f6f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f6e8:	9b01      	ldr	r3, [sp, #4]
    f6ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6ee:	bf00      	nop
    f6f0:	b003      	add	sp, #12
    f6f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f6f6:	bf00      	nop
    f6f8:	1fff9254 	.word	0x1fff9254
    f6fc:	1fff9250 	.word	0x1fff9250

0000f700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f700:	b500      	push	{lr}
    f702:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f704:	f7f1 ff74 	bl	15f0 <Sys_GetCoreID>
    f708:	4603      	mov	r3, r0
    f70a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    f70c:	4a0d      	ldr	r2, [pc, #52]	; (f744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f70e:	9b01      	ldr	r3, [sp, #4]
    f710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f714:	1e5a      	subs	r2, r3, #1
    f716:	490b      	ldr	r1, [pc, #44]	; (f744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f718:	9b01      	ldr	r3, [sp, #4]
    f71a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f71e:	4a0a      	ldr	r2, [pc, #40]	; (f748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    f720:	9b01      	ldr	r3, [sp, #4]
    f722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f726:	f003 0301 	and.w	r3, r3, #1
    f72a:	2b00      	cmp	r3, #0
    f72c:	d106      	bne.n	f73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    f72e:	4a05      	ldr	r2, [pc, #20]	; (f744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f730:	9b01      	ldr	r3, [sp, #4]
    f732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f736:	2b00      	cmp	r3, #0
    f738:	d100      	bne.n	f73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f73a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f73c:	bf00      	nop
    f73e:	b003      	add	sp, #12
    f740:	f85d fb04 	ldr.w	pc, [sp], #4
    f744:	1fff9254 	.word	0x1fff9254
    f748:	1fff9250 	.word	0x1fff9250

0000f74c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f74c:	b500      	push	{lr}
    f74e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f750:	f7f1 ff4e 	bl	15f0 <Sys_GetCoreID>
    f754:	4603      	mov	r3, r0
    f756:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    f758:	4a10      	ldr	r2, [pc, #64]	; (f79c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f75a:	9b01      	ldr	r3, [sp, #4]
    f75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f760:	2b00      	cmp	r3, #0
    f762:	d10d      	bne.n	f780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f764:	f7f1 fb1a 	bl	d9c <Adc_schm_read_msr>
    f768:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f76a:	9b00      	ldr	r3, [sp, #0]
    f76c:	f003 0301 	and.w	r3, r3, #1
    f770:	2b00      	cmp	r3, #0
    f772:	d100      	bne.n	f776 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f774:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f776:	490a      	ldr	r1, [pc, #40]	; (f7a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    f778:	9b01      	ldr	r3, [sp, #4]
    f77a:	9a00      	ldr	r2, [sp, #0]
    f77c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    f780:	4a06      	ldr	r2, [pc, #24]	; (f79c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f782:	9b01      	ldr	r3, [sp, #4]
    f784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f788:	1c5a      	adds	r2, r3, #1
    f78a:	4904      	ldr	r1, [pc, #16]	; (f79c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f78c:	9b01      	ldr	r3, [sp, #4]
    f78e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f792:	bf00      	nop
    f794:	b003      	add	sp, #12
    f796:	f85d fb04 	ldr.w	pc, [sp], #4
    f79a:	bf00      	nop
    f79c:	1fff925c 	.word	0x1fff925c
    f7a0:	1fff9258 	.word	0x1fff9258

0000f7a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f7a4:	b500      	push	{lr}
    f7a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7a8:	f7f1 ff22 	bl	15f0 <Sys_GetCoreID>
    f7ac:	4603      	mov	r3, r0
    f7ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    f7b0:	4a0d      	ldr	r2, [pc, #52]	; (f7e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f7b2:	9b01      	ldr	r3, [sp, #4]
    f7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7b8:	1e5a      	subs	r2, r3, #1
    f7ba:	490b      	ldr	r1, [pc, #44]	; (f7e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f7bc:	9b01      	ldr	r3, [sp, #4]
    f7be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f7c2:	4a0a      	ldr	r2, [pc, #40]	; (f7ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    f7c4:	9b01      	ldr	r3, [sp, #4]
    f7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7ca:	f003 0301 	and.w	r3, r3, #1
    f7ce:	2b00      	cmp	r3, #0
    f7d0:	d106      	bne.n	f7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    f7d2:	4a05      	ldr	r2, [pc, #20]	; (f7e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f7d4:	9b01      	ldr	r3, [sp, #4]
    f7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7da:	2b00      	cmp	r3, #0
    f7dc:	d100      	bne.n	f7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7e0:	bf00      	nop
    f7e2:	b003      	add	sp, #12
    f7e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f7e8:	1fff925c 	.word	0x1fff925c
    f7ec:	1fff9258 	.word	0x1fff9258

0000f7f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    f7f0:	b500      	push	{lr}
    f7f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7f4:	f7f1 fefc 	bl	15f0 <Sys_GetCoreID>
    f7f8:	4603      	mov	r3, r0
    f7fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    f7fc:	4a10      	ldr	r2, [pc, #64]	; (f840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    f7fe:	9b01      	ldr	r3, [sp, #4]
    f800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f804:	2b00      	cmp	r3, #0
    f806:	d10d      	bne.n	f824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f808:	f7f1 fac8 	bl	d9c <Adc_schm_read_msr>
    f80c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f80e:	9b00      	ldr	r3, [sp, #0]
    f810:	f003 0301 	and.w	r3, r3, #1
    f814:	2b00      	cmp	r3, #0
    f816:	d100      	bne.n	f81a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f818:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    f81a:	490a      	ldr	r1, [pc, #40]	; (f844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    f81c:	9b01      	ldr	r3, [sp, #4]
    f81e:	9a00      	ldr	r2, [sp, #0]
    f820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    f824:	4a06      	ldr	r2, [pc, #24]	; (f840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    f826:	9b01      	ldr	r3, [sp, #4]
    f828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f82c:	1c5a      	adds	r2, r3, #1
    f82e:	4904      	ldr	r1, [pc, #16]	; (f840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    f830:	9b01      	ldr	r3, [sp, #4]
    f832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f836:	bf00      	nop
    f838:	b003      	add	sp, #12
    f83a:	f85d fb04 	ldr.w	pc, [sp], #4
    f83e:	bf00      	nop
    f840:	1fff9264 	.word	0x1fff9264
    f844:	1fff9260 	.word	0x1fff9260

0000f848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    f848:	b500      	push	{lr}
    f84a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f84c:	f7f1 fed0 	bl	15f0 <Sys_GetCoreID>
    f850:	4603      	mov	r3, r0
    f852:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    f854:	4a0d      	ldr	r2, [pc, #52]	; (f88c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    f856:	9b01      	ldr	r3, [sp, #4]
    f858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f85c:	1e5a      	subs	r2, r3, #1
    f85e:	490b      	ldr	r1, [pc, #44]	; (f88c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    f860:	9b01      	ldr	r3, [sp, #4]
    f862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    f866:	4a0a      	ldr	r2, [pc, #40]	; (f890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    f868:	9b01      	ldr	r3, [sp, #4]
    f86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f86e:	f003 0301 	and.w	r3, r3, #1
    f872:	2b00      	cmp	r3, #0
    f874:	d106      	bne.n	f884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    f876:	4a05      	ldr	r2, [pc, #20]	; (f88c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    f878:	9b01      	ldr	r3, [sp, #4]
    f87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f87e:	2b00      	cmp	r3, #0
    f880:	d100      	bne.n	f884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f882:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f884:	bf00      	nop
    f886:	b003      	add	sp, #12
    f888:	f85d fb04 	ldr.w	pc, [sp], #4
    f88c:	1fff9264 	.word	0x1fff9264
    f890:	1fff9260 	.word	0x1fff9260

0000f894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    f894:	b500      	push	{lr}
    f896:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f898:	f7f1 feaa 	bl	15f0 <Sys_GetCoreID>
    f89c:	4603      	mov	r3, r0
    f89e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    f8a0:	4a10      	ldr	r2, [pc, #64]	; (f8e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    f8a2:	9b01      	ldr	r3, [sp, #4]
    f8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8a8:	2b00      	cmp	r3, #0
    f8aa:	d10d      	bne.n	f8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8ac:	f7f1 fa76 	bl	d9c <Adc_schm_read_msr>
    f8b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8b2:	9b00      	ldr	r3, [sp, #0]
    f8b4:	f003 0301 	and.w	r3, r3, #1
    f8b8:	2b00      	cmp	r3, #0
    f8ba:	d100      	bne.n	f8be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    f8be:	490a      	ldr	r1, [pc, #40]	; (f8e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    f8c0:	9b01      	ldr	r3, [sp, #4]
    f8c2:	9a00      	ldr	r2, [sp, #0]
    f8c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    f8c8:	4a06      	ldr	r2, [pc, #24]	; (f8e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    f8ca:	9b01      	ldr	r3, [sp, #4]
    f8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8d0:	1c5a      	adds	r2, r3, #1
    f8d2:	4904      	ldr	r1, [pc, #16]	; (f8e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    f8d4:	9b01      	ldr	r3, [sp, #4]
    f8d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8da:	bf00      	nop
    f8dc:	b003      	add	sp, #12
    f8de:	f85d fb04 	ldr.w	pc, [sp], #4
    f8e2:	bf00      	nop
    f8e4:	1fff926c 	.word	0x1fff926c
    f8e8:	1fff9268 	.word	0x1fff9268

0000f8ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    f8ec:	b500      	push	{lr}
    f8ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8f0:	f7f1 fe7e 	bl	15f0 <Sys_GetCoreID>
    f8f4:	4603      	mov	r3, r0
    f8f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    f8f8:	4a0d      	ldr	r2, [pc, #52]	; (f930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    f8fa:	9b01      	ldr	r3, [sp, #4]
    f8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f900:	1e5a      	subs	r2, r3, #1
    f902:	490b      	ldr	r1, [pc, #44]	; (f930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    f904:	9b01      	ldr	r3, [sp, #4]
    f906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    f90a:	4a0a      	ldr	r2, [pc, #40]	; (f934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    f90c:	9b01      	ldr	r3, [sp, #4]
    f90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f912:	f003 0301 	and.w	r3, r3, #1
    f916:	2b00      	cmp	r3, #0
    f918:	d106      	bne.n	f928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    f91a:	4a05      	ldr	r2, [pc, #20]	; (f930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    f91c:	9b01      	ldr	r3, [sp, #4]
    f91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f922:	2b00      	cmp	r3, #0
    f924:	d100      	bne.n	f928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f926:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f928:	bf00      	nop
    f92a:	b003      	add	sp, #12
    f92c:	f85d fb04 	ldr.w	pc, [sp], #4
    f930:	1fff926c 	.word	0x1fff926c
    f934:	1fff9268 	.word	0x1fff9268

0000f938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    f938:	b500      	push	{lr}
    f93a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f93c:	f7f1 fe58 	bl	15f0 <Sys_GetCoreID>
    f940:	4603      	mov	r3, r0
    f942:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    f944:	4a10      	ldr	r2, [pc, #64]	; (f988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    f946:	9b01      	ldr	r3, [sp, #4]
    f948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f94c:	2b00      	cmp	r3, #0
    f94e:	d10d      	bne.n	f96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f950:	f7f1 fa24 	bl	d9c <Adc_schm_read_msr>
    f954:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f956:	9b00      	ldr	r3, [sp, #0]
    f958:	f003 0301 	and.w	r3, r3, #1
    f95c:	2b00      	cmp	r3, #0
    f95e:	d100      	bne.n	f962 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f960:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    f962:	490a      	ldr	r1, [pc, #40]	; (f98c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    f964:	9b01      	ldr	r3, [sp, #4]
    f966:	9a00      	ldr	r2, [sp, #0]
    f968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    f96c:	4a06      	ldr	r2, [pc, #24]	; (f988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    f96e:	9b01      	ldr	r3, [sp, #4]
    f970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f974:	1c5a      	adds	r2, r3, #1
    f976:	4904      	ldr	r1, [pc, #16]	; (f988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    f978:	9b01      	ldr	r3, [sp, #4]
    f97a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f97e:	bf00      	nop
    f980:	b003      	add	sp, #12
    f982:	f85d fb04 	ldr.w	pc, [sp], #4
    f986:	bf00      	nop
    f988:	1fff9274 	.word	0x1fff9274
    f98c:	1fff9270 	.word	0x1fff9270

0000f990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    f990:	b500      	push	{lr}
    f992:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f994:	f7f1 fe2c 	bl	15f0 <Sys_GetCoreID>
    f998:	4603      	mov	r3, r0
    f99a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    f99c:	4a0d      	ldr	r2, [pc, #52]	; (f9d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    f99e:	9b01      	ldr	r3, [sp, #4]
    f9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a4:	1e5a      	subs	r2, r3, #1
    f9a6:	490b      	ldr	r1, [pc, #44]	; (f9d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    f9a8:	9b01      	ldr	r3, [sp, #4]
    f9aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    f9ae:	4a0a      	ldr	r2, [pc, #40]	; (f9d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    f9b0:	9b01      	ldr	r3, [sp, #4]
    f9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b6:	f003 0301 	and.w	r3, r3, #1
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	d106      	bne.n	f9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    f9be:	4a05      	ldr	r2, [pc, #20]	; (f9d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    f9c0:	9b01      	ldr	r3, [sp, #4]
    f9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d100      	bne.n	f9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9cc:	bf00      	nop
    f9ce:	b003      	add	sp, #12
    f9d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f9d4:	1fff9274 	.word	0x1fff9274
    f9d8:	1fff9270 	.word	0x1fff9270

0000f9dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    f9dc:	b500      	push	{lr}
    f9de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9e0:	f7f1 fe06 	bl	15f0 <Sys_GetCoreID>
    f9e4:	4603      	mov	r3, r0
    f9e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    f9e8:	4a10      	ldr	r2, [pc, #64]	; (fa2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    f9ea:	9b01      	ldr	r3, [sp, #4]
    f9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d10d      	bne.n	fa10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9f4:	f7f1 f9d2 	bl	d9c <Adc_schm_read_msr>
    f9f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9fa:	9b00      	ldr	r3, [sp, #0]
    f9fc:	f003 0301 	and.w	r3, r3, #1
    fa00:	2b00      	cmp	r3, #0
    fa02:	d100      	bne.n	fa06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    fa06:	490a      	ldr	r1, [pc, #40]	; (fa30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    fa08:	9b01      	ldr	r3, [sp, #4]
    fa0a:	9a00      	ldr	r2, [sp, #0]
    fa0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    fa10:	4a06      	ldr	r2, [pc, #24]	; (fa2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fa12:	9b01      	ldr	r3, [sp, #4]
    fa14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa18:	1c5a      	adds	r2, r3, #1
    fa1a:	4904      	ldr	r1, [pc, #16]	; (fa2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fa1c:	9b01      	ldr	r3, [sp, #4]
    fa1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa22:	bf00      	nop
    fa24:	b003      	add	sp, #12
    fa26:	f85d fb04 	ldr.w	pc, [sp], #4
    fa2a:	bf00      	nop
    fa2c:	1fff927c 	.word	0x1fff927c
    fa30:	1fff9278 	.word	0x1fff9278

0000fa34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    fa34:	b500      	push	{lr}
    fa36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa38:	f7f1 fdda 	bl	15f0 <Sys_GetCoreID>
    fa3c:	4603      	mov	r3, r0
    fa3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    fa40:	4a0d      	ldr	r2, [pc, #52]	; (fa78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fa42:	9b01      	ldr	r3, [sp, #4]
    fa44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa48:	1e5a      	subs	r2, r3, #1
    fa4a:	490b      	ldr	r1, [pc, #44]	; (fa78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fa4c:	9b01      	ldr	r3, [sp, #4]
    fa4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    fa52:	4a0a      	ldr	r2, [pc, #40]	; (fa7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    fa54:	9b01      	ldr	r3, [sp, #4]
    fa56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa5a:	f003 0301 	and.w	r3, r3, #1
    fa5e:	2b00      	cmp	r3, #0
    fa60:	d106      	bne.n	fa70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    fa62:	4a05      	ldr	r2, [pc, #20]	; (fa78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fa64:	9b01      	ldr	r3, [sp, #4]
    fa66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa6a:	2b00      	cmp	r3, #0
    fa6c:	d100      	bne.n	fa70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa70:	bf00      	nop
    fa72:	b003      	add	sp, #12
    fa74:	f85d fb04 	ldr.w	pc, [sp], #4
    fa78:	1fff927c 	.word	0x1fff927c
    fa7c:	1fff9278 	.word	0x1fff9278

0000fa80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fa80:	b500      	push	{lr}
    fa82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa84:	f7f1 fdb4 	bl	15f0 <Sys_GetCoreID>
    fa88:	4603      	mov	r3, r0
    fa8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    fa8c:	4a10      	ldr	r2, [pc, #64]	; (fad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fa8e:	9b01      	ldr	r3, [sp, #4]
    fa90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa94:	2b00      	cmp	r3, #0
    fa96:	d10d      	bne.n	fab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa98:	f7f1 f980 	bl	d9c <Adc_schm_read_msr>
    fa9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa9e:	9b00      	ldr	r3, [sp, #0]
    faa0:	f003 0301 	and.w	r3, r3, #1
    faa4:	2b00      	cmp	r3, #0
    faa6:	d100      	bne.n	faaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    faa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    faaa:	490a      	ldr	r1, [pc, #40]	; (fad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    faac:	9b01      	ldr	r3, [sp, #4]
    faae:	9a00      	ldr	r2, [sp, #0]
    fab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    fab4:	4a06      	ldr	r2, [pc, #24]	; (fad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fab6:	9b01      	ldr	r3, [sp, #4]
    fab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fabc:	1c5a      	adds	r2, r3, #1
    fabe:	4904      	ldr	r1, [pc, #16]	; (fad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fac0:	9b01      	ldr	r3, [sp, #4]
    fac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fac6:	bf00      	nop
    fac8:	b003      	add	sp, #12
    faca:	f85d fb04 	ldr.w	pc, [sp], #4
    face:	bf00      	nop
    fad0:	1fff9284 	.word	0x1fff9284
    fad4:	1fff9280 	.word	0x1fff9280

0000fad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fad8:	b500      	push	{lr}
    fada:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fadc:	f7f1 fd88 	bl	15f0 <Sys_GetCoreID>
    fae0:	4603      	mov	r3, r0
    fae2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    fae4:	4a0d      	ldr	r2, [pc, #52]	; (fb1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fae6:	9b01      	ldr	r3, [sp, #4]
    fae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faec:	1e5a      	subs	r2, r3, #1
    faee:	490b      	ldr	r1, [pc, #44]	; (fb1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    faf0:	9b01      	ldr	r3, [sp, #4]
    faf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    faf6:	4a0a      	ldr	r2, [pc, #40]	; (fb20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    faf8:	9b01      	ldr	r3, [sp, #4]
    fafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fafe:	f003 0301 	and.w	r3, r3, #1
    fb02:	2b00      	cmp	r3, #0
    fb04:	d106      	bne.n	fb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    fb06:	4a05      	ldr	r2, [pc, #20]	; (fb1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fb08:	9b01      	ldr	r3, [sp, #4]
    fb0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb0e:	2b00      	cmp	r3, #0
    fb10:	d100      	bne.n	fb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb14:	bf00      	nop
    fb16:	b003      	add	sp, #12
    fb18:	f85d fb04 	ldr.w	pc, [sp], #4
    fb1c:	1fff9284 	.word	0x1fff9284
    fb20:	1fff9280 	.word	0x1fff9280

0000fb24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fb24:	b500      	push	{lr}
    fb26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb28:	f7f1 fd62 	bl	15f0 <Sys_GetCoreID>
    fb2c:	4603      	mov	r3, r0
    fb2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    fb30:	4a10      	ldr	r2, [pc, #64]	; (fb74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fb32:	9b01      	ldr	r3, [sp, #4]
    fb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb38:	2b00      	cmp	r3, #0
    fb3a:	d10d      	bne.n	fb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb3c:	f7f1 f92e 	bl	d9c <Adc_schm_read_msr>
    fb40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb42:	9b00      	ldr	r3, [sp, #0]
    fb44:	f003 0301 	and.w	r3, r3, #1
    fb48:	2b00      	cmp	r3, #0
    fb4a:	d100      	bne.n	fb4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    fb4e:	490a      	ldr	r1, [pc, #40]	; (fb78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    fb50:	9b01      	ldr	r3, [sp, #4]
    fb52:	9a00      	ldr	r2, [sp, #0]
    fb54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    fb58:	4a06      	ldr	r2, [pc, #24]	; (fb74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fb5a:	9b01      	ldr	r3, [sp, #4]
    fb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb60:	1c5a      	adds	r2, r3, #1
    fb62:	4904      	ldr	r1, [pc, #16]	; (fb74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fb64:	9b01      	ldr	r3, [sp, #4]
    fb66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb6a:	bf00      	nop
    fb6c:	b003      	add	sp, #12
    fb6e:	f85d fb04 	ldr.w	pc, [sp], #4
    fb72:	bf00      	nop
    fb74:	1fff928c 	.word	0x1fff928c
    fb78:	1fff9288 	.word	0x1fff9288

0000fb7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fb7c:	b500      	push	{lr}
    fb7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb80:	f7f1 fd36 	bl	15f0 <Sys_GetCoreID>
    fb84:	4603      	mov	r3, r0
    fb86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    fb88:	4a0d      	ldr	r2, [pc, #52]	; (fbc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fb8a:	9b01      	ldr	r3, [sp, #4]
    fb8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb90:	1e5a      	subs	r2, r3, #1
    fb92:	490b      	ldr	r1, [pc, #44]	; (fbc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fb94:	9b01      	ldr	r3, [sp, #4]
    fb96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fb9a:	4a0a      	ldr	r2, [pc, #40]	; (fbc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    fb9c:	9b01      	ldr	r3, [sp, #4]
    fb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fba2:	f003 0301 	and.w	r3, r3, #1
    fba6:	2b00      	cmp	r3, #0
    fba8:	d106      	bne.n	fbb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    fbaa:	4a05      	ldr	r2, [pc, #20]	; (fbc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fbac:	9b01      	ldr	r3, [sp, #4]
    fbae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbb2:	2b00      	cmp	r3, #0
    fbb4:	d100      	bne.n	fbb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbb8:	bf00      	nop
    fbba:	b003      	add	sp, #12
    fbbc:	f85d fb04 	ldr.w	pc, [sp], #4
    fbc0:	1fff928c 	.word	0x1fff928c
    fbc4:	1fff9288 	.word	0x1fff9288

0000fbc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fbc8:	b500      	push	{lr}
    fbca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbcc:	f7f1 fd10 	bl	15f0 <Sys_GetCoreID>
    fbd0:	4603      	mov	r3, r0
    fbd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    fbd4:	4a10      	ldr	r2, [pc, #64]	; (fc18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fbd6:	9b01      	ldr	r3, [sp, #4]
    fbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbdc:	2b00      	cmp	r3, #0
    fbde:	d10d      	bne.n	fbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fbe0:	f7f1 f8dc 	bl	d9c <Adc_schm_read_msr>
    fbe4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbe6:	9b00      	ldr	r3, [sp, #0]
    fbe8:	f003 0301 	and.w	r3, r3, #1
    fbec:	2b00      	cmp	r3, #0
    fbee:	d100      	bne.n	fbf2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fbf2:	490a      	ldr	r1, [pc, #40]	; (fc1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    fbf4:	9b01      	ldr	r3, [sp, #4]
    fbf6:	9a00      	ldr	r2, [sp, #0]
    fbf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    fbfc:	4a06      	ldr	r2, [pc, #24]	; (fc18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fbfe:	9b01      	ldr	r3, [sp, #4]
    fc00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc04:	1c5a      	adds	r2, r3, #1
    fc06:	4904      	ldr	r1, [pc, #16]	; (fc18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fc08:	9b01      	ldr	r3, [sp, #4]
    fc0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc0e:	bf00      	nop
    fc10:	b003      	add	sp, #12
    fc12:	f85d fb04 	ldr.w	pc, [sp], #4
    fc16:	bf00      	nop
    fc18:	1fff9294 	.word	0x1fff9294
    fc1c:	1fff9290 	.word	0x1fff9290

0000fc20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fc20:	b500      	push	{lr}
    fc22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc24:	f7f1 fce4 	bl	15f0 <Sys_GetCoreID>
    fc28:	4603      	mov	r3, r0
    fc2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    fc2c:	4a0d      	ldr	r2, [pc, #52]	; (fc64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fc2e:	9b01      	ldr	r3, [sp, #4]
    fc30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc34:	1e5a      	subs	r2, r3, #1
    fc36:	490b      	ldr	r1, [pc, #44]	; (fc64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fc38:	9b01      	ldr	r3, [sp, #4]
    fc3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fc3e:	4a0a      	ldr	r2, [pc, #40]	; (fc68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    fc40:	9b01      	ldr	r3, [sp, #4]
    fc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc46:	f003 0301 	and.w	r3, r3, #1
    fc4a:	2b00      	cmp	r3, #0
    fc4c:	d106      	bne.n	fc5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    fc4e:	4a05      	ldr	r2, [pc, #20]	; (fc64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fc50:	9b01      	ldr	r3, [sp, #4]
    fc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc56:	2b00      	cmp	r3, #0
    fc58:	d100      	bne.n	fc5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc5c:	bf00      	nop
    fc5e:	b003      	add	sp, #12
    fc60:	f85d fb04 	ldr.w	pc, [sp], #4
    fc64:	1fff9294 	.word	0x1fff9294
    fc68:	1fff9290 	.word	0x1fff9290

0000fc6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    fc6c:	b500      	push	{lr}
    fc6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc70:	f7f1 fcbe 	bl	15f0 <Sys_GetCoreID>
    fc74:	4603      	mov	r3, r0
    fc76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    fc78:	4a10      	ldr	r2, [pc, #64]	; (fcbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fc7a:	9b01      	ldr	r3, [sp, #4]
    fc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc80:	2b00      	cmp	r3, #0
    fc82:	d10d      	bne.n	fca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc84:	f7f1 f88a 	bl	d9c <Adc_schm_read_msr>
    fc88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc8a:	9b00      	ldr	r3, [sp, #0]
    fc8c:	f003 0301 	and.w	r3, r3, #1
    fc90:	2b00      	cmp	r3, #0
    fc92:	d100      	bne.n	fc96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    fc96:	490a      	ldr	r1, [pc, #40]	; (fcc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    fc98:	9b01      	ldr	r3, [sp, #4]
    fc9a:	9a00      	ldr	r2, [sp, #0]
    fc9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    fca0:	4a06      	ldr	r2, [pc, #24]	; (fcbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fca2:	9b01      	ldr	r3, [sp, #4]
    fca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fca8:	1c5a      	adds	r2, r3, #1
    fcaa:	4904      	ldr	r1, [pc, #16]	; (fcbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fcac:	9b01      	ldr	r3, [sp, #4]
    fcae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fcb2:	bf00      	nop
    fcb4:	b003      	add	sp, #12
    fcb6:	f85d fb04 	ldr.w	pc, [sp], #4
    fcba:	bf00      	nop
    fcbc:	1fff929c 	.word	0x1fff929c
    fcc0:	1fff9298 	.word	0x1fff9298

0000fcc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    fcc4:	b500      	push	{lr}
    fcc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcc8:	f7f1 fc92 	bl	15f0 <Sys_GetCoreID>
    fccc:	4603      	mov	r3, r0
    fcce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    fcd0:	4a0d      	ldr	r2, [pc, #52]	; (fd08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    fcd2:	9b01      	ldr	r3, [sp, #4]
    fcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcd8:	1e5a      	subs	r2, r3, #1
    fcda:	490b      	ldr	r1, [pc, #44]	; (fd08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    fcdc:	9b01      	ldr	r3, [sp, #4]
    fcde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    fce2:	4a0a      	ldr	r2, [pc, #40]	; (fd0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    fce4:	9b01      	ldr	r3, [sp, #4]
    fce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcea:	f003 0301 	and.w	r3, r3, #1
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d106      	bne.n	fd00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    fcf2:	4a05      	ldr	r2, [pc, #20]	; (fd08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    fcf4:	9b01      	ldr	r3, [sp, #4]
    fcf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcfa:	2b00      	cmp	r3, #0
    fcfc:	d100      	bne.n	fd00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd00:	bf00      	nop
    fd02:	b003      	add	sp, #12
    fd04:	f85d fb04 	ldr.w	pc, [sp], #4
    fd08:	1fff929c 	.word	0x1fff929c
    fd0c:	1fff9298 	.word	0x1fff9298

0000fd10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    fd10:	b500      	push	{lr}
    fd12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd14:	f7f1 fc6c 	bl	15f0 <Sys_GetCoreID>
    fd18:	4603      	mov	r3, r0
    fd1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    fd1c:	4a10      	ldr	r2, [pc, #64]	; (fd60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    fd1e:	9b01      	ldr	r3, [sp, #4]
    fd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd24:	2b00      	cmp	r3, #0
    fd26:	d10d      	bne.n	fd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd28:	f7f1 f838 	bl	d9c <Adc_schm_read_msr>
    fd2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd2e:	9b00      	ldr	r3, [sp, #0]
    fd30:	f003 0301 	and.w	r3, r3, #1
    fd34:	2b00      	cmp	r3, #0
    fd36:	d100      	bne.n	fd3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    fd3a:	490a      	ldr	r1, [pc, #40]	; (fd64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    fd3c:	9b01      	ldr	r3, [sp, #4]
    fd3e:	9a00      	ldr	r2, [sp, #0]
    fd40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    fd44:	4a06      	ldr	r2, [pc, #24]	; (fd60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    fd46:	9b01      	ldr	r3, [sp, #4]
    fd48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd4c:	1c5a      	adds	r2, r3, #1
    fd4e:	4904      	ldr	r1, [pc, #16]	; (fd60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    fd50:	9b01      	ldr	r3, [sp, #4]
    fd52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd56:	bf00      	nop
    fd58:	b003      	add	sp, #12
    fd5a:	f85d fb04 	ldr.w	pc, [sp], #4
    fd5e:	bf00      	nop
    fd60:	1fff92a4 	.word	0x1fff92a4
    fd64:	1fff92a0 	.word	0x1fff92a0

0000fd68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    fd68:	b500      	push	{lr}
    fd6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd6c:	f7f1 fc40 	bl	15f0 <Sys_GetCoreID>
    fd70:	4603      	mov	r3, r0
    fd72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    fd74:	4a0d      	ldr	r2, [pc, #52]	; (fdac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    fd76:	9b01      	ldr	r3, [sp, #4]
    fd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd7c:	1e5a      	subs	r2, r3, #1
    fd7e:	490b      	ldr	r1, [pc, #44]	; (fdac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    fd80:	9b01      	ldr	r3, [sp, #4]
    fd82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    fd86:	4a0a      	ldr	r2, [pc, #40]	; (fdb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    fd88:	9b01      	ldr	r3, [sp, #4]
    fd8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd8e:	f003 0301 	and.w	r3, r3, #1
    fd92:	2b00      	cmp	r3, #0
    fd94:	d106      	bne.n	fda4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    fd96:	4a05      	ldr	r2, [pc, #20]	; (fdac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    fd98:	9b01      	ldr	r3, [sp, #4]
    fd9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd9e:	2b00      	cmp	r3, #0
    fda0:	d100      	bne.n	fda4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fda2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fda4:	bf00      	nop
    fda6:	b003      	add	sp, #12
    fda8:	f85d fb04 	ldr.w	pc, [sp], #4
    fdac:	1fff92a4 	.word	0x1fff92a4
    fdb0:	1fff92a0 	.word	0x1fff92a0

0000fdb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    fdb4:	b500      	push	{lr}
    fdb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdb8:	f7f1 fc1a 	bl	15f0 <Sys_GetCoreID>
    fdbc:	4603      	mov	r3, r0
    fdbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    fdc0:	4a10      	ldr	r2, [pc, #64]	; (fe04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    fdc2:	9b01      	ldr	r3, [sp, #4]
    fdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d10d      	bne.n	fde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdcc:	f7f0 ffe6 	bl	d9c <Adc_schm_read_msr>
    fdd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdd2:	9b00      	ldr	r3, [sp, #0]
    fdd4:	f003 0301 	and.w	r3, r3, #1
    fdd8:	2b00      	cmp	r3, #0
    fdda:	d100      	bne.n	fdde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fddc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fdde:	490a      	ldr	r1, [pc, #40]	; (fe08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    fde0:	9b01      	ldr	r3, [sp, #4]
    fde2:	9a00      	ldr	r2, [sp, #0]
    fde4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    fde8:	4a06      	ldr	r2, [pc, #24]	; (fe04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    fdea:	9b01      	ldr	r3, [sp, #4]
    fdec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdf0:	1c5a      	adds	r2, r3, #1
    fdf2:	4904      	ldr	r1, [pc, #16]	; (fe04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    fdf4:	9b01      	ldr	r3, [sp, #4]
    fdf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdfa:	bf00      	nop
    fdfc:	b003      	add	sp, #12
    fdfe:	f85d fb04 	ldr.w	pc, [sp], #4
    fe02:	bf00      	nop
    fe04:	1fff92ac 	.word	0x1fff92ac
    fe08:	1fff92a8 	.word	0x1fff92a8

0000fe0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    fe0c:	b500      	push	{lr}
    fe0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe10:	f7f1 fbee 	bl	15f0 <Sys_GetCoreID>
    fe14:	4603      	mov	r3, r0
    fe16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    fe18:	4a0d      	ldr	r2, [pc, #52]	; (fe50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    fe1a:	9b01      	ldr	r3, [sp, #4]
    fe1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe20:	1e5a      	subs	r2, r3, #1
    fe22:	490b      	ldr	r1, [pc, #44]	; (fe50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    fe24:	9b01      	ldr	r3, [sp, #4]
    fe26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    fe2a:	4a0a      	ldr	r2, [pc, #40]	; (fe54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    fe2c:	9b01      	ldr	r3, [sp, #4]
    fe2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe32:	f003 0301 	and.w	r3, r3, #1
    fe36:	2b00      	cmp	r3, #0
    fe38:	d106      	bne.n	fe48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    fe3a:	4a05      	ldr	r2, [pc, #20]	; (fe50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    fe3c:	9b01      	ldr	r3, [sp, #4]
    fe3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe42:	2b00      	cmp	r3, #0
    fe44:	d100      	bne.n	fe48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe48:	bf00      	nop
    fe4a:	b003      	add	sp, #12
    fe4c:	f85d fb04 	ldr.w	pc, [sp], #4
    fe50:	1fff92ac 	.word	0x1fff92ac
    fe54:	1fff92a8 	.word	0x1fff92a8

0000fe58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    fe58:	b500      	push	{lr}
    fe5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe5c:	f7f1 fbc8 	bl	15f0 <Sys_GetCoreID>
    fe60:	4603      	mov	r3, r0
    fe62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    fe64:	4a10      	ldr	r2, [pc, #64]	; (fea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    fe66:	9b01      	ldr	r3, [sp, #4]
    fe68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe6c:	2b00      	cmp	r3, #0
    fe6e:	d10d      	bne.n	fe8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe70:	f7f0 ff94 	bl	d9c <Adc_schm_read_msr>
    fe74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe76:	9b00      	ldr	r3, [sp, #0]
    fe78:	f003 0301 	and.w	r3, r3, #1
    fe7c:	2b00      	cmp	r3, #0
    fe7e:	d100      	bne.n	fe82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    fe82:	490a      	ldr	r1, [pc, #40]	; (feac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    fe84:	9b01      	ldr	r3, [sp, #4]
    fe86:	9a00      	ldr	r2, [sp, #0]
    fe88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    fe8c:	4a06      	ldr	r2, [pc, #24]	; (fea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    fe8e:	9b01      	ldr	r3, [sp, #4]
    fe90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe94:	1c5a      	adds	r2, r3, #1
    fe96:	4904      	ldr	r1, [pc, #16]	; (fea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    fe98:	9b01      	ldr	r3, [sp, #4]
    fe9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe9e:	bf00      	nop
    fea0:	b003      	add	sp, #12
    fea2:	f85d fb04 	ldr.w	pc, [sp], #4
    fea6:	bf00      	nop
    fea8:	1fff92b4 	.word	0x1fff92b4
    feac:	1fff92b0 	.word	0x1fff92b0

0000feb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    feb0:	b500      	push	{lr}
    feb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feb4:	f7f1 fb9c 	bl	15f0 <Sys_GetCoreID>
    feb8:	4603      	mov	r3, r0
    feba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    febc:	4a0d      	ldr	r2, [pc, #52]	; (fef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    febe:	9b01      	ldr	r3, [sp, #4]
    fec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec4:	1e5a      	subs	r2, r3, #1
    fec6:	490b      	ldr	r1, [pc, #44]	; (fef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    fec8:	9b01      	ldr	r3, [sp, #4]
    feca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    fece:	4a0a      	ldr	r2, [pc, #40]	; (fef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    fed0:	9b01      	ldr	r3, [sp, #4]
    fed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fed6:	f003 0301 	and.w	r3, r3, #1
    feda:	2b00      	cmp	r3, #0
    fedc:	d106      	bne.n	feec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    fede:	4a05      	ldr	r2, [pc, #20]	; (fef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    fee0:	9b01      	ldr	r3, [sp, #4]
    fee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fee6:	2b00      	cmp	r3, #0
    fee8:	d100      	bne.n	feec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    feea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    feec:	bf00      	nop
    feee:	b003      	add	sp, #12
    fef0:	f85d fb04 	ldr.w	pc, [sp], #4
    fef4:	1fff92b4 	.word	0x1fff92b4
    fef8:	1fff92b0 	.word	0x1fff92b0

0000fefc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    fefc:	b500      	push	{lr}
    fefe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff00:	f7f1 fb76 	bl	15f0 <Sys_GetCoreID>
    ff04:	4603      	mov	r3, r0
    ff06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    ff08:	4a10      	ldr	r2, [pc, #64]	; (ff4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    ff0a:	9b01      	ldr	r3, [sp, #4]
    ff0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff10:	2b00      	cmp	r3, #0
    ff12:	d10d      	bne.n	ff30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff14:	f7f0 ff42 	bl	d9c <Adc_schm_read_msr>
    ff18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff1a:	9b00      	ldr	r3, [sp, #0]
    ff1c:	f003 0301 	and.w	r3, r3, #1
    ff20:	2b00      	cmp	r3, #0
    ff22:	d100      	bne.n	ff26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    ff26:	490a      	ldr	r1, [pc, #40]	; (ff50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    ff28:	9b01      	ldr	r3, [sp, #4]
    ff2a:	9a00      	ldr	r2, [sp, #0]
    ff2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    ff30:	4a06      	ldr	r2, [pc, #24]	; (ff4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    ff32:	9b01      	ldr	r3, [sp, #4]
    ff34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff38:	1c5a      	adds	r2, r3, #1
    ff3a:	4904      	ldr	r1, [pc, #16]	; (ff4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    ff3c:	9b01      	ldr	r3, [sp, #4]
    ff3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff42:	bf00      	nop
    ff44:	b003      	add	sp, #12
    ff46:	f85d fb04 	ldr.w	pc, [sp], #4
    ff4a:	bf00      	nop
    ff4c:	1fff92bc 	.word	0x1fff92bc
    ff50:	1fff92b8 	.word	0x1fff92b8

0000ff54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    ff54:	b500      	push	{lr}
    ff56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff58:	f7f1 fb4a 	bl	15f0 <Sys_GetCoreID>
    ff5c:	4603      	mov	r3, r0
    ff5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    ff60:	4a0d      	ldr	r2, [pc, #52]	; (ff98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    ff62:	9b01      	ldr	r3, [sp, #4]
    ff64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff68:	1e5a      	subs	r2, r3, #1
    ff6a:	490b      	ldr	r1, [pc, #44]	; (ff98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    ff6c:	9b01      	ldr	r3, [sp, #4]
    ff6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    ff72:	4a0a      	ldr	r2, [pc, #40]	; (ff9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    ff74:	9b01      	ldr	r3, [sp, #4]
    ff76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff7a:	f003 0301 	and.w	r3, r3, #1
    ff7e:	2b00      	cmp	r3, #0
    ff80:	d106      	bne.n	ff90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    ff82:	4a05      	ldr	r2, [pc, #20]	; (ff98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    ff84:	9b01      	ldr	r3, [sp, #4]
    ff86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff8a:	2b00      	cmp	r3, #0
    ff8c:	d100      	bne.n	ff90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff90:	bf00      	nop
    ff92:	b003      	add	sp, #12
    ff94:	f85d fb04 	ldr.w	pc, [sp], #4
    ff98:	1fff92bc 	.word	0x1fff92bc
    ff9c:	1fff92b8 	.word	0x1fff92b8

0000ffa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    ffa0:	b500      	push	{lr}
    ffa2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffa4:	f7f1 fb24 	bl	15f0 <Sys_GetCoreID>
    ffa8:	4603      	mov	r3, r0
    ffaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    ffac:	4a10      	ldr	r2, [pc, #64]	; (fff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    ffae:	9b01      	ldr	r3, [sp, #4]
    ffb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb4:	2b00      	cmp	r3, #0
    ffb6:	d10d      	bne.n	ffd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffb8:	f7f0 fef0 	bl	d9c <Adc_schm_read_msr>
    ffbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffbe:	9b00      	ldr	r3, [sp, #0]
    ffc0:	f003 0301 	and.w	r3, r3, #1
    ffc4:	2b00      	cmp	r3, #0
    ffc6:	d100      	bne.n	ffca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ffc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    ffca:	490a      	ldr	r1, [pc, #40]	; (fff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    ffcc:	9b01      	ldr	r3, [sp, #4]
    ffce:	9a00      	ldr	r2, [sp, #0]
    ffd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    ffd4:	4a06      	ldr	r2, [pc, #24]	; (fff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    ffd6:	9b01      	ldr	r3, [sp, #4]
    ffd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffdc:	1c5a      	adds	r2, r3, #1
    ffde:	4904      	ldr	r1, [pc, #16]	; (fff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    ffe0:	9b01      	ldr	r3, [sp, #4]
    ffe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffe6:	bf00      	nop
    ffe8:	b003      	add	sp, #12
    ffea:	f85d fb04 	ldr.w	pc, [sp], #4
    ffee:	bf00      	nop
    fff0:	1fff92c4 	.word	0x1fff92c4
    fff4:	1fff92c0 	.word	0x1fff92c0

0000fff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    fff8:	b500      	push	{lr}
    fffa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fffc:	f7f1 faf8 	bl	15f0 <Sys_GetCoreID>
   10000:	4603      	mov	r3, r0
   10002:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   10004:	4a0d      	ldr	r2, [pc, #52]	; (1003c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10006:	9b01      	ldr	r3, [sp, #4]
   10008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1000c:	1e5a      	subs	r2, r3, #1
   1000e:	490b      	ldr	r1, [pc, #44]	; (1003c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10010:	9b01      	ldr	r3, [sp, #4]
   10012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10016:	4a0a      	ldr	r2, [pc, #40]	; (10040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10018:	9b01      	ldr	r3, [sp, #4]
   1001a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1001e:	f003 0301 	and.w	r3, r3, #1
   10022:	2b00      	cmp	r3, #0
   10024:	d106      	bne.n	10034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   10026:	4a05      	ldr	r2, [pc, #20]	; (1003c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10028:	9b01      	ldr	r3, [sp, #4]
   1002a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1002e:	2b00      	cmp	r3, #0
   10030:	d100      	bne.n	10034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10032:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10034:	bf00      	nop
   10036:	b003      	add	sp, #12
   10038:	f85d fb04 	ldr.w	pc, [sp], #4
   1003c:	1fff92c4 	.word	0x1fff92c4
   10040:	1fff92c0 	.word	0x1fff92c0

00010044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10044:	b500      	push	{lr}
   10046:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10048:	f7f1 fad2 	bl	15f0 <Sys_GetCoreID>
   1004c:	4603      	mov	r3, r0
   1004e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   10050:	4a10      	ldr	r2, [pc, #64]	; (10094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10052:	9b01      	ldr	r3, [sp, #4]
   10054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10058:	2b00      	cmp	r3, #0
   1005a:	d10d      	bne.n	10078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1005c:	f7f0 fe9e 	bl	d9c <Adc_schm_read_msr>
   10060:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10062:	9b00      	ldr	r3, [sp, #0]
   10064:	f003 0301 	and.w	r3, r3, #1
   10068:	2b00      	cmp	r3, #0
   1006a:	d100      	bne.n	1006e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1006c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1006e:	490a      	ldr	r1, [pc, #40]	; (10098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   10070:	9b01      	ldr	r3, [sp, #4]
   10072:	9a00      	ldr	r2, [sp, #0]
   10074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   10078:	4a06      	ldr	r2, [pc, #24]	; (10094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1007a:	9b01      	ldr	r3, [sp, #4]
   1007c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10080:	1c5a      	adds	r2, r3, #1
   10082:	4904      	ldr	r1, [pc, #16]	; (10094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10084:	9b01      	ldr	r3, [sp, #4]
   10086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1008a:	bf00      	nop
   1008c:	b003      	add	sp, #12
   1008e:	f85d fb04 	ldr.w	pc, [sp], #4
   10092:	bf00      	nop
   10094:	1fff92cc 	.word	0x1fff92cc
   10098:	1fff92c8 	.word	0x1fff92c8

0001009c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   1009c:	b500      	push	{lr}
   1009e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100a0:	f7f1 faa6 	bl	15f0 <Sys_GetCoreID>
   100a4:	4603      	mov	r3, r0
   100a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   100a8:	4a0d      	ldr	r2, [pc, #52]	; (100e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   100aa:	9b01      	ldr	r3, [sp, #4]
   100ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b0:	1e5a      	subs	r2, r3, #1
   100b2:	490b      	ldr	r1, [pc, #44]	; (100e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   100b4:	9b01      	ldr	r3, [sp, #4]
   100b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   100ba:	4a0a      	ldr	r2, [pc, #40]	; (100e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   100bc:	9b01      	ldr	r3, [sp, #4]
   100be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100c2:	f003 0301 	and.w	r3, r3, #1
   100c6:	2b00      	cmp	r3, #0
   100c8:	d106      	bne.n	100d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   100ca:	4a05      	ldr	r2, [pc, #20]	; (100e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   100cc:	9b01      	ldr	r3, [sp, #4]
   100ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100d2:	2b00      	cmp	r3, #0
   100d4:	d100      	bne.n	100d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   100d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100d8:	bf00      	nop
   100da:	b003      	add	sp, #12
   100dc:	f85d fb04 	ldr.w	pc, [sp], #4
   100e0:	1fff92cc 	.word	0x1fff92cc
   100e4:	1fff92c8 	.word	0x1fff92c8

000100e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   100e8:	b500      	push	{lr}
   100ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100ec:	f7f1 fa80 	bl	15f0 <Sys_GetCoreID>
   100f0:	4603      	mov	r3, r0
   100f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   100f4:	4a10      	ldr	r2, [pc, #64]	; (10138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   100f6:	9b01      	ldr	r3, [sp, #4]
   100f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100fc:	2b00      	cmp	r3, #0
   100fe:	d10d      	bne.n	1011c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10100:	f7f0 fe4c 	bl	d9c <Adc_schm_read_msr>
   10104:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10106:	9b00      	ldr	r3, [sp, #0]
   10108:	f003 0301 	and.w	r3, r3, #1
   1010c:	2b00      	cmp	r3, #0
   1010e:	d100      	bne.n	10112 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10110:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   10112:	490a      	ldr	r1, [pc, #40]	; (1013c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   10114:	9b01      	ldr	r3, [sp, #4]
   10116:	9a00      	ldr	r2, [sp, #0]
   10118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   1011c:	4a06      	ldr	r2, [pc, #24]	; (10138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1011e:	9b01      	ldr	r3, [sp, #4]
   10120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10124:	1c5a      	adds	r2, r3, #1
   10126:	4904      	ldr	r1, [pc, #16]	; (10138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10128:	9b01      	ldr	r3, [sp, #4]
   1012a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1012e:	bf00      	nop
   10130:	b003      	add	sp, #12
   10132:	f85d fb04 	ldr.w	pc, [sp], #4
   10136:	bf00      	nop
   10138:	1fff92d4 	.word	0x1fff92d4
   1013c:	1fff92d0 	.word	0x1fff92d0

00010140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10140:	b500      	push	{lr}
   10142:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10144:	f7f1 fa54 	bl	15f0 <Sys_GetCoreID>
   10148:	4603      	mov	r3, r0
   1014a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   1014c:	4a0d      	ldr	r2, [pc, #52]	; (10184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1014e:	9b01      	ldr	r3, [sp, #4]
   10150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10154:	1e5a      	subs	r2, r3, #1
   10156:	490b      	ldr	r1, [pc, #44]	; (10184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   10158:	9b01      	ldr	r3, [sp, #4]
   1015a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   1015e:	4a0a      	ldr	r2, [pc, #40]	; (10188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   10160:	9b01      	ldr	r3, [sp, #4]
   10162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10166:	f003 0301 	and.w	r3, r3, #1
   1016a:	2b00      	cmp	r3, #0
   1016c:	d106      	bne.n	1017c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   1016e:	4a05      	ldr	r2, [pc, #20]	; (10184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   10170:	9b01      	ldr	r3, [sp, #4]
   10172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10176:	2b00      	cmp	r3, #0
   10178:	d100      	bne.n	1017c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1017a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1017c:	bf00      	nop
   1017e:	b003      	add	sp, #12
   10180:	f85d fb04 	ldr.w	pc, [sp], #4
   10184:	1fff92d4 	.word	0x1fff92d4
   10188:	1fff92d0 	.word	0x1fff92d0

0001018c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   1018c:	b500      	push	{lr}
   1018e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10190:	f7f1 fa2e 	bl	15f0 <Sys_GetCoreID>
   10194:	4603      	mov	r3, r0
   10196:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   10198:	4a10      	ldr	r2, [pc, #64]	; (101dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   1019a:	9b01      	ldr	r3, [sp, #4]
   1019c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a0:	2b00      	cmp	r3, #0
   101a2:	d10d      	bne.n	101c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101a4:	f7f0 fdfa 	bl	d9c <Adc_schm_read_msr>
   101a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101aa:	9b00      	ldr	r3, [sp, #0]
   101ac:	f003 0301 	and.w	r3, r3, #1
   101b0:	2b00      	cmp	r3, #0
   101b2:	d100      	bne.n	101b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   101b6:	490a      	ldr	r1, [pc, #40]	; (101e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   101b8:	9b01      	ldr	r3, [sp, #4]
   101ba:	9a00      	ldr	r2, [sp, #0]
   101bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   101c0:	4a06      	ldr	r2, [pc, #24]	; (101dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   101c2:	9b01      	ldr	r3, [sp, #4]
   101c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101c8:	1c5a      	adds	r2, r3, #1
   101ca:	4904      	ldr	r1, [pc, #16]	; (101dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   101cc:	9b01      	ldr	r3, [sp, #4]
   101ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101d2:	bf00      	nop
   101d4:	b003      	add	sp, #12
   101d6:	f85d fb04 	ldr.w	pc, [sp], #4
   101da:	bf00      	nop
   101dc:	1fff92dc 	.word	0x1fff92dc
   101e0:	1fff92d8 	.word	0x1fff92d8

000101e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   101e4:	b500      	push	{lr}
   101e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101e8:	f7f1 fa02 	bl	15f0 <Sys_GetCoreID>
   101ec:	4603      	mov	r3, r0
   101ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   101f0:	4a0d      	ldr	r2, [pc, #52]	; (10228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   101f2:	9b01      	ldr	r3, [sp, #4]
   101f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101f8:	1e5a      	subs	r2, r3, #1
   101fa:	490b      	ldr	r1, [pc, #44]	; (10228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   101fc:	9b01      	ldr	r3, [sp, #4]
   101fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   10202:	4a0a      	ldr	r2, [pc, #40]	; (1022c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   10204:	9b01      	ldr	r3, [sp, #4]
   10206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1020a:	f003 0301 	and.w	r3, r3, #1
   1020e:	2b00      	cmp	r3, #0
   10210:	d106      	bne.n	10220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   10212:	4a05      	ldr	r2, [pc, #20]	; (10228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   10214:	9b01      	ldr	r3, [sp, #4]
   10216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1021a:	2b00      	cmp	r3, #0
   1021c:	d100      	bne.n	10220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1021e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10220:	bf00      	nop
   10222:	b003      	add	sp, #12
   10224:	f85d fb04 	ldr.w	pc, [sp], #4
   10228:	1fff92dc 	.word	0x1fff92dc
   1022c:	1fff92d8 	.word	0x1fff92d8

00010230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   10230:	b500      	push	{lr}
   10232:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10234:	f7f1 f9dc 	bl	15f0 <Sys_GetCoreID>
   10238:	4603      	mov	r3, r0
   1023a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   1023c:	4a10      	ldr	r2, [pc, #64]	; (10280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1023e:	9b01      	ldr	r3, [sp, #4]
   10240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10244:	2b00      	cmp	r3, #0
   10246:	d10d      	bne.n	10264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10248:	f7f0 fda8 	bl	d9c <Adc_schm_read_msr>
   1024c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1024e:	9b00      	ldr	r3, [sp, #0]
   10250:	f003 0301 	and.w	r3, r3, #1
   10254:	2b00      	cmp	r3, #0
   10256:	d100      	bne.n	1025a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10258:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1025a:	490a      	ldr	r1, [pc, #40]	; (10284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   1025c:	9b01      	ldr	r3, [sp, #4]
   1025e:	9a00      	ldr	r2, [sp, #0]
   10260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   10264:	4a06      	ldr	r2, [pc, #24]	; (10280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   10266:	9b01      	ldr	r3, [sp, #4]
   10268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1026c:	1c5a      	adds	r2, r3, #1
   1026e:	4904      	ldr	r1, [pc, #16]	; (10280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   10270:	9b01      	ldr	r3, [sp, #4]
   10272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10276:	bf00      	nop
   10278:	b003      	add	sp, #12
   1027a:	f85d fb04 	ldr.w	pc, [sp], #4
   1027e:	bf00      	nop
   10280:	1fff92e4 	.word	0x1fff92e4
   10284:	1fff92e0 	.word	0x1fff92e0

00010288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   10288:	b500      	push	{lr}
   1028a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1028c:	f7f1 f9b0 	bl	15f0 <Sys_GetCoreID>
   10290:	4603      	mov	r3, r0
   10292:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   10294:	4a0d      	ldr	r2, [pc, #52]	; (102cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   10296:	9b01      	ldr	r3, [sp, #4]
   10298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1029c:	1e5a      	subs	r2, r3, #1
   1029e:	490b      	ldr	r1, [pc, #44]	; (102cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   102a0:	9b01      	ldr	r3, [sp, #4]
   102a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   102a6:	4a0a      	ldr	r2, [pc, #40]	; (102d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   102a8:	9b01      	ldr	r3, [sp, #4]
   102aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102ae:	f003 0301 	and.w	r3, r3, #1
   102b2:	2b00      	cmp	r3, #0
   102b4:	d106      	bne.n	102c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   102b6:	4a05      	ldr	r2, [pc, #20]	; (102cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   102b8:	9b01      	ldr	r3, [sp, #4]
   102ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102be:	2b00      	cmp	r3, #0
   102c0:	d100      	bne.n	102c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102c4:	bf00      	nop
   102c6:	b003      	add	sp, #12
   102c8:	f85d fb04 	ldr.w	pc, [sp], #4
   102cc:	1fff92e4 	.word	0x1fff92e4
   102d0:	1fff92e0 	.word	0x1fff92e0

000102d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   102d4:	b500      	push	{lr}
   102d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102d8:	f7f1 f98a 	bl	15f0 <Sys_GetCoreID>
   102dc:	4603      	mov	r3, r0
   102de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   102e0:	4a10      	ldr	r2, [pc, #64]	; (10324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   102e2:	9b01      	ldr	r3, [sp, #4]
   102e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102e8:	2b00      	cmp	r3, #0
   102ea:	d10d      	bne.n	10308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102ec:	f7f0 fd56 	bl	d9c <Adc_schm_read_msr>
   102f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102f2:	9b00      	ldr	r3, [sp, #0]
   102f4:	f003 0301 	and.w	r3, r3, #1
   102f8:	2b00      	cmp	r3, #0
   102fa:	d100      	bne.n	102fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   102fe:	490a      	ldr	r1, [pc, #40]	; (10328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   10300:	9b01      	ldr	r3, [sp, #4]
   10302:	9a00      	ldr	r2, [sp, #0]
   10304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   10308:	4a06      	ldr	r2, [pc, #24]	; (10324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1030a:	9b01      	ldr	r3, [sp, #4]
   1030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10310:	1c5a      	adds	r2, r3, #1
   10312:	4904      	ldr	r1, [pc, #16]	; (10324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   10314:	9b01      	ldr	r3, [sp, #4]
   10316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1031a:	bf00      	nop
   1031c:	b003      	add	sp, #12
   1031e:	f85d fb04 	ldr.w	pc, [sp], #4
   10322:	bf00      	nop
   10324:	1fff92ec 	.word	0x1fff92ec
   10328:	1fff92e8 	.word	0x1fff92e8

0001032c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   1032c:	b500      	push	{lr}
   1032e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10330:	f7f1 f95e 	bl	15f0 <Sys_GetCoreID>
   10334:	4603      	mov	r3, r0
   10336:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   10338:	4a0d      	ldr	r2, [pc, #52]	; (10370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1033a:	9b01      	ldr	r3, [sp, #4]
   1033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10340:	1e5a      	subs	r2, r3, #1
   10342:	490b      	ldr	r1, [pc, #44]	; (10370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   10344:	9b01      	ldr	r3, [sp, #4]
   10346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   1034a:	4a0a      	ldr	r2, [pc, #40]	; (10374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   1034c:	9b01      	ldr	r3, [sp, #4]
   1034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10352:	f003 0301 	and.w	r3, r3, #1
   10356:	2b00      	cmp	r3, #0
   10358:	d106      	bne.n	10368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   1035a:	4a05      	ldr	r2, [pc, #20]	; (10370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1035c:	9b01      	ldr	r3, [sp, #4]
   1035e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10362:	2b00      	cmp	r3, #0
   10364:	d100      	bne.n	10368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10366:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10368:	bf00      	nop
   1036a:	b003      	add	sp, #12
   1036c:	f85d fb04 	ldr.w	pc, [sp], #4
   10370:	1fff92ec 	.word	0x1fff92ec
   10374:	1fff92e8 	.word	0x1fff92e8

00010378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   10378:	b500      	push	{lr}
   1037a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1037c:	f7f1 f938 	bl	15f0 <Sys_GetCoreID>
   10380:	4603      	mov	r3, r0
   10382:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   10384:	4a10      	ldr	r2, [pc, #64]	; (103c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1038c:	2b00      	cmp	r3, #0
   1038e:	d10d      	bne.n	103ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10390:	f7f0 fd04 	bl	d9c <Adc_schm_read_msr>
   10394:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10396:	9b00      	ldr	r3, [sp, #0]
   10398:	f003 0301 	and.w	r3, r3, #1
   1039c:	2b00      	cmp	r3, #0
   1039e:	d100      	bne.n	103a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   103a2:	490a      	ldr	r1, [pc, #40]	; (103cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	9a00      	ldr	r2, [sp, #0]
   103a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   103ac:	4a06      	ldr	r2, [pc, #24]	; (103c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   103ae:	9b01      	ldr	r3, [sp, #4]
   103b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103b4:	1c5a      	adds	r2, r3, #1
   103b6:	4904      	ldr	r1, [pc, #16]	; (103c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   103b8:	9b01      	ldr	r3, [sp, #4]
   103ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103be:	bf00      	nop
   103c0:	b003      	add	sp, #12
   103c2:	f85d fb04 	ldr.w	pc, [sp], #4
   103c6:	bf00      	nop
   103c8:	1fff92f4 	.word	0x1fff92f4
   103cc:	1fff92f0 	.word	0x1fff92f0

000103d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   103d0:	b500      	push	{lr}
   103d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103d4:	f7f1 f90c 	bl	15f0 <Sys_GetCoreID>
   103d8:	4603      	mov	r3, r0
   103da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   103dc:	4a0d      	ldr	r2, [pc, #52]	; (10414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   103de:	9b01      	ldr	r3, [sp, #4]
   103e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e4:	1e5a      	subs	r2, r3, #1
   103e6:	490b      	ldr	r1, [pc, #44]	; (10414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   103e8:	9b01      	ldr	r3, [sp, #4]
   103ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   103ee:	4a0a      	ldr	r2, [pc, #40]	; (10418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   103f0:	9b01      	ldr	r3, [sp, #4]
   103f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103f6:	f003 0301 	and.w	r3, r3, #1
   103fa:	2b00      	cmp	r3, #0
   103fc:	d106      	bne.n	1040c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   103fe:	4a05      	ldr	r2, [pc, #20]	; (10414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10400:	9b01      	ldr	r3, [sp, #4]
   10402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10406:	2b00      	cmp	r3, #0
   10408:	d100      	bne.n	1040c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1040a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1040c:	bf00      	nop
   1040e:	b003      	add	sp, #12
   10410:	f85d fb04 	ldr.w	pc, [sp], #4
   10414:	1fff92f4 	.word	0x1fff92f4
   10418:	1fff92f0 	.word	0x1fff92f0

0001041c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   1041c:	b500      	push	{lr}
   1041e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10420:	f7f1 f8e6 	bl	15f0 <Sys_GetCoreID>
   10424:	4603      	mov	r3, r0
   10426:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   10428:	4a10      	ldr	r2, [pc, #64]	; (1046c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1042a:	9b01      	ldr	r3, [sp, #4]
   1042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10430:	2b00      	cmp	r3, #0
   10432:	d10d      	bne.n	10450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10434:	f7f0 fcb2 	bl	d9c <Adc_schm_read_msr>
   10438:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1043a:	9b00      	ldr	r3, [sp, #0]
   1043c:	f003 0301 	and.w	r3, r3, #1
   10440:	2b00      	cmp	r3, #0
   10442:	d100      	bne.n	10446 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10444:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   10446:	490a      	ldr	r1, [pc, #40]	; (10470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   10448:	9b01      	ldr	r3, [sp, #4]
   1044a:	9a00      	ldr	r2, [sp, #0]
   1044c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   10450:	4a06      	ldr	r2, [pc, #24]	; (1046c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   10452:	9b01      	ldr	r3, [sp, #4]
   10454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10458:	1c5a      	adds	r2, r3, #1
   1045a:	4904      	ldr	r1, [pc, #16]	; (1046c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1045c:	9b01      	ldr	r3, [sp, #4]
   1045e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10462:	bf00      	nop
   10464:	b003      	add	sp, #12
   10466:	f85d fb04 	ldr.w	pc, [sp], #4
   1046a:	bf00      	nop
   1046c:	1fff92fc 	.word	0x1fff92fc
   10470:	1fff92f8 	.word	0x1fff92f8

00010474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   10474:	b500      	push	{lr}
   10476:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10478:	f7f1 f8ba 	bl	15f0 <Sys_GetCoreID>
   1047c:	4603      	mov	r3, r0
   1047e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   10480:	4a0d      	ldr	r2, [pc, #52]	; (104b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   10482:	9b01      	ldr	r3, [sp, #4]
   10484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10488:	1e5a      	subs	r2, r3, #1
   1048a:	490b      	ldr	r1, [pc, #44]	; (104b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   1048c:	9b01      	ldr	r3, [sp, #4]
   1048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   10492:	4a0a      	ldr	r2, [pc, #40]	; (104bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   10494:	9b01      	ldr	r3, [sp, #4]
   10496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1049a:	f003 0301 	and.w	r3, r3, #1
   1049e:	2b00      	cmp	r3, #0
   104a0:	d106      	bne.n	104b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   104a2:	4a05      	ldr	r2, [pc, #20]	; (104b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   104a4:	9b01      	ldr	r3, [sp, #4]
   104a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104aa:	2b00      	cmp	r3, #0
   104ac:	d100      	bne.n	104b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104b0:	bf00      	nop
   104b2:	b003      	add	sp, #12
   104b4:	f85d fb04 	ldr.w	pc, [sp], #4
   104b8:	1fff92fc 	.word	0x1fff92fc
   104bc:	1fff92f8 	.word	0x1fff92f8

000104c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   104c0:	b500      	push	{lr}
   104c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104c4:	f7f1 f894 	bl	15f0 <Sys_GetCoreID>
   104c8:	4603      	mov	r3, r0
   104ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   104cc:	4a10      	ldr	r2, [pc, #64]	; (10510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   104ce:	9b01      	ldr	r3, [sp, #4]
   104d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104d4:	2b00      	cmp	r3, #0
   104d6:	d10d      	bne.n	104f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   104d8:	f7f0 fc60 	bl	d9c <Adc_schm_read_msr>
   104dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   104de:	9b00      	ldr	r3, [sp, #0]
   104e0:	f003 0301 	and.w	r3, r3, #1
   104e4:	2b00      	cmp	r3, #0
   104e6:	d100      	bne.n	104ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   104ea:	490a      	ldr	r1, [pc, #40]	; (10514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   104ec:	9b01      	ldr	r3, [sp, #4]
   104ee:	9a00      	ldr	r2, [sp, #0]
   104f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   104f4:	4a06      	ldr	r2, [pc, #24]	; (10510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   104f6:	9b01      	ldr	r3, [sp, #4]
   104f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104fc:	1c5a      	adds	r2, r3, #1
   104fe:	4904      	ldr	r1, [pc, #16]	; (10510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10506:	bf00      	nop
   10508:	b003      	add	sp, #12
   1050a:	f85d fb04 	ldr.w	pc, [sp], #4
   1050e:	bf00      	nop
   10510:	1fff9304 	.word	0x1fff9304
   10514:	1fff9300 	.word	0x1fff9300

00010518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   10518:	b500      	push	{lr}
   1051a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1051c:	f7f1 f868 	bl	15f0 <Sys_GetCoreID>
   10520:	4603      	mov	r3, r0
   10522:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   10524:	4a0d      	ldr	r2, [pc, #52]	; (1055c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10526:	9b01      	ldr	r3, [sp, #4]
   10528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1052c:	1e5a      	subs	r2, r3, #1
   1052e:	490b      	ldr	r1, [pc, #44]	; (1055c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10530:	9b01      	ldr	r3, [sp, #4]
   10532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   10536:	4a0a      	ldr	r2, [pc, #40]	; (10560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   10538:	9b01      	ldr	r3, [sp, #4]
   1053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1053e:	f003 0301 	and.w	r3, r3, #1
   10542:	2b00      	cmp	r3, #0
   10544:	d106      	bne.n	10554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   10546:	4a05      	ldr	r2, [pc, #20]	; (1055c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10548:	9b01      	ldr	r3, [sp, #4]
   1054a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1054e:	2b00      	cmp	r3, #0
   10550:	d100      	bne.n	10554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10552:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10554:	bf00      	nop
   10556:	b003      	add	sp, #12
   10558:	f85d fb04 	ldr.w	pc, [sp], #4
   1055c:	1fff9304 	.word	0x1fff9304
   10560:	1fff9300 	.word	0x1fff9300

00010564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   10564:	b500      	push	{lr}
   10566:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10568:	f7f1 f842 	bl	15f0 <Sys_GetCoreID>
   1056c:	4603      	mov	r3, r0
   1056e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   10570:	4a10      	ldr	r2, [pc, #64]	; (105b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   10572:	9b01      	ldr	r3, [sp, #4]
   10574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10578:	2b00      	cmp	r3, #0
   1057a:	d10d      	bne.n	10598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1057c:	f7f0 fc0e 	bl	d9c <Adc_schm_read_msr>
   10580:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10582:	9b00      	ldr	r3, [sp, #0]
   10584:	f003 0301 	and.w	r3, r3, #1
   10588:	2b00      	cmp	r3, #0
   1058a:	d100      	bne.n	1058e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1058c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   1058e:	490a      	ldr	r1, [pc, #40]	; (105b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   10590:	9b01      	ldr	r3, [sp, #4]
   10592:	9a00      	ldr	r2, [sp, #0]
   10594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   10598:	4a06      	ldr	r2, [pc, #24]	; (105b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   1059a:	9b01      	ldr	r3, [sp, #4]
   1059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105a0:	1c5a      	adds	r2, r3, #1
   105a2:	4904      	ldr	r1, [pc, #16]	; (105b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   105a4:	9b01      	ldr	r3, [sp, #4]
   105a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105aa:	bf00      	nop
   105ac:	b003      	add	sp, #12
   105ae:	f85d fb04 	ldr.w	pc, [sp], #4
   105b2:	bf00      	nop
   105b4:	1fff930c 	.word	0x1fff930c
   105b8:	1fff9308 	.word	0x1fff9308

000105bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   105bc:	b500      	push	{lr}
   105be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105c0:	f7f1 f816 	bl	15f0 <Sys_GetCoreID>
   105c4:	4603      	mov	r3, r0
   105c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   105c8:	4a0d      	ldr	r2, [pc, #52]	; (10600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   105ca:	9b01      	ldr	r3, [sp, #4]
   105cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105d0:	1e5a      	subs	r2, r3, #1
   105d2:	490b      	ldr	r1, [pc, #44]	; (10600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   105d4:	9b01      	ldr	r3, [sp, #4]
   105d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   105da:	4a0a      	ldr	r2, [pc, #40]	; (10604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   105dc:	9b01      	ldr	r3, [sp, #4]
   105de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105e2:	f003 0301 	and.w	r3, r3, #1
   105e6:	2b00      	cmp	r3, #0
   105e8:	d106      	bne.n	105f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   105ea:	4a05      	ldr	r2, [pc, #20]	; (10600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   105ec:	9b01      	ldr	r3, [sp, #4]
   105ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105f2:	2b00      	cmp	r3, #0
   105f4:	d100      	bne.n	105f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105f8:	bf00      	nop
   105fa:	b003      	add	sp, #12
   105fc:	f85d fb04 	ldr.w	pc, [sp], #4
   10600:	1fff930c 	.word	0x1fff930c
   10604:	1fff9308 	.word	0x1fff9308

00010608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   10608:	b500      	push	{lr}
   1060a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1060c:	f7f0 fff0 	bl	15f0 <Sys_GetCoreID>
   10610:	4603      	mov	r3, r0
   10612:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   10614:	4a10      	ldr	r2, [pc, #64]	; (10658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   10616:	9b01      	ldr	r3, [sp, #4]
   10618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1061c:	2b00      	cmp	r3, #0
   1061e:	d10d      	bne.n	1063c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10620:	f7f0 fbbc 	bl	d9c <Adc_schm_read_msr>
   10624:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10626:	9b00      	ldr	r3, [sp, #0]
   10628:	f003 0301 	and.w	r3, r3, #1
   1062c:	2b00      	cmp	r3, #0
   1062e:	d100      	bne.n	10632 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10630:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   10632:	490a      	ldr	r1, [pc, #40]	; (1065c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   10634:	9b01      	ldr	r3, [sp, #4]
   10636:	9a00      	ldr	r2, [sp, #0]
   10638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   1063c:	4a06      	ldr	r2, [pc, #24]	; (10658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1063e:	9b01      	ldr	r3, [sp, #4]
   10640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10644:	1c5a      	adds	r2, r3, #1
   10646:	4904      	ldr	r1, [pc, #16]	; (10658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   10648:	9b01      	ldr	r3, [sp, #4]
   1064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1064e:	bf00      	nop
   10650:	b003      	add	sp, #12
   10652:	f85d fb04 	ldr.w	pc, [sp], #4
   10656:	bf00      	nop
   10658:	1fff9314 	.word	0x1fff9314
   1065c:	1fff9310 	.word	0x1fff9310

00010660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   10660:	b500      	push	{lr}
   10662:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10664:	f7f0 ffc4 	bl	15f0 <Sys_GetCoreID>
   10668:	4603      	mov	r3, r0
   1066a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   1066c:	4a0d      	ldr	r2, [pc, #52]	; (106a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   1066e:	9b01      	ldr	r3, [sp, #4]
   10670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10674:	1e5a      	subs	r2, r3, #1
   10676:	490b      	ldr	r1, [pc, #44]	; (106a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   10678:	9b01      	ldr	r3, [sp, #4]
   1067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   1067e:	4a0a      	ldr	r2, [pc, #40]	; (106a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   10680:	9b01      	ldr	r3, [sp, #4]
   10682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10686:	f003 0301 	and.w	r3, r3, #1
   1068a:	2b00      	cmp	r3, #0
   1068c:	d106      	bne.n	1069c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   1068e:	4a05      	ldr	r2, [pc, #20]	; (106a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   10690:	9b01      	ldr	r3, [sp, #4]
   10692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10696:	2b00      	cmp	r3, #0
   10698:	d100      	bne.n	1069c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1069a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1069c:	bf00      	nop
   1069e:	b003      	add	sp, #12
   106a0:	f85d fb04 	ldr.w	pc, [sp], #4
   106a4:	1fff9314 	.word	0x1fff9314
   106a8:	1fff9310 	.word	0x1fff9310

000106ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   106ac:	b500      	push	{lr}
   106ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106b0:	f7f0 ff9e 	bl	15f0 <Sys_GetCoreID>
   106b4:	4603      	mov	r3, r0
   106b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   106b8:	4a10      	ldr	r2, [pc, #64]	; (106fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   106ba:	9b01      	ldr	r3, [sp, #4]
   106bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106c0:	2b00      	cmp	r3, #0
   106c2:	d10d      	bne.n	106e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   106c4:	f7f0 fb6a 	bl	d9c <Adc_schm_read_msr>
   106c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   106ca:	9b00      	ldr	r3, [sp, #0]
   106cc:	f003 0301 	and.w	r3, r3, #1
   106d0:	2b00      	cmp	r3, #0
   106d2:	d100      	bne.n	106d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   106d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   106d6:	490a      	ldr	r1, [pc, #40]	; (10700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   106d8:	9b01      	ldr	r3, [sp, #4]
   106da:	9a00      	ldr	r2, [sp, #0]
   106dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   106e0:	4a06      	ldr	r2, [pc, #24]	; (106fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   106e2:	9b01      	ldr	r3, [sp, #4]
   106e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106e8:	1c5a      	adds	r2, r3, #1
   106ea:	4904      	ldr	r1, [pc, #16]	; (106fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   106ec:	9b01      	ldr	r3, [sp, #4]
   106ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106f2:	bf00      	nop
   106f4:	b003      	add	sp, #12
   106f6:	f85d fb04 	ldr.w	pc, [sp], #4
   106fa:	bf00      	nop
   106fc:	1fff931c 	.word	0x1fff931c
   10700:	1fff9318 	.word	0x1fff9318

00010704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   10704:	b500      	push	{lr}
   10706:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10708:	f7f0 ff72 	bl	15f0 <Sys_GetCoreID>
   1070c:	4603      	mov	r3, r0
   1070e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   10710:	4a0d      	ldr	r2, [pc, #52]	; (10748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   10712:	9b01      	ldr	r3, [sp, #4]
   10714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10718:	1e5a      	subs	r2, r3, #1
   1071a:	490b      	ldr	r1, [pc, #44]	; (10748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1071c:	9b01      	ldr	r3, [sp, #4]
   1071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   10722:	4a0a      	ldr	r2, [pc, #40]	; (1074c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   10724:	9b01      	ldr	r3, [sp, #4]
   10726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1072a:	f003 0301 	and.w	r3, r3, #1
   1072e:	2b00      	cmp	r3, #0
   10730:	d106      	bne.n	10740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   10732:	4a05      	ldr	r2, [pc, #20]	; (10748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   10734:	9b01      	ldr	r3, [sp, #4]
   10736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1073a:	2b00      	cmp	r3, #0
   1073c:	d100      	bne.n	10740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1073e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10740:	bf00      	nop
   10742:	b003      	add	sp, #12
   10744:	f85d fb04 	ldr.w	pc, [sp], #4
   10748:	1fff931c 	.word	0x1fff931c
   1074c:	1fff9318 	.word	0x1fff9318

00010750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   10750:	b500      	push	{lr}
   10752:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10754:	f7f0 ff4c 	bl	15f0 <Sys_GetCoreID>
   10758:	4603      	mov	r3, r0
   1075a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   1075c:	4a10      	ldr	r2, [pc, #64]	; (107a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1075e:	9b01      	ldr	r3, [sp, #4]
   10760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10764:	2b00      	cmp	r3, #0
   10766:	d10d      	bne.n	10784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10768:	f7f0 fb18 	bl	d9c <Adc_schm_read_msr>
   1076c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1076e:	9b00      	ldr	r3, [sp, #0]
   10770:	f003 0301 	and.w	r3, r3, #1
   10774:	2b00      	cmp	r3, #0
   10776:	d100      	bne.n	1077a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10778:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   1077a:	490a      	ldr	r1, [pc, #40]	; (107a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   1077c:	9b01      	ldr	r3, [sp, #4]
   1077e:	9a00      	ldr	r2, [sp, #0]
   10780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   10784:	4a06      	ldr	r2, [pc, #24]	; (107a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   10786:	9b01      	ldr	r3, [sp, #4]
   10788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1078c:	1c5a      	adds	r2, r3, #1
   1078e:	4904      	ldr	r1, [pc, #16]	; (107a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   10790:	9b01      	ldr	r3, [sp, #4]
   10792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10796:	bf00      	nop
   10798:	b003      	add	sp, #12
   1079a:	f85d fb04 	ldr.w	pc, [sp], #4
   1079e:	bf00      	nop
   107a0:	1fff9324 	.word	0x1fff9324
   107a4:	1fff9320 	.word	0x1fff9320

000107a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   107a8:	b500      	push	{lr}
   107aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107ac:	f7f0 ff20 	bl	15f0 <Sys_GetCoreID>
   107b0:	4603      	mov	r3, r0
   107b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   107b4:	4a0d      	ldr	r2, [pc, #52]	; (107ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   107b6:	9b01      	ldr	r3, [sp, #4]
   107b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107bc:	1e5a      	subs	r2, r3, #1
   107be:	490b      	ldr	r1, [pc, #44]	; (107ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   107c0:	9b01      	ldr	r3, [sp, #4]
   107c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   107c6:	4a0a      	ldr	r2, [pc, #40]	; (107f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   107c8:	9b01      	ldr	r3, [sp, #4]
   107ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107ce:	f003 0301 	and.w	r3, r3, #1
   107d2:	2b00      	cmp	r3, #0
   107d4:	d106      	bne.n	107e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   107d6:	4a05      	ldr	r2, [pc, #20]	; (107ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   107d8:	9b01      	ldr	r3, [sp, #4]
   107da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107de:	2b00      	cmp	r3, #0
   107e0:	d100      	bne.n	107e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   107e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   107e4:	bf00      	nop
   107e6:	b003      	add	sp, #12
   107e8:	f85d fb04 	ldr.w	pc, [sp], #4
   107ec:	1fff9324 	.word	0x1fff9324
   107f0:	1fff9320 	.word	0x1fff9320

000107f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   107f4:	b500      	push	{lr}
   107f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107f8:	f7f0 fefa 	bl	15f0 <Sys_GetCoreID>
   107fc:	4603      	mov	r3, r0
   107fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   10800:	4a10      	ldr	r2, [pc, #64]	; (10844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10802:	9b01      	ldr	r3, [sp, #4]
   10804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10808:	2b00      	cmp	r3, #0
   1080a:	d10d      	bne.n	10828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1080c:	f7f0 fac6 	bl	d9c <Adc_schm_read_msr>
   10810:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10812:	9b00      	ldr	r3, [sp, #0]
   10814:	f003 0301 	and.w	r3, r3, #1
   10818:	2b00      	cmp	r3, #0
   1081a:	d100      	bne.n	1081e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1081c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   1081e:	490a      	ldr	r1, [pc, #40]	; (10848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   10820:	9b01      	ldr	r3, [sp, #4]
   10822:	9a00      	ldr	r2, [sp, #0]
   10824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   10828:	4a06      	ldr	r2, [pc, #24]	; (10844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   1082a:	9b01      	ldr	r3, [sp, #4]
   1082c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10830:	1c5a      	adds	r2, r3, #1
   10832:	4904      	ldr	r1, [pc, #16]	; (10844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10834:	9b01      	ldr	r3, [sp, #4]
   10836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1083a:	bf00      	nop
   1083c:	b003      	add	sp, #12
   1083e:	f85d fb04 	ldr.w	pc, [sp], #4
   10842:	bf00      	nop
   10844:	1fff932c 	.word	0x1fff932c
   10848:	1fff9328 	.word	0x1fff9328

0001084c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   1084c:	b500      	push	{lr}
   1084e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10850:	f7f0 fece 	bl	15f0 <Sys_GetCoreID>
   10854:	4603      	mov	r3, r0
   10856:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   10858:	4a0d      	ldr	r2, [pc, #52]	; (10890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1085a:	9b01      	ldr	r3, [sp, #4]
   1085c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10860:	1e5a      	subs	r2, r3, #1
   10862:	490b      	ldr	r1, [pc, #44]	; (10890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10864:	9b01      	ldr	r3, [sp, #4]
   10866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   1086a:	4a0a      	ldr	r2, [pc, #40]	; (10894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   1086c:	9b01      	ldr	r3, [sp, #4]
   1086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10872:	f003 0301 	and.w	r3, r3, #1
   10876:	2b00      	cmp	r3, #0
   10878:	d106      	bne.n	10888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   1087a:	4a05      	ldr	r2, [pc, #20]	; (10890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1087c:	9b01      	ldr	r3, [sp, #4]
   1087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10882:	2b00      	cmp	r3, #0
   10884:	d100      	bne.n	10888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10886:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10888:	bf00      	nop
   1088a:	b003      	add	sp, #12
   1088c:	f85d fb04 	ldr.w	pc, [sp], #4
   10890:	1fff932c 	.word	0x1fff932c
   10894:	1fff9328 	.word	0x1fff9328

00010898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   10898:	b500      	push	{lr}
   1089a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1089c:	f7f0 fea8 	bl	15f0 <Sys_GetCoreID>
   108a0:	4603      	mov	r3, r0
   108a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   108a4:	4a10      	ldr	r2, [pc, #64]	; (108e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   108a6:	9b01      	ldr	r3, [sp, #4]
   108a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ac:	2b00      	cmp	r3, #0
   108ae:	d10d      	bne.n	108cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108b0:	f7f0 fa74 	bl	d9c <Adc_schm_read_msr>
   108b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108b6:	9b00      	ldr	r3, [sp, #0]
   108b8:	f003 0301 	and.w	r3, r3, #1
   108bc:	2b00      	cmp	r3, #0
   108be:	d100      	bne.n	108c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   108c2:	490a      	ldr	r1, [pc, #40]	; (108ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   108c4:	9b01      	ldr	r3, [sp, #4]
   108c6:	9a00      	ldr	r2, [sp, #0]
   108c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   108cc:	4a06      	ldr	r2, [pc, #24]	; (108e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   108ce:	9b01      	ldr	r3, [sp, #4]
   108d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108d4:	1c5a      	adds	r2, r3, #1
   108d6:	4904      	ldr	r1, [pc, #16]	; (108e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   108d8:	9b01      	ldr	r3, [sp, #4]
   108da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   108de:	bf00      	nop
   108e0:	b003      	add	sp, #12
   108e2:	f85d fb04 	ldr.w	pc, [sp], #4
   108e6:	bf00      	nop
   108e8:	1fff9334 	.word	0x1fff9334
   108ec:	1fff9330 	.word	0x1fff9330

000108f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   108f0:	b500      	push	{lr}
   108f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108f4:	f7f0 fe7c 	bl	15f0 <Sys_GetCoreID>
   108f8:	4603      	mov	r3, r0
   108fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   108fc:	4a0d      	ldr	r2, [pc, #52]	; (10934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   108fe:	9b01      	ldr	r3, [sp, #4]
   10900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10904:	1e5a      	subs	r2, r3, #1
   10906:	490b      	ldr	r1, [pc, #44]	; (10934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10908:	9b01      	ldr	r3, [sp, #4]
   1090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   1090e:	4a0a      	ldr	r2, [pc, #40]	; (10938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   10910:	9b01      	ldr	r3, [sp, #4]
   10912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10916:	f003 0301 	and.w	r3, r3, #1
   1091a:	2b00      	cmp	r3, #0
   1091c:	d106      	bne.n	1092c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   1091e:	4a05      	ldr	r2, [pc, #20]	; (10934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10920:	9b01      	ldr	r3, [sp, #4]
   10922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10926:	2b00      	cmp	r3, #0
   10928:	d100      	bne.n	1092c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1092a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1092c:	bf00      	nop
   1092e:	b003      	add	sp, #12
   10930:	f85d fb04 	ldr.w	pc, [sp], #4
   10934:	1fff9334 	.word	0x1fff9334
   10938:	1fff9330 	.word	0x1fff9330

0001093c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   1093c:	b500      	push	{lr}
   1093e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10940:	f7f0 fe56 	bl	15f0 <Sys_GetCoreID>
   10944:	4603      	mov	r3, r0
   10946:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   10948:	4a10      	ldr	r2, [pc, #64]	; (1098c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1094a:	9b01      	ldr	r3, [sp, #4]
   1094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10950:	2b00      	cmp	r3, #0
   10952:	d10d      	bne.n	10970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10954:	f7f0 fa22 	bl	d9c <Adc_schm_read_msr>
   10958:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1095a:	9b00      	ldr	r3, [sp, #0]
   1095c:	f003 0301 	and.w	r3, r3, #1
   10960:	2b00      	cmp	r3, #0
   10962:	d100      	bne.n	10966 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10964:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   10966:	490a      	ldr	r1, [pc, #40]	; (10990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   10968:	9b01      	ldr	r3, [sp, #4]
   1096a:	9a00      	ldr	r2, [sp, #0]
   1096c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   10970:	4a06      	ldr	r2, [pc, #24]	; (1098c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10972:	9b01      	ldr	r3, [sp, #4]
   10974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10978:	1c5a      	adds	r2, r3, #1
   1097a:	4904      	ldr	r1, [pc, #16]	; (1098c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1097c:	9b01      	ldr	r3, [sp, #4]
   1097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10982:	bf00      	nop
   10984:	b003      	add	sp, #12
   10986:	f85d fb04 	ldr.w	pc, [sp], #4
   1098a:	bf00      	nop
   1098c:	1fff933c 	.word	0x1fff933c
   10990:	1fff9338 	.word	0x1fff9338

00010994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   10994:	b500      	push	{lr}
   10996:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10998:	f7f0 fe2a 	bl	15f0 <Sys_GetCoreID>
   1099c:	4603      	mov	r3, r0
   1099e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   109a0:	4a0d      	ldr	r2, [pc, #52]	; (109d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   109a2:	9b01      	ldr	r3, [sp, #4]
   109a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109a8:	1e5a      	subs	r2, r3, #1
   109aa:	490b      	ldr	r1, [pc, #44]	; (109d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   109ac:	9b01      	ldr	r3, [sp, #4]
   109ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   109b2:	4a0a      	ldr	r2, [pc, #40]	; (109dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   109b4:	9b01      	ldr	r3, [sp, #4]
   109b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ba:	f003 0301 	and.w	r3, r3, #1
   109be:	2b00      	cmp	r3, #0
   109c0:	d106      	bne.n	109d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   109c2:	4a05      	ldr	r2, [pc, #20]	; (109d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   109c4:	9b01      	ldr	r3, [sp, #4]
   109c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ca:	2b00      	cmp	r3, #0
   109cc:	d100      	bne.n	109d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   109ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   109d0:	bf00      	nop
   109d2:	b003      	add	sp, #12
   109d4:	f85d fb04 	ldr.w	pc, [sp], #4
   109d8:	1fff933c 	.word	0x1fff933c
   109dc:	1fff9338 	.word	0x1fff9338

000109e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   109e0:	b500      	push	{lr}
   109e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109e4:	f7f0 fe04 	bl	15f0 <Sys_GetCoreID>
   109e8:	4603      	mov	r3, r0
   109ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   109ec:	4a10      	ldr	r2, [pc, #64]	; (10a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   109ee:	9b01      	ldr	r3, [sp, #4]
   109f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109f4:	2b00      	cmp	r3, #0
   109f6:	d10d      	bne.n	10a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109f8:	f7f0 f9d0 	bl	d9c <Adc_schm_read_msr>
   109fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109fe:	9b00      	ldr	r3, [sp, #0]
   10a00:	f003 0301 	and.w	r3, r3, #1
   10a04:	2b00      	cmp	r3, #0
   10a06:	d100      	bne.n	10a0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   10a0a:	490a      	ldr	r1, [pc, #40]	; (10a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   10a0c:	9b01      	ldr	r3, [sp, #4]
   10a0e:	9a00      	ldr	r2, [sp, #0]
   10a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   10a14:	4a06      	ldr	r2, [pc, #24]	; (10a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10a16:	9b01      	ldr	r3, [sp, #4]
   10a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a1c:	1c5a      	adds	r2, r3, #1
   10a1e:	4904      	ldr	r1, [pc, #16]	; (10a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10a20:	9b01      	ldr	r3, [sp, #4]
   10a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a26:	bf00      	nop
   10a28:	b003      	add	sp, #12
   10a2a:	f85d fb04 	ldr.w	pc, [sp], #4
   10a2e:	bf00      	nop
   10a30:	1fff9344 	.word	0x1fff9344
   10a34:	1fff9340 	.word	0x1fff9340

00010a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   10a38:	b500      	push	{lr}
   10a3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a3c:	f7f0 fdd8 	bl	15f0 <Sys_GetCoreID>
   10a40:	4603      	mov	r3, r0
   10a42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   10a44:	4a0d      	ldr	r2, [pc, #52]	; (10a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10a46:	9b01      	ldr	r3, [sp, #4]
   10a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a4c:	1e5a      	subs	r2, r3, #1
   10a4e:	490b      	ldr	r1, [pc, #44]	; (10a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10a50:	9b01      	ldr	r3, [sp, #4]
   10a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   10a56:	4a0a      	ldr	r2, [pc, #40]	; (10a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   10a58:	9b01      	ldr	r3, [sp, #4]
   10a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a5e:	f003 0301 	and.w	r3, r3, #1
   10a62:	2b00      	cmp	r3, #0
   10a64:	d106      	bne.n	10a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   10a66:	4a05      	ldr	r2, [pc, #20]	; (10a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10a68:	9b01      	ldr	r3, [sp, #4]
   10a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a6e:	2b00      	cmp	r3, #0
   10a70:	d100      	bne.n	10a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a74:	bf00      	nop
   10a76:	b003      	add	sp, #12
   10a78:	f85d fb04 	ldr.w	pc, [sp], #4
   10a7c:	1fff9344 	.word	0x1fff9344
   10a80:	1fff9340 	.word	0x1fff9340

00010a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10a84:	b500      	push	{lr}
   10a86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a88:	f7f0 fdb2 	bl	15f0 <Sys_GetCoreID>
   10a8c:	4603      	mov	r3, r0
   10a8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   10a90:	4a10      	ldr	r2, [pc, #64]	; (10ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10a92:	9b01      	ldr	r3, [sp, #4]
   10a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a98:	2b00      	cmp	r3, #0
   10a9a:	d10d      	bne.n	10ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a9c:	f7f0 f97e 	bl	d9c <Adc_schm_read_msr>
   10aa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10aa2:	9b00      	ldr	r3, [sp, #0]
   10aa4:	f003 0301 	and.w	r3, r3, #1
   10aa8:	2b00      	cmp	r3, #0
   10aaa:	d100      	bne.n	10aae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10aac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   10aae:	490a      	ldr	r1, [pc, #40]	; (10ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   10ab0:	9b01      	ldr	r3, [sp, #4]
   10ab2:	9a00      	ldr	r2, [sp, #0]
   10ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   10ab8:	4a06      	ldr	r2, [pc, #24]	; (10ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10aba:	9b01      	ldr	r3, [sp, #4]
   10abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ac0:	1c5a      	adds	r2, r3, #1
   10ac2:	4904      	ldr	r1, [pc, #16]	; (10ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10ac4:	9b01      	ldr	r3, [sp, #4]
   10ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10aca:	bf00      	nop
   10acc:	b003      	add	sp, #12
   10ace:	f85d fb04 	ldr.w	pc, [sp], #4
   10ad2:	bf00      	nop
   10ad4:	1fff934c 	.word	0x1fff934c
   10ad8:	1fff9348 	.word	0x1fff9348

00010adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10adc:	b500      	push	{lr}
   10ade:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ae0:	f7f0 fd86 	bl	15f0 <Sys_GetCoreID>
   10ae4:	4603      	mov	r3, r0
   10ae6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   10ae8:	4a0d      	ldr	r2, [pc, #52]	; (10b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10aea:	9b01      	ldr	r3, [sp, #4]
   10aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10af0:	1e5a      	subs	r2, r3, #1
   10af2:	490b      	ldr	r1, [pc, #44]	; (10b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10af4:	9b01      	ldr	r3, [sp, #4]
   10af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   10afa:	4a0a      	ldr	r2, [pc, #40]	; (10b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   10afc:	9b01      	ldr	r3, [sp, #4]
   10afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b02:	f003 0301 	and.w	r3, r3, #1
   10b06:	2b00      	cmp	r3, #0
   10b08:	d106      	bne.n	10b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   10b0a:	4a05      	ldr	r2, [pc, #20]	; (10b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10b0c:	9b01      	ldr	r3, [sp, #4]
   10b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b12:	2b00      	cmp	r3, #0
   10b14:	d100      	bne.n	10b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b18:	bf00      	nop
   10b1a:	b003      	add	sp, #12
   10b1c:	f85d fb04 	ldr.w	pc, [sp], #4
   10b20:	1fff934c 	.word	0x1fff934c
   10b24:	1fff9348 	.word	0x1fff9348

00010b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10b28:	b500      	push	{lr}
   10b2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b2c:	f7f0 fd60 	bl	15f0 <Sys_GetCoreID>
   10b30:	4603      	mov	r3, r0
   10b32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   10b34:	4a10      	ldr	r2, [pc, #64]	; (10b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10b36:	9b01      	ldr	r3, [sp, #4]
   10b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	d10d      	bne.n	10b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b40:	f7f0 f92c 	bl	d9c <Adc_schm_read_msr>
   10b44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b46:	9b00      	ldr	r3, [sp, #0]
   10b48:	f003 0301 	and.w	r3, r3, #1
   10b4c:	2b00      	cmp	r3, #0
   10b4e:	d100      	bne.n	10b52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   10b52:	490a      	ldr	r1, [pc, #40]	; (10b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   10b54:	9b01      	ldr	r3, [sp, #4]
   10b56:	9a00      	ldr	r2, [sp, #0]
   10b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   10b5c:	4a06      	ldr	r2, [pc, #24]	; (10b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10b5e:	9b01      	ldr	r3, [sp, #4]
   10b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b64:	1c5a      	adds	r2, r3, #1
   10b66:	4904      	ldr	r1, [pc, #16]	; (10b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10b68:	9b01      	ldr	r3, [sp, #4]
   10b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b6e:	bf00      	nop
   10b70:	b003      	add	sp, #12
   10b72:	f85d fb04 	ldr.w	pc, [sp], #4
   10b76:	bf00      	nop
   10b78:	1fff9354 	.word	0x1fff9354
   10b7c:	1fff9350 	.word	0x1fff9350

00010b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10b80:	b500      	push	{lr}
   10b82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b84:	f7f0 fd34 	bl	15f0 <Sys_GetCoreID>
   10b88:	4603      	mov	r3, r0
   10b8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   10b8c:	4a0d      	ldr	r2, [pc, #52]	; (10bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10b8e:	9b01      	ldr	r3, [sp, #4]
   10b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b94:	1e5a      	subs	r2, r3, #1
   10b96:	490b      	ldr	r1, [pc, #44]	; (10bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10b98:	9b01      	ldr	r3, [sp, #4]
   10b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   10b9e:	4a0a      	ldr	r2, [pc, #40]	; (10bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   10ba0:	9b01      	ldr	r3, [sp, #4]
   10ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ba6:	f003 0301 	and.w	r3, r3, #1
   10baa:	2b00      	cmp	r3, #0
   10bac:	d106      	bne.n	10bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   10bae:	4a05      	ldr	r2, [pc, #20]	; (10bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10bb0:	9b01      	ldr	r3, [sp, #4]
   10bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d100      	bne.n	10bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10bba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10bbc:	bf00      	nop
   10bbe:	b003      	add	sp, #12
   10bc0:	f85d fb04 	ldr.w	pc, [sp], #4
   10bc4:	1fff9354 	.word	0x1fff9354
   10bc8:	1fff9350 	.word	0x1fff9350

00010bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10bcc:	b500      	push	{lr}
   10bce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bd0:	f7f0 fd0e 	bl	15f0 <Sys_GetCoreID>
   10bd4:	4603      	mov	r3, r0
   10bd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   10bd8:	4a10      	ldr	r2, [pc, #64]	; (10c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10bda:	9b01      	ldr	r3, [sp, #4]
   10bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10be0:	2b00      	cmp	r3, #0
   10be2:	d10d      	bne.n	10c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10be4:	f7f0 f8da 	bl	d9c <Adc_schm_read_msr>
   10be8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10bea:	9b00      	ldr	r3, [sp, #0]
   10bec:	f003 0301 	and.w	r3, r3, #1
   10bf0:	2b00      	cmp	r3, #0
   10bf2:	d100      	bne.n	10bf6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10bf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   10bf6:	490a      	ldr	r1, [pc, #40]	; (10c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   10bf8:	9b01      	ldr	r3, [sp, #4]
   10bfa:	9a00      	ldr	r2, [sp, #0]
   10bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   10c00:	4a06      	ldr	r2, [pc, #24]	; (10c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10c02:	9b01      	ldr	r3, [sp, #4]
   10c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c08:	1c5a      	adds	r2, r3, #1
   10c0a:	4904      	ldr	r1, [pc, #16]	; (10c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10c0c:	9b01      	ldr	r3, [sp, #4]
   10c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c12:	bf00      	nop
   10c14:	b003      	add	sp, #12
   10c16:	f85d fb04 	ldr.w	pc, [sp], #4
   10c1a:	bf00      	nop
   10c1c:	1fff935c 	.word	0x1fff935c
   10c20:	1fff9358 	.word	0x1fff9358

00010c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10c24:	b500      	push	{lr}
   10c26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c28:	f7f0 fce2 	bl	15f0 <Sys_GetCoreID>
   10c2c:	4603      	mov	r3, r0
   10c2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   10c30:	4a0d      	ldr	r2, [pc, #52]	; (10c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10c32:	9b01      	ldr	r3, [sp, #4]
   10c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c38:	1e5a      	subs	r2, r3, #1
   10c3a:	490b      	ldr	r1, [pc, #44]	; (10c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10c3c:	9b01      	ldr	r3, [sp, #4]
   10c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   10c42:	4a0a      	ldr	r2, [pc, #40]	; (10c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   10c44:	9b01      	ldr	r3, [sp, #4]
   10c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c4a:	f003 0301 	and.w	r3, r3, #1
   10c4e:	2b00      	cmp	r3, #0
   10c50:	d106      	bne.n	10c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   10c52:	4a05      	ldr	r2, [pc, #20]	; (10c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10c54:	9b01      	ldr	r3, [sp, #4]
   10c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c5a:	2b00      	cmp	r3, #0
   10c5c:	d100      	bne.n	10c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c60:	bf00      	nop
   10c62:	b003      	add	sp, #12
   10c64:	f85d fb04 	ldr.w	pc, [sp], #4
   10c68:	1fff935c 	.word	0x1fff935c
   10c6c:	1fff9358 	.word	0x1fff9358

00010c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10c70:	b500      	push	{lr}
   10c72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c74:	f7f0 fcbc 	bl	15f0 <Sys_GetCoreID>
   10c78:	4603      	mov	r3, r0
   10c7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   10c7c:	4a10      	ldr	r2, [pc, #64]	; (10cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10c7e:	9b01      	ldr	r3, [sp, #4]
   10c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c84:	2b00      	cmp	r3, #0
   10c86:	d10d      	bne.n	10ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c88:	f7f0 f888 	bl	d9c <Adc_schm_read_msr>
   10c8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c8e:	9b00      	ldr	r3, [sp, #0]
   10c90:	f003 0301 	and.w	r3, r3, #1
   10c94:	2b00      	cmp	r3, #0
   10c96:	d100      	bne.n	10c9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   10c9a:	490a      	ldr	r1, [pc, #40]	; (10cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   10c9c:	9b01      	ldr	r3, [sp, #4]
   10c9e:	9a00      	ldr	r2, [sp, #0]
   10ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   10ca4:	4a06      	ldr	r2, [pc, #24]	; (10cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10ca6:	9b01      	ldr	r3, [sp, #4]
   10ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cac:	1c5a      	adds	r2, r3, #1
   10cae:	4904      	ldr	r1, [pc, #16]	; (10cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10cb0:	9b01      	ldr	r3, [sp, #4]
   10cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10cb6:	bf00      	nop
   10cb8:	b003      	add	sp, #12
   10cba:	f85d fb04 	ldr.w	pc, [sp], #4
   10cbe:	bf00      	nop
   10cc0:	1fff9364 	.word	0x1fff9364
   10cc4:	1fff9360 	.word	0x1fff9360

00010cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10cc8:	b500      	push	{lr}
   10cca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ccc:	f7f0 fc90 	bl	15f0 <Sys_GetCoreID>
   10cd0:	4603      	mov	r3, r0
   10cd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   10cd4:	4a0d      	ldr	r2, [pc, #52]	; (10d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10cd6:	9b01      	ldr	r3, [sp, #4]
   10cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cdc:	1e5a      	subs	r2, r3, #1
   10cde:	490b      	ldr	r1, [pc, #44]	; (10d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10ce0:	9b01      	ldr	r3, [sp, #4]
   10ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   10ce6:	4a0a      	ldr	r2, [pc, #40]	; (10d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   10ce8:	9b01      	ldr	r3, [sp, #4]
   10cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cee:	f003 0301 	and.w	r3, r3, #1
   10cf2:	2b00      	cmp	r3, #0
   10cf4:	d106      	bne.n	10d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   10cf6:	4a05      	ldr	r2, [pc, #20]	; (10d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10cf8:	9b01      	ldr	r3, [sp, #4]
   10cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cfe:	2b00      	cmp	r3, #0
   10d00:	d100      	bne.n	10d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d04:	bf00      	nop
   10d06:	b003      	add	sp, #12
   10d08:	f85d fb04 	ldr.w	pc, [sp], #4
   10d0c:	1fff9364 	.word	0x1fff9364
   10d10:	1fff9360 	.word	0x1fff9360

00010d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10d14:	b500      	push	{lr}
   10d16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d18:	f7f0 fc6a 	bl	15f0 <Sys_GetCoreID>
   10d1c:	4603      	mov	r3, r0
   10d1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   10d20:	4a10      	ldr	r2, [pc, #64]	; (10d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10d22:	9b01      	ldr	r3, [sp, #4]
   10d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d10d      	bne.n	10d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d2c:	f7f0 f836 	bl	d9c <Adc_schm_read_msr>
   10d30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d32:	9b00      	ldr	r3, [sp, #0]
   10d34:	f003 0301 	and.w	r3, r3, #1
   10d38:	2b00      	cmp	r3, #0
   10d3a:	d100      	bne.n	10d3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   10d3e:	490a      	ldr	r1, [pc, #40]	; (10d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   10d40:	9b01      	ldr	r3, [sp, #4]
   10d42:	9a00      	ldr	r2, [sp, #0]
   10d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   10d48:	4a06      	ldr	r2, [pc, #24]	; (10d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10d4a:	9b01      	ldr	r3, [sp, #4]
   10d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d50:	1c5a      	adds	r2, r3, #1
   10d52:	4904      	ldr	r1, [pc, #16]	; (10d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10d54:	9b01      	ldr	r3, [sp, #4]
   10d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d5a:	bf00      	nop
   10d5c:	b003      	add	sp, #12
   10d5e:	f85d fb04 	ldr.w	pc, [sp], #4
   10d62:	bf00      	nop
   10d64:	1fff936c 	.word	0x1fff936c
   10d68:	1fff9368 	.word	0x1fff9368

00010d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10d6c:	b500      	push	{lr}
   10d6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d70:	f7f0 fc3e 	bl	15f0 <Sys_GetCoreID>
   10d74:	4603      	mov	r3, r0
   10d76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   10d78:	4a0d      	ldr	r2, [pc, #52]	; (10db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10d7a:	9b01      	ldr	r3, [sp, #4]
   10d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d80:	1e5a      	subs	r2, r3, #1
   10d82:	490b      	ldr	r1, [pc, #44]	; (10db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10d84:	9b01      	ldr	r3, [sp, #4]
   10d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   10d8a:	4a0a      	ldr	r2, [pc, #40]	; (10db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   10d8c:	9b01      	ldr	r3, [sp, #4]
   10d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d92:	f003 0301 	and.w	r3, r3, #1
   10d96:	2b00      	cmp	r3, #0
   10d98:	d106      	bne.n	10da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   10d9a:	4a05      	ldr	r2, [pc, #20]	; (10db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10d9c:	9b01      	ldr	r3, [sp, #4]
   10d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10da2:	2b00      	cmp	r3, #0
   10da4:	d100      	bne.n	10da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10da6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10da8:	bf00      	nop
   10daa:	b003      	add	sp, #12
   10dac:	f85d fb04 	ldr.w	pc, [sp], #4
   10db0:	1fff936c 	.word	0x1fff936c
   10db4:	1fff9368 	.word	0x1fff9368

00010db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   10db8:	b500      	push	{lr}
   10dba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10dbc:	f7f0 fc18 	bl	15f0 <Sys_GetCoreID>
   10dc0:	4603      	mov	r3, r0
   10dc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   10dc4:	4a10      	ldr	r2, [pc, #64]	; (10e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   10dc6:	9b01      	ldr	r3, [sp, #4]
   10dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dcc:	2b00      	cmp	r3, #0
   10dce:	d10d      	bne.n	10dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10dd0:	f7ef ffe4 	bl	d9c <Adc_schm_read_msr>
   10dd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10dd6:	9b00      	ldr	r3, [sp, #0]
   10dd8:	f003 0301 	and.w	r3, r3, #1
   10ddc:	2b00      	cmp	r3, #0
   10dde:	d100      	bne.n	10de2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10de0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   10de2:	490a      	ldr	r1, [pc, #40]	; (10e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   10de4:	9b01      	ldr	r3, [sp, #4]
   10de6:	9a00      	ldr	r2, [sp, #0]
   10de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   10dec:	4a06      	ldr	r2, [pc, #24]	; (10e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   10dee:	9b01      	ldr	r3, [sp, #4]
   10df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10df4:	1c5a      	adds	r2, r3, #1
   10df6:	4904      	ldr	r1, [pc, #16]	; (10e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   10df8:	9b01      	ldr	r3, [sp, #4]
   10dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10dfe:	bf00      	nop
   10e00:	b003      	add	sp, #12
   10e02:	f85d fb04 	ldr.w	pc, [sp], #4
   10e06:	bf00      	nop
   10e08:	1fff9374 	.word	0x1fff9374
   10e0c:	1fff9370 	.word	0x1fff9370

00010e10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   10e10:	b500      	push	{lr}
   10e12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e14:	f7f0 fbec 	bl	15f0 <Sys_GetCoreID>
   10e18:	4603      	mov	r3, r0
   10e1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   10e1c:	4a0d      	ldr	r2, [pc, #52]	; (10e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   10e1e:	9b01      	ldr	r3, [sp, #4]
   10e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e24:	1e5a      	subs	r2, r3, #1
   10e26:	490b      	ldr	r1, [pc, #44]	; (10e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   10e28:	9b01      	ldr	r3, [sp, #4]
   10e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   10e2e:	4a0a      	ldr	r2, [pc, #40]	; (10e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   10e30:	9b01      	ldr	r3, [sp, #4]
   10e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e36:	f003 0301 	and.w	r3, r3, #1
   10e3a:	2b00      	cmp	r3, #0
   10e3c:	d106      	bne.n	10e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   10e3e:	4a05      	ldr	r2, [pc, #20]	; (10e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   10e40:	9b01      	ldr	r3, [sp, #4]
   10e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e46:	2b00      	cmp	r3, #0
   10e48:	d100      	bne.n	10e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e4c:	bf00      	nop
   10e4e:	b003      	add	sp, #12
   10e50:	f85d fb04 	ldr.w	pc, [sp], #4
   10e54:	1fff9374 	.word	0x1fff9374
   10e58:	1fff9370 	.word	0x1fff9370

00010e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   10e5c:	b500      	push	{lr}
   10e5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e60:	f7f0 fbc6 	bl	15f0 <Sys_GetCoreID>
   10e64:	4603      	mov	r3, r0
   10e66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   10e68:	4a10      	ldr	r2, [pc, #64]	; (10eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   10e6a:	9b01      	ldr	r3, [sp, #4]
   10e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e70:	2b00      	cmp	r3, #0
   10e72:	d10d      	bne.n	10e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e74:	f7ef ff92 	bl	d9c <Adc_schm_read_msr>
   10e78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e7a:	9b00      	ldr	r3, [sp, #0]
   10e7c:	f003 0301 	and.w	r3, r3, #1
   10e80:	2b00      	cmp	r3, #0
   10e82:	d100      	bne.n	10e86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   10e86:	490a      	ldr	r1, [pc, #40]	; (10eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   10e88:	9b01      	ldr	r3, [sp, #4]
   10e8a:	9a00      	ldr	r2, [sp, #0]
   10e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   10e90:	4a06      	ldr	r2, [pc, #24]	; (10eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   10e92:	9b01      	ldr	r3, [sp, #4]
   10e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e98:	1c5a      	adds	r2, r3, #1
   10e9a:	4904      	ldr	r1, [pc, #16]	; (10eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   10e9c:	9b01      	ldr	r3, [sp, #4]
   10e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ea2:	bf00      	nop
   10ea4:	b003      	add	sp, #12
   10ea6:	f85d fb04 	ldr.w	pc, [sp], #4
   10eaa:	bf00      	nop
   10eac:	1fff937c 	.word	0x1fff937c
   10eb0:	1fff9378 	.word	0x1fff9378

00010eb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   10eb4:	b500      	push	{lr}
   10eb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10eb8:	f7f0 fb9a 	bl	15f0 <Sys_GetCoreID>
   10ebc:	4603      	mov	r3, r0
   10ebe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   10ec0:	4a0d      	ldr	r2, [pc, #52]	; (10ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   10ec2:	9b01      	ldr	r3, [sp, #4]
   10ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ec8:	1e5a      	subs	r2, r3, #1
   10eca:	490b      	ldr	r1, [pc, #44]	; (10ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   10ecc:	9b01      	ldr	r3, [sp, #4]
   10ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   10ed2:	4a0a      	ldr	r2, [pc, #40]	; (10efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   10ed4:	9b01      	ldr	r3, [sp, #4]
   10ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eda:	f003 0301 	and.w	r3, r3, #1
   10ede:	2b00      	cmp	r3, #0
   10ee0:	d106      	bne.n	10ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   10ee2:	4a05      	ldr	r2, [pc, #20]	; (10ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   10ee4:	9b01      	ldr	r3, [sp, #4]
   10ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d100      	bne.n	10ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10eee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ef0:	bf00      	nop
   10ef2:	b003      	add	sp, #12
   10ef4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ef8:	1fff937c 	.word	0x1fff937c
   10efc:	1fff9378 	.word	0x1fff9378

00010f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   10f00:	b500      	push	{lr}
   10f02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f04:	f7f0 fb74 	bl	15f0 <Sys_GetCoreID>
   10f08:	4603      	mov	r3, r0
   10f0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   10f0c:	4a10      	ldr	r2, [pc, #64]	; (10f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   10f0e:	9b01      	ldr	r3, [sp, #4]
   10f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f14:	2b00      	cmp	r3, #0
   10f16:	d10d      	bne.n	10f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f18:	f7ef ff40 	bl	d9c <Adc_schm_read_msr>
   10f1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f1e:	9b00      	ldr	r3, [sp, #0]
   10f20:	f003 0301 	and.w	r3, r3, #1
   10f24:	2b00      	cmp	r3, #0
   10f26:	d100      	bne.n	10f2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   10f2a:	490a      	ldr	r1, [pc, #40]	; (10f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   10f2c:	9b01      	ldr	r3, [sp, #4]
   10f2e:	9a00      	ldr	r2, [sp, #0]
   10f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   10f34:	4a06      	ldr	r2, [pc, #24]	; (10f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   10f36:	9b01      	ldr	r3, [sp, #4]
   10f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f3c:	1c5a      	adds	r2, r3, #1
   10f3e:	4904      	ldr	r1, [pc, #16]	; (10f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   10f40:	9b01      	ldr	r3, [sp, #4]
   10f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f46:	bf00      	nop
   10f48:	b003      	add	sp, #12
   10f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   10f4e:	bf00      	nop
   10f50:	1fff9384 	.word	0x1fff9384
   10f54:	1fff9380 	.word	0x1fff9380

00010f58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   10f58:	b500      	push	{lr}
   10f5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f5c:	f7f0 fb48 	bl	15f0 <Sys_GetCoreID>
   10f60:	4603      	mov	r3, r0
   10f62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   10f64:	4a0d      	ldr	r2, [pc, #52]	; (10f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   10f66:	9b01      	ldr	r3, [sp, #4]
   10f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f6c:	1e5a      	subs	r2, r3, #1
   10f6e:	490b      	ldr	r1, [pc, #44]	; (10f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   10f70:	9b01      	ldr	r3, [sp, #4]
   10f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   10f76:	4a0a      	ldr	r2, [pc, #40]	; (10fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   10f78:	9b01      	ldr	r3, [sp, #4]
   10f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f7e:	f003 0301 	and.w	r3, r3, #1
   10f82:	2b00      	cmp	r3, #0
   10f84:	d106      	bne.n	10f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   10f86:	4a05      	ldr	r2, [pc, #20]	; (10f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   10f88:	9b01      	ldr	r3, [sp, #4]
   10f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f8e:	2b00      	cmp	r3, #0
   10f90:	d100      	bne.n	10f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f94:	bf00      	nop
   10f96:	b003      	add	sp, #12
   10f98:	f85d fb04 	ldr.w	pc, [sp], #4
   10f9c:	1fff9384 	.word	0x1fff9384
   10fa0:	1fff9380 	.word	0x1fff9380

00010fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   10fa4:	b500      	push	{lr}
   10fa6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fa8:	f7f0 fb22 	bl	15f0 <Sys_GetCoreID>
   10fac:	4603      	mov	r3, r0
   10fae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   10fb0:	4a10      	ldr	r2, [pc, #64]	; (10ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   10fb2:	9b01      	ldr	r3, [sp, #4]
   10fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fb8:	2b00      	cmp	r3, #0
   10fba:	d10d      	bne.n	10fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10fbc:	f7ef feee 	bl	d9c <Adc_schm_read_msr>
   10fc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10fc2:	9b00      	ldr	r3, [sp, #0]
   10fc4:	f003 0301 	and.w	r3, r3, #1
   10fc8:	2b00      	cmp	r3, #0
   10fca:	d100      	bne.n	10fce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10fcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   10fce:	490a      	ldr	r1, [pc, #40]	; (10ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   10fd0:	9b01      	ldr	r3, [sp, #4]
   10fd2:	9a00      	ldr	r2, [sp, #0]
   10fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   10fd8:	4a06      	ldr	r2, [pc, #24]	; (10ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   10fda:	9b01      	ldr	r3, [sp, #4]
   10fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fe0:	1c5a      	adds	r2, r3, #1
   10fe2:	4904      	ldr	r1, [pc, #16]	; (10ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   10fe4:	9b01      	ldr	r3, [sp, #4]
   10fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10fea:	bf00      	nop
   10fec:	b003      	add	sp, #12
   10fee:	f85d fb04 	ldr.w	pc, [sp], #4
   10ff2:	bf00      	nop
   10ff4:	1fff938c 	.word	0x1fff938c
   10ff8:	1fff9388 	.word	0x1fff9388

00010ffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   10ffc:	b500      	push	{lr}
   10ffe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11000:	f7f0 faf6 	bl	15f0 <Sys_GetCoreID>
   11004:	4603      	mov	r3, r0
   11006:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11008:	4a0d      	ldr	r2, [pc, #52]	; (11040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1100a:	9b01      	ldr	r3, [sp, #4]
   1100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11010:	1e5a      	subs	r2, r3, #1
   11012:	490b      	ldr	r1, [pc, #44]	; (11040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11014:	9b01      	ldr	r3, [sp, #4]
   11016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   1101a:	4a0a      	ldr	r2, [pc, #40]	; (11044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   1101c:	9b01      	ldr	r3, [sp, #4]
   1101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11022:	f003 0301 	and.w	r3, r3, #1
   11026:	2b00      	cmp	r3, #0
   11028:	d106      	bne.n	11038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   1102a:	4a05      	ldr	r2, [pc, #20]	; (11040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1102c:	9b01      	ldr	r3, [sp, #4]
   1102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11032:	2b00      	cmp	r3, #0
   11034:	d100      	bne.n	11038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11036:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11038:	bf00      	nop
   1103a:	b003      	add	sp, #12
   1103c:	f85d fb04 	ldr.w	pc, [sp], #4
   11040:	1fff938c 	.word	0x1fff938c
   11044:	1fff9388 	.word	0x1fff9388

00011048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11048:	b500      	push	{lr}
   1104a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1104c:	f7f0 fad0 	bl	15f0 <Sys_GetCoreID>
   11050:	4603      	mov	r3, r0
   11052:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   11054:	4a10      	ldr	r2, [pc, #64]	; (11098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11056:	9b01      	ldr	r3, [sp, #4]
   11058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1105c:	2b00      	cmp	r3, #0
   1105e:	d10d      	bne.n	1107c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11060:	f7ef fe9c 	bl	d9c <Adc_schm_read_msr>
   11064:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11066:	9b00      	ldr	r3, [sp, #0]
   11068:	f003 0301 	and.w	r3, r3, #1
   1106c:	2b00      	cmp	r3, #0
   1106e:	d100      	bne.n	11072 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11070:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   11072:	490a      	ldr	r1, [pc, #40]	; (1109c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   11074:	9b01      	ldr	r3, [sp, #4]
   11076:	9a00      	ldr	r2, [sp, #0]
   11078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   1107c:	4a06      	ldr	r2, [pc, #24]	; (11098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1107e:	9b01      	ldr	r3, [sp, #4]
   11080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11084:	1c5a      	adds	r2, r3, #1
   11086:	4904      	ldr	r1, [pc, #16]	; (11098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11088:	9b01      	ldr	r3, [sp, #4]
   1108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1108e:	bf00      	nop
   11090:	b003      	add	sp, #12
   11092:	f85d fb04 	ldr.w	pc, [sp], #4
   11096:	bf00      	nop
   11098:	1fff9394 	.word	0x1fff9394
   1109c:	1fff9390 	.word	0x1fff9390

000110a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   110a0:	b500      	push	{lr}
   110a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110a4:	f7f0 faa4 	bl	15f0 <Sys_GetCoreID>
   110a8:	4603      	mov	r3, r0
   110aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   110ac:	4a0d      	ldr	r2, [pc, #52]	; (110e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   110ae:	9b01      	ldr	r3, [sp, #4]
   110b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110b4:	1e5a      	subs	r2, r3, #1
   110b6:	490b      	ldr	r1, [pc, #44]	; (110e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   110b8:	9b01      	ldr	r3, [sp, #4]
   110ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   110be:	4a0a      	ldr	r2, [pc, #40]	; (110e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   110c0:	9b01      	ldr	r3, [sp, #4]
   110c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110c6:	f003 0301 	and.w	r3, r3, #1
   110ca:	2b00      	cmp	r3, #0
   110cc:	d106      	bne.n	110dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   110ce:	4a05      	ldr	r2, [pc, #20]	; (110e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   110d0:	9b01      	ldr	r3, [sp, #4]
   110d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110d6:	2b00      	cmp	r3, #0
   110d8:	d100      	bne.n	110dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   110da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   110dc:	bf00      	nop
   110de:	b003      	add	sp, #12
   110e0:	f85d fb04 	ldr.w	pc, [sp], #4
   110e4:	1fff9394 	.word	0x1fff9394
   110e8:	1fff9390 	.word	0x1fff9390

000110ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   110ec:	b500      	push	{lr}
   110ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110f0:	f7f0 fa7e 	bl	15f0 <Sys_GetCoreID>
   110f4:	4603      	mov	r3, r0
   110f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   110f8:	4a10      	ldr	r2, [pc, #64]	; (1113c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   110fa:	9b01      	ldr	r3, [sp, #4]
   110fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11100:	2b00      	cmp	r3, #0
   11102:	d10d      	bne.n	11120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11104:	f7ef fe4a 	bl	d9c <Adc_schm_read_msr>
   11108:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1110a:	9b00      	ldr	r3, [sp, #0]
   1110c:	f003 0301 	and.w	r3, r3, #1
   11110:	2b00      	cmp	r3, #0
   11112:	d100      	bne.n	11116 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11114:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   11116:	490a      	ldr	r1, [pc, #40]	; (11140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   11118:	9b01      	ldr	r3, [sp, #4]
   1111a:	9a00      	ldr	r2, [sp, #0]
   1111c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   11120:	4a06      	ldr	r2, [pc, #24]	; (1113c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   11122:	9b01      	ldr	r3, [sp, #4]
   11124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11128:	1c5a      	adds	r2, r3, #1
   1112a:	4904      	ldr	r1, [pc, #16]	; (1113c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1112c:	9b01      	ldr	r3, [sp, #4]
   1112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11132:	bf00      	nop
   11134:	b003      	add	sp, #12
   11136:	f85d fb04 	ldr.w	pc, [sp], #4
   1113a:	bf00      	nop
   1113c:	1fff939c 	.word	0x1fff939c
   11140:	1fff9398 	.word	0x1fff9398

00011144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   11144:	b500      	push	{lr}
   11146:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11148:	f7f0 fa52 	bl	15f0 <Sys_GetCoreID>
   1114c:	4603      	mov	r3, r0
   1114e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   11150:	4a0d      	ldr	r2, [pc, #52]	; (11188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   11152:	9b01      	ldr	r3, [sp, #4]
   11154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11158:	1e5a      	subs	r2, r3, #1
   1115a:	490b      	ldr	r1, [pc, #44]	; (11188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1115c:	9b01      	ldr	r3, [sp, #4]
   1115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   11162:	4a0a      	ldr	r2, [pc, #40]	; (1118c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   11164:	9b01      	ldr	r3, [sp, #4]
   11166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1116a:	f003 0301 	and.w	r3, r3, #1
   1116e:	2b00      	cmp	r3, #0
   11170:	d106      	bne.n	11180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   11172:	4a05      	ldr	r2, [pc, #20]	; (11188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   11174:	9b01      	ldr	r3, [sp, #4]
   11176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1117a:	2b00      	cmp	r3, #0
   1117c:	d100      	bne.n	11180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1117e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11180:	bf00      	nop
   11182:	b003      	add	sp, #12
   11184:	f85d fb04 	ldr.w	pc, [sp], #4
   11188:	1fff939c 	.word	0x1fff939c
   1118c:	1fff9398 	.word	0x1fff9398

00011190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   11190:	b500      	push	{lr}
   11192:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11194:	f7f0 fa2c 	bl	15f0 <Sys_GetCoreID>
   11198:	4603      	mov	r3, r0
   1119a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   1119c:	4a10      	ldr	r2, [pc, #64]	; (111e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1119e:	9b01      	ldr	r3, [sp, #4]
   111a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111a4:	2b00      	cmp	r3, #0
   111a6:	d10d      	bne.n	111c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111a8:	f7ef fdf8 	bl	d9c <Adc_schm_read_msr>
   111ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   111ae:	9b00      	ldr	r3, [sp, #0]
   111b0:	f003 0301 	and.w	r3, r3, #1
   111b4:	2b00      	cmp	r3, #0
   111b6:	d100      	bne.n	111ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   111b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   111ba:	490a      	ldr	r1, [pc, #40]	; (111e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   111bc:	9b01      	ldr	r3, [sp, #4]
   111be:	9a00      	ldr	r2, [sp, #0]
   111c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   111c4:	4a06      	ldr	r2, [pc, #24]	; (111e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   111c6:	9b01      	ldr	r3, [sp, #4]
   111c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111cc:	1c5a      	adds	r2, r3, #1
   111ce:	4904      	ldr	r1, [pc, #16]	; (111e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   111d0:	9b01      	ldr	r3, [sp, #4]
   111d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   111d6:	bf00      	nop
   111d8:	b003      	add	sp, #12
   111da:	f85d fb04 	ldr.w	pc, [sp], #4
   111de:	bf00      	nop
   111e0:	1fff93a4 	.word	0x1fff93a4
   111e4:	1fff93a0 	.word	0x1fff93a0

000111e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   111e8:	b500      	push	{lr}
   111ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111ec:	f7f0 fa00 	bl	15f0 <Sys_GetCoreID>
   111f0:	4603      	mov	r3, r0
   111f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   111f4:	4a0d      	ldr	r2, [pc, #52]	; (1122c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   111f6:	9b01      	ldr	r3, [sp, #4]
   111f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111fc:	1e5a      	subs	r2, r3, #1
   111fe:	490b      	ldr	r1, [pc, #44]	; (1122c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11200:	9b01      	ldr	r3, [sp, #4]
   11202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   11206:	4a0a      	ldr	r2, [pc, #40]	; (11230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   11208:	9b01      	ldr	r3, [sp, #4]
   1120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1120e:	f003 0301 	and.w	r3, r3, #1
   11212:	2b00      	cmp	r3, #0
   11214:	d106      	bne.n	11224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   11216:	4a05      	ldr	r2, [pc, #20]	; (1122c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11218:	9b01      	ldr	r3, [sp, #4]
   1121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1121e:	2b00      	cmp	r3, #0
   11220:	d100      	bne.n	11224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11222:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11224:	bf00      	nop
   11226:	b003      	add	sp, #12
   11228:	f85d fb04 	ldr.w	pc, [sp], #4
   1122c:	1fff93a4 	.word	0x1fff93a4
   11230:	1fff93a0 	.word	0x1fff93a0

00011234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   11234:	b500      	push	{lr}
   11236:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11238:	f7f0 f9da 	bl	15f0 <Sys_GetCoreID>
   1123c:	4603      	mov	r3, r0
   1123e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   11240:	4a10      	ldr	r2, [pc, #64]	; (11284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   11242:	9b01      	ldr	r3, [sp, #4]
   11244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11248:	2b00      	cmp	r3, #0
   1124a:	d10d      	bne.n	11268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1124c:	f7ef fda6 	bl	d9c <Adc_schm_read_msr>
   11250:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11252:	9b00      	ldr	r3, [sp, #0]
   11254:	f003 0301 	and.w	r3, r3, #1
   11258:	2b00      	cmp	r3, #0
   1125a:	d100      	bne.n	1125e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1125c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   1125e:	490a      	ldr	r1, [pc, #40]	; (11288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   11260:	9b01      	ldr	r3, [sp, #4]
   11262:	9a00      	ldr	r2, [sp, #0]
   11264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   11268:	4a06      	ldr	r2, [pc, #24]	; (11284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1126a:	9b01      	ldr	r3, [sp, #4]
   1126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11270:	1c5a      	adds	r2, r3, #1
   11272:	4904      	ldr	r1, [pc, #16]	; (11284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   11274:	9b01      	ldr	r3, [sp, #4]
   11276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1127a:	bf00      	nop
   1127c:	b003      	add	sp, #12
   1127e:	f85d fb04 	ldr.w	pc, [sp], #4
   11282:	bf00      	nop
   11284:	1fff93ac 	.word	0x1fff93ac
   11288:	1fff93a8 	.word	0x1fff93a8

0001128c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   1128c:	b500      	push	{lr}
   1128e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11290:	f7f0 f9ae 	bl	15f0 <Sys_GetCoreID>
   11294:	4603      	mov	r3, r0
   11296:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   11298:	4a0d      	ldr	r2, [pc, #52]	; (112d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   1129a:	9b01      	ldr	r3, [sp, #4]
   1129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112a0:	1e5a      	subs	r2, r3, #1
   112a2:	490b      	ldr	r1, [pc, #44]	; (112d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   112a4:	9b01      	ldr	r3, [sp, #4]
   112a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   112aa:	4a0a      	ldr	r2, [pc, #40]	; (112d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   112ac:	9b01      	ldr	r3, [sp, #4]
   112ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112b2:	f003 0301 	and.w	r3, r3, #1
   112b6:	2b00      	cmp	r3, #0
   112b8:	d106      	bne.n	112c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   112ba:	4a05      	ldr	r2, [pc, #20]	; (112d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   112bc:	9b01      	ldr	r3, [sp, #4]
   112be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112c2:	2b00      	cmp	r3, #0
   112c4:	d100      	bne.n	112c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   112c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   112c8:	bf00      	nop
   112ca:	b003      	add	sp, #12
   112cc:	f85d fb04 	ldr.w	pc, [sp], #4
   112d0:	1fff93ac 	.word	0x1fff93ac
   112d4:	1fff93a8 	.word	0x1fff93a8

000112d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   112d8:	b500      	push	{lr}
   112da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112dc:	f7f0 f988 	bl	15f0 <Sys_GetCoreID>
   112e0:	4603      	mov	r3, r0
   112e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   112e4:	4a10      	ldr	r2, [pc, #64]	; (11328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   112e6:	9b01      	ldr	r3, [sp, #4]
   112e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112ec:	2b00      	cmp	r3, #0
   112ee:	d10d      	bne.n	1130c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112f0:	f7ef fd54 	bl	d9c <Adc_schm_read_msr>
   112f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112f6:	9b00      	ldr	r3, [sp, #0]
   112f8:	f003 0301 	and.w	r3, r3, #1
   112fc:	2b00      	cmp	r3, #0
   112fe:	d100      	bne.n	11302 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11300:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   11302:	490a      	ldr	r1, [pc, #40]	; (1132c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   11304:	9b01      	ldr	r3, [sp, #4]
   11306:	9a00      	ldr	r2, [sp, #0]
   11308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   1130c:	4a06      	ldr	r2, [pc, #24]	; (11328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1130e:	9b01      	ldr	r3, [sp, #4]
   11310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11314:	1c5a      	adds	r2, r3, #1
   11316:	4904      	ldr	r1, [pc, #16]	; (11328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   11318:	9b01      	ldr	r3, [sp, #4]
   1131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1131e:	bf00      	nop
   11320:	b003      	add	sp, #12
   11322:	f85d fb04 	ldr.w	pc, [sp], #4
   11326:	bf00      	nop
   11328:	1fff93b4 	.word	0x1fff93b4
   1132c:	1fff93b0 	.word	0x1fff93b0

00011330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   11330:	b500      	push	{lr}
   11332:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11334:	f7f0 f95c 	bl	15f0 <Sys_GetCoreID>
   11338:	4603      	mov	r3, r0
   1133a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   1133c:	4a0d      	ldr	r2, [pc, #52]	; (11374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1133e:	9b01      	ldr	r3, [sp, #4]
   11340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11344:	1e5a      	subs	r2, r3, #1
   11346:	490b      	ldr	r1, [pc, #44]	; (11374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11348:	9b01      	ldr	r3, [sp, #4]
   1134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   1134e:	4a0a      	ldr	r2, [pc, #40]	; (11378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   11350:	9b01      	ldr	r3, [sp, #4]
   11352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11356:	f003 0301 	and.w	r3, r3, #1
   1135a:	2b00      	cmp	r3, #0
   1135c:	d106      	bne.n	1136c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   1135e:	4a05      	ldr	r2, [pc, #20]	; (11374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11360:	9b01      	ldr	r3, [sp, #4]
   11362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11366:	2b00      	cmp	r3, #0
   11368:	d100      	bne.n	1136c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1136a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1136c:	bf00      	nop
   1136e:	b003      	add	sp, #12
   11370:	f85d fb04 	ldr.w	pc, [sp], #4
   11374:	1fff93b4 	.word	0x1fff93b4
   11378:	1fff93b0 	.word	0x1fff93b0

0001137c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   1137c:	b500      	push	{lr}
   1137e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11380:	f7f0 f936 	bl	15f0 <Sys_GetCoreID>
   11384:	4603      	mov	r3, r0
   11386:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   11388:	4a10      	ldr	r2, [pc, #64]	; (113cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   1138a:	9b01      	ldr	r3, [sp, #4]
   1138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11390:	2b00      	cmp	r3, #0
   11392:	d10d      	bne.n	113b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11394:	f7ef fd02 	bl	d9c <Adc_schm_read_msr>
   11398:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1139a:	9b00      	ldr	r3, [sp, #0]
   1139c:	f003 0301 	and.w	r3, r3, #1
   113a0:	2b00      	cmp	r3, #0
   113a2:	d100      	bne.n	113a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   113a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   113a6:	490a      	ldr	r1, [pc, #40]	; (113d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   113a8:	9b01      	ldr	r3, [sp, #4]
   113aa:	9a00      	ldr	r2, [sp, #0]
   113ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   113b0:	4a06      	ldr	r2, [pc, #24]	; (113cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   113b2:	9b01      	ldr	r3, [sp, #4]
   113b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113b8:	1c5a      	adds	r2, r3, #1
   113ba:	4904      	ldr	r1, [pc, #16]	; (113cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   113bc:	9b01      	ldr	r3, [sp, #4]
   113be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113c2:	bf00      	nop
   113c4:	b003      	add	sp, #12
   113c6:	f85d fb04 	ldr.w	pc, [sp], #4
   113ca:	bf00      	nop
   113cc:	1fff93bc 	.word	0x1fff93bc
   113d0:	1fff93b8 	.word	0x1fff93b8

000113d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   113d4:	b500      	push	{lr}
   113d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113d8:	f7f0 f90a 	bl	15f0 <Sys_GetCoreID>
   113dc:	4603      	mov	r3, r0
   113de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   113e0:	4a0d      	ldr	r2, [pc, #52]	; (11418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   113e2:	9b01      	ldr	r3, [sp, #4]
   113e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113e8:	1e5a      	subs	r2, r3, #1
   113ea:	490b      	ldr	r1, [pc, #44]	; (11418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   113ec:	9b01      	ldr	r3, [sp, #4]
   113ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   113f2:	4a0a      	ldr	r2, [pc, #40]	; (1141c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   113f4:	9b01      	ldr	r3, [sp, #4]
   113f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113fa:	f003 0301 	and.w	r3, r3, #1
   113fe:	2b00      	cmp	r3, #0
   11400:	d106      	bne.n	11410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   11402:	4a05      	ldr	r2, [pc, #20]	; (11418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   11404:	9b01      	ldr	r3, [sp, #4]
   11406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1140a:	2b00      	cmp	r3, #0
   1140c:	d100      	bne.n	11410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1140e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11410:	bf00      	nop
   11412:	b003      	add	sp, #12
   11414:	f85d fb04 	ldr.w	pc, [sp], #4
   11418:	1fff93bc 	.word	0x1fff93bc
   1141c:	1fff93b8 	.word	0x1fff93b8

00011420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   11420:	b500      	push	{lr}
   11422:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11424:	f7f0 f8e4 	bl	15f0 <Sys_GetCoreID>
   11428:	4603      	mov	r3, r0
   1142a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   1142c:	4a10      	ldr	r2, [pc, #64]	; (11470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1142e:	9b01      	ldr	r3, [sp, #4]
   11430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11434:	2b00      	cmp	r3, #0
   11436:	d10d      	bne.n	11454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11438:	f7ef fcb0 	bl	d9c <Adc_schm_read_msr>
   1143c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1143e:	9b00      	ldr	r3, [sp, #0]
   11440:	f003 0301 	and.w	r3, r3, #1
   11444:	2b00      	cmp	r3, #0
   11446:	d100      	bne.n	1144a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11448:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   1144a:	490a      	ldr	r1, [pc, #40]	; (11474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   1144c:	9b01      	ldr	r3, [sp, #4]
   1144e:	9a00      	ldr	r2, [sp, #0]
   11450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   11454:	4a06      	ldr	r2, [pc, #24]	; (11470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   11456:	9b01      	ldr	r3, [sp, #4]
   11458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1145c:	1c5a      	adds	r2, r3, #1
   1145e:	4904      	ldr	r1, [pc, #16]	; (11470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   11460:	9b01      	ldr	r3, [sp, #4]
   11462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11466:	bf00      	nop
   11468:	b003      	add	sp, #12
   1146a:	f85d fb04 	ldr.w	pc, [sp], #4
   1146e:	bf00      	nop
   11470:	1fff93c4 	.word	0x1fff93c4
   11474:	1fff93c0 	.word	0x1fff93c0

00011478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   11478:	b500      	push	{lr}
   1147a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1147c:	f7f0 f8b8 	bl	15f0 <Sys_GetCoreID>
   11480:	4603      	mov	r3, r0
   11482:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   11484:	4a0d      	ldr	r2, [pc, #52]	; (114bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   11486:	9b01      	ldr	r3, [sp, #4]
   11488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1148c:	1e5a      	subs	r2, r3, #1
   1148e:	490b      	ldr	r1, [pc, #44]	; (114bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   11490:	9b01      	ldr	r3, [sp, #4]
   11492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   11496:	4a0a      	ldr	r2, [pc, #40]	; (114c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   11498:	9b01      	ldr	r3, [sp, #4]
   1149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1149e:	f003 0301 	and.w	r3, r3, #1
   114a2:	2b00      	cmp	r3, #0
   114a4:	d106      	bne.n	114b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   114a6:	4a05      	ldr	r2, [pc, #20]	; (114bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   114a8:	9b01      	ldr	r3, [sp, #4]
   114aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114ae:	2b00      	cmp	r3, #0
   114b0:	d100      	bne.n	114b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   114b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   114b4:	bf00      	nop
   114b6:	b003      	add	sp, #12
   114b8:	f85d fb04 	ldr.w	pc, [sp], #4
   114bc:	1fff93c4 	.word	0x1fff93c4
   114c0:	1fff93c0 	.word	0x1fff93c0

000114c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   114c4:	b500      	push	{lr}
   114c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114c8:	f7f0 f892 	bl	15f0 <Sys_GetCoreID>
   114cc:	4603      	mov	r3, r0
   114ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   114d0:	4a10      	ldr	r2, [pc, #64]	; (11514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   114d2:	9b01      	ldr	r3, [sp, #4]
   114d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114d8:	2b00      	cmp	r3, #0
   114da:	d10d      	bne.n	114f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   114dc:	f7ef fc5e 	bl	d9c <Adc_schm_read_msr>
   114e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   114e2:	9b00      	ldr	r3, [sp, #0]
   114e4:	f003 0301 	and.w	r3, r3, #1
   114e8:	2b00      	cmp	r3, #0
   114ea:	d100      	bne.n	114ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   114ee:	490a      	ldr	r1, [pc, #40]	; (11518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   114f0:	9b01      	ldr	r3, [sp, #4]
   114f2:	9a00      	ldr	r2, [sp, #0]
   114f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   114f8:	4a06      	ldr	r2, [pc, #24]	; (11514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   114fa:	9b01      	ldr	r3, [sp, #4]
   114fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11500:	1c5a      	adds	r2, r3, #1
   11502:	4904      	ldr	r1, [pc, #16]	; (11514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   11504:	9b01      	ldr	r3, [sp, #4]
   11506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1150a:	bf00      	nop
   1150c:	b003      	add	sp, #12
   1150e:	f85d fb04 	ldr.w	pc, [sp], #4
   11512:	bf00      	nop
   11514:	1fff93cc 	.word	0x1fff93cc
   11518:	1fff93c8 	.word	0x1fff93c8

0001151c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   1151c:	b500      	push	{lr}
   1151e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11520:	f7f0 f866 	bl	15f0 <Sys_GetCoreID>
   11524:	4603      	mov	r3, r0
   11526:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   11528:	4a0d      	ldr	r2, [pc, #52]	; (11560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1152a:	9b01      	ldr	r3, [sp, #4]
   1152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11530:	1e5a      	subs	r2, r3, #1
   11532:	490b      	ldr	r1, [pc, #44]	; (11560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   11534:	9b01      	ldr	r3, [sp, #4]
   11536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   1153a:	4a0a      	ldr	r2, [pc, #40]	; (11564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   1153c:	9b01      	ldr	r3, [sp, #4]
   1153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11542:	f003 0301 	and.w	r3, r3, #1
   11546:	2b00      	cmp	r3, #0
   11548:	d106      	bne.n	11558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   1154a:	4a05      	ldr	r2, [pc, #20]	; (11560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1154c:	9b01      	ldr	r3, [sp, #4]
   1154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11552:	2b00      	cmp	r3, #0
   11554:	d100      	bne.n	11558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11556:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11558:	bf00      	nop
   1155a:	b003      	add	sp, #12
   1155c:	f85d fb04 	ldr.w	pc, [sp], #4
   11560:	1fff93cc 	.word	0x1fff93cc
   11564:	1fff93c8 	.word	0x1fff93c8

00011568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   11568:	b500      	push	{lr}
   1156a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1156c:	f7f0 f840 	bl	15f0 <Sys_GetCoreID>
   11570:	4603      	mov	r3, r0
   11572:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   11574:	4a10      	ldr	r2, [pc, #64]	; (115b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   11576:	9b01      	ldr	r3, [sp, #4]
   11578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1157c:	2b00      	cmp	r3, #0
   1157e:	d10d      	bne.n	1159c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11580:	f7ef fc0c 	bl	d9c <Adc_schm_read_msr>
   11584:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11586:	9b00      	ldr	r3, [sp, #0]
   11588:	f003 0301 	and.w	r3, r3, #1
   1158c:	2b00      	cmp	r3, #0
   1158e:	d100      	bne.n	11592 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11590:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   11592:	490a      	ldr	r1, [pc, #40]	; (115bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   11594:	9b01      	ldr	r3, [sp, #4]
   11596:	9a00      	ldr	r2, [sp, #0]
   11598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   1159c:	4a06      	ldr	r2, [pc, #24]	; (115b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1159e:	9b01      	ldr	r3, [sp, #4]
   115a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115a4:	1c5a      	adds	r2, r3, #1
   115a6:	4904      	ldr	r1, [pc, #16]	; (115b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   115a8:	9b01      	ldr	r3, [sp, #4]
   115aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115ae:	bf00      	nop
   115b0:	b003      	add	sp, #12
   115b2:	f85d fb04 	ldr.w	pc, [sp], #4
   115b6:	bf00      	nop
   115b8:	1fff93d4 	.word	0x1fff93d4
   115bc:	1fff93d0 	.word	0x1fff93d0

000115c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   115c0:	b500      	push	{lr}
   115c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115c4:	f7f0 f814 	bl	15f0 <Sys_GetCoreID>
   115c8:	4603      	mov	r3, r0
   115ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   115cc:	4a0d      	ldr	r2, [pc, #52]	; (11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   115ce:	9b01      	ldr	r3, [sp, #4]
   115d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d4:	1e5a      	subs	r2, r3, #1
   115d6:	490b      	ldr	r1, [pc, #44]	; (11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   115d8:	9b01      	ldr	r3, [sp, #4]
   115da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   115de:	4a0a      	ldr	r2, [pc, #40]	; (11608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   115e0:	9b01      	ldr	r3, [sp, #4]
   115e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115e6:	f003 0301 	and.w	r3, r3, #1
   115ea:	2b00      	cmp	r3, #0
   115ec:	d106      	bne.n	115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   115ee:	4a05      	ldr	r2, [pc, #20]	; (11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   115f0:	9b01      	ldr	r3, [sp, #4]
   115f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115f6:	2b00      	cmp	r3, #0
   115f8:	d100      	bne.n	115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115fc:	bf00      	nop
   115fe:	b003      	add	sp, #12
   11600:	f85d fb04 	ldr.w	pc, [sp], #4
   11604:	1fff93d4 	.word	0x1fff93d4
   11608:	1fff93d0 	.word	0x1fff93d0

0001160c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   1160c:	b500      	push	{lr}
   1160e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11610:	f7ef ffee 	bl	15f0 <Sys_GetCoreID>
   11614:	4603      	mov	r3, r0
   11616:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   11618:	4a10      	ldr	r2, [pc, #64]	; (1165c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1161a:	9b01      	ldr	r3, [sp, #4]
   1161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11620:	2b00      	cmp	r3, #0
   11622:	d10d      	bne.n	11640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11624:	f7ef fbba 	bl	d9c <Adc_schm_read_msr>
   11628:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1162a:	9b00      	ldr	r3, [sp, #0]
   1162c:	f003 0301 	and.w	r3, r3, #1
   11630:	2b00      	cmp	r3, #0
   11632:	d100      	bne.n	11636 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11634:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   11636:	490a      	ldr	r1, [pc, #40]	; (11660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   11638:	9b01      	ldr	r3, [sp, #4]
   1163a:	9a00      	ldr	r2, [sp, #0]
   1163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   11640:	4a06      	ldr	r2, [pc, #24]	; (1165c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   11642:	9b01      	ldr	r3, [sp, #4]
   11644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11648:	1c5a      	adds	r2, r3, #1
   1164a:	4904      	ldr	r1, [pc, #16]	; (1165c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1164c:	9b01      	ldr	r3, [sp, #4]
   1164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11652:	bf00      	nop
   11654:	b003      	add	sp, #12
   11656:	f85d fb04 	ldr.w	pc, [sp], #4
   1165a:	bf00      	nop
   1165c:	1fff93dc 	.word	0x1fff93dc
   11660:	1fff93d8 	.word	0x1fff93d8

00011664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   11664:	b500      	push	{lr}
   11666:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11668:	f7ef ffc2 	bl	15f0 <Sys_GetCoreID>
   1166c:	4603      	mov	r3, r0
   1166e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   11670:	4a0d      	ldr	r2, [pc, #52]	; (116a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   11672:	9b01      	ldr	r3, [sp, #4]
   11674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11678:	1e5a      	subs	r2, r3, #1
   1167a:	490b      	ldr	r1, [pc, #44]	; (116a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   1167c:	9b01      	ldr	r3, [sp, #4]
   1167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   11682:	4a0a      	ldr	r2, [pc, #40]	; (116ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   11684:	9b01      	ldr	r3, [sp, #4]
   11686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1168a:	f003 0301 	and.w	r3, r3, #1
   1168e:	2b00      	cmp	r3, #0
   11690:	d106      	bne.n	116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   11692:	4a05      	ldr	r2, [pc, #20]	; (116a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   11694:	9b01      	ldr	r3, [sp, #4]
   11696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1169a:	2b00      	cmp	r3, #0
   1169c:	d100      	bne.n	116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1169e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116a0:	bf00      	nop
   116a2:	b003      	add	sp, #12
   116a4:	f85d fb04 	ldr.w	pc, [sp], #4
   116a8:	1fff93dc 	.word	0x1fff93dc
   116ac:	1fff93d8 	.word	0x1fff93d8

000116b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   116b0:	b500      	push	{lr}
   116b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116b4:	f7ef ff9c 	bl	15f0 <Sys_GetCoreID>
   116b8:	4603      	mov	r3, r0
   116ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   116bc:	4a10      	ldr	r2, [pc, #64]	; (11700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   116be:	9b01      	ldr	r3, [sp, #4]
   116c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116c4:	2b00      	cmp	r3, #0
   116c6:	d10d      	bne.n	116e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116c8:	f7ef fb68 	bl	d9c <Adc_schm_read_msr>
   116cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   116ce:	9b00      	ldr	r3, [sp, #0]
   116d0:	f003 0301 	and.w	r3, r3, #1
   116d4:	2b00      	cmp	r3, #0
   116d6:	d100      	bne.n	116da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   116d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   116da:	490a      	ldr	r1, [pc, #40]	; (11704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   116dc:	9b01      	ldr	r3, [sp, #4]
   116de:	9a00      	ldr	r2, [sp, #0]
   116e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   116e4:	4a06      	ldr	r2, [pc, #24]	; (11700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   116e6:	9b01      	ldr	r3, [sp, #4]
   116e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116ec:	1c5a      	adds	r2, r3, #1
   116ee:	4904      	ldr	r1, [pc, #16]	; (11700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   116f0:	9b01      	ldr	r3, [sp, #4]
   116f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116f6:	bf00      	nop
   116f8:	b003      	add	sp, #12
   116fa:	f85d fb04 	ldr.w	pc, [sp], #4
   116fe:	bf00      	nop
   11700:	1fff93e4 	.word	0x1fff93e4
   11704:	1fff93e0 	.word	0x1fff93e0

00011708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   11708:	b500      	push	{lr}
   1170a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1170c:	f7ef ff70 	bl	15f0 <Sys_GetCoreID>
   11710:	4603      	mov	r3, r0
   11712:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   11714:	4a0d      	ldr	r2, [pc, #52]	; (1174c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11716:	9b01      	ldr	r3, [sp, #4]
   11718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1171c:	1e5a      	subs	r2, r3, #1
   1171e:	490b      	ldr	r1, [pc, #44]	; (1174c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11720:	9b01      	ldr	r3, [sp, #4]
   11722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   11726:	4a0a      	ldr	r2, [pc, #40]	; (11750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   11728:	9b01      	ldr	r3, [sp, #4]
   1172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1172e:	f003 0301 	and.w	r3, r3, #1
   11732:	2b00      	cmp	r3, #0
   11734:	d106      	bne.n	11744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   11736:	4a05      	ldr	r2, [pc, #20]	; (1174c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11738:	9b01      	ldr	r3, [sp, #4]
   1173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1173e:	2b00      	cmp	r3, #0
   11740:	d100      	bne.n	11744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11742:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11744:	bf00      	nop
   11746:	b003      	add	sp, #12
   11748:	f85d fb04 	ldr.w	pc, [sp], #4
   1174c:	1fff93e4 	.word	0x1fff93e4
   11750:	1fff93e0 	.word	0x1fff93e0

00011754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   11754:	b500      	push	{lr}
   11756:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11758:	f7ef ff4a 	bl	15f0 <Sys_GetCoreID>
   1175c:	4603      	mov	r3, r0
   1175e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   11760:	4a10      	ldr	r2, [pc, #64]	; (117a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   11762:	9b01      	ldr	r3, [sp, #4]
   11764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11768:	2b00      	cmp	r3, #0
   1176a:	d10d      	bne.n	11788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1176c:	f7ef fb16 	bl	d9c <Adc_schm_read_msr>
   11770:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11772:	9b00      	ldr	r3, [sp, #0]
   11774:	f003 0301 	and.w	r3, r3, #1
   11778:	2b00      	cmp	r3, #0
   1177a:	d100      	bne.n	1177e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1177c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   1177e:	490a      	ldr	r1, [pc, #40]	; (117a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   11780:	9b01      	ldr	r3, [sp, #4]
   11782:	9a00      	ldr	r2, [sp, #0]
   11784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   11788:	4a06      	ldr	r2, [pc, #24]	; (117a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1178a:	9b01      	ldr	r3, [sp, #4]
   1178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11790:	1c5a      	adds	r2, r3, #1
   11792:	4904      	ldr	r1, [pc, #16]	; (117a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   11794:	9b01      	ldr	r3, [sp, #4]
   11796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1179a:	bf00      	nop
   1179c:	b003      	add	sp, #12
   1179e:	f85d fb04 	ldr.w	pc, [sp], #4
   117a2:	bf00      	nop
   117a4:	1fff93ec 	.word	0x1fff93ec
   117a8:	1fff93e8 	.word	0x1fff93e8

000117ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   117ac:	b500      	push	{lr}
   117ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117b0:	f7ef ff1e 	bl	15f0 <Sys_GetCoreID>
   117b4:	4603      	mov	r3, r0
   117b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   117b8:	4a0d      	ldr	r2, [pc, #52]	; (117f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   117ba:	9b01      	ldr	r3, [sp, #4]
   117bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117c0:	1e5a      	subs	r2, r3, #1
   117c2:	490b      	ldr	r1, [pc, #44]	; (117f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   117c4:	9b01      	ldr	r3, [sp, #4]
   117c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   117ca:	4a0a      	ldr	r2, [pc, #40]	; (117f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   117cc:	9b01      	ldr	r3, [sp, #4]
   117ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117d2:	f003 0301 	and.w	r3, r3, #1
   117d6:	2b00      	cmp	r3, #0
   117d8:	d106      	bne.n	117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   117da:	4a05      	ldr	r2, [pc, #20]	; (117f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   117dc:	9b01      	ldr	r3, [sp, #4]
   117de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117e2:	2b00      	cmp	r3, #0
   117e4:	d100      	bne.n	117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117e8:	bf00      	nop
   117ea:	b003      	add	sp, #12
   117ec:	f85d fb04 	ldr.w	pc, [sp], #4
   117f0:	1fff93ec 	.word	0x1fff93ec
   117f4:	1fff93e8 	.word	0x1fff93e8

000117f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   117f8:	b500      	push	{lr}
   117fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117fc:	f7ef fef8 	bl	15f0 <Sys_GetCoreID>
   11800:	4603      	mov	r3, r0
   11802:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   11804:	4a10      	ldr	r2, [pc, #64]	; (11848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11806:	9b01      	ldr	r3, [sp, #4]
   11808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1180c:	2b00      	cmp	r3, #0
   1180e:	d10d      	bne.n	1182c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11810:	f7ef fac4 	bl	d9c <Adc_schm_read_msr>
   11814:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11816:	9b00      	ldr	r3, [sp, #0]
   11818:	f003 0301 	and.w	r3, r3, #1
   1181c:	2b00      	cmp	r3, #0
   1181e:	d100      	bne.n	11822 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11820:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   11822:	490a      	ldr	r1, [pc, #40]	; (1184c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   11824:	9b01      	ldr	r3, [sp, #4]
   11826:	9a00      	ldr	r2, [sp, #0]
   11828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   1182c:	4a06      	ldr	r2, [pc, #24]	; (11848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1182e:	9b01      	ldr	r3, [sp, #4]
   11830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11834:	1c5a      	adds	r2, r3, #1
   11836:	4904      	ldr	r1, [pc, #16]	; (11848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11838:	9b01      	ldr	r3, [sp, #4]
   1183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1183e:	bf00      	nop
   11840:	b003      	add	sp, #12
   11842:	f85d fb04 	ldr.w	pc, [sp], #4
   11846:	bf00      	nop
   11848:	1fff93f4 	.word	0x1fff93f4
   1184c:	1fff93f0 	.word	0x1fff93f0

00011850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   11850:	b500      	push	{lr}
   11852:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11854:	f7ef fecc 	bl	15f0 <Sys_GetCoreID>
   11858:	4603      	mov	r3, r0
   1185a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   1185c:	4a0d      	ldr	r2, [pc, #52]	; (11894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1185e:	9b01      	ldr	r3, [sp, #4]
   11860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11864:	1e5a      	subs	r2, r3, #1
   11866:	490b      	ldr	r1, [pc, #44]	; (11894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11868:	9b01      	ldr	r3, [sp, #4]
   1186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   1186e:	4a0a      	ldr	r2, [pc, #40]	; (11898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   11870:	9b01      	ldr	r3, [sp, #4]
   11872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11876:	f003 0301 	and.w	r3, r3, #1
   1187a:	2b00      	cmp	r3, #0
   1187c:	d106      	bne.n	1188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   1187e:	4a05      	ldr	r2, [pc, #20]	; (11894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11880:	9b01      	ldr	r3, [sp, #4]
   11882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11886:	2b00      	cmp	r3, #0
   11888:	d100      	bne.n	1188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1188a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1188c:	bf00      	nop
   1188e:	b003      	add	sp, #12
   11890:	f85d fb04 	ldr.w	pc, [sp], #4
   11894:	1fff93f4 	.word	0x1fff93f4
   11898:	1fff93f0 	.word	0x1fff93f0

0001189c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   1189c:	b500      	push	{lr}
   1189e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118a0:	f7ef fea6 	bl	15f0 <Sys_GetCoreID>
   118a4:	4603      	mov	r3, r0
   118a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   118a8:	4a10      	ldr	r2, [pc, #64]	; (118ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   118aa:	9b01      	ldr	r3, [sp, #4]
   118ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b0:	2b00      	cmp	r3, #0
   118b2:	d10d      	bne.n	118d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118b4:	f7ef fa72 	bl	d9c <Adc_schm_read_msr>
   118b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118ba:	9b00      	ldr	r3, [sp, #0]
   118bc:	f003 0301 	and.w	r3, r3, #1
   118c0:	2b00      	cmp	r3, #0
   118c2:	d100      	bne.n	118c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   118c6:	490a      	ldr	r1, [pc, #40]	; (118f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   118c8:	9b01      	ldr	r3, [sp, #4]
   118ca:	9a00      	ldr	r2, [sp, #0]
   118cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   118d0:	4a06      	ldr	r2, [pc, #24]	; (118ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   118d2:	9b01      	ldr	r3, [sp, #4]
   118d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118d8:	1c5a      	adds	r2, r3, #1
   118da:	4904      	ldr	r1, [pc, #16]	; (118ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   118dc:	9b01      	ldr	r3, [sp, #4]
   118de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118e2:	bf00      	nop
   118e4:	b003      	add	sp, #12
   118e6:	f85d fb04 	ldr.w	pc, [sp], #4
   118ea:	bf00      	nop
   118ec:	1fff93fc 	.word	0x1fff93fc
   118f0:	1fff93f8 	.word	0x1fff93f8

000118f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   118f4:	b500      	push	{lr}
   118f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118f8:	f7ef fe7a 	bl	15f0 <Sys_GetCoreID>
   118fc:	4603      	mov	r3, r0
   118fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   11900:	4a0d      	ldr	r2, [pc, #52]	; (11938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11902:	9b01      	ldr	r3, [sp, #4]
   11904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11908:	1e5a      	subs	r2, r3, #1
   1190a:	490b      	ldr	r1, [pc, #44]	; (11938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   1190c:	9b01      	ldr	r3, [sp, #4]
   1190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   11912:	4a0a      	ldr	r2, [pc, #40]	; (1193c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   11914:	9b01      	ldr	r3, [sp, #4]
   11916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1191a:	f003 0301 	and.w	r3, r3, #1
   1191e:	2b00      	cmp	r3, #0
   11920:	d106      	bne.n	11930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   11922:	4a05      	ldr	r2, [pc, #20]	; (11938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11924:	9b01      	ldr	r3, [sp, #4]
   11926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1192a:	2b00      	cmp	r3, #0
   1192c:	d100      	bne.n	11930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1192e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11930:	bf00      	nop
   11932:	b003      	add	sp, #12
   11934:	f85d fb04 	ldr.w	pc, [sp], #4
   11938:	1fff93fc 	.word	0x1fff93fc
   1193c:	1fff93f8 	.word	0x1fff93f8

00011940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11940:	b500      	push	{lr}
   11942:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11944:	f7ef fe54 	bl	15f0 <Sys_GetCoreID>
   11948:	4603      	mov	r3, r0
   1194a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   1194c:	4a10      	ldr	r2, [pc, #64]	; (11990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1194e:	9b01      	ldr	r3, [sp, #4]
   11950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11954:	2b00      	cmp	r3, #0
   11956:	d10d      	bne.n	11974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11958:	f7ef fa20 	bl	d9c <Adc_schm_read_msr>
   1195c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1195e:	9b00      	ldr	r3, [sp, #0]
   11960:	f003 0301 	and.w	r3, r3, #1
   11964:	2b00      	cmp	r3, #0
   11966:	d100      	bne.n	1196a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11968:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   1196a:	490a      	ldr	r1, [pc, #40]	; (11994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   1196c:	9b01      	ldr	r3, [sp, #4]
   1196e:	9a00      	ldr	r2, [sp, #0]
   11970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   11974:	4a06      	ldr	r2, [pc, #24]	; (11990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11976:	9b01      	ldr	r3, [sp, #4]
   11978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1197c:	1c5a      	adds	r2, r3, #1
   1197e:	4904      	ldr	r1, [pc, #16]	; (11990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11980:	9b01      	ldr	r3, [sp, #4]
   11982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11986:	bf00      	nop
   11988:	b003      	add	sp, #12
   1198a:	f85d fb04 	ldr.w	pc, [sp], #4
   1198e:	bf00      	nop
   11990:	1fff9404 	.word	0x1fff9404
   11994:	1fff9400 	.word	0x1fff9400

00011998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11998:	b500      	push	{lr}
   1199a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1199c:	f7ef fe28 	bl	15f0 <Sys_GetCoreID>
   119a0:	4603      	mov	r3, r0
   119a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   119a4:	4a0d      	ldr	r2, [pc, #52]	; (119dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   119a6:	9b01      	ldr	r3, [sp, #4]
   119a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119ac:	1e5a      	subs	r2, r3, #1
   119ae:	490b      	ldr	r1, [pc, #44]	; (119dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   119b0:	9b01      	ldr	r3, [sp, #4]
   119b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   119b6:	4a0a      	ldr	r2, [pc, #40]	; (119e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   119b8:	9b01      	ldr	r3, [sp, #4]
   119ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119be:	f003 0301 	and.w	r3, r3, #1
   119c2:	2b00      	cmp	r3, #0
   119c4:	d106      	bne.n	119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   119c6:	4a05      	ldr	r2, [pc, #20]	; (119dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   119c8:	9b01      	ldr	r3, [sp, #4]
   119ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119ce:	2b00      	cmp	r3, #0
   119d0:	d100      	bne.n	119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   119d4:	bf00      	nop
   119d6:	b003      	add	sp, #12
   119d8:	f85d fb04 	ldr.w	pc, [sp], #4
   119dc:	1fff9404 	.word	0x1fff9404
   119e0:	1fff9400 	.word	0x1fff9400

000119e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   119e4:	b500      	push	{lr}
   119e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119e8:	f7ef fe02 	bl	15f0 <Sys_GetCoreID>
   119ec:	4603      	mov	r3, r0
   119ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   119f0:	4a10      	ldr	r2, [pc, #64]	; (11a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   119f2:	9b01      	ldr	r3, [sp, #4]
   119f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119f8:	2b00      	cmp	r3, #0
   119fa:	d10d      	bne.n	11a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119fc:	f7ef f9ce 	bl	d9c <Adc_schm_read_msr>
   11a00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a02:	9b00      	ldr	r3, [sp, #0]
   11a04:	f003 0301 	and.w	r3, r3, #1
   11a08:	2b00      	cmp	r3, #0
   11a0a:	d100      	bne.n	11a0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   11a0e:	490a      	ldr	r1, [pc, #40]	; (11a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   11a10:	9b01      	ldr	r3, [sp, #4]
   11a12:	9a00      	ldr	r2, [sp, #0]
   11a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   11a18:	4a06      	ldr	r2, [pc, #24]	; (11a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11a1a:	9b01      	ldr	r3, [sp, #4]
   11a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a20:	1c5a      	adds	r2, r3, #1
   11a22:	4904      	ldr	r1, [pc, #16]	; (11a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11a24:	9b01      	ldr	r3, [sp, #4]
   11a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a2a:	bf00      	nop
   11a2c:	b003      	add	sp, #12
   11a2e:	f85d fb04 	ldr.w	pc, [sp], #4
   11a32:	bf00      	nop
   11a34:	1fff940c 	.word	0x1fff940c
   11a38:	1fff9408 	.word	0x1fff9408

00011a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   11a3c:	b500      	push	{lr}
   11a3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a40:	f7ef fdd6 	bl	15f0 <Sys_GetCoreID>
   11a44:	4603      	mov	r3, r0
   11a46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   11a48:	4a0d      	ldr	r2, [pc, #52]	; (11a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11a4a:	9b01      	ldr	r3, [sp, #4]
   11a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a50:	1e5a      	subs	r2, r3, #1
   11a52:	490b      	ldr	r1, [pc, #44]	; (11a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11a54:	9b01      	ldr	r3, [sp, #4]
   11a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   11a5a:	4a0a      	ldr	r2, [pc, #40]	; (11a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   11a5c:	9b01      	ldr	r3, [sp, #4]
   11a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a62:	f003 0301 	and.w	r3, r3, #1
   11a66:	2b00      	cmp	r3, #0
   11a68:	d106      	bne.n	11a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   11a6a:	4a05      	ldr	r2, [pc, #20]	; (11a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11a6c:	9b01      	ldr	r3, [sp, #4]
   11a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a72:	2b00      	cmp	r3, #0
   11a74:	d100      	bne.n	11a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a78:	bf00      	nop
   11a7a:	b003      	add	sp, #12
   11a7c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a80:	1fff940c 	.word	0x1fff940c
   11a84:	1fff9408 	.word	0x1fff9408

00011a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11a88:	b500      	push	{lr}
   11a8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a8c:	f7ef fdb0 	bl	15f0 <Sys_GetCoreID>
   11a90:	4603      	mov	r3, r0
   11a92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   11a94:	4a10      	ldr	r2, [pc, #64]	; (11ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11a96:	9b01      	ldr	r3, [sp, #4]
   11a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a9c:	2b00      	cmp	r3, #0
   11a9e:	d10d      	bne.n	11abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11aa0:	f7ef f97c 	bl	d9c <Adc_schm_read_msr>
   11aa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11aa6:	9b00      	ldr	r3, [sp, #0]
   11aa8:	f003 0301 	and.w	r3, r3, #1
   11aac:	2b00      	cmp	r3, #0
   11aae:	d100      	bne.n	11ab2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ab0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   11ab2:	490a      	ldr	r1, [pc, #40]	; (11adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   11ab4:	9b01      	ldr	r3, [sp, #4]
   11ab6:	9a00      	ldr	r2, [sp, #0]
   11ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   11abc:	4a06      	ldr	r2, [pc, #24]	; (11ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11abe:	9b01      	ldr	r3, [sp, #4]
   11ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ac4:	1c5a      	adds	r2, r3, #1
   11ac6:	4904      	ldr	r1, [pc, #16]	; (11ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11ac8:	9b01      	ldr	r3, [sp, #4]
   11aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ace:	bf00      	nop
   11ad0:	b003      	add	sp, #12
   11ad2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ad6:	bf00      	nop
   11ad8:	1fff9414 	.word	0x1fff9414
   11adc:	1fff9410 	.word	0x1fff9410

00011ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11ae0:	b500      	push	{lr}
   11ae2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ae4:	f7ef fd84 	bl	15f0 <Sys_GetCoreID>
   11ae8:	4603      	mov	r3, r0
   11aea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   11aec:	4a0d      	ldr	r2, [pc, #52]	; (11b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11aee:	9b01      	ldr	r3, [sp, #4]
   11af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af4:	1e5a      	subs	r2, r3, #1
   11af6:	490b      	ldr	r1, [pc, #44]	; (11b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11af8:	9b01      	ldr	r3, [sp, #4]
   11afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   11afe:	4a0a      	ldr	r2, [pc, #40]	; (11b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   11b00:	9b01      	ldr	r3, [sp, #4]
   11b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b06:	f003 0301 	and.w	r3, r3, #1
   11b0a:	2b00      	cmp	r3, #0
   11b0c:	d106      	bne.n	11b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   11b0e:	4a05      	ldr	r2, [pc, #20]	; (11b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11b10:	9b01      	ldr	r3, [sp, #4]
   11b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b16:	2b00      	cmp	r3, #0
   11b18:	d100      	bne.n	11b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b1c:	bf00      	nop
   11b1e:	b003      	add	sp, #12
   11b20:	f85d fb04 	ldr.w	pc, [sp], #4
   11b24:	1fff9414 	.word	0x1fff9414
   11b28:	1fff9410 	.word	0x1fff9410

00011b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11b2c:	b500      	push	{lr}
   11b2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b30:	f7ef fd5e 	bl	15f0 <Sys_GetCoreID>
   11b34:	4603      	mov	r3, r0
   11b36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   11b38:	4a10      	ldr	r2, [pc, #64]	; (11b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11b3a:	9b01      	ldr	r3, [sp, #4]
   11b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b40:	2b00      	cmp	r3, #0
   11b42:	d10d      	bne.n	11b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b44:	f7ef f92a 	bl	d9c <Adc_schm_read_msr>
   11b48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b4a:	9b00      	ldr	r3, [sp, #0]
   11b4c:	f003 0301 	and.w	r3, r3, #1
   11b50:	2b00      	cmp	r3, #0
   11b52:	d100      	bne.n	11b56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   11b56:	490a      	ldr	r1, [pc, #40]	; (11b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   11b58:	9b01      	ldr	r3, [sp, #4]
   11b5a:	9a00      	ldr	r2, [sp, #0]
   11b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   11b60:	4a06      	ldr	r2, [pc, #24]	; (11b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11b62:	9b01      	ldr	r3, [sp, #4]
   11b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b68:	1c5a      	adds	r2, r3, #1
   11b6a:	4904      	ldr	r1, [pc, #16]	; (11b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11b6c:	9b01      	ldr	r3, [sp, #4]
   11b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b72:	bf00      	nop
   11b74:	b003      	add	sp, #12
   11b76:	f85d fb04 	ldr.w	pc, [sp], #4
   11b7a:	bf00      	nop
   11b7c:	1fff941c 	.word	0x1fff941c
   11b80:	1fff9418 	.word	0x1fff9418

00011b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11b84:	b500      	push	{lr}
   11b86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b88:	f7ef fd32 	bl	15f0 <Sys_GetCoreID>
   11b8c:	4603      	mov	r3, r0
   11b8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   11b90:	4a0d      	ldr	r2, [pc, #52]	; (11bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11b92:	9b01      	ldr	r3, [sp, #4]
   11b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b98:	1e5a      	subs	r2, r3, #1
   11b9a:	490b      	ldr	r1, [pc, #44]	; (11bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11b9c:	9b01      	ldr	r3, [sp, #4]
   11b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   11ba2:	4a0a      	ldr	r2, [pc, #40]	; (11bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   11ba4:	9b01      	ldr	r3, [sp, #4]
   11ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11baa:	f003 0301 	and.w	r3, r3, #1
   11bae:	2b00      	cmp	r3, #0
   11bb0:	d106      	bne.n	11bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   11bb2:	4a05      	ldr	r2, [pc, #20]	; (11bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11bb4:	9b01      	ldr	r3, [sp, #4]
   11bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bba:	2b00      	cmp	r3, #0
   11bbc:	d100      	bne.n	11bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bc0:	bf00      	nop
   11bc2:	b003      	add	sp, #12
   11bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   11bc8:	1fff941c 	.word	0x1fff941c
   11bcc:	1fff9418 	.word	0x1fff9418

00011bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11bd0:	b500      	push	{lr}
   11bd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bd4:	f7ef fd0c 	bl	15f0 <Sys_GetCoreID>
   11bd8:	4603      	mov	r3, r0
   11bda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   11bdc:	4a10      	ldr	r2, [pc, #64]	; (11c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11bde:	9b01      	ldr	r3, [sp, #4]
   11be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11be4:	2b00      	cmp	r3, #0
   11be6:	d10d      	bne.n	11c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11be8:	f7ef f8d8 	bl	d9c <Adc_schm_read_msr>
   11bec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11bee:	9b00      	ldr	r3, [sp, #0]
   11bf0:	f003 0301 	and.w	r3, r3, #1
   11bf4:	2b00      	cmp	r3, #0
   11bf6:	d100      	bne.n	11bfa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   11bfa:	490a      	ldr	r1, [pc, #40]	; (11c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   11bfc:	9b01      	ldr	r3, [sp, #4]
   11bfe:	9a00      	ldr	r2, [sp, #0]
   11c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   11c04:	4a06      	ldr	r2, [pc, #24]	; (11c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11c06:	9b01      	ldr	r3, [sp, #4]
   11c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c0c:	1c5a      	adds	r2, r3, #1
   11c0e:	4904      	ldr	r1, [pc, #16]	; (11c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11c10:	9b01      	ldr	r3, [sp, #4]
   11c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c16:	bf00      	nop
   11c18:	b003      	add	sp, #12
   11c1a:	f85d fb04 	ldr.w	pc, [sp], #4
   11c1e:	bf00      	nop
   11c20:	1fff9424 	.word	0x1fff9424
   11c24:	1fff9420 	.word	0x1fff9420

00011c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11c28:	b500      	push	{lr}
   11c2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c2c:	f7ef fce0 	bl	15f0 <Sys_GetCoreID>
   11c30:	4603      	mov	r3, r0
   11c32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   11c34:	4a0d      	ldr	r2, [pc, #52]	; (11c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11c36:	9b01      	ldr	r3, [sp, #4]
   11c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c3c:	1e5a      	subs	r2, r3, #1
   11c3e:	490b      	ldr	r1, [pc, #44]	; (11c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11c40:	9b01      	ldr	r3, [sp, #4]
   11c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   11c46:	4a0a      	ldr	r2, [pc, #40]	; (11c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   11c48:	9b01      	ldr	r3, [sp, #4]
   11c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c4e:	f003 0301 	and.w	r3, r3, #1
   11c52:	2b00      	cmp	r3, #0
   11c54:	d106      	bne.n	11c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   11c56:	4a05      	ldr	r2, [pc, #20]	; (11c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11c58:	9b01      	ldr	r3, [sp, #4]
   11c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c5e:	2b00      	cmp	r3, #0
   11c60:	d100      	bne.n	11c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c64:	bf00      	nop
   11c66:	b003      	add	sp, #12
   11c68:	f85d fb04 	ldr.w	pc, [sp], #4
   11c6c:	1fff9424 	.word	0x1fff9424
   11c70:	1fff9420 	.word	0x1fff9420

00011c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11c74:	b500      	push	{lr}
   11c76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c78:	f7ef fcba 	bl	15f0 <Sys_GetCoreID>
   11c7c:	4603      	mov	r3, r0
   11c7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   11c80:	4a10      	ldr	r2, [pc, #64]	; (11cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11c82:	9b01      	ldr	r3, [sp, #4]
   11c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c88:	2b00      	cmp	r3, #0
   11c8a:	d10d      	bne.n	11ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c8c:	f7ef f886 	bl	d9c <Adc_schm_read_msr>
   11c90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c92:	9b00      	ldr	r3, [sp, #0]
   11c94:	f003 0301 	and.w	r3, r3, #1
   11c98:	2b00      	cmp	r3, #0
   11c9a:	d100      	bne.n	11c9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   11c9e:	490a      	ldr	r1, [pc, #40]	; (11cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   11ca0:	9b01      	ldr	r3, [sp, #4]
   11ca2:	9a00      	ldr	r2, [sp, #0]
   11ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   11ca8:	4a06      	ldr	r2, [pc, #24]	; (11cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11caa:	9b01      	ldr	r3, [sp, #4]
   11cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cb0:	1c5a      	adds	r2, r3, #1
   11cb2:	4904      	ldr	r1, [pc, #16]	; (11cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11cb4:	9b01      	ldr	r3, [sp, #4]
   11cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cba:	bf00      	nop
   11cbc:	b003      	add	sp, #12
   11cbe:	f85d fb04 	ldr.w	pc, [sp], #4
   11cc2:	bf00      	nop
   11cc4:	1fff942c 	.word	0x1fff942c
   11cc8:	1fff9428 	.word	0x1fff9428

00011ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11ccc:	b500      	push	{lr}
   11cce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cd0:	f7ef fc8e 	bl	15f0 <Sys_GetCoreID>
   11cd4:	4603      	mov	r3, r0
   11cd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   11cd8:	4a0d      	ldr	r2, [pc, #52]	; (11d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11cda:	9b01      	ldr	r3, [sp, #4]
   11cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ce0:	1e5a      	subs	r2, r3, #1
   11ce2:	490b      	ldr	r1, [pc, #44]	; (11d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11ce4:	9b01      	ldr	r3, [sp, #4]
   11ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   11cea:	4a0a      	ldr	r2, [pc, #40]	; (11d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   11cec:	9b01      	ldr	r3, [sp, #4]
   11cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cf2:	f003 0301 	and.w	r3, r3, #1
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	d106      	bne.n	11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   11cfa:	4a05      	ldr	r2, [pc, #20]	; (11d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11cfc:	9b01      	ldr	r3, [sp, #4]
   11cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d02:	2b00      	cmp	r3, #0
   11d04:	d100      	bne.n	11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d08:	bf00      	nop
   11d0a:	b003      	add	sp, #12
   11d0c:	f85d fb04 	ldr.w	pc, [sp], #4
   11d10:	1fff942c 	.word	0x1fff942c
   11d14:	1fff9428 	.word	0x1fff9428

00011d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11d18:	b500      	push	{lr}
   11d1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d1c:	f7ef fc68 	bl	15f0 <Sys_GetCoreID>
   11d20:	4603      	mov	r3, r0
   11d22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   11d24:	4a10      	ldr	r2, [pc, #64]	; (11d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11d26:	9b01      	ldr	r3, [sp, #4]
   11d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d10d      	bne.n	11d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d30:	f7ef f834 	bl	d9c <Adc_schm_read_msr>
   11d34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d36:	9b00      	ldr	r3, [sp, #0]
   11d38:	f003 0301 	and.w	r3, r3, #1
   11d3c:	2b00      	cmp	r3, #0
   11d3e:	d100      	bne.n	11d42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   11d42:	490a      	ldr	r1, [pc, #40]	; (11d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   11d44:	9b01      	ldr	r3, [sp, #4]
   11d46:	9a00      	ldr	r2, [sp, #0]
   11d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   11d4c:	4a06      	ldr	r2, [pc, #24]	; (11d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11d4e:	9b01      	ldr	r3, [sp, #4]
   11d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d54:	1c5a      	adds	r2, r3, #1
   11d56:	4904      	ldr	r1, [pc, #16]	; (11d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11d58:	9b01      	ldr	r3, [sp, #4]
   11d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d5e:	bf00      	nop
   11d60:	b003      	add	sp, #12
   11d62:	f85d fb04 	ldr.w	pc, [sp], #4
   11d66:	bf00      	nop
   11d68:	1fff9434 	.word	0x1fff9434
   11d6c:	1fff9430 	.word	0x1fff9430

00011d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11d70:	b500      	push	{lr}
   11d72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d74:	f7ef fc3c 	bl	15f0 <Sys_GetCoreID>
   11d78:	4603      	mov	r3, r0
   11d7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   11d7c:	4a0d      	ldr	r2, [pc, #52]	; (11db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11d7e:	9b01      	ldr	r3, [sp, #4]
   11d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d84:	1e5a      	subs	r2, r3, #1
   11d86:	490b      	ldr	r1, [pc, #44]	; (11db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11d88:	9b01      	ldr	r3, [sp, #4]
   11d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   11d8e:	4a0a      	ldr	r2, [pc, #40]	; (11db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   11d90:	9b01      	ldr	r3, [sp, #4]
   11d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d96:	f003 0301 	and.w	r3, r3, #1
   11d9a:	2b00      	cmp	r3, #0
   11d9c:	d106      	bne.n	11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   11d9e:	4a05      	ldr	r2, [pc, #20]	; (11db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11da0:	9b01      	ldr	r3, [sp, #4]
   11da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11da6:	2b00      	cmp	r3, #0
   11da8:	d100      	bne.n	11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11daa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11dac:	bf00      	nop
   11dae:	b003      	add	sp, #12
   11db0:	f85d fb04 	ldr.w	pc, [sp], #4
   11db4:	1fff9434 	.word	0x1fff9434
   11db8:	1fff9430 	.word	0x1fff9430

00011dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   11dbc:	b500      	push	{lr}
   11dbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dc0:	f7ef fc16 	bl	15f0 <Sys_GetCoreID>
   11dc4:	4603      	mov	r3, r0
   11dc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   11dc8:	4a10      	ldr	r2, [pc, #64]	; (11e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   11dca:	9b01      	ldr	r3, [sp, #4]
   11dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	d10d      	bne.n	11df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11dd4:	f7ee ffe2 	bl	d9c <Adc_schm_read_msr>
   11dd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11dda:	9b00      	ldr	r3, [sp, #0]
   11ddc:	f003 0301 	and.w	r3, r3, #1
   11de0:	2b00      	cmp	r3, #0
   11de2:	d100      	bne.n	11de6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11de4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   11de6:	490a      	ldr	r1, [pc, #40]	; (11e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   11de8:	9b01      	ldr	r3, [sp, #4]
   11dea:	9a00      	ldr	r2, [sp, #0]
   11dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   11df0:	4a06      	ldr	r2, [pc, #24]	; (11e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   11df2:	9b01      	ldr	r3, [sp, #4]
   11df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11df8:	1c5a      	adds	r2, r3, #1
   11dfa:	4904      	ldr	r1, [pc, #16]	; (11e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   11dfc:	9b01      	ldr	r3, [sp, #4]
   11dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e02:	bf00      	nop
   11e04:	b003      	add	sp, #12
   11e06:	f85d fb04 	ldr.w	pc, [sp], #4
   11e0a:	bf00      	nop
   11e0c:	1fff943c 	.word	0x1fff943c
   11e10:	1fff9438 	.word	0x1fff9438

00011e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   11e14:	b500      	push	{lr}
   11e16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e18:	f7ef fbea 	bl	15f0 <Sys_GetCoreID>
   11e1c:	4603      	mov	r3, r0
   11e1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   11e20:	4a0d      	ldr	r2, [pc, #52]	; (11e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   11e22:	9b01      	ldr	r3, [sp, #4]
   11e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e28:	1e5a      	subs	r2, r3, #1
   11e2a:	490b      	ldr	r1, [pc, #44]	; (11e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   11e2c:	9b01      	ldr	r3, [sp, #4]
   11e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   11e32:	4a0a      	ldr	r2, [pc, #40]	; (11e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   11e34:	9b01      	ldr	r3, [sp, #4]
   11e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e3a:	f003 0301 	and.w	r3, r3, #1
   11e3e:	2b00      	cmp	r3, #0
   11e40:	d106      	bne.n	11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   11e42:	4a05      	ldr	r2, [pc, #20]	; (11e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   11e44:	9b01      	ldr	r3, [sp, #4]
   11e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e4a:	2b00      	cmp	r3, #0
   11e4c:	d100      	bne.n	11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e50:	bf00      	nop
   11e52:	b003      	add	sp, #12
   11e54:	f85d fb04 	ldr.w	pc, [sp], #4
   11e58:	1fff943c 	.word	0x1fff943c
   11e5c:	1fff9438 	.word	0x1fff9438

00011e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   11e60:	b500      	push	{lr}
   11e62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e64:	f7ef fbc4 	bl	15f0 <Sys_GetCoreID>
   11e68:	4603      	mov	r3, r0
   11e6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   11e6c:	4a10      	ldr	r2, [pc, #64]	; (11eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   11e6e:	9b01      	ldr	r3, [sp, #4]
   11e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e74:	2b00      	cmp	r3, #0
   11e76:	d10d      	bne.n	11e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e78:	f7ee ff90 	bl	d9c <Adc_schm_read_msr>
   11e7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e7e:	9b00      	ldr	r3, [sp, #0]
   11e80:	f003 0301 	and.w	r3, r3, #1
   11e84:	2b00      	cmp	r3, #0
   11e86:	d100      	bne.n	11e8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   11e8a:	490a      	ldr	r1, [pc, #40]	; (11eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   11e8c:	9b01      	ldr	r3, [sp, #4]
   11e8e:	9a00      	ldr	r2, [sp, #0]
   11e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   11e94:	4a06      	ldr	r2, [pc, #24]	; (11eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   11e96:	9b01      	ldr	r3, [sp, #4]
   11e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e9c:	1c5a      	adds	r2, r3, #1
   11e9e:	4904      	ldr	r1, [pc, #16]	; (11eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   11ea0:	9b01      	ldr	r3, [sp, #4]
   11ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ea6:	bf00      	nop
   11ea8:	b003      	add	sp, #12
   11eaa:	f85d fb04 	ldr.w	pc, [sp], #4
   11eae:	bf00      	nop
   11eb0:	1fff9444 	.word	0x1fff9444
   11eb4:	1fff9440 	.word	0x1fff9440

00011eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   11eb8:	b500      	push	{lr}
   11eba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ebc:	f7ef fb98 	bl	15f0 <Sys_GetCoreID>
   11ec0:	4603      	mov	r3, r0
   11ec2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   11ec4:	4a0d      	ldr	r2, [pc, #52]	; (11efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   11ec6:	9b01      	ldr	r3, [sp, #4]
   11ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ecc:	1e5a      	subs	r2, r3, #1
   11ece:	490b      	ldr	r1, [pc, #44]	; (11efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   11ed0:	9b01      	ldr	r3, [sp, #4]
   11ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   11ed6:	4a0a      	ldr	r2, [pc, #40]	; (11f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   11ed8:	9b01      	ldr	r3, [sp, #4]
   11eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ede:	f003 0301 	and.w	r3, r3, #1
   11ee2:	2b00      	cmp	r3, #0
   11ee4:	d106      	bne.n	11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   11ee6:	4a05      	ldr	r2, [pc, #20]	; (11efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   11ee8:	9b01      	ldr	r3, [sp, #4]
   11eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eee:	2b00      	cmp	r3, #0
   11ef0:	d100      	bne.n	11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ef2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ef4:	bf00      	nop
   11ef6:	b003      	add	sp, #12
   11ef8:	f85d fb04 	ldr.w	pc, [sp], #4
   11efc:	1fff9444 	.word	0x1fff9444
   11f00:	1fff9440 	.word	0x1fff9440

00011f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   11f04:	b500      	push	{lr}
   11f06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f08:	f7ef fb72 	bl	15f0 <Sys_GetCoreID>
   11f0c:	4603      	mov	r3, r0
   11f0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   11f10:	4a10      	ldr	r2, [pc, #64]	; (11f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   11f12:	9b01      	ldr	r3, [sp, #4]
   11f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d10d      	bne.n	11f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f1c:	f7ee ff3e 	bl	d9c <Adc_schm_read_msr>
   11f20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f22:	9b00      	ldr	r3, [sp, #0]
   11f24:	f003 0301 	and.w	r3, r3, #1
   11f28:	2b00      	cmp	r3, #0
   11f2a:	d100      	bne.n	11f2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   11f2e:	490a      	ldr	r1, [pc, #40]	; (11f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   11f30:	9b01      	ldr	r3, [sp, #4]
   11f32:	9a00      	ldr	r2, [sp, #0]
   11f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   11f38:	4a06      	ldr	r2, [pc, #24]	; (11f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   11f3a:	9b01      	ldr	r3, [sp, #4]
   11f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f40:	1c5a      	adds	r2, r3, #1
   11f42:	4904      	ldr	r1, [pc, #16]	; (11f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   11f44:	9b01      	ldr	r3, [sp, #4]
   11f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f4a:	bf00      	nop
   11f4c:	b003      	add	sp, #12
   11f4e:	f85d fb04 	ldr.w	pc, [sp], #4
   11f52:	bf00      	nop
   11f54:	1fff944c 	.word	0x1fff944c
   11f58:	1fff9448 	.word	0x1fff9448

00011f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   11f5c:	b500      	push	{lr}
   11f5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f60:	f7ef fb46 	bl	15f0 <Sys_GetCoreID>
   11f64:	4603      	mov	r3, r0
   11f66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   11f68:	4a0d      	ldr	r2, [pc, #52]	; (11fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11f6a:	9b01      	ldr	r3, [sp, #4]
   11f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f70:	1e5a      	subs	r2, r3, #1
   11f72:	490b      	ldr	r1, [pc, #44]	; (11fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11f74:	9b01      	ldr	r3, [sp, #4]
   11f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   11f7a:	4a0a      	ldr	r2, [pc, #40]	; (11fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   11f7c:	9b01      	ldr	r3, [sp, #4]
   11f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f82:	f003 0301 	and.w	r3, r3, #1
   11f86:	2b00      	cmp	r3, #0
   11f88:	d106      	bne.n	11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   11f8a:	4a05      	ldr	r2, [pc, #20]	; (11fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11f8c:	9b01      	ldr	r3, [sp, #4]
   11f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f92:	2b00      	cmp	r3, #0
   11f94:	d100      	bne.n	11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f98:	bf00      	nop
   11f9a:	b003      	add	sp, #12
   11f9c:	f85d fb04 	ldr.w	pc, [sp], #4
   11fa0:	1fff944c 	.word	0x1fff944c
   11fa4:	1fff9448 	.word	0x1fff9448

00011fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   11fa8:	b500      	push	{lr}
   11faa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fac:	f7ef fb20 	bl	15f0 <Sys_GetCoreID>
   11fb0:	4603      	mov	r3, r0
   11fb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   11fb4:	4a10      	ldr	r2, [pc, #64]	; (11ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   11fb6:	9b01      	ldr	r3, [sp, #4]
   11fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fbc:	2b00      	cmp	r3, #0
   11fbe:	d10d      	bne.n	11fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fc0:	f7ee feec 	bl	d9c <Adc_schm_read_msr>
   11fc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11fc6:	9b00      	ldr	r3, [sp, #0]
   11fc8:	f003 0301 	and.w	r3, r3, #1
   11fcc:	2b00      	cmp	r3, #0
   11fce:	d100      	bne.n	11fd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11fd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   11fd2:	490a      	ldr	r1, [pc, #40]	; (11ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   11fd4:	9b01      	ldr	r3, [sp, #4]
   11fd6:	9a00      	ldr	r2, [sp, #0]
   11fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   11fdc:	4a06      	ldr	r2, [pc, #24]	; (11ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   11fde:	9b01      	ldr	r3, [sp, #4]
   11fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fe4:	1c5a      	adds	r2, r3, #1
   11fe6:	4904      	ldr	r1, [pc, #16]	; (11ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   11fe8:	9b01      	ldr	r3, [sp, #4]
   11fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fee:	bf00      	nop
   11ff0:	b003      	add	sp, #12
   11ff2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ff6:	bf00      	nop
   11ff8:	1fff9454 	.word	0x1fff9454
   11ffc:	1fff9450 	.word	0x1fff9450

00012000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12000:	b500      	push	{lr}
   12002:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12004:	f7ef faf4 	bl	15f0 <Sys_GetCoreID>
   12008:	4603      	mov	r3, r0
   1200a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   1200c:	4a0d      	ldr	r2, [pc, #52]	; (12044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1200e:	9b01      	ldr	r3, [sp, #4]
   12010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12014:	1e5a      	subs	r2, r3, #1
   12016:	490b      	ldr	r1, [pc, #44]	; (12044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12018:	9b01      	ldr	r3, [sp, #4]
   1201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   1201e:	4a0a      	ldr	r2, [pc, #40]	; (12048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12020:	9b01      	ldr	r3, [sp, #4]
   12022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12026:	f003 0301 	and.w	r3, r3, #1
   1202a:	2b00      	cmp	r3, #0
   1202c:	d106      	bne.n	1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1202e:	4a05      	ldr	r2, [pc, #20]	; (12044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12030:	9b01      	ldr	r3, [sp, #4]
   12032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12036:	2b00      	cmp	r3, #0
   12038:	d100      	bne.n	1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1203a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1203c:	bf00      	nop
   1203e:	b003      	add	sp, #12
   12040:	f85d fb04 	ldr.w	pc, [sp], #4
   12044:	1fff9454 	.word	0x1fff9454
   12048:	1fff9450 	.word	0x1fff9450

0001204c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   1204c:	b500      	push	{lr}
   1204e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12050:	f7ef face 	bl	15f0 <Sys_GetCoreID>
   12054:	4603      	mov	r3, r0
   12056:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   12058:	4a10      	ldr	r2, [pc, #64]	; (1209c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1205a:	9b01      	ldr	r3, [sp, #4]
   1205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12060:	2b00      	cmp	r3, #0
   12062:	d10d      	bne.n	12080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12064:	f7ee fe9a 	bl	d9c <Adc_schm_read_msr>
   12068:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1206a:	9b00      	ldr	r3, [sp, #0]
   1206c:	f003 0301 	and.w	r3, r3, #1
   12070:	2b00      	cmp	r3, #0
   12072:	d100      	bne.n	12076 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12074:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   12076:	490a      	ldr	r1, [pc, #40]	; (120a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   12078:	9b01      	ldr	r3, [sp, #4]
   1207a:	9a00      	ldr	r2, [sp, #0]
   1207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   12080:	4a06      	ldr	r2, [pc, #24]	; (1209c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12082:	9b01      	ldr	r3, [sp, #4]
   12084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12088:	1c5a      	adds	r2, r3, #1
   1208a:	4904      	ldr	r1, [pc, #16]	; (1209c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1208c:	9b01      	ldr	r3, [sp, #4]
   1208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12092:	bf00      	nop
   12094:	b003      	add	sp, #12
   12096:	f85d fb04 	ldr.w	pc, [sp], #4
   1209a:	bf00      	nop
   1209c:	1fff945c 	.word	0x1fff945c
   120a0:	1fff9458 	.word	0x1fff9458

000120a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   120a4:	b500      	push	{lr}
   120a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120a8:	f7ef faa2 	bl	15f0 <Sys_GetCoreID>
   120ac:	4603      	mov	r3, r0
   120ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   120b0:	4a0d      	ldr	r2, [pc, #52]	; (120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   120b2:	9b01      	ldr	r3, [sp, #4]
   120b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120b8:	1e5a      	subs	r2, r3, #1
   120ba:	490b      	ldr	r1, [pc, #44]	; (120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   120bc:	9b01      	ldr	r3, [sp, #4]
   120be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   120c2:	4a0a      	ldr	r2, [pc, #40]	; (120ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   120c4:	9b01      	ldr	r3, [sp, #4]
   120c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120ca:	f003 0301 	and.w	r3, r3, #1
   120ce:	2b00      	cmp	r3, #0
   120d0:	d106      	bne.n	120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   120d2:	4a05      	ldr	r2, [pc, #20]	; (120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   120d4:	9b01      	ldr	r3, [sp, #4]
   120d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120da:	2b00      	cmp	r3, #0
   120dc:	d100      	bne.n	120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120e0:	bf00      	nop
   120e2:	b003      	add	sp, #12
   120e4:	f85d fb04 	ldr.w	pc, [sp], #4
   120e8:	1fff945c 	.word	0x1fff945c
   120ec:	1fff9458 	.word	0x1fff9458

000120f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   120f0:	b500      	push	{lr}
   120f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120f4:	f7ef fa7c 	bl	15f0 <Sys_GetCoreID>
   120f8:	4603      	mov	r3, r0
   120fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   120fc:	4a10      	ldr	r2, [pc, #64]	; (12140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   120fe:	9b01      	ldr	r3, [sp, #4]
   12100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12104:	2b00      	cmp	r3, #0
   12106:	d10d      	bne.n	12124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12108:	f7ee fe48 	bl	d9c <Adc_schm_read_msr>
   1210c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1210e:	9b00      	ldr	r3, [sp, #0]
   12110:	f003 0301 	and.w	r3, r3, #1
   12114:	2b00      	cmp	r3, #0
   12116:	d100      	bne.n	1211a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12118:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   1211a:	490a      	ldr	r1, [pc, #40]	; (12144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   1211c:	9b01      	ldr	r3, [sp, #4]
   1211e:	9a00      	ldr	r2, [sp, #0]
   12120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   12124:	4a06      	ldr	r2, [pc, #24]	; (12140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12126:	9b01      	ldr	r3, [sp, #4]
   12128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1212c:	1c5a      	adds	r2, r3, #1
   1212e:	4904      	ldr	r1, [pc, #16]	; (12140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12130:	9b01      	ldr	r3, [sp, #4]
   12132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12136:	bf00      	nop
   12138:	b003      	add	sp, #12
   1213a:	f85d fb04 	ldr.w	pc, [sp], #4
   1213e:	bf00      	nop
   12140:	1fff9464 	.word	0x1fff9464
   12144:	1fff9460 	.word	0x1fff9460

00012148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   12148:	b500      	push	{lr}
   1214a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1214c:	f7ef fa50 	bl	15f0 <Sys_GetCoreID>
   12150:	4603      	mov	r3, r0
   12152:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   12154:	4a0d      	ldr	r2, [pc, #52]	; (1218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12156:	9b01      	ldr	r3, [sp, #4]
   12158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1215c:	1e5a      	subs	r2, r3, #1
   1215e:	490b      	ldr	r1, [pc, #44]	; (1218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12160:	9b01      	ldr	r3, [sp, #4]
   12162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   12166:	4a0a      	ldr	r2, [pc, #40]	; (12190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   12168:	9b01      	ldr	r3, [sp, #4]
   1216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1216e:	f003 0301 	and.w	r3, r3, #1
   12172:	2b00      	cmp	r3, #0
   12174:	d106      	bne.n	12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   12176:	4a05      	ldr	r2, [pc, #20]	; (1218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12178:	9b01      	ldr	r3, [sp, #4]
   1217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1217e:	2b00      	cmp	r3, #0
   12180:	d100      	bne.n	12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12182:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12184:	bf00      	nop
   12186:	b003      	add	sp, #12
   12188:	f85d fb04 	ldr.w	pc, [sp], #4
   1218c:	1fff9464 	.word	0x1fff9464
   12190:	1fff9460 	.word	0x1fff9460

00012194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   12194:	b500      	push	{lr}
   12196:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12198:	f7ef fa2a 	bl	15f0 <Sys_GetCoreID>
   1219c:	4603      	mov	r3, r0
   1219e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   121a0:	4a10      	ldr	r2, [pc, #64]	; (121e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   121a2:	9b01      	ldr	r3, [sp, #4]
   121a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121a8:	2b00      	cmp	r3, #0
   121aa:	d10d      	bne.n	121c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121ac:	f7ee fdf6 	bl	d9c <Adc_schm_read_msr>
   121b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121b2:	9b00      	ldr	r3, [sp, #0]
   121b4:	f003 0301 	and.w	r3, r3, #1
   121b8:	2b00      	cmp	r3, #0
   121ba:	d100      	bne.n	121be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   121be:	490a      	ldr	r1, [pc, #40]	; (121e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   121c0:	9b01      	ldr	r3, [sp, #4]
   121c2:	9a00      	ldr	r2, [sp, #0]
   121c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   121c8:	4a06      	ldr	r2, [pc, #24]	; (121e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   121ca:	9b01      	ldr	r3, [sp, #4]
   121cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121d0:	1c5a      	adds	r2, r3, #1
   121d2:	4904      	ldr	r1, [pc, #16]	; (121e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   121d4:	9b01      	ldr	r3, [sp, #4]
   121d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121da:	bf00      	nop
   121dc:	b003      	add	sp, #12
   121de:	f85d fb04 	ldr.w	pc, [sp], #4
   121e2:	bf00      	nop
   121e4:	1fff946c 	.word	0x1fff946c
   121e8:	1fff9468 	.word	0x1fff9468

000121ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   121ec:	b500      	push	{lr}
   121ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121f0:	f7ef f9fe 	bl	15f0 <Sys_GetCoreID>
   121f4:	4603      	mov	r3, r0
   121f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   121f8:	4a0d      	ldr	r2, [pc, #52]	; (12230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   121fa:	9b01      	ldr	r3, [sp, #4]
   121fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12200:	1e5a      	subs	r2, r3, #1
   12202:	490b      	ldr	r1, [pc, #44]	; (12230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   12204:	9b01      	ldr	r3, [sp, #4]
   12206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   1220a:	4a0a      	ldr	r2, [pc, #40]	; (12234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   1220c:	9b01      	ldr	r3, [sp, #4]
   1220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12212:	f003 0301 	and.w	r3, r3, #1
   12216:	2b00      	cmp	r3, #0
   12218:	d106      	bne.n	12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   1221a:	4a05      	ldr	r2, [pc, #20]	; (12230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1221c:	9b01      	ldr	r3, [sp, #4]
   1221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12222:	2b00      	cmp	r3, #0
   12224:	d100      	bne.n	12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12226:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12228:	bf00      	nop
   1222a:	b003      	add	sp, #12
   1222c:	f85d fb04 	ldr.w	pc, [sp], #4
   12230:	1fff946c 	.word	0x1fff946c
   12234:	1fff9468 	.word	0x1fff9468

00012238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   12238:	b500      	push	{lr}
   1223a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1223c:	f7ef f9d8 	bl	15f0 <Sys_GetCoreID>
   12240:	4603      	mov	r3, r0
   12242:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   12244:	4a10      	ldr	r2, [pc, #64]	; (12288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   12246:	9b01      	ldr	r3, [sp, #4]
   12248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1224c:	2b00      	cmp	r3, #0
   1224e:	d10d      	bne.n	1226c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12250:	f7ee fda4 	bl	d9c <Adc_schm_read_msr>
   12254:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12256:	9b00      	ldr	r3, [sp, #0]
   12258:	f003 0301 	and.w	r3, r3, #1
   1225c:	2b00      	cmp	r3, #0
   1225e:	d100      	bne.n	12262 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12260:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   12262:	490a      	ldr	r1, [pc, #40]	; (1228c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   12264:	9b01      	ldr	r3, [sp, #4]
   12266:	9a00      	ldr	r2, [sp, #0]
   12268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   1226c:	4a06      	ldr	r2, [pc, #24]	; (12288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1226e:	9b01      	ldr	r3, [sp, #4]
   12270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12274:	1c5a      	adds	r2, r3, #1
   12276:	4904      	ldr	r1, [pc, #16]	; (12288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   12278:	9b01      	ldr	r3, [sp, #4]
   1227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1227e:	bf00      	nop
   12280:	b003      	add	sp, #12
   12282:	f85d fb04 	ldr.w	pc, [sp], #4
   12286:	bf00      	nop
   12288:	1fff9474 	.word	0x1fff9474
   1228c:	1fff9470 	.word	0x1fff9470

00012290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   12290:	b500      	push	{lr}
   12292:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12294:	f7ef f9ac 	bl	15f0 <Sys_GetCoreID>
   12298:	4603      	mov	r3, r0
   1229a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   1229c:	4a0d      	ldr	r2, [pc, #52]	; (122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1229e:	9b01      	ldr	r3, [sp, #4]
   122a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a4:	1e5a      	subs	r2, r3, #1
   122a6:	490b      	ldr	r1, [pc, #44]	; (122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   122a8:	9b01      	ldr	r3, [sp, #4]
   122aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   122ae:	4a0a      	ldr	r2, [pc, #40]	; (122d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   122b0:	9b01      	ldr	r3, [sp, #4]
   122b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b6:	f003 0301 	and.w	r3, r3, #1
   122ba:	2b00      	cmp	r3, #0
   122bc:	d106      	bne.n	122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   122be:	4a05      	ldr	r2, [pc, #20]	; (122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   122c0:	9b01      	ldr	r3, [sp, #4]
   122c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122c6:	2b00      	cmp	r3, #0
   122c8:	d100      	bne.n	122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122cc:	bf00      	nop
   122ce:	b003      	add	sp, #12
   122d0:	f85d fb04 	ldr.w	pc, [sp], #4
   122d4:	1fff9474 	.word	0x1fff9474
   122d8:	1fff9470 	.word	0x1fff9470

000122dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   122dc:	b500      	push	{lr}
   122de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122e0:	f7ef f986 	bl	15f0 <Sys_GetCoreID>
   122e4:	4603      	mov	r3, r0
   122e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   122e8:	4a10      	ldr	r2, [pc, #64]	; (1232c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   122ea:	9b01      	ldr	r3, [sp, #4]
   122ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f0:	2b00      	cmp	r3, #0
   122f2:	d10d      	bne.n	12310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122f4:	f7ee fd52 	bl	d9c <Adc_schm_read_msr>
   122f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122fa:	9b00      	ldr	r3, [sp, #0]
   122fc:	f003 0301 	and.w	r3, r3, #1
   12300:	2b00      	cmp	r3, #0
   12302:	d100      	bne.n	12306 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12304:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   12306:	490a      	ldr	r1, [pc, #40]	; (12330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   12308:	9b01      	ldr	r3, [sp, #4]
   1230a:	9a00      	ldr	r2, [sp, #0]
   1230c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   12310:	4a06      	ldr	r2, [pc, #24]	; (1232c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   12312:	9b01      	ldr	r3, [sp, #4]
   12314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12318:	1c5a      	adds	r2, r3, #1
   1231a:	4904      	ldr	r1, [pc, #16]	; (1232c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12322:	bf00      	nop
   12324:	b003      	add	sp, #12
   12326:	f85d fb04 	ldr.w	pc, [sp], #4
   1232a:	bf00      	nop
   1232c:	1fff947c 	.word	0x1fff947c
   12330:	1fff9478 	.word	0x1fff9478

00012334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   12334:	b500      	push	{lr}
   12336:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12338:	f7ef f95a 	bl	15f0 <Sys_GetCoreID>
   1233c:	4603      	mov	r3, r0
   1233e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   12340:	4a0d      	ldr	r2, [pc, #52]	; (12378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   12342:	9b01      	ldr	r3, [sp, #4]
   12344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12348:	1e5a      	subs	r2, r3, #1
   1234a:	490b      	ldr	r1, [pc, #44]	; (12378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1234c:	9b01      	ldr	r3, [sp, #4]
   1234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   12352:	4a0a      	ldr	r2, [pc, #40]	; (1237c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   12354:	9b01      	ldr	r3, [sp, #4]
   12356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1235a:	f003 0301 	and.w	r3, r3, #1
   1235e:	2b00      	cmp	r3, #0
   12360:	d106      	bne.n	12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   12362:	4a05      	ldr	r2, [pc, #20]	; (12378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   12364:	9b01      	ldr	r3, [sp, #4]
   12366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1236a:	2b00      	cmp	r3, #0
   1236c:	d100      	bne.n	12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1236e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12370:	bf00      	nop
   12372:	b003      	add	sp, #12
   12374:	f85d fb04 	ldr.w	pc, [sp], #4
   12378:	1fff947c 	.word	0x1fff947c
   1237c:	1fff9478 	.word	0x1fff9478

00012380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   12380:	b500      	push	{lr}
   12382:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12384:	f7ef f934 	bl	15f0 <Sys_GetCoreID>
   12388:	4603      	mov	r3, r0
   1238a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   1238c:	4a10      	ldr	r2, [pc, #64]	; (123d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   1238e:	9b01      	ldr	r3, [sp, #4]
   12390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12394:	2b00      	cmp	r3, #0
   12396:	d10d      	bne.n	123b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12398:	f7ee fd00 	bl	d9c <Adc_schm_read_msr>
   1239c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1239e:	9b00      	ldr	r3, [sp, #0]
   123a0:	f003 0301 	and.w	r3, r3, #1
   123a4:	2b00      	cmp	r3, #0
   123a6:	d100      	bne.n	123aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   123aa:	490a      	ldr	r1, [pc, #40]	; (123d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   123ac:	9b01      	ldr	r3, [sp, #4]
   123ae:	9a00      	ldr	r2, [sp, #0]
   123b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   123b4:	4a06      	ldr	r2, [pc, #24]	; (123d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   123b6:	9b01      	ldr	r3, [sp, #4]
   123b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123bc:	1c5a      	adds	r2, r3, #1
   123be:	4904      	ldr	r1, [pc, #16]	; (123d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   123c0:	9b01      	ldr	r3, [sp, #4]
   123c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123c6:	bf00      	nop
   123c8:	b003      	add	sp, #12
   123ca:	f85d fb04 	ldr.w	pc, [sp], #4
   123ce:	bf00      	nop
   123d0:	1fff9484 	.word	0x1fff9484
   123d4:	1fff9480 	.word	0x1fff9480

000123d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   123d8:	b500      	push	{lr}
   123da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123dc:	f7ef f908 	bl	15f0 <Sys_GetCoreID>
   123e0:	4603      	mov	r3, r0
   123e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   123e4:	4a0d      	ldr	r2, [pc, #52]	; (1241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   123e6:	9b01      	ldr	r3, [sp, #4]
   123e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123ec:	1e5a      	subs	r2, r3, #1
   123ee:	490b      	ldr	r1, [pc, #44]	; (1241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   123f0:	9b01      	ldr	r3, [sp, #4]
   123f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   123f6:	4a0a      	ldr	r2, [pc, #40]	; (12420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   123f8:	9b01      	ldr	r3, [sp, #4]
   123fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123fe:	f003 0301 	and.w	r3, r3, #1
   12402:	2b00      	cmp	r3, #0
   12404:	d106      	bne.n	12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   12406:	4a05      	ldr	r2, [pc, #20]	; (1241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12408:	9b01      	ldr	r3, [sp, #4]
   1240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1240e:	2b00      	cmp	r3, #0
   12410:	d100      	bne.n	12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12412:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12414:	bf00      	nop
   12416:	b003      	add	sp, #12
   12418:	f85d fb04 	ldr.w	pc, [sp], #4
   1241c:	1fff9484 	.word	0x1fff9484
   12420:	1fff9480 	.word	0x1fff9480

00012424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   12424:	b500      	push	{lr}
   12426:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12428:	f7ef f8e2 	bl	15f0 <Sys_GetCoreID>
   1242c:	4603      	mov	r3, r0
   1242e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   12430:	4a10      	ldr	r2, [pc, #64]	; (12474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   12432:	9b01      	ldr	r3, [sp, #4]
   12434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12438:	2b00      	cmp	r3, #0
   1243a:	d10d      	bne.n	12458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1243c:	f7ee fcae 	bl	d9c <Adc_schm_read_msr>
   12440:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12442:	9b00      	ldr	r3, [sp, #0]
   12444:	f003 0301 	and.w	r3, r3, #1
   12448:	2b00      	cmp	r3, #0
   1244a:	d100      	bne.n	1244e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1244c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   1244e:	490a      	ldr	r1, [pc, #40]	; (12478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   12450:	9b01      	ldr	r3, [sp, #4]
   12452:	9a00      	ldr	r2, [sp, #0]
   12454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   12458:	4a06      	ldr	r2, [pc, #24]	; (12474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1245a:	9b01      	ldr	r3, [sp, #4]
   1245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12460:	1c5a      	adds	r2, r3, #1
   12462:	4904      	ldr	r1, [pc, #16]	; (12474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   12464:	9b01      	ldr	r3, [sp, #4]
   12466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1246a:	bf00      	nop
   1246c:	b003      	add	sp, #12
   1246e:	f85d fb04 	ldr.w	pc, [sp], #4
   12472:	bf00      	nop
   12474:	1fff948c 	.word	0x1fff948c
   12478:	1fff9488 	.word	0x1fff9488

0001247c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   1247c:	b500      	push	{lr}
   1247e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12480:	f7ef f8b6 	bl	15f0 <Sys_GetCoreID>
   12484:	4603      	mov	r3, r0
   12486:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   12488:	4a0d      	ldr	r2, [pc, #52]	; (124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   1248a:	9b01      	ldr	r3, [sp, #4]
   1248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12490:	1e5a      	subs	r2, r3, #1
   12492:	490b      	ldr	r1, [pc, #44]	; (124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   12494:	9b01      	ldr	r3, [sp, #4]
   12496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   1249a:	4a0a      	ldr	r2, [pc, #40]	; (124c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   1249c:	9b01      	ldr	r3, [sp, #4]
   1249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124a2:	f003 0301 	and.w	r3, r3, #1
   124a6:	2b00      	cmp	r3, #0
   124a8:	d106      	bne.n	124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   124aa:	4a05      	ldr	r2, [pc, #20]	; (124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   124ac:	9b01      	ldr	r3, [sp, #4]
   124ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124b2:	2b00      	cmp	r3, #0
   124b4:	d100      	bne.n	124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124b8:	bf00      	nop
   124ba:	b003      	add	sp, #12
   124bc:	f85d fb04 	ldr.w	pc, [sp], #4
   124c0:	1fff948c 	.word	0x1fff948c
   124c4:	1fff9488 	.word	0x1fff9488

000124c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   124c8:	b500      	push	{lr}
   124ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124cc:	f7ef f890 	bl	15f0 <Sys_GetCoreID>
   124d0:	4603      	mov	r3, r0
   124d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   124d4:	4a10      	ldr	r2, [pc, #64]	; (12518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   124d6:	9b01      	ldr	r3, [sp, #4]
   124d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124dc:	2b00      	cmp	r3, #0
   124de:	d10d      	bne.n	124fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124e0:	f7ee fc5c 	bl	d9c <Adc_schm_read_msr>
   124e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124e6:	9b00      	ldr	r3, [sp, #0]
   124e8:	f003 0301 	and.w	r3, r3, #1
   124ec:	2b00      	cmp	r3, #0
   124ee:	d100      	bne.n	124f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   124f2:	490a      	ldr	r1, [pc, #40]	; (1251c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   124f4:	9b01      	ldr	r3, [sp, #4]
   124f6:	9a00      	ldr	r2, [sp, #0]
   124f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   124fc:	4a06      	ldr	r2, [pc, #24]	; (12518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   124fe:	9b01      	ldr	r3, [sp, #4]
   12500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12504:	1c5a      	adds	r2, r3, #1
   12506:	4904      	ldr	r1, [pc, #16]	; (12518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   12508:	9b01      	ldr	r3, [sp, #4]
   1250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1250e:	bf00      	nop
   12510:	b003      	add	sp, #12
   12512:	f85d fb04 	ldr.w	pc, [sp], #4
   12516:	bf00      	nop
   12518:	1fff9494 	.word	0x1fff9494
   1251c:	1fff9490 	.word	0x1fff9490

00012520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   12520:	b500      	push	{lr}
   12522:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12524:	f7ef f864 	bl	15f0 <Sys_GetCoreID>
   12528:	4603      	mov	r3, r0
   1252a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   1252c:	4a0d      	ldr	r2, [pc, #52]	; (12564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1252e:	9b01      	ldr	r3, [sp, #4]
   12530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12534:	1e5a      	subs	r2, r3, #1
   12536:	490b      	ldr	r1, [pc, #44]	; (12564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12538:	9b01      	ldr	r3, [sp, #4]
   1253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   1253e:	4a0a      	ldr	r2, [pc, #40]	; (12568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   12540:	9b01      	ldr	r3, [sp, #4]
   12542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12546:	f003 0301 	and.w	r3, r3, #1
   1254a:	2b00      	cmp	r3, #0
   1254c:	d106      	bne.n	1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   1254e:	4a05      	ldr	r2, [pc, #20]	; (12564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12550:	9b01      	ldr	r3, [sp, #4]
   12552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12556:	2b00      	cmp	r3, #0
   12558:	d100      	bne.n	1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1255a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1255c:	bf00      	nop
   1255e:	b003      	add	sp, #12
   12560:	f85d fb04 	ldr.w	pc, [sp], #4
   12564:	1fff9494 	.word	0x1fff9494
   12568:	1fff9490 	.word	0x1fff9490

0001256c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   1256c:	b500      	push	{lr}
   1256e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12570:	f7ef f83e 	bl	15f0 <Sys_GetCoreID>
   12574:	4603      	mov	r3, r0
   12576:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   12578:	4a10      	ldr	r2, [pc, #64]	; (125bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   1257a:	9b01      	ldr	r3, [sp, #4]
   1257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12580:	2b00      	cmp	r3, #0
   12582:	d10d      	bne.n	125a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12584:	f7ee fc0a 	bl	d9c <Adc_schm_read_msr>
   12588:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1258a:	9b00      	ldr	r3, [sp, #0]
   1258c:	f003 0301 	and.w	r3, r3, #1
   12590:	2b00      	cmp	r3, #0
   12592:	d100      	bne.n	12596 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12594:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   12596:	490a      	ldr	r1, [pc, #40]	; (125c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   12598:	9b01      	ldr	r3, [sp, #4]
   1259a:	9a00      	ldr	r2, [sp, #0]
   1259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   125a0:	4a06      	ldr	r2, [pc, #24]	; (125bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   125a2:	9b01      	ldr	r3, [sp, #4]
   125a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125a8:	1c5a      	adds	r2, r3, #1
   125aa:	4904      	ldr	r1, [pc, #16]	; (125bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   125ac:	9b01      	ldr	r3, [sp, #4]
   125ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125b2:	bf00      	nop
   125b4:	b003      	add	sp, #12
   125b6:	f85d fb04 	ldr.w	pc, [sp], #4
   125ba:	bf00      	nop
   125bc:	1fff949c 	.word	0x1fff949c
   125c0:	1fff9498 	.word	0x1fff9498

000125c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   125c4:	b500      	push	{lr}
   125c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125c8:	f7ef f812 	bl	15f0 <Sys_GetCoreID>
   125cc:	4603      	mov	r3, r0
   125ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   125d0:	4a0d      	ldr	r2, [pc, #52]	; (12608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   125d2:	9b01      	ldr	r3, [sp, #4]
   125d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125d8:	1e5a      	subs	r2, r3, #1
   125da:	490b      	ldr	r1, [pc, #44]	; (12608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   125dc:	9b01      	ldr	r3, [sp, #4]
   125de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   125e2:	4a0a      	ldr	r2, [pc, #40]	; (1260c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   125e4:	9b01      	ldr	r3, [sp, #4]
   125e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ea:	f003 0301 	and.w	r3, r3, #1
   125ee:	2b00      	cmp	r3, #0
   125f0:	d106      	bne.n	12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   125f2:	4a05      	ldr	r2, [pc, #20]	; (12608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   125f4:	9b01      	ldr	r3, [sp, #4]
   125f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125fa:	2b00      	cmp	r3, #0
   125fc:	d100      	bne.n	12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12600:	bf00      	nop
   12602:	b003      	add	sp, #12
   12604:	f85d fb04 	ldr.w	pc, [sp], #4
   12608:	1fff949c 	.word	0x1fff949c
   1260c:	1fff9498 	.word	0x1fff9498

00012610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   12610:	b500      	push	{lr}
   12612:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12614:	f7ee ffec 	bl	15f0 <Sys_GetCoreID>
   12618:	4603      	mov	r3, r0
   1261a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   1261c:	4a10      	ldr	r2, [pc, #64]	; (12660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1261e:	9b01      	ldr	r3, [sp, #4]
   12620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12624:	2b00      	cmp	r3, #0
   12626:	d10d      	bne.n	12644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12628:	f7ee fbb8 	bl	d9c <Adc_schm_read_msr>
   1262c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1262e:	9b00      	ldr	r3, [sp, #0]
   12630:	f003 0301 	and.w	r3, r3, #1
   12634:	2b00      	cmp	r3, #0
   12636:	d100      	bne.n	1263a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12638:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   1263a:	490a      	ldr	r1, [pc, #40]	; (12664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   1263c:	9b01      	ldr	r3, [sp, #4]
   1263e:	9a00      	ldr	r2, [sp, #0]
   12640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   12644:	4a06      	ldr	r2, [pc, #24]	; (12660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   12646:	9b01      	ldr	r3, [sp, #4]
   12648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1264c:	1c5a      	adds	r2, r3, #1
   1264e:	4904      	ldr	r1, [pc, #16]	; (12660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   12650:	9b01      	ldr	r3, [sp, #4]
   12652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12656:	bf00      	nop
   12658:	b003      	add	sp, #12
   1265a:	f85d fb04 	ldr.w	pc, [sp], #4
   1265e:	bf00      	nop
   12660:	1fff94a4 	.word	0x1fff94a4
   12664:	1fff94a0 	.word	0x1fff94a0

00012668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   12668:	b500      	push	{lr}
   1266a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1266c:	f7ee ffc0 	bl	15f0 <Sys_GetCoreID>
   12670:	4603      	mov	r3, r0
   12672:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   12674:	4a0d      	ldr	r2, [pc, #52]	; (126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   12676:	9b01      	ldr	r3, [sp, #4]
   12678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1267c:	1e5a      	subs	r2, r3, #1
   1267e:	490b      	ldr	r1, [pc, #44]	; (126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   12680:	9b01      	ldr	r3, [sp, #4]
   12682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   12686:	4a0a      	ldr	r2, [pc, #40]	; (126b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   12688:	9b01      	ldr	r3, [sp, #4]
   1268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1268e:	f003 0301 	and.w	r3, r3, #1
   12692:	2b00      	cmp	r3, #0
   12694:	d106      	bne.n	126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   12696:	4a05      	ldr	r2, [pc, #20]	; (126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   12698:	9b01      	ldr	r3, [sp, #4]
   1269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1269e:	2b00      	cmp	r3, #0
   126a0:	d100      	bne.n	126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126a4:	bf00      	nop
   126a6:	b003      	add	sp, #12
   126a8:	f85d fb04 	ldr.w	pc, [sp], #4
   126ac:	1fff94a4 	.word	0x1fff94a4
   126b0:	1fff94a0 	.word	0x1fff94a0

000126b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   126b4:	b500      	push	{lr}
   126b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126b8:	f7ee ff9a 	bl	15f0 <Sys_GetCoreID>
   126bc:	4603      	mov	r3, r0
   126be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   126c0:	4a10      	ldr	r2, [pc, #64]	; (12704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   126c2:	9b01      	ldr	r3, [sp, #4]
   126c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126c8:	2b00      	cmp	r3, #0
   126ca:	d10d      	bne.n	126e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126cc:	f7ee fb66 	bl	d9c <Adc_schm_read_msr>
   126d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126d2:	9b00      	ldr	r3, [sp, #0]
   126d4:	f003 0301 	and.w	r3, r3, #1
   126d8:	2b00      	cmp	r3, #0
   126da:	d100      	bne.n	126de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   126de:	490a      	ldr	r1, [pc, #40]	; (12708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   126e0:	9b01      	ldr	r3, [sp, #4]
   126e2:	9a00      	ldr	r2, [sp, #0]
   126e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   126e8:	4a06      	ldr	r2, [pc, #24]	; (12704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   126ea:	9b01      	ldr	r3, [sp, #4]
   126ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126f0:	1c5a      	adds	r2, r3, #1
   126f2:	4904      	ldr	r1, [pc, #16]	; (12704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   126f4:	9b01      	ldr	r3, [sp, #4]
   126f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126fa:	bf00      	nop
   126fc:	b003      	add	sp, #12
   126fe:	f85d fb04 	ldr.w	pc, [sp], #4
   12702:	bf00      	nop
   12704:	1fff94ac 	.word	0x1fff94ac
   12708:	1fff94a8 	.word	0x1fff94a8

0001270c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   1270c:	b500      	push	{lr}
   1270e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12710:	f7ee ff6e 	bl	15f0 <Sys_GetCoreID>
   12714:	4603      	mov	r3, r0
   12716:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   12718:	4a0d      	ldr	r2, [pc, #52]	; (12750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1271a:	9b01      	ldr	r3, [sp, #4]
   1271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12720:	1e5a      	subs	r2, r3, #1
   12722:	490b      	ldr	r1, [pc, #44]	; (12750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   12724:	9b01      	ldr	r3, [sp, #4]
   12726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   1272a:	4a0a      	ldr	r2, [pc, #40]	; (12754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   1272c:	9b01      	ldr	r3, [sp, #4]
   1272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12732:	f003 0301 	and.w	r3, r3, #1
   12736:	2b00      	cmp	r3, #0
   12738:	d106      	bne.n	12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   1273a:	4a05      	ldr	r2, [pc, #20]	; (12750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1273c:	9b01      	ldr	r3, [sp, #4]
   1273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12742:	2b00      	cmp	r3, #0
   12744:	d100      	bne.n	12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12746:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12748:	bf00      	nop
   1274a:	b003      	add	sp, #12
   1274c:	f85d fb04 	ldr.w	pc, [sp], #4
   12750:	1fff94ac 	.word	0x1fff94ac
   12754:	1fff94a8 	.word	0x1fff94a8

00012758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   12758:	b500      	push	{lr}
   1275a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1275c:	f7ee ff48 	bl	15f0 <Sys_GetCoreID>
   12760:	4603      	mov	r3, r0
   12762:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   12764:	4a10      	ldr	r2, [pc, #64]	; (127a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   12766:	9b01      	ldr	r3, [sp, #4]
   12768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1276c:	2b00      	cmp	r3, #0
   1276e:	d10d      	bne.n	1278c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12770:	f7ee fb14 	bl	d9c <Adc_schm_read_msr>
   12774:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12776:	9b00      	ldr	r3, [sp, #0]
   12778:	f003 0301 	and.w	r3, r3, #1
   1277c:	2b00      	cmp	r3, #0
   1277e:	d100      	bne.n	12782 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12780:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   12782:	490a      	ldr	r1, [pc, #40]	; (127ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   12784:	9b01      	ldr	r3, [sp, #4]
   12786:	9a00      	ldr	r2, [sp, #0]
   12788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   1278c:	4a06      	ldr	r2, [pc, #24]	; (127a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1278e:	9b01      	ldr	r3, [sp, #4]
   12790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12794:	1c5a      	adds	r2, r3, #1
   12796:	4904      	ldr	r1, [pc, #16]	; (127a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   12798:	9b01      	ldr	r3, [sp, #4]
   1279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1279e:	bf00      	nop
   127a0:	b003      	add	sp, #12
   127a2:	f85d fb04 	ldr.w	pc, [sp], #4
   127a6:	bf00      	nop
   127a8:	1fff94b4 	.word	0x1fff94b4
   127ac:	1fff94b0 	.word	0x1fff94b0

000127b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   127b0:	b500      	push	{lr}
   127b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127b4:	f7ee ff1c 	bl	15f0 <Sys_GetCoreID>
   127b8:	4603      	mov	r3, r0
   127ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   127bc:	4a0d      	ldr	r2, [pc, #52]	; (127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   127be:	9b01      	ldr	r3, [sp, #4]
   127c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c4:	1e5a      	subs	r2, r3, #1
   127c6:	490b      	ldr	r1, [pc, #44]	; (127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   127c8:	9b01      	ldr	r3, [sp, #4]
   127ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   127ce:	4a0a      	ldr	r2, [pc, #40]	; (127f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   127d0:	9b01      	ldr	r3, [sp, #4]
   127d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d6:	f003 0301 	and.w	r3, r3, #1
   127da:	2b00      	cmp	r3, #0
   127dc:	d106      	bne.n	127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   127de:	4a05      	ldr	r2, [pc, #20]	; (127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   127e0:	9b01      	ldr	r3, [sp, #4]
   127e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127e6:	2b00      	cmp	r3, #0
   127e8:	d100      	bne.n	127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127ec:	bf00      	nop
   127ee:	b003      	add	sp, #12
   127f0:	f85d fb04 	ldr.w	pc, [sp], #4
   127f4:	1fff94b4 	.word	0x1fff94b4
   127f8:	1fff94b0 	.word	0x1fff94b0

000127fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   127fc:	b500      	push	{lr}
   127fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12800:	f7ee fef6 	bl	15f0 <Sys_GetCoreID>
   12804:	4603      	mov	r3, r0
   12806:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   12808:	4a10      	ldr	r2, [pc, #64]	; (1284c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1280a:	9b01      	ldr	r3, [sp, #4]
   1280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12810:	2b00      	cmp	r3, #0
   12812:	d10d      	bne.n	12830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12814:	f7ee fac2 	bl	d9c <Adc_schm_read_msr>
   12818:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1281a:	9b00      	ldr	r3, [sp, #0]
   1281c:	f003 0301 	and.w	r3, r3, #1
   12820:	2b00      	cmp	r3, #0
   12822:	d100      	bne.n	12826 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12824:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   12826:	490a      	ldr	r1, [pc, #40]	; (12850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   12828:	9b01      	ldr	r3, [sp, #4]
   1282a:	9a00      	ldr	r2, [sp, #0]
   1282c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   12830:	4a06      	ldr	r2, [pc, #24]	; (1284c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12832:	9b01      	ldr	r3, [sp, #4]
   12834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12838:	1c5a      	adds	r2, r3, #1
   1283a:	4904      	ldr	r1, [pc, #16]	; (1284c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1283c:	9b01      	ldr	r3, [sp, #4]
   1283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12842:	bf00      	nop
   12844:	b003      	add	sp, #12
   12846:	f85d fb04 	ldr.w	pc, [sp], #4
   1284a:	bf00      	nop
   1284c:	1fff94bc 	.word	0x1fff94bc
   12850:	1fff94b8 	.word	0x1fff94b8

00012854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   12854:	b500      	push	{lr}
   12856:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12858:	f7ee feca 	bl	15f0 <Sys_GetCoreID>
   1285c:	4603      	mov	r3, r0
   1285e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   12860:	4a0d      	ldr	r2, [pc, #52]	; (12898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12862:	9b01      	ldr	r3, [sp, #4]
   12864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12868:	1e5a      	subs	r2, r3, #1
   1286a:	490b      	ldr	r1, [pc, #44]	; (12898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   1286c:	9b01      	ldr	r3, [sp, #4]
   1286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   12872:	4a0a      	ldr	r2, [pc, #40]	; (1289c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   12874:	9b01      	ldr	r3, [sp, #4]
   12876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1287a:	f003 0301 	and.w	r3, r3, #1
   1287e:	2b00      	cmp	r3, #0
   12880:	d106      	bne.n	12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   12882:	4a05      	ldr	r2, [pc, #20]	; (12898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12884:	9b01      	ldr	r3, [sp, #4]
   12886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1288a:	2b00      	cmp	r3, #0
   1288c:	d100      	bne.n	12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1288e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12890:	bf00      	nop
   12892:	b003      	add	sp, #12
   12894:	f85d fb04 	ldr.w	pc, [sp], #4
   12898:	1fff94bc 	.word	0x1fff94bc
   1289c:	1fff94b8 	.word	0x1fff94b8

000128a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   128a0:	b500      	push	{lr}
   128a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128a4:	f7ee fea4 	bl	15f0 <Sys_GetCoreID>
   128a8:	4603      	mov	r3, r0
   128aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   128ac:	4a10      	ldr	r2, [pc, #64]	; (128f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   128ae:	9b01      	ldr	r3, [sp, #4]
   128b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b4:	2b00      	cmp	r3, #0
   128b6:	d10d      	bne.n	128d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128b8:	f7ee fa70 	bl	d9c <Adc_schm_read_msr>
   128bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128be:	9b00      	ldr	r3, [sp, #0]
   128c0:	f003 0301 	and.w	r3, r3, #1
   128c4:	2b00      	cmp	r3, #0
   128c6:	d100      	bne.n	128ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   128ca:	490a      	ldr	r1, [pc, #40]	; (128f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   128cc:	9b01      	ldr	r3, [sp, #4]
   128ce:	9a00      	ldr	r2, [sp, #0]
   128d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   128d4:	4a06      	ldr	r2, [pc, #24]	; (128f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   128d6:	9b01      	ldr	r3, [sp, #4]
   128d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128dc:	1c5a      	adds	r2, r3, #1
   128de:	4904      	ldr	r1, [pc, #16]	; (128f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   128e0:	9b01      	ldr	r3, [sp, #4]
   128e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128e6:	bf00      	nop
   128e8:	b003      	add	sp, #12
   128ea:	f85d fb04 	ldr.w	pc, [sp], #4
   128ee:	bf00      	nop
   128f0:	1fff94c4 	.word	0x1fff94c4
   128f4:	1fff94c0 	.word	0x1fff94c0

000128f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   128f8:	b500      	push	{lr}
   128fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128fc:	f7ee fe78 	bl	15f0 <Sys_GetCoreID>
   12900:	4603      	mov	r3, r0
   12902:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   12904:	4a0d      	ldr	r2, [pc, #52]	; (1293c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12906:	9b01      	ldr	r3, [sp, #4]
   12908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1290c:	1e5a      	subs	r2, r3, #1
   1290e:	490b      	ldr	r1, [pc, #44]	; (1293c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12910:	9b01      	ldr	r3, [sp, #4]
   12912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   12916:	4a0a      	ldr	r2, [pc, #40]	; (12940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   12918:	9b01      	ldr	r3, [sp, #4]
   1291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1291e:	f003 0301 	and.w	r3, r3, #1
   12922:	2b00      	cmp	r3, #0
   12924:	d106      	bne.n	12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   12926:	4a05      	ldr	r2, [pc, #20]	; (1293c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12928:	9b01      	ldr	r3, [sp, #4]
   1292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1292e:	2b00      	cmp	r3, #0
   12930:	d100      	bne.n	12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12932:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12934:	bf00      	nop
   12936:	b003      	add	sp, #12
   12938:	f85d fb04 	ldr.w	pc, [sp], #4
   1293c:	1fff94c4 	.word	0x1fff94c4
   12940:	1fff94c0 	.word	0x1fff94c0

00012944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   12944:	b500      	push	{lr}
   12946:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12948:	f7ee fe52 	bl	15f0 <Sys_GetCoreID>
   1294c:	4603      	mov	r3, r0
   1294e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   12950:	4a10      	ldr	r2, [pc, #64]	; (12994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12952:	9b01      	ldr	r3, [sp, #4]
   12954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12958:	2b00      	cmp	r3, #0
   1295a:	d10d      	bne.n	12978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1295c:	f7ee fa1e 	bl	d9c <Adc_schm_read_msr>
   12960:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12962:	9b00      	ldr	r3, [sp, #0]
   12964:	f003 0301 	and.w	r3, r3, #1
   12968:	2b00      	cmp	r3, #0
   1296a:	d100      	bne.n	1296e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1296c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   1296e:	490a      	ldr	r1, [pc, #40]	; (12998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   12970:	9b01      	ldr	r3, [sp, #4]
   12972:	9a00      	ldr	r2, [sp, #0]
   12974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   12978:	4a06      	ldr	r2, [pc, #24]	; (12994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   1297a:	9b01      	ldr	r3, [sp, #4]
   1297c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12980:	1c5a      	adds	r2, r3, #1
   12982:	4904      	ldr	r1, [pc, #16]	; (12994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12984:	9b01      	ldr	r3, [sp, #4]
   12986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1298a:	bf00      	nop
   1298c:	b003      	add	sp, #12
   1298e:	f85d fb04 	ldr.w	pc, [sp], #4
   12992:	bf00      	nop
   12994:	1fff94cc 	.word	0x1fff94cc
   12998:	1fff94c8 	.word	0x1fff94c8

0001299c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   1299c:	b500      	push	{lr}
   1299e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129a0:	f7ee fe26 	bl	15f0 <Sys_GetCoreID>
   129a4:	4603      	mov	r3, r0
   129a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   129a8:	4a0d      	ldr	r2, [pc, #52]	; (129e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   129aa:	9b01      	ldr	r3, [sp, #4]
   129ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129b0:	1e5a      	subs	r2, r3, #1
   129b2:	490b      	ldr	r1, [pc, #44]	; (129e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   129b4:	9b01      	ldr	r3, [sp, #4]
   129b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   129ba:	4a0a      	ldr	r2, [pc, #40]	; (129e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   129bc:	9b01      	ldr	r3, [sp, #4]
   129be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c2:	f003 0301 	and.w	r3, r3, #1
   129c6:	2b00      	cmp	r3, #0
   129c8:	d106      	bne.n	129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   129ca:	4a05      	ldr	r2, [pc, #20]	; (129e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   129cc:	9b01      	ldr	r3, [sp, #4]
   129ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129d2:	2b00      	cmp	r3, #0
   129d4:	d100      	bne.n	129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   129d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129d8:	bf00      	nop
   129da:	b003      	add	sp, #12
   129dc:	f85d fb04 	ldr.w	pc, [sp], #4
   129e0:	1fff94cc 	.word	0x1fff94cc
   129e4:	1fff94c8 	.word	0x1fff94c8

000129e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   129e8:	b500      	push	{lr}
   129ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129ec:	f7ee fe00 	bl	15f0 <Sys_GetCoreID>
   129f0:	4603      	mov	r3, r0
   129f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   129f4:	4a10      	ldr	r2, [pc, #64]	; (12a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   129f6:	9b01      	ldr	r3, [sp, #4]
   129f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129fc:	2b00      	cmp	r3, #0
   129fe:	d10d      	bne.n	12a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a00:	f7ee f9cc 	bl	d9c <Adc_schm_read_msr>
   12a04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a06:	9b00      	ldr	r3, [sp, #0]
   12a08:	f003 0301 	and.w	r3, r3, #1
   12a0c:	2b00      	cmp	r3, #0
   12a0e:	d100      	bne.n	12a12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   12a12:	490a      	ldr	r1, [pc, #40]	; (12a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   12a14:	9b01      	ldr	r3, [sp, #4]
   12a16:	9a00      	ldr	r2, [sp, #0]
   12a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   12a1c:	4a06      	ldr	r2, [pc, #24]	; (12a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12a1e:	9b01      	ldr	r3, [sp, #4]
   12a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a24:	1c5a      	adds	r2, r3, #1
   12a26:	4904      	ldr	r1, [pc, #16]	; (12a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12a28:	9b01      	ldr	r3, [sp, #4]
   12a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a2e:	bf00      	nop
   12a30:	b003      	add	sp, #12
   12a32:	f85d fb04 	ldr.w	pc, [sp], #4
   12a36:	bf00      	nop
   12a38:	1fff94d4 	.word	0x1fff94d4
   12a3c:	1fff94d0 	.word	0x1fff94d0

00012a40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   12a40:	b500      	push	{lr}
   12a42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a44:	f7ee fdd4 	bl	15f0 <Sys_GetCoreID>
   12a48:	4603      	mov	r3, r0
   12a4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   12a4c:	4a0d      	ldr	r2, [pc, #52]	; (12a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12a4e:	9b01      	ldr	r3, [sp, #4]
   12a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a54:	1e5a      	subs	r2, r3, #1
   12a56:	490b      	ldr	r1, [pc, #44]	; (12a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12a58:	9b01      	ldr	r3, [sp, #4]
   12a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   12a5e:	4a0a      	ldr	r2, [pc, #40]	; (12a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   12a60:	9b01      	ldr	r3, [sp, #4]
   12a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a66:	f003 0301 	and.w	r3, r3, #1
   12a6a:	2b00      	cmp	r3, #0
   12a6c:	d106      	bne.n	12a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   12a6e:	4a05      	ldr	r2, [pc, #20]	; (12a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12a70:	9b01      	ldr	r3, [sp, #4]
   12a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a76:	2b00      	cmp	r3, #0
   12a78:	d100      	bne.n	12a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a7c:	bf00      	nop
   12a7e:	b003      	add	sp, #12
   12a80:	f85d fb04 	ldr.w	pc, [sp], #4
   12a84:	1fff94d4 	.word	0x1fff94d4
   12a88:	1fff94d0 	.word	0x1fff94d0

00012a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12a8c:	b500      	push	{lr}
   12a8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a90:	f7ee fdae 	bl	15f0 <Sys_GetCoreID>
   12a94:	4603      	mov	r3, r0
   12a96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   12a98:	4a10      	ldr	r2, [pc, #64]	; (12adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12a9a:	9b01      	ldr	r3, [sp, #4]
   12a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa0:	2b00      	cmp	r3, #0
   12aa2:	d10d      	bne.n	12ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12aa4:	f7ee f97a 	bl	d9c <Adc_schm_read_msr>
   12aa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12aaa:	9b00      	ldr	r3, [sp, #0]
   12aac:	f003 0301 	and.w	r3, r3, #1
   12ab0:	2b00      	cmp	r3, #0
   12ab2:	d100      	bne.n	12ab6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ab4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   12ab6:	490a      	ldr	r1, [pc, #40]	; (12ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   12ab8:	9b01      	ldr	r3, [sp, #4]
   12aba:	9a00      	ldr	r2, [sp, #0]
   12abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   12ac0:	4a06      	ldr	r2, [pc, #24]	; (12adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12ac2:	9b01      	ldr	r3, [sp, #4]
   12ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac8:	1c5a      	adds	r2, r3, #1
   12aca:	4904      	ldr	r1, [pc, #16]	; (12adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12acc:	9b01      	ldr	r3, [sp, #4]
   12ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ad2:	bf00      	nop
   12ad4:	b003      	add	sp, #12
   12ad6:	f85d fb04 	ldr.w	pc, [sp], #4
   12ada:	bf00      	nop
   12adc:	1fff94dc 	.word	0x1fff94dc
   12ae0:	1fff94d8 	.word	0x1fff94d8

00012ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12ae4:	b500      	push	{lr}
   12ae6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ae8:	f7ee fd82 	bl	15f0 <Sys_GetCoreID>
   12aec:	4603      	mov	r3, r0
   12aee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   12af0:	4a0d      	ldr	r2, [pc, #52]	; (12b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12af2:	9b01      	ldr	r3, [sp, #4]
   12af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12af8:	1e5a      	subs	r2, r3, #1
   12afa:	490b      	ldr	r1, [pc, #44]	; (12b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12afc:	9b01      	ldr	r3, [sp, #4]
   12afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   12b02:	4a0a      	ldr	r2, [pc, #40]	; (12b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   12b04:	9b01      	ldr	r3, [sp, #4]
   12b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b0a:	f003 0301 	and.w	r3, r3, #1
   12b0e:	2b00      	cmp	r3, #0
   12b10:	d106      	bne.n	12b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   12b12:	4a05      	ldr	r2, [pc, #20]	; (12b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12b14:	9b01      	ldr	r3, [sp, #4]
   12b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b1a:	2b00      	cmp	r3, #0
   12b1c:	d100      	bne.n	12b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b20:	bf00      	nop
   12b22:	b003      	add	sp, #12
   12b24:	f85d fb04 	ldr.w	pc, [sp], #4
   12b28:	1fff94dc 	.word	0x1fff94dc
   12b2c:	1fff94d8 	.word	0x1fff94d8

00012b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12b30:	b500      	push	{lr}
   12b32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b34:	f7ee fd5c 	bl	15f0 <Sys_GetCoreID>
   12b38:	4603      	mov	r3, r0
   12b3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   12b3c:	4a10      	ldr	r2, [pc, #64]	; (12b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12b3e:	9b01      	ldr	r3, [sp, #4]
   12b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d10d      	bne.n	12b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b48:	f7ee f928 	bl	d9c <Adc_schm_read_msr>
   12b4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b4e:	9b00      	ldr	r3, [sp, #0]
   12b50:	f003 0301 	and.w	r3, r3, #1
   12b54:	2b00      	cmp	r3, #0
   12b56:	d100      	bne.n	12b5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   12b5a:	490a      	ldr	r1, [pc, #40]	; (12b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   12b5c:	9b01      	ldr	r3, [sp, #4]
   12b5e:	9a00      	ldr	r2, [sp, #0]
   12b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   12b64:	4a06      	ldr	r2, [pc, #24]	; (12b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12b66:	9b01      	ldr	r3, [sp, #4]
   12b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b6c:	1c5a      	adds	r2, r3, #1
   12b6e:	4904      	ldr	r1, [pc, #16]	; (12b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12b70:	9b01      	ldr	r3, [sp, #4]
   12b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b76:	bf00      	nop
   12b78:	b003      	add	sp, #12
   12b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b7e:	bf00      	nop
   12b80:	1fff94e4 	.word	0x1fff94e4
   12b84:	1fff94e0 	.word	0x1fff94e0

00012b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12b88:	b500      	push	{lr}
   12b8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b8c:	f7ee fd30 	bl	15f0 <Sys_GetCoreID>
   12b90:	4603      	mov	r3, r0
   12b92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   12b94:	4a0d      	ldr	r2, [pc, #52]	; (12bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12b96:	9b01      	ldr	r3, [sp, #4]
   12b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b9c:	1e5a      	subs	r2, r3, #1
   12b9e:	490b      	ldr	r1, [pc, #44]	; (12bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12ba0:	9b01      	ldr	r3, [sp, #4]
   12ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   12ba6:	4a0a      	ldr	r2, [pc, #40]	; (12bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   12ba8:	9b01      	ldr	r3, [sp, #4]
   12baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bae:	f003 0301 	and.w	r3, r3, #1
   12bb2:	2b00      	cmp	r3, #0
   12bb4:	d106      	bne.n	12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   12bb6:	4a05      	ldr	r2, [pc, #20]	; (12bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12bb8:	9b01      	ldr	r3, [sp, #4]
   12bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bbe:	2b00      	cmp	r3, #0
   12bc0:	d100      	bne.n	12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12bc4:	bf00      	nop
   12bc6:	b003      	add	sp, #12
   12bc8:	f85d fb04 	ldr.w	pc, [sp], #4
   12bcc:	1fff94e4 	.word	0x1fff94e4
   12bd0:	1fff94e0 	.word	0x1fff94e0

00012bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12bd4:	b500      	push	{lr}
   12bd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bd8:	f7ee fd0a 	bl	15f0 <Sys_GetCoreID>
   12bdc:	4603      	mov	r3, r0
   12bde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   12be0:	4a10      	ldr	r2, [pc, #64]	; (12c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12be2:	9b01      	ldr	r3, [sp, #4]
   12be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12be8:	2b00      	cmp	r3, #0
   12bea:	d10d      	bne.n	12c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12bec:	f7ee f8d6 	bl	d9c <Adc_schm_read_msr>
   12bf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bf2:	9b00      	ldr	r3, [sp, #0]
   12bf4:	f003 0301 	and.w	r3, r3, #1
   12bf8:	2b00      	cmp	r3, #0
   12bfa:	d100      	bne.n	12bfe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   12bfe:	490a      	ldr	r1, [pc, #40]	; (12c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   12c00:	9b01      	ldr	r3, [sp, #4]
   12c02:	9a00      	ldr	r2, [sp, #0]
   12c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   12c08:	4a06      	ldr	r2, [pc, #24]	; (12c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12c0a:	9b01      	ldr	r3, [sp, #4]
   12c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c10:	1c5a      	adds	r2, r3, #1
   12c12:	4904      	ldr	r1, [pc, #16]	; (12c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12c14:	9b01      	ldr	r3, [sp, #4]
   12c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c1a:	bf00      	nop
   12c1c:	b003      	add	sp, #12
   12c1e:	f85d fb04 	ldr.w	pc, [sp], #4
   12c22:	bf00      	nop
   12c24:	1fff94ec 	.word	0x1fff94ec
   12c28:	1fff94e8 	.word	0x1fff94e8

00012c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12c2c:	b500      	push	{lr}
   12c2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c30:	f7ee fcde 	bl	15f0 <Sys_GetCoreID>
   12c34:	4603      	mov	r3, r0
   12c36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   12c38:	4a0d      	ldr	r2, [pc, #52]	; (12c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12c3a:	9b01      	ldr	r3, [sp, #4]
   12c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c40:	1e5a      	subs	r2, r3, #1
   12c42:	490b      	ldr	r1, [pc, #44]	; (12c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12c44:	9b01      	ldr	r3, [sp, #4]
   12c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   12c4a:	4a0a      	ldr	r2, [pc, #40]	; (12c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   12c4c:	9b01      	ldr	r3, [sp, #4]
   12c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c52:	f003 0301 	and.w	r3, r3, #1
   12c56:	2b00      	cmp	r3, #0
   12c58:	d106      	bne.n	12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   12c5a:	4a05      	ldr	r2, [pc, #20]	; (12c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12c5c:	9b01      	ldr	r3, [sp, #4]
   12c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c62:	2b00      	cmp	r3, #0
   12c64:	d100      	bne.n	12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c68:	bf00      	nop
   12c6a:	b003      	add	sp, #12
   12c6c:	f85d fb04 	ldr.w	pc, [sp], #4
   12c70:	1fff94ec 	.word	0x1fff94ec
   12c74:	1fff94e8 	.word	0x1fff94e8

00012c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12c78:	b500      	push	{lr}
   12c7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c7c:	f7ee fcb8 	bl	15f0 <Sys_GetCoreID>
   12c80:	4603      	mov	r3, r0
   12c82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   12c84:	4a10      	ldr	r2, [pc, #64]	; (12cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12c86:	9b01      	ldr	r3, [sp, #4]
   12c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c8c:	2b00      	cmp	r3, #0
   12c8e:	d10d      	bne.n	12cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c90:	f7ee f884 	bl	d9c <Adc_schm_read_msr>
   12c94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c96:	9b00      	ldr	r3, [sp, #0]
   12c98:	f003 0301 	and.w	r3, r3, #1
   12c9c:	2b00      	cmp	r3, #0
   12c9e:	d100      	bne.n	12ca2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ca0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   12ca2:	490a      	ldr	r1, [pc, #40]	; (12ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   12ca4:	9b01      	ldr	r3, [sp, #4]
   12ca6:	9a00      	ldr	r2, [sp, #0]
   12ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   12cac:	4a06      	ldr	r2, [pc, #24]	; (12cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12cae:	9b01      	ldr	r3, [sp, #4]
   12cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cb4:	1c5a      	adds	r2, r3, #1
   12cb6:	4904      	ldr	r1, [pc, #16]	; (12cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12cb8:	9b01      	ldr	r3, [sp, #4]
   12cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cbe:	bf00      	nop
   12cc0:	b003      	add	sp, #12
   12cc2:	f85d fb04 	ldr.w	pc, [sp], #4
   12cc6:	bf00      	nop
   12cc8:	1fff94f4 	.word	0x1fff94f4
   12ccc:	1fff94f0 	.word	0x1fff94f0

00012cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12cd0:	b500      	push	{lr}
   12cd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cd4:	f7ee fc8c 	bl	15f0 <Sys_GetCoreID>
   12cd8:	4603      	mov	r3, r0
   12cda:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   12cdc:	4a0d      	ldr	r2, [pc, #52]	; (12d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12cde:	9b01      	ldr	r3, [sp, #4]
   12ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce4:	1e5a      	subs	r2, r3, #1
   12ce6:	490b      	ldr	r1, [pc, #44]	; (12d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12ce8:	9b01      	ldr	r3, [sp, #4]
   12cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   12cee:	4a0a      	ldr	r2, [pc, #40]	; (12d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   12cf0:	9b01      	ldr	r3, [sp, #4]
   12cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cf6:	f003 0301 	and.w	r3, r3, #1
   12cfa:	2b00      	cmp	r3, #0
   12cfc:	d106      	bne.n	12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   12cfe:	4a05      	ldr	r2, [pc, #20]	; (12d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12d00:	9b01      	ldr	r3, [sp, #4]
   12d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d06:	2b00      	cmp	r3, #0
   12d08:	d100      	bne.n	12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d0c:	bf00      	nop
   12d0e:	b003      	add	sp, #12
   12d10:	f85d fb04 	ldr.w	pc, [sp], #4
   12d14:	1fff94f4 	.word	0x1fff94f4
   12d18:	1fff94f0 	.word	0x1fff94f0

00012d1c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12d1c:	b500      	push	{lr}
   12d1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d20:	f7ee fc66 	bl	15f0 <Sys_GetCoreID>
   12d24:	4603      	mov	r3, r0
   12d26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   12d28:	4a10      	ldr	r2, [pc, #64]	; (12d6c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12d2a:	9b01      	ldr	r3, [sp, #4]
   12d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d30:	2b00      	cmp	r3, #0
   12d32:	d10d      	bne.n	12d50 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d34:	f7ee f83b 	bl	dae <Dio_schm_read_msr>
   12d38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d3a:	9b00      	ldr	r3, [sp, #0]
   12d3c:	f003 0301 	and.w	r3, r3, #1
   12d40:	2b00      	cmp	r3, #0
   12d42:	d100      	bne.n	12d46 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   12d46:	490a      	ldr	r1, [pc, #40]	; (12d70 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   12d48:	9b01      	ldr	r3, [sp, #4]
   12d4a:	9a00      	ldr	r2, [sp, #0]
   12d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   12d50:	4a06      	ldr	r2, [pc, #24]	; (12d6c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12d52:	9b01      	ldr	r3, [sp, #4]
   12d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d58:	1c5a      	adds	r2, r3, #1
   12d5a:	4904      	ldr	r1, [pc, #16]	; (12d6c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12d5c:	9b01      	ldr	r3, [sp, #4]
   12d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d62:	bf00      	nop
   12d64:	b003      	add	sp, #12
   12d66:	f85d fb04 	ldr.w	pc, [sp], #4
   12d6a:	bf00      	nop
   12d6c:	1fff94fc 	.word	0x1fff94fc
   12d70:	1fff94f8 	.word	0x1fff94f8

00012d74 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12d74:	b500      	push	{lr}
   12d76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d78:	f7ee fc3a 	bl	15f0 <Sys_GetCoreID>
   12d7c:	4603      	mov	r3, r0
   12d7e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   12d80:	4a0d      	ldr	r2, [pc, #52]	; (12db8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12d82:	9b01      	ldr	r3, [sp, #4]
   12d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d88:	1e5a      	subs	r2, r3, #1
   12d8a:	490b      	ldr	r1, [pc, #44]	; (12db8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12d8c:	9b01      	ldr	r3, [sp, #4]
   12d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   12d92:	4a0a      	ldr	r2, [pc, #40]	; (12dbc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   12d94:	9b01      	ldr	r3, [sp, #4]
   12d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d9a:	f003 0301 	and.w	r3, r3, #1
   12d9e:	2b00      	cmp	r3, #0
   12da0:	d106      	bne.n	12db0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   12da2:	4a05      	ldr	r2, [pc, #20]	; (12db8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12da4:	9b01      	ldr	r3, [sp, #4]
   12da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12daa:	2b00      	cmp	r3, #0
   12dac:	d100      	bne.n	12db0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12dae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12db0:	bf00      	nop
   12db2:	b003      	add	sp, #12
   12db4:	f85d fb04 	ldr.w	pc, [sp], #4
   12db8:	1fff94fc 	.word	0x1fff94fc
   12dbc:	1fff94f8 	.word	0x1fff94f8

00012dc0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   12dc0:	b500      	push	{lr}
   12dc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dc4:	f7ee fc14 	bl	15f0 <Sys_GetCoreID>
   12dc8:	4603      	mov	r3, r0
   12dca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   12dcc:	4a10      	ldr	r2, [pc, #64]	; (12e10 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   12dce:	9b01      	ldr	r3, [sp, #4]
   12dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dd4:	2b00      	cmp	r3, #0
   12dd6:	d10d      	bne.n	12df4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12dd8:	f7ed ffe9 	bl	dae <Dio_schm_read_msr>
   12ddc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12dde:	9b00      	ldr	r3, [sp, #0]
   12de0:	f003 0301 	and.w	r3, r3, #1
   12de4:	2b00      	cmp	r3, #0
   12de6:	d100      	bne.n	12dea <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12de8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   12dea:	490a      	ldr	r1, [pc, #40]	; (12e14 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   12dec:	9b01      	ldr	r3, [sp, #4]
   12dee:	9a00      	ldr	r2, [sp, #0]
   12df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   12df4:	4a06      	ldr	r2, [pc, #24]	; (12e10 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   12df6:	9b01      	ldr	r3, [sp, #4]
   12df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dfc:	1c5a      	adds	r2, r3, #1
   12dfe:	4904      	ldr	r1, [pc, #16]	; (12e10 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   12e00:	9b01      	ldr	r3, [sp, #4]
   12e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e06:	bf00      	nop
   12e08:	b003      	add	sp, #12
   12e0a:	f85d fb04 	ldr.w	pc, [sp], #4
   12e0e:	bf00      	nop
   12e10:	1fff9504 	.word	0x1fff9504
   12e14:	1fff9500 	.word	0x1fff9500

00012e18 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   12e18:	b500      	push	{lr}
   12e1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e1c:	f7ee fbe8 	bl	15f0 <Sys_GetCoreID>
   12e20:	4603      	mov	r3, r0
   12e22:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   12e24:	4a0d      	ldr	r2, [pc, #52]	; (12e5c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   12e26:	9b01      	ldr	r3, [sp, #4]
   12e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e2c:	1e5a      	subs	r2, r3, #1
   12e2e:	490b      	ldr	r1, [pc, #44]	; (12e5c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   12e30:	9b01      	ldr	r3, [sp, #4]
   12e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   12e36:	4a0a      	ldr	r2, [pc, #40]	; (12e60 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   12e38:	9b01      	ldr	r3, [sp, #4]
   12e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e3e:	f003 0301 	and.w	r3, r3, #1
   12e42:	2b00      	cmp	r3, #0
   12e44:	d106      	bne.n	12e54 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   12e46:	4a05      	ldr	r2, [pc, #20]	; (12e5c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   12e48:	9b01      	ldr	r3, [sp, #4]
   12e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e4e:	2b00      	cmp	r3, #0
   12e50:	d100      	bne.n	12e54 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e54:	bf00      	nop
   12e56:	b003      	add	sp, #12
   12e58:	f85d fb04 	ldr.w	pc, [sp], #4
   12e5c:	1fff9504 	.word	0x1fff9504
   12e60:	1fff9500 	.word	0x1fff9500

00012e64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   12e64:	b500      	push	{lr}
   12e66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e68:	f7ee fbc2 	bl	15f0 <Sys_GetCoreID>
   12e6c:	4603      	mov	r3, r0
   12e6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   12e70:	4a10      	ldr	r2, [pc, #64]	; (12eb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   12e72:	9b01      	ldr	r3, [sp, #4]
   12e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d10d      	bne.n	12e98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e7c:	f7ed ffa0 	bl	dc0 <Mcu_schm_read_msr>
   12e80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e82:	9b00      	ldr	r3, [sp, #0]
   12e84:	f003 0301 	and.w	r3, r3, #1
   12e88:	2b00      	cmp	r3, #0
   12e8a:	d100      	bne.n	12e8e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   12e8e:	490a      	ldr	r1, [pc, #40]	; (12eb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   12e90:	9b01      	ldr	r3, [sp, #4]
   12e92:	9a00      	ldr	r2, [sp, #0]
   12e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   12e98:	4a06      	ldr	r2, [pc, #24]	; (12eb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   12e9a:	9b01      	ldr	r3, [sp, #4]
   12e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ea0:	1c5a      	adds	r2, r3, #1
   12ea2:	4904      	ldr	r1, [pc, #16]	; (12eb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   12ea4:	9b01      	ldr	r3, [sp, #4]
   12ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12eaa:	bf00      	nop
   12eac:	b003      	add	sp, #12
   12eae:	f85d fb04 	ldr.w	pc, [sp], #4
   12eb2:	bf00      	nop
   12eb4:	1fff950c 	.word	0x1fff950c
   12eb8:	1fff9508 	.word	0x1fff9508

00012ebc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   12ebc:	b500      	push	{lr}
   12ebe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ec0:	f7ee fb96 	bl	15f0 <Sys_GetCoreID>
   12ec4:	4603      	mov	r3, r0
   12ec6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   12ec8:	4a0d      	ldr	r2, [pc, #52]	; (12f00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   12eca:	9b01      	ldr	r3, [sp, #4]
   12ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ed0:	1e5a      	subs	r2, r3, #1
   12ed2:	490b      	ldr	r1, [pc, #44]	; (12f00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   12ed4:	9b01      	ldr	r3, [sp, #4]
   12ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   12eda:	4a0a      	ldr	r2, [pc, #40]	; (12f04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   12edc:	9b01      	ldr	r3, [sp, #4]
   12ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ee2:	f003 0301 	and.w	r3, r3, #1
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	d106      	bne.n	12ef8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   12eea:	4a05      	ldr	r2, [pc, #20]	; (12f00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   12eec:	9b01      	ldr	r3, [sp, #4]
   12eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ef2:	2b00      	cmp	r3, #0
   12ef4:	d100      	bne.n	12ef8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ef6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ef8:	bf00      	nop
   12efa:	b003      	add	sp, #12
   12efc:	f85d fb04 	ldr.w	pc, [sp], #4
   12f00:	1fff950c 	.word	0x1fff950c
   12f04:	1fff9508 	.word	0x1fff9508

00012f08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   12f08:	b500      	push	{lr}
   12f0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f0c:	f7ee fb70 	bl	15f0 <Sys_GetCoreID>
   12f10:	4603      	mov	r3, r0
   12f12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   12f14:	4a10      	ldr	r2, [pc, #64]	; (12f58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   12f16:	9b01      	ldr	r3, [sp, #4]
   12f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f1c:	2b00      	cmp	r3, #0
   12f1e:	d10d      	bne.n	12f3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f20:	f7ed ff4e 	bl	dc0 <Mcu_schm_read_msr>
   12f24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f26:	9b00      	ldr	r3, [sp, #0]
   12f28:	f003 0301 	and.w	r3, r3, #1
   12f2c:	2b00      	cmp	r3, #0
   12f2e:	d100      	bne.n	12f32 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   12f32:	490a      	ldr	r1, [pc, #40]	; (12f5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   12f34:	9b01      	ldr	r3, [sp, #4]
   12f36:	9a00      	ldr	r2, [sp, #0]
   12f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   12f3c:	4a06      	ldr	r2, [pc, #24]	; (12f58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   12f3e:	9b01      	ldr	r3, [sp, #4]
   12f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f44:	1c5a      	adds	r2, r3, #1
   12f46:	4904      	ldr	r1, [pc, #16]	; (12f58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   12f48:	9b01      	ldr	r3, [sp, #4]
   12f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f4e:	bf00      	nop
   12f50:	b003      	add	sp, #12
   12f52:	f85d fb04 	ldr.w	pc, [sp], #4
   12f56:	bf00      	nop
   12f58:	1fff9514 	.word	0x1fff9514
   12f5c:	1fff9510 	.word	0x1fff9510

00012f60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   12f60:	b500      	push	{lr}
   12f62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f64:	f7ee fb44 	bl	15f0 <Sys_GetCoreID>
   12f68:	4603      	mov	r3, r0
   12f6a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   12f6c:	4a0d      	ldr	r2, [pc, #52]	; (12fa4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   12f6e:	9b01      	ldr	r3, [sp, #4]
   12f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f74:	1e5a      	subs	r2, r3, #1
   12f76:	490b      	ldr	r1, [pc, #44]	; (12fa4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   12f78:	9b01      	ldr	r3, [sp, #4]
   12f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   12f7e:	4a0a      	ldr	r2, [pc, #40]	; (12fa8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   12f80:	9b01      	ldr	r3, [sp, #4]
   12f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f86:	f003 0301 	and.w	r3, r3, #1
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d106      	bne.n	12f9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   12f8e:	4a05      	ldr	r2, [pc, #20]	; (12fa4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   12f90:	9b01      	ldr	r3, [sp, #4]
   12f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f96:	2b00      	cmp	r3, #0
   12f98:	d100      	bne.n	12f9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f9c:	bf00      	nop
   12f9e:	b003      	add	sp, #12
   12fa0:	f85d fb04 	ldr.w	pc, [sp], #4
   12fa4:	1fff9514 	.word	0x1fff9514
   12fa8:	1fff9510 	.word	0x1fff9510

00012fac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   12fac:	b500      	push	{lr}
   12fae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fb0:	f7ee fb1e 	bl	15f0 <Sys_GetCoreID>
   12fb4:	4603      	mov	r3, r0
   12fb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   12fb8:	4a10      	ldr	r2, [pc, #64]	; (12ffc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   12fba:	9b01      	ldr	r3, [sp, #4]
   12fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc0:	2b00      	cmp	r3, #0
   12fc2:	d10d      	bne.n	12fe0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12fc4:	f7ed fefc 	bl	dc0 <Mcu_schm_read_msr>
   12fc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12fca:	9b00      	ldr	r3, [sp, #0]
   12fcc:	f003 0301 	and.w	r3, r3, #1
   12fd0:	2b00      	cmp	r3, #0
   12fd2:	d100      	bne.n	12fd6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12fd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   12fd6:	490a      	ldr	r1, [pc, #40]	; (13000 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   12fd8:	9b01      	ldr	r3, [sp, #4]
   12fda:	9a00      	ldr	r2, [sp, #0]
   12fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   12fe0:	4a06      	ldr	r2, [pc, #24]	; (12ffc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   12fe2:	9b01      	ldr	r3, [sp, #4]
   12fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fe8:	1c5a      	adds	r2, r3, #1
   12fea:	4904      	ldr	r1, [pc, #16]	; (12ffc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   12fec:	9b01      	ldr	r3, [sp, #4]
   12fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ff2:	bf00      	nop
   12ff4:	b003      	add	sp, #12
   12ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   12ffa:	bf00      	nop
   12ffc:	1fff951c 	.word	0x1fff951c
   13000:	1fff9518 	.word	0x1fff9518

00013004 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   13004:	b500      	push	{lr}
   13006:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13008:	f7ee faf2 	bl	15f0 <Sys_GetCoreID>
   1300c:	4603      	mov	r3, r0
   1300e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   13010:	4a0d      	ldr	r2, [pc, #52]	; (13048 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   13012:	9b01      	ldr	r3, [sp, #4]
   13014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13018:	1e5a      	subs	r2, r3, #1
   1301a:	490b      	ldr	r1, [pc, #44]	; (13048 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1301c:	9b01      	ldr	r3, [sp, #4]
   1301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13022:	4a0a      	ldr	r2, [pc, #40]	; (1304c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   13024:	9b01      	ldr	r3, [sp, #4]
   13026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1302a:	f003 0301 	and.w	r3, r3, #1
   1302e:	2b00      	cmp	r3, #0
   13030:	d106      	bne.n	13040 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   13032:	4a05      	ldr	r2, [pc, #20]	; (13048 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   13034:	9b01      	ldr	r3, [sp, #4]
   13036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1303a:	2b00      	cmp	r3, #0
   1303c:	d100      	bne.n	13040 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1303e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13040:	bf00      	nop
   13042:	b003      	add	sp, #12
   13044:	f85d fb04 	ldr.w	pc, [sp], #4
   13048:	1fff951c 	.word	0x1fff951c
   1304c:	1fff9518 	.word	0x1fff9518

00013050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   13050:	b500      	push	{lr}
   13052:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13054:	f7ee facc 	bl	15f0 <Sys_GetCoreID>
   13058:	4603      	mov	r3, r0
   1305a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   1305c:	4a10      	ldr	r2, [pc, #64]	; (130a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   1305e:	9b01      	ldr	r3, [sp, #4]
   13060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13064:	2b00      	cmp	r3, #0
   13066:	d10d      	bne.n	13084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13068:	f7ed feb3 	bl	dd2 <Port_schm_read_msr>
   1306c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1306e:	9b00      	ldr	r3, [sp, #0]
   13070:	f003 0301 	and.w	r3, r3, #1
   13074:	2b00      	cmp	r3, #0
   13076:	d100      	bne.n	1307a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13078:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1307a:	490a      	ldr	r1, [pc, #40]	; (130a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   1307c:	9b01      	ldr	r3, [sp, #4]
   1307e:	9a00      	ldr	r2, [sp, #0]
   13080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   13084:	4a06      	ldr	r2, [pc, #24]	; (130a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   13086:	9b01      	ldr	r3, [sp, #4]
   13088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1308c:	1c5a      	adds	r2, r3, #1
   1308e:	4904      	ldr	r1, [pc, #16]	; (130a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   13090:	9b01      	ldr	r3, [sp, #4]
   13092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13096:	bf00      	nop
   13098:	b003      	add	sp, #12
   1309a:	f85d fb04 	ldr.w	pc, [sp], #4
   1309e:	bf00      	nop
   130a0:	1fff9524 	.word	0x1fff9524
   130a4:	1fff9520 	.word	0x1fff9520

000130a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   130a8:	b500      	push	{lr}
   130aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130ac:	f7ee faa0 	bl	15f0 <Sys_GetCoreID>
   130b0:	4603      	mov	r3, r0
   130b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   130b4:	4a0d      	ldr	r2, [pc, #52]	; (130ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   130b6:	9b01      	ldr	r3, [sp, #4]
   130b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130bc:	1e5a      	subs	r2, r3, #1
   130be:	490b      	ldr	r1, [pc, #44]	; (130ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   130c0:	9b01      	ldr	r3, [sp, #4]
   130c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   130c6:	4a0a      	ldr	r2, [pc, #40]	; (130f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   130c8:	9b01      	ldr	r3, [sp, #4]
   130ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130ce:	f003 0301 	and.w	r3, r3, #1
   130d2:	2b00      	cmp	r3, #0
   130d4:	d106      	bne.n	130e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   130d6:	4a05      	ldr	r2, [pc, #20]	; (130ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   130d8:	9b01      	ldr	r3, [sp, #4]
   130da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130de:	2b00      	cmp	r3, #0
   130e0:	d100      	bne.n	130e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130e4:	bf00      	nop
   130e6:	b003      	add	sp, #12
   130e8:	f85d fb04 	ldr.w	pc, [sp], #4
   130ec:	1fff9524 	.word	0x1fff9524
   130f0:	1fff9520 	.word	0x1fff9520

000130f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   130f4:	b500      	push	{lr}
   130f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130f8:	f7ee fa7a 	bl	15f0 <Sys_GetCoreID>
   130fc:	4603      	mov	r3, r0
   130fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   13100:	4a10      	ldr	r2, [pc, #64]	; (13144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   13102:	9b01      	ldr	r3, [sp, #4]
   13104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13108:	2b00      	cmp	r3, #0
   1310a:	d10d      	bne.n	13128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1310c:	f7ed fe61 	bl	dd2 <Port_schm_read_msr>
   13110:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13112:	9b00      	ldr	r3, [sp, #0]
   13114:	f003 0301 	and.w	r3, r3, #1
   13118:	2b00      	cmp	r3, #0
   1311a:	d100      	bne.n	1311e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1311c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1311e:	490a      	ldr	r1, [pc, #40]	; (13148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   13120:	9b01      	ldr	r3, [sp, #4]
   13122:	9a00      	ldr	r2, [sp, #0]
   13124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   13128:	4a06      	ldr	r2, [pc, #24]	; (13144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1312a:	9b01      	ldr	r3, [sp, #4]
   1312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13130:	1c5a      	adds	r2, r3, #1
   13132:	4904      	ldr	r1, [pc, #16]	; (13144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   13134:	9b01      	ldr	r3, [sp, #4]
   13136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1313a:	bf00      	nop
   1313c:	b003      	add	sp, #12
   1313e:	f85d fb04 	ldr.w	pc, [sp], #4
   13142:	bf00      	nop
   13144:	1fff952c 	.word	0x1fff952c
   13148:	1fff9528 	.word	0x1fff9528

0001314c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   1314c:	b500      	push	{lr}
   1314e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13150:	f7ee fa4e 	bl	15f0 <Sys_GetCoreID>
   13154:	4603      	mov	r3, r0
   13156:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   13158:	4a0d      	ldr	r2, [pc, #52]	; (13190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1315a:	9b01      	ldr	r3, [sp, #4]
   1315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13160:	1e5a      	subs	r2, r3, #1
   13162:	490b      	ldr	r1, [pc, #44]	; (13190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   13164:	9b01      	ldr	r3, [sp, #4]
   13166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1316a:	4a0a      	ldr	r2, [pc, #40]	; (13194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   1316c:	9b01      	ldr	r3, [sp, #4]
   1316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13172:	f003 0301 	and.w	r3, r3, #1
   13176:	2b00      	cmp	r3, #0
   13178:	d106      	bne.n	13188 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   1317a:	4a05      	ldr	r2, [pc, #20]	; (13190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1317c:	9b01      	ldr	r3, [sp, #4]
   1317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13182:	2b00      	cmp	r3, #0
   13184:	d100      	bne.n	13188 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13186:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13188:	bf00      	nop
   1318a:	b003      	add	sp, #12
   1318c:	f85d fb04 	ldr.w	pc, [sp], #4
   13190:	1fff952c 	.word	0x1fff952c
   13194:	1fff9528 	.word	0x1fff9528

00013198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   13198:	b500      	push	{lr}
   1319a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1319c:	f7ee fa28 	bl	15f0 <Sys_GetCoreID>
   131a0:	4603      	mov	r3, r0
   131a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   131a4:	4a10      	ldr	r2, [pc, #64]	; (131e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   131a6:	9b01      	ldr	r3, [sp, #4]
   131a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ac:	2b00      	cmp	r3, #0
   131ae:	d10d      	bne.n	131cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131b0:	f7ed fe0f 	bl	dd2 <Port_schm_read_msr>
   131b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131b6:	9b00      	ldr	r3, [sp, #0]
   131b8:	f003 0301 	and.w	r3, r3, #1
   131bc:	2b00      	cmp	r3, #0
   131be:	d100      	bne.n	131c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   131c2:	490a      	ldr	r1, [pc, #40]	; (131ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   131c4:	9b01      	ldr	r3, [sp, #4]
   131c6:	9a00      	ldr	r2, [sp, #0]
   131c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   131cc:	4a06      	ldr	r2, [pc, #24]	; (131e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   131ce:	9b01      	ldr	r3, [sp, #4]
   131d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131d4:	1c5a      	adds	r2, r3, #1
   131d6:	4904      	ldr	r1, [pc, #16]	; (131e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   131d8:	9b01      	ldr	r3, [sp, #4]
   131da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131de:	bf00      	nop
   131e0:	b003      	add	sp, #12
   131e2:	f85d fb04 	ldr.w	pc, [sp], #4
   131e6:	bf00      	nop
   131e8:	1fff9534 	.word	0x1fff9534
   131ec:	1fff9530 	.word	0x1fff9530

000131f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   131f0:	b500      	push	{lr}
   131f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131f4:	f7ee f9fc 	bl	15f0 <Sys_GetCoreID>
   131f8:	4603      	mov	r3, r0
   131fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   131fc:	4a0d      	ldr	r2, [pc, #52]	; (13234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   131fe:	9b01      	ldr	r3, [sp, #4]
   13200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13204:	1e5a      	subs	r2, r3, #1
   13206:	490b      	ldr	r1, [pc, #44]	; (13234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13208:	9b01      	ldr	r3, [sp, #4]
   1320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1320e:	4a0a      	ldr	r2, [pc, #40]	; (13238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   13210:	9b01      	ldr	r3, [sp, #4]
   13212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13216:	f003 0301 	and.w	r3, r3, #1
   1321a:	2b00      	cmp	r3, #0
   1321c:	d106      	bne.n	1322c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   1321e:	4a05      	ldr	r2, [pc, #20]	; (13234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13220:	9b01      	ldr	r3, [sp, #4]
   13222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13226:	2b00      	cmp	r3, #0
   13228:	d100      	bne.n	1322c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1322a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1322c:	bf00      	nop
   1322e:	b003      	add	sp, #12
   13230:	f85d fb04 	ldr.w	pc, [sp], #4
   13234:	1fff9534 	.word	0x1fff9534
   13238:	1fff9530 	.word	0x1fff9530

0001323c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   1323c:	b500      	push	{lr}
   1323e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13240:	f7ee f9d6 	bl	15f0 <Sys_GetCoreID>
   13244:	4603      	mov	r3, r0
   13246:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   13248:	4a10      	ldr	r2, [pc, #64]	; (1328c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1324a:	9b01      	ldr	r3, [sp, #4]
   1324c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13250:	2b00      	cmp	r3, #0
   13252:	d10d      	bne.n	13270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13254:	f7ed fdbd 	bl	dd2 <Port_schm_read_msr>
   13258:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1325a:	9b00      	ldr	r3, [sp, #0]
   1325c:	f003 0301 	and.w	r3, r3, #1
   13260:	2b00      	cmp	r3, #0
   13262:	d100      	bne.n	13266 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13264:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13266:	490a      	ldr	r1, [pc, #40]	; (13290 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   13268:	9b01      	ldr	r3, [sp, #4]
   1326a:	9a00      	ldr	r2, [sp, #0]
   1326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   13270:	4a06      	ldr	r2, [pc, #24]	; (1328c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   13272:	9b01      	ldr	r3, [sp, #4]
   13274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13278:	1c5a      	adds	r2, r3, #1
   1327a:	4904      	ldr	r1, [pc, #16]	; (1328c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1327c:	9b01      	ldr	r3, [sp, #4]
   1327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13282:	bf00      	nop
   13284:	b003      	add	sp, #12
   13286:	f85d fb04 	ldr.w	pc, [sp], #4
   1328a:	bf00      	nop
   1328c:	1fff953c 	.word	0x1fff953c
   13290:	1fff9538 	.word	0x1fff9538

00013294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   13294:	b500      	push	{lr}
   13296:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13298:	f7ee f9aa 	bl	15f0 <Sys_GetCoreID>
   1329c:	4603      	mov	r3, r0
   1329e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   132a0:	4a0d      	ldr	r2, [pc, #52]	; (132d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   132a2:	9b01      	ldr	r3, [sp, #4]
   132a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132a8:	1e5a      	subs	r2, r3, #1
   132aa:	490b      	ldr	r1, [pc, #44]	; (132d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   132ac:	9b01      	ldr	r3, [sp, #4]
   132ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   132b2:	4a0a      	ldr	r2, [pc, #40]	; (132dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   132b4:	9b01      	ldr	r3, [sp, #4]
   132b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ba:	f003 0301 	and.w	r3, r3, #1
   132be:	2b00      	cmp	r3, #0
   132c0:	d106      	bne.n	132d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   132c2:	4a05      	ldr	r2, [pc, #20]	; (132d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   132c4:	9b01      	ldr	r3, [sp, #4]
   132c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ca:	2b00      	cmp	r3, #0
   132cc:	d100      	bne.n	132d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132d0:	bf00      	nop
   132d2:	b003      	add	sp, #12
   132d4:	f85d fb04 	ldr.w	pc, [sp], #4
   132d8:	1fff953c 	.word	0x1fff953c
   132dc:	1fff9538 	.word	0x1fff9538

000132e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   132e0:	b500      	push	{lr}
   132e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132e4:	f7ee f984 	bl	15f0 <Sys_GetCoreID>
   132e8:	4603      	mov	r3, r0
   132ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   132ec:	4a10      	ldr	r2, [pc, #64]	; (13330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   132ee:	9b01      	ldr	r3, [sp, #4]
   132f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f4:	2b00      	cmp	r3, #0
   132f6:	d10d      	bne.n	13314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132f8:	f7ed fd6b 	bl	dd2 <Port_schm_read_msr>
   132fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132fe:	9b00      	ldr	r3, [sp, #0]
   13300:	f003 0301 	and.w	r3, r3, #1
   13304:	2b00      	cmp	r3, #0
   13306:	d100      	bne.n	1330a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13308:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1330a:	490a      	ldr	r1, [pc, #40]	; (13334 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   1330c:	9b01      	ldr	r3, [sp, #4]
   1330e:	9a00      	ldr	r2, [sp, #0]
   13310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   13314:	4a06      	ldr	r2, [pc, #24]	; (13330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13316:	9b01      	ldr	r3, [sp, #4]
   13318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1331c:	1c5a      	adds	r2, r3, #1
   1331e:	4904      	ldr	r1, [pc, #16]	; (13330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13320:	9b01      	ldr	r3, [sp, #4]
   13322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13326:	bf00      	nop
   13328:	b003      	add	sp, #12
   1332a:	f85d fb04 	ldr.w	pc, [sp], #4
   1332e:	bf00      	nop
   13330:	1fff9544 	.word	0x1fff9544
   13334:	1fff9540 	.word	0x1fff9540

00013338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   13338:	b500      	push	{lr}
   1333a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1333c:	f7ee f958 	bl	15f0 <Sys_GetCoreID>
   13340:	4603      	mov	r3, r0
   13342:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   13344:	4a0d      	ldr	r2, [pc, #52]	; (1337c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13346:	9b01      	ldr	r3, [sp, #4]
   13348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1334c:	1e5a      	subs	r2, r3, #1
   1334e:	490b      	ldr	r1, [pc, #44]	; (1337c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13350:	9b01      	ldr	r3, [sp, #4]
   13352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   13356:	4a0a      	ldr	r2, [pc, #40]	; (13380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   13358:	9b01      	ldr	r3, [sp, #4]
   1335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1335e:	f003 0301 	and.w	r3, r3, #1
   13362:	2b00      	cmp	r3, #0
   13364:	d106      	bne.n	13374 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   13366:	4a05      	ldr	r2, [pc, #20]	; (1337c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13368:	9b01      	ldr	r3, [sp, #4]
   1336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1336e:	2b00      	cmp	r3, #0
   13370:	d100      	bne.n	13374 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13372:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13374:	bf00      	nop
   13376:	b003      	add	sp, #12
   13378:	f85d fb04 	ldr.w	pc, [sp], #4
   1337c:	1fff9544 	.word	0x1fff9544
   13380:	1fff9540 	.word	0x1fff9540

00013384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   13384:	b500      	push	{lr}
   13386:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13388:	f7ee f932 	bl	15f0 <Sys_GetCoreID>
   1338c:	4603      	mov	r3, r0
   1338e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   13390:	4a10      	ldr	r2, [pc, #64]	; (133d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   13392:	9b01      	ldr	r3, [sp, #4]
   13394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13398:	2b00      	cmp	r3, #0
   1339a:	d10d      	bne.n	133b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1339c:	f7ed fd19 	bl	dd2 <Port_schm_read_msr>
   133a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133a2:	9b00      	ldr	r3, [sp, #0]
   133a4:	f003 0301 	and.w	r3, r3, #1
   133a8:	2b00      	cmp	r3, #0
   133aa:	d100      	bne.n	133ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   133ae:	490a      	ldr	r1, [pc, #40]	; (133d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   133b0:	9b01      	ldr	r3, [sp, #4]
   133b2:	9a00      	ldr	r2, [sp, #0]
   133b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   133b8:	4a06      	ldr	r2, [pc, #24]	; (133d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   133ba:	9b01      	ldr	r3, [sp, #4]
   133bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133c0:	1c5a      	adds	r2, r3, #1
   133c2:	4904      	ldr	r1, [pc, #16]	; (133d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133ca:	bf00      	nop
   133cc:	b003      	add	sp, #12
   133ce:	f85d fb04 	ldr.w	pc, [sp], #4
   133d2:	bf00      	nop
   133d4:	1fff954c 	.word	0x1fff954c
   133d8:	1fff9548 	.word	0x1fff9548

000133dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   133dc:	b500      	push	{lr}
   133de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133e0:	f7ee f906 	bl	15f0 <Sys_GetCoreID>
   133e4:	4603      	mov	r3, r0
   133e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   133e8:	4a0d      	ldr	r2, [pc, #52]	; (13420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   133ea:	9b01      	ldr	r3, [sp, #4]
   133ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133f0:	1e5a      	subs	r2, r3, #1
   133f2:	490b      	ldr	r1, [pc, #44]	; (13420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   133f4:	9b01      	ldr	r3, [sp, #4]
   133f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   133fa:	4a0a      	ldr	r2, [pc, #40]	; (13424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   133fc:	9b01      	ldr	r3, [sp, #4]
   133fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13402:	f003 0301 	and.w	r3, r3, #1
   13406:	2b00      	cmp	r3, #0
   13408:	d106      	bne.n	13418 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   1340a:	4a05      	ldr	r2, [pc, #20]	; (13420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1340c:	9b01      	ldr	r3, [sp, #4]
   1340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13412:	2b00      	cmp	r3, #0
   13414:	d100      	bne.n	13418 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13416:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13418:	bf00      	nop
   1341a:	b003      	add	sp, #12
   1341c:	f85d fb04 	ldr.w	pc, [sp], #4
   13420:	1fff954c 	.word	0x1fff954c
   13424:	1fff9548 	.word	0x1fff9548

00013428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   13428:	b500      	push	{lr}
   1342a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1342c:	f7ee f8e0 	bl	15f0 <Sys_GetCoreID>
   13430:	4603      	mov	r3, r0
   13432:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   13434:	4a10      	ldr	r2, [pc, #64]	; (13478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   13436:	9b01      	ldr	r3, [sp, #4]
   13438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1343c:	2b00      	cmp	r3, #0
   1343e:	d10d      	bne.n	1345c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13440:	f7ed fcc7 	bl	dd2 <Port_schm_read_msr>
   13444:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13446:	9b00      	ldr	r3, [sp, #0]
   13448:	f003 0301 	and.w	r3, r3, #1
   1344c:	2b00      	cmp	r3, #0
   1344e:	d100      	bne.n	13452 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13450:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   13452:	490a      	ldr	r1, [pc, #40]	; (1347c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   13454:	9b01      	ldr	r3, [sp, #4]
   13456:	9a00      	ldr	r2, [sp, #0]
   13458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   1345c:	4a06      	ldr	r2, [pc, #24]	; (13478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1345e:	9b01      	ldr	r3, [sp, #4]
   13460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13464:	1c5a      	adds	r2, r3, #1
   13466:	4904      	ldr	r1, [pc, #16]	; (13478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   13468:	9b01      	ldr	r3, [sp, #4]
   1346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1346e:	bf00      	nop
   13470:	b003      	add	sp, #12
   13472:	f85d fb04 	ldr.w	pc, [sp], #4
   13476:	bf00      	nop
   13478:	1fff9554 	.word	0x1fff9554
   1347c:	1fff9550 	.word	0x1fff9550

00013480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   13480:	b500      	push	{lr}
   13482:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13484:	f7ee f8b4 	bl	15f0 <Sys_GetCoreID>
   13488:	4603      	mov	r3, r0
   1348a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   1348c:	4a0d      	ldr	r2, [pc, #52]	; (134c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   1348e:	9b01      	ldr	r3, [sp, #4]
   13490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13494:	1e5a      	subs	r2, r3, #1
   13496:	490b      	ldr	r1, [pc, #44]	; (134c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   13498:	9b01      	ldr	r3, [sp, #4]
   1349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1349e:	4a0a      	ldr	r2, [pc, #40]	; (134c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   134a0:	9b01      	ldr	r3, [sp, #4]
   134a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134a6:	f003 0301 	and.w	r3, r3, #1
   134aa:	2b00      	cmp	r3, #0
   134ac:	d106      	bne.n	134bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   134ae:	4a05      	ldr	r2, [pc, #20]	; (134c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   134b0:	9b01      	ldr	r3, [sp, #4]
   134b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134b6:	2b00      	cmp	r3, #0
   134b8:	d100      	bne.n	134bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134bc:	bf00      	nop
   134be:	b003      	add	sp, #12
   134c0:	f85d fb04 	ldr.w	pc, [sp], #4
   134c4:	1fff9554 	.word	0x1fff9554
   134c8:	1fff9550 	.word	0x1fff9550

000134cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   134cc:	b500      	push	{lr}
   134ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134d0:	f7ee f88e 	bl	15f0 <Sys_GetCoreID>
   134d4:	4603      	mov	r3, r0
   134d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   134d8:	4a10      	ldr	r2, [pc, #64]	; (1351c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   134da:	9b01      	ldr	r3, [sp, #4]
   134dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e0:	2b00      	cmp	r3, #0
   134e2:	d10d      	bne.n	13500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134e4:	f7ed fc75 	bl	dd2 <Port_schm_read_msr>
   134e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134ea:	9b00      	ldr	r3, [sp, #0]
   134ec:	f003 0301 	and.w	r3, r3, #1
   134f0:	2b00      	cmp	r3, #0
   134f2:	d100      	bne.n	134f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   134f6:	490a      	ldr	r1, [pc, #40]	; (13520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   134f8:	9b01      	ldr	r3, [sp, #4]
   134fa:	9a00      	ldr	r2, [sp, #0]
   134fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   13500:	4a06      	ldr	r2, [pc, #24]	; (1351c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   13502:	9b01      	ldr	r3, [sp, #4]
   13504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13508:	1c5a      	adds	r2, r3, #1
   1350a:	4904      	ldr	r1, [pc, #16]	; (1351c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1350c:	9b01      	ldr	r3, [sp, #4]
   1350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13512:	bf00      	nop
   13514:	b003      	add	sp, #12
   13516:	f85d fb04 	ldr.w	pc, [sp], #4
   1351a:	bf00      	nop
   1351c:	1fff955c 	.word	0x1fff955c
   13520:	1fff9558 	.word	0x1fff9558

00013524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   13524:	b500      	push	{lr}
   13526:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13528:	f7ee f862 	bl	15f0 <Sys_GetCoreID>
   1352c:	4603      	mov	r3, r0
   1352e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   13530:	4a0d      	ldr	r2, [pc, #52]	; (13568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   13532:	9b01      	ldr	r3, [sp, #4]
   13534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13538:	1e5a      	subs	r2, r3, #1
   1353a:	490b      	ldr	r1, [pc, #44]	; (13568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1353c:	9b01      	ldr	r3, [sp, #4]
   1353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   13542:	4a0a      	ldr	r2, [pc, #40]	; (1356c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   13544:	9b01      	ldr	r3, [sp, #4]
   13546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1354a:	f003 0301 	and.w	r3, r3, #1
   1354e:	2b00      	cmp	r3, #0
   13550:	d106      	bne.n	13560 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   13552:	4a05      	ldr	r2, [pc, #20]	; (13568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   13554:	9b01      	ldr	r3, [sp, #4]
   13556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1355a:	2b00      	cmp	r3, #0
   1355c:	d100      	bne.n	13560 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1355e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13560:	bf00      	nop
   13562:	b003      	add	sp, #12
   13564:	f85d fb04 	ldr.w	pc, [sp], #4
   13568:	1fff955c 	.word	0x1fff955c
   1356c:	1fff9558 	.word	0x1fff9558

00013570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   13570:	b500      	push	{lr}
   13572:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13574:	f7ee f83c 	bl	15f0 <Sys_GetCoreID>
   13578:	4603      	mov	r3, r0
   1357a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   1357c:	4a10      	ldr	r2, [pc, #64]	; (135c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   1357e:	9b01      	ldr	r3, [sp, #4]
   13580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13584:	2b00      	cmp	r3, #0
   13586:	d10d      	bne.n	135a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13588:	f7ed fc23 	bl	dd2 <Port_schm_read_msr>
   1358c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1358e:	9b00      	ldr	r3, [sp, #0]
   13590:	f003 0301 	and.w	r3, r3, #1
   13594:	2b00      	cmp	r3, #0
   13596:	d100      	bne.n	1359a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13598:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1359a:	490a      	ldr	r1, [pc, #40]	; (135c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   1359c:	9b01      	ldr	r3, [sp, #4]
   1359e:	9a00      	ldr	r2, [sp, #0]
   135a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   135a4:	4a06      	ldr	r2, [pc, #24]	; (135c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   135a6:	9b01      	ldr	r3, [sp, #4]
   135a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135ac:	1c5a      	adds	r2, r3, #1
   135ae:	4904      	ldr	r1, [pc, #16]	; (135c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   135b0:	9b01      	ldr	r3, [sp, #4]
   135b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135b6:	bf00      	nop
   135b8:	b003      	add	sp, #12
   135ba:	f85d fb04 	ldr.w	pc, [sp], #4
   135be:	bf00      	nop
   135c0:	1fff9564 	.word	0x1fff9564
   135c4:	1fff9560 	.word	0x1fff9560

000135c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   135c8:	b500      	push	{lr}
   135ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135cc:	f7ee f810 	bl	15f0 <Sys_GetCoreID>
   135d0:	4603      	mov	r3, r0
   135d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   135d4:	4a0d      	ldr	r2, [pc, #52]	; (1360c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   135d6:	9b01      	ldr	r3, [sp, #4]
   135d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135dc:	1e5a      	subs	r2, r3, #1
   135de:	490b      	ldr	r1, [pc, #44]	; (1360c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   135e0:	9b01      	ldr	r3, [sp, #4]
   135e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   135e6:	4a0a      	ldr	r2, [pc, #40]	; (13610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   135e8:	9b01      	ldr	r3, [sp, #4]
   135ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135ee:	f003 0301 	and.w	r3, r3, #1
   135f2:	2b00      	cmp	r3, #0
   135f4:	d106      	bne.n	13604 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   135f6:	4a05      	ldr	r2, [pc, #20]	; (1360c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   135f8:	9b01      	ldr	r3, [sp, #4]
   135fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135fe:	2b00      	cmp	r3, #0
   13600:	d100      	bne.n	13604 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13602:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13604:	bf00      	nop
   13606:	b003      	add	sp, #12
   13608:	f85d fb04 	ldr.w	pc, [sp], #4
   1360c:	1fff9564 	.word	0x1fff9564
   13610:	1fff9560 	.word	0x1fff9560

00013614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   13614:	b500      	push	{lr}
   13616:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13618:	f7ed ffea 	bl	15f0 <Sys_GetCoreID>
   1361c:	4603      	mov	r3, r0
   1361e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   13620:	4a10      	ldr	r2, [pc, #64]	; (13664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   13622:	9b01      	ldr	r3, [sp, #4]
   13624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13628:	2b00      	cmp	r3, #0
   1362a:	d10d      	bne.n	13648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1362c:	f7ed fbd1 	bl	dd2 <Port_schm_read_msr>
   13630:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13632:	9b00      	ldr	r3, [sp, #0]
   13634:	f003 0301 	and.w	r3, r3, #1
   13638:	2b00      	cmp	r3, #0
   1363a:	d100      	bne.n	1363e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1363c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1363e:	490a      	ldr	r1, [pc, #40]	; (13668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   13640:	9b01      	ldr	r3, [sp, #4]
   13642:	9a00      	ldr	r2, [sp, #0]
   13644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   13648:	4a06      	ldr	r2, [pc, #24]	; (13664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1364a:	9b01      	ldr	r3, [sp, #4]
   1364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13650:	1c5a      	adds	r2, r3, #1
   13652:	4904      	ldr	r1, [pc, #16]	; (13664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   13654:	9b01      	ldr	r3, [sp, #4]
   13656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1365a:	bf00      	nop
   1365c:	b003      	add	sp, #12
   1365e:	f85d fb04 	ldr.w	pc, [sp], #4
   13662:	bf00      	nop
   13664:	1fff956c 	.word	0x1fff956c
   13668:	1fff9568 	.word	0x1fff9568

0001366c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   1366c:	b500      	push	{lr}
   1366e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13670:	f7ed ffbe 	bl	15f0 <Sys_GetCoreID>
   13674:	4603      	mov	r3, r0
   13676:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   13678:	4a0d      	ldr	r2, [pc, #52]	; (136b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1367a:	9b01      	ldr	r3, [sp, #4]
   1367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13680:	1e5a      	subs	r2, r3, #1
   13682:	490b      	ldr	r1, [pc, #44]	; (136b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   13684:	9b01      	ldr	r3, [sp, #4]
   13686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1368a:	4a0a      	ldr	r2, [pc, #40]	; (136b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   1368c:	9b01      	ldr	r3, [sp, #4]
   1368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13692:	f003 0301 	and.w	r3, r3, #1
   13696:	2b00      	cmp	r3, #0
   13698:	d106      	bne.n	136a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   1369a:	4a05      	ldr	r2, [pc, #20]	; (136b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1369c:	9b01      	ldr	r3, [sp, #4]
   1369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136a2:	2b00      	cmp	r3, #0
   136a4:	d100      	bne.n	136a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136a8:	bf00      	nop
   136aa:	b003      	add	sp, #12
   136ac:	f85d fb04 	ldr.w	pc, [sp], #4
   136b0:	1fff956c 	.word	0x1fff956c
   136b4:	1fff9568 	.word	0x1fff9568

000136b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   136b8:	b500      	push	{lr}
   136ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136bc:	f7ed ff98 	bl	15f0 <Sys_GetCoreID>
   136c0:	4603      	mov	r3, r0
   136c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   136c4:	4a10      	ldr	r2, [pc, #64]	; (13708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   136c6:	9b01      	ldr	r3, [sp, #4]
   136c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136cc:	2b00      	cmp	r3, #0
   136ce:	d10d      	bne.n	136ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136d0:	f7ed fb7f 	bl	dd2 <Port_schm_read_msr>
   136d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   136d6:	9b00      	ldr	r3, [sp, #0]
   136d8:	f003 0301 	and.w	r3, r3, #1
   136dc:	2b00      	cmp	r3, #0
   136de:	d100      	bne.n	136e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   136e2:	490a      	ldr	r1, [pc, #40]	; (1370c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   136e4:	9b01      	ldr	r3, [sp, #4]
   136e6:	9a00      	ldr	r2, [sp, #0]
   136e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   136ec:	4a06      	ldr	r2, [pc, #24]	; (13708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   136ee:	9b01      	ldr	r3, [sp, #4]
   136f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136f4:	1c5a      	adds	r2, r3, #1
   136f6:	4904      	ldr	r1, [pc, #16]	; (13708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   136f8:	9b01      	ldr	r3, [sp, #4]
   136fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136fe:	bf00      	nop
   13700:	b003      	add	sp, #12
   13702:	f85d fb04 	ldr.w	pc, [sp], #4
   13706:	bf00      	nop
   13708:	1fff9574 	.word	0x1fff9574
   1370c:	1fff9570 	.word	0x1fff9570

00013710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   13710:	b500      	push	{lr}
   13712:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13714:	f7ed ff6c 	bl	15f0 <Sys_GetCoreID>
   13718:	4603      	mov	r3, r0
   1371a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   1371c:	4a0d      	ldr	r2, [pc, #52]	; (13754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   1371e:	9b01      	ldr	r3, [sp, #4]
   13720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13724:	1e5a      	subs	r2, r3, #1
   13726:	490b      	ldr	r1, [pc, #44]	; (13754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13728:	9b01      	ldr	r3, [sp, #4]
   1372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1372e:	4a0a      	ldr	r2, [pc, #40]	; (13758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   13730:	9b01      	ldr	r3, [sp, #4]
   13732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13736:	f003 0301 	and.w	r3, r3, #1
   1373a:	2b00      	cmp	r3, #0
   1373c:	d106      	bne.n	1374c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   1373e:	4a05      	ldr	r2, [pc, #20]	; (13754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13740:	9b01      	ldr	r3, [sp, #4]
   13742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13746:	2b00      	cmp	r3, #0
   13748:	d100      	bne.n	1374c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1374a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1374c:	bf00      	nop
   1374e:	b003      	add	sp, #12
   13750:	f85d fb04 	ldr.w	pc, [sp], #4
   13754:	1fff9574 	.word	0x1fff9574
   13758:	1fff9570 	.word	0x1fff9570

0001375c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   1375c:	b500      	push	{lr}
   1375e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13760:	f7ed ff46 	bl	15f0 <Sys_GetCoreID>
   13764:	4603      	mov	r3, r0
   13766:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   13768:	4a10      	ldr	r2, [pc, #64]	; (137ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1376a:	9b01      	ldr	r3, [sp, #4]
   1376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13770:	2b00      	cmp	r3, #0
   13772:	d10d      	bne.n	13790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13774:	f7ed fb2d 	bl	dd2 <Port_schm_read_msr>
   13778:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1377a:	9b00      	ldr	r3, [sp, #0]
   1377c:	f003 0301 	and.w	r3, r3, #1
   13780:	2b00      	cmp	r3, #0
   13782:	d100      	bne.n	13786 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13784:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   13786:	490a      	ldr	r1, [pc, #40]	; (137b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   13788:	9b01      	ldr	r3, [sp, #4]
   1378a:	9a00      	ldr	r2, [sp, #0]
   1378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   13790:	4a06      	ldr	r2, [pc, #24]	; (137ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   13792:	9b01      	ldr	r3, [sp, #4]
   13794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13798:	1c5a      	adds	r2, r3, #1
   1379a:	4904      	ldr	r1, [pc, #16]	; (137ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1379c:	9b01      	ldr	r3, [sp, #4]
   1379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137a2:	bf00      	nop
   137a4:	b003      	add	sp, #12
   137a6:	f85d fb04 	ldr.w	pc, [sp], #4
   137aa:	bf00      	nop
   137ac:	1fff957c 	.word	0x1fff957c
   137b0:	1fff9578 	.word	0x1fff9578

000137b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   137b4:	b500      	push	{lr}
   137b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137b8:	f7ed ff1a 	bl	15f0 <Sys_GetCoreID>
   137bc:	4603      	mov	r3, r0
   137be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   137c0:	4a0d      	ldr	r2, [pc, #52]	; (137f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   137c2:	9b01      	ldr	r3, [sp, #4]
   137c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137c8:	1e5a      	subs	r2, r3, #1
   137ca:	490b      	ldr	r1, [pc, #44]	; (137f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   137cc:	9b01      	ldr	r3, [sp, #4]
   137ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   137d2:	4a0a      	ldr	r2, [pc, #40]	; (137fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   137d4:	9b01      	ldr	r3, [sp, #4]
   137d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137da:	f003 0301 	and.w	r3, r3, #1
   137de:	2b00      	cmp	r3, #0
   137e0:	d106      	bne.n	137f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   137e2:	4a05      	ldr	r2, [pc, #20]	; (137f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   137e4:	9b01      	ldr	r3, [sp, #4]
   137e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ea:	2b00      	cmp	r3, #0
   137ec:	d100      	bne.n	137f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137f0:	bf00      	nop
   137f2:	b003      	add	sp, #12
   137f4:	f85d fb04 	ldr.w	pc, [sp], #4
   137f8:	1fff957c 	.word	0x1fff957c
   137fc:	1fff9578 	.word	0x1fff9578

00013800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13800:	b500      	push	{lr}
   13802:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13804:	f7ed fef4 	bl	15f0 <Sys_GetCoreID>
   13808:	4603      	mov	r3, r0
   1380a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   1380c:	4a10      	ldr	r2, [pc, #64]	; (13850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1380e:	9b01      	ldr	r3, [sp, #4]
   13810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13814:	2b00      	cmp	r3, #0
   13816:	d10d      	bne.n	13834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13818:	f7ed fadb 	bl	dd2 <Port_schm_read_msr>
   1381c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1381e:	9b00      	ldr	r3, [sp, #0]
   13820:	f003 0301 	and.w	r3, r3, #1
   13824:	2b00      	cmp	r3, #0
   13826:	d100      	bne.n	1382a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13828:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1382a:	490a      	ldr	r1, [pc, #40]	; (13854 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   1382c:	9b01      	ldr	r3, [sp, #4]
   1382e:	9a00      	ldr	r2, [sp, #0]
   13830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   13834:	4a06      	ldr	r2, [pc, #24]	; (13850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13836:	9b01      	ldr	r3, [sp, #4]
   13838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1383c:	1c5a      	adds	r2, r3, #1
   1383e:	4904      	ldr	r1, [pc, #16]	; (13850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13840:	9b01      	ldr	r3, [sp, #4]
   13842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13846:	bf00      	nop
   13848:	b003      	add	sp, #12
   1384a:	f85d fb04 	ldr.w	pc, [sp], #4
   1384e:	bf00      	nop
   13850:	1fff9584 	.word	0x1fff9584
   13854:	1fff9580 	.word	0x1fff9580

00013858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13858:	b500      	push	{lr}
   1385a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1385c:	f7ed fec8 	bl	15f0 <Sys_GetCoreID>
   13860:	4603      	mov	r3, r0
   13862:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   13864:	4a0d      	ldr	r2, [pc, #52]	; (1389c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13866:	9b01      	ldr	r3, [sp, #4]
   13868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1386c:	1e5a      	subs	r2, r3, #1
   1386e:	490b      	ldr	r1, [pc, #44]	; (1389c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13870:	9b01      	ldr	r3, [sp, #4]
   13872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   13876:	4a0a      	ldr	r2, [pc, #40]	; (138a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   13878:	9b01      	ldr	r3, [sp, #4]
   1387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1387e:	f003 0301 	and.w	r3, r3, #1
   13882:	2b00      	cmp	r3, #0
   13884:	d106      	bne.n	13894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   13886:	4a05      	ldr	r2, [pc, #20]	; (1389c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13888:	9b01      	ldr	r3, [sp, #4]
   1388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1388e:	2b00      	cmp	r3, #0
   13890:	d100      	bne.n	13894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13892:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13894:	bf00      	nop
   13896:	b003      	add	sp, #12
   13898:	f85d fb04 	ldr.w	pc, [sp], #4
   1389c:	1fff9584 	.word	0x1fff9584
   138a0:	1fff9580 	.word	0x1fff9580

000138a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   138a4:	b500      	push	{lr}
   138a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138a8:	f7ed fea2 	bl	15f0 <Sys_GetCoreID>
   138ac:	4603      	mov	r3, r0
   138ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   138b0:	4a10      	ldr	r2, [pc, #64]	; (138f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   138b2:	9b01      	ldr	r3, [sp, #4]
   138b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138b8:	2b00      	cmp	r3, #0
   138ba:	d10d      	bne.n	138d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138bc:	f7ed fa89 	bl	dd2 <Port_schm_read_msr>
   138c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138c2:	9b00      	ldr	r3, [sp, #0]
   138c4:	f003 0301 	and.w	r3, r3, #1
   138c8:	2b00      	cmp	r3, #0
   138ca:	d100      	bne.n	138ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   138ce:	490a      	ldr	r1, [pc, #40]	; (138f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   138d0:	9b01      	ldr	r3, [sp, #4]
   138d2:	9a00      	ldr	r2, [sp, #0]
   138d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   138d8:	4a06      	ldr	r2, [pc, #24]	; (138f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   138da:	9b01      	ldr	r3, [sp, #4]
   138dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138e0:	1c5a      	adds	r2, r3, #1
   138e2:	4904      	ldr	r1, [pc, #16]	; (138f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   138e4:	9b01      	ldr	r3, [sp, #4]
   138e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138ea:	bf00      	nop
   138ec:	b003      	add	sp, #12
   138ee:	f85d fb04 	ldr.w	pc, [sp], #4
   138f2:	bf00      	nop
   138f4:	1fff958c 	.word	0x1fff958c
   138f8:	1fff9588 	.word	0x1fff9588

000138fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   138fc:	b500      	push	{lr}
   138fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13900:	f7ed fe76 	bl	15f0 <Sys_GetCoreID>
   13904:	4603      	mov	r3, r0
   13906:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   13908:	4a0d      	ldr	r2, [pc, #52]	; (13940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1390a:	9b01      	ldr	r3, [sp, #4]
   1390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13910:	1e5a      	subs	r2, r3, #1
   13912:	490b      	ldr	r1, [pc, #44]	; (13940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13914:	9b01      	ldr	r3, [sp, #4]
   13916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1391a:	4a0a      	ldr	r2, [pc, #40]	; (13944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   1391c:	9b01      	ldr	r3, [sp, #4]
   1391e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13922:	f003 0301 	and.w	r3, r3, #1
   13926:	2b00      	cmp	r3, #0
   13928:	d106      	bne.n	13938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   1392a:	4a05      	ldr	r2, [pc, #20]	; (13940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1392c:	9b01      	ldr	r3, [sp, #4]
   1392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13932:	2b00      	cmp	r3, #0
   13934:	d100      	bne.n	13938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13936:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13938:	bf00      	nop
   1393a:	b003      	add	sp, #12
   1393c:	f85d fb04 	ldr.w	pc, [sp], #4
   13940:	1fff958c 	.word	0x1fff958c
   13944:	1fff9588 	.word	0x1fff9588

00013948 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   13948:	b500      	push	{lr}
   1394a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1394c:	f7ed fe50 	bl	15f0 <Sys_GetCoreID>
   13950:	4603      	mov	r3, r0
   13952:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   13954:	4a10      	ldr	r2, [pc, #64]	; (13998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13956:	9b01      	ldr	r3, [sp, #4]
   13958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1395c:	2b00      	cmp	r3, #0
   1395e:	d10d      	bne.n	1397c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13960:	f7ed fa37 	bl	dd2 <Port_schm_read_msr>
   13964:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13966:	9b00      	ldr	r3, [sp, #0]
   13968:	f003 0301 	and.w	r3, r3, #1
   1396c:	2b00      	cmp	r3, #0
   1396e:	d100      	bne.n	13972 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13970:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   13972:	490a      	ldr	r1, [pc, #40]	; (1399c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   13974:	9b01      	ldr	r3, [sp, #4]
   13976:	9a00      	ldr	r2, [sp, #0]
   13978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   1397c:	4a06      	ldr	r2, [pc, #24]	; (13998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1397e:	9b01      	ldr	r3, [sp, #4]
   13980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13984:	1c5a      	adds	r2, r3, #1
   13986:	4904      	ldr	r1, [pc, #16]	; (13998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13988:	9b01      	ldr	r3, [sp, #4]
   1398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1398e:	bf00      	nop
   13990:	b003      	add	sp, #12
   13992:	f85d fb04 	ldr.w	pc, [sp], #4
   13996:	bf00      	nop
   13998:	1fff9594 	.word	0x1fff9594
   1399c:	1fff9590 	.word	0x1fff9590

000139a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   139a0:	b500      	push	{lr}
   139a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139a4:	f7ed fe24 	bl	15f0 <Sys_GetCoreID>
   139a8:	4603      	mov	r3, r0
   139aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   139ac:	4a0d      	ldr	r2, [pc, #52]	; (139e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   139ae:	9b01      	ldr	r3, [sp, #4]
   139b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b4:	1e5a      	subs	r2, r3, #1
   139b6:	490b      	ldr	r1, [pc, #44]	; (139e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   139b8:	9b01      	ldr	r3, [sp, #4]
   139ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   139be:	4a0a      	ldr	r2, [pc, #40]	; (139e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   139c0:	9b01      	ldr	r3, [sp, #4]
   139c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139c6:	f003 0301 	and.w	r3, r3, #1
   139ca:	2b00      	cmp	r3, #0
   139cc:	d106      	bne.n	139dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   139ce:	4a05      	ldr	r2, [pc, #20]	; (139e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   139d0:	9b01      	ldr	r3, [sp, #4]
   139d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139d6:	2b00      	cmp	r3, #0
   139d8:	d100      	bne.n	139dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139dc:	bf00      	nop
   139de:	b003      	add	sp, #12
   139e0:	f85d fb04 	ldr.w	pc, [sp], #4
   139e4:	1fff9594 	.word	0x1fff9594
   139e8:	1fff9590 	.word	0x1fff9590

000139ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   139ec:	b500      	push	{lr}
   139ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139f0:	f7ed fdfe 	bl	15f0 <Sys_GetCoreID>
   139f4:	4603      	mov	r3, r0
   139f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   139f8:	4a10      	ldr	r2, [pc, #64]	; (13a3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   139fa:	9b01      	ldr	r3, [sp, #4]
   139fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a00:	2b00      	cmp	r3, #0
   13a02:	d10d      	bne.n	13a20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a04:	f7ed f9e5 	bl	dd2 <Port_schm_read_msr>
   13a08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a0a:	9b00      	ldr	r3, [sp, #0]
   13a0c:	f003 0301 	and.w	r3, r3, #1
   13a10:	2b00      	cmp	r3, #0
   13a12:	d100      	bne.n	13a16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   13a16:	490a      	ldr	r1, [pc, #40]	; (13a40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   13a18:	9b01      	ldr	r3, [sp, #4]
   13a1a:	9a00      	ldr	r2, [sp, #0]
   13a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   13a20:	4a06      	ldr	r2, [pc, #24]	; (13a3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13a22:	9b01      	ldr	r3, [sp, #4]
   13a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a28:	1c5a      	adds	r2, r3, #1
   13a2a:	4904      	ldr	r1, [pc, #16]	; (13a3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13a2c:	9b01      	ldr	r3, [sp, #4]
   13a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a32:	bf00      	nop
   13a34:	b003      	add	sp, #12
   13a36:	f85d fb04 	ldr.w	pc, [sp], #4
   13a3a:	bf00      	nop
   13a3c:	1fff959c 	.word	0x1fff959c
   13a40:	1fff9598 	.word	0x1fff9598

00013a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   13a44:	b500      	push	{lr}
   13a46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a48:	f7ed fdd2 	bl	15f0 <Sys_GetCoreID>
   13a4c:	4603      	mov	r3, r0
   13a4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   13a50:	4a0d      	ldr	r2, [pc, #52]	; (13a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13a52:	9b01      	ldr	r3, [sp, #4]
   13a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a58:	1e5a      	subs	r2, r3, #1
   13a5a:	490b      	ldr	r1, [pc, #44]	; (13a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13a5c:	9b01      	ldr	r3, [sp, #4]
   13a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   13a62:	4a0a      	ldr	r2, [pc, #40]	; (13a8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   13a64:	9b01      	ldr	r3, [sp, #4]
   13a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a6a:	f003 0301 	and.w	r3, r3, #1
   13a6e:	2b00      	cmp	r3, #0
   13a70:	d106      	bne.n	13a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   13a72:	4a05      	ldr	r2, [pc, #20]	; (13a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13a74:	9b01      	ldr	r3, [sp, #4]
   13a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a7a:	2b00      	cmp	r3, #0
   13a7c:	d100      	bne.n	13a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a80:	bf00      	nop
   13a82:	b003      	add	sp, #12
   13a84:	f85d fb04 	ldr.w	pc, [sp], #4
   13a88:	1fff959c 	.word	0x1fff959c
   13a8c:	1fff9598 	.word	0x1fff9598

00013a90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13a90:	b500      	push	{lr}
   13a92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a94:	f7ed fdac 	bl	15f0 <Sys_GetCoreID>
   13a98:	4603      	mov	r3, r0
   13a9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   13a9c:	4a10      	ldr	r2, [pc, #64]	; (13ae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13a9e:	9b01      	ldr	r3, [sp, #4]
   13aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aa4:	2b00      	cmp	r3, #0
   13aa6:	d10d      	bne.n	13ac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13aa8:	f7ed f993 	bl	dd2 <Port_schm_read_msr>
   13aac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13aae:	9b00      	ldr	r3, [sp, #0]
   13ab0:	f003 0301 	and.w	r3, r3, #1
   13ab4:	2b00      	cmp	r3, #0
   13ab6:	d100      	bne.n	13aba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ab8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   13aba:	490a      	ldr	r1, [pc, #40]	; (13ae4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   13abc:	9b01      	ldr	r3, [sp, #4]
   13abe:	9a00      	ldr	r2, [sp, #0]
   13ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   13ac4:	4a06      	ldr	r2, [pc, #24]	; (13ae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13ac6:	9b01      	ldr	r3, [sp, #4]
   13ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13acc:	1c5a      	adds	r2, r3, #1
   13ace:	4904      	ldr	r1, [pc, #16]	; (13ae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13ad0:	9b01      	ldr	r3, [sp, #4]
   13ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ad6:	bf00      	nop
   13ad8:	b003      	add	sp, #12
   13ada:	f85d fb04 	ldr.w	pc, [sp], #4
   13ade:	bf00      	nop
   13ae0:	1fff95a4 	.word	0x1fff95a4
   13ae4:	1fff95a0 	.word	0x1fff95a0

00013ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13ae8:	b500      	push	{lr}
   13aea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13aec:	f7ed fd80 	bl	15f0 <Sys_GetCoreID>
   13af0:	4603      	mov	r3, r0
   13af2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   13af4:	4a0d      	ldr	r2, [pc, #52]	; (13b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13af6:	9b01      	ldr	r3, [sp, #4]
   13af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13afc:	1e5a      	subs	r2, r3, #1
   13afe:	490b      	ldr	r1, [pc, #44]	; (13b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13b00:	9b01      	ldr	r3, [sp, #4]
   13b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   13b06:	4a0a      	ldr	r2, [pc, #40]	; (13b30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   13b08:	9b01      	ldr	r3, [sp, #4]
   13b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b0e:	f003 0301 	and.w	r3, r3, #1
   13b12:	2b00      	cmp	r3, #0
   13b14:	d106      	bne.n	13b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   13b16:	4a05      	ldr	r2, [pc, #20]	; (13b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13b18:	9b01      	ldr	r3, [sp, #4]
   13b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d100      	bne.n	13b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b24:	bf00      	nop
   13b26:	b003      	add	sp, #12
   13b28:	f85d fb04 	ldr.w	pc, [sp], #4
   13b2c:	1fff95a4 	.word	0x1fff95a4
   13b30:	1fff95a0 	.word	0x1fff95a0

00013b34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13b34:	b500      	push	{lr}
   13b36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b38:	f7ed fd5a 	bl	15f0 <Sys_GetCoreID>
   13b3c:	4603      	mov	r3, r0
   13b3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   13b40:	4a10      	ldr	r2, [pc, #64]	; (13b84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13b42:	9b01      	ldr	r3, [sp, #4]
   13b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b48:	2b00      	cmp	r3, #0
   13b4a:	d10d      	bne.n	13b68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b4c:	f7ed f941 	bl	dd2 <Port_schm_read_msr>
   13b50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b52:	9b00      	ldr	r3, [sp, #0]
   13b54:	f003 0301 	and.w	r3, r3, #1
   13b58:	2b00      	cmp	r3, #0
   13b5a:	d100      	bne.n	13b5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   13b5e:	490a      	ldr	r1, [pc, #40]	; (13b88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   13b60:	9b01      	ldr	r3, [sp, #4]
   13b62:	9a00      	ldr	r2, [sp, #0]
   13b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   13b68:	4a06      	ldr	r2, [pc, #24]	; (13b84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13b6a:	9b01      	ldr	r3, [sp, #4]
   13b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b70:	1c5a      	adds	r2, r3, #1
   13b72:	4904      	ldr	r1, [pc, #16]	; (13b84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13b74:	9b01      	ldr	r3, [sp, #4]
   13b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b7a:	bf00      	nop
   13b7c:	b003      	add	sp, #12
   13b7e:	f85d fb04 	ldr.w	pc, [sp], #4
   13b82:	bf00      	nop
   13b84:	1fff95ac 	.word	0x1fff95ac
   13b88:	1fff95a8 	.word	0x1fff95a8

00013b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13b8c:	b500      	push	{lr}
   13b8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b90:	f7ed fd2e 	bl	15f0 <Sys_GetCoreID>
   13b94:	4603      	mov	r3, r0
   13b96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   13b98:	4a0d      	ldr	r2, [pc, #52]	; (13bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13b9a:	9b01      	ldr	r3, [sp, #4]
   13b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ba0:	1e5a      	subs	r2, r3, #1
   13ba2:	490b      	ldr	r1, [pc, #44]	; (13bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13ba4:	9b01      	ldr	r3, [sp, #4]
   13ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   13baa:	4a0a      	ldr	r2, [pc, #40]	; (13bd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   13bac:	9b01      	ldr	r3, [sp, #4]
   13bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bb2:	f003 0301 	and.w	r3, r3, #1
   13bb6:	2b00      	cmp	r3, #0
   13bb8:	d106      	bne.n	13bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   13bba:	4a05      	ldr	r2, [pc, #20]	; (13bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13bbc:	9b01      	ldr	r3, [sp, #4]
   13bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bc2:	2b00      	cmp	r3, #0
   13bc4:	d100      	bne.n	13bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13bc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bc8:	bf00      	nop
   13bca:	b003      	add	sp, #12
   13bcc:	f85d fb04 	ldr.w	pc, [sp], #4
   13bd0:	1fff95ac 	.word	0x1fff95ac
   13bd4:	1fff95a8 	.word	0x1fff95a8

00013bd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13bd8:	b500      	push	{lr}
   13bda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bdc:	f7ed fd08 	bl	15f0 <Sys_GetCoreID>
   13be0:	4603      	mov	r3, r0
   13be2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   13be4:	4a10      	ldr	r2, [pc, #64]	; (13c28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13be6:	9b01      	ldr	r3, [sp, #4]
   13be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bec:	2b00      	cmp	r3, #0
   13bee:	d10d      	bne.n	13c0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13bf0:	f7ed f8ef 	bl	dd2 <Port_schm_read_msr>
   13bf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bf6:	9b00      	ldr	r3, [sp, #0]
   13bf8:	f003 0301 	and.w	r3, r3, #1
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	d100      	bne.n	13c02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   13c02:	490a      	ldr	r1, [pc, #40]	; (13c2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   13c04:	9b01      	ldr	r3, [sp, #4]
   13c06:	9a00      	ldr	r2, [sp, #0]
   13c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   13c0c:	4a06      	ldr	r2, [pc, #24]	; (13c28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13c0e:	9b01      	ldr	r3, [sp, #4]
   13c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c14:	1c5a      	adds	r2, r3, #1
   13c16:	4904      	ldr	r1, [pc, #16]	; (13c28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13c18:	9b01      	ldr	r3, [sp, #4]
   13c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c1e:	bf00      	nop
   13c20:	b003      	add	sp, #12
   13c22:	f85d fb04 	ldr.w	pc, [sp], #4
   13c26:	bf00      	nop
   13c28:	1fff95b4 	.word	0x1fff95b4
   13c2c:	1fff95b0 	.word	0x1fff95b0

00013c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13c30:	b500      	push	{lr}
   13c32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c34:	f7ed fcdc 	bl	15f0 <Sys_GetCoreID>
   13c38:	4603      	mov	r3, r0
   13c3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   13c3c:	4a0d      	ldr	r2, [pc, #52]	; (13c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13c3e:	9b01      	ldr	r3, [sp, #4]
   13c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c44:	1e5a      	subs	r2, r3, #1
   13c46:	490b      	ldr	r1, [pc, #44]	; (13c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13c48:	9b01      	ldr	r3, [sp, #4]
   13c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   13c4e:	4a0a      	ldr	r2, [pc, #40]	; (13c78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   13c50:	9b01      	ldr	r3, [sp, #4]
   13c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c56:	f003 0301 	and.w	r3, r3, #1
   13c5a:	2b00      	cmp	r3, #0
   13c5c:	d106      	bne.n	13c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   13c5e:	4a05      	ldr	r2, [pc, #20]	; (13c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13c60:	9b01      	ldr	r3, [sp, #4]
   13c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c66:	2b00      	cmp	r3, #0
   13c68:	d100      	bne.n	13c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c6c:	bf00      	nop
   13c6e:	b003      	add	sp, #12
   13c70:	f85d fb04 	ldr.w	pc, [sp], #4
   13c74:	1fff95b4 	.word	0x1fff95b4
   13c78:	1fff95b0 	.word	0x1fff95b0

00013c7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13c7c:	b500      	push	{lr}
   13c7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c80:	f7ed fcb6 	bl	15f0 <Sys_GetCoreID>
   13c84:	4603      	mov	r3, r0
   13c86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   13c88:	4a10      	ldr	r2, [pc, #64]	; (13ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13c8a:	9b01      	ldr	r3, [sp, #4]
   13c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c90:	2b00      	cmp	r3, #0
   13c92:	d10d      	bne.n	13cb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c94:	f7ed f89d 	bl	dd2 <Port_schm_read_msr>
   13c98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c9a:	9b00      	ldr	r3, [sp, #0]
   13c9c:	f003 0301 	and.w	r3, r3, #1
   13ca0:	2b00      	cmp	r3, #0
   13ca2:	d100      	bne.n	13ca6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ca4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   13ca6:	490a      	ldr	r1, [pc, #40]	; (13cd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   13ca8:	9b01      	ldr	r3, [sp, #4]
   13caa:	9a00      	ldr	r2, [sp, #0]
   13cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   13cb0:	4a06      	ldr	r2, [pc, #24]	; (13ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13cb2:	9b01      	ldr	r3, [sp, #4]
   13cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cb8:	1c5a      	adds	r2, r3, #1
   13cba:	4904      	ldr	r1, [pc, #16]	; (13ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13cbc:	9b01      	ldr	r3, [sp, #4]
   13cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cc2:	bf00      	nop
   13cc4:	b003      	add	sp, #12
   13cc6:	f85d fb04 	ldr.w	pc, [sp], #4
   13cca:	bf00      	nop
   13ccc:	1fff95bc 	.word	0x1fff95bc
   13cd0:	1fff95b8 	.word	0x1fff95b8

00013cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13cd4:	b500      	push	{lr}
   13cd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cd8:	f7ed fc8a 	bl	15f0 <Sys_GetCoreID>
   13cdc:	4603      	mov	r3, r0
   13cde:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   13ce0:	4a0d      	ldr	r2, [pc, #52]	; (13d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13ce2:	9b01      	ldr	r3, [sp, #4]
   13ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ce8:	1e5a      	subs	r2, r3, #1
   13cea:	490b      	ldr	r1, [pc, #44]	; (13d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13cec:	9b01      	ldr	r3, [sp, #4]
   13cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   13cf2:	4a0a      	ldr	r2, [pc, #40]	; (13d1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   13cf4:	9b01      	ldr	r3, [sp, #4]
   13cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cfa:	f003 0301 	and.w	r3, r3, #1
   13cfe:	2b00      	cmp	r3, #0
   13d00:	d106      	bne.n	13d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   13d02:	4a05      	ldr	r2, [pc, #20]	; (13d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13d04:	9b01      	ldr	r3, [sp, #4]
   13d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d0a:	2b00      	cmp	r3, #0
   13d0c:	d100      	bne.n	13d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d10:	bf00      	nop
   13d12:	b003      	add	sp, #12
   13d14:	f85d fb04 	ldr.w	pc, [sp], #4
   13d18:	1fff95bc 	.word	0x1fff95bc
   13d1c:	1fff95b8 	.word	0x1fff95b8

00013d20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13d20:	b500      	push	{lr}
   13d22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d24:	f7ed fc64 	bl	15f0 <Sys_GetCoreID>
   13d28:	4603      	mov	r3, r0
   13d2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   13d2c:	4a10      	ldr	r2, [pc, #64]	; (13d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13d2e:	9b01      	ldr	r3, [sp, #4]
   13d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d34:	2b00      	cmp	r3, #0
   13d36:	d10d      	bne.n	13d54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d38:	f7ed f84b 	bl	dd2 <Port_schm_read_msr>
   13d3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d3e:	9b00      	ldr	r3, [sp, #0]
   13d40:	f003 0301 	and.w	r3, r3, #1
   13d44:	2b00      	cmp	r3, #0
   13d46:	d100      	bne.n	13d4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   13d4a:	490a      	ldr	r1, [pc, #40]	; (13d74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   13d4c:	9b01      	ldr	r3, [sp, #4]
   13d4e:	9a00      	ldr	r2, [sp, #0]
   13d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   13d54:	4a06      	ldr	r2, [pc, #24]	; (13d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13d56:	9b01      	ldr	r3, [sp, #4]
   13d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d5c:	1c5a      	adds	r2, r3, #1
   13d5e:	4904      	ldr	r1, [pc, #16]	; (13d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13d60:	9b01      	ldr	r3, [sp, #4]
   13d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d66:	bf00      	nop
   13d68:	b003      	add	sp, #12
   13d6a:	f85d fb04 	ldr.w	pc, [sp], #4
   13d6e:	bf00      	nop
   13d70:	1fff95c4 	.word	0x1fff95c4
   13d74:	1fff95c0 	.word	0x1fff95c0

00013d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13d78:	b500      	push	{lr}
   13d7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d7c:	f7ed fc38 	bl	15f0 <Sys_GetCoreID>
   13d80:	4603      	mov	r3, r0
   13d82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   13d84:	4a0d      	ldr	r2, [pc, #52]	; (13dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13d86:	9b01      	ldr	r3, [sp, #4]
   13d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d8c:	1e5a      	subs	r2, r3, #1
   13d8e:	490b      	ldr	r1, [pc, #44]	; (13dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13d90:	9b01      	ldr	r3, [sp, #4]
   13d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   13d96:	4a0a      	ldr	r2, [pc, #40]	; (13dc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   13d98:	9b01      	ldr	r3, [sp, #4]
   13d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d9e:	f003 0301 	and.w	r3, r3, #1
   13da2:	2b00      	cmp	r3, #0
   13da4:	d106      	bne.n	13db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   13da6:	4a05      	ldr	r2, [pc, #20]	; (13dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13da8:	9b01      	ldr	r3, [sp, #4]
   13daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dae:	2b00      	cmp	r3, #0
   13db0:	d100      	bne.n	13db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13db2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13db4:	bf00      	nop
   13db6:	b003      	add	sp, #12
   13db8:	f85d fb04 	ldr.w	pc, [sp], #4
   13dbc:	1fff95c4 	.word	0x1fff95c4
   13dc0:	1fff95c0 	.word	0x1fff95c0

00013dc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   13dc4:	b500      	push	{lr}
   13dc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dc8:	f7ed fc12 	bl	15f0 <Sys_GetCoreID>
   13dcc:	4603      	mov	r3, r0
   13dce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   13dd0:	4a10      	ldr	r2, [pc, #64]	; (13e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   13dd2:	9b01      	ldr	r3, [sp, #4]
   13dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dd8:	2b00      	cmp	r3, #0
   13dda:	d10d      	bne.n	13df8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ddc:	f7ec fff9 	bl	dd2 <Port_schm_read_msr>
   13de0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13de2:	9b00      	ldr	r3, [sp, #0]
   13de4:	f003 0301 	and.w	r3, r3, #1
   13de8:	2b00      	cmp	r3, #0
   13dea:	d100      	bne.n	13dee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13dec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   13dee:	490a      	ldr	r1, [pc, #40]	; (13e18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   13df0:	9b01      	ldr	r3, [sp, #4]
   13df2:	9a00      	ldr	r2, [sp, #0]
   13df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   13df8:	4a06      	ldr	r2, [pc, #24]	; (13e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   13dfa:	9b01      	ldr	r3, [sp, #4]
   13dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e00:	1c5a      	adds	r2, r3, #1
   13e02:	4904      	ldr	r1, [pc, #16]	; (13e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   13e04:	9b01      	ldr	r3, [sp, #4]
   13e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e0a:	bf00      	nop
   13e0c:	b003      	add	sp, #12
   13e0e:	f85d fb04 	ldr.w	pc, [sp], #4
   13e12:	bf00      	nop
   13e14:	1fff95cc 	.word	0x1fff95cc
   13e18:	1fff95c8 	.word	0x1fff95c8

00013e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   13e1c:	b500      	push	{lr}
   13e1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e20:	f7ed fbe6 	bl	15f0 <Sys_GetCoreID>
   13e24:	4603      	mov	r3, r0
   13e26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   13e28:	4a0d      	ldr	r2, [pc, #52]	; (13e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   13e2a:	9b01      	ldr	r3, [sp, #4]
   13e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e30:	1e5a      	subs	r2, r3, #1
   13e32:	490b      	ldr	r1, [pc, #44]	; (13e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   13e34:	9b01      	ldr	r3, [sp, #4]
   13e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   13e3a:	4a0a      	ldr	r2, [pc, #40]	; (13e64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   13e3c:	9b01      	ldr	r3, [sp, #4]
   13e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e42:	f003 0301 	and.w	r3, r3, #1
   13e46:	2b00      	cmp	r3, #0
   13e48:	d106      	bne.n	13e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   13e4a:	4a05      	ldr	r2, [pc, #20]	; (13e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   13e4c:	9b01      	ldr	r3, [sp, #4]
   13e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e52:	2b00      	cmp	r3, #0
   13e54:	d100      	bne.n	13e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e58:	bf00      	nop
   13e5a:	b003      	add	sp, #12
   13e5c:	f85d fb04 	ldr.w	pc, [sp], #4
   13e60:	1fff95cc 	.word	0x1fff95cc
   13e64:	1fff95c8 	.word	0x1fff95c8

00013e68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   13e68:	b500      	push	{lr}
   13e6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e6c:	f7ed fbc0 	bl	15f0 <Sys_GetCoreID>
   13e70:	4603      	mov	r3, r0
   13e72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   13e74:	4a10      	ldr	r2, [pc, #64]	; (13eb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   13e76:	9b01      	ldr	r3, [sp, #4]
   13e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e7c:	2b00      	cmp	r3, #0
   13e7e:	d10d      	bne.n	13e9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e80:	f7ec ffa7 	bl	dd2 <Port_schm_read_msr>
   13e84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e86:	9b00      	ldr	r3, [sp, #0]
   13e88:	f003 0301 	and.w	r3, r3, #1
   13e8c:	2b00      	cmp	r3, #0
   13e8e:	d100      	bne.n	13e92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   13e92:	490a      	ldr	r1, [pc, #40]	; (13ebc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   13e94:	9b01      	ldr	r3, [sp, #4]
   13e96:	9a00      	ldr	r2, [sp, #0]
   13e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   13e9c:	4a06      	ldr	r2, [pc, #24]	; (13eb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   13e9e:	9b01      	ldr	r3, [sp, #4]
   13ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ea4:	1c5a      	adds	r2, r3, #1
   13ea6:	4904      	ldr	r1, [pc, #16]	; (13eb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   13ea8:	9b01      	ldr	r3, [sp, #4]
   13eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13eae:	bf00      	nop
   13eb0:	b003      	add	sp, #12
   13eb2:	f85d fb04 	ldr.w	pc, [sp], #4
   13eb6:	bf00      	nop
   13eb8:	1fff95d4 	.word	0x1fff95d4
   13ebc:	1fff95d0 	.word	0x1fff95d0

00013ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   13ec0:	b500      	push	{lr}
   13ec2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ec4:	f7ed fb94 	bl	15f0 <Sys_GetCoreID>
   13ec8:	4603      	mov	r3, r0
   13eca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   13ecc:	4a0d      	ldr	r2, [pc, #52]	; (13f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   13ece:	9b01      	ldr	r3, [sp, #4]
   13ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed4:	1e5a      	subs	r2, r3, #1
   13ed6:	490b      	ldr	r1, [pc, #44]	; (13f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   13ed8:	9b01      	ldr	r3, [sp, #4]
   13eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   13ede:	4a0a      	ldr	r2, [pc, #40]	; (13f08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   13ee0:	9b01      	ldr	r3, [sp, #4]
   13ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee6:	f003 0301 	and.w	r3, r3, #1
   13eea:	2b00      	cmp	r3, #0
   13eec:	d106      	bne.n	13efc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   13eee:	4a05      	ldr	r2, [pc, #20]	; (13f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   13ef0:	9b01      	ldr	r3, [sp, #4]
   13ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d100      	bne.n	13efc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13efa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13efc:	bf00      	nop
   13efe:	b003      	add	sp, #12
   13f00:	f85d fb04 	ldr.w	pc, [sp], #4
   13f04:	1fff95d4 	.word	0x1fff95d4
   13f08:	1fff95d0 	.word	0x1fff95d0

00013f0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   13f0c:	b500      	push	{lr}
   13f0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f10:	f7ed fb6e 	bl	15f0 <Sys_GetCoreID>
   13f14:	4603      	mov	r3, r0
   13f16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   13f18:	4a10      	ldr	r2, [pc, #64]	; (13f5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   13f1a:	9b01      	ldr	r3, [sp, #4]
   13f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f20:	2b00      	cmp	r3, #0
   13f22:	d10d      	bne.n	13f40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f24:	f7ec ff55 	bl	dd2 <Port_schm_read_msr>
   13f28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f2a:	9b00      	ldr	r3, [sp, #0]
   13f2c:	f003 0301 	and.w	r3, r3, #1
   13f30:	2b00      	cmp	r3, #0
   13f32:	d100      	bne.n	13f36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   13f36:	490a      	ldr	r1, [pc, #40]	; (13f60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   13f38:	9b01      	ldr	r3, [sp, #4]
   13f3a:	9a00      	ldr	r2, [sp, #0]
   13f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   13f40:	4a06      	ldr	r2, [pc, #24]	; (13f5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   13f42:	9b01      	ldr	r3, [sp, #4]
   13f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f48:	1c5a      	adds	r2, r3, #1
   13f4a:	4904      	ldr	r1, [pc, #16]	; (13f5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   13f4c:	9b01      	ldr	r3, [sp, #4]
   13f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f52:	bf00      	nop
   13f54:	b003      	add	sp, #12
   13f56:	f85d fb04 	ldr.w	pc, [sp], #4
   13f5a:	bf00      	nop
   13f5c:	1fff95dc 	.word	0x1fff95dc
   13f60:	1fff95d8 	.word	0x1fff95d8

00013f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   13f64:	b500      	push	{lr}
   13f66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f68:	f7ed fb42 	bl	15f0 <Sys_GetCoreID>
   13f6c:	4603      	mov	r3, r0
   13f6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   13f70:	4a0d      	ldr	r2, [pc, #52]	; (13fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   13f72:	9b01      	ldr	r3, [sp, #4]
   13f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f78:	1e5a      	subs	r2, r3, #1
   13f7a:	490b      	ldr	r1, [pc, #44]	; (13fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   13f7c:	9b01      	ldr	r3, [sp, #4]
   13f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   13f82:	4a0a      	ldr	r2, [pc, #40]	; (13fac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   13f84:	9b01      	ldr	r3, [sp, #4]
   13f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f8a:	f003 0301 	and.w	r3, r3, #1
   13f8e:	2b00      	cmp	r3, #0
   13f90:	d106      	bne.n	13fa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   13f92:	4a05      	ldr	r2, [pc, #20]	; (13fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   13f94:	9b01      	ldr	r3, [sp, #4]
   13f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f9a:	2b00      	cmp	r3, #0
   13f9c:	d100      	bne.n	13fa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fa0:	bf00      	nop
   13fa2:	b003      	add	sp, #12
   13fa4:	f85d fb04 	ldr.w	pc, [sp], #4
   13fa8:	1fff95dc 	.word	0x1fff95dc
   13fac:	1fff95d8 	.word	0x1fff95d8

00013fb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   13fb0:	b500      	push	{lr}
   13fb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fb4:	f7ed fb1c 	bl	15f0 <Sys_GetCoreID>
   13fb8:	4603      	mov	r3, r0
   13fba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   13fbc:	4a10      	ldr	r2, [pc, #64]	; (14000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   13fbe:	9b01      	ldr	r3, [sp, #4]
   13fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fc4:	2b00      	cmp	r3, #0
   13fc6:	d10d      	bne.n	13fe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13fc8:	f7ec ff03 	bl	dd2 <Port_schm_read_msr>
   13fcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13fce:	9b00      	ldr	r3, [sp, #0]
   13fd0:	f003 0301 	and.w	r3, r3, #1
   13fd4:	2b00      	cmp	r3, #0
   13fd6:	d100      	bne.n	13fda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   13fda:	490a      	ldr	r1, [pc, #40]	; (14004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   13fdc:	9b01      	ldr	r3, [sp, #4]
   13fde:	9a00      	ldr	r2, [sp, #0]
   13fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   13fe4:	4a06      	ldr	r2, [pc, #24]	; (14000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   13fe6:	9b01      	ldr	r3, [sp, #4]
   13fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fec:	1c5a      	adds	r2, r3, #1
   13fee:	4904      	ldr	r1, [pc, #16]	; (14000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   13ff0:	9b01      	ldr	r3, [sp, #4]
   13ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ff6:	bf00      	nop
   13ff8:	b003      	add	sp, #12
   13ffa:	f85d fb04 	ldr.w	pc, [sp], #4
   13ffe:	bf00      	nop
   14000:	1fff95e4 	.word	0x1fff95e4
   14004:	1fff95e0 	.word	0x1fff95e0

00014008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   14008:	b500      	push	{lr}
   1400a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1400c:	f7ed faf0 	bl	15f0 <Sys_GetCoreID>
   14010:	4603      	mov	r3, r0
   14012:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   14014:	4a0d      	ldr	r2, [pc, #52]	; (1404c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14016:	9b01      	ldr	r3, [sp, #4]
   14018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1401c:	1e5a      	subs	r2, r3, #1
   1401e:	490b      	ldr	r1, [pc, #44]	; (1404c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14020:	9b01      	ldr	r3, [sp, #4]
   14022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   14026:	4a0a      	ldr	r2, [pc, #40]	; (14050 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   14028:	9b01      	ldr	r3, [sp, #4]
   1402a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1402e:	f003 0301 	and.w	r3, r3, #1
   14032:	2b00      	cmp	r3, #0
   14034:	d106      	bne.n	14044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   14036:	4a05      	ldr	r2, [pc, #20]	; (1404c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14038:	9b01      	ldr	r3, [sp, #4]
   1403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1403e:	2b00      	cmp	r3, #0
   14040:	d100      	bne.n	14044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14042:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14044:	bf00      	nop
   14046:	b003      	add	sp, #12
   14048:	f85d fb04 	ldr.w	pc, [sp], #4
   1404c:	1fff95e4 	.word	0x1fff95e4
   14050:	1fff95e0 	.word	0x1fff95e0

00014054 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   14054:	b500      	push	{lr}
   14056:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14058:	f7ed faca 	bl	15f0 <Sys_GetCoreID>
   1405c:	4603      	mov	r3, r0
   1405e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   14060:	4a10      	ldr	r2, [pc, #64]	; (140a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   14062:	9b01      	ldr	r3, [sp, #4]
   14064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14068:	2b00      	cmp	r3, #0
   1406a:	d10d      	bne.n	14088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1406c:	f7ec feb1 	bl	dd2 <Port_schm_read_msr>
   14070:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14072:	9b00      	ldr	r3, [sp, #0]
   14074:	f003 0301 	and.w	r3, r3, #1
   14078:	2b00      	cmp	r3, #0
   1407a:	d100      	bne.n	1407e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1407c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1407e:	490a      	ldr	r1, [pc, #40]	; (140a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   14080:	9b01      	ldr	r3, [sp, #4]
   14082:	9a00      	ldr	r2, [sp, #0]
   14084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   14088:	4a06      	ldr	r2, [pc, #24]	; (140a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1408a:	9b01      	ldr	r3, [sp, #4]
   1408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14090:	1c5a      	adds	r2, r3, #1
   14092:	4904      	ldr	r1, [pc, #16]	; (140a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   14094:	9b01      	ldr	r3, [sp, #4]
   14096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1409a:	bf00      	nop
   1409c:	b003      	add	sp, #12
   1409e:	f85d fb04 	ldr.w	pc, [sp], #4
   140a2:	bf00      	nop
   140a4:	1fff95ec 	.word	0x1fff95ec
   140a8:	1fff95e8 	.word	0x1fff95e8

000140ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   140ac:	b500      	push	{lr}
   140ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140b0:	f7ed fa9e 	bl	15f0 <Sys_GetCoreID>
   140b4:	4603      	mov	r3, r0
   140b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   140b8:	4a0d      	ldr	r2, [pc, #52]	; (140f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   140ba:	9b01      	ldr	r3, [sp, #4]
   140bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140c0:	1e5a      	subs	r2, r3, #1
   140c2:	490b      	ldr	r1, [pc, #44]	; (140f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   140c4:	9b01      	ldr	r3, [sp, #4]
   140c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   140ca:	4a0a      	ldr	r2, [pc, #40]	; (140f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   140cc:	9b01      	ldr	r3, [sp, #4]
   140ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140d2:	f003 0301 	and.w	r3, r3, #1
   140d6:	2b00      	cmp	r3, #0
   140d8:	d106      	bne.n	140e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   140da:	4a05      	ldr	r2, [pc, #20]	; (140f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   140dc:	9b01      	ldr	r3, [sp, #4]
   140de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140e2:	2b00      	cmp	r3, #0
   140e4:	d100      	bne.n	140e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140e8:	bf00      	nop
   140ea:	b003      	add	sp, #12
   140ec:	f85d fb04 	ldr.w	pc, [sp], #4
   140f0:	1fff95ec 	.word	0x1fff95ec
   140f4:	1fff95e8 	.word	0x1fff95e8

000140f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   140f8:	b500      	push	{lr}
   140fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140fc:	f7ed fa78 	bl	15f0 <Sys_GetCoreID>
   14100:	4603      	mov	r3, r0
   14102:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   14104:	4a10      	ldr	r2, [pc, #64]	; (14148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14106:	9b01      	ldr	r3, [sp, #4]
   14108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1410c:	2b00      	cmp	r3, #0
   1410e:	d10d      	bne.n	1412c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14110:	f7ec fe5f 	bl	dd2 <Port_schm_read_msr>
   14114:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14116:	9b00      	ldr	r3, [sp, #0]
   14118:	f003 0301 	and.w	r3, r3, #1
   1411c:	2b00      	cmp	r3, #0
   1411e:	d100      	bne.n	14122 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14120:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   14122:	490a      	ldr	r1, [pc, #40]	; (1414c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   14124:	9b01      	ldr	r3, [sp, #4]
   14126:	9a00      	ldr	r2, [sp, #0]
   14128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   1412c:	4a06      	ldr	r2, [pc, #24]	; (14148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1412e:	9b01      	ldr	r3, [sp, #4]
   14130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14134:	1c5a      	adds	r2, r3, #1
   14136:	4904      	ldr	r1, [pc, #16]	; (14148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14138:	9b01      	ldr	r3, [sp, #4]
   1413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1413e:	bf00      	nop
   14140:	b003      	add	sp, #12
   14142:	f85d fb04 	ldr.w	pc, [sp], #4
   14146:	bf00      	nop
   14148:	1fff95f4 	.word	0x1fff95f4
   1414c:	1fff95f0 	.word	0x1fff95f0

00014150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   14150:	b500      	push	{lr}
   14152:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14154:	f7ed fa4c 	bl	15f0 <Sys_GetCoreID>
   14158:	4603      	mov	r3, r0
   1415a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   1415c:	4a0d      	ldr	r2, [pc, #52]	; (14194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   1415e:	9b01      	ldr	r3, [sp, #4]
   14160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14164:	1e5a      	subs	r2, r3, #1
   14166:	490b      	ldr	r1, [pc, #44]	; (14194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   14168:	9b01      	ldr	r3, [sp, #4]
   1416a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   1416e:	4a0a      	ldr	r2, [pc, #40]	; (14198 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   14170:	9b01      	ldr	r3, [sp, #4]
   14172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14176:	f003 0301 	and.w	r3, r3, #1
   1417a:	2b00      	cmp	r3, #0
   1417c:	d106      	bne.n	1418c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   1417e:	4a05      	ldr	r2, [pc, #20]	; (14194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   14180:	9b01      	ldr	r3, [sp, #4]
   14182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14186:	2b00      	cmp	r3, #0
   14188:	d100      	bne.n	1418c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1418a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1418c:	bf00      	nop
   1418e:	b003      	add	sp, #12
   14190:	f85d fb04 	ldr.w	pc, [sp], #4
   14194:	1fff95f4 	.word	0x1fff95f4
   14198:	1fff95f0 	.word	0x1fff95f0

0001419c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   1419c:	b500      	push	{lr}
   1419e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141a0:	f7ed fa26 	bl	15f0 <Sys_GetCoreID>
   141a4:	4603      	mov	r3, r0
   141a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   141a8:	4a10      	ldr	r2, [pc, #64]	; (141ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   141aa:	9b01      	ldr	r3, [sp, #4]
   141ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b0:	2b00      	cmp	r3, #0
   141b2:	d10d      	bne.n	141d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141b4:	f7ec fe0d 	bl	dd2 <Port_schm_read_msr>
   141b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141ba:	9b00      	ldr	r3, [sp, #0]
   141bc:	f003 0301 	and.w	r3, r3, #1
   141c0:	2b00      	cmp	r3, #0
   141c2:	d100      	bne.n	141c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   141c6:	490a      	ldr	r1, [pc, #40]	; (141f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   141c8:	9b01      	ldr	r3, [sp, #4]
   141ca:	9a00      	ldr	r2, [sp, #0]
   141cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   141d0:	4a06      	ldr	r2, [pc, #24]	; (141ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   141d2:	9b01      	ldr	r3, [sp, #4]
   141d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141d8:	1c5a      	adds	r2, r3, #1
   141da:	4904      	ldr	r1, [pc, #16]	; (141ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   141dc:	9b01      	ldr	r3, [sp, #4]
   141de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141e2:	bf00      	nop
   141e4:	b003      	add	sp, #12
   141e6:	f85d fb04 	ldr.w	pc, [sp], #4
   141ea:	bf00      	nop
   141ec:	1fff95fc 	.word	0x1fff95fc
   141f0:	1fff95f8 	.word	0x1fff95f8

000141f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   141f4:	b500      	push	{lr}
   141f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141f8:	f7ed f9fa 	bl	15f0 <Sys_GetCoreID>
   141fc:	4603      	mov	r3, r0
   141fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   14200:	4a0d      	ldr	r2, [pc, #52]	; (14238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   14202:	9b01      	ldr	r3, [sp, #4]
   14204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14208:	1e5a      	subs	r2, r3, #1
   1420a:	490b      	ldr	r1, [pc, #44]	; (14238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1420c:	9b01      	ldr	r3, [sp, #4]
   1420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   14212:	4a0a      	ldr	r2, [pc, #40]	; (1423c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   14214:	9b01      	ldr	r3, [sp, #4]
   14216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1421a:	f003 0301 	and.w	r3, r3, #1
   1421e:	2b00      	cmp	r3, #0
   14220:	d106      	bne.n	14230 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   14222:	4a05      	ldr	r2, [pc, #20]	; (14238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   14224:	9b01      	ldr	r3, [sp, #4]
   14226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1422a:	2b00      	cmp	r3, #0
   1422c:	d100      	bne.n	14230 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1422e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14230:	bf00      	nop
   14232:	b003      	add	sp, #12
   14234:	f85d fb04 	ldr.w	pc, [sp], #4
   14238:	1fff95fc 	.word	0x1fff95fc
   1423c:	1fff95f8 	.word	0x1fff95f8

00014240 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   14240:	b500      	push	{lr}
   14242:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14244:	f7ed f9d4 	bl	15f0 <Sys_GetCoreID>
   14248:	4603      	mov	r3, r0
   1424a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   1424c:	4a10      	ldr	r2, [pc, #64]	; (14290 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   1424e:	9b01      	ldr	r3, [sp, #4]
   14250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14254:	2b00      	cmp	r3, #0
   14256:	d10d      	bne.n	14274 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14258:	f7ec fdc4 	bl	de4 <Pwm_schm_read_msr>
   1425c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1425e:	9b00      	ldr	r3, [sp, #0]
   14260:	f003 0301 	and.w	r3, r3, #1
   14264:	2b00      	cmp	r3, #0
   14266:	d100      	bne.n	1426a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14268:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1426a:	490a      	ldr	r1, [pc, #40]	; (14294 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   1426c:	9b01      	ldr	r3, [sp, #4]
   1426e:	9a00      	ldr	r2, [sp, #0]
   14270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   14274:	4a06      	ldr	r2, [pc, #24]	; (14290 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   14276:	9b01      	ldr	r3, [sp, #4]
   14278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1427c:	1c5a      	adds	r2, r3, #1
   1427e:	4904      	ldr	r1, [pc, #16]	; (14290 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   14280:	9b01      	ldr	r3, [sp, #4]
   14282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14286:	bf00      	nop
   14288:	b003      	add	sp, #12
   1428a:	f85d fb04 	ldr.w	pc, [sp], #4
   1428e:	bf00      	nop
   14290:	1fff9604 	.word	0x1fff9604
   14294:	1fff9600 	.word	0x1fff9600

00014298 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   14298:	b500      	push	{lr}
   1429a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1429c:	f7ed f9a8 	bl	15f0 <Sys_GetCoreID>
   142a0:	4603      	mov	r3, r0
   142a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   142a4:	4a0d      	ldr	r2, [pc, #52]	; (142dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   142a6:	9b01      	ldr	r3, [sp, #4]
   142a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142ac:	1e5a      	subs	r2, r3, #1
   142ae:	490b      	ldr	r1, [pc, #44]	; (142dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   142b0:	9b01      	ldr	r3, [sp, #4]
   142b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   142b6:	4a0a      	ldr	r2, [pc, #40]	; (142e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   142b8:	9b01      	ldr	r3, [sp, #4]
   142ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142be:	f003 0301 	and.w	r3, r3, #1
   142c2:	2b00      	cmp	r3, #0
   142c4:	d106      	bne.n	142d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   142c6:	4a05      	ldr	r2, [pc, #20]	; (142dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   142c8:	9b01      	ldr	r3, [sp, #4]
   142ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142ce:	2b00      	cmp	r3, #0
   142d0:	d100      	bne.n	142d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   142d4:	bf00      	nop
   142d6:	b003      	add	sp, #12
   142d8:	f85d fb04 	ldr.w	pc, [sp], #4
   142dc:	1fff9604 	.word	0x1fff9604
   142e0:	1fff9600 	.word	0x1fff9600

000142e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   142e4:	b500      	push	{lr}
   142e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142e8:	f7ed f982 	bl	15f0 <Sys_GetCoreID>
   142ec:	4603      	mov	r3, r0
   142ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   142f0:	4a10      	ldr	r2, [pc, #64]	; (14334 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   142f2:	9b01      	ldr	r3, [sp, #4]
   142f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142f8:	2b00      	cmp	r3, #0
   142fa:	d10d      	bne.n	14318 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142fc:	f7ec fd72 	bl	de4 <Pwm_schm_read_msr>
   14300:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14302:	9b00      	ldr	r3, [sp, #0]
   14304:	f003 0301 	and.w	r3, r3, #1
   14308:	2b00      	cmp	r3, #0
   1430a:	d100      	bne.n	1430e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1430c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1430e:	490a      	ldr	r1, [pc, #40]	; (14338 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   14310:	9b01      	ldr	r3, [sp, #4]
   14312:	9a00      	ldr	r2, [sp, #0]
   14314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   14318:	4a06      	ldr	r2, [pc, #24]	; (14334 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   1431a:	9b01      	ldr	r3, [sp, #4]
   1431c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14320:	1c5a      	adds	r2, r3, #1
   14322:	4904      	ldr	r1, [pc, #16]	; (14334 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1432a:	bf00      	nop
   1432c:	b003      	add	sp, #12
   1432e:	f85d fb04 	ldr.w	pc, [sp], #4
   14332:	bf00      	nop
   14334:	1fff960c 	.word	0x1fff960c
   14338:	1fff9608 	.word	0x1fff9608

0001433c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   1433c:	b500      	push	{lr}
   1433e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14340:	f7ed f956 	bl	15f0 <Sys_GetCoreID>
   14344:	4603      	mov	r3, r0
   14346:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   14348:	4a0d      	ldr	r2, [pc, #52]	; (14380 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   1434a:	9b01      	ldr	r3, [sp, #4]
   1434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14350:	1e5a      	subs	r2, r3, #1
   14352:	490b      	ldr	r1, [pc, #44]	; (14380 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   14354:	9b01      	ldr	r3, [sp, #4]
   14356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1435a:	4a0a      	ldr	r2, [pc, #40]	; (14384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   1435c:	9b01      	ldr	r3, [sp, #4]
   1435e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14362:	f003 0301 	and.w	r3, r3, #1
   14366:	2b00      	cmp	r3, #0
   14368:	d106      	bne.n	14378 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   1436a:	4a05      	ldr	r2, [pc, #20]	; (14380 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   1436c:	9b01      	ldr	r3, [sp, #4]
   1436e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14372:	2b00      	cmp	r3, #0
   14374:	d100      	bne.n	14378 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14376:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14378:	bf00      	nop
   1437a:	b003      	add	sp, #12
   1437c:	f85d fb04 	ldr.w	pc, [sp], #4
   14380:	1fff960c 	.word	0x1fff960c
   14384:	1fff9608 	.word	0x1fff9608

00014388 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   14388:	b500      	push	{lr}
   1438a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1438c:	f7ed f930 	bl	15f0 <Sys_GetCoreID>
   14390:	4603      	mov	r3, r0
   14392:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   14394:	4a10      	ldr	r2, [pc, #64]	; (143d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   14396:	9b01      	ldr	r3, [sp, #4]
   14398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1439c:	2b00      	cmp	r3, #0
   1439e:	d10d      	bne.n	143bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143a0:	f7ec fd20 	bl	de4 <Pwm_schm_read_msr>
   143a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143a6:	9b00      	ldr	r3, [sp, #0]
   143a8:	f003 0301 	and.w	r3, r3, #1
   143ac:	2b00      	cmp	r3, #0
   143ae:	d100      	bne.n	143b2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   143b2:	490a      	ldr	r1, [pc, #40]	; (143dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   143b4:	9b01      	ldr	r3, [sp, #4]
   143b6:	9a00      	ldr	r2, [sp, #0]
   143b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   143bc:	4a06      	ldr	r2, [pc, #24]	; (143d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   143be:	9b01      	ldr	r3, [sp, #4]
   143c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143c4:	1c5a      	adds	r2, r3, #1
   143c6:	4904      	ldr	r1, [pc, #16]	; (143d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   143c8:	9b01      	ldr	r3, [sp, #4]
   143ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143ce:	bf00      	nop
   143d0:	b003      	add	sp, #12
   143d2:	f85d fb04 	ldr.w	pc, [sp], #4
   143d6:	bf00      	nop
   143d8:	1fff9614 	.word	0x1fff9614
   143dc:	1fff9610 	.word	0x1fff9610

000143e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   143e0:	b500      	push	{lr}
   143e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143e4:	f7ed f904 	bl	15f0 <Sys_GetCoreID>
   143e8:	4603      	mov	r3, r0
   143ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   143ec:	4a0d      	ldr	r2, [pc, #52]	; (14424 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   143ee:	9b01      	ldr	r3, [sp, #4]
   143f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f4:	1e5a      	subs	r2, r3, #1
   143f6:	490b      	ldr	r1, [pc, #44]	; (14424 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   143f8:	9b01      	ldr	r3, [sp, #4]
   143fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   143fe:	4a0a      	ldr	r2, [pc, #40]	; (14428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   14400:	9b01      	ldr	r3, [sp, #4]
   14402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14406:	f003 0301 	and.w	r3, r3, #1
   1440a:	2b00      	cmp	r3, #0
   1440c:	d106      	bne.n	1441c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   1440e:	4a05      	ldr	r2, [pc, #20]	; (14424 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14410:	9b01      	ldr	r3, [sp, #4]
   14412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14416:	2b00      	cmp	r3, #0
   14418:	d100      	bne.n	1441c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1441a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1441c:	bf00      	nop
   1441e:	b003      	add	sp, #12
   14420:	f85d fb04 	ldr.w	pc, [sp], #4
   14424:	1fff9614 	.word	0x1fff9614
   14428:	1fff9610 	.word	0x1fff9610

0001442c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   1442c:	b500      	push	{lr}
   1442e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14430:	f7ed f8de 	bl	15f0 <Sys_GetCoreID>
   14434:	4603      	mov	r3, r0
   14436:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   14438:	4a10      	ldr	r2, [pc, #64]	; (1447c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   1443a:	9b01      	ldr	r3, [sp, #4]
   1443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14440:	2b00      	cmp	r3, #0
   14442:	d10d      	bne.n	14460 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14444:	f7ec fcce 	bl	de4 <Pwm_schm_read_msr>
   14448:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1444a:	9b00      	ldr	r3, [sp, #0]
   1444c:	f003 0301 	and.w	r3, r3, #1
   14450:	2b00      	cmp	r3, #0
   14452:	d100      	bne.n	14456 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14454:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14456:	490a      	ldr	r1, [pc, #40]	; (14480 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   14458:	9b01      	ldr	r3, [sp, #4]
   1445a:	9a00      	ldr	r2, [sp, #0]
   1445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   14460:	4a06      	ldr	r2, [pc, #24]	; (1447c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   14462:	9b01      	ldr	r3, [sp, #4]
   14464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14468:	1c5a      	adds	r2, r3, #1
   1446a:	4904      	ldr	r1, [pc, #16]	; (1447c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   1446c:	9b01      	ldr	r3, [sp, #4]
   1446e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14472:	bf00      	nop
   14474:	b003      	add	sp, #12
   14476:	f85d fb04 	ldr.w	pc, [sp], #4
   1447a:	bf00      	nop
   1447c:	1fff961c 	.word	0x1fff961c
   14480:	1fff9618 	.word	0x1fff9618

00014484 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   14484:	b500      	push	{lr}
   14486:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14488:	f7ed f8b2 	bl	15f0 <Sys_GetCoreID>
   1448c:	4603      	mov	r3, r0
   1448e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   14490:	4a0d      	ldr	r2, [pc, #52]	; (144c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   14492:	9b01      	ldr	r3, [sp, #4]
   14494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14498:	1e5a      	subs	r2, r3, #1
   1449a:	490b      	ldr	r1, [pc, #44]	; (144c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   1449c:	9b01      	ldr	r3, [sp, #4]
   1449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   144a2:	4a0a      	ldr	r2, [pc, #40]	; (144cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   144a4:	9b01      	ldr	r3, [sp, #4]
   144a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144aa:	f003 0301 	and.w	r3, r3, #1
   144ae:	2b00      	cmp	r3, #0
   144b0:	d106      	bne.n	144c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   144b2:	4a05      	ldr	r2, [pc, #20]	; (144c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   144b4:	9b01      	ldr	r3, [sp, #4]
   144b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ba:	2b00      	cmp	r3, #0
   144bc:	d100      	bne.n	144c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144c0:	bf00      	nop
   144c2:	b003      	add	sp, #12
   144c4:	f85d fb04 	ldr.w	pc, [sp], #4
   144c8:	1fff961c 	.word	0x1fff961c
   144cc:	1fff9618 	.word	0x1fff9618

000144d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   144d0:	b500      	push	{lr}
   144d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144d4:	f7ed f88c 	bl	15f0 <Sys_GetCoreID>
   144d8:	4603      	mov	r3, r0
   144da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   144dc:	4a10      	ldr	r2, [pc, #64]	; (14520 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   144de:	9b01      	ldr	r3, [sp, #4]
   144e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144e4:	2b00      	cmp	r3, #0
   144e6:	d10d      	bne.n	14504 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144e8:	f7ec fc7c 	bl	de4 <Pwm_schm_read_msr>
   144ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144ee:	9b00      	ldr	r3, [sp, #0]
   144f0:	f003 0301 	and.w	r3, r3, #1
   144f4:	2b00      	cmp	r3, #0
   144f6:	d100      	bne.n	144fa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   144fa:	490a      	ldr	r1, [pc, #40]	; (14524 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   144fc:	9b01      	ldr	r3, [sp, #4]
   144fe:	9a00      	ldr	r2, [sp, #0]
   14500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   14504:	4a06      	ldr	r2, [pc, #24]	; (14520 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   14506:	9b01      	ldr	r3, [sp, #4]
   14508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1450c:	1c5a      	adds	r2, r3, #1
   1450e:	4904      	ldr	r1, [pc, #16]	; (14520 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   14510:	9b01      	ldr	r3, [sp, #4]
   14512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14516:	bf00      	nop
   14518:	b003      	add	sp, #12
   1451a:	f85d fb04 	ldr.w	pc, [sp], #4
   1451e:	bf00      	nop
   14520:	1fff9624 	.word	0x1fff9624
   14524:	1fff9620 	.word	0x1fff9620

00014528 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   14528:	b500      	push	{lr}
   1452a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1452c:	f7ed f860 	bl	15f0 <Sys_GetCoreID>
   14530:	4603      	mov	r3, r0
   14532:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   14534:	4a0d      	ldr	r2, [pc, #52]	; (1456c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14536:	9b01      	ldr	r3, [sp, #4]
   14538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1453c:	1e5a      	subs	r2, r3, #1
   1453e:	490b      	ldr	r1, [pc, #44]	; (1456c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14540:	9b01      	ldr	r3, [sp, #4]
   14542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14546:	4a0a      	ldr	r2, [pc, #40]	; (14570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   14548:	9b01      	ldr	r3, [sp, #4]
   1454a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1454e:	f003 0301 	and.w	r3, r3, #1
   14552:	2b00      	cmp	r3, #0
   14554:	d106      	bne.n	14564 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   14556:	4a05      	ldr	r2, [pc, #20]	; (1456c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14558:	9b01      	ldr	r3, [sp, #4]
   1455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1455e:	2b00      	cmp	r3, #0
   14560:	d100      	bne.n	14564 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14562:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14564:	bf00      	nop
   14566:	b003      	add	sp, #12
   14568:	f85d fb04 	ldr.w	pc, [sp], #4
   1456c:	1fff9624 	.word	0x1fff9624
   14570:	1fff9620 	.word	0x1fff9620

00014574 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   14574:	b500      	push	{lr}
   14576:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14578:	f7ed f83a 	bl	15f0 <Sys_GetCoreID>
   1457c:	4603      	mov	r3, r0
   1457e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   14580:	4a10      	ldr	r2, [pc, #64]	; (145c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   14582:	9b01      	ldr	r3, [sp, #4]
   14584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14588:	2b00      	cmp	r3, #0
   1458a:	d10d      	bne.n	145a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1458c:	f7ec fc2a 	bl	de4 <Pwm_schm_read_msr>
   14590:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14592:	9b00      	ldr	r3, [sp, #0]
   14594:	f003 0301 	and.w	r3, r3, #1
   14598:	2b00      	cmp	r3, #0
   1459a:	d100      	bne.n	1459e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1459c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   1459e:	490a      	ldr	r1, [pc, #40]	; (145c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   145a0:	9b01      	ldr	r3, [sp, #4]
   145a2:	9a00      	ldr	r2, [sp, #0]
   145a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   145a8:	4a06      	ldr	r2, [pc, #24]	; (145c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   145aa:	9b01      	ldr	r3, [sp, #4]
   145ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145b0:	1c5a      	adds	r2, r3, #1
   145b2:	4904      	ldr	r1, [pc, #16]	; (145c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   145b4:	9b01      	ldr	r3, [sp, #4]
   145b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145ba:	bf00      	nop
   145bc:	b003      	add	sp, #12
   145be:	f85d fb04 	ldr.w	pc, [sp], #4
   145c2:	bf00      	nop
   145c4:	1fff962c 	.word	0x1fff962c
   145c8:	1fff9628 	.word	0x1fff9628

000145cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   145cc:	b500      	push	{lr}
   145ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145d0:	f7ed f80e 	bl	15f0 <Sys_GetCoreID>
   145d4:	4603      	mov	r3, r0
   145d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   145d8:	4a0d      	ldr	r2, [pc, #52]	; (14610 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   145da:	9b01      	ldr	r3, [sp, #4]
   145dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145e0:	1e5a      	subs	r2, r3, #1
   145e2:	490b      	ldr	r1, [pc, #44]	; (14610 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   145e4:	9b01      	ldr	r3, [sp, #4]
   145e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   145ea:	4a0a      	ldr	r2, [pc, #40]	; (14614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   145ec:	9b01      	ldr	r3, [sp, #4]
   145ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145f2:	f003 0301 	and.w	r3, r3, #1
   145f6:	2b00      	cmp	r3, #0
   145f8:	d106      	bne.n	14608 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   145fa:	4a05      	ldr	r2, [pc, #20]	; (14610 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   145fc:	9b01      	ldr	r3, [sp, #4]
   145fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14602:	2b00      	cmp	r3, #0
   14604:	d100      	bne.n	14608 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14606:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14608:	bf00      	nop
   1460a:	b003      	add	sp, #12
   1460c:	f85d fb04 	ldr.w	pc, [sp], #4
   14610:	1fff962c 	.word	0x1fff962c
   14614:	1fff9628 	.word	0x1fff9628

00014618 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   14618:	b500      	push	{lr}
   1461a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1461c:	f7ec ffe8 	bl	15f0 <Sys_GetCoreID>
   14620:	4603      	mov	r3, r0
   14622:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   14624:	4a10      	ldr	r2, [pc, #64]	; (14668 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   14626:	9b01      	ldr	r3, [sp, #4]
   14628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1462c:	2b00      	cmp	r3, #0
   1462e:	d10d      	bne.n	1464c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14630:	f7ec fbd8 	bl	de4 <Pwm_schm_read_msr>
   14634:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14636:	9b00      	ldr	r3, [sp, #0]
   14638:	f003 0301 	and.w	r3, r3, #1
   1463c:	2b00      	cmp	r3, #0
   1463e:	d100      	bne.n	14642 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14640:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14642:	490a      	ldr	r1, [pc, #40]	; (1466c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   14644:	9b01      	ldr	r3, [sp, #4]
   14646:	9a00      	ldr	r2, [sp, #0]
   14648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   1464c:	4a06      	ldr	r2, [pc, #24]	; (14668 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   1464e:	9b01      	ldr	r3, [sp, #4]
   14650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14654:	1c5a      	adds	r2, r3, #1
   14656:	4904      	ldr	r1, [pc, #16]	; (14668 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1465e:	bf00      	nop
   14660:	b003      	add	sp, #12
   14662:	f85d fb04 	ldr.w	pc, [sp], #4
   14666:	bf00      	nop
   14668:	1fff9634 	.word	0x1fff9634
   1466c:	1fff9630 	.word	0x1fff9630

00014670 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   14670:	b500      	push	{lr}
   14672:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14674:	f7ec ffbc 	bl	15f0 <Sys_GetCoreID>
   14678:	4603      	mov	r3, r0
   1467a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   1467c:	4a0d      	ldr	r2, [pc, #52]	; (146b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   1467e:	9b01      	ldr	r3, [sp, #4]
   14680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14684:	1e5a      	subs	r2, r3, #1
   14686:	490b      	ldr	r1, [pc, #44]	; (146b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   14688:	9b01      	ldr	r3, [sp, #4]
   1468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1468e:	4a0a      	ldr	r2, [pc, #40]	; (146b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   14690:	9b01      	ldr	r3, [sp, #4]
   14692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14696:	f003 0301 	and.w	r3, r3, #1
   1469a:	2b00      	cmp	r3, #0
   1469c:	d106      	bne.n	146ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   1469e:	4a05      	ldr	r2, [pc, #20]	; (146b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   146a0:	9b01      	ldr	r3, [sp, #4]
   146a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146a6:	2b00      	cmp	r3, #0
   146a8:	d100      	bne.n	146ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146ac:	bf00      	nop
   146ae:	b003      	add	sp, #12
   146b0:	f85d fb04 	ldr.w	pc, [sp], #4
   146b4:	1fff9634 	.word	0x1fff9634
   146b8:	1fff9630 	.word	0x1fff9630

000146bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   146bc:	b500      	push	{lr}
   146be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146c0:	f7ec ff96 	bl	15f0 <Sys_GetCoreID>
   146c4:	4603      	mov	r3, r0
   146c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   146c8:	4a10      	ldr	r2, [pc, #64]	; (1470c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   146ca:	9b01      	ldr	r3, [sp, #4]
   146cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d0:	2b00      	cmp	r3, #0
   146d2:	d10d      	bne.n	146f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   146d4:	f7ec fb86 	bl	de4 <Pwm_schm_read_msr>
   146d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146da:	9b00      	ldr	r3, [sp, #0]
   146dc:	f003 0301 	and.w	r3, r3, #1
   146e0:	2b00      	cmp	r3, #0
   146e2:	d100      	bne.n	146e6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   146e6:	490a      	ldr	r1, [pc, #40]	; (14710 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   146e8:	9b01      	ldr	r3, [sp, #4]
   146ea:	9a00      	ldr	r2, [sp, #0]
   146ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   146f0:	4a06      	ldr	r2, [pc, #24]	; (1470c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   146f2:	9b01      	ldr	r3, [sp, #4]
   146f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146f8:	1c5a      	adds	r2, r3, #1
   146fa:	4904      	ldr	r1, [pc, #16]	; (1470c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14702:	bf00      	nop
   14704:	b003      	add	sp, #12
   14706:	f85d fb04 	ldr.w	pc, [sp], #4
   1470a:	bf00      	nop
   1470c:	1fff963c 	.word	0x1fff963c
   14710:	1fff9638 	.word	0x1fff9638

00014714 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   14714:	b500      	push	{lr}
   14716:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14718:	f7ec ff6a 	bl	15f0 <Sys_GetCoreID>
   1471c:	4603      	mov	r3, r0
   1471e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   14720:	4a0d      	ldr	r2, [pc, #52]	; (14758 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   14722:	9b01      	ldr	r3, [sp, #4]
   14724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14728:	1e5a      	subs	r2, r3, #1
   1472a:	490b      	ldr	r1, [pc, #44]	; (14758 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   1472c:	9b01      	ldr	r3, [sp, #4]
   1472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   14732:	4a0a      	ldr	r2, [pc, #40]	; (1475c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   14734:	9b01      	ldr	r3, [sp, #4]
   14736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1473a:	f003 0301 	and.w	r3, r3, #1
   1473e:	2b00      	cmp	r3, #0
   14740:	d106      	bne.n	14750 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   14742:	4a05      	ldr	r2, [pc, #20]	; (14758 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   14744:	9b01      	ldr	r3, [sp, #4]
   14746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1474a:	2b00      	cmp	r3, #0
   1474c:	d100      	bne.n	14750 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1474e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14750:	bf00      	nop
   14752:	b003      	add	sp, #12
   14754:	f85d fb04 	ldr.w	pc, [sp], #4
   14758:	1fff963c 	.word	0x1fff963c
   1475c:	1fff9638 	.word	0x1fff9638

00014760 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   14760:	b500      	push	{lr}
   14762:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14764:	f7ec ff44 	bl	15f0 <Sys_GetCoreID>
   14768:	4603      	mov	r3, r0
   1476a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   1476c:	4a10      	ldr	r2, [pc, #64]	; (147b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   1476e:	9b01      	ldr	r3, [sp, #4]
   14770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14774:	2b00      	cmp	r3, #0
   14776:	d10d      	bne.n	14794 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14778:	f7ec fb34 	bl	de4 <Pwm_schm_read_msr>
   1477c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1477e:	9b00      	ldr	r3, [sp, #0]
   14780:	f003 0301 	and.w	r3, r3, #1
   14784:	2b00      	cmp	r3, #0
   14786:	d100      	bne.n	1478a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14788:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1478a:	490a      	ldr	r1, [pc, #40]	; (147b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   1478c:	9b01      	ldr	r3, [sp, #4]
   1478e:	9a00      	ldr	r2, [sp, #0]
   14790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   14794:	4a06      	ldr	r2, [pc, #24]	; (147b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   14796:	9b01      	ldr	r3, [sp, #4]
   14798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1479c:	1c5a      	adds	r2, r3, #1
   1479e:	4904      	ldr	r1, [pc, #16]	; (147b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147a6:	bf00      	nop
   147a8:	b003      	add	sp, #12
   147aa:	f85d fb04 	ldr.w	pc, [sp], #4
   147ae:	bf00      	nop
   147b0:	1fff9644 	.word	0x1fff9644
   147b4:	1fff9640 	.word	0x1fff9640

000147b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   147b8:	b500      	push	{lr}
   147ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147bc:	f7ec ff18 	bl	15f0 <Sys_GetCoreID>
   147c0:	4603      	mov	r3, r0
   147c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   147c4:	4a0d      	ldr	r2, [pc, #52]	; (147fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   147c6:	9b01      	ldr	r3, [sp, #4]
   147c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147cc:	1e5a      	subs	r2, r3, #1
   147ce:	490b      	ldr	r1, [pc, #44]	; (147fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   147d0:	9b01      	ldr	r3, [sp, #4]
   147d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   147d6:	4a0a      	ldr	r2, [pc, #40]	; (14800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   147d8:	9b01      	ldr	r3, [sp, #4]
   147da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147de:	f003 0301 	and.w	r3, r3, #1
   147e2:	2b00      	cmp	r3, #0
   147e4:	d106      	bne.n	147f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   147e6:	4a05      	ldr	r2, [pc, #20]	; (147fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   147e8:	9b01      	ldr	r3, [sp, #4]
   147ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147ee:	2b00      	cmp	r3, #0
   147f0:	d100      	bne.n	147f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147f4:	bf00      	nop
   147f6:	b003      	add	sp, #12
   147f8:	f85d fb04 	ldr.w	pc, [sp], #4
   147fc:	1fff9644 	.word	0x1fff9644
   14800:	1fff9640 	.word	0x1fff9640

00014804 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   14804:	b500      	push	{lr}
   14806:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14808:	f7ec fef2 	bl	15f0 <Sys_GetCoreID>
   1480c:	4603      	mov	r3, r0
   1480e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   14810:	4a10      	ldr	r2, [pc, #64]	; (14854 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14812:	9b01      	ldr	r3, [sp, #4]
   14814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14818:	2b00      	cmp	r3, #0
   1481a:	d10d      	bne.n	14838 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1481c:	f7ec fae2 	bl	de4 <Pwm_schm_read_msr>
   14820:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14822:	9b00      	ldr	r3, [sp, #0]
   14824:	f003 0301 	and.w	r3, r3, #1
   14828:	2b00      	cmp	r3, #0
   1482a:	d100      	bne.n	1482e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1482c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1482e:	490a      	ldr	r1, [pc, #40]	; (14858 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   14830:	9b01      	ldr	r3, [sp, #4]
   14832:	9a00      	ldr	r2, [sp, #0]
   14834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   14838:	4a06      	ldr	r2, [pc, #24]	; (14854 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   1483a:	9b01      	ldr	r3, [sp, #4]
   1483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14840:	1c5a      	adds	r2, r3, #1
   14842:	4904      	ldr	r1, [pc, #16]	; (14854 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14844:	9b01      	ldr	r3, [sp, #4]
   14846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1484a:	bf00      	nop
   1484c:	b003      	add	sp, #12
   1484e:	f85d fb04 	ldr.w	pc, [sp], #4
   14852:	bf00      	nop
   14854:	1fff964c 	.word	0x1fff964c
   14858:	1fff9648 	.word	0x1fff9648

0001485c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   1485c:	b500      	push	{lr}
   1485e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14860:	f7ec fec6 	bl	15f0 <Sys_GetCoreID>
   14864:	4603      	mov	r3, r0
   14866:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   14868:	4a0d      	ldr	r2, [pc, #52]	; (148a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   1486a:	9b01      	ldr	r3, [sp, #4]
   1486c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14870:	1e5a      	subs	r2, r3, #1
   14872:	490b      	ldr	r1, [pc, #44]	; (148a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14874:	9b01      	ldr	r3, [sp, #4]
   14876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1487a:	4a0a      	ldr	r2, [pc, #40]	; (148a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   1487c:	9b01      	ldr	r3, [sp, #4]
   1487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14882:	f003 0301 	and.w	r3, r3, #1
   14886:	2b00      	cmp	r3, #0
   14888:	d106      	bne.n	14898 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   1488a:	4a05      	ldr	r2, [pc, #20]	; (148a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   1488c:	9b01      	ldr	r3, [sp, #4]
   1488e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14892:	2b00      	cmp	r3, #0
   14894:	d100      	bne.n	14898 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14896:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14898:	bf00      	nop
   1489a:	b003      	add	sp, #12
   1489c:	f85d fb04 	ldr.w	pc, [sp], #4
   148a0:	1fff964c 	.word	0x1fff964c
   148a4:	1fff9648 	.word	0x1fff9648

000148a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   148a8:	b500      	push	{lr}
   148aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148ac:	f7ec fea0 	bl	15f0 <Sys_GetCoreID>
   148b0:	4603      	mov	r3, r0
   148b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   148b4:	4a10      	ldr	r2, [pc, #64]	; (148f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   148b6:	9b01      	ldr	r3, [sp, #4]
   148b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148bc:	2b00      	cmp	r3, #0
   148be:	d10d      	bne.n	148dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148c0:	f7ec fa90 	bl	de4 <Pwm_schm_read_msr>
   148c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148c6:	9b00      	ldr	r3, [sp, #0]
   148c8:	f003 0301 	and.w	r3, r3, #1
   148cc:	2b00      	cmp	r3, #0
   148ce:	d100      	bne.n	148d2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   148d2:	490a      	ldr	r1, [pc, #40]	; (148fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   148d4:	9b01      	ldr	r3, [sp, #4]
   148d6:	9a00      	ldr	r2, [sp, #0]
   148d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   148dc:	4a06      	ldr	r2, [pc, #24]	; (148f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   148de:	9b01      	ldr	r3, [sp, #4]
   148e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148e4:	1c5a      	adds	r2, r3, #1
   148e6:	4904      	ldr	r1, [pc, #16]	; (148f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   148e8:	9b01      	ldr	r3, [sp, #4]
   148ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148ee:	bf00      	nop
   148f0:	b003      	add	sp, #12
   148f2:	f85d fb04 	ldr.w	pc, [sp], #4
   148f6:	bf00      	nop
   148f8:	1fff9654 	.word	0x1fff9654
   148fc:	1fff9650 	.word	0x1fff9650

00014900 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   14900:	b500      	push	{lr}
   14902:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14904:	f7ec fe74 	bl	15f0 <Sys_GetCoreID>
   14908:	4603      	mov	r3, r0
   1490a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   1490c:	4a0d      	ldr	r2, [pc, #52]	; (14944 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   1490e:	9b01      	ldr	r3, [sp, #4]
   14910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14914:	1e5a      	subs	r2, r3, #1
   14916:	490b      	ldr	r1, [pc, #44]	; (14944 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14918:	9b01      	ldr	r3, [sp, #4]
   1491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1491e:	4a0a      	ldr	r2, [pc, #40]	; (14948 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   14920:	9b01      	ldr	r3, [sp, #4]
   14922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14926:	f003 0301 	and.w	r3, r3, #1
   1492a:	2b00      	cmp	r3, #0
   1492c:	d106      	bne.n	1493c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   1492e:	4a05      	ldr	r2, [pc, #20]	; (14944 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14930:	9b01      	ldr	r3, [sp, #4]
   14932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14936:	2b00      	cmp	r3, #0
   14938:	d100      	bne.n	1493c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1493a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1493c:	bf00      	nop
   1493e:	b003      	add	sp, #12
   14940:	f85d fb04 	ldr.w	pc, [sp], #4
   14944:	1fff9654 	.word	0x1fff9654
   14948:	1fff9650 	.word	0x1fff9650

0001494c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   1494c:	b500      	push	{lr}
   1494e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14950:	f7ec fe4e 	bl	15f0 <Sys_GetCoreID>
   14954:	4603      	mov	r3, r0
   14956:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   14958:	4a10      	ldr	r2, [pc, #64]	; (1499c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   1495a:	9b01      	ldr	r3, [sp, #4]
   1495c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14960:	2b00      	cmp	r3, #0
   14962:	d10d      	bne.n	14980 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14964:	f7ec fa3e 	bl	de4 <Pwm_schm_read_msr>
   14968:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1496a:	9b00      	ldr	r3, [sp, #0]
   1496c:	f003 0301 	and.w	r3, r3, #1
   14970:	2b00      	cmp	r3, #0
   14972:	d100      	bne.n	14976 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14974:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   14976:	490a      	ldr	r1, [pc, #40]	; (149a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   14978:	9b01      	ldr	r3, [sp, #4]
   1497a:	9a00      	ldr	r2, [sp, #0]
   1497c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   14980:	4a06      	ldr	r2, [pc, #24]	; (1499c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14982:	9b01      	ldr	r3, [sp, #4]
   14984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14988:	1c5a      	adds	r2, r3, #1
   1498a:	4904      	ldr	r1, [pc, #16]	; (1499c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   1498c:	9b01      	ldr	r3, [sp, #4]
   1498e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14992:	bf00      	nop
   14994:	b003      	add	sp, #12
   14996:	f85d fb04 	ldr.w	pc, [sp], #4
   1499a:	bf00      	nop
   1499c:	1fff965c 	.word	0x1fff965c
   149a0:	1fff9658 	.word	0x1fff9658

000149a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   149a4:	b500      	push	{lr}
   149a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149a8:	f7ec fe22 	bl	15f0 <Sys_GetCoreID>
   149ac:	4603      	mov	r3, r0
   149ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   149b0:	4a0d      	ldr	r2, [pc, #52]	; (149e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   149b2:	9b01      	ldr	r3, [sp, #4]
   149b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149b8:	1e5a      	subs	r2, r3, #1
   149ba:	490b      	ldr	r1, [pc, #44]	; (149e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   149bc:	9b01      	ldr	r3, [sp, #4]
   149be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   149c2:	4a0a      	ldr	r2, [pc, #40]	; (149ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   149c4:	9b01      	ldr	r3, [sp, #4]
   149c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149ca:	f003 0301 	and.w	r3, r3, #1
   149ce:	2b00      	cmp	r3, #0
   149d0:	d106      	bne.n	149e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   149d2:	4a05      	ldr	r2, [pc, #20]	; (149e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   149d4:	9b01      	ldr	r3, [sp, #4]
   149d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149da:	2b00      	cmp	r3, #0
   149dc:	d100      	bne.n	149e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149e0:	bf00      	nop
   149e2:	b003      	add	sp, #12
   149e4:	f85d fb04 	ldr.w	pc, [sp], #4
   149e8:	1fff965c 	.word	0x1fff965c
   149ec:	1fff9658 	.word	0x1fff9658

000149f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   149f0:	b500      	push	{lr}
   149f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149f4:	f7ec fdfc 	bl	15f0 <Sys_GetCoreID>
   149f8:	4603      	mov	r3, r0
   149fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   149fc:	4a10      	ldr	r2, [pc, #64]	; (14a40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   149fe:	9b01      	ldr	r3, [sp, #4]
   14a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a04:	2b00      	cmp	r3, #0
   14a06:	d10d      	bne.n	14a24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a08:	f7ec f9ec 	bl	de4 <Pwm_schm_read_msr>
   14a0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a0e:	9b00      	ldr	r3, [sp, #0]
   14a10:	f003 0301 	and.w	r3, r3, #1
   14a14:	2b00      	cmp	r3, #0
   14a16:	d100      	bne.n	14a1a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   14a1a:	490a      	ldr	r1, [pc, #40]	; (14a44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   14a1c:	9b01      	ldr	r3, [sp, #4]
   14a1e:	9a00      	ldr	r2, [sp, #0]
   14a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   14a24:	4a06      	ldr	r2, [pc, #24]	; (14a40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14a26:	9b01      	ldr	r3, [sp, #4]
   14a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a2c:	1c5a      	adds	r2, r3, #1
   14a2e:	4904      	ldr	r1, [pc, #16]	; (14a40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14a30:	9b01      	ldr	r3, [sp, #4]
   14a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a36:	bf00      	nop
   14a38:	b003      	add	sp, #12
   14a3a:	f85d fb04 	ldr.w	pc, [sp], #4
   14a3e:	bf00      	nop
   14a40:	1fff9664 	.word	0x1fff9664
   14a44:	1fff9660 	.word	0x1fff9660

00014a48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   14a48:	b500      	push	{lr}
   14a4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a4c:	f7ec fdd0 	bl	15f0 <Sys_GetCoreID>
   14a50:	4603      	mov	r3, r0
   14a52:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   14a54:	4a0d      	ldr	r2, [pc, #52]	; (14a8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14a56:	9b01      	ldr	r3, [sp, #4]
   14a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a5c:	1e5a      	subs	r2, r3, #1
   14a5e:	490b      	ldr	r1, [pc, #44]	; (14a8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14a60:	9b01      	ldr	r3, [sp, #4]
   14a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   14a66:	4a0a      	ldr	r2, [pc, #40]	; (14a90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   14a68:	9b01      	ldr	r3, [sp, #4]
   14a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a6e:	f003 0301 	and.w	r3, r3, #1
   14a72:	2b00      	cmp	r3, #0
   14a74:	d106      	bne.n	14a84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   14a76:	4a05      	ldr	r2, [pc, #20]	; (14a8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14a78:	9b01      	ldr	r3, [sp, #4]
   14a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a7e:	2b00      	cmp	r3, #0
   14a80:	d100      	bne.n	14a84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a84:	bf00      	nop
   14a86:	b003      	add	sp, #12
   14a88:	f85d fb04 	ldr.w	pc, [sp], #4
   14a8c:	1fff9664 	.word	0x1fff9664
   14a90:	1fff9660 	.word	0x1fff9660

00014a94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14a94:	b500      	push	{lr}
   14a96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a98:	f7ec fdaa 	bl	15f0 <Sys_GetCoreID>
   14a9c:	4603      	mov	r3, r0
   14a9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   14aa0:	4a10      	ldr	r2, [pc, #64]	; (14ae4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14aa2:	9b01      	ldr	r3, [sp, #4]
   14aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aa8:	2b00      	cmp	r3, #0
   14aaa:	d10d      	bne.n	14ac8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14aac:	f7ec f99a 	bl	de4 <Pwm_schm_read_msr>
   14ab0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ab2:	9b00      	ldr	r3, [sp, #0]
   14ab4:	f003 0301 	and.w	r3, r3, #1
   14ab8:	2b00      	cmp	r3, #0
   14aba:	d100      	bne.n	14abe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14abc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   14abe:	490a      	ldr	r1, [pc, #40]	; (14ae8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   14ac0:	9b01      	ldr	r3, [sp, #4]
   14ac2:	9a00      	ldr	r2, [sp, #0]
   14ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   14ac8:	4a06      	ldr	r2, [pc, #24]	; (14ae4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14aca:	9b01      	ldr	r3, [sp, #4]
   14acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ad0:	1c5a      	adds	r2, r3, #1
   14ad2:	4904      	ldr	r1, [pc, #16]	; (14ae4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14ad4:	9b01      	ldr	r3, [sp, #4]
   14ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ada:	bf00      	nop
   14adc:	b003      	add	sp, #12
   14ade:	f85d fb04 	ldr.w	pc, [sp], #4
   14ae2:	bf00      	nop
   14ae4:	1fff966c 	.word	0x1fff966c
   14ae8:	1fff9668 	.word	0x1fff9668

00014aec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14aec:	b500      	push	{lr}
   14aee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14af0:	f7ec fd7e 	bl	15f0 <Sys_GetCoreID>
   14af4:	4603      	mov	r3, r0
   14af6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   14af8:	4a0d      	ldr	r2, [pc, #52]	; (14b30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14afa:	9b01      	ldr	r3, [sp, #4]
   14afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b00:	1e5a      	subs	r2, r3, #1
   14b02:	490b      	ldr	r1, [pc, #44]	; (14b30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14b04:	9b01      	ldr	r3, [sp, #4]
   14b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   14b0a:	4a0a      	ldr	r2, [pc, #40]	; (14b34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   14b0c:	9b01      	ldr	r3, [sp, #4]
   14b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b12:	f003 0301 	and.w	r3, r3, #1
   14b16:	2b00      	cmp	r3, #0
   14b18:	d106      	bne.n	14b28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   14b1a:	4a05      	ldr	r2, [pc, #20]	; (14b30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14b1c:	9b01      	ldr	r3, [sp, #4]
   14b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b22:	2b00      	cmp	r3, #0
   14b24:	d100      	bne.n	14b28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b28:	bf00      	nop
   14b2a:	b003      	add	sp, #12
   14b2c:	f85d fb04 	ldr.w	pc, [sp], #4
   14b30:	1fff966c 	.word	0x1fff966c
   14b34:	1fff9668 	.word	0x1fff9668

00014b38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14b38:	b500      	push	{lr}
   14b3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b3c:	f7ec fd58 	bl	15f0 <Sys_GetCoreID>
   14b40:	4603      	mov	r3, r0
   14b42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   14b44:	4a10      	ldr	r2, [pc, #64]	; (14b88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14b46:	9b01      	ldr	r3, [sp, #4]
   14b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b4c:	2b00      	cmp	r3, #0
   14b4e:	d10d      	bne.n	14b6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b50:	f7ec f948 	bl	de4 <Pwm_schm_read_msr>
   14b54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b56:	9b00      	ldr	r3, [sp, #0]
   14b58:	f003 0301 	and.w	r3, r3, #1
   14b5c:	2b00      	cmp	r3, #0
   14b5e:	d100      	bne.n	14b62 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   14b62:	490a      	ldr	r1, [pc, #40]	; (14b8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   14b64:	9b01      	ldr	r3, [sp, #4]
   14b66:	9a00      	ldr	r2, [sp, #0]
   14b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   14b6c:	4a06      	ldr	r2, [pc, #24]	; (14b88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14b6e:	9b01      	ldr	r3, [sp, #4]
   14b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b74:	1c5a      	adds	r2, r3, #1
   14b76:	4904      	ldr	r1, [pc, #16]	; (14b88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14b78:	9b01      	ldr	r3, [sp, #4]
   14b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b7e:	bf00      	nop
   14b80:	b003      	add	sp, #12
   14b82:	f85d fb04 	ldr.w	pc, [sp], #4
   14b86:	bf00      	nop
   14b88:	1fff9674 	.word	0x1fff9674
   14b8c:	1fff9670 	.word	0x1fff9670

00014b90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14b90:	b500      	push	{lr}
   14b92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b94:	f7ec fd2c 	bl	15f0 <Sys_GetCoreID>
   14b98:	4603      	mov	r3, r0
   14b9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   14b9c:	4a0d      	ldr	r2, [pc, #52]	; (14bd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14b9e:	9b01      	ldr	r3, [sp, #4]
   14ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba4:	1e5a      	subs	r2, r3, #1
   14ba6:	490b      	ldr	r1, [pc, #44]	; (14bd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14ba8:	9b01      	ldr	r3, [sp, #4]
   14baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   14bae:	4a0a      	ldr	r2, [pc, #40]	; (14bd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   14bb0:	9b01      	ldr	r3, [sp, #4]
   14bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bb6:	f003 0301 	and.w	r3, r3, #1
   14bba:	2b00      	cmp	r3, #0
   14bbc:	d106      	bne.n	14bcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   14bbe:	4a05      	ldr	r2, [pc, #20]	; (14bd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14bc0:	9b01      	ldr	r3, [sp, #4]
   14bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bc6:	2b00      	cmp	r3, #0
   14bc8:	d100      	bne.n	14bcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bcc:	bf00      	nop
   14bce:	b003      	add	sp, #12
   14bd0:	f85d fb04 	ldr.w	pc, [sp], #4
   14bd4:	1fff9674 	.word	0x1fff9674
   14bd8:	1fff9670 	.word	0x1fff9670

00014bdc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14bdc:	b500      	push	{lr}
   14bde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14be0:	f7ec fd06 	bl	15f0 <Sys_GetCoreID>
   14be4:	4603      	mov	r3, r0
   14be6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   14be8:	4a10      	ldr	r2, [pc, #64]	; (14c2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14bea:	9b01      	ldr	r3, [sp, #4]
   14bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf0:	2b00      	cmp	r3, #0
   14bf2:	d10d      	bne.n	14c10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bf4:	f7ec f8f6 	bl	de4 <Pwm_schm_read_msr>
   14bf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bfa:	9b00      	ldr	r3, [sp, #0]
   14bfc:	f003 0301 	and.w	r3, r3, #1
   14c00:	2b00      	cmp	r3, #0
   14c02:	d100      	bne.n	14c06 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14c06:	490a      	ldr	r1, [pc, #40]	; (14c30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   14c08:	9b01      	ldr	r3, [sp, #4]
   14c0a:	9a00      	ldr	r2, [sp, #0]
   14c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   14c10:	4a06      	ldr	r2, [pc, #24]	; (14c2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14c12:	9b01      	ldr	r3, [sp, #4]
   14c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c18:	1c5a      	adds	r2, r3, #1
   14c1a:	4904      	ldr	r1, [pc, #16]	; (14c2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14c1c:	9b01      	ldr	r3, [sp, #4]
   14c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c22:	bf00      	nop
   14c24:	b003      	add	sp, #12
   14c26:	f85d fb04 	ldr.w	pc, [sp], #4
   14c2a:	bf00      	nop
   14c2c:	1fff967c 	.word	0x1fff967c
   14c30:	1fff9678 	.word	0x1fff9678

00014c34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14c34:	b500      	push	{lr}
   14c36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c38:	f7ec fcda 	bl	15f0 <Sys_GetCoreID>
   14c3c:	4603      	mov	r3, r0
   14c3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   14c40:	4a0d      	ldr	r2, [pc, #52]	; (14c78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14c42:	9b01      	ldr	r3, [sp, #4]
   14c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c48:	1e5a      	subs	r2, r3, #1
   14c4a:	490b      	ldr	r1, [pc, #44]	; (14c78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14c4c:	9b01      	ldr	r3, [sp, #4]
   14c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14c52:	4a0a      	ldr	r2, [pc, #40]	; (14c7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   14c54:	9b01      	ldr	r3, [sp, #4]
   14c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c5a:	f003 0301 	and.w	r3, r3, #1
   14c5e:	2b00      	cmp	r3, #0
   14c60:	d106      	bne.n	14c70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   14c62:	4a05      	ldr	r2, [pc, #20]	; (14c78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14c64:	9b01      	ldr	r3, [sp, #4]
   14c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c6a:	2b00      	cmp	r3, #0
   14c6c:	d100      	bne.n	14c70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c70:	bf00      	nop
   14c72:	b003      	add	sp, #12
   14c74:	f85d fb04 	ldr.w	pc, [sp], #4
   14c78:	1fff967c 	.word	0x1fff967c
   14c7c:	1fff9678 	.word	0x1fff9678

00014c80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14c80:	b500      	push	{lr}
   14c82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c84:	f7ec fcb4 	bl	15f0 <Sys_GetCoreID>
   14c88:	4603      	mov	r3, r0
   14c8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   14c8c:	4a10      	ldr	r2, [pc, #64]	; (14cd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14c8e:	9b01      	ldr	r3, [sp, #4]
   14c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c94:	2b00      	cmp	r3, #0
   14c96:	d10d      	bne.n	14cb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c98:	f7ec f8a4 	bl	de4 <Pwm_schm_read_msr>
   14c9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c9e:	9b00      	ldr	r3, [sp, #0]
   14ca0:	f003 0301 	and.w	r3, r3, #1
   14ca4:	2b00      	cmp	r3, #0
   14ca6:	d100      	bne.n	14caa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ca8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   14caa:	490a      	ldr	r1, [pc, #40]	; (14cd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   14cac:	9b01      	ldr	r3, [sp, #4]
   14cae:	9a00      	ldr	r2, [sp, #0]
   14cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   14cb4:	4a06      	ldr	r2, [pc, #24]	; (14cd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14cb6:	9b01      	ldr	r3, [sp, #4]
   14cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cbc:	1c5a      	adds	r2, r3, #1
   14cbe:	4904      	ldr	r1, [pc, #16]	; (14cd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14cc0:	9b01      	ldr	r3, [sp, #4]
   14cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14cc6:	bf00      	nop
   14cc8:	b003      	add	sp, #12
   14cca:	f85d fb04 	ldr.w	pc, [sp], #4
   14cce:	bf00      	nop
   14cd0:	1fff9684 	.word	0x1fff9684
   14cd4:	1fff9680 	.word	0x1fff9680

00014cd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14cd8:	b500      	push	{lr}
   14cda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cdc:	f7ec fc88 	bl	15f0 <Sys_GetCoreID>
   14ce0:	4603      	mov	r3, r0
   14ce2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   14ce4:	4a0d      	ldr	r2, [pc, #52]	; (14d1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14ce6:	9b01      	ldr	r3, [sp, #4]
   14ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cec:	1e5a      	subs	r2, r3, #1
   14cee:	490b      	ldr	r1, [pc, #44]	; (14d1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14cf0:	9b01      	ldr	r3, [sp, #4]
   14cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14cf6:	4a0a      	ldr	r2, [pc, #40]	; (14d20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   14cf8:	9b01      	ldr	r3, [sp, #4]
   14cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cfe:	f003 0301 	and.w	r3, r3, #1
   14d02:	2b00      	cmp	r3, #0
   14d04:	d106      	bne.n	14d14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   14d06:	4a05      	ldr	r2, [pc, #20]	; (14d1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14d08:	9b01      	ldr	r3, [sp, #4]
   14d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d0e:	2b00      	cmp	r3, #0
   14d10:	d100      	bne.n	14d14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d14:	bf00      	nop
   14d16:	b003      	add	sp, #12
   14d18:	f85d fb04 	ldr.w	pc, [sp], #4
   14d1c:	1fff9684 	.word	0x1fff9684
   14d20:	1fff9680 	.word	0x1fff9680

00014d24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14d24:	b500      	push	{lr}
   14d26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d28:	f7ec fc62 	bl	15f0 <Sys_GetCoreID>
   14d2c:	4603      	mov	r3, r0
   14d2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   14d30:	4a10      	ldr	r2, [pc, #64]	; (14d74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14d32:	9b01      	ldr	r3, [sp, #4]
   14d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d38:	2b00      	cmp	r3, #0
   14d3a:	d10d      	bne.n	14d58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d3c:	f7ec f852 	bl	de4 <Pwm_schm_read_msr>
   14d40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d42:	9b00      	ldr	r3, [sp, #0]
   14d44:	f003 0301 	and.w	r3, r3, #1
   14d48:	2b00      	cmp	r3, #0
   14d4a:	d100      	bne.n	14d4e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   14d4e:	490a      	ldr	r1, [pc, #40]	; (14d78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   14d50:	9b01      	ldr	r3, [sp, #4]
   14d52:	9a00      	ldr	r2, [sp, #0]
   14d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   14d58:	4a06      	ldr	r2, [pc, #24]	; (14d74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14d5a:	9b01      	ldr	r3, [sp, #4]
   14d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d60:	1c5a      	adds	r2, r3, #1
   14d62:	4904      	ldr	r1, [pc, #16]	; (14d74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14d64:	9b01      	ldr	r3, [sp, #4]
   14d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d6a:	bf00      	nop
   14d6c:	b003      	add	sp, #12
   14d6e:	f85d fb04 	ldr.w	pc, [sp], #4
   14d72:	bf00      	nop
   14d74:	1fff968c 	.word	0x1fff968c
   14d78:	1fff9688 	.word	0x1fff9688

00014d7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14d7c:	b500      	push	{lr}
   14d7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d80:	f7ec fc36 	bl	15f0 <Sys_GetCoreID>
   14d84:	4603      	mov	r3, r0
   14d86:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   14d88:	4a0d      	ldr	r2, [pc, #52]	; (14dc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14d8a:	9b01      	ldr	r3, [sp, #4]
   14d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d90:	1e5a      	subs	r2, r3, #1
   14d92:	490b      	ldr	r1, [pc, #44]	; (14dc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14d94:	9b01      	ldr	r3, [sp, #4]
   14d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   14d9a:	4a0a      	ldr	r2, [pc, #40]	; (14dc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   14d9c:	9b01      	ldr	r3, [sp, #4]
   14d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14da2:	f003 0301 	and.w	r3, r3, #1
   14da6:	2b00      	cmp	r3, #0
   14da8:	d106      	bne.n	14db8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   14daa:	4a05      	ldr	r2, [pc, #20]	; (14dc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14dac:	9b01      	ldr	r3, [sp, #4]
   14dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14db2:	2b00      	cmp	r3, #0
   14db4:	d100      	bne.n	14db8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14db6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14db8:	bf00      	nop
   14dba:	b003      	add	sp, #12
   14dbc:	f85d fb04 	ldr.w	pc, [sp], #4
   14dc0:	1fff968c 	.word	0x1fff968c
   14dc4:	1fff9688 	.word	0x1fff9688

00014dc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   14dc8:	b500      	push	{lr}
   14dca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dcc:	f7ec fc10 	bl	15f0 <Sys_GetCoreID>
   14dd0:	4603      	mov	r3, r0
   14dd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   14dd4:	4a10      	ldr	r2, [pc, #64]	; (14e18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   14dd6:	9b01      	ldr	r3, [sp, #4]
   14dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ddc:	2b00      	cmp	r3, #0
   14dde:	d10d      	bne.n	14dfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14de0:	f7ec f800 	bl	de4 <Pwm_schm_read_msr>
   14de4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14de6:	9b00      	ldr	r3, [sp, #0]
   14de8:	f003 0301 	and.w	r3, r3, #1
   14dec:	2b00      	cmp	r3, #0
   14dee:	d100      	bne.n	14df2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14df0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   14df2:	490a      	ldr	r1, [pc, #40]	; (14e1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   14df4:	9b01      	ldr	r3, [sp, #4]
   14df6:	9a00      	ldr	r2, [sp, #0]
   14df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   14dfc:	4a06      	ldr	r2, [pc, #24]	; (14e18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   14dfe:	9b01      	ldr	r3, [sp, #4]
   14e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e04:	1c5a      	adds	r2, r3, #1
   14e06:	4904      	ldr	r1, [pc, #16]	; (14e18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   14e08:	9b01      	ldr	r3, [sp, #4]
   14e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e0e:	bf00      	nop
   14e10:	b003      	add	sp, #12
   14e12:	f85d fb04 	ldr.w	pc, [sp], #4
   14e16:	bf00      	nop
   14e18:	1fff9694 	.word	0x1fff9694
   14e1c:	1fff9690 	.word	0x1fff9690

00014e20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   14e20:	b500      	push	{lr}
   14e22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e24:	f7ec fbe4 	bl	15f0 <Sys_GetCoreID>
   14e28:	4603      	mov	r3, r0
   14e2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   14e2c:	4a0d      	ldr	r2, [pc, #52]	; (14e64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   14e2e:	9b01      	ldr	r3, [sp, #4]
   14e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e34:	1e5a      	subs	r2, r3, #1
   14e36:	490b      	ldr	r1, [pc, #44]	; (14e64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   14e38:	9b01      	ldr	r3, [sp, #4]
   14e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   14e3e:	4a0a      	ldr	r2, [pc, #40]	; (14e68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   14e40:	9b01      	ldr	r3, [sp, #4]
   14e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e46:	f003 0301 	and.w	r3, r3, #1
   14e4a:	2b00      	cmp	r3, #0
   14e4c:	d106      	bne.n	14e5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   14e4e:	4a05      	ldr	r2, [pc, #20]	; (14e64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   14e50:	9b01      	ldr	r3, [sp, #4]
   14e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e56:	2b00      	cmp	r3, #0
   14e58:	d100      	bne.n	14e5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e5c:	bf00      	nop
   14e5e:	b003      	add	sp, #12
   14e60:	f85d fb04 	ldr.w	pc, [sp], #4
   14e64:	1fff9694 	.word	0x1fff9694
   14e68:	1fff9690 	.word	0x1fff9690

00014e6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   14e6c:	b500      	push	{lr}
   14e6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e70:	f7ec fbbe 	bl	15f0 <Sys_GetCoreID>
   14e74:	4603      	mov	r3, r0
   14e76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   14e78:	4a10      	ldr	r2, [pc, #64]	; (14ebc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   14e7a:	9b01      	ldr	r3, [sp, #4]
   14e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e80:	2b00      	cmp	r3, #0
   14e82:	d10d      	bne.n	14ea0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e84:	f7eb ffae 	bl	de4 <Pwm_schm_read_msr>
   14e88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e8a:	9b00      	ldr	r3, [sp, #0]
   14e8c:	f003 0301 	and.w	r3, r3, #1
   14e90:	2b00      	cmp	r3, #0
   14e92:	d100      	bne.n	14e96 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   14e96:	490a      	ldr	r1, [pc, #40]	; (14ec0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   14e98:	9b01      	ldr	r3, [sp, #4]
   14e9a:	9a00      	ldr	r2, [sp, #0]
   14e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   14ea0:	4a06      	ldr	r2, [pc, #24]	; (14ebc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   14ea2:	9b01      	ldr	r3, [sp, #4]
   14ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ea8:	1c5a      	adds	r2, r3, #1
   14eaa:	4904      	ldr	r1, [pc, #16]	; (14ebc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   14eac:	9b01      	ldr	r3, [sp, #4]
   14eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14eb2:	bf00      	nop
   14eb4:	b003      	add	sp, #12
   14eb6:	f85d fb04 	ldr.w	pc, [sp], #4
   14eba:	bf00      	nop
   14ebc:	1fff969c 	.word	0x1fff969c
   14ec0:	1fff9698 	.word	0x1fff9698

00014ec4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   14ec4:	b500      	push	{lr}
   14ec6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ec8:	f7ec fb92 	bl	15f0 <Sys_GetCoreID>
   14ecc:	4603      	mov	r3, r0
   14ece:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   14ed0:	4a0d      	ldr	r2, [pc, #52]	; (14f08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   14ed2:	9b01      	ldr	r3, [sp, #4]
   14ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ed8:	1e5a      	subs	r2, r3, #1
   14eda:	490b      	ldr	r1, [pc, #44]	; (14f08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   14edc:	9b01      	ldr	r3, [sp, #4]
   14ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   14ee2:	4a0a      	ldr	r2, [pc, #40]	; (14f0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   14ee4:	9b01      	ldr	r3, [sp, #4]
   14ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eea:	f003 0301 	and.w	r3, r3, #1
   14eee:	2b00      	cmp	r3, #0
   14ef0:	d106      	bne.n	14f00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   14ef2:	4a05      	ldr	r2, [pc, #20]	; (14f08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   14ef4:	9b01      	ldr	r3, [sp, #4]
   14ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14efa:	2b00      	cmp	r3, #0
   14efc:	d100      	bne.n	14f00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14efe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f00:	bf00      	nop
   14f02:	b003      	add	sp, #12
   14f04:	f85d fb04 	ldr.w	pc, [sp], #4
   14f08:	1fff969c 	.word	0x1fff969c
   14f0c:	1fff9698 	.word	0x1fff9698

00014f10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   14f10:	b500      	push	{lr}
   14f12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f14:	f7ec fb6c 	bl	15f0 <Sys_GetCoreID>
   14f18:	4603      	mov	r3, r0
   14f1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   14f1c:	4a10      	ldr	r2, [pc, #64]	; (14f60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   14f1e:	9b01      	ldr	r3, [sp, #4]
   14f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f24:	2b00      	cmp	r3, #0
   14f26:	d10d      	bne.n	14f44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f28:	f7eb ff5c 	bl	de4 <Pwm_schm_read_msr>
   14f2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f2e:	9b00      	ldr	r3, [sp, #0]
   14f30:	f003 0301 	and.w	r3, r3, #1
   14f34:	2b00      	cmp	r3, #0
   14f36:	d100      	bne.n	14f3a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   14f3a:	490a      	ldr	r1, [pc, #40]	; (14f64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   14f3c:	9b01      	ldr	r3, [sp, #4]
   14f3e:	9a00      	ldr	r2, [sp, #0]
   14f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   14f44:	4a06      	ldr	r2, [pc, #24]	; (14f60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   14f46:	9b01      	ldr	r3, [sp, #4]
   14f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f4c:	1c5a      	adds	r2, r3, #1
   14f4e:	4904      	ldr	r1, [pc, #16]	; (14f60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   14f50:	9b01      	ldr	r3, [sp, #4]
   14f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f56:	bf00      	nop
   14f58:	b003      	add	sp, #12
   14f5a:	f85d fb04 	ldr.w	pc, [sp], #4
   14f5e:	bf00      	nop
   14f60:	1fff96a4 	.word	0x1fff96a4
   14f64:	1fff96a0 	.word	0x1fff96a0

00014f68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   14f68:	b500      	push	{lr}
   14f6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f6c:	f7ec fb40 	bl	15f0 <Sys_GetCoreID>
   14f70:	4603      	mov	r3, r0
   14f72:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   14f74:	4a0d      	ldr	r2, [pc, #52]	; (14fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   14f76:	9b01      	ldr	r3, [sp, #4]
   14f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f7c:	1e5a      	subs	r2, r3, #1
   14f7e:	490b      	ldr	r1, [pc, #44]	; (14fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   14f80:	9b01      	ldr	r3, [sp, #4]
   14f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   14f86:	4a0a      	ldr	r2, [pc, #40]	; (14fb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   14f88:	9b01      	ldr	r3, [sp, #4]
   14f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f8e:	f003 0301 	and.w	r3, r3, #1
   14f92:	2b00      	cmp	r3, #0
   14f94:	d106      	bne.n	14fa4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   14f96:	4a05      	ldr	r2, [pc, #20]	; (14fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   14f98:	9b01      	ldr	r3, [sp, #4]
   14f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d100      	bne.n	14fa4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fa4:	bf00      	nop
   14fa6:	b003      	add	sp, #12
   14fa8:	f85d fb04 	ldr.w	pc, [sp], #4
   14fac:	1fff96a4 	.word	0x1fff96a4
   14fb0:	1fff96a0 	.word	0x1fff96a0

00014fb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   14fb4:	b500      	push	{lr}
   14fb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fb8:	f7ec fb1a 	bl	15f0 <Sys_GetCoreID>
   14fbc:	4603      	mov	r3, r0
   14fbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   14fc0:	4a10      	ldr	r2, [pc, #64]	; (15004 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   14fc2:	9b01      	ldr	r3, [sp, #4]
   14fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fc8:	2b00      	cmp	r3, #0
   14fca:	d10d      	bne.n	14fe8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14fcc:	f7eb ff0a 	bl	de4 <Pwm_schm_read_msr>
   14fd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14fd2:	9b00      	ldr	r3, [sp, #0]
   14fd4:	f003 0301 	and.w	r3, r3, #1
   14fd8:	2b00      	cmp	r3, #0
   14fda:	d100      	bne.n	14fde <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14fdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   14fde:	490a      	ldr	r1, [pc, #40]	; (15008 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   14fe0:	9b01      	ldr	r3, [sp, #4]
   14fe2:	9a00      	ldr	r2, [sp, #0]
   14fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   14fe8:	4a06      	ldr	r2, [pc, #24]	; (15004 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   14fea:	9b01      	ldr	r3, [sp, #4]
   14fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ff0:	1c5a      	adds	r2, r3, #1
   14ff2:	4904      	ldr	r1, [pc, #16]	; (15004 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   14ff4:	9b01      	ldr	r3, [sp, #4]
   14ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ffa:	bf00      	nop
   14ffc:	b003      	add	sp, #12
   14ffe:	f85d fb04 	ldr.w	pc, [sp], #4
   15002:	bf00      	nop
   15004:	1fff96ac 	.word	0x1fff96ac
   15008:	1fff96a8 	.word	0x1fff96a8

0001500c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   1500c:	b500      	push	{lr}
   1500e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15010:	f7ec faee 	bl	15f0 <Sys_GetCoreID>
   15014:	4603      	mov	r3, r0
   15016:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   15018:	4a0d      	ldr	r2, [pc, #52]	; (15050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1501a:	9b01      	ldr	r3, [sp, #4]
   1501c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15020:	1e5a      	subs	r2, r3, #1
   15022:	490b      	ldr	r1, [pc, #44]	; (15050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   15024:	9b01      	ldr	r3, [sp, #4]
   15026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1502a:	4a0a      	ldr	r2, [pc, #40]	; (15054 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   1502c:	9b01      	ldr	r3, [sp, #4]
   1502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15032:	f003 0301 	and.w	r3, r3, #1
   15036:	2b00      	cmp	r3, #0
   15038:	d106      	bne.n	15048 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   1503a:	4a05      	ldr	r2, [pc, #20]	; (15050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1503c:	9b01      	ldr	r3, [sp, #4]
   1503e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15042:	2b00      	cmp	r3, #0
   15044:	d100      	bne.n	15048 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15046:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15048:	bf00      	nop
   1504a:	b003      	add	sp, #12
   1504c:	f85d fb04 	ldr.w	pc, [sp], #4
   15050:	1fff96ac 	.word	0x1fff96ac
   15054:	1fff96a8 	.word	0x1fff96a8

00015058 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   15058:	b500      	push	{lr}
   1505a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1505c:	f7ec fac8 	bl	15f0 <Sys_GetCoreID>
   15060:	4603      	mov	r3, r0
   15062:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   15064:	4a10      	ldr	r2, [pc, #64]	; (150a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   15066:	9b01      	ldr	r3, [sp, #4]
   15068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1506c:	2b00      	cmp	r3, #0
   1506e:	d10d      	bne.n	1508c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15070:	f7eb feb8 	bl	de4 <Pwm_schm_read_msr>
   15074:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15076:	9b00      	ldr	r3, [sp, #0]
   15078:	f003 0301 	and.w	r3, r3, #1
   1507c:	2b00      	cmp	r3, #0
   1507e:	d100      	bne.n	15082 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15080:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   15082:	490a      	ldr	r1, [pc, #40]	; (150ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   15084:	9b01      	ldr	r3, [sp, #4]
   15086:	9a00      	ldr	r2, [sp, #0]
   15088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   1508c:	4a06      	ldr	r2, [pc, #24]	; (150a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1508e:	9b01      	ldr	r3, [sp, #4]
   15090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15094:	1c5a      	adds	r2, r3, #1
   15096:	4904      	ldr	r1, [pc, #16]	; (150a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   15098:	9b01      	ldr	r3, [sp, #4]
   1509a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1509e:	bf00      	nop
   150a0:	b003      	add	sp, #12
   150a2:	f85d fb04 	ldr.w	pc, [sp], #4
   150a6:	bf00      	nop
   150a8:	1fff96b4 	.word	0x1fff96b4
   150ac:	1fff96b0 	.word	0x1fff96b0

000150b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   150b0:	b500      	push	{lr}
   150b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150b4:	f7ec fa9c 	bl	15f0 <Sys_GetCoreID>
   150b8:	4603      	mov	r3, r0
   150ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   150bc:	4a0d      	ldr	r2, [pc, #52]	; (150f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   150be:	9b01      	ldr	r3, [sp, #4]
   150c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c4:	1e5a      	subs	r2, r3, #1
   150c6:	490b      	ldr	r1, [pc, #44]	; (150f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   150c8:	9b01      	ldr	r3, [sp, #4]
   150ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   150ce:	4a0a      	ldr	r2, [pc, #40]	; (150f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   150d0:	9b01      	ldr	r3, [sp, #4]
   150d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150d6:	f003 0301 	and.w	r3, r3, #1
   150da:	2b00      	cmp	r3, #0
   150dc:	d106      	bne.n	150ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   150de:	4a05      	ldr	r2, [pc, #20]	; (150f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   150e0:	9b01      	ldr	r3, [sp, #4]
   150e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150e6:	2b00      	cmp	r3, #0
   150e8:	d100      	bne.n	150ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   150ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   150ec:	bf00      	nop
   150ee:	b003      	add	sp, #12
   150f0:	f85d fb04 	ldr.w	pc, [sp], #4
   150f4:	1fff96b4 	.word	0x1fff96b4
   150f8:	1fff96b0 	.word	0x1fff96b0

000150fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   150fc:	b500      	push	{lr}
   150fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15100:	f7ec fa76 	bl	15f0 <Sys_GetCoreID>
   15104:	4603      	mov	r3, r0
   15106:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   15108:	4a10      	ldr	r2, [pc, #64]	; (1514c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1510a:	9b01      	ldr	r3, [sp, #4]
   1510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15110:	2b00      	cmp	r3, #0
   15112:	d10d      	bne.n	15130 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15114:	f7eb fe66 	bl	de4 <Pwm_schm_read_msr>
   15118:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1511a:	9b00      	ldr	r3, [sp, #0]
   1511c:	f003 0301 	and.w	r3, r3, #1
   15120:	2b00      	cmp	r3, #0
   15122:	d100      	bne.n	15126 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15124:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15126:	490a      	ldr	r1, [pc, #40]	; (15150 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   15128:	9b01      	ldr	r3, [sp, #4]
   1512a:	9a00      	ldr	r2, [sp, #0]
   1512c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   15130:	4a06      	ldr	r2, [pc, #24]	; (1514c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   15132:	9b01      	ldr	r3, [sp, #4]
   15134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15138:	1c5a      	adds	r2, r3, #1
   1513a:	4904      	ldr	r1, [pc, #16]	; (1514c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1513c:	9b01      	ldr	r3, [sp, #4]
   1513e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15142:	bf00      	nop
   15144:	b003      	add	sp, #12
   15146:	f85d fb04 	ldr.w	pc, [sp], #4
   1514a:	bf00      	nop
   1514c:	1fff96bc 	.word	0x1fff96bc
   15150:	1fff96b8 	.word	0x1fff96b8

00015154 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   15154:	b500      	push	{lr}
   15156:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15158:	f7ec fa4a 	bl	15f0 <Sys_GetCoreID>
   1515c:	4603      	mov	r3, r0
   1515e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   15160:	4a0d      	ldr	r2, [pc, #52]	; (15198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   15162:	9b01      	ldr	r3, [sp, #4]
   15164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15168:	1e5a      	subs	r2, r3, #1
   1516a:	490b      	ldr	r1, [pc, #44]	; (15198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   1516c:	9b01      	ldr	r3, [sp, #4]
   1516e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15172:	4a0a      	ldr	r2, [pc, #40]	; (1519c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   15174:	9b01      	ldr	r3, [sp, #4]
   15176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1517a:	f003 0301 	and.w	r3, r3, #1
   1517e:	2b00      	cmp	r3, #0
   15180:	d106      	bne.n	15190 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   15182:	4a05      	ldr	r2, [pc, #20]	; (15198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   15184:	9b01      	ldr	r3, [sp, #4]
   15186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1518a:	2b00      	cmp	r3, #0
   1518c:	d100      	bne.n	15190 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1518e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15190:	bf00      	nop
   15192:	b003      	add	sp, #12
   15194:	f85d fb04 	ldr.w	pc, [sp], #4
   15198:	1fff96bc 	.word	0x1fff96bc
   1519c:	1fff96b8 	.word	0x1fff96b8

000151a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   151a0:	b500      	push	{lr}
   151a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151a4:	f7ec fa24 	bl	15f0 <Sys_GetCoreID>
   151a8:	4603      	mov	r3, r0
   151aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   151ac:	4a10      	ldr	r2, [pc, #64]	; (151f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   151ae:	9b01      	ldr	r3, [sp, #4]
   151b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151b4:	2b00      	cmp	r3, #0
   151b6:	d10d      	bne.n	151d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151b8:	f7eb fe14 	bl	de4 <Pwm_schm_read_msr>
   151bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151be:	9b00      	ldr	r3, [sp, #0]
   151c0:	f003 0301 	and.w	r3, r3, #1
   151c4:	2b00      	cmp	r3, #0
   151c6:	d100      	bne.n	151ca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   151ca:	490a      	ldr	r1, [pc, #40]	; (151f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   151cc:	9b01      	ldr	r3, [sp, #4]
   151ce:	9a00      	ldr	r2, [sp, #0]
   151d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   151d4:	4a06      	ldr	r2, [pc, #24]	; (151f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   151d6:	9b01      	ldr	r3, [sp, #4]
   151d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151dc:	1c5a      	adds	r2, r3, #1
   151de:	4904      	ldr	r1, [pc, #16]	; (151f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   151e0:	9b01      	ldr	r3, [sp, #4]
   151e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151e6:	bf00      	nop
   151e8:	b003      	add	sp, #12
   151ea:	f85d fb04 	ldr.w	pc, [sp], #4
   151ee:	bf00      	nop
   151f0:	1fff96c4 	.word	0x1fff96c4
   151f4:	1fff96c0 	.word	0x1fff96c0

000151f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   151f8:	b500      	push	{lr}
   151fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151fc:	f7ec f9f8 	bl	15f0 <Sys_GetCoreID>
   15200:	4603      	mov	r3, r0
   15202:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   15204:	4a0d      	ldr	r2, [pc, #52]	; (1523c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15206:	9b01      	ldr	r3, [sp, #4]
   15208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1520c:	1e5a      	subs	r2, r3, #1
   1520e:	490b      	ldr	r1, [pc, #44]	; (1523c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15210:	9b01      	ldr	r3, [sp, #4]
   15212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15216:	4a0a      	ldr	r2, [pc, #40]	; (15240 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   15218:	9b01      	ldr	r3, [sp, #4]
   1521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1521e:	f003 0301 	and.w	r3, r3, #1
   15222:	2b00      	cmp	r3, #0
   15224:	d106      	bne.n	15234 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   15226:	4a05      	ldr	r2, [pc, #20]	; (1523c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15228:	9b01      	ldr	r3, [sp, #4]
   1522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1522e:	2b00      	cmp	r3, #0
   15230:	d100      	bne.n	15234 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15232:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15234:	bf00      	nop
   15236:	b003      	add	sp, #12
   15238:	f85d fb04 	ldr.w	pc, [sp], #4
   1523c:	1fff96c4 	.word	0x1fff96c4
   15240:	1fff96c0 	.word	0x1fff96c0

00015244 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   15244:	b500      	push	{lr}
   15246:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15248:	f7ec f9d2 	bl	15f0 <Sys_GetCoreID>
   1524c:	4603      	mov	r3, r0
   1524e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   15250:	4a10      	ldr	r2, [pc, #64]	; (15294 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   15252:	9b01      	ldr	r3, [sp, #4]
   15254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15258:	2b00      	cmp	r3, #0
   1525a:	d10d      	bne.n	15278 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1525c:	f7eb fdc2 	bl	de4 <Pwm_schm_read_msr>
   15260:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15262:	9b00      	ldr	r3, [sp, #0]
   15264:	f003 0301 	and.w	r3, r3, #1
   15268:	2b00      	cmp	r3, #0
   1526a:	d100      	bne.n	1526e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1526c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1526e:	490a      	ldr	r1, [pc, #40]	; (15298 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   15270:	9b01      	ldr	r3, [sp, #4]
   15272:	9a00      	ldr	r2, [sp, #0]
   15274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   15278:	4a06      	ldr	r2, [pc, #24]	; (15294 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   1527a:	9b01      	ldr	r3, [sp, #4]
   1527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15280:	1c5a      	adds	r2, r3, #1
   15282:	4904      	ldr	r1, [pc, #16]	; (15294 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   15284:	9b01      	ldr	r3, [sp, #4]
   15286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1528a:	bf00      	nop
   1528c:	b003      	add	sp, #12
   1528e:	f85d fb04 	ldr.w	pc, [sp], #4
   15292:	bf00      	nop
   15294:	1fff96cc 	.word	0x1fff96cc
   15298:	1fff96c8 	.word	0x1fff96c8

0001529c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   1529c:	b500      	push	{lr}
   1529e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152a0:	f7ec f9a6 	bl	15f0 <Sys_GetCoreID>
   152a4:	4603      	mov	r3, r0
   152a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   152a8:	4a0d      	ldr	r2, [pc, #52]	; (152e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   152aa:	9b01      	ldr	r3, [sp, #4]
   152ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152b0:	1e5a      	subs	r2, r3, #1
   152b2:	490b      	ldr	r1, [pc, #44]	; (152e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   152b4:	9b01      	ldr	r3, [sp, #4]
   152b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   152ba:	4a0a      	ldr	r2, [pc, #40]	; (152e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   152bc:	9b01      	ldr	r3, [sp, #4]
   152be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152c2:	f003 0301 	and.w	r3, r3, #1
   152c6:	2b00      	cmp	r3, #0
   152c8:	d106      	bne.n	152d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   152ca:	4a05      	ldr	r2, [pc, #20]	; (152e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   152cc:	9b01      	ldr	r3, [sp, #4]
   152ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152d2:	2b00      	cmp	r3, #0
   152d4:	d100      	bne.n	152d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   152d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   152d8:	bf00      	nop
   152da:	b003      	add	sp, #12
   152dc:	f85d fb04 	ldr.w	pc, [sp], #4
   152e0:	1fff96cc 	.word	0x1fff96cc
   152e4:	1fff96c8 	.word	0x1fff96c8

000152e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   152e8:	b500      	push	{lr}
   152ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152ec:	f7ec f980 	bl	15f0 <Sys_GetCoreID>
   152f0:	4603      	mov	r3, r0
   152f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   152f4:	4a10      	ldr	r2, [pc, #64]	; (15338 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   152f6:	9b01      	ldr	r3, [sp, #4]
   152f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152fc:	2b00      	cmp	r3, #0
   152fe:	d10d      	bne.n	1531c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15300:	f7eb fd70 	bl	de4 <Pwm_schm_read_msr>
   15304:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15306:	9b00      	ldr	r3, [sp, #0]
   15308:	f003 0301 	and.w	r3, r3, #1
   1530c:	2b00      	cmp	r3, #0
   1530e:	d100      	bne.n	15312 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15310:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15312:	490a      	ldr	r1, [pc, #40]	; (1533c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   15314:	9b01      	ldr	r3, [sp, #4]
   15316:	9a00      	ldr	r2, [sp, #0]
   15318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   1531c:	4a06      	ldr	r2, [pc, #24]	; (15338 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   1531e:	9b01      	ldr	r3, [sp, #4]
   15320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15324:	1c5a      	adds	r2, r3, #1
   15326:	4904      	ldr	r1, [pc, #16]	; (15338 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   15328:	9b01      	ldr	r3, [sp, #4]
   1532a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1532e:	bf00      	nop
   15330:	b003      	add	sp, #12
   15332:	f85d fb04 	ldr.w	pc, [sp], #4
   15336:	bf00      	nop
   15338:	1fff96d4 	.word	0x1fff96d4
   1533c:	1fff96d0 	.word	0x1fff96d0

00015340 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   15340:	b500      	push	{lr}
   15342:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15344:	f7ec f954 	bl	15f0 <Sys_GetCoreID>
   15348:	4603      	mov	r3, r0
   1534a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   1534c:	4a0d      	ldr	r2, [pc, #52]	; (15384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   1534e:	9b01      	ldr	r3, [sp, #4]
   15350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15354:	1e5a      	subs	r2, r3, #1
   15356:	490b      	ldr	r1, [pc, #44]	; (15384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   15358:	9b01      	ldr	r3, [sp, #4]
   1535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   1535e:	4a0a      	ldr	r2, [pc, #40]	; (15388 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   15360:	9b01      	ldr	r3, [sp, #4]
   15362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15366:	f003 0301 	and.w	r3, r3, #1
   1536a:	2b00      	cmp	r3, #0
   1536c:	d106      	bne.n	1537c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   1536e:	4a05      	ldr	r2, [pc, #20]	; (15384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   15370:	9b01      	ldr	r3, [sp, #4]
   15372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15376:	2b00      	cmp	r3, #0
   15378:	d100      	bne.n	1537c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1537a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1537c:	bf00      	nop
   1537e:	b003      	add	sp, #12
   15380:	f85d fb04 	ldr.w	pc, [sp], #4
   15384:	1fff96d4 	.word	0x1fff96d4
   15388:	1fff96d0 	.word	0x1fff96d0

0001538c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   1538c:	b500      	push	{lr}
   1538e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15390:	f7ec f92e 	bl	15f0 <Sys_GetCoreID>
   15394:	4603      	mov	r3, r0
   15396:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   15398:	4a10      	ldr	r2, [pc, #64]	; (153dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   1539a:	9b01      	ldr	r3, [sp, #4]
   1539c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a0:	2b00      	cmp	r3, #0
   153a2:	d10d      	bne.n	153c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153a4:	f7eb fd1e 	bl	de4 <Pwm_schm_read_msr>
   153a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153aa:	9b00      	ldr	r3, [sp, #0]
   153ac:	f003 0301 	and.w	r3, r3, #1
   153b0:	2b00      	cmp	r3, #0
   153b2:	d100      	bne.n	153b6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   153b6:	490a      	ldr	r1, [pc, #40]	; (153e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   153b8:	9b01      	ldr	r3, [sp, #4]
   153ba:	9a00      	ldr	r2, [sp, #0]
   153bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   153c0:	4a06      	ldr	r2, [pc, #24]	; (153dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   153c2:	9b01      	ldr	r3, [sp, #4]
   153c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153c8:	1c5a      	adds	r2, r3, #1
   153ca:	4904      	ldr	r1, [pc, #16]	; (153dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   153cc:	9b01      	ldr	r3, [sp, #4]
   153ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153d2:	bf00      	nop
   153d4:	b003      	add	sp, #12
   153d6:	f85d fb04 	ldr.w	pc, [sp], #4
   153da:	bf00      	nop
   153dc:	1fff96dc 	.word	0x1fff96dc
   153e0:	1fff96d8 	.word	0x1fff96d8

000153e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   153e4:	b500      	push	{lr}
   153e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153e8:	f7ec f902 	bl	15f0 <Sys_GetCoreID>
   153ec:	4603      	mov	r3, r0
   153ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   153f0:	4a0d      	ldr	r2, [pc, #52]	; (15428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   153f2:	9b01      	ldr	r3, [sp, #4]
   153f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153f8:	1e5a      	subs	r2, r3, #1
   153fa:	490b      	ldr	r1, [pc, #44]	; (15428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   153fc:	9b01      	ldr	r3, [sp, #4]
   153fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15402:	4a0a      	ldr	r2, [pc, #40]	; (1542c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   15404:	9b01      	ldr	r3, [sp, #4]
   15406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1540a:	f003 0301 	and.w	r3, r3, #1
   1540e:	2b00      	cmp	r3, #0
   15410:	d106      	bne.n	15420 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   15412:	4a05      	ldr	r2, [pc, #20]	; (15428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   15414:	9b01      	ldr	r3, [sp, #4]
   15416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1541a:	2b00      	cmp	r3, #0
   1541c:	d100      	bne.n	15420 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1541e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15420:	bf00      	nop
   15422:	b003      	add	sp, #12
   15424:	f85d fb04 	ldr.w	pc, [sp], #4
   15428:	1fff96dc 	.word	0x1fff96dc
   1542c:	1fff96d8 	.word	0x1fff96d8

00015430 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   15430:	b500      	push	{lr}
   15432:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15434:	f7ec f8dc 	bl	15f0 <Sys_GetCoreID>
   15438:	4603      	mov	r3, r0
   1543a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   1543c:	4a10      	ldr	r2, [pc, #64]	; (15480 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   1543e:	9b01      	ldr	r3, [sp, #4]
   15440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15444:	2b00      	cmp	r3, #0
   15446:	d10d      	bne.n	15464 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15448:	f7eb fccc 	bl	de4 <Pwm_schm_read_msr>
   1544c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1544e:	9b00      	ldr	r3, [sp, #0]
   15450:	f003 0301 	and.w	r3, r3, #1
   15454:	2b00      	cmp	r3, #0
   15456:	d100      	bne.n	1545a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15458:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1545a:	490a      	ldr	r1, [pc, #40]	; (15484 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   1545c:	9b01      	ldr	r3, [sp, #4]
   1545e:	9a00      	ldr	r2, [sp, #0]
   15460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   15464:	4a06      	ldr	r2, [pc, #24]	; (15480 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   15466:	9b01      	ldr	r3, [sp, #4]
   15468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1546c:	1c5a      	adds	r2, r3, #1
   1546e:	4904      	ldr	r1, [pc, #16]	; (15480 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   15470:	9b01      	ldr	r3, [sp, #4]
   15472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15476:	bf00      	nop
   15478:	b003      	add	sp, #12
   1547a:	f85d fb04 	ldr.w	pc, [sp], #4
   1547e:	bf00      	nop
   15480:	1fff96e4 	.word	0x1fff96e4
   15484:	1fff96e0 	.word	0x1fff96e0

00015488 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   15488:	b500      	push	{lr}
   1548a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1548c:	f7ec f8b0 	bl	15f0 <Sys_GetCoreID>
   15490:	4603      	mov	r3, r0
   15492:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   15494:	4a0d      	ldr	r2, [pc, #52]	; (154cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   15496:	9b01      	ldr	r3, [sp, #4]
   15498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1549c:	1e5a      	subs	r2, r3, #1
   1549e:	490b      	ldr	r1, [pc, #44]	; (154cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   154a0:	9b01      	ldr	r3, [sp, #4]
   154a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   154a6:	4a0a      	ldr	r2, [pc, #40]	; (154d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   154a8:	9b01      	ldr	r3, [sp, #4]
   154aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ae:	f003 0301 	and.w	r3, r3, #1
   154b2:	2b00      	cmp	r3, #0
   154b4:	d106      	bne.n	154c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   154b6:	4a05      	ldr	r2, [pc, #20]	; (154cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   154b8:	9b01      	ldr	r3, [sp, #4]
   154ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154be:	2b00      	cmp	r3, #0
   154c0:	d100      	bne.n	154c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154c4:	bf00      	nop
   154c6:	b003      	add	sp, #12
   154c8:	f85d fb04 	ldr.w	pc, [sp], #4
   154cc:	1fff96e4 	.word	0x1fff96e4
   154d0:	1fff96e0 	.word	0x1fff96e0

000154d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   154d4:	b500      	push	{lr}
   154d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154d8:	f7ec f88a 	bl	15f0 <Sys_GetCoreID>
   154dc:	4603      	mov	r3, r0
   154de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   154e0:	4a10      	ldr	r2, [pc, #64]	; (15524 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   154e2:	9b01      	ldr	r3, [sp, #4]
   154e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154e8:	2b00      	cmp	r3, #0
   154ea:	d10d      	bne.n	15508 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   154ec:	f7eb fc7a 	bl	de4 <Pwm_schm_read_msr>
   154f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154f2:	9b00      	ldr	r3, [sp, #0]
   154f4:	f003 0301 	and.w	r3, r3, #1
   154f8:	2b00      	cmp	r3, #0
   154fa:	d100      	bne.n	154fe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   154fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   154fe:	490a      	ldr	r1, [pc, #40]	; (15528 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   15500:	9b01      	ldr	r3, [sp, #4]
   15502:	9a00      	ldr	r2, [sp, #0]
   15504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   15508:	4a06      	ldr	r2, [pc, #24]	; (15524 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   1550a:	9b01      	ldr	r3, [sp, #4]
   1550c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15510:	1c5a      	adds	r2, r3, #1
   15512:	4904      	ldr	r1, [pc, #16]	; (15524 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   15514:	9b01      	ldr	r3, [sp, #4]
   15516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1551a:	bf00      	nop
   1551c:	b003      	add	sp, #12
   1551e:	f85d fb04 	ldr.w	pc, [sp], #4
   15522:	bf00      	nop
   15524:	1fff96ec 	.word	0x1fff96ec
   15528:	1fff96e8 	.word	0x1fff96e8

0001552c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   1552c:	b500      	push	{lr}
   1552e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15530:	f7ec f85e 	bl	15f0 <Sys_GetCoreID>
   15534:	4603      	mov	r3, r0
   15536:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   15538:	4a0d      	ldr	r2, [pc, #52]	; (15570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   1553a:	9b01      	ldr	r3, [sp, #4]
   1553c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15540:	1e5a      	subs	r2, r3, #1
   15542:	490b      	ldr	r1, [pc, #44]	; (15570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   15544:	9b01      	ldr	r3, [sp, #4]
   15546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   1554a:	4a0a      	ldr	r2, [pc, #40]	; (15574 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   1554c:	9b01      	ldr	r3, [sp, #4]
   1554e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15552:	f003 0301 	and.w	r3, r3, #1
   15556:	2b00      	cmp	r3, #0
   15558:	d106      	bne.n	15568 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   1555a:	4a05      	ldr	r2, [pc, #20]	; (15570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   1555c:	9b01      	ldr	r3, [sp, #4]
   1555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15562:	2b00      	cmp	r3, #0
   15564:	d100      	bne.n	15568 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15566:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15568:	bf00      	nop
   1556a:	b003      	add	sp, #12
   1556c:	f85d fb04 	ldr.w	pc, [sp], #4
   15570:	1fff96ec 	.word	0x1fff96ec
   15574:	1fff96e8 	.word	0x1fff96e8

00015578 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   15578:	b500      	push	{lr}
   1557a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1557c:	f7ec f838 	bl	15f0 <Sys_GetCoreID>
   15580:	4603      	mov	r3, r0
   15582:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   15584:	4a10      	ldr	r2, [pc, #64]	; (155c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   15586:	9b01      	ldr	r3, [sp, #4]
   15588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1558c:	2b00      	cmp	r3, #0
   1558e:	d10d      	bne.n	155ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15590:	f7eb fc28 	bl	de4 <Pwm_schm_read_msr>
   15594:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15596:	9b00      	ldr	r3, [sp, #0]
   15598:	f003 0301 	and.w	r3, r3, #1
   1559c:	2b00      	cmp	r3, #0
   1559e:	d100      	bne.n	155a2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   155a2:	490a      	ldr	r1, [pc, #40]	; (155cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   155a4:	9b01      	ldr	r3, [sp, #4]
   155a6:	9a00      	ldr	r2, [sp, #0]
   155a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   155ac:	4a06      	ldr	r2, [pc, #24]	; (155c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   155ae:	9b01      	ldr	r3, [sp, #4]
   155b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155b4:	1c5a      	adds	r2, r3, #1
   155b6:	4904      	ldr	r1, [pc, #16]	; (155c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   155b8:	9b01      	ldr	r3, [sp, #4]
   155ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155be:	bf00      	nop
   155c0:	b003      	add	sp, #12
   155c2:	f85d fb04 	ldr.w	pc, [sp], #4
   155c6:	bf00      	nop
   155c8:	1fff96f4 	.word	0x1fff96f4
   155cc:	1fff96f0 	.word	0x1fff96f0

000155d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   155d0:	b500      	push	{lr}
   155d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155d4:	f7ec f80c 	bl	15f0 <Sys_GetCoreID>
   155d8:	4603      	mov	r3, r0
   155da:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   155dc:	4a0d      	ldr	r2, [pc, #52]	; (15614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   155de:	9b01      	ldr	r3, [sp, #4]
   155e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e4:	1e5a      	subs	r2, r3, #1
   155e6:	490b      	ldr	r1, [pc, #44]	; (15614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   155e8:	9b01      	ldr	r3, [sp, #4]
   155ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   155ee:	4a0a      	ldr	r2, [pc, #40]	; (15618 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   155f0:	9b01      	ldr	r3, [sp, #4]
   155f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155f6:	f003 0301 	and.w	r3, r3, #1
   155fa:	2b00      	cmp	r3, #0
   155fc:	d106      	bne.n	1560c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   155fe:	4a05      	ldr	r2, [pc, #20]	; (15614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15600:	9b01      	ldr	r3, [sp, #4]
   15602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15606:	2b00      	cmp	r3, #0
   15608:	d100      	bne.n	1560c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1560a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1560c:	bf00      	nop
   1560e:	b003      	add	sp, #12
   15610:	f85d fb04 	ldr.w	pc, [sp], #4
   15614:	1fff96f4 	.word	0x1fff96f4
   15618:	1fff96f0 	.word	0x1fff96f0

0001561c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   1561c:	b500      	push	{lr}
   1561e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15620:	f7eb ffe6 	bl	15f0 <Sys_GetCoreID>
   15624:	4603      	mov	r3, r0
   15626:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   15628:	4a10      	ldr	r2, [pc, #64]	; (1566c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   1562a:	9b01      	ldr	r3, [sp, #4]
   1562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15630:	2b00      	cmp	r3, #0
   15632:	d10d      	bne.n	15650 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15634:	f7eb fbd6 	bl	de4 <Pwm_schm_read_msr>
   15638:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1563a:	9b00      	ldr	r3, [sp, #0]
   1563c:	f003 0301 	and.w	r3, r3, #1
   15640:	2b00      	cmp	r3, #0
   15642:	d100      	bne.n	15646 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15644:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   15646:	490a      	ldr	r1, [pc, #40]	; (15670 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   15648:	9b01      	ldr	r3, [sp, #4]
   1564a:	9a00      	ldr	r2, [sp, #0]
   1564c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   15650:	4a06      	ldr	r2, [pc, #24]	; (1566c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   15652:	9b01      	ldr	r3, [sp, #4]
   15654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15658:	1c5a      	adds	r2, r3, #1
   1565a:	4904      	ldr	r1, [pc, #16]	; (1566c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   1565c:	9b01      	ldr	r3, [sp, #4]
   1565e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15662:	bf00      	nop
   15664:	b003      	add	sp, #12
   15666:	f85d fb04 	ldr.w	pc, [sp], #4
   1566a:	bf00      	nop
   1566c:	1fff96fc 	.word	0x1fff96fc
   15670:	1fff96f8 	.word	0x1fff96f8

00015674 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   15674:	b500      	push	{lr}
   15676:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15678:	f7eb ffba 	bl	15f0 <Sys_GetCoreID>
   1567c:	4603      	mov	r3, r0
   1567e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   15680:	4a0d      	ldr	r2, [pc, #52]	; (156b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   15682:	9b01      	ldr	r3, [sp, #4]
   15684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15688:	1e5a      	subs	r2, r3, #1
   1568a:	490b      	ldr	r1, [pc, #44]	; (156b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   1568c:	9b01      	ldr	r3, [sp, #4]
   1568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   15692:	4a0a      	ldr	r2, [pc, #40]	; (156bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   15694:	9b01      	ldr	r3, [sp, #4]
   15696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1569a:	f003 0301 	and.w	r3, r3, #1
   1569e:	2b00      	cmp	r3, #0
   156a0:	d106      	bne.n	156b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   156a2:	4a05      	ldr	r2, [pc, #20]	; (156b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   156a4:	9b01      	ldr	r3, [sp, #4]
   156a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156aa:	2b00      	cmp	r3, #0
   156ac:	d100      	bne.n	156b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156b0:	bf00      	nop
   156b2:	b003      	add	sp, #12
   156b4:	f85d fb04 	ldr.w	pc, [sp], #4
   156b8:	1fff96fc 	.word	0x1fff96fc
   156bc:	1fff96f8 	.word	0x1fff96f8

000156c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   156c0:	b500      	push	{lr}
   156c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156c4:	f7eb ff94 	bl	15f0 <Sys_GetCoreID>
   156c8:	4603      	mov	r3, r0
   156ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   156cc:	4a10      	ldr	r2, [pc, #64]	; (15710 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   156ce:	9b01      	ldr	r3, [sp, #4]
   156d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d4:	2b00      	cmp	r3, #0
   156d6:	d10d      	bne.n	156f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   156d8:	f7eb fb84 	bl	de4 <Pwm_schm_read_msr>
   156dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   156de:	9b00      	ldr	r3, [sp, #0]
   156e0:	f003 0301 	and.w	r3, r3, #1
   156e4:	2b00      	cmp	r3, #0
   156e6:	d100      	bne.n	156ea <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   156e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   156ea:	490a      	ldr	r1, [pc, #40]	; (15714 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   156ec:	9b01      	ldr	r3, [sp, #4]
   156ee:	9a00      	ldr	r2, [sp, #0]
   156f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   156f4:	4a06      	ldr	r2, [pc, #24]	; (15710 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   156f6:	9b01      	ldr	r3, [sp, #4]
   156f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156fc:	1c5a      	adds	r2, r3, #1
   156fe:	4904      	ldr	r1, [pc, #16]	; (15710 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   15700:	9b01      	ldr	r3, [sp, #4]
   15702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15706:	bf00      	nop
   15708:	b003      	add	sp, #12
   1570a:	f85d fb04 	ldr.w	pc, [sp], #4
   1570e:	bf00      	nop
   15710:	1fff9704 	.word	0x1fff9704
   15714:	1fff9700 	.word	0x1fff9700

00015718 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   15718:	b500      	push	{lr}
   1571a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1571c:	f7eb ff68 	bl	15f0 <Sys_GetCoreID>
   15720:	4603      	mov	r3, r0
   15722:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   15724:	4a0d      	ldr	r2, [pc, #52]	; (1575c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15726:	9b01      	ldr	r3, [sp, #4]
   15728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1572c:	1e5a      	subs	r2, r3, #1
   1572e:	490b      	ldr	r1, [pc, #44]	; (1575c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15730:	9b01      	ldr	r3, [sp, #4]
   15732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   15736:	4a0a      	ldr	r2, [pc, #40]	; (15760 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   15738:	9b01      	ldr	r3, [sp, #4]
   1573a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1573e:	f003 0301 	and.w	r3, r3, #1
   15742:	2b00      	cmp	r3, #0
   15744:	d106      	bne.n	15754 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   15746:	4a05      	ldr	r2, [pc, #20]	; (1575c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15748:	9b01      	ldr	r3, [sp, #4]
   1574a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1574e:	2b00      	cmp	r3, #0
   15750:	d100      	bne.n	15754 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15752:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15754:	bf00      	nop
   15756:	b003      	add	sp, #12
   15758:	f85d fb04 	ldr.w	pc, [sp], #4
   1575c:	1fff9704 	.word	0x1fff9704
   15760:	1fff9700 	.word	0x1fff9700

00015764 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   15764:	b500      	push	{lr}
   15766:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15768:	f7eb ff42 	bl	15f0 <Sys_GetCoreID>
   1576c:	4603      	mov	r3, r0
   1576e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   15770:	4a10      	ldr	r2, [pc, #64]	; (157b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   15772:	9b01      	ldr	r3, [sp, #4]
   15774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15778:	2b00      	cmp	r3, #0
   1577a:	d10d      	bne.n	15798 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1577c:	f7eb fb32 	bl	de4 <Pwm_schm_read_msr>
   15780:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15782:	9b00      	ldr	r3, [sp, #0]
   15784:	f003 0301 	and.w	r3, r3, #1
   15788:	2b00      	cmp	r3, #0
   1578a:	d100      	bne.n	1578e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1578c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   1578e:	490a      	ldr	r1, [pc, #40]	; (157b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   15790:	9b01      	ldr	r3, [sp, #4]
   15792:	9a00      	ldr	r2, [sp, #0]
   15794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   15798:	4a06      	ldr	r2, [pc, #24]	; (157b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   1579a:	9b01      	ldr	r3, [sp, #4]
   1579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157a0:	1c5a      	adds	r2, r3, #1
   157a2:	4904      	ldr	r1, [pc, #16]	; (157b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   157a4:	9b01      	ldr	r3, [sp, #4]
   157a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157aa:	bf00      	nop
   157ac:	b003      	add	sp, #12
   157ae:	f85d fb04 	ldr.w	pc, [sp], #4
   157b2:	bf00      	nop
   157b4:	1fff970c 	.word	0x1fff970c
   157b8:	1fff9708 	.word	0x1fff9708

000157bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   157bc:	b500      	push	{lr}
   157be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157c0:	f7eb ff16 	bl	15f0 <Sys_GetCoreID>
   157c4:	4603      	mov	r3, r0
   157c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   157c8:	4a0d      	ldr	r2, [pc, #52]	; (15800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   157ca:	9b01      	ldr	r3, [sp, #4]
   157cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157d0:	1e5a      	subs	r2, r3, #1
   157d2:	490b      	ldr	r1, [pc, #44]	; (15800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   157d4:	9b01      	ldr	r3, [sp, #4]
   157d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   157da:	4a0a      	ldr	r2, [pc, #40]	; (15804 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   157dc:	9b01      	ldr	r3, [sp, #4]
   157de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157e2:	f003 0301 	and.w	r3, r3, #1
   157e6:	2b00      	cmp	r3, #0
   157e8:	d106      	bne.n	157f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   157ea:	4a05      	ldr	r2, [pc, #20]	; (15800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   157ec:	9b01      	ldr	r3, [sp, #4]
   157ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157f2:	2b00      	cmp	r3, #0
   157f4:	d100      	bne.n	157f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157f8:	bf00      	nop
   157fa:	b003      	add	sp, #12
   157fc:	f85d fb04 	ldr.w	pc, [sp], #4
   15800:	1fff970c 	.word	0x1fff970c
   15804:	1fff9708 	.word	0x1fff9708

00015808 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15808:	b500      	push	{lr}
   1580a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1580c:	f7eb fef0 	bl	15f0 <Sys_GetCoreID>
   15810:	4603      	mov	r3, r0
   15812:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   15814:	4a10      	ldr	r2, [pc, #64]	; (15858 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15816:	9b01      	ldr	r3, [sp, #4]
   15818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1581c:	2b00      	cmp	r3, #0
   1581e:	d10d      	bne.n	1583c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15820:	f7eb fae0 	bl	de4 <Pwm_schm_read_msr>
   15824:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15826:	9b00      	ldr	r3, [sp, #0]
   15828:	f003 0301 	and.w	r3, r3, #1
   1582c:	2b00      	cmp	r3, #0
   1582e:	d100      	bne.n	15832 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15830:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   15832:	490a      	ldr	r1, [pc, #40]	; (1585c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   15834:	9b01      	ldr	r3, [sp, #4]
   15836:	9a00      	ldr	r2, [sp, #0]
   15838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   1583c:	4a06      	ldr	r2, [pc, #24]	; (15858 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   1583e:	9b01      	ldr	r3, [sp, #4]
   15840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15844:	1c5a      	adds	r2, r3, #1
   15846:	4904      	ldr	r1, [pc, #16]	; (15858 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15848:	9b01      	ldr	r3, [sp, #4]
   1584a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1584e:	bf00      	nop
   15850:	b003      	add	sp, #12
   15852:	f85d fb04 	ldr.w	pc, [sp], #4
   15856:	bf00      	nop
   15858:	1fff9714 	.word	0x1fff9714
   1585c:	1fff9710 	.word	0x1fff9710

00015860 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15860:	b500      	push	{lr}
   15862:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15864:	f7eb fec4 	bl	15f0 <Sys_GetCoreID>
   15868:	4603      	mov	r3, r0
   1586a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   1586c:	4a0d      	ldr	r2, [pc, #52]	; (158a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   1586e:	9b01      	ldr	r3, [sp, #4]
   15870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15874:	1e5a      	subs	r2, r3, #1
   15876:	490b      	ldr	r1, [pc, #44]	; (158a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15878:	9b01      	ldr	r3, [sp, #4]
   1587a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   1587e:	4a0a      	ldr	r2, [pc, #40]	; (158a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   15880:	9b01      	ldr	r3, [sp, #4]
   15882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15886:	f003 0301 	and.w	r3, r3, #1
   1588a:	2b00      	cmp	r3, #0
   1588c:	d106      	bne.n	1589c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   1588e:	4a05      	ldr	r2, [pc, #20]	; (158a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15890:	9b01      	ldr	r3, [sp, #4]
   15892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15896:	2b00      	cmp	r3, #0
   15898:	d100      	bne.n	1589c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1589a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1589c:	bf00      	nop
   1589e:	b003      	add	sp, #12
   158a0:	f85d fb04 	ldr.w	pc, [sp], #4
   158a4:	1fff9714 	.word	0x1fff9714
   158a8:	1fff9710 	.word	0x1fff9710

000158ac <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   158ac:	bf00      	nop
   158ae:	4770      	bx	lr

000158b0 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   158b0:	b510      	push	{r4, lr}
   158b2:	b084      	sub	sp, #16
   158b4:	4604      	mov	r4, r0
   158b6:	4608      	mov	r0, r1
   158b8:	4611      	mov	r1, r2
   158ba:	461a      	mov	r2, r3
   158bc:	4623      	mov	r3, r4
   158be:	f8ad 3006 	strh.w	r3, [sp, #6]
   158c2:	4603      	mov	r3, r0
   158c4:	f88d 3005 	strb.w	r3, [sp, #5]
   158c8:	460b      	mov	r3, r1
   158ca:	f88d 3004 	strb.w	r3, [sp, #4]
   158ce:	4613      	mov	r3, r2
   158d0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158d4:	f7eb fe8c 	bl	15f0 <Sys_GetCoreID>
   158d8:	4603      	mov	r3, r0
   158da:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   158dc:	490d      	ldr	r1, [pc, #52]	; (15914 <Det_ReportError+0x64>)
   158de:	9b03      	ldr	r3, [sp, #12]
   158e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   158e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   158e8:	4a0b      	ldr	r2, [pc, #44]	; (15918 <Det_ReportError+0x68>)
   158ea:	9b03      	ldr	r3, [sp, #12]
   158ec:	4413      	add	r3, r2
   158ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
   158f2:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   158f4:	4a09      	ldr	r2, [pc, #36]	; (1591c <Det_ReportError+0x6c>)
   158f6:	9b03      	ldr	r3, [sp, #12]
   158f8:	4413      	add	r3, r2
   158fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
   158fe:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   15900:	4a07      	ldr	r2, [pc, #28]	; (15920 <Det_ReportError+0x70>)
   15902:	9b03      	ldr	r3, [sp, #12]
   15904:	4413      	add	r3, r2
   15906:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1590a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   1590c:	2300      	movs	r3, #0
}
   1590e:	4618      	mov	r0, r3
   15910:	b004      	add	sp, #16
   15912:	bd10      	pop	{r4, pc}
   15914:	1fff9740 	.word	0x1fff9740
   15918:	1fff9718 	.word	0x1fff9718
   1591c:	1fff971c 	.word	0x1fff971c
   15920:	1fff9720 	.word	0x1fff9720

00015924 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   15924:	b510      	push	{r4, lr}
   15926:	b084      	sub	sp, #16
   15928:	4604      	mov	r4, r0
   1592a:	4608      	mov	r0, r1
   1592c:	4611      	mov	r1, r2
   1592e:	461a      	mov	r2, r3
   15930:	4623      	mov	r3, r4
   15932:	f8ad 3006 	strh.w	r3, [sp, #6]
   15936:	4603      	mov	r3, r0
   15938:	f88d 3005 	strb.w	r3, [sp, #5]
   1593c:	460b      	mov	r3, r1
   1593e:	f88d 3004 	strb.w	r3, [sp, #4]
   15942:	4613      	mov	r3, r2
   15944:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15948:	f7eb fe52 	bl	15f0 <Sys_GetCoreID>
   1594c:	4603      	mov	r3, r0
   1594e:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   15950:	490d      	ldr	r1, [pc, #52]	; (15988 <Det_ReportRuntimeError+0x64>)
   15952:	9b03      	ldr	r3, [sp, #12]
   15954:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15958:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   1595c:	4a0b      	ldr	r2, [pc, #44]	; (1598c <Det_ReportRuntimeError+0x68>)
   1595e:	9b03      	ldr	r3, [sp, #12]
   15960:	4413      	add	r3, r2
   15962:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15966:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   15968:	4a09      	ldr	r2, [pc, #36]	; (15990 <Det_ReportRuntimeError+0x6c>)
   1596a:	9b03      	ldr	r3, [sp, #12]
   1596c:	4413      	add	r3, r2
   1596e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15972:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   15974:	4a07      	ldr	r2, [pc, #28]	; (15994 <Det_ReportRuntimeError+0x70>)
   15976:	9b03      	ldr	r3, [sp, #12]
   15978:	4413      	add	r3, r2
   1597a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1597e:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15980:	2300      	movs	r3, #0
}
   15982:	4618      	mov	r0, r3
   15984:	b004      	add	sp, #16
   15986:	bd10      	pop	{r4, pc}
   15988:	1fff9744 	.word	0x1fff9744
   1598c:	1fff9724 	.word	0x1fff9724
   15990:	1fff9728 	.word	0x1fff9728
   15994:	1fff972c 	.word	0x1fff972c

00015998 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   15998:	b510      	push	{r4, lr}
   1599a:	b084      	sub	sp, #16
   1599c:	4604      	mov	r4, r0
   1599e:	4608      	mov	r0, r1
   159a0:	4611      	mov	r1, r2
   159a2:	461a      	mov	r2, r3
   159a4:	4623      	mov	r3, r4
   159a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   159aa:	4603      	mov	r3, r0
   159ac:	f88d 3005 	strb.w	r3, [sp, #5]
   159b0:	460b      	mov	r3, r1
   159b2:	f88d 3004 	strb.w	r3, [sp, #4]
   159b6:	4613      	mov	r3, r2
   159b8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159bc:	f7eb fe18 	bl	15f0 <Sys_GetCoreID>
   159c0:	4603      	mov	r3, r0
   159c2:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   159c4:	490d      	ldr	r1, [pc, #52]	; (159fc <Det_ReportTransientFault+0x64>)
   159c6:	9b03      	ldr	r3, [sp, #12]
   159c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   159cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   159d0:	4a0b      	ldr	r2, [pc, #44]	; (15a00 <Det_ReportTransientFault+0x68>)
   159d2:	9b03      	ldr	r3, [sp, #12]
   159d4:	4413      	add	r3, r2
   159d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   159da:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   159dc:	4a09      	ldr	r2, [pc, #36]	; (15a04 <Det_ReportTransientFault+0x6c>)
   159de:	9b03      	ldr	r3, [sp, #12]
   159e0:	4413      	add	r3, r2
   159e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
   159e6:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   159e8:	4a07      	ldr	r2, [pc, #28]	; (15a08 <Det_ReportTransientFault+0x70>)
   159ea:	9b03      	ldr	r3, [sp, #12]
   159ec:	4413      	add	r3, r2
   159ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
   159f2:	701a      	strb	r2, [r3, #0]

    return E_OK;
   159f4:	2300      	movs	r3, #0
}
   159f6:	4618      	mov	r0, r3
   159f8:	b004      	add	sp, #16
   159fa:	bd10      	pop	{r4, pc}
   159fc:	1fff973c 	.word	0x1fff973c
   15a00:	1fff9730 	.word	0x1fff9730
   15a04:	1fff9734 	.word	0x1fff9734
   15a08:	1fff9738 	.word	0x1fff9738

00015a0c <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   15a0c:	bf00      	nop
   15a0e:	4770      	bx	lr

00015a10 <Fls_ACEraseRomEnd>:
   15a10:	74747542 	.word	0x74747542
   15a14:	31206e6f 	.word	0x31206e6f
   15a18:	74636120 	.word	0x74636120
   15a1c:	3a6e6f69 	.word	0x3a6e6f69
   15a20:	4e495320 	.word	0x4e495320
   15a24:	5f454c47 	.word	0x5f454c47
   15a28:	43494c43 	.word	0x43494c43
   15a2c:	000a204b 	.word	0x000a204b
   15a30:	20746f50 	.word	0x20746f50
   15a34:	44412031 	.word	0x44412031
   15a38:	72203043 	.word	0x72203043
   15a3c:	73697365 	.word	0x73697365
   15a40:	636e6174 	.word	0x636e6174
   15a44:	61762065 	.word	0x61762065
   15a48:	2065756c 	.word	0x2065756c
   15a4c:	6f206e69 	.word	0x6f206e69
   15a50:	3a736d68 	.word	0x3a736d68
   15a54:	0a642520 	.word	0x0a642520
   15a58:	00000000 	.word	0x00000000
   15a5c:	7a7a7542 	.word	0x7a7a7542
   15a60:	70207265 	.word	0x70207265
   15a64:	6979616c 	.word	0x6979616c
   15a68:	5420676e 	.word	0x5420676e
   15a6c:	20656e6f 	.word	0x20656e6f
   15a70:	74612031 	.word	0x74612031
   15a74:	684b3320 	.word	0x684b3320
   15a78:	000a207a 	.word	0x000a207a
   15a7c:	74747542 	.word	0x74747542
   15a80:	31206e6f 	.word	0x31206e6f
   15a84:	74636120 	.word	0x74636120
   15a88:	3a6e6f69 	.word	0x3a6e6f69
   15a8c:	554f4420 	.word	0x554f4420
   15a90:	5f454c42 	.word	0x5f454c42
   15a94:	43494c43 	.word	0x43494c43
   15a98:	000a204b 	.word	0x000a204b
   15a9c:	20746f50 	.word	0x20746f50
   15aa0:	44412032 	.word	0x44412032
   15aa4:	72203043 	.word	0x72203043
   15aa8:	73697365 	.word	0x73697365
   15aac:	636e6174 	.word	0x636e6174
   15ab0:	61762065 	.word	0x61762065
   15ab4:	2065756c 	.word	0x2065756c
   15ab8:	6f206e69 	.word	0x6f206e69
   15abc:	3a736d68 	.word	0x3a736d68
   15ac0:	0a642520 	.word	0x0a642520
   15ac4:	00000000 	.word	0x00000000
   15ac8:	7a7a7542 	.word	0x7a7a7542
   15acc:	70207265 	.word	0x70207265
   15ad0:	6979616c 	.word	0x6979616c
   15ad4:	5420676e 	.word	0x5420676e
   15ad8:	20656e6f 	.word	0x20656e6f
   15adc:	74612032 	.word	0x74612032
   15ae0:	684b3520 	.word	0x684b3520
   15ae4:	000a207a 	.word	0x000a207a
   15ae8:	74747542 	.word	0x74747542
   15aec:	31206e6f 	.word	0x31206e6f
   15af0:	74636120 	.word	0x74636120
   15af4:	3a6e6f69 	.word	0x3a6e6f69
   15af8:	4c4f4820 	.word	0x4c4f4820
   15afc:	4c435f44 	.word	0x4c435f44
   15b00:	204b4349 	.word	0x204b4349
   15b04:	0000000a 	.word	0x0000000a
   15b08:	20746f50 	.word	0x20746f50
   15b0c:	44412031 	.word	0x44412031
   15b10:	72203143 	.word	0x72203143
   15b14:	73697365 	.word	0x73697365
   15b18:	636e6174 	.word	0x636e6174
   15b1c:	61762065 	.word	0x61762065
   15b20:	2065756c 	.word	0x2065756c
   15b24:	6f206e69 	.word	0x6f206e69
   15b28:	3a736d68 	.word	0x3a736d68
   15b2c:	0a642520 	.word	0x0a642520
   15b30:	00000000 	.word	0x00000000
   15b34:	7a7a7542 	.word	0x7a7a7542
   15b38:	70207265 	.word	0x70207265
   15b3c:	6979616c 	.word	0x6979616c
   15b40:	5420676e 	.word	0x5420676e
   15b44:	20656e6f 	.word	0x20656e6f
   15b48:	74612033 	.word	0x74612033
   15b4c:	352e3720 	.word	0x352e3720
   15b50:	207a684b 	.word	0x207a684b
   15b54:	0000000a 	.word	0x0000000a
   15b58:	74747542 	.word	0x74747542
   15b5c:	31206e6f 	.word	0x31206e6f
   15b60:	74636120 	.word	0x74636120
   15b64:	3a6e6f69 	.word	0x3a6e6f69
   15b68:	4c455220 	.word	0x4c455220
   15b6c:	45534145 	.word	0x45534145
   15b70:	00000a20 	.word	0x00000a20
   15b74:	20746f50 	.word	0x20746f50
   15b78:	44412032 	.word	0x44412032
   15b7c:	72203143 	.word	0x72203143
   15b80:	73697365 	.word	0x73697365
   15b84:	636e6174 	.word	0x636e6174
   15b88:	61762065 	.word	0x61762065
   15b8c:	2065756c 	.word	0x2065756c
   15b90:	6f206e69 	.word	0x6f206e69
   15b94:	3a736d68 	.word	0x3a736d68
   15b98:	0a642520 	.word	0x0a642520
   15b9c:	00000000 	.word	0x00000000
   15ba0:	7a7a7542 	.word	0x7a7a7542
   15ba4:	73207265 	.word	0x73207265
   15ba8:	70706f74 	.word	0x70706f74
   15bac:	0a206465 	.word	0x0a206465
   15bb0:	00000000 	.word	0x00000000
   15bb4:	74747542 	.word	0x74747542
   15bb8:	32206e6f 	.word	0x32206e6f
   15bbc:	74636120 	.word	0x74636120
   15bc0:	3a6e6f69 	.word	0x3a6e6f69
   15bc4:	4e495320 	.word	0x4e495320
   15bc8:	5f454c47 	.word	0x5f454c47
   15bcc:	43494c43 	.word	0x43494c43
   15bd0:	000a204b 	.word	0x000a204b
   15bd4:	74747542 	.word	0x74747542
   15bd8:	32206e6f 	.word	0x32206e6f
   15bdc:	74636120 	.word	0x74636120
   15be0:	3a6e6f69 	.word	0x3a6e6f69
   15be4:	554f4420 	.word	0x554f4420
   15be8:	5f454c42 	.word	0x5f454c42
   15bec:	43494c43 	.word	0x43494c43
   15bf0:	000a204b 	.word	0x000a204b
   15bf4:	74747542 	.word	0x74747542
   15bf8:	32206e6f 	.word	0x32206e6f
   15bfc:	74636120 	.word	0x74636120
   15c00:	3a6e6f69 	.word	0x3a6e6f69
   15c04:	4c4f4820 	.word	0x4c4f4820
   15c08:	4c435f44 	.word	0x4c435f44
   15c0c:	204b4349 	.word	0x204b4349
   15c10:	0000000a 	.word	0x0000000a
   15c14:	74747542 	.word	0x74747542
   15c18:	32206e6f 	.word	0x32206e6f
   15c1c:	74636120 	.word	0x74636120
   15c20:	3a6e6f69 	.word	0x3a6e6f69
   15c24:	4c455220 	.word	0x4c455220
   15c28:	45534145 	.word	0x45534145
   15c2c:	00000a20 	.word	0x00000a20
   15c30:	74747542 	.word	0x74747542
   15c34:	33206e6f 	.word	0x33206e6f
   15c38:	74636120 	.word	0x74636120
   15c3c:	3a6e6f69 	.word	0x3a6e6f69
   15c40:	4e495320 	.word	0x4e495320
   15c44:	5f454c47 	.word	0x5f454c47
   15c48:	43494c43 	.word	0x43494c43
   15c4c:	000a204b 	.word	0x000a204b
   15c50:	74747542 	.word	0x74747542
   15c54:	33206e6f 	.word	0x33206e6f
   15c58:	74636120 	.word	0x74636120
   15c5c:	3a6e6f69 	.word	0x3a6e6f69
   15c60:	554f4420 	.word	0x554f4420
   15c64:	5f454c42 	.word	0x5f454c42
   15c68:	43494c43 	.word	0x43494c43
   15c6c:	000a204b 	.word	0x000a204b
   15c70:	74747542 	.word	0x74747542
   15c74:	33206e6f 	.word	0x33206e6f
   15c78:	74636120 	.word	0x74636120
   15c7c:	3a6e6f69 	.word	0x3a6e6f69
   15c80:	4c4f4820 	.word	0x4c4f4820
   15c84:	4c435f44 	.word	0x4c435f44
   15c88:	204b4349 	.word	0x204b4349
   15c8c:	0000000a 	.word	0x0000000a
   15c90:	74747542 	.word	0x74747542
   15c94:	33206e6f 	.word	0x33206e6f
   15c98:	74636120 	.word	0x74636120
   15c9c:	3a6e6f69 	.word	0x3a6e6f69
   15ca0:	4c455220 	.word	0x4c455220
   15ca4:	45534145 	.word	0x45534145
   15ca8:	00000a20 	.word	0x00000a20
   15cac:	6d726554 	.word	0x6d726554
   15cb0:	6c616e69 	.word	0x6c616e69
   15cb4:	00000000 	.word	0x00000000
   15cb8:	4c554e28 	.word	0x4c554e28
   15cbc:	0000294c 	.word	0x0000294c

00015cc0 <Clock_Ip_au8DividerCallbackIndex>:
   15cc0:	0e0d0c00 06030201 0a070409 000b0805     ................

00015cd0 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00015ce0 <Clock_Ip_au8XoscCallbackIndex>:
   15ce0:	00000100 00000000 00000000 00000000     ................

00015cf0 <Clock_Ip_au8IrcoscCallbackIndex>:
   15cf0:	03020100 00000004 00000000 00000000     ................

00015d00 <Clock_Ip_au8GateCallbackIndex>:
   15d00:	06010200 01040301 00000500 00000000     ................

00015d10 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00015d20 <Clock_Ip_au8PllCallbackIndex>:
   15d20:	00000100 00000000 00000000 00000000     ................

00015d30 <Clock_Ip_au8SelectorCallbackIndex>:
   15d30:	0a090800 03020109 07060504 00000000     ................

00015d40 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00015d50 <Clock_Ip_au8CmuCallbackIndex>:
	...

00015d60 <Clock_Ip_au8ClockFeatures>:
	...
   15d70:	01000000 00000000 00000000 00000002     ................
   15d80:	00000000 00000300 00000000 00040000     ................
   15d90:	00000000 05000000 00000000 00000000     ................
   15da0:	00000006 00000000 00000100 00000000     ................
   15db0:	00010000 00000000 04000000 00000000     ................
   15dc0:	00000000 00000005 00000001 00000401     ................
   15dd0:	00000200 00050100 00030000 04020000     ................
   15de0:	04000000 02000000 00000005 00000005     ................
   15df0:	00000403 00000600 00050300 00070000     ................
   15e00:	05000000 00000000 00000000 00000006     ................
	...
   15e40:	00050000 00000000 06000000 00000100     ................
   15e50:	00000000 00030007 00000000 00000000     ................
   15e60:	00000000 00060000 00000000 07000000     ................
   15e70:	00000100 00000000 00030008 00000000     ................
	...
   15e88:	00090000 00000000 0a000000 00000100     ................
   15e98:	00000000 0003000b 00000000 00000000     ................
   15ea8:	00000000 000c0000 00000000 0d000000     ................
   15eb8:	00000100 00000000 0003000e 00000000     ................
   15ec8:	00000800 00000000 00090000 00000000     ................
   15ed8:	0a000000 00000000 00000000 0000000b     ................
   15ee8:	00000000 00000b01 00000000 000b0200     ................
   15ef8:	00000000 0b030000 00000000 00000000     ................
	...
   15f10:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   15f20:	01000000 00000000 00000000 00000007     ................
   15f30:	00007300 00000700 00320000 00090000     .s........2.....
   15f40:	02000000 07000000 00000000 00000021     ............!...
   15f50:	00000009 00000400 00000900 00030000     ................
   15f60:	00070000 61000000 07000000 00000000     .......a........
   15f70:	00000024 00000007 00002500 00000700     $........%......
   15f80:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   15f90:	00000000 00000020 38000004 00003800     .... ......8.8..
   15fa0:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   15fb0:	04000000 00260000 00000026 66000004     ......&.&......f
   15fc0:	00006600 00000400 00370037 00040000     .f......7.7.....
   15fd0:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   15fe0:	2e000004 00002e00 00000200 00404040     ............@@@.
   15ff0:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   16000:	0000006b 6c000004 00006c00 00000900     k......l.l......
   16010:	00010000 00090000 00000000 07000000     ................
   16020:	00000000 00000036 00000007 00003100     ....6........1..
   16030:	00000700 00490000 00070000 4a000000     ......I........J
   16040:	07000000 00000000 0000004b 00000007     ........K.......
   16050:	00004c00 00000700 004d0000 00070000     .L........M.....
   16060:	3d000000 03000000 00000000 00000000     ...=............

00016070 <Clock_Ip_au16SelectorEntryHardwareValue>:
   16070:	01010a03 01010001 04040002 02000603     ................
   16080:	00010810 02020100 00000000 00000007     ................
   16090:	00000009 00000000 00000c0e 00000000     ................
	...

000160c8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   160c8:	00020000 00000300 00000601 00000000     ................
	...

000160f8 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   160f8:	00000700 00000000 02020000 01010303     ................
   16108:	03020606 00000000 00000000 00000000     ................
	...

00016128 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   16128:	00000001 00000000 02020000 01010303     ................
   16138:	03020606 00000000 00000000 00000000     ................
	...

00016158 <Clock_Ip_au8DividerValueHardwareValue>:
   16158:	00020100 00000003 00000004 00000000     ................
   16168:	00000005 00000000 00000000 00000000     ................
   16178:	00000006 00000000 00000000 00000000     ................
	...
   16198:	00000007                                ....

0001619c <Clock_Ip_apxScgPeriphAsyncDivs>:
   1619c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000161ac <Clock_Ip_aeSourceTypeClockName>:
   161ac:	00000000 00000001 00000001 00000001     ................
   161bc:	00000001 00000001 00000001 00000001     ................
   161cc:	00000002 00000003 00000001 00000001     ................
   161dc:	00000001 00000001 00000002 00000002     ................
   161ec:	00000003 00000003 00000001 00000001     ................
   161fc:	00000004 00000004 00000004 00000004     ................
	...

00016268 <Clock_Ip_aeHwPllName>:
   16268:	00000009                                ....

0001626c <Clock_Ip_aeHwDfsName>:
   1626c:	00000057                                W...

00016270 <Clock_Ip_axDividerCallbacks>:
   16270:	00003631 0000363b 00003655 0000366f     16..;6..U6..o6..
   16280:	00003689 000036a3 000036bd 000036d7     .6...6...6...6..
   16290:	000036f1 0000370b 00003725 0000373f     .6...7..%7..?7..
   162a0:	00003759 00003773 0000378d              Y7..s7...7..

000162ac <Clock_Ip_axDividerTriggerCallbacks>:
   162ac:	00003b01 00003b01                       .;...;..

000162b4 <Clock_Ip_axExtOscCallbacks>:
   162b4:	00003b0d 00003b0d 00003b0d 00003b17     .;...;...;...;..
   162c4:	00003b0d 00003b21 00003b3b 00003b55     .;..!;..;;..U;..
   162d4:	00003bd9 00003bed                       .;...;..

000162dc <Clock_Ip_axFracDivCallbacks>:
   162dc:	00003dad 00003dad 00003db7              .=...=...=..

000162e8 <Clock_Ip_axGateCallbacks>:
   162e8:	00003dd1 00003ddb 00003edb 00003ef5     .=...=...>...>..
   162f8:	00003e8b 00003ea5 00003e3b 00003e55     .>...>..;>..U>..
   16308:	00003deb 00003e05 00003f2b 00003f45     .=...>..+?..E?..
   16318:	00003f7b 00003f95                       {?...?..

00016320 <Clock_Ip_axIntOscCallbacks>:
   16320:	00004141 00004141 0000414b 00004155     AA..AA..KA..UA..
   16330:	0000416f 00004189 0000419d 000041b7     oA...A...A...A..
   16340:	000041d1 000041e5 000041ff 00004219     .A...A...A...B..
   16350:	000042c1 000042db 000042f5              .B...B...B..

0001635c <Clock_Ip_axCmuCallbacks>:
   1635c:	00004891 0000489b 000048a7 00004891     .H...H...H...H..

0001636c <Clock_Ip_axPllCallbacks>:
   1636c:	000048b1 000048b1 000048bb 000048b1     .H...H...H...H..
   1637c:	000048c7 000048d1 000048eb 00004905     .H...H...H...I..
   1638c:	000049a9 00004995                       .I...I..

00016394 <Clock_Ip_axPcfsCallbacks>:
   16394:	00004b05                                .K..

00016398 <Clock_Ip_axSelectorCallbacks>:
   16398:	00004b11 00004b11 00004b1b 00004b35     .K...K...K..5K..
   163a8:	00004b11 00004b4f 00004b69 00004b83     .K..OK..iK...K..
   163b8:	00004b9d 00004bb7 00004bd1 00004beb     .K...K...K...K..
   163c8:	00004c05 00004c1f 00004c39 00004c53     .L...L..9L..SL..
   163d8:	00004c6d 00004c87 00004ca1 00004cbb     mL...L...L...L..
   163e8:	00004cd5 00004cef                       .L...L..

000163f0 <ClockSource>:
   163f0:	00000000 00000008 00000002 00000005     ................
	...
   16408:	00000009                                ....

0001640c <ResetReasonArray>:
   1640c:	00000000 00000001 00000002 00000003     ................
   1641c:	00000004 00000005 00000006 00000007     ................
   1642c:	00000008 00000009 0000000a 0000000b     ................
   1643c:	0000000c 0000000d 0000000e              ............

00016448 <Port_au32PortCiPortBaseAddr>:
   16448:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   16458:	4004d000                                ...@

0001645c <Port_au32PortCiGpioBaseAddr>:
   1645c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   1646c:	400ff100                                ...@

00016470 <Adc_Ip_apxBase>:
   16470:	4003b000 40027000                       ...@.p.@

00016478 <Pdb_Adc_Ip_apxBase>:
   16478:	40036000 40031000                       .`.@...@

00016480 <Ftm_Pwm_Ip_aFtmBase>:
   16480:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

00016490 <ButtonsCfg>:
   16490:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   164a0:	0000000c 0000012c                       ....,...

000164a8 <LedsCfg>:
   164a8:	00000060 0000006f 00000070              `...o...p...

000164b4 <AdcIpChansConfig_0>:
   164b4:	00000000 00000005 00000000 00000001     ................
   164c4:	00000008 00000000                       ........

000164cc <AdcIpChansConfig_1>:
   164cc:	00000000 0000000f 00000000 00000001     ................
   164dc:	00000008 00000000                       ........

000164e4 <AdcIpConfig_0>:
   164e4:	00000000 00000003 00000000 0000000c     ................
   164f4:	00000000 00000001 00000001 00000000     ................
	...
   1650c:	00ff0000 00000000 00000000 000164b4     .............d..
   1651c:	0000b041                                A...

00016520 <AdcIpConfig_1>:
   16520:	00000000 00000003 00000000 0000000c     ................
   16530:	00000000 00000001 00000001 00000000     ................
	...
   16548:	00ff0000 00000000 00000000 000164cc     .............d..
   16558:	0000b063                                c...

0001655c <AdcIpwCfg>:
   1655c:	000164e4 00016520 00016b2c 00016b4c     .d.. e..,k..Lk..
   1656c:	01010100 00010001 00020002 0101ffff     ................
   1657c:	00000100                                ....

00016580 <AdcIpwGroupConfig_0>:
   16580:	00000001 00000000 000000c8 00010000     ................
   16590:	00000000                                ....

00016594 <AdcIpwGroupConfig_1>:
   16594:	00000001 00000000 000000c8 00010000     ................
   165a4:	00000000                                ....

000165a8 <Adc_Group0_Assignment_0>:
   165a8:	00010000                                ....

000165ac <Adc_Group1_Assignment_1>:
   165ac:	00010000                                ....

000165b0 <Adc_GroupsCfg>:
	...
   165cc:	00000001 000165a8 00080002 00000005     .....e..........
   165dc:	00000000 00016580 00010001 00000000     .....e..........
	...
   16600:	00000001 000165ac 000f0002 00000008     .....e..........
   16610:	00000000 00016594                       .....e..

00016618 <Adc_au16GroupIdToIndexMap>:
   16618:	00010000                                ....

0001661c <Adc_Partition_Assignment>:
   1661c:	00000000                                ....

00016620 <Adc_Config>:
   16620:	0001655c 000165b0 00000002 00016618     \e...e.......f..
   16630:	00000000 0001661c 00000001              .....f......

0001663c <Mcu_aClockConfigPB>:
	...
   16644:	1c000002 04000010 01000029 00000002     ........).......
   16654:	01000001 00000001 00000005 00000001     ................
   16664:	00000000 00000057 00000000 00000000     ....W...........
	...
   1667c:	00000057 00000000 00000057 00000000     W.......W.......
	...
   166a4:	00000019 00000005 0000001a 00000002     ................
   166b4:	0000001b 00000005 0000002a 00000002     ........*.......
   166c4:	00000028 0000000e 00000029 00000001     (.......).......
   166d4:	00000056 0000001c 00000032 0000002a     V.......2...*...
   166e4:	0000002b 00000014 0000002c 00000014     +.......,.......
   166f4:	0000002d 00000014 0000002e 00000014     -...............
   16704:	0000003f 00000000 00000040 0000000a     ?.......@.......
   16714:	00000041 00000000 00000042 00000000     A.......B.......
   16724:	00000031 0000000b 00000045 00000000     1.......E.......
   16734:	00000046 00000000 00000047 00000000     F.......G.......
   16744:	00000044 00000000 00000030 0000000b     D.......0.......
   16754:	0000003d 00000000 00000043 00000000     =.......C.......
   16764:	00000049 00000000 0000004a 00000000     I.......J.......
   16774:	0000004b 00000000 00000048 00000000     K.......H.......
   16784:	0000000a 00000001 00000000 0000000b     ................
   16794:	00000001 00000000 0000000c 00000001     ................
   167a4:	00000000 0000000d 00000002 00000000     ................
   167b4:	0000001d 00000001 00000000 0000001e     ................
   167c4:	00000002 00000000 0000001f 00000001     ................
   167d4:	00000000 00000021 00000001 00000000     ....!...........
   167e4:	00000022 00000002 00000000 00000023     "...........#...
   167f4:	00000001 00000000 00000025 00000002     ........%.......
   16804:	00000000 00000026 00000004 00000000     ....&...........
   16814:	00000027 00000002 00000000 00000032     '...........2...
   16824:	00000001 00000000 00000048 00000001     ........H.......
   16834:	00000001 00000056 00000001 00000001     ....V...........
   16844:	00000057 00000000 00000000 00000057     W...........W...
	...
   1685c:	00000057 00000000 00000000 00000057     W...........W...
	...
   16874:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   16890:	00000014 00007d00 00000015 00007d00     .....}.......}..
   168a0:	00000016 00007d00 00000017 00008000     .....}..........
   168b0:	00000012 00000001 00000013 00000001     ................
   168c0:	00000030 00000001 00000031 00000001     0.......1.......
   168d0:	00000032 00000000 00000033 00000000     2.......3.......
   168e0:	00000034 00000000 00000035 00000001     4.......5.......
   168f0:	00000036 00000000 00000037 00000001     6.......7.......
   16900:	00000038 00000001 00000039 00000000     8.......9.......
   16910:	0000003a 00000000 0000003b 00000000     :.......;.......
   16920:	0000003c 00000000 0000003d 00000000     <.......=.......
   16930:	0000003e 00000000 0000003f 00000000     >.......?.......
   16940:	00000040 00000001 00000041 00000000     @.......A.......
   16950:	00000042 00000000 00000043 00000000     B.......C.......
   16960:	00000044 00000000 00000045 00000000     D.......E.......
   16970:	00000046 00000000 00000047 00000000     F.......G.......
   16980:	00000048 00000000 00000049 00000000     H.......I.......
   16990:	0000004a 00000000 0000004b 00000000     J.......K.......
   169a0:	0000004c 00000001 0000004d 00000001     L.......M.......
   169b0:	0000004e 00000001 0000004f 00000001     N.......O.......
   169c0:	00000050 00000001 00000051 00000001     P.......Q.......
   169d0:	00000052 00000001 00000053 00000001     R.......S.......
   169e0:	00000054 00000001 00000055 00000000     T.......U.......
   169f0:	00000056 00000001 00000057 00000000     V.......W.......
   16a00:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00016a34 <Ftm_Pwm_Ip_SyncCfg1>:
	...
   16a50:	00000003 00000003                       ........

00016a58 <Ftm_Pwm_Ip_InstCfg1>:
   16a58:	00000003 00000000 00000000 00000000     ................
	...
   16a8c:	00000b93 00000001 00000000 00000000     ................
   16a9c:	00000000 00016a34                       ....4j..

00016aa4 <Ftm_Pwm_Ip_I1_Ch7>:
   16aa4:	00000007 0000000a 00000000 00000000     ................
   16ab4:	00000000 00000001 00000000 00000000     ................
	...

00016acc <Ftm_Pwm_Ip_I1_ChArray>:
   16acc:	00016aa4                                .j..

00016ad0 <Ftm_Pwm_Ip_UserCfg1>:
   16ad0:	00016a58 00016acc 00000001 00000000     Xj...j..........
   16ae0:	00000000                                ....

00016ae4 <aIrqConfiguration>:
   16ae4:	00000027 00000f01 00009985 00000028     '...........(...
   16af4:	00000f01 00009995                       ........

00016afc <intCtrlConfig>:
   16afc:	00000002 00016ae4                       .....j..

00016b04 <Mcu_Config>:
   16b04:	0000005a 00000000 00000001 00000001     Z...............
   16b14:	00016e98 0001663c 00016ea4              .n..<f...n..

00016b20 <OsIf_xPredefinedConfig>:
   16b20:	00000000 02dc6c00                       .....l..

00016b28 <OsIf_apxPredefinedConfig>:
   16b28:	00016b20                                 k..

00016b2c <PdbAdcIpConfig_0>:
	...
   16b38:	0000000f ffff0000 00000000 00000000     ................
   16b48:	00000000                                ....

00016b4c <PdbAdcIpConfig_1>:
	...
   16b58:	0000000f ffff0000 00000000 00000000     ................
   16b68:	00000000                                ....

00016b6c <Platform_uConfiguration>:
   16b6c:	00016b74                                tk..

00016b70 <Platform_Config>:
   16b70:	00016b6c                                lk..

00016b74 <ipwConfig>:
   16b74:	00016afc 00000000                       .j......

00016b7c <g_pin_mux_InitConfigArr>:
   16b7c:	4004c000 400ff0c0 00000010 00000002     ...@...@........
   16b8c:	00000001 00000002 00000000 00000000     ................
   16b9c:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   16bac:	00000011 00000002 00000001 00000001     ................
	...
   16bcc:	4004c000 400ff0c0 0000000f 00000002     ...@...@........
   16bdc:	00000001 00000002 00000000 00000000     ................
   16bec:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   16bfc:	00000000 00000002 00000001 00000002     ................
	...
   16c18:	00000100 4004d000 400ff100 0000000c     .......@...@....
   16c28:	00000002 00000001 00000001 00000000     ................
	...
   16c44:	40049000 400ff000 0000000c 00000002     ...@...@........
   16c54:	00000001 00000001 00000000 00000000     ................
	...
   16c6c:	4004a000 00000000 00000001 00000002     ...@............
   16c7c:	00000000 00000001 00000000 00000000     ................
	...
   16c94:	4004a000 00000000 0000000d 00000002     ...@............
   16ca4:	00000000 00000001 00000000 00000000     ................
	...
   16cbc:	40049000 00000000 0000000d 00000002     ...@............
   16ccc:	00000002 00000002 00000000 00000000     ................
	...

00016ce4 <au8Port_PartitionList>:
   16ce4:	00000001                                ....

00016ce8 <au32Port_PinToPartitionMap>:
   16ce8:	00000001 00000001 00000001 00000001     ................
   16cf8:	00000001 00000001 00000001 00000001     ................
   16d08:	00000001                                ....

00016d0c <Port_au16NoUnUsedPadsArrayDefault>:
   16d0c:	00010000 00030002 00070006 00090008     ................
   16d1c:	000e000b 0010000f 00200011 00230022     .......... .".#.
   16d2c:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   16d3c:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   16d4c:	00460043 00480047 004a0049 004c004b     C.F.G.H.I.J.K.L.
   16d5c:	004e004d 0050004f 00610051 00630062     M.N.O.P.Q.a.b.c.
   16d6c:	00650064 00670066 00690068 006b006a     d.e.f.g.h.i.j.k.
   16d7c:	006d006c 0080006e 00820081 00840083     l.m.n...........
   16d8c:	00860085 00880087 008a0089 008d008b     ................
   16d9c:	008f008e 00000090                       ........

00016da4 <Port_UnUsedPin>:
   16da4:	00000000 00000001 00000000              ............

00016db0 <Port_aPinConfigDefault>:
   16db0:	00000070 00000100 00000001 00000002     p...............
   16dc0:	00010001 00000071 00000100 00000000     ....q...........
   16dd0:	00000001 00010001 0000006f 00000100     ........o.......
   16de0:	00000001 00000002 00010001 00000060     ............`...
   16df0:	00000100 00000001 00000002 00010001     ................
   16e00:	0000008c 00000100 00000000 00000001     ................
   16e10:	00010001 0000000c 00000100 00000000     ................
   16e20:	00000001 00010001 00000021 00000000     ........!.......
   16e30:	00000002 00000000 00010000 0000002d     ............-...
   16e40:	00000000 00000002 00000000 00010000     ................
   16e50:	0000000d 00000200 00000000 00000002     ................
   16e60:	00010000                                ....

00016e64 <Port_Config>:
   16e64:	004b0009 00016d0c 00016da4 00016db0     ..K..m...m...m..
	...
   16e7c:	00016ce8 00016ce4 00016b7c              .l...l..|k..

00016e88 <Power_Ip_RCM_ConfigPB>:
	...

00016e90 <Power_Ip_PMC_ConfigPB>:
   16e90:	00000000                                ....

00016e94 <Power_Ip_SMC_ConfigPB>:
   16e94:	00000000                                ....

00016e98 <Power_Ip_aModeConfigPB>:
	...

00016ea4 <Power_Ip_HwIPsConfigPB>:
   16ea4:	00016e88 00016e90 00016e94              .n...n...n..

00016eb0 <Pwm_Channels_PB>:
	...
   16eb8:	00000001 00016aa4 00000001 00000001     .....j..........

00016ec8 <Pwm_Instances_PB>:
   16ec8:	00000001 00000001 00016ad0              .........j..

00016ed4 <Pwm_Config>:
   16ed4:	00000001 00016eb0 00000001 00016ec8     .....n.......n..

00016ee4 <_aInitStr.0>:
   16ee4:	00000000 54540000 45522052 53454747     ......TTR REGGES
   16ef4:	00000000                                ....

00016ef8 <_aV2C.0>:
   16ef8:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00016f08 <__INIT_TABLE>:
   16f08:	00000002 	.word	0x00000002
   16f0c:	1fff8b10 	.word	0x1fff8b10
   16f10:	00016f30 	.word	0x00016f30
   16f14:	00016f78 	.word	0x00016f78
   16f18:	1fff8800 	.word	0x1fff8800
   16f1c:	00000000 	.word	0x00000000
   16f20:	00000310 	.word	0x00000310

00016f24 <__ZERO_TABLE>:
   16f24:	00000001 	.word	0x00000001
   16f28:	1fff8b60 	.word	0x1fff8b60
   16f2c:	1fff9c40 	.word	0x1fff9c40
