
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	0000146b 	.word	0x0000146b
  10:	0000146d 	.word	0x0000146d
  14:	0000146f 	.word	0x0000146f
  18:	00001471 	.word	0x00001471
	...
  2c:	00001473 	.word	0x00001473
  30:	00001475 	.word	0x00001475
  34:	00000000 	.word	0x00000000
  38:	00001477 	.word	0x00001477
  3c:	00001479 	.word	0x00001479
  40:	0000147b 	.word	0x0000147b
  44:	0000147b 	.word	0x0000147b
  48:	0000147b 	.word	0x0000147b
  4c:	0000147b 	.word	0x0000147b
  50:	0000147b 	.word	0x0000147b
  54:	0000147b 	.word	0x0000147b
  58:	0000147b 	.word	0x0000147b
  5c:	0000147b 	.word	0x0000147b
  60:	0000147b 	.word	0x0000147b
  64:	0000147b 	.word	0x0000147b
  68:	0000147b 	.word	0x0000147b
  6c:	0000147b 	.word	0x0000147b
  70:	0000147b 	.word	0x0000147b
  74:	0000147b 	.word	0x0000147b
  78:	0000147b 	.word	0x0000147b
  7c:	0000147b 	.word	0x0000147b
  80:	0000147b 	.word	0x0000147b
  84:	0000147b 	.word	0x0000147b
  88:	0000147b 	.word	0x0000147b
  8c:	0000147b 	.word	0x0000147b
  90:	0000147b 	.word	0x0000147b
  94:	0000147b 	.word	0x0000147b
  98:	0000147b 	.word	0x0000147b
  9c:	0000147b 	.word	0x0000147b
  a0:	0000147b 	.word	0x0000147b
  a4:	0000147b 	.word	0x0000147b
  a8:	0000147b 	.word	0x0000147b
  ac:	0000147b 	.word	0x0000147b
  b0:	0000147b 	.word	0x0000147b
  b4:	0000147b 	.word	0x0000147b
  b8:	0000147b 	.word	0x0000147b
  bc:	0000147b 	.word	0x0000147b
  c0:	0000147b 	.word	0x0000147b
  c4:	0000147b 	.word	0x0000147b
  c8:	0000147b 	.word	0x0000147b
  cc:	0000147b 	.word	0x0000147b
  d0:	0000147b 	.word	0x0000147b
  d4:	0000147b 	.word	0x0000147b
  d8:	0000147b 	.word	0x0000147b
  dc:	0000147b 	.word	0x0000147b
  e0:	0000147b 	.word	0x0000147b
  e4:	0000147b 	.word	0x0000147b
  e8:	0000147b 	.word	0x0000147b
  ec:	0000147b 	.word	0x0000147b
  f0:	0000147b 	.word	0x0000147b
  f4:	0000147b 	.word	0x0000147b
  f8:	0000147b 	.word	0x0000147b
  fc:	0000147b 	.word	0x0000147b
 100:	0000147b 	.word	0x0000147b
 104:	0000147b 	.word	0x0000147b
 108:	0000147b 	.word	0x0000147b
 10c:	0000147b 	.word	0x0000147b
 110:	0000147b 	.word	0x0000147b
 114:	0000147b 	.word	0x0000147b
 118:	0000147b 	.word	0x0000147b
 11c:	0000147b 	.word	0x0000147b
 120:	0000147b 	.word	0x0000147b
 124:	0000147b 	.word	0x0000147b
 128:	0000147b 	.word	0x0000147b
 12c:	0000147b 	.word	0x0000147b
 130:	0000147b 	.word	0x0000147b
 134:	0000147b 	.word	0x0000147b
 138:	0000147b 	.word	0x0000147b
 13c:	0000147b 	.word	0x0000147b
 140:	0000147b 	.word	0x0000147b
 144:	0000147b 	.word	0x0000147b
 148:	0000147b 	.word	0x0000147b
 14c:	0000147b 	.word	0x0000147b
 150:	0000147b 	.word	0x0000147b
 154:	0000147b 	.word	0x0000147b
 158:	0000147b 	.word	0x0000147b
 15c:	0000147b 	.word	0x0000147b
 160:	0000147b 	.word	0x0000147b
 164:	0000147b 	.word	0x0000147b
 168:	0000147b 	.word	0x0000147b
 16c:	0000147b 	.word	0x0000147b
 170:	0000147b 	.word	0x0000147b
 174:	0000147b 	.word	0x0000147b
 178:	0000147b 	.word	0x0000147b
 17c:	0000147b 	.word	0x0000147b
 180:	0000147b 	.word	0x0000147b
 184:	0000147b 	.word	0x0000147b
 188:	0000147b 	.word	0x0000147b
 18c:	0000147b 	.word	0x0000147b
 190:	0000147b 	.word	0x0000147b
 194:	0000147b 	.word	0x0000147b
 198:	0000147b 	.word	0x0000147b
 19c:	0000147b 	.word	0x0000147b
 1a0:	0000147b 	.word	0x0000147b
 1a4:	0000147b 	.word	0x0000147b
 1a8:	0000147b 	.word	0x0000147b
 1ac:	0000147b 	.word	0x0000147b
 1b0:	0000147b 	.word	0x0000147b
 1b4:	0000147b 	.word	0x0000147b
 1b8:	0000147b 	.word	0x0000147b
 1bc:	0000147b 	.word	0x0000147b
 1c0:	0000147b 	.word	0x0000147b
 1c4:	0000147b 	.word	0x0000147b
 1c8:	0000147b 	.word	0x0000147b
 1cc:	0000147b 	.word	0x0000147b
 1d0:	0000147b 	.word	0x0000147b
 1d4:	0000147b 	.word	0x0000147b
 1d8:	0000147b 	.word	0x0000147b
 1dc:	0000147b 	.word	0x0000147b
 1e0:	0000147b 	.word	0x0000147b
 1e4:	0000147b 	.word	0x0000147b
 1e8:	0000147b 	.word	0x0000147b
 1ec:	0000147b 	.word	0x0000147b
 1f0:	0000147b 	.word	0x0000147b
 1f4:	0000147b 	.word	0x0000147b
 1f8:	0000147b 	.word	0x0000147b
 1fc:	0000147b 	.word	0x0000147b
 200:	0000147b 	.word	0x0000147b
 204:	0000147b 	.word	0x0000147b
 208:	0000147b 	.word	0x0000147b
 20c:	0000147b 	.word	0x0000147b
 210:	0000147b 	.word	0x0000147b
 214:	0000147b 	.word	0x0000147b
 218:	0000147b 	.word	0x0000147b
 21c:	0000147b 	.word	0x0000147b
 220:	0000147b 	.word	0x0000147b
 224:	0000147b 	.word	0x0000147b
 228:	0000147b 	.word	0x0000147b
 22c:	0000147b 	.word	0x0000147b
 230:	0000147b 	.word	0x0000147b
 234:	0000147b 	.word	0x0000147b
 238:	0000147b 	.word	0x0000147b
 23c:	0000147b 	.word	0x0000147b
 240:	0000147b 	.word	0x0000147b
 244:	0000147b 	.word	0x0000147b
 248:	0000147b 	.word	0x0000147b
 24c:	0000147b 	.word	0x0000147b
 250:	0000147b 	.word	0x0000147b
 254:	0000147b 	.word	0x0000147b
 258:	0000147b 	.word	0x0000147b
 25c:	0000147b 	.word	0x0000147b
 260:	0000147b 	.word	0x0000147b
 264:	0000147b 	.word	0x0000147b
 268:	0000147b 	.word	0x0000147b
 26c:	0000147b 	.word	0x0000147b
 270:	0000147b 	.word	0x0000147b
 274:	0000147b 	.word	0x0000147b
 278:	0000147b 	.word	0x0000147b
 27c:	0000147b 	.word	0x0000147b
 280:	0000147b 	.word	0x0000147b
 284:	0000147b 	.word	0x0000147b
 288:	0000147b 	.word	0x0000147b
 28c:	0000147b 	.word	0x0000147b
 290:	0000147b 	.word	0x0000147b
 294:	0000147b 	.word	0x0000147b
 298:	0000147b 	.word	0x0000147b
 29c:	0000147b 	.word	0x0000147b
 2a0:	0000147b 	.word	0x0000147b
 2a4:	0000147b 	.word	0x0000147b
 2a8:	0000147b 	.word	0x0000147b
 2ac:	0000147b 	.word	0x0000147b
 2b0:	0000147b 	.word	0x0000147b
 2b4:	0000147b 	.word	0x0000147b
 2b8:	0000147b 	.word	0x0000147b
 2bc:	0000147b 	.word	0x0000147b
 2c0:	0000147b 	.word	0x0000147b
 2c4:	0000147b 	.word	0x0000147b
 2c8:	0000147b 	.word	0x0000147b
 2cc:	0000147b 	.word	0x0000147b
 2d0:	0000147b 	.word	0x0000147b
 2d4:	0000147b 	.word	0x0000147b
 2d8:	0000147b 	.word	0x0000147b
 2dc:	0000147b 	.word	0x0000147b
 2e0:	0000147b 	.word	0x0000147b
 2e4:	0000147b 	.word	0x0000147b
 2e8:	0000147b 	.word	0x0000147b
 2ec:	0000147b 	.word	0x0000147b
 2f0:	0000147b 	.word	0x0000147b
 2f4:	0000147b 	.word	0x0000147b
 2f8:	0000147b 	.word	0x0000147b
 2fc:	0000147b 	.word	0x0000147b
 300:	0000147b 	.word	0x0000147b
 304:	0000147b 	.word	0x0000147b
 308:	0000147b 	.word	0x0000147b
 30c:	0000147b 	.word	0x0000147b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 ff29 	bl	12d8 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 ffe8 	bl	1460 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e70 	.word	0x1fff8e70

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 ff33 	bl	1404 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x7c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x7c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x80>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x80>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x76>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0xb4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xac>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0xa6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0xa2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0xa2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x9a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x9a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x88>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x84>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0xb8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x40>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x9e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x9e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x6e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x96>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x96>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x6e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x40>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f80b 	bl	8cc <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b6:	f000 ff73 	bl	17a0 <SEGGER_RTT_Init>

    /* Init the scheduler with two tasks and a tick time of 100ms and run for 10 seconds only */
    Scheduler_Init( &Scheduler_Config );
     8ba:	4803      	ldr	r0, [pc, #12]	; (8c8 <main+0x18>)
     8bc:	f000 fb68 	bl	f90 <Scheduler_Init>

    while( 1u ) 
    {
        /* Run the scheduler forever */
        Scheduler_MainFunction( );
     8c0:	f000 fc22 	bl	1108 <Scheduler_MainFunction>
     8c4:	e7fc      	b.n	8c0 <main+0x10>
     8c6:	bf00      	nop
     8c8:	00008ef8 	.word	0x00008ef8

000008cc <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8cc:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     8ce:	480a      	ldr	r0, [pc, #40]	; (8f8 <EcuM_Init+0x2c>)
     8d0:	f005 f8a2 	bl	5a18 <Mcu_Init>
    Mcu_SetMode( McuModeSettingConf_0 );
     8d4:	2000      	movs	r0, #0
     8d6:	f005 f917 	bl	5b08 <Mcu_SetMode>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8da:	2000      	movs	r0, #0
     8dc:	f005 f8f0 	bl	5ac0 <Mcu_InitClock>

    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     8e0:	2000      	movs	r0, #0
     8e2:	f001 fb03 	bl	1eec <OsIf_Init>

    /* Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 for RGB LEDs and A12, D17, E12 for Buttons. */
    Port_Init( &Port_Config );
     8e6:	4805      	ldr	r0, [pc, #20]	; (8fc <EcuM_Init+0x30>)
     8e8:	f005 fc98 	bl	621c <Port_Init>

    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     8ec:	4804      	ldr	r0, [pc, #16]	; (900 <EcuM_Init+0x34>)
     8ee:	f000 f92b 	bl	b48 <HwIoAb_Buttons_Init>
}
     8f2:	bf00      	nop
     8f4:	bd08      	pop	{r3, pc}
     8f6:	bf00      	nop
     8f8:	0000930c 	.word	0x0000930c
     8fc:	00009560 	.word	0x00009560
     900:	00008e80 	.word	0x00008e80

00000904 <Os_50ms_Task>:
 * @brief This is the function for the 50ms task.
 *
 * This function executes the state machine every 50ms.
 */
void Os_50ms_Task( void )
{
     904:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     906:	f000 f96f 	bl	be8 <HwIoAb_Buttons_MainFunction>
}
     90a:	bf00      	nop
     90c:	bd08      	pop	{r3, pc}
	...

00000910 <Os_100ms_Task>:
 * @note Button 1, Single click toggle only RGB_LED_BLUE (D0), double click toggle only RGB_LED_RED (D15), hold click toggle only RGB_LED_GREEN (D16), release turns OFF all RGB LEDs.
 * @note Button 2, Single click toggle only RGB_LED_BLUE (D0), double click toggle only RGB_LED_RED (D15), hold click toggle only RGB_LED_GREEN (D16), release turns OFF all RGB LEDs.
 * @note Button 3, Single click toggle only RGB_LED_BLUE (D0), double click toggle only RGB_LED_RED (D15), hold click toggle only RGB_LED_GREEN (D16), release turns OFF all RGB LEDs.
 */
void Os_100ms_Task( void )
{
     910:	b500      	push	{lr}
     912:	b083      	sub	sp, #12
    uint8 RealEvent = 0;    // Actual event of button.
     914:	2300      	movs	r3, #0
     916:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     91a:	2300      	movs	r3, #0
     91c:	f88d 3007 	strb.w	r3, [sp, #7]
     920:	e0d3      	b.n	aca <Os_100ms_Task+0x1ba>
    {  
        RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     922:	f89d 3007 	ldrb.w	r3, [sp, #7]
     926:	4618      	mov	r0, r3
     928:	f000 f940 	bl	bac <HwIoAb_Buttons_GetEvent>
     92c:	4603      	mov	r3, r0
     92e:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     932:	f89d 3006 	ldrb.w	r3, [sp, #6]
     936:	2b00      	cmp	r3, #0
     938:	f000 80bf 	beq.w	aba <Os_100ms_Task+0x1aa>
        {
            switch( CurrentButton )
     93c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     940:	2b02      	cmp	r3, #2
     942:	d07e      	beq.n	a42 <Os_100ms_Task+0x132>
     944:	2b02      	cmp	r3, #2
     946:	f300 80ba 	bgt.w	abe <Os_100ms_Task+0x1ae>
     94a:	2b00      	cmp	r3, #0
     94c:	d002      	beq.n	954 <Os_100ms_Task+0x44>
     94e:	2b01      	cmp	r3, #1
     950:	d03b      	beq.n	9ca <Os_100ms_Task+0xba>
                        break;
                    }
                break;
                default :
                  // If jump here is an error
                break;
     952:	e0b4      	b.n	abe <Os_100ms_Task+0x1ae>
                    switch( RealEvent )
     954:	f89d 3006 	ldrb.w	r3, [sp, #6]
     958:	3b01      	subs	r3, #1
     95a:	2b03      	cmp	r3, #3
     95c:	d833      	bhi.n	9c6 <Os_100ms_Task+0xb6>
     95e:	a201      	add	r2, pc, #4	; (adr r2, 964 <Os_100ms_Task+0x54>)
     960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     964:	00000975 	.word	0x00000975
     968:	00000985 	.word	0x00000985
     96c:	00000995 	.word	0x00000995
     970:	000009a5 	.word	0x000009a5
                            Dio_FlipChannel( RGB_LED_BLUE );
     974:	2060      	movs	r0, #96	; 0x60
     976:	f006 f990 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     97a:	4959      	ldr	r1, [pc, #356]	; (ae0 <Os_100ms_Task+0x1d0>)
     97c:	2000      	movs	r0, #0
     97e:	f001 fa77 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     982:	e021      	b.n	9c8 <Os_100ms_Task+0xb8>
                            Dio_FlipChannel( RGB_LED_RED );
     984:	206f      	movs	r0, #111	; 0x6f
     986:	f006 f988 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     98a:	4956      	ldr	r1, [pc, #344]	; (ae4 <Os_100ms_Task+0x1d4>)
     98c:	2000      	movs	r0, #0
     98e:	f001 fa6f 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     992:	e019      	b.n	9c8 <Os_100ms_Task+0xb8>
                            Dio_FlipChannel( RGB_LED_GREEN );
     994:	2070      	movs	r0, #112	; 0x70
     996:	f006 f980 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     99a:	4953      	ldr	r1, [pc, #332]	; (ae8 <Os_100ms_Task+0x1d8>)
     99c:	2000      	movs	r0, #0
     99e:	f001 fa67 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     9a2:	e011      	b.n	9c8 <Os_100ms_Task+0xb8>
                            Dio_WriteChannel( RGB_LED_BLUE, 0x01);
     9a4:	2101      	movs	r1, #1
     9a6:	2060      	movs	r0, #96	; 0x60
     9a8:	f006 f962 	bl	6c70 <Dio_WriteChannel>
                            Dio_WriteChannel( RGB_LED_RED, 0x01);
     9ac:	2101      	movs	r1, #1
     9ae:	206f      	movs	r0, #111	; 0x6f
     9b0:	f006 f95e 	bl	6c70 <Dio_WriteChannel>
                            Dio_WriteChannel( RGB_LED_GREEN, 0x01);
     9b4:	2101      	movs	r1, #1
     9b6:	2070      	movs	r0, #112	; 0x70
     9b8:	f006 f95a 	bl	6c70 <Dio_WriteChannel>
                            SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     9bc:	494b      	ldr	r1, [pc, #300]	; (aec <Os_100ms_Task+0x1dc>)
     9be:	2000      	movs	r0, #0
     9c0:	f001 fa56 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     9c4:	e000      	b.n	9c8 <Os_100ms_Task+0xb8>
                        break;
     9c6:	bf00      	nop
                break;
     9c8:	e07a      	b.n	ac0 <Os_100ms_Task+0x1b0>
                    switch( RealEvent )
     9ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
     9ce:	3b01      	subs	r3, #1
     9d0:	2b03      	cmp	r3, #3
     9d2:	d834      	bhi.n	a3e <Os_100ms_Task+0x12e>
     9d4:	a201      	add	r2, pc, #4	; (adr r2, 9dc <Os_100ms_Task+0xcc>)
     9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9da:	bf00      	nop
     9dc:	000009ed 	.word	0x000009ed
     9e0:	000009fd 	.word	0x000009fd
     9e4:	00000a0d 	.word	0x00000a0d
     9e8:	00000a1d 	.word	0x00000a1d
                            Dio_FlipChannel( RGB_LED_BLUE );
     9ec:	2060      	movs	r0, #96	; 0x60
     9ee:	f006 f954 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     9f2:	493f      	ldr	r1, [pc, #252]	; (af0 <Os_100ms_Task+0x1e0>)
     9f4:	2000      	movs	r0, #0
     9f6:	f001 fa3b 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     9fa:	e021      	b.n	a40 <Os_100ms_Task+0x130>
                            Dio_FlipChannel( RGB_LED_RED );
     9fc:	206f      	movs	r0, #111	; 0x6f
     9fe:	f006 f94c 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     a02:	493c      	ldr	r1, [pc, #240]	; (af4 <Os_100ms_Task+0x1e4>)
     a04:	2000      	movs	r0, #0
     a06:	f001 fa33 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     a0a:	e019      	b.n	a40 <Os_100ms_Task+0x130>
                            Dio_FlipChannel( RGB_LED_GREEN );
     a0c:	2070      	movs	r0, #112	; 0x70
     a0e:	f006 f944 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     a12:	4939      	ldr	r1, [pc, #228]	; (af8 <Os_100ms_Task+0x1e8>)
     a14:	2000      	movs	r0, #0
     a16:	f001 fa2b 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     a1a:	e011      	b.n	a40 <Os_100ms_Task+0x130>
                            Dio_WriteChannel( RGB_LED_BLUE, 0x01);
     a1c:	2101      	movs	r1, #1
     a1e:	2060      	movs	r0, #96	; 0x60
     a20:	f006 f926 	bl	6c70 <Dio_WriteChannel>
                            Dio_WriteChannel( RGB_LED_RED, 0x01);
     a24:	2101      	movs	r1, #1
     a26:	206f      	movs	r0, #111	; 0x6f
     a28:	f006 f922 	bl	6c70 <Dio_WriteChannel>
                            Dio_WriteChannel( RGB_LED_GREEN, 0x01);
     a2c:	2101      	movs	r1, #1
     a2e:	2070      	movs	r0, #112	; 0x70
     a30:	f006 f91e 	bl	6c70 <Dio_WriteChannel>
                            SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     a34:	4931      	ldr	r1, [pc, #196]	; (afc <Os_100ms_Task+0x1ec>)
     a36:	2000      	movs	r0, #0
     a38:	f001 fa1a 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     a3c:	e000      	b.n	a40 <Os_100ms_Task+0x130>
                        break;
     a3e:	bf00      	nop
                break;
     a40:	e03e      	b.n	ac0 <Os_100ms_Task+0x1b0>
                    switch( RealEvent )
     a42:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a46:	3b01      	subs	r3, #1
     a48:	2b03      	cmp	r3, #3
     a4a:	d834      	bhi.n	ab6 <Os_100ms_Task+0x1a6>
     a4c:	a201      	add	r2, pc, #4	; (adr r2, a54 <Os_100ms_Task+0x144>)
     a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a52:	bf00      	nop
     a54:	00000a65 	.word	0x00000a65
     a58:	00000a75 	.word	0x00000a75
     a5c:	00000a85 	.word	0x00000a85
     a60:	00000a95 	.word	0x00000a95
                            Dio_FlipChannel( RGB_LED_BLUE );
     a64:	2060      	movs	r0, #96	; 0x60
     a66:	f006 f918 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     a6a:	4925      	ldr	r1, [pc, #148]	; (b00 <Os_100ms_Task+0x1f0>)
     a6c:	2000      	movs	r0, #0
     a6e:	f001 f9ff 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     a72:	e021      	b.n	ab8 <Os_100ms_Task+0x1a8>
                            Dio_FlipChannel( RGB_LED_RED );
     a74:	206f      	movs	r0, #111	; 0x6f
     a76:	f006 f910 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     a7a:	4922      	ldr	r1, [pc, #136]	; (b04 <Os_100ms_Task+0x1f4>)
     a7c:	2000      	movs	r0, #0
     a7e:	f001 f9f7 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     a82:	e019      	b.n	ab8 <Os_100ms_Task+0x1a8>
                            Dio_FlipChannel( RGB_LED_GREEN );
     a84:	2070      	movs	r0, #112	; 0x70
     a86:	f006 f908 	bl	6c9a <Dio_FlipChannel>
                            SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     a8a:	491f      	ldr	r1, [pc, #124]	; (b08 <Os_100ms_Task+0x1f8>)
     a8c:	2000      	movs	r0, #0
     a8e:	f001 f9ef 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     a92:	e011      	b.n	ab8 <Os_100ms_Task+0x1a8>
                            Dio_WriteChannel( RGB_LED_BLUE, 0x01);
     a94:	2101      	movs	r1, #1
     a96:	2060      	movs	r0, #96	; 0x60
     a98:	f006 f8ea 	bl	6c70 <Dio_WriteChannel>
                            Dio_WriteChannel( RGB_LED_RED, 0x01);
     a9c:	2101      	movs	r1, #1
     a9e:	206f      	movs	r0, #111	; 0x6f
     aa0:	f006 f8e6 	bl	6c70 <Dio_WriteChannel>
                            Dio_WriteChannel( RGB_LED_GREEN, 0x01);
     aa4:	2101      	movs	r1, #1
     aa6:	2070      	movs	r0, #112	; 0x70
     aa8:	f006 f8e2 	bl	6c70 <Dio_WriteChannel>
                            SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     aac:	4917      	ldr	r1, [pc, #92]	; (b0c <Os_100ms_Task+0x1fc>)
     aae:	2000      	movs	r0, #0
     ab0:	f001 f9de 	bl	1e70 <SEGGER_RTT_printf>
                        break;
     ab4:	e000      	b.n	ab8 <Os_100ms_Task+0x1a8>
                        break;
     ab6:	bf00      	nop
                break;
     ab8:	e002      	b.n	ac0 <Os_100ms_Task+0x1b0>
            }  
        }
     aba:	bf00      	nop
     abc:	e000      	b.n	ac0 <Os_100ms_Task+0x1b0>
                break;
     abe:	bf00      	nop
    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ac4:	3301      	adds	r3, #1
     ac6:	f88d 3007 	strb.w	r3, [sp, #7]
     aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ace:	2b02      	cmp	r3, #2
     ad0:	f67f af27 	bls.w	922 <Os_100ms_Task+0x12>
    }
}
     ad4:	bf00      	nop
     ad6:	bf00      	nop
     ad8:	b003      	add	sp, #12
     ada:	f85d fb04 	ldr.w	pc, [sp], #4
     ade:	bf00      	nop
     ae0:	00008548 	.word	0x00008548
     ae4:	00008568 	.word	0x00008568
     ae8:	00008588 	.word	0x00008588
     aec:	000085a8 	.word	0x000085a8
     af0:	000085c4 	.word	0x000085c4
     af4:	000085e4 	.word	0x000085e4
     af8:	00008604 	.word	0x00008604
     afc:	00008624 	.word	0x00008624
     b00:	00008640 	.word	0x00008640
     b04:	00008660 	.word	0x00008660
     b08:	00008680 	.word	0x00008680
     b0c:	000086a0 	.word	0x000086a0

00000b10 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     b10:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b12:	f3ef 8310 	mrs	r3, PRIMASK
     b16:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b18:	4623      	mov	r3, r4
}
     b1a:	4618      	mov	r0, r3
     b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
     b20:	4770      	bx	lr

00000b22 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     b22:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b24:	f3ef 8310 	mrs	r3, PRIMASK
     b28:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b2a:	4623      	mov	r3, r4
}
     b2c:	4618      	mov	r0, r3
     b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
     b32:	4770      	bx	lr

00000b34 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     b34:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b36:	f3ef 8310 	mrs	r3, PRIMASK
     b3a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b3c:	4623      	mov	r3, r4
}
     b3e:	4618      	mov	r0, r3
     b40:	f85d 4b04 	ldr.w	r4, [sp], #4
     b44:	4770      	bx	lr
	...

00000b48 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     b48:	b084      	sub	sp, #16
     b4a:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     b4c:	4b16      	ldr	r3, [pc, #88]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	2203      	movs	r2, #3
     b52:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     b54:	4b14      	ldr	r3, [pc, #80]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	9a01      	ldr	r2, [sp, #4]
     b5a:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     b5c:	2300      	movs	r3, #0
     b5e:	f88d 300f 	strb.w	r3, [sp, #15]
     b62:	e012      	b.n	b8a <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     b64:	4b10      	ldr	r3, [pc, #64]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b66:	681a      	ldr	r2, [r3, #0]
     b68:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b6c:	4413      	add	r3, r2
     b6e:	2200      	movs	r2, #0
     b70:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     b72:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b74:	681a      	ldr	r2, [r3, #0]
     b76:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b7a:	4413      	add	r3, r2
     b7c:	2200      	movs	r2, #0
     b7e:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     b80:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b84:	3301      	adds	r3, #1
     b86:	f88d 300f 	strb.w	r3, [sp, #15]
     b8a:	4b07      	ldr	r3, [pc, #28]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b94:	429a      	cmp	r2, r3
     b96:	d3e5      	bcc.n	b64 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     b98:	4b03      	ldr	r3, [pc, #12]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	2201      	movs	r2, #1
     b9e:	739a      	strb	r2, [r3, #14]
}
     ba0:	bf00      	nop
     ba2:	b004      	add	sp, #16
     ba4:	4770      	bx	lr
     ba6:	bf00      	nop
     ba8:	1fff8b38 	.word	0x1fff8b38

00000bac <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     bac:	b084      	sub	sp, #16
     bae:	4603      	mov	r3, r0
     bb0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     bb4:	2300      	movs	r3, #0
     bb6:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     bba:	4b0a      	ldr	r3, [pc, #40]	; (be4 <HwIoAb_Buttons_GetEvent+0x38>)
     bbc:	681a      	ldr	r2, [r3, #0]
     bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc2:	4413      	add	r3, r2
     bc4:	7adb      	ldrb	r3, [r3, #11]
     bc6:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     bca:	4b06      	ldr	r3, [pc, #24]	; (be4 <HwIoAb_Buttons_GetEvent+0x38>)
     bcc:	681a      	ldr	r2, [r3, #0]
     bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bd2:	4413      	add	r3, r2
     bd4:	2200      	movs	r2, #0
     bd6:	72da      	strb	r2, [r3, #11]
    return temp;
     bd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bdc:	4618      	mov	r0, r3
     bde:	b004      	add	sp, #16
     be0:	4770      	bx	lr
     be2:	bf00      	nop
     be4:	1fff8b38 	.word	0x1fff8b38

00000be8 <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 */
void HwIoAb_Buttons_MainFunction( void )
{
     be8:	b500      	push	{lr}
     bea:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     bec:	2300      	movs	r3, #0
     bee:	f88d 3007 	strb.w	r3, [sp, #7]
     bf2:	e15d      	b.n	eb0 <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     bf4:	4bb5      	ldr	r3, [pc, #724]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     bf6:	681a      	ldr	r2, [r3, #0]
     bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bfc:	4413      	add	r3, r2
     bfe:	7a1b      	ldrb	r3, [r3, #8]
     c00:	2b04      	cmp	r3, #4
     c02:	f200 8145 	bhi.w	e90 <HwIoAb_Buttons_MainFunction+0x2a8>
     c06:	a201      	add	r2, pc, #4	; (adr r2, c0c <HwIoAb_Buttons_MainFunction+0x24>)
     c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c0c:	00000c21 	.word	0x00000c21
     c10:	00000c6d 	.word	0x00000c6d
     c14:	00000d95 	.word	0x00000d95
     c18:	00000e2d 	.word	0x00000e2d
     c1c:	00000cf9 	.word	0x00000cf9
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     c20:	4baa      	ldr	r3, [pc, #680]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	685a      	ldr	r2, [r3, #4]
     c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c2a:	00db      	lsls	r3, r3, #3
     c2c:	4413      	add	r3, r2
     c2e:	881b      	ldrh	r3, [r3, #0]
     c30:	4618      	mov	r0, r3
     c32:	f006 f807 	bl	6c44 <Dio_ReadChannel>
     c36:	4603      	mov	r3, r0
     c38:	4619      	mov	r1, r3
     c3a:	4ba4      	ldr	r3, [pc, #656]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	685a      	ldr	r2, [r3, #4]
     c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c44:	00db      	lsls	r3, r3, #3
     c46:	4413      	add	r3, r2
     c48:	789b      	ldrb	r3, [r3, #2]
     c4a:	4299      	cmp	r1, r3
     c4c:	f040 8122 	bne.w	e94 <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     c50:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c54:	4a9e      	ldr	r2, [pc, #632]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c56:	2100      	movs	r1, #0
     c58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     c5c:	4b9b      	ldr	r3, [pc, #620]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c64:	4413      	add	r3, r2
     c66:	2201      	movs	r2, #1
     c68:	721a      	strb	r2, [r3, #8]

                }
            break;
     c6a:	e113      	b.n	e94 <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c70:	4a97      	ldr	r2, [pc, #604]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c7a:	3232      	adds	r2, #50	; 0x32
     c7c:	4994      	ldr	r1, [pc, #592]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c86:	4a92      	ldr	r2, [pc, #584]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     c8c:	4b8f      	ldr	r3, [pc, #572]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	6859      	ldr	r1, [r3, #4]
     c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c96:	00db      	lsls	r3, r3, #3
     c98:	440b      	add	r3, r1
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	429a      	cmp	r2, r3
     c9e:	d106      	bne.n	cae <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     ca0:	4b8a      	ldr	r3, [pc, #552]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     ca2:	681a      	ldr	r2, [r3, #0]
     ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ca8:	4413      	add	r3, r2
     caa:	2203      	movs	r2, #3
     cac:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     cae:	4b87      	ldr	r3, [pc, #540]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	685a      	ldr	r2, [r3, #4]
     cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cb8:	00db      	lsls	r3, r3, #3
     cba:	4413      	add	r3, r2
     cbc:	881b      	ldrh	r3, [r3, #0]
     cbe:	4618      	mov	r0, r3
     cc0:	f005 ffc0 	bl	6c44 <Dio_ReadChannel>
     cc4:	4603      	mov	r3, r0
     cc6:	4619      	mov	r1, r3
     cc8:	4b80      	ldr	r3, [pc, #512]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cca:	681b      	ldr	r3, [r3, #0]
     ccc:	685a      	ldr	r2, [r3, #4]
     cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cd2:	00db      	lsls	r3, r3, #3
     cd4:	4413      	add	r3, r2
     cd6:	789b      	ldrb	r3, [r3, #2]
     cd8:	2b00      	cmp	r3, #0
     cda:	bf0c      	ite	eq
     cdc:	2301      	moveq	r3, #1
     cde:	2300      	movne	r3, #0
     ce0:	b2db      	uxtb	r3, r3
     ce2:	4299      	cmp	r1, r3
     ce4:	f040 80d8 	bne.w	e98 <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     ce8:	4b78      	ldr	r3, [pc, #480]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cea:	681a      	ldr	r2, [r3, #0]
     cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cf0:	4413      	add	r3, r2
     cf2:	2204      	movs	r2, #4
     cf4:	721a      	strb	r2, [r3, #8]
                }    
            break;
     cf6:	e0cf      	b.n	e98 <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     cf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cfc:	4a74      	ldr	r2, [pc, #464]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d06:	3232      	adds	r2, #50	; 0x32
     d08:	4971      	ldr	r1, [pc, #452]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     d0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d12:	4a6f      	ldr	r2, [pc, #444]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d18:	4b6c      	ldr	r3, [pc, #432]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	6859      	ldr	r1, [r3, #4]
     d1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d22:	00db      	lsls	r3, r3, #3
     d24:	440b      	add	r3, r1
     d26:	685b      	ldr	r3, [r3, #4]
     d28:	429a      	cmp	r2, r3
     d2a:	d10d      	bne.n	d48 <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     d2c:	4b67      	ldr	r3, [pc, #412]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d2e:	681a      	ldr	r2, [r3, #0]
     d30:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d34:	4413      	add	r3, r2
     d36:	2201      	movs	r2, #1
     d38:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     d3a:	4b64      	ldr	r3, [pc, #400]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d3c:	681a      	ldr	r2, [r3, #0]
     d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d42:	4413      	add	r3, r2
     d44:	2200      	movs	r2, #0
     d46:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     d48:	4b60      	ldr	r3, [pc, #384]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	685a      	ldr	r2, [r3, #4]
     d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d52:	00db      	lsls	r3, r3, #3
     d54:	4413      	add	r3, r2
     d56:	881b      	ldrh	r3, [r3, #0]
     d58:	4618      	mov	r0, r3
     d5a:	f005 ff73 	bl	6c44 <Dio_ReadChannel>
     d5e:	4603      	mov	r3, r0
     d60:	4619      	mov	r1, r3
     d62:	4b5a      	ldr	r3, [pc, #360]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d64:	681b      	ldr	r3, [r3, #0]
     d66:	685a      	ldr	r2, [r3, #4]
     d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d6c:	00db      	lsls	r3, r3, #3
     d6e:	4413      	add	r3, r2
     d70:	789b      	ldrb	r3, [r3, #2]
     d72:	4299      	cmp	r1, r3
     d74:	f040 8092 	bne.w	e9c <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     d78:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d7c:	4a54      	ldr	r2, [pc, #336]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d7e:	2100      	movs	r1, #0
     d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     d84:	4b51      	ldr	r3, [pc, #324]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d86:	681a      	ldr	r2, [r3, #0]
     d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d8c:	4413      	add	r3, r2
     d8e:	2202      	movs	r2, #2
     d90:	721a      	strb	r2, [r3, #8]
                } 
            break;
     d92:	e083      	b.n	e9c <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d98:	4a4d      	ldr	r2, [pc, #308]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     da2:	3232      	adds	r2, #50	; 0x32
     da4:	494a      	ldr	r1, [pc, #296]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dae:	4a48      	ldr	r2, [pc, #288]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     db4:	4b45      	ldr	r3, [pc, #276]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	6859      	ldr	r1, [r3, #4]
     dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dbe:	00db      	lsls	r3, r3, #3
     dc0:	440b      	add	r3, r1
     dc2:	685b      	ldr	r3, [r3, #4]
     dc4:	429a      	cmp	r2, r3
     dc6:	d106      	bne.n	dd6 <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     dc8:	4b40      	ldr	r3, [pc, #256]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     dca:	681a      	ldr	r2, [r3, #0]
     dcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dd0:	4413      	add	r3, r2
     dd2:	2203      	movs	r2, #3
     dd4:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     dd6:	4b3d      	ldr	r3, [pc, #244]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     dd8:	681b      	ldr	r3, [r3, #0]
     dda:	685a      	ldr	r2, [r3, #4]
     ddc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     de0:	00db      	lsls	r3, r3, #3
     de2:	4413      	add	r3, r2
     de4:	881b      	ldrh	r3, [r3, #0]
     de6:	4618      	mov	r0, r3
     de8:	f005 ff2c 	bl	6c44 <Dio_ReadChannel>
     dec:	4603      	mov	r3, r0
     dee:	4619      	mov	r1, r3
     df0:	4b36      	ldr	r3, [pc, #216]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	685a      	ldr	r2, [r3, #4]
     df6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dfa:	00db      	lsls	r3, r3, #3
     dfc:	4413      	add	r3, r2
     dfe:	789b      	ldrb	r3, [r3, #2]
     e00:	2b00      	cmp	r3, #0
     e02:	bf0c      	ite	eq
     e04:	2301      	moveq	r3, #1
     e06:	2300      	movne	r3, #0
     e08:	b2db      	uxtb	r3, r3
     e0a:	4299      	cmp	r1, r3
     e0c:	d148      	bne.n	ea0 <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     e0e:	4b2f      	ldr	r3, [pc, #188]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e10:	681a      	ldr	r2, [r3, #0]
     e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e16:	4413      	add	r3, r2
     e18:	2202      	movs	r2, #2
     e1a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e1c:	4b2b      	ldr	r3, [pc, #172]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e1e:	681a      	ldr	r2, [r3, #0]
     e20:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e24:	4413      	add	r3, r2
     e26:	2200      	movs	r2, #0
     e28:	721a      	strb	r2, [r3, #8]
                } 
            break;
     e2a:	e039      	b.n	ea0 <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     e2c:	4b27      	ldr	r3, [pc, #156]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e2e:	681a      	ldr	r2, [r3, #0]
     e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e34:	4413      	add	r3, r2
     e36:	2203      	movs	r2, #3
     e38:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e3a:	4b24      	ldr	r3, [pc, #144]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	685a      	ldr	r2, [r3, #4]
     e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e44:	00db      	lsls	r3, r3, #3
     e46:	4413      	add	r3, r2
     e48:	881b      	ldrh	r3, [r3, #0]
     e4a:	4618      	mov	r0, r3
     e4c:	f005 fefa 	bl	6c44 <Dio_ReadChannel>
     e50:	4603      	mov	r3, r0
     e52:	4619      	mov	r1, r3
     e54:	4b1d      	ldr	r3, [pc, #116]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e56:	681b      	ldr	r3, [r3, #0]
     e58:	685a      	ldr	r2, [r3, #4]
     e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e5e:	00db      	lsls	r3, r3, #3
     e60:	4413      	add	r3, r2
     e62:	789b      	ldrb	r3, [r3, #2]
     e64:	2b00      	cmp	r3, #0
     e66:	bf0c      	ite	eq
     e68:	2301      	moveq	r3, #1
     e6a:	2300      	movne	r3, #0
     e6c:	b2db      	uxtb	r3, r3
     e6e:	4299      	cmp	r1, r3
     e70:	d118      	bne.n	ea4 <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
     e72:	4b16      	ldr	r3, [pc, #88]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e74:	681a      	ldr	r2, [r3, #0]
     e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e7a:	4413      	add	r3, r2
     e7c:	2204      	movs	r2, #4
     e7e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e80:	4b12      	ldr	r3, [pc, #72]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e82:	681a      	ldr	r2, [r3, #0]
     e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e88:	4413      	add	r3, r2
     e8a:	2200      	movs	r2, #0
     e8c:	721a      	strb	r2, [r3, #8]
                }
            break;
     e8e:	e009      	b.n	ea4 <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
     e90:	bf00      	nop
     e92:	e008      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     e94:	bf00      	nop
     e96:	e006      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     e98:	bf00      	nop
     e9a:	e004      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     e9c:	bf00      	nop
     e9e:	e002      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ea0:	bf00      	nop
     ea2:	e000      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ea4:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eaa:	3301      	adds	r3, #1
     eac:	f88d 3007 	strb.w	r3, [sp, #7]
     eb0:	4b06      	ldr	r3, [pc, #24]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     eb2:	681b      	ldr	r3, [r3, #0]
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     eba:	429a      	cmp	r2, r3
     ebc:	f4ff ae9a 	bcc.w	bf4 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
     ec0:	bf00      	nop
     ec2:	bf00      	nop
     ec4:	b003      	add	sp, #12
     ec6:	f85d fb04 	ldr.w	pc, [sp], #4
     eca:	bf00      	nop
     ecc:	1fff8b38 	.word	0x1fff8b38
     ed0:	1fff8e10 	.word	0x1fff8e10

00000ed4 <Bfx_SetBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00001, SWS_Bfx_00002, SWS_Bfx_00008
 */
void Bfx_SetBit_u32u8( uint32 *Data, uint8 BitPn )
{
     ed4:	b082      	sub	sp, #8
     ed6:	9001      	str	r0, [sp, #4]
     ed8:	460b      	mov	r3, r1
     eda:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1u << BitPn );
     ede:	9b01      	ldr	r3, [sp, #4]
     ee0:	681a      	ldr	r2, [r3, #0]
     ee2:	f89d 3003 	ldrb.w	r3, [sp, #3]
     ee6:	2101      	movs	r1, #1
     ee8:	fa01 f303 	lsl.w	r3, r1, r3
     eec:	431a      	orrs	r2, r3
     eee:	9b01      	ldr	r3, [sp, #4]
     ef0:	601a      	str	r2, [r3, #0]
}
     ef2:	bf00      	nop
     ef4:	b002      	add	sp, #8
     ef6:	4770      	bx	lr

00000ef8 <Bfx_ClrBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
 */
void Bfx_ClrBit_u32u8( uint32 *Data, uint8 BitPn )
{
     ef8:	b082      	sub	sp, #8
     efa:	9001      	str	r0, [sp, #4]
     efc:	460b      	mov	r3, r1
     efe:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1u << BitPn );
     f02:	9b01      	ldr	r3, [sp, #4]
     f04:	681a      	ldr	r2, [r3, #0]
     f06:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f0a:	2101      	movs	r1, #1
     f0c:	fa01 f303 	lsl.w	r3, r1, r3
     f10:	43db      	mvns	r3, r3
     f12:	401a      	ands	r2, r3
     f14:	9b01      	ldr	r3, [sp, #4]
     f16:	601a      	str	r2, [r3, #0]
}
     f18:	bf00      	nop
     f1a:	b002      	add	sp, #8
     f1c:	4770      	bx	lr

00000f1e <Bfx_GetBit_u32u8_u8>:
 * @retval Boolean Bit status
 *
 * @reqs    SWS_Bfx_00016, SWS_Bfx_00017, SWS_Bfx_00020
 */
boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn )
{
     f1e:	b082      	sub	sp, #8
     f20:	9001      	str	r0, [sp, #4]
     f22:	460b      	mov	r3, r1
     f24:	f88d 3003 	strb.w	r3, [sp, #3]
    return ( ( Data & ( 1u << BitPn ) ) != 0u );
     f28:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f2c:	2201      	movs	r2, #1
     f2e:	409a      	lsls	r2, r3
     f30:	9b01      	ldr	r3, [sp, #4]
     f32:	4013      	ands	r3, r2
     f34:	2b00      	cmp	r3, #0
     f36:	bf14      	ite	ne
     f38:	2301      	movne	r3, #1
     f3a:	2300      	moveq	r3, #0
     f3c:	b2db      	uxtb	r3, r3
}
     f3e:	4618      	mov	r0, r3
     f40:	b002      	add	sp, #8
     f42:	4770      	bx	lr

00000f44 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Source data
 *
 * @reqs    SWS_Bfx_00130, SWS_Bfx_00132
 */
void Bfx_PutBit_u32u8u8( uint32 *Data, uint8 BitPn, boolean Status )
{
     f44:	b082      	sub	sp, #8
     f46:	9001      	str	r0, [sp, #4]
     f48:	460b      	mov	r3, r1
     f4a:	f88d 3003 	strb.w	r3, [sp, #3]
     f4e:	4613      	mov	r3, r2
     f50:	f88d 3002 	strb.w	r3, [sp, #2]
    if( Status == TRUE )
     f54:	f89d 3002 	ldrb.w	r3, [sp, #2]
     f58:	2b00      	cmp	r3, #0
     f5a:	d00a      	beq.n	f72 <Bfx_PutBit_u32u8u8+0x2e>
    {
        *Data |= ( 1u << BitPn );
     f5c:	9b01      	ldr	r3, [sp, #4]
     f5e:	681a      	ldr	r2, [r3, #0]
     f60:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f64:	2101      	movs	r1, #1
     f66:	fa01 f303 	lsl.w	r3, r1, r3
     f6a:	431a      	orrs	r2, r3
     f6c:	9b01      	ldr	r3, [sp, #4]
     f6e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *Data &= ~( 1u << BitPn );
    }
}
     f70:	e00a      	b.n	f88 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1u << BitPn );
     f72:	9b01      	ldr	r3, [sp, #4]
     f74:	681a      	ldr	r2, [r3, #0]
     f76:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f7a:	2101      	movs	r1, #1
     f7c:	fa01 f303 	lsl.w	r3, r1, r3
     f80:	43db      	mvns	r3, r3
     f82:	401a      	ands	r2, r3
     f84:	9b01      	ldr	r3, [sp, #4]
     f86:	601a      	str	r2, [r3, #0]
}
     f88:	bf00      	nop
     f8a:	b002      	add	sp, #8
     f8c:	4770      	bx	lr
	...

00000f90 <Scheduler_Init>:
 * value for the arguments.
 *
 * @param   scheduler  Scheduler control structure
 */
void Scheduler_Init( const Scheduler_ConfigType *SchedulerPtr )
{
     f90:	b500      	push	{lr}
     f92:	b085      	sub	sp, #20
     f94:	9001      	str	r0, [sp, #4]
    SchedulerControl.TaskFlags = 0u;
     f96:	4b56      	ldr	r3, [pc, #344]	; (10f0 <Scheduler_Init+0x160>)
     f98:	2200      	movs	r2, #0
     f9a:	641a      	str	r2, [r3, #64]	; 0x40
    SchedulerControl.TimerFlags = 0u;
     f9c:	4b54      	ldr	r3, [pc, #336]	; (10f0 <Scheduler_Init+0x160>)
     f9e:	2200      	movs	r2, #0
     fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
     fa2:	2300      	movs	r3, #0
     fa4:	f88d 300f 	strb.w	r3, [sp, #15]
     fa8:	e02f      	b.n	100a <Scheduler_Init+0x7a>
    {
        SchedulerControl.TaskElapsed[ i ] = 0u;
     faa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fae:	4a50      	ldr	r2, [pc, #320]	; (10f0 <Scheduler_Init+0x160>)
     fb0:	2100      	movs	r1, #0
     fb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TaskPeriod[ i ] = SchedulerPtr->TaskPtr[ i ].InitPeriod;
     fb6:	9b01      	ldr	r3, [sp, #4]
     fb8:	6899      	ldr	r1, [r3, #8]
     fba:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fbe:	4613      	mov	r3, r2
     fc0:	005b      	lsls	r3, r3, #1
     fc2:	4413      	add	r3, r2
     fc4:	009b      	lsls	r3, r3, #2
     fc6:	18ca      	adds	r2, r1, r3
     fc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fcc:	6812      	ldr	r2, [r2, #0]
     fce:	4948      	ldr	r1, [pc, #288]	; (10f0 <Scheduler_Init+0x160>)
     fd0:	3306      	adds	r3, #6
     fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TaskFlags, i, SchedulerPtr->TaskPtr[ i ].InitFlag );
     fd6:	9b01      	ldr	r3, [sp, #4]
     fd8:	6899      	ldr	r1, [r3, #8]
     fda:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fde:	4613      	mov	r3, r2
     fe0:	005b      	lsls	r3, r3, #1
     fe2:	4413      	add	r3, r2
     fe4:	009b      	lsls	r3, r3, #2
     fe6:	440b      	add	r3, r1
     fe8:	791b      	ldrb	r3, [r3, #4]
     fea:	2b00      	cmp	r3, #0
     fec:	bf14      	ite	ne
     fee:	2301      	movne	r3, #1
     ff0:	2300      	moveq	r3, #0
     ff2:	b2da      	uxtb	r2, r3
     ff4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ff8:	4619      	mov	r1, r3
     ffa:	483e      	ldr	r0, [pc, #248]	; (10f4 <Scheduler_Init+0x164>)
     ffc:	f7ff ffa2 	bl	f44 <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
    1000:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1004:	3301      	adds	r3, #1
    1006:	f88d 300f 	strb.w	r3, [sp, #15]
    100a:	9b01      	ldr	r3, [sp, #4]
    100c:	791b      	ldrb	r3, [r3, #4]
    100e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1012:	429a      	cmp	r2, r3
    1014:	d3c9      	bcc.n	faa <Scheduler_Init+0x1a>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    1016:	2300      	movs	r3, #0
    1018:	f88d 300e 	strb.w	r3, [sp, #14]
    101c:	e031      	b.n	1082 <Scheduler_Init+0xf2>
    {
        SchedulerControl.TimerCount[ i ] = 0u;
    101e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1022:	4a33      	ldr	r2, [pc, #204]	; (10f0 <Scheduler_Init+0x160>)
    1024:	330c      	adds	r3, #12
    1026:	2100      	movs	r1, #0
    1028:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TimerTimeout[ i ] = SchedulerPtr->TimerPtr[ i ].InitTimeout;
    102c:	9b01      	ldr	r3, [sp, #4]
    102e:	6919      	ldr	r1, [r3, #16]
    1030:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1034:	4613      	mov	r3, r2
    1036:	005b      	lsls	r3, r3, #1
    1038:	4413      	add	r3, r2
    103a:	009b      	lsls	r3, r3, #2
    103c:	18ca      	adds	r2, r1, r3
    103e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1042:	6812      	ldr	r2, [r2, #0]
    1044:	492a      	ldr	r1, [pc, #168]	; (10f0 <Scheduler_Init+0x160>)
    1046:	330c      	adds	r3, #12
    1048:	009b      	lsls	r3, r3, #2
    104a:	440b      	add	r3, r1
    104c:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TimerFlags, i, SchedulerPtr->TimerPtr[ i ].InitFlag );
    104e:	9b01      	ldr	r3, [sp, #4]
    1050:	6919      	ldr	r1, [r3, #16]
    1052:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1056:	4613      	mov	r3, r2
    1058:	005b      	lsls	r3, r3, #1
    105a:	4413      	add	r3, r2
    105c:	009b      	lsls	r3, r3, #2
    105e:	440b      	add	r3, r1
    1060:	791b      	ldrb	r3, [r3, #4]
    1062:	2b00      	cmp	r3, #0
    1064:	bf14      	ite	ne
    1066:	2301      	movne	r3, #1
    1068:	2300      	moveq	r3, #0
    106a:	b2da      	uxtb	r2, r3
    106c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1070:	4619      	mov	r1, r3
    1072:	4821      	ldr	r0, [pc, #132]	; (10f8 <Scheduler_Init+0x168>)
    1074:	f7ff ff66 	bl	f44 <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    1078:	f89d 300e 	ldrb.w	r3, [sp, #14]
    107c:	3301      	adds	r3, #1
    107e:	f88d 300e 	strb.w	r3, [sp, #14]
    1082:	9b01      	ldr	r3, [sp, #4]
    1084:	7b1b      	ldrb	r3, [r3, #12]
    1086:	f89d 200e 	ldrb.w	r2, [sp, #14]
    108a:	429a      	cmp	r2, r3
    108c:	d3c7      	bcc.n	101e <Scheduler_Init+0x8e>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    108e:	2300      	movs	r3, #0
    1090:	f88d 300d 	strb.w	r3, [sp, #13]
    1094:	e01f      	b.n	10d6 <Scheduler_Init+0x146>
    {
        SchedulerControl.QueueHeads[ i ] = 0u;
    1096:	f89d 300d 	ldrb.w	r3, [sp, #13]
    109a:	4a15      	ldr	r2, [pc, #84]	; (10f0 <Scheduler_Init+0x160>)
    109c:	330e      	adds	r3, #14
    109e:	2100      	movs	r1, #0
    10a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.QueueTails[ i ] = 0u;
    10a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    10a8:	4a11      	ldr	r2, [pc, #68]	; (10f0 <Scheduler_Init+0x160>)
    10aa:	330e      	adds	r3, #14
    10ac:	009b      	lsls	r3, r3, #2
    10ae:	4413      	add	r3, r2
    10b0:	2200      	movs	r2, #0
    10b2:	605a      	str	r2, [r3, #4]
        Bfx_SetBit_u32u8( &SchedulerControl.QueueEmpties, i );
    10b4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    10b8:	4619      	mov	r1, r3
    10ba:	4810      	ldr	r0, [pc, #64]	; (10fc <Scheduler_Init+0x16c>)
    10bc:	f7ff ff0a 	bl	ed4 <Bfx_SetBit_u32u8>
        Bfx_ClrBit_u32u8( &SchedulerControl.QueueFulls, i );
    10c0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    10c4:	4619      	mov	r1, r3
    10c6:	480e      	ldr	r0, [pc, #56]	; (1100 <Scheduler_Init+0x170>)
    10c8:	f7ff ff16 	bl	ef8 <Bfx_ClrBit_u32u8>
    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    10cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    10d0:	3301      	adds	r3, #1
    10d2:	f88d 300d 	strb.w	r3, [sp, #13]
    10d6:	9b01      	ldr	r3, [sp, #4]
    10d8:	7d1b      	ldrb	r3, [r3, #20]
    10da:	f89d 200d 	ldrb.w	r2, [sp, #13]
    10de:	429a      	cmp	r2, r3
    10e0:	d3d9      	bcc.n	1096 <Scheduler_Init+0x106>
    }
    
    SchedulerLocal = SchedulerPtr;
    10e2:	4a08      	ldr	r2, [pc, #32]	; (1104 <Scheduler_Init+0x174>)
    10e4:	9b01      	ldr	r3, [sp, #4]
    10e6:	6013      	str	r3, [r2, #0]
}
    10e8:	bf00      	nop
    10ea:	b005      	add	sp, #20
    10ec:	f85d fb04 	ldr.w	pc, [sp], #4
    10f0:	1fff8e20 	.word	0x1fff8e20
    10f4:	1fff8e60 	.word	0x1fff8e60
    10f8:	1fff8e64 	.word	0x1fff8e64
    10fc:	1fff8e68 	.word	0x1fff8e68
    1100:	1fff8e6c 	.word	0x1fff8e6c
    1104:	1fff8e1c 	.word	0x1fff8e1c

00001108 <Scheduler_MainFunction>:
 * if it is time to run accordingly to the period registered on each of them. The function won't return
 * by any means since it is looping inside a __while(1u)__ forever. The algorithm is pretty simple since
 * first task to dispatch will be the first registered in the **Scheduler_ConfigType** array
 */
void Scheduler_MainFunction( void )
{
    1108:	b500      	push	{lr}
    110a:	b085      	sub	sp, #20
    uint32 Timeout = OsIf_MicrosToTicks( ( SchedulerLocal->Tick * 1000 ), OSIF_COUNTER_SYSTEM );
    110c:	4b13      	ldr	r3, [pc, #76]	; (115c <Scheduler_MainFunction+0x54>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	681b      	ldr	r3, [r3, #0]
    1112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1116:	fb02 f303 	mul.w	r3, r2, r3
    111a:	2101      	movs	r1, #1
    111c:	4618      	mov	r0, r3
    111e:	f000 ff3a 	bl	1f96 <OsIf_MicrosToTicks>
    1122:	9002      	str	r0, [sp, #8]
    /*get the Systic Timer count for the first time*/
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    1124:	2001      	movs	r0, #1
    1126:	f000 feea 	bl	1efe <OsIf_GetCounter>
    112a:	4603      	mov	r3, r0
    112c:	9301      	str	r3, [sp, #4]
    /*We need to count the elapsed time from zero*/
    uint32 ElapsedTime = 0u;
    112e:	2300      	movs	r3, #0
    1130:	9303      	str	r3, [sp, #12]
    
    do /* cppcheck-suppress misra-c2012-14.4 ; this is an infinite loop */
    {
        /* get the elapsed time count from the seed tick value*/
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    1132:	ab01      	add	r3, sp, #4
    1134:	2101      	movs	r1, #1
    1136:	4618      	mov	r0, r3
    1138:	f000 fefa 	bl	1f30 <OsIf_GetElapsed>
    113c:	4602      	mov	r2, r0
    113e:	9b03      	ldr	r3, [sp, #12]
    1140:	4413      	add	r3, r2
    1142:	9303      	str	r3, [sp, #12]
        /*query if the elapsed time is already equal or bigger than the timeout*/
        if( ElapsedTime >= Timeout )
    1144:	9a03      	ldr	r2, [sp, #12]
    1146:	9b02      	ldr	r3, [sp, #8]
    1148:	429a      	cmp	r2, r3
    114a:	d3f2      	bcc.n	1132 <Scheduler_MainFunction+0x2a>
        {
            /*reset the elapsed time */
            ElapsedTime = 0u;
    114c:	2300      	movs	r3, #0
    114e:	9303      	str	r3, [sp, #12]
            /*Scan all registered timers*/
            Timers_Dispatch( );
    1150:	f000 f85a 	bl	1208 <Timers_Dispatch>
            /*Scan all registered task*/
            Tasks_Dispatch( );
    1154:	f000 f804 	bl	1160 <Tasks_Dispatch>
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    1158:	e7eb      	b.n	1132 <Scheduler_MainFunction+0x2a>
    115a:	bf00      	nop
    115c:	1fff8e1c 	.word	0x1fff8e1c

00001160 <Tasks_Dispatch>:
 * This is the only mechanism to stop a timer. The function only set the flag startFlag to FALSE.
 *
 * @param   scheduler  Scheduler control structure
 */
STATIC void Tasks_Dispatch( void )
{
    1160:	b500      	push	{lr}
    1162:	b083      	sub	sp, #12
    /*Scan all registered task*/
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    1164:	2300      	movs	r3, #0
    1166:	f88d 3007 	strb.w	r3, [sp, #7]
    116a:	e03c      	b.n	11e6 <Tasks_Dispatch+0x86>
    {
        /*Only run those tasks that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TaskFlags, i ) == TRUE )
    116c:	4b24      	ldr	r3, [pc, #144]	; (1200 <Tasks_Dispatch+0xa0>)
    116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1170:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1174:	4611      	mov	r1, r2
    1176:	4618      	mov	r0, r3
    1178:	f7ff fed1 	bl	f1e <Bfx_GetBit_u32u8_u8>
    117c:	4603      	mov	r3, r0
    117e:	2b00      	cmp	r3, #0
    1180:	d01e      	beq.n	11c0 <Tasks_Dispatch+0x60>
        {
            /*Only run those tasks that already has its elapsed time*/
            if( SchedulerControl.TaskElapsed[ i ] >= SchedulerControl.TaskPeriod[ i ] )
    1182:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1186:	4a1e      	ldr	r2, [pc, #120]	; (1200 <Tasks_Dispatch+0xa0>)
    1188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    118c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1190:	491b      	ldr	r1, [pc, #108]	; (1200 <Tasks_Dispatch+0xa0>)
    1192:	3306      	adds	r3, #6
    1194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1198:	429a      	cmp	r2, r3
    119a:	d311      	bcc.n	11c0 <Tasks_Dispatch+0x60>
            {
                SchedulerControl.TaskElapsed[ i ] = 0u;
    119c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11a0:	4a17      	ldr	r2, [pc, #92]	; (1200 <Tasks_Dispatch+0xa0>)
    11a2:	2100      	movs	r1, #0
    11a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                /*Run task*/
                SchedulerLocal->TaskPtr[ i ].TaskFunc( );
    11a8:	4b16      	ldr	r3, [pc, #88]	; (1204 <Tasks_Dispatch+0xa4>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	6899      	ldr	r1, [r3, #8]
    11ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
    11b2:	4613      	mov	r3, r2
    11b4:	005b      	lsls	r3, r3, #1
    11b6:	4413      	add	r3, r2
    11b8:	009b      	lsls	r3, r3, #2
    11ba:	440b      	add	r3, r1
    11bc:	689b      	ldr	r3, [r3, #8]
    11be:	4798      	blx	r3
            }
        }
        /*Increment the task elapsed time in ticks*/
        SchedulerControl.TaskElapsed[ i ] += SchedulerLocal->Tick;
    11c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11c4:	4a0e      	ldr	r2, [pc, #56]	; (1200 <Tasks_Dispatch+0xa0>)
    11c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    11ca:	4b0e      	ldr	r3, [pc, #56]	; (1204 <Tasks_Dispatch+0xa4>)
    11cc:	681b      	ldr	r3, [r3, #0]
    11ce:	681a      	ldr	r2, [r3, #0]
    11d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11d4:	440a      	add	r2, r1
    11d6:	490a      	ldr	r1, [pc, #40]	; (1200 <Tasks_Dispatch+0xa0>)
    11d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    11dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11e0:	3301      	adds	r3, #1
    11e2:	f88d 3007 	strb.w	r3, [sp, #7]
    11e6:	4b07      	ldr	r3, [pc, #28]	; (1204 <Tasks_Dispatch+0xa4>)
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	791b      	ldrb	r3, [r3, #4]
    11ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    11f0:	429a      	cmp	r2, r3
    11f2:	d3bb      	bcc.n	116c <Tasks_Dispatch+0xc>
    }
}
    11f4:	bf00      	nop
    11f6:	bf00      	nop
    11f8:	b003      	add	sp, #12
    11fa:	f85d fb04 	ldr.w	pc, [sp], #4
    11fe:	bf00      	nop
    1200:	1fff8e20 	.word	0x1fff8e20
    1204:	1fff8e1c 	.word	0x1fff8e1c

00001208 <Timers_Dispatch>:

STATIC void Timers_Dispatch( void )
{
    1208:	b500      	push	{lr}
    120a:	b083      	sub	sp, #12
    /*Scan all registered timers*/
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    120c:	2300      	movs	r3, #0
    120e:	f88d 3007 	strb.w	r3, [sp, #7]
    1212:	e046      	b.n	12a2 <Timers_Dispatch+0x9a>
    {
        /*Only run those timers that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TimerFlags, i ) == TRUE )
    1214:	4b29      	ldr	r3, [pc, #164]	; (12bc <Timers_Dispatch+0xb4>)
    1216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1218:	f89d 2007 	ldrb.w	r2, [sp, #7]
    121c:	4611      	mov	r1, r2
    121e:	4618      	mov	r0, r3
    1220:	f7ff fe7d 	bl	f1e <Bfx_GetBit_u32u8_u8>
    1224:	4603      	mov	r3, r0
    1226:	2b00      	cmp	r3, #0
    1228:	d036      	beq.n	1298 <Timers_Dispatch+0x90>
        {
            /*Decrement timer count by one tick*/
            SchedulerControl.TimerCount[ i ] -= SchedulerLocal->Tick;
    122a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    122e:	4a23      	ldr	r2, [pc, #140]	; (12bc <Timers_Dispatch+0xb4>)
    1230:	330c      	adds	r3, #12
    1232:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1236:	4b22      	ldr	r3, [pc, #136]	; (12c0 <Timers_Dispatch+0xb8>)
    1238:	681b      	ldr	r3, [r3, #0]
    123a:	681a      	ldr	r2, [r3, #0]
    123c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1240:	1a8a      	subs	r2, r1, r2
    1242:	491e      	ldr	r1, [pc, #120]	; (12bc <Timers_Dispatch+0xb4>)
    1244:	330c      	adds	r3, #12
    1246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            /*Only run those timers that already has its elapsed time*/
            if( SchedulerControl.TimerCount[ i ] == 0u )
    124a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    124e:	4a1b      	ldr	r2, [pc, #108]	; (12bc <Timers_Dispatch+0xb4>)
    1250:	330c      	adds	r3, #12
    1252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1256:	2b00      	cmp	r3, #0
    1258:	d11e      	bne.n	1298 <Timers_Dispatch+0x90>
            {
                /*Prevent timer from running again*/
                Bfx_ClrBit_u32u8( &SchedulerControl.TimerFlags, i );
    125a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    125e:	4619      	mov	r1, r3
    1260:	4818      	ldr	r0, [pc, #96]	; (12c4 <Timers_Dispatch+0xbc>)
    1262:	f7ff fe49 	bl	ef8 <Bfx_ClrBit_u32u8>
                /*Check if the timer has a callback assosiate*/
                if( SchedulerLocal->TimerPtr[ i ].CallbackFunc != NULL )
    1266:	4b16      	ldr	r3, [pc, #88]	; (12c0 <Timers_Dispatch+0xb8>)
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	6919      	ldr	r1, [r3, #16]
    126c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1270:	4613      	mov	r3, r2
    1272:	005b      	lsls	r3, r3, #1
    1274:	4413      	add	r3, r2
    1276:	009b      	lsls	r3, r3, #2
    1278:	440b      	add	r3, r1
    127a:	689b      	ldr	r3, [r3, #8]
    127c:	2b00      	cmp	r3, #0
    127e:	d00b      	beq.n	1298 <Timers_Dispatch+0x90>
                {
                    /*Run callback*/
                    SchedulerLocal->TimerPtr[ i ].CallbackFunc( );
    1280:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <Timers_Dispatch+0xb8>)
    1282:	681b      	ldr	r3, [r3, #0]
    1284:	6919      	ldr	r1, [r3, #16]
    1286:	f89d 2007 	ldrb.w	r2, [sp, #7]
    128a:	4613      	mov	r3, r2
    128c:	005b      	lsls	r3, r3, #1
    128e:	4413      	add	r3, r2
    1290:	009b      	lsls	r3, r3, #2
    1292:	440b      	add	r3, r1
    1294:	689b      	ldr	r3, [r3, #8]
    1296:	4798      	blx	r3
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    1298:	f89d 3007 	ldrb.w	r3, [sp, #7]
    129c:	3301      	adds	r3, #1
    129e:	f88d 3007 	strb.w	r3, [sp, #7]
    12a2:	4b07      	ldr	r3, [pc, #28]	; (12c0 <Timers_Dispatch+0xb8>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	7b1b      	ldrb	r3, [r3, #12]
    12a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    12ac:	429a      	cmp	r2, r3
    12ae:	d3b1      	bcc.n	1214 <Timers_Dispatch+0xc>
                }
            }
        }
    }
}
    12b0:	bf00      	nop
    12b2:	bf00      	nop
    12b4:	b003      	add	sp, #12
    12b6:	f85d fb04 	ldr.w	pc, [sp], #4
    12ba:	bf00      	nop
    12bc:	1fff8e20 	.word	0x1fff8e20
    12c0:	1fff8e1c 	.word	0x1fff8e1c
    12c4:	1fff8e64 	.word	0x1fff8e64

000012c8 <Os_PotsTask>:
//void Os_50ms_Task( void );
//void Os_100ms_Task( void );

void Os_LedsTask( void ){}
void Os_ButtonsTask( void ){}
void Os_PotsTask( void ){}
    12c8:	bf00      	nop
    12ca:	4770      	bx	lr

000012cc <Os_EepromsTask>:
void Os_EepromsTask( void ){}
    12cc:	bf00      	nop
    12ce:	4770      	bx	lr

000012d0 <Os_CanTask>:
void Os_CanTask( void ){}
    12d0:	bf00      	nop
    12d2:	4770      	bx	lr

000012d4 <Os_BuzzerTask>:
void Os_BuzzerTask( void ){}
    12d4:	bf00      	nop
    12d6:	4770      	bx	lr

000012d8 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    12d8:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    12da:	2300      	movs	r3, #0
    12dc:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    12de:	2300      	movs	r3, #0
    12e0:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    12e2:	2300      	movs	r3, #0
    12e4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    12e6:	2300      	movs	r3, #0
    12e8:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    12ea:	4b44      	ldr	r3, [pc, #272]	; (13fc <init_data_bss+0x124>)
    12ec:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    12ee:	4b44      	ldr	r3, [pc, #272]	; (1400 <init_data_bss+0x128>)
    12f0:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    12f2:	9b05      	ldr	r3, [sp, #20]
    12f4:	681b      	ldr	r3, [r3, #0]
    12f6:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    12f8:	9b05      	ldr	r3, [sp, #20]
    12fa:	3304      	adds	r3, #4
    12fc:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    12fe:	9b05      	ldr	r3, [sp, #20]
    1300:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    1302:	2300      	movs	r3, #0
    1304:	9309      	str	r3, [sp, #36]	; 0x24
    1306:	e03d      	b.n	1384 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1308:	9a09      	ldr	r2, [sp, #36]	; 0x24
    130a:	4613      	mov	r3, r2
    130c:	005b      	lsls	r3, r3, #1
    130e:	4413      	add	r3, r2
    1310:	009b      	lsls	r3, r3, #2
    1312:	461a      	mov	r2, r3
    1314:	9b03      	ldr	r3, [sp, #12]
    1316:	4413      	add	r3, r2
    1318:	685b      	ldr	r3, [r3, #4]
    131a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    131c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    131e:	4613      	mov	r3, r2
    1320:	005b      	lsls	r3, r3, #1
    1322:	4413      	add	r3, r2
    1324:	009b      	lsls	r3, r3, #2
    1326:	461a      	mov	r2, r3
    1328:	9b03      	ldr	r3, [sp, #12]
    132a:	4413      	add	r3, r2
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1330:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1332:	4613      	mov	r3, r2
    1334:	005b      	lsls	r3, r3, #1
    1336:	4413      	add	r3, r2
    1338:	009b      	lsls	r3, r3, #2
    133a:	461a      	mov	r2, r3
    133c:	9b03      	ldr	r3, [sp, #12]
    133e:	4413      	add	r3, r2
    1340:	689b      	ldr	r3, [r3, #8]
    1342:	4619      	mov	r1, r3
    1344:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1346:	4613      	mov	r3, r2
    1348:	005b      	lsls	r3, r3, #1
    134a:	4413      	add	r3, r2
    134c:	009b      	lsls	r3, r3, #2
    134e:	461a      	mov	r2, r3
    1350:	9b03      	ldr	r3, [sp, #12]
    1352:	4413      	add	r3, r2
    1354:	685b      	ldr	r3, [r3, #4]
    1356:	1acb      	subs	r3, r1, r3
    1358:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    135a:	2300      	movs	r3, #0
    135c:	9308      	str	r3, [sp, #32]
    135e:	e00a      	b.n	1376 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1360:	9a00      	ldr	r2, [sp, #0]
    1362:	9b08      	ldr	r3, [sp, #32]
    1364:	441a      	add	r2, r3
    1366:	9901      	ldr	r1, [sp, #4]
    1368:	9b08      	ldr	r3, [sp, #32]
    136a:	440b      	add	r3, r1
    136c:	7812      	ldrb	r2, [r2, #0]
    136e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1370:	9b08      	ldr	r3, [sp, #32]
    1372:	3301      	adds	r3, #1
    1374:	9308      	str	r3, [sp, #32]
    1376:	9a08      	ldr	r2, [sp, #32]
    1378:	9b06      	ldr	r3, [sp, #24]
    137a:	429a      	cmp	r2, r3
    137c:	d3f0      	bcc.n	1360 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    137e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1380:	3301      	adds	r3, #1
    1382:	9309      	str	r3, [sp, #36]	; 0x24
    1384:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1386:	9b07      	ldr	r3, [sp, #28]
    1388:	429a      	cmp	r2, r3
    138a:	d3bd      	bcc.n	1308 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    138c:	9b04      	ldr	r3, [sp, #16]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    1392:	9b04      	ldr	r3, [sp, #16]
    1394:	3304      	adds	r3, #4
    1396:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1398:	9b04      	ldr	r3, [sp, #16]
    139a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    139c:	2300      	movs	r3, #0
    139e:	9309      	str	r3, [sp, #36]	; 0x24
    13a0:	e024      	b.n	13ec <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    13a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13a4:	00db      	lsls	r3, r3, #3
    13a6:	9a02      	ldr	r2, [sp, #8]
    13a8:	4413      	add	r3, r2
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    13ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13b0:	00db      	lsls	r3, r3, #3
    13b2:	9a02      	ldr	r2, [sp, #8]
    13b4:	4413      	add	r3, r2
    13b6:	685b      	ldr	r3, [r3, #4]
    13b8:	4619      	mov	r1, r3
    13ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13bc:	00db      	lsls	r3, r3, #3
    13be:	9a02      	ldr	r2, [sp, #8]
    13c0:	4413      	add	r3, r2
    13c2:	681b      	ldr	r3, [r3, #0]
    13c4:	1acb      	subs	r3, r1, r3
    13c6:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    13c8:	2300      	movs	r3, #0
    13ca:	9308      	str	r3, [sp, #32]
    13cc:	e007      	b.n	13de <init_data_bss+0x106>
        {
            ram[j] = 0U;
    13ce:	9a01      	ldr	r2, [sp, #4]
    13d0:	9b08      	ldr	r3, [sp, #32]
    13d2:	4413      	add	r3, r2
    13d4:	2200      	movs	r2, #0
    13d6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    13d8:	9b08      	ldr	r3, [sp, #32]
    13da:	3301      	adds	r3, #1
    13dc:	9308      	str	r3, [sp, #32]
    13de:	9a08      	ldr	r2, [sp, #32]
    13e0:	9b06      	ldr	r3, [sp, #24]
    13e2:	429a      	cmp	r2, r3
    13e4:	d3f3      	bcc.n	13ce <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    13e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13e8:	3301      	adds	r3, #1
    13ea:	9309      	str	r3, [sp, #36]	; 0x24
    13ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13ee:	9b07      	ldr	r3, [sp, #28]
    13f0:	429a      	cmp	r2, r3
    13f2:	d3d6      	bcc.n	13a2 <init_data_bss+0xca>
        }
    }
}
    13f4:	bf00      	nop
    13f6:	bf00      	nop
    13f8:	b00a      	add	sp, #40	; 0x28
    13fa:	4770      	bx	lr
    13fc:	000095d0 	.word	0x000095d0
    1400:	000095ec 	.word	0x000095ec

00001404 <sys_m4_cache_init>:
{
    1404:	b084      	sub	sp, #16
    1406:	4603      	mov	r3, r0
    1408:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    140c:	2300      	movs	r3, #0
    140e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    1412:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1416:	2b00      	cmp	r3, #0
    1418:	d118      	bne.n	144c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    141a:	4b10      	ldr	r3, [pc, #64]	; (145c <sys_m4_cache_init+0x58>)
    141c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1420:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1422:	4b0e      	ldr	r3, [pc, #56]	; (145c <sys_m4_cache_init+0x58>)
    1424:	681b      	ldr	r3, [r3, #0]
    1426:	4a0d      	ldr	r2, [pc, #52]	; (145c <sys_m4_cache_init+0x58>)
    1428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    142c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    142e:	bf00      	nop
    1430:	4b0a      	ldr	r3, [pc, #40]	; (145c <sys_m4_cache_init+0x58>)
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    143c:	d0f8      	beq.n	1430 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    143e:	4b07      	ldr	r3, [pc, #28]	; (145c <sys_m4_cache_init+0x58>)
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	4a06      	ldr	r2, [pc, #24]	; (145c <sys_m4_cache_init+0x58>)
    1444:	f043 0301 	orr.w	r3, r3, #1
    1448:	6013      	str	r3, [r2, #0]
    144a:	e002      	b.n	1452 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    144c:	2301      	movs	r3, #1
    144e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1452:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1456:	4618      	mov	r0, r3
    1458:	b004      	add	sp, #16
    145a:	4770      	bx	lr
    145c:	e0082000 	.word	0xe0082000

00001460 <startup_go_to_user_mode>:
}
    1460:	bf00      	nop
    1462:	4770      	bx	lr

00001464 <Sys_GetCoreID>:
    return 0U;
    1464:	2300      	movs	r3, #0
}
    1466:	4618      	mov	r0, r3
    1468:	4770      	bx	lr

0000146a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    146a:	e7fe      	b.n	146a <HardFault_Handler>

0000146c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    146c:	e7fe      	b.n	146c <MemManage_Handler>

0000146e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    146e:	e7fe      	b.n	146e <BusFault_Handler>

00001470 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1470:	e7fe      	b.n	1470 <UsageFault_Handler>

00001472 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1472:	e7fe      	b.n	1472 <SVC_Handler>

00001474 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1474:	e7fe      	b.n	1474 <DebugMon_Handler>

00001476 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    1476:	e7fe      	b.n	1476 <PendSV_Handler>

00001478 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1478:	e7fe      	b.n	1478 <SysTick_Handler>

0000147a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    147a:	e7fe      	b.n	147a <undefined_handler>

0000147c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    147c:	b500      	push	{lr}
    147e:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1480:	4b26      	ldr	r3, [pc, #152]	; (151c <_DoInit+0xa0>)
    1482:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1484:	22a8      	movs	r2, #168	; 0xa8
    1486:	2100      	movs	r1, #0
    1488:	9800      	ldr	r0, [sp, #0]
    148a:	f000 fd13 	bl	1eb4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    148e:	9b00      	ldr	r3, [sp, #0]
    1490:	2203      	movs	r2, #3
    1492:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1494:	9b00      	ldr	r3, [sp, #0]
    1496:	2203      	movs	r2, #3
    1498:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    149a:	9b00      	ldr	r3, [sp, #0]
    149c:	4a20      	ldr	r2, [pc, #128]	; (1520 <_DoInit+0xa4>)
    149e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    14a0:	9b00      	ldr	r3, [sp, #0]
    14a2:	4a20      	ldr	r2, [pc, #128]	; (1524 <_DoInit+0xa8>)
    14a4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    14a6:	9b00      	ldr	r3, [sp, #0]
    14a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    14ac:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    14ae:	9b00      	ldr	r3, [sp, #0]
    14b0:	2200      	movs	r2, #0
    14b2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    14b4:	9b00      	ldr	r3, [sp, #0]
    14b6:	2200      	movs	r2, #0
    14b8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    14ba:	9b00      	ldr	r3, [sp, #0]
    14bc:	2200      	movs	r2, #0
    14be:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    14c0:	9b00      	ldr	r3, [sp, #0]
    14c2:	4a17      	ldr	r2, [pc, #92]	; (1520 <_DoInit+0xa4>)
    14c4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    14c6:	9b00      	ldr	r3, [sp, #0]
    14c8:	4a17      	ldr	r2, [pc, #92]	; (1528 <_DoInit+0xac>)
    14ca:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    14cc:	9b00      	ldr	r3, [sp, #0]
    14ce:	2210      	movs	r2, #16
    14d0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    14d2:	9b00      	ldr	r3, [sp, #0]
    14d4:	2200      	movs	r2, #0
    14d6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    14d8:	9b00      	ldr	r3, [sp, #0]
    14da:	2200      	movs	r2, #0
    14dc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    14de:	9b00      	ldr	r3, [sp, #0]
    14e0:	2200      	movs	r2, #0
    14e2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    14e4:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    14e8:	2300      	movs	r3, #0
    14ea:	9301      	str	r3, [sp, #4]
    14ec:	e00c      	b.n	1508 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    14ee:	9b01      	ldr	r3, [sp, #4]
    14f0:	f1c3 030f 	rsb	r3, r3, #15
    14f4:	4a0d      	ldr	r2, [pc, #52]	; (152c <_DoInit+0xb0>)
    14f6:	5cd1      	ldrb	r1, [r2, r3]
    14f8:	9a00      	ldr	r2, [sp, #0]
    14fa:	9b01      	ldr	r3, [sp, #4]
    14fc:	4413      	add	r3, r2
    14fe:	460a      	mov	r2, r1
    1500:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1502:	9b01      	ldr	r3, [sp, #4]
    1504:	3301      	adds	r3, #1
    1506:	9301      	str	r3, [sp, #4]
    1508:	9b01      	ldr	r3, [sp, #4]
    150a:	2b0f      	cmp	r3, #15
    150c:	d9ef      	bls.n	14ee <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    150e:	f3bf 8f5f 	dmb	sy
}
    1512:	bf00      	nop
    1514:	b003      	add	sp, #12
    1516:	f85d fb04 	ldr.w	pc, [sp], #4
    151a:	bf00      	nop
    151c:	1fff8e74 	.word	0x1fff8e74
    1520:	000086bc 	.word	0x000086bc
    1524:	1fff8f1c 	.word	0x1fff8f1c
    1528:	1fff931c 	.word	0x1fff931c
    152c:	000095ac 	.word	0x000095ac

00001530 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1530:	b500      	push	{lr}
    1532:	b08b      	sub	sp, #44	; 0x2c
    1534:	9003      	str	r0, [sp, #12]
    1536:	9102      	str	r1, [sp, #8]
    1538:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    153a:	2300      	movs	r3, #0
    153c:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    153e:	9b03      	ldr	r3, [sp, #12]
    1540:	68db      	ldr	r3, [r3, #12]
    1542:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1544:	9b03      	ldr	r3, [sp, #12]
    1546:	691b      	ldr	r3, [r3, #16]
    1548:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    154a:	9a06      	ldr	r2, [sp, #24]
    154c:	9b07      	ldr	r3, [sp, #28]
    154e:	429a      	cmp	r2, r3
    1550:	d905      	bls.n	155e <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1552:	9a06      	ldr	r2, [sp, #24]
    1554:	9b07      	ldr	r3, [sp, #28]
    1556:	1ad3      	subs	r3, r2, r3
    1558:	3b01      	subs	r3, #1
    155a:	9309      	str	r3, [sp, #36]	; 0x24
    155c:	e007      	b.n	156e <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    155e:	9b03      	ldr	r3, [sp, #12]
    1560:	689a      	ldr	r2, [r3, #8]
    1562:	9906      	ldr	r1, [sp, #24]
    1564:	9b07      	ldr	r3, [sp, #28]
    1566:	1acb      	subs	r3, r1, r3
    1568:	4413      	add	r3, r2
    156a:	3b01      	subs	r3, #1
    156c:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    156e:	9b03      	ldr	r3, [sp, #12]
    1570:	689a      	ldr	r2, [r3, #8]
    1572:	9b07      	ldr	r3, [sp, #28]
    1574:	1ad3      	subs	r3, r2, r3
    1576:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1578:	4293      	cmp	r3, r2
    157a:	bf28      	it	cs
    157c:	4613      	movcs	r3, r2
    157e:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1580:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1582:	9b01      	ldr	r3, [sp, #4]
    1584:	4293      	cmp	r3, r2
    1586:	bf28      	it	cs
    1588:	4613      	movcs	r3, r2
    158a:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    158c:	9b03      	ldr	r3, [sp, #12]
    158e:	685a      	ldr	r2, [r3, #4]
    1590:	9b07      	ldr	r3, [sp, #28]
    1592:	4413      	add	r3, r2
    1594:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    1596:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1598:	9902      	ldr	r1, [sp, #8]
    159a:	9805      	ldr	r0, [sp, #20]
    159c:	f000 fc7c 	bl	1e98 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    15a0:	9a08      	ldr	r2, [sp, #32]
    15a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15a4:	4413      	add	r3, r2
    15a6:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    15a8:	9a02      	ldr	r2, [sp, #8]
    15aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15ac:	4413      	add	r3, r2
    15ae:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    15b0:	9a01      	ldr	r2, [sp, #4]
    15b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15b4:	1ad3      	subs	r3, r2, r3
    15b6:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    15b8:	9a07      	ldr	r2, [sp, #28]
    15ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15bc:	4413      	add	r3, r2
    15be:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    15c0:	9b03      	ldr	r3, [sp, #12]
    15c2:	689b      	ldr	r3, [r3, #8]
    15c4:	9a07      	ldr	r2, [sp, #28]
    15c6:	429a      	cmp	r2, r3
    15c8:	d101      	bne.n	15ce <_WriteBlocking+0x9e>
      WrOff = 0u;
    15ca:	2300      	movs	r3, #0
    15cc:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    15ce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    15d2:	9b03      	ldr	r3, [sp, #12]
    15d4:	9a07      	ldr	r2, [sp, #28]
    15d6:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	2b00      	cmp	r3, #0
    15dc:	d1b2      	bne.n	1544 <_WriteBlocking+0x14>
  return NumBytesWritten;
    15de:	9b08      	ldr	r3, [sp, #32]
}
    15e0:	4618      	mov	r0, r3
    15e2:	b00b      	add	sp, #44	; 0x2c
    15e4:	f85d fb04 	ldr.w	pc, [sp], #4

000015e8 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    15e8:	b500      	push	{lr}
    15ea:	b089      	sub	sp, #36	; 0x24
    15ec:	9003      	str	r0, [sp, #12]
    15ee:	9102      	str	r1, [sp, #8]
    15f0:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    15f2:	9b03      	ldr	r3, [sp, #12]
    15f4:	68db      	ldr	r3, [r3, #12]
    15f6:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    15f8:	9b03      	ldr	r3, [sp, #12]
    15fa:	689a      	ldr	r2, [r3, #8]
    15fc:	9b07      	ldr	r3, [sp, #28]
    15fe:	1ad3      	subs	r3, r2, r3
    1600:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    1602:	9a06      	ldr	r2, [sp, #24]
    1604:	9b01      	ldr	r3, [sp, #4]
    1606:	429a      	cmp	r2, r3
    1608:	d911      	bls.n	162e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    160a:	9b03      	ldr	r3, [sp, #12]
    160c:	685a      	ldr	r2, [r3, #4]
    160e:	9b07      	ldr	r3, [sp, #28]
    1610:	4413      	add	r3, r2
    1612:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1614:	9a01      	ldr	r2, [sp, #4]
    1616:	9902      	ldr	r1, [sp, #8]
    1618:	9804      	ldr	r0, [sp, #16]
    161a:	f000 fc3d 	bl	1e98 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    161e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1622:	9a07      	ldr	r2, [sp, #28]
    1624:	9b01      	ldr	r3, [sp, #4]
    1626:	441a      	add	r2, r3
    1628:	9b03      	ldr	r3, [sp, #12]
    162a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    162c:	e01f      	b.n	166e <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    162e:	9b06      	ldr	r3, [sp, #24]
    1630:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1632:	9b03      	ldr	r3, [sp, #12]
    1634:	685a      	ldr	r2, [r3, #4]
    1636:	9b07      	ldr	r3, [sp, #28]
    1638:	4413      	add	r3, r2
    163a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    163c:	9a05      	ldr	r2, [sp, #20]
    163e:	9902      	ldr	r1, [sp, #8]
    1640:	9804      	ldr	r0, [sp, #16]
    1642:	f000 fc29 	bl	1e98 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1646:	9a01      	ldr	r2, [sp, #4]
    1648:	9b06      	ldr	r3, [sp, #24]
    164a:	1ad3      	subs	r3, r2, r3
    164c:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    164e:	9b03      	ldr	r3, [sp, #12]
    1650:	685b      	ldr	r3, [r3, #4]
    1652:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1654:	9a02      	ldr	r2, [sp, #8]
    1656:	9b06      	ldr	r3, [sp, #24]
    1658:	4413      	add	r3, r2
    165a:	9a05      	ldr	r2, [sp, #20]
    165c:	4619      	mov	r1, r3
    165e:	9804      	ldr	r0, [sp, #16]
    1660:	f000 fc1a 	bl	1e98 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1664:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1668:	9b03      	ldr	r3, [sp, #12]
    166a:	9a05      	ldr	r2, [sp, #20]
    166c:	60da      	str	r2, [r3, #12]
}
    166e:	bf00      	nop
    1670:	b009      	add	sp, #36	; 0x24
    1672:	f85d fb04 	ldr.w	pc, [sp], #4

00001676 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1676:	b086      	sub	sp, #24
    1678:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    167a:	9b01      	ldr	r3, [sp, #4]
    167c:	691b      	ldr	r3, [r3, #16]
    167e:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1680:	9b01      	ldr	r3, [sp, #4]
    1682:	68db      	ldr	r3, [r3, #12]
    1684:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1686:	9a04      	ldr	r2, [sp, #16]
    1688:	9b03      	ldr	r3, [sp, #12]
    168a:	429a      	cmp	r2, r3
    168c:	d808      	bhi.n	16a0 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    168e:	9b01      	ldr	r3, [sp, #4]
    1690:	689a      	ldr	r2, [r3, #8]
    1692:	9b03      	ldr	r3, [sp, #12]
    1694:	1ad2      	subs	r2, r2, r3
    1696:	9b04      	ldr	r3, [sp, #16]
    1698:	4413      	add	r3, r2
    169a:	3b01      	subs	r3, #1
    169c:	9305      	str	r3, [sp, #20]
    169e:	e004      	b.n	16aa <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    16a0:	9a04      	ldr	r2, [sp, #16]
    16a2:	9b03      	ldr	r3, [sp, #12]
    16a4:	1ad3      	subs	r3, r2, r3
    16a6:	3b01      	subs	r3, #1
    16a8:	9305      	str	r3, [sp, #20]
  }
  return r;
    16aa:	9b05      	ldr	r3, [sp, #20]
}
    16ac:	4618      	mov	r0, r3
    16ae:	b006      	add	sp, #24
    16b0:	4770      	bx	lr
	...

000016b4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    16b4:	b500      	push	{lr}
    16b6:	b089      	sub	sp, #36	; 0x24
    16b8:	9003      	str	r0, [sp, #12]
    16ba:	9102      	str	r1, [sp, #8]
    16bc:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    16be:	9b02      	ldr	r3, [sp, #8]
    16c0:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    16c2:	9b03      	ldr	r3, [sp, #12]
    16c4:	1c5a      	adds	r2, r3, #1
    16c6:	4613      	mov	r3, r2
    16c8:	005b      	lsls	r3, r3, #1
    16ca:	4413      	add	r3, r2
    16cc:	00db      	lsls	r3, r3, #3
    16ce:	4a20      	ldr	r2, [pc, #128]	; (1750 <SEGGER_RTT_WriteNoLock+0x9c>)
    16d0:	4413      	add	r3, r2
    16d2:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    16d4:	9b05      	ldr	r3, [sp, #20]
    16d6:	695b      	ldr	r3, [r3, #20]
    16d8:	2b02      	cmp	r3, #2
    16da:	d029      	beq.n	1730 <SEGGER_RTT_WriteNoLock+0x7c>
    16dc:	2b02      	cmp	r3, #2
    16de:	d82e      	bhi.n	173e <SEGGER_RTT_WriteNoLock+0x8a>
    16e0:	2b00      	cmp	r3, #0
    16e2:	d002      	beq.n	16ea <SEGGER_RTT_WriteNoLock+0x36>
    16e4:	2b01      	cmp	r3, #1
    16e6:	d013      	beq.n	1710 <SEGGER_RTT_WriteNoLock+0x5c>
    16e8:	e029      	b.n	173e <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    16ea:	9805      	ldr	r0, [sp, #20]
    16ec:	f7ff ffc3 	bl	1676 <_GetAvailWriteSpace>
    16f0:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    16f2:	9a04      	ldr	r2, [sp, #16]
    16f4:	9b01      	ldr	r3, [sp, #4]
    16f6:	429a      	cmp	r2, r3
    16f8:	d202      	bcs.n	1700 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    16fa:	2300      	movs	r3, #0
    16fc:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    16fe:	e021      	b.n	1744 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1700:	9b01      	ldr	r3, [sp, #4]
    1702:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1704:	9a01      	ldr	r2, [sp, #4]
    1706:	9906      	ldr	r1, [sp, #24]
    1708:	9805      	ldr	r0, [sp, #20]
    170a:	f7ff ff6d 	bl	15e8 <_WriteNoCheck>
    break;
    170e:	e019      	b.n	1744 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1710:	9805      	ldr	r0, [sp, #20]
    1712:	f7ff ffb0 	bl	1676 <_GetAvailWriteSpace>
    1716:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1718:	9a01      	ldr	r2, [sp, #4]
    171a:	9b04      	ldr	r3, [sp, #16]
    171c:	4293      	cmp	r3, r2
    171e:	bf28      	it	cs
    1720:	4613      	movcs	r3, r2
    1722:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1724:	9a07      	ldr	r2, [sp, #28]
    1726:	9906      	ldr	r1, [sp, #24]
    1728:	9805      	ldr	r0, [sp, #20]
    172a:	f7ff ff5d 	bl	15e8 <_WriteNoCheck>
    break;
    172e:	e009      	b.n	1744 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1730:	9a01      	ldr	r2, [sp, #4]
    1732:	9906      	ldr	r1, [sp, #24]
    1734:	9805      	ldr	r0, [sp, #20]
    1736:	f7ff fefb 	bl	1530 <_WriteBlocking>
    173a:	9007      	str	r0, [sp, #28]
    break;
    173c:	e002      	b.n	1744 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    173e:	2300      	movs	r3, #0
    1740:	9307      	str	r3, [sp, #28]
    break;
    1742:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1744:	9b07      	ldr	r3, [sp, #28]
}
    1746:	4618      	mov	r0, r3
    1748:	b009      	add	sp, #36	; 0x24
    174a:	f85d fb04 	ldr.w	pc, [sp], #4
    174e:	bf00      	nop
    1750:	1fff8e74 	.word	0x1fff8e74

00001754 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1754:	b500      	push	{lr}
    1756:	b089      	sub	sp, #36	; 0x24
    1758:	9003      	str	r0, [sp, #12]
    175a:	9102      	str	r1, [sp, #8]
    175c:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    175e:	4b0f      	ldr	r3, [pc, #60]	; (179c <SEGGER_RTT_Write+0x48>)
    1760:	9307      	str	r3, [sp, #28]
    1762:	9b07      	ldr	r3, [sp, #28]
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	b2db      	uxtb	r3, r3
    1768:	2b53      	cmp	r3, #83	; 0x53
    176a:	d001      	beq.n	1770 <SEGGER_RTT_Write+0x1c>
    176c:	f7ff fe86 	bl	147c <_DoInit>
  SEGGER_RTT_LOCK();
    1770:	f3ef 8311 	mrs	r3, BASEPRI
    1774:	f04f 0120 	mov.w	r1, #32
    1778:	f381 8811 	msr	BASEPRI, r1
    177c:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    177e:	9a01      	ldr	r2, [sp, #4]
    1780:	9902      	ldr	r1, [sp, #8]
    1782:	9803      	ldr	r0, [sp, #12]
    1784:	f7ff ff96 	bl	16b4 <SEGGER_RTT_WriteNoLock>
    1788:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    178a:	9b06      	ldr	r3, [sp, #24]
    178c:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1790:	9b05      	ldr	r3, [sp, #20]
}
    1792:	4618      	mov	r0, r3
    1794:	b009      	add	sp, #36	; 0x24
    1796:	f85d fb04 	ldr.w	pc, [sp], #4
    179a:	bf00      	nop
    179c:	1fff8e74 	.word	0x1fff8e74

000017a0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    17a0:	b508      	push	{r3, lr}
  _DoInit();
    17a2:	f7ff fe6b 	bl	147c <_DoInit>
}
    17a6:	bf00      	nop
    17a8:	bd08      	pop	{r3, pc}

000017aa <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    17aa:	b500      	push	{lr}
    17ac:	b085      	sub	sp, #20
    17ae:	9001      	str	r0, [sp, #4]
    17b0:	460b      	mov	r3, r1
    17b2:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    17b6:	9b01      	ldr	r3, [sp, #4]
    17b8:	689b      	ldr	r3, [r3, #8]
    17ba:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    17bc:	9b03      	ldr	r3, [sp, #12]
    17be:	1c5a      	adds	r2, r3, #1
    17c0:	9b01      	ldr	r3, [sp, #4]
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	429a      	cmp	r2, r3
    17c6:	d80f      	bhi.n	17e8 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    17c8:	9b01      	ldr	r3, [sp, #4]
    17ca:	681a      	ldr	r2, [r3, #0]
    17cc:	9b03      	ldr	r3, [sp, #12]
    17ce:	4413      	add	r3, r2
    17d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    17d4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    17d6:	9b03      	ldr	r3, [sp, #12]
    17d8:	1c5a      	adds	r2, r3, #1
    17da:	9b01      	ldr	r3, [sp, #4]
    17dc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    17de:	9b01      	ldr	r3, [sp, #4]
    17e0:	68db      	ldr	r3, [r3, #12]
    17e2:	1c5a      	adds	r2, r3, #1
    17e4:	9b01      	ldr	r3, [sp, #4]
    17e6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    17e8:	9b01      	ldr	r3, [sp, #4]
    17ea:	689a      	ldr	r2, [r3, #8]
    17ec:	9b01      	ldr	r3, [sp, #4]
    17ee:	685b      	ldr	r3, [r3, #4]
    17f0:	429a      	cmp	r2, r3
    17f2:	d115      	bne.n	1820 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    17f4:	9b01      	ldr	r3, [sp, #4]
    17f6:	6918      	ldr	r0, [r3, #16]
    17f8:	9b01      	ldr	r3, [sp, #4]
    17fa:	6819      	ldr	r1, [r3, #0]
    17fc:	9b01      	ldr	r3, [sp, #4]
    17fe:	689b      	ldr	r3, [r3, #8]
    1800:	461a      	mov	r2, r3
    1802:	f7ff ffa7 	bl	1754 <SEGGER_RTT_Write>
    1806:	4602      	mov	r2, r0
    1808:	9b01      	ldr	r3, [sp, #4]
    180a:	689b      	ldr	r3, [r3, #8]
    180c:	429a      	cmp	r2, r3
    180e:	d004      	beq.n	181a <_StoreChar+0x70>
      p->ReturnValue = -1;
    1810:	9b01      	ldr	r3, [sp, #4]
    1812:	f04f 32ff 	mov.w	r2, #4294967295
    1816:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1818:	e002      	b.n	1820 <_StoreChar+0x76>
      p->Cnt = 0u;
    181a:	9b01      	ldr	r3, [sp, #4]
    181c:	2200      	movs	r2, #0
    181e:	609a      	str	r2, [r3, #8]
}
    1820:	bf00      	nop
    1822:	b005      	add	sp, #20
    1824:	f85d fb04 	ldr.w	pc, [sp], #4

00001828 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1828:	b500      	push	{lr}
    182a:	b08b      	sub	sp, #44	; 0x2c
    182c:	9003      	str	r0, [sp, #12]
    182e:	9102      	str	r1, [sp, #8]
    1830:	9201      	str	r2, [sp, #4]
    1832:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1834:	9b02      	ldr	r3, [sp, #8]
    1836:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1838:	2301      	movs	r3, #1
    183a:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    183c:	2301      	movs	r3, #1
    183e:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1840:	e007      	b.n	1852 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1842:	9a08      	ldr	r2, [sp, #32]
    1844:	9b01      	ldr	r3, [sp, #4]
    1846:	fbb2 f3f3 	udiv	r3, r2, r3
    184a:	9308      	str	r3, [sp, #32]
    Width++;
    184c:	9b07      	ldr	r3, [sp, #28]
    184e:	3301      	adds	r3, #1
    1850:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1852:	9a08      	ldr	r2, [sp, #32]
    1854:	9b01      	ldr	r3, [sp, #4]
    1856:	429a      	cmp	r2, r3
    1858:	d2f3      	bcs.n	1842 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    185a:	9a00      	ldr	r2, [sp, #0]
    185c:	9b07      	ldr	r3, [sp, #28]
    185e:	429a      	cmp	r2, r3
    1860:	d901      	bls.n	1866 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1862:	9b00      	ldr	r3, [sp, #0]
    1864:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1868:	f003 0301 	and.w	r3, r3, #1
    186c:	2b00      	cmp	r3, #0
    186e:	d128      	bne.n	18c2 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1872:	2b00      	cmp	r3, #0
    1874:	d025      	beq.n	18c2 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1878:	f003 0302 	and.w	r3, r3, #2
    187c:	2b00      	cmp	r3, #0
    187e:	d006      	beq.n	188e <_PrintUnsigned+0x66>
    1880:	9b00      	ldr	r3, [sp, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d103      	bne.n	188e <_PrintUnsigned+0x66>
        c = '0';
    1886:	2330      	movs	r3, #48	; 0x30
    1888:	f88d 301b 	strb.w	r3, [sp, #27]
    188c:	e002      	b.n	1894 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    188e:	2320      	movs	r3, #32
    1890:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1894:	e00c      	b.n	18b0 <_PrintUnsigned+0x88>
        FieldWidth--;
    1896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1898:	3b01      	subs	r3, #1
    189a:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    189c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    18a0:	4619      	mov	r1, r3
    18a2:	9803      	ldr	r0, [sp, #12]
    18a4:	f7ff ff81 	bl	17aa <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    18a8:	9b03      	ldr	r3, [sp, #12]
    18aa:	68db      	ldr	r3, [r3, #12]
    18ac:	2b00      	cmp	r3, #0
    18ae:	db07      	blt.n	18c0 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    18b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    18b2:	2b00      	cmp	r3, #0
    18b4:	d005      	beq.n	18c2 <_PrintUnsigned+0x9a>
    18b6:	9a07      	ldr	r2, [sp, #28]
    18b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    18ba:	429a      	cmp	r2, r3
    18bc:	d3eb      	bcc.n	1896 <_PrintUnsigned+0x6e>
    18be:	e000      	b.n	18c2 <_PrintUnsigned+0x9a>
          break;
    18c0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    18c2:	9b03      	ldr	r3, [sp, #12]
    18c4:	68db      	ldr	r3, [r3, #12]
    18c6:	2b00      	cmp	r3, #0
    18c8:	db55      	blt.n	1976 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    18ca:	9b00      	ldr	r3, [sp, #0]
    18cc:	2b01      	cmp	r3, #1
    18ce:	d903      	bls.n	18d8 <_PrintUnsigned+0xb0>
        NumDigits--;
    18d0:	9b00      	ldr	r3, [sp, #0]
    18d2:	3b01      	subs	r3, #1
    18d4:	9300      	str	r3, [sp, #0]
    18d6:	e009      	b.n	18ec <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    18d8:	9a02      	ldr	r2, [sp, #8]
    18da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18dc:	fbb2 f3f3 	udiv	r3, r2, r3
    18e0:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    18e2:	9a05      	ldr	r2, [sp, #20]
    18e4:	9b01      	ldr	r3, [sp, #4]
    18e6:	429a      	cmp	r2, r3
    18e8:	d200      	bcs.n	18ec <_PrintUnsigned+0xc4>
          break;
    18ea:	e005      	b.n	18f8 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    18ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18ee:	9a01      	ldr	r2, [sp, #4]
    18f0:	fb02 f303 	mul.w	r3, r2, r3
    18f4:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    18f6:	e7e8      	b.n	18ca <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    18f8:	9a02      	ldr	r2, [sp, #8]
    18fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18fc:	fbb2 f3f3 	udiv	r3, r2, r3
    1900:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1902:	9b05      	ldr	r3, [sp, #20]
    1904:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1906:	fb02 f303 	mul.w	r3, r2, r3
    190a:	9a02      	ldr	r2, [sp, #8]
    190c:	1ad3      	subs	r3, r2, r3
    190e:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1910:	4a1b      	ldr	r2, [pc, #108]	; (1980 <_PrintUnsigned+0x158>)
    1912:	9b05      	ldr	r3, [sp, #20]
    1914:	4413      	add	r3, r2
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	4619      	mov	r1, r3
    191a:	9803      	ldr	r0, [sp, #12]
    191c:	f7ff ff45 	bl	17aa <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1920:	9b03      	ldr	r3, [sp, #12]
    1922:	68db      	ldr	r3, [r3, #12]
    1924:	2b00      	cmp	r3, #0
    1926:	db08      	blt.n	193a <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1928:	9a09      	ldr	r2, [sp, #36]	; 0x24
    192a:	9b01      	ldr	r3, [sp, #4]
    192c:	fbb2 f3f3 	udiv	r3, r2, r3
    1930:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1932:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1934:	2b00      	cmp	r3, #0
    1936:	d1df      	bne.n	18f8 <_PrintUnsigned+0xd0>
    1938:	e000      	b.n	193c <_PrintUnsigned+0x114>
        break;
    193a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    193c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    193e:	f003 0301 	and.w	r3, r3, #1
    1942:	2b00      	cmp	r3, #0
    1944:	d017      	beq.n	1976 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1948:	2b00      	cmp	r3, #0
    194a:	d014      	beq.n	1976 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    194c:	e00a      	b.n	1964 <_PrintUnsigned+0x13c>
          FieldWidth--;
    194e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1950:	3b01      	subs	r3, #1
    1952:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1954:	2120      	movs	r1, #32
    1956:	9803      	ldr	r0, [sp, #12]
    1958:	f7ff ff27 	bl	17aa <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    195c:	9b03      	ldr	r3, [sp, #12]
    195e:	68db      	ldr	r3, [r3, #12]
    1960:	2b00      	cmp	r3, #0
    1962:	db07      	blt.n	1974 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1966:	2b00      	cmp	r3, #0
    1968:	d005      	beq.n	1976 <_PrintUnsigned+0x14e>
    196a:	9a07      	ldr	r2, [sp, #28]
    196c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    196e:	429a      	cmp	r2, r3
    1970:	d3ed      	bcc.n	194e <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1972:	e000      	b.n	1976 <_PrintUnsigned+0x14e>
            break;
    1974:	bf00      	nop
}
    1976:	bf00      	nop
    1978:	b00b      	add	sp, #44	; 0x2c
    197a:	f85d fb04 	ldr.w	pc, [sp], #4
    197e:	bf00      	nop
    1980:	000095c0 	.word	0x000095c0

00001984 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1984:	b500      	push	{lr}
    1986:	b089      	sub	sp, #36	; 0x24
    1988:	9005      	str	r0, [sp, #20]
    198a:	9104      	str	r1, [sp, #16]
    198c:	9203      	str	r2, [sp, #12]
    198e:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1990:	9b04      	ldr	r3, [sp, #16]
    1992:	2b00      	cmp	r3, #0
    1994:	bfb8      	it	lt
    1996:	425b      	neglt	r3, r3
    1998:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    199a:	2301      	movs	r3, #1
    199c:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    199e:	e007      	b.n	19b0 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    19a0:	9b03      	ldr	r3, [sp, #12]
    19a2:	9a06      	ldr	r2, [sp, #24]
    19a4:	fb92 f3f3 	sdiv	r3, r2, r3
    19a8:	9306      	str	r3, [sp, #24]
    Width++;
    19aa:	9b07      	ldr	r3, [sp, #28]
    19ac:	3301      	adds	r3, #1
    19ae:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    19b0:	9b03      	ldr	r3, [sp, #12]
    19b2:	9a06      	ldr	r2, [sp, #24]
    19b4:	429a      	cmp	r2, r3
    19b6:	daf3      	bge.n	19a0 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    19b8:	9a02      	ldr	r2, [sp, #8]
    19ba:	9b07      	ldr	r3, [sp, #28]
    19bc:	429a      	cmp	r2, r3
    19be:	d901      	bls.n	19c4 <_PrintInt+0x40>
    Width = NumDigits;
    19c0:	9b02      	ldr	r3, [sp, #8]
    19c2:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    19c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19c6:	2b00      	cmp	r3, #0
    19c8:	d00a      	beq.n	19e0 <_PrintInt+0x5c>
    19ca:	9b04      	ldr	r3, [sp, #16]
    19cc:	2b00      	cmp	r3, #0
    19ce:	db04      	blt.n	19da <_PrintInt+0x56>
    19d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19d2:	f003 0304 	and.w	r3, r3, #4
    19d6:	2b00      	cmp	r3, #0
    19d8:	d002      	beq.n	19e0 <_PrintInt+0x5c>
    FieldWidth--;
    19da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19dc:	3b01      	subs	r3, #1
    19de:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    19e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19e2:	f003 0302 	and.w	r3, r3, #2
    19e6:	2b00      	cmp	r3, #0
    19e8:	d002      	beq.n	19f0 <_PrintInt+0x6c>
    19ea:	9b02      	ldr	r3, [sp, #8]
    19ec:	2b00      	cmp	r3, #0
    19ee:	d01c      	beq.n	1a2a <_PrintInt+0xa6>
    19f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19f2:	f003 0301 	and.w	r3, r3, #1
    19f6:	2b00      	cmp	r3, #0
    19f8:	d117      	bne.n	1a2a <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    19fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19fc:	2b00      	cmp	r3, #0
    19fe:	d014      	beq.n	1a2a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1a00:	e00a      	b.n	1a18 <_PrintInt+0x94>
        FieldWidth--;
    1a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a04:	3b01      	subs	r3, #1
    1a06:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1a08:	2120      	movs	r1, #32
    1a0a:	9805      	ldr	r0, [sp, #20]
    1a0c:	f7ff fecd 	bl	17aa <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1a10:	9b05      	ldr	r3, [sp, #20]
    1a12:	68db      	ldr	r3, [r3, #12]
    1a14:	2b00      	cmp	r3, #0
    1a16:	db07      	blt.n	1a28 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d005      	beq.n	1a2a <_PrintInt+0xa6>
    1a1e:	9a07      	ldr	r2, [sp, #28]
    1a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a22:	429a      	cmp	r2, r3
    1a24:	d3ed      	bcc.n	1a02 <_PrintInt+0x7e>
    1a26:	e000      	b.n	1a2a <_PrintInt+0xa6>
          break;
    1a28:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1a2a:	9b05      	ldr	r3, [sp, #20]
    1a2c:	68db      	ldr	r3, [r3, #12]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	db4a      	blt.n	1ac8 <_PrintInt+0x144>
    if (v < 0) {
    1a32:	9b04      	ldr	r3, [sp, #16]
    1a34:	2b00      	cmp	r3, #0
    1a36:	da07      	bge.n	1a48 <_PrintInt+0xc4>
      v = -v;
    1a38:	9b04      	ldr	r3, [sp, #16]
    1a3a:	425b      	negs	r3, r3
    1a3c:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1a3e:	212d      	movs	r1, #45	; 0x2d
    1a40:	9805      	ldr	r0, [sp, #20]
    1a42:	f7ff feb2 	bl	17aa <_StoreChar>
    1a46:	e008      	b.n	1a5a <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a4a:	f003 0304 	and.w	r3, r3, #4
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d003      	beq.n	1a5a <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1a52:	212b      	movs	r1, #43	; 0x2b
    1a54:	9805      	ldr	r0, [sp, #20]
    1a56:	f7ff fea8 	bl	17aa <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1a5a:	9b05      	ldr	r3, [sp, #20]
    1a5c:	68db      	ldr	r3, [r3, #12]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	db32      	blt.n	1ac8 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a64:	f003 0302 	and.w	r3, r3, #2
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d01f      	beq.n	1aac <_PrintInt+0x128>
    1a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a6e:	f003 0301 	and.w	r3, r3, #1
    1a72:	2b00      	cmp	r3, #0
    1a74:	d11a      	bne.n	1aac <_PrintInt+0x128>
    1a76:	9b02      	ldr	r3, [sp, #8]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d117      	bne.n	1aac <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d014      	beq.n	1aac <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1a82:	e00a      	b.n	1a9a <_PrintInt+0x116>
            FieldWidth--;
    1a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a86:	3b01      	subs	r3, #1
    1a88:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1a8a:	2130      	movs	r1, #48	; 0x30
    1a8c:	9805      	ldr	r0, [sp, #20]
    1a8e:	f7ff fe8c 	bl	17aa <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1a92:	9b05      	ldr	r3, [sp, #20]
    1a94:	68db      	ldr	r3, [r3, #12]
    1a96:	2b00      	cmp	r3, #0
    1a98:	db07      	blt.n	1aaa <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d005      	beq.n	1aac <_PrintInt+0x128>
    1aa0:	9a07      	ldr	r2, [sp, #28]
    1aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1aa4:	429a      	cmp	r2, r3
    1aa6:	d3ed      	bcc.n	1a84 <_PrintInt+0x100>
    1aa8:	e000      	b.n	1aac <_PrintInt+0x128>
              break;
    1aaa:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1aac:	9b05      	ldr	r3, [sp, #20]
    1aae:	68db      	ldr	r3, [r3, #12]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	db09      	blt.n	1ac8 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1ab4:	9904      	ldr	r1, [sp, #16]
    1ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ab8:	9301      	str	r3, [sp, #4]
    1aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1abc:	9300      	str	r3, [sp, #0]
    1abe:	9b02      	ldr	r3, [sp, #8]
    1ac0:	9a03      	ldr	r2, [sp, #12]
    1ac2:	9805      	ldr	r0, [sp, #20]
    1ac4:	f7ff feb0 	bl	1828 <_PrintUnsigned>
      }
    }
  }
}
    1ac8:	bf00      	nop
    1aca:	b009      	add	sp, #36	; 0x24
    1acc:	f85d fb04 	ldr.w	pc, [sp], #4

00001ad0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1ad0:	b500      	push	{lr}
    1ad2:	b0a3      	sub	sp, #140	; 0x8c
    1ad4:	9005      	str	r0, [sp, #20]
    1ad6:	9104      	str	r1, [sp, #16]
    1ad8:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1ada:	ab06      	add	r3, sp, #24
    1adc:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1ade:	2340      	movs	r3, #64	; 0x40
    1ae0:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1ae2:	2300      	movs	r3, #0
    1ae4:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1ae6:	9b05      	ldr	r3, [sp, #20]
    1ae8:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1aea:	2300      	movs	r3, #0
    1aec:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1aee:	9b04      	ldr	r3, [sp, #16]
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1af6:	9b04      	ldr	r3, [sp, #16]
    1af8:	3301      	adds	r3, #1
    1afa:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1afc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1b00:	2b00      	cmp	r3, #0
    1b02:	f000 819c 	beq.w	1e3e <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1b06:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1b0a:	2b25      	cmp	r3, #37	; 0x25
    1b0c:	f040 818b 	bne.w	1e26 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1b10:	2300      	movs	r3, #0
    1b12:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1b14:	2301      	movs	r3, #1
    1b16:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1b18:	9b04      	ldr	r3, [sp, #16]
    1b1a:	781b      	ldrb	r3, [r3, #0]
    1b1c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1b20:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1b24:	3b23      	subs	r3, #35	; 0x23
    1b26:	2b0d      	cmp	r3, #13
    1b28:	d83e      	bhi.n	1ba8 <SEGGER_RTT_vprintf+0xd8>
    1b2a:	a201      	add	r2, pc, #4	; (adr r2, 1b30 <SEGGER_RTT_vprintf+0x60>)
    1b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1b30:	00001b99 	.word	0x00001b99
    1b34:	00001ba9 	.word	0x00001ba9
    1b38:	00001ba9 	.word	0x00001ba9
    1b3c:	00001ba9 	.word	0x00001ba9
    1b40:	00001ba9 	.word	0x00001ba9
    1b44:	00001ba9 	.word	0x00001ba9
    1b48:	00001ba9 	.word	0x00001ba9
    1b4c:	00001ba9 	.word	0x00001ba9
    1b50:	00001b89 	.word	0x00001b89
    1b54:	00001ba9 	.word	0x00001ba9
    1b58:	00001b69 	.word	0x00001b69
    1b5c:	00001ba9 	.word	0x00001ba9
    1b60:	00001ba9 	.word	0x00001ba9
    1b64:	00001b79 	.word	0x00001b79
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1b68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b6a:	f043 0301 	orr.w	r3, r3, #1
    1b6e:	931e      	str	r3, [sp, #120]	; 0x78
    1b70:	9b04      	ldr	r3, [sp, #16]
    1b72:	3301      	adds	r3, #1
    1b74:	9304      	str	r3, [sp, #16]
    1b76:	e01a      	b.n	1bae <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1b78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b7a:	f043 0302 	orr.w	r3, r3, #2
    1b7e:	931e      	str	r3, [sp, #120]	; 0x78
    1b80:	9b04      	ldr	r3, [sp, #16]
    1b82:	3301      	adds	r3, #1
    1b84:	9304      	str	r3, [sp, #16]
    1b86:	e012      	b.n	1bae <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1b88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b8a:	f043 0304 	orr.w	r3, r3, #4
    1b8e:	931e      	str	r3, [sp, #120]	; 0x78
    1b90:	9b04      	ldr	r3, [sp, #16]
    1b92:	3301      	adds	r3, #1
    1b94:	9304      	str	r3, [sp, #16]
    1b96:	e00a      	b.n	1bae <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1b98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b9a:	f043 0308 	orr.w	r3, r3, #8
    1b9e:	931e      	str	r3, [sp, #120]	; 0x78
    1ba0:	9b04      	ldr	r3, [sp, #16]
    1ba2:	3301      	adds	r3, #1
    1ba4:	9304      	str	r3, [sp, #16]
    1ba6:	e002      	b.n	1bae <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1ba8:	2300      	movs	r3, #0
    1baa:	9320      	str	r3, [sp, #128]	; 0x80
    1bac:	bf00      	nop
        }
      } while (v);
    1bae:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d1b1      	bne.n	1b18 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1bb4:	2300      	movs	r3, #0
    1bb6:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1bb8:	9b04      	ldr	r3, [sp, #16]
    1bba:	781b      	ldrb	r3, [r3, #0]
    1bbc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1bc0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1bc4:	2b2f      	cmp	r3, #47	; 0x2f
    1bc6:	d912      	bls.n	1bee <SEGGER_RTT_vprintf+0x11e>
    1bc8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1bcc:	2b39      	cmp	r3, #57	; 0x39
    1bce:	d80e      	bhi.n	1bee <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1bd0:	9b04      	ldr	r3, [sp, #16]
    1bd2:	3301      	adds	r3, #1
    1bd4:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1bd6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1bd8:	4613      	mov	r3, r2
    1bda:	009b      	lsls	r3, r3, #2
    1bdc:	4413      	add	r3, r2
    1bde:	005b      	lsls	r3, r3, #1
    1be0:	461a      	mov	r2, r3
    1be2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1be6:	4413      	add	r3, r2
    1be8:	3b30      	subs	r3, #48	; 0x30
    1bea:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1bec:	e7e4      	b.n	1bb8 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1bee:	2300      	movs	r3, #0
    1bf0:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1bf2:	9b04      	ldr	r3, [sp, #16]
    1bf4:	781b      	ldrb	r3, [r3, #0]
    1bf6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1bfa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1bfe:	2b2e      	cmp	r3, #46	; 0x2e
    1c00:	d11d      	bne.n	1c3e <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1c02:	9b04      	ldr	r3, [sp, #16]
    1c04:	3301      	adds	r3, #1
    1c06:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1c08:	9b04      	ldr	r3, [sp, #16]
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1c10:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c14:	2b2f      	cmp	r3, #47	; 0x2f
    1c16:	d912      	bls.n	1c3e <SEGGER_RTT_vprintf+0x16e>
    1c18:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c1c:	2b39      	cmp	r3, #57	; 0x39
    1c1e:	d80e      	bhi.n	1c3e <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1c20:	9b04      	ldr	r3, [sp, #16]
    1c22:	3301      	adds	r3, #1
    1c24:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1c26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1c28:	4613      	mov	r3, r2
    1c2a:	009b      	lsls	r3, r3, #2
    1c2c:	4413      	add	r3, r2
    1c2e:	005b      	lsls	r3, r3, #1
    1c30:	461a      	mov	r2, r3
    1c32:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c36:	4413      	add	r3, r2
    1c38:	3b30      	subs	r3, #48	; 0x30
    1c3a:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1c3c:	e7e4      	b.n	1c08 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1c3e:	9b04      	ldr	r3, [sp, #16]
    1c40:	781b      	ldrb	r3, [r3, #0]
    1c42:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1c46:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c4a:	2b6c      	cmp	r3, #108	; 0x6c
    1c4c:	d003      	beq.n	1c56 <SEGGER_RTT_vprintf+0x186>
    1c4e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c52:	2b68      	cmp	r3, #104	; 0x68
    1c54:	d107      	bne.n	1c66 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1c56:	9b04      	ldr	r3, [sp, #16]
    1c58:	3301      	adds	r3, #1
    1c5a:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1c5c:	9b04      	ldr	r3, [sp, #16]
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1c64:	e7ef      	b.n	1c46 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1c66:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c6a:	2b25      	cmp	r3, #37	; 0x25
    1c6c:	f000 80d0 	beq.w	1e10 <SEGGER_RTT_vprintf+0x340>
    1c70:	2b25      	cmp	r3, #37	; 0x25
    1c72:	f2c0 80d3 	blt.w	1e1c <SEGGER_RTT_vprintf+0x34c>
    1c76:	2b78      	cmp	r3, #120	; 0x78
    1c78:	f300 80d0 	bgt.w	1e1c <SEGGER_RTT_vprintf+0x34c>
    1c7c:	2b58      	cmp	r3, #88	; 0x58
    1c7e:	f2c0 80cd 	blt.w	1e1c <SEGGER_RTT_vprintf+0x34c>
    1c82:	3b58      	subs	r3, #88	; 0x58
    1c84:	2b20      	cmp	r3, #32
    1c86:	f200 80c9 	bhi.w	1e1c <SEGGER_RTT_vprintf+0x34c>
    1c8a:	a201      	add	r2, pc, #4	; (adr r2, 1c90 <SEGGER_RTT_vprintf+0x1c0>)
    1c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1c90:	00001d81 	.word	0x00001d81
    1c94:	00001e1d 	.word	0x00001e1d
    1c98:	00001e1d 	.word	0x00001e1d
    1c9c:	00001e1d 	.word	0x00001e1d
    1ca0:	00001e1d 	.word	0x00001e1d
    1ca4:	00001e1d 	.word	0x00001e1d
    1ca8:	00001e1d 	.word	0x00001e1d
    1cac:	00001e1d 	.word	0x00001e1d
    1cb0:	00001e1d 	.word	0x00001e1d
    1cb4:	00001e1d 	.word	0x00001e1d
    1cb8:	00001e1d 	.word	0x00001e1d
    1cbc:	00001d15 	.word	0x00001d15
    1cc0:	00001d39 	.word	0x00001d39
    1cc4:	00001e1d 	.word	0x00001e1d
    1cc8:	00001e1d 	.word	0x00001e1d
    1ccc:	00001e1d 	.word	0x00001e1d
    1cd0:	00001e1d 	.word	0x00001e1d
    1cd4:	00001e1d 	.word	0x00001e1d
    1cd8:	00001e1d 	.word	0x00001e1d
    1cdc:	00001e1d 	.word	0x00001e1d
    1ce0:	00001e1d 	.word	0x00001e1d
    1ce4:	00001e1d 	.word	0x00001e1d
    1ce8:	00001e1d 	.word	0x00001e1d
    1cec:	00001e1d 	.word	0x00001e1d
    1cf0:	00001ded 	.word	0x00001ded
    1cf4:	00001e1d 	.word	0x00001e1d
    1cf8:	00001e1d 	.word	0x00001e1d
    1cfc:	00001da5 	.word	0x00001da5
    1d00:	00001e1d 	.word	0x00001e1d
    1d04:	00001d5d 	.word	0x00001d5d
    1d08:	00001e1d 	.word	0x00001e1d
    1d0c:	00001e1d 	.word	0x00001e1d
    1d10:	00001d81 	.word	0x00001d81
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1d14:	9b03      	ldr	r3, [sp, #12]
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	1d19      	adds	r1, r3, #4
    1d1a:	9a03      	ldr	r2, [sp, #12]
    1d1c:	6011      	str	r1, [r2, #0]
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1d22:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1d24:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1d28:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1d2c:	ab16      	add	r3, sp, #88	; 0x58
    1d2e:	4611      	mov	r1, r2
    1d30:	4618      	mov	r0, r3
    1d32:	f7ff fd3a 	bl	17aa <_StoreChar>
        break;
    1d36:	e072      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1d38:	9b03      	ldr	r3, [sp, #12]
    1d3a:	681b      	ldr	r3, [r3, #0]
    1d3c:	1d19      	adds	r1, r3, #4
    1d3e:	9a03      	ldr	r2, [sp, #12]
    1d40:	6011      	str	r1, [r2, #0]
    1d42:	681b      	ldr	r3, [r3, #0]
    1d44:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1d46:	a816      	add	r0, sp, #88	; 0x58
    1d48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1d4a:	9301      	str	r3, [sp, #4]
    1d4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1d4e:	9300      	str	r3, [sp, #0]
    1d50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1d52:	220a      	movs	r2, #10
    1d54:	9920      	ldr	r1, [sp, #128]	; 0x80
    1d56:	f7ff fe15 	bl	1984 <_PrintInt>
        break;
    1d5a:	e060      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1d5c:	9b03      	ldr	r3, [sp, #12]
    1d5e:	681b      	ldr	r3, [r3, #0]
    1d60:	1d19      	adds	r1, r3, #4
    1d62:	9a03      	ldr	r2, [sp, #12]
    1d64:	6011      	str	r1, [r2, #0]
    1d66:	681b      	ldr	r3, [r3, #0]
    1d68:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1d6a:	9920      	ldr	r1, [sp, #128]	; 0x80
    1d6c:	a816      	add	r0, sp, #88	; 0x58
    1d6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1d70:	9301      	str	r3, [sp, #4]
    1d72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1d74:	9300      	str	r3, [sp, #0]
    1d76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1d78:	220a      	movs	r2, #10
    1d7a:	f7ff fd55 	bl	1828 <_PrintUnsigned>
        break;
    1d7e:	e04e      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1d80:	9b03      	ldr	r3, [sp, #12]
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	1d19      	adds	r1, r3, #4
    1d86:	9a03      	ldr	r2, [sp, #12]
    1d88:	6011      	str	r1, [r2, #0]
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1d8e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1d90:	a816      	add	r0, sp, #88	; 0x58
    1d92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1d94:	9301      	str	r3, [sp, #4]
    1d96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1d98:	9300      	str	r3, [sp, #0]
    1d9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1d9c:	2210      	movs	r2, #16
    1d9e:	f7ff fd43 	bl	1828 <_PrintUnsigned>
        break;
    1da2:	e03c      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1da4:	9b03      	ldr	r3, [sp, #12]
    1da6:	681b      	ldr	r3, [r3, #0]
    1da8:	1d19      	adds	r1, r3, #4
    1daa:	9a03      	ldr	r2, [sp, #12]
    1dac:	6011      	str	r1, [r2, #0]
    1dae:	681b      	ldr	r3, [r3, #0]
    1db0:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1db2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1db4:	2b00      	cmp	r3, #0
    1db6:	d101      	bne.n	1dbc <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1db8:	4b2c      	ldr	r3, [pc, #176]	; (1e6c <SEGGER_RTT_vprintf+0x39c>)
    1dba:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1dbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1dc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1dc6:	3301      	adds	r3, #1
    1dc8:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1dca:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d00a      	beq.n	1de8 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1dd2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1dd6:	ab16      	add	r3, sp, #88	; 0x58
    1dd8:	4611      	mov	r1, r2
    1dda:	4618      	mov	r0, r3
    1ddc:	f7ff fce5 	bl	17aa <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1de0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1de2:	2b00      	cmp	r3, #0
    1de4:	daea      	bge.n	1dbc <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1de6:	e01a      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
              break;
    1de8:	bf00      	nop
        break;
    1dea:	e018      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1dec:	9b03      	ldr	r3, [sp, #12]
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	1d19      	adds	r1, r3, #4
    1df2:	9a03      	ldr	r2, [sp, #12]
    1df4:	6011      	str	r1, [r2, #0]
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1dfa:	9920      	ldr	r1, [sp, #128]	; 0x80
    1dfc:	a816      	add	r0, sp, #88	; 0x58
    1dfe:	2300      	movs	r3, #0
    1e00:	9301      	str	r3, [sp, #4]
    1e02:	2308      	movs	r3, #8
    1e04:	9300      	str	r3, [sp, #0]
    1e06:	2308      	movs	r3, #8
    1e08:	2210      	movs	r2, #16
    1e0a:	f7ff fd0d 	bl	1828 <_PrintUnsigned>
        break;
    1e0e:	e006      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1e10:	ab16      	add	r3, sp, #88	; 0x58
    1e12:	2125      	movs	r1, #37	; 0x25
    1e14:	4618      	mov	r0, r3
    1e16:	f7ff fcc8 	bl	17aa <_StoreChar>
        break;
    1e1a:	e000      	b.n	1e1e <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1e1c:	bf00      	nop
      }
      sFormat++;
    1e1e:	9b04      	ldr	r3, [sp, #16]
    1e20:	3301      	adds	r3, #1
    1e22:	9304      	str	r3, [sp, #16]
    1e24:	e006      	b.n	1e34 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1e26:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1e2a:	ab16      	add	r3, sp, #88	; 0x58
    1e2c:	4611      	mov	r1, r2
    1e2e:	4618      	mov	r0, r3
    1e30:	f7ff fcbb 	bl	17aa <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1e34:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1e36:	2b00      	cmp	r3, #0
    1e38:	f6bf ae59 	bge.w	1aee <SEGGER_RTT_vprintf+0x1e>
    1e3c:	e000      	b.n	1e40 <SEGGER_RTT_vprintf+0x370>
      break;
    1e3e:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1e42:	2b00      	cmp	r3, #0
    1e44:	dd0c      	ble.n	1e60 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1e46:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d005      	beq.n	1e58 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1e4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e4e:	ab06      	add	r3, sp, #24
    1e50:	4619      	mov	r1, r3
    1e52:	9805      	ldr	r0, [sp, #20]
    1e54:	f7ff fc7e 	bl	1754 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1e58:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1e5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e5c:	4413      	add	r3, r2
    1e5e:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1e60:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1e62:	4618      	mov	r0, r3
    1e64:	b023      	add	sp, #140	; 0x8c
    1e66:	f85d fb04 	ldr.w	pc, [sp], #4
    1e6a:	bf00      	nop
    1e6c:	000086c8 	.word	0x000086c8

00001e70 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1e70:	b40e      	push	{r1, r2, r3}
    1e72:	b500      	push	{lr}
    1e74:	b084      	sub	sp, #16
    1e76:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1e78:	ab06      	add	r3, sp, #24
    1e7a:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1e7c:	ab02      	add	r3, sp, #8
    1e7e:	461a      	mov	r2, r3
    1e80:	9905      	ldr	r1, [sp, #20]
    1e82:	9801      	ldr	r0, [sp, #4]
    1e84:	f7ff fe24 	bl	1ad0 <SEGGER_RTT_vprintf>
    1e88:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1e8a:	9b03      	ldr	r3, [sp, #12]
}
    1e8c:	4618      	mov	r0, r3
    1e8e:	b004      	add	sp, #16
    1e90:	f85d eb04 	ldr.w	lr, [sp], #4
    1e94:	b003      	add	sp, #12
    1e96:	4770      	bx	lr

00001e98 <memcpy>:
    1e98:	440a      	add	r2, r1
    1e9a:	4291      	cmp	r1, r2
    1e9c:	f100 33ff 	add.w	r3, r0, #4294967295
    1ea0:	d100      	bne.n	1ea4 <memcpy+0xc>
    1ea2:	4770      	bx	lr
    1ea4:	b510      	push	{r4, lr}
    1ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
    1eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
    1eae:	4291      	cmp	r1, r2
    1eb0:	d1f9      	bne.n	1ea6 <memcpy+0xe>
    1eb2:	bd10      	pop	{r4, pc}

00001eb4 <memset>:
    1eb4:	4402      	add	r2, r0
    1eb6:	4603      	mov	r3, r0
    1eb8:	4293      	cmp	r3, r2
    1eba:	d100      	bne.n	1ebe <memset+0xa>
    1ebc:	4770      	bx	lr
    1ebe:	f803 1b01 	strb.w	r1, [r3], #1
    1ec2:	e7f9      	b.n	1eb8 <memset+0x4>

00001ec4 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1ec4:	2300      	movs	r3, #0
}
    1ec6:	4618      	mov	r0, r3
    1ec8:	4770      	bx	lr

00001eca <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1eca:	b082      	sub	sp, #8
    1ecc:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1ece:	2301      	movs	r3, #1
}
    1ed0:	4618      	mov	r0, r3
    1ed2:	b002      	add	sp, #8
    1ed4:	4770      	bx	lr

00001ed6 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1ed6:	b082      	sub	sp, #8
    1ed8:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1eda:	bf00      	nop
    1edc:	b002      	add	sp, #8
    1ede:	4770      	bx	lr

00001ee0 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1ee0:	b082      	sub	sp, #8
    1ee2:	9001      	str	r0, [sp, #4]
    return Micros;
    1ee4:	9b01      	ldr	r3, [sp, #4]
}
    1ee6:	4618      	mov	r0, r3
    1ee8:	b002      	add	sp, #8
    1eea:	4770      	bx	lr

00001eec <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1eec:	b500      	push	{lr}
    1eee:	b083      	sub	sp, #12
    1ef0:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1ef2:	f000 f86d 	bl	1fd0 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1ef6:	bf00      	nop
    1ef8:	b003      	add	sp, #12
    1efa:	f85d fb04 	ldr.w	pc, [sp], #4

00001efe <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1efe:	b500      	push	{lr}
    1f00:	b085      	sub	sp, #20
    1f02:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1f04:	2300      	movs	r3, #0
    1f06:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1f08:	9b01      	ldr	r3, [sp, #4]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d003      	beq.n	1f16 <OsIf_GetCounter+0x18>
    1f0e:	9b01      	ldr	r3, [sp, #4]
    1f10:	2b01      	cmp	r3, #1
    1f12:	d004      	beq.n	1f1e <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f14:	e007      	b.n	1f26 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1f16:	f7ff ffd5 	bl	1ec4 <OsIf_Timer_Dummy_GetCounter>
    1f1a:	9003      	str	r0, [sp, #12]
            break;
    1f1c:	e003      	b.n	1f26 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1f1e:	f000 f873 	bl	2008 <OsIf_Timer_System_GetCounter>
    1f22:	9003      	str	r0, [sp, #12]
            break;
    1f24:	bf00      	nop
    }

    return Value;
    1f26:	9b03      	ldr	r3, [sp, #12]
}
    1f28:	4618      	mov	r0, r3
    1f2a:	b005      	add	sp, #20
    1f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f30 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1f30:	b500      	push	{lr}
    1f32:	b085      	sub	sp, #20
    1f34:	9001      	str	r0, [sp, #4]
    1f36:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1f38:	2300      	movs	r3, #0
    1f3a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1f3c:	9b00      	ldr	r3, [sp, #0]
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d003      	beq.n	1f4a <OsIf_GetElapsed+0x1a>
    1f42:	9b00      	ldr	r3, [sp, #0]
    1f44:	2b01      	cmp	r3, #1
    1f46:	d005      	beq.n	1f54 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f48:	e009      	b.n	1f5e <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1f4a:	9801      	ldr	r0, [sp, #4]
    1f4c:	f7ff ffbd 	bl	1eca <OsIf_Timer_Dummy_GetElapsed>
    1f50:	9003      	str	r0, [sp, #12]
            break;
    1f52:	e004      	b.n	1f5e <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1f54:	9801      	ldr	r0, [sp, #4]
    1f56:	f000 f865 	bl	2024 <OsIf_Timer_System_GetElapsed>
    1f5a:	9003      	str	r0, [sp, #12]
            break;
    1f5c:	bf00      	nop
    }

    return Value;
    1f5e:	9b03      	ldr	r3, [sp, #12]
}
    1f60:	4618      	mov	r0, r3
    1f62:	b005      	add	sp, #20
    1f64:	f85d fb04 	ldr.w	pc, [sp], #4

00001f68 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1f68:	b500      	push	{lr}
    1f6a:	b083      	sub	sp, #12
    1f6c:	9001      	str	r0, [sp, #4]
    1f6e:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1f70:	9b00      	ldr	r3, [sp, #0]
    1f72:	2b00      	cmp	r3, #0
    1f74:	d003      	beq.n	1f7e <OsIf_SetTimerFrequency+0x16>
    1f76:	9b00      	ldr	r3, [sp, #0]
    1f78:	2b01      	cmp	r3, #1
    1f7a:	d004      	beq.n	1f86 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f7c:	e007      	b.n	1f8e <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1f7e:	9801      	ldr	r0, [sp, #4]
    1f80:	f7ff ffa9 	bl	1ed6 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1f84:	e003      	b.n	1f8e <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1f86:	9801      	ldr	r0, [sp, #4]
    1f88:	f000 f85c 	bl	2044 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1f8c:	bf00      	nop
    }
}
    1f8e:	bf00      	nop
    1f90:	b003      	add	sp, #12
    1f92:	f85d fb04 	ldr.w	pc, [sp], #4

00001f96 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1f96:	b500      	push	{lr}
    1f98:	b085      	sub	sp, #20
    1f9a:	9001      	str	r0, [sp, #4]
    1f9c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1f9e:	2300      	movs	r3, #0
    1fa0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1fa2:	9b00      	ldr	r3, [sp, #0]
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d003      	beq.n	1fb0 <OsIf_MicrosToTicks+0x1a>
    1fa8:	9b00      	ldr	r3, [sp, #0]
    1faa:	2b01      	cmp	r3, #1
    1fac:	d005      	beq.n	1fba <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1fae:	e009      	b.n	1fc4 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1fb0:	9801      	ldr	r0, [sp, #4]
    1fb2:	f7ff ff95 	bl	1ee0 <OsIf_Timer_Dummy_MicrosToTicks>
    1fb6:	9003      	str	r0, [sp, #12]
            break;
    1fb8:	e004      	b.n	1fc4 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1fba:	9801      	ldr	r0, [sp, #4]
    1fbc:	f000 f850 	bl	2060 <OsIf_Timer_System_MicrosToTicks>
    1fc0:	9003      	str	r0, [sp, #12]
            break;
    1fc2:	bf00      	nop
    }

    return Value;
    1fc4:	9b03      	ldr	r3, [sp, #12]
}
    1fc6:	4618      	mov	r0, r3
    1fc8:	b005      	add	sp, #20
    1fca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001fd0 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1fd0:	b500      	push	{lr}
    1fd2:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1fd4:	2300      	movs	r3, #0
    1fd6:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1fd8:	4a09      	ldr	r2, [pc, #36]	; (2000 <OsIf_Timer_System_Init+0x30>)
    1fda:	9b01      	ldr	r3, [sp, #4]
    1fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fe0:	685a      	ldr	r2, [r3, #4]
    1fe2:	4908      	ldr	r1, [pc, #32]	; (2004 <OsIf_Timer_System_Init+0x34>)
    1fe4:	9b01      	ldr	r3, [sp, #4]
    1fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1fea:	4a06      	ldr	r2, [pc, #24]	; (2004 <OsIf_Timer_System_Init+0x34>)
    1fec:	9b01      	ldr	r3, [sp, #4]
    1fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ff2:	4618      	mov	r0, r3
    1ff4:	f000 f868 	bl	20c8 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1ff8:	bf00      	nop
    1ffa:	b003      	add	sp, #12
    1ffc:	f85d fb04 	ldr.w	pc, [sp], #4
    2000:	00009330 	.word	0x00009330
    2004:	1fff8b40 	.word	0x1fff8b40

00002008 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2008:	b500      	push	{lr}
    200a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    200c:	2300      	movs	r3, #0
    200e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2010:	2300      	movs	r3, #0
    2012:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2014:	f000 f86c 	bl	20f0 <OsIf_Timer_System_Internal_GetCounter>
    2018:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    201a:	9b01      	ldr	r3, [sp, #4]
}
    201c:	4618      	mov	r0, r3
    201e:	b003      	add	sp, #12
    2020:	f85d fb04 	ldr.w	pc, [sp], #4

00002024 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2024:	b500      	push	{lr}
    2026:	b085      	sub	sp, #20
    2028:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    202a:	2300      	movs	r3, #0
    202c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    202e:	2300      	movs	r3, #0
    2030:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    2032:	9801      	ldr	r0, [sp, #4]
    2034:	f000 f864 	bl	2100 <OsIf_Timer_System_Internal_GetElapsed>
    2038:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    203a:	9b03      	ldr	r3, [sp, #12]
}
    203c:	4618      	mov	r0, r3
    203e:	b005      	add	sp, #20
    2040:	f85d fb04 	ldr.w	pc, [sp], #4

00002044 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2044:	b084      	sub	sp, #16
    2046:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2048:	2300      	movs	r3, #0
    204a:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    204c:	4903      	ldr	r1, [pc, #12]	; (205c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    204e:	9b03      	ldr	r3, [sp, #12]
    2050:	9a01      	ldr	r2, [sp, #4]
    2052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2056:	bf00      	nop
    2058:	b004      	add	sp, #16
    205a:	4770      	bx	lr
    205c:	1fff8b40 	.word	0x1fff8b40

00002060 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2060:	b5f0      	push	{r4, r5, r6, r7, lr}
    2062:	b087      	sub	sp, #28
    2064:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2066:	2100      	movs	r1, #0
    2068:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    206a:	2100      	movs	r1, #0
    206c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    206e:	9901      	ldr	r1, [sp, #4]
    2070:	2000      	movs	r0, #0
    2072:	460e      	mov	r6, r1
    2074:	4607      	mov	r7, r0
    2076:	4812      	ldr	r0, [pc, #72]	; (20c0 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2078:	9904      	ldr	r1, [sp, #16]
    207a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    207e:	2000      	movs	r0, #0
    2080:	460c      	mov	r4, r1
    2082:	4605      	mov	r5, r0
    2084:	fb04 f007 	mul.w	r0, r4, r7
    2088:	fb06 f105 	mul.w	r1, r6, r5
    208c:	4401      	add	r1, r0
    208e:	fba6 2304 	umull	r2, r3, r6, r4
    2092:	4419      	add	r1, r3
    2094:	460b      	mov	r3, r1
    2096:	e9cd 2302 	strd	r2, r3, [sp, #8]
    209a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    209e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    20a2:	4a08      	ldr	r2, [pc, #32]	; (20c4 <OsIf_Timer_System_MicrosToTicks+0x64>)
    20a4:	f04f 0300 	mov.w	r3, #0
    20a8:	f7fe fa7c 	bl	5a4 <__aeabi_uldivmod>
    20ac:	4602      	mov	r2, r0
    20ae:	460b      	mov	r3, r1
    20b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    20b4:	9b02      	ldr	r3, [sp, #8]
    20b6:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    20b8:	9b05      	ldr	r3, [sp, #20]
}
    20ba:	4618      	mov	r0, r3
    20bc:	b007      	add	sp, #28
    20be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c0:	1fff8b40 	.word	0x1fff8b40
    20c4:	000f4240 	.word	0x000f4240

000020c8 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    20c8:	b082      	sub	sp, #8
    20ca:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    20cc:	4b07      	ldr	r3, [pc, #28]	; (20ec <OsIf_Timer_System_Internal_Init+0x24>)
    20ce:	2200      	movs	r2, #0
    20d0:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    20d2:	4b06      	ldr	r3, [pc, #24]	; (20ec <OsIf_Timer_System_Internal_Init+0x24>)
    20d4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    20d8:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    20da:	4b04      	ldr	r3, [pc, #16]	; (20ec <OsIf_Timer_System_Internal_Init+0x24>)
    20dc:	2200      	movs	r2, #0
    20de:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    20e0:	4b02      	ldr	r3, [pc, #8]	; (20ec <OsIf_Timer_System_Internal_Init+0x24>)
    20e2:	2205      	movs	r2, #5
    20e4:	601a      	str	r2, [r3, #0]
}
    20e6:	bf00      	nop
    20e8:	b002      	add	sp, #8
    20ea:	4770      	bx	lr
    20ec:	e000e010 	.word	0xe000e010

000020f0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    20f0:	4b02      	ldr	r3, [pc, #8]	; (20fc <OsIf_Timer_System_Internal_GetCounter+0xc>)
    20f2:	689b      	ldr	r3, [r3, #8]
    20f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    20f8:	4618      	mov	r0, r3
    20fa:	4770      	bx	lr
    20fc:	e000e010 	.word	0xe000e010

00002100 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2100:	b084      	sub	sp, #16
    2102:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2104:	4b10      	ldr	r3, [pc, #64]	; (2148 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2106:	689b      	ldr	r3, [r3, #8]
    2108:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    210c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    210e:	2300      	movs	r3, #0
    2110:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    2112:	9b01      	ldr	r3, [sp, #4]
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	9a02      	ldr	r2, [sp, #8]
    2118:	429a      	cmp	r2, r3
    211a:	d909      	bls.n	2130 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    211c:	9b01      	ldr	r3, [sp, #4]
    211e:	681a      	ldr	r2, [r3, #0]
    2120:	9b02      	ldr	r3, [sp, #8]
    2122:	1ad3      	subs	r3, r2, r3
    2124:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2128:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    212c:	9303      	str	r3, [sp, #12]
    212e:	e004      	b.n	213a <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2130:	9b01      	ldr	r3, [sp, #4]
    2132:	681a      	ldr	r2, [r3, #0]
    2134:	9b02      	ldr	r3, [sp, #8]
    2136:	1ad3      	subs	r3, r2, r3
    2138:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    213a:	9b01      	ldr	r3, [sp, #4]
    213c:	9a02      	ldr	r2, [sp, #8]
    213e:	601a      	str	r2, [r3, #0]

    return dif;
    2140:	9b03      	ldr	r3, [sp, #12]
}
    2142:	4618      	mov	r0, r3
    2144:	b004      	add	sp, #16
    2146:	4770      	bx	lr
    2148:	e000e010 	.word	0xe000e010

0000214c <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    214c:	b082      	sub	sp, #8
    214e:	9001      	str	r0, [sp, #4]
    2150:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2152:	bf00      	nop
    2154:	b002      	add	sp, #8
    2156:	4770      	bx	lr

00002158 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2158:	b500      	push	{lr}
    215a:	b085      	sub	sp, #20
    215c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    215e:	4b24      	ldr	r3, [pc, #144]	; (21f0 <Clock_Ip_UpdateDriverContext+0x98>)
    2160:	2201      	movs	r2, #1
    2162:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2164:	4b23      	ldr	r3, [pc, #140]	; (21f4 <Clock_Ip_UpdateDriverContext+0x9c>)
    2166:	681b      	ldr	r3, [r3, #0]
    2168:	2102      	movs	r1, #2
    216a:	4618      	mov	r0, r3
    216c:	f003 fc32 	bl	59d4 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2170:	2300      	movs	r3, #0
    2172:	f88d 300f 	strb.w	r3, [sp, #15]
    2176:	e015      	b.n	21a4 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2178:	f89d 300f 	ldrb.w	r3, [sp, #15]
    217c:	9a01      	ldr	r2, [sp, #4]
    217e:	334a      	adds	r3, #74	; 0x4a
    2180:	00db      	lsls	r3, r3, #3
    2182:	4413      	add	r3, r2
    2184:	6858      	ldr	r0, [r3, #4]
    2186:	f89d 300f 	ldrb.w	r3, [sp, #15]
    218a:	9a01      	ldr	r2, [sp, #4]
    218c:	334a      	adds	r3, #74	; 0x4a
    218e:	00db      	lsls	r3, r3, #3
    2190:	4413      	add	r3, r2
    2192:	689b      	ldr	r3, [r3, #8]
    2194:	4619      	mov	r1, r3
    2196:	f001 fadc 	bl	3752 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    219a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    219e:	3301      	adds	r3, #1
    21a0:	f88d 300f 	strb.w	r3, [sp, #15]
    21a4:	9b01      	ldr	r3, [sp, #4]
    21a6:	7bdb      	ldrb	r3, [r3, #15]
    21a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    21ac:	429a      	cmp	r2, r3
    21ae:	d3e3      	bcc.n	2178 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    21b0:	f000 f824 	bl	21fc <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    21b4:	2301      	movs	r3, #1
    21b6:	f88d 300f 	strb.w	r3, [sp, #15]
    21ba:	e00e      	b.n	21da <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    21bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    21c0:	9b01      	ldr	r3, [sp, #4]
    21c2:	327e      	adds	r2, #126	; 0x7e
    21c4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    21c8:	490b      	ldr	r1, [pc, #44]	; (21f8 <Clock_Ip_UpdateDriverContext+0xa0>)
    21ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    21ce:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    21d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    21d4:	3301      	adds	r3, #1
    21d6:	f88d 300f 	strb.w	r3, [sp, #15]
    21da:	9b01      	ldr	r3, [sp, #4]
    21dc:	7cdb      	ldrb	r3, [r3, #19]
    21de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    21e2:	429a      	cmp	r2, r3
    21e4:	d3ea      	bcc.n	21bc <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    21e6:	bf00      	nop
    21e8:	bf00      	nop
    21ea:	b005      	add	sp, #20
    21ec:	f85d fb04 	ldr.w	pc, [sp], #4
    21f0:	1fff8b10 	.word	0x1fff8b10
    21f4:	1fff8b44 	.word	0x1fff8b44
    21f8:	1fff8b50 	.word	0x1fff8b50

000021fc <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    21fc:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    21fe:	4b23      	ldr	r3, [pc, #140]	; (228c <Clock_Ip_CallEmptyCallbacks+0x90>)
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	f083 0301 	eor.w	r3, r3, #1
    2206:	b2db      	uxtb	r3, r3
    2208:	2b00      	cmp	r3, #0
    220a:	d03d      	beq.n	2288 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    220c:	4b1f      	ldr	r3, [pc, #124]	; (228c <Clock_Ip_CallEmptyCallbacks+0x90>)
    220e:	2201      	movs	r2, #1
    2210:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2212:	4b1f      	ldr	r3, [pc, #124]	; (2290 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2214:	685b      	ldr	r3, [r3, #4]
    2216:	2100      	movs	r1, #0
    2218:	2000      	movs	r0, #0
    221a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    221c:	4b1c      	ldr	r3, [pc, #112]	; (2290 <Clock_Ip_CallEmptyCallbacks+0x94>)
    221e:	689b      	ldr	r3, [r3, #8]
    2220:	2057      	movs	r0, #87	; 0x57
    2222:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2224:	4b1b      	ldr	r3, [pc, #108]	; (2294 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	2000      	movs	r0, #0
    222a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    222c:	4b1a      	ldr	r3, [pc, #104]	; (2298 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    222e:	681b      	ldr	r3, [r3, #0]
    2230:	2000      	movs	r0, #0
    2232:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2234:	4b19      	ldr	r3, [pc, #100]	; (229c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2236:	681b      	ldr	r3, [r3, #0]
    2238:	2000      	movs	r0, #0
    223a:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    223c:	4b18      	ldr	r3, [pc, #96]	; (22a0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    223e:	685b      	ldr	r3, [r3, #4]
    2240:	2000      	movs	r0, #0
    2242:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2244:	4b16      	ldr	r3, [pc, #88]	; (22a0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2246:	689b      	ldr	r3, [r3, #8]
    2248:	2057      	movs	r0, #87	; 0x57
    224a:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    224c:	4b15      	ldr	r3, [pc, #84]	; (22a4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	2000      	movs	r0, #0
    2252:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2254:	4b13      	ldr	r3, [pc, #76]	; (22a4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2256:	685b      	ldr	r3, [r3, #4]
    2258:	2100      	movs	r1, #0
    225a:	2057      	movs	r0, #87	; 0x57
    225c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    225e:	4b12      	ldr	r3, [pc, #72]	; (22a8 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2260:	681b      	ldr	r3, [r3, #0]
    2262:	2000      	movs	r0, #0
    2264:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2266:	4b11      	ldr	r3, [pc, #68]	; (22ac <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2268:	685b      	ldr	r3, [r3, #4]
    226a:	2000      	movs	r0, #0
    226c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    226e:	4b0f      	ldr	r3, [pc, #60]	; (22ac <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2270:	689b      	ldr	r3, [r3, #8]
    2272:	2057      	movs	r0, #87	; 0x57
    2274:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2276:	4b0e      	ldr	r3, [pc, #56]	; (22b0 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2278:	685b      	ldr	r3, [r3, #4]
    227a:	2000      	movs	r0, #0
    227c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    227e:	4b0d      	ldr	r3, [pc, #52]	; (22b4 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2280:	681b      	ldr	r3, [r3, #0]
    2282:	2100      	movs	r1, #0
    2284:	2000      	movs	r0, #0
    2286:	4798      	blx	r3
    }
}
    2288:	bf00      	nop
    228a:	bd08      	pop	{r3, pc}
    228c:	1fff8b48 	.word	0x1fff8b48
    2290:	00008d6c 	.word	0x00008d6c
    2294:	00008c80 	.word	0x00008c80
    2298:	00008cbc 	.word	0x00008cbc
    229c:	00008cc4 	.word	0x00008cc4
    22a0:	00008cec 	.word	0x00008cec
    22a4:	00008cf8 	.word	0x00008cf8
    22a8:	00008d30 	.word	0x00008d30
    22ac:	00008d7c 	.word	0x00008d7c
    22b0:	00008da8 	.word	0x00008da8
    22b4:	00008da4 	.word	0x00008da4

000022b8 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    22b8:	b500      	push	{lr}
    22ba:	b085      	sub	sp, #20
    22bc:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    22be:	9b01      	ldr	r3, [sp, #4]
    22c0:	7adb      	ldrb	r3, [r3, #11]
    22c2:	9303      	str	r3, [sp, #12]
    22c4:	e01f      	b.n	2306 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    22c6:	9b03      	ldr	r3, [sp, #12]
    22c8:	1e5a      	subs	r2, r3, #1
    22ca:	9b01      	ldr	r3, [sp, #4]
    22cc:	320d      	adds	r2, #13
    22ce:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    22d2:	495a      	ldr	r1, [pc, #360]	; (243c <Clock_Ip_ResetClockConfiguration+0x184>)
    22d4:	4613      	mov	r3, r2
    22d6:	00db      	lsls	r3, r3, #3
    22d8:	4413      	add	r3, r2
    22da:	440b      	add	r3, r1
    22dc:	3301      	adds	r3, #1
    22de:	781b      	ldrb	r3, [r3, #0]
    22e0:	461a      	mov	r2, r3
    22e2:	4b57      	ldr	r3, [pc, #348]	; (2440 <Clock_Ip_ResetClockConfiguration+0x188>)
    22e4:	5c9b      	ldrb	r3, [r3, r2]
    22e6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    22e8:	4a56      	ldr	r2, [pc, #344]	; (2444 <Clock_Ip_ResetClockConfiguration+0x18c>)
    22ea:	9b02      	ldr	r3, [sp, #8]
    22ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    22f0:	9a03      	ldr	r2, [sp, #12]
    22f2:	3a01      	subs	r2, #1
    22f4:	320d      	adds	r2, #13
    22f6:	00d2      	lsls	r2, r2, #3
    22f8:	9901      	ldr	r1, [sp, #4]
    22fa:	440a      	add	r2, r1
    22fc:	4610      	mov	r0, r2
    22fe:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2300:	9b03      	ldr	r3, [sp, #12]
    2302:	3b01      	subs	r3, #1
    2304:	9303      	str	r3, [sp, #12]
    2306:	9b03      	ldr	r3, [sp, #12]
    2308:	2b00      	cmp	r3, #0
    230a:	d1dc      	bne.n	22c6 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    230c:	9b01      	ldr	r3, [sp, #4]
    230e:	7b9b      	ldrb	r3, [r3, #14]
    2310:	9303      	str	r3, [sp, #12]
    2312:	e026      	b.n	2362 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2314:	9b03      	ldr	r3, [sp, #12]
    2316:	3b01      	subs	r3, #1
    2318:	9a01      	ldr	r2, [sp, #4]
    231a:	3324      	adds	r3, #36	; 0x24
    231c:	011b      	lsls	r3, r3, #4
    231e:	4413      	add	r3, r2
    2320:	3304      	adds	r3, #4
    2322:	681a      	ldr	r2, [r3, #0]
    2324:	4945      	ldr	r1, [pc, #276]	; (243c <Clock_Ip_ResetClockConfiguration+0x184>)
    2326:	4613      	mov	r3, r2
    2328:	00db      	lsls	r3, r3, #3
    232a:	4413      	add	r3, r2
    232c:	440b      	add	r3, r1
    232e:	3301      	adds	r3, #1
    2330:	781b      	ldrb	r3, [r3, #0]
    2332:	461a      	mov	r2, r3
    2334:	4b44      	ldr	r3, [pc, #272]	; (2448 <Clock_Ip_ResetClockConfiguration+0x190>)
    2336:	5c9b      	ldrb	r3, [r3, r2]
    2338:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    233a:	4944      	ldr	r1, [pc, #272]	; (244c <Clock_Ip_ResetClockConfiguration+0x194>)
    233c:	9a02      	ldr	r2, [sp, #8]
    233e:	4613      	mov	r3, r2
    2340:	005b      	lsls	r3, r3, #1
    2342:	4413      	add	r3, r2
    2344:	009b      	lsls	r3, r3, #2
    2346:	440b      	add	r3, r1
    2348:	681b      	ldr	r3, [r3, #0]
    234a:	9a03      	ldr	r2, [sp, #12]
    234c:	3a01      	subs	r2, #1
    234e:	3224      	adds	r2, #36	; 0x24
    2350:	0112      	lsls	r2, r2, #4
    2352:	9901      	ldr	r1, [sp, #4]
    2354:	440a      	add	r2, r1
    2356:	3204      	adds	r2, #4
    2358:	4610      	mov	r0, r2
    235a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    235c:	9b03      	ldr	r3, [sp, #12]
    235e:	3b01      	subs	r3, #1
    2360:	9303      	str	r3, [sp, #12]
    2362:	9b03      	ldr	r3, [sp, #12]
    2364:	2b00      	cmp	r3, #0
    2366:	d1d5      	bne.n	2314 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2368:	9b01      	ldr	r3, [sp, #4]
    236a:	7a9b      	ldrb	r3, [r3, #10]
    236c:	9303      	str	r3, [sp, #12]
    236e:	e02a      	b.n	23c6 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2370:	9b03      	ldr	r3, [sp, #12]
    2372:	1e5a      	subs	r2, r3, #1
    2374:	9901      	ldr	r1, [sp, #4]
    2376:	4613      	mov	r3, r2
    2378:	009b      	lsls	r3, r3, #2
    237a:	4413      	add	r3, r2
    237c:	00db      	lsls	r3, r3, #3
    237e:	440b      	add	r3, r1
    2380:	3340      	adds	r3, #64	; 0x40
    2382:	681a      	ldr	r2, [r3, #0]
    2384:	492d      	ldr	r1, [pc, #180]	; (243c <Clock_Ip_ResetClockConfiguration+0x184>)
    2386:	4613      	mov	r3, r2
    2388:	00db      	lsls	r3, r3, #3
    238a:	4413      	add	r3, r2
    238c:	440b      	add	r3, r1
    238e:	3301      	adds	r3, #1
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	461a      	mov	r2, r3
    2394:	4b2e      	ldr	r3, [pc, #184]	; (2450 <Clock_Ip_ResetClockConfiguration+0x198>)
    2396:	5c9b      	ldrb	r3, [r3, r2]
    2398:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    239a:	492e      	ldr	r1, [pc, #184]	; (2454 <Clock_Ip_ResetClockConfiguration+0x19c>)
    239c:	9a02      	ldr	r2, [sp, #8]
    239e:	4613      	mov	r3, r2
    23a0:	009b      	lsls	r3, r3, #2
    23a2:	4413      	add	r3, r2
    23a4:	009b      	lsls	r3, r3, #2
    23a6:	440b      	add	r3, r1
    23a8:	6819      	ldr	r1, [r3, #0]
    23aa:	9b03      	ldr	r3, [sp, #12]
    23ac:	1e5a      	subs	r2, r3, #1
    23ae:	4613      	mov	r3, r2
    23b0:	009b      	lsls	r3, r3, #2
    23b2:	4413      	add	r3, r2
    23b4:	00db      	lsls	r3, r3, #3
    23b6:	3340      	adds	r3, #64	; 0x40
    23b8:	9a01      	ldr	r2, [sp, #4]
    23ba:	4413      	add	r3, r2
    23bc:	4618      	mov	r0, r3
    23be:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    23c0:	9b03      	ldr	r3, [sp, #12]
    23c2:	3b01      	subs	r3, #1
    23c4:	9303      	str	r3, [sp, #12]
    23c6:	9b03      	ldr	r3, [sp, #12]
    23c8:	2b00      	cmp	r3, #0
    23ca:	d1d1      	bne.n	2370 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    23cc:	9b01      	ldr	r3, [sp, #4]
    23ce:	7a5b      	ldrb	r3, [r3, #9]
    23d0:	9303      	str	r3, [sp, #12]
    23d2:	e02b      	b.n	242c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    23d4:	9b03      	ldr	r3, [sp, #12]
    23d6:	1e5a      	subs	r2, r3, #1
    23d8:	9901      	ldr	r1, [sp, #4]
    23da:	4613      	mov	r3, r2
    23dc:	009b      	lsls	r3, r3, #2
    23de:	4413      	add	r3, r2
    23e0:	009b      	lsls	r3, r3, #2
    23e2:	440b      	add	r3, r1
    23e4:	332c      	adds	r3, #44	; 0x2c
    23e6:	681a      	ldr	r2, [r3, #0]
    23e8:	4914      	ldr	r1, [pc, #80]	; (243c <Clock_Ip_ResetClockConfiguration+0x184>)
    23ea:	4613      	mov	r3, r2
    23ec:	00db      	lsls	r3, r3, #3
    23ee:	4413      	add	r3, r2
    23f0:	440b      	add	r3, r1
    23f2:	3301      	adds	r3, #1
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	461a      	mov	r2, r3
    23f8:	4b17      	ldr	r3, [pc, #92]	; (2458 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    23fa:	5c9b      	ldrb	r3, [r3, r2]
    23fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    23fe:	4917      	ldr	r1, [pc, #92]	; (245c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2400:	9a02      	ldr	r2, [sp, #8]
    2402:	4613      	mov	r3, r2
    2404:	009b      	lsls	r3, r3, #2
    2406:	4413      	add	r3, r2
    2408:	009b      	lsls	r3, r3, #2
    240a:	440b      	add	r3, r1
    240c:	6819      	ldr	r1, [r3, #0]
    240e:	9b03      	ldr	r3, [sp, #12]
    2410:	1e5a      	subs	r2, r3, #1
    2412:	4613      	mov	r3, r2
    2414:	009b      	lsls	r3, r3, #2
    2416:	4413      	add	r3, r2
    2418:	009b      	lsls	r3, r3, #2
    241a:	3328      	adds	r3, #40	; 0x28
    241c:	9a01      	ldr	r2, [sp, #4]
    241e:	4413      	add	r3, r2
    2420:	3304      	adds	r3, #4
    2422:	4618      	mov	r0, r3
    2424:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2426:	9b03      	ldr	r3, [sp, #12]
    2428:	3b01      	subs	r3, #1
    242a:	9303      	str	r3, [sp, #12]
    242c:	9b03      	ldr	r3, [sp, #12]
    242e:	2b00      	cmp	r3, #0
    2430:	d1d0      	bne.n	23d4 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2432:	bf00      	nop
    2434:	bf00      	nop
    2436:	b005      	add	sp, #20
    2438:	f85d fb04 	ldr.w	pc, [sp], #4
    243c:	00008770 	.word	0x00008770
    2440:	00008740 	.word	0x00008740
    2444:	00008da8 	.word	0x00008da8
    2448:	00008720 	.word	0x00008720
    244c:	00008cec 	.word	0x00008cec
    2450:	00008730 	.word	0x00008730
    2454:	00008d7c 	.word	0x00008d7c
    2458:	000086f0 	.word	0x000086f0
    245c:	00008cc4 	.word	0x00008cc4

00002460 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2460:	b500      	push	{lr}
    2462:	b085      	sub	sp, #20
    2464:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2466:	2301      	movs	r3, #1
    2468:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    246a:	9801      	ldr	r0, [sp, #4]
    246c:	f000 f818 	bl	24a0 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2470:	4b0a      	ldr	r3, [pc, #40]	; (249c <Clock_Ip_Init+0x3c>)
    2472:	781b      	ldrb	r3, [r3, #0]
    2474:	2b00      	cmp	r3, #0
    2476:	d00a      	beq.n	248e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2478:	f000 fb74 	bl	2b64 <Clock_Ip_GetPllStatus>
    247c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    247e:	9b02      	ldr	r3, [sp, #8]
    2480:	2b00      	cmp	r3, #0
    2482:	d106      	bne.n	2492 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2484:	f000 fbf2 	bl	2c6c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2488:	2300      	movs	r3, #0
    248a:	9303      	str	r3, [sp, #12]
    248c:	e001      	b.n	2492 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    248e:	2300      	movs	r3, #0
    2490:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2492:	9b03      	ldr	r3, [sp, #12]
}
    2494:	4618      	mov	r0, r3
    2496:	b005      	add	sp, #20
    2498:	f85d fb04 	ldr.w	pc, [sp], #4
    249c:	1fff8b4c 	.word	0x1fff8b4c

000024a0 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    24a0:	b510      	push	{r4, lr}
    24a2:	b084      	sub	sp, #16
    24a4:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    24a6:	4a9f      	ldr	r2, [pc, #636]	; (2724 <Clock_Ip_InitClock+0x284>)
    24a8:	9b01      	ldr	r3, [sp, #4]
    24aa:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    24ac:	2101      	movs	r1, #1
    24ae:	9801      	ldr	r0, [sp, #4]
    24b0:	f003 fa90 	bl	59d4 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    24b4:	4b9b      	ldr	r3, [pc, #620]	; (2724 <Clock_Ip_InitClock+0x284>)
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d030      	beq.n	251e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    24bc:	2300      	movs	r3, #0
    24be:	9303      	str	r3, [sp, #12]
    24c0:	e027      	b.n	2512 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24c2:	9901      	ldr	r1, [sp, #4]
    24c4:	9a03      	ldr	r2, [sp, #12]
    24c6:	4613      	mov	r3, r2
    24c8:	009b      	lsls	r3, r3, #2
    24ca:	4413      	add	r3, r2
    24cc:	009b      	lsls	r3, r3, #2
    24ce:	440b      	add	r3, r1
    24d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24d4:	681a      	ldr	r2, [r3, #0]
    24d6:	4994      	ldr	r1, [pc, #592]	; (2728 <Clock_Ip_InitClock+0x288>)
    24d8:	4613      	mov	r3, r2
    24da:	00db      	lsls	r3, r3, #3
    24dc:	4413      	add	r3, r2
    24de:	440b      	add	r3, r1
    24e0:	3301      	adds	r3, #1
    24e2:	781b      	ldrb	r3, [r3, #0]
    24e4:	461a      	mov	r2, r3
    24e6:	4b91      	ldr	r3, [pc, #580]	; (272c <Clock_Ip_InitClock+0x28c>)
    24e8:	5c9b      	ldrb	r3, [r3, r2]
    24ea:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    24ec:	4a90      	ldr	r2, [pc, #576]	; (2730 <Clock_Ip_InitClock+0x290>)
    24ee:	9b02      	ldr	r3, [sp, #8]
    24f0:	011b      	lsls	r3, r3, #4
    24f2:	4413      	add	r3, r2
    24f4:	6819      	ldr	r1, [r3, #0]
    24f6:	9a03      	ldr	r2, [sp, #12]
    24f8:	4613      	mov	r3, r2
    24fa:	009b      	lsls	r3, r3, #2
    24fc:	4413      	add	r3, r2
    24fe:	009b      	lsls	r3, r3, #2
    2500:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2504:	9a01      	ldr	r2, [sp, #4]
    2506:	4413      	add	r3, r2
    2508:	4618      	mov	r0, r3
    250a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    250c:	9b03      	ldr	r3, [sp, #12]
    250e:	3301      	adds	r3, #1
    2510:	9303      	str	r3, [sp, #12]
    2512:	9b01      	ldr	r3, [sp, #4]
    2514:	7c9b      	ldrb	r3, [r3, #18]
    2516:	461a      	mov	r2, r3
    2518:	9b03      	ldr	r3, [sp, #12]
    251a:	4293      	cmp	r3, r2
    251c:	d3d1      	bcc.n	24c2 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    251e:	9801      	ldr	r0, [sp, #4]
    2520:	f7ff feca 	bl	22b8 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2524:	2300      	movs	r3, #0
    2526:	9303      	str	r3, [sp, #12]
    2528:	e029      	b.n	257e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    252a:	9901      	ldr	r1, [sp, #4]
    252c:	9a03      	ldr	r2, [sp, #12]
    252e:	4613      	mov	r3, r2
    2530:	005b      	lsls	r3, r3, #1
    2532:	4413      	add	r3, r2
    2534:	009b      	lsls	r3, r3, #2
    2536:	440b      	add	r3, r1
    2538:	3314      	adds	r3, #20
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	497a      	ldr	r1, [pc, #488]	; (2728 <Clock_Ip_InitClock+0x288>)
    253e:	4613      	mov	r3, r2
    2540:	00db      	lsls	r3, r3, #3
    2542:	4413      	add	r3, r2
    2544:	440b      	add	r3, r1
    2546:	3301      	adds	r3, #1
    2548:	781b      	ldrb	r3, [r3, #0]
    254a:	461a      	mov	r2, r3
    254c:	4b79      	ldr	r3, [pc, #484]	; (2734 <Clock_Ip_InitClock+0x294>)
    254e:	5c9b      	ldrb	r3, [r3, r2]
    2550:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2552:	4979      	ldr	r1, [pc, #484]	; (2738 <Clock_Ip_InitClock+0x298>)
    2554:	9a02      	ldr	r2, [sp, #8]
    2556:	4613      	mov	r3, r2
    2558:	005b      	lsls	r3, r3, #1
    255a:	4413      	add	r3, r2
    255c:	009b      	lsls	r3, r3, #2
    255e:	440b      	add	r3, r1
    2560:	6819      	ldr	r1, [r3, #0]
    2562:	9a03      	ldr	r2, [sp, #12]
    2564:	4613      	mov	r3, r2
    2566:	005b      	lsls	r3, r3, #1
    2568:	4413      	add	r3, r2
    256a:	009b      	lsls	r3, r3, #2
    256c:	3310      	adds	r3, #16
    256e:	9a01      	ldr	r2, [sp, #4]
    2570:	4413      	add	r3, r2
    2572:	3304      	adds	r3, #4
    2574:	4618      	mov	r0, r3
    2576:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2578:	9b03      	ldr	r3, [sp, #12]
    257a:	3301      	adds	r3, #1
    257c:	9303      	str	r3, [sp, #12]
    257e:	9b01      	ldr	r3, [sp, #4]
    2580:	7a1b      	ldrb	r3, [r3, #8]
    2582:	461a      	mov	r2, r3
    2584:	9b03      	ldr	r3, [sp, #12]
    2586:	4293      	cmp	r3, r2
    2588:	d3cf      	bcc.n	252a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    258a:	2300      	movs	r3, #0
    258c:	9303      	str	r3, [sp, #12]
    258e:	e02a      	b.n	25e6 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2590:	9901      	ldr	r1, [sp, #4]
    2592:	9a03      	ldr	r2, [sp, #12]
    2594:	4613      	mov	r3, r2
    2596:	009b      	lsls	r3, r3, #2
    2598:	4413      	add	r3, r2
    259a:	009b      	lsls	r3, r3, #2
    259c:	440b      	add	r3, r1
    259e:	332c      	adds	r3, #44	; 0x2c
    25a0:	681a      	ldr	r2, [r3, #0]
    25a2:	4961      	ldr	r1, [pc, #388]	; (2728 <Clock_Ip_InitClock+0x288>)
    25a4:	4613      	mov	r3, r2
    25a6:	00db      	lsls	r3, r3, #3
    25a8:	4413      	add	r3, r2
    25aa:	440b      	add	r3, r1
    25ac:	3301      	adds	r3, #1
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	461a      	mov	r2, r3
    25b2:	4b62      	ldr	r3, [pc, #392]	; (273c <Clock_Ip_InitClock+0x29c>)
    25b4:	5c9b      	ldrb	r3, [r3, r2]
    25b6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    25b8:	4961      	ldr	r1, [pc, #388]	; (2740 <Clock_Ip_InitClock+0x2a0>)
    25ba:	9a02      	ldr	r2, [sp, #8]
    25bc:	4613      	mov	r3, r2
    25be:	009b      	lsls	r3, r3, #2
    25c0:	4413      	add	r3, r2
    25c2:	009b      	lsls	r3, r3, #2
    25c4:	440b      	add	r3, r1
    25c6:	3304      	adds	r3, #4
    25c8:	6819      	ldr	r1, [r3, #0]
    25ca:	9a03      	ldr	r2, [sp, #12]
    25cc:	4613      	mov	r3, r2
    25ce:	009b      	lsls	r3, r3, #2
    25d0:	4413      	add	r3, r2
    25d2:	009b      	lsls	r3, r3, #2
    25d4:	3328      	adds	r3, #40	; 0x28
    25d6:	9a01      	ldr	r2, [sp, #4]
    25d8:	4413      	add	r3, r2
    25da:	3304      	adds	r3, #4
    25dc:	4618      	mov	r0, r3
    25de:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    25e0:	9b03      	ldr	r3, [sp, #12]
    25e2:	3301      	adds	r3, #1
    25e4:	9303      	str	r3, [sp, #12]
    25e6:	9b01      	ldr	r3, [sp, #4]
    25e8:	7a5b      	ldrb	r3, [r3, #9]
    25ea:	461a      	mov	r2, r3
    25ec:	9b03      	ldr	r3, [sp, #12]
    25ee:	4293      	cmp	r3, r2
    25f0:	d3ce      	bcc.n	2590 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    25f2:	9801      	ldr	r0, [sp, #4]
    25f4:	f7ff fdb0 	bl	2158 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    25f8:	2300      	movs	r3, #0
    25fa:	9303      	str	r3, [sp, #12]
    25fc:	e028      	b.n	2650 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    25fe:	9901      	ldr	r1, [sp, #4]
    2600:	9a03      	ldr	r2, [sp, #12]
    2602:	4613      	mov	r3, r2
    2604:	009b      	lsls	r3, r3, #2
    2606:	4413      	add	r3, r2
    2608:	009b      	lsls	r3, r3, #2
    260a:	440b      	add	r3, r1
    260c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2610:	681a      	ldr	r2, [r3, #0]
    2612:	4945      	ldr	r1, [pc, #276]	; (2728 <Clock_Ip_InitClock+0x288>)
    2614:	4613      	mov	r3, r2
    2616:	00db      	lsls	r3, r3, #3
    2618:	4413      	add	r3, r2
    261a:	440b      	add	r3, r1
    261c:	3301      	adds	r3, #1
    261e:	781b      	ldrb	r3, [r3, #0]
    2620:	461a      	mov	r2, r3
    2622:	4b48      	ldr	r3, [pc, #288]	; (2744 <Clock_Ip_InitClock+0x2a4>)
    2624:	5c9b      	ldrb	r3, [r3, r2]
    2626:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2628:	4a47      	ldr	r2, [pc, #284]	; (2748 <Clock_Ip_InitClock+0x2a8>)
    262a:	9b02      	ldr	r3, [sp, #8]
    262c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2630:	9a03      	ldr	r2, [sp, #12]
    2632:	4613      	mov	r3, r2
    2634:	009b      	lsls	r3, r3, #2
    2636:	4413      	add	r3, r2
    2638:	009b      	lsls	r3, r3, #2
    263a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    263e:	9a01      	ldr	r2, [sp, #4]
    2640:	4413      	add	r3, r2
    2642:	3304      	adds	r3, #4
    2644:	9903      	ldr	r1, [sp, #12]
    2646:	4618      	mov	r0, r3
    2648:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    264a:	9b03      	ldr	r3, [sp, #12]
    264c:	3301      	adds	r3, #1
    264e:	9303      	str	r3, [sp, #12]
    2650:	9b01      	ldr	r3, [sp, #4]
    2652:	7c5b      	ldrb	r3, [r3, #17]
    2654:	461a      	mov	r2, r3
    2656:	9b03      	ldr	r3, [sp, #12]
    2658:	4293      	cmp	r3, r2
    265a:	d3d0      	bcc.n	25fe <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    265c:	2300      	movs	r3, #0
    265e:	9303      	str	r3, [sp, #12]
    2660:	e026      	b.n	26b0 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2662:	9901      	ldr	r1, [sp, #4]
    2664:	9a03      	ldr	r2, [sp, #12]
    2666:	4613      	mov	r3, r2
    2668:	005b      	lsls	r3, r3, #1
    266a:	4413      	add	r3, r2
    266c:	009b      	lsls	r3, r3, #2
    266e:	440b      	add	r3, r1
    2670:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2674:	681a      	ldr	r2, [r3, #0]
    2676:	492c      	ldr	r1, [pc, #176]	; (2728 <Clock_Ip_InitClock+0x288>)
    2678:	4613      	mov	r3, r2
    267a:	00db      	lsls	r3, r3, #3
    267c:	4413      	add	r3, r2
    267e:	440b      	add	r3, r1
    2680:	3301      	adds	r3, #1
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	461a      	mov	r2, r3
    2686:	4b31      	ldr	r3, [pc, #196]	; (274c <Clock_Ip_InitClock+0x2ac>)
    2688:	5c9b      	ldrb	r3, [r3, r2]
    268a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    268c:	4a30      	ldr	r2, [pc, #192]	; (2750 <Clock_Ip_InitClock+0x2b0>)
    268e:	9b02      	ldr	r3, [sp, #8]
    2690:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2694:	9a03      	ldr	r2, [sp, #12]
    2696:	4613      	mov	r3, r2
    2698:	005b      	lsls	r3, r3, #1
    269a:	4413      	add	r3, r2
    269c:	009b      	lsls	r3, r3, #2
    269e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    26a2:	9a01      	ldr	r2, [sp, #4]
    26a4:	4413      	add	r3, r2
    26a6:	4618      	mov	r0, r3
    26a8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    26aa:	9b03      	ldr	r3, [sp, #12]
    26ac:	3301      	adds	r3, #1
    26ae:	9303      	str	r3, [sp, #12]
    26b0:	9b01      	ldr	r3, [sp, #4]
    26b2:	7b5b      	ldrb	r3, [r3, #13]
    26b4:	461a      	mov	r2, r3
    26b6:	9b03      	ldr	r3, [sp, #12]
    26b8:	4293      	cmp	r3, r2
    26ba:	d3d2      	bcc.n	2662 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    26bc:	2300      	movs	r3, #0
    26be:	9303      	str	r3, [sp, #12]
    26c0:	e026      	b.n	2710 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    26c2:	9901      	ldr	r1, [sp, #4]
    26c4:	9a03      	ldr	r2, [sp, #12]
    26c6:	4613      	mov	r3, r2
    26c8:	005b      	lsls	r3, r3, #1
    26ca:	4413      	add	r3, r2
    26cc:	009b      	lsls	r3, r3, #2
    26ce:	440b      	add	r3, r1
    26d0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    26d4:	681a      	ldr	r2, [r3, #0]
    26d6:	4914      	ldr	r1, [pc, #80]	; (2728 <Clock_Ip_InitClock+0x288>)
    26d8:	4613      	mov	r3, r2
    26da:	00db      	lsls	r3, r3, #3
    26dc:	4413      	add	r3, r2
    26de:	440b      	add	r3, r1
    26e0:	3301      	adds	r3, #1
    26e2:	781b      	ldrb	r3, [r3, #0]
    26e4:	461a      	mov	r2, r3
    26e6:	4b1b      	ldr	r3, [pc, #108]	; (2754 <Clock_Ip_InitClock+0x2b4>)
    26e8:	5c9b      	ldrb	r3, [r3, r2]
    26ea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    26ec:	4a1a      	ldr	r2, [pc, #104]	; (2758 <Clock_Ip_InitClock+0x2b8>)
    26ee:	9b02      	ldr	r3, [sp, #8]
    26f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    26f4:	9a03      	ldr	r2, [sp, #12]
    26f6:	4613      	mov	r3, r2
    26f8:	005b      	lsls	r3, r3, #1
    26fa:	4413      	add	r3, r2
    26fc:	009b      	lsls	r3, r3, #2
    26fe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2702:	9a01      	ldr	r2, [sp, #4]
    2704:	4413      	add	r3, r2
    2706:	4618      	mov	r0, r3
    2708:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    270a:	9b03      	ldr	r3, [sp, #12]
    270c:	3301      	adds	r3, #1
    270e:	9303      	str	r3, [sp, #12]
    2710:	9b01      	ldr	r3, [sp, #4]
    2712:	7b1b      	ldrb	r3, [r3, #12]
    2714:	461a      	mov	r2, r3
    2716:	9b03      	ldr	r3, [sp, #12]
    2718:	4293      	cmp	r3, r2
    271a:	d3d2      	bcc.n	26c2 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    271c:	2300      	movs	r3, #0
    271e:	9303      	str	r3, [sp, #12]
    2720:	e044      	b.n	27ac <Clock_Ip_InitClock+0x30c>
    2722:	bf00      	nop
    2724:	1fff8b44 	.word	0x1fff8b44
    2728:	00008770 	.word	0x00008770
    272c:	00008760 	.word	0x00008760
    2730:	00008d6c 	.word	0x00008d6c
    2734:	00008700 	.word	0x00008700
    2738:	00008d30 	.word	0x00008d30
    273c:	000086f0 	.word	0x000086f0
    2740:	00008cc4 	.word	0x00008cc4
    2744:	00008750 	.word	0x00008750
    2748:	00008da4 	.word	0x00008da4
    274c:	000086e0 	.word	0x000086e0
    2750:	00008cbc 	.word	0x00008cbc
    2754:	000086d0 	.word	0x000086d0
    2758:	00008c80 	.word	0x00008c80
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    275c:	9901      	ldr	r1, [sp, #4]
    275e:	9a03      	ldr	r2, [sp, #12]
    2760:	4613      	mov	r3, r2
    2762:	005b      	lsls	r3, r3, #1
    2764:	4413      	add	r3, r2
    2766:	009b      	lsls	r3, r3, #2
    2768:	440b      	add	r3, r1
    276a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    276e:	681a      	ldr	r2, [r3, #0]
    2770:	49ac      	ldr	r1, [pc, #688]	; (2a24 <Clock_Ip_InitClock+0x584>)
    2772:	4613      	mov	r3, r2
    2774:	00db      	lsls	r3, r3, #3
    2776:	4413      	add	r3, r2
    2778:	440b      	add	r3, r1
    277a:	3301      	adds	r3, #1
    277c:	781b      	ldrb	r3, [r3, #0]
    277e:	461a      	mov	r2, r3
    2780:	4ba9      	ldr	r3, [pc, #676]	; (2a28 <Clock_Ip_InitClock+0x588>)
    2782:	5c9b      	ldrb	r3, [r3, r2]
    2784:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2786:	4aa9      	ldr	r2, [pc, #676]	; (2a2c <Clock_Ip_InitClock+0x58c>)
    2788:	9b02      	ldr	r3, [sp, #8]
    278a:	00db      	lsls	r3, r3, #3
    278c:	4413      	add	r3, r2
    278e:	6859      	ldr	r1, [r3, #4]
    2790:	9a03      	ldr	r2, [sp, #12]
    2792:	4613      	mov	r3, r2
    2794:	005b      	lsls	r3, r3, #1
    2796:	4413      	add	r3, r2
    2798:	009b      	lsls	r3, r3, #2
    279a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    279e:	9a01      	ldr	r2, [sp, #4]
    27a0:	4413      	add	r3, r2
    27a2:	4618      	mov	r0, r3
    27a4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    27a6:	9b03      	ldr	r3, [sp, #12]
    27a8:	3301      	adds	r3, #1
    27aa:	9303      	str	r3, [sp, #12]
    27ac:	9b01      	ldr	r3, [sp, #4]
    27ae:	7b5b      	ldrb	r3, [r3, #13]
    27b0:	461a      	mov	r2, r3
    27b2:	9b03      	ldr	r3, [sp, #12]
    27b4:	4293      	cmp	r3, r2
    27b6:	d3d1      	bcc.n	275c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    27b8:	2300      	movs	r3, #0
    27ba:	9303      	str	r3, [sp, #12]
    27bc:	e029      	b.n	2812 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    27be:	9901      	ldr	r1, [sp, #4]
    27c0:	9a03      	ldr	r2, [sp, #12]
    27c2:	4613      	mov	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	4413      	add	r3, r2
    27c8:	00db      	lsls	r3, r3, #3
    27ca:	440b      	add	r3, r1
    27cc:	3340      	adds	r3, #64	; 0x40
    27ce:	681a      	ldr	r2, [r3, #0]
    27d0:	4994      	ldr	r1, [pc, #592]	; (2a24 <Clock_Ip_InitClock+0x584>)
    27d2:	4613      	mov	r3, r2
    27d4:	00db      	lsls	r3, r3, #3
    27d6:	4413      	add	r3, r2
    27d8:	440b      	add	r3, r1
    27da:	3301      	adds	r3, #1
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	461a      	mov	r2, r3
    27e0:	4b93      	ldr	r3, [pc, #588]	; (2a30 <Clock_Ip_InitClock+0x590>)
    27e2:	5c9b      	ldrb	r3, [r3, r2]
    27e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    27e6:	4993      	ldr	r1, [pc, #588]	; (2a34 <Clock_Ip_InitClock+0x594>)
    27e8:	9a02      	ldr	r2, [sp, #8]
    27ea:	4613      	mov	r3, r2
    27ec:	009b      	lsls	r3, r3, #2
    27ee:	4413      	add	r3, r2
    27f0:	009b      	lsls	r3, r3, #2
    27f2:	440b      	add	r3, r1
    27f4:	3304      	adds	r3, #4
    27f6:	6819      	ldr	r1, [r3, #0]
    27f8:	9a03      	ldr	r2, [sp, #12]
    27fa:	4613      	mov	r3, r2
    27fc:	009b      	lsls	r3, r3, #2
    27fe:	4413      	add	r3, r2
    2800:	00db      	lsls	r3, r3, #3
    2802:	3340      	adds	r3, #64	; 0x40
    2804:	9a01      	ldr	r2, [sp, #4]
    2806:	4413      	add	r3, r2
    2808:	4618      	mov	r0, r3
    280a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    280c:	9b03      	ldr	r3, [sp, #12]
    280e:	3301      	adds	r3, #1
    2810:	9303      	str	r3, [sp, #12]
    2812:	9b01      	ldr	r3, [sp, #4]
    2814:	7a9b      	ldrb	r3, [r3, #10]
    2816:	461a      	mov	r2, r3
    2818:	9b03      	ldr	r3, [sp, #12]
    281a:	4293      	cmp	r3, r2
    281c:	d3cf      	bcc.n	27be <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    281e:	2300      	movs	r3, #0
    2820:	9303      	str	r3, [sp, #12]
    2822:	e029      	b.n	2878 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2824:	9901      	ldr	r1, [sp, #4]
    2826:	9a03      	ldr	r2, [sp, #12]
    2828:	4613      	mov	r3, r2
    282a:	009b      	lsls	r3, r3, #2
    282c:	4413      	add	r3, r2
    282e:	009b      	lsls	r3, r3, #2
    2830:	440b      	add	r3, r1
    2832:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2836:	681a      	ldr	r2, [r3, #0]
    2838:	497a      	ldr	r1, [pc, #488]	; (2a24 <Clock_Ip_InitClock+0x584>)
    283a:	4613      	mov	r3, r2
    283c:	00db      	lsls	r3, r3, #3
    283e:	4413      	add	r3, r2
    2840:	440b      	add	r3, r1
    2842:	3301      	adds	r3, #1
    2844:	781b      	ldrb	r3, [r3, #0]
    2846:	461a      	mov	r2, r3
    2848:	4b7b      	ldr	r3, [pc, #492]	; (2a38 <Clock_Ip_InitClock+0x598>)
    284a:	5c9b      	ldrb	r3, [r3, r2]
    284c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    284e:	4a7b      	ldr	r2, [pc, #492]	; (2a3c <Clock_Ip_InitClock+0x59c>)
    2850:	9b02      	ldr	r3, [sp, #8]
    2852:	011b      	lsls	r3, r3, #4
    2854:	4413      	add	r3, r2
    2856:	3304      	adds	r3, #4
    2858:	681c      	ldr	r4, [r3, #0]
    285a:	9a03      	ldr	r2, [sp, #12]
    285c:	4613      	mov	r3, r2
    285e:	009b      	lsls	r3, r3, #2
    2860:	4413      	add	r3, r2
    2862:	009b      	lsls	r3, r3, #2
    2864:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2868:	9a01      	ldr	r2, [sp, #4]
    286a:	4413      	add	r3, r2
    286c:	9903      	ldr	r1, [sp, #12]
    286e:	4618      	mov	r0, r3
    2870:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2872:	9b03      	ldr	r3, [sp, #12]
    2874:	3301      	adds	r3, #1
    2876:	9303      	str	r3, [sp, #12]
    2878:	9b01      	ldr	r3, [sp, #4]
    287a:	7c9b      	ldrb	r3, [r3, #18]
    287c:	461a      	mov	r2, r3
    287e:	9b03      	ldr	r3, [sp, #12]
    2880:	4293      	cmp	r3, r2
    2882:	d3cf      	bcc.n	2824 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2884:	2300      	movs	r3, #0
    2886:	9303      	str	r3, [sp, #12]
    2888:	e02a      	b.n	28e0 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    288a:	9901      	ldr	r1, [sp, #4]
    288c:	9a03      	ldr	r2, [sp, #12]
    288e:	4613      	mov	r3, r2
    2890:	009b      	lsls	r3, r3, #2
    2892:	4413      	add	r3, r2
    2894:	009b      	lsls	r3, r3, #2
    2896:	440b      	add	r3, r1
    2898:	332c      	adds	r3, #44	; 0x2c
    289a:	681a      	ldr	r2, [r3, #0]
    289c:	4961      	ldr	r1, [pc, #388]	; (2a24 <Clock_Ip_InitClock+0x584>)
    289e:	4613      	mov	r3, r2
    28a0:	00db      	lsls	r3, r3, #3
    28a2:	4413      	add	r3, r2
    28a4:	440b      	add	r3, r1
    28a6:	3301      	adds	r3, #1
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	461a      	mov	r2, r3
    28ac:	4b64      	ldr	r3, [pc, #400]	; (2a40 <Clock_Ip_InitClock+0x5a0>)
    28ae:	5c9b      	ldrb	r3, [r3, r2]
    28b0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    28b2:	4964      	ldr	r1, [pc, #400]	; (2a44 <Clock_Ip_InitClock+0x5a4>)
    28b4:	9a02      	ldr	r2, [sp, #8]
    28b6:	4613      	mov	r3, r2
    28b8:	009b      	lsls	r3, r3, #2
    28ba:	4413      	add	r3, r2
    28bc:	009b      	lsls	r3, r3, #2
    28be:	440b      	add	r3, r1
    28c0:	3308      	adds	r3, #8
    28c2:	6819      	ldr	r1, [r3, #0]
    28c4:	9a03      	ldr	r2, [sp, #12]
    28c6:	4613      	mov	r3, r2
    28c8:	009b      	lsls	r3, r3, #2
    28ca:	4413      	add	r3, r2
    28cc:	009b      	lsls	r3, r3, #2
    28ce:	3328      	adds	r3, #40	; 0x28
    28d0:	9a01      	ldr	r2, [sp, #4]
    28d2:	4413      	add	r3, r2
    28d4:	3304      	adds	r3, #4
    28d6:	4618      	mov	r0, r3
    28d8:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    28da:	9b03      	ldr	r3, [sp, #12]
    28dc:	3301      	adds	r3, #1
    28de:	9303      	str	r3, [sp, #12]
    28e0:	9b01      	ldr	r3, [sp, #4]
    28e2:	7a5b      	ldrb	r3, [r3, #9]
    28e4:	461a      	mov	r2, r3
    28e6:	9b03      	ldr	r3, [sp, #12]
    28e8:	4293      	cmp	r3, r2
    28ea:	d3ce      	bcc.n	288a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    28ec:	2300      	movs	r3, #0
    28ee:	9303      	str	r3, [sp, #12]
    28f0:	e029      	b.n	2946 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    28f2:	9901      	ldr	r1, [sp, #4]
    28f4:	9a03      	ldr	r2, [sp, #12]
    28f6:	4613      	mov	r3, r2
    28f8:	009b      	lsls	r3, r3, #2
    28fa:	4413      	add	r3, r2
    28fc:	00db      	lsls	r3, r3, #3
    28fe:	440b      	add	r3, r1
    2900:	3340      	adds	r3, #64	; 0x40
    2902:	681a      	ldr	r2, [r3, #0]
    2904:	4947      	ldr	r1, [pc, #284]	; (2a24 <Clock_Ip_InitClock+0x584>)
    2906:	4613      	mov	r3, r2
    2908:	00db      	lsls	r3, r3, #3
    290a:	4413      	add	r3, r2
    290c:	440b      	add	r3, r1
    290e:	3301      	adds	r3, #1
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	461a      	mov	r2, r3
    2914:	4b46      	ldr	r3, [pc, #280]	; (2a30 <Clock_Ip_InitClock+0x590>)
    2916:	5c9b      	ldrb	r3, [r3, r2]
    2918:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    291a:	4946      	ldr	r1, [pc, #280]	; (2a34 <Clock_Ip_InitClock+0x594>)
    291c:	9a02      	ldr	r2, [sp, #8]
    291e:	4613      	mov	r3, r2
    2920:	009b      	lsls	r3, r3, #2
    2922:	4413      	add	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	440b      	add	r3, r1
    2928:	330c      	adds	r3, #12
    292a:	6819      	ldr	r1, [r3, #0]
    292c:	9a03      	ldr	r2, [sp, #12]
    292e:	4613      	mov	r3, r2
    2930:	009b      	lsls	r3, r3, #2
    2932:	4413      	add	r3, r2
    2934:	00db      	lsls	r3, r3, #3
    2936:	3340      	adds	r3, #64	; 0x40
    2938:	9a01      	ldr	r2, [sp, #4]
    293a:	4413      	add	r3, r2
    293c:	4618      	mov	r0, r3
    293e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2940:	9b03      	ldr	r3, [sp, #12]
    2942:	3301      	adds	r3, #1
    2944:	9303      	str	r3, [sp, #12]
    2946:	9b01      	ldr	r3, [sp, #4]
    2948:	7a9b      	ldrb	r3, [r3, #10]
    294a:	461a      	mov	r2, r3
    294c:	9b03      	ldr	r3, [sp, #12]
    294e:	4293      	cmp	r3, r2
    2950:	d3cf      	bcc.n	28f2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2952:	2300      	movs	r3, #0
    2954:	9303      	str	r3, [sp, #12]
    2956:	e025      	b.n	29a4 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2958:	9a01      	ldr	r2, [sp, #4]
    295a:	9b03      	ldr	r3, [sp, #12]
    295c:	3324      	adds	r3, #36	; 0x24
    295e:	011b      	lsls	r3, r3, #4
    2960:	4413      	add	r3, r2
    2962:	3304      	adds	r3, #4
    2964:	681a      	ldr	r2, [r3, #0]
    2966:	492f      	ldr	r1, [pc, #188]	; (2a24 <Clock_Ip_InitClock+0x584>)
    2968:	4613      	mov	r3, r2
    296a:	00db      	lsls	r3, r3, #3
    296c:	4413      	add	r3, r2
    296e:	440b      	add	r3, r1
    2970:	3301      	adds	r3, #1
    2972:	781b      	ldrb	r3, [r3, #0]
    2974:	461a      	mov	r2, r3
    2976:	4b34      	ldr	r3, [pc, #208]	; (2a48 <Clock_Ip_InitClock+0x5a8>)
    2978:	5c9b      	ldrb	r3, [r3, r2]
    297a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    297c:	4933      	ldr	r1, [pc, #204]	; (2a4c <Clock_Ip_InitClock+0x5ac>)
    297e:	9a02      	ldr	r2, [sp, #8]
    2980:	4613      	mov	r3, r2
    2982:	005b      	lsls	r3, r3, #1
    2984:	4413      	add	r3, r2
    2986:	009b      	lsls	r3, r3, #2
    2988:	440b      	add	r3, r1
    298a:	3304      	adds	r3, #4
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	9a03      	ldr	r2, [sp, #12]
    2990:	3224      	adds	r2, #36	; 0x24
    2992:	0112      	lsls	r2, r2, #4
    2994:	9901      	ldr	r1, [sp, #4]
    2996:	440a      	add	r2, r1
    2998:	3204      	adds	r2, #4
    299a:	4610      	mov	r0, r2
    299c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    299e:	9b03      	ldr	r3, [sp, #12]
    29a0:	3301      	adds	r3, #1
    29a2:	9303      	str	r3, [sp, #12]
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	7b9b      	ldrb	r3, [r3, #14]
    29a8:	461a      	mov	r2, r3
    29aa:	9b03      	ldr	r3, [sp, #12]
    29ac:	4293      	cmp	r3, r2
    29ae:	d3d3      	bcc.n	2958 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    29b0:	4b27      	ldr	r3, [pc, #156]	; (2a50 <Clock_Ip_InitClock+0x5b0>)
    29b2:	2200      	movs	r2, #0
    29b4:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    29b6:	4b26      	ldr	r3, [pc, #152]	; (2a50 <Clock_Ip_InitClock+0x5b0>)
    29b8:	2200      	movs	r2, #0
    29ba:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    29bc:	4b24      	ldr	r3, [pc, #144]	; (2a50 <Clock_Ip_InitClock+0x5b0>)
    29be:	2201      	movs	r2, #1
    29c0:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    29c2:	4b23      	ldr	r3, [pc, #140]	; (2a50 <Clock_Ip_InitClock+0x5b0>)
    29c4:	2200      	movs	r2, #0
    29c6:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    29c8:	f000 fa9c 	bl	2f04 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    29cc:	2300      	movs	r3, #0
    29ce:	9303      	str	r3, [sp, #12]
    29d0:	e04c      	b.n	2a6c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    29d2:	9a01      	ldr	r2, [sp, #4]
    29d4:	9b03      	ldr	r3, [sp, #12]
    29d6:	330d      	adds	r3, #13
    29d8:	00db      	lsls	r3, r3, #3
    29da:	4413      	add	r3, r2
    29dc:	685b      	ldr	r3, [r3, #4]
    29de:	4a1d      	ldr	r2, [pc, #116]	; (2a54 <Clock_Ip_InitClock+0x5b4>)
    29e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    29e4:	2b03      	cmp	r3, #3
    29e6:	d03b      	beq.n	2a60 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	9a03      	ldr	r2, [sp, #12]
    29ec:	320d      	adds	r2, #13
    29ee:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    29f2:	490c      	ldr	r1, [pc, #48]	; (2a24 <Clock_Ip_InitClock+0x584>)
    29f4:	4613      	mov	r3, r2
    29f6:	00db      	lsls	r3, r3, #3
    29f8:	4413      	add	r3, r2
    29fa:	440b      	add	r3, r1
    29fc:	3301      	adds	r3, #1
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	461a      	mov	r2, r3
    2a02:	4b15      	ldr	r3, [pc, #84]	; (2a58 <Clock_Ip_InitClock+0x5b8>)
    2a04:	5c9b      	ldrb	r3, [r3, r2]
    2a06:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2a08:	4a14      	ldr	r2, [pc, #80]	; (2a5c <Clock_Ip_InitClock+0x5bc>)
    2a0a:	9b02      	ldr	r3, [sp, #8]
    2a0c:	00db      	lsls	r3, r3, #3
    2a0e:	4413      	add	r3, r2
    2a10:	685b      	ldr	r3, [r3, #4]
    2a12:	9a03      	ldr	r2, [sp, #12]
    2a14:	320d      	adds	r2, #13
    2a16:	00d2      	lsls	r2, r2, #3
    2a18:	9901      	ldr	r1, [sp, #4]
    2a1a:	440a      	add	r2, r1
    2a1c:	4610      	mov	r0, r2
    2a1e:	4798      	blx	r3
    2a20:	e021      	b.n	2a66 <Clock_Ip_InitClock+0x5c6>
    2a22:	bf00      	nop
    2a24:	00008770 	.word	0x00008770
    2a28:	000086e0 	.word	0x000086e0
    2a2c:	00008cbc 	.word	0x00008cbc
    2a30:	00008730 	.word	0x00008730
    2a34:	00008d7c 	.word	0x00008d7c
    2a38:	00008760 	.word	0x00008760
    2a3c:	00008d6c 	.word	0x00008d6c
    2a40:	000086f0 	.word	0x000086f0
    2a44:	00008cc4 	.word	0x00008cc4
    2a48:	00008720 	.word	0x00008720
    2a4c:	00008cec 	.word	0x00008cec
    2a50:	1fff8b4c 	.word	0x1fff8b4c
    2a54:	00008bbc 	.word	0x00008bbc
    2a58:	00008740 	.word	0x00008740
    2a5c:	00008da8 	.word	0x00008da8
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2a60:	4b3a      	ldr	r3, [pc, #232]	; (2b4c <Clock_Ip_InitClock+0x6ac>)
    2a62:	2201      	movs	r2, #1
    2a64:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2a66:	9b03      	ldr	r3, [sp, #12]
    2a68:	3301      	adds	r3, #1
    2a6a:	9303      	str	r3, [sp, #12]
    2a6c:	9b01      	ldr	r3, [sp, #4]
    2a6e:	7adb      	ldrb	r3, [r3, #11]
    2a70:	461a      	mov	r2, r3
    2a72:	9b03      	ldr	r3, [sp, #12]
    2a74:	4293      	cmp	r3, r2
    2a76:	d3ac      	bcc.n	29d2 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2a78:	4b34      	ldr	r3, [pc, #208]	; (2b4c <Clock_Ip_InitClock+0x6ac>)
    2a7a:	781b      	ldrb	r3, [r3, #0]
    2a7c:	f083 0301 	eor.w	r3, r3, #1
    2a80:	b2db      	uxtb	r3, r3
    2a82:	2b00      	cmp	r3, #0
    2a84:	d05e      	beq.n	2b44 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2a86:	2300      	movs	r3, #0
    2a88:	9303      	str	r3, [sp, #12]
    2a8a:	e01f      	b.n	2acc <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2a8c:	9a01      	ldr	r2, [sp, #4]
    2a8e:	9b03      	ldr	r3, [sp, #12]
    2a90:	334e      	adds	r3, #78	; 0x4e
    2a92:	00db      	lsls	r3, r3, #3
    2a94:	4413      	add	r3, r2
    2a96:	685a      	ldr	r2, [r3, #4]
    2a98:	492d      	ldr	r1, [pc, #180]	; (2b50 <Clock_Ip_InitClock+0x6b0>)
    2a9a:	4613      	mov	r3, r2
    2a9c:	00db      	lsls	r3, r3, #3
    2a9e:	4413      	add	r3, r2
    2aa0:	440b      	add	r3, r1
    2aa2:	3301      	adds	r3, #1
    2aa4:	781b      	ldrb	r3, [r3, #0]
    2aa6:	461a      	mov	r2, r3
    2aa8:	4b2a      	ldr	r3, [pc, #168]	; (2b54 <Clock_Ip_InitClock+0x6b4>)
    2aaa:	5c9b      	ldrb	r3, [r3, r2]
    2aac:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2aae:	4a2a      	ldr	r2, [pc, #168]	; (2b58 <Clock_Ip_InitClock+0x6b8>)
    2ab0:	9b02      	ldr	r3, [sp, #8]
    2ab2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2ab6:	9a03      	ldr	r2, [sp, #12]
    2ab8:	324e      	adds	r2, #78	; 0x4e
    2aba:	00d2      	lsls	r2, r2, #3
    2abc:	9901      	ldr	r1, [sp, #4]
    2abe:	440a      	add	r2, r1
    2ac0:	3204      	adds	r2, #4
    2ac2:	4610      	mov	r0, r2
    2ac4:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2ac6:	9b03      	ldr	r3, [sp, #12]
    2ac8:	3301      	adds	r3, #1
    2aca:	9303      	str	r3, [sp, #12]
    2acc:	9b01      	ldr	r3, [sp, #4]
    2ace:	7c1b      	ldrb	r3, [r3, #16]
    2ad0:	461a      	mov	r2, r3
    2ad2:	9b03      	ldr	r3, [sp, #12]
    2ad4:	4293      	cmp	r3, r2
    2ad6:	d3d9      	bcc.n	2a8c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2ad8:	2300      	movs	r3, #0
    2ada:	9303      	str	r3, [sp, #12]
    2adc:	e028      	b.n	2b30 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2ade:	9901      	ldr	r1, [sp, #4]
    2ae0:	9a03      	ldr	r2, [sp, #12]
    2ae2:	4613      	mov	r3, r2
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	4413      	add	r3, r2
    2ae8:	009b      	lsls	r3, r3, #2
    2aea:	440b      	add	r3, r1
    2aec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2af0:	681a      	ldr	r2, [r3, #0]
    2af2:	4917      	ldr	r1, [pc, #92]	; (2b50 <Clock_Ip_InitClock+0x6b0>)
    2af4:	4613      	mov	r3, r2
    2af6:	00db      	lsls	r3, r3, #3
    2af8:	4413      	add	r3, r2
    2afa:	440b      	add	r3, r1
    2afc:	3301      	adds	r3, #1
    2afe:	781b      	ldrb	r3, [r3, #0]
    2b00:	461a      	mov	r2, r3
    2b02:	4b16      	ldr	r3, [pc, #88]	; (2b5c <Clock_Ip_InitClock+0x6bc>)
    2b04:	5c9b      	ldrb	r3, [r3, r2]
    2b06:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2b08:	4a15      	ldr	r2, [pc, #84]	; (2b60 <Clock_Ip_InitClock+0x6c0>)
    2b0a:	9b02      	ldr	r3, [sp, #8]
    2b0c:	011b      	lsls	r3, r3, #4
    2b0e:	4413      	add	r3, r2
    2b10:	330c      	adds	r3, #12
    2b12:	6819      	ldr	r1, [r3, #0]
    2b14:	9a03      	ldr	r2, [sp, #12]
    2b16:	4613      	mov	r3, r2
    2b18:	009b      	lsls	r3, r3, #2
    2b1a:	4413      	add	r3, r2
    2b1c:	009b      	lsls	r3, r3, #2
    2b1e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b22:	9a01      	ldr	r2, [sp, #4]
    2b24:	4413      	add	r3, r2
    2b26:	4618      	mov	r0, r3
    2b28:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2b2a:	9b03      	ldr	r3, [sp, #12]
    2b2c:	3301      	adds	r3, #1
    2b2e:	9303      	str	r3, [sp, #12]
    2b30:	9b01      	ldr	r3, [sp, #4]
    2b32:	7c9b      	ldrb	r3, [r3, #18]
    2b34:	461a      	mov	r2, r3
    2b36:	9b03      	ldr	r3, [sp, #12]
    2b38:	4293      	cmp	r3, r2
    2b3a:	d3d0      	bcc.n	2ade <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2b3c:	2104      	movs	r1, #4
    2b3e:	9801      	ldr	r0, [sp, #4]
    2b40:	f002 ff48 	bl	59d4 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2b44:	bf00      	nop
    2b46:	b004      	add	sp, #16
    2b48:	bd10      	pop	{r4, pc}
    2b4a:	bf00      	nop
    2b4c:	1fff8b4c 	.word	0x1fff8b4c
    2b50:	00008770 	.word	0x00008770
    2b54:	00008710 	.word	0x00008710
    2b58:	00008cf8 	.word	0x00008cf8
    2b5c:	00008760 	.word	0x00008760
    2b60:	00008d6c 	.word	0x00008d6c

00002b64 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2b64:	b500      	push	{lr}
    2b66:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2b68:	2302      	movs	r3, #2
    2b6a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2b6c:	2300      	movs	r3, #0
    2b6e:	9304      	str	r3, [sp, #16]
    2b70:	e02c      	b.n	2bcc <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2b72:	4a36      	ldr	r2, [pc, #216]	; (2c4c <Clock_Ip_GetPllStatus+0xe8>)
    2b74:	9b04      	ldr	r3, [sp, #16]
    2b76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2b7a:	4935      	ldr	r1, [pc, #212]	; (2c50 <Clock_Ip_GetPllStatus+0xec>)
    2b7c:	4613      	mov	r3, r2
    2b7e:	00db      	lsls	r3, r3, #3
    2b80:	4413      	add	r3, r2
    2b82:	440b      	add	r3, r1
    2b84:	3301      	adds	r3, #1
    2b86:	781b      	ldrb	r3, [r3, #0]
    2b88:	461a      	mov	r2, r3
    2b8a:	4b32      	ldr	r3, [pc, #200]	; (2c54 <Clock_Ip_GetPllStatus+0xf0>)
    2b8c:	5c9b      	ldrb	r3, [r3, r2]
    2b8e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2b90:	4931      	ldr	r1, [pc, #196]	; (2c58 <Clock_Ip_GetPllStatus+0xf4>)
    2b92:	9a03      	ldr	r2, [sp, #12]
    2b94:	4613      	mov	r3, r2
    2b96:	009b      	lsls	r3, r3, #2
    2b98:	4413      	add	r3, r2
    2b9a:	009b      	lsls	r3, r3, #2
    2b9c:	440b      	add	r3, r1
    2b9e:	3308      	adds	r3, #8
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	492a      	ldr	r1, [pc, #168]	; (2c4c <Clock_Ip_GetPllStatus+0xe8>)
    2ba4:	9a04      	ldr	r2, [sp, #16]
    2ba6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2baa:	4610      	mov	r0, r2
    2bac:	4798      	blx	r3
    2bae:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2bb0:	9b02      	ldr	r3, [sp, #8]
    2bb2:	2b01      	cmp	r3, #1
    2bb4:	d102      	bne.n	2bbc <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2bb6:	2301      	movs	r3, #1
    2bb8:	9305      	str	r3, [sp, #20]
            break;
    2bba:	e00d      	b.n	2bd8 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2bbc:	9b02      	ldr	r3, [sp, #8]
    2bbe:	2b02      	cmp	r3, #2
    2bc0:	d101      	bne.n	2bc6 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2bc2:	2300      	movs	r3, #0
    2bc4:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2bc6:	9b04      	ldr	r3, [sp, #16]
    2bc8:	3301      	adds	r3, #1
    2bca:	9304      	str	r3, [sp, #16]
    2bcc:	4b23      	ldr	r3, [pc, #140]	; (2c5c <Clock_Ip_GetPllStatus+0xf8>)
    2bce:	789b      	ldrb	r3, [r3, #2]
    2bd0:	461a      	mov	r2, r3
    2bd2:	9b04      	ldr	r3, [sp, #16]
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d3cc      	bcc.n	2b72 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2bd8:	9b05      	ldr	r3, [sp, #20]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d130      	bne.n	2c40 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2bde:	2300      	movs	r3, #0
    2be0:	9304      	str	r3, [sp, #16]
    2be2:	e027      	b.n	2c34 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2be4:	4a1e      	ldr	r2, [pc, #120]	; (2c60 <Clock_Ip_GetPllStatus+0xfc>)
    2be6:	9b04      	ldr	r3, [sp, #16]
    2be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2bec:	4918      	ldr	r1, [pc, #96]	; (2c50 <Clock_Ip_GetPllStatus+0xec>)
    2bee:	4613      	mov	r3, r2
    2bf0:	00db      	lsls	r3, r3, #3
    2bf2:	4413      	add	r3, r2
    2bf4:	440b      	add	r3, r1
    2bf6:	3301      	adds	r3, #1
    2bf8:	781b      	ldrb	r3, [r3, #0]
    2bfa:	461a      	mov	r2, r3
    2bfc:	4b19      	ldr	r3, [pc, #100]	; (2c64 <Clock_Ip_GetPllStatus+0x100>)
    2bfe:	5c9b      	ldrb	r3, [r3, r2]
    2c00:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2c02:	4919      	ldr	r1, [pc, #100]	; (2c68 <Clock_Ip_GetPllStatus+0x104>)
    2c04:	9a03      	ldr	r2, [sp, #12]
    2c06:	4613      	mov	r3, r2
    2c08:	005b      	lsls	r3, r3, #1
    2c0a:	4413      	add	r3, r2
    2c0c:	009b      	lsls	r3, r3, #2
    2c0e:	440b      	add	r3, r1
    2c10:	3308      	adds	r3, #8
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	4912      	ldr	r1, [pc, #72]	; (2c60 <Clock_Ip_GetPllStatus+0xfc>)
    2c16:	9a04      	ldr	r2, [sp, #16]
    2c18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2c1c:	4610      	mov	r0, r2
    2c1e:	4798      	blx	r3
    2c20:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2c22:	9b01      	ldr	r3, [sp, #4]
    2c24:	2b01      	cmp	r3, #1
    2c26:	d102      	bne.n	2c2e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2c28:	2301      	movs	r3, #1
    2c2a:	9305      	str	r3, [sp, #20]
                break;
    2c2c:	e008      	b.n	2c40 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2c2e:	9b04      	ldr	r3, [sp, #16]
    2c30:	3301      	adds	r3, #1
    2c32:	9304      	str	r3, [sp, #16]
    2c34:	4b09      	ldr	r3, [pc, #36]	; (2c5c <Clock_Ip_GetPllStatus+0xf8>)
    2c36:	78db      	ldrb	r3, [r3, #3]
    2c38:	461a      	mov	r2, r3
    2c3a:	9b04      	ldr	r3, [sp, #16]
    2c3c:	4293      	cmp	r3, r2
    2c3e:	d3d1      	bcc.n	2be4 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2c40:	9b05      	ldr	r3, [sp, #20]
}
    2c42:	4618      	mov	r0, r3
    2c44:	b007      	add	sp, #28
    2c46:	f85d fb04 	ldr.w	pc, [sp], #4
    2c4a:	bf00      	nop
    2c4c:	00008c78 	.word	0x00008c78
    2c50:	00008770 	.word	0x00008770
    2c54:	00008730 	.word	0x00008730
    2c58:	00008d7c 	.word	0x00008d7c
    2c5c:	1fff8b4c 	.word	0x1fff8b4c
    2c60:	00008c7c 	.word	0x00008c7c
    2c64:	00008720 	.word	0x00008720
    2c68:	00008cec 	.word	0x00008cec

00002c6c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2c6c:	b500      	push	{lr}
    2c6e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2c70:	4b55      	ldr	r3, [pc, #340]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2c72:	681b      	ldr	r3, [r3, #0]
    2c74:	2b00      	cmp	r3, #0
    2c76:	f000 80a2 	beq.w	2dbe <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2c7a:	2300      	movs	r3, #0
    2c7c:	9301      	str	r3, [sp, #4]
    2c7e:	e02c      	b.n	2cda <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2c80:	4b51      	ldr	r3, [pc, #324]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2c82:	681a      	ldr	r2, [r3, #0]
    2c84:	9b01      	ldr	r3, [sp, #4]
    2c86:	330d      	adds	r3, #13
    2c88:	00db      	lsls	r3, r3, #3
    2c8a:	4413      	add	r3, r2
    2c8c:	685b      	ldr	r3, [r3, #4]
    2c8e:	4a4f      	ldr	r2, [pc, #316]	; (2dcc <Clock_Ip_DistributePll+0x160>)
    2c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c94:	2b03      	cmp	r3, #3
    2c96:	d11d      	bne.n	2cd4 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2c98:	4b4b      	ldr	r3, [pc, #300]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2c9a:	681b      	ldr	r3, [r3, #0]
    2c9c:	9a01      	ldr	r2, [sp, #4]
    2c9e:	320d      	adds	r2, #13
    2ca0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2ca4:	494a      	ldr	r1, [pc, #296]	; (2dd0 <Clock_Ip_DistributePll+0x164>)
    2ca6:	4613      	mov	r3, r2
    2ca8:	00db      	lsls	r3, r3, #3
    2caa:	4413      	add	r3, r2
    2cac:	440b      	add	r3, r1
    2cae:	3301      	adds	r3, #1
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	461a      	mov	r2, r3
    2cb4:	4b47      	ldr	r3, [pc, #284]	; (2dd4 <Clock_Ip_DistributePll+0x168>)
    2cb6:	5c9b      	ldrb	r3, [r3, r2]
    2cb8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2cba:	4a47      	ldr	r2, [pc, #284]	; (2dd8 <Clock_Ip_DistributePll+0x16c>)
    2cbc:	9b00      	ldr	r3, [sp, #0]
    2cbe:	00db      	lsls	r3, r3, #3
    2cc0:	4413      	add	r3, r2
    2cc2:	685b      	ldr	r3, [r3, #4]
    2cc4:	4a40      	ldr	r2, [pc, #256]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2cc6:	6811      	ldr	r1, [r2, #0]
    2cc8:	9a01      	ldr	r2, [sp, #4]
    2cca:	320d      	adds	r2, #13
    2ccc:	00d2      	lsls	r2, r2, #3
    2cce:	440a      	add	r2, r1
    2cd0:	4610      	mov	r0, r2
    2cd2:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2cd4:	9b01      	ldr	r3, [sp, #4]
    2cd6:	3301      	adds	r3, #1
    2cd8:	9301      	str	r3, [sp, #4]
    2cda:	4b3b      	ldr	r3, [pc, #236]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2cdc:	681b      	ldr	r3, [r3, #0]
    2cde:	7adb      	ldrb	r3, [r3, #11]
    2ce0:	461a      	mov	r2, r3
    2ce2:	9b01      	ldr	r3, [sp, #4]
    2ce4:	4293      	cmp	r3, r2
    2ce6:	d3cb      	bcc.n	2c80 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2ce8:	4b3c      	ldr	r3, [pc, #240]	; (2ddc <Clock_Ip_DistributePll+0x170>)
    2cea:	781b      	ldrb	r3, [r3, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d066      	beq.n	2dbe <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2cf0:	2300      	movs	r3, #0
    2cf2:	9301      	str	r3, [sp, #4]
    2cf4:	e021      	b.n	2d3a <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2cf6:	4b34      	ldr	r3, [pc, #208]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2cf8:	681a      	ldr	r2, [r3, #0]
    2cfa:	9b01      	ldr	r3, [sp, #4]
    2cfc:	334e      	adds	r3, #78	; 0x4e
    2cfe:	00db      	lsls	r3, r3, #3
    2d00:	4413      	add	r3, r2
    2d02:	685a      	ldr	r2, [r3, #4]
    2d04:	4932      	ldr	r1, [pc, #200]	; (2dd0 <Clock_Ip_DistributePll+0x164>)
    2d06:	4613      	mov	r3, r2
    2d08:	00db      	lsls	r3, r3, #3
    2d0a:	4413      	add	r3, r2
    2d0c:	440b      	add	r3, r1
    2d0e:	3301      	adds	r3, #1
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	461a      	mov	r2, r3
    2d14:	4b32      	ldr	r3, [pc, #200]	; (2de0 <Clock_Ip_DistributePll+0x174>)
    2d16:	5c9b      	ldrb	r3, [r3, r2]
    2d18:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2d1a:	4a32      	ldr	r2, [pc, #200]	; (2de4 <Clock_Ip_DistributePll+0x178>)
    2d1c:	9b00      	ldr	r3, [sp, #0]
    2d1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2d22:	4a29      	ldr	r2, [pc, #164]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2d24:	6811      	ldr	r1, [r2, #0]
    2d26:	9a01      	ldr	r2, [sp, #4]
    2d28:	324e      	adds	r2, #78	; 0x4e
    2d2a:	00d2      	lsls	r2, r2, #3
    2d2c:	440a      	add	r2, r1
    2d2e:	3204      	adds	r2, #4
    2d30:	4610      	mov	r0, r2
    2d32:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2d34:	9b01      	ldr	r3, [sp, #4]
    2d36:	3301      	adds	r3, #1
    2d38:	9301      	str	r3, [sp, #4]
    2d3a:	4b23      	ldr	r3, [pc, #140]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	7c1b      	ldrb	r3, [r3, #16]
    2d40:	461a      	mov	r2, r3
    2d42:	9b01      	ldr	r3, [sp, #4]
    2d44:	4293      	cmp	r3, r2
    2d46:	d3d6      	bcc.n	2cf6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2d48:	2300      	movs	r3, #0
    2d4a:	9301      	str	r3, [sp, #4]
    2d4c:	e02a      	b.n	2da4 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2d4e:	4b1e      	ldr	r3, [pc, #120]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2d50:	6819      	ldr	r1, [r3, #0]
    2d52:	9a01      	ldr	r2, [sp, #4]
    2d54:	4613      	mov	r3, r2
    2d56:	009b      	lsls	r3, r3, #2
    2d58:	4413      	add	r3, r2
    2d5a:	009b      	lsls	r3, r3, #2
    2d5c:	440b      	add	r3, r1
    2d5e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d62:	681a      	ldr	r2, [r3, #0]
    2d64:	491a      	ldr	r1, [pc, #104]	; (2dd0 <Clock_Ip_DistributePll+0x164>)
    2d66:	4613      	mov	r3, r2
    2d68:	00db      	lsls	r3, r3, #3
    2d6a:	4413      	add	r3, r2
    2d6c:	440b      	add	r3, r1
    2d6e:	3301      	adds	r3, #1
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	461a      	mov	r2, r3
    2d74:	4b1c      	ldr	r3, [pc, #112]	; (2de8 <Clock_Ip_DistributePll+0x17c>)
    2d76:	5c9b      	ldrb	r3, [r3, r2]
    2d78:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2d7a:	4a1c      	ldr	r2, [pc, #112]	; (2dec <Clock_Ip_DistributePll+0x180>)
    2d7c:	9b00      	ldr	r3, [sp, #0]
    2d7e:	011b      	lsls	r3, r3, #4
    2d80:	4413      	add	r3, r2
    2d82:	330c      	adds	r3, #12
    2d84:	6819      	ldr	r1, [r3, #0]
    2d86:	4b10      	ldr	r3, [pc, #64]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2d88:	6818      	ldr	r0, [r3, #0]
    2d8a:	9a01      	ldr	r2, [sp, #4]
    2d8c:	4613      	mov	r3, r2
    2d8e:	009b      	lsls	r3, r3, #2
    2d90:	4413      	add	r3, r2
    2d92:	009b      	lsls	r3, r3, #2
    2d94:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d98:	4403      	add	r3, r0
    2d9a:	4618      	mov	r0, r3
    2d9c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2d9e:	9b01      	ldr	r3, [sp, #4]
    2da0:	3301      	adds	r3, #1
    2da2:	9301      	str	r3, [sp, #4]
    2da4:	4b08      	ldr	r3, [pc, #32]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2da6:	681b      	ldr	r3, [r3, #0]
    2da8:	7c9b      	ldrb	r3, [r3, #18]
    2daa:	461a      	mov	r2, r3
    2dac:	9b01      	ldr	r3, [sp, #4]
    2dae:	4293      	cmp	r3, r2
    2db0:	d3cd      	bcc.n	2d4e <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2db2:	4b05      	ldr	r3, [pc, #20]	; (2dc8 <Clock_Ip_DistributePll+0x15c>)
    2db4:	681b      	ldr	r3, [r3, #0]
    2db6:	2104      	movs	r1, #4
    2db8:	4618      	mov	r0, r3
    2dba:	f002 fe0b 	bl	59d4 <Clock_Ip_Command>
        }
    }
}
    2dbe:	bf00      	nop
    2dc0:	b003      	add	sp, #12
    2dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    2dc6:	bf00      	nop
    2dc8:	1fff8b44 	.word	0x1fff8b44
    2dcc:	00008bbc 	.word	0x00008bbc
    2dd0:	00008770 	.word	0x00008770
    2dd4:	00008740 	.word	0x00008740
    2dd8:	00008da8 	.word	0x00008da8
    2ddc:	1fff8b4c 	.word	0x1fff8b4c
    2de0:	00008710 	.word	0x00008710
    2de4:	00008cf8 	.word	0x00008cf8
    2de8:	00008760 	.word	0x00008760
    2dec:	00008d6c 	.word	0x00008d6c

00002df0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2df0:	b500      	push	{lr}
    2df2:	b085      	sub	sp, #20
    2df4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2df6:	490c      	ldr	r1, [pc, #48]	; (2e28 <Clock_Ip_DisableClockMonitor+0x38>)
    2df8:	9a01      	ldr	r2, [sp, #4]
    2dfa:	4613      	mov	r3, r2
    2dfc:	00db      	lsls	r3, r3, #3
    2dfe:	4413      	add	r3, r2
    2e00:	440b      	add	r3, r1
    2e02:	3301      	adds	r3, #1
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	461a      	mov	r2, r3
    2e08:	4b08      	ldr	r3, [pc, #32]	; (2e2c <Clock_Ip_DisableClockMonitor+0x3c>)
    2e0a:	5c9b      	ldrb	r3, [r3, r2]
    2e0c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2e0e:	4a08      	ldr	r2, [pc, #32]	; (2e30 <Clock_Ip_DisableClockMonitor+0x40>)
    2e10:	9b03      	ldr	r3, [sp, #12]
    2e12:	011b      	lsls	r3, r3, #4
    2e14:	4413      	add	r3, r2
    2e16:	3308      	adds	r3, #8
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	9801      	ldr	r0, [sp, #4]
    2e1c:	4798      	blx	r3
}
    2e1e:	bf00      	nop
    2e20:	b005      	add	sp, #20
    2e22:	f85d fb04 	ldr.w	pc, [sp], #4
    2e26:	bf00      	nop
    2e28:	00008770 	.word	0x00008770
    2e2c:	00008760 	.word	0x00008760
    2e30:	00008d6c 	.word	0x00008d6c

00002e34 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2e34:	b082      	sub	sp, #8
    2e36:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2e38:	4a02      	ldr	r2, [pc, #8]	; (2e44 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2e3a:	9b01      	ldr	r3, [sp, #4]
    2e3c:	6013      	str	r3, [r2, #0]
}
    2e3e:	bf00      	nop
    2e40:	b002      	add	sp, #8
    2e42:	4770      	bx	lr
    2e44:	1fff8b14 	.word	0x1fff8b14

00002e48 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2e48:	b500      	push	{lr}
    2e4a:	b085      	sub	sp, #20
    2e4c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2e4e:	490c      	ldr	r1, [pc, #48]	; (2e80 <Clock_Ip_DisableModuleClock+0x38>)
    2e50:	9a01      	ldr	r2, [sp, #4]
    2e52:	4613      	mov	r3, r2
    2e54:	00db      	lsls	r3, r3, #3
    2e56:	4413      	add	r3, r2
    2e58:	440b      	add	r3, r1
    2e5a:	3301      	adds	r3, #1
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	461a      	mov	r2, r3
    2e60:	4b08      	ldr	r3, [pc, #32]	; (2e84 <Clock_Ip_DisableModuleClock+0x3c>)
    2e62:	5c9b      	ldrb	r3, [r3, r2]
    2e64:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2e66:	4a08      	ldr	r2, [pc, #32]	; (2e88 <Clock_Ip_DisableModuleClock+0x40>)
    2e68:	9b03      	ldr	r3, [sp, #12]
    2e6a:	00db      	lsls	r3, r3, #3
    2e6c:	4413      	add	r3, r2
    2e6e:	685b      	ldr	r3, [r3, #4]
    2e70:	2101      	movs	r1, #1
    2e72:	9801      	ldr	r0, [sp, #4]
    2e74:	4798      	blx	r3
}
    2e76:	bf00      	nop
    2e78:	b005      	add	sp, #20
    2e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e7e:	bf00      	nop
    2e80:	00008770 	.word	0x00008770
    2e84:	00008710 	.word	0x00008710
    2e88:	00008cf8 	.word	0x00008cf8

00002e8c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2e8c:	b500      	push	{lr}
    2e8e:	b085      	sub	sp, #20
    2e90:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2e92:	490c      	ldr	r1, [pc, #48]	; (2ec4 <Clock_Ip_EnableModuleClock+0x38>)
    2e94:	9a01      	ldr	r2, [sp, #4]
    2e96:	4613      	mov	r3, r2
    2e98:	00db      	lsls	r3, r3, #3
    2e9a:	4413      	add	r3, r2
    2e9c:	440b      	add	r3, r1
    2e9e:	3301      	adds	r3, #1
    2ea0:	781b      	ldrb	r3, [r3, #0]
    2ea2:	461a      	mov	r2, r3
    2ea4:	4b08      	ldr	r3, [pc, #32]	; (2ec8 <Clock_Ip_EnableModuleClock+0x3c>)
    2ea6:	5c9b      	ldrb	r3, [r3, r2]
    2ea8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2eaa:	4a08      	ldr	r2, [pc, #32]	; (2ecc <Clock_Ip_EnableModuleClock+0x40>)
    2eac:	9b03      	ldr	r3, [sp, #12]
    2eae:	00db      	lsls	r3, r3, #3
    2eb0:	4413      	add	r3, r2
    2eb2:	685b      	ldr	r3, [r3, #4]
    2eb4:	2100      	movs	r1, #0
    2eb6:	9801      	ldr	r0, [sp, #4]
    2eb8:	4798      	blx	r3
}
    2eba:	bf00      	nop
    2ebc:	b005      	add	sp, #20
    2ebe:	f85d fb04 	ldr.w	pc, [sp], #4
    2ec2:	bf00      	nop
    2ec4:	00008770 	.word	0x00008770
    2ec8:	00008710 	.word	0x00008710
    2ecc:	00008cf8 	.word	0x00008cf8

00002ed0 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2ed0:	b500      	push	{lr}
    2ed2:	b083      	sub	sp, #12
    2ed4:	9001      	str	r0, [sp, #4]
    2ed6:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2ed8:	4b08      	ldr	r3, [pc, #32]	; (2efc <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2eda:	2200      	movs	r2, #0
    2edc:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2ede:	4b08      	ldr	r3, [pc, #32]	; (2f00 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	2102      	movs	r1, #2
    2ee4:	4618      	mov	r0, r3
    2ee6:	f002 fd75 	bl	59d4 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2eea:	9900      	ldr	r1, [sp, #0]
    2eec:	9801      	ldr	r0, [sp, #4]
    2eee:	f002 fc51 	bl	5794 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2ef2:	bf00      	nop
    2ef4:	b003      	add	sp, #12
    2ef6:	f85d fb04 	ldr.w	pc, [sp], #4
    2efa:	bf00      	nop
    2efc:	1fff8b10 	.word	0x1fff8b10
    2f00:	1fff8b44 	.word	0x1fff8b44

00002f04 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2f04:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2f06:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2f0a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2f0c:	4b06      	ldr	r3, [pc, #24]	; (2f28 <Clock_Ip_SetWaitStates+0x24>)
    2f0e:	785b      	ldrb	r3, [r3, #1]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d005      	beq.n	2f20 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2f14:	9b01      	ldr	r3, [sp, #4]
    2f16:	3b01      	subs	r3, #1
    2f18:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2f1a:	9b01      	ldr	r3, [sp, #4]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d1f9      	bne.n	2f14 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2f20:	bf00      	nop
    2f22:	b002      	add	sp, #8
    2f24:	4770      	bx	lr
    2f26:	bf00      	nop
    2f28:	1fff8b4c 	.word	0x1fff8b4c

00002f2c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2f2c:	b500      	push	{lr}
    2f2e:	b083      	sub	sp, #12
    2f30:	9001      	str	r0, [sp, #4]
    2f32:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2f34:	4b04      	ldr	r3, [pc, #16]	; (2f48 <Clock_Ip_ReportClockErrors+0x1c>)
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	9900      	ldr	r1, [sp, #0]
    2f3a:	9801      	ldr	r0, [sp, #4]
    2f3c:	4798      	blx	r3
}
    2f3e:	bf00      	nop
    2f40:	b003      	add	sp, #12
    2f42:	f85d fb04 	ldr.w	pc, [sp], #4
    2f46:	bf00      	nop
    2f48:	1fff8b14 	.word	0x1fff8b14

00002f4c <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2f4c:	b500      	push	{lr}
    2f4e:	b085      	sub	sp, #20
    2f50:	9003      	str	r0, [sp, #12]
    2f52:	9102      	str	r1, [sp, #8]
    2f54:	9201      	str	r2, [sp, #4]
    2f56:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2f58:	2000      	movs	r0, #0
    2f5a:	f7fe ffd0 	bl	1efe <OsIf_GetCounter>
    2f5e:	4602      	mov	r2, r0
    2f60:	9b03      	ldr	r3, [sp, #12]
    2f62:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2f64:	9b02      	ldr	r3, [sp, #8]
    2f66:	2200      	movs	r2, #0
    2f68:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2f6a:	2100      	movs	r1, #0
    2f6c:	9800      	ldr	r0, [sp, #0]
    2f6e:	f7ff f812 	bl	1f96 <OsIf_MicrosToTicks>
    2f72:	4602      	mov	r2, r0
    2f74:	9b01      	ldr	r3, [sp, #4]
    2f76:	601a      	str	r2, [r3, #0]
}
    2f78:	bf00      	nop
    2f7a:	b005      	add	sp, #20
    2f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f80 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2f80:	b500      	push	{lr}
    2f82:	b087      	sub	sp, #28
    2f84:	9003      	str	r0, [sp, #12]
    2f86:	9102      	str	r1, [sp, #8]
    2f88:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2f8a:	2300      	movs	r3, #0
    2f8c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2f90:	2100      	movs	r1, #0
    2f92:	9803      	ldr	r0, [sp, #12]
    2f94:	f7fe ffcc 	bl	1f30 <OsIf_GetElapsed>
    2f98:	4602      	mov	r2, r0
    2f9a:	9b02      	ldr	r3, [sp, #8]
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	441a      	add	r2, r3
    2fa0:	9b02      	ldr	r3, [sp, #8]
    2fa2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2fa4:	9b02      	ldr	r3, [sp, #8]
    2fa6:	681b      	ldr	r3, [r3, #0]
    2fa8:	9a01      	ldr	r2, [sp, #4]
    2faa:	429a      	cmp	r2, r3
    2fac:	d802      	bhi.n	2fb4 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2fae:	2301      	movs	r3, #1
    2fb0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2fb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2fb8:	4618      	mov	r0, r3
    2fba:	b007      	add	sp, #28
    2fbc:	f85d fb04 	ldr.w	pc, [sp], #4

00002fc0 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2fc0:	b082      	sub	sp, #8
    2fc2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2fc4:	bf00      	nop
    2fc6:	b002      	add	sp, #8
    2fc8:	4770      	bx	lr

00002fca <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2fca:	b500      	push	{lr}
    2fcc:	b083      	sub	sp, #12
    2fce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd0:	9b01      	ldr	r3, [sp, #4]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d002      	beq.n	2fdc <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2fd6:	9801      	ldr	r0, [sp, #4]
    2fd8:	f000 f8ad 	bl	3136 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fdc:	bf00      	nop
    2fde:	b003      	add	sp, #12
    2fe0:	f85d fb04 	ldr.w	pc, [sp], #4

00002fe4 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2fe4:	b500      	push	{lr}
    2fe6:	b083      	sub	sp, #12
    2fe8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d002      	beq.n	2ff6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2ff0:	9801      	ldr	r0, [sp, #4]
    2ff2:	f000 f8cd 	bl	3190 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ff6:	bf00      	nop
    2ff8:	b003      	add	sp, #12
    2ffa:	f85d fb04 	ldr.w	pc, [sp], #4

00002ffe <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2ffe:	b500      	push	{lr}
    3000:	b083      	sub	sp, #12
    3002:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3004:	9b01      	ldr	r3, [sp, #4]
    3006:	2b00      	cmp	r3, #0
    3008:	d002      	beq.n	3010 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    300a:	9801      	ldr	r0, [sp, #4]
    300c:	f000 f8ee 	bl	31ec <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3010:	bf00      	nop
    3012:	b003      	add	sp, #12
    3014:	f85d fb04 	ldr.w	pc, [sp], #4

00003018 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3018:	b500      	push	{lr}
    301a:	b083      	sub	sp, #12
    301c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	2b00      	cmp	r3, #0
    3022:	d002      	beq.n	302a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3024:	9801      	ldr	r0, [sp, #4]
    3026:	f000 f8f9 	bl	321c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    302a:	bf00      	nop
    302c:	b003      	add	sp, #12
    302e:	f85d fb04 	ldr.w	pc, [sp], #4

00003032 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3032:	b500      	push	{lr}
    3034:	b083      	sub	sp, #12
    3036:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3038:	9b01      	ldr	r3, [sp, #4]
    303a:	2b00      	cmp	r3, #0
    303c:	d002      	beq.n	3044 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    303e:	9801      	ldr	r0, [sp, #4]
    3040:	f000 f904 	bl	324c <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3044:	bf00      	nop
    3046:	b003      	add	sp, #12
    3048:	f85d fb04 	ldr.w	pc, [sp], #4

0000304c <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    304c:	b500      	push	{lr}
    304e:	b083      	sub	sp, #12
    3050:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3052:	9b01      	ldr	r3, [sp, #4]
    3054:	2b00      	cmp	r3, #0
    3056:	d002      	beq.n	305e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3058:	9801      	ldr	r0, [sp, #4]
    305a:	f000 f90f 	bl	327c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    305e:	bf00      	nop
    3060:	b003      	add	sp, #12
    3062:	f85d fb04 	ldr.w	pc, [sp], #4

00003066 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3066:	b500      	push	{lr}
    3068:	b083      	sub	sp, #12
    306a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    306c:	9b01      	ldr	r3, [sp, #4]
    306e:	2b00      	cmp	r3, #0
    3070:	d002      	beq.n	3078 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3072:	9801      	ldr	r0, [sp, #4]
    3074:	f000 f91a 	bl	32ac <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3078:	bf00      	nop
    307a:	b003      	add	sp, #12
    307c:	f85d fb04 	ldr.w	pc, [sp], #4

00003080 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3080:	b500      	push	{lr}
    3082:	b083      	sub	sp, #12
    3084:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3086:	9b01      	ldr	r3, [sp, #4]
    3088:	2b00      	cmp	r3, #0
    308a:	d002      	beq.n	3092 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    308c:	9801      	ldr	r0, [sp, #4]
    308e:	f000 f925 	bl	32dc <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3092:	bf00      	nop
    3094:	b003      	add	sp, #12
    3096:	f85d fb04 	ldr.w	pc, [sp], #4

0000309a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    309a:	b500      	push	{lr}
    309c:	b083      	sub	sp, #12
    309e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30a0:	9b01      	ldr	r3, [sp, #4]
    30a2:	2b00      	cmp	r3, #0
    30a4:	d002      	beq.n	30ac <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    30a6:	9801      	ldr	r0, [sp, #4]
    30a8:	f000 f930 	bl	330c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ac:	bf00      	nop
    30ae:	b003      	add	sp, #12
    30b0:	f85d fb04 	ldr.w	pc, [sp], #4

000030b4 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    30b4:	b500      	push	{lr}
    30b6:	b083      	sub	sp, #12
    30b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30ba:	9b01      	ldr	r3, [sp, #4]
    30bc:	2b00      	cmp	r3, #0
    30be:	d002      	beq.n	30c6 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    30c0:	9801      	ldr	r0, [sp, #4]
    30c2:	f000 f93b 	bl	333c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30c6:	bf00      	nop
    30c8:	b003      	add	sp, #12
    30ca:	f85d fb04 	ldr.w	pc, [sp], #4

000030ce <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    30ce:	b500      	push	{lr}
    30d0:	b083      	sub	sp, #12
    30d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30d4:	9b01      	ldr	r3, [sp, #4]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d002      	beq.n	30e0 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    30da:	9801      	ldr	r0, [sp, #4]
    30dc:	f000 f946 	bl	336c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30e0:	bf00      	nop
    30e2:	b003      	add	sp, #12
    30e4:	f85d fb04 	ldr.w	pc, [sp], #4

000030e8 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    30e8:	b500      	push	{lr}
    30ea:	b083      	sub	sp, #12
    30ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30ee:	9b01      	ldr	r3, [sp, #4]
    30f0:	2b00      	cmp	r3, #0
    30f2:	d002      	beq.n	30fa <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    30f4:	9801      	ldr	r0, [sp, #4]
    30f6:	f000 f951 	bl	339c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30fa:	bf00      	nop
    30fc:	b003      	add	sp, #12
    30fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003102 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    3102:	b500      	push	{lr}
    3104:	b083      	sub	sp, #12
    3106:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3108:	9b01      	ldr	r3, [sp, #4]
    310a:	2b00      	cmp	r3, #0
    310c:	d002      	beq.n	3114 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    310e:	9801      	ldr	r0, [sp, #4]
    3110:	f000 f95e 	bl	33d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3114:	bf00      	nop
    3116:	b003      	add	sp, #12
    3118:	f85d fb04 	ldr.w	pc, [sp], #4

0000311c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    311c:	b500      	push	{lr}
    311e:	b083      	sub	sp, #12
    3120:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	2b00      	cmp	r3, #0
    3126:	d002      	beq.n	312e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3128:	9801      	ldr	r0, [sp, #4]
    312a:	f000 f98b 	bl	3444 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    312e:	bf00      	nop
    3130:	b003      	add	sp, #12
    3132:	f85d fb04 	ldr.w	pc, [sp], #4

00003136 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3136:	b086      	sub	sp, #24
    3138:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    313a:	9b01      	ldr	r3, [sp, #4]
    313c:	681a      	ldr	r2, [r3, #0]
    313e:	4911      	ldr	r1, [pc, #68]	; (3184 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3140:	4613      	mov	r3, r2
    3142:	00db      	lsls	r3, r3, #3
    3144:	4413      	add	r3, r2
    3146:	440b      	add	r3, r1
    3148:	781b      	ldrb	r3, [r3, #0]
    314a:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    314c:	9b01      	ldr	r3, [sp, #4]
    314e:	685b      	ldr	r3, [r3, #4]
    3150:	4a0d      	ldr	r2, [pc, #52]	; (3188 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3152:	5cd3      	ldrb	r3, [r2, r3]
    3154:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3156:	4a0d      	ldr	r2, [pc, #52]	; (318c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3158:	9b05      	ldr	r3, [sp, #20]
    315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    315e:	681b      	ldr	r3, [r3, #0]
    3160:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3162:	9b03      	ldr	r3, [sp, #12]
    3164:	f023 0307 	bic.w	r3, r3, #7
    3168:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    316a:	9a03      	ldr	r2, [sp, #12]
    316c:	9b04      	ldr	r3, [sp, #16]
    316e:	4313      	orrs	r3, r2
    3170:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3172:	4a06      	ldr	r2, [pc, #24]	; (318c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3174:	9b05      	ldr	r3, [sp, #20]
    3176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    317a:	9a03      	ldr	r2, [sp, #12]
    317c:	601a      	str	r2, [r3, #0]
}
    317e:	bf00      	nop
    3180:	b006      	add	sp, #24
    3182:	4770      	bx	lr
    3184:	00008770 	.word	0x00008770
    3188:	00008b68 	.word	0x00008b68
    318c:	00008bac 	.word	0x00008bac

00003190 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3190:	b086      	sub	sp, #24
    3192:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3194:	9b01      	ldr	r3, [sp, #4]
    3196:	681a      	ldr	r2, [r3, #0]
    3198:	4911      	ldr	r1, [pc, #68]	; (31e0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    319a:	4613      	mov	r3, r2
    319c:	00db      	lsls	r3, r3, #3
    319e:	4413      	add	r3, r2
    31a0:	440b      	add	r3, r1
    31a2:	781b      	ldrb	r3, [r3, #0]
    31a4:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    31a6:	9b01      	ldr	r3, [sp, #4]
    31a8:	685b      	ldr	r3, [r3, #4]
    31aa:	4a0e      	ldr	r2, [pc, #56]	; (31e4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    31ac:	5cd3      	ldrb	r3, [r2, r3]
    31ae:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    31b0:	4a0d      	ldr	r2, [pc, #52]	; (31e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    31b2:	9b05      	ldr	r3, [sp, #20]
    31b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    31bc:	9b03      	ldr	r3, [sp, #12]
    31be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    31c2:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    31c4:	9b04      	ldr	r3, [sp, #16]
    31c6:	021b      	lsls	r3, r3, #8
    31c8:	9a03      	ldr	r2, [sp, #12]
    31ca:	4313      	orrs	r3, r2
    31cc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    31ce:	4a06      	ldr	r2, [pc, #24]	; (31e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    31d0:	9b05      	ldr	r3, [sp, #20]
    31d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31d6:	9a03      	ldr	r2, [sp, #12]
    31d8:	601a      	str	r2, [r3, #0]
}
    31da:	bf00      	nop
    31dc:	b006      	add	sp, #24
    31de:	4770      	bx	lr
    31e0:	00008770 	.word	0x00008770
    31e4:	00008b68 	.word	0x00008b68
    31e8:	00008bac 	.word	0x00008bac

000031ec <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31ec:	b084      	sub	sp, #16
    31ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    31f0:	4b09      	ldr	r3, [pc, #36]	; (3218 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    31f2:	695b      	ldr	r3, [r3, #20]
    31f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    31f6:	9b03      	ldr	r3, [sp, #12]
    31f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    31fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    31fe:	9b01      	ldr	r3, [sp, #4]
    3200:	685b      	ldr	r3, [r3, #4]
    3202:	3b01      	subs	r3, #1
    3204:	041b      	lsls	r3, r3, #16
    3206:	9a03      	ldr	r2, [sp, #12]
    3208:	4313      	orrs	r3, r2
    320a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    320c:	4a02      	ldr	r2, [pc, #8]	; (3218 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    320e:	9b03      	ldr	r3, [sp, #12]
    3210:	6153      	str	r3, [r2, #20]
}
    3212:	bf00      	nop
    3214:	b004      	add	sp, #16
    3216:	4770      	bx	lr
    3218:	40064000 	.word	0x40064000

0000321c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    321c:	b084      	sub	sp, #16
    321e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3220:	4b09      	ldr	r3, [pc, #36]	; (3248 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3222:	695b      	ldr	r3, [r3, #20]
    3224:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3226:	9b03      	ldr	r3, [sp, #12]
    3228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    322c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    322e:	9b01      	ldr	r3, [sp, #4]
    3230:	685b      	ldr	r3, [r3, #4]
    3232:	3b01      	subs	r3, #1
    3234:	011b      	lsls	r3, r3, #4
    3236:	9a03      	ldr	r2, [sp, #12]
    3238:	4313      	orrs	r3, r2
    323a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    323c:	4a02      	ldr	r2, [pc, #8]	; (3248 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    323e:	9b03      	ldr	r3, [sp, #12]
    3240:	6153      	str	r3, [r2, #20]
}
    3242:	bf00      	nop
    3244:	b004      	add	sp, #16
    3246:	4770      	bx	lr
    3248:	40064000 	.word	0x40064000

0000324c <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    324c:	b084      	sub	sp, #16
    324e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3250:	4b09      	ldr	r3, [pc, #36]	; (3278 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3252:	695b      	ldr	r3, [r3, #20]
    3254:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3256:	9b03      	ldr	r3, [sp, #12]
    3258:	f023 030f 	bic.w	r3, r3, #15
    325c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    325e:	9b01      	ldr	r3, [sp, #4]
    3260:	685b      	ldr	r3, [r3, #4]
    3262:	3b01      	subs	r3, #1
    3264:	9a03      	ldr	r2, [sp, #12]
    3266:	4313      	orrs	r3, r2
    3268:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    326a:	4a03      	ldr	r2, [pc, #12]	; (3278 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    326c:	9b03      	ldr	r3, [sp, #12]
    326e:	6153      	str	r3, [r2, #20]
}
    3270:	bf00      	nop
    3272:	b004      	add	sp, #16
    3274:	4770      	bx	lr
    3276:	bf00      	nop
    3278:	40064000 	.word	0x40064000

0000327c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    327c:	b084      	sub	sp, #16
    327e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3280:	4b09      	ldr	r3, [pc, #36]	; (32a8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3282:	699b      	ldr	r3, [r3, #24]
    3284:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3286:	9b03      	ldr	r3, [sp, #12]
    3288:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    328c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    328e:	9b01      	ldr	r3, [sp, #4]
    3290:	685b      	ldr	r3, [r3, #4]
    3292:	3b01      	subs	r3, #1
    3294:	041b      	lsls	r3, r3, #16
    3296:	9a03      	ldr	r2, [sp, #12]
    3298:	4313      	orrs	r3, r2
    329a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    329c:	4a02      	ldr	r2, [pc, #8]	; (32a8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    329e:	9b03      	ldr	r3, [sp, #12]
    32a0:	6193      	str	r3, [r2, #24]
}
    32a2:	bf00      	nop
    32a4:	b004      	add	sp, #16
    32a6:	4770      	bx	lr
    32a8:	40064000 	.word	0x40064000

000032ac <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32ac:	b084      	sub	sp, #16
    32ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    32b0:	4b09      	ldr	r3, [pc, #36]	; (32d8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    32b2:	699b      	ldr	r3, [r3, #24]
    32b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    32b6:	9b03      	ldr	r3, [sp, #12]
    32b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    32bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    32be:	9b01      	ldr	r3, [sp, #4]
    32c0:	685b      	ldr	r3, [r3, #4]
    32c2:	3b01      	subs	r3, #1
    32c4:	011b      	lsls	r3, r3, #4
    32c6:	9a03      	ldr	r2, [sp, #12]
    32c8:	4313      	orrs	r3, r2
    32ca:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    32cc:	4a02      	ldr	r2, [pc, #8]	; (32d8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    32ce:	9b03      	ldr	r3, [sp, #12]
    32d0:	6193      	str	r3, [r2, #24]
}
    32d2:	bf00      	nop
    32d4:	b004      	add	sp, #16
    32d6:	4770      	bx	lr
    32d8:	40064000 	.word	0x40064000

000032dc <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32dc:	b084      	sub	sp, #16
    32de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    32e0:	4b09      	ldr	r3, [pc, #36]	; (3308 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    32e2:	699b      	ldr	r3, [r3, #24]
    32e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    32e6:	9b03      	ldr	r3, [sp, #12]
    32e8:	f023 030f 	bic.w	r3, r3, #15
    32ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    32ee:	9b01      	ldr	r3, [sp, #4]
    32f0:	685b      	ldr	r3, [r3, #4]
    32f2:	3b01      	subs	r3, #1
    32f4:	9a03      	ldr	r2, [sp, #12]
    32f6:	4313      	orrs	r3, r2
    32f8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    32fa:	4a03      	ldr	r2, [pc, #12]	; (3308 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    32fc:	9b03      	ldr	r3, [sp, #12]
    32fe:	6193      	str	r3, [r2, #24]
}
    3300:	bf00      	nop
    3302:	b004      	add	sp, #16
    3304:	4770      	bx	lr
    3306:	bf00      	nop
    3308:	40064000 	.word	0x40064000

0000330c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    330c:	b084      	sub	sp, #16
    330e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3310:	4b09      	ldr	r3, [pc, #36]	; (3338 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3312:	69db      	ldr	r3, [r3, #28]
    3314:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3316:	9b03      	ldr	r3, [sp, #12]
    3318:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    331c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    331e:	9b01      	ldr	r3, [sp, #4]
    3320:	685b      	ldr	r3, [r3, #4]
    3322:	3b01      	subs	r3, #1
    3324:	041b      	lsls	r3, r3, #16
    3326:	9a03      	ldr	r2, [sp, #12]
    3328:	4313      	orrs	r3, r2
    332a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    332c:	4a02      	ldr	r2, [pc, #8]	; (3338 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    332e:	9b03      	ldr	r3, [sp, #12]
    3330:	61d3      	str	r3, [r2, #28]
}
    3332:	bf00      	nop
    3334:	b004      	add	sp, #16
    3336:	4770      	bx	lr
    3338:	40064000 	.word	0x40064000

0000333c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    333c:	b084      	sub	sp, #16
    333e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3340:	4b09      	ldr	r3, [pc, #36]	; (3368 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3342:	69db      	ldr	r3, [r3, #28]
    3344:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3346:	9b03      	ldr	r3, [sp, #12]
    3348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    334c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    334e:	9b01      	ldr	r3, [sp, #4]
    3350:	685b      	ldr	r3, [r3, #4]
    3352:	3b01      	subs	r3, #1
    3354:	011b      	lsls	r3, r3, #4
    3356:	9a03      	ldr	r2, [sp, #12]
    3358:	4313      	orrs	r3, r2
    335a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    335c:	4a02      	ldr	r2, [pc, #8]	; (3368 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    335e:	9b03      	ldr	r3, [sp, #12]
    3360:	61d3      	str	r3, [r2, #28]
}
    3362:	bf00      	nop
    3364:	b004      	add	sp, #16
    3366:	4770      	bx	lr
    3368:	40064000 	.word	0x40064000

0000336c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    336c:	b084      	sub	sp, #16
    336e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3370:	4b09      	ldr	r3, [pc, #36]	; (3398 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3372:	69db      	ldr	r3, [r3, #28]
    3374:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3376:	9b03      	ldr	r3, [sp, #12]
    3378:	f023 030f 	bic.w	r3, r3, #15
    337c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    337e:	9b01      	ldr	r3, [sp, #4]
    3380:	685b      	ldr	r3, [r3, #4]
    3382:	3b01      	subs	r3, #1
    3384:	9a03      	ldr	r2, [sp, #12]
    3386:	4313      	orrs	r3, r2
    3388:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    338a:	4a03      	ldr	r2, [pc, #12]	; (3398 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    338c:	9b03      	ldr	r3, [sp, #12]
    338e:	61d3      	str	r3, [r2, #28]
}
    3390:	bf00      	nop
    3392:	b004      	add	sp, #16
    3394:	4770      	bx	lr
    3396:	bf00      	nop
    3398:	40064000 	.word	0x40064000

0000339c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    339c:	b084      	sub	sp, #16
    339e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    33a0:	4b0a      	ldr	r3, [pc, #40]	; (33cc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    33a2:	685b      	ldr	r3, [r3, #4]
    33a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    33a6:	9b03      	ldr	r3, [sp, #12]
    33a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    33ac:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    33ae:	9b01      	ldr	r3, [sp, #4]
    33b0:	685b      	ldr	r3, [r3, #4]
    33b2:	3b01      	subs	r3, #1
    33b4:	021b      	lsls	r3, r3, #8
    33b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    33ba:	9a03      	ldr	r2, [sp, #12]
    33bc:	4313      	orrs	r3, r2
    33be:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    33c0:	4a02      	ldr	r2, [pc, #8]	; (33cc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    33c2:	9b03      	ldr	r3, [sp, #12]
    33c4:	6053      	str	r3, [r2, #4]
}
    33c6:	bf00      	nop
    33c8:	b004      	add	sp, #16
    33ca:	4770      	bx	lr
    33cc:	40048000 	.word	0x40048000

000033d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    33d0:	b084      	sub	sp, #16
    33d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    33d4:	4919      	ldr	r1, [pc, #100]	; (343c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    33d6:	9b01      	ldr	r3, [sp, #4]
    33d8:	681a      	ldr	r2, [r3, #0]
    33da:	4819      	ldr	r0, [pc, #100]	; (3440 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    33dc:	4613      	mov	r3, r2
    33de:	00db      	lsls	r3, r3, #3
    33e0:	4413      	add	r3, r2
    33e2:	4403      	add	r3, r0
    33e4:	3305      	adds	r3, #5
    33e6:	781b      	ldrb	r3, [r3, #0]
    33e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    33ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    33ee:	9b03      	ldr	r3, [sp, #12]
    33f0:	f023 030f 	bic.w	r3, r3, #15
    33f4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	685b      	ldr	r3, [r3, #4]
    33fa:	3b01      	subs	r3, #1
    33fc:	f003 0307 	and.w	r3, r3, #7
    3400:	9a03      	ldr	r2, [sp, #12]
    3402:	4313      	orrs	r3, r2
    3404:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3406:	9b01      	ldr	r3, [sp, #4]
    3408:	7a1b      	ldrb	r3, [r3, #8]
    340a:	3b01      	subs	r3, #1
    340c:	00db      	lsls	r3, r3, #3
    340e:	f003 0308 	and.w	r3, r3, #8
    3412:	9a03      	ldr	r2, [sp, #12]
    3414:	4313      	orrs	r3, r2
    3416:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3418:	4908      	ldr	r1, [pc, #32]	; (343c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    341a:	9b01      	ldr	r3, [sp, #4]
    341c:	681a      	ldr	r2, [r3, #0]
    341e:	4808      	ldr	r0, [pc, #32]	; (3440 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3420:	4613      	mov	r3, r2
    3422:	00db      	lsls	r3, r3, #3
    3424:	4413      	add	r3, r2
    3426:	4403      	add	r3, r0
    3428:	3305      	adds	r3, #5
    342a:	781b      	ldrb	r3, [r3, #0]
    342c:	461a      	mov	r2, r3
    342e:	9b03      	ldr	r3, [sp, #12]
    3430:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3434:	bf00      	nop
    3436:	b004      	add	sp, #16
    3438:	4770      	bx	lr
    343a:	bf00      	nop
    343c:	40065000 	.word	0x40065000
    3440:	00008770 	.word	0x00008770

00003444 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3444:	b084      	sub	sp, #16
    3446:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3448:	4b10      	ldr	r3, [pc, #64]	; (348c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    344a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    344c:	4a0f      	ldr	r2, [pc, #60]	; (348c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    344e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3452:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3454:	4b0d      	ldr	r3, [pc, #52]	; (348c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3458:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    345a:	9b03      	ldr	r3, [sp, #12]
    345c:	f023 030f 	bic.w	r3, r3, #15
    3460:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3462:	9b01      	ldr	r3, [sp, #4]
    3464:	685b      	ldr	r3, [r3, #4]
    3466:	3b01      	subs	r3, #1
    3468:	005b      	lsls	r3, r3, #1
    346a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    346e:	9b01      	ldr	r3, [sp, #4]
    3470:	7a1b      	ldrb	r3, [r3, #8]
    3472:	3b01      	subs	r3, #1
    3474:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3478:	4313      	orrs	r3, r2
    347a:	9a03      	ldr	r2, [sp, #12]
    347c:	4313      	orrs	r3, r2
    347e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3480:	4a02      	ldr	r2, [pc, #8]	; (348c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3482:	9b03      	ldr	r3, [sp, #12]
    3484:	6693      	str	r3, [r2, #104]	; 0x68
}
    3486:	bf00      	nop
    3488:	b004      	add	sp, #16
    348a:	4770      	bx	lr
    348c:	40048000 	.word	0x40048000

00003490 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3490:	b082      	sub	sp, #8
    3492:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3494:	bf00      	nop
    3496:	b002      	add	sp, #8
    3498:	4770      	bx	lr
	...

0000349c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    349c:	b082      	sub	sp, #8
    349e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    34a0:	bf00      	nop
    34a2:	b002      	add	sp, #8
    34a4:	4770      	bx	lr

000034a6 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    34a6:	b082      	sub	sp, #8
    34a8:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    34aa:	bf00      	nop
    34ac:	b002      	add	sp, #8
    34ae:	4770      	bx	lr

000034b0 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    34b0:	b500      	push	{lr}
    34b2:	b083      	sub	sp, #12
    34b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34b6:	9b01      	ldr	r3, [sp, #4]
    34b8:	2b00      	cmp	r3, #0
    34ba:	d002      	beq.n	34c2 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    34bc:	9801      	ldr	r0, [sp, #4]
    34be:	f000 f86a 	bl	3596 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34c2:	bf00      	nop
    34c4:	b003      	add	sp, #12
    34c6:	f85d fb04 	ldr.w	pc, [sp], #4

000034ca <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    34ca:	b500      	push	{lr}
    34cc:	b083      	sub	sp, #12
    34ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34d0:	9b01      	ldr	r3, [sp, #4]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d002      	beq.n	34dc <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    34d6:	9801      	ldr	r0, [sp, #4]
    34d8:	f000 f884 	bl	35e4 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    34dc:	bf00      	nop
    34de:	b003      	add	sp, #12
    34e0:	f85d fb04 	ldr.w	pc, [sp], #4

000034e4 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    34e4:	b500      	push	{lr}
    34e6:	b089      	sub	sp, #36	; 0x24
    34e8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    34ea:	2300      	movs	r3, #0
    34ec:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    34f0:	9b01      	ldr	r3, [sp, #4]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d031      	beq.n	355a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    34f6:	4b1b      	ldr	r3, [pc, #108]	; (3564 <Clock_Ip_CompleteSOSC+0x80>)
    34f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34fc:	f003 0301 	and.w	r3, r3, #1
    3500:	2b00      	cmp	r3, #0
    3502:	d02a      	beq.n	355a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3504:	aa03      	add	r2, sp, #12
    3506:	a904      	add	r1, sp, #16
    3508:	a805      	add	r0, sp, #20
    350a:	f24c 3350 	movw	r3, #50000	; 0xc350
    350e:	f7ff fd1d 	bl	2f4c <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3512:	4b14      	ldr	r3, [pc, #80]	; (3564 <Clock_Ip_CompleteSOSC+0x80>)
    3514:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3518:	0e1b      	lsrs	r3, r3, #24
    351a:	f003 0301 	and.w	r3, r3, #1
    351e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3520:	9a03      	ldr	r2, [sp, #12]
    3522:	a904      	add	r1, sp, #16
    3524:	ab05      	add	r3, sp, #20
    3526:	4618      	mov	r0, r3
    3528:	f7ff fd2a 	bl	2f80 <Clock_Ip_TimeoutExpired>
    352c:	4603      	mov	r3, r0
    352e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3532:	9b06      	ldr	r3, [sp, #24]
    3534:	2b00      	cmp	r3, #0
    3536:	d106      	bne.n	3546 <Clock_Ip_CompleteSOSC+0x62>
    3538:	f89d 301f 	ldrb.w	r3, [sp, #31]
    353c:	f083 0301 	eor.w	r3, r3, #1
    3540:	b2db      	uxtb	r3, r3
    3542:	2b00      	cmp	r3, #0
    3544:	d1e5      	bne.n	3512 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3546:	f89d 301f 	ldrb.w	r3, [sp, #31]
    354a:	2b00      	cmp	r3, #0
    354c:	d005      	beq.n	355a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    354e:	9b01      	ldr	r3, [sp, #4]
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	4619      	mov	r1, r3
    3554:	2001      	movs	r0, #1
    3556:	f7ff fce9 	bl	2f2c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    355a:	bf00      	nop
    355c:	b009      	add	sp, #36	; 0x24
    355e:	f85d fb04 	ldr.w	pc, [sp], #4
    3562:	bf00      	nop
    3564:	40064000 	.word	0x40064000

00003568 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3568:	b500      	push	{lr}
    356a:	b083      	sub	sp, #12
    356c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    356e:	9801      	ldr	r0, [sp, #4]
    3570:	f000 f8c0 	bl	36f4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3574:	bf00      	nop
    3576:	b003      	add	sp, #12
    3578:	f85d fb04 	ldr.w	pc, [sp], #4

0000357c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    357c:	b500      	push	{lr}
    357e:	b083      	sub	sp, #12
    3580:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3582:	9b01      	ldr	r3, [sp, #4]
    3584:	2b00      	cmp	r3, #0
    3586:	d002      	beq.n	358e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3588:	9801      	ldr	r0, [sp, #4]
    358a:	f000 f8c3 	bl	3714 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    358e:	bf00      	nop
    3590:	b003      	add	sp, #12
    3592:	f85d fb04 	ldr.w	pc, [sp], #4

00003596 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3596:	b082      	sub	sp, #8
    3598:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    359a:	4b11      	ldr	r3, [pc, #68]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    359c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35a0:	4a0f      	ldr	r2, [pc, #60]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    35a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    35aa:	4b0d      	ldr	r3, [pc, #52]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35b0:	4a0b      	ldr	r2, [pc, #44]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    35b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    35ba:	4b09      	ldr	r3, [pc, #36]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35c0:	4a07      	ldr	r2, [pc, #28]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    35c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    35ca:	4b05      	ldr	r3, [pc, #20]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35d0:	4a03      	ldr	r2, [pc, #12]	; (35e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35d2:	f023 0301 	bic.w	r3, r3, #1
    35d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    35da:	bf00      	nop
    35dc:	b002      	add	sp, #8
    35de:	4770      	bx	lr
    35e0:	40064000 	.word	0x40064000

000035e4 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    35e4:	b082      	sub	sp, #8
    35e6:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    35e8:	9b01      	ldr	r3, [sp, #4]
    35ea:	891b      	ldrh	r3, [r3, #8]
    35ec:	2b01      	cmp	r3, #1
    35ee:	d174      	bne.n	36da <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    35f0:	9b01      	ldr	r3, [sp, #4]
    35f2:	7bdb      	ldrb	r3, [r3, #15]
    35f4:	2b00      	cmp	r3, #0
    35f6:	d002      	beq.n	35fe <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    35f8:	2b01      	cmp	r3, #1
    35fa:	d009      	beq.n	3610 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    35fc:	e011      	b.n	3622 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    35fe:	4b39      	ldr	r3, [pc, #228]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3600:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3604:	4a37      	ldr	r2, [pc, #220]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3606:	f023 0308 	bic.w	r3, r3, #8
    360a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    360e:	e008      	b.n	3622 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3610:	4b34      	ldr	r3, [pc, #208]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3612:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3616:	4a33      	ldr	r2, [pc, #204]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3618:	f043 0308 	orr.w	r3, r3, #8
    361c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3620:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3622:	4b30      	ldr	r3, [pc, #192]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3624:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3628:	4a2e      	ldr	r2, [pc, #184]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    362a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    362e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3632:	9b01      	ldr	r3, [sp, #4]
    3634:	685b      	ldr	r3, [r3, #4]
    3636:	4a2c      	ldr	r2, [pc, #176]	; (36e8 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3638:	4293      	cmp	r3, r2
    363a:	d90d      	bls.n	3658 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    363c:	9b01      	ldr	r3, [sp, #4]
    363e:	685b      	ldr	r3, [r3, #4]
    3640:	4a2a      	ldr	r2, [pc, #168]	; (36ec <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3642:	4293      	cmp	r3, r2
    3644:	d208      	bcs.n	3658 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3646:	4b27      	ldr	r3, [pc, #156]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3648:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    364c:	4a25      	ldr	r2, [pc, #148]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    364e:	f043 0320 	orr.w	r3, r3, #32
    3652:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3656:	e007      	b.n	3668 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3658:	4b22      	ldr	r3, [pc, #136]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    365a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    365e:	4a21      	ldr	r2, [pc, #132]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3660:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3664:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3668:	9b01      	ldr	r3, [sp, #4]
    366a:	7b1b      	ldrb	r3, [r3, #12]
    366c:	2b00      	cmp	r3, #0
    366e:	d108      	bne.n	3682 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3670:	4b1c      	ldr	r3, [pc, #112]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3672:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3676:	4a1b      	ldr	r2, [pc, #108]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3678:	f043 0304 	orr.w	r3, r3, #4
    367c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3680:	e007      	b.n	3692 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3682:	4b18      	ldr	r3, [pc, #96]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3684:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3688:	4a16      	ldr	r2, [pc, #88]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    368a:	f023 0304 	bic.w	r3, r3, #4
    368e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3692:	9b01      	ldr	r3, [sp, #4]
    3694:	7c1b      	ldrb	r3, [r3, #16]
    3696:	2b02      	cmp	r3, #2
    3698:	d011      	beq.n	36be <Clock_Ip_SetSOSC_TrustedCall+0xda>
    369a:	2b02      	cmp	r3, #2
    369c:	dc14      	bgt.n	36c8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    369e:	2b00      	cmp	r3, #0
    36a0:	d002      	beq.n	36a8 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    36a2:	2b01      	cmp	r3, #1
    36a4:	d005      	beq.n	36b2 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    36a6:	e00f      	b.n	36c8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    36a8:	4b0e      	ldr	r3, [pc, #56]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36aa:	2201      	movs	r2, #1
    36ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    36b0:	e014      	b.n	36dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    36b2:	4b0c      	ldr	r3, [pc, #48]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    36b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    36bc:	e00e      	b.n	36dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    36be:	4b09      	ldr	r3, [pc, #36]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36c0:	4a0b      	ldr	r2, [pc, #44]	; (36f0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    36c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    36c6:	e009      	b.n	36dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    36c8:	4b06      	ldr	r3, [pc, #24]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    36ce:	4a05      	ldr	r2, [pc, #20]	; (36e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36d0:	f043 0301 	orr.w	r3, r3, #1
    36d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    36d8:	e000      	b.n	36dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    36da:	bf00      	nop
}
    36dc:	bf00      	nop
    36de:	b002      	add	sp, #8
    36e0:	4770      	bx	lr
    36e2:	bf00      	nop
    36e4:	40064000 	.word	0x40064000
    36e8:	003d08ff 	.word	0x003d08ff
    36ec:	007a1200 	.word	0x007a1200
    36f0:	00030001 	.word	0x00030001

000036f4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    36f4:	b082      	sub	sp, #8
    36f6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    36f8:	4b05      	ldr	r3, [pc, #20]	; (3710 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    36fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    36fe:	4a04      	ldr	r2, [pc, #16]	; (3710 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3700:	f023 0301 	bic.w	r3, r3, #1
    3704:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3708:	bf00      	nop
    370a:	b002      	add	sp, #8
    370c:	4770      	bx	lr
    370e:	bf00      	nop
    3710:	40064000 	.word	0x40064000

00003714 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3714:	b082      	sub	sp, #8
    3716:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	891b      	ldrh	r3, [r3, #8]
    371c:	2b01      	cmp	r3, #1
    371e:	d107      	bne.n	3730 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3720:	4b05      	ldr	r3, [pc, #20]	; (3738 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3722:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3726:	4a04      	ldr	r2, [pc, #16]	; (3738 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3728:	f043 0301 	orr.w	r3, r3, #1
    372c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3730:	bf00      	nop
    3732:	b002      	add	sp, #8
    3734:	4770      	bx	lr
    3736:	bf00      	nop
    3738:	40064000 	.word	0x40064000

0000373c <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    373c:	b082      	sub	sp, #8
    373e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3740:	bf00      	nop
    3742:	b002      	add	sp, #8
    3744:	4770      	bx	lr

00003746 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3746:	b082      	sub	sp, #8
    3748:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    374a:	2300      	movs	r3, #0
}
    374c:	4618      	mov	r0, r3
    374e:	b002      	add	sp, #8
    3750:	4770      	bx	lr

00003752 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3752:	b082      	sub	sp, #8
    3754:	9001      	str	r0, [sp, #4]
    3756:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3758:	bf00      	nop
    375a:	b002      	add	sp, #8
    375c:	4770      	bx	lr
	...

00003760 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3760:	b082      	sub	sp, #8
    3762:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3764:	bf00      	nop
    3766:	b002      	add	sp, #8
    3768:	4770      	bx	lr

0000376a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    376a:	b082      	sub	sp, #8
    376c:	9001      	str	r0, [sp, #4]
    376e:	460b      	mov	r3, r1
    3770:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3774:	bf00      	nop
    3776:	b002      	add	sp, #8
    3778:	4770      	bx	lr

0000377a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    377a:	b500      	push	{lr}
    377c:	b083      	sub	sp, #12
    377e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3780:	9b01      	ldr	r3, [sp, #4]
    3782:	2b00      	cmp	r3, #0
    3784:	d002      	beq.n	378c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3786:	9801      	ldr	r0, [sp, #4]
    3788:	f000 f8e7 	bl	395a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    378c:	bf00      	nop
    378e:	b003      	add	sp, #12
    3790:	f85d fb04 	ldr.w	pc, [sp], #4

00003794 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3794:	b500      	push	{lr}
    3796:	b085      	sub	sp, #20
    3798:	9001      	str	r0, [sp, #4]
    379a:	460b      	mov	r3, r1
    379c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37a0:	9b01      	ldr	r3, [sp, #4]
    37a2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37a8:	2b00      	cmp	r3, #0
    37aa:	d003      	beq.n	37b4 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    37ac:	2300      	movs	r3, #0
    37ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    37b2:	e002      	b.n	37ba <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37b4:	2301      	movs	r3, #1
    37b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    37ba:	ab02      	add	r3, sp, #8
    37bc:	4618      	mov	r0, r3
    37be:	f7ff ffdc 	bl	377a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    37c2:	bf00      	nop
    37c4:	b005      	add	sp, #20
    37c6:	f85d fb04 	ldr.w	pc, [sp], #4

000037ca <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    37ca:	b500      	push	{lr}
    37cc:	b083      	sub	sp, #12
    37ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37d0:	9b01      	ldr	r3, [sp, #4]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d002      	beq.n	37dc <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    37d6:	9801      	ldr	r0, [sp, #4]
    37d8:	f000 f8d6 	bl	3988 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37dc:	bf00      	nop
    37de:	b003      	add	sp, #12
    37e0:	f85d fb04 	ldr.w	pc, [sp], #4

000037e4 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37e4:	b500      	push	{lr}
    37e6:	b085      	sub	sp, #20
    37e8:	9001      	str	r0, [sp, #4]
    37ea:	460b      	mov	r3, r1
    37ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37f0:	9b01      	ldr	r3, [sp, #4]
    37f2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37f8:	2b00      	cmp	r3, #0
    37fa:	d003      	beq.n	3804 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    37fc:	2300      	movs	r3, #0
    37fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    3802:	e002      	b.n	380a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3804:	2301      	movs	r3, #1
    3806:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    380a:	ab02      	add	r3, sp, #8
    380c:	4618      	mov	r0, r3
    380e:	f7ff ffdc 	bl	37ca <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3812:	bf00      	nop
    3814:	b005      	add	sp, #20
    3816:	f85d fb04 	ldr.w	pc, [sp], #4

0000381a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    381a:	b500      	push	{lr}
    381c:	b083      	sub	sp, #12
    381e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3820:	9b01      	ldr	r3, [sp, #4]
    3822:	2b00      	cmp	r3, #0
    3824:	d002      	beq.n	382c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3826:	9801      	ldr	r0, [sp, #4]
    3828:	f000 f8c6 	bl	39b8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    382c:	bf00      	nop
    382e:	b003      	add	sp, #12
    3830:	f85d fb04 	ldr.w	pc, [sp], #4

00003834 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3834:	b500      	push	{lr}
    3836:	b085      	sub	sp, #20
    3838:	9001      	str	r0, [sp, #4]
    383a:	460b      	mov	r3, r1
    383c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3840:	9b01      	ldr	r3, [sp, #4]
    3842:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3844:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3848:	2b00      	cmp	r3, #0
    384a:	d003      	beq.n	3854 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    384c:	2300      	movs	r3, #0
    384e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3852:	e002      	b.n	385a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3854:	2301      	movs	r3, #1
    3856:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    385a:	ab02      	add	r3, sp, #8
    385c:	4618      	mov	r0, r3
    385e:	f7ff ffdc 	bl	381a <Clock_Ip_ClockSetSimClkoutEnable>
}
    3862:	bf00      	nop
    3864:	b005      	add	sp, #20
    3866:	f85d fb04 	ldr.w	pc, [sp], #4

0000386a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    386a:	b500      	push	{lr}
    386c:	b083      	sub	sp, #12
    386e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3870:	9b01      	ldr	r3, [sp, #4]
    3872:	2b00      	cmp	r3, #0
    3874:	d002      	beq.n	387c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3876:	9801      	ldr	r0, [sp, #4]
    3878:	f000 f8b6 	bl	39e8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    387c:	bf00      	nop
    387e:	b003      	add	sp, #12
    3880:	f85d fb04 	ldr.w	pc, [sp], #4

00003884 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3884:	b500      	push	{lr}
    3886:	b085      	sub	sp, #20
    3888:	9001      	str	r0, [sp, #4]
    388a:	460b      	mov	r3, r1
    388c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3890:	9b01      	ldr	r3, [sp, #4]
    3892:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3894:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3898:	2b00      	cmp	r3, #0
    389a:	d003      	beq.n	38a4 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    389c:	2300      	movs	r3, #0
    389e:	f8ad 300c 	strh.w	r3, [sp, #12]
    38a2:	e002      	b.n	38aa <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    38a4:	2301      	movs	r3, #1
    38a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    38aa:	ab02      	add	r3, sp, #8
    38ac:	4618      	mov	r0, r3
    38ae:	f7ff ffdc 	bl	386a <Clock_Ip_ClockSetPccCgcEnable>
}
    38b2:	bf00      	nop
    38b4:	b005      	add	sp, #20
    38b6:	f85d fb04 	ldr.w	pc, [sp], #4

000038ba <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    38ba:	b500      	push	{lr}
    38bc:	b083      	sub	sp, #12
    38be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38c0:	9b01      	ldr	r3, [sp, #4]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d002      	beq.n	38cc <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    38c6:	9801      	ldr	r0, [sp, #4]
    38c8:	f000 f8bc 	bl	3a44 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38cc:	bf00      	nop
    38ce:	b003      	add	sp, #12
    38d0:	f85d fb04 	ldr.w	pc, [sp], #4

000038d4 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    38d4:	b500      	push	{lr}
    38d6:	b085      	sub	sp, #20
    38d8:	9001      	str	r0, [sp, #4]
    38da:	460b      	mov	r3, r1
    38dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    38e0:	9b01      	ldr	r3, [sp, #4]
    38e2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    38e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d003      	beq.n	38f4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    38ec:	2300      	movs	r3, #0
    38ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    38f2:	e002      	b.n	38fa <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    38f4:	2301      	movs	r3, #1
    38f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    38fa:	ab02      	add	r3, sp, #8
    38fc:	4618      	mov	r0, r3
    38fe:	f7ff ffdc 	bl	38ba <Clock_Ip_ClockSetSimGate>
}
    3902:	bf00      	nop
    3904:	b005      	add	sp, #20
    3906:	f85d fb04 	ldr.w	pc, [sp], #4

0000390a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    390a:	b500      	push	{lr}
    390c:	b083      	sub	sp, #12
    390e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3910:	9b01      	ldr	r3, [sp, #4]
    3912:	2b00      	cmp	r3, #0
    3914:	d002      	beq.n	391c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3916:	9801      	ldr	r0, [sp, #4]
    3918:	f000 f8c0 	bl	3a9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    391c:	bf00      	nop
    391e:	b003      	add	sp, #12
    3920:	f85d fb04 	ldr.w	pc, [sp], #4

00003924 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3924:	b500      	push	{lr}
    3926:	b085      	sub	sp, #20
    3928:	9001      	str	r0, [sp, #4]
    392a:	460b      	mov	r3, r1
    392c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3930:	9b01      	ldr	r3, [sp, #4]
    3932:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3934:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3938:	2b00      	cmp	r3, #0
    393a:	d003      	beq.n	3944 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    393c:	2300      	movs	r3, #0
    393e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3942:	e002      	b.n	394a <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3944:	2301      	movs	r3, #1
    3946:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    394a:	ab02      	add	r3, sp, #8
    394c:	4618      	mov	r0, r3
    394e:	f7ff ffdc 	bl	390a <Clock_Ip_ClockSetSimTraceEnable>
}
    3952:	bf00      	nop
    3954:	b005      	add	sp, #20
    3956:	f85d fb04 	ldr.w	pc, [sp], #4

0000395a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    395a:	b084      	sub	sp, #16
    395c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    395e:	4b09      	ldr	r3, [pc, #36]	; (3984 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3960:	691b      	ldr	r3, [r3, #16]
    3962:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3964:	9b03      	ldr	r3, [sp, #12]
    3966:	f023 0301 	bic.w	r3, r3, #1
    396a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    396c:	9b01      	ldr	r3, [sp, #4]
    396e:	889b      	ldrh	r3, [r3, #4]
    3970:	461a      	mov	r2, r3
    3972:	9b03      	ldr	r3, [sp, #12]
    3974:	4313      	orrs	r3, r2
    3976:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3978:	4a02      	ldr	r2, [pc, #8]	; (3984 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    397a:	9b03      	ldr	r3, [sp, #12]
    397c:	6113      	str	r3, [r2, #16]
}
    397e:	bf00      	nop
    3980:	b004      	add	sp, #16
    3982:	4770      	bx	lr
    3984:	40048000 	.word	0x40048000

00003988 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3988:	b084      	sub	sp, #16
    398a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    398c:	4b09      	ldr	r3, [pc, #36]	; (39b4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    398e:	691b      	ldr	r3, [r3, #16]
    3990:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3992:	9b03      	ldr	r3, [sp, #12]
    3994:	f023 0302 	bic.w	r3, r3, #2
    3998:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    399a:	9b01      	ldr	r3, [sp, #4]
    399c:	889b      	ldrh	r3, [r3, #4]
    399e:	005b      	lsls	r3, r3, #1
    39a0:	9a03      	ldr	r2, [sp, #12]
    39a2:	4313      	orrs	r3, r2
    39a4:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    39a6:	4a03      	ldr	r2, [pc, #12]	; (39b4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    39a8:	9b03      	ldr	r3, [sp, #12]
    39aa:	6113      	str	r3, [r2, #16]
}
    39ac:	bf00      	nop
    39ae:	b004      	add	sp, #16
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop
    39b4:	40048000 	.word	0x40048000

000039b8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39b8:	b084      	sub	sp, #16
    39ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    39bc:	4b09      	ldr	r3, [pc, #36]	; (39e4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    39be:	685b      	ldr	r3, [r3, #4]
    39c0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    39c2:	9b03      	ldr	r3, [sp, #12]
    39c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    39c8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    39ca:	9b01      	ldr	r3, [sp, #4]
    39cc:	889b      	ldrh	r3, [r3, #4]
    39ce:	02db      	lsls	r3, r3, #11
    39d0:	9a03      	ldr	r2, [sp, #12]
    39d2:	4313      	orrs	r3, r2
    39d4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    39d6:	4a03      	ldr	r2, [pc, #12]	; (39e4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    39d8:	9b03      	ldr	r3, [sp, #12]
    39da:	6053      	str	r3, [r2, #4]
}
    39dc:	bf00      	nop
    39de:	b004      	add	sp, #16
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop
    39e4:	40048000 	.word	0x40048000

000039e8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39e8:	b084      	sub	sp, #16
    39ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    39ec:	4913      	ldr	r1, [pc, #76]	; (3a3c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    39ee:	9b01      	ldr	r3, [sp, #4]
    39f0:	681a      	ldr	r2, [r3, #0]
    39f2:	4813      	ldr	r0, [pc, #76]	; (3a40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    39f4:	4613      	mov	r3, r2
    39f6:	00db      	lsls	r3, r3, #3
    39f8:	4413      	add	r3, r2
    39fa:	4403      	add	r3, r0
    39fc:	3306      	adds	r3, #6
    39fe:	781b      	ldrb	r3, [r3, #0]
    3a00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3a04:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3a06:	9b03      	ldr	r3, [sp, #12]
    3a08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3a0c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3a0e:	9b01      	ldr	r3, [sp, #4]
    3a10:	889b      	ldrh	r3, [r3, #4]
    3a12:	079b      	lsls	r3, r3, #30
    3a14:	9a03      	ldr	r2, [sp, #12]
    3a16:	4313      	orrs	r3, r2
    3a18:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3a1a:	4908      	ldr	r1, [pc, #32]	; (3a3c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3a1c:	9b01      	ldr	r3, [sp, #4]
    3a1e:	681a      	ldr	r2, [r3, #0]
    3a20:	4807      	ldr	r0, [pc, #28]	; (3a40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3a22:	4613      	mov	r3, r2
    3a24:	00db      	lsls	r3, r3, #3
    3a26:	4413      	add	r3, r2
    3a28:	4403      	add	r3, r0
    3a2a:	3306      	adds	r3, #6
    3a2c:	781b      	ldrb	r3, [r3, #0]
    3a2e:	461a      	mov	r2, r3
    3a30:	9b03      	ldr	r3, [sp, #12]
    3a32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3a36:	bf00      	nop
    3a38:	b004      	add	sp, #16
    3a3a:	4770      	bx	lr
    3a3c:	40065000 	.word	0x40065000
    3a40:	00008770 	.word	0x00008770

00003a44 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a44:	b086      	sub	sp, #24
    3a46:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3a48:	9b01      	ldr	r3, [sp, #4]
    3a4a:	889b      	ldrh	r3, [r3, #4]
    3a4c:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3a4e:	9b01      	ldr	r3, [sp, #4]
    3a50:	681a      	ldr	r2, [r3, #0]
    3a52:	4910      	ldr	r1, [pc, #64]	; (3a94 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3a54:	4613      	mov	r3, r2
    3a56:	00db      	lsls	r3, r3, #3
    3a58:	4413      	add	r3, r2
    3a5a:	440b      	add	r3, r1
    3a5c:	3306      	adds	r3, #6
    3a5e:	781b      	ldrb	r3, [r3, #0]
    3a60:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3a62:	4b0d      	ldr	r3, [pc, #52]	; (3a98 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3a66:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3a68:	2201      	movs	r2, #1
    3a6a:	9b04      	ldr	r3, [sp, #16]
    3a6c:	fa02 f303 	lsl.w	r3, r2, r3
    3a70:	43db      	mvns	r3, r3
    3a72:	9a03      	ldr	r2, [sp, #12]
    3a74:	4013      	ands	r3, r2
    3a76:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3a78:	9a05      	ldr	r2, [sp, #20]
    3a7a:	9b04      	ldr	r3, [sp, #16]
    3a7c:	fa02 f303 	lsl.w	r3, r2, r3
    3a80:	9a03      	ldr	r2, [sp, #12]
    3a82:	4313      	orrs	r3, r2
    3a84:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3a86:	4a04      	ldr	r2, [pc, #16]	; (3a98 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3a88:	9b03      	ldr	r3, [sp, #12]
    3a8a:	6413      	str	r3, [r2, #64]	; 0x40
}
    3a8c:	bf00      	nop
    3a8e:	b006      	add	sp, #24
    3a90:	4770      	bx	lr
    3a92:	bf00      	nop
    3a94:	00008770 	.word	0x00008770
    3a98:	40048000 	.word	0x40048000

00003a9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a9c:	b084      	sub	sp, #16
    3a9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3aa0:	4b0a      	ldr	r3, [pc, #40]	; (3acc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3aa4:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3aa6:	9b01      	ldr	r3, [sp, #4]
    3aa8:	889b      	ldrh	r3, [r3, #4]
    3aaa:	2b01      	cmp	r3, #1
    3aac:	d104      	bne.n	3ab8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3aae:	9b03      	ldr	r3, [sp, #12]
    3ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3ab4:	9303      	str	r3, [sp, #12]
    3ab6:	e003      	b.n	3ac0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3ab8:	9b03      	ldr	r3, [sp, #12]
    3aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3abe:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3ac0:	4a02      	ldr	r2, [pc, #8]	; (3acc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3ac2:	9b03      	ldr	r3, [sp, #12]
    3ac4:	6693      	str	r3, [r2, #104]	; 0x68
}
    3ac6:	bf00      	nop
    3ac8:	b004      	add	sp, #16
    3aca:	4770      	bx	lr
    3acc:	40048000 	.word	0x40048000

00003ad0 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3ad0:	b082      	sub	sp, #8
    3ad2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ad4:	bf00      	nop
    3ad6:	b002      	add	sp, #8
    3ad8:	4770      	bx	lr

00003ada <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3ada:	b082      	sub	sp, #8
    3adc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ade:	bf00      	nop
    3ae0:	b002      	add	sp, #8
    3ae2:	4770      	bx	lr

00003ae4 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae4:	b500      	push	{lr}
    3ae6:	b083      	sub	sp, #12
    3ae8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3aea:	9b01      	ldr	r3, [sp, #4]
    3aec:	2b00      	cmp	r3, #0
    3aee:	d002      	beq.n	3af6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3af0:	9801      	ldr	r0, [sp, #4]
    3af2:	f000 f8d1 	bl	3c98 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3af6:	bf00      	nop
    3af8:	b003      	add	sp, #12
    3afa:	f85d fb04 	ldr.w	pc, [sp], #4

00003afe <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3afe:	b500      	push	{lr}
    3b00:	b083      	sub	sp, #12
    3b02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b04:	9b01      	ldr	r3, [sp, #4]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d002      	beq.n	3b10 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3b0a:	9801      	ldr	r0, [sp, #4]
    3b0c:	f000 f950 	bl	3db0 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b10:	bf00      	nop
    3b12:	b003      	add	sp, #12
    3b14:	f85d fb04 	ldr.w	pc, [sp], #4

00003b18 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3b18:	b500      	push	{lr}
    3b1a:	b083      	sub	sp, #12
    3b1c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3b1e:	9801      	ldr	r0, [sp, #4]
    3b20:	f000 f98e 	bl	3e40 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b24:	bf00      	nop
    3b26:	b003      	add	sp, #12
    3b28:	f85d fb04 	ldr.w	pc, [sp], #4

00003b2c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3b2c:	b500      	push	{lr}
    3b2e:	b083      	sub	sp, #12
    3b30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b32:	9b01      	ldr	r3, [sp, #4]
    3b34:	2b00      	cmp	r3, #0
    3b36:	d002      	beq.n	3b3e <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3b38:	9801      	ldr	r0, [sp, #4]
    3b3a:	f000 f999 	bl	3e70 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b3e:	bf00      	nop
    3b40:	b003      	add	sp, #12
    3b42:	f85d fb04 	ldr.w	pc, [sp], #4

00003b46 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3b46:	b500      	push	{lr}
    3b48:	b083      	sub	sp, #12
    3b4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b4c:	9b01      	ldr	r3, [sp, #4]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d002      	beq.n	3b58 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3b52:	9801      	ldr	r0, [sp, #4]
    3b54:	f000 f9b0 	bl	3eb8 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b58:	bf00      	nop
    3b5a:	b003      	add	sp, #12
    3b5c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b60 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3b60:	b500      	push	{lr}
    3b62:	b083      	sub	sp, #12
    3b64:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3b66:	9801      	ldr	r0, [sp, #4]
    3b68:	f000 f9ba 	bl	3ee0 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b6c:	bf00      	nop
    3b6e:	b003      	add	sp, #12
    3b70:	f85d fb04 	ldr.w	pc, [sp], #4

00003b74 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3b74:	b500      	push	{lr}
    3b76:	b083      	sub	sp, #12
    3b78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b7a:	9b01      	ldr	r3, [sp, #4]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d002      	beq.n	3b86 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3b80:	9801      	ldr	r0, [sp, #4]
    3b82:	f000 f9bd 	bl	3f00 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b86:	bf00      	nop
    3b88:	b003      	add	sp, #12
    3b8a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b8e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3b8e:	b500      	push	{lr}
    3b90:	b083      	sub	sp, #12
    3b92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b94:	9b01      	ldr	r3, [sp, #4]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d002      	beq.n	3ba0 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3b9a:	9801      	ldr	r0, [sp, #4]
    3b9c:	f000 f9d4 	bl	3f48 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ba0:	bf00      	nop
    3ba2:	b003      	add	sp, #12
    3ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba8 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3ba8:	b500      	push	{lr}
    3baa:	b083      	sub	sp, #12
    3bac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3bae:	9801      	ldr	r0, [sp, #4]
    3bb0:	f000 f9de 	bl	3f70 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3bb4:	bf00      	nop
    3bb6:	b003      	add	sp, #12
    3bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00003bbc <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3bbc:	b500      	push	{lr}
    3bbe:	b089      	sub	sp, #36	; 0x24
    3bc0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3bc2:	2300      	movs	r3, #0
    3bc4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3bc8:	4b20      	ldr	r3, [pc, #128]	; (3c4c <SetInputSouceSytemClock+0x90>)
    3bca:	695b      	ldr	r3, [r3, #20]
    3bcc:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3bce:	9b06      	ldr	r3, [sp, #24]
    3bd0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3bd4:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3bd6:	9b01      	ldr	r3, [sp, #4]
    3bd8:	061b      	lsls	r3, r3, #24
    3bda:	9a06      	ldr	r2, [sp, #24]
    3bdc:	4313      	orrs	r3, r2
    3bde:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3be0:	4a1a      	ldr	r2, [pc, #104]	; (3c4c <SetInputSouceSytemClock+0x90>)
    3be2:	9b06      	ldr	r3, [sp, #24]
    3be4:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3be6:	aa02      	add	r2, sp, #8
    3be8:	a903      	add	r1, sp, #12
    3bea:	a804      	add	r0, sp, #16
    3bec:	f24c 3350 	movw	r3, #50000	; 0xc350
    3bf0:	f7ff f9ac 	bl	2f4c <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3bf4:	4b15      	ldr	r3, [pc, #84]	; (3c4c <SetInputSouceSytemClock+0x90>)
    3bf6:	691b      	ldr	r3, [r3, #16]
    3bf8:	0e1b      	lsrs	r3, r3, #24
    3bfa:	f003 030f 	and.w	r3, r3, #15
    3bfe:	9a01      	ldr	r2, [sp, #4]
    3c00:	429a      	cmp	r2, r3
    3c02:	bf0c      	ite	eq
    3c04:	2301      	moveq	r3, #1
    3c06:	2300      	movne	r3, #0
    3c08:	b2db      	uxtb	r3, r3
    3c0a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c0c:	9a02      	ldr	r2, [sp, #8]
    3c0e:	a903      	add	r1, sp, #12
    3c10:	ab04      	add	r3, sp, #16
    3c12:	4618      	mov	r0, r3
    3c14:	f7ff f9b4 	bl	2f80 <Clock_Ip_TimeoutExpired>
    3c18:	4603      	mov	r3, r0
    3c1a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3c1e:	9b05      	ldr	r3, [sp, #20]
    3c20:	2b00      	cmp	r3, #0
    3c22:	d106      	bne.n	3c32 <SetInputSouceSytemClock+0x76>
    3c24:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c28:	f083 0301 	eor.w	r3, r3, #1
    3c2c:	b2db      	uxtb	r3, r3
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d1e0      	bne.n	3bf4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3c32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c36:	2b00      	cmp	r3, #0
    3c38:	d003      	beq.n	3c42 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3c3a:	2105      	movs	r1, #5
    3c3c:	2001      	movs	r0, #1
    3c3e:	f7ff f975 	bl	2f2c <Clock_Ip_ReportClockErrors>
    }
}
    3c42:	bf00      	nop
    3c44:	b009      	add	sp, #36	; 0x24
    3c46:	f85d fb04 	ldr.w	pc, [sp], #4
    3c4a:	bf00      	nop
    3c4c:	40064000 	.word	0x40064000

00003c50 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3c50:	b500      	push	{lr}
    3c52:	b083      	sub	sp, #12
    3c54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c56:	9b01      	ldr	r3, [sp, #4]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d002      	beq.n	3c62 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3c5c:	9801      	ldr	r0, [sp, #4]
    3c5e:	f000 f997 	bl	3f90 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c62:	bf00      	nop
    3c64:	b003      	add	sp, #12
    3c66:	f85d fb04 	ldr.w	pc, [sp], #4

00003c6a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3c6a:	b500      	push	{lr}
    3c6c:	b083      	sub	sp, #12
    3c6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c70:	9b01      	ldr	r3, [sp, #4]
    3c72:	2b00      	cmp	r3, #0
    3c74:	d002      	beq.n	3c7c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3c76:	9801      	ldr	r0, [sp, #4]
    3c78:	f000 fa7e 	bl	4178 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c7c:	bf00      	nop
    3c7e:	b003      	add	sp, #12
    3c80:	f85d fb04 	ldr.w	pc, [sp], #4

00003c84 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3c84:	b500      	push	{lr}
    3c86:	b083      	sub	sp, #12
    3c88:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3c8a:	9801      	ldr	r0, [sp, #4]
    3c8c:	f000 fab8 	bl	4200 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3c90:	bf00      	nop
    3c92:	b003      	add	sp, #12
    3c94:	f85d fb04 	ldr.w	pc, [sp], #4

00003c98 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c98:	b500      	push	{lr}
    3c9a:	b08b      	sub	sp, #44	; 0x2c
    3c9c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3c9e:	2300      	movs	r3, #0
    3ca0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3ca4:	9b01      	ldr	r3, [sp, #4]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d10b      	bne.n	3cc2 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3caa:	2305      	movs	r3, #5
    3cac:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3cae:	2301      	movs	r3, #1
    3cb0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3cb4:	2301      	movs	r3, #1
    3cb6:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3cba:	2301      	movs	r3, #1
    3cbc:	f88d 3010 	strb.w	r3, [sp, #16]
    3cc0:	e00e      	b.n	3ce0 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3cc2:	9b01      	ldr	r3, [sp, #4]
    3cc4:	681b      	ldr	r3, [r3, #0]
    3cc6:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3cc8:	9b01      	ldr	r3, [sp, #4]
    3cca:	79db      	ldrb	r3, [r3, #7]
    3ccc:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3cd0:	9b01      	ldr	r3, [sp, #4]
    3cd2:	889b      	ldrh	r3, [r3, #4]
    3cd4:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	7a1b      	ldrb	r3, [r3, #8]
    3cdc:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3ce0:	4b32      	ldr	r3, [pc, #200]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ce2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ce6:	4a31      	ldr	r2, [pc, #196]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ce8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3cec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3cf0:	4b2e      	ldr	r3, [pc, #184]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cf6:	4a2d      	ldr	r2, [pc, #180]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cf8:	f023 0301 	bic.w	r3, r3, #1
    3cfc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d00:	4b2a      	ldr	r3, [pc, #168]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d06:	4a29      	ldr	r2, [pc, #164]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d08:	f023 0304 	bic.w	r3, r3, #4
    3d0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3d10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3d14:	2b01      	cmp	r3, #1
    3d16:	d144      	bne.n	3da2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3d18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3d1c:	4a23      	ldr	r2, [pc, #140]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d1e:	f003 0301 	and.w	r3, r3, #1
    3d22:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3d26:	4b21      	ldr	r3, [pc, #132]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d2c:	4a1f      	ldr	r2, [pc, #124]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d2e:	f043 0301 	orr.w	r3, r3, #1
    3d32:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3d36:	4b1d      	ldr	r3, [pc, #116]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3d40:	009b      	lsls	r3, r3, #2
    3d42:	f003 0304 	and.w	r3, r3, #4
    3d46:	4919      	ldr	r1, [pc, #100]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d48:	4313      	orrs	r3, r2
    3d4a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d4e:	aa05      	add	r2, sp, #20
    3d50:	a906      	add	r1, sp, #24
    3d52:	a807      	add	r0, sp, #28
    3d54:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d58:	f7ff f8f8 	bl	2f4c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3d5c:	4b13      	ldr	r3, [pc, #76]	; (3dac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d62:	0e1b      	lsrs	r3, r3, #24
    3d64:	f003 0301 	and.w	r3, r3, #1
    3d68:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d6a:	9a05      	ldr	r2, [sp, #20]
    3d6c:	a906      	add	r1, sp, #24
    3d6e:	ab07      	add	r3, sp, #28
    3d70:	4618      	mov	r0, r3
    3d72:	f7ff f905 	bl	2f80 <Clock_Ip_TimeoutExpired>
    3d76:	4603      	mov	r3, r0
    3d78:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d7c:	9b08      	ldr	r3, [sp, #32]
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d106      	bne.n	3d90 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3d82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d86:	f083 0301 	eor.w	r3, r3, #1
    3d8a:	b2db      	uxtb	r3, r3
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d1e5      	bne.n	3d5c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3d90:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d94:	2b00      	cmp	r3, #0
    3d96:	d004      	beq.n	3da2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3d98:	9b02      	ldr	r3, [sp, #8]
    3d9a:	4619      	mov	r1, r3
    3d9c:	2001      	movs	r0, #1
    3d9e:	f7ff f8c5 	bl	2f2c <Clock_Ip_ReportClockErrors>
        }
    }
}
    3da2:	bf00      	nop
    3da4:	b00b      	add	sp, #44	; 0x2c
    3da6:	f85d fb04 	ldr.w	pc, [sp], #4
    3daa:	bf00      	nop
    3dac:	40064000 	.word	0x40064000

00003db0 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3db0:	b500      	push	{lr}
    3db2:	b089      	sub	sp, #36	; 0x24
    3db4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3db6:	2300      	movs	r3, #0
    3db8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3dbc:	4b1f      	ldr	r3, [pc, #124]	; (3e3c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dc2:	4a1e      	ldr	r2, [pc, #120]	; (3e3c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dc4:	f043 0301 	orr.w	r3, r3, #1
    3dc8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3dcc:	4b1b      	ldr	r3, [pc, #108]	; (3e3c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dd2:	4a1a      	ldr	r2, [pc, #104]	; (3e3c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dd4:	f043 0304 	orr.w	r3, r3, #4
    3dd8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ddc:	aa03      	add	r2, sp, #12
    3dde:	a904      	add	r1, sp, #16
    3de0:	a805      	add	r0, sp, #20
    3de2:	f24c 3350 	movw	r3, #50000	; 0xc350
    3de6:	f7ff f8b1 	bl	2f4c <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3dea:	4b14      	ldr	r3, [pc, #80]	; (3e3c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3df0:	0e1b      	lsrs	r3, r3, #24
    3df2:	f003 0301 	and.w	r3, r3, #1
    3df6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3df8:	9a03      	ldr	r2, [sp, #12]
    3dfa:	a904      	add	r1, sp, #16
    3dfc:	ab05      	add	r3, sp, #20
    3dfe:	4618      	mov	r0, r3
    3e00:	f7ff f8be 	bl	2f80 <Clock_Ip_TimeoutExpired>
    3e04:	4603      	mov	r3, r0
    3e06:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e0a:	9b06      	ldr	r3, [sp, #24]
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	d106      	bne.n	3e1e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3e10:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e14:	f083 0301 	eor.w	r3, r3, #1
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d1e5      	bne.n	3dea <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3e1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e22:	2b00      	cmp	r3, #0
    3e24:	d005      	beq.n	3e32 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e26:	9b01      	ldr	r3, [sp, #4]
    3e28:	681b      	ldr	r3, [r3, #0]
    3e2a:	4619      	mov	r1, r3
    3e2c:	2001      	movs	r0, #1
    3e2e:	f7ff f87d 	bl	2f2c <Clock_Ip_ReportClockErrors>
    }
}
    3e32:	bf00      	nop
    3e34:	b009      	add	sp, #36	; 0x24
    3e36:	f85d fb04 	ldr.w	pc, [sp], #4
    3e3a:	bf00      	nop
    3e3c:	40064000 	.word	0x40064000

00003e40 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e40:	b082      	sub	sp, #8
    3e42:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3e44:	4b09      	ldr	r3, [pc, #36]	; (3e6c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e4a:	4a08      	ldr	r2, [pc, #32]	; (3e6c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e4c:	f023 0301 	bic.w	r3, r3, #1
    3e50:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e54:	4b05      	ldr	r3, [pc, #20]	; (3e6c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e5a:	4a04      	ldr	r2, [pc, #16]	; (3e6c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e5c:	f023 0304 	bic.w	r3, r3, #4
    3e60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e64:	bf00      	nop
    3e66:	b002      	add	sp, #8
    3e68:	4770      	bx	lr
    3e6a:	bf00      	nop
    3e6c:	40064000 	.word	0x40064000

00003e70 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e70:	b082      	sub	sp, #8
    3e72:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3e74:	4b0f      	ldr	r3, [pc, #60]	; (3eb4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e7a:	4a0e      	ldr	r2, [pc, #56]	; (3eb4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e84:	4b0b      	ldr	r3, [pc, #44]	; (3eb4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e8a:	4a0a      	ldr	r2, [pc, #40]	; (3eb4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e8c:	f023 0304 	bic.w	r3, r3, #4
    3e90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3e94:	4b07      	ldr	r3, [pc, #28]	; (3eb4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e9a:	9b01      	ldr	r3, [sp, #4]
    3e9c:	7a1b      	ldrb	r3, [r3, #8]
    3e9e:	009b      	lsls	r3, r3, #2
    3ea0:	f003 0304 	and.w	r3, r3, #4
    3ea4:	4903      	ldr	r1, [pc, #12]	; (3eb4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ea6:	4313      	orrs	r3, r2
    3ea8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3eac:	bf00      	nop
    3eae:	b002      	add	sp, #8
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop
    3eb4:	40064000 	.word	0x40064000

00003eb8 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3eb8:	b082      	sub	sp, #8
    3eba:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3ebc:	9b01      	ldr	r3, [sp, #4]
    3ebe:	889b      	ldrh	r3, [r3, #4]
    3ec0:	2b01      	cmp	r3, #1
    3ec2:	d107      	bne.n	3ed4 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3ec4:	4b05      	ldr	r3, [pc, #20]	; (3edc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ec6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3eca:	4a04      	ldr	r2, [pc, #16]	; (3edc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ecc:	f043 0304 	orr.w	r3, r3, #4
    3ed0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3ed4:	bf00      	nop
    3ed6:	b002      	add	sp, #8
    3ed8:	4770      	bx	lr
    3eda:	bf00      	nop
    3edc:	40064000 	.word	0x40064000

00003ee0 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3ee0:	b082      	sub	sp, #8
    3ee2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ee4:	4b05      	ldr	r3, [pc, #20]	; (3efc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3eea:	4a04      	ldr	r2, [pc, #16]	; (3efc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3eec:	f023 0304 	bic.w	r3, r3, #4
    3ef0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ef4:	bf00      	nop
    3ef6:	b002      	add	sp, #8
    3ef8:	4770      	bx	lr
    3efa:	bf00      	nop
    3efc:	40064000 	.word	0x40064000

00003f00 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f00:	b082      	sub	sp, #8
    3f02:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3f04:	4b0f      	ldr	r3, [pc, #60]	; (3f44 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f0a:	4a0e      	ldr	r2, [pc, #56]	; (3f44 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3f14:	4b0b      	ldr	r3, [pc, #44]	; (3f44 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f1a:	4a0a      	ldr	r2, [pc, #40]	; (3f44 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f1c:	f023 0302 	bic.w	r3, r3, #2
    3f20:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3f24:	4b07      	ldr	r3, [pc, #28]	; (3f44 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3f2a:	9b01      	ldr	r3, [sp, #4]
    3f2c:	7a5b      	ldrb	r3, [r3, #9]
    3f2e:	005b      	lsls	r3, r3, #1
    3f30:	f003 0302 	and.w	r3, r3, #2
    3f34:	4903      	ldr	r1, [pc, #12]	; (3f44 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f36:	4313      	orrs	r3, r2
    3f38:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3f3c:	bf00      	nop
    3f3e:	b002      	add	sp, #8
    3f40:	4770      	bx	lr
    3f42:	bf00      	nop
    3f44:	40064000 	.word	0x40064000

00003f48 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f48:	b082      	sub	sp, #8
    3f4a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3f4c:	9b01      	ldr	r3, [sp, #4]
    3f4e:	889b      	ldrh	r3, [r3, #4]
    3f50:	2b01      	cmp	r3, #1
    3f52:	d107      	bne.n	3f64 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3f54:	4b05      	ldr	r3, [pc, #20]	; (3f6c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f5a:	4a04      	ldr	r2, [pc, #16]	; (3f6c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3f5c:	f043 0302 	orr.w	r3, r3, #2
    3f60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3f64:	bf00      	nop
    3f66:	b002      	add	sp, #8
    3f68:	4770      	bx	lr
    3f6a:	bf00      	nop
    3f6c:	40064000 	.word	0x40064000

00003f70 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3f70:	b082      	sub	sp, #8
    3f72:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3f74:	4b05      	ldr	r3, [pc, #20]	; (3f8c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f7a:	4a04      	ldr	r2, [pc, #16]	; (3f8c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3f7c:	f023 0302 	bic.w	r3, r3, #2
    3f80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3f84:	bf00      	nop
    3f86:	b002      	add	sp, #8
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop
    3f8c:	40064000 	.word	0x40064000

00003f90 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f90:	b500      	push	{lr}
    3f92:	b08b      	sub	sp, #44	; 0x2c
    3f94:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3f96:	9b01      	ldr	r3, [sp, #4]
    3f98:	681a      	ldr	r2, [r3, #0]
    3f9a:	4975      	ldr	r1, [pc, #468]	; (4170 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3f9c:	4613      	mov	r3, r2
    3f9e:	00db      	lsls	r3, r3, #3
    3fa0:	4413      	add	r3, r2
    3fa2:	440b      	add	r3, r1
    3fa4:	781b      	ldrb	r3, [r3, #0]
    3fa6:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3fa8:	2300      	movs	r3, #0
    3faa:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3fae:	2300      	movs	r3, #0
    3fb0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3fb4:	4b6f      	ldr	r3, [pc, #444]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fba:	4a6e      	ldr	r2, [pc, #440]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fc0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3fc4:	4b6b      	ldr	r3, [pc, #428]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3fce:	2b00      	cmp	r3, #0
    3fd0:	d07d      	beq.n	40ce <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3fd2:	9b01      	ldr	r3, [sp, #4]
    3fd4:	79db      	ldrb	r3, [r3, #7]
    3fd6:	461a      	mov	r2, r3
    3fd8:	4b66      	ldr	r3, [pc, #408]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fda:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3fde:	f003 0303 	and.w	r3, r3, #3
    3fe2:	429a      	cmp	r2, r3
    3fe4:	d10b      	bne.n	3ffe <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3fe6:	9b01      	ldr	r3, [sp, #4]
    3fe8:	799b      	ldrb	r3, [r3, #6]
    3fea:	461a      	mov	r2, r3
    3fec:	4b61      	ldr	r3, [pc, #388]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ff2:	08db      	lsrs	r3, r3, #3
    3ff4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3ff8:	429a      	cmp	r2, r3
    3ffa:	f000 80b4 	beq.w	4166 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3ffe:	4b5d      	ldr	r3, [pc, #372]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4004:	f003 0301 	and.w	r3, r3, #1
    4008:	2b00      	cmp	r3, #0
    400a:	d105      	bne.n	4018 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    400c:	2301      	movs	r3, #1
    400e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    4012:	2000      	movs	r0, #0
    4014:	f7ff fd66 	bl	3ae4 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4018:	2002      	movs	r0, #2
    401a:	f7ff fdcf 	bl	3bbc <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    401e:	4b55      	ldr	r3, [pc, #340]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4020:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4024:	4a53      	ldr	r2, [pc, #332]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4026:	f023 0301 	bic.w	r3, r3, #1
    402a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    402e:	9b01      	ldr	r3, [sp, #4]
    4030:	889b      	ldrh	r3, [r3, #4]
    4032:	2b01      	cmp	r3, #1
    4034:	f040 8097 	bne.w	4166 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4038:	9b01      	ldr	r3, [sp, #4]
    403a:	79db      	ldrb	r3, [r3, #7]
    403c:	4a4d      	ldr	r2, [pc, #308]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    403e:	f003 0303 	and.w	r3, r3, #3
    4042:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4046:	4b4b      	ldr	r3, [pc, #300]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4048:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    404c:	9b01      	ldr	r3, [sp, #4]
    404e:	799b      	ldrb	r3, [r3, #6]
    4050:	00db      	lsls	r3, r3, #3
    4052:	f003 0308 	and.w	r3, r3, #8
    4056:	4313      	orrs	r3, r2
    4058:	4a46      	ldr	r2, [pc, #280]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    405a:	f043 0301 	orr.w	r3, r3, #1
    405e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4062:	aa03      	add	r2, sp, #12
    4064:	a904      	add	r1, sp, #16
    4066:	a805      	add	r0, sp, #20
    4068:	f24c 3350 	movw	r3, #50000	; 0xc350
    406c:	f7fe ff6e 	bl	2f4c <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4070:	4b40      	ldr	r3, [pc, #256]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4072:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4076:	0e1b      	lsrs	r3, r3, #24
    4078:	f003 0301 	and.w	r3, r3, #1
    407c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    407e:	9a03      	ldr	r2, [sp, #12]
    4080:	a904      	add	r1, sp, #16
    4082:	ab05      	add	r3, sp, #20
    4084:	4618      	mov	r0, r3
    4086:	f7fe ff7b 	bl	2f80 <Clock_Ip_TimeoutExpired>
    408a:	4603      	mov	r3, r0
    408c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4090:	9b06      	ldr	r3, [sp, #24]
    4092:	2b00      	cmp	r3, #0
    4094:	d106      	bne.n	40a4 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4096:	f89d 301f 	ldrb.w	r3, [sp, #31]
    409a:	f083 0301 	eor.w	r3, r3, #1
    409e:	b2db      	uxtb	r3, r3
    40a0:	2b00      	cmp	r3, #0
    40a2:	d1e5      	bne.n	4070 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    40a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40a8:	2b00      	cmp	r3, #0
    40aa:	d005      	beq.n	40b8 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    40ac:	9b01      	ldr	r3, [sp, #4]
    40ae:	681b      	ldr	r3, [r3, #0]
    40b0:	4619      	mov	r1, r3
    40b2:	2001      	movs	r0, #1
    40b4:	f7fe ff3a 	bl	2f2c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    40b8:	2003      	movs	r0, #3
    40ba:	f7ff fd7f 	bl	3bbc <SetInputSouceSytemClock>

                if (SircWasDisabled)
    40be:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    40c2:	2b00      	cmp	r3, #0
    40c4:	d04f      	beq.n	4166 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    40c6:	2002      	movs	r0, #2
    40c8:	f7ff fd26 	bl	3b18 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    40cc:	e04b      	b.n	4166 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    40ce:	4b29      	ldr	r3, [pc, #164]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40d4:	4a27      	ldr	r2, [pc, #156]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40d6:	f023 0301 	bic.w	r3, r3, #1
    40da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    40de:	9b01      	ldr	r3, [sp, #4]
    40e0:	889b      	ldrh	r3, [r3, #4]
    40e2:	2b01      	cmp	r3, #1
    40e4:	d13f      	bne.n	4166 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    40e6:	9b01      	ldr	r3, [sp, #4]
    40e8:	79db      	ldrb	r3, [r3, #7]
    40ea:	4a22      	ldr	r2, [pc, #136]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40ec:	f003 0303 	and.w	r3, r3, #3
    40f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    40f4:	4b1f      	ldr	r3, [pc, #124]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40f6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    40fa:	9b01      	ldr	r3, [sp, #4]
    40fc:	799b      	ldrb	r3, [r3, #6]
    40fe:	00db      	lsls	r3, r3, #3
    4100:	f003 0308 	and.w	r3, r3, #8
    4104:	4313      	orrs	r3, r2
    4106:	4a1b      	ldr	r2, [pc, #108]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4108:	f043 0301 	orr.w	r3, r3, #1
    410c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4110:	aa03      	add	r2, sp, #12
    4112:	a904      	add	r1, sp, #16
    4114:	a805      	add	r0, sp, #20
    4116:	f24c 3350 	movw	r3, #50000	; 0xc350
    411a:	f7fe ff17 	bl	2f4c <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    411e:	4b15      	ldr	r3, [pc, #84]	; (4174 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4120:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4124:	0e1b      	lsrs	r3, r3, #24
    4126:	f003 0301 	and.w	r3, r3, #1
    412a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    412c:	9a03      	ldr	r2, [sp, #12]
    412e:	a904      	add	r1, sp, #16
    4130:	ab05      	add	r3, sp, #20
    4132:	4618      	mov	r0, r3
    4134:	f7fe ff24 	bl	2f80 <Clock_Ip_TimeoutExpired>
    4138:	4603      	mov	r3, r0
    413a:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    413e:	9b06      	ldr	r3, [sp, #24]
    4140:	2b00      	cmp	r3, #0
    4142:	d106      	bne.n	4152 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4144:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4148:	f083 0301 	eor.w	r3, r3, #1
    414c:	b2db      	uxtb	r3, r3
    414e:	2b00      	cmp	r3, #0
    4150:	d1e5      	bne.n	411e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4152:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4156:	2b00      	cmp	r3, #0
    4158:	d005      	beq.n	4166 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    415a:	9b01      	ldr	r3, [sp, #4]
    415c:	681b      	ldr	r3, [r3, #0]
    415e:	4619      	mov	r1, r3
    4160:	2001      	movs	r0, #1
    4162:	f7fe fee3 	bl	2f2c <Clock_Ip_ReportClockErrors>
}
    4166:	bf00      	nop
    4168:	b00b      	add	sp, #44	; 0x2c
    416a:	f85d fb04 	ldr.w	pc, [sp], #4
    416e:	bf00      	nop
    4170:	00008770 	.word	0x00008770
    4174:	40064000 	.word	0x40064000

00004178 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4178:	b500      	push	{lr}
    417a:	b089      	sub	sp, #36	; 0x24
    417c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    417e:	2300      	movs	r3, #0
    4180:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4184:	9b01      	ldr	r3, [sp, #4]
    4186:	889b      	ldrh	r3, [r3, #4]
    4188:	2b01      	cmp	r3, #1
    418a:	d132      	bne.n	41f2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    418c:	4b1b      	ldr	r3, [pc, #108]	; (41fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    418e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4192:	4a1a      	ldr	r2, [pc, #104]	; (41fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4194:	f043 0301 	orr.w	r3, r3, #1
    4198:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    419c:	aa03      	add	r2, sp, #12
    419e:	a904      	add	r1, sp, #16
    41a0:	a805      	add	r0, sp, #20
    41a2:	f24c 3350 	movw	r3, #50000	; 0xc350
    41a6:	f7fe fed1 	bl	2f4c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    41aa:	4b14      	ldr	r3, [pc, #80]	; (41fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    41ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41b0:	0e1b      	lsrs	r3, r3, #24
    41b2:	f003 0301 	and.w	r3, r3, #1
    41b6:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    41b8:	9a03      	ldr	r2, [sp, #12]
    41ba:	a904      	add	r1, sp, #16
    41bc:	ab05      	add	r3, sp, #20
    41be:	4618      	mov	r0, r3
    41c0:	f7fe fede 	bl	2f80 <Clock_Ip_TimeoutExpired>
    41c4:	4603      	mov	r3, r0
    41c6:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    41ca:	9b06      	ldr	r3, [sp, #24]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d106      	bne.n	41de <Clock_Ip_EnableFirc_TrustedCall+0x66>
    41d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    41d4:	f083 0301 	eor.w	r3, r3, #1
    41d8:	b2db      	uxtb	r3, r3
    41da:	2b00      	cmp	r3, #0
    41dc:	d1e5      	bne.n	41aa <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    41de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d005      	beq.n	41f2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    41e6:	9b01      	ldr	r3, [sp, #4]
    41e8:	681b      	ldr	r3, [r3, #0]
    41ea:	4619      	mov	r1, r3
    41ec:	2001      	movs	r0, #1
    41ee:	f7fe fe9d 	bl	2f2c <Clock_Ip_ReportClockErrors>
        }
    }
}
    41f2:	bf00      	nop
    41f4:	b009      	add	sp, #36	; 0x24
    41f6:	f85d fb04 	ldr.w	pc, [sp], #4
    41fa:	bf00      	nop
    41fc:	40064000 	.word	0x40064000

00004200 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4200:	b082      	sub	sp, #8
    4202:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4204:	4b05      	ldr	r3, [pc, #20]	; (421c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    420a:	4a04      	ldr	r2, [pc, #16]	; (421c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    420c:	f023 0301 	bic.w	r3, r3, #1
    4210:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4214:	bf00      	nop
    4216:	b002      	add	sp, #8
    4218:	4770      	bx	lr
    421a:	bf00      	nop
    421c:	40064000 	.word	0x40064000

00004220 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4220:	b082      	sub	sp, #8
    4222:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4224:	bf00      	nop
    4226:	b002      	add	sp, #8
    4228:	4770      	bx	lr

0000422a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    422a:	b082      	sub	sp, #8
    422c:	9001      	str	r0, [sp, #4]
    422e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4230:	bf00      	nop
    4232:	b002      	add	sp, #8
    4234:	4770      	bx	lr

00004236 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4236:	b082      	sub	sp, #8
    4238:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    423a:	bf00      	nop
    423c:	b002      	add	sp, #8
    423e:	4770      	bx	lr

00004240 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4240:	b082      	sub	sp, #8
    4242:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4244:	bf00      	nop
    4246:	b002      	add	sp, #8
    4248:	4770      	bx	lr

0000424a <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    424a:	b082      	sub	sp, #8
    424c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    424e:	2302      	movs	r3, #2
}
    4250:	4618      	mov	r0, r3
    4252:	b002      	add	sp, #8
    4254:	4770      	bx	lr

00004256 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4256:	b082      	sub	sp, #8
    4258:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    425a:	bf00      	nop
    425c:	b002      	add	sp, #8
    425e:	4770      	bx	lr

00004260 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4260:	b500      	push	{lr}
    4262:	b083      	sub	sp, #12
    4264:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	2b00      	cmp	r3, #0
    426a:	d002      	beq.n	4272 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    426c:	9801      	ldr	r0, [sp, #4]
    426e:	f000 f870 	bl	4352 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4272:	bf00      	nop
    4274:	b003      	add	sp, #12
    4276:	f85d fb04 	ldr.w	pc, [sp], #4

0000427a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    427a:	b500      	push	{lr}
    427c:	b083      	sub	sp, #12
    427e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4280:	9b01      	ldr	r3, [sp, #4]
    4282:	2b00      	cmp	r3, #0
    4284:	d002      	beq.n	428c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4286:	9801      	ldr	r0, [sp, #4]
    4288:	f000 f89a 	bl	43c0 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    428c:	bf00      	nop
    428e:	b003      	add	sp, #12
    4290:	f85d fb04 	ldr.w	pc, [sp], #4

00004294 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4294:	b500      	push	{lr}
    4296:	b089      	sub	sp, #36	; 0x24
    4298:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    429a:	2301      	movs	r3, #1
    429c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    429e:	2300      	movs	r3, #0
    42a0:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    42a4:	4b1e      	ldr	r3, [pc, #120]	; (4320 <Clock_Ip_CompleteSpll+0x8c>)
    42a6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42aa:	f003 0301 	and.w	r3, r3, #1
    42ae:	2b00      	cmp	r3, #0
    42b0:	d02f      	beq.n	4312 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    42b2:	aa02      	add	r2, sp, #8
    42b4:	a903      	add	r1, sp, #12
    42b6:	a804      	add	r0, sp, #16
    42b8:	f24c 3350 	movw	r3, #50000	; 0xc350
    42bc:	f7fe fe46 	bl	2f4c <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    42c0:	4b17      	ldr	r3, [pc, #92]	; (4320 <Clock_Ip_CompleteSpll+0x8c>)
    42c2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42c6:	0e1b      	lsrs	r3, r3, #24
    42c8:	f003 0301 	and.w	r3, r3, #1
    42cc:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    42ce:	9a02      	ldr	r2, [sp, #8]
    42d0:	a903      	add	r1, sp, #12
    42d2:	ab04      	add	r3, sp, #16
    42d4:	4618      	mov	r0, r3
    42d6:	f7fe fe53 	bl	2f80 <Clock_Ip_TimeoutExpired>
    42da:	4603      	mov	r3, r0
    42dc:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    42e0:	9b05      	ldr	r3, [sp, #20]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d106      	bne.n	42f4 <Clock_Ip_CompleteSpll+0x60>
    42e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    42ea:	f083 0301 	eor.w	r3, r3, #1
    42ee:	b2db      	uxtb	r3, r3
    42f0:	2b00      	cmp	r3, #0
    42f2:	d1e5      	bne.n	42c0 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    42f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    42f8:	f083 0301 	eor.w	r3, r3, #1
    42fc:	b2db      	uxtb	r3, r3
    42fe:	2b00      	cmp	r3, #0
    4300:	d002      	beq.n	4308 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4302:	2302      	movs	r3, #2
    4304:	9307      	str	r3, [sp, #28]
    4306:	e006      	b.n	4316 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4308:	9901      	ldr	r1, [sp, #4]
    430a:	2001      	movs	r0, #1
    430c:	f7fe fe0e 	bl	2f2c <Clock_Ip_ReportClockErrors>
    4310:	e001      	b.n	4316 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4312:	2300      	movs	r3, #0
    4314:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4316:	9b07      	ldr	r3, [sp, #28]
}
    4318:	4618      	mov	r0, r3
    431a:	b009      	add	sp, #36	; 0x24
    431c:	f85d fb04 	ldr.w	pc, [sp], #4
    4320:	40064000 	.word	0x40064000

00004324 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4324:	b500      	push	{lr}
    4326:	b083      	sub	sp, #12
    4328:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    432a:	9801      	ldr	r0, [sp, #4]
    432c:	f000 f886 	bl	443c <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4330:	bf00      	nop
    4332:	b003      	add	sp, #12
    4334:	f85d fb04 	ldr.w	pc, [sp], #4

00004338 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4338:	b500      	push	{lr}
    433a:	b083      	sub	sp, #12
    433c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    433e:	9b01      	ldr	r3, [sp, #4]
    4340:	2b00      	cmp	r3, #0
    4342:	d002      	beq.n	434a <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4344:	9801      	ldr	r0, [sp, #4]
    4346:	f000 f891 	bl	446c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    434a:	bf00      	nop
    434c:	b003      	add	sp, #12
    434e:	f85d fb04 	ldr.w	pc, [sp], #4

00004352 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4352:	b082      	sub	sp, #8
    4354:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4356:	4b19      	ldr	r3, [pc, #100]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4358:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    435c:	4a17      	ldr	r2, [pc, #92]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    435e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4362:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4366:	4b15      	ldr	r3, [pc, #84]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4368:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    436c:	4a13      	ldr	r2, [pc, #76]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4372:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4376:	4b11      	ldr	r3, [pc, #68]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4378:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    437c:	4a0f      	ldr	r2, [pc, #60]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    437e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4382:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4386:	4b0d      	ldr	r3, [pc, #52]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4388:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    438c:	4a0b      	ldr	r2, [pc, #44]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    438e:	f023 0301 	bic.w	r3, r3, #1
    4392:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4396:	4b09      	ldr	r3, [pc, #36]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4398:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    439c:	4a07      	ldr	r2, [pc, #28]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    439e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    43a2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    43a6:	4b05      	ldr	r3, [pc, #20]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    43a8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    43ac:	4a03      	ldr	r2, [pc, #12]	; (43bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    43ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    43b2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    43b6:	bf00      	nop
    43b8:	b002      	add	sp, #8
    43ba:	4770      	bx	lr
    43bc:	40064000 	.word	0x40064000

000043c0 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    43c0:	b082      	sub	sp, #8
    43c2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    43c4:	9b01      	ldr	r3, [sp, #4]
    43c6:	889b      	ldrh	r3, [r3, #4]
    43c8:	2b01      	cmp	r3, #1
    43ca:	d12f      	bne.n	442c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    43cc:	4b1a      	ldr	r3, [pc, #104]	; (4438 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43ce:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    43d2:	9b01      	ldr	r3, [sp, #4]
    43d4:	7b5b      	ldrb	r3, [r3, #13]
    43d6:	3b01      	subs	r3, #1
    43d8:	021b      	lsls	r3, r3, #8
    43da:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    43de:	9b01      	ldr	r3, [sp, #4]
    43e0:	7d1b      	ldrb	r3, [r3, #20]
    43e2:	3b10      	subs	r3, #16
    43e4:	041b      	lsls	r3, r3, #16
    43e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    43ea:	430b      	orrs	r3, r1
    43ec:	4912      	ldr	r1, [pc, #72]	; (4438 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43ee:	4313      	orrs	r3, r2
    43f0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    43f4:	9b01      	ldr	r3, [sp, #4]
    43f6:	7fdb      	ldrb	r3, [r3, #31]
    43f8:	2b02      	cmp	r3, #2
    43fa:	d011      	beq.n	4420 <Clock_Ip_SetSpll_TrustedCall+0x60>
    43fc:	2b02      	cmp	r3, #2
    43fe:	dc17      	bgt.n	4430 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4400:	2b00      	cmp	r3, #0
    4402:	d002      	beq.n	440a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4404:	2b01      	cmp	r3, #1
    4406:	d005      	beq.n	4414 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4408:	e012      	b.n	4430 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    440a:	4b0b      	ldr	r3, [pc, #44]	; (4438 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    440c:	2200      	movs	r2, #0
    440e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4412:	e00e      	b.n	4432 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4414:	4b08      	ldr	r3, [pc, #32]	; (4438 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    441a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    441e:	e008      	b.n	4432 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4420:	4b05      	ldr	r3, [pc, #20]	; (4438 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4422:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4426:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    442a:	e002      	b.n	4432 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    442c:	bf00      	nop
    442e:	e000      	b.n	4432 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4430:	bf00      	nop
}
    4432:	bf00      	nop
    4434:	b002      	add	sp, #8
    4436:	4770      	bx	lr
    4438:	40064000 	.word	0x40064000

0000443c <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    443c:	b082      	sub	sp, #8
    443e:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4440:	4b09      	ldr	r3, [pc, #36]	; (4468 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4442:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4446:	4a08      	ldr	r2, [pc, #32]	; (4468 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    444c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4450:	4b05      	ldr	r3, [pc, #20]	; (4468 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4452:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4456:	4a04      	ldr	r2, [pc, #16]	; (4468 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4458:	f023 0301 	bic.w	r3, r3, #1
    445c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4460:	bf00      	nop
    4462:	b002      	add	sp, #8
    4464:	4770      	bx	lr
    4466:	bf00      	nop
    4468:	40064000 	.word	0x40064000

0000446c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    446c:	b082      	sub	sp, #8
    446e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4470:	9b01      	ldr	r3, [sp, #4]
    4472:	889b      	ldrh	r3, [r3, #4]
    4474:	2b01      	cmp	r3, #1
    4476:	d107      	bne.n	4488 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4478:	4b05      	ldr	r3, [pc, #20]	; (4490 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    447a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    447e:	4a04      	ldr	r2, [pc, #16]	; (4490 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4480:	f043 0301 	orr.w	r3, r3, #1
    4484:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4488:	bf00      	nop
    448a:	b002      	add	sp, #8
    448c:	4770      	bx	lr
    448e:	bf00      	nop
    4490:	40064000 	.word	0x40064000

00004494 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4494:	b082      	sub	sp, #8
    4496:	9001      	str	r0, [sp, #4]
    4498:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    449a:	bf00      	nop
    449c:	b002      	add	sp, #8
    449e:	4770      	bx	lr

000044a0 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    44a0:	b082      	sub	sp, #8
    44a2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    44a4:	bf00      	nop
    44a6:	b002      	add	sp, #8
    44a8:	4770      	bx	lr

000044aa <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44aa:	b500      	push	{lr}
    44ac:	b083      	sub	sp, #12
    44ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b0:	9b01      	ldr	r3, [sp, #4]
    44b2:	2b00      	cmp	r3, #0
    44b4:	d002      	beq.n	44bc <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    44b6:	9801      	ldr	r0, [sp, #4]
    44b8:	f000 f8ee 	bl	4698 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44bc:	bf00      	nop
    44be:	b003      	add	sp, #12
    44c0:	f85d fb04 	ldr.w	pc, [sp], #4

000044c4 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44c4:	b500      	push	{lr}
    44c6:	b083      	sub	sp, #12
    44c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44ca:	9b01      	ldr	r3, [sp, #4]
    44cc:	2b00      	cmp	r3, #0
    44ce:	d002      	beq.n	44d6 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    44d0:	9801      	ldr	r0, [sp, #4]
    44d2:	f000 f8ff 	bl	46d4 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44d6:	bf00      	nop
    44d8:	b003      	add	sp, #12
    44da:	f85d fb04 	ldr.w	pc, [sp], #4

000044de <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    44de:	b500      	push	{lr}
    44e0:	b083      	sub	sp, #12
    44e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44e4:	9b01      	ldr	r3, [sp, #4]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d002      	beq.n	44f0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    44ea:	9801      	ldr	r0, [sp, #4]
    44ec:	f000 f912 	bl	4714 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f0:	bf00      	nop
    44f2:	b003      	add	sp, #12
    44f4:	f85d fb04 	ldr.w	pc, [sp], #4

000044f8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44f8:	b500      	push	{lr}
    44fa:	b083      	sub	sp, #12
    44fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44fe:	9b01      	ldr	r3, [sp, #4]
    4500:	2b00      	cmp	r3, #0
    4502:	d002      	beq.n	450a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4504:	9801      	ldr	r0, [sp, #4]
    4506:	f000 f925 	bl	4754 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    450a:	bf00      	nop
    450c:	b003      	add	sp, #12
    450e:	f85d fb04 	ldr.w	pc, [sp], #4

00004512 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4512:	b500      	push	{lr}
    4514:	b083      	sub	sp, #12
    4516:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4518:	9b01      	ldr	r3, [sp, #4]
    451a:	2b00      	cmp	r3, #0
    451c:	d002      	beq.n	4524 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    451e:	9801      	ldr	r0, [sp, #4]
    4520:	f000 f936 	bl	4790 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4524:	bf00      	nop
    4526:	b003      	add	sp, #12
    4528:	f85d fb04 	ldr.w	pc, [sp], #4

0000452c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    452c:	b500      	push	{lr}
    452e:	b083      	sub	sp, #12
    4530:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4532:	9b01      	ldr	r3, [sp, #4]
    4534:	2b00      	cmp	r3, #0
    4536:	d002      	beq.n	453e <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4538:	9801      	ldr	r0, [sp, #4]
    453a:	f000 f949 	bl	47d0 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    453e:	bf00      	nop
    4540:	b003      	add	sp, #12
    4542:	f85d fb04 	ldr.w	pc, [sp], #4

00004546 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4546:	b500      	push	{lr}
    4548:	b083      	sub	sp, #12
    454a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    454c:	9b01      	ldr	r3, [sp, #4]
    454e:	2b00      	cmp	r3, #0
    4550:	d002      	beq.n	4558 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4552:	9801      	ldr	r0, [sp, #4]
    4554:	f000 f958 	bl	4808 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4558:	bf00      	nop
    455a:	b003      	add	sp, #12
    455c:	f85d fb04 	ldr.w	pc, [sp], #4

00004560 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4560:	b500      	push	{lr}
    4562:	b083      	sub	sp, #12
    4564:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	2b00      	cmp	r3, #0
    456a:	d002      	beq.n	4572 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    456c:	9801      	ldr	r0, [sp, #4]
    456e:	f000 f969 	bl	4844 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4572:	bf00      	nop
    4574:	b003      	add	sp, #12
    4576:	f85d fb04 	ldr.w	pc, [sp], #4

0000457a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    457a:	b500      	push	{lr}
    457c:	b083      	sub	sp, #12
    457e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4580:	9b01      	ldr	r3, [sp, #4]
    4582:	2b00      	cmp	r3, #0
    4584:	d002      	beq.n	458c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4586:	9801      	ldr	r0, [sp, #4]
    4588:	f000 f978 	bl	487c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    458c:	bf00      	nop
    458e:	b003      	add	sp, #12
    4590:	f85d fb04 	ldr.w	pc, [sp], #4

00004594 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4594:	b500      	push	{lr}
    4596:	b083      	sub	sp, #12
    4598:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    459a:	9b01      	ldr	r3, [sp, #4]
    459c:	2b00      	cmp	r3, #0
    459e:	d002      	beq.n	45a6 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    45a0:	9801      	ldr	r0, [sp, #4]
    45a2:	f000 f989 	bl	48b8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45a6:	bf00      	nop
    45a8:	b003      	add	sp, #12
    45aa:	f85d fb04 	ldr.w	pc, [sp], #4

000045ae <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    45ae:	b500      	push	{lr}
    45b0:	b083      	sub	sp, #12
    45b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45b4:	9b01      	ldr	r3, [sp, #4]
    45b6:	2b00      	cmp	r3, #0
    45b8:	d002      	beq.n	45c0 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    45ba:	9801      	ldr	r0, [sp, #4]
    45bc:	f000 f998 	bl	48f0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45c0:	bf00      	nop
    45c2:	b003      	add	sp, #12
    45c4:	f85d fb04 	ldr.w	pc, [sp], #4

000045c8 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    45c8:	b500      	push	{lr}
    45ca:	b083      	sub	sp, #12
    45cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45ce:	9b01      	ldr	r3, [sp, #4]
    45d0:	2b00      	cmp	r3, #0
    45d2:	d002      	beq.n	45da <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    45d4:	9801      	ldr	r0, [sp, #4]
    45d6:	f000 f9a9 	bl	492c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45da:	bf00      	nop
    45dc:	b003      	add	sp, #12
    45de:	f85d fb04 	ldr.w	pc, [sp], #4

000045e2 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    45e2:	b500      	push	{lr}
    45e4:	b083      	sub	sp, #12
    45e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45e8:	9b01      	ldr	r3, [sp, #4]
    45ea:	2b00      	cmp	r3, #0
    45ec:	d002      	beq.n	45f4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    45ee:	9801      	ldr	r0, [sp, #4]
    45f0:	f000 f9e6 	bl	49c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45f4:	bf00      	nop
    45f6:	b003      	add	sp, #12
    45f8:	f85d fb04 	ldr.w	pc, [sp], #4

000045fc <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    45fc:	b500      	push	{lr}
    45fe:	b083      	sub	sp, #12
    4600:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4602:	9b01      	ldr	r3, [sp, #4]
    4604:	2b00      	cmp	r3, #0
    4606:	d002      	beq.n	460e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4608:	9801      	ldr	r0, [sp, #4]
    460a:	f000 fa25 	bl	4a58 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    460e:	bf00      	nop
    4610:	b003      	add	sp, #12
    4612:	f85d fb04 	ldr.w	pc, [sp], #4

00004616 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4616:	b500      	push	{lr}
    4618:	b083      	sub	sp, #12
    461a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    461c:	9b01      	ldr	r3, [sp, #4]
    461e:	2b00      	cmp	r3, #0
    4620:	d002      	beq.n	4628 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4622:	9801      	ldr	r0, [sp, #4]
    4624:	f000 fa2a 	bl	4a7c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4628:	bf00      	nop
    462a:	b003      	add	sp, #12
    462c:	f85d fb04 	ldr.w	pc, [sp], #4

00004630 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4630:	b500      	push	{lr}
    4632:	b083      	sub	sp, #12
    4634:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4636:	9b01      	ldr	r3, [sp, #4]
    4638:	2b00      	cmp	r3, #0
    463a:	d002      	beq.n	4642 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    463c:	9801      	ldr	r0, [sp, #4]
    463e:	f000 fa3b 	bl	4ab8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4642:	bf00      	nop
    4644:	b003      	add	sp, #12
    4646:	f85d fb04 	ldr.w	pc, [sp], #4

0000464a <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    464a:	b500      	push	{lr}
    464c:	b083      	sub	sp, #12
    464e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4650:	9b01      	ldr	r3, [sp, #4]
    4652:	2b00      	cmp	r3, #0
    4654:	d002      	beq.n	465c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4656:	9801      	ldr	r0, [sp, #4]
    4658:	f000 fa56 	bl	4b08 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    465c:	bf00      	nop
    465e:	b003      	add	sp, #12
    4660:	f85d fb04 	ldr.w	pc, [sp], #4

00004664 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4664:	b500      	push	{lr}
    4666:	b083      	sub	sp, #12
    4668:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    466a:	9b01      	ldr	r3, [sp, #4]
    466c:	2b00      	cmp	r3, #0
    466e:	d002      	beq.n	4676 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4670:	9801      	ldr	r0, [sp, #4]
    4672:	f000 fa79 	bl	4b68 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4676:	bf00      	nop
    4678:	b003      	add	sp, #12
    467a:	f85d fb04 	ldr.w	pc, [sp], #4

0000467e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    467e:	b500      	push	{lr}
    4680:	b083      	sub	sp, #12
    4682:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4684:	9b01      	ldr	r3, [sp, #4]
    4686:	2b00      	cmp	r3, #0
    4688:	d002      	beq.n	4690 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    468a:	9801      	ldr	r0, [sp, #4]
    468c:	f000 fa8a 	bl	4ba4 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4690:	bf00      	nop
    4692:	b003      	add	sp, #12
    4694:	f85d fb04 	ldr.w	pc, [sp], #4

00004698 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4698:	b084      	sub	sp, #16
    469a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    469c:	4b0b      	ldr	r3, [pc, #44]	; (46cc <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    469e:	795b      	ldrb	r3, [r3, #5]
    46a0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    46a2:	4b0b      	ldr	r3, [pc, #44]	; (46d0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    46a4:	695b      	ldr	r3, [r3, #20]
    46a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    46a8:	9b02      	ldr	r3, [sp, #8]
    46aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46ae:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    46b0:	9b03      	ldr	r3, [sp, #12]
    46b2:	061b      	lsls	r3, r3, #24
    46b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46b8:	9a02      	ldr	r2, [sp, #8]
    46ba:	4313      	orrs	r3, r2
    46bc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    46be:	4a04      	ldr	r2, [pc, #16]	; (46d0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    46c0:	9b02      	ldr	r3, [sp, #8]
    46c2:	6153      	str	r3, [r2, #20]
}
    46c4:	bf00      	nop
    46c6:	b004      	add	sp, #16
    46c8:	4770      	bx	lr
    46ca:	bf00      	nop
    46cc:	00008ad8 	.word	0x00008ad8
    46d0:	40064000 	.word	0x40064000

000046d4 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46d4:	b084      	sub	sp, #16
    46d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46d8:	9b01      	ldr	r3, [sp, #4]
    46da:	685b      	ldr	r3, [r3, #4]
    46dc:	4a0b      	ldr	r2, [pc, #44]	; (470c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    46de:	5cd3      	ldrb	r3, [r2, r3]
    46e0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    46e2:	4b0b      	ldr	r3, [pc, #44]	; (4710 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    46e4:	695b      	ldr	r3, [r3, #20]
    46e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    46e8:	9b02      	ldr	r3, [sp, #8]
    46ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46ee:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    46f0:	9b03      	ldr	r3, [sp, #12]
    46f2:	061b      	lsls	r3, r3, #24
    46f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46f8:	9a02      	ldr	r2, [sp, #8]
    46fa:	4313      	orrs	r3, r2
    46fc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    46fe:	4a04      	ldr	r2, [pc, #16]	; (4710 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4700:	9b02      	ldr	r3, [sp, #8]
    4702:	6153      	str	r3, [r2, #20]
}
    4704:	bf00      	nop
    4706:	b004      	add	sp, #16
    4708:	4770      	bx	lr
    470a:	bf00      	nop
    470c:	00008ad8 	.word	0x00008ad8
    4710:	40064000 	.word	0x40064000

00004714 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4714:	b084      	sub	sp, #16
    4716:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	685b      	ldr	r3, [r3, #4]
    471c:	4a0b      	ldr	r2, [pc, #44]	; (474c <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    471e:	5cd3      	ldrb	r3, [r2, r3]
    4720:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4722:	4b0b      	ldr	r3, [pc, #44]	; (4750 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4724:	699b      	ldr	r3, [r3, #24]
    4726:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4728:	9b02      	ldr	r3, [sp, #8]
    472a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    472e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4730:	9b03      	ldr	r3, [sp, #12]
    4732:	061b      	lsls	r3, r3, #24
    4734:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4738:	9a02      	ldr	r2, [sp, #8]
    473a:	4313      	orrs	r3, r2
    473c:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    473e:	4a04      	ldr	r2, [pc, #16]	; (4750 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4740:	9b02      	ldr	r3, [sp, #8]
    4742:	6193      	str	r3, [r2, #24]
}
    4744:	bf00      	nop
    4746:	b004      	add	sp, #16
    4748:	4770      	bx	lr
    474a:	bf00      	nop
    474c:	00008ad8 	.word	0x00008ad8
    4750:	40064000 	.word	0x40064000

00004754 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4754:	b084      	sub	sp, #16
    4756:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4758:	4b0b      	ldr	r3, [pc, #44]	; (4788 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    475a:	795b      	ldrb	r3, [r3, #5]
    475c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    475e:	4b0b      	ldr	r3, [pc, #44]	; (478c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4760:	69db      	ldr	r3, [r3, #28]
    4762:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4764:	9b02      	ldr	r3, [sp, #8]
    4766:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    476a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    476c:	9b03      	ldr	r3, [sp, #12]
    476e:	061b      	lsls	r3, r3, #24
    4770:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4774:	9a02      	ldr	r2, [sp, #8]
    4776:	4313      	orrs	r3, r2
    4778:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    477a:	4a04      	ldr	r2, [pc, #16]	; (478c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    477c:	9b02      	ldr	r3, [sp, #8]
    477e:	61d3      	str	r3, [r2, #28]
}
    4780:	bf00      	nop
    4782:	b004      	add	sp, #16
    4784:	4770      	bx	lr
    4786:	bf00      	nop
    4788:	00008ad8 	.word	0x00008ad8
    478c:	40064000 	.word	0x40064000

00004790 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4790:	b084      	sub	sp, #16
    4792:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4794:	9b01      	ldr	r3, [sp, #4]
    4796:	685b      	ldr	r3, [r3, #4]
    4798:	4a0b      	ldr	r2, [pc, #44]	; (47c8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    479a:	5cd3      	ldrb	r3, [r2, r3]
    479c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    479e:	4b0b      	ldr	r3, [pc, #44]	; (47cc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    47a0:	69db      	ldr	r3, [r3, #28]
    47a2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    47a4:	9b02      	ldr	r3, [sp, #8]
    47a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    47aa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    47ac:	9b03      	ldr	r3, [sp, #12]
    47ae:	061b      	lsls	r3, r3, #24
    47b0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    47b4:	9a02      	ldr	r2, [sp, #8]
    47b6:	4313      	orrs	r3, r2
    47b8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    47ba:	4a04      	ldr	r2, [pc, #16]	; (47cc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    47bc:	9b02      	ldr	r3, [sp, #8]
    47be:	61d3      	str	r3, [r2, #28]
}
    47c0:	bf00      	nop
    47c2:	b004      	add	sp, #16
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop
    47c8:	00008ad8 	.word	0x00008ad8
    47cc:	40064000 	.word	0x40064000

000047d0 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47d0:	b084      	sub	sp, #16
    47d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47d4:	4b0a      	ldr	r3, [pc, #40]	; (4800 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    47d6:	7b9b      	ldrb	r3, [r3, #14]
    47d8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    47da:	4b0a      	ldr	r3, [pc, #40]	; (4804 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    47dc:	691b      	ldr	r3, [r3, #16]
    47de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    47e0:	9b02      	ldr	r3, [sp, #8]
    47e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    47e6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    47e8:	9b03      	ldr	r3, [sp, #12]
    47ea:	011b      	lsls	r3, r3, #4
    47ec:	9a02      	ldr	r2, [sp, #8]
    47ee:	4313      	orrs	r3, r2
    47f0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    47f2:	4a04      	ldr	r2, [pc, #16]	; (4804 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    47f4:	9b02      	ldr	r3, [sp, #8]
    47f6:	6113      	str	r3, [r2, #16]
}
    47f8:	bf00      	nop
    47fa:	b004      	add	sp, #16
    47fc:	4770      	bx	lr
    47fe:	bf00      	nop
    4800:	00008a80 	.word	0x00008a80
    4804:	40048000 	.word	0x40048000

00004808 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4808:	b084      	sub	sp, #16
    480a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    480c:	9b01      	ldr	r3, [sp, #4]
    480e:	685b      	ldr	r3, [r3, #4]
    4810:	4a0a      	ldr	r2, [pc, #40]	; (483c <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4812:	5cd3      	ldrb	r3, [r2, r3]
    4814:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4816:	4b0a      	ldr	r3, [pc, #40]	; (4840 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4818:	691b      	ldr	r3, [r3, #16]
    481a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    481c:	9b02      	ldr	r3, [sp, #8]
    481e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4822:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4824:	9b03      	ldr	r3, [sp, #12]
    4826:	011b      	lsls	r3, r3, #4
    4828:	9a02      	ldr	r2, [sp, #8]
    482a:	4313      	orrs	r3, r2
    482c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    482e:	4a04      	ldr	r2, [pc, #16]	; (4840 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4830:	9b02      	ldr	r3, [sp, #8]
    4832:	6113      	str	r3, [r2, #16]
}
    4834:	bf00      	nop
    4836:	b004      	add	sp, #16
    4838:	4770      	bx	lr
    483a:	bf00      	nop
    483c:	00008a80 	.word	0x00008a80
    4840:	40048000 	.word	0x40048000

00004844 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4844:	b084      	sub	sp, #16
    4846:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4848:	4b0a      	ldr	r3, [pc, #40]	; (4874 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    484a:	785b      	ldrb	r3, [r3, #1]
    484c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    484e:	4b0a      	ldr	r3, [pc, #40]	; (4878 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4850:	691b      	ldr	r3, [r3, #16]
    4852:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4854:	9b02      	ldr	r3, [sp, #8]
    4856:	f023 030c 	bic.w	r3, r3, #12
    485a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    485c:	9b03      	ldr	r3, [sp, #12]
    485e:	009b      	lsls	r3, r3, #2
    4860:	9a02      	ldr	r2, [sp, #8]
    4862:	4313      	orrs	r3, r2
    4864:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4866:	4a04      	ldr	r2, [pc, #16]	; (4878 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4868:	9b02      	ldr	r3, [sp, #8]
    486a:	6113      	str	r3, [r2, #16]
}
    486c:	bf00      	nop
    486e:	b004      	add	sp, #16
    4870:	4770      	bx	lr
    4872:	bf00      	nop
    4874:	00008b38 	.word	0x00008b38
    4878:	40048000 	.word	0x40048000

0000487c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    487c:	b084      	sub	sp, #16
    487e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4880:	9b01      	ldr	r3, [sp, #4]
    4882:	685b      	ldr	r3, [r3, #4]
    4884:	4a0a      	ldr	r2, [pc, #40]	; (48b0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4886:	5cd3      	ldrb	r3, [r2, r3]
    4888:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    488a:	4b0a      	ldr	r3, [pc, #40]	; (48b4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    488c:	691b      	ldr	r3, [r3, #16]
    488e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4890:	9b02      	ldr	r3, [sp, #8]
    4892:	f023 030c 	bic.w	r3, r3, #12
    4896:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4898:	9b03      	ldr	r3, [sp, #12]
    489a:	009b      	lsls	r3, r3, #2
    489c:	9a02      	ldr	r2, [sp, #8]
    489e:	4313      	orrs	r3, r2
    48a0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    48a2:	4a04      	ldr	r2, [pc, #16]	; (48b4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    48a4:	9b02      	ldr	r3, [sp, #8]
    48a6:	6113      	str	r3, [r2, #16]
}
    48a8:	bf00      	nop
    48aa:	b004      	add	sp, #16
    48ac:	4770      	bx	lr
    48ae:	bf00      	nop
    48b0:	00008b38 	.word	0x00008b38
    48b4:	40048000 	.word	0x40048000

000048b8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48b8:	b084      	sub	sp, #16
    48ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48bc:	4b0a      	ldr	r3, [pc, #40]	; (48e8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    48be:	795b      	ldrb	r3, [r3, #5]
    48c0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    48c2:	4b0a      	ldr	r3, [pc, #40]	; (48ec <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    48c4:	6a1b      	ldr	r3, [r3, #32]
    48c6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    48c8:	9b02      	ldr	r3, [sp, #8]
    48ca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    48ce:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    48d0:	9b03      	ldr	r3, [sp, #12]
    48d2:	061b      	lsls	r3, r3, #24
    48d4:	9a02      	ldr	r2, [sp, #8]
    48d6:	4313      	orrs	r3, r2
    48d8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    48da:	4a04      	ldr	r2, [pc, #16]	; (48ec <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    48dc:	9b02      	ldr	r3, [sp, #8]
    48de:	6213      	str	r3, [r2, #32]
}
    48e0:	bf00      	nop
    48e2:	b004      	add	sp, #16
    48e4:	4770      	bx	lr
    48e6:	bf00      	nop
    48e8:	00008ad8 	.word	0x00008ad8
    48ec:	40064000 	.word	0x40064000

000048f0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48f0:	b084      	sub	sp, #16
    48f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48f4:	9b01      	ldr	r3, [sp, #4]
    48f6:	685b      	ldr	r3, [r3, #4]
    48f8:	4a0a      	ldr	r2, [pc, #40]	; (4924 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    48fa:	5cd3      	ldrb	r3, [r2, r3]
    48fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    48fe:	4b0a      	ldr	r3, [pc, #40]	; (4928 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4900:	6a1b      	ldr	r3, [r3, #32]
    4902:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4904:	9b02      	ldr	r3, [sp, #8]
    4906:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    490a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    490c:	9b03      	ldr	r3, [sp, #12]
    490e:	061b      	lsls	r3, r3, #24
    4910:	9a02      	ldr	r2, [sp, #8]
    4912:	4313      	orrs	r3, r2
    4914:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4916:	4a04      	ldr	r2, [pc, #16]	; (4928 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4918:	9b02      	ldr	r3, [sp, #8]
    491a:	6213      	str	r3, [r2, #32]
}
    491c:	bf00      	nop
    491e:	b004      	add	sp, #16
    4920:	4770      	bx	lr
    4922:	bf00      	nop
    4924:	00008ad8 	.word	0x00008ad8
    4928:	40064000 	.word	0x40064000

0000492c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    492c:	b086      	sub	sp, #24
    492e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4930:	4b20      	ldr	r3, [pc, #128]	; (49b4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4932:	795b      	ldrb	r3, [r3, #5]
    4934:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4936:	9b01      	ldr	r3, [sp, #4]
    4938:	681a      	ldr	r2, [r3, #0]
    493a:	491f      	ldr	r1, [pc, #124]	; (49b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    493c:	4613      	mov	r3, r2
    493e:	00db      	lsls	r3, r3, #3
    4940:	4413      	add	r3, r2
    4942:	440b      	add	r3, r1
    4944:	781b      	ldrb	r3, [r3, #0]
    4946:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4948:	4b1c      	ldr	r3, [pc, #112]	; (49bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    494a:	68db      	ldr	r3, [r3, #12]
    494c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    494e:	9b03      	ldr	r3, [sp, #12]
    4950:	2b03      	cmp	r3, #3
    4952:	d813      	bhi.n	497c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4954:	9b03      	ldr	r3, [sp, #12]
    4956:	005b      	lsls	r3, r3, #1
    4958:	3318      	adds	r3, #24
    495a:	2203      	movs	r2, #3
    495c:	fa02 f303 	lsl.w	r3, r2, r3
    4960:	43db      	mvns	r3, r3
    4962:	9a05      	ldr	r2, [sp, #20]
    4964:	4013      	ands	r3, r2
    4966:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4968:	9b03      	ldr	r3, [sp, #12]
    496a:	005b      	lsls	r3, r3, #1
    496c:	3318      	adds	r3, #24
    496e:	9a04      	ldr	r2, [sp, #16]
    4970:	fa02 f303 	lsl.w	r3, r2, r3
    4974:	9a05      	ldr	r2, [sp, #20]
    4976:	4313      	orrs	r3, r2
    4978:	9305      	str	r3, [sp, #20]
    497a:	e014      	b.n	49a6 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    497c:	9b03      	ldr	r3, [sp, #12]
    497e:	3b04      	subs	r3, #4
    4980:	005b      	lsls	r3, r3, #1
    4982:	3310      	adds	r3, #16
    4984:	2203      	movs	r2, #3
    4986:	fa02 f303 	lsl.w	r3, r2, r3
    498a:	43db      	mvns	r3, r3
    498c:	9a05      	ldr	r2, [sp, #20]
    498e:	4013      	ands	r3, r2
    4990:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4992:	9b03      	ldr	r3, [sp, #12]
    4994:	3b04      	subs	r3, #4
    4996:	005b      	lsls	r3, r3, #1
    4998:	3310      	adds	r3, #16
    499a:	9a04      	ldr	r2, [sp, #16]
    499c:	fa02 f303 	lsl.w	r3, r2, r3
    49a0:	9a05      	ldr	r2, [sp, #20]
    49a2:	4313      	orrs	r3, r2
    49a4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    49a6:	4a05      	ldr	r2, [pc, #20]	; (49bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    49a8:	9b05      	ldr	r3, [sp, #20]
    49aa:	60d3      	str	r3, [r2, #12]
}
    49ac:	bf00      	nop
    49ae:	b006      	add	sp, #24
    49b0:	4770      	bx	lr
    49b2:	bf00      	nop
    49b4:	00008a80 	.word	0x00008a80
    49b8:	00008770 	.word	0x00008770
    49bc:	40048000 	.word	0x40048000

000049c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49c0:	b086      	sub	sp, #24
    49c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49c4:	9b01      	ldr	r3, [sp, #4]
    49c6:	685b      	ldr	r3, [r3, #4]
    49c8:	4a20      	ldr	r2, [pc, #128]	; (4a4c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    49ca:	5cd3      	ldrb	r3, [r2, r3]
    49cc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    49ce:	9b01      	ldr	r3, [sp, #4]
    49d0:	681a      	ldr	r2, [r3, #0]
    49d2:	491f      	ldr	r1, [pc, #124]	; (4a50 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    49d4:	4613      	mov	r3, r2
    49d6:	00db      	lsls	r3, r3, #3
    49d8:	4413      	add	r3, r2
    49da:	440b      	add	r3, r1
    49dc:	781b      	ldrb	r3, [r3, #0]
    49de:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    49e0:	4b1c      	ldr	r3, [pc, #112]	; (4a54 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    49e2:	68db      	ldr	r3, [r3, #12]
    49e4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    49e6:	9b03      	ldr	r3, [sp, #12]
    49e8:	2b03      	cmp	r3, #3
    49ea:	d813      	bhi.n	4a14 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    49ec:	9b03      	ldr	r3, [sp, #12]
    49ee:	005b      	lsls	r3, r3, #1
    49f0:	3318      	adds	r3, #24
    49f2:	2203      	movs	r2, #3
    49f4:	fa02 f303 	lsl.w	r3, r2, r3
    49f8:	43db      	mvns	r3, r3
    49fa:	9a05      	ldr	r2, [sp, #20]
    49fc:	4013      	ands	r3, r2
    49fe:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4a00:	9b03      	ldr	r3, [sp, #12]
    4a02:	005b      	lsls	r3, r3, #1
    4a04:	3318      	adds	r3, #24
    4a06:	9a04      	ldr	r2, [sp, #16]
    4a08:	fa02 f303 	lsl.w	r3, r2, r3
    4a0c:	9a05      	ldr	r2, [sp, #20]
    4a0e:	4313      	orrs	r3, r2
    4a10:	9305      	str	r3, [sp, #20]
    4a12:	e014      	b.n	4a3e <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4a14:	9b03      	ldr	r3, [sp, #12]
    4a16:	3b04      	subs	r3, #4
    4a18:	005b      	lsls	r3, r3, #1
    4a1a:	3310      	adds	r3, #16
    4a1c:	2203      	movs	r2, #3
    4a1e:	fa02 f303 	lsl.w	r3, r2, r3
    4a22:	43db      	mvns	r3, r3
    4a24:	9a05      	ldr	r2, [sp, #20]
    4a26:	4013      	ands	r3, r2
    4a28:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4a2a:	9b03      	ldr	r3, [sp, #12]
    4a2c:	3b04      	subs	r3, #4
    4a2e:	005b      	lsls	r3, r3, #1
    4a30:	3310      	adds	r3, #16
    4a32:	9a04      	ldr	r2, [sp, #16]
    4a34:	fa02 f303 	lsl.w	r3, r2, r3
    4a38:	9a05      	ldr	r2, [sp, #20]
    4a3a:	4313      	orrs	r3, r2
    4a3c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4a3e:	4a05      	ldr	r2, [pc, #20]	; (4a54 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4a40:	9b05      	ldr	r3, [sp, #20]
    4a42:	60d3      	str	r3, [r2, #12]
}
    4a44:	bf00      	nop
    4a46:	b006      	add	sp, #24
    4a48:	4770      	bx	lr
    4a4a:	bf00      	nop
    4a4c:	00008a80 	.word	0x00008a80
    4a50:	00008770 	.word	0x00008770
    4a54:	40048000 	.word	0x40048000

00004a58 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a58:	b084      	sub	sp, #16
    4a5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4a5c:	4b06      	ldr	r3, [pc, #24]	; (4a78 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4a5e:	685b      	ldr	r3, [r3, #4]
    4a60:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4a62:	9b03      	ldr	r3, [sp, #12]
    4a64:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4a68:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4a6a:	4a03      	ldr	r2, [pc, #12]	; (4a78 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4a6c:	9b03      	ldr	r3, [sp, #12]
    4a6e:	6053      	str	r3, [r2, #4]
}
    4a70:	bf00      	nop
    4a72:	b004      	add	sp, #16
    4a74:	4770      	bx	lr
    4a76:	bf00      	nop
    4a78:	40048000 	.word	0x40048000

00004a7c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a7c:	b084      	sub	sp, #16
    4a7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a80:	9b01      	ldr	r3, [sp, #4]
    4a82:	685b      	ldr	r3, [r3, #4]
    4a84:	4a0a      	ldr	r2, [pc, #40]	; (4ab0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4a86:	5cd3      	ldrb	r3, [r2, r3]
    4a88:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4a8a:	4b0a      	ldr	r3, [pc, #40]	; (4ab4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4a8c:	685b      	ldr	r3, [r3, #4]
    4a8e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4a90:	9b02      	ldr	r3, [sp, #8]
    4a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4a96:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4a98:	9b03      	ldr	r3, [sp, #12]
    4a9a:	011b      	lsls	r3, r3, #4
    4a9c:	9a02      	ldr	r2, [sp, #8]
    4a9e:	4313      	orrs	r3, r2
    4aa0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4aa2:	4a04      	ldr	r2, [pc, #16]	; (4ab4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4aa4:	9b02      	ldr	r3, [sp, #8]
    4aa6:	6053      	str	r3, [r2, #4]
}
    4aa8:	bf00      	nop
    4aaa:	b004      	add	sp, #16
    4aac:	4770      	bx	lr
    4aae:	bf00      	nop
    4ab0:	00008a80 	.word	0x00008a80
    4ab4:	40048000 	.word	0x40048000

00004ab8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ab8:	b084      	sub	sp, #16
    4aba:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4abc:	9b01      	ldr	r3, [sp, #4]
    4abe:	681a      	ldr	r2, [r3, #0]
    4ac0:	490f      	ldr	r1, [pc, #60]	; (4b00 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4ac2:	4613      	mov	r3, r2
    4ac4:	00db      	lsls	r3, r3, #3
    4ac6:	4413      	add	r3, r2
    4ac8:	440b      	add	r3, r1
    4aca:	3304      	adds	r3, #4
    4acc:	781b      	ldrb	r3, [r3, #0]
    4ace:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4ad0:	4a0c      	ldr	r2, [pc, #48]	; (4b04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4ad2:	9b03      	ldr	r3, [sp, #12]
    4ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ad8:	490a      	ldr	r1, [pc, #40]	; (4b04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4ada:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4ade:	9b03      	ldr	r3, [sp, #12]
    4ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4ae4:	4a07      	ldr	r2, [pc, #28]	; (4b04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4ae6:	9b03      	ldr	r3, [sp, #12]
    4ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4aec:	4905      	ldr	r1, [pc, #20]	; (4b04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4aee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4af2:	9b03      	ldr	r3, [sp, #12]
    4af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4af8:	bf00      	nop
    4afa:	b004      	add	sp, #16
    4afc:	4770      	bx	lr
    4afe:	bf00      	nop
    4b00:	00008770 	.word	0x00008770
    4b04:	40065000 	.word	0x40065000

00004b08 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b08:	b086      	sub	sp, #24
    4b0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4b0c:	9b01      	ldr	r3, [sp, #4]
    4b0e:	681a      	ldr	r2, [r3, #0]
    4b10:	4912      	ldr	r1, [pc, #72]	; (4b5c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4b12:	4613      	mov	r3, r2
    4b14:	00db      	lsls	r3, r3, #3
    4b16:	4413      	add	r3, r2
    4b18:	440b      	add	r3, r1
    4b1a:	3304      	adds	r3, #4
    4b1c:	781b      	ldrb	r3, [r3, #0]
    4b1e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b20:	9b01      	ldr	r3, [sp, #4]
    4b22:	685b      	ldr	r3, [r3, #4]
    4b24:	4a0e      	ldr	r2, [pc, #56]	; (4b60 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4b26:	5cd3      	ldrb	r3, [r2, r3]
    4b28:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4b2a:	4a0e      	ldr	r2, [pc, #56]	; (4b64 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4b2c:	9b05      	ldr	r3, [sp, #20]
    4b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b32:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4b34:	9b03      	ldr	r3, [sp, #12]
    4b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4b3a:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4b3c:	9b04      	ldr	r3, [sp, #16]
    4b3e:	061b      	lsls	r3, r3, #24
    4b40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4b44:	9a03      	ldr	r2, [sp, #12]
    4b46:	4313      	orrs	r3, r2
    4b48:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4b4a:	4906      	ldr	r1, [pc, #24]	; (4b64 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4b4c:	9b05      	ldr	r3, [sp, #20]
    4b4e:	9a03      	ldr	r2, [sp, #12]
    4b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b54:	bf00      	nop
    4b56:	b006      	add	sp, #24
    4b58:	4770      	bx	lr
    4b5a:	bf00      	nop
    4b5c:	00008770 	.word	0x00008770
    4b60:	00008b08 	.word	0x00008b08
    4b64:	40065000 	.word	0x40065000

00004b68 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b68:	b084      	sub	sp, #16
    4b6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b6c:	4b0b      	ldr	r3, [pc, #44]	; (4b9c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4b6e:	7f1b      	ldrb	r3, [r3, #28]
    4b70:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4b72:	4b0b      	ldr	r3, [pc, #44]	; (4ba0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4b74:	685b      	ldr	r3, [r3, #4]
    4b76:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4b78:	9b02      	ldr	r3, [sp, #8]
    4b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4b7e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4b80:	9b03      	ldr	r3, [sp, #12]
    4b82:	031b      	lsls	r3, r3, #12
    4b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4b88:	9a02      	ldr	r2, [sp, #8]
    4b8a:	4313      	orrs	r3, r2
    4b8c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4b8e:	4a04      	ldr	r2, [pc, #16]	; (4ba0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4b90:	9b02      	ldr	r3, [sp, #8]
    4b92:	6053      	str	r3, [r2, #4]
}
    4b94:	bf00      	nop
    4b96:	b004      	add	sp, #16
    4b98:	4770      	bx	lr
    4b9a:	bf00      	nop
    4b9c:	00008a80 	.word	0x00008a80
    4ba0:	40048000 	.word	0x40048000

00004ba4 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ba4:	b084      	sub	sp, #16
    4ba6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ba8:	9b01      	ldr	r3, [sp, #4]
    4baa:	685b      	ldr	r3, [r3, #4]
    4bac:	4a0b      	ldr	r2, [pc, #44]	; (4bdc <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4bae:	5cd3      	ldrb	r3, [r2, r3]
    4bb0:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4bb2:	4b0b      	ldr	r3, [pc, #44]	; (4be0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4bb4:	685b      	ldr	r3, [r3, #4]
    4bb6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4bb8:	9b02      	ldr	r3, [sp, #8]
    4bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4bbe:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4bc0:	9b03      	ldr	r3, [sp, #12]
    4bc2:	031b      	lsls	r3, r3, #12
    4bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4bc8:	9a02      	ldr	r2, [sp, #8]
    4bca:	4313      	orrs	r3, r2
    4bcc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4bce:	4a04      	ldr	r2, [pc, #16]	; (4be0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4bd0:	9b02      	ldr	r3, [sp, #8]
    4bd2:	6053      	str	r3, [r2, #4]
}
    4bd4:	bf00      	nop
    4bd6:	b004      	add	sp, #16
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop
    4bdc:	00008a80 	.word	0x00008a80
    4be0:	40048000 	.word	0x40048000

00004be4 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4be4:	b500      	push	{lr}
    4be6:	b085      	sub	sp, #20
    4be8:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4bea:	2300      	movs	r3, #0
    4bec:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4bf0:	9b01      	ldr	r3, [sp, #4]
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d037      	beq.n	4c66 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4bf6:	2300      	movs	r3, #0
    4bf8:	9303      	str	r3, [sp, #12]
    4bfa:	e02b      	b.n	4c54 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4bfc:	4b29      	ldr	r3, [pc, #164]	; (4ca4 <DisableSafeClock+0xc0>)
    4bfe:	6819      	ldr	r1, [r3, #0]
    4c00:	9a03      	ldr	r2, [sp, #12]
    4c02:	4613      	mov	r3, r2
    4c04:	005b      	lsls	r3, r3, #1
    4c06:	4413      	add	r3, r2
    4c08:	009b      	lsls	r3, r3, #2
    4c0a:	440b      	add	r3, r1
    4c0c:	3314      	adds	r3, #20
    4c0e:	681b      	ldr	r3, [r3, #0]
    4c10:	2b05      	cmp	r3, #5
    4c12:	d11c      	bne.n	4c4e <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4c14:	2301      	movs	r3, #1
    4c16:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4c1a:	4b22      	ldr	r3, [pc, #136]	; (4ca4 <DisableSafeClock+0xc0>)
    4c1c:	6819      	ldr	r1, [r3, #0]
    4c1e:	9a03      	ldr	r2, [sp, #12]
    4c20:	4613      	mov	r3, r2
    4c22:	005b      	lsls	r3, r3, #1
    4c24:	4413      	add	r3, r2
    4c26:	009b      	lsls	r3, r3, #2
    4c28:	440b      	add	r3, r1
    4c2a:	3318      	adds	r3, #24
    4c2c:	881b      	ldrh	r3, [r3, #0]
    4c2e:	2b00      	cmp	r3, #0
    4c30:	d118      	bne.n	4c64 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4c32:	4b1d      	ldr	r3, [pc, #116]	; (4ca8 <DisableSafeClock+0xc4>)
    4c34:	791b      	ldrb	r3, [r3, #4]
    4c36:	4619      	mov	r1, r3
    4c38:	4a1c      	ldr	r2, [pc, #112]	; (4cac <DisableSafeClock+0xc8>)
    4c3a:	460b      	mov	r3, r1
    4c3c:	005b      	lsls	r3, r3, #1
    4c3e:	440b      	add	r3, r1
    4c40:	009b      	lsls	r3, r3, #2
    4c42:	4413      	add	r3, r2
    4c44:	3308      	adds	r3, #8
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	2005      	movs	r0, #5
    4c4a:	4798      	blx	r3
                }
                break;
    4c4c:	e00a      	b.n	4c64 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4c4e:	9b03      	ldr	r3, [sp, #12]
    4c50:	3301      	adds	r3, #1
    4c52:	9303      	str	r3, [sp, #12]
    4c54:	4b13      	ldr	r3, [pc, #76]	; (4ca4 <DisableSafeClock+0xc0>)
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	7a1b      	ldrb	r3, [r3, #8]
    4c5a:	461a      	mov	r2, r3
    4c5c:	9b03      	ldr	r3, [sp, #12]
    4c5e:	4293      	cmp	r3, r2
    4c60:	d3cc      	bcc.n	4bfc <DisableSafeClock+0x18>
    4c62:	e000      	b.n	4c66 <DisableSafeClock+0x82>
                break;
    4c64:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4c66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4c6a:	f083 0301 	eor.w	r3, r3, #1
    4c6e:	b2db      	uxtb	r3, r3
    4c70:	2b00      	cmp	r3, #0
    4c72:	d013      	beq.n	4c9c <DisableSafeClock+0xb8>
    4c74:	4b0e      	ldr	r3, [pc, #56]	; (4cb0 <DisableSafeClock+0xcc>)
    4c76:	781b      	ldrb	r3, [r3, #0]
    4c78:	f083 0301 	eor.w	r3, r3, #1
    4c7c:	b2db      	uxtb	r3, r3
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d00c      	beq.n	4c9c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4c82:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <DisableSafeClock+0xc4>)
    4c84:	791b      	ldrb	r3, [r3, #4]
    4c86:	4619      	mov	r1, r3
    4c88:	4a08      	ldr	r2, [pc, #32]	; (4cac <DisableSafeClock+0xc8>)
    4c8a:	460b      	mov	r3, r1
    4c8c:	005b      	lsls	r3, r3, #1
    4c8e:	440b      	add	r3, r1
    4c90:	009b      	lsls	r3, r3, #2
    4c92:	4413      	add	r3, r2
    4c94:	3308      	adds	r3, #8
    4c96:	681b      	ldr	r3, [r3, #0]
    4c98:	2005      	movs	r0, #5
    4c9a:	4798      	blx	r3
    }
}
    4c9c:	bf00      	nop
    4c9e:	b005      	add	sp, #20
    4ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    4ca4:	1fff8ba8 	.word	0x1fff8ba8
    4ca8:	00008700 	.word	0x00008700
    4cac:	00008d30 	.word	0x00008d30
    4cb0:	1fff8b18 	.word	0x1fff8b18

00004cb4 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4cb4:	4b06      	ldr	r3, [pc, #24]	; (4cd0 <SetFircToResetValue_TrustedCall+0x1c>)
    4cb6:	2200      	movs	r2, #0
    4cb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4cbc:	4b04      	ldr	r3, [pc, #16]	; (4cd0 <SetFircToResetValue_TrustedCall+0x1c>)
    4cbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cc2:	4a03      	ldr	r2, [pc, #12]	; (4cd0 <SetFircToResetValue_TrustedCall+0x1c>)
    4cc4:	f043 0301 	orr.w	r3, r3, #1
    4cc8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4ccc:	bf00      	nop
    4cce:	4770      	bx	lr
    4cd0:	40064000 	.word	0x40064000

00004cd4 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4cd4:	b084      	sub	sp, #16
    4cd6:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4cd8:	2303      	movs	r3, #3
    4cda:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4cdc:	2300      	movs	r3, #0
    4cde:	9302      	str	r3, [sp, #8]
    4ce0:	e028      	b.n	4d34 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4ce2:	9b01      	ldr	r3, [sp, #4]
    4ce4:	9a02      	ldr	r2, [sp, #8]
    4ce6:	320d      	adds	r2, #13
    4ce8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4cec:	2b28      	cmp	r3, #40	; 0x28
    4cee:	d10b      	bne.n	4d08 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4cf0:	9a01      	ldr	r2, [sp, #4]
    4cf2:	9b02      	ldr	r3, [sp, #8]
    4cf4:	330d      	adds	r3, #13
    4cf6:	00db      	lsls	r3, r3, #3
    4cf8:	4413      	add	r3, r2
    4cfa:	685b      	ldr	r3, [r3, #4]
    4cfc:	4a2b      	ldr	r2, [pc, #172]	; (4dac <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4cfe:	5cd3      	ldrb	r3, [r2, r3]
    4d00:	011b      	lsls	r3, r3, #4
    4d02:	9a03      	ldr	r2, [sp, #12]
    4d04:	4313      	orrs	r3, r2
    4d06:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4d08:	9b01      	ldr	r3, [sp, #4]
    4d0a:	9a02      	ldr	r2, [sp, #8]
    4d0c:	320d      	adds	r2, #13
    4d0e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d12:	2b29      	cmp	r3, #41	; 0x29
    4d14:	d10b      	bne.n	4d2e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4d16:	9a01      	ldr	r2, [sp, #4]
    4d18:	9b02      	ldr	r3, [sp, #8]
    4d1a:	330d      	adds	r3, #13
    4d1c:	00db      	lsls	r3, r3, #3
    4d1e:	4413      	add	r3, r2
    4d20:	685b      	ldr	r3, [r3, #4]
    4d22:	4a23      	ldr	r2, [pc, #140]	; (4db0 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4d24:	5cd3      	ldrb	r3, [r2, r3]
    4d26:	009b      	lsls	r3, r3, #2
    4d28:	9a03      	ldr	r2, [sp, #12]
    4d2a:	4313      	orrs	r3, r2
    4d2c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4d2e:	9b02      	ldr	r3, [sp, #8]
    4d30:	3301      	adds	r3, #1
    4d32:	9302      	str	r3, [sp, #8]
    4d34:	9b01      	ldr	r3, [sp, #4]
    4d36:	7adb      	ldrb	r3, [r3, #11]
    4d38:	461a      	mov	r2, r3
    4d3a:	9b02      	ldr	r3, [sp, #8]
    4d3c:	4293      	cmp	r3, r2
    4d3e:	d3d0      	bcc.n	4ce2 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4d40:	2300      	movs	r3, #0
    4d42:	9302      	str	r3, [sp, #8]
    4d44:	e026      	b.n	4d94 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4d46:	9a01      	ldr	r2, [sp, #4]
    4d48:	9b02      	ldr	r3, [sp, #8]
    4d4a:	334e      	adds	r3, #78	; 0x4e
    4d4c:	00db      	lsls	r3, r3, #3
    4d4e:	4413      	add	r3, r2
    4d50:	685b      	ldr	r3, [r3, #4]
    4d52:	2b12      	cmp	r3, #18
    4d54:	d109      	bne.n	4d6a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4d56:	9a01      	ldr	r2, [sp, #4]
    4d58:	9b02      	ldr	r3, [sp, #8]
    4d5a:	334e      	adds	r3, #78	; 0x4e
    4d5c:	00db      	lsls	r3, r3, #3
    4d5e:	4413      	add	r3, r2
    4d60:	891b      	ldrh	r3, [r3, #8]
    4d62:	005b      	lsls	r3, r3, #1
    4d64:	9a03      	ldr	r2, [sp, #12]
    4d66:	4313      	orrs	r3, r2
    4d68:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4d6a:	9a01      	ldr	r2, [sp, #4]
    4d6c:	9b02      	ldr	r3, [sp, #8]
    4d6e:	334e      	adds	r3, #78	; 0x4e
    4d70:	00db      	lsls	r3, r3, #3
    4d72:	4413      	add	r3, r2
    4d74:	685b      	ldr	r3, [r3, #4]
    4d76:	2b13      	cmp	r3, #19
    4d78:	d109      	bne.n	4d8e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4d7a:	9a01      	ldr	r2, [sp, #4]
    4d7c:	9b02      	ldr	r3, [sp, #8]
    4d7e:	334e      	adds	r3, #78	; 0x4e
    4d80:	00db      	lsls	r3, r3, #3
    4d82:	4413      	add	r3, r2
    4d84:	891b      	ldrh	r3, [r3, #8]
    4d86:	461a      	mov	r2, r3
    4d88:	9b03      	ldr	r3, [sp, #12]
    4d8a:	4313      	orrs	r3, r2
    4d8c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4d8e:	9b02      	ldr	r3, [sp, #8]
    4d90:	3301      	adds	r3, #1
    4d92:	9302      	str	r3, [sp, #8]
    4d94:	9b01      	ldr	r3, [sp, #4]
    4d96:	7c1b      	ldrb	r3, [r3, #16]
    4d98:	461a      	mov	r2, r3
    4d9a:	9b02      	ldr	r3, [sp, #8]
    4d9c:	4293      	cmp	r3, r2
    4d9e:	d3d2      	bcc.n	4d46 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4da0:	4a04      	ldr	r2, [pc, #16]	; (4db4 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4da2:	9b03      	ldr	r3, [sp, #12]
    4da4:	6113      	str	r3, [r2, #16]
}
    4da6:	bf00      	nop
    4da8:	b004      	add	sp, #16
    4daa:	4770      	bx	lr
    4dac:	00008a80 	.word	0x00008a80
    4db0:	00008b38 	.word	0x00008b38
    4db4:	40048000 	.word	0x40048000

00004db8 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4db8:	b500      	push	{lr}
    4dba:	b089      	sub	sp, #36	; 0x24
    4dbc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4dbe:	2300      	movs	r3, #0
    4dc0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4dc4:	4a21      	ldr	r2, [pc, #132]	; (4e4c <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4dc6:	9b01      	ldr	r3, [sp, #4]
    4dc8:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4dca:	4b21      	ldr	r3, [pc, #132]	; (4e50 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4dcc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4dd0:	f003 0301 	and.w	r3, r3, #1
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d12e      	bne.n	4e36 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4dd8:	4b1e      	ldr	r3, [pc, #120]	; (4e54 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4dda:	2200      	movs	r2, #0
    4ddc:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4dde:	f7ff ff69 	bl	4cb4 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4de2:	aa03      	add	r2, sp, #12
    4de4:	a904      	add	r1, sp, #16
    4de6:	a805      	add	r0, sp, #20
    4de8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4dec:	f7fe f8ae 	bl	2f4c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4df0:	4b17      	ldr	r3, [pc, #92]	; (4e50 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4df2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4df6:	0e1b      	lsrs	r3, r3, #24
    4df8:	f003 0301 	and.w	r3, r3, #1
    4dfc:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4dfe:	9a03      	ldr	r2, [sp, #12]
    4e00:	a904      	add	r1, sp, #16
    4e02:	ab05      	add	r3, sp, #20
    4e04:	4618      	mov	r0, r3
    4e06:	f7fe f8bb 	bl	2f80 <Clock_Ip_TimeoutExpired>
    4e0a:	4603      	mov	r3, r0
    4e0c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4e10:	9b06      	ldr	r3, [sp, #24]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d106      	bne.n	4e24 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4e16:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e1a:	f083 0301 	eor.w	r3, r3, #1
    4e1e:	b2db      	uxtb	r3, r3
    4e20:	2b00      	cmp	r3, #0
    4e22:	d1e5      	bne.n	4df0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4e24:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d007      	beq.n	4e3c <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4e2c:	2105      	movs	r1, #5
    4e2e:	2001      	movs	r0, #1
    4e30:	f7fe f87c 	bl	2f2c <Clock_Ip_ReportClockErrors>
    4e34:	e002      	b.n	4e3c <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4e36:	4b07      	ldr	r3, [pc, #28]	; (4e54 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4e38:	2201      	movs	r2, #1
    4e3a:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4e3c:	9801      	ldr	r0, [sp, #4]
    4e3e:	f7ff ff49 	bl	4cd4 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4e42:	bf00      	nop
    4e44:	b009      	add	sp, #36	; 0x24
    4e46:	f85d fb04 	ldr.w	pc, [sp], #4
    4e4a:	bf00      	nop
    4e4c:	1fff8ba8 	.word	0x1fff8ba8
    4e50:	40064000 	.word	0x40064000
    4e54:	1fff8b18 	.word	0x1fff8b18

00004e58 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4e58:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4e5a:	2300      	movs	r3, #0
    4e5c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e5e:	4b29      	ldr	r3, [pc, #164]	; (4f04 <getFircConfig+0xac>)
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d024      	beq.n	4eb0 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4e66:	2300      	movs	r3, #0
    4e68:	9301      	str	r3, [sp, #4]
    4e6a:	e01a      	b.n	4ea2 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4e6c:	4b25      	ldr	r3, [pc, #148]	; (4f04 <getFircConfig+0xac>)
    4e6e:	6819      	ldr	r1, [r3, #0]
    4e70:	9a01      	ldr	r2, [sp, #4]
    4e72:	4613      	mov	r3, r2
    4e74:	005b      	lsls	r3, r3, #1
    4e76:	4413      	add	r3, r2
    4e78:	009b      	lsls	r3, r3, #2
    4e7a:	440b      	add	r3, r1
    4e7c:	3314      	adds	r3, #20
    4e7e:	681b      	ldr	r3, [r3, #0]
    4e80:	2b05      	cmp	r3, #5
    4e82:	d10b      	bne.n	4e9c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4e84:	4b1f      	ldr	r3, [pc, #124]	; (4f04 <getFircConfig+0xac>)
    4e86:	6819      	ldr	r1, [r3, #0]
    4e88:	9a01      	ldr	r2, [sp, #4]
    4e8a:	4613      	mov	r3, r2
    4e8c:	005b      	lsls	r3, r3, #1
    4e8e:	4413      	add	r3, r2
    4e90:	009b      	lsls	r3, r3, #2
    4e92:	3310      	adds	r3, #16
    4e94:	440b      	add	r3, r1
    4e96:	3304      	adds	r3, #4
    4e98:	9300      	str	r3, [sp, #0]
                break;
    4e9a:	e009      	b.n	4eb0 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4e9c:	9b01      	ldr	r3, [sp, #4]
    4e9e:	3301      	adds	r3, #1
    4ea0:	9301      	str	r3, [sp, #4]
    4ea2:	4b18      	ldr	r3, [pc, #96]	; (4f04 <getFircConfig+0xac>)
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	7a1b      	ldrb	r3, [r3, #8]
    4ea8:	461a      	mov	r2, r3
    4eaa:	9b01      	ldr	r3, [sp, #4]
    4eac:	4293      	cmp	r3, r2
    4eae:	d3dd      	bcc.n	4e6c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4eb0:	9b00      	ldr	r3, [sp, #0]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d121      	bne.n	4efa <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4eb6:	4b14      	ldr	r3, [pc, #80]	; (4f08 <getFircConfig+0xb0>)
    4eb8:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4eba:	4b13      	ldr	r3, [pc, #76]	; (4f08 <getFircConfig+0xb0>)
    4ebc:	2205      	movs	r2, #5
    4ebe:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4ec0:	4b12      	ldr	r3, [pc, #72]	; (4f0c <getFircConfig+0xb4>)
    4ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ec6:	b29b      	uxth	r3, r3
    4ec8:	f003 0301 	and.w	r3, r3, #1
    4ecc:	b29a      	uxth	r2, r3
    4ece:	4b0e      	ldr	r3, [pc, #56]	; (4f08 <getFircConfig+0xb0>)
    4ed0:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4ed2:	4b0e      	ldr	r3, [pc, #56]	; (4f0c <getFircConfig+0xb4>)
    4ed4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	f003 0303 	and.w	r3, r3, #3
    4ede:	b2da      	uxtb	r2, r3
    4ee0:	4b09      	ldr	r3, [pc, #36]	; (4f08 <getFircConfig+0xb0>)
    4ee2:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4ee4:	4b09      	ldr	r3, [pc, #36]	; (4f0c <getFircConfig+0xb4>)
    4ee6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4eea:	b2db      	uxtb	r3, r3
    4eec:	10db      	asrs	r3, r3, #3
    4eee:	b2db      	uxtb	r3, r3
    4ef0:	f003 0301 	and.w	r3, r3, #1
    4ef4:	b2da      	uxtb	r2, r3
    4ef6:	4b04      	ldr	r3, [pc, #16]	; (4f08 <getFircConfig+0xb0>)
    4ef8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4efa:	9b00      	ldr	r3, [sp, #0]
}
    4efc:	4618      	mov	r0, r3
    4efe:	b002      	add	sp, #8
    4f00:	4770      	bx	lr
    4f02:	bf00      	nop
    4f04:	1fff8ba8 	.word	0x1fff8ba8
    4f08:	1fff8c14 	.word	0x1fff8c14
    4f0c:	40064000 	.word	0x40064000

00004f10 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4f10:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4f12:	2300      	movs	r3, #0
    4f14:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4f16:	4b20      	ldr	r3, [pc, #128]	; (4f98 <getSoscConfig+0x88>)
    4f18:	681b      	ldr	r3, [r3, #0]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d024      	beq.n	4f68 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4f1e:	2300      	movs	r3, #0
    4f20:	9301      	str	r3, [sp, #4]
    4f22:	e01a      	b.n	4f5a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4f24:	4b1c      	ldr	r3, [pc, #112]	; (4f98 <getSoscConfig+0x88>)
    4f26:	6819      	ldr	r1, [r3, #0]
    4f28:	9a01      	ldr	r2, [sp, #4]
    4f2a:	4613      	mov	r3, r2
    4f2c:	009b      	lsls	r3, r3, #2
    4f2e:	4413      	add	r3, r2
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	440b      	add	r3, r1
    4f34:	332c      	adds	r3, #44	; 0x2c
    4f36:	681b      	ldr	r3, [r3, #0]
    4f38:	2b08      	cmp	r3, #8
    4f3a:	d10b      	bne.n	4f54 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4f3c:	4b16      	ldr	r3, [pc, #88]	; (4f98 <getSoscConfig+0x88>)
    4f3e:	6819      	ldr	r1, [r3, #0]
    4f40:	9a01      	ldr	r2, [sp, #4]
    4f42:	4613      	mov	r3, r2
    4f44:	009b      	lsls	r3, r3, #2
    4f46:	4413      	add	r3, r2
    4f48:	009b      	lsls	r3, r3, #2
    4f4a:	3328      	adds	r3, #40	; 0x28
    4f4c:	440b      	add	r3, r1
    4f4e:	3304      	adds	r3, #4
    4f50:	9300      	str	r3, [sp, #0]
                break;
    4f52:	e009      	b.n	4f68 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4f54:	9b01      	ldr	r3, [sp, #4]
    4f56:	3301      	adds	r3, #1
    4f58:	9301      	str	r3, [sp, #4]
    4f5a:	4b0f      	ldr	r3, [pc, #60]	; (4f98 <getSoscConfig+0x88>)
    4f5c:	681b      	ldr	r3, [r3, #0]
    4f5e:	7a5b      	ldrb	r3, [r3, #9]
    4f60:	461a      	mov	r2, r3
    4f62:	9b01      	ldr	r3, [sp, #4]
    4f64:	4293      	cmp	r3, r2
    4f66:	d3dd      	bcc.n	4f24 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f68:	9b00      	ldr	r3, [sp, #0]
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d110      	bne.n	4f90 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4f6e:	4b0b      	ldr	r3, [pc, #44]	; (4f9c <getSoscConfig+0x8c>)
    4f70:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4f72:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <getSoscConfig+0x8c>)
    4f74:	2208      	movs	r2, #8
    4f76:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4f78:	4b09      	ldr	r3, [pc, #36]	; (4fa0 <getSoscConfig+0x90>)
    4f7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4f7e:	b29b      	uxth	r3, r3
    4f80:	f003 0301 	and.w	r3, r3, #1
    4f84:	b29a      	uxth	r2, r3
    4f86:	4b05      	ldr	r3, [pc, #20]	; (4f9c <getSoscConfig+0x8c>)
    4f88:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4f8a:	4b04      	ldr	r3, [pc, #16]	; (4f9c <getSoscConfig+0x8c>)
    4f8c:	4a05      	ldr	r2, [pc, #20]	; (4fa4 <getSoscConfig+0x94>)
    4f8e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4f90:	9b00      	ldr	r3, [sp, #0]
}
    4f92:	4618      	mov	r0, r3
    4f94:	b002      	add	sp, #8
    4f96:	4770      	bx	lr
    4f98:	1fff8ba8 	.word	0x1fff8ba8
    4f9c:	1fff8c20 	.word	0x1fff8c20
    4fa0:	40064000 	.word	0x40064000
    4fa4:	02625a00 	.word	0x02625a00

00004fa8 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4fa8:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4faa:	2300      	movs	r3, #0
    4fac:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4fae:	4b28      	ldr	r3, [pc, #160]	; (5050 <getSpllConfig+0xa8>)
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	d023      	beq.n	4ffe <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4fb6:	2300      	movs	r3, #0
    4fb8:	9301      	str	r3, [sp, #4]
    4fba:	e019      	b.n	4ff0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4fbc:	4b24      	ldr	r3, [pc, #144]	; (5050 <getSpllConfig+0xa8>)
    4fbe:	6819      	ldr	r1, [r3, #0]
    4fc0:	9a01      	ldr	r2, [sp, #4]
    4fc2:	4613      	mov	r3, r2
    4fc4:	009b      	lsls	r3, r3, #2
    4fc6:	4413      	add	r3, r2
    4fc8:	00db      	lsls	r3, r3, #3
    4fca:	440b      	add	r3, r1
    4fcc:	3340      	adds	r3, #64	; 0x40
    4fce:	681b      	ldr	r3, [r3, #0]
    4fd0:	2b09      	cmp	r3, #9
    4fd2:	d10a      	bne.n	4fea <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4fd4:	4b1e      	ldr	r3, [pc, #120]	; (5050 <getSpllConfig+0xa8>)
    4fd6:	6819      	ldr	r1, [r3, #0]
    4fd8:	9a01      	ldr	r2, [sp, #4]
    4fda:	4613      	mov	r3, r2
    4fdc:	009b      	lsls	r3, r3, #2
    4fde:	4413      	add	r3, r2
    4fe0:	00db      	lsls	r3, r3, #3
    4fe2:	3340      	adds	r3, #64	; 0x40
    4fe4:	440b      	add	r3, r1
    4fe6:	9300      	str	r3, [sp, #0]
                break;
    4fe8:	e009      	b.n	4ffe <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4fea:	9b01      	ldr	r3, [sp, #4]
    4fec:	3301      	adds	r3, #1
    4fee:	9301      	str	r3, [sp, #4]
    4ff0:	4b17      	ldr	r3, [pc, #92]	; (5050 <getSpllConfig+0xa8>)
    4ff2:	681b      	ldr	r3, [r3, #0]
    4ff4:	7a9b      	ldrb	r3, [r3, #10]
    4ff6:	461a      	mov	r2, r3
    4ff8:	9b01      	ldr	r3, [sp, #4]
    4ffa:	4293      	cmp	r3, r2
    4ffc:	d3de      	bcc.n	4fbc <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ffe:	9b00      	ldr	r3, [sp, #0]
    5000:	2b00      	cmp	r3, #0
    5002:	d121      	bne.n	5048 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5004:	4b13      	ldr	r3, [pc, #76]	; (5054 <getSpllConfig+0xac>)
    5006:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5008:	4b12      	ldr	r3, [pc, #72]	; (5054 <getSpllConfig+0xac>)
    500a:	2209      	movs	r2, #9
    500c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    500e:	4b12      	ldr	r3, [pc, #72]	; (5058 <getSpllConfig+0xb0>)
    5010:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5014:	b29b      	uxth	r3, r3
    5016:	f003 0301 	and.w	r3, r3, #1
    501a:	b29a      	uxth	r2, r3
    501c:	4b0d      	ldr	r3, [pc, #52]	; (5054 <getSpllConfig+0xac>)
    501e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5020:	4b0d      	ldr	r3, [pc, #52]	; (5058 <getSpllConfig+0xb0>)
    5022:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5026:	0a1b      	lsrs	r3, r3, #8
    5028:	b2db      	uxtb	r3, r3
    502a:	f003 0307 	and.w	r3, r3, #7
    502e:	b2da      	uxtb	r2, r3
    5030:	4b08      	ldr	r3, [pc, #32]	; (5054 <getSpllConfig+0xac>)
    5032:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5034:	4b08      	ldr	r3, [pc, #32]	; (5058 <getSpllConfig+0xb0>)
    5036:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    503a:	0c1b      	lsrs	r3, r3, #16
    503c:	b2db      	uxtb	r3, r3
    503e:	f003 031f 	and.w	r3, r3, #31
    5042:	b2da      	uxtb	r2, r3
    5044:	4b03      	ldr	r3, [pc, #12]	; (5054 <getSpllConfig+0xac>)
    5046:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5048:	9b00      	ldr	r3, [sp, #0]
}
    504a:	4618      	mov	r0, r3
    504c:	b002      	add	sp, #8
    504e:	4770      	bx	lr
    5050:	1fff8ba8 	.word	0x1fff8ba8
    5054:	1fff8c34 	.word	0x1fff8c34
    5058:	40064000 	.word	0x40064000

0000505c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    505c:	b086      	sub	sp, #24
    505e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5060:	2300      	movs	r3, #0
    5062:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5064:	9b01      	ldr	r3, [sp, #4]
    5066:	2b1b      	cmp	r3, #27
    5068:	d00f      	beq.n	508a <getSelectorConfig+0x2e>
    506a:	9b01      	ldr	r3, [sp, #4]
    506c:	2b1b      	cmp	r3, #27
    506e:	d80f      	bhi.n	5090 <getSelectorConfig+0x34>
    5070:	9b01      	ldr	r3, [sp, #4]
    5072:	2b19      	cmp	r3, #25
    5074:	d003      	beq.n	507e <getSelectorConfig+0x22>
    5076:	9b01      	ldr	r3, [sp, #4]
    5078:	2b1a      	cmp	r3, #26
    507a:	d003      	beq.n	5084 <getSelectorConfig+0x28>
    507c:	e008      	b.n	5090 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    507e:	2300      	movs	r3, #0
    5080:	9304      	str	r3, [sp, #16]
            break;
    5082:	e008      	b.n	5096 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5084:	2301      	movs	r3, #1
    5086:	9304      	str	r3, [sp, #16]
            break;
    5088:	e005      	b.n	5096 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    508a:	2302      	movs	r3, #2
    508c:	9304      	str	r3, [sp, #16]
            break;
    508e:	e002      	b.n	5096 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5090:	2300      	movs	r3, #0
    5092:	9304      	str	r3, [sp, #16]
            break;
    5094:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5096:	4b36      	ldr	r3, [pc, #216]	; (5170 <getSelectorConfig+0x114>)
    5098:	681b      	ldr	r3, [r3, #0]
    509a:	2b00      	cmp	r3, #0
    509c:	d01d      	beq.n	50da <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    509e:	2300      	movs	r3, #0
    50a0:	9303      	str	r3, [sp, #12]
    50a2:	e013      	b.n	50cc <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    50a4:	4b32      	ldr	r3, [pc, #200]	; (5170 <getSelectorConfig+0x114>)
    50a6:	681b      	ldr	r3, [r3, #0]
    50a8:	9a03      	ldr	r2, [sp, #12]
    50aa:	320d      	adds	r2, #13
    50ac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    50b0:	9a01      	ldr	r2, [sp, #4]
    50b2:	429a      	cmp	r2, r3
    50b4:	d107      	bne.n	50c6 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    50b6:	4b2e      	ldr	r3, [pc, #184]	; (5170 <getSelectorConfig+0x114>)
    50b8:	681a      	ldr	r2, [r3, #0]
    50ba:	9b03      	ldr	r3, [sp, #12]
    50bc:	330d      	adds	r3, #13
    50be:	00db      	lsls	r3, r3, #3
    50c0:	4413      	add	r3, r2
    50c2:	9305      	str	r3, [sp, #20]
                break;
    50c4:	e009      	b.n	50da <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    50c6:	9b03      	ldr	r3, [sp, #12]
    50c8:	3301      	adds	r3, #1
    50ca:	9303      	str	r3, [sp, #12]
    50cc:	4b28      	ldr	r3, [pc, #160]	; (5170 <getSelectorConfig+0x114>)
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	7adb      	ldrb	r3, [r3, #11]
    50d2:	461a      	mov	r2, r3
    50d4:	9b03      	ldr	r3, [sp, #12]
    50d6:	4293      	cmp	r3, r2
    50d8:	d3e4      	bcc.n	50a4 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    50da:	9b05      	ldr	r3, [sp, #20]
    50dc:	2b00      	cmp	r3, #0
    50de:	d140      	bne.n	5162 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    50e0:	9b04      	ldr	r3, [sp, #16]
    50e2:	00db      	lsls	r3, r3, #3
    50e4:	4a23      	ldr	r2, [pc, #140]	; (5174 <getSelectorConfig+0x118>)
    50e6:	4413      	add	r3, r2
    50e8:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    50ea:	4922      	ldr	r1, [pc, #136]	; (5174 <getSelectorConfig+0x118>)
    50ec:	9b04      	ldr	r3, [sp, #16]
    50ee:	9a01      	ldr	r2, [sp, #4]
    50f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    50f4:	9b01      	ldr	r3, [sp, #4]
    50f6:	2b1b      	cmp	r3, #27
    50f8:	d025      	beq.n	5146 <getSelectorConfig+0xea>
    50fa:	9b01      	ldr	r3, [sp, #4]
    50fc:	2b1b      	cmp	r3, #27
    50fe:	d832      	bhi.n	5166 <getSelectorConfig+0x10a>
    5100:	9b01      	ldr	r3, [sp, #4]
    5102:	2b19      	cmp	r3, #25
    5104:	d003      	beq.n	510e <getSelectorConfig+0xb2>
    5106:	9b01      	ldr	r3, [sp, #4]
    5108:	2b1a      	cmp	r3, #26
    510a:	d00e      	beq.n	512a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    510c:	e02b      	b.n	5166 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    510e:	4b1a      	ldr	r3, [pc, #104]	; (5178 <getSelectorConfig+0x11c>)
    5110:	695b      	ldr	r3, [r3, #20]
    5112:	0e1b      	lsrs	r3, r3, #24
    5114:	f003 030f 	and.w	r3, r3, #15
    5118:	4a18      	ldr	r2, [pc, #96]	; (517c <getSelectorConfig+0x120>)
    511a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    511e:	4915      	ldr	r1, [pc, #84]	; (5174 <getSelectorConfig+0x118>)
    5120:	9b04      	ldr	r3, [sp, #16]
    5122:	00db      	lsls	r3, r3, #3
    5124:	440b      	add	r3, r1
    5126:	605a      	str	r2, [r3, #4]
                break;
    5128:	e01e      	b.n	5168 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    512a:	4b13      	ldr	r3, [pc, #76]	; (5178 <getSelectorConfig+0x11c>)
    512c:	699b      	ldr	r3, [r3, #24]
    512e:	0e1b      	lsrs	r3, r3, #24
    5130:	f003 030f 	and.w	r3, r3, #15
    5134:	4a11      	ldr	r2, [pc, #68]	; (517c <getSelectorConfig+0x120>)
    5136:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    513a:	490e      	ldr	r1, [pc, #56]	; (5174 <getSelectorConfig+0x118>)
    513c:	9b04      	ldr	r3, [sp, #16]
    513e:	00db      	lsls	r3, r3, #3
    5140:	440b      	add	r3, r1
    5142:	605a      	str	r2, [r3, #4]
                break;
    5144:	e010      	b.n	5168 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5146:	4b0c      	ldr	r3, [pc, #48]	; (5178 <getSelectorConfig+0x11c>)
    5148:	69db      	ldr	r3, [r3, #28]
    514a:	0e1b      	lsrs	r3, r3, #24
    514c:	f003 030f 	and.w	r3, r3, #15
    5150:	4a0a      	ldr	r2, [pc, #40]	; (517c <getSelectorConfig+0x120>)
    5152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5156:	4907      	ldr	r1, [pc, #28]	; (5174 <getSelectorConfig+0x118>)
    5158:	9b04      	ldr	r3, [sp, #16]
    515a:	00db      	lsls	r3, r3, #3
    515c:	440b      	add	r3, r1
    515e:	605a      	str	r2, [r3, #4]
                break;
    5160:	e002      	b.n	5168 <getSelectorConfig+0x10c>
        }
    }
    5162:	bf00      	nop
    5164:	e000      	b.n	5168 <getSelectorConfig+0x10c>
                break;
    5166:	bf00      	nop

    return ReturnValue;
    5168:	9b05      	ldr	r3, [sp, #20]
}
    516a:	4618      	mov	r0, r3
    516c:	b006      	add	sp, #24
    516e:	4770      	bx	lr
    5170:	1fff8ba8 	.word	0x1fff8ba8
    5174:	1fff8c5c 	.word	0x1fff8c5c
    5178:	40064000 	.word	0x40064000
    517c:	00008e00 	.word	0x00008e00

00005180 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5180:	b086      	sub	sp, #24
    5182:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5184:	2300      	movs	r3, #0
    5186:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5188:	2300      	movs	r3, #0
    518a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	2b1f      	cmp	r3, #31
    5190:	d00f      	beq.n	51b2 <getCoreDividerConfig+0x32>
    5192:	9b01      	ldr	r3, [sp, #4]
    5194:	2b1f      	cmp	r3, #31
    5196:	d80f      	bhi.n	51b8 <getCoreDividerConfig+0x38>
    5198:	9b01      	ldr	r3, [sp, #4]
    519a:	2b1d      	cmp	r3, #29
    519c:	d003      	beq.n	51a6 <getCoreDividerConfig+0x26>
    519e:	9b01      	ldr	r3, [sp, #4]
    51a0:	2b1e      	cmp	r3, #30
    51a2:	d003      	beq.n	51ac <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    51a4:	e008      	b.n	51b8 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    51a6:	2300      	movs	r3, #0
    51a8:	9304      	str	r3, [sp, #16]
            break;
    51aa:	e006      	b.n	51ba <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    51ac:	2301      	movs	r3, #1
    51ae:	9304      	str	r3, [sp, #16]
            break;
    51b0:	e003      	b.n	51ba <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    51b2:	2302      	movs	r3, #2
    51b4:	9304      	str	r3, [sp, #16]
            break;
    51b6:	e000      	b.n	51ba <getCoreDividerConfig+0x3a>
                break;
    51b8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    51ba:	4b41      	ldr	r3, [pc, #260]	; (52c0 <getCoreDividerConfig+0x140>)
    51bc:	681b      	ldr	r3, [r3, #0]
    51be:	2b00      	cmp	r3, #0
    51c0:	d026      	beq.n	5210 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51c2:	2300      	movs	r3, #0
    51c4:	9303      	str	r3, [sp, #12]
    51c6:	e01c      	b.n	5202 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    51c8:	4b3d      	ldr	r3, [pc, #244]	; (52c0 <getCoreDividerConfig+0x140>)
    51ca:	6819      	ldr	r1, [r3, #0]
    51cc:	9a03      	ldr	r2, [sp, #12]
    51ce:	4613      	mov	r3, r2
    51d0:	005b      	lsls	r3, r3, #1
    51d2:	4413      	add	r3, r2
    51d4:	009b      	lsls	r3, r3, #2
    51d6:	440b      	add	r3, r1
    51d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	9a01      	ldr	r2, [sp, #4]
    51e0:	429a      	cmp	r2, r3
    51e2:	d10b      	bne.n	51fc <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    51e4:	4b36      	ldr	r3, [pc, #216]	; (52c0 <getCoreDividerConfig+0x140>)
    51e6:	6819      	ldr	r1, [r3, #0]
    51e8:	9a03      	ldr	r2, [sp, #12]
    51ea:	4613      	mov	r3, r2
    51ec:	005b      	lsls	r3, r3, #1
    51ee:	4413      	add	r3, r2
    51f0:	009b      	lsls	r3, r3, #2
    51f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51f6:	440b      	add	r3, r1
    51f8:	9305      	str	r3, [sp, #20]
                break;
    51fa:	e009      	b.n	5210 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51fc:	9b03      	ldr	r3, [sp, #12]
    51fe:	3301      	adds	r3, #1
    5200:	9303      	str	r3, [sp, #12]
    5202:	4b2f      	ldr	r3, [pc, #188]	; (52c0 <getCoreDividerConfig+0x140>)
    5204:	681b      	ldr	r3, [r3, #0]
    5206:	7b1b      	ldrb	r3, [r3, #12]
    5208:	461a      	mov	r2, r3
    520a:	9b03      	ldr	r3, [sp, #12]
    520c:	4293      	cmp	r3, r2
    520e:	d3db      	bcc.n	51c8 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5210:	9b05      	ldr	r3, [sp, #20]
    5212:	2b00      	cmp	r3, #0
    5214:	d14d      	bne.n	52b2 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5216:	9a04      	ldr	r2, [sp, #16]
    5218:	4613      	mov	r3, r2
    521a:	005b      	lsls	r3, r3, #1
    521c:	4413      	add	r3, r2
    521e:	009b      	lsls	r3, r3, #2
    5220:	4a28      	ldr	r2, [pc, #160]	; (52c4 <getCoreDividerConfig+0x144>)
    5222:	4413      	add	r3, r2
    5224:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5226:	4927      	ldr	r1, [pc, #156]	; (52c4 <getCoreDividerConfig+0x144>)
    5228:	9a04      	ldr	r2, [sp, #16]
    522a:	4613      	mov	r3, r2
    522c:	005b      	lsls	r3, r3, #1
    522e:	4413      	add	r3, r2
    5230:	009b      	lsls	r3, r3, #2
    5232:	440b      	add	r3, r1
    5234:	9a01      	ldr	r2, [sp, #4]
    5236:	601a      	str	r2, [r3, #0]
        switch(Name)
    5238:	9b01      	ldr	r3, [sp, #4]
    523a:	2b1f      	cmp	r3, #31
    523c:	d029      	beq.n	5292 <getCoreDividerConfig+0x112>
    523e:	9b01      	ldr	r3, [sp, #4]
    5240:	2b1f      	cmp	r3, #31
    5242:	d838      	bhi.n	52b6 <getCoreDividerConfig+0x136>
    5244:	9b01      	ldr	r3, [sp, #4]
    5246:	2b1d      	cmp	r3, #29
    5248:	d003      	beq.n	5252 <getCoreDividerConfig+0xd2>
    524a:	9b01      	ldr	r3, [sp, #4]
    524c:	2b1e      	cmp	r3, #30
    524e:	d010      	beq.n	5272 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5250:	e031      	b.n	52b6 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5252:	4b1d      	ldr	r3, [pc, #116]	; (52c8 <getCoreDividerConfig+0x148>)
    5254:	695b      	ldr	r3, [r3, #20]
    5256:	0c1b      	lsrs	r3, r3, #16
    5258:	f003 030f 	and.w	r3, r3, #15
    525c:	1c59      	adds	r1, r3, #1
    525e:	4819      	ldr	r0, [pc, #100]	; (52c4 <getCoreDividerConfig+0x144>)
    5260:	9a04      	ldr	r2, [sp, #16]
    5262:	4613      	mov	r3, r2
    5264:	005b      	lsls	r3, r3, #1
    5266:	4413      	add	r3, r2
    5268:	009b      	lsls	r3, r3, #2
    526a:	4403      	add	r3, r0
    526c:	3304      	adds	r3, #4
    526e:	6019      	str	r1, [r3, #0]
                break;
    5270:	e022      	b.n	52b8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5272:	4b15      	ldr	r3, [pc, #84]	; (52c8 <getCoreDividerConfig+0x148>)
    5274:	699b      	ldr	r3, [r3, #24]
    5276:	0c1b      	lsrs	r3, r3, #16
    5278:	f003 030f 	and.w	r3, r3, #15
    527c:	1c59      	adds	r1, r3, #1
    527e:	4811      	ldr	r0, [pc, #68]	; (52c4 <getCoreDividerConfig+0x144>)
    5280:	9a04      	ldr	r2, [sp, #16]
    5282:	4613      	mov	r3, r2
    5284:	005b      	lsls	r3, r3, #1
    5286:	4413      	add	r3, r2
    5288:	009b      	lsls	r3, r3, #2
    528a:	4403      	add	r3, r0
    528c:	3304      	adds	r3, #4
    528e:	6019      	str	r1, [r3, #0]
                break;
    5290:	e012      	b.n	52b8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5292:	4b0d      	ldr	r3, [pc, #52]	; (52c8 <getCoreDividerConfig+0x148>)
    5294:	69db      	ldr	r3, [r3, #28]
    5296:	0c1b      	lsrs	r3, r3, #16
    5298:	f003 030f 	and.w	r3, r3, #15
    529c:	1c59      	adds	r1, r3, #1
    529e:	4809      	ldr	r0, [pc, #36]	; (52c4 <getCoreDividerConfig+0x144>)
    52a0:	9a04      	ldr	r2, [sp, #16]
    52a2:	4613      	mov	r3, r2
    52a4:	005b      	lsls	r3, r3, #1
    52a6:	4413      	add	r3, r2
    52a8:	009b      	lsls	r3, r3, #2
    52aa:	4403      	add	r3, r0
    52ac:	3304      	adds	r3, #4
    52ae:	6019      	str	r1, [r3, #0]
                break;
    52b0:	e002      	b.n	52b8 <getCoreDividerConfig+0x138>
        }
    }
    52b2:	bf00      	nop
    52b4:	e000      	b.n	52b8 <getCoreDividerConfig+0x138>
                break;
    52b6:	bf00      	nop

    return ReturnValue;
    52b8:	9b05      	ldr	r3, [sp, #20]
}
    52ba:	4618      	mov	r0, r3
    52bc:	b006      	add	sp, #24
    52be:	4770      	bx	lr
    52c0:	1fff8ba8 	.word	0x1fff8ba8
    52c4:	1fff8c74 	.word	0x1fff8c74
    52c8:	40064000 	.word	0x40064000

000052cc <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    52cc:	b086      	sub	sp, #24
    52ce:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    52d0:	2300      	movs	r3, #0
    52d2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    52d4:	2300      	movs	r3, #0
    52d6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    52d8:	9b01      	ldr	r3, [sp, #4]
    52da:	2b23      	cmp	r3, #35	; 0x23
    52dc:	d00f      	beq.n	52fe <getBusDividerConfig+0x32>
    52de:	9b01      	ldr	r3, [sp, #4]
    52e0:	2b23      	cmp	r3, #35	; 0x23
    52e2:	d80f      	bhi.n	5304 <getBusDividerConfig+0x38>
    52e4:	9b01      	ldr	r3, [sp, #4]
    52e6:	2b21      	cmp	r3, #33	; 0x21
    52e8:	d003      	beq.n	52f2 <getBusDividerConfig+0x26>
    52ea:	9b01      	ldr	r3, [sp, #4]
    52ec:	2b22      	cmp	r3, #34	; 0x22
    52ee:	d003      	beq.n	52f8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    52f0:	e008      	b.n	5304 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    52f2:	2300      	movs	r3, #0
    52f4:	9304      	str	r3, [sp, #16]
            break;
    52f6:	e006      	b.n	5306 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    52f8:	2301      	movs	r3, #1
    52fa:	9304      	str	r3, [sp, #16]
            break;
    52fc:	e003      	b.n	5306 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    52fe:	2302      	movs	r3, #2
    5300:	9304      	str	r3, [sp, #16]
            break;
    5302:	e000      	b.n	5306 <getBusDividerConfig+0x3a>
                break;
    5304:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5306:	4b41      	ldr	r3, [pc, #260]	; (540c <getBusDividerConfig+0x140>)
    5308:	681b      	ldr	r3, [r3, #0]
    530a:	2b00      	cmp	r3, #0
    530c:	d026      	beq.n	535c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    530e:	2300      	movs	r3, #0
    5310:	9303      	str	r3, [sp, #12]
    5312:	e01c      	b.n	534e <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5314:	4b3d      	ldr	r3, [pc, #244]	; (540c <getBusDividerConfig+0x140>)
    5316:	6819      	ldr	r1, [r3, #0]
    5318:	9a03      	ldr	r2, [sp, #12]
    531a:	4613      	mov	r3, r2
    531c:	005b      	lsls	r3, r3, #1
    531e:	4413      	add	r3, r2
    5320:	009b      	lsls	r3, r3, #2
    5322:	440b      	add	r3, r1
    5324:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5328:	681b      	ldr	r3, [r3, #0]
    532a:	9a01      	ldr	r2, [sp, #4]
    532c:	429a      	cmp	r2, r3
    532e:	d10b      	bne.n	5348 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5330:	4b36      	ldr	r3, [pc, #216]	; (540c <getBusDividerConfig+0x140>)
    5332:	6819      	ldr	r1, [r3, #0]
    5334:	9a03      	ldr	r2, [sp, #12]
    5336:	4613      	mov	r3, r2
    5338:	005b      	lsls	r3, r3, #1
    533a:	4413      	add	r3, r2
    533c:	009b      	lsls	r3, r3, #2
    533e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5342:	440b      	add	r3, r1
    5344:	9305      	str	r3, [sp, #20]
                break;
    5346:	e009      	b.n	535c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5348:	9b03      	ldr	r3, [sp, #12]
    534a:	3301      	adds	r3, #1
    534c:	9303      	str	r3, [sp, #12]
    534e:	4b2f      	ldr	r3, [pc, #188]	; (540c <getBusDividerConfig+0x140>)
    5350:	681b      	ldr	r3, [r3, #0]
    5352:	7b1b      	ldrb	r3, [r3, #12]
    5354:	461a      	mov	r2, r3
    5356:	9b03      	ldr	r3, [sp, #12]
    5358:	4293      	cmp	r3, r2
    535a:	d3db      	bcc.n	5314 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    535c:	9b05      	ldr	r3, [sp, #20]
    535e:	2b00      	cmp	r3, #0
    5360:	d14d      	bne.n	53fe <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5362:	9a04      	ldr	r2, [sp, #16]
    5364:	4613      	mov	r3, r2
    5366:	005b      	lsls	r3, r3, #1
    5368:	4413      	add	r3, r2
    536a:	009b      	lsls	r3, r3, #2
    536c:	4a28      	ldr	r2, [pc, #160]	; (5410 <getBusDividerConfig+0x144>)
    536e:	4413      	add	r3, r2
    5370:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5372:	4927      	ldr	r1, [pc, #156]	; (5410 <getBusDividerConfig+0x144>)
    5374:	9a04      	ldr	r2, [sp, #16]
    5376:	4613      	mov	r3, r2
    5378:	005b      	lsls	r3, r3, #1
    537a:	4413      	add	r3, r2
    537c:	009b      	lsls	r3, r3, #2
    537e:	440b      	add	r3, r1
    5380:	9a01      	ldr	r2, [sp, #4]
    5382:	601a      	str	r2, [r3, #0]
        switch(Name)
    5384:	9b01      	ldr	r3, [sp, #4]
    5386:	2b23      	cmp	r3, #35	; 0x23
    5388:	d029      	beq.n	53de <getBusDividerConfig+0x112>
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	2b23      	cmp	r3, #35	; 0x23
    538e:	d838      	bhi.n	5402 <getBusDividerConfig+0x136>
    5390:	9b01      	ldr	r3, [sp, #4]
    5392:	2b21      	cmp	r3, #33	; 0x21
    5394:	d003      	beq.n	539e <getBusDividerConfig+0xd2>
    5396:	9b01      	ldr	r3, [sp, #4]
    5398:	2b22      	cmp	r3, #34	; 0x22
    539a:	d010      	beq.n	53be <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    539c:	e031      	b.n	5402 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    539e:	4b1d      	ldr	r3, [pc, #116]	; (5414 <getBusDividerConfig+0x148>)
    53a0:	695b      	ldr	r3, [r3, #20]
    53a2:	091b      	lsrs	r3, r3, #4
    53a4:	f003 030f 	and.w	r3, r3, #15
    53a8:	1c59      	adds	r1, r3, #1
    53aa:	4819      	ldr	r0, [pc, #100]	; (5410 <getBusDividerConfig+0x144>)
    53ac:	9a04      	ldr	r2, [sp, #16]
    53ae:	4613      	mov	r3, r2
    53b0:	005b      	lsls	r3, r3, #1
    53b2:	4413      	add	r3, r2
    53b4:	009b      	lsls	r3, r3, #2
    53b6:	4403      	add	r3, r0
    53b8:	3304      	adds	r3, #4
    53ba:	6019      	str	r1, [r3, #0]
                break;
    53bc:	e022      	b.n	5404 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    53be:	4b15      	ldr	r3, [pc, #84]	; (5414 <getBusDividerConfig+0x148>)
    53c0:	699b      	ldr	r3, [r3, #24]
    53c2:	091b      	lsrs	r3, r3, #4
    53c4:	f003 030f 	and.w	r3, r3, #15
    53c8:	1c59      	adds	r1, r3, #1
    53ca:	4811      	ldr	r0, [pc, #68]	; (5410 <getBusDividerConfig+0x144>)
    53cc:	9a04      	ldr	r2, [sp, #16]
    53ce:	4613      	mov	r3, r2
    53d0:	005b      	lsls	r3, r3, #1
    53d2:	4413      	add	r3, r2
    53d4:	009b      	lsls	r3, r3, #2
    53d6:	4403      	add	r3, r0
    53d8:	3304      	adds	r3, #4
    53da:	6019      	str	r1, [r3, #0]
                break;
    53dc:	e012      	b.n	5404 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    53de:	4b0d      	ldr	r3, [pc, #52]	; (5414 <getBusDividerConfig+0x148>)
    53e0:	69db      	ldr	r3, [r3, #28]
    53e2:	091b      	lsrs	r3, r3, #4
    53e4:	f003 030f 	and.w	r3, r3, #15
    53e8:	1c59      	adds	r1, r3, #1
    53ea:	4809      	ldr	r0, [pc, #36]	; (5410 <getBusDividerConfig+0x144>)
    53ec:	9a04      	ldr	r2, [sp, #16]
    53ee:	4613      	mov	r3, r2
    53f0:	005b      	lsls	r3, r3, #1
    53f2:	4413      	add	r3, r2
    53f4:	009b      	lsls	r3, r3, #2
    53f6:	4403      	add	r3, r0
    53f8:	3304      	adds	r3, #4
    53fa:	6019      	str	r1, [r3, #0]
                break;
    53fc:	e002      	b.n	5404 <getBusDividerConfig+0x138>
        }
    }
    53fe:	bf00      	nop
    5400:	e000      	b.n	5404 <getBusDividerConfig+0x138>
                break;
    5402:	bf00      	nop

    return ReturnValue;
    5404:	9b05      	ldr	r3, [sp, #20]
}
    5406:	4618      	mov	r0, r3
    5408:	b006      	add	sp, #24
    540a:	4770      	bx	lr
    540c:	1fff8ba8 	.word	0x1fff8ba8
    5410:	1fff8c98 	.word	0x1fff8c98
    5414:	40064000 	.word	0x40064000

00005418 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5418:	b086      	sub	sp, #24
    541a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    541c:	2300      	movs	r3, #0
    541e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5420:	2300      	movs	r3, #0
    5422:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5424:	9b01      	ldr	r3, [sp, #4]
    5426:	2b27      	cmp	r3, #39	; 0x27
    5428:	d00f      	beq.n	544a <getSlowDividerConfig+0x32>
    542a:	9b01      	ldr	r3, [sp, #4]
    542c:	2b27      	cmp	r3, #39	; 0x27
    542e:	d80f      	bhi.n	5450 <getSlowDividerConfig+0x38>
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	2b25      	cmp	r3, #37	; 0x25
    5434:	d003      	beq.n	543e <getSlowDividerConfig+0x26>
    5436:	9b01      	ldr	r3, [sp, #4]
    5438:	2b26      	cmp	r3, #38	; 0x26
    543a:	d003      	beq.n	5444 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    543c:	e008      	b.n	5450 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    543e:	2300      	movs	r3, #0
    5440:	9304      	str	r3, [sp, #16]
            break;
    5442:	e006      	b.n	5452 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5444:	2301      	movs	r3, #1
    5446:	9304      	str	r3, [sp, #16]
            break;
    5448:	e003      	b.n	5452 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    544a:	2302      	movs	r3, #2
    544c:	9304      	str	r3, [sp, #16]
            break;
    544e:	e000      	b.n	5452 <getSlowDividerConfig+0x3a>
                break;
    5450:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5452:	4b40      	ldr	r3, [pc, #256]	; (5554 <getSlowDividerConfig+0x13c>)
    5454:	681b      	ldr	r3, [r3, #0]
    5456:	2b00      	cmp	r3, #0
    5458:	d026      	beq.n	54a8 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    545a:	2300      	movs	r3, #0
    545c:	9303      	str	r3, [sp, #12]
    545e:	e01c      	b.n	549a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5460:	4b3c      	ldr	r3, [pc, #240]	; (5554 <getSlowDividerConfig+0x13c>)
    5462:	6819      	ldr	r1, [r3, #0]
    5464:	9a03      	ldr	r2, [sp, #12]
    5466:	4613      	mov	r3, r2
    5468:	005b      	lsls	r3, r3, #1
    546a:	4413      	add	r3, r2
    546c:	009b      	lsls	r3, r3, #2
    546e:	440b      	add	r3, r1
    5470:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	9a01      	ldr	r2, [sp, #4]
    5478:	429a      	cmp	r2, r3
    547a:	d10b      	bne.n	5494 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    547c:	4b35      	ldr	r3, [pc, #212]	; (5554 <getSlowDividerConfig+0x13c>)
    547e:	6819      	ldr	r1, [r3, #0]
    5480:	9a03      	ldr	r2, [sp, #12]
    5482:	4613      	mov	r3, r2
    5484:	005b      	lsls	r3, r3, #1
    5486:	4413      	add	r3, r2
    5488:	009b      	lsls	r3, r3, #2
    548a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    548e:	440b      	add	r3, r1
    5490:	9305      	str	r3, [sp, #20]
                break;
    5492:	e009      	b.n	54a8 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5494:	9b03      	ldr	r3, [sp, #12]
    5496:	3301      	adds	r3, #1
    5498:	9303      	str	r3, [sp, #12]
    549a:	4b2e      	ldr	r3, [pc, #184]	; (5554 <getSlowDividerConfig+0x13c>)
    549c:	681b      	ldr	r3, [r3, #0]
    549e:	7b1b      	ldrb	r3, [r3, #12]
    54a0:	461a      	mov	r2, r3
    54a2:	9b03      	ldr	r3, [sp, #12]
    54a4:	4293      	cmp	r3, r2
    54a6:	d3db      	bcc.n	5460 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    54a8:	9b05      	ldr	r3, [sp, #20]
    54aa:	2b00      	cmp	r3, #0
    54ac:	d14a      	bne.n	5544 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    54ae:	9a04      	ldr	r2, [sp, #16]
    54b0:	4613      	mov	r3, r2
    54b2:	005b      	lsls	r3, r3, #1
    54b4:	4413      	add	r3, r2
    54b6:	009b      	lsls	r3, r3, #2
    54b8:	4a27      	ldr	r2, [pc, #156]	; (5558 <getSlowDividerConfig+0x140>)
    54ba:	4413      	add	r3, r2
    54bc:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    54be:	4926      	ldr	r1, [pc, #152]	; (5558 <getSlowDividerConfig+0x140>)
    54c0:	9a04      	ldr	r2, [sp, #16]
    54c2:	4613      	mov	r3, r2
    54c4:	005b      	lsls	r3, r3, #1
    54c6:	4413      	add	r3, r2
    54c8:	009b      	lsls	r3, r3, #2
    54ca:	440b      	add	r3, r1
    54cc:	9a01      	ldr	r2, [sp, #4]
    54ce:	601a      	str	r2, [r3, #0]
        switch(Name)
    54d0:	9b01      	ldr	r3, [sp, #4]
    54d2:	2b27      	cmp	r3, #39	; 0x27
    54d4:	d027      	beq.n	5526 <getSlowDividerConfig+0x10e>
    54d6:	9b01      	ldr	r3, [sp, #4]
    54d8:	2b27      	cmp	r3, #39	; 0x27
    54da:	d835      	bhi.n	5548 <getSlowDividerConfig+0x130>
    54dc:	9b01      	ldr	r3, [sp, #4]
    54de:	2b25      	cmp	r3, #37	; 0x25
    54e0:	d003      	beq.n	54ea <getSlowDividerConfig+0xd2>
    54e2:	9b01      	ldr	r3, [sp, #4]
    54e4:	2b26      	cmp	r3, #38	; 0x26
    54e6:	d00f      	beq.n	5508 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    54e8:	e02e      	b.n	5548 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    54ea:	4b1c      	ldr	r3, [pc, #112]	; (555c <getSlowDividerConfig+0x144>)
    54ec:	695b      	ldr	r3, [r3, #20]
    54ee:	f003 030f 	and.w	r3, r3, #15
    54f2:	1c59      	adds	r1, r3, #1
    54f4:	4818      	ldr	r0, [pc, #96]	; (5558 <getSlowDividerConfig+0x140>)
    54f6:	9a04      	ldr	r2, [sp, #16]
    54f8:	4613      	mov	r3, r2
    54fa:	005b      	lsls	r3, r3, #1
    54fc:	4413      	add	r3, r2
    54fe:	009b      	lsls	r3, r3, #2
    5500:	4403      	add	r3, r0
    5502:	3304      	adds	r3, #4
    5504:	6019      	str	r1, [r3, #0]
                break;
    5506:	e020      	b.n	554a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5508:	4b14      	ldr	r3, [pc, #80]	; (555c <getSlowDividerConfig+0x144>)
    550a:	699b      	ldr	r3, [r3, #24]
    550c:	f003 030f 	and.w	r3, r3, #15
    5510:	1c59      	adds	r1, r3, #1
    5512:	4811      	ldr	r0, [pc, #68]	; (5558 <getSlowDividerConfig+0x140>)
    5514:	9a04      	ldr	r2, [sp, #16]
    5516:	4613      	mov	r3, r2
    5518:	005b      	lsls	r3, r3, #1
    551a:	4413      	add	r3, r2
    551c:	009b      	lsls	r3, r3, #2
    551e:	4403      	add	r3, r0
    5520:	3304      	adds	r3, #4
    5522:	6019      	str	r1, [r3, #0]
                break;
    5524:	e011      	b.n	554a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5526:	4b0d      	ldr	r3, [pc, #52]	; (555c <getSlowDividerConfig+0x144>)
    5528:	69db      	ldr	r3, [r3, #28]
    552a:	f003 030f 	and.w	r3, r3, #15
    552e:	1c59      	adds	r1, r3, #1
    5530:	4809      	ldr	r0, [pc, #36]	; (5558 <getSlowDividerConfig+0x140>)
    5532:	9a04      	ldr	r2, [sp, #16]
    5534:	4613      	mov	r3, r2
    5536:	005b      	lsls	r3, r3, #1
    5538:	4413      	add	r3, r2
    553a:	009b      	lsls	r3, r3, #2
    553c:	4403      	add	r3, r0
    553e:	3304      	adds	r3, #4
    5540:	6019      	str	r1, [r3, #0]
                break;
    5542:	e002      	b.n	554a <getSlowDividerConfig+0x132>
        }
    }
    5544:	bf00      	nop
    5546:	e000      	b.n	554a <getSlowDividerConfig+0x132>
                break;
    5548:	bf00      	nop

    return ReturnValue;
    554a:	9b05      	ldr	r3, [sp, #20]
}
    554c:	4618      	mov	r0, r3
    554e:	b006      	add	sp, #24
    5550:	4770      	bx	lr
    5552:	bf00      	nop
    5554:	1fff8ba8 	.word	0x1fff8ba8
    5558:	1fff8cbc 	.word	0x1fff8cbc
    555c:	40064000 	.word	0x40064000

00005560 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5560:	b500      	push	{lr}
    5562:	b083      	sub	sp, #12
    5564:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5566:	4b64      	ldr	r3, [pc, #400]	; (56f8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5568:	781b      	ldrb	r3, [r3, #0]
    556a:	f083 0301 	eor.w	r3, r3, #1
    556e:	b2db      	uxtb	r3, r3
    5570:	2b00      	cmp	r3, #0
    5572:	d05b      	beq.n	562c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5574:	4b60      	ldr	r3, [pc, #384]	; (56f8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5576:	2201      	movs	r2, #1
    5578:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    557a:	4b60      	ldr	r3, [pc, #384]	; (56fc <Clock_Ip_ClockInitializeObjects+0x19c>)
    557c:	785b      	ldrb	r3, [r3, #1]
    557e:	461a      	mov	r2, r3
    5580:	4613      	mov	r3, r2
    5582:	009b      	lsls	r3, r3, #2
    5584:	4413      	add	r3, r2
    5586:	009b      	lsls	r3, r3, #2
    5588:	4a5d      	ldr	r2, [pc, #372]	; (5700 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    558a:	4413      	add	r3, r2
    558c:	4a5d      	ldr	r2, [pc, #372]	; (5704 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    558e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5590:	4b5d      	ldr	r3, [pc, #372]	; (5708 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5592:	785b      	ldrb	r3, [r3, #1]
    5594:	461a      	mov	r2, r3
    5596:	4613      	mov	r3, r2
    5598:	009b      	lsls	r3, r3, #2
    559a:	4413      	add	r3, r2
    559c:	009b      	lsls	r3, r3, #2
    559e:	4a5b      	ldr	r2, [pc, #364]	; (570c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    55a0:	4413      	add	r3, r2
    55a2:	4a5b      	ldr	r2, [pc, #364]	; (5710 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    55a4:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    55a6:	4b5b      	ldr	r3, [pc, #364]	; (5714 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    55a8:	791b      	ldrb	r3, [r3, #4]
    55aa:	461a      	mov	r2, r3
    55ac:	4613      	mov	r3, r2
    55ae:	005b      	lsls	r3, r3, #1
    55b0:	4413      	add	r3, r2
    55b2:	009b      	lsls	r3, r3, #2
    55b4:	4a58      	ldr	r2, [pc, #352]	; (5718 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    55b6:	4413      	add	r3, r2
    55b8:	4a58      	ldr	r2, [pc, #352]	; (571c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    55ba:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    55bc:	4b58      	ldr	r3, [pc, #352]	; (5720 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    55be:	795b      	ldrb	r3, [r3, #5]
    55c0:	00db      	lsls	r3, r3, #3
    55c2:	4a58      	ldr	r2, [pc, #352]	; (5724 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    55c4:	4413      	add	r3, r2
    55c6:	4a58      	ldr	r2, [pc, #352]	; (5728 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    55c8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    55ca:	4b55      	ldr	r3, [pc, #340]	; (5720 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    55cc:	79db      	ldrb	r3, [r3, #7]
    55ce:	00db      	lsls	r3, r3, #3
    55d0:	4a54      	ldr	r2, [pc, #336]	; (5724 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    55d2:	4413      	add	r3, r2
    55d4:	4a55      	ldr	r2, [pc, #340]	; (572c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    55d6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    55d8:	4b55      	ldr	r3, [pc, #340]	; (5730 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55da:	799b      	ldrb	r3, [r3, #6]
    55dc:	009b      	lsls	r3, r3, #2
    55de:	4a55      	ldr	r2, [pc, #340]	; (5734 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55e0:	4413      	add	r3, r2
    55e2:	4a55      	ldr	r2, [pc, #340]	; (5738 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    55e4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    55e6:	4b52      	ldr	r3, [pc, #328]	; (5730 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55e8:	7a1b      	ldrb	r3, [r3, #8]
    55ea:	009b      	lsls	r3, r3, #2
    55ec:	4a51      	ldr	r2, [pc, #324]	; (5734 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55ee:	4413      	add	r3, r2
    55f0:	4a52      	ldr	r2, [pc, #328]	; (573c <Clock_Ip_ClockInitializeObjects+0x1dc>)
    55f2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    55f4:	4b4e      	ldr	r3, [pc, #312]	; (5730 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55f6:	7a5b      	ldrb	r3, [r3, #9]
    55f8:	009b      	lsls	r3, r3, #2
    55fa:	4a4e      	ldr	r2, [pc, #312]	; (5734 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55fc:	4413      	add	r3, r2
    55fe:	4a50      	ldr	r2, [pc, #320]	; (5740 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5600:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5602:	4b4b      	ldr	r3, [pc, #300]	; (5730 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5604:	7adb      	ldrb	r3, [r3, #11]
    5606:	009b      	lsls	r3, r3, #2
    5608:	4a4a      	ldr	r2, [pc, #296]	; (5734 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    560a:	4413      	add	r3, r2
    560c:	4a4d      	ldr	r2, [pc, #308]	; (5744 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    560e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5610:	4b47      	ldr	r3, [pc, #284]	; (5730 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5612:	7b1b      	ldrb	r3, [r3, #12]
    5614:	009b      	lsls	r3, r3, #2
    5616:	4a47      	ldr	r2, [pc, #284]	; (5734 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5618:	4413      	add	r3, r2
    561a:	4a4b      	ldr	r2, [pc, #300]	; (5748 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    561c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    561e:	4b44      	ldr	r3, [pc, #272]	; (5730 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5620:	7b9b      	ldrb	r3, [r3, #14]
    5622:	009b      	lsls	r3, r3, #2
    5624:	4a43      	ldr	r2, [pc, #268]	; (5734 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5626:	4413      	add	r3, r2
    5628:	4a48      	ldr	r2, [pc, #288]	; (574c <Clock_Ip_ClockInitializeObjects+0x1ec>)
    562a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    562c:	4b48      	ldr	r3, [pc, #288]	; (5750 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    562e:	781b      	ldrb	r3, [r3, #0]
    5630:	2b00      	cmp	r3, #0
    5632:	d002      	beq.n	563a <Clock_Ip_ClockInitializeObjects+0xda>
    5634:	9b01      	ldr	r3, [sp, #4]
    5636:	2b00      	cmp	r3, #0
    5638:	d003      	beq.n	5642 <Clock_Ip_ClockInitializeObjects+0xe2>
    563a:	4b46      	ldr	r3, [pc, #280]	; (5754 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b00      	cmp	r3, #0
    5640:	d056      	beq.n	56f0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5642:	f7ff fc09 	bl	4e58 <getFircConfig>
    5646:	4603      	mov	r3, r0
    5648:	4a43      	ldr	r2, [pc, #268]	; (5758 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    564a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    564c:	f7ff fc60 	bl	4f10 <getSoscConfig>
    5650:	4603      	mov	r3, r0
    5652:	4a42      	ldr	r2, [pc, #264]	; (575c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5654:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5656:	f7ff fca7 	bl	4fa8 <getSpllConfig>
    565a:	4603      	mov	r3, r0
    565c:	4a40      	ldr	r2, [pc, #256]	; (5760 <Clock_Ip_ClockInitializeObjects+0x200>)
    565e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5660:	2019      	movs	r0, #25
    5662:	f7ff fcfb 	bl	505c <getSelectorConfig>
    5666:	4603      	mov	r3, r0
    5668:	4a3e      	ldr	r2, [pc, #248]	; (5764 <Clock_Ip_ClockInitializeObjects+0x204>)
    566a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    566c:	201a      	movs	r0, #26
    566e:	f7ff fcf5 	bl	505c <getSelectorConfig>
    5672:	4603      	mov	r3, r0
    5674:	4a3c      	ldr	r2, [pc, #240]	; (5768 <Clock_Ip_ClockInitializeObjects+0x208>)
    5676:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5678:	201b      	movs	r0, #27
    567a:	f7ff fcef 	bl	505c <getSelectorConfig>
    567e:	4603      	mov	r3, r0
    5680:	4a3a      	ldr	r2, [pc, #232]	; (576c <Clock_Ip_ClockInitializeObjects+0x20c>)
    5682:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5684:	201d      	movs	r0, #29
    5686:	f7ff fd7b 	bl	5180 <getCoreDividerConfig>
    568a:	4603      	mov	r3, r0
    568c:	4a38      	ldr	r2, [pc, #224]	; (5770 <Clock_Ip_ClockInitializeObjects+0x210>)
    568e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5690:	201e      	movs	r0, #30
    5692:	f7ff fd75 	bl	5180 <getCoreDividerConfig>
    5696:	4603      	mov	r3, r0
    5698:	4a36      	ldr	r2, [pc, #216]	; (5774 <Clock_Ip_ClockInitializeObjects+0x214>)
    569a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    569c:	201f      	movs	r0, #31
    569e:	f7ff fd6f 	bl	5180 <getCoreDividerConfig>
    56a2:	4603      	mov	r3, r0
    56a4:	4a34      	ldr	r2, [pc, #208]	; (5778 <Clock_Ip_ClockInitializeObjects+0x218>)
    56a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    56a8:	2021      	movs	r0, #33	; 0x21
    56aa:	f7ff fe0f 	bl	52cc <getBusDividerConfig>
    56ae:	4603      	mov	r3, r0
    56b0:	4a32      	ldr	r2, [pc, #200]	; (577c <Clock_Ip_ClockInitializeObjects+0x21c>)
    56b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    56b4:	2022      	movs	r0, #34	; 0x22
    56b6:	f7ff fe09 	bl	52cc <getBusDividerConfig>
    56ba:	4603      	mov	r3, r0
    56bc:	4a30      	ldr	r2, [pc, #192]	; (5780 <Clock_Ip_ClockInitializeObjects+0x220>)
    56be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    56c0:	2023      	movs	r0, #35	; 0x23
    56c2:	f7ff fe03 	bl	52cc <getBusDividerConfig>
    56c6:	4603      	mov	r3, r0
    56c8:	4a2e      	ldr	r2, [pc, #184]	; (5784 <Clock_Ip_ClockInitializeObjects+0x224>)
    56ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    56cc:	2025      	movs	r0, #37	; 0x25
    56ce:	f7ff fea3 	bl	5418 <getSlowDividerConfig>
    56d2:	4603      	mov	r3, r0
    56d4:	4a2c      	ldr	r2, [pc, #176]	; (5788 <Clock_Ip_ClockInitializeObjects+0x228>)
    56d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    56d8:	2026      	movs	r0, #38	; 0x26
    56da:	f7ff fe9d 	bl	5418 <getSlowDividerConfig>
    56de:	4603      	mov	r3, r0
    56e0:	4a2a      	ldr	r2, [pc, #168]	; (578c <Clock_Ip_ClockInitializeObjects+0x22c>)
    56e2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    56e4:	2027      	movs	r0, #39	; 0x27
    56e6:	f7ff fe97 	bl	5418 <getSlowDividerConfig>
    56ea:	4603      	mov	r3, r0
    56ec:	4a28      	ldr	r2, [pc, #160]	; (5790 <Clock_Ip_ClockInitializeObjects+0x230>)
    56ee:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    56f0:	bf00      	nop
    56f2:	b003      	add	sp, #12
    56f4:	f85d fb04 	ldr.w	pc, [sp], #4
    56f8:	1fff8ce0 	.word	0x1fff8ce0
    56fc:	00008730 	.word	0x00008730
    5700:	00008d7c 	.word	0x00008d7c
    5704:	1fff8bac 	.word	0x1fff8bac
    5708:	000086f0 	.word	0x000086f0
    570c:	00008cc4 	.word	0x00008cc4
    5710:	1fff8bb0 	.word	0x1fff8bb0
    5714:	00008700 	.word	0x00008700
    5718:	00008d30 	.word	0x00008d30
    571c:	1fff8bb4 	.word	0x1fff8bb4
    5720:	00008740 	.word	0x00008740
    5724:	00008da8 	.word	0x00008da8
    5728:	1fff8bb8 	.word	0x1fff8bb8
    572c:	1fff8bf4 	.word	0x1fff8bf4
    5730:	000086d0 	.word	0x000086d0
    5734:	00008c80 	.word	0x00008c80
    5738:	1fff8bbc 	.word	0x1fff8bbc
    573c:	1fff8bf8 	.word	0x1fff8bf8
    5740:	1fff8bc0 	.word	0x1fff8bc0
    5744:	1fff8bfc 	.word	0x1fff8bfc
    5748:	1fff8bc4 	.word	0x1fff8bc4
    574c:	1fff8c00 	.word	0x1fff8c00
    5750:	1fff8b19 	.word	0x1fff8b19
    5754:	1fff8b10 	.word	0x1fff8b10
    5758:	1fff8bc8 	.word	0x1fff8bc8
    575c:	1fff8bcc 	.word	0x1fff8bcc
    5760:	1fff8bd0 	.word	0x1fff8bd0
    5764:	1fff8bd4 	.word	0x1fff8bd4
    5768:	1fff8bd8 	.word	0x1fff8bd8
    576c:	1fff8c04 	.word	0x1fff8c04
    5770:	1fff8bdc 	.word	0x1fff8bdc
    5774:	1fff8be0 	.word	0x1fff8be0
    5778:	1fff8c08 	.word	0x1fff8c08
    577c:	1fff8be4 	.word	0x1fff8be4
    5780:	1fff8be8 	.word	0x1fff8be8
    5784:	1fff8c0c 	.word	0x1fff8c0c
    5788:	1fff8bec 	.word	0x1fff8bec
    578c:	1fff8bf0 	.word	0x1fff8bf0
    5790:	1fff8c10 	.word	0x1fff8c10

00005794 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5794:	b500      	push	{lr}
    5796:	b083      	sub	sp, #12
    5798:	9001      	str	r0, [sp, #4]
    579a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    579c:	9b01      	ldr	r3, [sp, #4]
    579e:	2b03      	cmp	r3, #3
    57a0:	f000 8090 	beq.w	58c4 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    57a4:	9b01      	ldr	r3, [sp, #4]
    57a6:	2b03      	cmp	r3, #3
    57a8:	f200 80d3 	bhi.w	5952 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    57ac:	9b01      	ldr	r3, [sp, #4]
    57ae:	2b00      	cmp	r3, #0
    57b0:	d040      	beq.n	5834 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    57b2:	9b01      	ldr	r3, [sp, #4]
    57b4:	3b01      	subs	r3, #1
    57b6:	2b01      	cmp	r3, #1
    57b8:	f200 80cb 	bhi.w	5952 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    57bc:	9b00      	ldr	r3, [sp, #0]
    57be:	2b00      	cmp	r3, #0
    57c0:	f040 80c9 	bne.w	5956 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    57c4:	4b68      	ldr	r3, [pc, #416]	; (5968 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    57c6:	2200      	movs	r2, #0
    57c8:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    57ca:	4b68      	ldr	r3, [pc, #416]	; (596c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    57cc:	681b      	ldr	r3, [r3, #0]
    57ce:	685b      	ldr	r3, [r3, #4]
    57d0:	4a67      	ldr	r2, [pc, #412]	; (5970 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    57d2:	6812      	ldr	r2, [r2, #0]
    57d4:	4610      	mov	r0, r2
    57d6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    57d8:	4b66      	ldr	r3, [pc, #408]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	4a66      	ldr	r2, [pc, #408]	; (5978 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    57e0:	6812      	ldr	r2, [r2, #0]
    57e2:	4610      	mov	r0, r2
    57e4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    57e6:	4b65      	ldr	r3, [pc, #404]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	681b      	ldr	r3, [r3, #0]
    57ec:	4a64      	ldr	r2, [pc, #400]	; (5980 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    57ee:	6812      	ldr	r2, [r2, #0]
    57f0:	4610      	mov	r0, r2
    57f2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    57f4:	4b63      	ldr	r3, [pc, #396]	; (5984 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    57f6:	681b      	ldr	r3, [r3, #0]
    57f8:	681b      	ldr	r3, [r3, #0]
    57fa:	4a63      	ldr	r2, [pc, #396]	; (5988 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    57fc:	6812      	ldr	r2, [r2, #0]
    57fe:	4610      	mov	r0, r2
    5800:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5802:	4b62      	ldr	r3, [pc, #392]	; (598c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5804:	681b      	ldr	r3, [r3, #0]
    5806:	691b      	ldr	r3, [r3, #16]
    5808:	4a61      	ldr	r2, [pc, #388]	; (5990 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    580a:	6812      	ldr	r2, [r2, #0]
    580c:	6812      	ldr	r2, [r2, #0]
    580e:	4610      	mov	r0, r2
    5810:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5812:	4b60      	ldr	r3, [pc, #384]	; (5994 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	68db      	ldr	r3, [r3, #12]
    5818:	4a5f      	ldr	r2, [pc, #380]	; (5998 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    581a:	6812      	ldr	r2, [r2, #0]
    581c:	6812      	ldr	r2, [r2, #0]
    581e:	4610      	mov	r0, r2
    5820:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5822:	4b5e      	ldr	r3, [pc, #376]	; (599c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5824:	681b      	ldr	r3, [r3, #0]
    5826:	689b      	ldr	r3, [r3, #8]
    5828:	4a5d      	ldr	r2, [pc, #372]	; (59a0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    582a:	6812      	ldr	r2, [r2, #0]
    582c:	6812      	ldr	r2, [r2, #0]
    582e:	4610      	mov	r0, r2
    5830:	4798      	blx	r3
            }
        }
        break;
    5832:	e090      	b.n	5956 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5834:	9b00      	ldr	r3, [sp, #0]
    5836:	2b02      	cmp	r3, #2
    5838:	f040 808f 	bne.w	595a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    583c:	4b4a      	ldr	r3, [pc, #296]	; (5968 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    583e:	2201      	movs	r2, #1
    5840:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5842:	4b56      	ldr	r3, [pc, #344]	; (599c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5844:	681b      	ldr	r3, [r3, #0]
    5846:	685b      	ldr	r3, [r3, #4]
    5848:	4a55      	ldr	r2, [pc, #340]	; (59a0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    584a:	6812      	ldr	r2, [r2, #0]
    584c:	4610      	mov	r0, r2
    584e:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5850:	4b50      	ldr	r3, [pc, #320]	; (5994 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	691b      	ldr	r3, [r3, #16]
    5856:	4a50      	ldr	r2, [pc, #320]	; (5998 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5858:	6812      	ldr	r2, [r2, #0]
    585a:	4610      	mov	r0, r2
    585c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    585e:	4b4d      	ldr	r3, [pc, #308]	; (5994 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5860:	681b      	ldr	r3, [r3, #0]
    5862:	689b      	ldr	r3, [r3, #8]
    5864:	4a4c      	ldr	r2, [pc, #304]	; (5998 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5866:	6812      	ldr	r2, [r2, #0]
    5868:	4610      	mov	r0, r2
    586a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    586c:	4b47      	ldr	r3, [pc, #284]	; (598c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    586e:	681b      	ldr	r3, [r3, #0]
    5870:	68db      	ldr	r3, [r3, #12]
    5872:	4a47      	ldr	r2, [pc, #284]	; (5990 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5874:	6812      	ldr	r2, [r2, #0]
    5876:	4610      	mov	r0, r2
    5878:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    587a:	4b44      	ldr	r3, [pc, #272]	; (598c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	689b      	ldr	r3, [r3, #8]
    5880:	4a43      	ldr	r2, [pc, #268]	; (5990 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5882:	6812      	ldr	r2, [r2, #0]
    5884:	6812      	ldr	r2, [r2, #0]
    5886:	4610      	mov	r0, r2
    5888:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    588a:	4b38      	ldr	r3, [pc, #224]	; (596c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	685b      	ldr	r3, [r3, #4]
    5890:	4a44      	ldr	r2, [pc, #272]	; (59a4 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5892:	6812      	ldr	r2, [r2, #0]
    5894:	4610      	mov	r0, r2
    5896:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5898:	4b36      	ldr	r3, [pc, #216]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	4a42      	ldr	r2, [pc, #264]	; (59a8 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    58a0:	6812      	ldr	r2, [r2, #0]
    58a2:	4610      	mov	r0, r2
    58a4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    58a6:	4b35      	ldr	r3, [pc, #212]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	681b      	ldr	r3, [r3, #0]
    58ac:	4a3f      	ldr	r2, [pc, #252]	; (59ac <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    58ae:	6812      	ldr	r2, [r2, #0]
    58b0:	4610      	mov	r0, r2
    58b2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    58b4:	4b33      	ldr	r3, [pc, #204]	; (5984 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    58b6:	681b      	ldr	r3, [r3, #0]
    58b8:	681b      	ldr	r3, [r3, #0]
    58ba:	4a3d      	ldr	r2, [pc, #244]	; (59b0 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    58bc:	6812      	ldr	r2, [r2, #0]
    58be:	4610      	mov	r0, r2
    58c0:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    58c2:	e04a      	b.n	595a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    58c4:	9b00      	ldr	r3, [sp, #0]
    58c6:	2b02      	cmp	r3, #2
    58c8:	d149      	bne.n	595e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    58ca:	4b27      	ldr	r3, [pc, #156]	; (5968 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    58cc:	2201      	movs	r2, #1
    58ce:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    58d0:	4b32      	ldr	r3, [pc, #200]	; (599c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	685b      	ldr	r3, [r3, #4]
    58d6:	4a32      	ldr	r2, [pc, #200]	; (59a0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    58d8:	6812      	ldr	r2, [r2, #0]
    58da:	4610      	mov	r0, r2
    58dc:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    58de:	4b2d      	ldr	r3, [pc, #180]	; (5994 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	691b      	ldr	r3, [r3, #16]
    58e4:	4a2c      	ldr	r2, [pc, #176]	; (5998 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58e6:	6812      	ldr	r2, [r2, #0]
    58e8:	4610      	mov	r0, r2
    58ea:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    58ec:	4b29      	ldr	r3, [pc, #164]	; (5994 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58ee:	681b      	ldr	r3, [r3, #0]
    58f0:	689b      	ldr	r3, [r3, #8]
    58f2:	4a29      	ldr	r2, [pc, #164]	; (5998 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58f4:	6812      	ldr	r2, [r2, #0]
    58f6:	4610      	mov	r0, r2
    58f8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    58fa:	4b24      	ldr	r3, [pc, #144]	; (598c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    58fc:	681b      	ldr	r3, [r3, #0]
    58fe:	68db      	ldr	r3, [r3, #12]
    5900:	4a23      	ldr	r2, [pc, #140]	; (5990 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5902:	6812      	ldr	r2, [r2, #0]
    5904:	4610      	mov	r0, r2
    5906:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5908:	4b20      	ldr	r3, [pc, #128]	; (598c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    590a:	681b      	ldr	r3, [r3, #0]
    590c:	689b      	ldr	r3, [r3, #8]
    590e:	4a20      	ldr	r2, [pc, #128]	; (5990 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5910:	6812      	ldr	r2, [r2, #0]
    5912:	6812      	ldr	r2, [r2, #0]
    5914:	4610      	mov	r0, r2
    5916:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5918:	4b26      	ldr	r3, [pc, #152]	; (59b4 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	685b      	ldr	r3, [r3, #4]
    591e:	4a26      	ldr	r2, [pc, #152]	; (59b8 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5920:	6812      	ldr	r2, [r2, #0]
    5922:	4610      	mov	r0, r2
    5924:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5926:	4b25      	ldr	r3, [pc, #148]	; (59bc <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	4a24      	ldr	r2, [pc, #144]	; (59c0 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    592e:	6812      	ldr	r2, [r2, #0]
    5930:	4610      	mov	r0, r2
    5932:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5934:	4b23      	ldr	r3, [pc, #140]	; (59c4 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5936:	681b      	ldr	r3, [r3, #0]
    5938:	681b      	ldr	r3, [r3, #0]
    593a:	4a23      	ldr	r2, [pc, #140]	; (59c8 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    593c:	6812      	ldr	r2, [r2, #0]
    593e:	4610      	mov	r0, r2
    5940:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5942:	4b22      	ldr	r3, [pc, #136]	; (59cc <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5944:	681b      	ldr	r3, [r3, #0]
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	4a21      	ldr	r2, [pc, #132]	; (59d0 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    594a:	6812      	ldr	r2, [r2, #0]
    594c:	4610      	mov	r0, r2
    594e:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5950:	e005      	b.n	595e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5952:	bf00      	nop
    5954:	e004      	b.n	5960 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5956:	bf00      	nop
    5958:	e002      	b.n	5960 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    595a:	bf00      	nop
    595c:	e000      	b.n	5960 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    595e:	bf00      	nop
    }

}
    5960:	bf00      	nop
    5962:	b003      	add	sp, #12
    5964:	f85d fb04 	ldr.w	pc, [sp], #4
    5968:	1fff8b19 	.word	0x1fff8b19
    596c:	1fff8bb8 	.word	0x1fff8bb8
    5970:	1fff8bd8 	.word	0x1fff8bd8
    5974:	1fff8bbc 	.word	0x1fff8bbc
    5978:	1fff8be0 	.word	0x1fff8be0
    597c:	1fff8bc0 	.word	0x1fff8bc0
    5980:	1fff8be8 	.word	0x1fff8be8
    5984:	1fff8bc4 	.word	0x1fff8bc4
    5988:	1fff8bf0 	.word	0x1fff8bf0
    598c:	1fff8bac 	.word	0x1fff8bac
    5990:	1fff8bd0 	.word	0x1fff8bd0
    5994:	1fff8bb0 	.word	0x1fff8bb0
    5998:	1fff8bcc 	.word	0x1fff8bcc
    599c:	1fff8bb4 	.word	0x1fff8bb4
    59a0:	1fff8bc8 	.word	0x1fff8bc8
    59a4:	1fff8bd4 	.word	0x1fff8bd4
    59a8:	1fff8bdc 	.word	0x1fff8bdc
    59ac:	1fff8be4 	.word	0x1fff8be4
    59b0:	1fff8bec 	.word	0x1fff8bec
    59b4:	1fff8bf4 	.word	0x1fff8bf4
    59b8:	1fff8c04 	.word	0x1fff8c04
    59bc:	1fff8bf8 	.word	0x1fff8bf8
    59c0:	1fff8c08 	.word	0x1fff8c08
    59c4:	1fff8bfc 	.word	0x1fff8bfc
    59c8:	1fff8c0c 	.word	0x1fff8c0c
    59cc:	1fff8c00 	.word	0x1fff8c00
    59d0:	1fff8c10 	.word	0x1fff8c10

000059d4 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    59d4:	b500      	push	{lr}
    59d6:	b083      	sub	sp, #12
    59d8:	9001      	str	r0, [sp, #4]
    59da:	9100      	str	r1, [sp, #0]
    switch(Command)
    59dc:	9b00      	ldr	r3, [sp, #0]
    59de:	2b04      	cmp	r3, #4
    59e0:	d010      	beq.n	5a04 <Clock_Ip_Command+0x30>
    59e2:	9b00      	ldr	r3, [sp, #0]
    59e4:	2b04      	cmp	r3, #4
    59e6:	d811      	bhi.n	5a0c <Clock_Ip_Command+0x38>
    59e8:	9b00      	ldr	r3, [sp, #0]
    59ea:	2b01      	cmp	r3, #1
    59ec:	d006      	beq.n	59fc <Clock_Ip_Command+0x28>
    59ee:	9b00      	ldr	r3, [sp, #0]
    59f0:	2b02      	cmp	r3, #2
    59f2:	d10b      	bne.n	5a0c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    59f4:	9801      	ldr	r0, [sp, #4]
    59f6:	f7ff fdb3 	bl	5560 <Clock_Ip_ClockInitializeObjects>
            break;
    59fa:	e008      	b.n	5a0e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    59fc:	9801      	ldr	r0, [sp, #4]
    59fe:	f7ff f9db 	bl	4db8 <Clock_Ip_SpecificPlatformInitClock>
            break;
    5a02:	e004      	b.n	5a0e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5a04:	9801      	ldr	r0, [sp, #4]
    5a06:	f7ff f8ed 	bl	4be4 <DisableSafeClock>
            break;
    5a0a:	e000      	b.n	5a0e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5a0c:	bf00      	nop
    }
}
    5a0e:	bf00      	nop
    5a10:	b003      	add	sp, #12
    5a12:	f85d fb04 	ldr.w	pc, [sp], #4
    5a16:	bf00      	nop

00005a18 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5a18:	b500      	push	{lr}
    5a1a:	b085      	sub	sp, #20
    5a1c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5a1e:	4a20      	ldr	r2, [pc, #128]	; (5aa0 <Mcu_Init+0x88>)
    5a20:	9b01      	ldr	r3, [sp, #4]
    5a22:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5a24:	2300      	movs	r3, #0
    5a26:	9303      	str	r3, [sp, #12]
    5a28:	e010      	b.n	5a4c <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5a2a:	4b1d      	ldr	r3, [pc, #116]	; (5aa0 <Mcu_Init+0x88>)
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	6919      	ldr	r1, [r3, #16]
    5a30:	9a03      	ldr	r2, [sp, #12]
    5a32:	4613      	mov	r3, r2
    5a34:	005b      	lsls	r3, r3, #1
    5a36:	4413      	add	r3, r2
    5a38:	009b      	lsls	r3, r3, #2
    5a3a:	440b      	add	r3, r1
    5a3c:	681b      	ldr	r3, [r3, #0]
    5a3e:	9a03      	ldr	r2, [sp, #12]
    5a40:	b2d1      	uxtb	r1, r2
    5a42:	4a18      	ldr	r2, [pc, #96]	; (5aa4 <Mcu_Init+0x8c>)
    5a44:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5a46:	9b03      	ldr	r3, [sp, #12]
    5a48:	3301      	adds	r3, #1
    5a4a:	9303      	str	r3, [sp, #12]
    5a4c:	4b14      	ldr	r3, [pc, #80]	; (5aa0 <Mcu_Init+0x88>)
    5a4e:	681b      	ldr	r3, [r3, #0]
    5a50:	689b      	ldr	r3, [r3, #8]
    5a52:	9a03      	ldr	r2, [sp, #12]
    5a54:	429a      	cmp	r2, r3
    5a56:	d3e8      	bcc.n	5a2a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5a58:	2300      	movs	r3, #0
    5a5a:	9303      	str	r3, [sp, #12]
    5a5c:	e010      	b.n	5a80 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5a5e:	4b10      	ldr	r3, [pc, #64]	; (5aa0 <Mcu_Init+0x88>)
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	6959      	ldr	r1, [r3, #20]
    5a64:	9a03      	ldr	r2, [sp, #12]
    5a66:	4613      	mov	r3, r2
    5a68:	01db      	lsls	r3, r3, #7
    5a6a:	1a9b      	subs	r3, r3, r2
    5a6c:	00db      	lsls	r3, r3, #3
    5a6e:	440b      	add	r3, r1
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	9a03      	ldr	r2, [sp, #12]
    5a74:	b2d1      	uxtb	r1, r2
    5a76:	4a0c      	ldr	r2, [pc, #48]	; (5aa8 <Mcu_Init+0x90>)
    5a78:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5a7a:	9b03      	ldr	r3, [sp, #12]
    5a7c:	3301      	adds	r3, #1
    5a7e:	9303      	str	r3, [sp, #12]
    5a80:	4b07      	ldr	r3, [pc, #28]	; (5aa0 <Mcu_Init+0x88>)
    5a82:	681b      	ldr	r3, [r3, #0]
    5a84:	68db      	ldr	r3, [r3, #12]
    5a86:	9a03      	ldr	r2, [sp, #12]
    5a88:	429a      	cmp	r2, r3
    5a8a:	d3e8      	bcc.n	5a5e <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5a8c:	4b04      	ldr	r3, [pc, #16]	; (5aa0 <Mcu_Init+0x88>)
    5a8e:	681b      	ldr	r3, [r3, #0]
    5a90:	699b      	ldr	r3, [r3, #24]
    5a92:	4618      	mov	r0, r3
    5a94:	f000 f88a 	bl	5bac <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5a98:	bf00      	nop
    5a9a:	b005      	add	sp, #20
    5a9c:	f85d fb04 	ldr.w	pc, [sp], #4
    5aa0:	1fff8cec 	.word	0x1fff8cec
    5aa4:	1fff8ce8 	.word	0x1fff8ce8
    5aa8:	1fff8ce4 	.word	0x1fff8ce4

00005aac <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5aac:	b084      	sub	sp, #16
    5aae:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5ab0:	2301      	movs	r3, #1
    5ab2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5ab6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5aba:	4618      	mov	r0, r3
    5abc:	b004      	add	sp, #16
    5abe:	4770      	bx	lr

00005ac0 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5ac0:	b500      	push	{lr}
    5ac2:	b085      	sub	sp, #20
    5ac4:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5ac6:	4a0e      	ldr	r2, [pc, #56]	; (5b00 <Mcu_InitClock+0x40>)
    5ac8:	9b01      	ldr	r3, [sp, #4]
    5aca:	4413      	add	r3, r2
    5acc:	781b      	ldrb	r3, [r3, #0]
    5ace:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5ad2:	4b0c      	ldr	r3, [pc, #48]	; (5b04 <Mcu_InitClock+0x44>)
    5ad4:	681b      	ldr	r3, [r3, #0]
    5ad6:	6959      	ldr	r1, [r3, #20]
    5ad8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5adc:	4613      	mov	r3, r2
    5ade:	01db      	lsls	r3, r3, #7
    5ae0:	1a9b      	subs	r3, r3, r2
    5ae2:	00db      	lsls	r3, r3, #3
    5ae4:	440b      	add	r3, r1
    5ae6:	4618      	mov	r0, r3
    5ae8:	f000 f86a 	bl	5bc0 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5aec:	2300      	movs	r3, #0
    5aee:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5af2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5af6:	4618      	mov	r0, r3
    5af8:	b005      	add	sp, #20
    5afa:	f85d fb04 	ldr.w	pc, [sp], #4
    5afe:	bf00      	nop
    5b00:	1fff8ce4 	.word	0x1fff8ce4
    5b04:	1fff8cec 	.word	0x1fff8cec

00005b08 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5b08:	b500      	push	{lr}
    5b0a:	b085      	sub	sp, #20
    5b0c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5b0e:	4a0d      	ldr	r2, [pc, #52]	; (5b44 <Mcu_SetMode+0x3c>)
    5b10:	9b01      	ldr	r3, [sp, #4]
    5b12:	4413      	add	r3, r2
    5b14:	781b      	ldrb	r3, [r3, #0]
    5b16:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5b1a:	f001 fb27 	bl	716c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5b1e:	4b0a      	ldr	r3, [pc, #40]	; (5b48 <Mcu_SetMode+0x40>)
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	6919      	ldr	r1, [r3, #16]
    5b24:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5b28:	4613      	mov	r3, r2
    5b2a:	005b      	lsls	r3, r3, #1
    5b2c:	4413      	add	r3, r2
    5b2e:	009b      	lsls	r3, r3, #2
    5b30:	440b      	add	r3, r1
    5b32:	4618      	mov	r0, r3
    5b34:	f000 f84e 	bl	5bd4 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5b38:	f001 fb44 	bl	71c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5b3c:	bf00      	nop
    5b3e:	b005      	add	sp, #20
    5b40:	f85d fb04 	ldr.w	pc, [sp], #4
    5b44:	1fff8ce8 	.word	0x1fff8ce8
    5b48:	1fff8cec 	.word	0x1fff8cec

00005b4c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5b4c:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5b4e:	2302      	movs	r3, #2
    5b50:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5b52:	9b01      	ldr	r3, [sp, #4]
}
    5b54:	4618      	mov	r0, r3
    5b56:	b002      	add	sp, #8
    5b58:	4770      	bx	lr

00005b5a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5b5a:	b500      	push	{lr}
    5b5c:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5b5e:	f000 f843 	bl	5be8 <Mcu_Ipw_GetResetReason>
    5b62:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5b64:	9b01      	ldr	r3, [sp, #4]
}
    5b66:	4618      	mov	r0, r3
    5b68:	b003      	add	sp, #12
    5b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00005b6e <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5b6e:	b500      	push	{lr}
    5b70:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5b72:	f000 f83f 	bl	5bf4 <Mcu_Ipw_GetResetRawValue>
    5b76:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5b78:	9b01      	ldr	r3, [sp, #4]
}
    5b7a:	4618      	mov	r0, r3
    5b7c:	b003      	add	sp, #12
    5b7e:	f85d fb04 	ldr.w	pc, [sp], #4

00005b82 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5b82:	b500      	push	{lr}
    5b84:	b083      	sub	sp, #12
    5b86:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5b88:	9801      	ldr	r0, [sp, #4]
    5b8a:	f000 f839 	bl	5c00 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5b8e:	bf00      	nop
    5b90:	b003      	add	sp, #12
    5b92:	f85d fb04 	ldr.w	pc, [sp], #4

00005b96 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5b96:	b082      	sub	sp, #8
    5b98:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5b9a:	4b03      	ldr	r3, [pc, #12]	; (5ba8 <Mcu_ClkSrcFailureNotification+0x12>)
    5b9c:	681b      	ldr	r3, [r3, #0]
    5b9e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5ba0:	bf00      	nop
    5ba2:	b002      	add	sp, #8
    5ba4:	4770      	bx	lr
    5ba6:	bf00      	nop
    5ba8:	1fff8cec 	.word	0x1fff8cec

00005bac <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5bac:	b500      	push	{lr}
    5bae:	b083      	sub	sp, #12
    5bb0:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5bb2:	9801      	ldr	r0, [sp, #4]
    5bb4:	f000 f882 	bl	5cbc <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5bb8:	bf00      	nop
    5bba:	b003      	add	sp, #12
    5bbc:	f85d fb04 	ldr.w	pc, [sp], #4

00005bc0 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5bc0:	b500      	push	{lr}
    5bc2:	b083      	sub	sp, #12
    5bc4:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5bc6:	9801      	ldr	r0, [sp, #4]
    5bc8:	f7fc fc6a 	bl	24a0 <Clock_Ip_InitClock>
}
    5bcc:	bf00      	nop
    5bce:	b003      	add	sp, #12
    5bd0:	f85d fb04 	ldr.w	pc, [sp], #4

00005bd4 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5bd4:	b500      	push	{lr}
    5bd6:	b083      	sub	sp, #12
    5bd8:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5bda:	9801      	ldr	r0, [sp, #4]
    5bdc:	f000 f820 	bl	5c20 <Power_Ip_SetMode>
}
    5be0:	bf00      	nop
    5be2:	b003      	add	sp, #12
    5be4:	f85d fb04 	ldr.w	pc, [sp], #4

00005be8 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5be8:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5bea:	f000 f84f 	bl	5c8c <Power_Ip_GetResetReason>
    5bee:	4603      	mov	r3, r0
}
    5bf0:	4618      	mov	r0, r3
    5bf2:	bd08      	pop	{r3, pc}

00005bf4 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5bf4:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5bf6:	f000 f857 	bl	5ca8 <Power_Ip_GetResetRawValue>
    5bfa:	4603      	mov	r3, r0
}
    5bfc:	4618      	mov	r0, r3
    5bfe:	bd08      	pop	{r3, pc}

00005c00 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5c00:	b500      	push	{lr}
    5c02:	b083      	sub	sp, #12
    5c04:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5c06:	9b01      	ldr	r3, [sp, #4]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d102      	bne.n	5c12 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5c0c:	f000 f86c 	bl	5ce8 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5c10:	e001      	b.n	5c16 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5c12:	f000 f86e 	bl	5cf2 <Power_Ip_EnableSleepOnExit>
}
    5c16:	bf00      	nop
    5c18:	b003      	add	sp, #12
    5c1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005c20 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5c20:	b500      	push	{lr}
    5c22:	b085      	sub	sp, #20
    5c24:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5c26:	9b01      	ldr	r3, [sp, #4]
    5c28:	685b      	ldr	r3, [r3, #4]
    5c2a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5c2c:	9802      	ldr	r0, [sp, #8]
    5c2e:	f000 f9f5 	bl	601c <Power_Ip_SMC_ModeCheckEntry>
    5c32:	4603      	mov	r3, r0
    5c34:	2b00      	cmp	r3, #0
    5c36:	d002      	beq.n	5c3e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5c38:	2301      	movs	r3, #1
    5c3a:	9303      	str	r3, [sp, #12]
    5c3c:	e003      	b.n	5c46 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5c3e:	9801      	ldr	r0, [sp, #4]
    5c40:	f000 fa1e 	bl	6080 <Power_Ip_SMC_ModeConfig>
    5c44:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5c46:	9b03      	ldr	r3, [sp, #12]
    5c48:	2b01      	cmp	r3, #1
    5c4a:	d103      	bne.n	5c54 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5c4c:	21ff      	movs	r1, #255	; 0xff
    5c4e:	2003      	movs	r0, #3
    5c50:	f000 f8f4 	bl	5e3c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5c54:	bf00      	nop
    5c56:	b005      	add	sp, #20
    5c58:	f85d fb04 	ldr.w	pc, [sp], #4

00005c5c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5c5c:	b084      	sub	sp, #16
    5c5e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5c60:	230c      	movs	r3, #12
    5c62:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5c64:	4a08      	ldr	r2, [pc, #32]	; (5c88 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5c66:	9b01      	ldr	r3, [sp, #4]
    5c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c6c:	2b0e      	cmp	r3, #14
    5c6e:	d805      	bhi.n	5c7c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5c70:	4a05      	ldr	r2, [pc, #20]	; (5c88 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c78:	9303      	str	r3, [sp, #12]
    5c7a:	e001      	b.n	5c80 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5c7c:	230c      	movs	r3, #12
    5c7e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5c80:	9b03      	ldr	r3, [sp, #12]
}
    5c82:	4618      	mov	r0, r3
    5c84:	b004      	add	sp, #16
    5c86:	4770      	bx	lr
    5c88:	00008e1c 	.word	0x00008e1c

00005c8c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5c8c:	b500      	push	{lr}
    5c8e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5c90:	f000 f940 	bl	5f14 <Power_Ip_RCM_GetResetReason>
    5c94:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5c96:	9801      	ldr	r0, [sp, #4]
    5c98:	f7ff ffe0 	bl	5c5c <Power_Ip_ConvertIntergeToResetType>
    5c9c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5c9e:	9b00      	ldr	r3, [sp, #0]
}
    5ca0:	4618      	mov	r0, r3
    5ca2:	b003      	add	sp, #12
    5ca4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ca8 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5ca8:	b500      	push	{lr}
    5caa:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5cac:	f000 f98a 	bl	5fc4 <Power_Ip_RCM_GetResetRawValue>
    5cb0:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5cb2:	9b01      	ldr	r3, [sp, #4]
}
    5cb4:	4618      	mov	r0, r3
    5cb6:	b003      	add	sp, #12
    5cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00005cbc <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5cbc:	b500      	push	{lr}
    5cbe:	b083      	sub	sp, #12
    5cc0:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5cc2:	9b01      	ldr	r3, [sp, #4]
    5cc4:	681b      	ldr	r3, [r3, #0]
    5cc6:	4618      	mov	r0, r3
    5cc8:	f000 f90e 	bl	5ee8 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5ccc:	9b01      	ldr	r3, [sp, #4]
    5cce:	685b      	ldr	r3, [r3, #4]
    5cd0:	4618      	mov	r0, r3
    5cd2:	f000 f86d 	bl	5db0 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5cd6:	9b01      	ldr	r3, [sp, #4]
    5cd8:	689b      	ldr	r3, [r3, #8]
    5cda:	4618      	mov	r0, r3
    5cdc:	f000 f990 	bl	6000 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5ce0:	bf00      	nop
    5ce2:	b003      	add	sp, #12
    5ce4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ce8 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5ce8:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5cea:	f000 f811 	bl	5d10 <Power_Ip_CM4_DisableSleepOnExit>
}
    5cee:	bf00      	nop
    5cf0:	bd08      	pop	{r3, pc}

00005cf2 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5cf2:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5cf4:	f000 f820 	bl	5d38 <Power_Ip_CM4_EnableSleepOnExit>
}
    5cf8:	bf00      	nop
    5cfa:	bd08      	pop	{r3, pc}

00005cfc <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5cfc:	b082      	sub	sp, #8
    5cfe:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5d00:	4a02      	ldr	r2, [pc, #8]	; (5d0c <Power_Ip_InstallNotificationsCallback+0x10>)
    5d02:	9b01      	ldr	r3, [sp, #4]
    5d04:	6013      	str	r3, [r2, #0]
}
    5d06:	bf00      	nop
    5d08:	b002      	add	sp, #8
    5d0a:	4770      	bx	lr
    5d0c:	1fff8b1c 	.word	0x1fff8b1c

00005d10 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5d10:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5d12:	2300      	movs	r3, #0
    5d14:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5d16:	4b07      	ldr	r3, [pc, #28]	; (5d34 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	685b      	ldr	r3, [r3, #4]
    5d1c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5d1e:	9b01      	ldr	r3, [sp, #4]
    5d20:	f023 0302 	bic.w	r3, r3, #2
    5d24:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5d26:	4b03      	ldr	r3, [pc, #12]	; (5d34 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5d28:	681b      	ldr	r3, [r3, #0]
    5d2a:	9a01      	ldr	r2, [sp, #4]
    5d2c:	605a      	str	r2, [r3, #4]
}
    5d2e:	bf00      	nop
    5d30:	b002      	add	sp, #8
    5d32:	4770      	bx	lr
    5d34:	1fff8b20 	.word	0x1fff8b20

00005d38 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5d38:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5d3a:	2300      	movs	r3, #0
    5d3c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5d3e:	4b07      	ldr	r3, [pc, #28]	; (5d5c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5d40:	681b      	ldr	r3, [r3, #0]
    5d42:	685b      	ldr	r3, [r3, #4]
    5d44:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5d46:	9b01      	ldr	r3, [sp, #4]
    5d48:	f043 0302 	orr.w	r3, r3, #2
    5d4c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5d4e:	4b03      	ldr	r3, [pc, #12]	; (5d5c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	9a01      	ldr	r2, [sp, #4]
    5d54:	605a      	str	r2, [r3, #4]
}
    5d56:	bf00      	nop
    5d58:	b002      	add	sp, #8
    5d5a:	4770      	bx	lr
    5d5c:	1fff8b20 	.word	0x1fff8b20

00005d60 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5d60:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5d62:	2300      	movs	r3, #0
    5d64:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5d66:	4b07      	ldr	r3, [pc, #28]	; (5d84 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	685b      	ldr	r3, [r3, #4]
    5d6c:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5d6e:	9b01      	ldr	r3, [sp, #4]
    5d70:	f043 0304 	orr.w	r3, r3, #4
    5d74:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5d76:	4b03      	ldr	r3, [pc, #12]	; (5d84 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5d78:	681b      	ldr	r3, [r3, #0]
    5d7a:	9a01      	ldr	r2, [sp, #4]
    5d7c:	605a      	str	r2, [r3, #4]
}
    5d7e:	bf00      	nop
    5d80:	b002      	add	sp, #8
    5d82:	4770      	bx	lr
    5d84:	1fff8b20 	.word	0x1fff8b20

00005d88 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5d88:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5d8a:	2300      	movs	r3, #0
    5d8c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5d8e:	4b07      	ldr	r3, [pc, #28]	; (5dac <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5d90:	681b      	ldr	r3, [r3, #0]
    5d92:	685b      	ldr	r3, [r3, #4]
    5d94:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5d96:	9b01      	ldr	r3, [sp, #4]
    5d98:	f023 0304 	bic.w	r3, r3, #4
    5d9c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5d9e:	4b03      	ldr	r3, [pc, #12]	; (5dac <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5da0:	681b      	ldr	r3, [r3, #0]
    5da2:	9a01      	ldr	r2, [sp, #4]
    5da4:	605a      	str	r2, [r3, #4]
}
    5da6:	bf00      	nop
    5da8:	b002      	add	sp, #8
    5daa:	4770      	bx	lr
    5dac:	1fff8b20 	.word	0x1fff8b20

00005db0 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5db0:	b084      	sub	sp, #16
    5db2:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5db4:	4b20      	ldr	r3, [pc, #128]	; (5e38 <Power_Ip_PMC_PowerInit+0x88>)
    5db6:	781b      	ldrb	r3, [r3, #0]
    5db8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5dbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5dc0:	f003 030f 	and.w	r3, r3, #15
    5dc4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5dc8:	9b01      	ldr	r3, [sp, #4]
    5dca:	781a      	ldrb	r2, [r3, #0]
    5dcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5dd0:	4313      	orrs	r3, r2
    5dd2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5dd6:	4a18      	ldr	r2, [pc, #96]	; (5e38 <Power_Ip_PMC_PowerInit+0x88>)
    5dd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ddc:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5dde:	4b16      	ldr	r3, [pc, #88]	; (5e38 <Power_Ip_PMC_PowerInit+0x88>)
    5de0:	785b      	ldrb	r3, [r3, #1]
    5de2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5de6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5dea:	f003 031f 	and.w	r3, r3, #31
    5dee:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5df2:	9b01      	ldr	r3, [sp, #4]
    5df4:	785a      	ldrb	r2, [r3, #1]
    5df6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5dfa:	4313      	orrs	r3, r2
    5dfc:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5e00:	4a0d      	ldr	r2, [pc, #52]	; (5e38 <Power_Ip_PMC_PowerInit+0x88>)
    5e02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e06:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5e08:	4b0b      	ldr	r3, [pc, #44]	; (5e38 <Power_Ip_PMC_PowerInit+0x88>)
    5e0a:	789b      	ldrb	r3, [r3, #2]
    5e0c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5e10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5e18:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5e1c:	9b01      	ldr	r3, [sp, #4]
    5e1e:	789a      	ldrb	r2, [r3, #2]
    5e20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e24:	4313      	orrs	r3, r2
    5e26:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5e2a:	4a03      	ldr	r2, [pc, #12]	; (5e38 <Power_Ip_PMC_PowerInit+0x88>)
    5e2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e30:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5e32:	bf00      	nop
    5e34:	b004      	add	sp, #16
    5e36:	4770      	bx	lr
    5e38:	4007d000 	.word	0x4007d000

00005e3c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5e3c:	b500      	push	{lr}
    5e3e:	b083      	sub	sp, #12
    5e40:	9001      	str	r0, [sp, #4]
    5e42:	460b      	mov	r3, r1
    5e44:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5e48:	4b05      	ldr	r3, [pc, #20]	; (5e60 <Power_Ip_ReportPowerErrors+0x24>)
    5e4a:	681b      	ldr	r3, [r3, #0]
    5e4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5e50:	4611      	mov	r1, r2
    5e52:	9801      	ldr	r0, [sp, #4]
    5e54:	4798      	blx	r3
}
    5e56:	bf00      	nop
    5e58:	b003      	add	sp, #12
    5e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    5e5e:	bf00      	nop
    5e60:	1fff8b1c 	.word	0x1fff8b1c

00005e64 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5e64:	b082      	sub	sp, #8
    5e66:	9001      	str	r0, [sp, #4]
    5e68:	460b      	mov	r3, r1
    5e6a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5e6e:	bf00      	nop
    5e70:	b002      	add	sp, #8
    5e72:	4770      	bx	lr

00005e74 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5e74:	b500      	push	{lr}
    5e76:	b085      	sub	sp, #20
    5e78:	9003      	str	r0, [sp, #12]
    5e7a:	9102      	str	r1, [sp, #8]
    5e7c:	9201      	str	r2, [sp, #4]
    5e7e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5e80:	2000      	movs	r0, #0
    5e82:	f7fc f83c 	bl	1efe <OsIf_GetCounter>
    5e86:	4602      	mov	r2, r0
    5e88:	9b03      	ldr	r3, [sp, #12]
    5e8a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5e8c:	9b02      	ldr	r3, [sp, #8]
    5e8e:	2200      	movs	r2, #0
    5e90:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5e92:	2100      	movs	r1, #0
    5e94:	9800      	ldr	r0, [sp, #0]
    5e96:	f7fc f87e 	bl	1f96 <OsIf_MicrosToTicks>
    5e9a:	4602      	mov	r2, r0
    5e9c:	9b01      	ldr	r3, [sp, #4]
    5e9e:	601a      	str	r2, [r3, #0]
}
    5ea0:	bf00      	nop
    5ea2:	b005      	add	sp, #20
    5ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ea8 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5ea8:	b500      	push	{lr}
    5eaa:	b087      	sub	sp, #28
    5eac:	9003      	str	r0, [sp, #12]
    5eae:	9102      	str	r1, [sp, #8]
    5eb0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5eb2:	2300      	movs	r3, #0
    5eb4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5eb8:	2100      	movs	r1, #0
    5eba:	9803      	ldr	r0, [sp, #12]
    5ebc:	f7fc f838 	bl	1f30 <OsIf_GetElapsed>
    5ec0:	4602      	mov	r2, r0
    5ec2:	9b02      	ldr	r3, [sp, #8]
    5ec4:	681b      	ldr	r3, [r3, #0]
    5ec6:	441a      	add	r2, r3
    5ec8:	9b02      	ldr	r3, [sp, #8]
    5eca:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5ecc:	9b02      	ldr	r3, [sp, #8]
    5ece:	681b      	ldr	r3, [r3, #0]
    5ed0:	9a01      	ldr	r2, [sp, #4]
    5ed2:	429a      	cmp	r2, r3
    5ed4:	d802      	bhi.n	5edc <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5ed6:	2301      	movs	r3, #1
    5ed8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5edc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5ee0:	4618      	mov	r0, r3
    5ee2:	b007      	add	sp, #28
    5ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ee8 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5ee8:	b082      	sub	sp, #8
    5eea:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5eec:	9b01      	ldr	r3, [sp, #4]
    5eee:	681a      	ldr	r2, [r3, #0]
    5ef0:	4907      	ldr	r1, [pc, #28]	; (5f10 <Power_Ip_RCM_ResetInit+0x28>)
    5ef2:	f641 7307 	movw	r3, #7943	; 0x1f07
    5ef6:	4013      	ands	r3, r2
    5ef8:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5efa:	9b01      	ldr	r3, [sp, #4]
    5efc:	685a      	ldr	r2, [r3, #4]
    5efe:	4904      	ldr	r1, [pc, #16]	; (5f10 <Power_Ip_RCM_ResetInit+0x28>)
    5f00:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5f04:	4013      	ands	r3, r2
    5f06:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5f08:	bf00      	nop
    5f0a:	b002      	add	sp, #8
    5f0c:	4770      	bx	lr
    5f0e:	bf00      	nop
    5f10:	4007f000 	.word	0x4007f000

00005f14 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5f14:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5f16:	230c      	movs	r3, #12
    5f18:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5f1a:	2300      	movs	r3, #0
    5f1c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5f1e:	2300      	movs	r3, #0
    5f20:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5f22:	2300      	movs	r3, #0
    5f24:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5f26:	4b25      	ldr	r3, [pc, #148]	; (5fbc <Power_Ip_RCM_GetResetReason+0xa8>)
    5f28:	699a      	ldr	r2, [r3, #24]
    5f2a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5f2e:	4013      	ands	r3, r2
    5f30:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5f32:	9b03      	ldr	r3, [sp, #12]
    5f34:	2b00      	cmp	r3, #0
    5f36:	d008      	beq.n	5f4a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5f38:	4920      	ldr	r1, [pc, #128]	; (5fbc <Power_Ip_RCM_GetResetReason+0xa8>)
    5f3a:	9a03      	ldr	r2, [sp, #12]
    5f3c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5f40:	4013      	ands	r3, r2
    5f42:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5f44:	4a1e      	ldr	r2, [pc, #120]	; (5fc0 <Power_Ip_RCM_GetResetReason+0xac>)
    5f46:	9b03      	ldr	r3, [sp, #12]
    5f48:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5f4a:	4b1d      	ldr	r3, [pc, #116]	; (5fc0 <Power_Ip_RCM_GetResetReason+0xac>)
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5f50:	9a02      	ldr	r2, [sp, #8]
    5f52:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5f56:	4013      	ands	r3, r2
    5f58:	2b82      	cmp	r3, #130	; 0x82
    5f5a:	d102      	bne.n	5f62 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5f5c:	2305      	movs	r3, #5
    5f5e:	9307      	str	r3, [sp, #28]
    5f60:	e027      	b.n	5fb2 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5f62:	2300      	movs	r3, #0
    5f64:	9306      	str	r3, [sp, #24]
    5f66:	e021      	b.n	5fac <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5f68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5f6c:	9b06      	ldr	r3, [sp, #24]
    5f6e:	fa22 f303 	lsr.w	r3, r2, r3
    5f72:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5f74:	9a01      	ldr	r2, [sp, #4]
    5f76:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5f7a:	4013      	ands	r3, r2
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	d012      	beq.n	5fa6 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5f80:	9a01      	ldr	r2, [sp, #4]
    5f82:	9b02      	ldr	r3, [sp, #8]
    5f84:	4013      	ands	r3, r2
    5f86:	2b00      	cmp	r3, #0
    5f88:	d00a      	beq.n	5fa0 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5f8a:	9b05      	ldr	r3, [sp, #20]
    5f8c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5f8e:	9b04      	ldr	r3, [sp, #16]
    5f90:	3301      	adds	r3, #1
    5f92:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5f94:	9b04      	ldr	r3, [sp, #16]
    5f96:	2b01      	cmp	r3, #1
    5f98:	d902      	bls.n	5fa0 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5f9a:	230d      	movs	r3, #13
    5f9c:	9307      	str	r3, [sp, #28]
                        break;
    5f9e:	e008      	b.n	5fb2 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5fa0:	9b05      	ldr	r3, [sp, #20]
    5fa2:	3301      	adds	r3, #1
    5fa4:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5fa6:	9b06      	ldr	r3, [sp, #24]
    5fa8:	3301      	adds	r3, #1
    5faa:	9306      	str	r3, [sp, #24]
    5fac:	9b06      	ldr	r3, [sp, #24]
    5fae:	2b1f      	cmp	r3, #31
    5fb0:	d9da      	bls.n	5f68 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5fb2:	9b07      	ldr	r3, [sp, #28]
}
    5fb4:	4618      	mov	r0, r3
    5fb6:	b008      	add	sp, #32
    5fb8:	4770      	bx	lr
    5fba:	bf00      	nop
    5fbc:	4007f000 	.word	0x4007f000
    5fc0:	1fff8cf0 	.word	0x1fff8cf0

00005fc4 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5fc4:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5fc6:	4b0c      	ldr	r3, [pc, #48]	; (5ff8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5fc8:	699a      	ldr	r2, [r3, #24]
    5fca:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5fce:	4013      	ands	r3, r2
    5fd0:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5fd2:	9b01      	ldr	r3, [sp, #4]
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d008      	beq.n	5fea <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5fd8:	4907      	ldr	r1, [pc, #28]	; (5ff8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5fda:	9a01      	ldr	r2, [sp, #4]
    5fdc:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5fe0:	4013      	ands	r3, r2
    5fe2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5fe4:	4a05      	ldr	r2, [pc, #20]	; (5ffc <Power_Ip_RCM_GetResetRawValue+0x38>)
    5fe6:	9b01      	ldr	r3, [sp, #4]
    5fe8:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5fea:	4b04      	ldr	r3, [pc, #16]	; (5ffc <Power_Ip_RCM_GetResetRawValue+0x38>)
    5fec:	681b      	ldr	r3, [r3, #0]
    5fee:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5ff0:	9b00      	ldr	r3, [sp, #0]
}
    5ff2:	4618      	mov	r0, r3
    5ff4:	b002      	add	sp, #8
    5ff6:	4770      	bx	lr
    5ff8:	4007f000 	.word	0x4007f000
    5ffc:	1fff8cf0 	.word	0x1fff8cf0

00006000 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6000:	b082      	sub	sp, #8
    6002:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	681b      	ldr	r3, [r3, #0]
    6008:	4a03      	ldr	r2, [pc, #12]	; (6018 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    600a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    600e:	6093      	str	r3, [r2, #8]
}
    6010:	bf00      	nop
    6012:	b002      	add	sp, #8
    6014:	4770      	bx	lr
    6016:	bf00      	nop
    6018:	4007e000 	.word	0x4007e000

0000601c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    601c:	b084      	sub	sp, #16
    601e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6020:	2301      	movs	r3, #1
    6022:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6024:	4b15      	ldr	r3, [pc, #84]	; (607c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6026:	695b      	ldr	r3, [r3, #20]
    6028:	b2db      	uxtb	r3, r3
    602a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    602c:	9b01      	ldr	r3, [sp, #4]
    602e:	2b02      	cmp	r3, #2
    6030:	d012      	beq.n	6058 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    6032:	9b01      	ldr	r3, [sp, #4]
    6034:	2b02      	cmp	r3, #2
    6036:	d818      	bhi.n	606a <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6038:	9b01      	ldr	r3, [sp, #4]
    603a:	2b00      	cmp	r3, #0
    603c:	d003      	beq.n	6046 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    603e:	9b01      	ldr	r3, [sp, #4]
    6040:	2b01      	cmp	r3, #1
    6042:	d003      	beq.n	604c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6044:	e011      	b.n	606a <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6046:	2300      	movs	r3, #0
    6048:	9303      	str	r3, [sp, #12]
            break;
    604a:	e013      	b.n	6074 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    604c:	9b02      	ldr	r3, [sp, #8]
    604e:	2b01      	cmp	r3, #1
    6050:	d10d      	bne.n	606e <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    6052:	2300      	movs	r3, #0
    6054:	9303      	str	r3, [sp, #12]
            break;
    6056:	e00a      	b.n	606e <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6058:	9b02      	ldr	r3, [sp, #8]
    605a:	2b01      	cmp	r3, #1
    605c:	d002      	beq.n	6064 <Power_Ip_SMC_ModeCheckEntry+0x48>
    605e:	9b02      	ldr	r3, [sp, #8]
    6060:	2b10      	cmp	r3, #16
    6062:	d106      	bne.n	6072 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6064:	2300      	movs	r3, #0
    6066:	9303      	str	r3, [sp, #12]
            break;
    6068:	e003      	b.n	6072 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    606a:	bf00      	nop
    606c:	e002      	b.n	6074 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    606e:	bf00      	nop
    6070:	e000      	b.n	6074 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6072:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6074:	9b03      	ldr	r3, [sp, #12]
}
    6076:	4618      	mov	r0, r3
    6078:	b004      	add	sp, #16
    607a:	4770      	bx	lr
    607c:	4007e000 	.word	0x4007e000

00006080 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6080:	b500      	push	{lr}
    6082:	b08b      	sub	sp, #44	; 0x2c
    6084:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6086:	2300      	movs	r3, #0
    6088:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    608a:	2300      	movs	r3, #0
    608c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    608e:	2300      	movs	r3, #0
    6090:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6094:	9b01      	ldr	r3, [sp, #4]
    6096:	685b      	ldr	r3, [r3, #4]
    6098:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    609a:	9b08      	ldr	r3, [sp, #32]
    609c:	2b02      	cmp	r3, #2
    609e:	d076      	beq.n	618e <Power_Ip_SMC_ModeConfig+0x10e>
    60a0:	9b08      	ldr	r3, [sp, #32]
    60a2:	2b02      	cmp	r3, #2
    60a4:	f200 80ab 	bhi.w	61fe <Power_Ip_SMC_ModeConfig+0x17e>
    60a8:	9b08      	ldr	r3, [sp, #32]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d003      	beq.n	60b6 <Power_Ip_SMC_ModeConfig+0x36>
    60ae:	9b08      	ldr	r3, [sp, #32]
    60b0:	2b01      	cmp	r3, #1
    60b2:	d034      	beq.n	611e <Power_Ip_SMC_ModeConfig+0x9e>
    60b4:	e0a3      	b.n	61fe <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    60b6:	4b58      	ldr	r3, [pc, #352]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    60b8:	68db      	ldr	r3, [r3, #12]
    60ba:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    60bc:	9b06      	ldr	r3, [sp, #24]
    60be:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    60c2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    60c4:	4a54      	ldr	r2, [pc, #336]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    60c6:	9b06      	ldr	r3, [sp, #24]
    60c8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    60ca:	aa02      	add	r2, sp, #8
    60cc:	a903      	add	r1, sp, #12
    60ce:	a804      	add	r0, sp, #16
    60d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    60d4:	f7ff fece 	bl	5e74 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    60d8:	9a02      	ldr	r2, [sp, #8]
    60da:	a903      	add	r1, sp, #12
    60dc:	ab04      	add	r3, sp, #16
    60de:	4618      	mov	r0, r3
    60e0:	f7ff fee2 	bl	5ea8 <Power_Ip_TimeoutExpired>
    60e4:	4603      	mov	r3, r0
    60e6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    60ea:	4b4b      	ldr	r3, [pc, #300]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    60ec:	695b      	ldr	r3, [r3, #20]
    60ee:	f003 0301 	and.w	r3, r3, #1
    60f2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    60f4:	9b05      	ldr	r3, [sp, #20]
    60f6:	2b01      	cmp	r3, #1
    60f8:	d006      	beq.n	6108 <Power_Ip_SMC_ModeConfig+0x88>
    60fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    60fe:	f083 0301 	eor.w	r3, r3, #1
    6102:	b2db      	uxtb	r3, r3
    6104:	2b00      	cmp	r3, #0
    6106:	d1e7      	bne.n	60d8 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6108:	f89d 301f 	ldrb.w	r3, [sp, #31]
    610c:	2b00      	cmp	r3, #0
    610e:	d079      	beq.n	6204 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6110:	2301      	movs	r3, #1
    6112:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6114:	21ff      	movs	r1, #255	; 0xff
    6116:	2000      	movs	r0, #0
    6118:	f7ff fe90 	bl	5e3c <Power_Ip_ReportPowerErrors>
            }

            break;
    611c:	e072      	b.n	6204 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    611e:	4b3e      	ldr	r3, [pc, #248]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    6120:	68db      	ldr	r3, [r3, #12]
    6122:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6124:	9b06      	ldr	r3, [sp, #24]
    6126:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    612a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    612c:	9b06      	ldr	r3, [sp, #24]
    612e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6132:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6134:	4a38      	ldr	r2, [pc, #224]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    6136:	9b06      	ldr	r3, [sp, #24]
    6138:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    613a:	aa02      	add	r2, sp, #8
    613c:	a903      	add	r1, sp, #12
    613e:	a804      	add	r0, sp, #16
    6140:	f24c 3350 	movw	r3, #50000	; 0xc350
    6144:	f7ff fe96 	bl	5e74 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6148:	9a02      	ldr	r2, [sp, #8]
    614a:	a903      	add	r1, sp, #12
    614c:	ab04      	add	r3, sp, #16
    614e:	4618      	mov	r0, r3
    6150:	f7ff feaa 	bl	5ea8 <Power_Ip_TimeoutExpired>
    6154:	4603      	mov	r3, r0
    6156:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    615a:	4b2f      	ldr	r3, [pc, #188]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    615c:	695b      	ldr	r3, [r3, #20]
    615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6162:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6164:	9b05      	ldr	r3, [sp, #20]
    6166:	2b80      	cmp	r3, #128	; 0x80
    6168:	d006      	beq.n	6178 <Power_Ip_SMC_ModeConfig+0xf8>
    616a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    616e:	f083 0301 	eor.w	r3, r3, #1
    6172:	b2db      	uxtb	r3, r3
    6174:	2b00      	cmp	r3, #0
    6176:	d1e7      	bne.n	6148 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6178:	f89d 301f 	ldrb.w	r3, [sp, #31]
    617c:	2b00      	cmp	r3, #0
    617e:	d043      	beq.n	6208 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6180:	2301      	movs	r3, #1
    6182:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6184:	21ff      	movs	r1, #255	; 0xff
    6186:	2000      	movs	r0, #0
    6188:	f7ff fe58 	bl	5e3c <Power_Ip_ReportPowerErrors>
            }

            break;
    618c:	e03c      	b.n	6208 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    618e:	4b22      	ldr	r3, [pc, #136]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    6190:	68db      	ldr	r3, [r3, #12]
    6192:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6194:	9b06      	ldr	r3, [sp, #24]
    6196:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    619a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    619c:	9b06      	ldr	r3, [sp, #24]
    619e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    61a2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    61a4:	4a1c      	ldr	r2, [pc, #112]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    61a6:	9b06      	ldr	r3, [sp, #24]
    61a8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    61aa:	aa02      	add	r2, sp, #8
    61ac:	a903      	add	r1, sp, #12
    61ae:	a804      	add	r0, sp, #16
    61b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    61b4:	f7ff fe5e 	bl	5e74 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    61b8:	9a02      	ldr	r2, [sp, #8]
    61ba:	a903      	add	r1, sp, #12
    61bc:	ab04      	add	r3, sp, #16
    61be:	4618      	mov	r0, r3
    61c0:	f7ff fe72 	bl	5ea8 <Power_Ip_TimeoutExpired>
    61c4:	4603      	mov	r3, r0
    61c6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    61ca:	4b13      	ldr	r3, [pc, #76]	; (6218 <Power_Ip_SMC_ModeConfig+0x198>)
    61cc:	695b      	ldr	r3, [r3, #20]
    61ce:	f003 0304 	and.w	r3, r3, #4
    61d2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    61d4:	9b05      	ldr	r3, [sp, #20]
    61d6:	2b04      	cmp	r3, #4
    61d8:	d006      	beq.n	61e8 <Power_Ip_SMC_ModeConfig+0x168>
    61da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    61de:	f083 0301 	eor.w	r3, r3, #1
    61e2:	b2db      	uxtb	r3, r3
    61e4:	2b00      	cmp	r3, #0
    61e6:	d1e7      	bne.n	61b8 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    61e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    61ec:	2b00      	cmp	r3, #0
    61ee:	d00d      	beq.n	620c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    61f0:	2301      	movs	r3, #1
    61f2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    61f4:	21ff      	movs	r1, #255	; 0xff
    61f6:	2000      	movs	r0, #0
    61f8:	f7ff fe20 	bl	5e3c <Power_Ip_ReportPowerErrors>
            }

            break;
    61fc:	e006      	b.n	620c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    61fe:	2301      	movs	r3, #1
    6200:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6202:	e004      	b.n	620e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6204:	bf00      	nop
    6206:	e002      	b.n	620e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6208:	bf00      	nop
    620a:	e000      	b.n	620e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    620c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6210:	4618      	mov	r0, r3
    6212:	b00b      	add	sp, #44	; 0x2c
    6214:	f85d fb04 	ldr.w	pc, [sp], #4
    6218:	4007e000 	.word	0x4007e000

0000621c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    621c:	b500      	push	{lr}
    621e:	b085      	sub	sp, #20
    6220:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6222:	9b01      	ldr	r3, [sp, #4]
    6224:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6226:	9803      	ldr	r0, [sp, #12]
    6228:	f000 fbc8 	bl	69bc <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    622c:	4a03      	ldr	r2, [pc, #12]	; (623c <Port_Init+0x20>)
    622e:	9b03      	ldr	r3, [sp, #12]
    6230:	6013      	str	r3, [r2, #0]
        }
    }
}
    6232:	bf00      	nop
    6234:	b005      	add	sp, #20
    6236:	f85d fb04 	ldr.w	pc, [sp], #4
    623a:	bf00      	nop
    623c:	1fff8cf4 	.word	0x1fff8cf4

00006240 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6240:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6242:	4b03      	ldr	r3, [pc, #12]	; (6250 <Port_RefreshPortDirection+0x10>)
    6244:	681b      	ldr	r3, [r3, #0]
    6246:	4618      	mov	r0, r3
    6248:	f000 fc10 	bl	6a6c <Port_Ipw_RefreshPortDirection>
    }
}
    624c:	bf00      	nop
    624e:	bd08      	pop	{r3, pc}
    6250:	1fff8cf4 	.word	0x1fff8cf4

00006254 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6254:	b086      	sub	sp, #24
    6256:	9003      	str	r0, [sp, #12]
    6258:	9102      	str	r1, [sp, #8]
    625a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    625c:	23ff      	movs	r3, #255	; 0xff
    625e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6260:	9b03      	ldr	r3, [sp, #12]
    6262:	4a39      	ldr	r2, [pc, #228]	; (6348 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6264:	4293      	cmp	r3, r2
    6266:	d151      	bne.n	630c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6268:	9b02      	ldr	r3, [sp, #8]
    626a:	2b10      	cmp	r3, #16
    626c:	d867      	bhi.n	633e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    626e:	a201      	add	r2, pc, #4	; (adr r2, 6274 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6274:	000062b9 	.word	0x000062b9
    6278:	000062c7 	.word	0x000062c7
    627c:	0000633f 	.word	0x0000633f
    6280:	0000633f 	.word	0x0000633f
    6284:	0000633f 	.word	0x0000633f
    6288:	0000633f 	.word	0x0000633f
    628c:	0000633f 	.word	0x0000633f
    6290:	0000633f 	.word	0x0000633f
    6294:	0000633f 	.word	0x0000633f
    6298:	0000633f 	.word	0x0000633f
    629c:	0000633f 	.word	0x0000633f
    62a0:	0000633f 	.word	0x0000633f
    62a4:	0000633f 	.word	0x0000633f
    62a8:	000062d5 	.word	0x000062d5
    62ac:	000062e3 	.word	0x000062e3
    62b0:	000062f1 	.word	0x000062f1
    62b4:	000062ff 	.word	0x000062ff
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    62b8:	2301      	movs	r3, #1
    62ba:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    62bc:	9a05      	ldr	r2, [sp, #20]
    62be:	9b01      	ldr	r3, [sp, #4]
    62c0:	4313      	orrs	r3, r2
    62c2:	9305      	str	r3, [sp, #20]
                break;
    62c4:	e03c      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    62c6:	2302      	movs	r3, #2
    62c8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    62ca:	9a05      	ldr	r2, [sp, #20]
    62cc:	9b01      	ldr	r3, [sp, #4]
    62ce:	4313      	orrs	r3, r2
    62d0:	9305      	str	r3, [sp, #20]
                break;
    62d2:	e035      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    62d4:	2304      	movs	r3, #4
    62d6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    62d8:	9a05      	ldr	r2, [sp, #20]
    62da:	9b01      	ldr	r3, [sp, #4]
    62dc:	4313      	orrs	r3, r2
    62de:	9305      	str	r3, [sp, #20]
                break;
    62e0:	e02e      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    62e2:	2308      	movs	r3, #8
    62e4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    62e6:	9a05      	ldr	r2, [sp, #20]
    62e8:	9b01      	ldr	r3, [sp, #4]
    62ea:	4313      	orrs	r3, r2
    62ec:	9305      	str	r3, [sp, #20]
                break;
    62ee:	e027      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    62f0:	230e      	movs	r3, #14
    62f2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    62f4:	9a05      	ldr	r2, [sp, #20]
    62f6:	9b01      	ldr	r3, [sp, #4]
    62f8:	4013      	ands	r3, r2
    62fa:	9305      	str	r3, [sp, #20]
                break;
    62fc:	e020      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    62fe:	230d      	movs	r3, #13
    6300:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6302:	9a05      	ldr	r2, [sp, #20]
    6304:	9b01      	ldr	r3, [sp, #4]
    6306:	4013      	ands	r3, r2
    6308:	9305      	str	r3, [sp, #20]
                break;
    630a:	e019      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    630c:	9b03      	ldr	r3, [sp, #12]
    630e:	4a0f      	ldr	r2, [pc, #60]	; (634c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6310:	4293      	cmp	r3, r2
    6312:	d115      	bne.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6314:	9b02      	ldr	r3, [sp, #8]
    6316:	2b00      	cmp	r3, #0
    6318:	d003      	beq.n	6322 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    631a:	9b02      	ldr	r3, [sp, #8]
    631c:	2b01      	cmp	r3, #1
    631e:	d007      	beq.n	6330 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6320:	e00e      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6322:	230b      	movs	r3, #11
    6324:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6326:	9a05      	ldr	r2, [sp, #20]
    6328:	9b01      	ldr	r3, [sp, #4]
    632a:	4013      	ands	r3, r2
    632c:	9305      	str	r3, [sp, #20]
                break;
    632e:	e007      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6330:	2307      	movs	r3, #7
    6332:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6334:	9a05      	ldr	r2, [sp, #20]
    6336:	9b01      	ldr	r3, [sp, #4]
    6338:	4013      	ands	r3, r2
    633a:	9305      	str	r3, [sp, #20]
                break;
    633c:	e000      	b.n	6340 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    633e:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6340:	9b05      	ldr	r3, [sp, #20]
}
    6342:	4618      	mov	r0, r3
    6344:	b006      	add	sp, #24
    6346:	4770      	bx	lr
    6348:	4004a000 	.word	0x4004a000
    634c:	4004b000 	.word	0x4004b000

00006350 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6350:	b500      	push	{lr}
    6352:	b089      	sub	sp, #36	; 0x24
    6354:	9003      	str	r0, [sp, #12]
    6356:	9102      	str	r1, [sp, #8]
    6358:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    635a:	9b01      	ldr	r3, [sp, #4]
    635c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    635e:	9b01      	ldr	r3, [sp, #4]
    6360:	2b08      	cmp	r3, #8
    6362:	d121      	bne.n	63a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6364:	4b13      	ldr	r3, [pc, #76]	; (63b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6366:	685b      	ldr	r3, [r3, #4]
    6368:	f003 030f 	and.w	r3, r3, #15
    636c:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    636e:	9a06      	ldr	r2, [sp, #24]
    6370:	9902      	ldr	r1, [sp, #8]
    6372:	9803      	ldr	r0, [sp, #12]
    6374:	f7ff ff6e 	bl	6254 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6378:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    637a:	9b05      	ldr	r3, [sp, #20]
    637c:	2bff      	cmp	r3, #255	; 0xff
    637e:	d011      	beq.n	63a4 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6380:	f001 f984 	bl	768c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6384:	4b0b      	ldr	r3, [pc, #44]	; (63b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6386:	685b      	ldr	r3, [r3, #4]
    6388:	4a0a      	ldr	r2, [pc, #40]	; (63b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    638a:	f023 030f 	bic.w	r3, r3, #15
    638e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6390:	4b08      	ldr	r3, [pc, #32]	; (63b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6392:	685a      	ldr	r2, [r3, #4]
    6394:	9b05      	ldr	r3, [sp, #20]
    6396:	f003 030f 	and.w	r3, r3, #15
    639a:	4906      	ldr	r1, [pc, #24]	; (63b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    639c:	4313      	orrs	r3, r2
    639e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    63a0:	f001 f9a0 	bl	76e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    63a4:	2300      	movs	r3, #0
    63a6:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    63a8:	9b07      	ldr	r3, [sp, #28]
}
    63aa:	4618      	mov	r0, r3
    63ac:	b009      	add	sp, #36	; 0x24
    63ae:	f85d fb04 	ldr.w	pc, [sp], #4
    63b2:	bf00      	nop
    63b4:	40048000 	.word	0x40048000

000063b8 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    63b8:	b500      	push	{lr}
    63ba:	b087      	sub	sp, #28
    63bc:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    63be:	2300      	movs	r3, #0
    63c0:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    63c2:	2300      	movs	r3, #0
    63c4:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    63c6:	2300      	movs	r3, #0
    63c8:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    63ca:	9b01      	ldr	r3, [sp, #4]
    63cc:	68db      	ldr	r3, [r3, #12]
    63ce:	2b02      	cmp	r3, #2
    63d0:	d00a      	beq.n	63e8 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    63d2:	9b05      	ldr	r3, [sp, #20]
    63d4:	f043 0302 	orr.w	r3, r3, #2
    63d8:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    63da:	9b01      	ldr	r3, [sp, #4]
    63dc:	68db      	ldr	r3, [r3, #12]
    63de:	f003 0301 	and.w	r3, r3, #1
    63e2:	9a05      	ldr	r2, [sp, #20]
    63e4:	4313      	orrs	r3, r2
    63e6:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    63e8:	9b01      	ldr	r3, [sp, #4]
    63ea:	699b      	ldr	r3, [r3, #24]
    63ec:	019b      	lsls	r3, r3, #6
    63ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    63f2:	9a05      	ldr	r2, [sp, #20]
    63f4:	4313      	orrs	r3, r2
    63f6:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    63f8:	9b01      	ldr	r3, [sp, #4]
    63fa:	6a1b      	ldr	r3, [r3, #32]
    63fc:	03db      	lsls	r3, r3, #15
    63fe:	b29b      	uxth	r3, r3
    6400:	9a05      	ldr	r2, [sp, #20]
    6402:	4313      	orrs	r3, r2
    6404:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6406:	9b01      	ldr	r3, [sp, #4]
    6408:	7f1b      	ldrb	r3, [r3, #28]
    640a:	2b00      	cmp	r3, #0
    640c:	d001      	beq.n	6412 <Port_Ci_Port_Ip_PinInit+0x5a>
    640e:	2310      	movs	r3, #16
    6410:	e000      	b.n	6414 <Port_Ci_Port_Ip_PinInit+0x5c>
    6412:	2300      	movs	r3, #0
    6414:	9a05      	ldr	r2, [sp, #20]
    6416:	4313      	orrs	r3, r2
    6418:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    641a:	9b01      	ldr	r3, [sp, #4]
    641c:	691b      	ldr	r3, [r3, #16]
    641e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6420:	9b01      	ldr	r3, [sp, #4]
    6422:	6818      	ldr	r0, [r3, #0]
    6424:	9b01      	ldr	r3, [sp, #4]
    6426:	689b      	ldr	r3, [r3, #8]
    6428:	9a04      	ldr	r2, [sp, #16]
    642a:	4619      	mov	r1, r3
    642c:	f7ff ff90 	bl	6350 <Port_Ci_Port_Ip_ConfigureInterleave>
    6430:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6432:	9b03      	ldr	r3, [sp, #12]
    6434:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6436:	9b04      	ldr	r3, [sp, #16]
    6438:	021b      	lsls	r3, r3, #8
    643a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    643e:	9a05      	ldr	r2, [sp, #20]
    6440:	4313      	orrs	r3, r2
    6442:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6444:	f000 ff88 	bl	7358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6448:	9b01      	ldr	r3, [sp, #4]
    644a:	681b      	ldr	r3, [r3, #0]
    644c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6450:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6452:	9b01      	ldr	r3, [sp, #4]
    6454:	689b      	ldr	r3, [r3, #8]
    6456:	2201      	movs	r2, #1
    6458:	fa02 f303 	lsl.w	r3, r2, r3
    645c:	43db      	mvns	r3, r3
    645e:	9a02      	ldr	r2, [sp, #8]
    6460:	4013      	ands	r3, r2
    6462:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6464:	9b01      	ldr	r3, [sp, #4]
    6466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    646a:	2b00      	cmp	r3, #0
    646c:	d001      	beq.n	6472 <Port_Ci_Port_Ip_PinInit+0xba>
    646e:	2201      	movs	r2, #1
    6470:	e000      	b.n	6474 <Port_Ci_Port_Ip_PinInit+0xbc>
    6472:	2200      	movs	r2, #0
    6474:	9b01      	ldr	r3, [sp, #4]
    6476:	689b      	ldr	r3, [r3, #8]
    6478:	fa02 f303 	lsl.w	r3, r2, r3
    647c:	9a02      	ldr	r2, [sp, #8]
    647e:	4313      	orrs	r3, r2
    6480:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6482:	9b01      	ldr	r3, [sp, #4]
    6484:	681b      	ldr	r3, [r3, #0]
    6486:	9a02      	ldr	r2, [sp, #8]
    6488:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    648c:	f000 ff90 	bl	73b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6490:	9b04      	ldr	r3, [sp, #16]
    6492:	2b01      	cmp	r3, #1
    6494:	d16d      	bne.n	6572 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6496:	9b01      	ldr	r3, [sp, #4]
    6498:	695b      	ldr	r3, [r3, #20]
    649a:	2b02      	cmp	r3, #2
    649c:	d138      	bne.n	6510 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    649e:	9b01      	ldr	r3, [sp, #4]
    64a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    64a4:	2b01      	cmp	r3, #1
    64a6:	d10f      	bne.n	64c8 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    64a8:	f000 ffa8 	bl	73fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    64ac:	9b01      	ldr	r3, [sp, #4]
    64ae:	685b      	ldr	r3, [r3, #4]
    64b0:	6859      	ldr	r1, [r3, #4]
    64b2:	9b01      	ldr	r3, [sp, #4]
    64b4:	689b      	ldr	r3, [r3, #8]
    64b6:	2201      	movs	r2, #1
    64b8:	409a      	lsls	r2, r3
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	685b      	ldr	r3, [r3, #4]
    64be:	430a      	orrs	r2, r1
    64c0:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    64c2:	f000 ffc7 	bl	7454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    64c6:	e013      	b.n	64f0 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    64c8:	9b01      	ldr	r3, [sp, #4]
    64ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    64ce:	2b00      	cmp	r3, #0
    64d0:	d10e      	bne.n	64f0 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    64d2:	f000 ffe5 	bl	74a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    64d6:	9b01      	ldr	r3, [sp, #4]
    64d8:	685b      	ldr	r3, [r3, #4]
    64da:	6899      	ldr	r1, [r3, #8]
    64dc:	9b01      	ldr	r3, [sp, #4]
    64de:	689b      	ldr	r3, [r3, #8]
    64e0:	2201      	movs	r2, #1
    64e2:	409a      	lsls	r2, r3
    64e4:	9b01      	ldr	r3, [sp, #4]
    64e6:	685b      	ldr	r3, [r3, #4]
    64e8:	430a      	orrs	r2, r1
    64ea:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    64ec:	f001 f804 	bl	74f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    64f0:	f001 f828 	bl	7544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    64f4:	9b01      	ldr	r3, [sp, #4]
    64f6:	685b      	ldr	r3, [r3, #4]
    64f8:	6959      	ldr	r1, [r3, #20]
    64fa:	9b01      	ldr	r3, [sp, #4]
    64fc:	689b      	ldr	r3, [r3, #8]
    64fe:	2201      	movs	r2, #1
    6500:	409a      	lsls	r2, r3
    6502:	9b01      	ldr	r3, [sp, #4]
    6504:	685b      	ldr	r3, [r3, #4]
    6506:	430a      	orrs	r2, r1
    6508:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    650a:	f001 f847 	bl	759c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    650e:	e030      	b.n	6572 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6510:	f001 f818 	bl	7544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6514:	9b01      	ldr	r3, [sp, #4]
    6516:	685b      	ldr	r3, [r3, #4]
    6518:	6959      	ldr	r1, [r3, #20]
    651a:	9b01      	ldr	r3, [sp, #4]
    651c:	689b      	ldr	r3, [r3, #8]
    651e:	2201      	movs	r2, #1
    6520:	fa02 f303 	lsl.w	r3, r2, r3
    6524:	43da      	mvns	r2, r3
    6526:	9b01      	ldr	r3, [sp, #4]
    6528:	685b      	ldr	r3, [r3, #4]
    652a:	400a      	ands	r2, r1
    652c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    652e:	f001 f835 	bl	759c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6532:	f001 f859 	bl	75e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6536:	9b01      	ldr	r3, [sp, #4]
    6538:	685b      	ldr	r3, [r3, #4]
    653a:	6999      	ldr	r1, [r3, #24]
    653c:	9b01      	ldr	r3, [sp, #4]
    653e:	689b      	ldr	r3, [r3, #8]
    6540:	2201      	movs	r2, #1
    6542:	fa02 f303 	lsl.w	r3, r2, r3
    6546:	43da      	mvns	r2, r3
    6548:	9b01      	ldr	r3, [sp, #4]
    654a:	685b      	ldr	r3, [r3, #4]
    654c:	400a      	ands	r2, r1
    654e:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6550:	9b01      	ldr	r3, [sp, #4]
    6552:	695b      	ldr	r3, [r3, #20]
    6554:	2b03      	cmp	r3, #3
    6556:	d10a      	bne.n	656e <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6558:	9b01      	ldr	r3, [sp, #4]
    655a:	685b      	ldr	r3, [r3, #4]
    655c:	6999      	ldr	r1, [r3, #24]
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	689b      	ldr	r3, [r3, #8]
    6562:	2201      	movs	r2, #1
    6564:	409a      	lsls	r2, r3
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	685b      	ldr	r3, [r3, #4]
    656a:	430a      	orrs	r2, r1
    656c:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    656e:	f001 f867 	bl	7640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6572:	9b01      	ldr	r3, [sp, #4]
    6574:	681b      	ldr	r3, [r3, #0]
    6576:	9a01      	ldr	r2, [sp, #4]
    6578:	6892      	ldr	r2, [r2, #8]
    657a:	9905      	ldr	r1, [sp, #20]
    657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6580:	bf00      	nop
    6582:	b007      	add	sp, #28
    6584:	f85d fb04 	ldr.w	pc, [sp], #4

00006588 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6588:	b500      	push	{lr}
    658a:	b085      	sub	sp, #20
    658c:	9001      	str	r0, [sp, #4]
    658e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6590:	2300      	movs	r3, #0
    6592:	9303      	str	r3, [sp, #12]
    6594:	e00d      	b.n	65b2 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6596:	9a03      	ldr	r2, [sp, #12]
    6598:	4613      	mov	r3, r2
    659a:	009b      	lsls	r3, r3, #2
    659c:	4413      	add	r3, r2
    659e:	00db      	lsls	r3, r3, #3
    65a0:	461a      	mov	r2, r3
    65a2:	9b00      	ldr	r3, [sp, #0]
    65a4:	4413      	add	r3, r2
    65a6:	4618      	mov	r0, r3
    65a8:	f7ff ff06 	bl	63b8 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    65ac:	9b03      	ldr	r3, [sp, #12]
    65ae:	3301      	adds	r3, #1
    65b0:	9303      	str	r3, [sp, #12]
    65b2:	9a03      	ldr	r2, [sp, #12]
    65b4:	9b01      	ldr	r3, [sp, #4]
    65b6:	429a      	cmp	r2, r3
    65b8:	d3ed      	bcc.n	6596 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    65ba:	2300      	movs	r3, #0
}
    65bc:	4618      	mov	r0, r3
    65be:	b005      	add	sp, #20
    65c0:	f85d fb04 	ldr.w	pc, [sp], #4

000065c4 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    65c4:	b500      	push	{lr}
    65c6:	b087      	sub	sp, #28
    65c8:	9003      	str	r0, [sp, #12]
    65ca:	9102      	str	r1, [sp, #8]
    65cc:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    65ce:	9a01      	ldr	r2, [sp, #4]
    65d0:	9902      	ldr	r1, [sp, #8]
    65d2:	9803      	ldr	r0, [sp, #12]
    65d4:	f7ff febc 	bl	6350 <Port_Ci_Port_Ip_ConfigureInterleave>
    65d8:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    65da:	f001 f8a9 	bl	7730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    65de:	9b03      	ldr	r3, [sp, #12]
    65e0:	9a02      	ldr	r2, [sp, #8]
    65e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65e6:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    65e8:	9b04      	ldr	r3, [sp, #16]
    65ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    65ee:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    65f0:	9b05      	ldr	r3, [sp, #20]
    65f2:	021b      	lsls	r3, r3, #8
    65f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    65f8:	9a04      	ldr	r2, [sp, #16]
    65fa:	4313      	orrs	r3, r2
    65fc:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    65fe:	9b03      	ldr	r3, [sp, #12]
    6600:	9a02      	ldr	r2, [sp, #8]
    6602:	9904      	ldr	r1, [sp, #16]
    6604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6608:	f001 f8be 	bl	7788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    660c:	bf00      	nop
    660e:	b007      	add	sp, #28
    6610:	f85d fb04 	ldr.w	pc, [sp], #4

00006614 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6614:	b500      	push	{lr}
    6616:	b083      	sub	sp, #12
    6618:	9001      	str	r0, [sp, #4]
    661a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    661c:	f001 f8da 	bl	77d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6626:	2101      	movs	r1, #1
    6628:	9b00      	ldr	r3, [sp, #0]
    662a:	fa01 f303 	lsl.w	r3, r1, r3
    662e:	431a      	orrs	r2, r3
    6630:	9b01      	ldr	r3, [sp, #4]
    6632:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6636:	f001 f8f9 	bl	782c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    663a:	bf00      	nop
    663c:	b003      	add	sp, #12
    663e:	f85d fb04 	ldr.w	pc, [sp], #4

00006642 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6642:	b500      	push	{lr}
    6644:	b083      	sub	sp, #12
    6646:	9001      	str	r0, [sp, #4]
    6648:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    664a:	f001 f915 	bl	7878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    664e:	9b01      	ldr	r3, [sp, #4]
    6650:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6654:	2101      	movs	r1, #1
    6656:	9b00      	ldr	r3, [sp, #0]
    6658:	fa01 f303 	lsl.w	r3, r1, r3
    665c:	43db      	mvns	r3, r3
    665e:	401a      	ands	r2, r3
    6660:	9b01      	ldr	r3, [sp, #4]
    6662:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6666:	f001 f933 	bl	78d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    666a:	bf00      	nop
    666c:	b003      	add	sp, #12
    666e:	f85d fb04 	ldr.w	pc, [sp], #4

00006672 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6672:	b082      	sub	sp, #8
    6674:	9001      	str	r0, [sp, #4]
    6676:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6678:	9b00      	ldr	r3, [sp, #0]
    667a:	785b      	ldrb	r3, [r3, #1]
    667c:	f003 0201 	and.w	r2, r3, #1
    6680:	9b01      	ldr	r3, [sp, #4]
    6682:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6686:	9b00      	ldr	r3, [sp, #0]
    6688:	789b      	ldrb	r3, [r3, #2]
    668a:	f003 021f 	and.w	r2, r3, #31
    668e:	9b01      	ldr	r3, [sp, #4]
    6690:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6694:	bf00      	nop
    6696:	b002      	add	sp, #8
    6698:	4770      	bx	lr

0000669a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    669a:	b086      	sub	sp, #24
    669c:	9003      	str	r0, [sp, #12]
    669e:	9301      	str	r3, [sp, #4]
    66a0:	460b      	mov	r3, r1
    66a2:	f8ad 300a 	strh.w	r3, [sp, #10]
    66a6:	4613      	mov	r3, r2
    66a8:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    66ac:	2300      	movs	r3, #0
    66ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    66b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66b6:	f043 0301 	orr.w	r3, r3, #1
    66ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    66be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66c2:	f043 0302 	orr.w	r3, r3, #2
    66c6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    66ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66ce:	f043 0310 	orr.w	r3, r3, #16
    66d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    66d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    66de:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    66e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    66ea:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    66ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    66f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    66fa:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    66fe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6702:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6706:	4013      	ands	r3, r2
    6708:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    670c:	9b01      	ldr	r3, [sp, #4]
    670e:	2b00      	cmp	r3, #0
    6710:	d003      	beq.n	671a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6712:	9b01      	ldr	r3, [sp, #4]
    6714:	2b01      	cmp	r3, #1
    6716:	d00a      	beq.n	672e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6718:	e013      	b.n	6742 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    671a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    671e:	041a      	lsls	r2, r3, #16
    6720:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6724:	431a      	orrs	r2, r3
    6726:	9b03      	ldr	r3, [sp, #12]
    6728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    672c:	e009      	b.n	6742 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    672e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6732:	041a      	lsls	r2, r3, #16
    6734:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6738:	431a      	orrs	r2, r3
    673a:	9b03      	ldr	r3, [sp, #12]
    673c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6740:	bf00      	nop
    }
}
    6742:	bf00      	nop
    6744:	b006      	add	sp, #24
    6746:	4770      	bx	lr

00006748 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6748:	b500      	push	{lr}
    674a:	b087      	sub	sp, #28
    674c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    674e:	9b01      	ldr	r3, [sp, #4]
    6750:	885b      	ldrh	r3, [r3, #2]
    6752:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	689b      	ldr	r3, [r3, #8]
    675a:	7a1b      	ldrb	r3, [r3, #8]
    675c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6760:	9b01      	ldr	r3, [sp, #4]
    6762:	689b      	ldr	r3, [r3, #8]
    6764:	681b      	ldr	r3, [r3, #0]
    6766:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6768:	9b01      	ldr	r3, [sp, #4]
    676a:	689b      	ldr	r3, [r3, #8]
    676c:	685b      	ldr	r3, [r3, #4]
    676e:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6770:	2300      	movs	r3, #0
    6772:	f8ad 3016 	strh.w	r3, [sp, #22]
    6776:	e111      	b.n	699c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6778:	9b02      	ldr	r3, [sp, #8]
    677a:	2b02      	cmp	r3, #2
    677c:	d169      	bne.n	6852 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    677e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6782:	2b01      	cmp	r3, #1
    6784:	d11a      	bne.n	67bc <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6786:	9b01      	ldr	r3, [sp, #4]
    6788:	685a      	ldr	r2, [r3, #4]
    678a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    678e:	005b      	lsls	r3, r3, #1
    6790:	4413      	add	r3, r2
    6792:	881b      	ldrh	r3, [r3, #0]
    6794:	f003 021f 	and.w	r2, r3, #31
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	6859      	ldr	r1, [r3, #4]
    679c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67a0:	005b      	lsls	r3, r3, #1
    67a2:	440b      	add	r3, r1
    67a4:	881b      	ldrh	r3, [r3, #0]
    67a6:	095b      	lsrs	r3, r3, #5
    67a8:	b29b      	uxth	r3, r3
    67aa:	4619      	mov	r1, r3
    67ac:	4b81      	ldr	r3, [pc, #516]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    67ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    67b2:	2101      	movs	r1, #1
    67b4:	fa01 f202 	lsl.w	r2, r1, r2
    67b8:	605a      	str	r2, [r3, #4]
    67ba:	e01d      	b.n	67f8 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    67bc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    67c0:	2b00      	cmp	r3, #0
    67c2:	d119      	bne.n	67f8 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    67c4:	9b01      	ldr	r3, [sp, #4]
    67c6:	685a      	ldr	r2, [r3, #4]
    67c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67cc:	005b      	lsls	r3, r3, #1
    67ce:	4413      	add	r3, r2
    67d0:	881b      	ldrh	r3, [r3, #0]
    67d2:	f003 021f 	and.w	r2, r3, #31
    67d6:	9b01      	ldr	r3, [sp, #4]
    67d8:	6859      	ldr	r1, [r3, #4]
    67da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67de:	005b      	lsls	r3, r3, #1
    67e0:	440b      	add	r3, r1
    67e2:	881b      	ldrh	r3, [r3, #0]
    67e4:	095b      	lsrs	r3, r3, #5
    67e6:	b29b      	uxth	r3, r3
    67e8:	4619      	mov	r1, r3
    67ea:	4b72      	ldr	r3, [pc, #456]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    67ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    67f0:	2101      	movs	r1, #1
    67f2:	fa01 f202 	lsl.w	r2, r1, r2
    67f6:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    67f8:	f001 f890 	bl	791c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    67fc:	9b01      	ldr	r3, [sp, #4]
    67fe:	685a      	ldr	r2, [r3, #4]
    6800:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6804:	005b      	lsls	r3, r3, #1
    6806:	4413      	add	r3, r2
    6808:	881b      	ldrh	r3, [r3, #0]
    680a:	095b      	lsrs	r3, r3, #5
    680c:	b29b      	uxth	r3, r3
    680e:	461a      	mov	r2, r3
    6810:	4b68      	ldr	r3, [pc, #416]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    6812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6816:	6959      	ldr	r1, [r3, #20]
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	685a      	ldr	r2, [r3, #4]
    681c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6820:	005b      	lsls	r3, r3, #1
    6822:	4413      	add	r3, r2
    6824:	881b      	ldrh	r3, [r3, #0]
    6826:	f003 031f 	and.w	r3, r3, #31
    682a:	2201      	movs	r2, #1
    682c:	409a      	lsls	r2, r3
    682e:	9b01      	ldr	r3, [sp, #4]
    6830:	6858      	ldr	r0, [r3, #4]
    6832:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6836:	005b      	lsls	r3, r3, #1
    6838:	4403      	add	r3, r0
    683a:	881b      	ldrh	r3, [r3, #0]
    683c:	095b      	lsrs	r3, r3, #5
    683e:	b29b      	uxth	r3, r3
    6840:	4618      	mov	r0, r3
    6842:	4b5c      	ldr	r3, [pc, #368]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    6844:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6848:	430a      	orrs	r2, r1
    684a:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    684c:	f001 f892 	bl	7974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6850:	e086      	b.n	6960 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6852:	f001 f863 	bl	791c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	685a      	ldr	r2, [r3, #4]
    685a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    685e:	005b      	lsls	r3, r3, #1
    6860:	4413      	add	r3, r2
    6862:	881b      	ldrh	r3, [r3, #0]
    6864:	095b      	lsrs	r3, r3, #5
    6866:	b29b      	uxth	r3, r3
    6868:	461a      	mov	r2, r3
    686a:	4b52      	ldr	r3, [pc, #328]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    686c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6870:	6959      	ldr	r1, [r3, #20]
    6872:	9b01      	ldr	r3, [sp, #4]
    6874:	685a      	ldr	r2, [r3, #4]
    6876:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    687a:	005b      	lsls	r3, r3, #1
    687c:	4413      	add	r3, r2
    687e:	881b      	ldrh	r3, [r3, #0]
    6880:	f003 031f 	and.w	r3, r3, #31
    6884:	2201      	movs	r2, #1
    6886:	fa02 f303 	lsl.w	r3, r2, r3
    688a:	43da      	mvns	r2, r3
    688c:	9b01      	ldr	r3, [sp, #4]
    688e:	6858      	ldr	r0, [r3, #4]
    6890:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6894:	005b      	lsls	r3, r3, #1
    6896:	4403      	add	r3, r0
    6898:	881b      	ldrh	r3, [r3, #0]
    689a:	095b      	lsrs	r3, r3, #5
    689c:	b29b      	uxth	r3, r3
    689e:	4618      	mov	r0, r3
    68a0:	4b44      	ldr	r3, [pc, #272]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    68a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68a6:	400a      	ands	r2, r1
    68a8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    68aa:	f001 f863 	bl	7974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    68ae:	f001 f887 	bl	79c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    68b2:	9b01      	ldr	r3, [sp, #4]
    68b4:	685a      	ldr	r2, [r3, #4]
    68b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    68ba:	005b      	lsls	r3, r3, #1
    68bc:	4413      	add	r3, r2
    68be:	881b      	ldrh	r3, [r3, #0]
    68c0:	095b      	lsrs	r3, r3, #5
    68c2:	b29b      	uxth	r3, r3
    68c4:	461a      	mov	r2, r3
    68c6:	4b3b      	ldr	r3, [pc, #236]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    68c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68cc:	6999      	ldr	r1, [r3, #24]
    68ce:	9b01      	ldr	r3, [sp, #4]
    68d0:	685a      	ldr	r2, [r3, #4]
    68d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    68d6:	005b      	lsls	r3, r3, #1
    68d8:	4413      	add	r3, r2
    68da:	881b      	ldrh	r3, [r3, #0]
    68dc:	f003 031f 	and.w	r3, r3, #31
    68e0:	2201      	movs	r2, #1
    68e2:	fa02 f303 	lsl.w	r3, r2, r3
    68e6:	43da      	mvns	r2, r3
    68e8:	9b01      	ldr	r3, [sp, #4]
    68ea:	6858      	ldr	r0, [r3, #4]
    68ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    68f0:	005b      	lsls	r3, r3, #1
    68f2:	4403      	add	r3, r0
    68f4:	881b      	ldrh	r3, [r3, #0]
    68f6:	095b      	lsrs	r3, r3, #5
    68f8:	b29b      	uxth	r3, r3
    68fa:	4618      	mov	r0, r3
    68fc:	4b2d      	ldr	r3, [pc, #180]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    68fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6902:	400a      	ands	r2, r1
    6904:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6906:	9b02      	ldr	r3, [sp, #8]
    6908:	2b03      	cmp	r3, #3
    690a:	d127      	bne.n	695c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    690c:	9b01      	ldr	r3, [sp, #4]
    690e:	685a      	ldr	r2, [r3, #4]
    6910:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6914:	005b      	lsls	r3, r3, #1
    6916:	4413      	add	r3, r2
    6918:	881b      	ldrh	r3, [r3, #0]
    691a:	095b      	lsrs	r3, r3, #5
    691c:	b29b      	uxth	r3, r3
    691e:	461a      	mov	r2, r3
    6920:	4b24      	ldr	r3, [pc, #144]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    6922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6926:	6999      	ldr	r1, [r3, #24]
    6928:	9b01      	ldr	r3, [sp, #4]
    692a:	685a      	ldr	r2, [r3, #4]
    692c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6930:	005b      	lsls	r3, r3, #1
    6932:	4413      	add	r3, r2
    6934:	881b      	ldrh	r3, [r3, #0]
    6936:	f003 031f 	and.w	r3, r3, #31
    693a:	2201      	movs	r2, #1
    693c:	409a      	lsls	r2, r3
    693e:	9b01      	ldr	r3, [sp, #4]
    6940:	6858      	ldr	r0, [r3, #4]
    6942:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6946:	005b      	lsls	r3, r3, #1
    6948:	4403      	add	r3, r0
    694a:	881b      	ldrh	r3, [r3, #0]
    694c:	095b      	lsrs	r3, r3, #5
    694e:	b29b      	uxth	r3, r3
    6950:	4618      	mov	r0, r3
    6952:	4b18      	ldr	r3, [pc, #96]	; (69b4 <Port_Ipw_Init_UnusedPins+0x26c>)
    6954:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6958:	430a      	orrs	r2, r1
    695a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    695c:	f001 f85c 	bl	7a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6960:	9b01      	ldr	r3, [sp, #4]
    6962:	685a      	ldr	r2, [r3, #4]
    6964:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6968:	005b      	lsls	r3, r3, #1
    696a:	4413      	add	r3, r2
    696c:	881b      	ldrh	r3, [r3, #0]
    696e:	095b      	lsrs	r3, r3, #5
    6970:	b29b      	uxth	r3, r3
    6972:	461a      	mov	r2, r3
    6974:	4b10      	ldr	r3, [pc, #64]	; (69b8 <Port_Ipw_Init_UnusedPins+0x270>)
    6976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    697a:	9a01      	ldr	r2, [sp, #4]
    697c:	6851      	ldr	r1, [r2, #4]
    697e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6982:	0052      	lsls	r2, r2, #1
    6984:	440a      	add	r2, r1
    6986:	8812      	ldrh	r2, [r2, #0]
    6988:	f002 021f 	and.w	r2, r2, #31
    698c:	9903      	ldr	r1, [sp, #12]
    698e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6992:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6996:	3301      	adds	r3, #1
    6998:	f8ad 3016 	strh.w	r3, [sp, #22]
    699c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    69a4:	429a      	cmp	r2, r3
    69a6:	f4ff aee7 	bcc.w	6778 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    69aa:	bf00      	nop
    69ac:	bf00      	nop
    69ae:	b007      	add	sp, #28
    69b0:	f85d fb04 	ldr.w	pc, [sp], #4
    69b4:	00008e6c 	.word	0x00008e6c
    69b8:	00008e58 	.word	0x00008e58

000069bc <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    69bc:	b500      	push	{lr}
    69be:	b085      	sub	sp, #20
    69c0:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    69c2:	9b01      	ldr	r3, [sp, #4]
    69c4:	7c1b      	ldrb	r3, [r3, #16]
    69c6:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    69ca:	2300      	movs	r3, #0
    69cc:	f8ad 300e 	strh.w	r3, [sp, #14]
    69d0:	e035      	b.n	6a3e <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    69d2:	9b01      	ldr	r3, [sp, #4]
    69d4:	695a      	ldr	r2, [r3, #20]
    69d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    69da:	00db      	lsls	r3, r3, #3
    69dc:	4413      	add	r3, r2
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    69e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    69e8:	4a1f      	ldr	r2, [pc, #124]	; (6a68 <Port_Ipw_Init+0xac>)
    69ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    69ee:	9b01      	ldr	r3, [sp, #4]
    69f0:	695a      	ldr	r2, [r3, #20]
    69f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    69f6:	00db      	lsls	r3, r3, #3
    69f8:	4413      	add	r3, r2
    69fa:	4619      	mov	r1, r3
    69fc:	f7ff fe39 	bl	6672 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6a00:	f001 f978 	bl	7cf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6a04:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6a08:	4a17      	ldr	r2, [pc, #92]	; (6a68 <Port_Ipw_Init+0xac>)
    6a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a0e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6a12:	9b01      	ldr	r3, [sp, #4]
    6a14:	695a      	ldr	r2, [r3, #20]
    6a16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6a1a:	00db      	lsls	r3, r3, #3
    6a1c:	4413      	add	r3, r2
    6a1e:	685a      	ldr	r2, [r3, #4]
    6a20:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6a24:	4810      	ldr	r0, [pc, #64]	; (6a68 <Port_Ipw_Init+0xac>)
    6a26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6a2a:	430a      	orrs	r2, r1
    6a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6a30:	f001 f98c 	bl	7d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6a34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6a38:	3301      	adds	r3, #1
    6a3a:	f8ad 300e 	strh.w	r3, [sp, #14]
    6a3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a42:	b29b      	uxth	r3, r3
    6a44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6a48:	429a      	cmp	r2, r3
    6a4a:	d3c2      	bcc.n	69d2 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6a4c:	9b01      	ldr	r3, [sp, #4]
    6a4e:	6a1b      	ldr	r3, [r3, #32]
    6a50:	4619      	mov	r1, r3
    6a52:	2006      	movs	r0, #6
    6a54:	f7ff fd98 	bl	6588 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6a58:	9801      	ldr	r0, [sp, #4]
    6a5a:	f7ff fe75 	bl	6748 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6a5e:	bf00      	nop
    6a60:	b005      	add	sp, #20
    6a62:	f85d fb04 	ldr.w	pc, [sp], #4
    6a66:	bf00      	nop
    6a68:	00008e58 	.word	0x00008e58

00006a6c <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6a6c:	b500      	push	{lr}
    6a6e:	b085      	sub	sp, #20
    6a70:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6a72:	9b01      	ldr	r3, [sp, #4]
    6a74:	881b      	ldrh	r3, [r3, #0]
    6a76:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6a7a:	2300      	movs	r3, #0
    6a7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6a80:	e0d2      	b.n	6c28 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6a82:	9b01      	ldr	r3, [sp, #4]
    6a84:	68d9      	ldr	r1, [r3, #12]
    6a86:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6a8a:	4613      	mov	r3, r2
    6a8c:	009b      	lsls	r3, r3, #2
    6a8e:	4413      	add	r3, r2
    6a90:	009b      	lsls	r3, r3, #2
    6a92:	440b      	add	r3, r1
    6a94:	7c5b      	ldrb	r3, [r3, #17]
    6a96:	f083 0301 	eor.w	r3, r3, #1
    6a9a:	b2db      	uxtb	r3, r3
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	f000 80be 	beq.w	6c1e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6aa2:	9b01      	ldr	r3, [sp, #4]
    6aa4:	68d9      	ldr	r1, [r3, #12]
    6aa6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6aaa:	4613      	mov	r3, r2
    6aac:	009b      	lsls	r3, r3, #2
    6aae:	4413      	add	r3, r2
    6ab0:	009b      	lsls	r3, r3, #2
    6ab2:	440b      	add	r3, r1
    6ab4:	7c1b      	ldrb	r3, [r3, #16]
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	f000 80b1 	beq.w	6c1e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6abc:	9b01      	ldr	r3, [sp, #4]
    6abe:	68d9      	ldr	r1, [r3, #12]
    6ac0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6ac4:	4613      	mov	r3, r2
    6ac6:	009b      	lsls	r3, r3, #2
    6ac8:	4413      	add	r3, r2
    6aca:	009b      	lsls	r3, r3, #2
    6acc:	440b      	add	r3, r1
    6ace:	881b      	ldrh	r3, [r3, #0]
    6ad0:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6ad4:	9b01      	ldr	r3, [sp, #4]
    6ad6:	68d9      	ldr	r1, [r3, #12]
    6ad8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6adc:	4613      	mov	r3, r2
    6ade:	009b      	lsls	r3, r3, #2
    6ae0:	4413      	add	r3, r2
    6ae2:	009b      	lsls	r3, r3, #2
    6ae4:	440b      	add	r3, r1
    6ae6:	68db      	ldr	r3, [r3, #12]
    6ae8:	2b02      	cmp	r3, #2
    6aea:	d11d      	bne.n	6b28 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6aec:	f001 fa4a 	bl	7f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6af0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6af4:	095b      	lsrs	r3, r3, #5
    6af6:	b29b      	uxth	r3, r3
    6af8:	461a      	mov	r2, r3
    6afa:	4b51      	ldr	r3, [pc, #324]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b00:	6959      	ldr	r1, [r3, #20]
    6b02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b06:	f003 031f 	and.w	r3, r3, #31
    6b0a:	2201      	movs	r2, #1
    6b0c:	409a      	lsls	r2, r3
    6b0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b12:	095b      	lsrs	r3, r3, #5
    6b14:	b29b      	uxth	r3, r3
    6b16:	4618      	mov	r0, r3
    6b18:	4b49      	ldr	r3, [pc, #292]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6b1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b1e:	430a      	orrs	r2, r1
    6b20:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6b22:	f001 fa5b 	bl	7fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6b26:	e07a      	b.n	6c1e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6b28:	9b01      	ldr	r3, [sp, #4]
    6b2a:	68d9      	ldr	r1, [r3, #12]
    6b2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6b30:	4613      	mov	r3, r2
    6b32:	009b      	lsls	r3, r3, #2
    6b34:	4413      	add	r3, r2
    6b36:	009b      	lsls	r3, r3, #2
    6b38:	440b      	add	r3, r1
    6b3a:	68db      	ldr	r3, [r3, #12]
    6b3c:	2b01      	cmp	r3, #1
    6b3e:	d00b      	beq.n	6b58 <Port_Ipw_RefreshPortDirection+0xec>
    6b40:	9b01      	ldr	r3, [sp, #4]
    6b42:	68d9      	ldr	r1, [r3, #12]
    6b44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6b48:	4613      	mov	r3, r2
    6b4a:	009b      	lsls	r3, r3, #2
    6b4c:	4413      	add	r3, r2
    6b4e:	009b      	lsls	r3, r3, #2
    6b50:	440b      	add	r3, r1
    6b52:	68db      	ldr	r3, [r3, #12]
    6b54:	2b03      	cmp	r3, #3
    6b56:	d162      	bne.n	6c1e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6b58:	f001 fa14 	bl	7f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6b5c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b60:	095b      	lsrs	r3, r3, #5
    6b62:	b29b      	uxth	r3, r3
    6b64:	461a      	mov	r2, r3
    6b66:	4b36      	ldr	r3, [pc, #216]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b6c:	6959      	ldr	r1, [r3, #20]
    6b6e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b72:	f003 031f 	and.w	r3, r3, #31
    6b76:	2201      	movs	r2, #1
    6b78:	fa02 f303 	lsl.w	r3, r2, r3
    6b7c:	43da      	mvns	r2, r3
    6b7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b82:	095b      	lsrs	r3, r3, #5
    6b84:	b29b      	uxth	r3, r3
    6b86:	4618      	mov	r0, r3
    6b88:	4b2d      	ldr	r3, [pc, #180]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6b8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b8e:	400a      	ands	r2, r1
    6b90:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6b92:	f001 fa23 	bl	7fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6b96:	f001 fa47 	bl	8028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6b9a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b9e:	095b      	lsrs	r3, r3, #5
    6ba0:	b29b      	uxth	r3, r3
    6ba2:	461a      	mov	r2, r3
    6ba4:	4b26      	ldr	r3, [pc, #152]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6baa:	6999      	ldr	r1, [r3, #24]
    6bac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6bb0:	f003 031f 	and.w	r3, r3, #31
    6bb4:	2201      	movs	r2, #1
    6bb6:	fa02 f303 	lsl.w	r3, r2, r3
    6bba:	43da      	mvns	r2, r3
    6bbc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6bc0:	095b      	lsrs	r3, r3, #5
    6bc2:	b29b      	uxth	r3, r3
    6bc4:	4618      	mov	r0, r3
    6bc6:	4b1e      	ldr	r3, [pc, #120]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6bc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6bcc:	400a      	ands	r2, r1
    6bce:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	68d9      	ldr	r1, [r3, #12]
    6bd4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6bd8:	4613      	mov	r3, r2
    6bda:	009b      	lsls	r3, r3, #2
    6bdc:	4413      	add	r3, r2
    6bde:	009b      	lsls	r3, r3, #2
    6be0:	440b      	add	r3, r1
    6be2:	68db      	ldr	r3, [r3, #12]
    6be4:	2b03      	cmp	r3, #3
    6be6:	d118      	bne.n	6c1a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6be8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6bec:	095b      	lsrs	r3, r3, #5
    6bee:	b29b      	uxth	r3, r3
    6bf0:	461a      	mov	r2, r3
    6bf2:	4b13      	ldr	r3, [pc, #76]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bf8:	6999      	ldr	r1, [r3, #24]
    6bfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6bfe:	f003 031f 	and.w	r3, r3, #31
    6c02:	2201      	movs	r2, #1
    6c04:	409a      	lsls	r2, r3
    6c06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c0a:	095b      	lsrs	r3, r3, #5
    6c0c:	b29b      	uxth	r3, r3
    6c0e:	4618      	mov	r0, r3
    6c10:	4b0b      	ldr	r3, [pc, #44]	; (6c40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6c12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c16:	430a      	orrs	r2, r1
    6c18:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6c1a:	f001 fa31 	bl	8080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6c1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c22:	3301      	adds	r3, #1
    6c24:	f8ad 300e 	strh.w	r3, [sp, #14]
    6c28:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6c2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6c30:	429a      	cmp	r2, r3
    6c32:	f4ff af26 	bcc.w	6a82 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6c36:	bf00      	nop
    6c38:	bf00      	nop
    6c3a:	b005      	add	sp, #20
    6c3c:	f85d fb04 	ldr.w	pc, [sp], #4
    6c40:	00008e6c 	.word	0x00008e6c

00006c44 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6c44:	b500      	push	{lr}
    6c46:	b085      	sub	sp, #20
    6c48:	4603      	mov	r3, r0
    6c4a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6c4e:	2300      	movs	r3, #0
    6c50:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6c54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c58:	4618      	mov	r0, r3
    6c5a:	f000 f871 	bl	6d40 <Dio_Ipw_ReadChannel>
    6c5e:	4603      	mov	r3, r0
    6c60:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6c64:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c68:	4618      	mov	r0, r3
    6c6a:	b005      	add	sp, #20
    6c6c:	f85d fb04 	ldr.w	pc, [sp], #4

00006c70 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6c70:	b500      	push	{lr}
    6c72:	b083      	sub	sp, #12
    6c74:	4603      	mov	r3, r0
    6c76:	460a      	mov	r2, r1
    6c78:	f8ad 3006 	strh.w	r3, [sp, #6]
    6c7c:	4613      	mov	r3, r2
    6c7e:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    6c82:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6c86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c8a:	4611      	mov	r1, r2
    6c8c:	4618      	mov	r0, r3
    6c8e:	f000 f87d 	bl	6d8c <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6c92:	bf00      	nop
    6c94:	b003      	add	sp, #12
    6c96:	f85d fb04 	ldr.w	pc, [sp], #4

00006c9a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6c9a:	b500      	push	{lr}
    6c9c:	b085      	sub	sp, #20
    6c9e:	4603      	mov	r3, r0
    6ca0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6ca4:	2300      	movs	r3, #0
    6ca6:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6caa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6cae:	4618      	mov	r0, r3
    6cb0:	f000 f892 	bl	6dd8 <Dio_Ipw_FlipChannel>
    6cb4:	4603      	mov	r3, r0
    6cb6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6cba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6cbe:	4618      	mov	r0, r3
    6cc0:	b005      	add	sp, #20
    6cc2:	f85d fb04 	ldr.w	pc, [sp], #4

00006cc6 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6cc6:	b500      	push	{lr}
    6cc8:	b085      	sub	sp, #20
    6cca:	4603      	mov	r3, r0
    6ccc:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6cd0:	2300      	movs	r3, #0
    6cd2:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6cd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cd8:	4618      	mov	r0, r3
    6cda:	f000 f8b3 	bl	6e44 <Dio_Ipw_ReadPort>
    6cde:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6ce0:	9b03      	ldr	r3, [sp, #12]
}
    6ce2:	4618      	mov	r0, r3
    6ce4:	b005      	add	sp, #20
    6ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00006cea <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6cea:	b500      	push	{lr}
    6cec:	b083      	sub	sp, #12
    6cee:	4603      	mov	r3, r0
    6cf0:	9100      	str	r1, [sp, #0]
    6cf2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cfa:	9900      	ldr	r1, [sp, #0]
    6cfc:	4618      	mov	r0, r3
    6cfe:	f000 f8b9 	bl	6e74 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6d02:	bf00      	nop
    6d04:	b003      	add	sp, #12
    6d06:	f85d fb04 	ldr.w	pc, [sp], #4

00006d0a <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6d0a:	b500      	push	{lr}
    6d0c:	b085      	sub	sp, #20
    6d0e:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6d10:	2300      	movs	r3, #0
    6d12:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6d14:	9801      	ldr	r0, [sp, #4]
    6d16:	f000 f8c5 	bl	6ea4 <Dio_Ipw_ReadChannelGroup>
    6d1a:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6d1c:	9b03      	ldr	r3, [sp, #12]
}
    6d1e:	4618      	mov	r0, r3
    6d20:	b005      	add	sp, #20
    6d22:	f85d fb04 	ldr.w	pc, [sp], #4

00006d26 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6d26:	b500      	push	{lr}
    6d28:	b083      	sub	sp, #12
    6d2a:	9001      	str	r0, [sp, #4]
    6d2c:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6d2e:	9900      	ldr	r1, [sp, #0]
    6d30:	9801      	ldr	r0, [sp, #4]
    6d32:	f000 f8d7 	bl	6ee4 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    6d36:	bf00      	nop
    6d38:	b003      	add	sp, #12
    6d3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006d40 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6d40:	b500      	push	{lr}
    6d42:	b087      	sub	sp, #28
    6d44:	4603      	mov	r3, r0
    6d46:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6d4a:	2300      	movs	r3, #0
    6d4c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6d50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6d54:	095b      	lsrs	r3, r3, #5
    6d56:	b29b      	uxth	r3, r3
    6d58:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6d5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6d5e:	f003 031f 	and.w	r3, r3, #31
    6d62:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6d64:	4a08      	ldr	r2, [pc, #32]	; (6d88 <Dio_Ipw_ReadChannel+0x48>)
    6d66:	9b04      	ldr	r3, [sp, #16]
    6d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d6c:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6d6e:	9903      	ldr	r1, [sp, #12]
    6d70:	9802      	ldr	r0, [sp, #8]
    6d72:	f000 f940 	bl	6ff6 <Gpio_Dio_Ip_ReadPin>
    6d76:	4603      	mov	r3, r0
    6d78:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6d7c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6d80:	4618      	mov	r0, r3
    6d82:	b007      	add	sp, #28
    6d84:	f85d fb04 	ldr.w	pc, [sp], #4
    6d88:	1fff8b24 	.word	0x1fff8b24

00006d8c <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6d8c:	b500      	push	{lr}
    6d8e:	b087      	sub	sp, #28
    6d90:	4603      	mov	r3, r0
    6d92:	460a      	mov	r2, r1
    6d94:	f8ad 3006 	strh.w	r3, [sp, #6]
    6d98:	4613      	mov	r3, r2
    6d9a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6d9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6da2:	095b      	lsrs	r3, r3, #5
    6da4:	b29b      	uxth	r3, r3
    6da6:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6da8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6dac:	f003 031f 	and.w	r3, r3, #31
    6db0:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6db2:	4a08      	ldr	r2, [pc, #32]	; (6dd4 <Dio_Ipw_WriteChannel+0x48>)
    6db4:	9b05      	ldr	r3, [sp, #20]
    6db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dba:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6dbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6dc0:	461a      	mov	r2, r3
    6dc2:	9904      	ldr	r1, [sp, #16]
    6dc4:	9803      	ldr	r0, [sp, #12]
    6dc6:	f000 f8b7 	bl	6f38 <Gpio_Dio_Ip_WritePin>
}
    6dca:	bf00      	nop
    6dcc:	b007      	add	sp, #28
    6dce:	f85d fb04 	ldr.w	pc, [sp], #4
    6dd2:	bf00      	nop
    6dd4:	1fff8b24 	.word	0x1fff8b24

00006dd8 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6dd8:	b500      	push	{lr}
    6dda:	b089      	sub	sp, #36	; 0x24
    6ddc:	4603      	mov	r3, r0
    6dde:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6de2:	2300      	movs	r3, #0
    6de4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6de8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6dec:	095b      	lsrs	r3, r3, #5
    6dee:	b29b      	uxth	r3, r3
    6df0:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6df2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6df6:	f003 031f 	and.w	r3, r3, #31
    6dfa:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6dfc:	4a10      	ldr	r2, [pc, #64]	; (6e40 <Dio_Ipw_FlipChannel+0x68>)
    6dfe:	9b06      	ldr	r3, [sp, #24]
    6e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e04:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6e06:	2201      	movs	r2, #1
    6e08:	9b05      	ldr	r3, [sp, #20]
    6e0a:	fa02 f303 	lsl.w	r3, r2, r3
    6e0e:	4619      	mov	r1, r3
    6e10:	9804      	ldr	r0, [sp, #16]
    6e12:	f000 f8dc 	bl	6fce <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6e16:	9804      	ldr	r0, [sp, #16]
    6e18:	f000 f8bc 	bl	6f94 <Gpio_Dio_Ip_GetPinsOutput>
    6e1c:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6e1e:	2201      	movs	r2, #1
    6e20:	9b05      	ldr	r3, [sp, #20]
    6e22:	409a      	lsls	r2, r3
    6e24:	9b03      	ldr	r3, [sp, #12]
    6e26:	401a      	ands	r2, r3
    6e28:	9b05      	ldr	r3, [sp, #20]
    6e2a:	fa22 f303 	lsr.w	r3, r2, r3
    6e2e:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6e32:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6e36:	4618      	mov	r0, r3
    6e38:	b009      	add	sp, #36	; 0x24
    6e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e3e:	bf00      	nop
    6e40:	1fff8b24 	.word	0x1fff8b24

00006e44 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6e44:	b500      	push	{lr}
    6e46:	b085      	sub	sp, #20
    6e48:	4603      	mov	r3, r0
    6e4a:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6e4e:	2300      	movs	r3, #0
    6e50:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6e52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e56:	4a06      	ldr	r2, [pc, #24]	; (6e70 <Dio_Ipw_ReadPort+0x2c>)
    6e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e5c:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6e5e:	9802      	ldr	r0, [sp, #8]
    6e60:	f000 f8be 	bl	6fe0 <Gpio_Dio_Ip_ReadPins>
    6e64:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6e66:	9b03      	ldr	r3, [sp, #12]
}
    6e68:	4618      	mov	r0, r3
    6e6a:	b005      	add	sp, #20
    6e6c:	f85d fb04 	ldr.w	pc, [sp], #4
    6e70:	1fff8b24 	.word	0x1fff8b24

00006e74 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6e74:	b500      	push	{lr}
    6e76:	b085      	sub	sp, #20
    6e78:	4603      	mov	r3, r0
    6e7a:	9100      	str	r1, [sp, #0]
    6e7c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6e80:	9b00      	ldr	r3, [sp, #0]
    6e82:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e88:	4a05      	ldr	r2, [pc, #20]	; (6ea0 <Dio_Ipw_WritePort+0x2c>)
    6e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e8e:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6e90:	9903      	ldr	r1, [sp, #12]
    6e92:	9802      	ldr	r0, [sp, #8]
    6e94:	f000 f875 	bl	6f82 <Gpio_Dio_Ip_WritePins>
}
    6e98:	bf00      	nop
    6e9a:	b005      	add	sp, #20
    6e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6ea0:	1fff8b24 	.word	0x1fff8b24

00006ea4 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6ea4:	b500      	push	{lr}
    6ea6:	b087      	sub	sp, #28
    6ea8:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6eaa:	2300      	movs	r3, #0
    6eac:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6eae:	9b01      	ldr	r3, [sp, #4]
    6eb0:	781b      	ldrb	r3, [r3, #0]
    6eb2:	461a      	mov	r2, r3
    6eb4:	4b0a      	ldr	r3, [pc, #40]	; (6ee0 <Dio_Ipw_ReadChannelGroup+0x3c>)
    6eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6eba:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6ebc:	9804      	ldr	r0, [sp, #16]
    6ebe:	f000 f88f 	bl	6fe0 <Gpio_Dio_Ip_ReadPins>
    6ec2:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6ec4:	9b01      	ldr	r3, [sp, #4]
    6ec6:	685a      	ldr	r2, [r3, #4]
    6ec8:	9b03      	ldr	r3, [sp, #12]
    6eca:	4013      	ands	r3, r2
    6ecc:	9a01      	ldr	r2, [sp, #4]
    6ece:	7852      	ldrb	r2, [r2, #1]
    6ed0:	40d3      	lsrs	r3, r2
    6ed2:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6ed4:	9b05      	ldr	r3, [sp, #20]
}
    6ed6:	4618      	mov	r0, r3
    6ed8:	b007      	add	sp, #28
    6eda:	f85d fb04 	ldr.w	pc, [sp], #4
    6ede:	bf00      	nop
    6ee0:	1fff8b24 	.word	0x1fff8b24

00006ee4 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6ee4:	b500      	push	{lr}
    6ee6:	b087      	sub	sp, #28
    6ee8:	9001      	str	r0, [sp, #4]
    6eea:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6eec:	9b01      	ldr	r3, [sp, #4]
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	461a      	mov	r2, r3
    6ef2:	4b10      	ldr	r3, [pc, #64]	; (6f34 <Dio_Ipw_WriteChannelGroup+0x50>)
    6ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ef8:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6efa:	9b01      	ldr	r3, [sp, #4]
    6efc:	785b      	ldrb	r3, [r3, #1]
    6efe:	461a      	mov	r2, r3
    6f00:	9b00      	ldr	r3, [sp, #0]
    6f02:	fa03 f202 	lsl.w	r2, r3, r2
    6f06:	9b01      	ldr	r3, [sp, #4]
    6f08:	685b      	ldr	r3, [r3, #4]
    6f0a:	4013      	ands	r3, r2
    6f0c:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6f0e:	9904      	ldr	r1, [sp, #16]
    6f10:	9805      	ldr	r0, [sp, #20]
    6f12:	f000 f84a 	bl	6faa <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6f16:	9b04      	ldr	r3, [sp, #16]
    6f18:	43da      	mvns	r2, r3
    6f1a:	9b01      	ldr	r3, [sp, #4]
    6f1c:	685b      	ldr	r3, [r3, #4]
    6f1e:	4013      	ands	r3, r2
    6f20:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6f22:	9903      	ldr	r1, [sp, #12]
    6f24:	9805      	ldr	r0, [sp, #20]
    6f26:	f000 f849 	bl	6fbc <Gpio_Dio_Ip_ClearPins>

}
    6f2a:	bf00      	nop
    6f2c:	b007      	add	sp, #28
    6f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6f32:	bf00      	nop
    6f34:	1fff8b24 	.word	0x1fff8b24

00006f38 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6f38:	b500      	push	{lr}
    6f3a:	b087      	sub	sp, #28
    6f3c:	9003      	str	r0, [sp, #12]
    6f3e:	9102      	str	r1, [sp, #8]
    6f40:	4613      	mov	r3, r2
    6f42:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6f46:	f000 f86d 	bl	7024 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6f4a:	9b03      	ldr	r3, [sp, #12]
    6f4c:	681b      	ldr	r3, [r3, #0]
    6f4e:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6f50:	2201      	movs	r2, #1
    6f52:	9b02      	ldr	r3, [sp, #8]
    6f54:	fa02 f303 	lsl.w	r3, r2, r3
    6f58:	43db      	mvns	r3, r3
    6f5a:	9a05      	ldr	r2, [sp, #20]
    6f5c:	4013      	ands	r3, r2
    6f5e:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6f60:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f64:	9b02      	ldr	r3, [sp, #8]
    6f66:	fa02 f303 	lsl.w	r3, r2, r3
    6f6a:	9a05      	ldr	r2, [sp, #20]
    6f6c:	4313      	orrs	r3, r2
    6f6e:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6f70:	9b03      	ldr	r3, [sp, #12]
    6f72:	9a05      	ldr	r2, [sp, #20]
    6f74:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6f76:	f000 f881 	bl	707c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6f7a:	bf00      	nop
    6f7c:	b007      	add	sp, #28
    6f7e:	f85d fb04 	ldr.w	pc, [sp], #4

00006f82 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6f82:	b082      	sub	sp, #8
    6f84:	9001      	str	r0, [sp, #4]
    6f86:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6f88:	9b01      	ldr	r3, [sp, #4]
    6f8a:	9a00      	ldr	r2, [sp, #0]
    6f8c:	601a      	str	r2, [r3, #0]
}
    6f8e:	bf00      	nop
    6f90:	b002      	add	sp, #8
    6f92:	4770      	bx	lr

00006f94 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6f94:	b084      	sub	sp, #16
    6f96:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6f98:	2300      	movs	r3, #0
    6f9a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6f9c:	9b01      	ldr	r3, [sp, #4]
    6f9e:	681b      	ldr	r3, [r3, #0]
    6fa0:	9303      	str	r3, [sp, #12]
    return returnValue;
    6fa2:	9b03      	ldr	r3, [sp, #12]
}
    6fa4:	4618      	mov	r0, r3
    6fa6:	b004      	add	sp, #16
    6fa8:	4770      	bx	lr

00006faa <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6faa:	b082      	sub	sp, #8
    6fac:	9001      	str	r0, [sp, #4]
    6fae:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6fb0:	9b01      	ldr	r3, [sp, #4]
    6fb2:	9a00      	ldr	r2, [sp, #0]
    6fb4:	605a      	str	r2, [r3, #4]
}
    6fb6:	bf00      	nop
    6fb8:	b002      	add	sp, #8
    6fba:	4770      	bx	lr

00006fbc <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6fbc:	b082      	sub	sp, #8
    6fbe:	9001      	str	r0, [sp, #4]
    6fc0:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6fc2:	9b01      	ldr	r3, [sp, #4]
    6fc4:	9a00      	ldr	r2, [sp, #0]
    6fc6:	609a      	str	r2, [r3, #8]
}
    6fc8:	bf00      	nop
    6fca:	b002      	add	sp, #8
    6fcc:	4770      	bx	lr

00006fce <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6fce:	b082      	sub	sp, #8
    6fd0:	9001      	str	r0, [sp, #4]
    6fd2:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6fd4:	9b01      	ldr	r3, [sp, #4]
    6fd6:	9a00      	ldr	r2, [sp, #0]
    6fd8:	60da      	str	r2, [r3, #12]
}
    6fda:	bf00      	nop
    6fdc:	b002      	add	sp, #8
    6fde:	4770      	bx	lr

00006fe0 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6fe0:	b084      	sub	sp, #16
    6fe2:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6fe4:	2300      	movs	r3, #0
    6fe6:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6fe8:	9b01      	ldr	r3, [sp, #4]
    6fea:	691b      	ldr	r3, [r3, #16]
    6fec:	9303      	str	r3, [sp, #12]
    return returnValue;
    6fee:	9b03      	ldr	r3, [sp, #12]
}
    6ff0:	4618      	mov	r0, r3
    6ff2:	b004      	add	sp, #16
    6ff4:	4770      	bx	lr

00006ff6 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6ff6:	b084      	sub	sp, #16
    6ff8:	9001      	str	r0, [sp, #4]
    6ffa:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6ffc:	2300      	movs	r3, #0
    6ffe:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    7002:	9b01      	ldr	r3, [sp, #4]
    7004:	691a      	ldr	r2, [r3, #16]
    7006:	2101      	movs	r1, #1
    7008:	9b00      	ldr	r3, [sp, #0]
    700a:	fa01 f303 	lsl.w	r3, r1, r3
    700e:	401a      	ands	r2, r3
    7010:	9b00      	ldr	r3, [sp, #0]
    7012:	fa22 f303 	lsr.w	r3, r2, r3
    7016:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    701a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    701e:	4618      	mov	r0, r3
    7020:	b004      	add	sp, #16
    7022:	4770      	bx	lr

00007024 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    7024:	b500      	push	{lr}
    7026:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7028:	f7fa fa1c 	bl	1464 <Sys_GetCoreID>
    702c:	4603      	mov	r3, r0
    702e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    7030:	4a10      	ldr	r2, [pc, #64]	; (7074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    7032:	9b01      	ldr	r3, [sp, #4]
    7034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7038:	2b00      	cmp	r3, #0
    703a:	d10d      	bne.n	7058 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    703c:	f7f9 fd68 	bl	b10 <Dio_schm_read_msr>
    7040:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7042:	9b00      	ldr	r3, [sp, #0]
    7044:	f003 0301 	and.w	r3, r3, #1
    7048:	2b00      	cmp	r3, #0
    704a:	d100      	bne.n	704e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    704c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    704e:	490a      	ldr	r1, [pc, #40]	; (7078 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    7050:	9b01      	ldr	r3, [sp, #4]
    7052:	9a00      	ldr	r2, [sp, #0]
    7054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    7058:	4a06      	ldr	r2, [pc, #24]	; (7074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    705a:	9b01      	ldr	r3, [sp, #4]
    705c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7060:	1c5a      	adds	r2, r3, #1
    7062:	4904      	ldr	r1, [pc, #16]	; (7074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    7064:	9b01      	ldr	r3, [sp, #4]
    7066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    706a:	bf00      	nop
    706c:	b003      	add	sp, #12
    706e:	f85d fb04 	ldr.w	pc, [sp], #4
    7072:	bf00      	nop
    7074:	1fff8cfc 	.word	0x1fff8cfc
    7078:	1fff8cf8 	.word	0x1fff8cf8

0000707c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    707c:	b500      	push	{lr}
    707e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7080:	f7fa f9f0 	bl	1464 <Sys_GetCoreID>
    7084:	4603      	mov	r3, r0
    7086:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    7088:	4a0d      	ldr	r2, [pc, #52]	; (70c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    708a:	9b01      	ldr	r3, [sp, #4]
    708c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7090:	1e5a      	subs	r2, r3, #1
    7092:	490b      	ldr	r1, [pc, #44]	; (70c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7094:	9b01      	ldr	r3, [sp, #4]
    7096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    709a:	4a0a      	ldr	r2, [pc, #40]	; (70c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    709c:	9b01      	ldr	r3, [sp, #4]
    709e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70a2:	f003 0301 	and.w	r3, r3, #1
    70a6:	2b00      	cmp	r3, #0
    70a8:	d106      	bne.n	70b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    70aa:	4a05      	ldr	r2, [pc, #20]	; (70c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    70ac:	9b01      	ldr	r3, [sp, #4]
    70ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b2:	2b00      	cmp	r3, #0
    70b4:	d100      	bne.n	70b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    70b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70b8:	bf00      	nop
    70ba:	b003      	add	sp, #12
    70bc:	f85d fb04 	ldr.w	pc, [sp], #4
    70c0:	1fff8cfc 	.word	0x1fff8cfc
    70c4:	1fff8cf8 	.word	0x1fff8cf8

000070c8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    70c8:	b500      	push	{lr}
    70ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70cc:	f7fa f9ca 	bl	1464 <Sys_GetCoreID>
    70d0:	4603      	mov	r3, r0
    70d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    70d4:	4a10      	ldr	r2, [pc, #64]	; (7118 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    70d6:	9b01      	ldr	r3, [sp, #4]
    70d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70dc:	2b00      	cmp	r3, #0
    70de:	d10d      	bne.n	70fc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70e0:	f7f9 fd16 	bl	b10 <Dio_schm_read_msr>
    70e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70e6:	9b00      	ldr	r3, [sp, #0]
    70e8:	f003 0301 	and.w	r3, r3, #1
    70ec:	2b00      	cmp	r3, #0
    70ee:	d100      	bne.n	70f2 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    70f2:	490a      	ldr	r1, [pc, #40]	; (711c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    70f4:	9b01      	ldr	r3, [sp, #4]
    70f6:	9a00      	ldr	r2, [sp, #0]
    70f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    70fc:	4a06      	ldr	r2, [pc, #24]	; (7118 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    70fe:	9b01      	ldr	r3, [sp, #4]
    7100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7104:	1c5a      	adds	r2, r3, #1
    7106:	4904      	ldr	r1, [pc, #16]	; (7118 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    7108:	9b01      	ldr	r3, [sp, #4]
    710a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    710e:	bf00      	nop
    7110:	b003      	add	sp, #12
    7112:	f85d fb04 	ldr.w	pc, [sp], #4
    7116:	bf00      	nop
    7118:	1fff8d04 	.word	0x1fff8d04
    711c:	1fff8d00 	.word	0x1fff8d00

00007120 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    7120:	b500      	push	{lr}
    7122:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7124:	f7fa f99e 	bl	1464 <Sys_GetCoreID>
    7128:	4603      	mov	r3, r0
    712a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    712c:	4a0d      	ldr	r2, [pc, #52]	; (7164 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    712e:	9b01      	ldr	r3, [sp, #4]
    7130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7134:	1e5a      	subs	r2, r3, #1
    7136:	490b      	ldr	r1, [pc, #44]	; (7164 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    7138:	9b01      	ldr	r3, [sp, #4]
    713a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    713e:	4a0a      	ldr	r2, [pc, #40]	; (7168 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    7140:	9b01      	ldr	r3, [sp, #4]
    7142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7146:	f003 0301 	and.w	r3, r3, #1
    714a:	2b00      	cmp	r3, #0
    714c:	d106      	bne.n	715c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    714e:	4a05      	ldr	r2, [pc, #20]	; (7164 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    7150:	9b01      	ldr	r3, [sp, #4]
    7152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7156:	2b00      	cmp	r3, #0
    7158:	d100      	bne.n	715c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    715a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    715c:	bf00      	nop
    715e:	b003      	add	sp, #12
    7160:	f85d fb04 	ldr.w	pc, [sp], #4
    7164:	1fff8d04 	.word	0x1fff8d04
    7168:	1fff8d00 	.word	0x1fff8d00

0000716c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    716c:	b500      	push	{lr}
    716e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7170:	f7fa f978 	bl	1464 <Sys_GetCoreID>
    7174:	4603      	mov	r3, r0
    7176:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    7178:	4a10      	ldr	r2, [pc, #64]	; (71bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    717a:	9b01      	ldr	r3, [sp, #4]
    717c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7180:	2b00      	cmp	r3, #0
    7182:	d10d      	bne.n	71a0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7184:	f7f9 fccd 	bl	b22 <Mcu_schm_read_msr>
    7188:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    718a:	9b00      	ldr	r3, [sp, #0]
    718c:	f003 0301 	and.w	r3, r3, #1
    7190:	2b00      	cmp	r3, #0
    7192:	d100      	bne.n	7196 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7194:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    7196:	490a      	ldr	r1, [pc, #40]	; (71c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    7198:	9b01      	ldr	r3, [sp, #4]
    719a:	9a00      	ldr	r2, [sp, #0]
    719c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    71a0:	4a06      	ldr	r2, [pc, #24]	; (71bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    71a2:	9b01      	ldr	r3, [sp, #4]
    71a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71a8:	1c5a      	adds	r2, r3, #1
    71aa:	4904      	ldr	r1, [pc, #16]	; (71bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    71ac:	9b01      	ldr	r3, [sp, #4]
    71ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71b2:	bf00      	nop
    71b4:	b003      	add	sp, #12
    71b6:	f85d fb04 	ldr.w	pc, [sp], #4
    71ba:	bf00      	nop
    71bc:	1fff8d0c 	.word	0x1fff8d0c
    71c0:	1fff8d08 	.word	0x1fff8d08

000071c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    71c4:	b500      	push	{lr}
    71c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71c8:	f7fa f94c 	bl	1464 <Sys_GetCoreID>
    71cc:	4603      	mov	r3, r0
    71ce:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    71d0:	4a0d      	ldr	r2, [pc, #52]	; (7208 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    71d2:	9b01      	ldr	r3, [sp, #4]
    71d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d8:	1e5a      	subs	r2, r3, #1
    71da:	490b      	ldr	r1, [pc, #44]	; (7208 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    71dc:	9b01      	ldr	r3, [sp, #4]
    71de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    71e2:	4a0a      	ldr	r2, [pc, #40]	; (720c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    71e4:	9b01      	ldr	r3, [sp, #4]
    71e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71ea:	f003 0301 	and.w	r3, r3, #1
    71ee:	2b00      	cmp	r3, #0
    71f0:	d106      	bne.n	7200 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    71f2:	4a05      	ldr	r2, [pc, #20]	; (7208 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    71f4:	9b01      	ldr	r3, [sp, #4]
    71f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71fa:	2b00      	cmp	r3, #0
    71fc:	d100      	bne.n	7200 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7200:	bf00      	nop
    7202:	b003      	add	sp, #12
    7204:	f85d fb04 	ldr.w	pc, [sp], #4
    7208:	1fff8d0c 	.word	0x1fff8d0c
    720c:	1fff8d08 	.word	0x1fff8d08

00007210 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    7210:	b500      	push	{lr}
    7212:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7214:	f7fa f926 	bl	1464 <Sys_GetCoreID>
    7218:	4603      	mov	r3, r0
    721a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    721c:	4a10      	ldr	r2, [pc, #64]	; (7260 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    721e:	9b01      	ldr	r3, [sp, #4]
    7220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7224:	2b00      	cmp	r3, #0
    7226:	d10d      	bne.n	7244 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7228:	f7f9 fc7b 	bl	b22 <Mcu_schm_read_msr>
    722c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    722e:	9b00      	ldr	r3, [sp, #0]
    7230:	f003 0301 	and.w	r3, r3, #1
    7234:	2b00      	cmp	r3, #0
    7236:	d100      	bne.n	723a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7238:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    723a:	490a      	ldr	r1, [pc, #40]	; (7264 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    723c:	9b01      	ldr	r3, [sp, #4]
    723e:	9a00      	ldr	r2, [sp, #0]
    7240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    7244:	4a06      	ldr	r2, [pc, #24]	; (7260 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    7246:	9b01      	ldr	r3, [sp, #4]
    7248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    724c:	1c5a      	adds	r2, r3, #1
    724e:	4904      	ldr	r1, [pc, #16]	; (7260 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    7250:	9b01      	ldr	r3, [sp, #4]
    7252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7256:	bf00      	nop
    7258:	b003      	add	sp, #12
    725a:	f85d fb04 	ldr.w	pc, [sp], #4
    725e:	bf00      	nop
    7260:	1fff8d14 	.word	0x1fff8d14
    7264:	1fff8d10 	.word	0x1fff8d10

00007268 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    7268:	b500      	push	{lr}
    726a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    726c:	f7fa f8fa 	bl	1464 <Sys_GetCoreID>
    7270:	4603      	mov	r3, r0
    7272:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    7274:	4a0d      	ldr	r2, [pc, #52]	; (72ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    7276:	9b01      	ldr	r3, [sp, #4]
    7278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    727c:	1e5a      	subs	r2, r3, #1
    727e:	490b      	ldr	r1, [pc, #44]	; (72ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    7280:	9b01      	ldr	r3, [sp, #4]
    7282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    7286:	4a0a      	ldr	r2, [pc, #40]	; (72b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    7288:	9b01      	ldr	r3, [sp, #4]
    728a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    728e:	f003 0301 	and.w	r3, r3, #1
    7292:	2b00      	cmp	r3, #0
    7294:	d106      	bne.n	72a4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    7296:	4a05      	ldr	r2, [pc, #20]	; (72ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    7298:	9b01      	ldr	r3, [sp, #4]
    729a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    729e:	2b00      	cmp	r3, #0
    72a0:	d100      	bne.n	72a4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    72a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    72a4:	bf00      	nop
    72a6:	b003      	add	sp, #12
    72a8:	f85d fb04 	ldr.w	pc, [sp], #4
    72ac:	1fff8d14 	.word	0x1fff8d14
    72b0:	1fff8d10 	.word	0x1fff8d10

000072b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    72b4:	b500      	push	{lr}
    72b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72b8:	f7fa f8d4 	bl	1464 <Sys_GetCoreID>
    72bc:	4603      	mov	r3, r0
    72be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    72c0:	4a10      	ldr	r2, [pc, #64]	; (7304 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    72c2:	9b01      	ldr	r3, [sp, #4]
    72c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72c8:	2b00      	cmp	r3, #0
    72ca:	d10d      	bne.n	72e8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72cc:	f7f9 fc29 	bl	b22 <Mcu_schm_read_msr>
    72d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72d2:	9b00      	ldr	r3, [sp, #0]
    72d4:	f003 0301 	and.w	r3, r3, #1
    72d8:	2b00      	cmp	r3, #0
    72da:	d100      	bne.n	72de <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    72dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    72de:	490a      	ldr	r1, [pc, #40]	; (7308 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    72e0:	9b01      	ldr	r3, [sp, #4]
    72e2:	9a00      	ldr	r2, [sp, #0]
    72e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    72e8:	4a06      	ldr	r2, [pc, #24]	; (7304 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    72ea:	9b01      	ldr	r3, [sp, #4]
    72ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72f0:	1c5a      	adds	r2, r3, #1
    72f2:	4904      	ldr	r1, [pc, #16]	; (7304 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    72f4:	9b01      	ldr	r3, [sp, #4]
    72f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72fa:	bf00      	nop
    72fc:	b003      	add	sp, #12
    72fe:	f85d fb04 	ldr.w	pc, [sp], #4
    7302:	bf00      	nop
    7304:	1fff8d1c 	.word	0x1fff8d1c
    7308:	1fff8d18 	.word	0x1fff8d18

0000730c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    730c:	b500      	push	{lr}
    730e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7310:	f7fa f8a8 	bl	1464 <Sys_GetCoreID>
    7314:	4603      	mov	r3, r0
    7316:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    7318:	4a0d      	ldr	r2, [pc, #52]	; (7350 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    731a:	9b01      	ldr	r3, [sp, #4]
    731c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7320:	1e5a      	subs	r2, r3, #1
    7322:	490b      	ldr	r1, [pc, #44]	; (7350 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    7324:	9b01      	ldr	r3, [sp, #4]
    7326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    732a:	4a0a      	ldr	r2, [pc, #40]	; (7354 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    732c:	9b01      	ldr	r3, [sp, #4]
    732e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7332:	f003 0301 	and.w	r3, r3, #1
    7336:	2b00      	cmp	r3, #0
    7338:	d106      	bne.n	7348 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    733a:	4a05      	ldr	r2, [pc, #20]	; (7350 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    733c:	9b01      	ldr	r3, [sp, #4]
    733e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7342:	2b00      	cmp	r3, #0
    7344:	d100      	bne.n	7348 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7346:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7348:	bf00      	nop
    734a:	b003      	add	sp, #12
    734c:	f85d fb04 	ldr.w	pc, [sp], #4
    7350:	1fff8d1c 	.word	0x1fff8d1c
    7354:	1fff8d18 	.word	0x1fff8d18

00007358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    7358:	b500      	push	{lr}
    735a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    735c:	f7fa f882 	bl	1464 <Sys_GetCoreID>
    7360:	4603      	mov	r3, r0
    7362:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    7364:	4a10      	ldr	r2, [pc, #64]	; (73a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    7366:	9b01      	ldr	r3, [sp, #4]
    7368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    736c:	2b00      	cmp	r3, #0
    736e:	d10d      	bne.n	738c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7370:	f7f9 fbe0 	bl	b34 <Port_schm_read_msr>
    7374:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7376:	9b00      	ldr	r3, [sp, #0]
    7378:	f003 0301 	and.w	r3, r3, #1
    737c:	2b00      	cmp	r3, #0
    737e:	d100      	bne.n	7382 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7380:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    7382:	490a      	ldr	r1, [pc, #40]	; (73ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    7384:	9b01      	ldr	r3, [sp, #4]
    7386:	9a00      	ldr	r2, [sp, #0]
    7388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    738c:	4a06      	ldr	r2, [pc, #24]	; (73a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    738e:	9b01      	ldr	r3, [sp, #4]
    7390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7394:	1c5a      	adds	r2, r3, #1
    7396:	4904      	ldr	r1, [pc, #16]	; (73a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    7398:	9b01      	ldr	r3, [sp, #4]
    739a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    739e:	bf00      	nop
    73a0:	b003      	add	sp, #12
    73a2:	f85d fb04 	ldr.w	pc, [sp], #4
    73a6:	bf00      	nop
    73a8:	1fff8d24 	.word	0x1fff8d24
    73ac:	1fff8d20 	.word	0x1fff8d20

000073b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    73b0:	b500      	push	{lr}
    73b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73b4:	f7fa f856 	bl	1464 <Sys_GetCoreID>
    73b8:	4603      	mov	r3, r0
    73ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    73bc:	4a0d      	ldr	r2, [pc, #52]	; (73f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    73be:	9b01      	ldr	r3, [sp, #4]
    73c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73c4:	1e5a      	subs	r2, r3, #1
    73c6:	490b      	ldr	r1, [pc, #44]	; (73f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    73c8:	9b01      	ldr	r3, [sp, #4]
    73ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    73ce:	4a0a      	ldr	r2, [pc, #40]	; (73f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    73d0:	9b01      	ldr	r3, [sp, #4]
    73d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73d6:	f003 0301 	and.w	r3, r3, #1
    73da:	2b00      	cmp	r3, #0
    73dc:	d106      	bne.n	73ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    73de:	4a05      	ldr	r2, [pc, #20]	; (73f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    73e0:	9b01      	ldr	r3, [sp, #4]
    73e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e6:	2b00      	cmp	r3, #0
    73e8:	d100      	bne.n	73ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73ec:	bf00      	nop
    73ee:	b003      	add	sp, #12
    73f0:	f85d fb04 	ldr.w	pc, [sp], #4
    73f4:	1fff8d24 	.word	0x1fff8d24
    73f8:	1fff8d20 	.word	0x1fff8d20

000073fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    73fc:	b500      	push	{lr}
    73fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7400:	f7fa f830 	bl	1464 <Sys_GetCoreID>
    7404:	4603      	mov	r3, r0
    7406:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    7408:	4a10      	ldr	r2, [pc, #64]	; (744c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    740a:	9b01      	ldr	r3, [sp, #4]
    740c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7410:	2b00      	cmp	r3, #0
    7412:	d10d      	bne.n	7430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7414:	f7f9 fb8e 	bl	b34 <Port_schm_read_msr>
    7418:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    741a:	9b00      	ldr	r3, [sp, #0]
    741c:	f003 0301 	and.w	r3, r3, #1
    7420:	2b00      	cmp	r3, #0
    7422:	d100      	bne.n	7426 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7424:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    7426:	490a      	ldr	r1, [pc, #40]	; (7450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    7428:	9b01      	ldr	r3, [sp, #4]
    742a:	9a00      	ldr	r2, [sp, #0]
    742c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    7430:	4a06      	ldr	r2, [pc, #24]	; (744c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    7432:	9b01      	ldr	r3, [sp, #4]
    7434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7438:	1c5a      	adds	r2, r3, #1
    743a:	4904      	ldr	r1, [pc, #16]	; (744c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    743c:	9b01      	ldr	r3, [sp, #4]
    743e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7442:	bf00      	nop
    7444:	b003      	add	sp, #12
    7446:	f85d fb04 	ldr.w	pc, [sp], #4
    744a:	bf00      	nop
    744c:	1fff8d2c 	.word	0x1fff8d2c
    7450:	1fff8d28 	.word	0x1fff8d28

00007454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    7454:	b500      	push	{lr}
    7456:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7458:	f7fa f804 	bl	1464 <Sys_GetCoreID>
    745c:	4603      	mov	r3, r0
    745e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    7460:	4a0d      	ldr	r2, [pc, #52]	; (7498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    7462:	9b01      	ldr	r3, [sp, #4]
    7464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7468:	1e5a      	subs	r2, r3, #1
    746a:	490b      	ldr	r1, [pc, #44]	; (7498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    746c:	9b01      	ldr	r3, [sp, #4]
    746e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    7472:	4a0a      	ldr	r2, [pc, #40]	; (749c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    7474:	9b01      	ldr	r3, [sp, #4]
    7476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    747a:	f003 0301 	and.w	r3, r3, #1
    747e:	2b00      	cmp	r3, #0
    7480:	d106      	bne.n	7490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    7482:	4a05      	ldr	r2, [pc, #20]	; (7498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    7484:	9b01      	ldr	r3, [sp, #4]
    7486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    748a:	2b00      	cmp	r3, #0
    748c:	d100      	bne.n	7490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    748e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7490:	bf00      	nop
    7492:	b003      	add	sp, #12
    7494:	f85d fb04 	ldr.w	pc, [sp], #4
    7498:	1fff8d2c 	.word	0x1fff8d2c
    749c:	1fff8d28 	.word	0x1fff8d28

000074a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    74a0:	b500      	push	{lr}
    74a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74a4:	f7f9 ffde 	bl	1464 <Sys_GetCoreID>
    74a8:	4603      	mov	r3, r0
    74aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    74ac:	4a10      	ldr	r2, [pc, #64]	; (74f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    74ae:	9b01      	ldr	r3, [sp, #4]
    74b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74b4:	2b00      	cmp	r3, #0
    74b6:	d10d      	bne.n	74d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    74b8:	f7f9 fb3c 	bl	b34 <Port_schm_read_msr>
    74bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74be:	9b00      	ldr	r3, [sp, #0]
    74c0:	f003 0301 	and.w	r3, r3, #1
    74c4:	2b00      	cmp	r3, #0
    74c6:	d100      	bne.n	74ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    74ca:	490a      	ldr	r1, [pc, #40]	; (74f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    74cc:	9b01      	ldr	r3, [sp, #4]
    74ce:	9a00      	ldr	r2, [sp, #0]
    74d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    74d4:	4a06      	ldr	r2, [pc, #24]	; (74f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    74d6:	9b01      	ldr	r3, [sp, #4]
    74d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74dc:	1c5a      	adds	r2, r3, #1
    74de:	4904      	ldr	r1, [pc, #16]	; (74f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    74e0:	9b01      	ldr	r3, [sp, #4]
    74e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74e6:	bf00      	nop
    74e8:	b003      	add	sp, #12
    74ea:	f85d fb04 	ldr.w	pc, [sp], #4
    74ee:	bf00      	nop
    74f0:	1fff8d34 	.word	0x1fff8d34
    74f4:	1fff8d30 	.word	0x1fff8d30

000074f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    74f8:	b500      	push	{lr}
    74fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74fc:	f7f9 ffb2 	bl	1464 <Sys_GetCoreID>
    7500:	4603      	mov	r3, r0
    7502:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    7504:	4a0d      	ldr	r2, [pc, #52]	; (753c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    7506:	9b01      	ldr	r3, [sp, #4]
    7508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    750c:	1e5a      	subs	r2, r3, #1
    750e:	490b      	ldr	r1, [pc, #44]	; (753c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    7510:	9b01      	ldr	r3, [sp, #4]
    7512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    7516:	4a0a      	ldr	r2, [pc, #40]	; (7540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    7518:	9b01      	ldr	r3, [sp, #4]
    751a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    751e:	f003 0301 	and.w	r3, r3, #1
    7522:	2b00      	cmp	r3, #0
    7524:	d106      	bne.n	7534 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    7526:	4a05      	ldr	r2, [pc, #20]	; (753c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    7528:	9b01      	ldr	r3, [sp, #4]
    752a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    752e:	2b00      	cmp	r3, #0
    7530:	d100      	bne.n	7534 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7532:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7534:	bf00      	nop
    7536:	b003      	add	sp, #12
    7538:	f85d fb04 	ldr.w	pc, [sp], #4
    753c:	1fff8d34 	.word	0x1fff8d34
    7540:	1fff8d30 	.word	0x1fff8d30

00007544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    7544:	b500      	push	{lr}
    7546:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7548:	f7f9 ff8c 	bl	1464 <Sys_GetCoreID>
    754c:	4603      	mov	r3, r0
    754e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    7550:	4a10      	ldr	r2, [pc, #64]	; (7594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    7552:	9b01      	ldr	r3, [sp, #4]
    7554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7558:	2b00      	cmp	r3, #0
    755a:	d10d      	bne.n	7578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    755c:	f7f9 faea 	bl	b34 <Port_schm_read_msr>
    7560:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7562:	9b00      	ldr	r3, [sp, #0]
    7564:	f003 0301 	and.w	r3, r3, #1
    7568:	2b00      	cmp	r3, #0
    756a:	d100      	bne.n	756e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    756c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    756e:	490a      	ldr	r1, [pc, #40]	; (7598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    7570:	9b01      	ldr	r3, [sp, #4]
    7572:	9a00      	ldr	r2, [sp, #0]
    7574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    7578:	4a06      	ldr	r2, [pc, #24]	; (7594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    757a:	9b01      	ldr	r3, [sp, #4]
    757c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7580:	1c5a      	adds	r2, r3, #1
    7582:	4904      	ldr	r1, [pc, #16]	; (7594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    7584:	9b01      	ldr	r3, [sp, #4]
    7586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    758a:	bf00      	nop
    758c:	b003      	add	sp, #12
    758e:	f85d fb04 	ldr.w	pc, [sp], #4
    7592:	bf00      	nop
    7594:	1fff8d3c 	.word	0x1fff8d3c
    7598:	1fff8d38 	.word	0x1fff8d38

0000759c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    759c:	b500      	push	{lr}
    759e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75a0:	f7f9 ff60 	bl	1464 <Sys_GetCoreID>
    75a4:	4603      	mov	r3, r0
    75a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    75a8:	4a0d      	ldr	r2, [pc, #52]	; (75e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    75aa:	9b01      	ldr	r3, [sp, #4]
    75ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75b0:	1e5a      	subs	r2, r3, #1
    75b2:	490b      	ldr	r1, [pc, #44]	; (75e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    75b4:	9b01      	ldr	r3, [sp, #4]
    75b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    75ba:	4a0a      	ldr	r2, [pc, #40]	; (75e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    75bc:	9b01      	ldr	r3, [sp, #4]
    75be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75c2:	f003 0301 	and.w	r3, r3, #1
    75c6:	2b00      	cmp	r3, #0
    75c8:	d106      	bne.n	75d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    75ca:	4a05      	ldr	r2, [pc, #20]	; (75e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    75cc:	9b01      	ldr	r3, [sp, #4]
    75ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d2:	2b00      	cmp	r3, #0
    75d4:	d100      	bne.n	75d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    75d8:	bf00      	nop
    75da:	b003      	add	sp, #12
    75dc:	f85d fb04 	ldr.w	pc, [sp], #4
    75e0:	1fff8d3c 	.word	0x1fff8d3c
    75e4:	1fff8d38 	.word	0x1fff8d38

000075e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    75e8:	b500      	push	{lr}
    75ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75ec:	f7f9 ff3a 	bl	1464 <Sys_GetCoreID>
    75f0:	4603      	mov	r3, r0
    75f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    75f4:	4a10      	ldr	r2, [pc, #64]	; (7638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    75f6:	9b01      	ldr	r3, [sp, #4]
    75f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75fc:	2b00      	cmp	r3, #0
    75fe:	d10d      	bne.n	761c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7600:	f7f9 fa98 	bl	b34 <Port_schm_read_msr>
    7604:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7606:	9b00      	ldr	r3, [sp, #0]
    7608:	f003 0301 	and.w	r3, r3, #1
    760c:	2b00      	cmp	r3, #0
    760e:	d100      	bne.n	7612 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7610:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    7612:	490a      	ldr	r1, [pc, #40]	; (763c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    7614:	9b01      	ldr	r3, [sp, #4]
    7616:	9a00      	ldr	r2, [sp, #0]
    7618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    761c:	4a06      	ldr	r2, [pc, #24]	; (7638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    761e:	9b01      	ldr	r3, [sp, #4]
    7620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7624:	1c5a      	adds	r2, r3, #1
    7626:	4904      	ldr	r1, [pc, #16]	; (7638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    7628:	9b01      	ldr	r3, [sp, #4]
    762a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    762e:	bf00      	nop
    7630:	b003      	add	sp, #12
    7632:	f85d fb04 	ldr.w	pc, [sp], #4
    7636:	bf00      	nop
    7638:	1fff8d44 	.word	0x1fff8d44
    763c:	1fff8d40 	.word	0x1fff8d40

00007640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    7640:	b500      	push	{lr}
    7642:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7644:	f7f9 ff0e 	bl	1464 <Sys_GetCoreID>
    7648:	4603      	mov	r3, r0
    764a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    764c:	4a0d      	ldr	r2, [pc, #52]	; (7684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    764e:	9b01      	ldr	r3, [sp, #4]
    7650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7654:	1e5a      	subs	r2, r3, #1
    7656:	490b      	ldr	r1, [pc, #44]	; (7684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7658:	9b01      	ldr	r3, [sp, #4]
    765a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    765e:	4a0a      	ldr	r2, [pc, #40]	; (7688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    7660:	9b01      	ldr	r3, [sp, #4]
    7662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7666:	f003 0301 	and.w	r3, r3, #1
    766a:	2b00      	cmp	r3, #0
    766c:	d106      	bne.n	767c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    766e:	4a05      	ldr	r2, [pc, #20]	; (7684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7670:	9b01      	ldr	r3, [sp, #4]
    7672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7676:	2b00      	cmp	r3, #0
    7678:	d100      	bne.n	767c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    767a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    767c:	bf00      	nop
    767e:	b003      	add	sp, #12
    7680:	f85d fb04 	ldr.w	pc, [sp], #4
    7684:	1fff8d44 	.word	0x1fff8d44
    7688:	1fff8d40 	.word	0x1fff8d40

0000768c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    768c:	b500      	push	{lr}
    768e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7690:	f7f9 fee8 	bl	1464 <Sys_GetCoreID>
    7694:	4603      	mov	r3, r0
    7696:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    7698:	4a10      	ldr	r2, [pc, #64]	; (76dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    769a:	9b01      	ldr	r3, [sp, #4]
    769c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a0:	2b00      	cmp	r3, #0
    76a2:	d10d      	bne.n	76c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    76a4:	f7f9 fa46 	bl	b34 <Port_schm_read_msr>
    76a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    76aa:	9b00      	ldr	r3, [sp, #0]
    76ac:	f003 0301 	and.w	r3, r3, #1
    76b0:	2b00      	cmp	r3, #0
    76b2:	d100      	bne.n	76b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    76b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    76b6:	490a      	ldr	r1, [pc, #40]	; (76e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    76b8:	9b01      	ldr	r3, [sp, #4]
    76ba:	9a00      	ldr	r2, [sp, #0]
    76bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    76c0:	4a06      	ldr	r2, [pc, #24]	; (76dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    76c2:	9b01      	ldr	r3, [sp, #4]
    76c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76c8:	1c5a      	adds	r2, r3, #1
    76ca:	4904      	ldr	r1, [pc, #16]	; (76dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    76cc:	9b01      	ldr	r3, [sp, #4]
    76ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76d2:	bf00      	nop
    76d4:	b003      	add	sp, #12
    76d6:	f85d fb04 	ldr.w	pc, [sp], #4
    76da:	bf00      	nop
    76dc:	1fff8d4c 	.word	0x1fff8d4c
    76e0:	1fff8d48 	.word	0x1fff8d48

000076e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    76e4:	b500      	push	{lr}
    76e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76e8:	f7f9 febc 	bl	1464 <Sys_GetCoreID>
    76ec:	4603      	mov	r3, r0
    76ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    76f0:	4a0d      	ldr	r2, [pc, #52]	; (7728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    76f2:	9b01      	ldr	r3, [sp, #4]
    76f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f8:	1e5a      	subs	r2, r3, #1
    76fa:	490b      	ldr	r1, [pc, #44]	; (7728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    76fc:	9b01      	ldr	r3, [sp, #4]
    76fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    7702:	4a0a      	ldr	r2, [pc, #40]	; (772c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    7704:	9b01      	ldr	r3, [sp, #4]
    7706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    770a:	f003 0301 	and.w	r3, r3, #1
    770e:	2b00      	cmp	r3, #0
    7710:	d106      	bne.n	7720 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    7712:	4a05      	ldr	r2, [pc, #20]	; (7728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    7714:	9b01      	ldr	r3, [sp, #4]
    7716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    771a:	2b00      	cmp	r3, #0
    771c:	d100      	bne.n	7720 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    771e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7720:	bf00      	nop
    7722:	b003      	add	sp, #12
    7724:	f85d fb04 	ldr.w	pc, [sp], #4
    7728:	1fff8d4c 	.word	0x1fff8d4c
    772c:	1fff8d48 	.word	0x1fff8d48

00007730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    7730:	b500      	push	{lr}
    7732:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7734:	f7f9 fe96 	bl	1464 <Sys_GetCoreID>
    7738:	4603      	mov	r3, r0
    773a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    773c:	4a10      	ldr	r2, [pc, #64]	; (7780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    773e:	9b01      	ldr	r3, [sp, #4]
    7740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7744:	2b00      	cmp	r3, #0
    7746:	d10d      	bne.n	7764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7748:	f7f9 f9f4 	bl	b34 <Port_schm_read_msr>
    774c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    774e:	9b00      	ldr	r3, [sp, #0]
    7750:	f003 0301 	and.w	r3, r3, #1
    7754:	2b00      	cmp	r3, #0
    7756:	d100      	bne.n	775a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7758:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    775a:	490a      	ldr	r1, [pc, #40]	; (7784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    775c:	9b01      	ldr	r3, [sp, #4]
    775e:	9a00      	ldr	r2, [sp, #0]
    7760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    7764:	4a06      	ldr	r2, [pc, #24]	; (7780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    7766:	9b01      	ldr	r3, [sp, #4]
    7768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    776c:	1c5a      	adds	r2, r3, #1
    776e:	4904      	ldr	r1, [pc, #16]	; (7780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    7770:	9b01      	ldr	r3, [sp, #4]
    7772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7776:	bf00      	nop
    7778:	b003      	add	sp, #12
    777a:	f85d fb04 	ldr.w	pc, [sp], #4
    777e:	bf00      	nop
    7780:	1fff8d54 	.word	0x1fff8d54
    7784:	1fff8d50 	.word	0x1fff8d50

00007788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    7788:	b500      	push	{lr}
    778a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    778c:	f7f9 fe6a 	bl	1464 <Sys_GetCoreID>
    7790:	4603      	mov	r3, r0
    7792:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    7794:	4a0d      	ldr	r2, [pc, #52]	; (77cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    7796:	9b01      	ldr	r3, [sp, #4]
    7798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    779c:	1e5a      	subs	r2, r3, #1
    779e:	490b      	ldr	r1, [pc, #44]	; (77cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    77a0:	9b01      	ldr	r3, [sp, #4]
    77a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    77a6:	4a0a      	ldr	r2, [pc, #40]	; (77d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    77a8:	9b01      	ldr	r3, [sp, #4]
    77aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ae:	f003 0301 	and.w	r3, r3, #1
    77b2:	2b00      	cmp	r3, #0
    77b4:	d106      	bne.n	77c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    77b6:	4a05      	ldr	r2, [pc, #20]	; (77cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    77b8:	9b01      	ldr	r3, [sp, #4]
    77ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77be:	2b00      	cmp	r3, #0
    77c0:	d100      	bne.n	77c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    77c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    77c4:	bf00      	nop
    77c6:	b003      	add	sp, #12
    77c8:	f85d fb04 	ldr.w	pc, [sp], #4
    77cc:	1fff8d54 	.word	0x1fff8d54
    77d0:	1fff8d50 	.word	0x1fff8d50

000077d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    77d4:	b500      	push	{lr}
    77d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77d8:	f7f9 fe44 	bl	1464 <Sys_GetCoreID>
    77dc:	4603      	mov	r3, r0
    77de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    77e0:	4a10      	ldr	r2, [pc, #64]	; (7824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    77e2:	9b01      	ldr	r3, [sp, #4]
    77e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77e8:	2b00      	cmp	r3, #0
    77ea:	d10d      	bne.n	7808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77ec:	f7f9 f9a2 	bl	b34 <Port_schm_read_msr>
    77f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77f2:	9b00      	ldr	r3, [sp, #0]
    77f4:	f003 0301 	and.w	r3, r3, #1
    77f8:	2b00      	cmp	r3, #0
    77fa:	d100      	bne.n	77fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    77fe:	490a      	ldr	r1, [pc, #40]	; (7828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    7800:	9b01      	ldr	r3, [sp, #4]
    7802:	9a00      	ldr	r2, [sp, #0]
    7804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    7808:	4a06      	ldr	r2, [pc, #24]	; (7824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    780a:	9b01      	ldr	r3, [sp, #4]
    780c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7810:	1c5a      	adds	r2, r3, #1
    7812:	4904      	ldr	r1, [pc, #16]	; (7824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    7814:	9b01      	ldr	r3, [sp, #4]
    7816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    781a:	bf00      	nop
    781c:	b003      	add	sp, #12
    781e:	f85d fb04 	ldr.w	pc, [sp], #4
    7822:	bf00      	nop
    7824:	1fff8d5c 	.word	0x1fff8d5c
    7828:	1fff8d58 	.word	0x1fff8d58

0000782c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    782c:	b500      	push	{lr}
    782e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7830:	f7f9 fe18 	bl	1464 <Sys_GetCoreID>
    7834:	4603      	mov	r3, r0
    7836:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    7838:	4a0d      	ldr	r2, [pc, #52]	; (7870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    783a:	9b01      	ldr	r3, [sp, #4]
    783c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7840:	1e5a      	subs	r2, r3, #1
    7842:	490b      	ldr	r1, [pc, #44]	; (7870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    7844:	9b01      	ldr	r3, [sp, #4]
    7846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    784a:	4a0a      	ldr	r2, [pc, #40]	; (7874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    784c:	9b01      	ldr	r3, [sp, #4]
    784e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7852:	f003 0301 	and.w	r3, r3, #1
    7856:	2b00      	cmp	r3, #0
    7858:	d106      	bne.n	7868 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    785a:	4a05      	ldr	r2, [pc, #20]	; (7870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    785c:	9b01      	ldr	r3, [sp, #4]
    785e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7862:	2b00      	cmp	r3, #0
    7864:	d100      	bne.n	7868 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7866:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7868:	bf00      	nop
    786a:	b003      	add	sp, #12
    786c:	f85d fb04 	ldr.w	pc, [sp], #4
    7870:	1fff8d5c 	.word	0x1fff8d5c
    7874:	1fff8d58 	.word	0x1fff8d58

00007878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    7878:	b500      	push	{lr}
    787a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    787c:	f7f9 fdf2 	bl	1464 <Sys_GetCoreID>
    7880:	4603      	mov	r3, r0
    7882:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    7884:	4a10      	ldr	r2, [pc, #64]	; (78c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    7886:	9b01      	ldr	r3, [sp, #4]
    7888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    788c:	2b00      	cmp	r3, #0
    788e:	d10d      	bne.n	78ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7890:	f7f9 f950 	bl	b34 <Port_schm_read_msr>
    7894:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7896:	9b00      	ldr	r3, [sp, #0]
    7898:	f003 0301 	and.w	r3, r3, #1
    789c:	2b00      	cmp	r3, #0
    789e:	d100      	bne.n	78a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    78a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    78a2:	490a      	ldr	r1, [pc, #40]	; (78cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    78a4:	9b01      	ldr	r3, [sp, #4]
    78a6:	9a00      	ldr	r2, [sp, #0]
    78a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    78ac:	4a06      	ldr	r2, [pc, #24]	; (78c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    78ae:	9b01      	ldr	r3, [sp, #4]
    78b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78b4:	1c5a      	adds	r2, r3, #1
    78b6:	4904      	ldr	r1, [pc, #16]	; (78c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    78b8:	9b01      	ldr	r3, [sp, #4]
    78ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78be:	bf00      	nop
    78c0:	b003      	add	sp, #12
    78c2:	f85d fb04 	ldr.w	pc, [sp], #4
    78c6:	bf00      	nop
    78c8:	1fff8d64 	.word	0x1fff8d64
    78cc:	1fff8d60 	.word	0x1fff8d60

000078d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    78d0:	b500      	push	{lr}
    78d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78d4:	f7f9 fdc6 	bl	1464 <Sys_GetCoreID>
    78d8:	4603      	mov	r3, r0
    78da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    78dc:	4a0d      	ldr	r2, [pc, #52]	; (7914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    78de:	9b01      	ldr	r3, [sp, #4]
    78e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e4:	1e5a      	subs	r2, r3, #1
    78e6:	490b      	ldr	r1, [pc, #44]	; (7914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    78e8:	9b01      	ldr	r3, [sp, #4]
    78ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    78ee:	4a0a      	ldr	r2, [pc, #40]	; (7918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    78f0:	9b01      	ldr	r3, [sp, #4]
    78f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f6:	f003 0301 	and.w	r3, r3, #1
    78fa:	2b00      	cmp	r3, #0
    78fc:	d106      	bne.n	790c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    78fe:	4a05      	ldr	r2, [pc, #20]	; (7914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    7900:	9b01      	ldr	r3, [sp, #4]
    7902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7906:	2b00      	cmp	r3, #0
    7908:	d100      	bne.n	790c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    790a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    790c:	bf00      	nop
    790e:	b003      	add	sp, #12
    7910:	f85d fb04 	ldr.w	pc, [sp], #4
    7914:	1fff8d64 	.word	0x1fff8d64
    7918:	1fff8d60 	.word	0x1fff8d60

0000791c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    791c:	b500      	push	{lr}
    791e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7920:	f7f9 fda0 	bl	1464 <Sys_GetCoreID>
    7924:	4603      	mov	r3, r0
    7926:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    7928:	4a10      	ldr	r2, [pc, #64]	; (796c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    792a:	9b01      	ldr	r3, [sp, #4]
    792c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7930:	2b00      	cmp	r3, #0
    7932:	d10d      	bne.n	7950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7934:	f7f9 f8fe 	bl	b34 <Port_schm_read_msr>
    7938:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    793a:	9b00      	ldr	r3, [sp, #0]
    793c:	f003 0301 	and.w	r3, r3, #1
    7940:	2b00      	cmp	r3, #0
    7942:	d100      	bne.n	7946 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7944:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    7946:	490a      	ldr	r1, [pc, #40]	; (7970 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    7948:	9b01      	ldr	r3, [sp, #4]
    794a:	9a00      	ldr	r2, [sp, #0]
    794c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    7950:	4a06      	ldr	r2, [pc, #24]	; (796c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    7952:	9b01      	ldr	r3, [sp, #4]
    7954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7958:	1c5a      	adds	r2, r3, #1
    795a:	4904      	ldr	r1, [pc, #16]	; (796c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    795c:	9b01      	ldr	r3, [sp, #4]
    795e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7962:	bf00      	nop
    7964:	b003      	add	sp, #12
    7966:	f85d fb04 	ldr.w	pc, [sp], #4
    796a:	bf00      	nop
    796c:	1fff8d6c 	.word	0x1fff8d6c
    7970:	1fff8d68 	.word	0x1fff8d68

00007974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    7974:	b500      	push	{lr}
    7976:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7978:	f7f9 fd74 	bl	1464 <Sys_GetCoreID>
    797c:	4603      	mov	r3, r0
    797e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    7980:	4a0d      	ldr	r2, [pc, #52]	; (79b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7982:	9b01      	ldr	r3, [sp, #4]
    7984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7988:	1e5a      	subs	r2, r3, #1
    798a:	490b      	ldr	r1, [pc, #44]	; (79b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    798c:	9b01      	ldr	r3, [sp, #4]
    798e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    7992:	4a0a      	ldr	r2, [pc, #40]	; (79bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    7994:	9b01      	ldr	r3, [sp, #4]
    7996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    799a:	f003 0301 	and.w	r3, r3, #1
    799e:	2b00      	cmp	r3, #0
    79a0:	d106      	bne.n	79b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    79a2:	4a05      	ldr	r2, [pc, #20]	; (79b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    79a4:	9b01      	ldr	r3, [sp, #4]
    79a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79aa:	2b00      	cmp	r3, #0
    79ac:	d100      	bne.n	79b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    79ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    79b0:	bf00      	nop
    79b2:	b003      	add	sp, #12
    79b4:	f85d fb04 	ldr.w	pc, [sp], #4
    79b8:	1fff8d6c 	.word	0x1fff8d6c
    79bc:	1fff8d68 	.word	0x1fff8d68

000079c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    79c0:	b500      	push	{lr}
    79c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79c4:	f7f9 fd4e 	bl	1464 <Sys_GetCoreID>
    79c8:	4603      	mov	r3, r0
    79ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    79cc:	4a10      	ldr	r2, [pc, #64]	; (7a10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    79ce:	9b01      	ldr	r3, [sp, #4]
    79d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d4:	2b00      	cmp	r3, #0
    79d6:	d10d      	bne.n	79f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    79d8:	f7f9 f8ac 	bl	b34 <Port_schm_read_msr>
    79dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    79de:	9b00      	ldr	r3, [sp, #0]
    79e0:	f003 0301 	and.w	r3, r3, #1
    79e4:	2b00      	cmp	r3, #0
    79e6:	d100      	bne.n	79ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    79e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    79ea:	490a      	ldr	r1, [pc, #40]	; (7a14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    79ec:	9b01      	ldr	r3, [sp, #4]
    79ee:	9a00      	ldr	r2, [sp, #0]
    79f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    79f4:	4a06      	ldr	r2, [pc, #24]	; (7a10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    79f6:	9b01      	ldr	r3, [sp, #4]
    79f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79fc:	1c5a      	adds	r2, r3, #1
    79fe:	4904      	ldr	r1, [pc, #16]	; (7a10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7a00:	9b01      	ldr	r3, [sp, #4]
    7a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a06:	bf00      	nop
    7a08:	b003      	add	sp, #12
    7a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a0e:	bf00      	nop
    7a10:	1fff8d74 	.word	0x1fff8d74
    7a14:	1fff8d70 	.word	0x1fff8d70

00007a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7a18:	b500      	push	{lr}
    7a1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a1c:	f7f9 fd22 	bl	1464 <Sys_GetCoreID>
    7a20:	4603      	mov	r3, r0
    7a22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    7a24:	4a0d      	ldr	r2, [pc, #52]	; (7a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7a26:	9b01      	ldr	r3, [sp, #4]
    7a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a2c:	1e5a      	subs	r2, r3, #1
    7a2e:	490b      	ldr	r1, [pc, #44]	; (7a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7a30:	9b01      	ldr	r3, [sp, #4]
    7a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    7a36:	4a0a      	ldr	r2, [pc, #40]	; (7a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    7a38:	9b01      	ldr	r3, [sp, #4]
    7a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a3e:	f003 0301 	and.w	r3, r3, #1
    7a42:	2b00      	cmp	r3, #0
    7a44:	d106      	bne.n	7a54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    7a46:	4a05      	ldr	r2, [pc, #20]	; (7a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7a48:	9b01      	ldr	r3, [sp, #4]
    7a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d100      	bne.n	7a54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a54:	bf00      	nop
    7a56:	b003      	add	sp, #12
    7a58:	f85d fb04 	ldr.w	pc, [sp], #4
    7a5c:	1fff8d74 	.word	0x1fff8d74
    7a60:	1fff8d70 	.word	0x1fff8d70

00007a64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7a64:	b500      	push	{lr}
    7a66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a68:	f7f9 fcfc 	bl	1464 <Sys_GetCoreID>
    7a6c:	4603      	mov	r3, r0
    7a6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    7a70:	4a10      	ldr	r2, [pc, #64]	; (7ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7a72:	9b01      	ldr	r3, [sp, #4]
    7a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d10d      	bne.n	7a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a7c:	f7f9 f85a 	bl	b34 <Port_schm_read_msr>
    7a80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a82:	9b00      	ldr	r3, [sp, #0]
    7a84:	f003 0301 	and.w	r3, r3, #1
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d100      	bne.n	7a8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    7a8e:	490a      	ldr	r1, [pc, #40]	; (7ab8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    7a90:	9b01      	ldr	r3, [sp, #4]
    7a92:	9a00      	ldr	r2, [sp, #0]
    7a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    7a98:	4a06      	ldr	r2, [pc, #24]	; (7ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7a9a:	9b01      	ldr	r3, [sp, #4]
    7a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aa0:	1c5a      	adds	r2, r3, #1
    7aa2:	4904      	ldr	r1, [pc, #16]	; (7ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7aa4:	9b01      	ldr	r3, [sp, #4]
    7aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7aaa:	bf00      	nop
    7aac:	b003      	add	sp, #12
    7aae:	f85d fb04 	ldr.w	pc, [sp], #4
    7ab2:	bf00      	nop
    7ab4:	1fff8d7c 	.word	0x1fff8d7c
    7ab8:	1fff8d78 	.word	0x1fff8d78

00007abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7abc:	b500      	push	{lr}
    7abe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ac0:	f7f9 fcd0 	bl	1464 <Sys_GetCoreID>
    7ac4:	4603      	mov	r3, r0
    7ac6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    7ac8:	4a0d      	ldr	r2, [pc, #52]	; (7b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7aca:	9b01      	ldr	r3, [sp, #4]
    7acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ad0:	1e5a      	subs	r2, r3, #1
    7ad2:	490b      	ldr	r1, [pc, #44]	; (7b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7ad4:	9b01      	ldr	r3, [sp, #4]
    7ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    7ada:	4a0a      	ldr	r2, [pc, #40]	; (7b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    7adc:	9b01      	ldr	r3, [sp, #4]
    7ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ae2:	f003 0301 	and.w	r3, r3, #1
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d106      	bne.n	7af8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    7aea:	4a05      	ldr	r2, [pc, #20]	; (7b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7aec:	9b01      	ldr	r3, [sp, #4]
    7aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af2:	2b00      	cmp	r3, #0
    7af4:	d100      	bne.n	7af8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7af6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7af8:	bf00      	nop
    7afa:	b003      	add	sp, #12
    7afc:	f85d fb04 	ldr.w	pc, [sp], #4
    7b00:	1fff8d7c 	.word	0x1fff8d7c
    7b04:	1fff8d78 	.word	0x1fff8d78

00007b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7b08:	b500      	push	{lr}
    7b0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b0c:	f7f9 fcaa 	bl	1464 <Sys_GetCoreID>
    7b10:	4603      	mov	r3, r0
    7b12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    7b14:	4a10      	ldr	r2, [pc, #64]	; (7b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7b16:	9b01      	ldr	r3, [sp, #4]
    7b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b1c:	2b00      	cmp	r3, #0
    7b1e:	d10d      	bne.n	7b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7b20:	f7f9 f808 	bl	b34 <Port_schm_read_msr>
    7b24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b26:	9b00      	ldr	r3, [sp, #0]
    7b28:	f003 0301 	and.w	r3, r3, #1
    7b2c:	2b00      	cmp	r3, #0
    7b2e:	d100      	bne.n	7b32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    7b32:	490a      	ldr	r1, [pc, #40]	; (7b5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    7b34:	9b01      	ldr	r3, [sp, #4]
    7b36:	9a00      	ldr	r2, [sp, #0]
    7b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    7b3c:	4a06      	ldr	r2, [pc, #24]	; (7b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7b3e:	9b01      	ldr	r3, [sp, #4]
    7b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b44:	1c5a      	adds	r2, r3, #1
    7b46:	4904      	ldr	r1, [pc, #16]	; (7b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7b48:	9b01      	ldr	r3, [sp, #4]
    7b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b4e:	bf00      	nop
    7b50:	b003      	add	sp, #12
    7b52:	f85d fb04 	ldr.w	pc, [sp], #4
    7b56:	bf00      	nop
    7b58:	1fff8d84 	.word	0x1fff8d84
    7b5c:	1fff8d80 	.word	0x1fff8d80

00007b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7b60:	b500      	push	{lr}
    7b62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b64:	f7f9 fc7e 	bl	1464 <Sys_GetCoreID>
    7b68:	4603      	mov	r3, r0
    7b6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    7b6c:	4a0d      	ldr	r2, [pc, #52]	; (7ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7b6e:	9b01      	ldr	r3, [sp, #4]
    7b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b74:	1e5a      	subs	r2, r3, #1
    7b76:	490b      	ldr	r1, [pc, #44]	; (7ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7b78:	9b01      	ldr	r3, [sp, #4]
    7b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    7b7e:	4a0a      	ldr	r2, [pc, #40]	; (7ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    7b80:	9b01      	ldr	r3, [sp, #4]
    7b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b86:	f003 0301 	and.w	r3, r3, #1
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	d106      	bne.n	7b9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    7b8e:	4a05      	ldr	r2, [pc, #20]	; (7ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7b90:	9b01      	ldr	r3, [sp, #4]
    7b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b96:	2b00      	cmp	r3, #0
    7b98:	d100      	bne.n	7b9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7b9c:	bf00      	nop
    7b9e:	b003      	add	sp, #12
    7ba0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ba4:	1fff8d84 	.word	0x1fff8d84
    7ba8:	1fff8d80 	.word	0x1fff8d80

00007bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7bac:	b500      	push	{lr}
    7bae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7bb0:	f7f9 fc58 	bl	1464 <Sys_GetCoreID>
    7bb4:	4603      	mov	r3, r0
    7bb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    7bb8:	4a10      	ldr	r2, [pc, #64]	; (7bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7bba:	9b01      	ldr	r3, [sp, #4]
    7bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	d10d      	bne.n	7be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7bc4:	f7f8 ffb6 	bl	b34 <Port_schm_read_msr>
    7bc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7bca:	9b00      	ldr	r3, [sp, #0]
    7bcc:	f003 0301 	and.w	r3, r3, #1
    7bd0:	2b00      	cmp	r3, #0
    7bd2:	d100      	bne.n	7bd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7bd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    7bd6:	490a      	ldr	r1, [pc, #40]	; (7c00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    7bd8:	9b01      	ldr	r3, [sp, #4]
    7bda:	9a00      	ldr	r2, [sp, #0]
    7bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    7be0:	4a06      	ldr	r2, [pc, #24]	; (7bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7be2:	9b01      	ldr	r3, [sp, #4]
    7be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7be8:	1c5a      	adds	r2, r3, #1
    7bea:	4904      	ldr	r1, [pc, #16]	; (7bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7bec:	9b01      	ldr	r3, [sp, #4]
    7bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7bf2:	bf00      	nop
    7bf4:	b003      	add	sp, #12
    7bf6:	f85d fb04 	ldr.w	pc, [sp], #4
    7bfa:	bf00      	nop
    7bfc:	1fff8d8c 	.word	0x1fff8d8c
    7c00:	1fff8d88 	.word	0x1fff8d88

00007c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7c04:	b500      	push	{lr}
    7c06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c08:	f7f9 fc2c 	bl	1464 <Sys_GetCoreID>
    7c0c:	4603      	mov	r3, r0
    7c0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    7c10:	4a0d      	ldr	r2, [pc, #52]	; (7c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7c12:	9b01      	ldr	r3, [sp, #4]
    7c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c18:	1e5a      	subs	r2, r3, #1
    7c1a:	490b      	ldr	r1, [pc, #44]	; (7c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7c1c:	9b01      	ldr	r3, [sp, #4]
    7c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    7c22:	4a0a      	ldr	r2, [pc, #40]	; (7c4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    7c24:	9b01      	ldr	r3, [sp, #4]
    7c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c2a:	f003 0301 	and.w	r3, r3, #1
    7c2e:	2b00      	cmp	r3, #0
    7c30:	d106      	bne.n	7c40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    7c32:	4a05      	ldr	r2, [pc, #20]	; (7c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7c34:	9b01      	ldr	r3, [sp, #4]
    7c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	d100      	bne.n	7c40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7c3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7c40:	bf00      	nop
    7c42:	b003      	add	sp, #12
    7c44:	f85d fb04 	ldr.w	pc, [sp], #4
    7c48:	1fff8d8c 	.word	0x1fff8d8c
    7c4c:	1fff8d88 	.word	0x1fff8d88

00007c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7c50:	b500      	push	{lr}
    7c52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c54:	f7f9 fc06 	bl	1464 <Sys_GetCoreID>
    7c58:	4603      	mov	r3, r0
    7c5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    7c5c:	4a10      	ldr	r2, [pc, #64]	; (7ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7c5e:	9b01      	ldr	r3, [sp, #4]
    7c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c64:	2b00      	cmp	r3, #0
    7c66:	d10d      	bne.n	7c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7c68:	f7f8 ff64 	bl	b34 <Port_schm_read_msr>
    7c6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7c6e:	9b00      	ldr	r3, [sp, #0]
    7c70:	f003 0301 	and.w	r3, r3, #1
    7c74:	2b00      	cmp	r3, #0
    7c76:	d100      	bne.n	7c7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7c78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    7c7a:	490a      	ldr	r1, [pc, #40]	; (7ca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    7c7c:	9b01      	ldr	r3, [sp, #4]
    7c7e:	9a00      	ldr	r2, [sp, #0]
    7c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    7c84:	4a06      	ldr	r2, [pc, #24]	; (7ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7c86:	9b01      	ldr	r3, [sp, #4]
    7c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c8c:	1c5a      	adds	r2, r3, #1
    7c8e:	4904      	ldr	r1, [pc, #16]	; (7ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7c90:	9b01      	ldr	r3, [sp, #4]
    7c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c96:	bf00      	nop
    7c98:	b003      	add	sp, #12
    7c9a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c9e:	bf00      	nop
    7ca0:	1fff8d94 	.word	0x1fff8d94
    7ca4:	1fff8d90 	.word	0x1fff8d90

00007ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7ca8:	b500      	push	{lr}
    7caa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7cac:	f7f9 fbda 	bl	1464 <Sys_GetCoreID>
    7cb0:	4603      	mov	r3, r0
    7cb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    7cb4:	4a0d      	ldr	r2, [pc, #52]	; (7cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7cb6:	9b01      	ldr	r3, [sp, #4]
    7cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cbc:	1e5a      	subs	r2, r3, #1
    7cbe:	490b      	ldr	r1, [pc, #44]	; (7cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7cc0:	9b01      	ldr	r3, [sp, #4]
    7cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    7cc6:	4a0a      	ldr	r2, [pc, #40]	; (7cf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    7cc8:	9b01      	ldr	r3, [sp, #4]
    7cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cce:	f003 0301 	and.w	r3, r3, #1
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	d106      	bne.n	7ce4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    7cd6:	4a05      	ldr	r2, [pc, #20]	; (7cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7cd8:	9b01      	ldr	r3, [sp, #4]
    7cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d100      	bne.n	7ce4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ce4:	bf00      	nop
    7ce6:	b003      	add	sp, #12
    7ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    7cec:	1fff8d94 	.word	0x1fff8d94
    7cf0:	1fff8d90 	.word	0x1fff8d90

00007cf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7cf4:	b500      	push	{lr}
    7cf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7cf8:	f7f9 fbb4 	bl	1464 <Sys_GetCoreID>
    7cfc:	4603      	mov	r3, r0
    7cfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    7d00:	4a10      	ldr	r2, [pc, #64]	; (7d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7d02:	9b01      	ldr	r3, [sp, #4]
    7d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d08:	2b00      	cmp	r3, #0
    7d0a:	d10d      	bne.n	7d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7d0c:	f7f8 ff12 	bl	b34 <Port_schm_read_msr>
    7d10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7d12:	9b00      	ldr	r3, [sp, #0]
    7d14:	f003 0301 	and.w	r3, r3, #1
    7d18:	2b00      	cmp	r3, #0
    7d1a:	d100      	bne.n	7d1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7d1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    7d1e:	490a      	ldr	r1, [pc, #40]	; (7d48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    7d20:	9b01      	ldr	r3, [sp, #4]
    7d22:	9a00      	ldr	r2, [sp, #0]
    7d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7d28:	4a06      	ldr	r2, [pc, #24]	; (7d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7d2a:	9b01      	ldr	r3, [sp, #4]
    7d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d30:	1c5a      	adds	r2, r3, #1
    7d32:	4904      	ldr	r1, [pc, #16]	; (7d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7d34:	9b01      	ldr	r3, [sp, #4]
    7d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d3a:	bf00      	nop
    7d3c:	b003      	add	sp, #12
    7d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    7d42:	bf00      	nop
    7d44:	1fff8d9c 	.word	0x1fff8d9c
    7d48:	1fff8d98 	.word	0x1fff8d98

00007d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7d4c:	b500      	push	{lr}
    7d4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d50:	f7f9 fb88 	bl	1464 <Sys_GetCoreID>
    7d54:	4603      	mov	r3, r0
    7d56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    7d58:	4a0d      	ldr	r2, [pc, #52]	; (7d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7d5a:	9b01      	ldr	r3, [sp, #4]
    7d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d60:	1e5a      	subs	r2, r3, #1
    7d62:	490b      	ldr	r1, [pc, #44]	; (7d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7d64:	9b01      	ldr	r3, [sp, #4]
    7d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    7d6a:	4a0a      	ldr	r2, [pc, #40]	; (7d94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    7d6c:	9b01      	ldr	r3, [sp, #4]
    7d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d72:	f003 0301 	and.w	r3, r3, #1
    7d76:	2b00      	cmp	r3, #0
    7d78:	d106      	bne.n	7d88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    7d7a:	4a05      	ldr	r2, [pc, #20]	; (7d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7d7c:	9b01      	ldr	r3, [sp, #4]
    7d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d82:	2b00      	cmp	r3, #0
    7d84:	d100      	bne.n	7d88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7d86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7d88:	bf00      	nop
    7d8a:	b003      	add	sp, #12
    7d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    7d90:	1fff8d9c 	.word	0x1fff8d9c
    7d94:	1fff8d98 	.word	0x1fff8d98

00007d98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7d98:	b500      	push	{lr}
    7d9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d9c:	f7f9 fb62 	bl	1464 <Sys_GetCoreID>
    7da0:	4603      	mov	r3, r0
    7da2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    7da4:	4a10      	ldr	r2, [pc, #64]	; (7de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7da6:	9b01      	ldr	r3, [sp, #4]
    7da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dac:	2b00      	cmp	r3, #0
    7dae:	d10d      	bne.n	7dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7db0:	f7f8 fec0 	bl	b34 <Port_schm_read_msr>
    7db4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7db6:	9b00      	ldr	r3, [sp, #0]
    7db8:	f003 0301 	and.w	r3, r3, #1
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	d100      	bne.n	7dc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7dc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    7dc2:	490a      	ldr	r1, [pc, #40]	; (7dec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    7dc4:	9b01      	ldr	r3, [sp, #4]
    7dc6:	9a00      	ldr	r2, [sp, #0]
    7dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    7dcc:	4a06      	ldr	r2, [pc, #24]	; (7de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7dce:	9b01      	ldr	r3, [sp, #4]
    7dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dd4:	1c5a      	adds	r2, r3, #1
    7dd6:	4904      	ldr	r1, [pc, #16]	; (7de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7dd8:	9b01      	ldr	r3, [sp, #4]
    7dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dde:	bf00      	nop
    7de0:	b003      	add	sp, #12
    7de2:	f85d fb04 	ldr.w	pc, [sp], #4
    7de6:	bf00      	nop
    7de8:	1fff8da4 	.word	0x1fff8da4
    7dec:	1fff8da0 	.word	0x1fff8da0

00007df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7df0:	b500      	push	{lr}
    7df2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7df4:	f7f9 fb36 	bl	1464 <Sys_GetCoreID>
    7df8:	4603      	mov	r3, r0
    7dfa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    7dfc:	4a0d      	ldr	r2, [pc, #52]	; (7e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7dfe:	9b01      	ldr	r3, [sp, #4]
    7e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e04:	1e5a      	subs	r2, r3, #1
    7e06:	490b      	ldr	r1, [pc, #44]	; (7e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7e08:	9b01      	ldr	r3, [sp, #4]
    7e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    7e0e:	4a0a      	ldr	r2, [pc, #40]	; (7e38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    7e10:	9b01      	ldr	r3, [sp, #4]
    7e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e16:	f003 0301 	and.w	r3, r3, #1
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d106      	bne.n	7e2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    7e1e:	4a05      	ldr	r2, [pc, #20]	; (7e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7e20:	9b01      	ldr	r3, [sp, #4]
    7e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e26:	2b00      	cmp	r3, #0
    7e28:	d100      	bne.n	7e2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7e2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7e2c:	bf00      	nop
    7e2e:	b003      	add	sp, #12
    7e30:	f85d fb04 	ldr.w	pc, [sp], #4
    7e34:	1fff8da4 	.word	0x1fff8da4
    7e38:	1fff8da0 	.word	0x1fff8da0

00007e3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7e3c:	b500      	push	{lr}
    7e3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e40:	f7f9 fb10 	bl	1464 <Sys_GetCoreID>
    7e44:	4603      	mov	r3, r0
    7e46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    7e48:	4a10      	ldr	r2, [pc, #64]	; (7e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7e4a:	9b01      	ldr	r3, [sp, #4]
    7e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e50:	2b00      	cmp	r3, #0
    7e52:	d10d      	bne.n	7e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7e54:	f7f8 fe6e 	bl	b34 <Port_schm_read_msr>
    7e58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7e5a:	9b00      	ldr	r3, [sp, #0]
    7e5c:	f003 0301 	and.w	r3, r3, #1
    7e60:	2b00      	cmp	r3, #0
    7e62:	d100      	bne.n	7e66 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7e64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    7e66:	490a      	ldr	r1, [pc, #40]	; (7e90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    7e68:	9b01      	ldr	r3, [sp, #4]
    7e6a:	9a00      	ldr	r2, [sp, #0]
    7e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7e70:	4a06      	ldr	r2, [pc, #24]	; (7e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7e72:	9b01      	ldr	r3, [sp, #4]
    7e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e78:	1c5a      	adds	r2, r3, #1
    7e7a:	4904      	ldr	r1, [pc, #16]	; (7e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7e7c:	9b01      	ldr	r3, [sp, #4]
    7e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e82:	bf00      	nop
    7e84:	b003      	add	sp, #12
    7e86:	f85d fb04 	ldr.w	pc, [sp], #4
    7e8a:	bf00      	nop
    7e8c:	1fff8dac 	.word	0x1fff8dac
    7e90:	1fff8da8 	.word	0x1fff8da8

00007e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7e94:	b500      	push	{lr}
    7e96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e98:	f7f9 fae4 	bl	1464 <Sys_GetCoreID>
    7e9c:	4603      	mov	r3, r0
    7e9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7ea0:	4a0d      	ldr	r2, [pc, #52]	; (7ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7ea2:	9b01      	ldr	r3, [sp, #4]
    7ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ea8:	1e5a      	subs	r2, r3, #1
    7eaa:	490b      	ldr	r1, [pc, #44]	; (7ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7eac:	9b01      	ldr	r3, [sp, #4]
    7eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    7eb2:	4a0a      	ldr	r2, [pc, #40]	; (7edc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    7eb4:	9b01      	ldr	r3, [sp, #4]
    7eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eba:	f003 0301 	and.w	r3, r3, #1
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d106      	bne.n	7ed0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    7ec2:	4a05      	ldr	r2, [pc, #20]	; (7ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d100      	bne.n	7ed0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ed0:	bf00      	nop
    7ed2:	b003      	add	sp, #12
    7ed4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ed8:	1fff8dac 	.word	0x1fff8dac
    7edc:	1fff8da8 	.word	0x1fff8da8

00007ee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7ee0:	b500      	push	{lr}
    7ee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ee4:	f7f9 fabe 	bl	1464 <Sys_GetCoreID>
    7ee8:	4603      	mov	r3, r0
    7eea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    7eec:	4a10      	ldr	r2, [pc, #64]	; (7f30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7eee:	9b01      	ldr	r3, [sp, #4]
    7ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	d10d      	bne.n	7f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ef8:	f7f8 fe1c 	bl	b34 <Port_schm_read_msr>
    7efc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7efe:	9b00      	ldr	r3, [sp, #0]
    7f00:	f003 0301 	and.w	r3, r3, #1
    7f04:	2b00      	cmp	r3, #0
    7f06:	d100      	bne.n	7f0a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7f08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    7f0a:	490a      	ldr	r1, [pc, #40]	; (7f34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    7f0c:	9b01      	ldr	r3, [sp, #4]
    7f0e:	9a00      	ldr	r2, [sp, #0]
    7f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    7f14:	4a06      	ldr	r2, [pc, #24]	; (7f30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7f16:	9b01      	ldr	r3, [sp, #4]
    7f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f1c:	1c5a      	adds	r2, r3, #1
    7f1e:	4904      	ldr	r1, [pc, #16]	; (7f30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7f20:	9b01      	ldr	r3, [sp, #4]
    7f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7f26:	bf00      	nop
    7f28:	b003      	add	sp, #12
    7f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    7f2e:	bf00      	nop
    7f30:	1fff8db4 	.word	0x1fff8db4
    7f34:	1fff8db0 	.word	0x1fff8db0

00007f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7f38:	b500      	push	{lr}
    7f3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f3c:	f7f9 fa92 	bl	1464 <Sys_GetCoreID>
    7f40:	4603      	mov	r3, r0
    7f42:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    7f44:	4a0d      	ldr	r2, [pc, #52]	; (7f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7f46:	9b01      	ldr	r3, [sp, #4]
    7f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f4c:	1e5a      	subs	r2, r3, #1
    7f4e:	490b      	ldr	r1, [pc, #44]	; (7f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7f50:	9b01      	ldr	r3, [sp, #4]
    7f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    7f56:	4a0a      	ldr	r2, [pc, #40]	; (7f80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    7f58:	9b01      	ldr	r3, [sp, #4]
    7f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f5e:	f003 0301 	and.w	r3, r3, #1
    7f62:	2b00      	cmp	r3, #0
    7f64:	d106      	bne.n	7f74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    7f66:	4a05      	ldr	r2, [pc, #20]	; (7f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7f68:	9b01      	ldr	r3, [sp, #4]
    7f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f6e:	2b00      	cmp	r3, #0
    7f70:	d100      	bne.n	7f74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7f72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7f74:	bf00      	nop
    7f76:	b003      	add	sp, #12
    7f78:	f85d fb04 	ldr.w	pc, [sp], #4
    7f7c:	1fff8db4 	.word	0x1fff8db4
    7f80:	1fff8db0 	.word	0x1fff8db0

00007f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7f84:	b500      	push	{lr}
    7f86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f88:	f7f9 fa6c 	bl	1464 <Sys_GetCoreID>
    7f8c:	4603      	mov	r3, r0
    7f8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7f90:	4a10      	ldr	r2, [pc, #64]	; (7fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7f92:	9b01      	ldr	r3, [sp, #4]
    7f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f98:	2b00      	cmp	r3, #0
    7f9a:	d10d      	bne.n	7fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7f9c:	f7f8 fdca 	bl	b34 <Port_schm_read_msr>
    7fa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7fa2:	9b00      	ldr	r3, [sp, #0]
    7fa4:	f003 0301 	and.w	r3, r3, #1
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d100      	bne.n	7fae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7fac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7fae:	490a      	ldr	r1, [pc, #40]	; (7fd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7fb0:	9b01      	ldr	r3, [sp, #4]
    7fb2:	9a00      	ldr	r2, [sp, #0]
    7fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    7fb8:	4a06      	ldr	r2, [pc, #24]	; (7fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7fba:	9b01      	ldr	r3, [sp, #4]
    7fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fc0:	1c5a      	adds	r2, r3, #1
    7fc2:	4904      	ldr	r1, [pc, #16]	; (7fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7fc4:	9b01      	ldr	r3, [sp, #4]
    7fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7fca:	bf00      	nop
    7fcc:	b003      	add	sp, #12
    7fce:	f85d fb04 	ldr.w	pc, [sp], #4
    7fd2:	bf00      	nop
    7fd4:	1fff8dbc 	.word	0x1fff8dbc
    7fd8:	1fff8db8 	.word	0x1fff8db8

00007fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7fdc:	b500      	push	{lr}
    7fde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7fe0:	f7f9 fa40 	bl	1464 <Sys_GetCoreID>
    7fe4:	4603      	mov	r3, r0
    7fe6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    7fe8:	4a0d      	ldr	r2, [pc, #52]	; (8020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7fea:	9b01      	ldr	r3, [sp, #4]
    7fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ff0:	1e5a      	subs	r2, r3, #1
    7ff2:	490b      	ldr	r1, [pc, #44]	; (8020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7ff4:	9b01      	ldr	r3, [sp, #4]
    7ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    7ffa:	4a0a      	ldr	r2, [pc, #40]	; (8024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    7ffc:	9b01      	ldr	r3, [sp, #4]
    7ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8002:	f003 0301 	and.w	r3, r3, #1
    8006:	2b00      	cmp	r3, #0
    8008:	d106      	bne.n	8018 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    800a:	4a05      	ldr	r2, [pc, #20]	; (8020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    800c:	9b01      	ldr	r3, [sp, #4]
    800e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8012:	2b00      	cmp	r3, #0
    8014:	d100      	bne.n	8018 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8018:	bf00      	nop
    801a:	b003      	add	sp, #12
    801c:	f85d fb04 	ldr.w	pc, [sp], #4
    8020:	1fff8dbc 	.word	0x1fff8dbc
    8024:	1fff8db8 	.word	0x1fff8db8

00008028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    8028:	b500      	push	{lr}
    802a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    802c:	f7f9 fa1a 	bl	1464 <Sys_GetCoreID>
    8030:	4603      	mov	r3, r0
    8032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    8034:	4a10      	ldr	r2, [pc, #64]	; (8078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    8036:	9b01      	ldr	r3, [sp, #4]
    8038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    803c:	2b00      	cmp	r3, #0
    803e:	d10d      	bne.n	805c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8040:	f7f8 fd78 	bl	b34 <Port_schm_read_msr>
    8044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8046:	9b00      	ldr	r3, [sp, #0]
    8048:	f003 0301 	and.w	r3, r3, #1
    804c:	2b00      	cmp	r3, #0
    804e:	d100      	bne.n	8052 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    8052:	490a      	ldr	r1, [pc, #40]	; (807c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    8054:	9b01      	ldr	r3, [sp, #4]
    8056:	9a00      	ldr	r2, [sp, #0]
    8058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    805c:	4a06      	ldr	r2, [pc, #24]	; (8078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    805e:	9b01      	ldr	r3, [sp, #4]
    8060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8064:	1c5a      	adds	r2, r3, #1
    8066:	4904      	ldr	r1, [pc, #16]	; (8078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    8068:	9b01      	ldr	r3, [sp, #4]
    806a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    806e:	bf00      	nop
    8070:	b003      	add	sp, #12
    8072:	f85d fb04 	ldr.w	pc, [sp], #4
    8076:	bf00      	nop
    8078:	1fff8dc4 	.word	0x1fff8dc4
    807c:	1fff8dc0 	.word	0x1fff8dc0

00008080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    8080:	b500      	push	{lr}
    8082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8084:	f7f9 f9ee 	bl	1464 <Sys_GetCoreID>
    8088:	4603      	mov	r3, r0
    808a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    808c:	4a0d      	ldr	r2, [pc, #52]	; (80c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    808e:	9b01      	ldr	r3, [sp, #4]
    8090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8094:	1e5a      	subs	r2, r3, #1
    8096:	490b      	ldr	r1, [pc, #44]	; (80c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    8098:	9b01      	ldr	r3, [sp, #4]
    809a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    809e:	4a0a      	ldr	r2, [pc, #40]	; (80c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    80a0:	9b01      	ldr	r3, [sp, #4]
    80a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80a6:	f003 0301 	and.w	r3, r3, #1
    80aa:	2b00      	cmp	r3, #0
    80ac:	d106      	bne.n	80bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    80ae:	4a05      	ldr	r2, [pc, #20]	; (80c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    80b0:	9b01      	ldr	r3, [sp, #4]
    80b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80b6:	2b00      	cmp	r3, #0
    80b8:	d100      	bne.n	80bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    80ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    80bc:	bf00      	nop
    80be:	b003      	add	sp, #12
    80c0:	f85d fb04 	ldr.w	pc, [sp], #4
    80c4:	1fff8dc4 	.word	0x1fff8dc4
    80c8:	1fff8dc0 	.word	0x1fff8dc0

000080cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    80cc:	b500      	push	{lr}
    80ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80d0:	f7f9 f9c8 	bl	1464 <Sys_GetCoreID>
    80d4:	4603      	mov	r3, r0
    80d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    80d8:	4a10      	ldr	r2, [pc, #64]	; (811c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    80da:	9b01      	ldr	r3, [sp, #4]
    80dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80e0:	2b00      	cmp	r3, #0
    80e2:	d10d      	bne.n	8100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    80e4:	f7f8 fd26 	bl	b34 <Port_schm_read_msr>
    80e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    80ea:	9b00      	ldr	r3, [sp, #0]
    80ec:	f003 0301 	and.w	r3, r3, #1
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    80f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    80f6:	490a      	ldr	r1, [pc, #40]	; (8120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    80f8:	9b01      	ldr	r3, [sp, #4]
    80fa:	9a00      	ldr	r2, [sp, #0]
    80fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    8100:	4a06      	ldr	r2, [pc, #24]	; (811c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    8102:	9b01      	ldr	r3, [sp, #4]
    8104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8108:	1c5a      	adds	r2, r3, #1
    810a:	4904      	ldr	r1, [pc, #16]	; (811c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    810c:	9b01      	ldr	r3, [sp, #4]
    810e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8112:	bf00      	nop
    8114:	b003      	add	sp, #12
    8116:	f85d fb04 	ldr.w	pc, [sp], #4
    811a:	bf00      	nop
    811c:	1fff8dcc 	.word	0x1fff8dcc
    8120:	1fff8dc8 	.word	0x1fff8dc8

00008124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    8124:	b500      	push	{lr}
    8126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8128:	f7f9 f99c 	bl	1464 <Sys_GetCoreID>
    812c:	4603      	mov	r3, r0
    812e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    8130:	4a0d      	ldr	r2, [pc, #52]	; (8168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    8132:	9b01      	ldr	r3, [sp, #4]
    8134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8138:	1e5a      	subs	r2, r3, #1
    813a:	490b      	ldr	r1, [pc, #44]	; (8168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    813c:	9b01      	ldr	r3, [sp, #4]
    813e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    8142:	4a0a      	ldr	r2, [pc, #40]	; (816c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    8144:	9b01      	ldr	r3, [sp, #4]
    8146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    814a:	f003 0301 	and.w	r3, r3, #1
    814e:	2b00      	cmp	r3, #0
    8150:	d106      	bne.n	8160 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    8152:	4a05      	ldr	r2, [pc, #20]	; (8168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    8154:	9b01      	ldr	r3, [sp, #4]
    8156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    815a:	2b00      	cmp	r3, #0
    815c:	d100      	bne.n	8160 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    815e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8160:	bf00      	nop
    8162:	b003      	add	sp, #12
    8164:	f85d fb04 	ldr.w	pc, [sp], #4
    8168:	1fff8dcc 	.word	0x1fff8dcc
    816c:	1fff8dc8 	.word	0x1fff8dc8

00008170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    8170:	b500      	push	{lr}
    8172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8174:	f7f9 f976 	bl	1464 <Sys_GetCoreID>
    8178:	4603      	mov	r3, r0
    817a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    817c:	4a10      	ldr	r2, [pc, #64]	; (81c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    817e:	9b01      	ldr	r3, [sp, #4]
    8180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8184:	2b00      	cmp	r3, #0
    8186:	d10d      	bne.n	81a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8188:	f7f8 fcd4 	bl	b34 <Port_schm_read_msr>
    818c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    818e:	9b00      	ldr	r3, [sp, #0]
    8190:	f003 0301 	and.w	r3, r3, #1
    8194:	2b00      	cmp	r3, #0
    8196:	d100      	bne.n	819a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    819a:	490a      	ldr	r1, [pc, #40]	; (81c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    819c:	9b01      	ldr	r3, [sp, #4]
    819e:	9a00      	ldr	r2, [sp, #0]
    81a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    81a4:	4a06      	ldr	r2, [pc, #24]	; (81c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    81a6:	9b01      	ldr	r3, [sp, #4]
    81a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ac:	1c5a      	adds	r2, r3, #1
    81ae:	4904      	ldr	r1, [pc, #16]	; (81c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    81b0:	9b01      	ldr	r3, [sp, #4]
    81b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81b6:	bf00      	nop
    81b8:	b003      	add	sp, #12
    81ba:	f85d fb04 	ldr.w	pc, [sp], #4
    81be:	bf00      	nop
    81c0:	1fff8dd4 	.word	0x1fff8dd4
    81c4:	1fff8dd0 	.word	0x1fff8dd0

000081c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    81c8:	b500      	push	{lr}
    81ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81cc:	f7f9 f94a 	bl	1464 <Sys_GetCoreID>
    81d0:	4603      	mov	r3, r0
    81d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    81d4:	4a0d      	ldr	r2, [pc, #52]	; (820c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    81d6:	9b01      	ldr	r3, [sp, #4]
    81d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81dc:	1e5a      	subs	r2, r3, #1
    81de:	490b      	ldr	r1, [pc, #44]	; (820c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    81e0:	9b01      	ldr	r3, [sp, #4]
    81e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    81e6:	4a0a      	ldr	r2, [pc, #40]	; (8210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    81e8:	9b01      	ldr	r3, [sp, #4]
    81ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ee:	f003 0301 	and.w	r3, r3, #1
    81f2:	2b00      	cmp	r3, #0
    81f4:	d106      	bne.n	8204 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    81f6:	4a05      	ldr	r2, [pc, #20]	; (820c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    81f8:	9b01      	ldr	r3, [sp, #4]
    81fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81fe:	2b00      	cmp	r3, #0
    8200:	d100      	bne.n	8204 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8204:	bf00      	nop
    8206:	b003      	add	sp, #12
    8208:	f85d fb04 	ldr.w	pc, [sp], #4
    820c:	1fff8dd4 	.word	0x1fff8dd4
    8210:	1fff8dd0 	.word	0x1fff8dd0

00008214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    8214:	b500      	push	{lr}
    8216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8218:	f7f9 f924 	bl	1464 <Sys_GetCoreID>
    821c:	4603      	mov	r3, r0
    821e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    8220:	4a10      	ldr	r2, [pc, #64]	; (8264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    8222:	9b01      	ldr	r3, [sp, #4]
    8224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8228:	2b00      	cmp	r3, #0
    822a:	d10d      	bne.n	8248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    822c:	f7f8 fc82 	bl	b34 <Port_schm_read_msr>
    8230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8232:	9b00      	ldr	r3, [sp, #0]
    8234:	f003 0301 	and.w	r3, r3, #1
    8238:	2b00      	cmp	r3, #0
    823a:	d100      	bne.n	823e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    823c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    823e:	490a      	ldr	r1, [pc, #40]	; (8268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    8240:	9b01      	ldr	r3, [sp, #4]
    8242:	9a00      	ldr	r2, [sp, #0]
    8244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    8248:	4a06      	ldr	r2, [pc, #24]	; (8264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    824a:	9b01      	ldr	r3, [sp, #4]
    824c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8250:	1c5a      	adds	r2, r3, #1
    8252:	4904      	ldr	r1, [pc, #16]	; (8264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    8254:	9b01      	ldr	r3, [sp, #4]
    8256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    825a:	bf00      	nop
    825c:	b003      	add	sp, #12
    825e:	f85d fb04 	ldr.w	pc, [sp], #4
    8262:	bf00      	nop
    8264:	1fff8ddc 	.word	0x1fff8ddc
    8268:	1fff8dd8 	.word	0x1fff8dd8

0000826c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    826c:	b500      	push	{lr}
    826e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8270:	f7f9 f8f8 	bl	1464 <Sys_GetCoreID>
    8274:	4603      	mov	r3, r0
    8276:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    8278:	4a0d      	ldr	r2, [pc, #52]	; (82b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    827a:	9b01      	ldr	r3, [sp, #4]
    827c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8280:	1e5a      	subs	r2, r3, #1
    8282:	490b      	ldr	r1, [pc, #44]	; (82b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    8284:	9b01      	ldr	r3, [sp, #4]
    8286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    828a:	4a0a      	ldr	r2, [pc, #40]	; (82b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    828c:	9b01      	ldr	r3, [sp, #4]
    828e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8292:	f003 0301 	and.w	r3, r3, #1
    8296:	2b00      	cmp	r3, #0
    8298:	d106      	bne.n	82a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    829a:	4a05      	ldr	r2, [pc, #20]	; (82b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    829c:	9b01      	ldr	r3, [sp, #4]
    829e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82a2:	2b00      	cmp	r3, #0
    82a4:	d100      	bne.n	82a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    82a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    82a8:	bf00      	nop
    82aa:	b003      	add	sp, #12
    82ac:	f85d fb04 	ldr.w	pc, [sp], #4
    82b0:	1fff8ddc 	.word	0x1fff8ddc
    82b4:	1fff8dd8 	.word	0x1fff8dd8

000082b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    82b8:	b500      	push	{lr}
    82ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82bc:	f7f9 f8d2 	bl	1464 <Sys_GetCoreID>
    82c0:	4603      	mov	r3, r0
    82c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    82c4:	4a10      	ldr	r2, [pc, #64]	; (8308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    82c6:	9b01      	ldr	r3, [sp, #4]
    82c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82cc:	2b00      	cmp	r3, #0
    82ce:	d10d      	bne.n	82ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    82d0:	f7f8 fc30 	bl	b34 <Port_schm_read_msr>
    82d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    82d6:	9b00      	ldr	r3, [sp, #0]
    82d8:	f003 0301 	and.w	r3, r3, #1
    82dc:	2b00      	cmp	r3, #0
    82de:	d100      	bne.n	82e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    82e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    82e2:	490a      	ldr	r1, [pc, #40]	; (830c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    82e4:	9b01      	ldr	r3, [sp, #4]
    82e6:	9a00      	ldr	r2, [sp, #0]
    82e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    82ec:	4a06      	ldr	r2, [pc, #24]	; (8308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    82ee:	9b01      	ldr	r3, [sp, #4]
    82f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82f4:	1c5a      	adds	r2, r3, #1
    82f6:	4904      	ldr	r1, [pc, #16]	; (8308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    82f8:	9b01      	ldr	r3, [sp, #4]
    82fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82fe:	bf00      	nop
    8300:	b003      	add	sp, #12
    8302:	f85d fb04 	ldr.w	pc, [sp], #4
    8306:	bf00      	nop
    8308:	1fff8de4 	.word	0x1fff8de4
    830c:	1fff8de0 	.word	0x1fff8de0

00008310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    8310:	b500      	push	{lr}
    8312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8314:	f7f9 f8a6 	bl	1464 <Sys_GetCoreID>
    8318:	4603      	mov	r3, r0
    831a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    831c:	4a0d      	ldr	r2, [pc, #52]	; (8354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    831e:	9b01      	ldr	r3, [sp, #4]
    8320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8324:	1e5a      	subs	r2, r3, #1
    8326:	490b      	ldr	r1, [pc, #44]	; (8354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    8328:	9b01      	ldr	r3, [sp, #4]
    832a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    832e:	4a0a      	ldr	r2, [pc, #40]	; (8358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    8330:	9b01      	ldr	r3, [sp, #4]
    8332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8336:	f003 0301 	and.w	r3, r3, #1
    833a:	2b00      	cmp	r3, #0
    833c:	d106      	bne.n	834c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    833e:	4a05      	ldr	r2, [pc, #20]	; (8354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    8340:	9b01      	ldr	r3, [sp, #4]
    8342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8346:	2b00      	cmp	r3, #0
    8348:	d100      	bne.n	834c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    834a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    834c:	bf00      	nop
    834e:	b003      	add	sp, #12
    8350:	f85d fb04 	ldr.w	pc, [sp], #4
    8354:	1fff8de4 	.word	0x1fff8de4
    8358:	1fff8de0 	.word	0x1fff8de0

0000835c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    835c:	b500      	push	{lr}
    835e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8360:	f7f9 f880 	bl	1464 <Sys_GetCoreID>
    8364:	4603      	mov	r3, r0
    8366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    8368:	4a10      	ldr	r2, [pc, #64]	; (83ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    836a:	9b01      	ldr	r3, [sp, #4]
    836c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8370:	2b00      	cmp	r3, #0
    8372:	d10d      	bne.n	8390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8374:	f7f8 fbde 	bl	b34 <Port_schm_read_msr>
    8378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    837a:	9b00      	ldr	r3, [sp, #0]
    837c:	f003 0301 	and.w	r3, r3, #1
    8380:	2b00      	cmp	r3, #0
    8382:	d100      	bne.n	8386 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    8386:	490a      	ldr	r1, [pc, #40]	; (83b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    8388:	9b01      	ldr	r3, [sp, #4]
    838a:	9a00      	ldr	r2, [sp, #0]
    838c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    8390:	4a06      	ldr	r2, [pc, #24]	; (83ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    8392:	9b01      	ldr	r3, [sp, #4]
    8394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8398:	1c5a      	adds	r2, r3, #1
    839a:	4904      	ldr	r1, [pc, #16]	; (83ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    839c:	9b01      	ldr	r3, [sp, #4]
    839e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83a2:	bf00      	nop
    83a4:	b003      	add	sp, #12
    83a6:	f85d fb04 	ldr.w	pc, [sp], #4
    83aa:	bf00      	nop
    83ac:	1fff8dec 	.word	0x1fff8dec
    83b0:	1fff8de8 	.word	0x1fff8de8

000083b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    83b4:	b500      	push	{lr}
    83b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83b8:	f7f9 f854 	bl	1464 <Sys_GetCoreID>
    83bc:	4603      	mov	r3, r0
    83be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    83c0:	4a0d      	ldr	r2, [pc, #52]	; (83f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    83c2:	9b01      	ldr	r3, [sp, #4]
    83c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83c8:	1e5a      	subs	r2, r3, #1
    83ca:	490b      	ldr	r1, [pc, #44]	; (83f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    83cc:	9b01      	ldr	r3, [sp, #4]
    83ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    83d2:	4a0a      	ldr	r2, [pc, #40]	; (83fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    83d4:	9b01      	ldr	r3, [sp, #4]
    83d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83da:	f003 0301 	and.w	r3, r3, #1
    83de:	2b00      	cmp	r3, #0
    83e0:	d106      	bne.n	83f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    83e2:	4a05      	ldr	r2, [pc, #20]	; (83f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    83e4:	9b01      	ldr	r3, [sp, #4]
    83e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83ea:	2b00      	cmp	r3, #0
    83ec:	d100      	bne.n	83f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    83ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    83f0:	bf00      	nop
    83f2:	b003      	add	sp, #12
    83f4:	f85d fb04 	ldr.w	pc, [sp], #4
    83f8:	1fff8dec 	.word	0x1fff8dec
    83fc:	1fff8de8 	.word	0x1fff8de8

00008400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    8400:	b500      	push	{lr}
    8402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8404:	f7f9 f82e 	bl	1464 <Sys_GetCoreID>
    8408:	4603      	mov	r3, r0
    840a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    840c:	4a10      	ldr	r2, [pc, #64]	; (8450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    840e:	9b01      	ldr	r3, [sp, #4]
    8410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8414:	2b00      	cmp	r3, #0
    8416:	d10d      	bne.n	8434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8418:	f7f8 fb8c 	bl	b34 <Port_schm_read_msr>
    841c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    841e:	9b00      	ldr	r3, [sp, #0]
    8420:	f003 0301 	and.w	r3, r3, #1
    8424:	2b00      	cmp	r3, #0
    8426:	d100      	bne.n	842a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    842a:	490a      	ldr	r1, [pc, #40]	; (8454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    842c:	9b01      	ldr	r3, [sp, #4]
    842e:	9a00      	ldr	r2, [sp, #0]
    8430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    8434:	4a06      	ldr	r2, [pc, #24]	; (8450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    8436:	9b01      	ldr	r3, [sp, #4]
    8438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    843c:	1c5a      	adds	r2, r3, #1
    843e:	4904      	ldr	r1, [pc, #16]	; (8450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    8440:	9b01      	ldr	r3, [sp, #4]
    8442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8446:	bf00      	nop
    8448:	b003      	add	sp, #12
    844a:	f85d fb04 	ldr.w	pc, [sp], #4
    844e:	bf00      	nop
    8450:	1fff8df4 	.word	0x1fff8df4
    8454:	1fff8df0 	.word	0x1fff8df0

00008458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    8458:	b500      	push	{lr}
    845a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    845c:	f7f9 f802 	bl	1464 <Sys_GetCoreID>
    8460:	4603      	mov	r3, r0
    8462:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    8464:	4a0d      	ldr	r2, [pc, #52]	; (849c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    8466:	9b01      	ldr	r3, [sp, #4]
    8468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    846c:	1e5a      	subs	r2, r3, #1
    846e:	490b      	ldr	r1, [pc, #44]	; (849c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    8470:	9b01      	ldr	r3, [sp, #4]
    8472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    8476:	4a0a      	ldr	r2, [pc, #40]	; (84a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    8478:	9b01      	ldr	r3, [sp, #4]
    847a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    847e:	f003 0301 	and.w	r3, r3, #1
    8482:	2b00      	cmp	r3, #0
    8484:	d106      	bne.n	8494 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    8486:	4a05      	ldr	r2, [pc, #20]	; (849c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    8488:	9b01      	ldr	r3, [sp, #4]
    848a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    848e:	2b00      	cmp	r3, #0
    8490:	d100      	bne.n	8494 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8494:	bf00      	nop
    8496:	b003      	add	sp, #12
    8498:	f85d fb04 	ldr.w	pc, [sp], #4
    849c:	1fff8df4 	.word	0x1fff8df4
    84a0:	1fff8df0 	.word	0x1fff8df0

000084a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    84a4:	b500      	push	{lr}
    84a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84a8:	f7f8 ffdc 	bl	1464 <Sys_GetCoreID>
    84ac:	4603      	mov	r3, r0
    84ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    84b0:	4a10      	ldr	r2, [pc, #64]	; (84f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    84b2:	9b01      	ldr	r3, [sp, #4]
    84b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84b8:	2b00      	cmp	r3, #0
    84ba:	d10d      	bne.n	84d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    84bc:	f7f8 fb3a 	bl	b34 <Port_schm_read_msr>
    84c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    84c2:	9b00      	ldr	r3, [sp, #0]
    84c4:	f003 0301 	and.w	r3, r3, #1
    84c8:	2b00      	cmp	r3, #0
    84ca:	d100      	bne.n	84ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    84cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    84ce:	490a      	ldr	r1, [pc, #40]	; (84f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    84d0:	9b01      	ldr	r3, [sp, #4]
    84d2:	9a00      	ldr	r2, [sp, #0]
    84d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    84d8:	4a06      	ldr	r2, [pc, #24]	; (84f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    84da:	9b01      	ldr	r3, [sp, #4]
    84dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84e0:	1c5a      	adds	r2, r3, #1
    84e2:	4904      	ldr	r1, [pc, #16]	; (84f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    84e4:	9b01      	ldr	r3, [sp, #4]
    84e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    84ea:	bf00      	nop
    84ec:	b003      	add	sp, #12
    84ee:	f85d fb04 	ldr.w	pc, [sp], #4
    84f2:	bf00      	nop
    84f4:	1fff8dfc 	.word	0x1fff8dfc
    84f8:	1fff8df8 	.word	0x1fff8df8

000084fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    84fc:	b500      	push	{lr}
    84fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8500:	f7f8 ffb0 	bl	1464 <Sys_GetCoreID>
    8504:	4603      	mov	r3, r0
    8506:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    8508:	4a0d      	ldr	r2, [pc, #52]	; (8540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    850a:	9b01      	ldr	r3, [sp, #4]
    850c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8510:	1e5a      	subs	r2, r3, #1
    8512:	490b      	ldr	r1, [pc, #44]	; (8540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    8514:	9b01      	ldr	r3, [sp, #4]
    8516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    851a:	4a0a      	ldr	r2, [pc, #40]	; (8544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    851c:	9b01      	ldr	r3, [sp, #4]
    851e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8522:	f003 0301 	and.w	r3, r3, #1
    8526:	2b00      	cmp	r3, #0
    8528:	d106      	bne.n	8538 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    852a:	4a05      	ldr	r2, [pc, #20]	; (8540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    852c:	9b01      	ldr	r3, [sp, #4]
    852e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8532:	2b00      	cmp	r3, #0
    8534:	d100      	bne.n	8538 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8538:	bf00      	nop
    853a:	b003      	add	sp, #12
    853c:	f85d fb04 	ldr.w	pc, [sp], #4
    8540:	1fff8dfc 	.word	0x1fff8dfc
    8544:	1fff8df8 	.word	0x1fff8df8

00008548 <Fls_ACEraseRomEnd>:
    8548:	74747542 	.word	0x74747542
    854c:	31206e6f 	.word	0x31206e6f
    8550:	74636120 	.word	0x74636120
    8554:	3a6e6f69 	.word	0x3a6e6f69
    8558:	4e495320 	.word	0x4e495320
    855c:	5f454c47 	.word	0x5f454c47
    8560:	43494c43 	.word	0x43494c43
    8564:	000a204b 	.word	0x000a204b
    8568:	74747542 	.word	0x74747542
    856c:	31206e6f 	.word	0x31206e6f
    8570:	74636120 	.word	0x74636120
    8574:	3a6e6f69 	.word	0x3a6e6f69
    8578:	554f4420 	.word	0x554f4420
    857c:	5f454c42 	.word	0x5f454c42
    8580:	43494c43 	.word	0x43494c43
    8584:	000a204b 	.word	0x000a204b
    8588:	74747542 	.word	0x74747542
    858c:	31206e6f 	.word	0x31206e6f
    8590:	74636120 	.word	0x74636120
    8594:	3a6e6f69 	.word	0x3a6e6f69
    8598:	4c4f4820 	.word	0x4c4f4820
    859c:	4c435f44 	.word	0x4c435f44
    85a0:	204b4349 	.word	0x204b4349
    85a4:	0000000a 	.word	0x0000000a
    85a8:	74747542 	.word	0x74747542
    85ac:	31206e6f 	.word	0x31206e6f
    85b0:	74636120 	.word	0x74636120
    85b4:	3a6e6f69 	.word	0x3a6e6f69
    85b8:	4c455220 	.word	0x4c455220
    85bc:	45534145 	.word	0x45534145
    85c0:	00000a20 	.word	0x00000a20
    85c4:	74747542 	.word	0x74747542
    85c8:	32206e6f 	.word	0x32206e6f
    85cc:	74636120 	.word	0x74636120
    85d0:	3a6e6f69 	.word	0x3a6e6f69
    85d4:	4e495320 	.word	0x4e495320
    85d8:	5f454c47 	.word	0x5f454c47
    85dc:	43494c43 	.word	0x43494c43
    85e0:	000a204b 	.word	0x000a204b
    85e4:	74747542 	.word	0x74747542
    85e8:	32206e6f 	.word	0x32206e6f
    85ec:	74636120 	.word	0x74636120
    85f0:	3a6e6f69 	.word	0x3a6e6f69
    85f4:	554f4420 	.word	0x554f4420
    85f8:	5f454c42 	.word	0x5f454c42
    85fc:	43494c43 	.word	0x43494c43
    8600:	000a204b 	.word	0x000a204b
    8604:	74747542 	.word	0x74747542
    8608:	32206e6f 	.word	0x32206e6f
    860c:	74636120 	.word	0x74636120
    8610:	3a6e6f69 	.word	0x3a6e6f69
    8614:	4c4f4820 	.word	0x4c4f4820
    8618:	4c435f44 	.word	0x4c435f44
    861c:	204b4349 	.word	0x204b4349
    8620:	0000000a 	.word	0x0000000a
    8624:	74747542 	.word	0x74747542
    8628:	32206e6f 	.word	0x32206e6f
    862c:	74636120 	.word	0x74636120
    8630:	3a6e6f69 	.word	0x3a6e6f69
    8634:	4c455220 	.word	0x4c455220
    8638:	45534145 	.word	0x45534145
    863c:	00000a20 	.word	0x00000a20
    8640:	74747542 	.word	0x74747542
    8644:	33206e6f 	.word	0x33206e6f
    8648:	74636120 	.word	0x74636120
    864c:	3a6e6f69 	.word	0x3a6e6f69
    8650:	4e495320 	.word	0x4e495320
    8654:	5f454c47 	.word	0x5f454c47
    8658:	43494c43 	.word	0x43494c43
    865c:	000a204b 	.word	0x000a204b
    8660:	74747542 	.word	0x74747542
    8664:	33206e6f 	.word	0x33206e6f
    8668:	74636120 	.word	0x74636120
    866c:	3a6e6f69 	.word	0x3a6e6f69
    8670:	554f4420 	.word	0x554f4420
    8674:	5f454c42 	.word	0x5f454c42
    8678:	43494c43 	.word	0x43494c43
    867c:	000a204b 	.word	0x000a204b
    8680:	74747542 	.word	0x74747542
    8684:	33206e6f 	.word	0x33206e6f
    8688:	74636120 	.word	0x74636120
    868c:	3a6e6f69 	.word	0x3a6e6f69
    8690:	4c4f4820 	.word	0x4c4f4820
    8694:	4c435f44 	.word	0x4c435f44
    8698:	204b4349 	.word	0x204b4349
    869c:	0000000a 	.word	0x0000000a
    86a0:	74747542 	.word	0x74747542
    86a4:	33206e6f 	.word	0x33206e6f
    86a8:	74636120 	.word	0x74636120
    86ac:	3a6e6f69 	.word	0x3a6e6f69
    86b0:	4c455220 	.word	0x4c455220
    86b4:	45534145 	.word	0x45534145
    86b8:	00000a20 	.word	0x00000a20
    86bc:	6d726554 	.word	0x6d726554
    86c0:	6c616e69 	.word	0x6c616e69
    86c4:	00000000 	.word	0x00000000
    86c8:	4c554e28 	.word	0x4c554e28
    86cc:	0000294c 	.word	0x0000294c

000086d0 <Clock_Ip_au8DividerCallbackIndex>:
    86d0:	0e0d0c00 06030201 0a070409 000b0805     ................

000086e0 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000086f0 <Clock_Ip_au8XoscCallbackIndex>:
    86f0:	00000100 00000000 00000000 00000000     ................

00008700 <Clock_Ip_au8IrcoscCallbackIndex>:
    8700:	03020100 00000004 00000000 00000000     ................

00008710 <Clock_Ip_au8GateCallbackIndex>:
    8710:	06010200 01040301 00000500 00000000     ................

00008720 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00008730 <Clock_Ip_au8PllCallbackIndex>:
    8730:	00000100 00000000 00000000 00000000     ................

00008740 <Clock_Ip_au8SelectorCallbackIndex>:
    8740:	0a090800 03020109 07060504 00000000     ................

00008750 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00008760 <Clock_Ip_au8CmuCallbackIndex>:
	...

00008770 <Clock_Ip_au8ClockFeatures>:
	...
    8780:	01000000 00000000 00000000 00000002     ................
    8790:	00000000 00000300 00000000 00040000     ................
    87a0:	00000000 05000000 00000000 00000000     ................
    87b0:	00000006 00000000 00000100 00000000     ................
    87c0:	00010000 00000000 04000000 00000000     ................
    87d0:	00000000 00000005 00000001 00000401     ................
    87e0:	00000200 00050100 00030000 04020000     ................
    87f0:	04000000 02000000 00000005 00000005     ................
    8800:	00000403 00000600 00050300 00070000     ................
    8810:	05000000 00000000 00000000 00000006     ................
	...
    8850:	00050000 00000000 06000000 00000100     ................
    8860:	00000000 00030007 00000000 00000000     ................
    8870:	00000000 00060000 00000000 07000000     ................
    8880:	00000100 00000000 00030008 00000000     ................
	...
    8898:	00090000 00000000 0a000000 00000100     ................
    88a8:	00000000 0003000b 00000000 00000000     ................
    88b8:	00000000 000c0000 00000000 0d000000     ................
    88c8:	00000100 00000000 0003000e 00000000     ................
    88d8:	00000800 00000000 00090000 00000000     ................
    88e8:	0a000000 00000000 00000000 0000000b     ................
    88f8:	00000000 00000b01 00000000 000b0200     ................
    8908:	00000000 0b030000 00000000 00000000     ................
	...
    8920:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    8930:	01000000 00000000 00000000 00000007     ................
    8940:	00007300 00000700 00320000 00090000     .s........2.....
    8950:	02000000 07000000 00000000 00000021     ............!...
    8960:	00000009 00000400 00000900 00030000     ................
    8970:	00070000 61000000 07000000 00000000     .......a........
    8980:	00000024 00000007 00002500 00000700     $........%......
    8990:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    89a0:	00000000 00000020 38000004 00003800     .... ......8.8..
    89b0:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    89c0:	04000000 00260000 00000026 66000004     ......&.&......f
    89d0:	00006600 00000400 00370037 00040000     .f......7.7.....
    89e0:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    89f0:	2e000004 00002e00 00000200 00404040     ............@@@.
    8a00:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    8a10:	0000006b 6c000004 00006c00 00000900     k......l.l......
    8a20:	00010000 00090000 00000000 07000000     ................
    8a30:	00000000 00000036 00000007 00003100     ....6........1..
    8a40:	00000700 00490000 00070000 4a000000     ......I........J
    8a50:	07000000 00000000 0000004b 00000007     ........K.......
    8a60:	00004c00 00000700 004d0000 00070000     .L........M.....
    8a70:	3d000000 03000000 00000000 00000000     ...=............

00008a80 <Clock_Ip_au16SelectorEntryHardwareValue>:
    8a80:	01010a03 01010001 04040002 02000603     ................
    8a90:	00010810 02020100 00000000 00000007     ................
    8aa0:	00000009 00000000 00000c0e 00000000     ................
	...

00008ad8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    8ad8:	00020000 00000300 00000601 00000000     ................
	...

00008b08 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    8b08:	00000700 00000000 02020000 01010303     ................
    8b18:	03020606 00000000 00000000 00000000     ................
	...

00008b38 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    8b38:	00000001 00000000 02020000 01010303     ................
    8b48:	03020606 00000000 00000000 00000000     ................
	...

00008b68 <Clock_Ip_au8DividerValueHardwareValue>:
    8b68:	00020100 00000003 00000004 00000000     ................
    8b78:	00000005 00000000 00000000 00000000     ................
    8b88:	00000006 00000000 00000000 00000000     ................
	...
    8ba8:	00000007                                ....

00008bac <Clock_Ip_apxScgPeriphAsyncDivs>:
    8bac:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00008bbc <Clock_Ip_aeSourceTypeClockName>:
    8bbc:	00000000 00000001 00000001 00000001     ................
    8bcc:	00000001 00000001 00000001 00000001     ................
    8bdc:	00000002 00000003 00000001 00000001     ................
    8bec:	00000001 00000001 00000002 00000002     ................
    8bfc:	00000003 00000003 00000001 00000001     ................
    8c0c:	00000004 00000004 00000004 00000004     ................
	...

00008c78 <Clock_Ip_aeHwPllName>:
    8c78:	00000009                                ....

00008c7c <Clock_Ip_aeHwDfsName>:
    8c7c:	00000057                                W...

00008c80 <Clock_Ip_axDividerCallbacks>:
    8c80:	00002fc1 00002fcb 00002fe5 00002fff     ./.../.../.../..
    8c90:	00003019 00003033 0000304d 00003067     .0..30..M0..g0..
    8ca0:	00003081 0000309b 000030b5 000030cf     .0...0...0...0..
    8cb0:	000030e9 00003103 0000311d              .0...1...1..

00008cbc <Clock_Ip_axDividerTriggerCallbacks>:
    8cbc:	00003491 00003491                       .4...4..

00008cc4 <Clock_Ip_axExtOscCallbacks>:
    8cc4:	0000349d 0000349d 0000349d 000034a7     .4...4...4...4..
    8cd4:	0000349d 000034b1 000034cb 000034e5     .4...4...4...4..
    8ce4:	00003569 0000357d                       i5..}5..

00008cec <Clock_Ip_axFracDivCallbacks>:
    8cec:	0000373d 0000373d 00003747              =7..=7..G7..

00008cf8 <Clock_Ip_axGateCallbacks>:
    8cf8:	00003761 0000376b 0000386b 00003885     a7..k7..k8...8..
    8d08:	0000381b 00003835 000037cb 000037e5     .8..58...7...7..
    8d18:	0000377b 00003795 000038bb 000038d5     {7...7...8...8..
    8d28:	0000390b 00003925                       .9..%9..

00008d30 <Clock_Ip_axIntOscCallbacks>:
    8d30:	00003ad1 00003ad1 00003adb 00003ae5     .:...:...:...:..
    8d40:	00003aff 00003b19 00003b2d 00003b47     .:...;..-;..G;..
    8d50:	00003b61 00003b75 00003b8f 00003ba9     a;..u;...;...;..
    8d60:	00003c51 00003c6b 00003c85              Q<..k<...<..

00008d6c <Clock_Ip_axCmuCallbacks>:
    8d6c:	00004221 0000422b 00004237 00004221     !B..+B..7B..!B..

00008d7c <Clock_Ip_axPllCallbacks>:
    8d7c:	00004241 00004241 0000424b 00004241     AB..AB..KB..AB..
    8d8c:	00004257 00004261 0000427b 00004295     WB..aB..{B...B..
    8d9c:	00004339 00004325                       9C..%C..

00008da4 <Clock_Ip_axPcfsCallbacks>:
    8da4:	00004495                                .D..

00008da8 <Clock_Ip_axSelectorCallbacks>:
    8da8:	000044a1 000044a1 000044ab 000044c5     .D...D...D...D..
    8db8:	000044a1 000044df 000044f9 00004513     .D...D...D...E..
    8dc8:	0000452d 00004547 00004561 0000457b     -E..GE..aE..{E..
    8dd8:	00004595 000045af 000045c9 000045e3     .E...E...E...E..
    8de8:	000045fd 00004617 00004631 0000464b     .E...F..1F..KF..
    8df8:	00004665 0000467f                       eF...F..

00008e00 <ClockSource>:
    8e00:	00000000 00000008 00000002 00000005     ................
	...
    8e18:	00000009                                ....

00008e1c <ResetReasonArray>:
    8e1c:	00000000 00000001 00000002 00000003     ................
    8e2c:	00000004 00000005 00000006 00000007     ................
    8e3c:	00000008 00000009 0000000a 0000000b     ................
    8e4c:	0000000c 0000000d 0000000e              ............

00008e58 <Port_au32PortCiPortBaseAddr>:
    8e58:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    8e68:	4004d000                                ...@

00008e6c <Port_au32PortCiGpioBaseAddr>:
    8e6c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    8e7c:	400ff100                                ...@

00008e80 <ButtonsCfg>:
    8e80:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
    8e90:	0000000c 0000012c                       ....,...

00008e98 <Task_Config>:
    8e98:	00000032 00000001 00000905 00000064     2...........d...
    8ea8:	00000001 00000911 000003e8 00000000     ................
    8eb8:	000012c9 00000bb8 00000000 000012cd     ................
    8ec8:	00001388 00000000 000012d1 00000bb8     ................
    8ed8:	00000000 000012d5                       ........

00008ee0 <Timer_Config>:
	...

00008eec <Queue_Config>:
    8eec:	00000002 0000000a 00000000              ............

00008ef8 <Scheduler_Config>:
    8ef8:	0000000a 00000006 00008e98 00000001     ................
    8f08:	00008ee0 00000001 00008eec              ............

00008f14 <Mcu_aClockConfigPB>:
	...
    8f1c:	14000002 0400000e 01000020 00000002     ........ .......
    8f2c:	01000001 00000001 00000005 00000001     ................
    8f3c:	00000000 00000057 00000000 00000000     ....W...........
	...
    8f54:	00000057 00000000 00000057 00000000     W.......W.......
	...
    8f7c:	00000019 00000005 0000001a 00000002     ................
    8f8c:	0000001b 00000005 0000002a 00000002     ........*.......
    8f9c:	0000003f 00000000 00000040 00000000     ?.......@.......
    8fac:	00000041 00000000 00000042 00000000     A.......B.......
    8fbc:	00000031 00000000 00000045 00000000     1.......E.......
    8fcc:	00000046 00000000 00000047 00000000     F.......G.......
    8fdc:	00000044 00000000 00000030 00000000     D.......0.......
    8fec:	0000003d 00000000 00000043 00000000     =.......C.......
    8ffc:	00000049 00000000 0000004a 00000000     I.......J.......
    900c:	0000004b 00000000 00000048 00000000     K.......H.......
    901c:	00000057 00000057 00000057 00000057     W...W...W...W...
    902c:	00000057 00000057 00000057 00000057     W...W...W...W...
    903c:	00000057 00000057 00000057 00000057     W...W...W...W...
    904c:	00000057 00000057 00000057 00000057     W...W...W...W...
    905c:	0000000a 00000001 00000000 0000000b     ................
    906c:	00000001 00000000 0000000c 00000001     ................
    907c:	00000000 0000000d 00000002 00000000     ................
    908c:	0000001d 00000001 00000000 0000001e     ................
    909c:	00000002 00000000 0000001f 00000001     ................
    90ac:	00000000 00000021 00000001 00000000     ....!...........
    90bc:	00000022 00000002 00000000 00000023     "...........#...
    90cc:	00000001 00000000 00000025 00000002     ........%.......
    90dc:	00000000 00000026 00000004 00000000     ....&...........
    90ec:	00000027 00000002 00000000 00000048     '...........H...
    90fc:	00000001 00000001 00000057 00000000     ........W.......
    910c:	00000000 00000057 00000000 00000000     ....W...........
    911c:	00000057 00000000 00000000 00000057     W...........W...
	...
    9134:	00000057 00000000 00000000 00000057     W...........W...
	...
    914c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    9168:	00000014 00007d00 00000015 00007d00     .....}.......}..
    9178:	00000016 00007d00 00000017 00008000     .....}..........
    9188:	00000030 00000000 00000031 00000000     0.......1.......
    9198:	00000033 00000000 00000034 00000000     3.......4.......
    91a8:	00000036 00000000 00000039 00000000     6.......9.......
    91b8:	0000003a 00000000 0000003b 00000000     :.......;.......
    91c8:	0000003c 00000000 0000003d 00000000     <.......=.......
    91d8:	0000003e 00000000 0000003f 00000000     >.......?.......
    91e8:	00000040 00000000 00000041 00000000     @.......A.......
    91f8:	00000042 00000000 00000043 00000000     B.......C.......
    9208:	00000044 00000000 00000045 00000000     D.......E.......
    9218:	00000046 00000000 00000047 00000000     F.......G.......
    9228:	00000048 00000000 00000049 00000000     H.......I.......
    9238:	0000004a 00000000 0000004b 00000000     J.......K.......
    9248:	0000004e 00000000 0000004f 00000000     N.......O.......
    9258:	00000050 00000001 00000051 00000001     P.......Q.......
    9268:	00000052 00000001 00000053 00000001     R.......S.......
    9278:	00000054 00000001 00000055 00000000     T.......U.......
    9288:	00000057 00000000 00000057 00000000     W.......W.......
    9298:	00000057 00000000 00000057 00000000     W.......W.......
    92a8:	00000057 00000000 00000057 00000000     W.......W.......
    92b8:	00000057 00000000 00000057 00000000     W.......W.......
    92c8:	00000057 00000000 00000057 00000000     W.......W.......
    92d8:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000930c <Mcu_Config>:
    930c:	0000005a 00000000 00000001 00000001     Z...............
    931c:	00009594 00008f14 000095a0              ............

00009328 <OsIf_xPredefinedConfig>:
    9328:	00000000 02dc6c00                       .....l..

00009330 <OsIf_apxPredefinedConfig>:
    9330:	00009328                                (...

00009334 <g_pin_mux_InitConfigArr>:
    9334:	4004c000 400ff0c0 00000010 00000002     ...@...@........
    9344:	00000001 00000002 00000000 00000000     ................
    9354:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    9364:	00000011 00000002 00000001 00000001     ................
	...
    9384:	4004c000 400ff0c0 0000000f 00000002     ...@...@........
    9394:	00000001 00000002 00000000 00000000     ................
    93a4:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    93b4:	00000000 00000002 00000001 00000002     ................
	...
    93d0:	00000100 4004d000 400ff100 0000000c     .......@...@....
    93e0:	00000002 00000001 00000001 00000000     ................
	...
    93fc:	40049000 400ff000 0000000c 00000002     ...@...@........
    940c:	00000001 00000001 00000000 00000000     ................
	...

00009424 <au8Port_PartitionList>:
    9424:	00000001                                ....

00009428 <au32Port_PinToPartitionMap>:
    9428:	00000001 00000001 00000001 00000001     ................
    9438:	00000001 00000001                       ........

00009440 <Port_au16NoUnUsedPadsArrayDefault>:
    9440:	00010000 00030002 00070006 00090008     ................
    9450:	000d000b 000f000e 00110010 00210020     ............ .!.
    9460:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    9470:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    9480:	00410040 00430042 00470046 00490048     @.A.B.C.F.G.H.I.
    9490:	004b004a 004d004c 004f004e 00510050     J.K.L.M.N.O.P.Q.
    94a0:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    94b0:	006a0069 006c006b 006e006d 00810080     i.j.k.l.m.n.....
    94c0:	00830082 00850084 00870086 00890088     ................
    94d0:	008b008a 008e008d 0090008f              ............

000094dc <Port_UnUsedPin>:
    94dc:	00000000 00000001 00000000              ............

000094e8 <Port_aPinConfigDefault>:
    94e8:	00000070 00000100 00000001 00000002     p...............
    94f8:	00010001 00000071 00000100 00000000     ....q...........
    9508:	00000001 00010101 0000006f 00000100     ........o.......
    9518:	00000001 00000002 00010001 00000060     ............`...
    9528:	00000100 00000001 00000002 00010001     ................
    9538:	0000008c 00000100 00000000 00000001     ................
    9548:	00010101 0000000c 00000100 00000000     ................
    9558:	00000001 00010101                       ........

00009560 <Port_Config>:
    9560:	004e0006 00009440 000094dc 000094e8     ..N.@...........
	...
    9578:	00009428 00009424 00009334              (...$...4...

00009584 <Power_Ip_RCM_ConfigPB>:
	...

0000958c <Power_Ip_PMC_ConfigPB>:
    958c:	00000000                                ....

00009590 <Power_Ip_SMC_ConfigPB>:
    9590:	00000000                                ....

00009594 <Power_Ip_aModeConfigPB>:
	...

000095a0 <Power_Ip_HwIPsConfigPB>:
    95a0:	00009584 0000958c 00009590              ............

000095ac <_aInitStr.0>:
    95ac:	00000000 54540000 45522052 53454747     ......TTR REGGES
    95bc:	00000000                                ....

000095c0 <_aV2C.0>:
    95c0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000095d0 <__INIT_TABLE>:
    95d0:	00000002 	.word	0x00000002
    95d4:	1fff8b10 	.word	0x1fff8b10
    95d8:	000095f8 	.word	0x000095f8
    95dc:	00009624 	.word	0x00009624
    95e0:	1fff8800 	.word	0x1fff8800
    95e4:	00000000 	.word	0x00000000
    95e8:	00000310 	.word	0x00000310

000095ec <__ZERO_TABLE>:
    95ec:	00000001 	.word	0x00000001
    95f0:	1fff8b40 	.word	0x1fff8b40
    95f4:	1fff9330 	.word	0x1fff9330
