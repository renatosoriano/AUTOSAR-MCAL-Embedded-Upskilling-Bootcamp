
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001873 	.word	0x00001873
  10:	00001875 	.word	0x00001875
  14:	00001877 	.word	0x00001877
  18:	00001879 	.word	0x00001879
	...
  2c:	0000187b 	.word	0x0000187b
  30:	0000187d 	.word	0x0000187d
  34:	00000000 	.word	0x00000000
  38:	0000187f 	.word	0x0000187f
  3c:	00001881 	.word	0x00001881
  40:	00001883 	.word	0x00001883
  44:	00001883 	.word	0x00001883
  48:	00001883 	.word	0x00001883
  4c:	00001883 	.word	0x00001883
  50:	00001883 	.word	0x00001883
  54:	00001883 	.word	0x00001883
  58:	00001883 	.word	0x00001883
  5c:	00001883 	.word	0x00001883
  60:	00001883 	.word	0x00001883
  64:	00001883 	.word	0x00001883
  68:	00001883 	.word	0x00001883
  6c:	00001883 	.word	0x00001883
  70:	00001883 	.word	0x00001883
  74:	00001883 	.word	0x00001883
  78:	00001883 	.word	0x00001883
  7c:	00001883 	.word	0x00001883
  80:	00001883 	.word	0x00001883
  84:	00001883 	.word	0x00001883
  88:	00001883 	.word	0x00001883
  8c:	00001883 	.word	0x00001883
  90:	00001883 	.word	0x00001883
  94:	00001883 	.word	0x00001883
  98:	00001883 	.word	0x00001883
  9c:	00001883 	.word	0x00001883
  a0:	00001883 	.word	0x00001883
  a4:	00001883 	.word	0x00001883
  a8:	00001883 	.word	0x00001883
  ac:	00001883 	.word	0x00001883
  b0:	00001883 	.word	0x00001883
  b4:	00001883 	.word	0x00001883
  b8:	00001883 	.word	0x00001883
  bc:	00001883 	.word	0x00001883
  c0:	00001883 	.word	0x00001883
  c4:	00001883 	.word	0x00001883
  c8:	00001883 	.word	0x00001883
  cc:	00001883 	.word	0x00001883
  d0:	00001883 	.word	0x00001883
  d4:	00001883 	.word	0x00001883
  d8:	00001883 	.word	0x00001883
  dc:	00001883 	.word	0x00001883
  e0:	00001883 	.word	0x00001883
  e4:	00001883 	.word	0x00001883
  e8:	00001883 	.word	0x00001883
  ec:	00001883 	.word	0x00001883
  f0:	00001883 	.word	0x00001883
  f4:	00001883 	.word	0x00001883
  f8:	00001883 	.word	0x00001883
  fc:	00001883 	.word	0x00001883
 100:	00001883 	.word	0x00001883
 104:	00001883 	.word	0x00001883
 108:	00001883 	.word	0x00001883
 10c:	00001883 	.word	0x00001883
 110:	00001883 	.word	0x00001883
 114:	00001883 	.word	0x00001883
 118:	00001883 	.word	0x00001883
 11c:	00001883 	.word	0x00001883
 120:	00001883 	.word	0x00001883
 124:	00001883 	.word	0x00001883
 128:	00001883 	.word	0x00001883
 12c:	00001883 	.word	0x00001883
 130:	00001883 	.word	0x00001883
 134:	00001883 	.word	0x00001883
 138:	00001883 	.word	0x00001883
 13c:	00001883 	.word	0x00001883
 140:	00001883 	.word	0x00001883
 144:	00001883 	.word	0x00001883
 148:	00001883 	.word	0x00001883
 14c:	00001883 	.word	0x00001883
 150:	00001883 	.word	0x00001883
 154:	00001883 	.word	0x00001883
 158:	00001883 	.word	0x00001883
 15c:	00001883 	.word	0x00001883
 160:	00001883 	.word	0x00001883
 164:	00001883 	.word	0x00001883
 168:	00001883 	.word	0x00001883
 16c:	00001883 	.word	0x00001883
 170:	00001883 	.word	0x00001883
 174:	00001883 	.word	0x00001883
 178:	00001883 	.word	0x00001883
 17c:	00001883 	.word	0x00001883
 180:	00001883 	.word	0x00001883
 184:	00001883 	.word	0x00001883
 188:	00001883 	.word	0x00001883
 18c:	00001883 	.word	0x00001883
 190:	00001883 	.word	0x00001883
 194:	00001883 	.word	0x00001883
 198:	00001883 	.word	0x00001883
 19c:	00001883 	.word	0x00001883
 1a0:	00001883 	.word	0x00001883
 1a4:	00001883 	.word	0x00001883
 1a8:	00001883 	.word	0x00001883
 1ac:	00001883 	.word	0x00001883
 1b0:	00001883 	.word	0x00001883
 1b4:	00001883 	.word	0x00001883
 1b8:	00001883 	.word	0x00001883
 1bc:	00001883 	.word	0x00001883
 1c0:	00001883 	.word	0x00001883
 1c4:	00001883 	.word	0x00001883
 1c8:	00001883 	.word	0x00001883
 1cc:	00001883 	.word	0x00001883
 1d0:	00001883 	.word	0x00001883
 1d4:	00001883 	.word	0x00001883
 1d8:	00001883 	.word	0x00001883
 1dc:	00001883 	.word	0x00001883
 1e0:	00001883 	.word	0x00001883
 1e4:	00001883 	.word	0x00001883
 1e8:	00001883 	.word	0x00001883
 1ec:	00001883 	.word	0x00001883
 1f0:	00001883 	.word	0x00001883
 1f4:	00001883 	.word	0x00001883
 1f8:	00001883 	.word	0x00001883
 1fc:	00001883 	.word	0x00001883
 200:	00001883 	.word	0x00001883
 204:	00001883 	.word	0x00001883
 208:	00001883 	.word	0x00001883
 20c:	00001883 	.word	0x00001883
 210:	00001883 	.word	0x00001883
 214:	00001883 	.word	0x00001883
 218:	00001883 	.word	0x00001883
 21c:	00001883 	.word	0x00001883
 220:	00001883 	.word	0x00001883
 224:	00001883 	.word	0x00001883
 228:	00001883 	.word	0x00001883
 22c:	00001883 	.word	0x00001883
 230:	00001883 	.word	0x00001883
 234:	00001883 	.word	0x00001883
 238:	00001883 	.word	0x00001883
 23c:	00001883 	.word	0x00001883
 240:	00001883 	.word	0x00001883
 244:	00001883 	.word	0x00001883
 248:	00001883 	.word	0x00001883
 24c:	00001883 	.word	0x00001883
 250:	00001883 	.word	0x00001883
 254:	00001883 	.word	0x00001883
 258:	00001883 	.word	0x00001883
 25c:	00001883 	.word	0x00001883
 260:	00001883 	.word	0x00001883
 264:	00001883 	.word	0x00001883
 268:	00001883 	.word	0x00001883
 26c:	00001883 	.word	0x00001883
 270:	00001883 	.word	0x00001883
 274:	00001883 	.word	0x00001883
 278:	00001883 	.word	0x00001883
 27c:	00001883 	.word	0x00001883
 280:	00001883 	.word	0x00001883
 284:	00001883 	.word	0x00001883
 288:	00001883 	.word	0x00001883
 28c:	00001883 	.word	0x00001883
 290:	00001883 	.word	0x00001883
 294:	00001883 	.word	0x00001883
 298:	00001883 	.word	0x00001883
 29c:	00001883 	.word	0x00001883
 2a0:	00001883 	.word	0x00001883
 2a4:	00001883 	.word	0x00001883
 2a8:	00001883 	.word	0x00001883
 2ac:	00001883 	.word	0x00001883
 2b0:	00001883 	.word	0x00001883
 2b4:	00001883 	.word	0x00001883
 2b8:	00001883 	.word	0x00001883
 2bc:	00001883 	.word	0x00001883
 2c0:	00001883 	.word	0x00001883
 2c4:	00001883 	.word	0x00001883
 2c8:	00001883 	.word	0x00001883
 2cc:	00001883 	.word	0x00001883
 2d0:	00001883 	.word	0x00001883
 2d4:	00001883 	.word	0x00001883
 2d8:	00001883 	.word	0x00001883
 2dc:	00001883 	.word	0x00001883
 2e0:	00001883 	.word	0x00001883
 2e4:	00001883 	.word	0x00001883
 2e8:	00001883 	.word	0x00001883
 2ec:	00001883 	.word	0x00001883
 2f0:	00001883 	.word	0x00001883
 2f4:	00001883 	.word	0x00001883
 2f8:	00001883 	.word	0x00001883
 2fc:	00001883 	.word	0x00001883
 300:	00001883 	.word	0x00001883
 304:	00001883 	.word	0x00001883
 308:	00001883 	.word	0x00001883
 30c:	00001883 	.word	0x00001883

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 f92d 	bl	16e0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f9ec 	bl	1868 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92c4 	.word	0x1fff92c4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 f937 	bl	180c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f80b 	bl	8cc <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b6:	f001 f977 	bl	1ba8 <SEGGER_RTT_Init>

    /* Init the scheduler with two tasks */
    Scheduler_Init( &Scheduler_Config );
     8ba:	4803      	ldr	r0, [pc, #12]	; (8c8 <main+0x18>)
     8bc:	f000 fd6c 	bl	1398 <Scheduler_Init>

    while( 1u ) 
    {
        /* Run the scheduler forever */
        Scheduler_MainFunction( );
     8c0:	f000 fe26 	bl	1510 <Scheduler_MainFunction>
     8c4:	e7fc      	b.n	8c0 <main+0x10>
     8c6:	bf00      	nop
     8c8:	00011c70 	.word	0x00011c70

000008cc <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8cc:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     8ce:	4815      	ldr	r0, [pc, #84]	; (924 <EcuM_Init+0x58>)
     8d0:	f005 fd18 	bl	6304 <Mcu_Init>
    Mcu_SetMode( McuModeSettingConf_0 );
     8d4:	2000      	movs	r0, #0
     8d6:	f005 fd8d 	bl	63f4 <Mcu_SetMode>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8da:	2000      	movs	r0, #0
     8dc:	f005 fd66 	bl	63ac <Mcu_InitClock>

    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     8e0:	2000      	movs	r0, #0
     8e2:	f001 ff7a 	bl	27da <OsIf_Init>
    /* Enable and setup interrupts */
    Platform_Init( NULL_PTR );
     8e6:	2000      	movs	r0, #0
     8e8:	f001 fe74 	bl	25d4 <Platform_Init>

    /* Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 for RGB LEDs and A12, D17, E12 for Buttons. */
    Port_Init( &Port_Config );
     8ec:	480e      	ldr	r0, [pc, #56]	; (928 <EcuM_Init+0x5c>)
     8ee:	f006 f90b 	bl	6b08 <Port_Init>

    /* Init the ADC with the parameters set in Tresos*/
    Adc_Init( &Adc_Config );
     8f2:	480e      	ldr	r0, [pc, #56]	; (92c <EcuM_Init+0x60>)
     8f4:	f007 ff2e 	bl	8754 <Adc_Init>
    • ADC0_SE5 and ADC1_SE15 channels are interleaved on PTB1 pin 
    • ADC1_SE8 and ADC0_SE8 channels are interleaved on PTB13 pin 
    • ADC1_SE9 and ADC0_SE9 channels are interleaved on PTB14 pin
    */
    /* By default ADC0-CH5 is not connected to B1, but with this function it will */
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
     8f8:	2208      	movs	r2, #8
     8fa:	2101      	movs	r1, #1
     8fc:	480c      	ldr	r0, [pc, #48]	; (930 <EcuM_Init+0x64>)
     8fe:	f006 fad7 	bl	6eb0 <Port_Ci_Port_Ip_SetMuxModeSel>
    /* By default ADC0-CH8 is not connected to B13, but with this function it will */
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     902:	2208      	movs	r2, #8
     904:	210d      	movs	r1, #13
     906:	480a      	ldr	r0, [pc, #40]	; (930 <EcuM_Init+0x64>)
     908:	f006 fad2 	bl	6eb0 <Port_Ci_Port_Ip_SetMuxModeSel>

    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     90c:	4809      	ldr	r0, [pc, #36]	; (934 <EcuM_Init+0x68>)
     90e:	f000 f9e7 	bl	ce0 <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
     912:	4809      	ldr	r0, [pc, #36]	; (938 <EcuM_Init+0x6c>)
     914:	f000 fbaa 	bl	106c <HwIoAb_Leds_Init>
    /* Pots init */
    HwIoAb_Pots_Init( NULL_PTR );
     918:	2000      	movs	r0, #0
     91a:	f000 fbf5 	bl	1108 <HwIoAb_Pots_Init>
}
     91e:	bf00      	nop
     920:	bd08      	pop	{r3, pc}
     922:	bf00      	nop
     924:	0001222c 	.word	0x0001222c
     928:	0001254c 	.word	0x0001254c
     92c:	00011df8 	.word	0x00011df8
     930:	4004a000 	.word	0x4004a000
     934:	00011bec 	.word	0x00011bec
     938:	00011c04 	.word	0x00011c04

0000093c <Os_50ms_Task>:
 * @brief This is the function for the 50ms task.
 *
 * This function executes the state machine every 50ms.
 */
void Os_50ms_Task( void )
{
     93c:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     93e:	f000 fa1f 	bl	d80 <HwIoAb_Buttons_MainFunction>
}
     942:	bf00      	nop
     944:	bd08      	pop	{r3, pc}
	...

00000948 <Os_100ms_Task>:
 * - Double click: toggle only RGB_LED_RED (D15) and print Pot 2 ADC0 value in ohms. 
 * - Hold click:   toggle only RGB_LED_GREEN (D16) and print Pot 1 ADC1 (alternate) value in ohms. 
 * - Release:      turns OFF all RGB LEDs and print Pot 2 ADC1 (alternate) value in ohms.
 */
void Os_100ms_Task( void )
{
     948:	b500      	push	{lr}
     94a:	b083      	sub	sp, #12
    uint8 RealEvent = 0;    // Actual event of button.
     94c:	2300      	movs	r3, #0
     94e:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     952:	2300      	movs	r3, #0
     954:	f88d 3007 	strb.w	r3, [sp, #7]
     958:	e172      	b.n	c40 <__BSS_SRAM_SIZE+0x10>
    {  
        RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     95a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     95e:	4618      	mov	r0, r3
     960:	f000 f9f0 	bl	d44 <HwIoAb_Buttons_GetEvent>
     964:	4603      	mov	r3, r0
     966:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     96a:	f89d 3006 	ldrb.w	r3, [sp, #6]
     96e:	2b00      	cmp	r3, #0
     970:	f000 815e 	beq.w	c30 <__BSS_SRAM_SIZE>
        {
            switch( CurrentButton )
     974:	f89d 3007 	ldrb.w	r3, [sp, #7]
     978:	2b02      	cmp	r3, #2
     97a:	f000 80e9 	beq.w	b50 <Os_100ms_Task+0x208>
     97e:	2b02      	cmp	r3, #2
     980:	f300 8158 	bgt.w	c34 <__BSS_SRAM_SIZE+0x4>
     984:	2b00      	cmp	r3, #0
     986:	d002      	beq.n	98e <Os_100ms_Task+0x46>
     988:	2b01      	cmp	r3, #1
     98a:	d071      	beq.n	a70 <Os_100ms_Task+0x128>
                        break;
                    }
                break;
                default :
                  // If jump here is an error
                break;
     98c:	e152      	b.n	c34 <__BSS_SRAM_SIZE+0x4>
                    switch( RealEvent )
     98e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     992:	3b01      	subs	r3, #1
     994:	2b03      	cmp	r3, #3
     996:	d869      	bhi.n	a6c <Os_100ms_Task+0x124>
     998:	a201      	add	r2, pc, #4	; (adr r2, 9a0 <Os_100ms_Task+0x58>)
     99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     99e:	bf00      	nop
     9a0:	000009b1 	.word	0x000009b1
     9a4:	000009dd 	.word	0x000009dd
     9a8:	00000a09 	.word	0x00000a09
     9ac:	00000a35 	.word	0x00000a35
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     9b0:	2000      	movs	r0, #0
     9b2:	f000 fb93 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     9b6:	49a7      	ldr	r1, [pc, #668]	; (c54 <__BSS_SRAM_SIZE+0x24>)
     9b8:	2000      	movs	r0, #0
     9ba:	f001 fc5d 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     9be:	4ba6      	ldr	r3, [pc, #664]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	330a      	adds	r3, #10
     9c4:	4618      	mov	r0, r3
     9c6:	f000 fbc9 	bl	115c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     9ca:	4ba3      	ldr	r3, [pc, #652]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     9cc:	681b      	ldr	r3, [r3, #0]
     9ce:	895b      	ldrh	r3, [r3, #10]
     9d0:	461a      	mov	r2, r3
     9d2:	49a2      	ldr	r1, [pc, #648]	; (c5c <__BSS_SRAM_SIZE+0x2c>)
     9d4:	2000      	movs	r0, #0
     9d6:	f001 fc4f 	bl	2278 <SEGGER_RTT_printf>
                        break;
     9da:	e048      	b.n	a6e <Os_100ms_Task+0x126>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     9dc:	2001      	movs	r0, #1
     9de:	f000 fb7d 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     9e2:	499f      	ldr	r1, [pc, #636]	; (c60 <__BSS_SRAM_SIZE+0x30>)
     9e4:	2000      	movs	r0, #0
     9e6:	f001 fc47 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     9ea:	4b9b      	ldr	r3, [pc, #620]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     9ec:	681b      	ldr	r3, [r3, #0]
     9ee:	330a      	adds	r3, #10
     9f0:	4618      	mov	r0, r3
     9f2:	f000 fbb3 	bl	115c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     9f6:	4b98      	ldr	r3, [pc, #608]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	899b      	ldrh	r3, [r3, #12]
     9fc:	461a      	mov	r2, r3
     9fe:	4999      	ldr	r1, [pc, #612]	; (c64 <__BSS_SRAM_SIZE+0x34>)
     a00:	2000      	movs	r0, #0
     a02:	f001 fc39 	bl	2278 <SEGGER_RTT_printf>
                        break;
     a06:	e032      	b.n	a6e <Os_100ms_Task+0x126>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     a08:	2002      	movs	r0, #2
     a0a:	f000 fb67 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     a0e:	4996      	ldr	r1, [pc, #600]	; (c68 <__BSS_SRAM_SIZE+0x38>)
     a10:	2000      	movs	r0, #0
     a12:	f001 fc31 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     a16:	4b90      	ldr	r3, [pc, #576]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     a18:	681b      	ldr	r3, [r3, #0]
     a1a:	330e      	adds	r3, #14
     a1c:	4618      	mov	r0, r3
     a1e:	f000 fbfd 	bl	121c <HwIoAb_Pots_GetAltValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[0] );
     a22:	4b8d      	ldr	r3, [pc, #564]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     a24:	681b      	ldr	r3, [r3, #0]
     a26:	89db      	ldrh	r3, [r3, #14]
     a28:	461a      	mov	r2, r3
     a2a:	4990      	ldr	r1, [pc, #576]	; (c6c <__BSS_SRAM_SIZE+0x3c>)
     a2c:	2000      	movs	r0, #0
     a2e:	f001 fc23 	bl	2278 <SEGGER_RTT_printf>
                        break;
     a32:	e01c      	b.n	a6e <Os_100ms_Task+0x126>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     a34:	2000      	movs	r0, #0
     a36:	f000 fb2d 	bl	1094 <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     a3a:	2001      	movs	r0, #1
     a3c:	f000 fb2a 	bl	1094 <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     a40:	2002      	movs	r0, #2
     a42:	f000 fb27 	bl	1094 <HwIoAb_Leds_TurnOff>
                            SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     a46:	498a      	ldr	r1, [pc, #552]	; (c70 <__BSS_SRAM_SIZE+0x40>)
     a48:	2000      	movs	r0, #0
     a4a:	f001 fc15 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     a4e:	4b82      	ldr	r3, [pc, #520]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	330e      	adds	r3, #14
     a54:	4618      	mov	r0, r3
     a56:	f000 fbe1 	bl	121c <HwIoAb_Pots_GetAltValue>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[1] );
     a5a:	4b7f      	ldr	r3, [pc, #508]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	8a1b      	ldrh	r3, [r3, #16]
     a60:	461a      	mov	r2, r3
     a62:	4984      	ldr	r1, [pc, #528]	; (c74 <__BSS_SRAM_SIZE+0x44>)
     a64:	2000      	movs	r0, #0
     a66:	f001 fc07 	bl	2278 <SEGGER_RTT_printf>
                        break;
     a6a:	e000      	b.n	a6e <Os_100ms_Task+0x126>
                        break;
     a6c:	bf00      	nop
                break;
     a6e:	e0e2      	b.n	c36 <__BSS_SRAM_SIZE+0x6>
                    switch( RealEvent )
     a70:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a74:	3b01      	subs	r3, #1
     a76:	2b03      	cmp	r3, #3
     a78:	d868      	bhi.n	b4c <Os_100ms_Task+0x204>
     a7a:	a201      	add	r2, pc, #4	; (adr r2, a80 <Os_100ms_Task+0x138>)
     a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a80:	00000a91 	.word	0x00000a91
     a84:	00000abd 	.word	0x00000abd
     a88:	00000ae9 	.word	0x00000ae9
     a8c:	00000b15 	.word	0x00000b15
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     a90:	2000      	movs	r0, #0
     a92:	f000 fb23 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     a96:	4978      	ldr	r1, [pc, #480]	; (c78 <__BSS_SRAM_SIZE+0x48>)
     a98:	2000      	movs	r0, #0
     a9a:	f001 fbed 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     a9e:	4b6e      	ldr	r3, [pc, #440]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	330a      	adds	r3, #10
     aa4:	4618      	mov	r0, r3
     aa6:	f000 fb59 	bl	115c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     aaa:	4b6b      	ldr	r3, [pc, #428]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	895b      	ldrh	r3, [r3, #10]
     ab0:	461a      	mov	r2, r3
     ab2:	496a      	ldr	r1, [pc, #424]	; (c5c <__BSS_SRAM_SIZE+0x2c>)
     ab4:	2000      	movs	r0, #0
     ab6:	f001 fbdf 	bl	2278 <SEGGER_RTT_printf>
                        break;
     aba:	e048      	b.n	b4e <Os_100ms_Task+0x206>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     abc:	2001      	movs	r0, #1
     abe:	f000 fb0d 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     ac2:	496e      	ldr	r1, [pc, #440]	; (c7c <__BSS_SRAM_SIZE+0x4c>)
     ac4:	2000      	movs	r0, #0
     ac6:	f001 fbd7 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     aca:	4b63      	ldr	r3, [pc, #396]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     acc:	681b      	ldr	r3, [r3, #0]
     ace:	330a      	adds	r3, #10
     ad0:	4618      	mov	r0, r3
     ad2:	f000 fb43 	bl	115c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     ad6:	4b60      	ldr	r3, [pc, #384]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     ad8:	681b      	ldr	r3, [r3, #0]
     ada:	899b      	ldrh	r3, [r3, #12]
     adc:	461a      	mov	r2, r3
     ade:	4961      	ldr	r1, [pc, #388]	; (c64 <__BSS_SRAM_SIZE+0x34>)
     ae0:	2000      	movs	r0, #0
     ae2:	f001 fbc9 	bl	2278 <SEGGER_RTT_printf>
                        break;
     ae6:	e032      	b.n	b4e <Os_100ms_Task+0x206>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     ae8:	2002      	movs	r0, #2
     aea:	f000 faf7 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     aee:	4964      	ldr	r1, [pc, #400]	; (c80 <__BSS_SRAM_SIZE+0x50>)
     af0:	2000      	movs	r0, #0
     af2:	f001 fbc1 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     af6:	4b58      	ldr	r3, [pc, #352]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	330e      	adds	r3, #14
     afc:	4618      	mov	r0, r3
     afe:	f000 fb8d 	bl	121c <HwIoAb_Pots_GetAltValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[0] );
     b02:	4b55      	ldr	r3, [pc, #340]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	89db      	ldrh	r3, [r3, #14]
     b08:	461a      	mov	r2, r3
     b0a:	4958      	ldr	r1, [pc, #352]	; (c6c <__BSS_SRAM_SIZE+0x3c>)
     b0c:	2000      	movs	r0, #0
     b0e:	f001 fbb3 	bl	2278 <SEGGER_RTT_printf>
                        break;
     b12:	e01c      	b.n	b4e <Os_100ms_Task+0x206>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     b14:	2000      	movs	r0, #0
     b16:	f000 fabd 	bl	1094 <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     b1a:	2001      	movs	r0, #1
     b1c:	f000 faba 	bl	1094 <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     b20:	2002      	movs	r0, #2
     b22:	f000 fab7 	bl	1094 <HwIoAb_Leds_TurnOff>
                            SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     b26:	4957      	ldr	r1, [pc, #348]	; (c84 <__BSS_SRAM_SIZE+0x54>)
     b28:	2000      	movs	r0, #0
     b2a:	f001 fba5 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     b2e:	4b4a      	ldr	r3, [pc, #296]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	330e      	adds	r3, #14
     b34:	4618      	mov	r0, r3
     b36:	f000 fb71 	bl	121c <HwIoAb_Pots_GetAltValue>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[1] );
     b3a:	4b47      	ldr	r3, [pc, #284]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	8a1b      	ldrh	r3, [r3, #16]
     b40:	461a      	mov	r2, r3
     b42:	494c      	ldr	r1, [pc, #304]	; (c74 <__BSS_SRAM_SIZE+0x44>)
     b44:	2000      	movs	r0, #0
     b46:	f001 fb97 	bl	2278 <SEGGER_RTT_printf>
                        break;
     b4a:	e000      	b.n	b4e <Os_100ms_Task+0x206>
                        break;
     b4c:	bf00      	nop
                break;
     b4e:	e072      	b.n	c36 <__BSS_SRAM_SIZE+0x6>
                    switch( RealEvent )
     b50:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b54:	3b01      	subs	r3, #1
     b56:	2b03      	cmp	r3, #3
     b58:	d868      	bhi.n	c2c <Os_100ms_Task+0x2e4>
     b5a:	a201      	add	r2, pc, #4	; (adr r2, b60 <Os_100ms_Task+0x218>)
     b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b60:	00000b71 	.word	0x00000b71
     b64:	00000b9d 	.word	0x00000b9d
     b68:	00000bc9 	.word	0x00000bc9
     b6c:	00000bf5 	.word	0x00000bf5
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     b70:	2000      	movs	r0, #0
     b72:	f000 fab3 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     b76:	4944      	ldr	r1, [pc, #272]	; (c88 <__BSS_SRAM_SIZE+0x58>)
     b78:	2000      	movs	r0, #0
     b7a:	f001 fb7d 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     b7e:	4b36      	ldr	r3, [pc, #216]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	330a      	adds	r3, #10
     b84:	4618      	mov	r0, r3
     b86:	f000 fae9 	bl	115c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     b8a:	4b33      	ldr	r3, [pc, #204]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	895b      	ldrh	r3, [r3, #10]
     b90:	461a      	mov	r2, r3
     b92:	4932      	ldr	r1, [pc, #200]	; (c5c <__BSS_SRAM_SIZE+0x2c>)
     b94:	2000      	movs	r0, #0
     b96:	f001 fb6f 	bl	2278 <SEGGER_RTT_printf>
                        break;
     b9a:	e048      	b.n	c2e <Os_100ms_Task+0x2e6>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     b9c:	2001      	movs	r0, #1
     b9e:	f000 fa9d 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     ba2:	493a      	ldr	r1, [pc, #232]	; (c8c <__BSS_SRAM_SIZE+0x5c>)
     ba4:	2000      	movs	r0, #0
     ba6:	f001 fb67 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     baa:	4b2b      	ldr	r3, [pc, #172]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	330a      	adds	r3, #10
     bb0:	4618      	mov	r0, r3
     bb2:	f000 fad3 	bl	115c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     bb6:	4b28      	ldr	r3, [pc, #160]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	899b      	ldrh	r3, [r3, #12]
     bbc:	461a      	mov	r2, r3
     bbe:	4929      	ldr	r1, [pc, #164]	; (c64 <__BSS_SRAM_SIZE+0x34>)
     bc0:	2000      	movs	r0, #0
     bc2:	f001 fb59 	bl	2278 <SEGGER_RTT_printf>
                        break;
     bc6:	e032      	b.n	c2e <Os_100ms_Task+0x2e6>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     bc8:	2002      	movs	r0, #2
     bca:	f000 fa87 	bl	10dc <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     bce:	4930      	ldr	r1, [pc, #192]	; (c90 <__BSS_SRAM_SIZE+0x60>)
     bd0:	2000      	movs	r0, #0
     bd2:	f001 fb51 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     bd6:	4b20      	ldr	r3, [pc, #128]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     bd8:	681b      	ldr	r3, [r3, #0]
     bda:	330e      	adds	r3, #14
     bdc:	4618      	mov	r0, r3
     bde:	f000 fb1d 	bl	121c <HwIoAb_Pots_GetAltValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[0] );
     be2:	4b1d      	ldr	r3, [pc, #116]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     be4:	681b      	ldr	r3, [r3, #0]
     be6:	89db      	ldrh	r3, [r3, #14]
     be8:	461a      	mov	r2, r3
     bea:	4920      	ldr	r1, [pc, #128]	; (c6c <__BSS_SRAM_SIZE+0x3c>)
     bec:	2000      	movs	r0, #0
     bee:	f001 fb43 	bl	2278 <SEGGER_RTT_printf>
                        break;
     bf2:	e01c      	b.n	c2e <Os_100ms_Task+0x2e6>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_BLUE_ID );
     bf4:	2000      	movs	r0, #0
     bf6:	f000 fa4d 	bl	1094 <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     bfa:	2001      	movs	r0, #1
     bfc:	f000 fa4a 	bl	1094 <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     c00:	2002      	movs	r0, #2
     c02:	f000 fa47 	bl	1094 <HwIoAb_Leds_TurnOff>
                            SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     c06:	4923      	ldr	r1, [pc, #140]	; (c94 <__BSS_SRAM_SIZE+0x64>)
     c08:	2000      	movs	r0, #0
     c0a:	f001 fb35 	bl	2278 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     c0e:	4b12      	ldr	r3, [pc, #72]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     c10:	681b      	ldr	r3, [r3, #0]
     c12:	330e      	adds	r3, #14
     c14:	4618      	mov	r0, r3
     c16:	f000 fb01 	bl	121c <HwIoAb_Pots_GetAltValue>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[1] );
     c1a:	4b0f      	ldr	r3, [pc, #60]	; (c58 <__BSS_SRAM_SIZE+0x28>)
     c1c:	681b      	ldr	r3, [r3, #0]
     c1e:	8a1b      	ldrh	r3, [r3, #16]
     c20:	461a      	mov	r2, r3
     c22:	4914      	ldr	r1, [pc, #80]	; (c74 <__BSS_SRAM_SIZE+0x44>)
     c24:	2000      	movs	r0, #0
     c26:	f001 fb27 	bl	2278 <SEGGER_RTT_printf>
                        break;
     c2a:	e000      	b.n	c2e <Os_100ms_Task+0x2e6>
                        break;
     c2c:	bf00      	nop
                break;
     c2e:	e002      	b.n	c36 <__BSS_SRAM_SIZE+0x6>
            }  
        }
     c30:	bf00      	nop
     c32:	e000      	b.n	c36 <__BSS_SRAM_SIZE+0x6>
                break;
     c34:	bf00      	nop
    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c3a:	3301      	adds	r3, #1
     c3c:	f88d 3007 	strb.w	r3, [sp, #7]
     c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c44:	2b02      	cmp	r3, #2
     c46:	f67f ae88 	bls.w	95a <Os_100ms_Task+0x12>
    }   
}
     c4a:	bf00      	nop
     c4c:	bf00      	nop
     c4e:	b003      	add	sp, #12
     c50:	f85d fb04 	ldr.w	pc, [sp], #4
     c54:	000111f4 	.word	0x000111f4
     c58:	1fff8b40 	.word	0x1fff8b40
     c5c:	00011214 	.word	0x00011214
     c60:	00011240 	.word	0x00011240
     c64:	00011260 	.word	0x00011260
     c68:	0001128c 	.word	0x0001128c
     c6c:	000112ac 	.word	0x000112ac
     c70:	000112d8 	.word	0x000112d8
     c74:	000112f4 	.word	0x000112f4
     c78:	00011320 	.word	0x00011320
     c7c:	00011340 	.word	0x00011340
     c80:	00011360 	.word	0x00011360
     c84:	00011380 	.word	0x00011380
     c88:	0001139c 	.word	0x0001139c
     c8c:	000113bc 	.word	0x000113bc
     c90:	000113dc 	.word	0x000113dc
     c94:	000113fc 	.word	0x000113fc

00000c98 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     c98:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c9a:	f3ef 8310 	mrs	r3, PRIMASK
     c9e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     ca0:	4623      	mov	r3, r4
}
     ca2:	4618      	mov	r0, r3
     ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
     ca8:	4770      	bx	lr

00000caa <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     caa:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     cac:	f3ef 8310 	mrs	r3, PRIMASK
     cb0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     cb2:	4623      	mov	r3, r4
}
     cb4:	4618      	mov	r0, r3
     cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
     cba:	4770      	bx	lr

00000cbc <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     cbc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     cbe:	f3ef 8310 	mrs	r3, PRIMASK
     cc2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     cc4:	4623      	mov	r3, r4
}
     cc6:	4618      	mov	r0, r3
     cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
     ccc:	4770      	bx	lr

00000cce <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     cce:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     cd0:	f3ef 8310 	mrs	r3, PRIMASK
     cd4:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     cd6:	4623      	mov	r3, r4
}
     cd8:	4618      	mov	r0, r3
     cda:	f85d 4b04 	ldr.w	r4, [sp], #4
     cde:	4770      	bx	lr

00000ce0 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     ce0:	b084      	sub	sp, #16
     ce2:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     ce4:	4b16      	ldr	r3, [pc, #88]	; (d40 <HwIoAb_Buttons_Init+0x60>)
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	2203      	movs	r2, #3
     cea:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     cec:	4b14      	ldr	r3, [pc, #80]	; (d40 <HwIoAb_Buttons_Init+0x60>)
     cee:	681b      	ldr	r3, [r3, #0]
     cf0:	9a01      	ldr	r2, [sp, #4]
     cf2:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     cf4:	2300      	movs	r3, #0
     cf6:	f88d 300f 	strb.w	r3, [sp, #15]
     cfa:	e012      	b.n	d22 <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     cfc:	4b10      	ldr	r3, [pc, #64]	; (d40 <HwIoAb_Buttons_Init+0x60>)
     cfe:	681a      	ldr	r2, [r3, #0]
     d00:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d04:	4413      	add	r3, r2
     d06:	2200      	movs	r2, #0
     d08:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     d0a:	4b0d      	ldr	r3, [pc, #52]	; (d40 <HwIoAb_Buttons_Init+0x60>)
     d0c:	681a      	ldr	r2, [r3, #0]
     d0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d12:	4413      	add	r3, r2
     d14:	2200      	movs	r2, #0
     d16:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     d18:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d1c:	3301      	adds	r3, #1
     d1e:	f88d 300f 	strb.w	r3, [sp, #15]
     d22:	4b07      	ldr	r3, [pc, #28]	; (d40 <HwIoAb_Buttons_Init+0x60>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	781b      	ldrb	r3, [r3, #0]
     d28:	f89d 200f 	ldrb.w	r2, [sp, #15]
     d2c:	429a      	cmp	r2, r3
     d2e:	d3e5      	bcc.n	cfc <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     d30:	4b03      	ldr	r3, [pc, #12]	; (d40 <HwIoAb_Buttons_Init+0x60>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	2201      	movs	r2, #1
     d36:	739a      	strb	r2, [r3, #14]
}
     d38:	bf00      	nop
     d3a:	b004      	add	sp, #16
     d3c:	4770      	bx	lr
     d3e:	bf00      	nop
     d40:	1fff8b38 	.word	0x1fff8b38

00000d44 <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     d44:	b084      	sub	sp, #16
     d46:	4603      	mov	r3, r0
     d48:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     d4c:	2300      	movs	r3, #0
     d4e:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     d52:	4b0a      	ldr	r3, [pc, #40]	; (d7c <HwIoAb_Buttons_GetEvent+0x38>)
     d54:	681a      	ldr	r2, [r3, #0]
     d56:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d5a:	4413      	add	r3, r2
     d5c:	7adb      	ldrb	r3, [r3, #11]
     d5e:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     d62:	4b06      	ldr	r3, [pc, #24]	; (d7c <HwIoAb_Buttons_GetEvent+0x38>)
     d64:	681a      	ldr	r2, [r3, #0]
     d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d6a:	4413      	add	r3, r2
     d6c:	2200      	movs	r2, #0
     d6e:	72da      	strb	r2, [r3, #11]
    return temp;
     d70:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     d74:	4618      	mov	r0, r3
     d76:	b004      	add	sp, #16
     d78:	4770      	bx	lr
     d7a:	bf00      	nop
     d7c:	1fff8b38 	.word	0x1fff8b38

00000d80 <HwIoAb_Buttons_MainFunction>:
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void )
{
     d80:	b500      	push	{lr}
     d82:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     d84:	2300      	movs	r3, #0
     d86:	f88d 3007 	strb.w	r3, [sp, #7]
     d8a:	e15d      	b.n	1048 <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     d8c:	4bb5      	ldr	r3, [pc, #724]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d8e:	681a      	ldr	r2, [r3, #0]
     d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d94:	4413      	add	r3, r2
     d96:	7a1b      	ldrb	r3, [r3, #8]
     d98:	2b04      	cmp	r3, #4
     d9a:	f200 8145 	bhi.w	1028 <HwIoAb_Buttons_MainFunction+0x2a8>
     d9e:	a201      	add	r2, pc, #4	; (adr r2, da4 <HwIoAb_Buttons_MainFunction+0x24>)
     da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     da4:	00000db9 	.word	0x00000db9
     da8:	00000e05 	.word	0x00000e05
     dac:	00000f2d 	.word	0x00000f2d
     db0:	00000fc5 	.word	0x00000fc5
     db4:	00000e91 	.word	0x00000e91
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     db8:	4baa      	ldr	r3, [pc, #680]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	685a      	ldr	r2, [r3, #4]
     dbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dc2:	00db      	lsls	r3, r3, #3
     dc4:	4413      	add	r3, r2
     dc6:	881b      	ldrh	r3, [r3, #0]
     dc8:	4618      	mov	r0, r3
     dca:	f006 fbb1 	bl	7530 <Dio_ReadChannel>
     dce:	4603      	mov	r3, r0
     dd0:	4619      	mov	r1, r3
     dd2:	4ba4      	ldr	r3, [pc, #656]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	685a      	ldr	r2, [r3, #4]
     dd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ddc:	00db      	lsls	r3, r3, #3
     dde:	4413      	add	r3, r2
     de0:	789b      	ldrb	r3, [r3, #2]
     de2:	4299      	cmp	r1, r3
     de4:	f040 8122 	bne.w	102c <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     de8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dec:	4a9e      	ldr	r2, [pc, #632]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dee:	2100      	movs	r1, #0
     df0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     df4:	4b9b      	ldr	r3, [pc, #620]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     df6:	681a      	ldr	r2, [r3, #0]
     df8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dfc:	4413      	add	r3, r2
     dfe:	2201      	movs	r2, #1
     e00:	721a      	strb	r2, [r3, #8]

                }
            break;
     e02:	e113      	b.n	102c <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     e04:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e08:	4a97      	ldr	r2, [pc, #604]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e12:	3232      	adds	r2, #50	; 0x32
     e14:	4994      	ldr	r1, [pc, #592]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e1e:	4a92      	ldr	r2, [pc, #584]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e24:	4b8f      	ldr	r3, [pc, #572]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	6859      	ldr	r1, [r3, #4]
     e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e2e:	00db      	lsls	r3, r3, #3
     e30:	440b      	add	r3, r1
     e32:	685b      	ldr	r3, [r3, #4]
     e34:	429a      	cmp	r2, r3
     e36:	d106      	bne.n	e46 <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     e38:	4b8a      	ldr	r3, [pc, #552]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e3a:	681a      	ldr	r2, [r3, #0]
     e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e40:	4413      	add	r3, r2
     e42:	2203      	movs	r2, #3
     e44:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e46:	4b87      	ldr	r3, [pc, #540]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	685a      	ldr	r2, [r3, #4]
     e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e50:	00db      	lsls	r3, r3, #3
     e52:	4413      	add	r3, r2
     e54:	881b      	ldrh	r3, [r3, #0]
     e56:	4618      	mov	r0, r3
     e58:	f006 fb6a 	bl	7530 <Dio_ReadChannel>
     e5c:	4603      	mov	r3, r0
     e5e:	4619      	mov	r1, r3
     e60:	4b80      	ldr	r3, [pc, #512]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	685a      	ldr	r2, [r3, #4]
     e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e6a:	00db      	lsls	r3, r3, #3
     e6c:	4413      	add	r3, r2
     e6e:	789b      	ldrb	r3, [r3, #2]
     e70:	2b00      	cmp	r3, #0
     e72:	bf0c      	ite	eq
     e74:	2301      	moveq	r3, #1
     e76:	2300      	movne	r3, #0
     e78:	b2db      	uxtb	r3, r3
     e7a:	4299      	cmp	r1, r3
     e7c:	f040 80d8 	bne.w	1030 <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     e80:	4b78      	ldr	r3, [pc, #480]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e82:	681a      	ldr	r2, [r3, #0]
     e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e88:	4413      	add	r3, r2
     e8a:	2204      	movs	r2, #4
     e8c:	721a      	strb	r2, [r3, #8]
                }    
            break;
     e8e:	e0cf      	b.n	1030 <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e94:	4a74      	ldr	r2, [pc, #464]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e9e:	3232      	adds	r2, #50	; 0x32
     ea0:	4971      	ldr	r1, [pc, #452]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eaa:	4a6f      	ldr	r2, [pc, #444]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     eac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     eb0:	4b6c      	ldr	r3, [pc, #432]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     eb2:	681b      	ldr	r3, [r3, #0]
     eb4:	6859      	ldr	r1, [r3, #4]
     eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eba:	00db      	lsls	r3, r3, #3
     ebc:	440b      	add	r3, r1
     ebe:	685b      	ldr	r3, [r3, #4]
     ec0:	429a      	cmp	r2, r3
     ec2:	d10d      	bne.n	ee0 <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     ec4:	4b67      	ldr	r3, [pc, #412]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ec6:	681a      	ldr	r2, [r3, #0]
     ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ecc:	4413      	add	r3, r2
     ece:	2201      	movs	r2, #1
     ed0:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     ed2:	4b64      	ldr	r3, [pc, #400]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ed4:	681a      	ldr	r2, [r3, #0]
     ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eda:	4413      	add	r3, r2
     edc:	2200      	movs	r2, #0
     ede:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     ee0:	4b60      	ldr	r3, [pc, #384]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	685a      	ldr	r2, [r3, #4]
     ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eea:	00db      	lsls	r3, r3, #3
     eec:	4413      	add	r3, r2
     eee:	881b      	ldrh	r3, [r3, #0]
     ef0:	4618      	mov	r0, r3
     ef2:	f006 fb1d 	bl	7530 <Dio_ReadChannel>
     ef6:	4603      	mov	r3, r0
     ef8:	4619      	mov	r1, r3
     efa:	4b5a      	ldr	r3, [pc, #360]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	685a      	ldr	r2, [r3, #4]
     f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f04:	00db      	lsls	r3, r3, #3
     f06:	4413      	add	r3, r2
     f08:	789b      	ldrb	r3, [r3, #2]
     f0a:	4299      	cmp	r1, r3
     f0c:	f040 8092 	bne.w	1034 <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     f10:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f14:	4a54      	ldr	r2, [pc, #336]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f16:	2100      	movs	r1, #0
     f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     f1c:	4b51      	ldr	r3, [pc, #324]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f1e:	681a      	ldr	r2, [r3, #0]
     f20:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f24:	4413      	add	r3, r2
     f26:	2202      	movs	r2, #2
     f28:	721a      	strb	r2, [r3, #8]
                } 
            break;
     f2a:	e083      	b.n	1034 <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     f2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f30:	4a4d      	ldr	r2, [pc, #308]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f36:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f3a:	3232      	adds	r2, #50	; 0x32
     f3c:	494a      	ldr	r1, [pc, #296]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     f42:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f46:	4a48      	ldr	r2, [pc, #288]	; (1068 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f4c:	4b45      	ldr	r3, [pc, #276]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f4e:	681b      	ldr	r3, [r3, #0]
     f50:	6859      	ldr	r1, [r3, #4]
     f52:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f56:	00db      	lsls	r3, r3, #3
     f58:	440b      	add	r3, r1
     f5a:	685b      	ldr	r3, [r3, #4]
     f5c:	429a      	cmp	r2, r3
     f5e:	d106      	bne.n	f6e <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     f60:	4b40      	ldr	r3, [pc, #256]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f62:	681a      	ldr	r2, [r3, #0]
     f64:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f68:	4413      	add	r3, r2
     f6a:	2203      	movs	r2, #3
     f6c:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     f6e:	4b3d      	ldr	r3, [pc, #244]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	685a      	ldr	r2, [r3, #4]
     f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f78:	00db      	lsls	r3, r3, #3
     f7a:	4413      	add	r3, r2
     f7c:	881b      	ldrh	r3, [r3, #0]
     f7e:	4618      	mov	r0, r3
     f80:	f006 fad6 	bl	7530 <Dio_ReadChannel>
     f84:	4603      	mov	r3, r0
     f86:	4619      	mov	r1, r3
     f88:	4b36      	ldr	r3, [pc, #216]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	685a      	ldr	r2, [r3, #4]
     f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f92:	00db      	lsls	r3, r3, #3
     f94:	4413      	add	r3, r2
     f96:	789b      	ldrb	r3, [r3, #2]
     f98:	2b00      	cmp	r3, #0
     f9a:	bf0c      	ite	eq
     f9c:	2301      	moveq	r3, #1
     f9e:	2300      	movne	r3, #0
     fa0:	b2db      	uxtb	r3, r3
     fa2:	4299      	cmp	r1, r3
     fa4:	d148      	bne.n	1038 <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     fa6:	4b2f      	ldr	r3, [pc, #188]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fa8:	681a      	ldr	r2, [r3, #0]
     faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fae:	4413      	add	r3, r2
     fb0:	2202      	movs	r2, #2
     fb2:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     fb4:	4b2b      	ldr	r3, [pc, #172]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fb6:	681a      	ldr	r2, [r3, #0]
     fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fbc:	4413      	add	r3, r2
     fbe:	2200      	movs	r2, #0
     fc0:	721a      	strb	r2, [r3, #8]
                } 
            break;
     fc2:	e039      	b.n	1038 <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     fc4:	4b27      	ldr	r3, [pc, #156]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fc6:	681a      	ldr	r2, [r3, #0]
     fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fcc:	4413      	add	r3, r2
     fce:	2203      	movs	r2, #3
     fd0:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     fd2:	4b24      	ldr	r3, [pc, #144]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	685a      	ldr	r2, [r3, #4]
     fd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fdc:	00db      	lsls	r3, r3, #3
     fde:	4413      	add	r3, r2
     fe0:	881b      	ldrh	r3, [r3, #0]
     fe2:	4618      	mov	r0, r3
     fe4:	f006 faa4 	bl	7530 <Dio_ReadChannel>
     fe8:	4603      	mov	r3, r0
     fea:	4619      	mov	r1, r3
     fec:	4b1d      	ldr	r3, [pc, #116]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	685a      	ldr	r2, [r3, #4]
     ff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ff6:	00db      	lsls	r3, r3, #3
     ff8:	4413      	add	r3, r2
     ffa:	789b      	ldrb	r3, [r3, #2]
     ffc:	2b00      	cmp	r3, #0
     ffe:	bf0c      	ite	eq
    1000:	2301      	moveq	r3, #1
    1002:	2300      	movne	r3, #0
    1004:	b2db      	uxtb	r3, r3
    1006:	4299      	cmp	r1, r3
    1008:	d118      	bne.n	103c <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    100a:	4b16      	ldr	r3, [pc, #88]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
    100c:	681a      	ldr	r2, [r3, #0]
    100e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1012:	4413      	add	r3, r2
    1014:	2204      	movs	r2, #4
    1016:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1018:	4b12      	ldr	r3, [pc, #72]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
    101a:	681a      	ldr	r2, [r3, #0]
    101c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1020:	4413      	add	r3, r2
    1022:	2200      	movs	r2, #0
    1024:	721a      	strb	r2, [r3, #8]
                }
            break;
    1026:	e009      	b.n	103c <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
    1028:	bf00      	nop
    102a:	e008      	b.n	103e <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    102c:	bf00      	nop
    102e:	e006      	b.n	103e <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    1030:	bf00      	nop
    1032:	e004      	b.n	103e <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    1034:	bf00      	nop
    1036:	e002      	b.n	103e <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    1038:	bf00      	nop
    103a:	e000      	b.n	103e <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    103c:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
    103e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1042:	3301      	adds	r3, #1
    1044:	f88d 3007 	strb.w	r3, [sp, #7]
    1048:	4b06      	ldr	r3, [pc, #24]	; (1064 <HwIoAb_Buttons_MainFunction+0x2e4>)
    104a:	681b      	ldr	r3, [r3, #0]
    104c:	781b      	ldrb	r3, [r3, #0]
    104e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1052:	429a      	cmp	r2, r3
    1054:	f4ff ae9a 	bcc.w	d8c <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
    1058:	bf00      	nop
    105a:	bf00      	nop
    105c:	b003      	add	sp, #12
    105e:	f85d fb04 	ldr.w	pc, [sp], #4
    1062:	bf00      	nop
    1064:	1fff8b38 	.word	0x1fff8b38
    1068:	1fff9244 	.word	0x1fff9244

0000106c <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
    106c:	b082      	sub	sp, #8
    106e:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
    1070:	4b07      	ldr	r3, [pc, #28]	; (1090 <HwIoAb_Leds_Init+0x24>)
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	2203      	movs	r2, #3
    1076:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1078:	4b05      	ldr	r3, [pc, #20]	; (1090 <HwIoAb_Leds_Init+0x24>)
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	9a01      	ldr	r2, [sp, #4]
    107e:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
    1080:	4b03      	ldr	r3, [pc, #12]	; (1090 <HwIoAb_Leds_Init+0x24>)
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	2201      	movs	r2, #1
    1086:	721a      	strb	r2, [r3, #8]
}
    1088:	bf00      	nop
    108a:	b002      	add	sp, #8
    108c:	4770      	bx	lr
    108e:	bf00      	nop
    1090:	1fff8b3c 	.word	0x1fff8b3c

00001094 <HwIoAb_Leds_TurnOff>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnOff( uint8 Led ) 
{
    1094:	b500      	push	{lr}
    1096:	b083      	sub	sp, #12
    1098:	4603      	mov	r3, r0
    109a:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_WriteChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led, !LedsControl_Ptr->LedsConfig_Ptr[ Led ].Active );
    109e:	4b0e      	ldr	r3, [pc, #56]	; (10d8 <HwIoAb_Leds_TurnOff+0x44>)
    10a0:	681b      	ldr	r3, [r3, #0]
    10a2:	685a      	ldr	r2, [r3, #4]
    10a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10a8:	009b      	lsls	r3, r3, #2
    10aa:	4413      	add	r3, r2
    10ac:	8818      	ldrh	r0, [r3, #0]
    10ae:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <HwIoAb_Leds_TurnOff+0x44>)
    10b0:	681b      	ldr	r3, [r3, #0]
    10b2:	685a      	ldr	r2, [r3, #4]
    10b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10b8:	009b      	lsls	r3, r3, #2
    10ba:	4413      	add	r3, r2
    10bc:	789b      	ldrb	r3, [r3, #2]
    10be:	2b00      	cmp	r3, #0
    10c0:	bf0c      	ite	eq
    10c2:	2301      	moveq	r3, #1
    10c4:	2300      	movne	r3, #0
    10c6:	b2db      	uxtb	r3, r3
    10c8:	4619      	mov	r1, r3
    10ca:	f006 fa47 	bl	755c <Dio_WriteChannel>
}
    10ce:	bf00      	nop
    10d0:	b003      	add	sp, #12
    10d2:	f85d fb04 	ldr.w	pc, [sp], #4
    10d6:	bf00      	nop
    10d8:	1fff8b3c 	.word	0x1fff8b3c

000010dc <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
    10dc:	b500      	push	{lr}
    10de:	b083      	sub	sp, #12
    10e0:	4603      	mov	r3, r0
    10e2:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    10e6:	4b07      	ldr	r3, [pc, #28]	; (1104 <HwIoAb_Leds_TurnToggle+0x28>)
    10e8:	681b      	ldr	r3, [r3, #0]
    10ea:	685a      	ldr	r2, [r3, #4]
    10ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10f0:	009b      	lsls	r3, r3, #2
    10f2:	4413      	add	r3, r2
    10f4:	881b      	ldrh	r3, [r3, #0]
    10f6:	4618      	mov	r0, r3
    10f8:	f006 fa45 	bl	7586 <Dio_FlipChannel>
}
    10fc:	bf00      	nop
    10fe:	b003      	add	sp, #12
    1100:	f85d fb04 	ldr.w	pc, [sp], #4
    1104:	1fff8b3c 	.word	0x1fff8b3c

00001108 <HwIoAb_Pots_Init>:
 * @param Pots_Config Pointer to configuration array.
 * 
 * @note Hardware interleave for pins PTB1 and PTB13 is done in EcuM_Init(). 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config * Pots_Config )
{
    1108:	b500      	push	{lr}
    110a:	b085      	sub	sp, #20
    110c:	9001      	str	r0, [sp, #4]
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    /* Calibrating ADC modules */
    Adc_Calibrate( ADC0HwUnit, &Calib_Status_ADC0 );
    110e:	ab03      	add	r3, sp, #12
    1110:	4619      	mov	r1, r3
    1112:	2000      	movs	r0, #0
    1114:	f007 fdca 	bl	8cac <Adc_Calibrate>
    Adc_Calibrate( ADC1HwUnit, &Calib_Status_ADC1 );
    1118:	ab02      	add	r3, sp, #8
    111a:	4619      	mov	r1, r3
    111c:	2001      	movs	r0, #1
    111e:	f007 fdc5 	bl	8cac <Adc_Calibrate>

    /* Initializing raw results array/buffer */
    Adc_SetupResultBuffer( ADC0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    1122:	4b0d      	ldr	r3, [pc, #52]	; (1158 <HwIoAb_Pots_Init+0x50>)
    1124:	681b      	ldr	r3, [r3, #0]
    1126:	3302      	adds	r3, #2
    1128:	4619      	mov	r1, r3
    112a:	2000      	movs	r0, #0
    112c:	f007 fb60 	bl	87f0 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( ADC1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    1130:	4b09      	ldr	r3, [pc, #36]	; (1158 <HwIoAb_Pots_Init+0x50>)
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	3306      	adds	r3, #6
    1136:	4619      	mov	r1, r3
    1138:	2001      	movs	r0, #1
    113a:	f007 fb59 	bl	87f0 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS_MAX;
    113e:	4b06      	ldr	r3, [pc, #24]	; (1158 <HwIoAb_Pots_Init+0x50>)
    1140:	681b      	ldr	r3, [r3, #0]
    1142:	2202      	movs	r2, #2
    1144:	701a      	strb	r2, [r3, #0]
    PotsControl_Ptr->Pots_init = TRUE;
    1146:	4b04      	ldr	r3, [pc, #16]	; (1158 <HwIoAb_Pots_Init+0x50>)
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	2201      	movs	r2, #1
    114c:	749a      	strb	r2, [r3, #18]
}
    114e:	bf00      	nop
    1150:	b005      	add	sp, #20
    1152:	f85d fb04 	ldr.w	pc, [sp], #4
    1156:	bf00      	nop
    1158:	1fff8b40 	.word	0x1fff8b40

0000115c <HwIoAb_Pots_GetValue>:
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) 
{
    115c:	b500      	push	{lr}
    115e:	b085      	sub	sp, #20
    1160:	9001      	str	r0, [sp, #4]
    /* Software trigger conversion */
    Adc_StartGroupConversion( ADC0Group_0 );
    1162:	2000      	movs	r0, #0
    1164:	f007 fbde 	bl	8924 <Adc_StartGroupConversion>
    /* Wait until the conversion is done */
    while( Adc_GetGroupStatus( ADC0Group_0 ) == ADC_BUSY );
    1168:	bf00      	nop
    116a:	2000      	movs	r0, #0
    116c:	f007 fcb7 	bl	8ade <Adc_GetGroupStatus>
    1170:	4603      	mov	r3, r0
    1172:	2b01      	cmp	r3, #1
    1174:	d0f9      	beq.n	116a <HwIoAb_Pots_GetValue+0xe>
    /* Reading group conversion values and storing them to the raw result array */
    Adc_ReadGroup( ADC0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); 
    1176:	4b26      	ldr	r3, [pc, #152]	; (1210 <HwIoAb_Pots_GetValue+0xb4>)
    1178:	681b      	ldr	r3, [r3, #0]
    117a:	3302      	adds	r3, #2
    117c:	4619      	mov	r1, r3
    117e:	2000      	movs	r0, #0
    1180:	f007 fc68 	bl	8a54 <Adc_ReadGroup>

    /* Calculating resistance of each Pot */
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    1184:	2300      	movs	r3, #0
    1186:	f88d 300f 	strb.w	r3, [sp, #15]
    118a:	e034      	b.n	11f6 <HwIoAb_Pots_GetValue+0x9a>
    {
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12B_RES );
    118c:	4b20      	ldr	r3, [pc, #128]	; (1210 <HwIoAb_Pots_GetValue+0xb4>)
    118e:	681a      	ldr	r2, [r3, #0]
    1190:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1194:	005b      	lsls	r3, r3, #1
    1196:	4413      	add	r3, r2
    1198:	885b      	ldrh	r3, [r3, #2]
    119a:	ee07 3a90 	vmov	s15, r3
    119e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    11a2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 1214 <HwIoAb_Pots_GetValue+0xb8>
    11a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    11aa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 1218 <HwIoAb_Pots_GetValue+0xbc>
    11ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    11b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11b6:	005b      	lsls	r3, r3, #1
    11b8:	9a01      	ldr	r2, [sp, #4]
    11ba:	4413      	add	r3, r2
    11bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    11c0:	ee17 2a90 	vmov	r2, s15
    11c4:	b292      	uxth	r2, r2
    11c6:	801a      	strh	r2, [r3, #0]

        /* Locking value if needed*/
        if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) 
    11c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	9a01      	ldr	r2, [sp, #4]
    11d0:	4413      	add	r3, r2
    11d2:	881b      	ldrh	r3, [r3, #0]
    11d4:	f242 7210 	movw	r2, #10000	; 0x2710
    11d8:	4293      	cmp	r3, r2
    11da:	d907      	bls.n	11ec <HwIoAb_Pots_GetValue+0x90>
        { 
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    11dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11e0:	005b      	lsls	r3, r3, #1
    11e2:	9a01      	ldr	r2, [sp, #4]
    11e4:	4413      	add	r3, r2
    11e6:	f242 7210 	movw	r2, #10000	; 0x2710
    11ea:	801a      	strh	r2, [r3, #0]
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    11ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11f0:	3301      	adds	r3, #1
    11f2:	f88d 300f 	strb.w	r3, [sp, #15]
    11f6:	4b06      	ldr	r3, [pc, #24]	; (1210 <HwIoAb_Pots_GetValue+0xb4>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	781b      	ldrb	r3, [r3, #0]
    11fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1200:	429a      	cmp	r2, r3
    1202:	d3c3      	bcc.n	118c <HwIoAb_Pots_GetValue+0x30>
        }
    }
}
    1204:	bf00      	nop
    1206:	bf00      	nop
    1208:	b005      	add	sp, #20
    120a:	f85d fb04 	ldr.w	pc, [sp], #4
    120e:	bf00      	nop
    1210:	1fff8b40 	.word	0x1fff8b40
    1214:	4528f000 	.word	0x4528f000
    1218:	461c4000 	.word	0x461c4000

0000121c <HwIoAb_Pots_GetAltValue>:
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) 
{
    121c:	b500      	push	{lr}
    121e:	b085      	sub	sp, #20
    1220:	9001      	str	r0, [sp, #4]
    /* Software trigger conversion */
    Adc_StartGroupConversion( ADC1Group_0 );
    1222:	2001      	movs	r0, #1
    1224:	f007 fb7e 	bl	8924 <Adc_StartGroupConversion>
    /* Wait until the conversion is done */
    while( Adc_GetGroupStatus( ADC1Group_0 ) == ADC_BUSY );
    1228:	bf00      	nop
    122a:	2001      	movs	r0, #1
    122c:	f007 fc57 	bl	8ade <Adc_GetGroupStatus>
    1230:	4603      	mov	r3, r0
    1232:	2b01      	cmp	r3, #1
    1234:	d0f9      	beq.n	122a <HwIoAb_Pots_GetAltValue+0xe>
    /* Reading group conversion values and storing them to the raw result array */
    Adc_ReadGroup( ADC1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); 
    1236:	4b26      	ldr	r3, [pc, #152]	; (12d0 <HwIoAb_Pots_GetAltValue+0xb4>)
    1238:	681b      	ldr	r3, [r3, #0]
    123a:	3306      	adds	r3, #6
    123c:	4619      	mov	r1, r3
    123e:	2001      	movs	r0, #1
    1240:	f007 fc08 	bl	8a54 <Adc_ReadGroup>

    /* Calculating resistance of each Pot */
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    1244:	2300      	movs	r3, #0
    1246:	f88d 300f 	strb.w	r3, [sp, #15]
    124a:	e034      	b.n	12b6 <HwIoAb_Pots_GetAltValue+0x9a>
    {
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12B_RES );
    124c:	4b20      	ldr	r3, [pc, #128]	; (12d0 <HwIoAb_Pots_GetAltValue+0xb4>)
    124e:	681a      	ldr	r2, [r3, #0]
    1250:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1254:	005b      	lsls	r3, r3, #1
    1256:	4413      	add	r3, r2
    1258:	88db      	ldrh	r3, [r3, #6]
    125a:	ee07 3a90 	vmov	s15, r3
    125e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1262:	eddf 6a1c 	vldr	s13, [pc, #112]	; 12d4 <HwIoAb_Pots_GetAltValue+0xb8>
    1266:	eec7 7a26 	vdiv.f32	s15, s14, s13
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    126a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 12d8 <HwIoAb_Pots_GetAltValue+0xbc>
    126e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1272:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1276:	005b      	lsls	r3, r3, #1
    1278:	9a01      	ldr	r2, [sp, #4]
    127a:	4413      	add	r3, r2
    127c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1280:	ee17 2a90 	vmov	r2, s15
    1284:	b292      	uxth	r2, r2
    1286:	801a      	strh	r2, [r3, #0]

        /* Locking value if needed*/
        if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) 
    1288:	f89d 300f 	ldrb.w	r3, [sp, #15]
    128c:	005b      	lsls	r3, r3, #1
    128e:	9a01      	ldr	r2, [sp, #4]
    1290:	4413      	add	r3, r2
    1292:	881b      	ldrh	r3, [r3, #0]
    1294:	f242 7210 	movw	r2, #10000	; 0x2710
    1298:	4293      	cmp	r3, r2
    129a:	d907      	bls.n	12ac <HwIoAb_Pots_GetAltValue+0x90>
        { 
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    129c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    12a0:	005b      	lsls	r3, r3, #1
    12a2:	9a01      	ldr	r2, [sp, #4]
    12a4:	4413      	add	r3, r2
    12a6:	f242 7210 	movw	r2, #10000	; 0x2710
    12aa:	801a      	strh	r2, [r3, #0]
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    12ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    12b0:	3301      	adds	r3, #1
    12b2:	f88d 300f 	strb.w	r3, [sp, #15]
    12b6:	4b06      	ldr	r3, [pc, #24]	; (12d0 <HwIoAb_Pots_GetAltValue+0xb4>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    12c0:	429a      	cmp	r2, r3
    12c2:	d3c3      	bcc.n	124c <HwIoAb_Pots_GetAltValue+0x30>
        }
    }
}
    12c4:	bf00      	nop
    12c6:	bf00      	nop
    12c8:	b005      	add	sp, #20
    12ca:	f85d fb04 	ldr.w	pc, [sp], #4
    12ce:	bf00      	nop
    12d0:	1fff8b40 	.word	0x1fff8b40
    12d4:	4528f000 	.word	0x4528f000
    12d8:	461c4000 	.word	0x461c4000

000012dc <Bfx_SetBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00001, SWS_Bfx_00002, SWS_Bfx_00008
 */
void Bfx_SetBit_u32u8( uint32 *Data, uint8 BitPn )
{
    12dc:	b082      	sub	sp, #8
    12de:	9001      	str	r0, [sp, #4]
    12e0:	460b      	mov	r3, r1
    12e2:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1u << BitPn );
    12e6:	9b01      	ldr	r3, [sp, #4]
    12e8:	681a      	ldr	r2, [r3, #0]
    12ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    12ee:	2101      	movs	r1, #1
    12f0:	fa01 f303 	lsl.w	r3, r1, r3
    12f4:	431a      	orrs	r2, r3
    12f6:	9b01      	ldr	r3, [sp, #4]
    12f8:	601a      	str	r2, [r3, #0]
}
    12fa:	bf00      	nop
    12fc:	b002      	add	sp, #8
    12fe:	4770      	bx	lr

00001300 <Bfx_ClrBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
 */
void Bfx_ClrBit_u32u8( uint32 *Data, uint8 BitPn )
{
    1300:	b082      	sub	sp, #8
    1302:	9001      	str	r0, [sp, #4]
    1304:	460b      	mov	r3, r1
    1306:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1u << BitPn );
    130a:	9b01      	ldr	r3, [sp, #4]
    130c:	681a      	ldr	r2, [r3, #0]
    130e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1312:	2101      	movs	r1, #1
    1314:	fa01 f303 	lsl.w	r3, r1, r3
    1318:	43db      	mvns	r3, r3
    131a:	401a      	ands	r2, r3
    131c:	9b01      	ldr	r3, [sp, #4]
    131e:	601a      	str	r2, [r3, #0]
}
    1320:	bf00      	nop
    1322:	b002      	add	sp, #8
    1324:	4770      	bx	lr

00001326 <Bfx_GetBit_u32u8_u8>:
 * @retval Boolean Bit status
 *
 * @reqs    SWS_Bfx_00016, SWS_Bfx_00017, SWS_Bfx_00020
 */
boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn )
{
    1326:	b082      	sub	sp, #8
    1328:	9001      	str	r0, [sp, #4]
    132a:	460b      	mov	r3, r1
    132c:	f88d 3003 	strb.w	r3, [sp, #3]
    return ( ( Data & ( 1u << BitPn ) ) != 0u );
    1330:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1334:	2201      	movs	r2, #1
    1336:	409a      	lsls	r2, r3
    1338:	9b01      	ldr	r3, [sp, #4]
    133a:	4013      	ands	r3, r2
    133c:	2b00      	cmp	r3, #0
    133e:	bf14      	ite	ne
    1340:	2301      	movne	r3, #1
    1342:	2300      	moveq	r3, #0
    1344:	b2db      	uxtb	r3, r3
}
    1346:	4618      	mov	r0, r3
    1348:	b002      	add	sp, #8
    134a:	4770      	bx	lr

0000134c <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Source data
 *
 * @reqs    SWS_Bfx_00130, SWS_Bfx_00132
 */
void Bfx_PutBit_u32u8u8( uint32 *Data, uint8 BitPn, boolean Status )
{
    134c:	b082      	sub	sp, #8
    134e:	9001      	str	r0, [sp, #4]
    1350:	460b      	mov	r3, r1
    1352:	f88d 3003 	strb.w	r3, [sp, #3]
    1356:	4613      	mov	r3, r2
    1358:	f88d 3002 	strb.w	r3, [sp, #2]
    if( Status == TRUE )
    135c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    1360:	2b00      	cmp	r3, #0
    1362:	d00a      	beq.n	137a <Bfx_PutBit_u32u8u8+0x2e>
    {
        *Data |= ( 1u << BitPn );
    1364:	9b01      	ldr	r3, [sp, #4]
    1366:	681a      	ldr	r2, [r3, #0]
    1368:	f89d 3003 	ldrb.w	r3, [sp, #3]
    136c:	2101      	movs	r1, #1
    136e:	fa01 f303 	lsl.w	r3, r1, r3
    1372:	431a      	orrs	r2, r3
    1374:	9b01      	ldr	r3, [sp, #4]
    1376:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *Data &= ~( 1u << BitPn );
    }
}
    1378:	e00a      	b.n	1390 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1u << BitPn );
    137a:	9b01      	ldr	r3, [sp, #4]
    137c:	681a      	ldr	r2, [r3, #0]
    137e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1382:	2101      	movs	r1, #1
    1384:	fa01 f303 	lsl.w	r3, r1, r3
    1388:	43db      	mvns	r3, r3
    138a:	401a      	ands	r2, r3
    138c:	9b01      	ldr	r3, [sp, #4]
    138e:	601a      	str	r2, [r3, #0]
}
    1390:	bf00      	nop
    1392:	b002      	add	sp, #8
    1394:	4770      	bx	lr
	...

00001398 <Scheduler_Init>:
 * value for the arguments.
 *
 * @param   scheduler  Scheduler control structure
 */
void Scheduler_Init( const Scheduler_ConfigType *SchedulerPtr )
{
    1398:	b500      	push	{lr}
    139a:	b085      	sub	sp, #20
    139c:	9001      	str	r0, [sp, #4]
    SchedulerControl.TaskFlags = 0u;
    139e:	4b56      	ldr	r3, [pc, #344]	; (14f8 <Scheduler_Init+0x160>)
    13a0:	2200      	movs	r2, #0
    13a2:	641a      	str	r2, [r3, #64]	; 0x40
    SchedulerControl.TimerFlags = 0u;
    13a4:	4b54      	ldr	r3, [pc, #336]	; (14f8 <Scheduler_Init+0x160>)
    13a6:	2200      	movs	r2, #0
    13a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
    13aa:	2300      	movs	r3, #0
    13ac:	f88d 300f 	strb.w	r3, [sp, #15]
    13b0:	e02f      	b.n	1412 <Scheduler_Init+0x7a>
    {
        SchedulerControl.TaskElapsed[ i ] = 0u;
    13b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13b6:	4a50      	ldr	r2, [pc, #320]	; (14f8 <Scheduler_Init+0x160>)
    13b8:	2100      	movs	r1, #0
    13ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TaskPeriod[ i ] = SchedulerPtr->TaskPtr[ i ].InitPeriod;
    13be:	9b01      	ldr	r3, [sp, #4]
    13c0:	6899      	ldr	r1, [r3, #8]
    13c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13c6:	4613      	mov	r3, r2
    13c8:	005b      	lsls	r3, r3, #1
    13ca:	4413      	add	r3, r2
    13cc:	009b      	lsls	r3, r3, #2
    13ce:	18ca      	adds	r2, r1, r3
    13d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13d4:	6812      	ldr	r2, [r2, #0]
    13d6:	4948      	ldr	r1, [pc, #288]	; (14f8 <Scheduler_Init+0x160>)
    13d8:	3306      	adds	r3, #6
    13da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TaskFlags, i, SchedulerPtr->TaskPtr[ i ].InitFlag );
    13de:	9b01      	ldr	r3, [sp, #4]
    13e0:	6899      	ldr	r1, [r3, #8]
    13e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13e6:	4613      	mov	r3, r2
    13e8:	005b      	lsls	r3, r3, #1
    13ea:	4413      	add	r3, r2
    13ec:	009b      	lsls	r3, r3, #2
    13ee:	440b      	add	r3, r1
    13f0:	791b      	ldrb	r3, [r3, #4]
    13f2:	2b00      	cmp	r3, #0
    13f4:	bf14      	ite	ne
    13f6:	2301      	movne	r3, #1
    13f8:	2300      	moveq	r3, #0
    13fa:	b2da      	uxtb	r2, r3
    13fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1400:	4619      	mov	r1, r3
    1402:	483e      	ldr	r0, [pc, #248]	; (14fc <Scheduler_Init+0x164>)
    1404:	f7ff ffa2 	bl	134c <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
    1408:	f89d 300f 	ldrb.w	r3, [sp, #15]
    140c:	3301      	adds	r3, #1
    140e:	f88d 300f 	strb.w	r3, [sp, #15]
    1412:	9b01      	ldr	r3, [sp, #4]
    1414:	791b      	ldrb	r3, [r3, #4]
    1416:	f89d 200f 	ldrb.w	r2, [sp, #15]
    141a:	429a      	cmp	r2, r3
    141c:	d3c9      	bcc.n	13b2 <Scheduler_Init+0x1a>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    141e:	2300      	movs	r3, #0
    1420:	f88d 300e 	strb.w	r3, [sp, #14]
    1424:	e031      	b.n	148a <Scheduler_Init+0xf2>
    {
        SchedulerControl.TimerCount[ i ] = 0u;
    1426:	f89d 300e 	ldrb.w	r3, [sp, #14]
    142a:	4a33      	ldr	r2, [pc, #204]	; (14f8 <Scheduler_Init+0x160>)
    142c:	330c      	adds	r3, #12
    142e:	2100      	movs	r1, #0
    1430:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TimerTimeout[ i ] = SchedulerPtr->TimerPtr[ i ].InitTimeout;
    1434:	9b01      	ldr	r3, [sp, #4]
    1436:	6919      	ldr	r1, [r3, #16]
    1438:	f89d 200e 	ldrb.w	r2, [sp, #14]
    143c:	4613      	mov	r3, r2
    143e:	005b      	lsls	r3, r3, #1
    1440:	4413      	add	r3, r2
    1442:	009b      	lsls	r3, r3, #2
    1444:	18ca      	adds	r2, r1, r3
    1446:	f89d 300e 	ldrb.w	r3, [sp, #14]
    144a:	6812      	ldr	r2, [r2, #0]
    144c:	492a      	ldr	r1, [pc, #168]	; (14f8 <Scheduler_Init+0x160>)
    144e:	330c      	adds	r3, #12
    1450:	009b      	lsls	r3, r3, #2
    1452:	440b      	add	r3, r1
    1454:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TimerFlags, i, SchedulerPtr->TimerPtr[ i ].InitFlag );
    1456:	9b01      	ldr	r3, [sp, #4]
    1458:	6919      	ldr	r1, [r3, #16]
    145a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    145e:	4613      	mov	r3, r2
    1460:	005b      	lsls	r3, r3, #1
    1462:	4413      	add	r3, r2
    1464:	009b      	lsls	r3, r3, #2
    1466:	440b      	add	r3, r1
    1468:	791b      	ldrb	r3, [r3, #4]
    146a:	2b00      	cmp	r3, #0
    146c:	bf14      	ite	ne
    146e:	2301      	movne	r3, #1
    1470:	2300      	moveq	r3, #0
    1472:	b2da      	uxtb	r2, r3
    1474:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1478:	4619      	mov	r1, r3
    147a:	4821      	ldr	r0, [pc, #132]	; (1500 <Scheduler_Init+0x168>)
    147c:	f7ff ff66 	bl	134c <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    1480:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1484:	3301      	adds	r3, #1
    1486:	f88d 300e 	strb.w	r3, [sp, #14]
    148a:	9b01      	ldr	r3, [sp, #4]
    148c:	7b1b      	ldrb	r3, [r3, #12]
    148e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1492:	429a      	cmp	r2, r3
    1494:	d3c7      	bcc.n	1426 <Scheduler_Init+0x8e>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    1496:	2300      	movs	r3, #0
    1498:	f88d 300d 	strb.w	r3, [sp, #13]
    149c:	e01f      	b.n	14de <Scheduler_Init+0x146>
    {
        SchedulerControl.QueueHeads[ i ] = 0u;
    149e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    14a2:	4a15      	ldr	r2, [pc, #84]	; (14f8 <Scheduler_Init+0x160>)
    14a4:	330e      	adds	r3, #14
    14a6:	2100      	movs	r1, #0
    14a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.QueueTails[ i ] = 0u;
    14ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
    14b0:	4a11      	ldr	r2, [pc, #68]	; (14f8 <Scheduler_Init+0x160>)
    14b2:	330e      	adds	r3, #14
    14b4:	009b      	lsls	r3, r3, #2
    14b6:	4413      	add	r3, r2
    14b8:	2200      	movs	r2, #0
    14ba:	605a      	str	r2, [r3, #4]
        Bfx_SetBit_u32u8( &SchedulerControl.QueueEmpties, i );
    14bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    14c0:	4619      	mov	r1, r3
    14c2:	4810      	ldr	r0, [pc, #64]	; (1504 <Scheduler_Init+0x16c>)
    14c4:	f7ff ff0a 	bl	12dc <Bfx_SetBit_u32u8>
        Bfx_ClrBit_u32u8( &SchedulerControl.QueueFulls, i );
    14c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    14cc:	4619      	mov	r1, r3
    14ce:	480e      	ldr	r0, [pc, #56]	; (1508 <Scheduler_Init+0x170>)
    14d0:	f7ff ff16 	bl	1300 <Bfx_ClrBit_u32u8>
    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    14d4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    14d8:	3301      	adds	r3, #1
    14da:	f88d 300d 	strb.w	r3, [sp, #13]
    14de:	9b01      	ldr	r3, [sp, #4]
    14e0:	7d1b      	ldrb	r3, [r3, #20]
    14e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
    14e6:	429a      	cmp	r2, r3
    14e8:	d3d9      	bcc.n	149e <Scheduler_Init+0x106>
    }
    
    SchedulerLocal = SchedulerPtr;
    14ea:	4a08      	ldr	r2, [pc, #32]	; (150c <Scheduler_Init+0x174>)
    14ec:	9b01      	ldr	r3, [sp, #4]
    14ee:	6013      	str	r3, [r2, #0]
}
    14f0:	bf00      	nop
    14f2:	b005      	add	sp, #20
    14f4:	f85d fb04 	ldr.w	pc, [sp], #4
    14f8:	1fff9274 	.word	0x1fff9274
    14fc:	1fff92b4 	.word	0x1fff92b4
    1500:	1fff92b8 	.word	0x1fff92b8
    1504:	1fff92bc 	.word	0x1fff92bc
    1508:	1fff92c0 	.word	0x1fff92c0
    150c:	1fff9270 	.word	0x1fff9270

00001510 <Scheduler_MainFunction>:
 * if it is time to run accordingly to the period registered on each of them. The function won't return
 * by any means since it is looping inside a __while(1u)__ forever. The algorithm is pretty simple since
 * first task to dispatch will be the first registered in the **Scheduler_ConfigType** array
 */
void Scheduler_MainFunction( void )
{
    1510:	b500      	push	{lr}
    1512:	b085      	sub	sp, #20
    uint32 Timeout = OsIf_MicrosToTicks( ( SchedulerLocal->Tick * 1000 ), OSIF_COUNTER_SYSTEM );
    1514:	4b13      	ldr	r3, [pc, #76]	; (1564 <Scheduler_MainFunction+0x54>)
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	681b      	ldr	r3, [r3, #0]
    151a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    151e:	fb02 f303 	mul.w	r3, r2, r3
    1522:	2101      	movs	r1, #1
    1524:	4618      	mov	r0, r3
    1526:	f001 f9ad 	bl	2884 <OsIf_MicrosToTicks>
    152a:	9002      	str	r0, [sp, #8]
    /*get the Systic Timer count for the first time*/
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    152c:	2001      	movs	r0, #1
    152e:	f001 f95d 	bl	27ec <OsIf_GetCounter>
    1532:	4603      	mov	r3, r0
    1534:	9301      	str	r3, [sp, #4]
    /*We need to count the elapsed time from zero*/
    uint32 ElapsedTime = 0u;
    1536:	2300      	movs	r3, #0
    1538:	9303      	str	r3, [sp, #12]
    
    do /* cppcheck-suppress misra-c2012-14.4 ; this is an infinite loop */
    {
        /* get the elapsed time count from the seed tick value*/
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    153a:	ab01      	add	r3, sp, #4
    153c:	2101      	movs	r1, #1
    153e:	4618      	mov	r0, r3
    1540:	f001 f96d 	bl	281e <OsIf_GetElapsed>
    1544:	4602      	mov	r2, r0
    1546:	9b03      	ldr	r3, [sp, #12]
    1548:	4413      	add	r3, r2
    154a:	9303      	str	r3, [sp, #12]
        /*query if the elapsed time is already equal or bigger than the timeout*/
        if( ElapsedTime >= Timeout )
    154c:	9a03      	ldr	r2, [sp, #12]
    154e:	9b02      	ldr	r3, [sp, #8]
    1550:	429a      	cmp	r2, r3
    1552:	d3f2      	bcc.n	153a <Scheduler_MainFunction+0x2a>
        {
            /*reset the elapsed time */
            ElapsedTime = 0u;
    1554:	2300      	movs	r3, #0
    1556:	9303      	str	r3, [sp, #12]
            /*Scan all registered timers*/
            Timers_Dispatch( );
    1558:	f000 f85a 	bl	1610 <Timers_Dispatch>
            /*Scan all registered task*/
            Tasks_Dispatch( );
    155c:	f000 f804 	bl	1568 <Tasks_Dispatch>
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    1560:	e7eb      	b.n	153a <Scheduler_MainFunction+0x2a>
    1562:	bf00      	nop
    1564:	1fff9270 	.word	0x1fff9270

00001568 <Tasks_Dispatch>:
 * This is the only mechanism to stop a timer. The function only set the flag startFlag to FALSE.
 *
 * @param   scheduler  Scheduler control structure
 */
STATIC void Tasks_Dispatch( void )
{
    1568:	b500      	push	{lr}
    156a:	b083      	sub	sp, #12
    /*Scan all registered task*/
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    156c:	2300      	movs	r3, #0
    156e:	f88d 3007 	strb.w	r3, [sp, #7]
    1572:	e03c      	b.n	15ee <Tasks_Dispatch+0x86>
    {
        /*Only run those tasks that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TaskFlags, i ) == TRUE )
    1574:	4b24      	ldr	r3, [pc, #144]	; (1608 <Tasks_Dispatch+0xa0>)
    1576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1578:	f89d 2007 	ldrb.w	r2, [sp, #7]
    157c:	4611      	mov	r1, r2
    157e:	4618      	mov	r0, r3
    1580:	f7ff fed1 	bl	1326 <Bfx_GetBit_u32u8_u8>
    1584:	4603      	mov	r3, r0
    1586:	2b00      	cmp	r3, #0
    1588:	d01e      	beq.n	15c8 <Tasks_Dispatch+0x60>
        {
            /*Only run those tasks that already has its elapsed time*/
            if( SchedulerControl.TaskElapsed[ i ] >= SchedulerControl.TaskPeriod[ i ] )
    158a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    158e:	4a1e      	ldr	r2, [pc, #120]	; (1608 <Tasks_Dispatch+0xa0>)
    1590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1594:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1598:	491b      	ldr	r1, [pc, #108]	; (1608 <Tasks_Dispatch+0xa0>)
    159a:	3306      	adds	r3, #6
    159c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    15a0:	429a      	cmp	r2, r3
    15a2:	d311      	bcc.n	15c8 <Tasks_Dispatch+0x60>
            {
                SchedulerControl.TaskElapsed[ i ] = 0u;
    15a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15a8:	4a17      	ldr	r2, [pc, #92]	; (1608 <Tasks_Dispatch+0xa0>)
    15aa:	2100      	movs	r1, #0
    15ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                /*Run task*/
                SchedulerLocal->TaskPtr[ i ].TaskFunc( );
    15b0:	4b16      	ldr	r3, [pc, #88]	; (160c <Tasks_Dispatch+0xa4>)
    15b2:	681b      	ldr	r3, [r3, #0]
    15b4:	6899      	ldr	r1, [r3, #8]
    15b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    15ba:	4613      	mov	r3, r2
    15bc:	005b      	lsls	r3, r3, #1
    15be:	4413      	add	r3, r2
    15c0:	009b      	lsls	r3, r3, #2
    15c2:	440b      	add	r3, r1
    15c4:	689b      	ldr	r3, [r3, #8]
    15c6:	4798      	blx	r3
            }
        }
        /*Increment the task elapsed time in ticks*/
        SchedulerControl.TaskElapsed[ i ] += SchedulerLocal->Tick;
    15c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15cc:	4a0e      	ldr	r2, [pc, #56]	; (1608 <Tasks_Dispatch+0xa0>)
    15ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    15d2:	4b0e      	ldr	r3, [pc, #56]	; (160c <Tasks_Dispatch+0xa4>)
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	681a      	ldr	r2, [r3, #0]
    15d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15dc:	440a      	add	r2, r1
    15de:	490a      	ldr	r1, [pc, #40]	; (1608 <Tasks_Dispatch+0xa0>)
    15e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    15e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15e8:	3301      	adds	r3, #1
    15ea:	f88d 3007 	strb.w	r3, [sp, #7]
    15ee:	4b07      	ldr	r3, [pc, #28]	; (160c <Tasks_Dispatch+0xa4>)
    15f0:	681b      	ldr	r3, [r3, #0]
    15f2:	791b      	ldrb	r3, [r3, #4]
    15f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    15f8:	429a      	cmp	r2, r3
    15fa:	d3bb      	bcc.n	1574 <Tasks_Dispatch+0xc>
    }
}
    15fc:	bf00      	nop
    15fe:	bf00      	nop
    1600:	b003      	add	sp, #12
    1602:	f85d fb04 	ldr.w	pc, [sp], #4
    1606:	bf00      	nop
    1608:	1fff9274 	.word	0x1fff9274
    160c:	1fff9270 	.word	0x1fff9270

00001610 <Timers_Dispatch>:

STATIC void Timers_Dispatch( void )
{
    1610:	b500      	push	{lr}
    1612:	b083      	sub	sp, #12
    /*Scan all registered timers*/
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    1614:	2300      	movs	r3, #0
    1616:	f88d 3007 	strb.w	r3, [sp, #7]
    161a:	e046      	b.n	16aa <Timers_Dispatch+0x9a>
    {
        /*Only run those timers that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TimerFlags, i ) == TRUE )
    161c:	4b29      	ldr	r3, [pc, #164]	; (16c4 <Timers_Dispatch+0xb4>)
    161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1620:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1624:	4611      	mov	r1, r2
    1626:	4618      	mov	r0, r3
    1628:	f7ff fe7d 	bl	1326 <Bfx_GetBit_u32u8_u8>
    162c:	4603      	mov	r3, r0
    162e:	2b00      	cmp	r3, #0
    1630:	d036      	beq.n	16a0 <Timers_Dispatch+0x90>
        {
            /*Decrement timer count by one tick*/
            SchedulerControl.TimerCount[ i ] -= SchedulerLocal->Tick;
    1632:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1636:	4a23      	ldr	r2, [pc, #140]	; (16c4 <Timers_Dispatch+0xb4>)
    1638:	330c      	adds	r3, #12
    163a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    163e:	4b22      	ldr	r3, [pc, #136]	; (16c8 <Timers_Dispatch+0xb8>)
    1640:	681b      	ldr	r3, [r3, #0]
    1642:	681a      	ldr	r2, [r3, #0]
    1644:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1648:	1a8a      	subs	r2, r1, r2
    164a:	491e      	ldr	r1, [pc, #120]	; (16c4 <Timers_Dispatch+0xb4>)
    164c:	330c      	adds	r3, #12
    164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            /*Only run those timers that already has its elapsed time*/
            if( SchedulerControl.TimerCount[ i ] == 0u )
    1652:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1656:	4a1b      	ldr	r2, [pc, #108]	; (16c4 <Timers_Dispatch+0xb4>)
    1658:	330c      	adds	r3, #12
    165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    165e:	2b00      	cmp	r3, #0
    1660:	d11e      	bne.n	16a0 <Timers_Dispatch+0x90>
            {
                /*Prevent timer from running again*/
                Bfx_ClrBit_u32u8( &SchedulerControl.TimerFlags, i );
    1662:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1666:	4619      	mov	r1, r3
    1668:	4818      	ldr	r0, [pc, #96]	; (16cc <Timers_Dispatch+0xbc>)
    166a:	f7ff fe49 	bl	1300 <Bfx_ClrBit_u32u8>
                /*Check if the timer has a callback assosiate*/
                if( SchedulerLocal->TimerPtr[ i ].CallbackFunc != NULL )
    166e:	4b16      	ldr	r3, [pc, #88]	; (16c8 <Timers_Dispatch+0xb8>)
    1670:	681b      	ldr	r3, [r3, #0]
    1672:	6919      	ldr	r1, [r3, #16]
    1674:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1678:	4613      	mov	r3, r2
    167a:	005b      	lsls	r3, r3, #1
    167c:	4413      	add	r3, r2
    167e:	009b      	lsls	r3, r3, #2
    1680:	440b      	add	r3, r1
    1682:	689b      	ldr	r3, [r3, #8]
    1684:	2b00      	cmp	r3, #0
    1686:	d00b      	beq.n	16a0 <Timers_Dispatch+0x90>
                {
                    /*Run callback*/
                    SchedulerLocal->TimerPtr[ i ].CallbackFunc( );
    1688:	4b0f      	ldr	r3, [pc, #60]	; (16c8 <Timers_Dispatch+0xb8>)
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	6919      	ldr	r1, [r3, #16]
    168e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1692:	4613      	mov	r3, r2
    1694:	005b      	lsls	r3, r3, #1
    1696:	4413      	add	r3, r2
    1698:	009b      	lsls	r3, r3, #2
    169a:	440b      	add	r3, r1
    169c:	689b      	ldr	r3, [r3, #8]
    169e:	4798      	blx	r3
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    16a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    16a4:	3301      	adds	r3, #1
    16a6:	f88d 3007 	strb.w	r3, [sp, #7]
    16aa:	4b07      	ldr	r3, [pc, #28]	; (16c8 <Timers_Dispatch+0xb8>)
    16ac:	681b      	ldr	r3, [r3, #0]
    16ae:	7b1b      	ldrb	r3, [r3, #12]
    16b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    16b4:	429a      	cmp	r2, r3
    16b6:	d3b1      	bcc.n	161c <Timers_Dispatch+0xc>
                }
            }
        }
    }
}
    16b8:	bf00      	nop
    16ba:	bf00      	nop
    16bc:	b003      	add	sp, #12
    16be:	f85d fb04 	ldr.w	pc, [sp], #4
    16c2:	bf00      	nop
    16c4:	1fff9274 	.word	0x1fff9274
    16c8:	1fff9270 	.word	0x1fff9270
    16cc:	1fff92b8 	.word	0x1fff92b8

000016d0 <Os_PotsTask>:
//void Os_50ms_Task( void );
//void Os_100ms_Task( void );

void Os_LedsTask( void ){}
void Os_ButtonsTask( void ){}
void Os_PotsTask( void ){}
    16d0:	bf00      	nop
    16d2:	4770      	bx	lr

000016d4 <Os_EepromsTask>:
void Os_EepromsTask( void ){}
    16d4:	bf00      	nop
    16d6:	4770      	bx	lr

000016d8 <Os_CanTask>:
void Os_CanTask( void ){}
    16d8:	bf00      	nop
    16da:	4770      	bx	lr

000016dc <Os_BuzzerTask>:
void Os_BuzzerTask( void ){}
    16dc:	bf00      	nop
    16de:	4770      	bx	lr

000016e0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    16e0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    16e2:	2300      	movs	r3, #0
    16e4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    16e6:	2300      	movs	r3, #0
    16e8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    16ea:	2300      	movs	r3, #0
    16ec:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    16ee:	2300      	movs	r3, #0
    16f0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    16f2:	4b44      	ldr	r3, [pc, #272]	; (1804 <init_data_bss+0x124>)
    16f4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    16f6:	4b44      	ldr	r3, [pc, #272]	; (1808 <init_data_bss+0x128>)
    16f8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    16fa:	9b05      	ldr	r3, [sp, #20]
    16fc:	681b      	ldr	r3, [r3, #0]
    16fe:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1700:	9b05      	ldr	r3, [sp, #20]
    1702:	3304      	adds	r3, #4
    1704:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    1706:	9b05      	ldr	r3, [sp, #20]
    1708:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    170a:	2300      	movs	r3, #0
    170c:	9309      	str	r3, [sp, #36]	; 0x24
    170e:	e03d      	b.n	178c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1710:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1712:	4613      	mov	r3, r2
    1714:	005b      	lsls	r3, r3, #1
    1716:	4413      	add	r3, r2
    1718:	009b      	lsls	r3, r3, #2
    171a:	461a      	mov	r2, r3
    171c:	9b03      	ldr	r3, [sp, #12]
    171e:	4413      	add	r3, r2
    1720:	685b      	ldr	r3, [r3, #4]
    1722:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1724:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1726:	4613      	mov	r3, r2
    1728:	005b      	lsls	r3, r3, #1
    172a:	4413      	add	r3, r2
    172c:	009b      	lsls	r3, r3, #2
    172e:	461a      	mov	r2, r3
    1730:	9b03      	ldr	r3, [sp, #12]
    1732:	4413      	add	r3, r2
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1738:	9a09      	ldr	r2, [sp, #36]	; 0x24
    173a:	4613      	mov	r3, r2
    173c:	005b      	lsls	r3, r3, #1
    173e:	4413      	add	r3, r2
    1740:	009b      	lsls	r3, r3, #2
    1742:	461a      	mov	r2, r3
    1744:	9b03      	ldr	r3, [sp, #12]
    1746:	4413      	add	r3, r2
    1748:	689b      	ldr	r3, [r3, #8]
    174a:	4619      	mov	r1, r3
    174c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    174e:	4613      	mov	r3, r2
    1750:	005b      	lsls	r3, r3, #1
    1752:	4413      	add	r3, r2
    1754:	009b      	lsls	r3, r3, #2
    1756:	461a      	mov	r2, r3
    1758:	9b03      	ldr	r3, [sp, #12]
    175a:	4413      	add	r3, r2
    175c:	685b      	ldr	r3, [r3, #4]
    175e:	1acb      	subs	r3, r1, r3
    1760:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1762:	2300      	movs	r3, #0
    1764:	9308      	str	r3, [sp, #32]
    1766:	e00a      	b.n	177e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1768:	9a00      	ldr	r2, [sp, #0]
    176a:	9b08      	ldr	r3, [sp, #32]
    176c:	441a      	add	r2, r3
    176e:	9901      	ldr	r1, [sp, #4]
    1770:	9b08      	ldr	r3, [sp, #32]
    1772:	440b      	add	r3, r1
    1774:	7812      	ldrb	r2, [r2, #0]
    1776:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1778:	9b08      	ldr	r3, [sp, #32]
    177a:	3301      	adds	r3, #1
    177c:	9308      	str	r3, [sp, #32]
    177e:	9a08      	ldr	r2, [sp, #32]
    1780:	9b06      	ldr	r3, [sp, #24]
    1782:	429a      	cmp	r2, r3
    1784:	d3f0      	bcc.n	1768 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1786:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1788:	3301      	adds	r3, #1
    178a:	9309      	str	r3, [sp, #36]	; 0x24
    178c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    178e:	9b07      	ldr	r3, [sp, #28]
    1790:	429a      	cmp	r2, r3
    1792:	d3bd      	bcc.n	1710 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1794:	9b04      	ldr	r3, [sp, #16]
    1796:	681b      	ldr	r3, [r3, #0]
    1798:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    179a:	9b04      	ldr	r3, [sp, #16]
    179c:	3304      	adds	r3, #4
    179e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    17a0:	9b04      	ldr	r3, [sp, #16]
    17a2:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    17a4:	2300      	movs	r3, #0
    17a6:	9309      	str	r3, [sp, #36]	; 0x24
    17a8:	e024      	b.n	17f4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    17aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17ac:	00db      	lsls	r3, r3, #3
    17ae:	9a02      	ldr	r2, [sp, #8]
    17b0:	4413      	add	r3, r2
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    17b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17b8:	00db      	lsls	r3, r3, #3
    17ba:	9a02      	ldr	r2, [sp, #8]
    17bc:	4413      	add	r3, r2
    17be:	685b      	ldr	r3, [r3, #4]
    17c0:	4619      	mov	r1, r3
    17c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17c4:	00db      	lsls	r3, r3, #3
    17c6:	9a02      	ldr	r2, [sp, #8]
    17c8:	4413      	add	r3, r2
    17ca:	681b      	ldr	r3, [r3, #0]
    17cc:	1acb      	subs	r3, r1, r3
    17ce:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    17d0:	2300      	movs	r3, #0
    17d2:	9308      	str	r3, [sp, #32]
    17d4:	e007      	b.n	17e6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    17d6:	9a01      	ldr	r2, [sp, #4]
    17d8:	9b08      	ldr	r3, [sp, #32]
    17da:	4413      	add	r3, r2
    17dc:	2200      	movs	r2, #0
    17de:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    17e0:	9b08      	ldr	r3, [sp, #32]
    17e2:	3301      	adds	r3, #1
    17e4:	9308      	str	r3, [sp, #32]
    17e6:	9a08      	ldr	r2, [sp, #32]
    17e8:	9b06      	ldr	r3, [sp, #24]
    17ea:	429a      	cmp	r2, r3
    17ec:	d3f3      	bcc.n	17d6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    17ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17f0:	3301      	adds	r3, #1
    17f2:	9309      	str	r3, [sp, #36]	; 0x24
    17f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17f6:	9b07      	ldr	r3, [sp, #28]
    17f8:	429a      	cmp	r2, r3
    17fa:	d3d6      	bcc.n	17aa <init_data_bss+0xca>
        }
    }
}
    17fc:	bf00      	nop
    17fe:	bf00      	nop
    1800:	b00a      	add	sp, #40	; 0x28
    1802:	4770      	bx	lr
    1804:	000125bc 	.word	0x000125bc
    1808:	000125d8 	.word	0x000125d8

0000180c <sys_m4_cache_init>:
{
    180c:	b084      	sub	sp, #16
    180e:	4603      	mov	r3, r0
    1810:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1814:	2300      	movs	r3, #0
    1816:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    181a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    181e:	2b00      	cmp	r3, #0
    1820:	d118      	bne.n	1854 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1822:	4b10      	ldr	r3, [pc, #64]	; (1864 <sys_m4_cache_init+0x58>)
    1824:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1828:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    182a:	4b0e      	ldr	r3, [pc, #56]	; (1864 <sys_m4_cache_init+0x58>)
    182c:	681b      	ldr	r3, [r3, #0]
    182e:	4a0d      	ldr	r2, [pc, #52]	; (1864 <sys_m4_cache_init+0x58>)
    1830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1834:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1836:	bf00      	nop
    1838:	4b0a      	ldr	r3, [pc, #40]	; (1864 <sys_m4_cache_init+0x58>)
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1844:	d0f8      	beq.n	1838 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1846:	4b07      	ldr	r3, [pc, #28]	; (1864 <sys_m4_cache_init+0x58>)
    1848:	681b      	ldr	r3, [r3, #0]
    184a:	4a06      	ldr	r2, [pc, #24]	; (1864 <sys_m4_cache_init+0x58>)
    184c:	f043 0301 	orr.w	r3, r3, #1
    1850:	6013      	str	r3, [r2, #0]
    1852:	e002      	b.n	185a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1854:	2301      	movs	r3, #1
    1856:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    185a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    185e:	4618      	mov	r0, r3
    1860:	b004      	add	sp, #16
    1862:	4770      	bx	lr
    1864:	e0082000 	.word	0xe0082000

00001868 <startup_go_to_user_mode>:
}
    1868:	bf00      	nop
    186a:	4770      	bx	lr

0000186c <Sys_GetCoreID>:
    return 0U;
    186c:	2300      	movs	r3, #0
}
    186e:	4618      	mov	r0, r3
    1870:	4770      	bx	lr

00001872 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1872:	e7fe      	b.n	1872 <HardFault_Handler>

00001874 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1874:	e7fe      	b.n	1874 <MemManage_Handler>

00001876 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1876:	e7fe      	b.n	1876 <BusFault_Handler>

00001878 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1878:	e7fe      	b.n	1878 <UsageFault_Handler>

0000187a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    187a:	e7fe      	b.n	187a <SVC_Handler>

0000187c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    187c:	e7fe      	b.n	187c <DebugMon_Handler>

0000187e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    187e:	e7fe      	b.n	187e <PendSV_Handler>

00001880 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1880:	e7fe      	b.n	1880 <SysTick_Handler>

00001882 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1882:	e7fe      	b.n	1882 <undefined_handler>

00001884 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1884:	b500      	push	{lr}
    1886:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1888:	4b26      	ldr	r3, [pc, #152]	; (1924 <_DoInit+0xa0>)
    188a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    188c:	22a8      	movs	r2, #168	; 0xa8
    188e:	2100      	movs	r1, #0
    1890:	9800      	ldr	r0, [sp, #0]
    1892:	f000 fd13 	bl	22bc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1896:	9b00      	ldr	r3, [sp, #0]
    1898:	2203      	movs	r2, #3
    189a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    189c:	9b00      	ldr	r3, [sp, #0]
    189e:	2203      	movs	r2, #3
    18a0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    18a2:	9b00      	ldr	r3, [sp, #0]
    18a4:	4a20      	ldr	r2, [pc, #128]	; (1928 <_DoInit+0xa4>)
    18a6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    18a8:	9b00      	ldr	r3, [sp, #0]
    18aa:	4a20      	ldr	r2, [pc, #128]	; (192c <_DoInit+0xa8>)
    18ac:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    18ae:	9b00      	ldr	r3, [sp, #0]
    18b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    18b4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    18b6:	9b00      	ldr	r3, [sp, #0]
    18b8:	2200      	movs	r2, #0
    18ba:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    18bc:	9b00      	ldr	r3, [sp, #0]
    18be:	2200      	movs	r2, #0
    18c0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    18c2:	9b00      	ldr	r3, [sp, #0]
    18c4:	2200      	movs	r2, #0
    18c6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    18c8:	9b00      	ldr	r3, [sp, #0]
    18ca:	4a17      	ldr	r2, [pc, #92]	; (1928 <_DoInit+0xa4>)
    18cc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    18ce:	9b00      	ldr	r3, [sp, #0]
    18d0:	4a17      	ldr	r2, [pc, #92]	; (1930 <_DoInit+0xac>)
    18d2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    18d4:	9b00      	ldr	r3, [sp, #0]
    18d6:	2210      	movs	r2, #16
    18d8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    18da:	9b00      	ldr	r3, [sp, #0]
    18dc:	2200      	movs	r2, #0
    18de:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    18e0:	9b00      	ldr	r3, [sp, #0]
    18e2:	2200      	movs	r2, #0
    18e4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    18e6:	9b00      	ldr	r3, [sp, #0]
    18e8:	2200      	movs	r2, #0
    18ea:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    18ec:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    18f0:	2300      	movs	r3, #0
    18f2:	9301      	str	r3, [sp, #4]
    18f4:	e00c      	b.n	1910 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    18f6:	9b01      	ldr	r3, [sp, #4]
    18f8:	f1c3 030f 	rsb	r3, r3, #15
    18fc:	4a0d      	ldr	r2, [pc, #52]	; (1934 <_DoInit+0xb0>)
    18fe:	5cd1      	ldrb	r1, [r2, r3]
    1900:	9a00      	ldr	r2, [sp, #0]
    1902:	9b01      	ldr	r3, [sp, #4]
    1904:	4413      	add	r3, r2
    1906:	460a      	mov	r2, r1
    1908:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    190a:	9b01      	ldr	r3, [sp, #4]
    190c:	3301      	adds	r3, #1
    190e:	9301      	str	r3, [sp, #4]
    1910:	9b01      	ldr	r3, [sp, #4]
    1912:	2b0f      	cmp	r3, #15
    1914:	d9ef      	bls.n	18f6 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1916:	f3bf 8f5f 	dmb	sy
}
    191a:	bf00      	nop
    191c:	b003      	add	sp, #12
    191e:	f85d fb04 	ldr.w	pc, [sp], #4
    1922:	bf00      	nop
    1924:	1fff92c8 	.word	0x1fff92c8
    1928:	00011418 	.word	0x00011418
    192c:	1fff9370 	.word	0x1fff9370
    1930:	1fff9770 	.word	0x1fff9770
    1934:	00012598 	.word	0x00012598

00001938 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1938:	b500      	push	{lr}
    193a:	b08b      	sub	sp, #44	; 0x2c
    193c:	9003      	str	r0, [sp, #12]
    193e:	9102      	str	r1, [sp, #8]
    1940:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    1942:	2300      	movs	r3, #0
    1944:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    1946:	9b03      	ldr	r3, [sp, #12]
    1948:	68db      	ldr	r3, [r3, #12]
    194a:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    194c:	9b03      	ldr	r3, [sp, #12]
    194e:	691b      	ldr	r3, [r3, #16]
    1950:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    1952:	9a06      	ldr	r2, [sp, #24]
    1954:	9b07      	ldr	r3, [sp, #28]
    1956:	429a      	cmp	r2, r3
    1958:	d905      	bls.n	1966 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    195a:	9a06      	ldr	r2, [sp, #24]
    195c:	9b07      	ldr	r3, [sp, #28]
    195e:	1ad3      	subs	r3, r2, r3
    1960:	3b01      	subs	r3, #1
    1962:	9309      	str	r3, [sp, #36]	; 0x24
    1964:	e007      	b.n	1976 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1966:	9b03      	ldr	r3, [sp, #12]
    1968:	689a      	ldr	r2, [r3, #8]
    196a:	9906      	ldr	r1, [sp, #24]
    196c:	9b07      	ldr	r3, [sp, #28]
    196e:	1acb      	subs	r3, r1, r3
    1970:	4413      	add	r3, r2
    1972:	3b01      	subs	r3, #1
    1974:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1976:	9b03      	ldr	r3, [sp, #12]
    1978:	689a      	ldr	r2, [r3, #8]
    197a:	9b07      	ldr	r3, [sp, #28]
    197c:	1ad3      	subs	r3, r2, r3
    197e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1980:	4293      	cmp	r3, r2
    1982:	bf28      	it	cs
    1984:	4613      	movcs	r3, r2
    1986:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1988:	9a09      	ldr	r2, [sp, #36]	; 0x24
    198a:	9b01      	ldr	r3, [sp, #4]
    198c:	4293      	cmp	r3, r2
    198e:	bf28      	it	cs
    1990:	4613      	movcs	r3, r2
    1992:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1994:	9b03      	ldr	r3, [sp, #12]
    1996:	685a      	ldr	r2, [r3, #4]
    1998:	9b07      	ldr	r3, [sp, #28]
    199a:	4413      	add	r3, r2
    199c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    199e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19a0:	9902      	ldr	r1, [sp, #8]
    19a2:	9805      	ldr	r0, [sp, #20]
    19a4:	f000 fc7c 	bl	22a0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    19a8:	9a08      	ldr	r2, [sp, #32]
    19aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19ac:	4413      	add	r3, r2
    19ae:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    19b0:	9a02      	ldr	r2, [sp, #8]
    19b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19b4:	4413      	add	r3, r2
    19b6:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    19b8:	9a01      	ldr	r2, [sp, #4]
    19ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19bc:	1ad3      	subs	r3, r2, r3
    19be:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    19c0:	9a07      	ldr	r2, [sp, #28]
    19c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19c4:	4413      	add	r3, r2
    19c6:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    19c8:	9b03      	ldr	r3, [sp, #12]
    19ca:	689b      	ldr	r3, [r3, #8]
    19cc:	9a07      	ldr	r2, [sp, #28]
    19ce:	429a      	cmp	r2, r3
    19d0:	d101      	bne.n	19d6 <_WriteBlocking+0x9e>
      WrOff = 0u;
    19d2:	2300      	movs	r3, #0
    19d4:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    19d6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    19da:	9b03      	ldr	r3, [sp, #12]
    19dc:	9a07      	ldr	r2, [sp, #28]
    19de:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    19e0:	9b01      	ldr	r3, [sp, #4]
    19e2:	2b00      	cmp	r3, #0
    19e4:	d1b2      	bne.n	194c <_WriteBlocking+0x14>
  return NumBytesWritten;
    19e6:	9b08      	ldr	r3, [sp, #32]
}
    19e8:	4618      	mov	r0, r3
    19ea:	b00b      	add	sp, #44	; 0x2c
    19ec:	f85d fb04 	ldr.w	pc, [sp], #4

000019f0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    19f0:	b500      	push	{lr}
    19f2:	b089      	sub	sp, #36	; 0x24
    19f4:	9003      	str	r0, [sp, #12]
    19f6:	9102      	str	r1, [sp, #8]
    19f8:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    19fa:	9b03      	ldr	r3, [sp, #12]
    19fc:	68db      	ldr	r3, [r3, #12]
    19fe:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1a00:	9b03      	ldr	r3, [sp, #12]
    1a02:	689a      	ldr	r2, [r3, #8]
    1a04:	9b07      	ldr	r3, [sp, #28]
    1a06:	1ad3      	subs	r3, r2, r3
    1a08:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    1a0a:	9a06      	ldr	r2, [sp, #24]
    1a0c:	9b01      	ldr	r3, [sp, #4]
    1a0e:	429a      	cmp	r2, r3
    1a10:	d911      	bls.n	1a36 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1a12:	9b03      	ldr	r3, [sp, #12]
    1a14:	685a      	ldr	r2, [r3, #4]
    1a16:	9b07      	ldr	r3, [sp, #28]
    1a18:	4413      	add	r3, r2
    1a1a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1a1c:	9a01      	ldr	r2, [sp, #4]
    1a1e:	9902      	ldr	r1, [sp, #8]
    1a20:	9804      	ldr	r0, [sp, #16]
    1a22:	f000 fc3d 	bl	22a0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1a26:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1a2a:	9a07      	ldr	r2, [sp, #28]
    1a2c:	9b01      	ldr	r3, [sp, #4]
    1a2e:	441a      	add	r2, r3
    1a30:	9b03      	ldr	r3, [sp, #12]
    1a32:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1a34:	e01f      	b.n	1a76 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    1a36:	9b06      	ldr	r3, [sp, #24]
    1a38:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1a3a:	9b03      	ldr	r3, [sp, #12]
    1a3c:	685a      	ldr	r2, [r3, #4]
    1a3e:	9b07      	ldr	r3, [sp, #28]
    1a40:	4413      	add	r3, r2
    1a42:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1a44:	9a05      	ldr	r2, [sp, #20]
    1a46:	9902      	ldr	r1, [sp, #8]
    1a48:	9804      	ldr	r0, [sp, #16]
    1a4a:	f000 fc29 	bl	22a0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1a4e:	9a01      	ldr	r2, [sp, #4]
    1a50:	9b06      	ldr	r3, [sp, #24]
    1a52:	1ad3      	subs	r3, r2, r3
    1a54:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1a56:	9b03      	ldr	r3, [sp, #12]
    1a58:	685b      	ldr	r3, [r3, #4]
    1a5a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1a5c:	9a02      	ldr	r2, [sp, #8]
    1a5e:	9b06      	ldr	r3, [sp, #24]
    1a60:	4413      	add	r3, r2
    1a62:	9a05      	ldr	r2, [sp, #20]
    1a64:	4619      	mov	r1, r3
    1a66:	9804      	ldr	r0, [sp, #16]
    1a68:	f000 fc1a 	bl	22a0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1a6c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1a70:	9b03      	ldr	r3, [sp, #12]
    1a72:	9a05      	ldr	r2, [sp, #20]
    1a74:	60da      	str	r2, [r3, #12]
}
    1a76:	bf00      	nop
    1a78:	b009      	add	sp, #36	; 0x24
    1a7a:	f85d fb04 	ldr.w	pc, [sp], #4

00001a7e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1a7e:	b086      	sub	sp, #24
    1a80:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1a82:	9b01      	ldr	r3, [sp, #4]
    1a84:	691b      	ldr	r3, [r3, #16]
    1a86:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1a88:	9b01      	ldr	r3, [sp, #4]
    1a8a:	68db      	ldr	r3, [r3, #12]
    1a8c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1a8e:	9a04      	ldr	r2, [sp, #16]
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	429a      	cmp	r2, r3
    1a94:	d808      	bhi.n	1aa8 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1a96:	9b01      	ldr	r3, [sp, #4]
    1a98:	689a      	ldr	r2, [r3, #8]
    1a9a:	9b03      	ldr	r3, [sp, #12]
    1a9c:	1ad2      	subs	r2, r2, r3
    1a9e:	9b04      	ldr	r3, [sp, #16]
    1aa0:	4413      	add	r3, r2
    1aa2:	3b01      	subs	r3, #1
    1aa4:	9305      	str	r3, [sp, #20]
    1aa6:	e004      	b.n	1ab2 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1aa8:	9a04      	ldr	r2, [sp, #16]
    1aaa:	9b03      	ldr	r3, [sp, #12]
    1aac:	1ad3      	subs	r3, r2, r3
    1aae:	3b01      	subs	r3, #1
    1ab0:	9305      	str	r3, [sp, #20]
  }
  return r;
    1ab2:	9b05      	ldr	r3, [sp, #20]
}
    1ab4:	4618      	mov	r0, r3
    1ab6:	b006      	add	sp, #24
    1ab8:	4770      	bx	lr
	...

00001abc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1abc:	b500      	push	{lr}
    1abe:	b089      	sub	sp, #36	; 0x24
    1ac0:	9003      	str	r0, [sp, #12]
    1ac2:	9102      	str	r1, [sp, #8]
    1ac4:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1ac6:	9b02      	ldr	r3, [sp, #8]
    1ac8:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1aca:	9b03      	ldr	r3, [sp, #12]
    1acc:	1c5a      	adds	r2, r3, #1
    1ace:	4613      	mov	r3, r2
    1ad0:	005b      	lsls	r3, r3, #1
    1ad2:	4413      	add	r3, r2
    1ad4:	00db      	lsls	r3, r3, #3
    1ad6:	4a20      	ldr	r2, [pc, #128]	; (1b58 <SEGGER_RTT_WriteNoLock+0x9c>)
    1ad8:	4413      	add	r3, r2
    1ada:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1adc:	9b05      	ldr	r3, [sp, #20]
    1ade:	695b      	ldr	r3, [r3, #20]
    1ae0:	2b02      	cmp	r3, #2
    1ae2:	d029      	beq.n	1b38 <SEGGER_RTT_WriteNoLock+0x7c>
    1ae4:	2b02      	cmp	r3, #2
    1ae6:	d82e      	bhi.n	1b46 <SEGGER_RTT_WriteNoLock+0x8a>
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d002      	beq.n	1af2 <SEGGER_RTT_WriteNoLock+0x36>
    1aec:	2b01      	cmp	r3, #1
    1aee:	d013      	beq.n	1b18 <SEGGER_RTT_WriteNoLock+0x5c>
    1af0:	e029      	b.n	1b46 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1af2:	9805      	ldr	r0, [sp, #20]
    1af4:	f7ff ffc3 	bl	1a7e <_GetAvailWriteSpace>
    1af8:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1afa:	9a04      	ldr	r2, [sp, #16]
    1afc:	9b01      	ldr	r3, [sp, #4]
    1afe:	429a      	cmp	r2, r3
    1b00:	d202      	bcs.n	1b08 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1b02:	2300      	movs	r3, #0
    1b04:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1b06:	e021      	b.n	1b4c <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1b08:	9b01      	ldr	r3, [sp, #4]
    1b0a:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1b0c:	9a01      	ldr	r2, [sp, #4]
    1b0e:	9906      	ldr	r1, [sp, #24]
    1b10:	9805      	ldr	r0, [sp, #20]
    1b12:	f7ff ff6d 	bl	19f0 <_WriteNoCheck>
    break;
    1b16:	e019      	b.n	1b4c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1b18:	9805      	ldr	r0, [sp, #20]
    1b1a:	f7ff ffb0 	bl	1a7e <_GetAvailWriteSpace>
    1b1e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1b20:	9a01      	ldr	r2, [sp, #4]
    1b22:	9b04      	ldr	r3, [sp, #16]
    1b24:	4293      	cmp	r3, r2
    1b26:	bf28      	it	cs
    1b28:	4613      	movcs	r3, r2
    1b2a:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1b2c:	9a07      	ldr	r2, [sp, #28]
    1b2e:	9906      	ldr	r1, [sp, #24]
    1b30:	9805      	ldr	r0, [sp, #20]
    1b32:	f7ff ff5d 	bl	19f0 <_WriteNoCheck>
    break;
    1b36:	e009      	b.n	1b4c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1b38:	9a01      	ldr	r2, [sp, #4]
    1b3a:	9906      	ldr	r1, [sp, #24]
    1b3c:	9805      	ldr	r0, [sp, #20]
    1b3e:	f7ff fefb 	bl	1938 <_WriteBlocking>
    1b42:	9007      	str	r0, [sp, #28]
    break;
    1b44:	e002      	b.n	1b4c <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1b46:	2300      	movs	r3, #0
    1b48:	9307      	str	r3, [sp, #28]
    break;
    1b4a:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1b4c:	9b07      	ldr	r3, [sp, #28]
}
    1b4e:	4618      	mov	r0, r3
    1b50:	b009      	add	sp, #36	; 0x24
    1b52:	f85d fb04 	ldr.w	pc, [sp], #4
    1b56:	bf00      	nop
    1b58:	1fff92c8 	.word	0x1fff92c8

00001b5c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1b5c:	b500      	push	{lr}
    1b5e:	b089      	sub	sp, #36	; 0x24
    1b60:	9003      	str	r0, [sp, #12]
    1b62:	9102      	str	r1, [sp, #8]
    1b64:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1b66:	4b0f      	ldr	r3, [pc, #60]	; (1ba4 <SEGGER_RTT_Write+0x48>)
    1b68:	9307      	str	r3, [sp, #28]
    1b6a:	9b07      	ldr	r3, [sp, #28]
    1b6c:	781b      	ldrb	r3, [r3, #0]
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	2b53      	cmp	r3, #83	; 0x53
    1b72:	d001      	beq.n	1b78 <SEGGER_RTT_Write+0x1c>
    1b74:	f7ff fe86 	bl	1884 <_DoInit>
  SEGGER_RTT_LOCK();
    1b78:	f3ef 8311 	mrs	r3, BASEPRI
    1b7c:	f04f 0120 	mov.w	r1, #32
    1b80:	f381 8811 	msr	BASEPRI, r1
    1b84:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1b86:	9a01      	ldr	r2, [sp, #4]
    1b88:	9902      	ldr	r1, [sp, #8]
    1b8a:	9803      	ldr	r0, [sp, #12]
    1b8c:	f7ff ff96 	bl	1abc <SEGGER_RTT_WriteNoLock>
    1b90:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1b92:	9b06      	ldr	r3, [sp, #24]
    1b94:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1b98:	9b05      	ldr	r3, [sp, #20]
}
    1b9a:	4618      	mov	r0, r3
    1b9c:	b009      	add	sp, #36	; 0x24
    1b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    1ba2:	bf00      	nop
    1ba4:	1fff92c8 	.word	0x1fff92c8

00001ba8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1ba8:	b508      	push	{r3, lr}
  _DoInit();
    1baa:	f7ff fe6b 	bl	1884 <_DoInit>
}
    1bae:	bf00      	nop
    1bb0:	bd08      	pop	{r3, pc}

00001bb2 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1bb2:	b500      	push	{lr}
    1bb4:	b085      	sub	sp, #20
    1bb6:	9001      	str	r0, [sp, #4]
    1bb8:	460b      	mov	r3, r1
    1bba:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1bbe:	9b01      	ldr	r3, [sp, #4]
    1bc0:	689b      	ldr	r3, [r3, #8]
    1bc2:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1bc4:	9b03      	ldr	r3, [sp, #12]
    1bc6:	1c5a      	adds	r2, r3, #1
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	685b      	ldr	r3, [r3, #4]
    1bcc:	429a      	cmp	r2, r3
    1bce:	d80f      	bhi.n	1bf0 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1bd0:	9b01      	ldr	r3, [sp, #4]
    1bd2:	681a      	ldr	r2, [r3, #0]
    1bd4:	9b03      	ldr	r3, [sp, #12]
    1bd6:	4413      	add	r3, r2
    1bd8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1bdc:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1bde:	9b03      	ldr	r3, [sp, #12]
    1be0:	1c5a      	adds	r2, r3, #1
    1be2:	9b01      	ldr	r3, [sp, #4]
    1be4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1be6:	9b01      	ldr	r3, [sp, #4]
    1be8:	68db      	ldr	r3, [r3, #12]
    1bea:	1c5a      	adds	r2, r3, #1
    1bec:	9b01      	ldr	r3, [sp, #4]
    1bee:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1bf0:	9b01      	ldr	r3, [sp, #4]
    1bf2:	689a      	ldr	r2, [r3, #8]
    1bf4:	9b01      	ldr	r3, [sp, #4]
    1bf6:	685b      	ldr	r3, [r3, #4]
    1bf8:	429a      	cmp	r2, r3
    1bfa:	d115      	bne.n	1c28 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1bfc:	9b01      	ldr	r3, [sp, #4]
    1bfe:	6918      	ldr	r0, [r3, #16]
    1c00:	9b01      	ldr	r3, [sp, #4]
    1c02:	6819      	ldr	r1, [r3, #0]
    1c04:	9b01      	ldr	r3, [sp, #4]
    1c06:	689b      	ldr	r3, [r3, #8]
    1c08:	461a      	mov	r2, r3
    1c0a:	f7ff ffa7 	bl	1b5c <SEGGER_RTT_Write>
    1c0e:	4602      	mov	r2, r0
    1c10:	9b01      	ldr	r3, [sp, #4]
    1c12:	689b      	ldr	r3, [r3, #8]
    1c14:	429a      	cmp	r2, r3
    1c16:	d004      	beq.n	1c22 <_StoreChar+0x70>
      p->ReturnValue = -1;
    1c18:	9b01      	ldr	r3, [sp, #4]
    1c1a:	f04f 32ff 	mov.w	r2, #4294967295
    1c1e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1c20:	e002      	b.n	1c28 <_StoreChar+0x76>
      p->Cnt = 0u;
    1c22:	9b01      	ldr	r3, [sp, #4]
    1c24:	2200      	movs	r2, #0
    1c26:	609a      	str	r2, [r3, #8]
}
    1c28:	bf00      	nop
    1c2a:	b005      	add	sp, #20
    1c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c30 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1c30:	b500      	push	{lr}
    1c32:	b08b      	sub	sp, #44	; 0x2c
    1c34:	9003      	str	r0, [sp, #12]
    1c36:	9102      	str	r1, [sp, #8]
    1c38:	9201      	str	r2, [sp, #4]
    1c3a:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1c3c:	9b02      	ldr	r3, [sp, #8]
    1c3e:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1c40:	2301      	movs	r3, #1
    1c42:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1c44:	2301      	movs	r3, #1
    1c46:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1c48:	e007      	b.n	1c5a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1c4a:	9a08      	ldr	r2, [sp, #32]
    1c4c:	9b01      	ldr	r3, [sp, #4]
    1c4e:	fbb2 f3f3 	udiv	r3, r2, r3
    1c52:	9308      	str	r3, [sp, #32]
    Width++;
    1c54:	9b07      	ldr	r3, [sp, #28]
    1c56:	3301      	adds	r3, #1
    1c58:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1c5a:	9a08      	ldr	r2, [sp, #32]
    1c5c:	9b01      	ldr	r3, [sp, #4]
    1c5e:	429a      	cmp	r2, r3
    1c60:	d2f3      	bcs.n	1c4a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1c62:	9a00      	ldr	r2, [sp, #0]
    1c64:	9b07      	ldr	r3, [sp, #28]
    1c66:	429a      	cmp	r2, r3
    1c68:	d901      	bls.n	1c6e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1c6a:	9b00      	ldr	r3, [sp, #0]
    1c6c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c70:	f003 0301 	and.w	r3, r3, #1
    1c74:	2b00      	cmp	r3, #0
    1c76:	d128      	bne.n	1cca <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d025      	beq.n	1cca <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c80:	f003 0302 	and.w	r3, r3, #2
    1c84:	2b00      	cmp	r3, #0
    1c86:	d006      	beq.n	1c96 <_PrintUnsigned+0x66>
    1c88:	9b00      	ldr	r3, [sp, #0]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d103      	bne.n	1c96 <_PrintUnsigned+0x66>
        c = '0';
    1c8e:	2330      	movs	r3, #48	; 0x30
    1c90:	f88d 301b 	strb.w	r3, [sp, #27]
    1c94:	e002      	b.n	1c9c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1c96:	2320      	movs	r3, #32
    1c98:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c9c:	e00c      	b.n	1cb8 <_PrintUnsigned+0x88>
        FieldWidth--;
    1c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ca0:	3b01      	subs	r3, #1
    1ca2:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1ca4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1ca8:	4619      	mov	r1, r3
    1caa:	9803      	ldr	r0, [sp, #12]
    1cac:	f7ff ff81 	bl	1bb2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1cb0:	9b03      	ldr	r3, [sp, #12]
    1cb2:	68db      	ldr	r3, [r3, #12]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	db07      	blt.n	1cc8 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d005      	beq.n	1cca <_PrintUnsigned+0x9a>
    1cbe:	9a07      	ldr	r2, [sp, #28]
    1cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cc2:	429a      	cmp	r2, r3
    1cc4:	d3eb      	bcc.n	1c9e <_PrintUnsigned+0x6e>
    1cc6:	e000      	b.n	1cca <_PrintUnsigned+0x9a>
          break;
    1cc8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1cca:	9b03      	ldr	r3, [sp, #12]
    1ccc:	68db      	ldr	r3, [r3, #12]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	db55      	blt.n	1d7e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1cd2:	9b00      	ldr	r3, [sp, #0]
    1cd4:	2b01      	cmp	r3, #1
    1cd6:	d903      	bls.n	1ce0 <_PrintUnsigned+0xb0>
        NumDigits--;
    1cd8:	9b00      	ldr	r3, [sp, #0]
    1cda:	3b01      	subs	r3, #1
    1cdc:	9300      	str	r3, [sp, #0]
    1cde:	e009      	b.n	1cf4 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1ce0:	9a02      	ldr	r2, [sp, #8]
    1ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ce4:	fbb2 f3f3 	udiv	r3, r2, r3
    1ce8:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1cea:	9a05      	ldr	r2, [sp, #20]
    1cec:	9b01      	ldr	r3, [sp, #4]
    1cee:	429a      	cmp	r2, r3
    1cf0:	d200      	bcs.n	1cf4 <_PrintUnsigned+0xc4>
          break;
    1cf2:	e005      	b.n	1d00 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cf6:	9a01      	ldr	r2, [sp, #4]
    1cf8:	fb02 f303 	mul.w	r3, r2, r3
    1cfc:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1cfe:	e7e8      	b.n	1cd2 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1d00:	9a02      	ldr	r2, [sp, #8]
    1d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d04:	fbb2 f3f3 	udiv	r3, r2, r3
    1d08:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1d0a:	9b05      	ldr	r3, [sp, #20]
    1d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d0e:	fb02 f303 	mul.w	r3, r2, r3
    1d12:	9a02      	ldr	r2, [sp, #8]
    1d14:	1ad3      	subs	r3, r2, r3
    1d16:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1d18:	4a1b      	ldr	r2, [pc, #108]	; (1d88 <_PrintUnsigned+0x158>)
    1d1a:	9b05      	ldr	r3, [sp, #20]
    1d1c:	4413      	add	r3, r2
    1d1e:	781b      	ldrb	r3, [r3, #0]
    1d20:	4619      	mov	r1, r3
    1d22:	9803      	ldr	r0, [sp, #12]
    1d24:	f7ff ff45 	bl	1bb2 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1d28:	9b03      	ldr	r3, [sp, #12]
    1d2a:	68db      	ldr	r3, [r3, #12]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	db08      	blt.n	1d42 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d32:	9b01      	ldr	r3, [sp, #4]
    1d34:	fbb2 f3f3 	udiv	r3, r2, r3
    1d38:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d1df      	bne.n	1d00 <_PrintUnsigned+0xd0>
    1d40:	e000      	b.n	1d44 <_PrintUnsigned+0x114>
        break;
    1d42:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d46:	f003 0301 	and.w	r3, r3, #1
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d017      	beq.n	1d7e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d50:	2b00      	cmp	r3, #0
    1d52:	d014      	beq.n	1d7e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d54:	e00a      	b.n	1d6c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d58:	3b01      	subs	r3, #1
    1d5a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1d5c:	2120      	movs	r1, #32
    1d5e:	9803      	ldr	r0, [sp, #12]
    1d60:	f7ff ff27 	bl	1bb2 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1d64:	9b03      	ldr	r3, [sp, #12]
    1d66:	68db      	ldr	r3, [r3, #12]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	db07      	blt.n	1d7c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d005      	beq.n	1d7e <_PrintUnsigned+0x14e>
    1d72:	9a07      	ldr	r2, [sp, #28]
    1d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d76:	429a      	cmp	r2, r3
    1d78:	d3ed      	bcc.n	1d56 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1d7a:	e000      	b.n	1d7e <_PrintUnsigned+0x14e>
            break;
    1d7c:	bf00      	nop
}
    1d7e:	bf00      	nop
    1d80:	b00b      	add	sp, #44	; 0x2c
    1d82:	f85d fb04 	ldr.w	pc, [sp], #4
    1d86:	bf00      	nop
    1d88:	000125ac 	.word	0x000125ac

00001d8c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1d8c:	b500      	push	{lr}
    1d8e:	b089      	sub	sp, #36	; 0x24
    1d90:	9005      	str	r0, [sp, #20]
    1d92:	9104      	str	r1, [sp, #16]
    1d94:	9203      	str	r2, [sp, #12]
    1d96:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1d98:	9b04      	ldr	r3, [sp, #16]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	bfb8      	it	lt
    1d9e:	425b      	neglt	r3, r3
    1da0:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1da2:	2301      	movs	r3, #1
    1da4:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1da6:	e007      	b.n	1db8 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1da8:	9b03      	ldr	r3, [sp, #12]
    1daa:	9a06      	ldr	r2, [sp, #24]
    1dac:	fb92 f3f3 	sdiv	r3, r2, r3
    1db0:	9306      	str	r3, [sp, #24]
    Width++;
    1db2:	9b07      	ldr	r3, [sp, #28]
    1db4:	3301      	adds	r3, #1
    1db6:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1db8:	9b03      	ldr	r3, [sp, #12]
    1dba:	9a06      	ldr	r2, [sp, #24]
    1dbc:	429a      	cmp	r2, r3
    1dbe:	daf3      	bge.n	1da8 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1dc0:	9a02      	ldr	r2, [sp, #8]
    1dc2:	9b07      	ldr	r3, [sp, #28]
    1dc4:	429a      	cmp	r2, r3
    1dc6:	d901      	bls.n	1dcc <_PrintInt+0x40>
    Width = NumDigits;
    1dc8:	9b02      	ldr	r3, [sp, #8]
    1dca:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d00a      	beq.n	1de8 <_PrintInt+0x5c>
    1dd2:	9b04      	ldr	r3, [sp, #16]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	db04      	blt.n	1de2 <_PrintInt+0x56>
    1dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dda:	f003 0304 	and.w	r3, r3, #4
    1dde:	2b00      	cmp	r3, #0
    1de0:	d002      	beq.n	1de8 <_PrintInt+0x5c>
    FieldWidth--;
    1de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1de4:	3b01      	subs	r3, #1
    1de6:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dea:	f003 0302 	and.w	r3, r3, #2
    1dee:	2b00      	cmp	r3, #0
    1df0:	d002      	beq.n	1df8 <_PrintInt+0x6c>
    1df2:	9b02      	ldr	r3, [sp, #8]
    1df4:	2b00      	cmp	r3, #0
    1df6:	d01c      	beq.n	1e32 <_PrintInt+0xa6>
    1df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dfa:	f003 0301 	and.w	r3, r3, #1
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d117      	bne.n	1e32 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e04:	2b00      	cmp	r3, #0
    1e06:	d014      	beq.n	1e32 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e08:	e00a      	b.n	1e20 <_PrintInt+0x94>
        FieldWidth--;
    1e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e0c:	3b01      	subs	r3, #1
    1e0e:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1e10:	2120      	movs	r1, #32
    1e12:	9805      	ldr	r0, [sp, #20]
    1e14:	f7ff fecd 	bl	1bb2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1e18:	9b05      	ldr	r3, [sp, #20]
    1e1a:	68db      	ldr	r3, [r3, #12]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	db07      	blt.n	1e30 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e22:	2b00      	cmp	r3, #0
    1e24:	d005      	beq.n	1e32 <_PrintInt+0xa6>
    1e26:	9a07      	ldr	r2, [sp, #28]
    1e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e2a:	429a      	cmp	r2, r3
    1e2c:	d3ed      	bcc.n	1e0a <_PrintInt+0x7e>
    1e2e:	e000      	b.n	1e32 <_PrintInt+0xa6>
          break;
    1e30:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1e32:	9b05      	ldr	r3, [sp, #20]
    1e34:	68db      	ldr	r3, [r3, #12]
    1e36:	2b00      	cmp	r3, #0
    1e38:	db4a      	blt.n	1ed0 <_PrintInt+0x144>
    if (v < 0) {
    1e3a:	9b04      	ldr	r3, [sp, #16]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	da07      	bge.n	1e50 <_PrintInt+0xc4>
      v = -v;
    1e40:	9b04      	ldr	r3, [sp, #16]
    1e42:	425b      	negs	r3, r3
    1e44:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1e46:	212d      	movs	r1, #45	; 0x2d
    1e48:	9805      	ldr	r0, [sp, #20]
    1e4a:	f7ff feb2 	bl	1bb2 <_StoreChar>
    1e4e:	e008      	b.n	1e62 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e52:	f003 0304 	and.w	r3, r3, #4
    1e56:	2b00      	cmp	r3, #0
    1e58:	d003      	beq.n	1e62 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1e5a:	212b      	movs	r1, #43	; 0x2b
    1e5c:	9805      	ldr	r0, [sp, #20]
    1e5e:	f7ff fea8 	bl	1bb2 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1e62:	9b05      	ldr	r3, [sp, #20]
    1e64:	68db      	ldr	r3, [r3, #12]
    1e66:	2b00      	cmp	r3, #0
    1e68:	db32      	blt.n	1ed0 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e6c:	f003 0302 	and.w	r3, r3, #2
    1e70:	2b00      	cmp	r3, #0
    1e72:	d01f      	beq.n	1eb4 <_PrintInt+0x128>
    1e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e76:	f003 0301 	and.w	r3, r3, #1
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d11a      	bne.n	1eb4 <_PrintInt+0x128>
    1e7e:	9b02      	ldr	r3, [sp, #8]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d117      	bne.n	1eb4 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e86:	2b00      	cmp	r3, #0
    1e88:	d014      	beq.n	1eb4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e8a:	e00a      	b.n	1ea2 <_PrintInt+0x116>
            FieldWidth--;
    1e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e8e:	3b01      	subs	r3, #1
    1e90:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1e92:	2130      	movs	r1, #48	; 0x30
    1e94:	9805      	ldr	r0, [sp, #20]
    1e96:	f7ff fe8c 	bl	1bb2 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1e9a:	9b05      	ldr	r3, [sp, #20]
    1e9c:	68db      	ldr	r3, [r3, #12]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	db07      	blt.n	1eb2 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d005      	beq.n	1eb4 <_PrintInt+0x128>
    1ea8:	9a07      	ldr	r2, [sp, #28]
    1eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1eac:	429a      	cmp	r2, r3
    1eae:	d3ed      	bcc.n	1e8c <_PrintInt+0x100>
    1eb0:	e000      	b.n	1eb4 <_PrintInt+0x128>
              break;
    1eb2:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1eb4:	9b05      	ldr	r3, [sp, #20]
    1eb6:	68db      	ldr	r3, [r3, #12]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	db09      	blt.n	1ed0 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1ebc:	9904      	ldr	r1, [sp, #16]
    1ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ec0:	9301      	str	r3, [sp, #4]
    1ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ec4:	9300      	str	r3, [sp, #0]
    1ec6:	9b02      	ldr	r3, [sp, #8]
    1ec8:	9a03      	ldr	r2, [sp, #12]
    1eca:	9805      	ldr	r0, [sp, #20]
    1ecc:	f7ff feb0 	bl	1c30 <_PrintUnsigned>
      }
    }
  }
}
    1ed0:	bf00      	nop
    1ed2:	b009      	add	sp, #36	; 0x24
    1ed4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ed8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1ed8:	b500      	push	{lr}
    1eda:	b0a3      	sub	sp, #140	; 0x8c
    1edc:	9005      	str	r0, [sp, #20]
    1ede:	9104      	str	r1, [sp, #16]
    1ee0:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1ee2:	ab06      	add	r3, sp, #24
    1ee4:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1ee6:	2340      	movs	r3, #64	; 0x40
    1ee8:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1eea:	2300      	movs	r3, #0
    1eec:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1eee:	9b05      	ldr	r3, [sp, #20]
    1ef0:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1ef2:	2300      	movs	r3, #0
    1ef4:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1ef6:	9b04      	ldr	r3, [sp, #16]
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1efe:	9b04      	ldr	r3, [sp, #16]
    1f00:	3301      	adds	r3, #1
    1f02:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1f04:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f08:	2b00      	cmp	r3, #0
    1f0a:	f000 819c 	beq.w	2246 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1f0e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f12:	2b25      	cmp	r3, #37	; 0x25
    1f14:	f040 818b 	bne.w	222e <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1f18:	2300      	movs	r3, #0
    1f1a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1f1c:	2301      	movs	r3, #1
    1f1e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1f20:	9b04      	ldr	r3, [sp, #16]
    1f22:	781b      	ldrb	r3, [r3, #0]
    1f24:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1f28:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f2c:	3b23      	subs	r3, #35	; 0x23
    1f2e:	2b0d      	cmp	r3, #13
    1f30:	d83e      	bhi.n	1fb0 <SEGGER_RTT_vprintf+0xd8>
    1f32:	a201      	add	r2, pc, #4	; (adr r2, 1f38 <SEGGER_RTT_vprintf+0x60>)
    1f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f38:	00001fa1 	.word	0x00001fa1
    1f3c:	00001fb1 	.word	0x00001fb1
    1f40:	00001fb1 	.word	0x00001fb1
    1f44:	00001fb1 	.word	0x00001fb1
    1f48:	00001fb1 	.word	0x00001fb1
    1f4c:	00001fb1 	.word	0x00001fb1
    1f50:	00001fb1 	.word	0x00001fb1
    1f54:	00001fb1 	.word	0x00001fb1
    1f58:	00001f91 	.word	0x00001f91
    1f5c:	00001fb1 	.word	0x00001fb1
    1f60:	00001f71 	.word	0x00001f71
    1f64:	00001fb1 	.word	0x00001fb1
    1f68:	00001fb1 	.word	0x00001fb1
    1f6c:	00001f81 	.word	0x00001f81
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1f70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f72:	f043 0301 	orr.w	r3, r3, #1
    1f76:	931e      	str	r3, [sp, #120]	; 0x78
    1f78:	9b04      	ldr	r3, [sp, #16]
    1f7a:	3301      	adds	r3, #1
    1f7c:	9304      	str	r3, [sp, #16]
    1f7e:	e01a      	b.n	1fb6 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1f80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f82:	f043 0302 	orr.w	r3, r3, #2
    1f86:	931e      	str	r3, [sp, #120]	; 0x78
    1f88:	9b04      	ldr	r3, [sp, #16]
    1f8a:	3301      	adds	r3, #1
    1f8c:	9304      	str	r3, [sp, #16]
    1f8e:	e012      	b.n	1fb6 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1f90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f92:	f043 0304 	orr.w	r3, r3, #4
    1f96:	931e      	str	r3, [sp, #120]	; 0x78
    1f98:	9b04      	ldr	r3, [sp, #16]
    1f9a:	3301      	adds	r3, #1
    1f9c:	9304      	str	r3, [sp, #16]
    1f9e:	e00a      	b.n	1fb6 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1fa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1fa2:	f043 0308 	orr.w	r3, r3, #8
    1fa6:	931e      	str	r3, [sp, #120]	; 0x78
    1fa8:	9b04      	ldr	r3, [sp, #16]
    1faa:	3301      	adds	r3, #1
    1fac:	9304      	str	r3, [sp, #16]
    1fae:	e002      	b.n	1fb6 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1fb0:	2300      	movs	r3, #0
    1fb2:	9320      	str	r3, [sp, #128]	; 0x80
    1fb4:	bf00      	nop
        }
      } while (v);
    1fb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1fb8:	2b00      	cmp	r3, #0
    1fba:	d1b1      	bne.n	1f20 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1fbc:	2300      	movs	r3, #0
    1fbe:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1fc0:	9b04      	ldr	r3, [sp, #16]
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1fc8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fcc:	2b2f      	cmp	r3, #47	; 0x2f
    1fce:	d912      	bls.n	1ff6 <SEGGER_RTT_vprintf+0x11e>
    1fd0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fd4:	2b39      	cmp	r3, #57	; 0x39
    1fd6:	d80e      	bhi.n	1ff6 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1fd8:	9b04      	ldr	r3, [sp, #16]
    1fda:	3301      	adds	r3, #1
    1fdc:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1fde:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1fe0:	4613      	mov	r3, r2
    1fe2:	009b      	lsls	r3, r3, #2
    1fe4:	4413      	add	r3, r2
    1fe6:	005b      	lsls	r3, r3, #1
    1fe8:	461a      	mov	r2, r3
    1fea:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fee:	4413      	add	r3, r2
    1ff0:	3b30      	subs	r3, #48	; 0x30
    1ff2:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1ff4:	e7e4      	b.n	1fc0 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1ff6:	2300      	movs	r3, #0
    1ff8:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1ffa:	9b04      	ldr	r3, [sp, #16]
    1ffc:	781b      	ldrb	r3, [r3, #0]
    1ffe:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    2002:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2006:	2b2e      	cmp	r3, #46	; 0x2e
    2008:	d11d      	bne.n	2046 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    200a:	9b04      	ldr	r3, [sp, #16]
    200c:	3301      	adds	r3, #1
    200e:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    2010:	9b04      	ldr	r3, [sp, #16]
    2012:	781b      	ldrb	r3, [r3, #0]
    2014:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    2018:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    201c:	2b2f      	cmp	r3, #47	; 0x2f
    201e:	d912      	bls.n	2046 <SEGGER_RTT_vprintf+0x16e>
    2020:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2024:	2b39      	cmp	r3, #57	; 0x39
    2026:	d80e      	bhi.n	2046 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    2028:	9b04      	ldr	r3, [sp, #16]
    202a:	3301      	adds	r3, #1
    202c:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    202e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2030:	4613      	mov	r3, r2
    2032:	009b      	lsls	r3, r3, #2
    2034:	4413      	add	r3, r2
    2036:	005b      	lsls	r3, r3, #1
    2038:	461a      	mov	r2, r3
    203a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    203e:	4413      	add	r3, r2
    2040:	3b30      	subs	r3, #48	; 0x30
    2042:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    2044:	e7e4      	b.n	2010 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    2046:	9b04      	ldr	r3, [sp, #16]
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    204e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2052:	2b6c      	cmp	r3, #108	; 0x6c
    2054:	d003      	beq.n	205e <SEGGER_RTT_vprintf+0x186>
    2056:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    205a:	2b68      	cmp	r3, #104	; 0x68
    205c:	d107      	bne.n	206e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    205e:	9b04      	ldr	r3, [sp, #16]
    2060:	3301      	adds	r3, #1
    2062:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    2064:	9b04      	ldr	r3, [sp, #16]
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    206c:	e7ef      	b.n	204e <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    206e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2072:	2b25      	cmp	r3, #37	; 0x25
    2074:	f000 80d0 	beq.w	2218 <SEGGER_RTT_vprintf+0x340>
    2078:	2b25      	cmp	r3, #37	; 0x25
    207a:	f2c0 80d3 	blt.w	2224 <SEGGER_RTT_vprintf+0x34c>
    207e:	2b78      	cmp	r3, #120	; 0x78
    2080:	f300 80d0 	bgt.w	2224 <SEGGER_RTT_vprintf+0x34c>
    2084:	2b58      	cmp	r3, #88	; 0x58
    2086:	f2c0 80cd 	blt.w	2224 <SEGGER_RTT_vprintf+0x34c>
    208a:	3b58      	subs	r3, #88	; 0x58
    208c:	2b20      	cmp	r3, #32
    208e:	f200 80c9 	bhi.w	2224 <SEGGER_RTT_vprintf+0x34c>
    2092:	a201      	add	r2, pc, #4	; (adr r2, 2098 <SEGGER_RTT_vprintf+0x1c0>)
    2094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2098:	00002189 	.word	0x00002189
    209c:	00002225 	.word	0x00002225
    20a0:	00002225 	.word	0x00002225
    20a4:	00002225 	.word	0x00002225
    20a8:	00002225 	.word	0x00002225
    20ac:	00002225 	.word	0x00002225
    20b0:	00002225 	.word	0x00002225
    20b4:	00002225 	.word	0x00002225
    20b8:	00002225 	.word	0x00002225
    20bc:	00002225 	.word	0x00002225
    20c0:	00002225 	.word	0x00002225
    20c4:	0000211d 	.word	0x0000211d
    20c8:	00002141 	.word	0x00002141
    20cc:	00002225 	.word	0x00002225
    20d0:	00002225 	.word	0x00002225
    20d4:	00002225 	.word	0x00002225
    20d8:	00002225 	.word	0x00002225
    20dc:	00002225 	.word	0x00002225
    20e0:	00002225 	.word	0x00002225
    20e4:	00002225 	.word	0x00002225
    20e8:	00002225 	.word	0x00002225
    20ec:	00002225 	.word	0x00002225
    20f0:	00002225 	.word	0x00002225
    20f4:	00002225 	.word	0x00002225
    20f8:	000021f5 	.word	0x000021f5
    20fc:	00002225 	.word	0x00002225
    2100:	00002225 	.word	0x00002225
    2104:	000021ad 	.word	0x000021ad
    2108:	00002225 	.word	0x00002225
    210c:	00002165 	.word	0x00002165
    2110:	00002225 	.word	0x00002225
    2114:	00002225 	.word	0x00002225
    2118:	00002189 	.word	0x00002189
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    211c:	9b03      	ldr	r3, [sp, #12]
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	1d19      	adds	r1, r3, #4
    2122:	9a03      	ldr	r2, [sp, #12]
    2124:	6011      	str	r1, [r2, #0]
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    212a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    212c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    2130:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    2134:	ab16      	add	r3, sp, #88	; 0x58
    2136:	4611      	mov	r1, r2
    2138:	4618      	mov	r0, r3
    213a:	f7ff fd3a 	bl	1bb2 <_StoreChar>
        break;
    213e:	e072      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    2140:	9b03      	ldr	r3, [sp, #12]
    2142:	681b      	ldr	r3, [r3, #0]
    2144:	1d19      	adds	r1, r3, #4
    2146:	9a03      	ldr	r2, [sp, #12]
    2148:	6011      	str	r1, [r2, #0]
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    214e:	a816      	add	r0, sp, #88	; 0x58
    2150:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2152:	9301      	str	r3, [sp, #4]
    2154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2156:	9300      	str	r3, [sp, #0]
    2158:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    215a:	220a      	movs	r2, #10
    215c:	9920      	ldr	r1, [sp, #128]	; 0x80
    215e:	f7ff fe15 	bl	1d8c <_PrintInt>
        break;
    2162:	e060      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    2164:	9b03      	ldr	r3, [sp, #12]
    2166:	681b      	ldr	r3, [r3, #0]
    2168:	1d19      	adds	r1, r3, #4
    216a:	9a03      	ldr	r2, [sp, #12]
    216c:	6011      	str	r1, [r2, #0]
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    2172:	9920      	ldr	r1, [sp, #128]	; 0x80
    2174:	a816      	add	r0, sp, #88	; 0x58
    2176:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2178:	9301      	str	r3, [sp, #4]
    217a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    217c:	9300      	str	r3, [sp, #0]
    217e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2180:	220a      	movs	r2, #10
    2182:	f7ff fd55 	bl	1c30 <_PrintUnsigned>
        break;
    2186:	e04e      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    2188:	9b03      	ldr	r3, [sp, #12]
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	1d19      	adds	r1, r3, #4
    218e:	9a03      	ldr	r2, [sp, #12]
    2190:	6011      	str	r1, [r2, #0]
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    2196:	9920      	ldr	r1, [sp, #128]	; 0x80
    2198:	a816      	add	r0, sp, #88	; 0x58
    219a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    219c:	9301      	str	r3, [sp, #4]
    219e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    21a0:	9300      	str	r3, [sp, #0]
    21a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    21a4:	2210      	movs	r2, #16
    21a6:	f7ff fd43 	bl	1c30 <_PrintUnsigned>
        break;
    21aa:	e03c      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    21ac:	9b03      	ldr	r3, [sp, #12]
    21ae:	681b      	ldr	r3, [r3, #0]
    21b0:	1d19      	adds	r1, r3, #4
    21b2:	9a03      	ldr	r2, [sp, #12]
    21b4:	6011      	str	r1, [r2, #0]
    21b6:	681b      	ldr	r3, [r3, #0]
    21b8:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    21ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    21bc:	2b00      	cmp	r3, #0
    21be:	d101      	bne.n	21c4 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    21c0:	4b2c      	ldr	r3, [pc, #176]	; (2274 <SEGGER_RTT_vprintf+0x39c>)
    21c2:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    21c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    21c6:	781b      	ldrb	r3, [r3, #0]
    21c8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    21cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    21ce:	3301      	adds	r3, #1
    21d0:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    21d2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21d6:	2b00      	cmp	r3, #0
    21d8:	d00a      	beq.n	21f0 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    21da:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    21de:	ab16      	add	r3, sp, #88	; 0x58
    21e0:	4611      	mov	r1, r2
    21e2:	4618      	mov	r0, r3
    21e4:	f7ff fce5 	bl	1bb2 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    21e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    21ea:	2b00      	cmp	r3, #0
    21ec:	daea      	bge.n	21c4 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    21ee:	e01a      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
              break;
    21f0:	bf00      	nop
        break;
    21f2:	e018      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    21f4:	9b03      	ldr	r3, [sp, #12]
    21f6:	681b      	ldr	r3, [r3, #0]
    21f8:	1d19      	adds	r1, r3, #4
    21fa:	9a03      	ldr	r2, [sp, #12]
    21fc:	6011      	str	r1, [r2, #0]
    21fe:	681b      	ldr	r3, [r3, #0]
    2200:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    2202:	9920      	ldr	r1, [sp, #128]	; 0x80
    2204:	a816      	add	r0, sp, #88	; 0x58
    2206:	2300      	movs	r3, #0
    2208:	9301      	str	r3, [sp, #4]
    220a:	2308      	movs	r3, #8
    220c:	9300      	str	r3, [sp, #0]
    220e:	2308      	movs	r3, #8
    2210:	2210      	movs	r2, #16
    2212:	f7ff fd0d 	bl	1c30 <_PrintUnsigned>
        break;
    2216:	e006      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    2218:	ab16      	add	r3, sp, #88	; 0x58
    221a:	2125      	movs	r1, #37	; 0x25
    221c:	4618      	mov	r0, r3
    221e:	f7ff fcc8 	bl	1bb2 <_StoreChar>
        break;
    2222:	e000      	b.n	2226 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    2224:	bf00      	nop
      }
      sFormat++;
    2226:	9b04      	ldr	r3, [sp, #16]
    2228:	3301      	adds	r3, #1
    222a:	9304      	str	r3, [sp, #16]
    222c:	e006      	b.n	223c <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    222e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    2232:	ab16      	add	r3, sp, #88	; 0x58
    2234:	4611      	mov	r1, r2
    2236:	4618      	mov	r0, r3
    2238:	f7ff fcbb 	bl	1bb2 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    223c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    223e:	2b00      	cmp	r3, #0
    2240:	f6bf ae59 	bge.w	1ef6 <SEGGER_RTT_vprintf+0x1e>
    2244:	e000      	b.n	2248 <SEGGER_RTT_vprintf+0x370>
      break;
    2246:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    2248:	9b19      	ldr	r3, [sp, #100]	; 0x64
    224a:	2b00      	cmp	r3, #0
    224c:	dd0c      	ble.n	2268 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    224e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2250:	2b00      	cmp	r3, #0
    2252:	d005      	beq.n	2260 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    2254:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2256:	ab06      	add	r3, sp, #24
    2258:	4619      	mov	r1, r3
    225a:	9805      	ldr	r0, [sp, #20]
    225c:	f7ff fc7e 	bl	1b5c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    2260:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2262:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2264:	4413      	add	r3, r2
    2266:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    2268:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    226a:	4618      	mov	r0, r3
    226c:	b023      	add	sp, #140	; 0x8c
    226e:	f85d fb04 	ldr.w	pc, [sp], #4
    2272:	bf00      	nop
    2274:	00011424 	.word	0x00011424

00002278 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    2278:	b40e      	push	{r1, r2, r3}
    227a:	b500      	push	{lr}
    227c:	b084      	sub	sp, #16
    227e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    2280:	ab06      	add	r3, sp, #24
    2282:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    2284:	ab02      	add	r3, sp, #8
    2286:	461a      	mov	r2, r3
    2288:	9905      	ldr	r1, [sp, #20]
    228a:	9801      	ldr	r0, [sp, #4]
    228c:	f7ff fe24 	bl	1ed8 <SEGGER_RTT_vprintf>
    2290:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    2292:	9b03      	ldr	r3, [sp, #12]
}
    2294:	4618      	mov	r0, r3
    2296:	b004      	add	sp, #16
    2298:	f85d eb04 	ldr.w	lr, [sp], #4
    229c:	b003      	add	sp, #12
    229e:	4770      	bx	lr

000022a0 <memcpy>:
    22a0:	440a      	add	r2, r1
    22a2:	4291      	cmp	r1, r2
    22a4:	f100 33ff 	add.w	r3, r0, #4294967295
    22a8:	d100      	bne.n	22ac <memcpy+0xc>
    22aa:	4770      	bx	lr
    22ac:	b510      	push	{r4, lr}
    22ae:	f811 4b01 	ldrb.w	r4, [r1], #1
    22b2:	f803 4f01 	strb.w	r4, [r3, #1]!
    22b6:	4291      	cmp	r1, r2
    22b8:	d1f9      	bne.n	22ae <memcpy+0xe>
    22ba:	bd10      	pop	{r4, pc}

000022bc <memset>:
    22bc:	4402      	add	r2, r0
    22be:	4603      	mov	r3, r0
    22c0:	4293      	cmp	r3, r2
    22c2:	d100      	bne.n	22c6 <memset+0xa>
    22c4:	4770      	bx	lr
    22c6:	f803 1b01 	strb.w	r1, [r3], #1
    22ca:	e7f9      	b.n	22c0 <memset+0x4>

000022cc <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    22cc:	b086      	sub	sp, #24
    22ce:	9003      	str	r0, [sp, #12]
    22d0:	9102      	str	r1, [sp, #8]
    22d2:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    22d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    22d8:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    22dc:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    22de:	9b01      	ldr	r3, [sp, #4]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d007      	beq.n	22f4 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    22e4:	9b03      	ldr	r3, [sp, #12]
    22e6:	3310      	adds	r3, #16
    22e8:	009b      	lsls	r3, r3, #2
    22ea:	9a05      	ldr	r2, [sp, #20]
    22ec:	4413      	add	r3, r2
    22ee:	681a      	ldr	r2, [r3, #0]
    22f0:	9b01      	ldr	r3, [sp, #4]
    22f2:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    22f4:	9b03      	ldr	r3, [sp, #12]
    22f6:	3310      	adds	r3, #16
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	9a05      	ldr	r2, [sp, #20]
    22fc:	4413      	add	r3, r2
    22fe:	9a02      	ldr	r2, [sp, #8]
    2300:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    2302:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    2306:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    230a:	bf00      	nop
    230c:	b006      	add	sp, #24
    230e:	4770      	bx	lr

00002310 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    2310:	b082      	sub	sp, #8
    2312:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2314:	9b01      	ldr	r3, [sp, #4]
    2316:	f003 021f 	and.w	r2, r3, #31
    231a:	4905      	ldr	r1, [pc, #20]	; (2330 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    231c:	9b01      	ldr	r3, [sp, #4]
    231e:	095b      	lsrs	r3, r3, #5
    2320:	2001      	movs	r0, #1
    2322:	fa00 f202 	lsl.w	r2, r0, r2
    2326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    232a:	bf00      	nop
    232c:	b002      	add	sp, #8
    232e:	4770      	bx	lr
    2330:	e000e100 	.word	0xe000e100

00002334 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    2334:	b082      	sub	sp, #8
    2336:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2338:	9b01      	ldr	r3, [sp, #4]
    233a:	f003 021f 	and.w	r2, r3, #31
    233e:	4906      	ldr	r1, [pc, #24]	; (2358 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    2340:	9b01      	ldr	r3, [sp, #4]
    2342:	095b      	lsrs	r3, r3, #5
    2344:	2001      	movs	r0, #1
    2346:	fa00 f202 	lsl.w	r2, r0, r2
    234a:	3320      	adds	r3, #32
    234c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    2350:	bf00      	nop
    2352:	b002      	add	sp, #8
    2354:	4770      	bx	lr
    2356:	bf00      	nop
    2358:	e000e100 	.word	0xe000e100

0000235c <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    235c:	b084      	sub	sp, #16
    235e:	9001      	str	r0, [sp, #4]
    2360:	460b      	mov	r3, r1
    2362:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2366:	2304      	movs	r3, #4
    2368:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    236c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2370:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2374:	fa02 f103 	lsl.w	r1, r2, r3
    2378:	4a04      	ldr	r2, [pc, #16]	; (238c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    237a:	9b01      	ldr	r3, [sp, #4]
    237c:	b2c9      	uxtb	r1, r1
    237e:	4413      	add	r3, r2
    2380:	460a      	mov	r2, r1
    2382:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    2386:	bf00      	nop
    2388:	b004      	add	sp, #16
    238a:	4770      	bx	lr
    238c:	e000e100 	.word	0xe000e100

00002390 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    2390:	b084      	sub	sp, #16
    2392:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2394:	2304      	movs	r3, #4
    2396:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    239a:	4a09      	ldr	r2, [pc, #36]	; (23c0 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    239c:	9b01      	ldr	r3, [sp, #4]
    239e:	4413      	add	r3, r2
    23a0:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    23a4:	b2db      	uxtb	r3, r3
    23a6:	461a      	mov	r2, r3
    23a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    23ac:	fa42 f303 	asr.w	r3, r2, r3
    23b0:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    23b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    23b8:	4618      	mov	r0, r3
    23ba:	b004      	add	sp, #16
    23bc:	4770      	bx	lr
    23be:	bf00      	nop
    23c0:	e000e100 	.word	0xe000e100

000023c4 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    23c4:	b082      	sub	sp, #8
    23c6:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    23c8:	9b01      	ldr	r3, [sp, #4]
    23ca:	f003 021f 	and.w	r2, r3, #31
    23ce:	4906      	ldr	r1, [pc, #24]	; (23e8 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    23d0:	9b01      	ldr	r3, [sp, #4]
    23d2:	095b      	lsrs	r3, r3, #5
    23d4:	2001      	movs	r0, #1
    23d6:	fa00 f202 	lsl.w	r2, r0, r2
    23da:	3360      	adds	r3, #96	; 0x60
    23dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    23e0:	bf00      	nop
    23e2:	b002      	add	sp, #8
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop
    23e8:	e000e100 	.word	0xe000e100

000023ec <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    23ec:	b500      	push	{lr}
    23ee:	b085      	sub	sp, #20
    23f0:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    23f2:	2300      	movs	r3, #0
    23f4:	9303      	str	r3, [sp, #12]
    23f6:	e05d      	b.n	24b4 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    23f8:	9b01      	ldr	r3, [sp, #4]
    23fa:	6859      	ldr	r1, [r3, #4]
    23fc:	9a03      	ldr	r2, [sp, #12]
    23fe:	4613      	mov	r3, r2
    2400:	005b      	lsls	r3, r3, #1
    2402:	4413      	add	r3, r2
    2404:	009b      	lsls	r3, r3, #2
    2406:	440b      	add	r3, r1
    2408:	681b      	ldr	r3, [r3, #0]
    240a:	4618      	mov	r0, r3
    240c:	f000 f899 	bl	2542 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2410:	9b01      	ldr	r3, [sp, #4]
    2412:	6859      	ldr	r1, [r3, #4]
    2414:	9a03      	ldr	r2, [sp, #12]
    2416:	4613      	mov	r3, r2
    2418:	005b      	lsls	r3, r3, #1
    241a:	4413      	add	r3, r2
    241c:	009b      	lsls	r3, r3, #2
    241e:	440b      	add	r3, r1
    2420:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    2422:	9b01      	ldr	r3, [sp, #4]
    2424:	6859      	ldr	r1, [r3, #4]
    2426:	9a03      	ldr	r2, [sp, #12]
    2428:	4613      	mov	r3, r2
    242a:	005b      	lsls	r3, r3, #1
    242c:	4413      	add	r3, r2
    242e:	009b      	lsls	r3, r3, #2
    2430:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2432:	795b      	ldrb	r3, [r3, #5]
    2434:	4619      	mov	r1, r3
    2436:	f000 f869 	bl	250c <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	6859      	ldr	r1, [r3, #4]
    243e:	9a03      	ldr	r2, [sp, #12]
    2440:	4613      	mov	r3, r2
    2442:	005b      	lsls	r3, r3, #1
    2444:	4413      	add	r3, r2
    2446:	009b      	lsls	r3, r3, #2
    2448:	440b      	add	r3, r1
    244a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    244c:	9b01      	ldr	r3, [sp, #4]
    244e:	6859      	ldr	r1, [r3, #4]
    2450:	9a03      	ldr	r2, [sp, #12]
    2452:	4613      	mov	r3, r2
    2454:	005b      	lsls	r3, r3, #1
    2456:	4413      	add	r3, r2
    2458:	009b      	lsls	r3, r3, #2
    245a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    245c:	689b      	ldr	r3, [r3, #8]
    245e:	2200      	movs	r2, #0
    2460:	4619      	mov	r1, r3
    2462:	f000 f831 	bl	24c8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2466:	9b01      	ldr	r3, [sp, #4]
    2468:	6859      	ldr	r1, [r3, #4]
    246a:	9a03      	ldr	r2, [sp, #12]
    246c:	4613      	mov	r3, r2
    246e:	005b      	lsls	r3, r3, #1
    2470:	4413      	add	r3, r2
    2472:	009b      	lsls	r3, r3, #2
    2474:	440b      	add	r3, r1
    2476:	791b      	ldrb	r3, [r3, #4]
    2478:	2b00      	cmp	r3, #0
    247a:	d00c      	beq.n	2496 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    247c:	9b01      	ldr	r3, [sp, #4]
    247e:	6859      	ldr	r1, [r3, #4]
    2480:	9a03      	ldr	r2, [sp, #12]
    2482:	4613      	mov	r3, r2
    2484:	005b      	lsls	r3, r3, #1
    2486:	4413      	add	r3, r2
    2488:	009b      	lsls	r3, r3, #2
    248a:	440b      	add	r3, r1
    248c:	681b      	ldr	r3, [r3, #0]
    248e:	4618      	mov	r0, r3
    2490:	f000 f828 	bl	24e4 <IntCtrl_Ip_EnableIrq>
    2494:	e00b      	b.n	24ae <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2496:	9b01      	ldr	r3, [sp, #4]
    2498:	6859      	ldr	r1, [r3, #4]
    249a:	9a03      	ldr	r2, [sp, #12]
    249c:	4613      	mov	r3, r2
    249e:	005b      	lsls	r3, r3, #1
    24a0:	4413      	add	r3, r2
    24a2:	009b      	lsls	r3, r3, #2
    24a4:	440b      	add	r3, r1
    24a6:	681b      	ldr	r3, [r3, #0]
    24a8:	4618      	mov	r0, r3
    24aa:	f000 f825 	bl	24f8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    24ae:	9b03      	ldr	r3, [sp, #12]
    24b0:	3301      	adds	r3, #1
    24b2:	9303      	str	r3, [sp, #12]
    24b4:	9b01      	ldr	r3, [sp, #4]
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	9a03      	ldr	r2, [sp, #12]
    24ba:	429a      	cmp	r2, r3
    24bc:	d39c      	bcc.n	23f8 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    24be:	2300      	movs	r3, #0
}
    24c0:	4618      	mov	r0, r3
    24c2:	b005      	add	sp, #20
    24c4:	f85d fb04 	ldr.w	pc, [sp], #4

000024c8 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    24c8:	b500      	push	{lr}
    24ca:	b085      	sub	sp, #20
    24cc:	9003      	str	r0, [sp, #12]
    24ce:	9102      	str	r1, [sp, #8]
    24d0:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    24d2:	9a01      	ldr	r2, [sp, #4]
    24d4:	9902      	ldr	r1, [sp, #8]
    24d6:	9803      	ldr	r0, [sp, #12]
    24d8:	f7ff fef8 	bl	22cc <IntCtrl_Ip_InstallHandlerPrivileged>
}
    24dc:	bf00      	nop
    24de:	b005      	add	sp, #20
    24e0:	f85d fb04 	ldr.w	pc, [sp], #4

000024e4 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    24e4:	b500      	push	{lr}
    24e6:	b083      	sub	sp, #12
    24e8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    24ea:	9801      	ldr	r0, [sp, #4]
    24ec:	f7ff ff10 	bl	2310 <IntCtrl_Ip_EnableIrqPrivileged>
}
    24f0:	bf00      	nop
    24f2:	b003      	add	sp, #12
    24f4:	f85d fb04 	ldr.w	pc, [sp], #4

000024f8 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    24f8:	b500      	push	{lr}
    24fa:	b083      	sub	sp, #12
    24fc:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    24fe:	9801      	ldr	r0, [sp, #4]
    2500:	f7ff ff18 	bl	2334 <IntCtrl_Ip_DisableIrqPrivileged>
}
    2504:	bf00      	nop
    2506:	b003      	add	sp, #12
    2508:	f85d fb04 	ldr.w	pc, [sp], #4

0000250c <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    250c:	b500      	push	{lr}
    250e:	b083      	sub	sp, #12
    2510:	9001      	str	r0, [sp, #4]
    2512:	460b      	mov	r3, r1
    2514:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    2518:	f89d 3003 	ldrb.w	r3, [sp, #3]
    251c:	4619      	mov	r1, r3
    251e:	9801      	ldr	r0, [sp, #4]
    2520:	f7ff ff1c 	bl	235c <IntCtrl_Ip_SetPriorityPrivileged>
}
    2524:	bf00      	nop
    2526:	b003      	add	sp, #12
    2528:	f85d fb04 	ldr.w	pc, [sp], #4

0000252c <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    252c:	b500      	push	{lr}
    252e:	b083      	sub	sp, #12
    2530:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    2532:	9801      	ldr	r0, [sp, #4]
    2534:	f7ff ff2c 	bl	2390 <IntCtrl_Ip_GetPriorityPrivileged>
    2538:	4603      	mov	r3, r0
}
    253a:	4618      	mov	r0, r3
    253c:	b003      	add	sp, #12
    253e:	f85d fb04 	ldr.w	pc, [sp], #4

00002542 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    2542:	b500      	push	{lr}
    2544:	b083      	sub	sp, #12
    2546:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    2548:	9801      	ldr	r0, [sp, #4]
    254a:	f7ff ff3b 	bl	23c4 <IntCtrl_Ip_ClearPendingPrivileged>
}
    254e:	bf00      	nop
    2550:	b003      	add	sp, #12
    2552:	f85d fb04 	ldr.w	pc, [sp], #4
    2556:	bf00      	nop

00002558 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2558:	b500      	push	{lr}
    255a:	b083      	sub	sp, #12
    255c:	9001      	str	r0, [sp, #4]
    255e:	460b      	mov	r3, r1
    2560:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    2564:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2568:	2b00      	cmp	r3, #0
    256a:	d003      	beq.n	2574 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    256c:	9801      	ldr	r0, [sp, #4]
    256e:	f7ff ffb9 	bl	24e4 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    2572:	e002      	b.n	257a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    2574:	9801      	ldr	r0, [sp, #4]
    2576:	f7ff ffbf 	bl	24f8 <IntCtrl_Ip_DisableIrq>
}
    257a:	bf00      	nop
    257c:	b003      	add	sp, #12
    257e:	f85d fb04 	ldr.w	pc, [sp], #4

00002582 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2582:	b500      	push	{lr}
    2584:	b083      	sub	sp, #12
    2586:	9001      	str	r0, [sp, #4]
    2588:	460b      	mov	r3, r1
    258a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    258e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2592:	4619      	mov	r1, r3
    2594:	9801      	ldr	r0, [sp, #4]
    2596:	f7ff ffb9 	bl	250c <IntCtrl_Ip_SetPriority>
}
    259a:	bf00      	nop
    259c:	b003      	add	sp, #12
    259e:	f85d fb04 	ldr.w	pc, [sp], #4

000025a2 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    25a2:	b500      	push	{lr}
    25a4:	b083      	sub	sp, #12
    25a6:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    25a8:	9801      	ldr	r0, [sp, #4]
    25aa:	f7ff ffbf 	bl	252c <IntCtrl_Ip_GetPriority>
    25ae:	4603      	mov	r3, r0
}
    25b0:	4618      	mov	r0, r3
    25b2:	b003      	add	sp, #12
    25b4:	f85d fb04 	ldr.w	pc, [sp], #4

000025b8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    25b8:	b500      	push	{lr}
    25ba:	b085      	sub	sp, #20
    25bc:	9003      	str	r0, [sp, #12]
    25be:	9102      	str	r1, [sp, #8]
    25c0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    25c2:	9a01      	ldr	r2, [sp, #4]
    25c4:	9902      	ldr	r1, [sp, #8]
    25c6:	9803      	ldr	r0, [sp, #12]
    25c8:	f7ff ff7e 	bl	24c8 <IntCtrl_Ip_InstallHandler>
}
    25cc:	bf00      	nop
    25ce:	b005      	add	sp, #20
    25d0:	f85d fb04 	ldr.w	pc, [sp], #4

000025d4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    25d4:	b500      	push	{lr}
    25d6:	b085      	sub	sp, #20
    25d8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    25da:	2300      	movs	r3, #0
    25dc:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    25e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    25e4:	4a05      	ldr	r2, [pc, #20]	; (25fc <Platform_Init+0x28>)
    25e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	4618      	mov	r0, r3
    25ee:	f000 f8c7 	bl	2780 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    25f2:	bf00      	nop
    25f4:	b005      	add	sp, #20
    25f6:	f85d fb04 	ldr.w	pc, [sp], #4
    25fa:	bf00      	nop
    25fc:	00012298 	.word	0x00012298

00002600 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2600:	b500      	push	{lr}
    2602:	b085      	sub	sp, #20
    2604:	9001      	str	r0, [sp, #4]
    2606:	460b      	mov	r3, r1
    2608:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    260c:	2300      	movs	r3, #0
    260e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    2612:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2616:	4619      	mov	r1, r3
    2618:	9801      	ldr	r0, [sp, #4]
    261a:	f7ff ff9d 	bl	2558 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    261e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2622:	4618      	mov	r0, r3
    2624:	b005      	add	sp, #20
    2626:	f85d fb04 	ldr.w	pc, [sp], #4

0000262a <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    262a:	b500      	push	{lr}
    262c:	b085      	sub	sp, #20
    262e:	9001      	str	r0, [sp, #4]
    2630:	460b      	mov	r3, r1
    2632:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2636:	2300      	movs	r3, #0
    2638:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    263c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2640:	4619      	mov	r1, r3
    2642:	9801      	ldr	r0, [sp, #4]
    2644:	f7ff ff9d 	bl	2582 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    2648:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    264c:	4618      	mov	r0, r3
    264e:	b005      	add	sp, #20
    2650:	f85d fb04 	ldr.w	pc, [sp], #4

00002654 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    2654:	b500      	push	{lr}
    2656:	b085      	sub	sp, #20
    2658:	9001      	str	r0, [sp, #4]
    265a:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    265c:	2300      	movs	r3, #0
    265e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    2662:	9801      	ldr	r0, [sp, #4]
    2664:	f7ff ff9d 	bl	25a2 <Platform_Ipw_GetIrqPriority>
    2668:	4603      	mov	r3, r0
    266a:	461a      	mov	r2, r3
    266c:	9b00      	ldr	r3, [sp, #0]
    266e:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    2670:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2674:	4618      	mov	r0, r3
    2676:	b005      	add	sp, #20
    2678:	f85d fb04 	ldr.w	pc, [sp], #4

0000267c <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    267c:	b500      	push	{lr}
    267e:	b087      	sub	sp, #28
    2680:	9003      	str	r0, [sp, #12]
    2682:	9102      	str	r1, [sp, #8]
    2684:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2686:	2300      	movs	r3, #0
    2688:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    268c:	9a01      	ldr	r2, [sp, #4]
    268e:	9902      	ldr	r1, [sp, #8]
    2690:	9803      	ldr	r0, [sp, #12]
    2692:	f7ff ff91 	bl	25b8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    2696:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    269a:	4618      	mov	r0, r3
    269c:	b007      	add	sp, #28
    269e:	f85d fb04 	ldr.w	pc, [sp], #4
    26a2:	bf00      	nop

000026a4 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    26a4:	b500      	push	{lr}
    26a6:	b085      	sub	sp, #20
    26a8:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    26aa:	2300      	movs	r3, #0
    26ac:	9303      	str	r3, [sp, #12]
    26ae:	e05d      	b.n	276c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    26b0:	9b01      	ldr	r3, [sp, #4]
    26b2:	6859      	ldr	r1, [r3, #4]
    26b4:	9a03      	ldr	r2, [sp, #12]
    26b6:	4613      	mov	r3, r2
    26b8:	005b      	lsls	r3, r3, #1
    26ba:	4413      	add	r3, r2
    26bc:	009b      	lsls	r3, r3, #2
    26be:	440b      	add	r3, r1
    26c0:	681b      	ldr	r3, [r3, #0]
    26c2:	4618      	mov	r0, r3
    26c4:	f7ff ff3d 	bl	2542 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26c8:	9b01      	ldr	r3, [sp, #4]
    26ca:	6859      	ldr	r1, [r3, #4]
    26cc:	9a03      	ldr	r2, [sp, #12]
    26ce:	4613      	mov	r3, r2
    26d0:	005b      	lsls	r3, r3, #1
    26d2:	4413      	add	r3, r2
    26d4:	009b      	lsls	r3, r3, #2
    26d6:	440b      	add	r3, r1
    26d8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    26da:	9b01      	ldr	r3, [sp, #4]
    26dc:	6859      	ldr	r1, [r3, #4]
    26de:	9a03      	ldr	r2, [sp, #12]
    26e0:	4613      	mov	r3, r2
    26e2:	005b      	lsls	r3, r3, #1
    26e4:	4413      	add	r3, r2
    26e6:	009b      	lsls	r3, r3, #2
    26e8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26ea:	795b      	ldrb	r3, [r3, #5]
    26ec:	4619      	mov	r1, r3
    26ee:	f7ff ff0d 	bl	250c <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26f2:	9b01      	ldr	r3, [sp, #4]
    26f4:	6859      	ldr	r1, [r3, #4]
    26f6:	9a03      	ldr	r2, [sp, #12]
    26f8:	4613      	mov	r3, r2
    26fa:	005b      	lsls	r3, r3, #1
    26fc:	4413      	add	r3, r2
    26fe:	009b      	lsls	r3, r3, #2
    2700:	440b      	add	r3, r1
    2702:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    2704:	9b01      	ldr	r3, [sp, #4]
    2706:	6859      	ldr	r1, [r3, #4]
    2708:	9a03      	ldr	r2, [sp, #12]
    270a:	4613      	mov	r3, r2
    270c:	005b      	lsls	r3, r3, #1
    270e:	4413      	add	r3, r2
    2710:	009b      	lsls	r3, r3, #2
    2712:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2714:	689b      	ldr	r3, [r3, #8]
    2716:	2200      	movs	r2, #0
    2718:	4619      	mov	r1, r3
    271a:	f7ff fed5 	bl	24c8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	6859      	ldr	r1, [r3, #4]
    2722:	9a03      	ldr	r2, [sp, #12]
    2724:	4613      	mov	r3, r2
    2726:	005b      	lsls	r3, r3, #1
    2728:	4413      	add	r3, r2
    272a:	009b      	lsls	r3, r3, #2
    272c:	440b      	add	r3, r1
    272e:	791b      	ldrb	r3, [r3, #4]
    2730:	2b00      	cmp	r3, #0
    2732:	d00c      	beq.n	274e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2734:	9b01      	ldr	r3, [sp, #4]
    2736:	6859      	ldr	r1, [r3, #4]
    2738:	9a03      	ldr	r2, [sp, #12]
    273a:	4613      	mov	r3, r2
    273c:	005b      	lsls	r3, r3, #1
    273e:	4413      	add	r3, r2
    2740:	009b      	lsls	r3, r3, #2
    2742:	440b      	add	r3, r1
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	4618      	mov	r0, r3
    2748:	f7ff fecc 	bl	24e4 <IntCtrl_Ip_EnableIrq>
    274c:	e00b      	b.n	2766 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    274e:	9b01      	ldr	r3, [sp, #4]
    2750:	6859      	ldr	r1, [r3, #4]
    2752:	9a03      	ldr	r2, [sp, #12]
    2754:	4613      	mov	r3, r2
    2756:	005b      	lsls	r3, r3, #1
    2758:	4413      	add	r3, r2
    275a:	009b      	lsls	r3, r3, #2
    275c:	440b      	add	r3, r1
    275e:	681b      	ldr	r3, [r3, #0]
    2760:	4618      	mov	r0, r3
    2762:	f7ff fec9 	bl	24f8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2766:	9b03      	ldr	r3, [sp, #12]
    2768:	3301      	adds	r3, #1
    276a:	9303      	str	r3, [sp, #12]
    276c:	9b01      	ldr	r3, [sp, #4]
    276e:	681b      	ldr	r3, [r3, #0]
    2770:	9a03      	ldr	r2, [sp, #12]
    2772:	429a      	cmp	r2, r3
    2774:	d39c      	bcc.n	26b0 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    2776:	2300      	movs	r3, #0
}
    2778:	4618      	mov	r0, r3
    277a:	b005      	add	sp, #20
    277c:	f85d fb04 	ldr.w	pc, [sp], #4

00002780 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2780:	b500      	push	{lr}
    2782:	b085      	sub	sp, #20
    2784:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    2786:	2300      	movs	r3, #0
    2788:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    278c:	9b01      	ldr	r3, [sp, #4]
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	2b00      	cmp	r3, #0
    2792:	d007      	beq.n	27a4 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2794:	9b01      	ldr	r3, [sp, #4]
    2796:	681b      	ldr	r3, [r3, #0]
    2798:	4618      	mov	r0, r3
    279a:	f7ff ff83 	bl	26a4 <Platform_Ipw_InitIntCtrl>
    279e:	4603      	mov	r3, r0
    27a0:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    27a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    27a8:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    27aa:	bf00      	nop
    27ac:	b005      	add	sp, #20
    27ae:	f85d fb04 	ldr.w	pc, [sp], #4

000027b2 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    27b2:	2300      	movs	r3, #0
}
    27b4:	4618      	mov	r0, r3
    27b6:	4770      	bx	lr

000027b8 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    27b8:	b082      	sub	sp, #8
    27ba:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    27bc:	2301      	movs	r3, #1
}
    27be:	4618      	mov	r0, r3
    27c0:	b002      	add	sp, #8
    27c2:	4770      	bx	lr

000027c4 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    27c4:	b082      	sub	sp, #8
    27c6:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    27c8:	bf00      	nop
    27ca:	b002      	add	sp, #8
    27cc:	4770      	bx	lr

000027ce <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    27ce:	b082      	sub	sp, #8
    27d0:	9001      	str	r0, [sp, #4]
    return Micros;
    27d2:	9b01      	ldr	r3, [sp, #4]
}
    27d4:	4618      	mov	r0, r3
    27d6:	b002      	add	sp, #8
    27d8:	4770      	bx	lr

000027da <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    27da:	b500      	push	{lr}
    27dc:	b083      	sub	sp, #12
    27de:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    27e0:	f000 f86c 	bl	28bc <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    27e4:	bf00      	nop
    27e6:	b003      	add	sp, #12
    27e8:	f85d fb04 	ldr.w	pc, [sp], #4

000027ec <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    27ec:	b500      	push	{lr}
    27ee:	b085      	sub	sp, #20
    27f0:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    27f2:	2300      	movs	r3, #0
    27f4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    27f6:	9b01      	ldr	r3, [sp, #4]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d003      	beq.n	2804 <OsIf_GetCounter+0x18>
    27fc:	9b01      	ldr	r3, [sp, #4]
    27fe:	2b01      	cmp	r3, #1
    2800:	d004      	beq.n	280c <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2802:	e007      	b.n	2814 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    2804:	f7ff ffd5 	bl	27b2 <OsIf_Timer_Dummy_GetCounter>
    2808:	9003      	str	r0, [sp, #12]
            break;
    280a:	e003      	b.n	2814 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    280c:	f000 f872 	bl	28f4 <OsIf_Timer_System_GetCounter>
    2810:	9003      	str	r0, [sp, #12]
            break;
    2812:	bf00      	nop
    }

    return Value;
    2814:	9b03      	ldr	r3, [sp, #12]
}
    2816:	4618      	mov	r0, r3
    2818:	b005      	add	sp, #20
    281a:	f85d fb04 	ldr.w	pc, [sp], #4

0000281e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    281e:	b500      	push	{lr}
    2820:	b085      	sub	sp, #20
    2822:	9001      	str	r0, [sp, #4]
    2824:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2826:	2300      	movs	r3, #0
    2828:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    282a:	9b00      	ldr	r3, [sp, #0]
    282c:	2b00      	cmp	r3, #0
    282e:	d003      	beq.n	2838 <OsIf_GetElapsed+0x1a>
    2830:	9b00      	ldr	r3, [sp, #0]
    2832:	2b01      	cmp	r3, #1
    2834:	d005      	beq.n	2842 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2836:	e009      	b.n	284c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    2838:	9801      	ldr	r0, [sp, #4]
    283a:	f7ff ffbd 	bl	27b8 <OsIf_Timer_Dummy_GetElapsed>
    283e:	9003      	str	r0, [sp, #12]
            break;
    2840:	e004      	b.n	284c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    2842:	9801      	ldr	r0, [sp, #4]
    2844:	f000 f864 	bl	2910 <OsIf_Timer_System_GetElapsed>
    2848:	9003      	str	r0, [sp, #12]
            break;
    284a:	bf00      	nop
    }

    return Value;
    284c:	9b03      	ldr	r3, [sp, #12]
}
    284e:	4618      	mov	r0, r3
    2850:	b005      	add	sp, #20
    2852:	f85d fb04 	ldr.w	pc, [sp], #4

00002856 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2856:	b500      	push	{lr}
    2858:	b083      	sub	sp, #12
    285a:	9001      	str	r0, [sp, #4]
    285c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    285e:	9b00      	ldr	r3, [sp, #0]
    2860:	2b00      	cmp	r3, #0
    2862:	d003      	beq.n	286c <OsIf_SetTimerFrequency+0x16>
    2864:	9b00      	ldr	r3, [sp, #0]
    2866:	2b01      	cmp	r3, #1
    2868:	d004      	beq.n	2874 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    286a:	e007      	b.n	287c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    286c:	9801      	ldr	r0, [sp, #4]
    286e:	f7ff ffa9 	bl	27c4 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2872:	e003      	b.n	287c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2874:	9801      	ldr	r0, [sp, #4]
    2876:	f000 f85b 	bl	2930 <OsIf_Timer_System_SetTimerFrequency>
            break;
    287a:	bf00      	nop
    }
}
    287c:	bf00      	nop
    287e:	b003      	add	sp, #12
    2880:	f85d fb04 	ldr.w	pc, [sp], #4

00002884 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2884:	b500      	push	{lr}
    2886:	b085      	sub	sp, #20
    2888:	9001      	str	r0, [sp, #4]
    288a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    288c:	2300      	movs	r3, #0
    288e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2890:	9b00      	ldr	r3, [sp, #0]
    2892:	2b00      	cmp	r3, #0
    2894:	d003      	beq.n	289e <OsIf_MicrosToTicks+0x1a>
    2896:	9b00      	ldr	r3, [sp, #0]
    2898:	2b01      	cmp	r3, #1
    289a:	d005      	beq.n	28a8 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    289c:	e009      	b.n	28b2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    289e:	9801      	ldr	r0, [sp, #4]
    28a0:	f7ff ff95 	bl	27ce <OsIf_Timer_Dummy_MicrosToTicks>
    28a4:	9003      	str	r0, [sp, #12]
            break;
    28a6:	e004      	b.n	28b2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    28a8:	9801      	ldr	r0, [sp, #4]
    28aa:	f000 f84f 	bl	294c <OsIf_Timer_System_MicrosToTicks>
    28ae:	9003      	str	r0, [sp, #12]
            break;
    28b0:	bf00      	nop
    }

    return Value;
    28b2:	9b03      	ldr	r3, [sp, #12]
}
    28b4:	4618      	mov	r0, r3
    28b6:	b005      	add	sp, #20
    28b8:	f85d fb04 	ldr.w	pc, [sp], #4

000028bc <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    28bc:	b500      	push	{lr}
    28be:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    28c0:	2300      	movs	r3, #0
    28c2:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    28c4:	4a09      	ldr	r2, [pc, #36]	; (28ec <OsIf_Timer_System_Init+0x30>)
    28c6:	9b01      	ldr	r3, [sp, #4]
    28c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28cc:	685a      	ldr	r2, [r3, #4]
    28ce:	4908      	ldr	r1, [pc, #32]	; (28f0 <OsIf_Timer_System_Init+0x34>)
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    28d6:	4a06      	ldr	r2, [pc, #24]	; (28f0 <OsIf_Timer_System_Init+0x34>)
    28d8:	9b01      	ldr	r3, [sp, #4]
    28da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28de:	4618      	mov	r0, r3
    28e0:	f000 f868 	bl	29b4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    28e4:	bf00      	nop
    28e6:	b003      	add	sp, #12
    28e8:	f85d fb04 	ldr.w	pc, [sp], #4
    28ec:	00012250 	.word	0x00012250
    28f0:	1fff8b50 	.word	0x1fff8b50

000028f4 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    28f4:	b500      	push	{lr}
    28f6:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    28f8:	2300      	movs	r3, #0
    28fa:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    28fc:	2300      	movs	r3, #0
    28fe:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2900:	f000 f86c 	bl	29dc <OsIf_Timer_System_Internal_GetCounter>
    2904:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    2906:	9b01      	ldr	r3, [sp, #4]
}
    2908:	4618      	mov	r0, r3
    290a:	b003      	add	sp, #12
    290c:	f85d fb04 	ldr.w	pc, [sp], #4

00002910 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2910:	b500      	push	{lr}
    2912:	b085      	sub	sp, #20
    2914:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    2916:	2300      	movs	r3, #0
    2918:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    291a:	2300      	movs	r3, #0
    291c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    291e:	9801      	ldr	r0, [sp, #4]
    2920:	f000 f864 	bl	29ec <OsIf_Timer_System_Internal_GetElapsed>
    2924:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2926:	9b03      	ldr	r3, [sp, #12]
}
    2928:	4618      	mov	r0, r3
    292a:	b005      	add	sp, #20
    292c:	f85d fb04 	ldr.w	pc, [sp], #4

00002930 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2930:	b084      	sub	sp, #16
    2932:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2934:	2300      	movs	r3, #0
    2936:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2938:	4903      	ldr	r1, [pc, #12]	; (2948 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    293a:	9b03      	ldr	r3, [sp, #12]
    293c:	9a01      	ldr	r2, [sp, #4]
    293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2942:	bf00      	nop
    2944:	b004      	add	sp, #16
    2946:	4770      	bx	lr
    2948:	1fff8b50 	.word	0x1fff8b50

0000294c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    294c:	b5f0      	push	{r4, r5, r6, r7, lr}
    294e:	b087      	sub	sp, #28
    2950:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2952:	2100      	movs	r1, #0
    2954:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2956:	2100      	movs	r1, #0
    2958:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    295a:	9901      	ldr	r1, [sp, #4]
    295c:	2000      	movs	r0, #0
    295e:	460e      	mov	r6, r1
    2960:	4607      	mov	r7, r0
    2962:	4812      	ldr	r0, [pc, #72]	; (29ac <OsIf_Timer_System_MicrosToTicks+0x60>)
    2964:	9904      	ldr	r1, [sp, #16]
    2966:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    296a:	2000      	movs	r0, #0
    296c:	460c      	mov	r4, r1
    296e:	4605      	mov	r5, r0
    2970:	fb04 f007 	mul.w	r0, r4, r7
    2974:	fb06 f105 	mul.w	r1, r6, r5
    2978:	4401      	add	r1, r0
    297a:	fba6 2304 	umull	r2, r3, r6, r4
    297e:	4419      	add	r1, r3
    2980:	460b      	mov	r3, r1
    2982:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2986:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    298a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    298e:	4a08      	ldr	r2, [pc, #32]	; (29b0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2990:	f04f 0300 	mov.w	r3, #0
    2994:	f7fd fe06 	bl	5a4 <__aeabi_uldivmod>
    2998:	4602      	mov	r2, r0
    299a:	460b      	mov	r3, r1
    299c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    29a0:	9b02      	ldr	r3, [sp, #8]
    29a2:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    29a4:	9b05      	ldr	r3, [sp, #20]
}
    29a6:	4618      	mov	r0, r3
    29a8:	b007      	add	sp, #28
    29aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ac:	1fff8b50 	.word	0x1fff8b50
    29b0:	000f4240 	.word	0x000f4240

000029b4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    29b4:	b082      	sub	sp, #8
    29b6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    29b8:	4b07      	ldr	r3, [pc, #28]	; (29d8 <OsIf_Timer_System_Internal_Init+0x24>)
    29ba:	2200      	movs	r2, #0
    29bc:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    29be:	4b06      	ldr	r3, [pc, #24]	; (29d8 <OsIf_Timer_System_Internal_Init+0x24>)
    29c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    29c4:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    29c6:	4b04      	ldr	r3, [pc, #16]	; (29d8 <OsIf_Timer_System_Internal_Init+0x24>)
    29c8:	2200      	movs	r2, #0
    29ca:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    29cc:	4b02      	ldr	r3, [pc, #8]	; (29d8 <OsIf_Timer_System_Internal_Init+0x24>)
    29ce:	2205      	movs	r2, #5
    29d0:	601a      	str	r2, [r3, #0]
}
    29d2:	bf00      	nop
    29d4:	b002      	add	sp, #8
    29d6:	4770      	bx	lr
    29d8:	e000e010 	.word	0xe000e010

000029dc <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    29dc:	4b02      	ldr	r3, [pc, #8]	; (29e8 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    29de:	689b      	ldr	r3, [r3, #8]
    29e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    29e4:	4618      	mov	r0, r3
    29e6:	4770      	bx	lr
    29e8:	e000e010 	.word	0xe000e010

000029ec <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    29ec:	b084      	sub	sp, #16
    29ee:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    29f0:	4b10      	ldr	r3, [pc, #64]	; (2a34 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    29f2:	689b      	ldr	r3, [r3, #8]
    29f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    29f8:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    29fa:	2300      	movs	r3, #0
    29fc:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    29fe:	9b01      	ldr	r3, [sp, #4]
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	9a02      	ldr	r2, [sp, #8]
    2a04:	429a      	cmp	r2, r3
    2a06:	d909      	bls.n	2a1c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2a08:	9b01      	ldr	r3, [sp, #4]
    2a0a:	681a      	ldr	r2, [r3, #0]
    2a0c:	9b02      	ldr	r3, [sp, #8]
    2a0e:	1ad3      	subs	r3, r2, r3
    2a10:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2a14:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2a18:	9303      	str	r3, [sp, #12]
    2a1a:	e004      	b.n	2a26 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2a1c:	9b01      	ldr	r3, [sp, #4]
    2a1e:	681a      	ldr	r2, [r3, #0]
    2a20:	9b02      	ldr	r3, [sp, #8]
    2a22:	1ad3      	subs	r3, r2, r3
    2a24:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2a26:	9b01      	ldr	r3, [sp, #4]
    2a28:	9a02      	ldr	r2, [sp, #8]
    2a2a:	601a      	str	r2, [r3, #0]

    return dif;
    2a2c:	9b03      	ldr	r3, [sp, #12]
}
    2a2e:	4618      	mov	r0, r3
    2a30:	b004      	add	sp, #16
    2a32:	4770      	bx	lr
    2a34:	e000e010 	.word	0xe000e010

00002a38 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2a38:	b082      	sub	sp, #8
    2a3a:	9001      	str	r0, [sp, #4]
    2a3c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2a3e:	bf00      	nop
    2a40:	b002      	add	sp, #8
    2a42:	4770      	bx	lr

00002a44 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2a44:	b500      	push	{lr}
    2a46:	b085      	sub	sp, #20
    2a48:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2a4a:	4b24      	ldr	r3, [pc, #144]	; (2adc <Clock_Ip_UpdateDriverContext+0x98>)
    2a4c:	2201      	movs	r2, #1
    2a4e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2a50:	4b23      	ldr	r3, [pc, #140]	; (2ae0 <Clock_Ip_UpdateDriverContext+0x9c>)
    2a52:	681b      	ldr	r3, [r3, #0]
    2a54:	2102      	movs	r1, #2
    2a56:	4618      	mov	r0, r3
    2a58:	f003 fc32 	bl	62c0 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2a5c:	2300      	movs	r3, #0
    2a5e:	f88d 300f 	strb.w	r3, [sp, #15]
    2a62:	e015      	b.n	2a90 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2a64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a68:	9a01      	ldr	r2, [sp, #4]
    2a6a:	334a      	adds	r3, #74	; 0x4a
    2a6c:	00db      	lsls	r3, r3, #3
    2a6e:	4413      	add	r3, r2
    2a70:	6858      	ldr	r0, [r3, #4]
    2a72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a76:	9a01      	ldr	r2, [sp, #4]
    2a78:	334a      	adds	r3, #74	; 0x4a
    2a7a:	00db      	lsls	r3, r3, #3
    2a7c:	4413      	add	r3, r2
    2a7e:	689b      	ldr	r3, [r3, #8]
    2a80:	4619      	mov	r1, r3
    2a82:	f001 fadc 	bl	403e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2a86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a8a:	3301      	adds	r3, #1
    2a8c:	f88d 300f 	strb.w	r3, [sp, #15]
    2a90:	9b01      	ldr	r3, [sp, #4]
    2a92:	7bdb      	ldrb	r3, [r3, #15]
    2a94:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a98:	429a      	cmp	r2, r3
    2a9a:	d3e3      	bcc.n	2a64 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2a9c:	f000 f824 	bl	2ae8 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2aa0:	2301      	movs	r3, #1
    2aa2:	f88d 300f 	strb.w	r3, [sp, #15]
    2aa6:	e00e      	b.n	2ac6 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2aa8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2aac:	9b01      	ldr	r3, [sp, #4]
    2aae:	327e      	adds	r2, #126	; 0x7e
    2ab0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2ab4:	490b      	ldr	r1, [pc, #44]	; (2ae4 <Clock_Ip_UpdateDriverContext+0xa0>)
    2ab6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2aba:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2abc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2ac0:	3301      	adds	r3, #1
    2ac2:	f88d 300f 	strb.w	r3, [sp, #15]
    2ac6:	9b01      	ldr	r3, [sp, #4]
    2ac8:	7cdb      	ldrb	r3, [r3, #19]
    2aca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2ace:	429a      	cmp	r2, r3
    2ad0:	d3ea      	bcc.n	2aa8 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2ad2:	bf00      	nop
    2ad4:	bf00      	nop
    2ad6:	b005      	add	sp, #20
    2ad8:	f85d fb04 	ldr.w	pc, [sp], #4
    2adc:	1fff8b10 	.word	0x1fff8b10
    2ae0:	1fff8b54 	.word	0x1fff8b54
    2ae4:	1fff8b60 	.word	0x1fff8b60

00002ae8 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2ae8:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2aea:	4b23      	ldr	r3, [pc, #140]	; (2b78 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2aec:	781b      	ldrb	r3, [r3, #0]
    2aee:	f083 0301 	eor.w	r3, r3, #1
    2af2:	b2db      	uxtb	r3, r3
    2af4:	2b00      	cmp	r3, #0
    2af6:	d03d      	beq.n	2b74 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2af8:	4b1f      	ldr	r3, [pc, #124]	; (2b78 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2afa:	2201      	movs	r2, #1
    2afc:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2afe:	4b1f      	ldr	r3, [pc, #124]	; (2b7c <Clock_Ip_CallEmptyCallbacks+0x94>)
    2b00:	685b      	ldr	r3, [r3, #4]
    2b02:	2100      	movs	r1, #0
    2b04:	2000      	movs	r0, #0
    2b06:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2b08:	4b1c      	ldr	r3, [pc, #112]	; (2b7c <Clock_Ip_CallEmptyCallbacks+0x94>)
    2b0a:	689b      	ldr	r3, [r3, #8]
    2b0c:	2057      	movs	r0, #87	; 0x57
    2b0e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b10:	4b1b      	ldr	r3, [pc, #108]	; (2b80 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2b12:	681b      	ldr	r3, [r3, #0]
    2b14:	2000      	movs	r0, #0
    2b16:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2b18:	4b1a      	ldr	r3, [pc, #104]	; (2b84 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	2000      	movs	r0, #0
    2b1e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2b20:	4b19      	ldr	r3, [pc, #100]	; (2b88 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	2000      	movs	r0, #0
    2b26:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b28:	4b18      	ldr	r3, [pc, #96]	; (2b8c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2b2a:	685b      	ldr	r3, [r3, #4]
    2b2c:	2000      	movs	r0, #0
    2b2e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2b30:	4b16      	ldr	r3, [pc, #88]	; (2b8c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2b32:	689b      	ldr	r3, [r3, #8]
    2b34:	2057      	movs	r0, #87	; 0x57
    2b36:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b38:	4b15      	ldr	r3, [pc, #84]	; (2b90 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2b3a:	681b      	ldr	r3, [r3, #0]
    2b3c:	2000      	movs	r0, #0
    2b3e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2b40:	4b13      	ldr	r3, [pc, #76]	; (2b90 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2b42:	685b      	ldr	r3, [r3, #4]
    2b44:	2100      	movs	r1, #0
    2b46:	2057      	movs	r0, #87	; 0x57
    2b48:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b4a:	4b12      	ldr	r3, [pc, #72]	; (2b94 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	2000      	movs	r0, #0
    2b50:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b52:	4b11      	ldr	r3, [pc, #68]	; (2b98 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2b54:	685b      	ldr	r3, [r3, #4]
    2b56:	2000      	movs	r0, #0
    2b58:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2b5a:	4b0f      	ldr	r3, [pc, #60]	; (2b98 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2b5c:	689b      	ldr	r3, [r3, #8]
    2b5e:	2057      	movs	r0, #87	; 0x57
    2b60:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b62:	4b0e      	ldr	r3, [pc, #56]	; (2b9c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2b64:	685b      	ldr	r3, [r3, #4]
    2b66:	2000      	movs	r0, #0
    2b68:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2b6c:	681b      	ldr	r3, [r3, #0]
    2b6e:	2100      	movs	r1, #0
    2b70:	2000      	movs	r0, #0
    2b72:	4798      	blx	r3
    }
}
    2b74:	bf00      	nop
    2b76:	bd08      	pop	{r3, pc}
    2b78:	1fff8b58 	.word	0x1fff8b58
    2b7c:	00011ac8 	.word	0x00011ac8
    2b80:	000119dc 	.word	0x000119dc
    2b84:	00011a18 	.word	0x00011a18
    2b88:	00011a20 	.word	0x00011a20
    2b8c:	00011a48 	.word	0x00011a48
    2b90:	00011a54 	.word	0x00011a54
    2b94:	00011a8c 	.word	0x00011a8c
    2b98:	00011ad8 	.word	0x00011ad8
    2b9c:	00011b04 	.word	0x00011b04
    2ba0:	00011b00 	.word	0x00011b00

00002ba4 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2ba4:	b500      	push	{lr}
    2ba6:	b085      	sub	sp, #20
    2ba8:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2baa:	9b01      	ldr	r3, [sp, #4]
    2bac:	7adb      	ldrb	r3, [r3, #11]
    2bae:	9303      	str	r3, [sp, #12]
    2bb0:	e01f      	b.n	2bf2 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2bb2:	9b03      	ldr	r3, [sp, #12]
    2bb4:	1e5a      	subs	r2, r3, #1
    2bb6:	9b01      	ldr	r3, [sp, #4]
    2bb8:	320d      	adds	r2, #13
    2bba:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2bbe:	495a      	ldr	r1, [pc, #360]	; (2d28 <Clock_Ip_ResetClockConfiguration+0x184>)
    2bc0:	4613      	mov	r3, r2
    2bc2:	00db      	lsls	r3, r3, #3
    2bc4:	4413      	add	r3, r2
    2bc6:	440b      	add	r3, r1
    2bc8:	3301      	adds	r3, #1
    2bca:	781b      	ldrb	r3, [r3, #0]
    2bcc:	461a      	mov	r2, r3
    2bce:	4b57      	ldr	r3, [pc, #348]	; (2d2c <Clock_Ip_ResetClockConfiguration+0x188>)
    2bd0:	5c9b      	ldrb	r3, [r3, r2]
    2bd2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2bd4:	4a56      	ldr	r2, [pc, #344]	; (2d30 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2bd6:	9b02      	ldr	r3, [sp, #8]
    2bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2bdc:	9a03      	ldr	r2, [sp, #12]
    2bde:	3a01      	subs	r2, #1
    2be0:	320d      	adds	r2, #13
    2be2:	00d2      	lsls	r2, r2, #3
    2be4:	9901      	ldr	r1, [sp, #4]
    2be6:	440a      	add	r2, r1
    2be8:	4610      	mov	r0, r2
    2bea:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2bec:	9b03      	ldr	r3, [sp, #12]
    2bee:	3b01      	subs	r3, #1
    2bf0:	9303      	str	r3, [sp, #12]
    2bf2:	9b03      	ldr	r3, [sp, #12]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d1dc      	bne.n	2bb2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2bf8:	9b01      	ldr	r3, [sp, #4]
    2bfa:	7b9b      	ldrb	r3, [r3, #14]
    2bfc:	9303      	str	r3, [sp, #12]
    2bfe:	e026      	b.n	2c4e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2c00:	9b03      	ldr	r3, [sp, #12]
    2c02:	3b01      	subs	r3, #1
    2c04:	9a01      	ldr	r2, [sp, #4]
    2c06:	3324      	adds	r3, #36	; 0x24
    2c08:	011b      	lsls	r3, r3, #4
    2c0a:	4413      	add	r3, r2
    2c0c:	3304      	adds	r3, #4
    2c0e:	681a      	ldr	r2, [r3, #0]
    2c10:	4945      	ldr	r1, [pc, #276]	; (2d28 <Clock_Ip_ResetClockConfiguration+0x184>)
    2c12:	4613      	mov	r3, r2
    2c14:	00db      	lsls	r3, r3, #3
    2c16:	4413      	add	r3, r2
    2c18:	440b      	add	r3, r1
    2c1a:	3301      	adds	r3, #1
    2c1c:	781b      	ldrb	r3, [r3, #0]
    2c1e:	461a      	mov	r2, r3
    2c20:	4b44      	ldr	r3, [pc, #272]	; (2d34 <Clock_Ip_ResetClockConfiguration+0x190>)
    2c22:	5c9b      	ldrb	r3, [r3, r2]
    2c24:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2c26:	4944      	ldr	r1, [pc, #272]	; (2d38 <Clock_Ip_ResetClockConfiguration+0x194>)
    2c28:	9a02      	ldr	r2, [sp, #8]
    2c2a:	4613      	mov	r3, r2
    2c2c:	005b      	lsls	r3, r3, #1
    2c2e:	4413      	add	r3, r2
    2c30:	009b      	lsls	r3, r3, #2
    2c32:	440b      	add	r3, r1
    2c34:	681b      	ldr	r3, [r3, #0]
    2c36:	9a03      	ldr	r2, [sp, #12]
    2c38:	3a01      	subs	r2, #1
    2c3a:	3224      	adds	r2, #36	; 0x24
    2c3c:	0112      	lsls	r2, r2, #4
    2c3e:	9901      	ldr	r1, [sp, #4]
    2c40:	440a      	add	r2, r1
    2c42:	3204      	adds	r2, #4
    2c44:	4610      	mov	r0, r2
    2c46:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2c48:	9b03      	ldr	r3, [sp, #12]
    2c4a:	3b01      	subs	r3, #1
    2c4c:	9303      	str	r3, [sp, #12]
    2c4e:	9b03      	ldr	r3, [sp, #12]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d1d5      	bne.n	2c00 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	7a9b      	ldrb	r3, [r3, #10]
    2c58:	9303      	str	r3, [sp, #12]
    2c5a:	e02a      	b.n	2cb2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2c5c:	9b03      	ldr	r3, [sp, #12]
    2c5e:	1e5a      	subs	r2, r3, #1
    2c60:	9901      	ldr	r1, [sp, #4]
    2c62:	4613      	mov	r3, r2
    2c64:	009b      	lsls	r3, r3, #2
    2c66:	4413      	add	r3, r2
    2c68:	00db      	lsls	r3, r3, #3
    2c6a:	440b      	add	r3, r1
    2c6c:	3340      	adds	r3, #64	; 0x40
    2c6e:	681a      	ldr	r2, [r3, #0]
    2c70:	492d      	ldr	r1, [pc, #180]	; (2d28 <Clock_Ip_ResetClockConfiguration+0x184>)
    2c72:	4613      	mov	r3, r2
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	4413      	add	r3, r2
    2c78:	440b      	add	r3, r1
    2c7a:	3301      	adds	r3, #1
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	461a      	mov	r2, r3
    2c80:	4b2e      	ldr	r3, [pc, #184]	; (2d3c <Clock_Ip_ResetClockConfiguration+0x198>)
    2c82:	5c9b      	ldrb	r3, [r3, r2]
    2c84:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2c86:	492e      	ldr	r1, [pc, #184]	; (2d40 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2c88:	9a02      	ldr	r2, [sp, #8]
    2c8a:	4613      	mov	r3, r2
    2c8c:	009b      	lsls	r3, r3, #2
    2c8e:	4413      	add	r3, r2
    2c90:	009b      	lsls	r3, r3, #2
    2c92:	440b      	add	r3, r1
    2c94:	6819      	ldr	r1, [r3, #0]
    2c96:	9b03      	ldr	r3, [sp, #12]
    2c98:	1e5a      	subs	r2, r3, #1
    2c9a:	4613      	mov	r3, r2
    2c9c:	009b      	lsls	r3, r3, #2
    2c9e:	4413      	add	r3, r2
    2ca0:	00db      	lsls	r3, r3, #3
    2ca2:	3340      	adds	r3, #64	; 0x40
    2ca4:	9a01      	ldr	r2, [sp, #4]
    2ca6:	4413      	add	r3, r2
    2ca8:	4618      	mov	r0, r3
    2caa:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2cac:	9b03      	ldr	r3, [sp, #12]
    2cae:	3b01      	subs	r3, #1
    2cb0:	9303      	str	r3, [sp, #12]
    2cb2:	9b03      	ldr	r3, [sp, #12]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d1d1      	bne.n	2c5c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2cb8:	9b01      	ldr	r3, [sp, #4]
    2cba:	7a5b      	ldrb	r3, [r3, #9]
    2cbc:	9303      	str	r3, [sp, #12]
    2cbe:	e02b      	b.n	2d18 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2cc0:	9b03      	ldr	r3, [sp, #12]
    2cc2:	1e5a      	subs	r2, r3, #1
    2cc4:	9901      	ldr	r1, [sp, #4]
    2cc6:	4613      	mov	r3, r2
    2cc8:	009b      	lsls	r3, r3, #2
    2cca:	4413      	add	r3, r2
    2ccc:	009b      	lsls	r3, r3, #2
    2cce:	440b      	add	r3, r1
    2cd0:	332c      	adds	r3, #44	; 0x2c
    2cd2:	681a      	ldr	r2, [r3, #0]
    2cd4:	4914      	ldr	r1, [pc, #80]	; (2d28 <Clock_Ip_ResetClockConfiguration+0x184>)
    2cd6:	4613      	mov	r3, r2
    2cd8:	00db      	lsls	r3, r3, #3
    2cda:	4413      	add	r3, r2
    2cdc:	440b      	add	r3, r1
    2cde:	3301      	adds	r3, #1
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	461a      	mov	r2, r3
    2ce4:	4b17      	ldr	r3, [pc, #92]	; (2d44 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2ce6:	5c9b      	ldrb	r3, [r3, r2]
    2ce8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2cea:	4917      	ldr	r1, [pc, #92]	; (2d48 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2cec:	9a02      	ldr	r2, [sp, #8]
    2cee:	4613      	mov	r3, r2
    2cf0:	009b      	lsls	r3, r3, #2
    2cf2:	4413      	add	r3, r2
    2cf4:	009b      	lsls	r3, r3, #2
    2cf6:	440b      	add	r3, r1
    2cf8:	6819      	ldr	r1, [r3, #0]
    2cfa:	9b03      	ldr	r3, [sp, #12]
    2cfc:	1e5a      	subs	r2, r3, #1
    2cfe:	4613      	mov	r3, r2
    2d00:	009b      	lsls	r3, r3, #2
    2d02:	4413      	add	r3, r2
    2d04:	009b      	lsls	r3, r3, #2
    2d06:	3328      	adds	r3, #40	; 0x28
    2d08:	9a01      	ldr	r2, [sp, #4]
    2d0a:	4413      	add	r3, r2
    2d0c:	3304      	adds	r3, #4
    2d0e:	4618      	mov	r0, r3
    2d10:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2d12:	9b03      	ldr	r3, [sp, #12]
    2d14:	3b01      	subs	r3, #1
    2d16:	9303      	str	r3, [sp, #12]
    2d18:	9b03      	ldr	r3, [sp, #12]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d1d0      	bne.n	2cc0 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2d1e:	bf00      	nop
    2d20:	bf00      	nop
    2d22:	b005      	add	sp, #20
    2d24:	f85d fb04 	ldr.w	pc, [sp], #4
    2d28:	000114cc 	.word	0x000114cc
    2d2c:	0001149c 	.word	0x0001149c
    2d30:	00011b04 	.word	0x00011b04
    2d34:	0001147c 	.word	0x0001147c
    2d38:	00011a48 	.word	0x00011a48
    2d3c:	0001148c 	.word	0x0001148c
    2d40:	00011ad8 	.word	0x00011ad8
    2d44:	0001144c 	.word	0x0001144c
    2d48:	00011a20 	.word	0x00011a20

00002d4c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2d4c:	b500      	push	{lr}
    2d4e:	b085      	sub	sp, #20
    2d50:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2d52:	2301      	movs	r3, #1
    2d54:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2d56:	9801      	ldr	r0, [sp, #4]
    2d58:	f000 f818 	bl	2d8c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2d5c:	4b0a      	ldr	r3, [pc, #40]	; (2d88 <Clock_Ip_Init+0x3c>)
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d00a      	beq.n	2d7a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2d64:	f000 fb74 	bl	3450 <Clock_Ip_GetPllStatus>
    2d68:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2d6a:	9b02      	ldr	r3, [sp, #8]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d106      	bne.n	2d7e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2d70:	f000 fbf2 	bl	3558 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2d74:	2300      	movs	r3, #0
    2d76:	9303      	str	r3, [sp, #12]
    2d78:	e001      	b.n	2d7e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2d7a:	2300      	movs	r3, #0
    2d7c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2d7e:	9b03      	ldr	r3, [sp, #12]
}
    2d80:	4618      	mov	r0, r3
    2d82:	b005      	add	sp, #20
    2d84:	f85d fb04 	ldr.w	pc, [sp], #4
    2d88:	1fff8b5c 	.word	0x1fff8b5c

00002d8c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2d8c:	b510      	push	{r4, lr}
    2d8e:	b084      	sub	sp, #16
    2d90:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2d92:	4a9f      	ldr	r2, [pc, #636]	; (3010 <Clock_Ip_InitClock+0x284>)
    2d94:	9b01      	ldr	r3, [sp, #4]
    2d96:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2d98:	2101      	movs	r1, #1
    2d9a:	9801      	ldr	r0, [sp, #4]
    2d9c:	f003 fa90 	bl	62c0 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2da0:	4b9b      	ldr	r3, [pc, #620]	; (3010 <Clock_Ip_InitClock+0x284>)
    2da2:	681b      	ldr	r3, [r3, #0]
    2da4:	2b00      	cmp	r3, #0
    2da6:	d030      	beq.n	2e0a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2da8:	2300      	movs	r3, #0
    2daa:	9303      	str	r3, [sp, #12]
    2dac:	e027      	b.n	2dfe <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2dae:	9901      	ldr	r1, [sp, #4]
    2db0:	9a03      	ldr	r2, [sp, #12]
    2db2:	4613      	mov	r3, r2
    2db4:	009b      	lsls	r3, r3, #2
    2db6:	4413      	add	r3, r2
    2db8:	009b      	lsls	r3, r3, #2
    2dba:	440b      	add	r3, r1
    2dbc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2dc0:	681a      	ldr	r2, [r3, #0]
    2dc2:	4994      	ldr	r1, [pc, #592]	; (3014 <Clock_Ip_InitClock+0x288>)
    2dc4:	4613      	mov	r3, r2
    2dc6:	00db      	lsls	r3, r3, #3
    2dc8:	4413      	add	r3, r2
    2dca:	440b      	add	r3, r1
    2dcc:	3301      	adds	r3, #1
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	461a      	mov	r2, r3
    2dd2:	4b91      	ldr	r3, [pc, #580]	; (3018 <Clock_Ip_InitClock+0x28c>)
    2dd4:	5c9b      	ldrb	r3, [r3, r2]
    2dd6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2dd8:	4a90      	ldr	r2, [pc, #576]	; (301c <Clock_Ip_InitClock+0x290>)
    2dda:	9b02      	ldr	r3, [sp, #8]
    2ddc:	011b      	lsls	r3, r3, #4
    2dde:	4413      	add	r3, r2
    2de0:	6819      	ldr	r1, [r3, #0]
    2de2:	9a03      	ldr	r2, [sp, #12]
    2de4:	4613      	mov	r3, r2
    2de6:	009b      	lsls	r3, r3, #2
    2de8:	4413      	add	r3, r2
    2dea:	009b      	lsls	r3, r3, #2
    2dec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2df0:	9a01      	ldr	r2, [sp, #4]
    2df2:	4413      	add	r3, r2
    2df4:	4618      	mov	r0, r3
    2df6:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2df8:	9b03      	ldr	r3, [sp, #12]
    2dfa:	3301      	adds	r3, #1
    2dfc:	9303      	str	r3, [sp, #12]
    2dfe:	9b01      	ldr	r3, [sp, #4]
    2e00:	7c9b      	ldrb	r3, [r3, #18]
    2e02:	461a      	mov	r2, r3
    2e04:	9b03      	ldr	r3, [sp, #12]
    2e06:	4293      	cmp	r3, r2
    2e08:	d3d1      	bcc.n	2dae <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2e0a:	9801      	ldr	r0, [sp, #4]
    2e0c:	f7ff feca 	bl	2ba4 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2e10:	2300      	movs	r3, #0
    2e12:	9303      	str	r3, [sp, #12]
    2e14:	e029      	b.n	2e6a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2e16:	9901      	ldr	r1, [sp, #4]
    2e18:	9a03      	ldr	r2, [sp, #12]
    2e1a:	4613      	mov	r3, r2
    2e1c:	005b      	lsls	r3, r3, #1
    2e1e:	4413      	add	r3, r2
    2e20:	009b      	lsls	r3, r3, #2
    2e22:	440b      	add	r3, r1
    2e24:	3314      	adds	r3, #20
    2e26:	681a      	ldr	r2, [r3, #0]
    2e28:	497a      	ldr	r1, [pc, #488]	; (3014 <Clock_Ip_InitClock+0x288>)
    2e2a:	4613      	mov	r3, r2
    2e2c:	00db      	lsls	r3, r3, #3
    2e2e:	4413      	add	r3, r2
    2e30:	440b      	add	r3, r1
    2e32:	3301      	adds	r3, #1
    2e34:	781b      	ldrb	r3, [r3, #0]
    2e36:	461a      	mov	r2, r3
    2e38:	4b79      	ldr	r3, [pc, #484]	; (3020 <Clock_Ip_InitClock+0x294>)
    2e3a:	5c9b      	ldrb	r3, [r3, r2]
    2e3c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2e3e:	4979      	ldr	r1, [pc, #484]	; (3024 <Clock_Ip_InitClock+0x298>)
    2e40:	9a02      	ldr	r2, [sp, #8]
    2e42:	4613      	mov	r3, r2
    2e44:	005b      	lsls	r3, r3, #1
    2e46:	4413      	add	r3, r2
    2e48:	009b      	lsls	r3, r3, #2
    2e4a:	440b      	add	r3, r1
    2e4c:	6819      	ldr	r1, [r3, #0]
    2e4e:	9a03      	ldr	r2, [sp, #12]
    2e50:	4613      	mov	r3, r2
    2e52:	005b      	lsls	r3, r3, #1
    2e54:	4413      	add	r3, r2
    2e56:	009b      	lsls	r3, r3, #2
    2e58:	3310      	adds	r3, #16
    2e5a:	9a01      	ldr	r2, [sp, #4]
    2e5c:	4413      	add	r3, r2
    2e5e:	3304      	adds	r3, #4
    2e60:	4618      	mov	r0, r3
    2e62:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2e64:	9b03      	ldr	r3, [sp, #12]
    2e66:	3301      	adds	r3, #1
    2e68:	9303      	str	r3, [sp, #12]
    2e6a:	9b01      	ldr	r3, [sp, #4]
    2e6c:	7a1b      	ldrb	r3, [r3, #8]
    2e6e:	461a      	mov	r2, r3
    2e70:	9b03      	ldr	r3, [sp, #12]
    2e72:	4293      	cmp	r3, r2
    2e74:	d3cf      	bcc.n	2e16 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2e76:	2300      	movs	r3, #0
    2e78:	9303      	str	r3, [sp, #12]
    2e7a:	e02a      	b.n	2ed2 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2e7c:	9901      	ldr	r1, [sp, #4]
    2e7e:	9a03      	ldr	r2, [sp, #12]
    2e80:	4613      	mov	r3, r2
    2e82:	009b      	lsls	r3, r3, #2
    2e84:	4413      	add	r3, r2
    2e86:	009b      	lsls	r3, r3, #2
    2e88:	440b      	add	r3, r1
    2e8a:	332c      	adds	r3, #44	; 0x2c
    2e8c:	681a      	ldr	r2, [r3, #0]
    2e8e:	4961      	ldr	r1, [pc, #388]	; (3014 <Clock_Ip_InitClock+0x288>)
    2e90:	4613      	mov	r3, r2
    2e92:	00db      	lsls	r3, r3, #3
    2e94:	4413      	add	r3, r2
    2e96:	440b      	add	r3, r1
    2e98:	3301      	adds	r3, #1
    2e9a:	781b      	ldrb	r3, [r3, #0]
    2e9c:	461a      	mov	r2, r3
    2e9e:	4b62      	ldr	r3, [pc, #392]	; (3028 <Clock_Ip_InitClock+0x29c>)
    2ea0:	5c9b      	ldrb	r3, [r3, r2]
    2ea2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2ea4:	4961      	ldr	r1, [pc, #388]	; (302c <Clock_Ip_InitClock+0x2a0>)
    2ea6:	9a02      	ldr	r2, [sp, #8]
    2ea8:	4613      	mov	r3, r2
    2eaa:	009b      	lsls	r3, r3, #2
    2eac:	4413      	add	r3, r2
    2eae:	009b      	lsls	r3, r3, #2
    2eb0:	440b      	add	r3, r1
    2eb2:	3304      	adds	r3, #4
    2eb4:	6819      	ldr	r1, [r3, #0]
    2eb6:	9a03      	ldr	r2, [sp, #12]
    2eb8:	4613      	mov	r3, r2
    2eba:	009b      	lsls	r3, r3, #2
    2ebc:	4413      	add	r3, r2
    2ebe:	009b      	lsls	r3, r3, #2
    2ec0:	3328      	adds	r3, #40	; 0x28
    2ec2:	9a01      	ldr	r2, [sp, #4]
    2ec4:	4413      	add	r3, r2
    2ec6:	3304      	adds	r3, #4
    2ec8:	4618      	mov	r0, r3
    2eca:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2ecc:	9b03      	ldr	r3, [sp, #12]
    2ece:	3301      	adds	r3, #1
    2ed0:	9303      	str	r3, [sp, #12]
    2ed2:	9b01      	ldr	r3, [sp, #4]
    2ed4:	7a5b      	ldrb	r3, [r3, #9]
    2ed6:	461a      	mov	r2, r3
    2ed8:	9b03      	ldr	r3, [sp, #12]
    2eda:	4293      	cmp	r3, r2
    2edc:	d3ce      	bcc.n	2e7c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2ede:	9801      	ldr	r0, [sp, #4]
    2ee0:	f7ff fdb0 	bl	2a44 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2ee4:	2300      	movs	r3, #0
    2ee6:	9303      	str	r3, [sp, #12]
    2ee8:	e028      	b.n	2f3c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2eea:	9901      	ldr	r1, [sp, #4]
    2eec:	9a03      	ldr	r2, [sp, #12]
    2eee:	4613      	mov	r3, r2
    2ef0:	009b      	lsls	r3, r3, #2
    2ef2:	4413      	add	r3, r2
    2ef4:	009b      	lsls	r3, r3, #2
    2ef6:	440b      	add	r3, r1
    2ef8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2efc:	681a      	ldr	r2, [r3, #0]
    2efe:	4945      	ldr	r1, [pc, #276]	; (3014 <Clock_Ip_InitClock+0x288>)
    2f00:	4613      	mov	r3, r2
    2f02:	00db      	lsls	r3, r3, #3
    2f04:	4413      	add	r3, r2
    2f06:	440b      	add	r3, r1
    2f08:	3301      	adds	r3, #1
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	461a      	mov	r2, r3
    2f0e:	4b48      	ldr	r3, [pc, #288]	; (3030 <Clock_Ip_InitClock+0x2a4>)
    2f10:	5c9b      	ldrb	r3, [r3, r2]
    2f12:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2f14:	4a47      	ldr	r2, [pc, #284]	; (3034 <Clock_Ip_InitClock+0x2a8>)
    2f16:	9b02      	ldr	r3, [sp, #8]
    2f18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2f1c:	9a03      	ldr	r2, [sp, #12]
    2f1e:	4613      	mov	r3, r2
    2f20:	009b      	lsls	r3, r3, #2
    2f22:	4413      	add	r3, r2
    2f24:	009b      	lsls	r3, r3, #2
    2f26:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2f2a:	9a01      	ldr	r2, [sp, #4]
    2f2c:	4413      	add	r3, r2
    2f2e:	3304      	adds	r3, #4
    2f30:	9903      	ldr	r1, [sp, #12]
    2f32:	4618      	mov	r0, r3
    2f34:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2f36:	9b03      	ldr	r3, [sp, #12]
    2f38:	3301      	adds	r3, #1
    2f3a:	9303      	str	r3, [sp, #12]
    2f3c:	9b01      	ldr	r3, [sp, #4]
    2f3e:	7c5b      	ldrb	r3, [r3, #17]
    2f40:	461a      	mov	r2, r3
    2f42:	9b03      	ldr	r3, [sp, #12]
    2f44:	4293      	cmp	r3, r2
    2f46:	d3d0      	bcc.n	2eea <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2f48:	2300      	movs	r3, #0
    2f4a:	9303      	str	r3, [sp, #12]
    2f4c:	e026      	b.n	2f9c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2f4e:	9901      	ldr	r1, [sp, #4]
    2f50:	9a03      	ldr	r2, [sp, #12]
    2f52:	4613      	mov	r3, r2
    2f54:	005b      	lsls	r3, r3, #1
    2f56:	4413      	add	r3, r2
    2f58:	009b      	lsls	r3, r3, #2
    2f5a:	440b      	add	r3, r1
    2f5c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2f60:	681a      	ldr	r2, [r3, #0]
    2f62:	492c      	ldr	r1, [pc, #176]	; (3014 <Clock_Ip_InitClock+0x288>)
    2f64:	4613      	mov	r3, r2
    2f66:	00db      	lsls	r3, r3, #3
    2f68:	4413      	add	r3, r2
    2f6a:	440b      	add	r3, r1
    2f6c:	3301      	adds	r3, #1
    2f6e:	781b      	ldrb	r3, [r3, #0]
    2f70:	461a      	mov	r2, r3
    2f72:	4b31      	ldr	r3, [pc, #196]	; (3038 <Clock_Ip_InitClock+0x2ac>)
    2f74:	5c9b      	ldrb	r3, [r3, r2]
    2f76:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2f78:	4a30      	ldr	r2, [pc, #192]	; (303c <Clock_Ip_InitClock+0x2b0>)
    2f7a:	9b02      	ldr	r3, [sp, #8]
    2f7c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2f80:	9a03      	ldr	r2, [sp, #12]
    2f82:	4613      	mov	r3, r2
    2f84:	005b      	lsls	r3, r3, #1
    2f86:	4413      	add	r3, r2
    2f88:	009b      	lsls	r3, r3, #2
    2f8a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2f8e:	9a01      	ldr	r2, [sp, #4]
    2f90:	4413      	add	r3, r2
    2f92:	4618      	mov	r0, r3
    2f94:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2f96:	9b03      	ldr	r3, [sp, #12]
    2f98:	3301      	adds	r3, #1
    2f9a:	9303      	str	r3, [sp, #12]
    2f9c:	9b01      	ldr	r3, [sp, #4]
    2f9e:	7b5b      	ldrb	r3, [r3, #13]
    2fa0:	461a      	mov	r2, r3
    2fa2:	9b03      	ldr	r3, [sp, #12]
    2fa4:	4293      	cmp	r3, r2
    2fa6:	d3d2      	bcc.n	2f4e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2fa8:	2300      	movs	r3, #0
    2faa:	9303      	str	r3, [sp, #12]
    2fac:	e026      	b.n	2ffc <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2fae:	9901      	ldr	r1, [sp, #4]
    2fb0:	9a03      	ldr	r2, [sp, #12]
    2fb2:	4613      	mov	r3, r2
    2fb4:	005b      	lsls	r3, r3, #1
    2fb6:	4413      	add	r3, r2
    2fb8:	009b      	lsls	r3, r3, #2
    2fba:	440b      	add	r3, r1
    2fbc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2fc0:	681a      	ldr	r2, [r3, #0]
    2fc2:	4914      	ldr	r1, [pc, #80]	; (3014 <Clock_Ip_InitClock+0x288>)
    2fc4:	4613      	mov	r3, r2
    2fc6:	00db      	lsls	r3, r3, #3
    2fc8:	4413      	add	r3, r2
    2fca:	440b      	add	r3, r1
    2fcc:	3301      	adds	r3, #1
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	461a      	mov	r2, r3
    2fd2:	4b1b      	ldr	r3, [pc, #108]	; (3040 <Clock_Ip_InitClock+0x2b4>)
    2fd4:	5c9b      	ldrb	r3, [r3, r2]
    2fd6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2fd8:	4a1a      	ldr	r2, [pc, #104]	; (3044 <Clock_Ip_InitClock+0x2b8>)
    2fda:	9b02      	ldr	r3, [sp, #8]
    2fdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2fe0:	9a03      	ldr	r2, [sp, #12]
    2fe2:	4613      	mov	r3, r2
    2fe4:	005b      	lsls	r3, r3, #1
    2fe6:	4413      	add	r3, r2
    2fe8:	009b      	lsls	r3, r3, #2
    2fea:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2fee:	9a01      	ldr	r2, [sp, #4]
    2ff0:	4413      	add	r3, r2
    2ff2:	4618      	mov	r0, r3
    2ff4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2ff6:	9b03      	ldr	r3, [sp, #12]
    2ff8:	3301      	adds	r3, #1
    2ffa:	9303      	str	r3, [sp, #12]
    2ffc:	9b01      	ldr	r3, [sp, #4]
    2ffe:	7b1b      	ldrb	r3, [r3, #12]
    3000:	461a      	mov	r2, r3
    3002:	9b03      	ldr	r3, [sp, #12]
    3004:	4293      	cmp	r3, r2
    3006:	d3d2      	bcc.n	2fae <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    3008:	2300      	movs	r3, #0
    300a:	9303      	str	r3, [sp, #12]
    300c:	e044      	b.n	3098 <Clock_Ip_InitClock+0x30c>
    300e:	bf00      	nop
    3010:	1fff8b54 	.word	0x1fff8b54
    3014:	000114cc 	.word	0x000114cc
    3018:	000114bc 	.word	0x000114bc
    301c:	00011ac8 	.word	0x00011ac8
    3020:	0001145c 	.word	0x0001145c
    3024:	00011a8c 	.word	0x00011a8c
    3028:	0001144c 	.word	0x0001144c
    302c:	00011a20 	.word	0x00011a20
    3030:	000114ac 	.word	0x000114ac
    3034:	00011b00 	.word	0x00011b00
    3038:	0001143c 	.word	0x0001143c
    303c:	00011a18 	.word	0x00011a18
    3040:	0001142c 	.word	0x0001142c
    3044:	000119dc 	.word	0x000119dc
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    3048:	9901      	ldr	r1, [sp, #4]
    304a:	9a03      	ldr	r2, [sp, #12]
    304c:	4613      	mov	r3, r2
    304e:	005b      	lsls	r3, r3, #1
    3050:	4413      	add	r3, r2
    3052:	009b      	lsls	r3, r3, #2
    3054:	440b      	add	r3, r1
    3056:	f503 730e 	add.w	r3, r3, #568	; 0x238
    305a:	681a      	ldr	r2, [r3, #0]
    305c:	49ac      	ldr	r1, [pc, #688]	; (3310 <Clock_Ip_InitClock+0x584>)
    305e:	4613      	mov	r3, r2
    3060:	00db      	lsls	r3, r3, #3
    3062:	4413      	add	r3, r2
    3064:	440b      	add	r3, r1
    3066:	3301      	adds	r3, #1
    3068:	781b      	ldrb	r3, [r3, #0]
    306a:	461a      	mov	r2, r3
    306c:	4ba9      	ldr	r3, [pc, #676]	; (3314 <Clock_Ip_InitClock+0x588>)
    306e:	5c9b      	ldrb	r3, [r3, r2]
    3070:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    3072:	4aa9      	ldr	r2, [pc, #676]	; (3318 <Clock_Ip_InitClock+0x58c>)
    3074:	9b02      	ldr	r3, [sp, #8]
    3076:	00db      	lsls	r3, r3, #3
    3078:	4413      	add	r3, r2
    307a:	6859      	ldr	r1, [r3, #4]
    307c:	9a03      	ldr	r2, [sp, #12]
    307e:	4613      	mov	r3, r2
    3080:	005b      	lsls	r3, r3, #1
    3082:	4413      	add	r3, r2
    3084:	009b      	lsls	r3, r3, #2
    3086:	f503 730e 	add.w	r3, r3, #568	; 0x238
    308a:	9a01      	ldr	r2, [sp, #4]
    308c:	4413      	add	r3, r2
    308e:	4618      	mov	r0, r3
    3090:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    3092:	9b03      	ldr	r3, [sp, #12]
    3094:	3301      	adds	r3, #1
    3096:	9303      	str	r3, [sp, #12]
    3098:	9b01      	ldr	r3, [sp, #4]
    309a:	7b5b      	ldrb	r3, [r3, #13]
    309c:	461a      	mov	r2, r3
    309e:	9b03      	ldr	r3, [sp, #12]
    30a0:	4293      	cmp	r3, r2
    30a2:	d3d1      	bcc.n	3048 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    30a4:	2300      	movs	r3, #0
    30a6:	9303      	str	r3, [sp, #12]
    30a8:	e029      	b.n	30fe <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    30aa:	9901      	ldr	r1, [sp, #4]
    30ac:	9a03      	ldr	r2, [sp, #12]
    30ae:	4613      	mov	r3, r2
    30b0:	009b      	lsls	r3, r3, #2
    30b2:	4413      	add	r3, r2
    30b4:	00db      	lsls	r3, r3, #3
    30b6:	440b      	add	r3, r1
    30b8:	3340      	adds	r3, #64	; 0x40
    30ba:	681a      	ldr	r2, [r3, #0]
    30bc:	4994      	ldr	r1, [pc, #592]	; (3310 <Clock_Ip_InitClock+0x584>)
    30be:	4613      	mov	r3, r2
    30c0:	00db      	lsls	r3, r3, #3
    30c2:	4413      	add	r3, r2
    30c4:	440b      	add	r3, r1
    30c6:	3301      	adds	r3, #1
    30c8:	781b      	ldrb	r3, [r3, #0]
    30ca:	461a      	mov	r2, r3
    30cc:	4b93      	ldr	r3, [pc, #588]	; (331c <Clock_Ip_InitClock+0x590>)
    30ce:	5c9b      	ldrb	r3, [r3, r2]
    30d0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    30d2:	4993      	ldr	r1, [pc, #588]	; (3320 <Clock_Ip_InitClock+0x594>)
    30d4:	9a02      	ldr	r2, [sp, #8]
    30d6:	4613      	mov	r3, r2
    30d8:	009b      	lsls	r3, r3, #2
    30da:	4413      	add	r3, r2
    30dc:	009b      	lsls	r3, r3, #2
    30de:	440b      	add	r3, r1
    30e0:	3304      	adds	r3, #4
    30e2:	6819      	ldr	r1, [r3, #0]
    30e4:	9a03      	ldr	r2, [sp, #12]
    30e6:	4613      	mov	r3, r2
    30e8:	009b      	lsls	r3, r3, #2
    30ea:	4413      	add	r3, r2
    30ec:	00db      	lsls	r3, r3, #3
    30ee:	3340      	adds	r3, #64	; 0x40
    30f0:	9a01      	ldr	r2, [sp, #4]
    30f2:	4413      	add	r3, r2
    30f4:	4618      	mov	r0, r3
    30f6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    30f8:	9b03      	ldr	r3, [sp, #12]
    30fa:	3301      	adds	r3, #1
    30fc:	9303      	str	r3, [sp, #12]
    30fe:	9b01      	ldr	r3, [sp, #4]
    3100:	7a9b      	ldrb	r3, [r3, #10]
    3102:	461a      	mov	r2, r3
    3104:	9b03      	ldr	r3, [sp, #12]
    3106:	4293      	cmp	r3, r2
    3108:	d3cf      	bcc.n	30aa <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    310a:	2300      	movs	r3, #0
    310c:	9303      	str	r3, [sp, #12]
    310e:	e029      	b.n	3164 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3110:	9901      	ldr	r1, [sp, #4]
    3112:	9a03      	ldr	r2, [sp, #12]
    3114:	4613      	mov	r3, r2
    3116:	009b      	lsls	r3, r3, #2
    3118:	4413      	add	r3, r2
    311a:	009b      	lsls	r3, r3, #2
    311c:	440b      	add	r3, r1
    311e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	497a      	ldr	r1, [pc, #488]	; (3310 <Clock_Ip_InitClock+0x584>)
    3126:	4613      	mov	r3, r2
    3128:	00db      	lsls	r3, r3, #3
    312a:	4413      	add	r3, r2
    312c:	440b      	add	r3, r1
    312e:	3301      	adds	r3, #1
    3130:	781b      	ldrb	r3, [r3, #0]
    3132:	461a      	mov	r2, r3
    3134:	4b7b      	ldr	r3, [pc, #492]	; (3324 <Clock_Ip_InitClock+0x598>)
    3136:	5c9b      	ldrb	r3, [r3, r2]
    3138:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    313a:	4a7b      	ldr	r2, [pc, #492]	; (3328 <Clock_Ip_InitClock+0x59c>)
    313c:	9b02      	ldr	r3, [sp, #8]
    313e:	011b      	lsls	r3, r3, #4
    3140:	4413      	add	r3, r2
    3142:	3304      	adds	r3, #4
    3144:	681c      	ldr	r4, [r3, #0]
    3146:	9a03      	ldr	r2, [sp, #12]
    3148:	4613      	mov	r3, r2
    314a:	009b      	lsls	r3, r3, #2
    314c:	4413      	add	r3, r2
    314e:	009b      	lsls	r3, r3, #2
    3150:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3154:	9a01      	ldr	r2, [sp, #4]
    3156:	4413      	add	r3, r2
    3158:	9903      	ldr	r1, [sp, #12]
    315a:	4618      	mov	r0, r3
    315c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    315e:	9b03      	ldr	r3, [sp, #12]
    3160:	3301      	adds	r3, #1
    3162:	9303      	str	r3, [sp, #12]
    3164:	9b01      	ldr	r3, [sp, #4]
    3166:	7c9b      	ldrb	r3, [r3, #18]
    3168:	461a      	mov	r2, r3
    316a:	9b03      	ldr	r3, [sp, #12]
    316c:	4293      	cmp	r3, r2
    316e:	d3cf      	bcc.n	3110 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    3170:	2300      	movs	r3, #0
    3172:	9303      	str	r3, [sp, #12]
    3174:	e02a      	b.n	31cc <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    3176:	9901      	ldr	r1, [sp, #4]
    3178:	9a03      	ldr	r2, [sp, #12]
    317a:	4613      	mov	r3, r2
    317c:	009b      	lsls	r3, r3, #2
    317e:	4413      	add	r3, r2
    3180:	009b      	lsls	r3, r3, #2
    3182:	440b      	add	r3, r1
    3184:	332c      	adds	r3, #44	; 0x2c
    3186:	681a      	ldr	r2, [r3, #0]
    3188:	4961      	ldr	r1, [pc, #388]	; (3310 <Clock_Ip_InitClock+0x584>)
    318a:	4613      	mov	r3, r2
    318c:	00db      	lsls	r3, r3, #3
    318e:	4413      	add	r3, r2
    3190:	440b      	add	r3, r1
    3192:	3301      	adds	r3, #1
    3194:	781b      	ldrb	r3, [r3, #0]
    3196:	461a      	mov	r2, r3
    3198:	4b64      	ldr	r3, [pc, #400]	; (332c <Clock_Ip_InitClock+0x5a0>)
    319a:	5c9b      	ldrb	r3, [r3, r2]
    319c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    319e:	4964      	ldr	r1, [pc, #400]	; (3330 <Clock_Ip_InitClock+0x5a4>)
    31a0:	9a02      	ldr	r2, [sp, #8]
    31a2:	4613      	mov	r3, r2
    31a4:	009b      	lsls	r3, r3, #2
    31a6:	4413      	add	r3, r2
    31a8:	009b      	lsls	r3, r3, #2
    31aa:	440b      	add	r3, r1
    31ac:	3308      	adds	r3, #8
    31ae:	6819      	ldr	r1, [r3, #0]
    31b0:	9a03      	ldr	r2, [sp, #12]
    31b2:	4613      	mov	r3, r2
    31b4:	009b      	lsls	r3, r3, #2
    31b6:	4413      	add	r3, r2
    31b8:	009b      	lsls	r3, r3, #2
    31ba:	3328      	adds	r3, #40	; 0x28
    31bc:	9a01      	ldr	r2, [sp, #4]
    31be:	4413      	add	r3, r2
    31c0:	3304      	adds	r3, #4
    31c2:	4618      	mov	r0, r3
    31c4:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    31c6:	9b03      	ldr	r3, [sp, #12]
    31c8:	3301      	adds	r3, #1
    31ca:	9303      	str	r3, [sp, #12]
    31cc:	9b01      	ldr	r3, [sp, #4]
    31ce:	7a5b      	ldrb	r3, [r3, #9]
    31d0:	461a      	mov	r2, r3
    31d2:	9b03      	ldr	r3, [sp, #12]
    31d4:	4293      	cmp	r3, r2
    31d6:	d3ce      	bcc.n	3176 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    31d8:	2300      	movs	r3, #0
    31da:	9303      	str	r3, [sp, #12]
    31dc:	e029      	b.n	3232 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    31de:	9901      	ldr	r1, [sp, #4]
    31e0:	9a03      	ldr	r2, [sp, #12]
    31e2:	4613      	mov	r3, r2
    31e4:	009b      	lsls	r3, r3, #2
    31e6:	4413      	add	r3, r2
    31e8:	00db      	lsls	r3, r3, #3
    31ea:	440b      	add	r3, r1
    31ec:	3340      	adds	r3, #64	; 0x40
    31ee:	681a      	ldr	r2, [r3, #0]
    31f0:	4947      	ldr	r1, [pc, #284]	; (3310 <Clock_Ip_InitClock+0x584>)
    31f2:	4613      	mov	r3, r2
    31f4:	00db      	lsls	r3, r3, #3
    31f6:	4413      	add	r3, r2
    31f8:	440b      	add	r3, r1
    31fa:	3301      	adds	r3, #1
    31fc:	781b      	ldrb	r3, [r3, #0]
    31fe:	461a      	mov	r2, r3
    3200:	4b46      	ldr	r3, [pc, #280]	; (331c <Clock_Ip_InitClock+0x590>)
    3202:	5c9b      	ldrb	r3, [r3, r2]
    3204:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    3206:	4946      	ldr	r1, [pc, #280]	; (3320 <Clock_Ip_InitClock+0x594>)
    3208:	9a02      	ldr	r2, [sp, #8]
    320a:	4613      	mov	r3, r2
    320c:	009b      	lsls	r3, r3, #2
    320e:	4413      	add	r3, r2
    3210:	009b      	lsls	r3, r3, #2
    3212:	440b      	add	r3, r1
    3214:	330c      	adds	r3, #12
    3216:	6819      	ldr	r1, [r3, #0]
    3218:	9a03      	ldr	r2, [sp, #12]
    321a:	4613      	mov	r3, r2
    321c:	009b      	lsls	r3, r3, #2
    321e:	4413      	add	r3, r2
    3220:	00db      	lsls	r3, r3, #3
    3222:	3340      	adds	r3, #64	; 0x40
    3224:	9a01      	ldr	r2, [sp, #4]
    3226:	4413      	add	r3, r2
    3228:	4618      	mov	r0, r3
    322a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    322c:	9b03      	ldr	r3, [sp, #12]
    322e:	3301      	adds	r3, #1
    3230:	9303      	str	r3, [sp, #12]
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	7a9b      	ldrb	r3, [r3, #10]
    3236:	461a      	mov	r2, r3
    3238:	9b03      	ldr	r3, [sp, #12]
    323a:	4293      	cmp	r3, r2
    323c:	d3cf      	bcc.n	31de <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    323e:	2300      	movs	r3, #0
    3240:	9303      	str	r3, [sp, #12]
    3242:	e025      	b.n	3290 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    3244:	9a01      	ldr	r2, [sp, #4]
    3246:	9b03      	ldr	r3, [sp, #12]
    3248:	3324      	adds	r3, #36	; 0x24
    324a:	011b      	lsls	r3, r3, #4
    324c:	4413      	add	r3, r2
    324e:	3304      	adds	r3, #4
    3250:	681a      	ldr	r2, [r3, #0]
    3252:	492f      	ldr	r1, [pc, #188]	; (3310 <Clock_Ip_InitClock+0x584>)
    3254:	4613      	mov	r3, r2
    3256:	00db      	lsls	r3, r3, #3
    3258:	4413      	add	r3, r2
    325a:	440b      	add	r3, r1
    325c:	3301      	adds	r3, #1
    325e:	781b      	ldrb	r3, [r3, #0]
    3260:	461a      	mov	r2, r3
    3262:	4b34      	ldr	r3, [pc, #208]	; (3334 <Clock_Ip_InitClock+0x5a8>)
    3264:	5c9b      	ldrb	r3, [r3, r2]
    3266:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    3268:	4933      	ldr	r1, [pc, #204]	; (3338 <Clock_Ip_InitClock+0x5ac>)
    326a:	9a02      	ldr	r2, [sp, #8]
    326c:	4613      	mov	r3, r2
    326e:	005b      	lsls	r3, r3, #1
    3270:	4413      	add	r3, r2
    3272:	009b      	lsls	r3, r3, #2
    3274:	440b      	add	r3, r1
    3276:	3304      	adds	r3, #4
    3278:	681b      	ldr	r3, [r3, #0]
    327a:	9a03      	ldr	r2, [sp, #12]
    327c:	3224      	adds	r2, #36	; 0x24
    327e:	0112      	lsls	r2, r2, #4
    3280:	9901      	ldr	r1, [sp, #4]
    3282:	440a      	add	r2, r1
    3284:	3204      	adds	r2, #4
    3286:	4610      	mov	r0, r2
    3288:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    328a:	9b03      	ldr	r3, [sp, #12]
    328c:	3301      	adds	r3, #1
    328e:	9303      	str	r3, [sp, #12]
    3290:	9b01      	ldr	r3, [sp, #4]
    3292:	7b9b      	ldrb	r3, [r3, #14]
    3294:	461a      	mov	r2, r3
    3296:	9b03      	ldr	r3, [sp, #12]
    3298:	4293      	cmp	r3, r2
    329a:	d3d3      	bcc.n	3244 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    329c:	4b27      	ldr	r3, [pc, #156]	; (333c <Clock_Ip_InitClock+0x5b0>)
    329e:	2200      	movs	r2, #0
    32a0:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    32a2:	4b26      	ldr	r3, [pc, #152]	; (333c <Clock_Ip_InitClock+0x5b0>)
    32a4:	2200      	movs	r2, #0
    32a6:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    32a8:	4b24      	ldr	r3, [pc, #144]	; (333c <Clock_Ip_InitClock+0x5b0>)
    32aa:	2201      	movs	r2, #1
    32ac:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    32ae:	4b23      	ldr	r3, [pc, #140]	; (333c <Clock_Ip_InitClock+0x5b0>)
    32b0:	2200      	movs	r2, #0
    32b2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    32b4:	f000 fa9c 	bl	37f0 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    32b8:	2300      	movs	r3, #0
    32ba:	9303      	str	r3, [sp, #12]
    32bc:	e04c      	b.n	3358 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    32be:	9a01      	ldr	r2, [sp, #4]
    32c0:	9b03      	ldr	r3, [sp, #12]
    32c2:	330d      	adds	r3, #13
    32c4:	00db      	lsls	r3, r3, #3
    32c6:	4413      	add	r3, r2
    32c8:	685b      	ldr	r3, [r3, #4]
    32ca:	4a1d      	ldr	r2, [pc, #116]	; (3340 <Clock_Ip_InitClock+0x5b4>)
    32cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    32d0:	2b03      	cmp	r3, #3
    32d2:	d03b      	beq.n	334c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    32d4:	9b01      	ldr	r3, [sp, #4]
    32d6:	9a03      	ldr	r2, [sp, #12]
    32d8:	320d      	adds	r2, #13
    32da:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    32de:	490c      	ldr	r1, [pc, #48]	; (3310 <Clock_Ip_InitClock+0x584>)
    32e0:	4613      	mov	r3, r2
    32e2:	00db      	lsls	r3, r3, #3
    32e4:	4413      	add	r3, r2
    32e6:	440b      	add	r3, r1
    32e8:	3301      	adds	r3, #1
    32ea:	781b      	ldrb	r3, [r3, #0]
    32ec:	461a      	mov	r2, r3
    32ee:	4b15      	ldr	r3, [pc, #84]	; (3344 <Clock_Ip_InitClock+0x5b8>)
    32f0:	5c9b      	ldrb	r3, [r3, r2]
    32f2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    32f4:	4a14      	ldr	r2, [pc, #80]	; (3348 <Clock_Ip_InitClock+0x5bc>)
    32f6:	9b02      	ldr	r3, [sp, #8]
    32f8:	00db      	lsls	r3, r3, #3
    32fa:	4413      	add	r3, r2
    32fc:	685b      	ldr	r3, [r3, #4]
    32fe:	9a03      	ldr	r2, [sp, #12]
    3300:	320d      	adds	r2, #13
    3302:	00d2      	lsls	r2, r2, #3
    3304:	9901      	ldr	r1, [sp, #4]
    3306:	440a      	add	r2, r1
    3308:	4610      	mov	r0, r2
    330a:	4798      	blx	r3
    330c:	e021      	b.n	3352 <Clock_Ip_InitClock+0x5c6>
    330e:	bf00      	nop
    3310:	000114cc 	.word	0x000114cc
    3314:	0001143c 	.word	0x0001143c
    3318:	00011a18 	.word	0x00011a18
    331c:	0001148c 	.word	0x0001148c
    3320:	00011ad8 	.word	0x00011ad8
    3324:	000114bc 	.word	0x000114bc
    3328:	00011ac8 	.word	0x00011ac8
    332c:	0001144c 	.word	0x0001144c
    3330:	00011a20 	.word	0x00011a20
    3334:	0001147c 	.word	0x0001147c
    3338:	00011a48 	.word	0x00011a48
    333c:	1fff8b5c 	.word	0x1fff8b5c
    3340:	00011918 	.word	0x00011918
    3344:	0001149c 	.word	0x0001149c
    3348:	00011b04 	.word	0x00011b04
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    334c:	4b3a      	ldr	r3, [pc, #232]	; (3438 <Clock_Ip_InitClock+0x6ac>)
    334e:	2201      	movs	r2, #1
    3350:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    3352:	9b03      	ldr	r3, [sp, #12]
    3354:	3301      	adds	r3, #1
    3356:	9303      	str	r3, [sp, #12]
    3358:	9b01      	ldr	r3, [sp, #4]
    335a:	7adb      	ldrb	r3, [r3, #11]
    335c:	461a      	mov	r2, r3
    335e:	9b03      	ldr	r3, [sp, #12]
    3360:	4293      	cmp	r3, r2
    3362:	d3ac      	bcc.n	32be <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    3364:	4b34      	ldr	r3, [pc, #208]	; (3438 <Clock_Ip_InitClock+0x6ac>)
    3366:	781b      	ldrb	r3, [r3, #0]
    3368:	f083 0301 	eor.w	r3, r3, #1
    336c:	b2db      	uxtb	r3, r3
    336e:	2b00      	cmp	r3, #0
    3370:	d05e      	beq.n	3430 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3372:	2300      	movs	r3, #0
    3374:	9303      	str	r3, [sp, #12]
    3376:	e01f      	b.n	33b8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3378:	9a01      	ldr	r2, [sp, #4]
    337a:	9b03      	ldr	r3, [sp, #12]
    337c:	334e      	adds	r3, #78	; 0x4e
    337e:	00db      	lsls	r3, r3, #3
    3380:	4413      	add	r3, r2
    3382:	685a      	ldr	r2, [r3, #4]
    3384:	492d      	ldr	r1, [pc, #180]	; (343c <Clock_Ip_InitClock+0x6b0>)
    3386:	4613      	mov	r3, r2
    3388:	00db      	lsls	r3, r3, #3
    338a:	4413      	add	r3, r2
    338c:	440b      	add	r3, r1
    338e:	3301      	adds	r3, #1
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	461a      	mov	r2, r3
    3394:	4b2a      	ldr	r3, [pc, #168]	; (3440 <Clock_Ip_InitClock+0x6b4>)
    3396:	5c9b      	ldrb	r3, [r3, r2]
    3398:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    339a:	4a2a      	ldr	r2, [pc, #168]	; (3444 <Clock_Ip_InitClock+0x6b8>)
    339c:	9b02      	ldr	r3, [sp, #8]
    339e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    33a2:	9a03      	ldr	r2, [sp, #12]
    33a4:	324e      	adds	r2, #78	; 0x4e
    33a6:	00d2      	lsls	r2, r2, #3
    33a8:	9901      	ldr	r1, [sp, #4]
    33aa:	440a      	add	r2, r1
    33ac:	3204      	adds	r2, #4
    33ae:	4610      	mov	r0, r2
    33b0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    33b2:	9b03      	ldr	r3, [sp, #12]
    33b4:	3301      	adds	r3, #1
    33b6:	9303      	str	r3, [sp, #12]
    33b8:	9b01      	ldr	r3, [sp, #4]
    33ba:	7c1b      	ldrb	r3, [r3, #16]
    33bc:	461a      	mov	r2, r3
    33be:	9b03      	ldr	r3, [sp, #12]
    33c0:	4293      	cmp	r3, r2
    33c2:	d3d9      	bcc.n	3378 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    33c4:	2300      	movs	r3, #0
    33c6:	9303      	str	r3, [sp, #12]
    33c8:	e028      	b.n	341c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    33ca:	9901      	ldr	r1, [sp, #4]
    33cc:	9a03      	ldr	r2, [sp, #12]
    33ce:	4613      	mov	r3, r2
    33d0:	009b      	lsls	r3, r3, #2
    33d2:	4413      	add	r3, r2
    33d4:	009b      	lsls	r3, r3, #2
    33d6:	440b      	add	r3, r1
    33d8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33dc:	681a      	ldr	r2, [r3, #0]
    33de:	4917      	ldr	r1, [pc, #92]	; (343c <Clock_Ip_InitClock+0x6b0>)
    33e0:	4613      	mov	r3, r2
    33e2:	00db      	lsls	r3, r3, #3
    33e4:	4413      	add	r3, r2
    33e6:	440b      	add	r3, r1
    33e8:	3301      	adds	r3, #1
    33ea:	781b      	ldrb	r3, [r3, #0]
    33ec:	461a      	mov	r2, r3
    33ee:	4b16      	ldr	r3, [pc, #88]	; (3448 <Clock_Ip_InitClock+0x6bc>)
    33f0:	5c9b      	ldrb	r3, [r3, r2]
    33f2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    33f4:	4a15      	ldr	r2, [pc, #84]	; (344c <Clock_Ip_InitClock+0x6c0>)
    33f6:	9b02      	ldr	r3, [sp, #8]
    33f8:	011b      	lsls	r3, r3, #4
    33fa:	4413      	add	r3, r2
    33fc:	330c      	adds	r3, #12
    33fe:	6819      	ldr	r1, [r3, #0]
    3400:	9a03      	ldr	r2, [sp, #12]
    3402:	4613      	mov	r3, r2
    3404:	009b      	lsls	r3, r3, #2
    3406:	4413      	add	r3, r2
    3408:	009b      	lsls	r3, r3, #2
    340a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    340e:	9a01      	ldr	r2, [sp, #4]
    3410:	4413      	add	r3, r2
    3412:	4618      	mov	r0, r3
    3414:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    3416:	9b03      	ldr	r3, [sp, #12]
    3418:	3301      	adds	r3, #1
    341a:	9303      	str	r3, [sp, #12]
    341c:	9b01      	ldr	r3, [sp, #4]
    341e:	7c9b      	ldrb	r3, [r3, #18]
    3420:	461a      	mov	r2, r3
    3422:	9b03      	ldr	r3, [sp, #12]
    3424:	4293      	cmp	r3, r2
    3426:	d3d0      	bcc.n	33ca <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3428:	2104      	movs	r1, #4
    342a:	9801      	ldr	r0, [sp, #4]
    342c:	f002 ff48 	bl	62c0 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    3430:	bf00      	nop
    3432:	b004      	add	sp, #16
    3434:	bd10      	pop	{r4, pc}
    3436:	bf00      	nop
    3438:	1fff8b5c 	.word	0x1fff8b5c
    343c:	000114cc 	.word	0x000114cc
    3440:	0001146c 	.word	0x0001146c
    3444:	00011a54 	.word	0x00011a54
    3448:	000114bc 	.word	0x000114bc
    344c:	00011ac8 	.word	0x00011ac8

00003450 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    3450:	b500      	push	{lr}
    3452:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    3454:	2302      	movs	r3, #2
    3456:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    3458:	2300      	movs	r3, #0
    345a:	9304      	str	r3, [sp, #16]
    345c:	e02c      	b.n	34b8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    345e:	4a36      	ldr	r2, [pc, #216]	; (3538 <Clock_Ip_GetPllStatus+0xe8>)
    3460:	9b04      	ldr	r3, [sp, #16]
    3462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3466:	4935      	ldr	r1, [pc, #212]	; (353c <Clock_Ip_GetPllStatus+0xec>)
    3468:	4613      	mov	r3, r2
    346a:	00db      	lsls	r3, r3, #3
    346c:	4413      	add	r3, r2
    346e:	440b      	add	r3, r1
    3470:	3301      	adds	r3, #1
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	461a      	mov	r2, r3
    3476:	4b32      	ldr	r3, [pc, #200]	; (3540 <Clock_Ip_GetPllStatus+0xf0>)
    3478:	5c9b      	ldrb	r3, [r3, r2]
    347a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    347c:	4931      	ldr	r1, [pc, #196]	; (3544 <Clock_Ip_GetPllStatus+0xf4>)
    347e:	9a03      	ldr	r2, [sp, #12]
    3480:	4613      	mov	r3, r2
    3482:	009b      	lsls	r3, r3, #2
    3484:	4413      	add	r3, r2
    3486:	009b      	lsls	r3, r3, #2
    3488:	440b      	add	r3, r1
    348a:	3308      	adds	r3, #8
    348c:	681b      	ldr	r3, [r3, #0]
    348e:	492a      	ldr	r1, [pc, #168]	; (3538 <Clock_Ip_GetPllStatus+0xe8>)
    3490:	9a04      	ldr	r2, [sp, #16]
    3492:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    3496:	4610      	mov	r0, r2
    3498:	4798      	blx	r3
    349a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    349c:	9b02      	ldr	r3, [sp, #8]
    349e:	2b01      	cmp	r3, #1
    34a0:	d102      	bne.n	34a8 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    34a2:	2301      	movs	r3, #1
    34a4:	9305      	str	r3, [sp, #20]
            break;
    34a6:	e00d      	b.n	34c4 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    34a8:	9b02      	ldr	r3, [sp, #8]
    34aa:	2b02      	cmp	r3, #2
    34ac:	d101      	bne.n	34b2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    34ae:	2300      	movs	r3, #0
    34b0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    34b2:	9b04      	ldr	r3, [sp, #16]
    34b4:	3301      	adds	r3, #1
    34b6:	9304      	str	r3, [sp, #16]
    34b8:	4b23      	ldr	r3, [pc, #140]	; (3548 <Clock_Ip_GetPllStatus+0xf8>)
    34ba:	789b      	ldrb	r3, [r3, #2]
    34bc:	461a      	mov	r2, r3
    34be:	9b04      	ldr	r3, [sp, #16]
    34c0:	4293      	cmp	r3, r2
    34c2:	d3cc      	bcc.n	345e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    34c4:	9b05      	ldr	r3, [sp, #20]
    34c6:	2b00      	cmp	r3, #0
    34c8:	d130      	bne.n	352c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    34ca:	2300      	movs	r3, #0
    34cc:	9304      	str	r3, [sp, #16]
    34ce:	e027      	b.n	3520 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    34d0:	4a1e      	ldr	r2, [pc, #120]	; (354c <Clock_Ip_GetPllStatus+0xfc>)
    34d2:	9b04      	ldr	r3, [sp, #16]
    34d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    34d8:	4918      	ldr	r1, [pc, #96]	; (353c <Clock_Ip_GetPllStatus+0xec>)
    34da:	4613      	mov	r3, r2
    34dc:	00db      	lsls	r3, r3, #3
    34de:	4413      	add	r3, r2
    34e0:	440b      	add	r3, r1
    34e2:	3301      	adds	r3, #1
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	461a      	mov	r2, r3
    34e8:	4b19      	ldr	r3, [pc, #100]	; (3550 <Clock_Ip_GetPllStatus+0x100>)
    34ea:	5c9b      	ldrb	r3, [r3, r2]
    34ec:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    34ee:	4919      	ldr	r1, [pc, #100]	; (3554 <Clock_Ip_GetPllStatus+0x104>)
    34f0:	9a03      	ldr	r2, [sp, #12]
    34f2:	4613      	mov	r3, r2
    34f4:	005b      	lsls	r3, r3, #1
    34f6:	4413      	add	r3, r2
    34f8:	009b      	lsls	r3, r3, #2
    34fa:	440b      	add	r3, r1
    34fc:	3308      	adds	r3, #8
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	4912      	ldr	r1, [pc, #72]	; (354c <Clock_Ip_GetPllStatus+0xfc>)
    3502:	9a04      	ldr	r2, [sp, #16]
    3504:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    3508:	4610      	mov	r0, r2
    350a:	4798      	blx	r3
    350c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    350e:	9b01      	ldr	r3, [sp, #4]
    3510:	2b01      	cmp	r3, #1
    3512:	d102      	bne.n	351a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    3514:	2301      	movs	r3, #1
    3516:	9305      	str	r3, [sp, #20]
                break;
    3518:	e008      	b.n	352c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    351a:	9b04      	ldr	r3, [sp, #16]
    351c:	3301      	adds	r3, #1
    351e:	9304      	str	r3, [sp, #16]
    3520:	4b09      	ldr	r3, [pc, #36]	; (3548 <Clock_Ip_GetPllStatus+0xf8>)
    3522:	78db      	ldrb	r3, [r3, #3]
    3524:	461a      	mov	r2, r3
    3526:	9b04      	ldr	r3, [sp, #16]
    3528:	4293      	cmp	r3, r2
    352a:	d3d1      	bcc.n	34d0 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    352c:	9b05      	ldr	r3, [sp, #20]
}
    352e:	4618      	mov	r0, r3
    3530:	b007      	add	sp, #28
    3532:	f85d fb04 	ldr.w	pc, [sp], #4
    3536:	bf00      	nop
    3538:	000119d4 	.word	0x000119d4
    353c:	000114cc 	.word	0x000114cc
    3540:	0001148c 	.word	0x0001148c
    3544:	00011ad8 	.word	0x00011ad8
    3548:	1fff8b5c 	.word	0x1fff8b5c
    354c:	000119d8 	.word	0x000119d8
    3550:	0001147c 	.word	0x0001147c
    3554:	00011a48 	.word	0x00011a48

00003558 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    3558:	b500      	push	{lr}
    355a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    355c:	4b55      	ldr	r3, [pc, #340]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    355e:	681b      	ldr	r3, [r3, #0]
    3560:	2b00      	cmp	r3, #0
    3562:	f000 80a2 	beq.w	36aa <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    3566:	2300      	movs	r3, #0
    3568:	9301      	str	r3, [sp, #4]
    356a:	e02c      	b.n	35c6 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    356c:	4b51      	ldr	r3, [pc, #324]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    356e:	681a      	ldr	r2, [r3, #0]
    3570:	9b01      	ldr	r3, [sp, #4]
    3572:	330d      	adds	r3, #13
    3574:	00db      	lsls	r3, r3, #3
    3576:	4413      	add	r3, r2
    3578:	685b      	ldr	r3, [r3, #4]
    357a:	4a4f      	ldr	r2, [pc, #316]	; (36b8 <Clock_Ip_DistributePll+0x160>)
    357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3580:	2b03      	cmp	r3, #3
    3582:	d11d      	bne.n	35c0 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3584:	4b4b      	ldr	r3, [pc, #300]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    3586:	681b      	ldr	r3, [r3, #0]
    3588:	9a01      	ldr	r2, [sp, #4]
    358a:	320d      	adds	r2, #13
    358c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3590:	494a      	ldr	r1, [pc, #296]	; (36bc <Clock_Ip_DistributePll+0x164>)
    3592:	4613      	mov	r3, r2
    3594:	00db      	lsls	r3, r3, #3
    3596:	4413      	add	r3, r2
    3598:	440b      	add	r3, r1
    359a:	3301      	adds	r3, #1
    359c:	781b      	ldrb	r3, [r3, #0]
    359e:	461a      	mov	r2, r3
    35a0:	4b47      	ldr	r3, [pc, #284]	; (36c0 <Clock_Ip_DistributePll+0x168>)
    35a2:	5c9b      	ldrb	r3, [r3, r2]
    35a4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    35a6:	4a47      	ldr	r2, [pc, #284]	; (36c4 <Clock_Ip_DistributePll+0x16c>)
    35a8:	9b00      	ldr	r3, [sp, #0]
    35aa:	00db      	lsls	r3, r3, #3
    35ac:	4413      	add	r3, r2
    35ae:	685b      	ldr	r3, [r3, #4]
    35b0:	4a40      	ldr	r2, [pc, #256]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    35b2:	6811      	ldr	r1, [r2, #0]
    35b4:	9a01      	ldr	r2, [sp, #4]
    35b6:	320d      	adds	r2, #13
    35b8:	00d2      	lsls	r2, r2, #3
    35ba:	440a      	add	r2, r1
    35bc:	4610      	mov	r0, r2
    35be:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    35c0:	9b01      	ldr	r3, [sp, #4]
    35c2:	3301      	adds	r3, #1
    35c4:	9301      	str	r3, [sp, #4]
    35c6:	4b3b      	ldr	r3, [pc, #236]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	7adb      	ldrb	r3, [r3, #11]
    35cc:	461a      	mov	r2, r3
    35ce:	9b01      	ldr	r3, [sp, #4]
    35d0:	4293      	cmp	r3, r2
    35d2:	d3cb      	bcc.n	356c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    35d4:	4b3c      	ldr	r3, [pc, #240]	; (36c8 <Clock_Ip_DistributePll+0x170>)
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	2b00      	cmp	r3, #0
    35da:	d066      	beq.n	36aa <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    35dc:	2300      	movs	r3, #0
    35de:	9301      	str	r3, [sp, #4]
    35e0:	e021      	b.n	3626 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    35e2:	4b34      	ldr	r3, [pc, #208]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    35e4:	681a      	ldr	r2, [r3, #0]
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	334e      	adds	r3, #78	; 0x4e
    35ea:	00db      	lsls	r3, r3, #3
    35ec:	4413      	add	r3, r2
    35ee:	685a      	ldr	r2, [r3, #4]
    35f0:	4932      	ldr	r1, [pc, #200]	; (36bc <Clock_Ip_DistributePll+0x164>)
    35f2:	4613      	mov	r3, r2
    35f4:	00db      	lsls	r3, r3, #3
    35f6:	4413      	add	r3, r2
    35f8:	440b      	add	r3, r1
    35fa:	3301      	adds	r3, #1
    35fc:	781b      	ldrb	r3, [r3, #0]
    35fe:	461a      	mov	r2, r3
    3600:	4b32      	ldr	r3, [pc, #200]	; (36cc <Clock_Ip_DistributePll+0x174>)
    3602:	5c9b      	ldrb	r3, [r3, r2]
    3604:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    3606:	4a32      	ldr	r2, [pc, #200]	; (36d0 <Clock_Ip_DistributePll+0x178>)
    3608:	9b00      	ldr	r3, [sp, #0]
    360a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    360e:	4a29      	ldr	r2, [pc, #164]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    3610:	6811      	ldr	r1, [r2, #0]
    3612:	9a01      	ldr	r2, [sp, #4]
    3614:	324e      	adds	r2, #78	; 0x4e
    3616:	00d2      	lsls	r2, r2, #3
    3618:	440a      	add	r2, r1
    361a:	3204      	adds	r2, #4
    361c:	4610      	mov	r0, r2
    361e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3620:	9b01      	ldr	r3, [sp, #4]
    3622:	3301      	adds	r3, #1
    3624:	9301      	str	r3, [sp, #4]
    3626:	4b23      	ldr	r3, [pc, #140]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	7c1b      	ldrb	r3, [r3, #16]
    362c:	461a      	mov	r2, r3
    362e:	9b01      	ldr	r3, [sp, #4]
    3630:	4293      	cmp	r3, r2
    3632:	d3d6      	bcc.n	35e2 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3634:	2300      	movs	r3, #0
    3636:	9301      	str	r3, [sp, #4]
    3638:	e02a      	b.n	3690 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    363a:	4b1e      	ldr	r3, [pc, #120]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    363c:	6819      	ldr	r1, [r3, #0]
    363e:	9a01      	ldr	r2, [sp, #4]
    3640:	4613      	mov	r3, r2
    3642:	009b      	lsls	r3, r3, #2
    3644:	4413      	add	r3, r2
    3646:	009b      	lsls	r3, r3, #2
    3648:	440b      	add	r3, r1
    364a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    364e:	681a      	ldr	r2, [r3, #0]
    3650:	491a      	ldr	r1, [pc, #104]	; (36bc <Clock_Ip_DistributePll+0x164>)
    3652:	4613      	mov	r3, r2
    3654:	00db      	lsls	r3, r3, #3
    3656:	4413      	add	r3, r2
    3658:	440b      	add	r3, r1
    365a:	3301      	adds	r3, #1
    365c:	781b      	ldrb	r3, [r3, #0]
    365e:	461a      	mov	r2, r3
    3660:	4b1c      	ldr	r3, [pc, #112]	; (36d4 <Clock_Ip_DistributePll+0x17c>)
    3662:	5c9b      	ldrb	r3, [r3, r2]
    3664:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    3666:	4a1c      	ldr	r2, [pc, #112]	; (36d8 <Clock_Ip_DistributePll+0x180>)
    3668:	9b00      	ldr	r3, [sp, #0]
    366a:	011b      	lsls	r3, r3, #4
    366c:	4413      	add	r3, r2
    366e:	330c      	adds	r3, #12
    3670:	6819      	ldr	r1, [r3, #0]
    3672:	4b10      	ldr	r3, [pc, #64]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    3674:	6818      	ldr	r0, [r3, #0]
    3676:	9a01      	ldr	r2, [sp, #4]
    3678:	4613      	mov	r3, r2
    367a:	009b      	lsls	r3, r3, #2
    367c:	4413      	add	r3, r2
    367e:	009b      	lsls	r3, r3, #2
    3680:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3684:	4403      	add	r3, r0
    3686:	4618      	mov	r0, r3
    3688:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    368a:	9b01      	ldr	r3, [sp, #4]
    368c:	3301      	adds	r3, #1
    368e:	9301      	str	r3, [sp, #4]
    3690:	4b08      	ldr	r3, [pc, #32]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    3692:	681b      	ldr	r3, [r3, #0]
    3694:	7c9b      	ldrb	r3, [r3, #18]
    3696:	461a      	mov	r2, r3
    3698:	9b01      	ldr	r3, [sp, #4]
    369a:	4293      	cmp	r3, r2
    369c:	d3cd      	bcc.n	363a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    369e:	4b05      	ldr	r3, [pc, #20]	; (36b4 <Clock_Ip_DistributePll+0x15c>)
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	2104      	movs	r1, #4
    36a4:	4618      	mov	r0, r3
    36a6:	f002 fe0b 	bl	62c0 <Clock_Ip_Command>
        }
    }
}
    36aa:	bf00      	nop
    36ac:	b003      	add	sp, #12
    36ae:	f85d fb04 	ldr.w	pc, [sp], #4
    36b2:	bf00      	nop
    36b4:	1fff8b54 	.word	0x1fff8b54
    36b8:	00011918 	.word	0x00011918
    36bc:	000114cc 	.word	0x000114cc
    36c0:	0001149c 	.word	0x0001149c
    36c4:	00011b04 	.word	0x00011b04
    36c8:	1fff8b5c 	.word	0x1fff8b5c
    36cc:	0001146c 	.word	0x0001146c
    36d0:	00011a54 	.word	0x00011a54
    36d4:	000114bc 	.word	0x000114bc
    36d8:	00011ac8 	.word	0x00011ac8

000036dc <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    36dc:	b500      	push	{lr}
    36de:	b085      	sub	sp, #20
    36e0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    36e2:	490c      	ldr	r1, [pc, #48]	; (3714 <Clock_Ip_DisableClockMonitor+0x38>)
    36e4:	9a01      	ldr	r2, [sp, #4]
    36e6:	4613      	mov	r3, r2
    36e8:	00db      	lsls	r3, r3, #3
    36ea:	4413      	add	r3, r2
    36ec:	440b      	add	r3, r1
    36ee:	3301      	adds	r3, #1
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	461a      	mov	r2, r3
    36f4:	4b08      	ldr	r3, [pc, #32]	; (3718 <Clock_Ip_DisableClockMonitor+0x3c>)
    36f6:	5c9b      	ldrb	r3, [r3, r2]
    36f8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    36fa:	4a08      	ldr	r2, [pc, #32]	; (371c <Clock_Ip_DisableClockMonitor+0x40>)
    36fc:	9b03      	ldr	r3, [sp, #12]
    36fe:	011b      	lsls	r3, r3, #4
    3700:	4413      	add	r3, r2
    3702:	3308      	adds	r3, #8
    3704:	681b      	ldr	r3, [r3, #0]
    3706:	9801      	ldr	r0, [sp, #4]
    3708:	4798      	blx	r3
}
    370a:	bf00      	nop
    370c:	b005      	add	sp, #20
    370e:	f85d fb04 	ldr.w	pc, [sp], #4
    3712:	bf00      	nop
    3714:	000114cc 	.word	0x000114cc
    3718:	000114bc 	.word	0x000114bc
    371c:	00011ac8 	.word	0x00011ac8

00003720 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    3720:	b082      	sub	sp, #8
    3722:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    3724:	4a02      	ldr	r2, [pc, #8]	; (3730 <Clock_Ip_InstallNotificationsCallback+0x10>)
    3726:	9b01      	ldr	r3, [sp, #4]
    3728:	6013      	str	r3, [r2, #0]
}
    372a:	bf00      	nop
    372c:	b002      	add	sp, #8
    372e:	4770      	bx	lr
    3730:	1fff8b14 	.word	0x1fff8b14

00003734 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    3734:	b500      	push	{lr}
    3736:	b085      	sub	sp, #20
    3738:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    373a:	490c      	ldr	r1, [pc, #48]	; (376c <Clock_Ip_DisableModuleClock+0x38>)
    373c:	9a01      	ldr	r2, [sp, #4]
    373e:	4613      	mov	r3, r2
    3740:	00db      	lsls	r3, r3, #3
    3742:	4413      	add	r3, r2
    3744:	440b      	add	r3, r1
    3746:	3301      	adds	r3, #1
    3748:	781b      	ldrb	r3, [r3, #0]
    374a:	461a      	mov	r2, r3
    374c:	4b08      	ldr	r3, [pc, #32]	; (3770 <Clock_Ip_DisableModuleClock+0x3c>)
    374e:	5c9b      	ldrb	r3, [r3, r2]
    3750:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    3752:	4a08      	ldr	r2, [pc, #32]	; (3774 <Clock_Ip_DisableModuleClock+0x40>)
    3754:	9b03      	ldr	r3, [sp, #12]
    3756:	00db      	lsls	r3, r3, #3
    3758:	4413      	add	r3, r2
    375a:	685b      	ldr	r3, [r3, #4]
    375c:	2101      	movs	r1, #1
    375e:	9801      	ldr	r0, [sp, #4]
    3760:	4798      	blx	r3
}
    3762:	bf00      	nop
    3764:	b005      	add	sp, #20
    3766:	f85d fb04 	ldr.w	pc, [sp], #4
    376a:	bf00      	nop
    376c:	000114cc 	.word	0x000114cc
    3770:	0001146c 	.word	0x0001146c
    3774:	00011a54 	.word	0x00011a54

00003778 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3778:	b500      	push	{lr}
    377a:	b085      	sub	sp, #20
    377c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    377e:	490c      	ldr	r1, [pc, #48]	; (37b0 <Clock_Ip_EnableModuleClock+0x38>)
    3780:	9a01      	ldr	r2, [sp, #4]
    3782:	4613      	mov	r3, r2
    3784:	00db      	lsls	r3, r3, #3
    3786:	4413      	add	r3, r2
    3788:	440b      	add	r3, r1
    378a:	3301      	adds	r3, #1
    378c:	781b      	ldrb	r3, [r3, #0]
    378e:	461a      	mov	r2, r3
    3790:	4b08      	ldr	r3, [pc, #32]	; (37b4 <Clock_Ip_EnableModuleClock+0x3c>)
    3792:	5c9b      	ldrb	r3, [r3, r2]
    3794:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    3796:	4a08      	ldr	r2, [pc, #32]	; (37b8 <Clock_Ip_EnableModuleClock+0x40>)
    3798:	9b03      	ldr	r3, [sp, #12]
    379a:	00db      	lsls	r3, r3, #3
    379c:	4413      	add	r3, r2
    379e:	685b      	ldr	r3, [r3, #4]
    37a0:	2100      	movs	r1, #0
    37a2:	9801      	ldr	r0, [sp, #4]
    37a4:	4798      	blx	r3
}
    37a6:	bf00      	nop
    37a8:	b005      	add	sp, #20
    37aa:	f85d fb04 	ldr.w	pc, [sp], #4
    37ae:	bf00      	nop
    37b0:	000114cc 	.word	0x000114cc
    37b4:	0001146c 	.word	0x0001146c
    37b8:	00011a54 	.word	0x00011a54

000037bc <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    37bc:	b500      	push	{lr}
    37be:	b083      	sub	sp, #12
    37c0:	9001      	str	r0, [sp, #4]
    37c2:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    37c4:	4b08      	ldr	r3, [pc, #32]	; (37e8 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    37c6:	2200      	movs	r2, #0
    37c8:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    37ca:	4b08      	ldr	r3, [pc, #32]	; (37ec <Clock_Ip_PowerModeChangeNotification+0x30>)
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	2102      	movs	r1, #2
    37d0:	4618      	mov	r0, r3
    37d2:	f002 fd75 	bl	62c0 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    37d6:	9900      	ldr	r1, [sp, #0]
    37d8:	9801      	ldr	r0, [sp, #4]
    37da:	f002 fc51 	bl	6080 <Clock_Ip_ClockPowerModeChangeNotification>
}
    37de:	bf00      	nop
    37e0:	b003      	add	sp, #12
    37e2:	f85d fb04 	ldr.w	pc, [sp], #4
    37e6:	bf00      	nop
    37e8:	1fff8b10 	.word	0x1fff8b10
    37ec:	1fff8b54 	.word	0x1fff8b54

000037f0 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    37f0:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    37f2:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    37f6:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    37f8:	4b06      	ldr	r3, [pc, #24]	; (3814 <Clock_Ip_SetWaitStates+0x24>)
    37fa:	785b      	ldrb	r3, [r3, #1]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d005      	beq.n	380c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    3800:	9b01      	ldr	r3, [sp, #4]
    3802:	3b01      	subs	r3, #1
    3804:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    3806:	9b01      	ldr	r3, [sp, #4]
    3808:	2b00      	cmp	r3, #0
    380a:	d1f9      	bne.n	3800 <Clock_Ip_SetWaitStates+0x10>
    }
}
    380c:	bf00      	nop
    380e:	b002      	add	sp, #8
    3810:	4770      	bx	lr
    3812:	bf00      	nop
    3814:	1fff8b5c 	.word	0x1fff8b5c

00003818 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    3818:	b500      	push	{lr}
    381a:	b083      	sub	sp, #12
    381c:	9001      	str	r0, [sp, #4]
    381e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    3820:	4b04      	ldr	r3, [pc, #16]	; (3834 <Clock_Ip_ReportClockErrors+0x1c>)
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	9900      	ldr	r1, [sp, #0]
    3826:	9801      	ldr	r0, [sp, #4]
    3828:	4798      	blx	r3
}
    382a:	bf00      	nop
    382c:	b003      	add	sp, #12
    382e:	f85d fb04 	ldr.w	pc, [sp], #4
    3832:	bf00      	nop
    3834:	1fff8b14 	.word	0x1fff8b14

00003838 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    3838:	b500      	push	{lr}
    383a:	b085      	sub	sp, #20
    383c:	9003      	str	r0, [sp, #12]
    383e:	9102      	str	r1, [sp, #8]
    3840:	9201      	str	r2, [sp, #4]
    3842:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3844:	2000      	movs	r0, #0
    3846:	f7fe ffd1 	bl	27ec <OsIf_GetCounter>
    384a:	4602      	mov	r2, r0
    384c:	9b03      	ldr	r3, [sp, #12]
    384e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3850:	9b02      	ldr	r3, [sp, #8]
    3852:	2200      	movs	r2, #0
    3854:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3856:	2100      	movs	r1, #0
    3858:	9800      	ldr	r0, [sp, #0]
    385a:	f7ff f813 	bl	2884 <OsIf_MicrosToTicks>
    385e:	4602      	mov	r2, r0
    3860:	9b01      	ldr	r3, [sp, #4]
    3862:	601a      	str	r2, [r3, #0]
}
    3864:	bf00      	nop
    3866:	b005      	add	sp, #20
    3868:	f85d fb04 	ldr.w	pc, [sp], #4

0000386c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    386c:	b500      	push	{lr}
    386e:	b087      	sub	sp, #28
    3870:	9003      	str	r0, [sp, #12]
    3872:	9102      	str	r1, [sp, #8]
    3874:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3876:	2300      	movs	r3, #0
    3878:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    387c:	2100      	movs	r1, #0
    387e:	9803      	ldr	r0, [sp, #12]
    3880:	f7fe ffcd 	bl	281e <OsIf_GetElapsed>
    3884:	4602      	mov	r2, r0
    3886:	9b02      	ldr	r3, [sp, #8]
    3888:	681b      	ldr	r3, [r3, #0]
    388a:	441a      	add	r2, r3
    388c:	9b02      	ldr	r3, [sp, #8]
    388e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3890:	9b02      	ldr	r3, [sp, #8]
    3892:	681b      	ldr	r3, [r3, #0]
    3894:	9a01      	ldr	r2, [sp, #4]
    3896:	429a      	cmp	r2, r3
    3898:	d802      	bhi.n	38a0 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    389a:	2301      	movs	r3, #1
    389c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    38a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    38a4:	4618      	mov	r0, r3
    38a6:	b007      	add	sp, #28
    38a8:	f85d fb04 	ldr.w	pc, [sp], #4

000038ac <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    38ac:	b082      	sub	sp, #8
    38ae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    38b0:	bf00      	nop
    38b2:	b002      	add	sp, #8
    38b4:	4770      	bx	lr

000038b6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    38b6:	b500      	push	{lr}
    38b8:	b083      	sub	sp, #12
    38ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38bc:	9b01      	ldr	r3, [sp, #4]
    38be:	2b00      	cmp	r3, #0
    38c0:	d002      	beq.n	38c8 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    38c2:	9801      	ldr	r0, [sp, #4]
    38c4:	f000 f8ad 	bl	3a22 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38c8:	bf00      	nop
    38ca:	b003      	add	sp, #12
    38cc:	f85d fb04 	ldr.w	pc, [sp], #4

000038d0 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    38d0:	b500      	push	{lr}
    38d2:	b083      	sub	sp, #12
    38d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38d6:	9b01      	ldr	r3, [sp, #4]
    38d8:	2b00      	cmp	r3, #0
    38da:	d002      	beq.n	38e2 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    38dc:	9801      	ldr	r0, [sp, #4]
    38de:	f000 f8cd 	bl	3a7c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38e2:	bf00      	nop
    38e4:	b003      	add	sp, #12
    38e6:	f85d fb04 	ldr.w	pc, [sp], #4

000038ea <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    38ea:	b500      	push	{lr}
    38ec:	b083      	sub	sp, #12
    38ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38f0:	9b01      	ldr	r3, [sp, #4]
    38f2:	2b00      	cmp	r3, #0
    38f4:	d002      	beq.n	38fc <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    38f6:	9801      	ldr	r0, [sp, #4]
    38f8:	f000 f8ee 	bl	3ad8 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38fc:	bf00      	nop
    38fe:	b003      	add	sp, #12
    3900:	f85d fb04 	ldr.w	pc, [sp], #4

00003904 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3904:	b500      	push	{lr}
    3906:	b083      	sub	sp, #12
    3908:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    390a:	9b01      	ldr	r3, [sp, #4]
    390c:	2b00      	cmp	r3, #0
    390e:	d002      	beq.n	3916 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3910:	9801      	ldr	r0, [sp, #4]
    3912:	f000 f8f9 	bl	3b08 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3916:	bf00      	nop
    3918:	b003      	add	sp, #12
    391a:	f85d fb04 	ldr.w	pc, [sp], #4

0000391e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    391e:	b500      	push	{lr}
    3920:	b083      	sub	sp, #12
    3922:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3924:	9b01      	ldr	r3, [sp, #4]
    3926:	2b00      	cmp	r3, #0
    3928:	d002      	beq.n	3930 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    392a:	9801      	ldr	r0, [sp, #4]
    392c:	f000 f904 	bl	3b38 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3930:	bf00      	nop
    3932:	b003      	add	sp, #12
    3934:	f85d fb04 	ldr.w	pc, [sp], #4

00003938 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3938:	b500      	push	{lr}
    393a:	b083      	sub	sp, #12
    393c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    393e:	9b01      	ldr	r3, [sp, #4]
    3940:	2b00      	cmp	r3, #0
    3942:	d002      	beq.n	394a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3944:	9801      	ldr	r0, [sp, #4]
    3946:	f000 f90f 	bl	3b68 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    394a:	bf00      	nop
    394c:	b003      	add	sp, #12
    394e:	f85d fb04 	ldr.w	pc, [sp], #4

00003952 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3952:	b500      	push	{lr}
    3954:	b083      	sub	sp, #12
    3956:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3958:	9b01      	ldr	r3, [sp, #4]
    395a:	2b00      	cmp	r3, #0
    395c:	d002      	beq.n	3964 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    395e:	9801      	ldr	r0, [sp, #4]
    3960:	f000 f91a 	bl	3b98 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3964:	bf00      	nop
    3966:	b003      	add	sp, #12
    3968:	f85d fb04 	ldr.w	pc, [sp], #4

0000396c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    396c:	b500      	push	{lr}
    396e:	b083      	sub	sp, #12
    3970:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3972:	9b01      	ldr	r3, [sp, #4]
    3974:	2b00      	cmp	r3, #0
    3976:	d002      	beq.n	397e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3978:	9801      	ldr	r0, [sp, #4]
    397a:	f000 f925 	bl	3bc8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    397e:	bf00      	nop
    3980:	b003      	add	sp, #12
    3982:	f85d fb04 	ldr.w	pc, [sp], #4

00003986 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3986:	b500      	push	{lr}
    3988:	b083      	sub	sp, #12
    398a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    398c:	9b01      	ldr	r3, [sp, #4]
    398e:	2b00      	cmp	r3, #0
    3990:	d002      	beq.n	3998 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3992:	9801      	ldr	r0, [sp, #4]
    3994:	f000 f930 	bl	3bf8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3998:	bf00      	nop
    399a:	b003      	add	sp, #12
    399c:	f85d fb04 	ldr.w	pc, [sp], #4

000039a0 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    39a0:	b500      	push	{lr}
    39a2:	b083      	sub	sp, #12
    39a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39a6:	9b01      	ldr	r3, [sp, #4]
    39a8:	2b00      	cmp	r3, #0
    39aa:	d002      	beq.n	39b2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    39ac:	9801      	ldr	r0, [sp, #4]
    39ae:	f000 f93b 	bl	3c28 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39b2:	bf00      	nop
    39b4:	b003      	add	sp, #12
    39b6:	f85d fb04 	ldr.w	pc, [sp], #4

000039ba <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    39ba:	b500      	push	{lr}
    39bc:	b083      	sub	sp, #12
    39be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39c0:	9b01      	ldr	r3, [sp, #4]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d002      	beq.n	39cc <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    39c6:	9801      	ldr	r0, [sp, #4]
    39c8:	f000 f946 	bl	3c58 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39cc:	bf00      	nop
    39ce:	b003      	add	sp, #12
    39d0:	f85d fb04 	ldr.w	pc, [sp], #4

000039d4 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    39d4:	b500      	push	{lr}
    39d6:	b083      	sub	sp, #12
    39d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39da:	9b01      	ldr	r3, [sp, #4]
    39dc:	2b00      	cmp	r3, #0
    39de:	d002      	beq.n	39e6 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    39e0:	9801      	ldr	r0, [sp, #4]
    39e2:	f000 f951 	bl	3c88 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39e6:	bf00      	nop
    39e8:	b003      	add	sp, #12
    39ea:	f85d fb04 	ldr.w	pc, [sp], #4

000039ee <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    39ee:	b500      	push	{lr}
    39f0:	b083      	sub	sp, #12
    39f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39f4:	9b01      	ldr	r3, [sp, #4]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d002      	beq.n	3a00 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    39fa:	9801      	ldr	r0, [sp, #4]
    39fc:	f000 f95e 	bl	3cbc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a00:	bf00      	nop
    3a02:	b003      	add	sp, #12
    3a04:	f85d fb04 	ldr.w	pc, [sp], #4

00003a08 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3a08:	b500      	push	{lr}
    3a0a:	b083      	sub	sp, #12
    3a0c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a0e:	9b01      	ldr	r3, [sp, #4]
    3a10:	2b00      	cmp	r3, #0
    3a12:	d002      	beq.n	3a1a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3a14:	9801      	ldr	r0, [sp, #4]
    3a16:	f000 f98b 	bl	3d30 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a1a:	bf00      	nop
    3a1c:	b003      	add	sp, #12
    3a1e:	f85d fb04 	ldr.w	pc, [sp], #4

00003a22 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a22:	b086      	sub	sp, #24
    3a24:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3a26:	9b01      	ldr	r3, [sp, #4]
    3a28:	681a      	ldr	r2, [r3, #0]
    3a2a:	4911      	ldr	r1, [pc, #68]	; (3a70 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3a2c:	4613      	mov	r3, r2
    3a2e:	00db      	lsls	r3, r3, #3
    3a30:	4413      	add	r3, r2
    3a32:	440b      	add	r3, r1
    3a34:	781b      	ldrb	r3, [r3, #0]
    3a36:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3a38:	9b01      	ldr	r3, [sp, #4]
    3a3a:	685b      	ldr	r3, [r3, #4]
    3a3c:	4a0d      	ldr	r2, [pc, #52]	; (3a74 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3a3e:	5cd3      	ldrb	r3, [r2, r3]
    3a40:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3a42:	4a0d      	ldr	r2, [pc, #52]	; (3a78 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3a44:	9b05      	ldr	r3, [sp, #20]
    3a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3a4e:	9b03      	ldr	r3, [sp, #12]
    3a50:	f023 0307 	bic.w	r3, r3, #7
    3a54:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3a56:	9a03      	ldr	r2, [sp, #12]
    3a58:	9b04      	ldr	r3, [sp, #16]
    3a5a:	4313      	orrs	r3, r2
    3a5c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3a5e:	4a06      	ldr	r2, [pc, #24]	; (3a78 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3a60:	9b05      	ldr	r3, [sp, #20]
    3a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a66:	9a03      	ldr	r2, [sp, #12]
    3a68:	601a      	str	r2, [r3, #0]
}
    3a6a:	bf00      	nop
    3a6c:	b006      	add	sp, #24
    3a6e:	4770      	bx	lr
    3a70:	000114cc 	.word	0x000114cc
    3a74:	000118c4 	.word	0x000118c4
    3a78:	00011908 	.word	0x00011908

00003a7c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a7c:	b086      	sub	sp, #24
    3a7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3a80:	9b01      	ldr	r3, [sp, #4]
    3a82:	681a      	ldr	r2, [r3, #0]
    3a84:	4911      	ldr	r1, [pc, #68]	; (3acc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3a86:	4613      	mov	r3, r2
    3a88:	00db      	lsls	r3, r3, #3
    3a8a:	4413      	add	r3, r2
    3a8c:	440b      	add	r3, r1
    3a8e:	781b      	ldrb	r3, [r3, #0]
    3a90:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3a92:	9b01      	ldr	r3, [sp, #4]
    3a94:	685b      	ldr	r3, [r3, #4]
    3a96:	4a0e      	ldr	r2, [pc, #56]	; (3ad0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3a98:	5cd3      	ldrb	r3, [r2, r3]
    3a9a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3a9c:	4a0d      	ldr	r2, [pc, #52]	; (3ad4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3a9e:	9b05      	ldr	r3, [sp, #20]
    3aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3aa4:	681b      	ldr	r3, [r3, #0]
    3aa6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3aa8:	9b03      	ldr	r3, [sp, #12]
    3aaa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3aae:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3ab0:	9b04      	ldr	r3, [sp, #16]
    3ab2:	021b      	lsls	r3, r3, #8
    3ab4:	9a03      	ldr	r2, [sp, #12]
    3ab6:	4313      	orrs	r3, r2
    3ab8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3aba:	4a06      	ldr	r2, [pc, #24]	; (3ad4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3abc:	9b05      	ldr	r3, [sp, #20]
    3abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ac2:	9a03      	ldr	r2, [sp, #12]
    3ac4:	601a      	str	r2, [r3, #0]
}
    3ac6:	bf00      	nop
    3ac8:	b006      	add	sp, #24
    3aca:	4770      	bx	lr
    3acc:	000114cc 	.word	0x000114cc
    3ad0:	000118c4 	.word	0x000118c4
    3ad4:	00011908 	.word	0x00011908

00003ad8 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ad8:	b084      	sub	sp, #16
    3ada:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3adc:	4b09      	ldr	r3, [pc, #36]	; (3b04 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3ade:	695b      	ldr	r3, [r3, #20]
    3ae0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3ae2:	9b03      	ldr	r3, [sp, #12]
    3ae4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3ae8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3aea:	9b01      	ldr	r3, [sp, #4]
    3aec:	685b      	ldr	r3, [r3, #4]
    3aee:	3b01      	subs	r3, #1
    3af0:	041b      	lsls	r3, r3, #16
    3af2:	9a03      	ldr	r2, [sp, #12]
    3af4:	4313      	orrs	r3, r2
    3af6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3af8:	4a02      	ldr	r2, [pc, #8]	; (3b04 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3afa:	9b03      	ldr	r3, [sp, #12]
    3afc:	6153      	str	r3, [r2, #20]
}
    3afe:	bf00      	nop
    3b00:	b004      	add	sp, #16
    3b02:	4770      	bx	lr
    3b04:	40064000 	.word	0x40064000

00003b08 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b08:	b084      	sub	sp, #16
    3b0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3b0c:	4b09      	ldr	r3, [pc, #36]	; (3b34 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3b0e:	695b      	ldr	r3, [r3, #20]
    3b10:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3b12:	9b03      	ldr	r3, [sp, #12]
    3b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3b18:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3b1a:	9b01      	ldr	r3, [sp, #4]
    3b1c:	685b      	ldr	r3, [r3, #4]
    3b1e:	3b01      	subs	r3, #1
    3b20:	011b      	lsls	r3, r3, #4
    3b22:	9a03      	ldr	r2, [sp, #12]
    3b24:	4313      	orrs	r3, r2
    3b26:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3b28:	4a02      	ldr	r2, [pc, #8]	; (3b34 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3b2a:	9b03      	ldr	r3, [sp, #12]
    3b2c:	6153      	str	r3, [r2, #20]
}
    3b2e:	bf00      	nop
    3b30:	b004      	add	sp, #16
    3b32:	4770      	bx	lr
    3b34:	40064000 	.word	0x40064000

00003b38 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b38:	b084      	sub	sp, #16
    3b3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3b3c:	4b09      	ldr	r3, [pc, #36]	; (3b64 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3b3e:	695b      	ldr	r3, [r3, #20]
    3b40:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3b42:	9b03      	ldr	r3, [sp, #12]
    3b44:	f023 030f 	bic.w	r3, r3, #15
    3b48:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3b4a:	9b01      	ldr	r3, [sp, #4]
    3b4c:	685b      	ldr	r3, [r3, #4]
    3b4e:	3b01      	subs	r3, #1
    3b50:	9a03      	ldr	r2, [sp, #12]
    3b52:	4313      	orrs	r3, r2
    3b54:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3b56:	4a03      	ldr	r2, [pc, #12]	; (3b64 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3b58:	9b03      	ldr	r3, [sp, #12]
    3b5a:	6153      	str	r3, [r2, #20]
}
    3b5c:	bf00      	nop
    3b5e:	b004      	add	sp, #16
    3b60:	4770      	bx	lr
    3b62:	bf00      	nop
    3b64:	40064000 	.word	0x40064000

00003b68 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b68:	b084      	sub	sp, #16
    3b6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b6c:	4b09      	ldr	r3, [pc, #36]	; (3b94 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b6e:	699b      	ldr	r3, [r3, #24]
    3b70:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3b72:	9b03      	ldr	r3, [sp, #12]
    3b74:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3b78:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3b7a:	9b01      	ldr	r3, [sp, #4]
    3b7c:	685b      	ldr	r3, [r3, #4]
    3b7e:	3b01      	subs	r3, #1
    3b80:	041b      	lsls	r3, r3, #16
    3b82:	9a03      	ldr	r2, [sp, #12]
    3b84:	4313      	orrs	r3, r2
    3b86:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b88:	4a02      	ldr	r2, [pc, #8]	; (3b94 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b8a:	9b03      	ldr	r3, [sp, #12]
    3b8c:	6193      	str	r3, [r2, #24]
}
    3b8e:	bf00      	nop
    3b90:	b004      	add	sp, #16
    3b92:	4770      	bx	lr
    3b94:	40064000 	.word	0x40064000

00003b98 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b98:	b084      	sub	sp, #16
    3b9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b9c:	4b09      	ldr	r3, [pc, #36]	; (3bc4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3b9e:	699b      	ldr	r3, [r3, #24]
    3ba0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3ba2:	9b03      	ldr	r3, [sp, #12]
    3ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3ba8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3baa:	9b01      	ldr	r3, [sp, #4]
    3bac:	685b      	ldr	r3, [r3, #4]
    3bae:	3b01      	subs	r3, #1
    3bb0:	011b      	lsls	r3, r3, #4
    3bb2:	9a03      	ldr	r2, [sp, #12]
    3bb4:	4313      	orrs	r3, r2
    3bb6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3bb8:	4a02      	ldr	r2, [pc, #8]	; (3bc4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3bba:	9b03      	ldr	r3, [sp, #12]
    3bbc:	6193      	str	r3, [r2, #24]
}
    3bbe:	bf00      	nop
    3bc0:	b004      	add	sp, #16
    3bc2:	4770      	bx	lr
    3bc4:	40064000 	.word	0x40064000

00003bc8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3bc8:	b084      	sub	sp, #16
    3bca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3bcc:	4b09      	ldr	r3, [pc, #36]	; (3bf4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3bce:	699b      	ldr	r3, [r3, #24]
    3bd0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3bd2:	9b03      	ldr	r3, [sp, #12]
    3bd4:	f023 030f 	bic.w	r3, r3, #15
    3bd8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    3bda:	9b01      	ldr	r3, [sp, #4]
    3bdc:	685b      	ldr	r3, [r3, #4]
    3bde:	3b01      	subs	r3, #1
    3be0:	9a03      	ldr	r2, [sp, #12]
    3be2:	4313      	orrs	r3, r2
    3be4:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3be6:	4a03      	ldr	r2, [pc, #12]	; (3bf4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3be8:	9b03      	ldr	r3, [sp, #12]
    3bea:	6193      	str	r3, [r2, #24]
}
    3bec:	bf00      	nop
    3bee:	b004      	add	sp, #16
    3bf0:	4770      	bx	lr
    3bf2:	bf00      	nop
    3bf4:	40064000 	.word	0x40064000

00003bf8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3bf8:	b084      	sub	sp, #16
    3bfa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3bfc:	4b09      	ldr	r3, [pc, #36]	; (3c24 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3bfe:	69db      	ldr	r3, [r3, #28]
    3c00:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3c02:	9b03      	ldr	r3, [sp, #12]
    3c04:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3c08:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3c0a:	9b01      	ldr	r3, [sp, #4]
    3c0c:	685b      	ldr	r3, [r3, #4]
    3c0e:	3b01      	subs	r3, #1
    3c10:	041b      	lsls	r3, r3, #16
    3c12:	9a03      	ldr	r2, [sp, #12]
    3c14:	4313      	orrs	r3, r2
    3c16:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3c18:	4a02      	ldr	r2, [pc, #8]	; (3c24 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3c1a:	9b03      	ldr	r3, [sp, #12]
    3c1c:	61d3      	str	r3, [r2, #28]
}
    3c1e:	bf00      	nop
    3c20:	b004      	add	sp, #16
    3c22:	4770      	bx	lr
    3c24:	40064000 	.word	0x40064000

00003c28 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c28:	b084      	sub	sp, #16
    3c2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3c2c:	4b09      	ldr	r3, [pc, #36]	; (3c54 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3c2e:	69db      	ldr	r3, [r3, #28]
    3c30:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3c32:	9b03      	ldr	r3, [sp, #12]
    3c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3c38:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3c3a:	9b01      	ldr	r3, [sp, #4]
    3c3c:	685b      	ldr	r3, [r3, #4]
    3c3e:	3b01      	subs	r3, #1
    3c40:	011b      	lsls	r3, r3, #4
    3c42:	9a03      	ldr	r2, [sp, #12]
    3c44:	4313      	orrs	r3, r2
    3c46:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3c48:	4a02      	ldr	r2, [pc, #8]	; (3c54 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3c4a:	9b03      	ldr	r3, [sp, #12]
    3c4c:	61d3      	str	r3, [r2, #28]
}
    3c4e:	bf00      	nop
    3c50:	b004      	add	sp, #16
    3c52:	4770      	bx	lr
    3c54:	40064000 	.word	0x40064000

00003c58 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c58:	b084      	sub	sp, #16
    3c5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3c5c:	4b09      	ldr	r3, [pc, #36]	; (3c84 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3c5e:	69db      	ldr	r3, [r3, #28]
    3c60:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3c62:	9b03      	ldr	r3, [sp, #12]
    3c64:	f023 030f 	bic.w	r3, r3, #15
    3c68:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3c6a:	9b01      	ldr	r3, [sp, #4]
    3c6c:	685b      	ldr	r3, [r3, #4]
    3c6e:	3b01      	subs	r3, #1
    3c70:	9a03      	ldr	r2, [sp, #12]
    3c72:	4313      	orrs	r3, r2
    3c74:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3c76:	4a03      	ldr	r2, [pc, #12]	; (3c84 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3c78:	9b03      	ldr	r3, [sp, #12]
    3c7a:	61d3      	str	r3, [r2, #28]
}
    3c7c:	bf00      	nop
    3c7e:	b004      	add	sp, #16
    3c80:	4770      	bx	lr
    3c82:	bf00      	nop
    3c84:	40064000 	.word	0x40064000

00003c88 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3c88:	b084      	sub	sp, #16
    3c8a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3c8c:	4b0a      	ldr	r3, [pc, #40]	; (3cb8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3c8e:	685b      	ldr	r3, [r3, #4]
    3c90:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3c92:	9b03      	ldr	r3, [sp, #12]
    3c94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3c98:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3c9a:	9b01      	ldr	r3, [sp, #4]
    3c9c:	685b      	ldr	r3, [r3, #4]
    3c9e:	3b01      	subs	r3, #1
    3ca0:	021b      	lsls	r3, r3, #8
    3ca2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3ca6:	9a03      	ldr	r2, [sp, #12]
    3ca8:	4313      	orrs	r3, r2
    3caa:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3cac:	4a02      	ldr	r2, [pc, #8]	; (3cb8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3cae:	9b03      	ldr	r3, [sp, #12]
    3cb0:	6053      	str	r3, [r2, #4]
}
    3cb2:	bf00      	nop
    3cb4:	b004      	add	sp, #16
    3cb6:	4770      	bx	lr
    3cb8:	40048000 	.word	0x40048000

00003cbc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3cbc:	b084      	sub	sp, #16
    3cbe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3cc0:	4919      	ldr	r1, [pc, #100]	; (3d28 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3cc2:	9b01      	ldr	r3, [sp, #4]
    3cc4:	681a      	ldr	r2, [r3, #0]
    3cc6:	4819      	ldr	r0, [pc, #100]	; (3d2c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3cc8:	4613      	mov	r3, r2
    3cca:	00db      	lsls	r3, r3, #3
    3ccc:	4413      	add	r3, r2
    3cce:	4403      	add	r3, r0
    3cd0:	3305      	adds	r3, #5
    3cd2:	781b      	ldrb	r3, [r3, #0]
    3cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3cd8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3cda:	9b03      	ldr	r3, [sp, #12]
    3cdc:	f023 030f 	bic.w	r3, r3, #15
    3ce0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	685b      	ldr	r3, [r3, #4]
    3ce6:	3b01      	subs	r3, #1
    3ce8:	f003 0307 	and.w	r3, r3, #7
    3cec:	9a03      	ldr	r2, [sp, #12]
    3cee:	4313      	orrs	r3, r2
    3cf0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3cf2:	9b01      	ldr	r3, [sp, #4]
    3cf4:	7a1b      	ldrb	r3, [r3, #8]
    3cf6:	3b01      	subs	r3, #1
    3cf8:	00db      	lsls	r3, r3, #3
    3cfa:	f003 0308 	and.w	r3, r3, #8
    3cfe:	9a03      	ldr	r2, [sp, #12]
    3d00:	4313      	orrs	r3, r2
    3d02:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3d04:	4908      	ldr	r1, [pc, #32]	; (3d28 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3d06:	9b01      	ldr	r3, [sp, #4]
    3d08:	681a      	ldr	r2, [r3, #0]
    3d0a:	4808      	ldr	r0, [pc, #32]	; (3d2c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3d0c:	4613      	mov	r3, r2
    3d0e:	00db      	lsls	r3, r3, #3
    3d10:	4413      	add	r3, r2
    3d12:	4403      	add	r3, r0
    3d14:	3305      	adds	r3, #5
    3d16:	781b      	ldrb	r3, [r3, #0]
    3d18:	461a      	mov	r2, r3
    3d1a:	9b03      	ldr	r3, [sp, #12]
    3d1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3d20:	bf00      	nop
    3d22:	b004      	add	sp, #16
    3d24:	4770      	bx	lr
    3d26:	bf00      	nop
    3d28:	40065000 	.word	0x40065000
    3d2c:	000114cc 	.word	0x000114cc

00003d30 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d30:	b084      	sub	sp, #16
    3d32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3d34:	4b10      	ldr	r3, [pc, #64]	; (3d78 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3d38:	4a0f      	ldr	r2, [pc, #60]	; (3d78 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3d3e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3d40:	4b0d      	ldr	r3, [pc, #52]	; (3d78 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3d44:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3d46:	9b03      	ldr	r3, [sp, #12]
    3d48:	f023 030f 	bic.w	r3, r3, #15
    3d4c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3d4e:	9b01      	ldr	r3, [sp, #4]
    3d50:	685b      	ldr	r3, [r3, #4]
    3d52:	3b01      	subs	r3, #1
    3d54:	005b      	lsls	r3, r3, #1
    3d56:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3d5a:	9b01      	ldr	r3, [sp, #4]
    3d5c:	7a1b      	ldrb	r3, [r3, #8]
    3d5e:	3b01      	subs	r3, #1
    3d60:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3d64:	4313      	orrs	r3, r2
    3d66:	9a03      	ldr	r2, [sp, #12]
    3d68:	4313      	orrs	r3, r2
    3d6a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3d6c:	4a02      	ldr	r2, [pc, #8]	; (3d78 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d6e:	9b03      	ldr	r3, [sp, #12]
    3d70:	6693      	str	r3, [r2, #104]	; 0x68
}
    3d72:	bf00      	nop
    3d74:	b004      	add	sp, #16
    3d76:	4770      	bx	lr
    3d78:	40048000 	.word	0x40048000

00003d7c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3d7c:	b082      	sub	sp, #8
    3d7e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d80:	bf00      	nop
    3d82:	b002      	add	sp, #8
    3d84:	4770      	bx	lr
	...

00003d88 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3d88:	b082      	sub	sp, #8
    3d8a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d8c:	bf00      	nop
    3d8e:	b002      	add	sp, #8
    3d90:	4770      	bx	lr

00003d92 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3d92:	b082      	sub	sp, #8
    3d94:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3d96:	bf00      	nop
    3d98:	b002      	add	sp, #8
    3d9a:	4770      	bx	lr

00003d9c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d9c:	b500      	push	{lr}
    3d9e:	b083      	sub	sp, #12
    3da0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3da2:	9b01      	ldr	r3, [sp, #4]
    3da4:	2b00      	cmp	r3, #0
    3da6:	d002      	beq.n	3dae <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3da8:	9801      	ldr	r0, [sp, #4]
    3daa:	f000 f86a 	bl	3e82 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dae:	bf00      	nop
    3db0:	b003      	add	sp, #12
    3db2:	f85d fb04 	ldr.w	pc, [sp], #4

00003db6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3db6:	b500      	push	{lr}
    3db8:	b083      	sub	sp, #12
    3dba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dbc:	9b01      	ldr	r3, [sp, #4]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d002      	beq.n	3dc8 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3dc2:	9801      	ldr	r0, [sp, #4]
    3dc4:	f000 f884 	bl	3ed0 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3dc8:	bf00      	nop
    3dca:	b003      	add	sp, #12
    3dcc:	f85d fb04 	ldr.w	pc, [sp], #4

00003dd0 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3dd0:	b500      	push	{lr}
    3dd2:	b089      	sub	sp, #36	; 0x24
    3dd4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3dd6:	2300      	movs	r3, #0
    3dd8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3ddc:	9b01      	ldr	r3, [sp, #4]
    3dde:	2b00      	cmp	r3, #0
    3de0:	d031      	beq.n	3e46 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3de2:	4b1b      	ldr	r3, [pc, #108]	; (3e50 <Clock_Ip_CompleteSOSC+0x80>)
    3de4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3de8:	f003 0301 	and.w	r3, r3, #1
    3dec:	2b00      	cmp	r3, #0
    3dee:	d02a      	beq.n	3e46 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3df0:	aa03      	add	r2, sp, #12
    3df2:	a904      	add	r1, sp, #16
    3df4:	a805      	add	r0, sp, #20
    3df6:	f24c 3350 	movw	r3, #50000	; 0xc350
    3dfa:	f7ff fd1d 	bl	3838 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3dfe:	4b14      	ldr	r3, [pc, #80]	; (3e50 <Clock_Ip_CompleteSOSC+0x80>)
    3e00:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e04:	0e1b      	lsrs	r3, r3, #24
    3e06:	f003 0301 	and.w	r3, r3, #1
    3e0a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e0c:	9a03      	ldr	r2, [sp, #12]
    3e0e:	a904      	add	r1, sp, #16
    3e10:	ab05      	add	r3, sp, #20
    3e12:	4618      	mov	r0, r3
    3e14:	f7ff fd2a 	bl	386c <Clock_Ip_TimeoutExpired>
    3e18:	4603      	mov	r3, r0
    3e1a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3e1e:	9b06      	ldr	r3, [sp, #24]
    3e20:	2b00      	cmp	r3, #0
    3e22:	d106      	bne.n	3e32 <Clock_Ip_CompleteSOSC+0x62>
    3e24:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e28:	f083 0301 	eor.w	r3, r3, #1
    3e2c:	b2db      	uxtb	r3, r3
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d1e5      	bne.n	3dfe <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3e32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d005      	beq.n	3e46 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e3a:	9b01      	ldr	r3, [sp, #4]
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	4619      	mov	r1, r3
    3e40:	2001      	movs	r0, #1
    3e42:	f7ff fce9 	bl	3818 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3e46:	bf00      	nop
    3e48:	b009      	add	sp, #36	; 0x24
    3e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    3e4e:	bf00      	nop
    3e50:	40064000 	.word	0x40064000

00003e54 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3e54:	b500      	push	{lr}
    3e56:	b083      	sub	sp, #12
    3e58:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3e5a:	9801      	ldr	r0, [sp, #4]
    3e5c:	f000 f8c0 	bl	3fe0 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e60:	bf00      	nop
    3e62:	b003      	add	sp, #12
    3e64:	f85d fb04 	ldr.w	pc, [sp], #4

00003e68 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3e68:	b500      	push	{lr}
    3e6a:	b083      	sub	sp, #12
    3e6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e6e:	9b01      	ldr	r3, [sp, #4]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d002      	beq.n	3e7a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3e74:	9801      	ldr	r0, [sp, #4]
    3e76:	f000 f8c3 	bl	4000 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e7a:	bf00      	nop
    3e7c:	b003      	add	sp, #12
    3e7e:	f85d fb04 	ldr.w	pc, [sp], #4

00003e82 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3e82:	b082      	sub	sp, #8
    3e84:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3e86:	4b11      	ldr	r3, [pc, #68]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e8c:	4a0f      	ldr	r2, [pc, #60]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e92:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3e96:	4b0d      	ldr	r3, [pc, #52]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e98:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e9c:	4a0b      	ldr	r2, [pc, #44]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3ea2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3ea6:	4b09      	ldr	r3, [pc, #36]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3ea8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3eac:	4a07      	ldr	r2, [pc, #28]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3eae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3eb2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3eb6:	4b05      	ldr	r3, [pc, #20]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3eb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3ebc:	4a03      	ldr	r2, [pc, #12]	; (3ecc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3ebe:	f023 0301 	bic.w	r3, r3, #1
    3ec2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3ec6:	bf00      	nop
    3ec8:	b002      	add	sp, #8
    3eca:	4770      	bx	lr
    3ecc:	40064000 	.word	0x40064000

00003ed0 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3ed0:	b082      	sub	sp, #8
    3ed2:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3ed4:	9b01      	ldr	r3, [sp, #4]
    3ed6:	891b      	ldrh	r3, [r3, #8]
    3ed8:	2b01      	cmp	r3, #1
    3eda:	d174      	bne.n	3fc6 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3edc:	9b01      	ldr	r3, [sp, #4]
    3ede:	7bdb      	ldrb	r3, [r3, #15]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d002      	beq.n	3eea <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3ee4:	2b01      	cmp	r3, #1
    3ee6:	d009      	beq.n	3efc <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3ee8:	e011      	b.n	3f0e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3eea:	4b39      	ldr	r3, [pc, #228]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ef0:	4a37      	ldr	r2, [pc, #220]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ef2:	f023 0308 	bic.w	r3, r3, #8
    3ef6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3efa:	e008      	b.n	3f0e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3efc:	4b34      	ldr	r3, [pc, #208]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3efe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f02:	4a33      	ldr	r2, [pc, #204]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f04:	f043 0308 	orr.w	r3, r3, #8
    3f08:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3f0c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3f0e:	4b30      	ldr	r3, [pc, #192]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f14:	4a2e      	ldr	r2, [pc, #184]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3f1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3f1e:	9b01      	ldr	r3, [sp, #4]
    3f20:	685b      	ldr	r3, [r3, #4]
    3f22:	4a2c      	ldr	r2, [pc, #176]	; (3fd4 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3f24:	4293      	cmp	r3, r2
    3f26:	d90d      	bls.n	3f44 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3f28:	9b01      	ldr	r3, [sp, #4]
    3f2a:	685b      	ldr	r3, [r3, #4]
    3f2c:	4a2a      	ldr	r2, [pc, #168]	; (3fd8 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3f2e:	4293      	cmp	r3, r2
    3f30:	d208      	bcs.n	3f44 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3f32:	4b27      	ldr	r3, [pc, #156]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f38:	4a25      	ldr	r2, [pc, #148]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f3a:	f043 0320 	orr.w	r3, r3, #32
    3f3e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3f42:	e007      	b.n	3f54 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3f44:	4b22      	ldr	r3, [pc, #136]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f4a:	4a21      	ldr	r2, [pc, #132]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3f50:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3f54:	9b01      	ldr	r3, [sp, #4]
    3f56:	7b1b      	ldrb	r3, [r3, #12]
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d108      	bne.n	3f6e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3f5c:	4b1c      	ldr	r3, [pc, #112]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f62:	4a1b      	ldr	r2, [pc, #108]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f64:	f043 0304 	orr.w	r3, r3, #4
    3f68:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3f6c:	e007      	b.n	3f7e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3f6e:	4b18      	ldr	r3, [pc, #96]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f74:	4a16      	ldr	r2, [pc, #88]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f76:	f023 0304 	bic.w	r3, r3, #4
    3f7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3f7e:	9b01      	ldr	r3, [sp, #4]
    3f80:	7c1b      	ldrb	r3, [r3, #16]
    3f82:	2b02      	cmp	r3, #2
    3f84:	d011      	beq.n	3faa <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3f86:	2b02      	cmp	r3, #2
    3f88:	dc14      	bgt.n	3fb4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d002      	beq.n	3f94 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3f8e:	2b01      	cmp	r3, #1
    3f90:	d005      	beq.n	3f9e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3f92:	e00f      	b.n	3fb4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f94:	4b0e      	ldr	r3, [pc, #56]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f96:	2201      	movs	r2, #1
    3f98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3f9c:	e014      	b.n	3fc8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f9e:	4b0c      	ldr	r3, [pc, #48]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3fa0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3fa4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3fa8:	e00e      	b.n	3fc8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3faa:	4b09      	ldr	r3, [pc, #36]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3fac:	4a0b      	ldr	r2, [pc, #44]	; (3fdc <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3fae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3fb2:	e009      	b.n	3fc8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3fb4:	4b06      	ldr	r3, [pc, #24]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3fb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fba:	4a05      	ldr	r2, [pc, #20]	; (3fd0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3fbc:	f043 0301 	orr.w	r3, r3, #1
    3fc0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3fc4:	e000      	b.n	3fc8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3fc6:	bf00      	nop
}
    3fc8:	bf00      	nop
    3fca:	b002      	add	sp, #8
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop
    3fd0:	40064000 	.word	0x40064000
    3fd4:	003d08ff 	.word	0x003d08ff
    3fd8:	007a1200 	.word	0x007a1200
    3fdc:	00030001 	.word	0x00030001

00003fe0 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3fe0:	b082      	sub	sp, #8
    3fe2:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3fe4:	4b05      	ldr	r3, [pc, #20]	; (3ffc <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3fe6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fea:	4a04      	ldr	r2, [pc, #16]	; (3ffc <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3fec:	f023 0301 	bic.w	r3, r3, #1
    3ff0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3ff4:	bf00      	nop
    3ff6:	b002      	add	sp, #8
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop
    3ffc:	40064000 	.word	0x40064000

00004000 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4000:	b082      	sub	sp, #8
    4002:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4004:	9b01      	ldr	r3, [sp, #4]
    4006:	891b      	ldrh	r3, [r3, #8]
    4008:	2b01      	cmp	r3, #1
    400a:	d107      	bne.n	401c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    400c:	4b05      	ldr	r3, [pc, #20]	; (4024 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    400e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4012:	4a04      	ldr	r2, [pc, #16]	; (4024 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    4014:	f043 0301 	orr.w	r3, r3, #1
    4018:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    401c:	bf00      	nop
    401e:	b002      	add	sp, #8
    4020:	4770      	bx	lr
    4022:	bf00      	nop
    4024:	40064000 	.word	0x40064000

00004028 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    4028:	b082      	sub	sp, #8
    402a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    402c:	bf00      	nop
    402e:	b002      	add	sp, #8
    4030:	4770      	bx	lr

00004032 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    4032:	b082      	sub	sp, #8
    4034:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    4036:	2300      	movs	r3, #0
}
    4038:	4618      	mov	r0, r3
    403a:	b002      	add	sp, #8
    403c:	4770      	bx	lr

0000403e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    403e:	b082      	sub	sp, #8
    4040:	9001      	str	r0, [sp, #4]
    4042:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    4044:	bf00      	nop
    4046:	b002      	add	sp, #8
    4048:	4770      	bx	lr
	...

0000404c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    404c:	b082      	sub	sp, #8
    404e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4050:	bf00      	nop
    4052:	b002      	add	sp, #8
    4054:	4770      	bx	lr

00004056 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    4056:	b082      	sub	sp, #8
    4058:	9001      	str	r0, [sp, #4]
    405a:	460b      	mov	r3, r1
    405c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    4060:	bf00      	nop
    4062:	b002      	add	sp, #8
    4064:	4770      	bx	lr

00004066 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    4066:	b500      	push	{lr}
    4068:	b083      	sub	sp, #12
    406a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    406c:	9b01      	ldr	r3, [sp, #4]
    406e:	2b00      	cmp	r3, #0
    4070:	d002      	beq.n	4078 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    4072:	9801      	ldr	r0, [sp, #4]
    4074:	f000 f8e7 	bl	4246 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4078:	bf00      	nop
    407a:	b003      	add	sp, #12
    407c:	f85d fb04 	ldr.w	pc, [sp], #4

00004080 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4080:	b500      	push	{lr}
    4082:	b085      	sub	sp, #20
    4084:	9001      	str	r0, [sp, #4]
    4086:	460b      	mov	r3, r1
    4088:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    408c:	9b01      	ldr	r3, [sp, #4]
    408e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4090:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4094:	2b00      	cmp	r3, #0
    4096:	d003      	beq.n	40a0 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    4098:	2300      	movs	r3, #0
    409a:	f8ad 300c 	strh.w	r3, [sp, #12]
    409e:	e002      	b.n	40a6 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    40a0:	2301      	movs	r3, #1
    40a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    40a6:	ab02      	add	r3, sp, #8
    40a8:	4618      	mov	r0, r3
    40aa:	f7ff ffdc 	bl	4066 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    40ae:	bf00      	nop
    40b0:	b005      	add	sp, #20
    40b2:	f85d fb04 	ldr.w	pc, [sp], #4

000040b6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    40b6:	b500      	push	{lr}
    40b8:	b083      	sub	sp, #12
    40ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40bc:	9b01      	ldr	r3, [sp, #4]
    40be:	2b00      	cmp	r3, #0
    40c0:	d002      	beq.n	40c8 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    40c2:	9801      	ldr	r0, [sp, #4]
    40c4:	f000 f8d6 	bl	4274 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40c8:	bf00      	nop
    40ca:	b003      	add	sp, #12
    40cc:	f85d fb04 	ldr.w	pc, [sp], #4

000040d0 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    40d0:	b500      	push	{lr}
    40d2:	b085      	sub	sp, #20
    40d4:	9001      	str	r0, [sp, #4]
    40d6:	460b      	mov	r3, r1
    40d8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    40dc:	9b01      	ldr	r3, [sp, #4]
    40de:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    40e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    40e4:	2b00      	cmp	r3, #0
    40e6:	d003      	beq.n	40f0 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    40e8:	2300      	movs	r3, #0
    40ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    40ee:	e002      	b.n	40f6 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    40f0:	2301      	movs	r3, #1
    40f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    40f6:	ab02      	add	r3, sp, #8
    40f8:	4618      	mov	r0, r3
    40fa:	f7ff ffdc 	bl	40b6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    40fe:	bf00      	nop
    4100:	b005      	add	sp, #20
    4102:	f85d fb04 	ldr.w	pc, [sp], #4

00004106 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    4106:	b500      	push	{lr}
    4108:	b083      	sub	sp, #12
    410a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    410c:	9b01      	ldr	r3, [sp, #4]
    410e:	2b00      	cmp	r3, #0
    4110:	d002      	beq.n	4118 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    4112:	9801      	ldr	r0, [sp, #4]
    4114:	f000 f8c6 	bl	42a4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4118:	bf00      	nop
    411a:	b003      	add	sp, #12
    411c:	f85d fb04 	ldr.w	pc, [sp], #4

00004120 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4120:	b500      	push	{lr}
    4122:	b085      	sub	sp, #20
    4124:	9001      	str	r0, [sp, #4]
    4126:	460b      	mov	r3, r1
    4128:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    412c:	9b01      	ldr	r3, [sp, #4]
    412e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4130:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4134:	2b00      	cmp	r3, #0
    4136:	d003      	beq.n	4140 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    4138:	2300      	movs	r3, #0
    413a:	f8ad 300c 	strh.w	r3, [sp, #12]
    413e:	e002      	b.n	4146 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4140:	2301      	movs	r3, #1
    4142:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    4146:	ab02      	add	r3, sp, #8
    4148:	4618      	mov	r0, r3
    414a:	f7ff ffdc 	bl	4106 <Clock_Ip_ClockSetSimClkoutEnable>
}
    414e:	bf00      	nop
    4150:	b005      	add	sp, #20
    4152:	f85d fb04 	ldr.w	pc, [sp], #4

00004156 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    4156:	b500      	push	{lr}
    4158:	b083      	sub	sp, #12
    415a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    415c:	9b01      	ldr	r3, [sp, #4]
    415e:	2b00      	cmp	r3, #0
    4160:	d002      	beq.n	4168 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    4162:	9801      	ldr	r0, [sp, #4]
    4164:	f000 f8b6 	bl	42d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4168:	bf00      	nop
    416a:	b003      	add	sp, #12
    416c:	f85d fb04 	ldr.w	pc, [sp], #4

00004170 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4170:	b500      	push	{lr}
    4172:	b085      	sub	sp, #20
    4174:	9001      	str	r0, [sp, #4]
    4176:	460b      	mov	r3, r1
    4178:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    417c:	9b01      	ldr	r3, [sp, #4]
    417e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4180:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4184:	2b00      	cmp	r3, #0
    4186:	d003      	beq.n	4190 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    4188:	2300      	movs	r3, #0
    418a:	f8ad 300c 	strh.w	r3, [sp, #12]
    418e:	e002      	b.n	4196 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4190:	2301      	movs	r3, #1
    4192:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    4196:	ab02      	add	r3, sp, #8
    4198:	4618      	mov	r0, r3
    419a:	f7ff ffdc 	bl	4156 <Clock_Ip_ClockSetPccCgcEnable>
}
    419e:	bf00      	nop
    41a0:	b005      	add	sp, #20
    41a2:	f85d fb04 	ldr.w	pc, [sp], #4

000041a6 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    41a6:	b500      	push	{lr}
    41a8:	b083      	sub	sp, #12
    41aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ac:	9b01      	ldr	r3, [sp, #4]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d002      	beq.n	41b8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    41b2:	9801      	ldr	r0, [sp, #4]
    41b4:	f000 f8bc 	bl	4330 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b8:	bf00      	nop
    41ba:	b003      	add	sp, #12
    41bc:	f85d fb04 	ldr.w	pc, [sp], #4

000041c0 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    41c0:	b500      	push	{lr}
    41c2:	b085      	sub	sp, #20
    41c4:	9001      	str	r0, [sp, #4]
    41c6:	460b      	mov	r3, r1
    41c8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    41cc:	9b01      	ldr	r3, [sp, #4]
    41ce:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    41d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    41d4:	2b00      	cmp	r3, #0
    41d6:	d003      	beq.n	41e0 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    41d8:	2300      	movs	r3, #0
    41da:	f8ad 300c 	strh.w	r3, [sp, #12]
    41de:	e002      	b.n	41e6 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    41e0:	2301      	movs	r3, #1
    41e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    41e6:	ab02      	add	r3, sp, #8
    41e8:	4618      	mov	r0, r3
    41ea:	f7ff ffdc 	bl	41a6 <Clock_Ip_ClockSetSimGate>
}
    41ee:	bf00      	nop
    41f0:	b005      	add	sp, #20
    41f2:	f85d fb04 	ldr.w	pc, [sp], #4

000041f6 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    41f6:	b500      	push	{lr}
    41f8:	b083      	sub	sp, #12
    41fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41fc:	9b01      	ldr	r3, [sp, #4]
    41fe:	2b00      	cmp	r3, #0
    4200:	d002      	beq.n	4208 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    4202:	9801      	ldr	r0, [sp, #4]
    4204:	f000 f8c0 	bl	4388 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4208:	bf00      	nop
    420a:	b003      	add	sp, #12
    420c:	f85d fb04 	ldr.w	pc, [sp], #4

00004210 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4210:	b500      	push	{lr}
    4212:	b085      	sub	sp, #20
    4214:	9001      	str	r0, [sp, #4]
    4216:	460b      	mov	r3, r1
    4218:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    421c:	9b01      	ldr	r3, [sp, #4]
    421e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4220:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4224:	2b00      	cmp	r3, #0
    4226:	d003      	beq.n	4230 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    4228:	2300      	movs	r3, #0
    422a:	f8ad 300c 	strh.w	r3, [sp, #12]
    422e:	e002      	b.n	4236 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4230:	2301      	movs	r3, #1
    4232:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    4236:	ab02      	add	r3, sp, #8
    4238:	4618      	mov	r0, r3
    423a:	f7ff ffdc 	bl	41f6 <Clock_Ip_ClockSetSimTraceEnable>
}
    423e:	bf00      	nop
    4240:	b005      	add	sp, #20
    4242:	f85d fb04 	ldr.w	pc, [sp], #4

00004246 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4246:	b084      	sub	sp, #16
    4248:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    424a:	4b09      	ldr	r3, [pc, #36]	; (4270 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    424c:	691b      	ldr	r3, [r3, #16]
    424e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    4250:	9b03      	ldr	r3, [sp, #12]
    4252:	f023 0301 	bic.w	r3, r3, #1
    4256:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4258:	9b01      	ldr	r3, [sp, #4]
    425a:	889b      	ldrh	r3, [r3, #4]
    425c:	461a      	mov	r2, r3
    425e:	9b03      	ldr	r3, [sp, #12]
    4260:	4313      	orrs	r3, r2
    4262:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4264:	4a02      	ldr	r2, [pc, #8]	; (4270 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    4266:	9b03      	ldr	r3, [sp, #12]
    4268:	6113      	str	r3, [r2, #16]
}
    426a:	bf00      	nop
    426c:	b004      	add	sp, #16
    426e:	4770      	bx	lr
    4270:	40048000 	.word	0x40048000

00004274 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4274:	b084      	sub	sp, #16
    4276:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    4278:	4b09      	ldr	r3, [pc, #36]	; (42a0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    427a:	691b      	ldr	r3, [r3, #16]
    427c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    427e:	9b03      	ldr	r3, [sp, #12]
    4280:	f023 0302 	bic.w	r3, r3, #2
    4284:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4286:	9b01      	ldr	r3, [sp, #4]
    4288:	889b      	ldrh	r3, [r3, #4]
    428a:	005b      	lsls	r3, r3, #1
    428c:	9a03      	ldr	r2, [sp, #12]
    428e:	4313      	orrs	r3, r2
    4290:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4292:	4a03      	ldr	r2, [pc, #12]	; (42a0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4294:	9b03      	ldr	r3, [sp, #12]
    4296:	6113      	str	r3, [r2, #16]
}
    4298:	bf00      	nop
    429a:	b004      	add	sp, #16
    429c:	4770      	bx	lr
    429e:	bf00      	nop
    42a0:	40048000 	.word	0x40048000

000042a4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    42a4:	b084      	sub	sp, #16
    42a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    42a8:	4b09      	ldr	r3, [pc, #36]	; (42d0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    42aa:	685b      	ldr	r3, [r3, #4]
    42ac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    42ae:	9b03      	ldr	r3, [sp, #12]
    42b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    42b4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    42b6:	9b01      	ldr	r3, [sp, #4]
    42b8:	889b      	ldrh	r3, [r3, #4]
    42ba:	02db      	lsls	r3, r3, #11
    42bc:	9a03      	ldr	r2, [sp, #12]
    42be:	4313      	orrs	r3, r2
    42c0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    42c2:	4a03      	ldr	r2, [pc, #12]	; (42d0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    42c4:	9b03      	ldr	r3, [sp, #12]
    42c6:	6053      	str	r3, [r2, #4]
}
    42c8:	bf00      	nop
    42ca:	b004      	add	sp, #16
    42cc:	4770      	bx	lr
    42ce:	bf00      	nop
    42d0:	40048000 	.word	0x40048000

000042d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    42d4:	b084      	sub	sp, #16
    42d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    42d8:	4913      	ldr	r1, [pc, #76]	; (4328 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    42da:	9b01      	ldr	r3, [sp, #4]
    42dc:	681a      	ldr	r2, [r3, #0]
    42de:	4813      	ldr	r0, [pc, #76]	; (432c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    42e0:	4613      	mov	r3, r2
    42e2:	00db      	lsls	r3, r3, #3
    42e4:	4413      	add	r3, r2
    42e6:	4403      	add	r3, r0
    42e8:	3306      	adds	r3, #6
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    42f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    42f2:	9b03      	ldr	r3, [sp, #12]
    42f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    42f8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    42fa:	9b01      	ldr	r3, [sp, #4]
    42fc:	889b      	ldrh	r3, [r3, #4]
    42fe:	079b      	lsls	r3, r3, #30
    4300:	9a03      	ldr	r2, [sp, #12]
    4302:	4313      	orrs	r3, r2
    4304:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    4306:	4908      	ldr	r1, [pc, #32]	; (4328 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	681a      	ldr	r2, [r3, #0]
    430c:	4807      	ldr	r0, [pc, #28]	; (432c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    430e:	4613      	mov	r3, r2
    4310:	00db      	lsls	r3, r3, #3
    4312:	4413      	add	r3, r2
    4314:	4403      	add	r3, r0
    4316:	3306      	adds	r3, #6
    4318:	781b      	ldrb	r3, [r3, #0]
    431a:	461a      	mov	r2, r3
    431c:	9b03      	ldr	r3, [sp, #12]
    431e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    4322:	bf00      	nop
    4324:	b004      	add	sp, #16
    4326:	4770      	bx	lr
    4328:	40065000 	.word	0x40065000
    432c:	000114cc 	.word	0x000114cc

00004330 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4330:	b086      	sub	sp, #24
    4332:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    4334:	9b01      	ldr	r3, [sp, #4]
    4336:	889b      	ldrh	r3, [r3, #4]
    4338:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    433a:	9b01      	ldr	r3, [sp, #4]
    433c:	681a      	ldr	r2, [r3, #0]
    433e:	4910      	ldr	r1, [pc, #64]	; (4380 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    4340:	4613      	mov	r3, r2
    4342:	00db      	lsls	r3, r3, #3
    4344:	4413      	add	r3, r2
    4346:	440b      	add	r3, r1
    4348:	3306      	adds	r3, #6
    434a:	781b      	ldrb	r3, [r3, #0]
    434c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    434e:	4b0d      	ldr	r3, [pc, #52]	; (4384 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4352:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    4354:	2201      	movs	r2, #1
    4356:	9b04      	ldr	r3, [sp, #16]
    4358:	fa02 f303 	lsl.w	r3, r2, r3
    435c:	43db      	mvns	r3, r3
    435e:	9a03      	ldr	r2, [sp, #12]
    4360:	4013      	ands	r3, r2
    4362:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    4364:	9a05      	ldr	r2, [sp, #20]
    4366:	9b04      	ldr	r3, [sp, #16]
    4368:	fa02 f303 	lsl.w	r3, r2, r3
    436c:	9a03      	ldr	r2, [sp, #12]
    436e:	4313      	orrs	r3, r2
    4370:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    4372:	4a04      	ldr	r2, [pc, #16]	; (4384 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4374:	9b03      	ldr	r3, [sp, #12]
    4376:	6413      	str	r3, [r2, #64]	; 0x40
}
    4378:	bf00      	nop
    437a:	b006      	add	sp, #24
    437c:	4770      	bx	lr
    437e:	bf00      	nop
    4380:	000114cc 	.word	0x000114cc
    4384:	40048000 	.word	0x40048000

00004388 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4388:	b084      	sub	sp, #16
    438a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    438c:	4b0a      	ldr	r3, [pc, #40]	; (43b8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    438e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4390:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    4392:	9b01      	ldr	r3, [sp, #4]
    4394:	889b      	ldrh	r3, [r3, #4]
    4396:	2b01      	cmp	r3, #1
    4398:	d104      	bne.n	43a4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    439a:	9b03      	ldr	r3, [sp, #12]
    439c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    43a0:	9303      	str	r3, [sp, #12]
    43a2:	e003      	b.n	43ac <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    43a4:	9b03      	ldr	r3, [sp, #12]
    43a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    43aa:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    43ac:	4a02      	ldr	r2, [pc, #8]	; (43b8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    43ae:	9b03      	ldr	r3, [sp, #12]
    43b0:	6693      	str	r3, [r2, #104]	; 0x68
}
    43b2:	bf00      	nop
    43b4:	b004      	add	sp, #16
    43b6:	4770      	bx	lr
    43b8:	40048000 	.word	0x40048000

000043bc <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    43bc:	b082      	sub	sp, #8
    43be:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    43c0:	bf00      	nop
    43c2:	b002      	add	sp, #8
    43c4:	4770      	bx	lr

000043c6 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    43c6:	b082      	sub	sp, #8
    43c8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    43ca:	bf00      	nop
    43cc:	b002      	add	sp, #8
    43ce:	4770      	bx	lr

000043d0 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    43d0:	b500      	push	{lr}
    43d2:	b083      	sub	sp, #12
    43d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43d6:	9b01      	ldr	r3, [sp, #4]
    43d8:	2b00      	cmp	r3, #0
    43da:	d002      	beq.n	43e2 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    43dc:	9801      	ldr	r0, [sp, #4]
    43de:	f000 f8d1 	bl	4584 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43e2:	bf00      	nop
    43e4:	b003      	add	sp, #12
    43e6:	f85d fb04 	ldr.w	pc, [sp], #4

000043ea <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    43ea:	b500      	push	{lr}
    43ec:	b083      	sub	sp, #12
    43ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43f0:	9b01      	ldr	r3, [sp, #4]
    43f2:	2b00      	cmp	r3, #0
    43f4:	d002      	beq.n	43fc <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    43f6:	9801      	ldr	r0, [sp, #4]
    43f8:	f000 f950 	bl	469c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43fc:	bf00      	nop
    43fe:	b003      	add	sp, #12
    4400:	f85d fb04 	ldr.w	pc, [sp], #4

00004404 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    4404:	b500      	push	{lr}
    4406:	b083      	sub	sp, #12
    4408:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    440a:	9801      	ldr	r0, [sp, #4]
    440c:	f000 f98e 	bl	472c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4410:	bf00      	nop
    4412:	b003      	add	sp, #12
    4414:	f85d fb04 	ldr.w	pc, [sp], #4

00004418 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    4418:	b500      	push	{lr}
    441a:	b083      	sub	sp, #12
    441c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    441e:	9b01      	ldr	r3, [sp, #4]
    4420:	2b00      	cmp	r3, #0
    4422:	d002      	beq.n	442a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    4424:	9801      	ldr	r0, [sp, #4]
    4426:	f000 f999 	bl	475c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    442a:	bf00      	nop
    442c:	b003      	add	sp, #12
    442e:	f85d fb04 	ldr.w	pc, [sp], #4

00004432 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    4432:	b500      	push	{lr}
    4434:	b083      	sub	sp, #12
    4436:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4438:	9b01      	ldr	r3, [sp, #4]
    443a:	2b00      	cmp	r3, #0
    443c:	d002      	beq.n	4444 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    443e:	9801      	ldr	r0, [sp, #4]
    4440:	f000 f9b0 	bl	47a4 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4444:	bf00      	nop
    4446:	b003      	add	sp, #12
    4448:	f85d fb04 	ldr.w	pc, [sp], #4

0000444c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    444c:	b500      	push	{lr}
    444e:	b083      	sub	sp, #12
    4450:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    4452:	9801      	ldr	r0, [sp, #4]
    4454:	f000 f9ba 	bl	47cc <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4458:	bf00      	nop
    445a:	b003      	add	sp, #12
    445c:	f85d fb04 	ldr.w	pc, [sp], #4

00004460 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4460:	b500      	push	{lr}
    4462:	b083      	sub	sp, #12
    4464:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4466:	9b01      	ldr	r3, [sp, #4]
    4468:	2b00      	cmp	r3, #0
    446a:	d002      	beq.n	4472 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    446c:	9801      	ldr	r0, [sp, #4]
    446e:	f000 f9bd 	bl	47ec <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4472:	bf00      	nop
    4474:	b003      	add	sp, #12
    4476:	f85d fb04 	ldr.w	pc, [sp], #4

0000447a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    447a:	b500      	push	{lr}
    447c:	b083      	sub	sp, #12
    447e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4480:	9b01      	ldr	r3, [sp, #4]
    4482:	2b00      	cmp	r3, #0
    4484:	d002      	beq.n	448c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    4486:	9801      	ldr	r0, [sp, #4]
    4488:	f000 f9d4 	bl	4834 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    448c:	bf00      	nop
    448e:	b003      	add	sp, #12
    4490:	f85d fb04 	ldr.w	pc, [sp], #4

00004494 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    4494:	b500      	push	{lr}
    4496:	b083      	sub	sp, #12
    4498:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    449a:	9801      	ldr	r0, [sp, #4]
    449c:	f000 f9de 	bl	485c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    44a0:	bf00      	nop
    44a2:	b003      	add	sp, #12
    44a4:	f85d fb04 	ldr.w	pc, [sp], #4

000044a8 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    44a8:	b500      	push	{lr}
    44aa:	b089      	sub	sp, #36	; 0x24
    44ac:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    44ae:	2300      	movs	r3, #0
    44b0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    44b4:	4b20      	ldr	r3, [pc, #128]	; (4538 <SetInputSouceSytemClock+0x90>)
    44b6:	695b      	ldr	r3, [r3, #20]
    44b8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    44ba:	9b06      	ldr	r3, [sp, #24]
    44bc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44c0:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    44c2:	9b01      	ldr	r3, [sp, #4]
    44c4:	061b      	lsls	r3, r3, #24
    44c6:	9a06      	ldr	r2, [sp, #24]
    44c8:	4313      	orrs	r3, r2
    44ca:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    44cc:	4a1a      	ldr	r2, [pc, #104]	; (4538 <SetInputSouceSytemClock+0x90>)
    44ce:	9b06      	ldr	r3, [sp, #24]
    44d0:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    44d2:	aa02      	add	r2, sp, #8
    44d4:	a903      	add	r1, sp, #12
    44d6:	a804      	add	r0, sp, #16
    44d8:	f24c 3350 	movw	r3, #50000	; 0xc350
    44dc:	f7ff f9ac 	bl	3838 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    44e0:	4b15      	ldr	r3, [pc, #84]	; (4538 <SetInputSouceSytemClock+0x90>)
    44e2:	691b      	ldr	r3, [r3, #16]
    44e4:	0e1b      	lsrs	r3, r3, #24
    44e6:	f003 030f 	and.w	r3, r3, #15
    44ea:	9a01      	ldr	r2, [sp, #4]
    44ec:	429a      	cmp	r2, r3
    44ee:	bf0c      	ite	eq
    44f0:	2301      	moveq	r3, #1
    44f2:	2300      	movne	r3, #0
    44f4:	b2db      	uxtb	r3, r3
    44f6:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    44f8:	9a02      	ldr	r2, [sp, #8]
    44fa:	a903      	add	r1, sp, #12
    44fc:	ab04      	add	r3, sp, #16
    44fe:	4618      	mov	r0, r3
    4500:	f7ff f9b4 	bl	386c <Clock_Ip_TimeoutExpired>
    4504:	4603      	mov	r3, r0
    4506:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    450a:	9b05      	ldr	r3, [sp, #20]
    450c:	2b00      	cmp	r3, #0
    450e:	d106      	bne.n	451e <SetInputSouceSytemClock+0x76>
    4510:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4514:	f083 0301 	eor.w	r3, r3, #1
    4518:	b2db      	uxtb	r3, r3
    451a:	2b00      	cmp	r3, #0
    451c:	d1e0      	bne.n	44e0 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    451e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4522:	2b00      	cmp	r3, #0
    4524:	d003      	beq.n	452e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4526:	2105      	movs	r1, #5
    4528:	2001      	movs	r0, #1
    452a:	f7ff f975 	bl	3818 <Clock_Ip_ReportClockErrors>
    }
}
    452e:	bf00      	nop
    4530:	b009      	add	sp, #36	; 0x24
    4532:	f85d fb04 	ldr.w	pc, [sp], #4
    4536:	bf00      	nop
    4538:	40064000 	.word	0x40064000

0000453c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    453c:	b500      	push	{lr}
    453e:	b083      	sub	sp, #12
    4540:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4542:	9b01      	ldr	r3, [sp, #4]
    4544:	2b00      	cmp	r3, #0
    4546:	d002      	beq.n	454e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    4548:	9801      	ldr	r0, [sp, #4]
    454a:	f000 f997 	bl	487c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    454e:	bf00      	nop
    4550:	b003      	add	sp, #12
    4552:	f85d fb04 	ldr.w	pc, [sp], #4

00004556 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4556:	b500      	push	{lr}
    4558:	b083      	sub	sp, #12
    455a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    455c:	9b01      	ldr	r3, [sp, #4]
    455e:	2b00      	cmp	r3, #0
    4560:	d002      	beq.n	4568 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    4562:	9801      	ldr	r0, [sp, #4]
    4564:	f000 fa7e 	bl	4a64 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4568:	bf00      	nop
    456a:	b003      	add	sp, #12
    456c:	f85d fb04 	ldr.w	pc, [sp], #4

00004570 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    4570:	b500      	push	{lr}
    4572:	b083      	sub	sp, #12
    4574:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    4576:	9801      	ldr	r0, [sp, #4]
    4578:	f000 fab8 	bl	4aec <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    457c:	bf00      	nop
    457e:	b003      	add	sp, #12
    4580:	f85d fb04 	ldr.w	pc, [sp], #4

00004584 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4584:	b500      	push	{lr}
    4586:	b08b      	sub	sp, #44	; 0x2c
    4588:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    458a:	2300      	movs	r3, #0
    458c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    4590:	9b01      	ldr	r3, [sp, #4]
    4592:	2b00      	cmp	r3, #0
    4594:	d10b      	bne.n	45ae <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    4596:	2305      	movs	r3, #5
    4598:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    459a:	2301      	movs	r3, #1
    459c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    45a0:	2301      	movs	r3, #1
    45a2:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    45a6:	2301      	movs	r3, #1
    45a8:	f88d 3010 	strb.w	r3, [sp, #16]
    45ac:	e00e      	b.n	45cc <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    45ae:	9b01      	ldr	r3, [sp, #4]
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    45b4:	9b01      	ldr	r3, [sp, #4]
    45b6:	79db      	ldrb	r3, [r3, #7]
    45b8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    45bc:	9b01      	ldr	r3, [sp, #4]
    45be:	889b      	ldrh	r3, [r3, #4]
    45c0:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    45c4:	9b01      	ldr	r3, [sp, #4]
    45c6:	7a1b      	ldrb	r3, [r3, #8]
    45c8:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    45cc:	4b32      	ldr	r3, [pc, #200]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45d2:	4a31      	ldr	r2, [pc, #196]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    45d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    45dc:	4b2e      	ldr	r3, [pc, #184]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45e2:	4a2d      	ldr	r2, [pc, #180]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45e4:	f023 0301 	bic.w	r3, r3, #1
    45e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    45ec:	4b2a      	ldr	r3, [pc, #168]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45f2:	4a29      	ldr	r2, [pc, #164]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45f4:	f023 0304 	bic.w	r3, r3, #4
    45f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    45fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    4600:	2b01      	cmp	r3, #1
    4602:	d144      	bne.n	468e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    4604:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4608:	4a23      	ldr	r2, [pc, #140]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    460a:	f003 0301 	and.w	r3, r3, #1
    460e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4612:	4b21      	ldr	r3, [pc, #132]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4618:	4a1f      	ldr	r2, [pc, #124]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    461a:	f043 0301 	orr.w	r3, r3, #1
    461e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    4622:	4b1d      	ldr	r3, [pc, #116]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4624:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4628:	f89d 3010 	ldrb.w	r3, [sp, #16]
    462c:	009b      	lsls	r3, r3, #2
    462e:	f003 0304 	and.w	r3, r3, #4
    4632:	4919      	ldr	r1, [pc, #100]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4634:	4313      	orrs	r3, r2
    4636:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    463a:	aa05      	add	r2, sp, #20
    463c:	a906      	add	r1, sp, #24
    463e:	a807      	add	r0, sp, #28
    4640:	f24c 3350 	movw	r3, #50000	; 0xc350
    4644:	f7ff f8f8 	bl	3838 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4648:	4b13      	ldr	r3, [pc, #76]	; (4698 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    464a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    464e:	0e1b      	lsrs	r3, r3, #24
    4650:	f003 0301 	and.w	r3, r3, #1
    4654:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4656:	9a05      	ldr	r2, [sp, #20]
    4658:	a906      	add	r1, sp, #24
    465a:	ab07      	add	r3, sp, #28
    465c:	4618      	mov	r0, r3
    465e:	f7ff f905 	bl	386c <Clock_Ip_TimeoutExpired>
    4662:	4603      	mov	r3, r0
    4664:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4668:	9b08      	ldr	r3, [sp, #32]
    466a:	2b00      	cmp	r3, #0
    466c:	d106      	bne.n	467c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    466e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4672:	f083 0301 	eor.w	r3, r3, #1
    4676:	b2db      	uxtb	r3, r3
    4678:	2b00      	cmp	r3, #0
    467a:	d1e5      	bne.n	4648 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    467c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4680:	2b00      	cmp	r3, #0
    4682:	d004      	beq.n	468e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4684:	9b02      	ldr	r3, [sp, #8]
    4686:	4619      	mov	r1, r3
    4688:	2001      	movs	r0, #1
    468a:	f7ff f8c5 	bl	3818 <Clock_Ip_ReportClockErrors>
        }
    }
}
    468e:	bf00      	nop
    4690:	b00b      	add	sp, #44	; 0x2c
    4692:	f85d fb04 	ldr.w	pc, [sp], #4
    4696:	bf00      	nop
    4698:	40064000 	.word	0x40064000

0000469c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    469c:	b500      	push	{lr}
    469e:	b089      	sub	sp, #36	; 0x24
    46a0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    46a2:	2300      	movs	r3, #0
    46a4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    46a8:	4b1f      	ldr	r3, [pc, #124]	; (4728 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    46aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46ae:	4a1e      	ldr	r2, [pc, #120]	; (4728 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    46b0:	f043 0301 	orr.w	r3, r3, #1
    46b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    46b8:	4b1b      	ldr	r3, [pc, #108]	; (4728 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    46ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46be:	4a1a      	ldr	r2, [pc, #104]	; (4728 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    46c0:	f043 0304 	orr.w	r3, r3, #4
    46c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    46c8:	aa03      	add	r2, sp, #12
    46ca:	a904      	add	r1, sp, #16
    46cc:	a805      	add	r0, sp, #20
    46ce:	f24c 3350 	movw	r3, #50000	; 0xc350
    46d2:	f7ff f8b1 	bl	3838 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    46d6:	4b14      	ldr	r3, [pc, #80]	; (4728 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    46d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46dc:	0e1b      	lsrs	r3, r3, #24
    46de:	f003 0301 	and.w	r3, r3, #1
    46e2:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    46e4:	9a03      	ldr	r2, [sp, #12]
    46e6:	a904      	add	r1, sp, #16
    46e8:	ab05      	add	r3, sp, #20
    46ea:	4618      	mov	r0, r3
    46ec:	f7ff f8be 	bl	386c <Clock_Ip_TimeoutExpired>
    46f0:	4603      	mov	r3, r0
    46f2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    46f6:	9b06      	ldr	r3, [sp, #24]
    46f8:	2b00      	cmp	r3, #0
    46fa:	d106      	bne.n	470a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    46fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4700:	f083 0301 	eor.w	r3, r3, #1
    4704:	b2db      	uxtb	r3, r3
    4706:	2b00      	cmp	r3, #0
    4708:	d1e5      	bne.n	46d6 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    470a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    470e:	2b00      	cmp	r3, #0
    4710:	d005      	beq.n	471e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4712:	9b01      	ldr	r3, [sp, #4]
    4714:	681b      	ldr	r3, [r3, #0]
    4716:	4619      	mov	r1, r3
    4718:	2001      	movs	r0, #1
    471a:	f7ff f87d 	bl	3818 <Clock_Ip_ReportClockErrors>
    }
}
    471e:	bf00      	nop
    4720:	b009      	add	sp, #36	; 0x24
    4722:	f85d fb04 	ldr.w	pc, [sp], #4
    4726:	bf00      	nop
    4728:	40064000 	.word	0x40064000

0000472c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    472c:	b082      	sub	sp, #8
    472e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    4730:	4b09      	ldr	r3, [pc, #36]	; (4758 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4732:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4736:	4a08      	ldr	r2, [pc, #32]	; (4758 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4738:	f023 0301 	bic.w	r3, r3, #1
    473c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4740:	4b05      	ldr	r3, [pc, #20]	; (4758 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4746:	4a04      	ldr	r2, [pc, #16]	; (4758 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4748:	f023 0304 	bic.w	r3, r3, #4
    474c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4750:	bf00      	nop
    4752:	b002      	add	sp, #8
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	40064000 	.word	0x40064000

0000475c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    475c:	b082      	sub	sp, #8
    475e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4760:	4b0f      	ldr	r3, [pc, #60]	; (47a0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4762:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4766:	4a0e      	ldr	r2, [pc, #56]	; (47a0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4768:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    476c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4770:	4b0b      	ldr	r3, [pc, #44]	; (47a0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4772:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4776:	4a0a      	ldr	r2, [pc, #40]	; (47a0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4778:	f023 0304 	bic.w	r3, r3, #4
    477c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4780:	4b07      	ldr	r3, [pc, #28]	; (47a0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4782:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4786:	9b01      	ldr	r3, [sp, #4]
    4788:	7a1b      	ldrb	r3, [r3, #8]
    478a:	009b      	lsls	r3, r3, #2
    478c:	f003 0304 	and.w	r3, r3, #4
    4790:	4903      	ldr	r1, [pc, #12]	; (47a0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4792:	4313      	orrs	r3, r2
    4794:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4798:	bf00      	nop
    479a:	b002      	add	sp, #8
    479c:	4770      	bx	lr
    479e:	bf00      	nop
    47a0:	40064000 	.word	0x40064000

000047a4 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    47a4:	b082      	sub	sp, #8
    47a6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    47a8:	9b01      	ldr	r3, [sp, #4]
    47aa:	889b      	ldrh	r3, [r3, #4]
    47ac:	2b01      	cmp	r3, #1
    47ae:	d107      	bne.n	47c0 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    47b0:	4b05      	ldr	r3, [pc, #20]	; (47c8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    47b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47b6:	4a04      	ldr	r2, [pc, #16]	; (47c8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    47b8:	f043 0304 	orr.w	r3, r3, #4
    47bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    47c0:	bf00      	nop
    47c2:	b002      	add	sp, #8
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop
    47c8:	40064000 	.word	0x40064000

000047cc <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    47cc:	b082      	sub	sp, #8
    47ce:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    47d0:	4b05      	ldr	r3, [pc, #20]	; (47e8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    47d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47d6:	4a04      	ldr	r2, [pc, #16]	; (47e8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    47d8:	f023 0304 	bic.w	r3, r3, #4
    47dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    47e0:	bf00      	nop
    47e2:	b002      	add	sp, #8
    47e4:	4770      	bx	lr
    47e6:	bf00      	nop
    47e8:	40064000 	.word	0x40064000

000047ec <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    47ec:	b082      	sub	sp, #8
    47ee:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    47f0:	4b0f      	ldr	r3, [pc, #60]	; (4830 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47f6:	4a0e      	ldr	r2, [pc, #56]	; (4830 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    47fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4800:	4b0b      	ldr	r3, [pc, #44]	; (4830 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4806:	4a0a      	ldr	r2, [pc, #40]	; (4830 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4808:	f023 0302 	bic.w	r3, r3, #2
    480c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    4810:	4b07      	ldr	r3, [pc, #28]	; (4830 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4812:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4816:	9b01      	ldr	r3, [sp, #4]
    4818:	7a5b      	ldrb	r3, [r3, #9]
    481a:	005b      	lsls	r3, r3, #1
    481c:	f003 0302 	and.w	r3, r3, #2
    4820:	4903      	ldr	r1, [pc, #12]	; (4830 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4822:	4313      	orrs	r3, r2
    4824:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4828:	bf00      	nop
    482a:	b002      	add	sp, #8
    482c:	4770      	bx	lr
    482e:	bf00      	nop
    4830:	40064000 	.word	0x40064000

00004834 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4834:	b082      	sub	sp, #8
    4836:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4838:	9b01      	ldr	r3, [sp, #4]
    483a:	889b      	ldrh	r3, [r3, #4]
    483c:	2b01      	cmp	r3, #1
    483e:	d107      	bne.n	4850 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4840:	4b05      	ldr	r3, [pc, #20]	; (4858 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4842:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4846:	4a04      	ldr	r2, [pc, #16]	; (4858 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4848:	f043 0302 	orr.w	r3, r3, #2
    484c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4850:	bf00      	nop
    4852:	b002      	add	sp, #8
    4854:	4770      	bx	lr
    4856:	bf00      	nop
    4858:	40064000 	.word	0x40064000

0000485c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    485c:	b082      	sub	sp, #8
    485e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4860:	4b05      	ldr	r3, [pc, #20]	; (4878 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4866:	4a04      	ldr	r2, [pc, #16]	; (4878 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4868:	f023 0302 	bic.w	r3, r3, #2
    486c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4870:	bf00      	nop
    4872:	b002      	add	sp, #8
    4874:	4770      	bx	lr
    4876:	bf00      	nop
    4878:	40064000 	.word	0x40064000

0000487c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    487c:	b500      	push	{lr}
    487e:	b08b      	sub	sp, #44	; 0x2c
    4880:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4882:	9b01      	ldr	r3, [sp, #4]
    4884:	681a      	ldr	r2, [r3, #0]
    4886:	4975      	ldr	r1, [pc, #468]	; (4a5c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4888:	4613      	mov	r3, r2
    488a:	00db      	lsls	r3, r3, #3
    488c:	4413      	add	r3, r2
    488e:	440b      	add	r3, r1
    4890:	781b      	ldrb	r3, [r3, #0]
    4892:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4894:	2300      	movs	r3, #0
    4896:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    489a:	2300      	movs	r3, #0
    489c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    48a0:	4b6f      	ldr	r3, [pc, #444]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48a6:	4a6e      	ldr	r2, [pc, #440]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    48ac:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    48b0:	4b6b      	ldr	r3, [pc, #428]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    48ba:	2b00      	cmp	r3, #0
    48bc:	d07d      	beq.n	49ba <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    48be:	9b01      	ldr	r3, [sp, #4]
    48c0:	79db      	ldrb	r3, [r3, #7]
    48c2:	461a      	mov	r2, r3
    48c4:	4b66      	ldr	r3, [pc, #408]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48c6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    48ca:	f003 0303 	and.w	r3, r3, #3
    48ce:	429a      	cmp	r2, r3
    48d0:	d10b      	bne.n	48ea <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    48d2:	9b01      	ldr	r3, [sp, #4]
    48d4:	799b      	ldrb	r3, [r3, #6]
    48d6:	461a      	mov	r2, r3
    48d8:	4b61      	ldr	r3, [pc, #388]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48de:	08db      	lsrs	r3, r3, #3
    48e0:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    48e4:	429a      	cmp	r2, r3
    48e6:	f000 80b4 	beq.w	4a52 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    48ea:	4b5d      	ldr	r3, [pc, #372]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48f0:	f003 0301 	and.w	r3, r3, #1
    48f4:	2b00      	cmp	r3, #0
    48f6:	d105      	bne.n	4904 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    48f8:	2301      	movs	r3, #1
    48fa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    48fe:	2000      	movs	r0, #0
    4900:	f7ff fd66 	bl	43d0 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4904:	2002      	movs	r0, #2
    4906:	f7ff fdcf 	bl	44a8 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    490a:	4b55      	ldr	r3, [pc, #340]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    490c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4910:	4a53      	ldr	r2, [pc, #332]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4912:	f023 0301 	bic.w	r3, r3, #1
    4916:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    491a:	9b01      	ldr	r3, [sp, #4]
    491c:	889b      	ldrh	r3, [r3, #4]
    491e:	2b01      	cmp	r3, #1
    4920:	f040 8097 	bne.w	4a52 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4924:	9b01      	ldr	r3, [sp, #4]
    4926:	79db      	ldrb	r3, [r3, #7]
    4928:	4a4d      	ldr	r2, [pc, #308]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    492a:	f003 0303 	and.w	r3, r3, #3
    492e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4932:	4b4b      	ldr	r3, [pc, #300]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4934:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4938:	9b01      	ldr	r3, [sp, #4]
    493a:	799b      	ldrb	r3, [r3, #6]
    493c:	00db      	lsls	r3, r3, #3
    493e:	f003 0308 	and.w	r3, r3, #8
    4942:	4313      	orrs	r3, r2
    4944:	4a46      	ldr	r2, [pc, #280]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4946:	f043 0301 	orr.w	r3, r3, #1
    494a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    494e:	aa03      	add	r2, sp, #12
    4950:	a904      	add	r1, sp, #16
    4952:	a805      	add	r0, sp, #20
    4954:	f24c 3350 	movw	r3, #50000	; 0xc350
    4958:	f7fe ff6e 	bl	3838 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    495c:	4b40      	ldr	r3, [pc, #256]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    495e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4962:	0e1b      	lsrs	r3, r3, #24
    4964:	f003 0301 	and.w	r3, r3, #1
    4968:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    496a:	9a03      	ldr	r2, [sp, #12]
    496c:	a904      	add	r1, sp, #16
    496e:	ab05      	add	r3, sp, #20
    4970:	4618      	mov	r0, r3
    4972:	f7fe ff7b 	bl	386c <Clock_Ip_TimeoutExpired>
    4976:	4603      	mov	r3, r0
    4978:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    497c:	9b06      	ldr	r3, [sp, #24]
    497e:	2b00      	cmp	r3, #0
    4980:	d106      	bne.n	4990 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4982:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4986:	f083 0301 	eor.w	r3, r3, #1
    498a:	b2db      	uxtb	r3, r3
    498c:	2b00      	cmp	r3, #0
    498e:	d1e5      	bne.n	495c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4990:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4994:	2b00      	cmp	r3, #0
    4996:	d005      	beq.n	49a4 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4998:	9b01      	ldr	r3, [sp, #4]
    499a:	681b      	ldr	r3, [r3, #0]
    499c:	4619      	mov	r1, r3
    499e:	2001      	movs	r0, #1
    49a0:	f7fe ff3a 	bl	3818 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    49a4:	2003      	movs	r0, #3
    49a6:	f7ff fd7f 	bl	44a8 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    49aa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    49ae:	2b00      	cmp	r3, #0
    49b0:	d04f      	beq.n	4a52 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    49b2:	2002      	movs	r0, #2
    49b4:	f7ff fd26 	bl	4404 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    49b8:	e04b      	b.n	4a52 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    49ba:	4b29      	ldr	r3, [pc, #164]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49c0:	4a27      	ldr	r2, [pc, #156]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49c2:	f023 0301 	bic.w	r3, r3, #1
    49c6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    49ca:	9b01      	ldr	r3, [sp, #4]
    49cc:	889b      	ldrh	r3, [r3, #4]
    49ce:	2b01      	cmp	r3, #1
    49d0:	d13f      	bne.n	4a52 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    49d2:	9b01      	ldr	r3, [sp, #4]
    49d4:	79db      	ldrb	r3, [r3, #7]
    49d6:	4a22      	ldr	r2, [pc, #136]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49d8:	f003 0303 	and.w	r3, r3, #3
    49dc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    49e0:	4b1f      	ldr	r3, [pc, #124]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49e2:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    49e6:	9b01      	ldr	r3, [sp, #4]
    49e8:	799b      	ldrb	r3, [r3, #6]
    49ea:	00db      	lsls	r3, r3, #3
    49ec:	f003 0308 	and.w	r3, r3, #8
    49f0:	4313      	orrs	r3, r2
    49f2:	4a1b      	ldr	r2, [pc, #108]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49f4:	f043 0301 	orr.w	r3, r3, #1
    49f8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    49fc:	aa03      	add	r2, sp, #12
    49fe:	a904      	add	r1, sp, #16
    4a00:	a805      	add	r0, sp, #20
    4a02:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a06:	f7fe ff17 	bl	3838 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a0a:	4b15      	ldr	r3, [pc, #84]	; (4a60 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4a0c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a10:	0e1b      	lsrs	r3, r3, #24
    4a12:	f003 0301 	and.w	r3, r3, #1
    4a16:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a18:	9a03      	ldr	r2, [sp, #12]
    4a1a:	a904      	add	r1, sp, #16
    4a1c:	ab05      	add	r3, sp, #20
    4a1e:	4618      	mov	r0, r3
    4a20:	f7fe ff24 	bl	386c <Clock_Ip_TimeoutExpired>
    4a24:	4603      	mov	r3, r0
    4a26:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4a2a:	9b06      	ldr	r3, [sp, #24]
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d106      	bne.n	4a3e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4a30:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a34:	f083 0301 	eor.w	r3, r3, #1
    4a38:	b2db      	uxtb	r3, r3
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	d1e5      	bne.n	4a0a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4a3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d005      	beq.n	4a52 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4a46:	9b01      	ldr	r3, [sp, #4]
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	4619      	mov	r1, r3
    4a4c:	2001      	movs	r0, #1
    4a4e:	f7fe fee3 	bl	3818 <Clock_Ip_ReportClockErrors>
}
    4a52:	bf00      	nop
    4a54:	b00b      	add	sp, #44	; 0x2c
    4a56:	f85d fb04 	ldr.w	pc, [sp], #4
    4a5a:	bf00      	nop
    4a5c:	000114cc 	.word	0x000114cc
    4a60:	40064000 	.word	0x40064000

00004a64 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a64:	b500      	push	{lr}
    4a66:	b089      	sub	sp, #36	; 0x24
    4a68:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a6a:	2300      	movs	r3, #0
    4a6c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4a70:	9b01      	ldr	r3, [sp, #4]
    4a72:	889b      	ldrh	r3, [r3, #4]
    4a74:	2b01      	cmp	r3, #1
    4a76:	d132      	bne.n	4ade <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4a78:	4b1b      	ldr	r3, [pc, #108]	; (4ae8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a7e:	4a1a      	ldr	r2, [pc, #104]	; (4ae8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a80:	f043 0301 	orr.w	r3, r3, #1
    4a84:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a88:	aa03      	add	r2, sp, #12
    4a8a:	a904      	add	r1, sp, #16
    4a8c:	a805      	add	r0, sp, #20
    4a8e:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a92:	f7fe fed1 	bl	3838 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a96:	4b14      	ldr	r3, [pc, #80]	; (4ae8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a98:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a9c:	0e1b      	lsrs	r3, r3, #24
    4a9e:	f003 0301 	and.w	r3, r3, #1
    4aa2:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4aa4:	9a03      	ldr	r2, [sp, #12]
    4aa6:	a904      	add	r1, sp, #16
    4aa8:	ab05      	add	r3, sp, #20
    4aaa:	4618      	mov	r0, r3
    4aac:	f7fe fede 	bl	386c <Clock_Ip_TimeoutExpired>
    4ab0:	4603      	mov	r3, r0
    4ab2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4ab6:	9b06      	ldr	r3, [sp, #24]
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d106      	bne.n	4aca <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4abc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ac0:	f083 0301 	eor.w	r3, r3, #1
    4ac4:	b2db      	uxtb	r3, r3
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d1e5      	bne.n	4a96 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4aca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d005      	beq.n	4ade <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4ad2:	9b01      	ldr	r3, [sp, #4]
    4ad4:	681b      	ldr	r3, [r3, #0]
    4ad6:	4619      	mov	r1, r3
    4ad8:	2001      	movs	r0, #1
    4ada:	f7fe fe9d 	bl	3818 <Clock_Ip_ReportClockErrors>
        }
    }
}
    4ade:	bf00      	nop
    4ae0:	b009      	add	sp, #36	; 0x24
    4ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    4ae6:	bf00      	nop
    4ae8:	40064000 	.word	0x40064000

00004aec <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4aec:	b082      	sub	sp, #8
    4aee:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4af0:	4b05      	ldr	r3, [pc, #20]	; (4b08 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4af2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4af6:	4a04      	ldr	r2, [pc, #16]	; (4b08 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4af8:	f023 0301 	bic.w	r3, r3, #1
    4afc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4b00:	bf00      	nop
    4b02:	b002      	add	sp, #8
    4b04:	4770      	bx	lr
    4b06:	bf00      	nop
    4b08:	40064000 	.word	0x40064000

00004b0c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4b0c:	b082      	sub	sp, #8
    4b0e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4b10:	bf00      	nop
    4b12:	b002      	add	sp, #8
    4b14:	4770      	bx	lr

00004b16 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4b16:	b082      	sub	sp, #8
    4b18:	9001      	str	r0, [sp, #4]
    4b1a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4b1c:	bf00      	nop
    4b1e:	b002      	add	sp, #8
    4b20:	4770      	bx	lr

00004b22 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4b22:	b082      	sub	sp, #8
    4b24:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4b26:	bf00      	nop
    4b28:	b002      	add	sp, #8
    4b2a:	4770      	bx	lr

00004b2c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4b2c:	b082      	sub	sp, #8
    4b2e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4b30:	bf00      	nop
    4b32:	b002      	add	sp, #8
    4b34:	4770      	bx	lr

00004b36 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4b36:	b082      	sub	sp, #8
    4b38:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4b3a:	2302      	movs	r3, #2
}
    4b3c:	4618      	mov	r0, r3
    4b3e:	b002      	add	sp, #8
    4b40:	4770      	bx	lr

00004b42 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4b42:	b082      	sub	sp, #8
    4b44:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4b46:	bf00      	nop
    4b48:	b002      	add	sp, #8
    4b4a:	4770      	bx	lr

00004b4c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4b4c:	b500      	push	{lr}
    4b4e:	b083      	sub	sp, #12
    4b50:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b52:	9b01      	ldr	r3, [sp, #4]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d002      	beq.n	4b5e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4b58:	9801      	ldr	r0, [sp, #4]
    4b5a:	f000 f870 	bl	4c3e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b5e:	bf00      	nop
    4b60:	b003      	add	sp, #12
    4b62:	f85d fb04 	ldr.w	pc, [sp], #4

00004b66 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4b66:	b500      	push	{lr}
    4b68:	b083      	sub	sp, #12
    4b6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b6c:	9b01      	ldr	r3, [sp, #4]
    4b6e:	2b00      	cmp	r3, #0
    4b70:	d002      	beq.n	4b78 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4b72:	9801      	ldr	r0, [sp, #4]
    4b74:	f000 f89a 	bl	4cac <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b78:	bf00      	nop
    4b7a:	b003      	add	sp, #12
    4b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00004b80 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4b80:	b500      	push	{lr}
    4b82:	b089      	sub	sp, #36	; 0x24
    4b84:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4b86:	2301      	movs	r3, #1
    4b88:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4b8a:	2300      	movs	r3, #0
    4b8c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4b90:	4b1e      	ldr	r3, [pc, #120]	; (4c0c <Clock_Ip_CompleteSpll+0x8c>)
    4b92:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b96:	f003 0301 	and.w	r3, r3, #1
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	d02f      	beq.n	4bfe <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4b9e:	aa02      	add	r2, sp, #8
    4ba0:	a903      	add	r1, sp, #12
    4ba2:	a804      	add	r0, sp, #16
    4ba4:	f24c 3350 	movw	r3, #50000	; 0xc350
    4ba8:	f7fe fe46 	bl	3838 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4bac:	4b17      	ldr	r3, [pc, #92]	; (4c0c <Clock_Ip_CompleteSpll+0x8c>)
    4bae:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4bb2:	0e1b      	lsrs	r3, r3, #24
    4bb4:	f003 0301 	and.w	r3, r3, #1
    4bb8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4bba:	9a02      	ldr	r2, [sp, #8]
    4bbc:	a903      	add	r1, sp, #12
    4bbe:	ab04      	add	r3, sp, #16
    4bc0:	4618      	mov	r0, r3
    4bc2:	f7fe fe53 	bl	386c <Clock_Ip_TimeoutExpired>
    4bc6:	4603      	mov	r3, r0
    4bc8:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4bcc:	9b05      	ldr	r3, [sp, #20]
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d106      	bne.n	4be0 <Clock_Ip_CompleteSpll+0x60>
    4bd2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4bd6:	f083 0301 	eor.w	r3, r3, #1
    4bda:	b2db      	uxtb	r3, r3
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d1e5      	bne.n	4bac <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4be0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4be4:	f083 0301 	eor.w	r3, r3, #1
    4be8:	b2db      	uxtb	r3, r3
    4bea:	2b00      	cmp	r3, #0
    4bec:	d002      	beq.n	4bf4 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4bee:	2302      	movs	r3, #2
    4bf0:	9307      	str	r3, [sp, #28]
    4bf2:	e006      	b.n	4c02 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4bf4:	9901      	ldr	r1, [sp, #4]
    4bf6:	2001      	movs	r0, #1
    4bf8:	f7fe fe0e 	bl	3818 <Clock_Ip_ReportClockErrors>
    4bfc:	e001      	b.n	4c02 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4bfe:	2300      	movs	r3, #0
    4c00:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4c02:	9b07      	ldr	r3, [sp, #28]
}
    4c04:	4618      	mov	r0, r3
    4c06:	b009      	add	sp, #36	; 0x24
    4c08:	f85d fb04 	ldr.w	pc, [sp], #4
    4c0c:	40064000 	.word	0x40064000

00004c10 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4c10:	b500      	push	{lr}
    4c12:	b083      	sub	sp, #12
    4c14:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4c16:	9801      	ldr	r0, [sp, #4]
    4c18:	f000 f886 	bl	4d28 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4c1c:	bf00      	nop
    4c1e:	b003      	add	sp, #12
    4c20:	f85d fb04 	ldr.w	pc, [sp], #4

00004c24 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4c24:	b500      	push	{lr}
    4c26:	b083      	sub	sp, #12
    4c28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c2a:	9b01      	ldr	r3, [sp, #4]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d002      	beq.n	4c36 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4c30:	9801      	ldr	r0, [sp, #4]
    4c32:	f000 f891 	bl	4d58 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c36:	bf00      	nop
    4c38:	b003      	add	sp, #12
    4c3a:	f85d fb04 	ldr.w	pc, [sp], #4

00004c3e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4c3e:	b082      	sub	sp, #8
    4c40:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4c42:	4b19      	ldr	r3, [pc, #100]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c44:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c48:	4a17      	ldr	r2, [pc, #92]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4c4e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4c52:	4b15      	ldr	r3, [pc, #84]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c54:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c58:	4a13      	ldr	r2, [pc, #76]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4c5e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4c62:	4b11      	ldr	r3, [pc, #68]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c64:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c68:	4a0f      	ldr	r2, [pc, #60]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4c6e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4c72:	4b0d      	ldr	r3, [pc, #52]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c74:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c78:	4a0b      	ldr	r2, [pc, #44]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c7a:	f023 0301 	bic.w	r3, r3, #1
    4c7e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4c82:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c84:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c88:	4a07      	ldr	r2, [pc, #28]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4c8e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4c92:	4b05      	ldr	r3, [pc, #20]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c94:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c98:	4a03      	ldr	r2, [pc, #12]	; (4ca8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4c9e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4ca2:	bf00      	nop
    4ca4:	b002      	add	sp, #8
    4ca6:	4770      	bx	lr
    4ca8:	40064000 	.word	0x40064000

00004cac <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4cac:	b082      	sub	sp, #8
    4cae:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4cb0:	9b01      	ldr	r3, [sp, #4]
    4cb2:	889b      	ldrh	r3, [r3, #4]
    4cb4:	2b01      	cmp	r3, #1
    4cb6:	d12f      	bne.n	4d18 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4cb8:	4b1a      	ldr	r3, [pc, #104]	; (4d24 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cba:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4cbe:	9b01      	ldr	r3, [sp, #4]
    4cc0:	7b5b      	ldrb	r3, [r3, #13]
    4cc2:	3b01      	subs	r3, #1
    4cc4:	021b      	lsls	r3, r3, #8
    4cc6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4cca:	9b01      	ldr	r3, [sp, #4]
    4ccc:	7d1b      	ldrb	r3, [r3, #20]
    4cce:	3b10      	subs	r3, #16
    4cd0:	041b      	lsls	r3, r3, #16
    4cd2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4cd6:	430b      	orrs	r3, r1
    4cd8:	4912      	ldr	r1, [pc, #72]	; (4d24 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cda:	4313      	orrs	r3, r2
    4cdc:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4ce0:	9b01      	ldr	r3, [sp, #4]
    4ce2:	7fdb      	ldrb	r3, [r3, #31]
    4ce4:	2b02      	cmp	r3, #2
    4ce6:	d011      	beq.n	4d0c <Clock_Ip_SetSpll_TrustedCall+0x60>
    4ce8:	2b02      	cmp	r3, #2
    4cea:	dc17      	bgt.n	4d1c <Clock_Ip_SetSpll_TrustedCall+0x70>
    4cec:	2b00      	cmp	r3, #0
    4cee:	d002      	beq.n	4cf6 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4cf0:	2b01      	cmp	r3, #1
    4cf2:	d005      	beq.n	4d00 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4cf4:	e012      	b.n	4d1c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4cf6:	4b0b      	ldr	r3, [pc, #44]	; (4d24 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cf8:	2200      	movs	r2, #0
    4cfa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4cfe:	e00e      	b.n	4d1e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4d00:	4b08      	ldr	r3, [pc, #32]	; (4d24 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4d06:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4d0a:	e008      	b.n	4d1e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4d0c:	4b05      	ldr	r3, [pc, #20]	; (4d24 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4d0e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4d12:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4d16:	e002      	b.n	4d1e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4d18:	bf00      	nop
    4d1a:	e000      	b.n	4d1e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4d1c:	bf00      	nop
}
    4d1e:	bf00      	nop
    4d20:	b002      	add	sp, #8
    4d22:	4770      	bx	lr
    4d24:	40064000 	.word	0x40064000

00004d28 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4d28:	b082      	sub	sp, #8
    4d2a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4d2c:	4b09      	ldr	r3, [pc, #36]	; (4d54 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d2e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d32:	4a08      	ldr	r2, [pc, #32]	; (4d54 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4d38:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4d3c:	4b05      	ldr	r3, [pc, #20]	; (4d54 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d3e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d42:	4a04      	ldr	r2, [pc, #16]	; (4d54 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d44:	f023 0301 	bic.w	r3, r3, #1
    4d48:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4d4c:	bf00      	nop
    4d4e:	b002      	add	sp, #8
    4d50:	4770      	bx	lr
    4d52:	bf00      	nop
    4d54:	40064000 	.word	0x40064000

00004d58 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4d58:	b082      	sub	sp, #8
    4d5a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4d5c:	9b01      	ldr	r3, [sp, #4]
    4d5e:	889b      	ldrh	r3, [r3, #4]
    4d60:	2b01      	cmp	r3, #1
    4d62:	d107      	bne.n	4d74 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4d64:	4b05      	ldr	r3, [pc, #20]	; (4d7c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d66:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d6a:	4a04      	ldr	r2, [pc, #16]	; (4d7c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d6c:	f043 0301 	orr.w	r3, r3, #1
    4d70:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4d74:	bf00      	nop
    4d76:	b002      	add	sp, #8
    4d78:	4770      	bx	lr
    4d7a:	bf00      	nop
    4d7c:	40064000 	.word	0x40064000

00004d80 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4d80:	b082      	sub	sp, #8
    4d82:	9001      	str	r0, [sp, #4]
    4d84:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4d86:	bf00      	nop
    4d88:	b002      	add	sp, #8
    4d8a:	4770      	bx	lr

00004d8c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4d8c:	b082      	sub	sp, #8
    4d8e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4d90:	bf00      	nop
    4d92:	b002      	add	sp, #8
    4d94:	4770      	bx	lr

00004d96 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d96:	b500      	push	{lr}
    4d98:	b083      	sub	sp, #12
    4d9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d9c:	9b01      	ldr	r3, [sp, #4]
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d002      	beq.n	4da8 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4da2:	9801      	ldr	r0, [sp, #4]
    4da4:	f000 f8ee 	bl	4f84 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4da8:	bf00      	nop
    4daa:	b003      	add	sp, #12
    4dac:	f85d fb04 	ldr.w	pc, [sp], #4

00004db0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4db0:	b500      	push	{lr}
    4db2:	b083      	sub	sp, #12
    4db4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4db6:	9b01      	ldr	r3, [sp, #4]
    4db8:	2b00      	cmp	r3, #0
    4dba:	d002      	beq.n	4dc2 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4dbc:	9801      	ldr	r0, [sp, #4]
    4dbe:	f000 f8ff 	bl	4fc0 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dc2:	bf00      	nop
    4dc4:	b003      	add	sp, #12
    4dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00004dca <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4dca:	b500      	push	{lr}
    4dcc:	b083      	sub	sp, #12
    4dce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dd0:	9b01      	ldr	r3, [sp, #4]
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d002      	beq.n	4ddc <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4dd6:	9801      	ldr	r0, [sp, #4]
    4dd8:	f000 f912 	bl	5000 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ddc:	bf00      	nop
    4dde:	b003      	add	sp, #12
    4de0:	f85d fb04 	ldr.w	pc, [sp], #4

00004de4 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4de4:	b500      	push	{lr}
    4de6:	b083      	sub	sp, #12
    4de8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dea:	9b01      	ldr	r3, [sp, #4]
    4dec:	2b00      	cmp	r3, #0
    4dee:	d002      	beq.n	4df6 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4df0:	9801      	ldr	r0, [sp, #4]
    4df2:	f000 f925 	bl	5040 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4df6:	bf00      	nop
    4df8:	b003      	add	sp, #12
    4dfa:	f85d fb04 	ldr.w	pc, [sp], #4

00004dfe <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4dfe:	b500      	push	{lr}
    4e00:	b083      	sub	sp, #12
    4e02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e04:	9b01      	ldr	r3, [sp, #4]
    4e06:	2b00      	cmp	r3, #0
    4e08:	d002      	beq.n	4e10 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4e0a:	9801      	ldr	r0, [sp, #4]
    4e0c:	f000 f936 	bl	507c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e10:	bf00      	nop
    4e12:	b003      	add	sp, #12
    4e14:	f85d fb04 	ldr.w	pc, [sp], #4

00004e18 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e18:	b500      	push	{lr}
    4e1a:	b083      	sub	sp, #12
    4e1c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e1e:	9b01      	ldr	r3, [sp, #4]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d002      	beq.n	4e2a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4e24:	9801      	ldr	r0, [sp, #4]
    4e26:	f000 f949 	bl	50bc <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e2a:	bf00      	nop
    4e2c:	b003      	add	sp, #12
    4e2e:	f85d fb04 	ldr.w	pc, [sp], #4

00004e32 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e32:	b500      	push	{lr}
    4e34:	b083      	sub	sp, #12
    4e36:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e38:	9b01      	ldr	r3, [sp, #4]
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d002      	beq.n	4e44 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4e3e:	9801      	ldr	r0, [sp, #4]
    4e40:	f000 f958 	bl	50f4 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e44:	bf00      	nop
    4e46:	b003      	add	sp, #12
    4e48:	f85d fb04 	ldr.w	pc, [sp], #4

00004e4c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e4c:	b500      	push	{lr}
    4e4e:	b083      	sub	sp, #12
    4e50:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e52:	9b01      	ldr	r3, [sp, #4]
    4e54:	2b00      	cmp	r3, #0
    4e56:	d002      	beq.n	4e5e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4e58:	9801      	ldr	r0, [sp, #4]
    4e5a:	f000 f969 	bl	5130 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e5e:	bf00      	nop
    4e60:	b003      	add	sp, #12
    4e62:	f85d fb04 	ldr.w	pc, [sp], #4

00004e66 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e66:	b500      	push	{lr}
    4e68:	b083      	sub	sp, #12
    4e6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e6c:	9b01      	ldr	r3, [sp, #4]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d002      	beq.n	4e78 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4e72:	9801      	ldr	r0, [sp, #4]
    4e74:	f000 f978 	bl	5168 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e78:	bf00      	nop
    4e7a:	b003      	add	sp, #12
    4e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e80 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e80:	b500      	push	{lr}
    4e82:	b083      	sub	sp, #12
    4e84:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e86:	9b01      	ldr	r3, [sp, #4]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d002      	beq.n	4e92 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4e8c:	9801      	ldr	r0, [sp, #4]
    4e8e:	f000 f989 	bl	51a4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e92:	bf00      	nop
    4e94:	b003      	add	sp, #12
    4e96:	f85d fb04 	ldr.w	pc, [sp], #4

00004e9a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e9a:	b500      	push	{lr}
    4e9c:	b083      	sub	sp, #12
    4e9e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ea0:	9b01      	ldr	r3, [sp, #4]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d002      	beq.n	4eac <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4ea6:	9801      	ldr	r0, [sp, #4]
    4ea8:	f000 f998 	bl	51dc <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4eac:	bf00      	nop
    4eae:	b003      	add	sp, #12
    4eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00004eb4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4eb4:	b500      	push	{lr}
    4eb6:	b083      	sub	sp, #12
    4eb8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	d002      	beq.n	4ec6 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4ec0:	9801      	ldr	r0, [sp, #4]
    4ec2:	f000 f9a9 	bl	5218 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ec6:	bf00      	nop
    4ec8:	b003      	add	sp, #12
    4eca:	f85d fb04 	ldr.w	pc, [sp], #4

00004ece <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4ece:	b500      	push	{lr}
    4ed0:	b083      	sub	sp, #12
    4ed2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ed4:	9b01      	ldr	r3, [sp, #4]
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d002      	beq.n	4ee0 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4eda:	9801      	ldr	r0, [sp, #4]
    4edc:	f000 f9e6 	bl	52ac <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ee0:	bf00      	nop
    4ee2:	b003      	add	sp, #12
    4ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ee8 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4ee8:	b500      	push	{lr}
    4eea:	b083      	sub	sp, #12
    4eec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4eee:	9b01      	ldr	r3, [sp, #4]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d002      	beq.n	4efa <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4ef4:	9801      	ldr	r0, [sp, #4]
    4ef6:	f000 fa25 	bl	5344 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4efa:	bf00      	nop
    4efc:	b003      	add	sp, #12
    4efe:	f85d fb04 	ldr.w	pc, [sp], #4

00004f02 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f02:	b500      	push	{lr}
    4f04:	b083      	sub	sp, #12
    4f06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f08:	9b01      	ldr	r3, [sp, #4]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d002      	beq.n	4f14 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4f0e:	9801      	ldr	r0, [sp, #4]
    4f10:	f000 fa2a 	bl	5368 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f14:	bf00      	nop
    4f16:	b003      	add	sp, #12
    4f18:	f85d fb04 	ldr.w	pc, [sp], #4

00004f1c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4f1c:	b500      	push	{lr}
    4f1e:	b083      	sub	sp, #12
    4f20:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f22:	9b01      	ldr	r3, [sp, #4]
    4f24:	2b00      	cmp	r3, #0
    4f26:	d002      	beq.n	4f2e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4f28:	9801      	ldr	r0, [sp, #4]
    4f2a:	f000 fa3b 	bl	53a4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f2e:	bf00      	nop
    4f30:	b003      	add	sp, #12
    4f32:	f85d fb04 	ldr.w	pc, [sp], #4

00004f36 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4f36:	b500      	push	{lr}
    4f38:	b083      	sub	sp, #12
    4f3a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f3c:	9b01      	ldr	r3, [sp, #4]
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d002      	beq.n	4f48 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4f42:	9801      	ldr	r0, [sp, #4]
    4f44:	f000 fa56 	bl	53f4 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f48:	bf00      	nop
    4f4a:	b003      	add	sp, #12
    4f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f50 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f50:	b500      	push	{lr}
    4f52:	b083      	sub	sp, #12
    4f54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f56:	9b01      	ldr	r3, [sp, #4]
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d002      	beq.n	4f62 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4f5c:	9801      	ldr	r0, [sp, #4]
    4f5e:	f000 fa79 	bl	5454 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f62:	bf00      	nop
    4f64:	b003      	add	sp, #12
    4f66:	f85d fb04 	ldr.w	pc, [sp], #4

00004f6a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f6a:	b500      	push	{lr}
    4f6c:	b083      	sub	sp, #12
    4f6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f70:	9b01      	ldr	r3, [sp, #4]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d002      	beq.n	4f7c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4f76:	9801      	ldr	r0, [sp, #4]
    4f78:	f000 fa8a 	bl	5490 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f7c:	bf00      	nop
    4f7e:	b003      	add	sp, #12
    4f80:	f85d fb04 	ldr.w	pc, [sp], #4

00004f84 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f84:	b084      	sub	sp, #16
    4f86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f88:	4b0b      	ldr	r3, [pc, #44]	; (4fb8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4f8a:	795b      	ldrb	r3, [r3, #5]
    4f8c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4f8e:	4b0b      	ldr	r3, [pc, #44]	; (4fbc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4f90:	695b      	ldr	r3, [r3, #20]
    4f92:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4f94:	9b02      	ldr	r3, [sp, #8]
    4f96:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f9a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4f9c:	9b03      	ldr	r3, [sp, #12]
    4f9e:	061b      	lsls	r3, r3, #24
    4fa0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4fa4:	9a02      	ldr	r2, [sp, #8]
    4fa6:	4313      	orrs	r3, r2
    4fa8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4faa:	4a04      	ldr	r2, [pc, #16]	; (4fbc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4fac:	9b02      	ldr	r3, [sp, #8]
    4fae:	6153      	str	r3, [r2, #20]
}
    4fb0:	bf00      	nop
    4fb2:	b004      	add	sp, #16
    4fb4:	4770      	bx	lr
    4fb6:	bf00      	nop
    4fb8:	00011834 	.word	0x00011834
    4fbc:	40064000 	.word	0x40064000

00004fc0 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4fc0:	b084      	sub	sp, #16
    4fc2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fc4:	9b01      	ldr	r3, [sp, #4]
    4fc6:	685b      	ldr	r3, [r3, #4]
    4fc8:	4a0b      	ldr	r2, [pc, #44]	; (4ff8 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4fca:	5cd3      	ldrb	r3, [r2, r3]
    4fcc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4fce:	4b0b      	ldr	r3, [pc, #44]	; (4ffc <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4fd0:	695b      	ldr	r3, [r3, #20]
    4fd2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4fd4:	9b02      	ldr	r3, [sp, #8]
    4fd6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4fda:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4fdc:	9b03      	ldr	r3, [sp, #12]
    4fde:	061b      	lsls	r3, r3, #24
    4fe0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4fe4:	9a02      	ldr	r2, [sp, #8]
    4fe6:	4313      	orrs	r3, r2
    4fe8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4fea:	4a04      	ldr	r2, [pc, #16]	; (4ffc <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4fec:	9b02      	ldr	r3, [sp, #8]
    4fee:	6153      	str	r3, [r2, #20]
}
    4ff0:	bf00      	nop
    4ff2:	b004      	add	sp, #16
    4ff4:	4770      	bx	lr
    4ff6:	bf00      	nop
    4ff8:	00011834 	.word	0x00011834
    4ffc:	40064000 	.word	0x40064000

00005000 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5000:	b084      	sub	sp, #16
    5002:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5004:	9b01      	ldr	r3, [sp, #4]
    5006:	685b      	ldr	r3, [r3, #4]
    5008:	4a0b      	ldr	r2, [pc, #44]	; (5038 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    500a:	5cd3      	ldrb	r3, [r2, r3]
    500c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    500e:	4b0b      	ldr	r3, [pc, #44]	; (503c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    5010:	699b      	ldr	r3, [r3, #24]
    5012:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    5014:	9b02      	ldr	r3, [sp, #8]
    5016:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    501a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    501c:	9b03      	ldr	r3, [sp, #12]
    501e:	061b      	lsls	r3, r3, #24
    5020:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5024:	9a02      	ldr	r2, [sp, #8]
    5026:	4313      	orrs	r3, r2
    5028:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    502a:	4a04      	ldr	r2, [pc, #16]	; (503c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    502c:	9b02      	ldr	r3, [sp, #8]
    502e:	6193      	str	r3, [r2, #24]
}
    5030:	bf00      	nop
    5032:	b004      	add	sp, #16
    5034:	4770      	bx	lr
    5036:	bf00      	nop
    5038:	00011834 	.word	0x00011834
    503c:	40064000 	.word	0x40064000

00005040 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5040:	b084      	sub	sp, #16
    5042:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5044:	4b0b      	ldr	r3, [pc, #44]	; (5074 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    5046:	795b      	ldrb	r3, [r3, #5]
    5048:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    504a:	4b0b      	ldr	r3, [pc, #44]	; (5078 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    504c:	69db      	ldr	r3, [r3, #28]
    504e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5050:	9b02      	ldr	r3, [sp, #8]
    5052:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5056:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    5058:	9b03      	ldr	r3, [sp, #12]
    505a:	061b      	lsls	r3, r3, #24
    505c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5060:	9a02      	ldr	r2, [sp, #8]
    5062:	4313      	orrs	r3, r2
    5064:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    5066:	4a04      	ldr	r2, [pc, #16]	; (5078 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5068:	9b02      	ldr	r3, [sp, #8]
    506a:	61d3      	str	r3, [r2, #28]
}
    506c:	bf00      	nop
    506e:	b004      	add	sp, #16
    5070:	4770      	bx	lr
    5072:	bf00      	nop
    5074:	00011834 	.word	0x00011834
    5078:	40064000 	.word	0x40064000

0000507c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    507c:	b084      	sub	sp, #16
    507e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5080:	9b01      	ldr	r3, [sp, #4]
    5082:	685b      	ldr	r3, [r3, #4]
    5084:	4a0b      	ldr	r2, [pc, #44]	; (50b4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    5086:	5cd3      	ldrb	r3, [r2, r3]
    5088:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    508a:	4b0b      	ldr	r3, [pc, #44]	; (50b8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    508c:	69db      	ldr	r3, [r3, #28]
    508e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5090:	9b02      	ldr	r3, [sp, #8]
    5092:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5096:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    5098:	9b03      	ldr	r3, [sp, #12]
    509a:	061b      	lsls	r3, r3, #24
    509c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    50a0:	9a02      	ldr	r2, [sp, #8]
    50a2:	4313      	orrs	r3, r2
    50a4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    50a6:	4a04      	ldr	r2, [pc, #16]	; (50b8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    50a8:	9b02      	ldr	r3, [sp, #8]
    50aa:	61d3      	str	r3, [r2, #28]
}
    50ac:	bf00      	nop
    50ae:	b004      	add	sp, #16
    50b0:	4770      	bx	lr
    50b2:	bf00      	nop
    50b4:	00011834 	.word	0x00011834
    50b8:	40064000 	.word	0x40064000

000050bc <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    50bc:	b084      	sub	sp, #16
    50be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    50c0:	4b0a      	ldr	r3, [pc, #40]	; (50ec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    50c2:	7b9b      	ldrb	r3, [r3, #14]
    50c4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    50c6:	4b0a      	ldr	r3, [pc, #40]	; (50f0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    50c8:	691b      	ldr	r3, [r3, #16]
    50ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    50cc:	9b02      	ldr	r3, [sp, #8]
    50ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    50d2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    50d4:	9b03      	ldr	r3, [sp, #12]
    50d6:	011b      	lsls	r3, r3, #4
    50d8:	9a02      	ldr	r2, [sp, #8]
    50da:	4313      	orrs	r3, r2
    50dc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    50de:	4a04      	ldr	r2, [pc, #16]	; (50f0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    50e0:	9b02      	ldr	r3, [sp, #8]
    50e2:	6113      	str	r3, [r2, #16]
}
    50e4:	bf00      	nop
    50e6:	b004      	add	sp, #16
    50e8:	4770      	bx	lr
    50ea:	bf00      	nop
    50ec:	000117dc 	.word	0x000117dc
    50f0:	40048000 	.word	0x40048000

000050f4 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    50f4:	b084      	sub	sp, #16
    50f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    50f8:	9b01      	ldr	r3, [sp, #4]
    50fa:	685b      	ldr	r3, [r3, #4]
    50fc:	4a0a      	ldr	r2, [pc, #40]	; (5128 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    50fe:	5cd3      	ldrb	r3, [r2, r3]
    5100:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    5102:	4b0a      	ldr	r3, [pc, #40]	; (512c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    5104:	691b      	ldr	r3, [r3, #16]
    5106:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    5108:	9b02      	ldr	r3, [sp, #8]
    510a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    510e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5110:	9b03      	ldr	r3, [sp, #12]
    5112:	011b      	lsls	r3, r3, #4
    5114:	9a02      	ldr	r2, [sp, #8]
    5116:	4313      	orrs	r3, r2
    5118:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    511a:	4a04      	ldr	r2, [pc, #16]	; (512c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    511c:	9b02      	ldr	r3, [sp, #8]
    511e:	6113      	str	r3, [r2, #16]
}
    5120:	bf00      	nop
    5122:	b004      	add	sp, #16
    5124:	4770      	bx	lr
    5126:	bf00      	nop
    5128:	000117dc 	.word	0x000117dc
    512c:	40048000 	.word	0x40048000

00005130 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5130:	b084      	sub	sp, #16
    5132:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5134:	4b0a      	ldr	r3, [pc, #40]	; (5160 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    5136:	785b      	ldrb	r3, [r3, #1]
    5138:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    513a:	4b0a      	ldr	r3, [pc, #40]	; (5164 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    513c:	691b      	ldr	r3, [r3, #16]
    513e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5140:	9b02      	ldr	r3, [sp, #8]
    5142:	f023 030c 	bic.w	r3, r3, #12
    5146:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5148:	9b03      	ldr	r3, [sp, #12]
    514a:	009b      	lsls	r3, r3, #2
    514c:	9a02      	ldr	r2, [sp, #8]
    514e:	4313      	orrs	r3, r2
    5150:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5152:	4a04      	ldr	r2, [pc, #16]	; (5164 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5154:	9b02      	ldr	r3, [sp, #8]
    5156:	6113      	str	r3, [r2, #16]
}
    5158:	bf00      	nop
    515a:	b004      	add	sp, #16
    515c:	4770      	bx	lr
    515e:	bf00      	nop
    5160:	00011894 	.word	0x00011894
    5164:	40048000 	.word	0x40048000

00005168 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5168:	b084      	sub	sp, #16
    516a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    516c:	9b01      	ldr	r3, [sp, #4]
    516e:	685b      	ldr	r3, [r3, #4]
    5170:	4a0a      	ldr	r2, [pc, #40]	; (519c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    5172:	5cd3      	ldrb	r3, [r2, r3]
    5174:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    5176:	4b0a      	ldr	r3, [pc, #40]	; (51a0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5178:	691b      	ldr	r3, [r3, #16]
    517a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    517c:	9b02      	ldr	r3, [sp, #8]
    517e:	f023 030c 	bic.w	r3, r3, #12
    5182:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5184:	9b03      	ldr	r3, [sp, #12]
    5186:	009b      	lsls	r3, r3, #2
    5188:	9a02      	ldr	r2, [sp, #8]
    518a:	4313      	orrs	r3, r2
    518c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    518e:	4a04      	ldr	r2, [pc, #16]	; (51a0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5190:	9b02      	ldr	r3, [sp, #8]
    5192:	6113      	str	r3, [r2, #16]
}
    5194:	bf00      	nop
    5196:	b004      	add	sp, #16
    5198:	4770      	bx	lr
    519a:	bf00      	nop
    519c:	00011894 	.word	0x00011894
    51a0:	40048000 	.word	0x40048000

000051a4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51a4:	b084      	sub	sp, #16
    51a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51a8:	4b0a      	ldr	r3, [pc, #40]	; (51d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    51aa:	795b      	ldrb	r3, [r3, #5]
    51ac:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    51ae:	4b0a      	ldr	r3, [pc, #40]	; (51d8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    51b0:	6a1b      	ldr	r3, [r3, #32]
    51b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    51b4:	9b02      	ldr	r3, [sp, #8]
    51b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    51ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    51bc:	9b03      	ldr	r3, [sp, #12]
    51be:	061b      	lsls	r3, r3, #24
    51c0:	9a02      	ldr	r2, [sp, #8]
    51c2:	4313      	orrs	r3, r2
    51c4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    51c6:	4a04      	ldr	r2, [pc, #16]	; (51d8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    51c8:	9b02      	ldr	r3, [sp, #8]
    51ca:	6213      	str	r3, [r2, #32]
}
    51cc:	bf00      	nop
    51ce:	b004      	add	sp, #16
    51d0:	4770      	bx	lr
    51d2:	bf00      	nop
    51d4:	00011834 	.word	0x00011834
    51d8:	40064000 	.word	0x40064000

000051dc <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51dc:	b084      	sub	sp, #16
    51de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51e0:	9b01      	ldr	r3, [sp, #4]
    51e2:	685b      	ldr	r3, [r3, #4]
    51e4:	4a0a      	ldr	r2, [pc, #40]	; (5210 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    51e6:	5cd3      	ldrb	r3, [r2, r3]
    51e8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    51ea:	4b0a      	ldr	r3, [pc, #40]	; (5214 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    51ec:	6a1b      	ldr	r3, [r3, #32]
    51ee:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    51f0:	9b02      	ldr	r3, [sp, #8]
    51f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    51f6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    51f8:	9b03      	ldr	r3, [sp, #12]
    51fa:	061b      	lsls	r3, r3, #24
    51fc:	9a02      	ldr	r2, [sp, #8]
    51fe:	4313      	orrs	r3, r2
    5200:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    5202:	4a04      	ldr	r2, [pc, #16]	; (5214 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    5204:	9b02      	ldr	r3, [sp, #8]
    5206:	6213      	str	r3, [r2, #32]
}
    5208:	bf00      	nop
    520a:	b004      	add	sp, #16
    520c:	4770      	bx	lr
    520e:	bf00      	nop
    5210:	00011834 	.word	0x00011834
    5214:	40064000 	.word	0x40064000

00005218 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5218:	b086      	sub	sp, #24
    521a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    521c:	4b20      	ldr	r3, [pc, #128]	; (52a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    521e:	795b      	ldrb	r3, [r3, #5]
    5220:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    5222:	9b01      	ldr	r3, [sp, #4]
    5224:	681a      	ldr	r2, [r3, #0]
    5226:	491f      	ldr	r1, [pc, #124]	; (52a4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    5228:	4613      	mov	r3, r2
    522a:	00db      	lsls	r3, r3, #3
    522c:	4413      	add	r3, r2
    522e:	440b      	add	r3, r1
    5230:	781b      	ldrb	r3, [r3, #0]
    5232:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5234:	4b1c      	ldr	r3, [pc, #112]	; (52a8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5236:	68db      	ldr	r3, [r3, #12]
    5238:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    523a:	9b03      	ldr	r3, [sp, #12]
    523c:	2b03      	cmp	r3, #3
    523e:	d813      	bhi.n	5268 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    5240:	9b03      	ldr	r3, [sp, #12]
    5242:	005b      	lsls	r3, r3, #1
    5244:	3318      	adds	r3, #24
    5246:	2203      	movs	r2, #3
    5248:	fa02 f303 	lsl.w	r3, r2, r3
    524c:	43db      	mvns	r3, r3
    524e:	9a05      	ldr	r2, [sp, #20]
    5250:	4013      	ands	r3, r2
    5252:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5254:	9b03      	ldr	r3, [sp, #12]
    5256:	005b      	lsls	r3, r3, #1
    5258:	3318      	adds	r3, #24
    525a:	9a04      	ldr	r2, [sp, #16]
    525c:	fa02 f303 	lsl.w	r3, r2, r3
    5260:	9a05      	ldr	r2, [sp, #20]
    5262:	4313      	orrs	r3, r2
    5264:	9305      	str	r3, [sp, #20]
    5266:	e014      	b.n	5292 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5268:	9b03      	ldr	r3, [sp, #12]
    526a:	3b04      	subs	r3, #4
    526c:	005b      	lsls	r3, r3, #1
    526e:	3310      	adds	r3, #16
    5270:	2203      	movs	r2, #3
    5272:	fa02 f303 	lsl.w	r3, r2, r3
    5276:	43db      	mvns	r3, r3
    5278:	9a05      	ldr	r2, [sp, #20]
    527a:	4013      	ands	r3, r2
    527c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    527e:	9b03      	ldr	r3, [sp, #12]
    5280:	3b04      	subs	r3, #4
    5282:	005b      	lsls	r3, r3, #1
    5284:	3310      	adds	r3, #16
    5286:	9a04      	ldr	r2, [sp, #16]
    5288:	fa02 f303 	lsl.w	r3, r2, r3
    528c:	9a05      	ldr	r2, [sp, #20]
    528e:	4313      	orrs	r3, r2
    5290:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    5292:	4a05      	ldr	r2, [pc, #20]	; (52a8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5294:	9b05      	ldr	r3, [sp, #20]
    5296:	60d3      	str	r3, [r2, #12]
}
    5298:	bf00      	nop
    529a:	b006      	add	sp, #24
    529c:	4770      	bx	lr
    529e:	bf00      	nop
    52a0:	000117dc 	.word	0x000117dc
    52a4:	000114cc 	.word	0x000114cc
    52a8:	40048000 	.word	0x40048000

000052ac <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52ac:	b086      	sub	sp, #24
    52ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    52b0:	9b01      	ldr	r3, [sp, #4]
    52b2:	685b      	ldr	r3, [r3, #4]
    52b4:	4a20      	ldr	r2, [pc, #128]	; (5338 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    52b6:	5cd3      	ldrb	r3, [r2, r3]
    52b8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    52ba:	9b01      	ldr	r3, [sp, #4]
    52bc:	681a      	ldr	r2, [r3, #0]
    52be:	491f      	ldr	r1, [pc, #124]	; (533c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    52c0:	4613      	mov	r3, r2
    52c2:	00db      	lsls	r3, r3, #3
    52c4:	4413      	add	r3, r2
    52c6:	440b      	add	r3, r1
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    52cc:	4b1c      	ldr	r3, [pc, #112]	; (5340 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    52ce:	68db      	ldr	r3, [r3, #12]
    52d0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    52d2:	9b03      	ldr	r3, [sp, #12]
    52d4:	2b03      	cmp	r3, #3
    52d6:	d813      	bhi.n	5300 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    52d8:	9b03      	ldr	r3, [sp, #12]
    52da:	005b      	lsls	r3, r3, #1
    52dc:	3318      	adds	r3, #24
    52de:	2203      	movs	r2, #3
    52e0:	fa02 f303 	lsl.w	r3, r2, r3
    52e4:	43db      	mvns	r3, r3
    52e6:	9a05      	ldr	r2, [sp, #20]
    52e8:	4013      	ands	r3, r2
    52ea:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    52ec:	9b03      	ldr	r3, [sp, #12]
    52ee:	005b      	lsls	r3, r3, #1
    52f0:	3318      	adds	r3, #24
    52f2:	9a04      	ldr	r2, [sp, #16]
    52f4:	fa02 f303 	lsl.w	r3, r2, r3
    52f8:	9a05      	ldr	r2, [sp, #20]
    52fa:	4313      	orrs	r3, r2
    52fc:	9305      	str	r3, [sp, #20]
    52fe:	e014      	b.n	532a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5300:	9b03      	ldr	r3, [sp, #12]
    5302:	3b04      	subs	r3, #4
    5304:	005b      	lsls	r3, r3, #1
    5306:	3310      	adds	r3, #16
    5308:	2203      	movs	r2, #3
    530a:	fa02 f303 	lsl.w	r3, r2, r3
    530e:	43db      	mvns	r3, r3
    5310:	9a05      	ldr	r2, [sp, #20]
    5312:	4013      	ands	r3, r2
    5314:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    5316:	9b03      	ldr	r3, [sp, #12]
    5318:	3b04      	subs	r3, #4
    531a:	005b      	lsls	r3, r3, #1
    531c:	3310      	adds	r3, #16
    531e:	9a04      	ldr	r2, [sp, #16]
    5320:	fa02 f303 	lsl.w	r3, r2, r3
    5324:	9a05      	ldr	r2, [sp, #20]
    5326:	4313      	orrs	r3, r2
    5328:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    532a:	4a05      	ldr	r2, [pc, #20]	; (5340 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    532c:	9b05      	ldr	r3, [sp, #20]
    532e:	60d3      	str	r3, [r2, #12]
}
    5330:	bf00      	nop
    5332:	b006      	add	sp, #24
    5334:	4770      	bx	lr
    5336:	bf00      	nop
    5338:	000117dc 	.word	0x000117dc
    533c:	000114cc 	.word	0x000114cc
    5340:	40048000 	.word	0x40048000

00005344 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5344:	b084      	sub	sp, #16
    5346:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    5348:	4b06      	ldr	r3, [pc, #24]	; (5364 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    534a:	685b      	ldr	r3, [r3, #4]
    534c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    534e:	9b03      	ldr	r3, [sp, #12]
    5350:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    5354:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    5356:	4a03      	ldr	r2, [pc, #12]	; (5364 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    5358:	9b03      	ldr	r3, [sp, #12]
    535a:	6053      	str	r3, [r2, #4]
}
    535c:	bf00      	nop
    535e:	b004      	add	sp, #16
    5360:	4770      	bx	lr
    5362:	bf00      	nop
    5364:	40048000 	.word	0x40048000

00005368 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5368:	b084      	sub	sp, #16
    536a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    536c:	9b01      	ldr	r3, [sp, #4]
    536e:	685b      	ldr	r3, [r3, #4]
    5370:	4a0a      	ldr	r2, [pc, #40]	; (539c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    5372:	5cd3      	ldrb	r3, [r2, r3]
    5374:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    5376:	4b0a      	ldr	r3, [pc, #40]	; (53a0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5378:	685b      	ldr	r3, [r3, #4]
    537a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    537c:	9b02      	ldr	r3, [sp, #8]
    537e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    5382:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    5384:	9b03      	ldr	r3, [sp, #12]
    5386:	011b      	lsls	r3, r3, #4
    5388:	9a02      	ldr	r2, [sp, #8]
    538a:	4313      	orrs	r3, r2
    538c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    538e:	4a04      	ldr	r2, [pc, #16]	; (53a0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5390:	9b02      	ldr	r3, [sp, #8]
    5392:	6053      	str	r3, [r2, #4]
}
    5394:	bf00      	nop
    5396:	b004      	add	sp, #16
    5398:	4770      	bx	lr
    539a:	bf00      	nop
    539c:	000117dc 	.word	0x000117dc
    53a0:	40048000 	.word	0x40048000

000053a4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53a4:	b084      	sub	sp, #16
    53a6:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    53a8:	9b01      	ldr	r3, [sp, #4]
    53aa:	681a      	ldr	r2, [r3, #0]
    53ac:	490f      	ldr	r1, [pc, #60]	; (53ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    53ae:	4613      	mov	r3, r2
    53b0:	00db      	lsls	r3, r3, #3
    53b2:	4413      	add	r3, r2
    53b4:	440b      	add	r3, r1
    53b6:	3304      	adds	r3, #4
    53b8:	781b      	ldrb	r3, [r3, #0]
    53ba:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    53bc:	4a0c      	ldr	r2, [pc, #48]	; (53f0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    53be:	9b03      	ldr	r3, [sp, #12]
    53c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53c4:	490a      	ldr	r1, [pc, #40]	; (53f0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    53c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    53ca:	9b03      	ldr	r3, [sp, #12]
    53cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    53d0:	4a07      	ldr	r2, [pc, #28]	; (53f0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    53d2:	9b03      	ldr	r3, [sp, #12]
    53d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53d8:	4905      	ldr	r1, [pc, #20]	; (53f0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    53da:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    53de:	9b03      	ldr	r3, [sp, #12]
    53e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    53e4:	bf00      	nop
    53e6:	b004      	add	sp, #16
    53e8:	4770      	bx	lr
    53ea:	bf00      	nop
    53ec:	000114cc 	.word	0x000114cc
    53f0:	40065000 	.word	0x40065000

000053f4 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53f4:	b086      	sub	sp, #24
    53f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    53f8:	9b01      	ldr	r3, [sp, #4]
    53fa:	681a      	ldr	r2, [r3, #0]
    53fc:	4912      	ldr	r1, [pc, #72]	; (5448 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    53fe:	4613      	mov	r3, r2
    5400:	00db      	lsls	r3, r3, #3
    5402:	4413      	add	r3, r2
    5404:	440b      	add	r3, r1
    5406:	3304      	adds	r3, #4
    5408:	781b      	ldrb	r3, [r3, #0]
    540a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    540c:	9b01      	ldr	r3, [sp, #4]
    540e:	685b      	ldr	r3, [r3, #4]
    5410:	4a0e      	ldr	r2, [pc, #56]	; (544c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    5412:	5cd3      	ldrb	r3, [r2, r3]
    5414:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    5416:	4a0e      	ldr	r2, [pc, #56]	; (5450 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    5418:	9b05      	ldr	r3, [sp, #20]
    541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    541e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    5420:	9b03      	ldr	r3, [sp, #12]
    5422:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    5426:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    5428:	9b04      	ldr	r3, [sp, #16]
    542a:	061b      	lsls	r3, r3, #24
    542c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    5430:	9a03      	ldr	r2, [sp, #12]
    5432:	4313      	orrs	r3, r2
    5434:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    5436:	4906      	ldr	r1, [pc, #24]	; (5450 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    5438:	9b05      	ldr	r3, [sp, #20]
    543a:	9a03      	ldr	r2, [sp, #12]
    543c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5440:	bf00      	nop
    5442:	b006      	add	sp, #24
    5444:	4770      	bx	lr
    5446:	bf00      	nop
    5448:	000114cc 	.word	0x000114cc
    544c:	00011864 	.word	0x00011864
    5450:	40065000 	.word	0x40065000

00005454 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5454:	b084      	sub	sp, #16
    5456:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5458:	4b0b      	ldr	r3, [pc, #44]	; (5488 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    545a:	7f1b      	ldrb	r3, [r3, #28]
    545c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    545e:	4b0b      	ldr	r3, [pc, #44]	; (548c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5460:	685b      	ldr	r3, [r3, #4]
    5462:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5464:	9b02      	ldr	r3, [sp, #8]
    5466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    546a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    546c:	9b03      	ldr	r3, [sp, #12]
    546e:	031b      	lsls	r3, r3, #12
    5470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5474:	9a02      	ldr	r2, [sp, #8]
    5476:	4313      	orrs	r3, r2
    5478:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    547a:	4a04      	ldr	r2, [pc, #16]	; (548c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    547c:	9b02      	ldr	r3, [sp, #8]
    547e:	6053      	str	r3, [r2, #4]
}
    5480:	bf00      	nop
    5482:	b004      	add	sp, #16
    5484:	4770      	bx	lr
    5486:	bf00      	nop
    5488:	000117dc 	.word	0x000117dc
    548c:	40048000 	.word	0x40048000

00005490 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5490:	b084      	sub	sp, #16
    5492:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5494:	9b01      	ldr	r3, [sp, #4]
    5496:	685b      	ldr	r3, [r3, #4]
    5498:	4a0b      	ldr	r2, [pc, #44]	; (54c8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    549a:	5cd3      	ldrb	r3, [r2, r3]
    549c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    549e:	4b0b      	ldr	r3, [pc, #44]	; (54cc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    54a0:	685b      	ldr	r3, [r3, #4]
    54a2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    54a4:	9b02      	ldr	r3, [sp, #8]
    54a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    54aa:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    54ac:	9b03      	ldr	r3, [sp, #12]
    54ae:	031b      	lsls	r3, r3, #12
    54b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    54b4:	9a02      	ldr	r2, [sp, #8]
    54b6:	4313      	orrs	r3, r2
    54b8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    54ba:	4a04      	ldr	r2, [pc, #16]	; (54cc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    54bc:	9b02      	ldr	r3, [sp, #8]
    54be:	6053      	str	r3, [r2, #4]
}
    54c0:	bf00      	nop
    54c2:	b004      	add	sp, #16
    54c4:	4770      	bx	lr
    54c6:	bf00      	nop
    54c8:	000117dc 	.word	0x000117dc
    54cc:	40048000 	.word	0x40048000

000054d0 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    54d0:	b500      	push	{lr}
    54d2:	b085      	sub	sp, #20
    54d4:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    54d6:	2300      	movs	r3, #0
    54d8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    54dc:	9b01      	ldr	r3, [sp, #4]
    54de:	2b00      	cmp	r3, #0
    54e0:	d037      	beq.n	5552 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    54e2:	2300      	movs	r3, #0
    54e4:	9303      	str	r3, [sp, #12]
    54e6:	e02b      	b.n	5540 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    54e8:	4b29      	ldr	r3, [pc, #164]	; (5590 <DisableSafeClock+0xc0>)
    54ea:	6819      	ldr	r1, [r3, #0]
    54ec:	9a03      	ldr	r2, [sp, #12]
    54ee:	4613      	mov	r3, r2
    54f0:	005b      	lsls	r3, r3, #1
    54f2:	4413      	add	r3, r2
    54f4:	009b      	lsls	r3, r3, #2
    54f6:	440b      	add	r3, r1
    54f8:	3314      	adds	r3, #20
    54fa:	681b      	ldr	r3, [r3, #0]
    54fc:	2b05      	cmp	r3, #5
    54fe:	d11c      	bne.n	553a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    5500:	2301      	movs	r3, #1
    5502:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    5506:	4b22      	ldr	r3, [pc, #136]	; (5590 <DisableSafeClock+0xc0>)
    5508:	6819      	ldr	r1, [r3, #0]
    550a:	9a03      	ldr	r2, [sp, #12]
    550c:	4613      	mov	r3, r2
    550e:	005b      	lsls	r3, r3, #1
    5510:	4413      	add	r3, r2
    5512:	009b      	lsls	r3, r3, #2
    5514:	440b      	add	r3, r1
    5516:	3318      	adds	r3, #24
    5518:	881b      	ldrh	r3, [r3, #0]
    551a:	2b00      	cmp	r3, #0
    551c:	d118      	bne.n	5550 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    551e:	4b1d      	ldr	r3, [pc, #116]	; (5594 <DisableSafeClock+0xc4>)
    5520:	791b      	ldrb	r3, [r3, #4]
    5522:	4619      	mov	r1, r3
    5524:	4a1c      	ldr	r2, [pc, #112]	; (5598 <DisableSafeClock+0xc8>)
    5526:	460b      	mov	r3, r1
    5528:	005b      	lsls	r3, r3, #1
    552a:	440b      	add	r3, r1
    552c:	009b      	lsls	r3, r3, #2
    552e:	4413      	add	r3, r2
    5530:	3308      	adds	r3, #8
    5532:	681b      	ldr	r3, [r3, #0]
    5534:	2005      	movs	r0, #5
    5536:	4798      	blx	r3
                }
                break;
    5538:	e00a      	b.n	5550 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    553a:	9b03      	ldr	r3, [sp, #12]
    553c:	3301      	adds	r3, #1
    553e:	9303      	str	r3, [sp, #12]
    5540:	4b13      	ldr	r3, [pc, #76]	; (5590 <DisableSafeClock+0xc0>)
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	7a1b      	ldrb	r3, [r3, #8]
    5546:	461a      	mov	r2, r3
    5548:	9b03      	ldr	r3, [sp, #12]
    554a:	4293      	cmp	r3, r2
    554c:	d3cc      	bcc.n	54e8 <DisableSafeClock+0x18>
    554e:	e000      	b.n	5552 <DisableSafeClock+0x82>
                break;
    5550:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    5552:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5556:	f083 0301 	eor.w	r3, r3, #1
    555a:	b2db      	uxtb	r3, r3
    555c:	2b00      	cmp	r3, #0
    555e:	d013      	beq.n	5588 <DisableSafeClock+0xb8>
    5560:	4b0e      	ldr	r3, [pc, #56]	; (559c <DisableSafeClock+0xcc>)
    5562:	781b      	ldrb	r3, [r3, #0]
    5564:	f083 0301 	eor.w	r3, r3, #1
    5568:	b2db      	uxtb	r3, r3
    556a:	2b00      	cmp	r3, #0
    556c:	d00c      	beq.n	5588 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    556e:	4b09      	ldr	r3, [pc, #36]	; (5594 <DisableSafeClock+0xc4>)
    5570:	791b      	ldrb	r3, [r3, #4]
    5572:	4619      	mov	r1, r3
    5574:	4a08      	ldr	r2, [pc, #32]	; (5598 <DisableSafeClock+0xc8>)
    5576:	460b      	mov	r3, r1
    5578:	005b      	lsls	r3, r3, #1
    557a:	440b      	add	r3, r1
    557c:	009b      	lsls	r3, r3, #2
    557e:	4413      	add	r3, r2
    5580:	3308      	adds	r3, #8
    5582:	681b      	ldr	r3, [r3, #0]
    5584:	2005      	movs	r0, #5
    5586:	4798      	blx	r3
    }
}
    5588:	bf00      	nop
    558a:	b005      	add	sp, #20
    558c:	f85d fb04 	ldr.w	pc, [sp], #4
    5590:	1fff8bb8 	.word	0x1fff8bb8
    5594:	0001145c 	.word	0x0001145c
    5598:	00011a8c 	.word	0x00011a8c
    559c:	1fff8b18 	.word	0x1fff8b18

000055a0 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    55a0:	4b06      	ldr	r3, [pc, #24]	; (55bc <SetFircToResetValue_TrustedCall+0x1c>)
    55a2:	2200      	movs	r2, #0
    55a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    55a8:	4b04      	ldr	r3, [pc, #16]	; (55bc <SetFircToResetValue_TrustedCall+0x1c>)
    55aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    55ae:	4a03      	ldr	r2, [pc, #12]	; (55bc <SetFircToResetValue_TrustedCall+0x1c>)
    55b0:	f043 0301 	orr.w	r3, r3, #1
    55b4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    55b8:	bf00      	nop
    55ba:	4770      	bx	lr
    55bc:	40064000 	.word	0x40064000

000055c0 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    55c0:	b084      	sub	sp, #16
    55c2:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    55c4:	2303      	movs	r3, #3
    55c6:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    55c8:	2300      	movs	r3, #0
    55ca:	9302      	str	r3, [sp, #8]
    55cc:	e028      	b.n	5620 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    55ce:	9b01      	ldr	r3, [sp, #4]
    55d0:	9a02      	ldr	r2, [sp, #8]
    55d2:	320d      	adds	r2, #13
    55d4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    55d8:	2b28      	cmp	r3, #40	; 0x28
    55da:	d10b      	bne.n	55f4 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    55dc:	9a01      	ldr	r2, [sp, #4]
    55de:	9b02      	ldr	r3, [sp, #8]
    55e0:	330d      	adds	r3, #13
    55e2:	00db      	lsls	r3, r3, #3
    55e4:	4413      	add	r3, r2
    55e6:	685b      	ldr	r3, [r3, #4]
    55e8:	4a2b      	ldr	r2, [pc, #172]	; (5698 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    55ea:	5cd3      	ldrb	r3, [r2, r3]
    55ec:	011b      	lsls	r3, r3, #4
    55ee:	9a03      	ldr	r2, [sp, #12]
    55f0:	4313      	orrs	r3, r2
    55f2:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    55f4:	9b01      	ldr	r3, [sp, #4]
    55f6:	9a02      	ldr	r2, [sp, #8]
    55f8:	320d      	adds	r2, #13
    55fa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    55fe:	2b29      	cmp	r3, #41	; 0x29
    5600:	d10b      	bne.n	561a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5602:	9a01      	ldr	r2, [sp, #4]
    5604:	9b02      	ldr	r3, [sp, #8]
    5606:	330d      	adds	r3, #13
    5608:	00db      	lsls	r3, r3, #3
    560a:	4413      	add	r3, r2
    560c:	685b      	ldr	r3, [r3, #4]
    560e:	4a23      	ldr	r2, [pc, #140]	; (569c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    5610:	5cd3      	ldrb	r3, [r2, r3]
    5612:	009b      	lsls	r3, r3, #2
    5614:	9a03      	ldr	r2, [sp, #12]
    5616:	4313      	orrs	r3, r2
    5618:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    561a:	9b02      	ldr	r3, [sp, #8]
    561c:	3301      	adds	r3, #1
    561e:	9302      	str	r3, [sp, #8]
    5620:	9b01      	ldr	r3, [sp, #4]
    5622:	7adb      	ldrb	r3, [r3, #11]
    5624:	461a      	mov	r2, r3
    5626:	9b02      	ldr	r3, [sp, #8]
    5628:	4293      	cmp	r3, r2
    562a:	d3d0      	bcc.n	55ce <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    562c:	2300      	movs	r3, #0
    562e:	9302      	str	r3, [sp, #8]
    5630:	e026      	b.n	5680 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    5632:	9a01      	ldr	r2, [sp, #4]
    5634:	9b02      	ldr	r3, [sp, #8]
    5636:	334e      	adds	r3, #78	; 0x4e
    5638:	00db      	lsls	r3, r3, #3
    563a:	4413      	add	r3, r2
    563c:	685b      	ldr	r3, [r3, #4]
    563e:	2b12      	cmp	r3, #18
    5640:	d109      	bne.n	5656 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    5642:	9a01      	ldr	r2, [sp, #4]
    5644:	9b02      	ldr	r3, [sp, #8]
    5646:	334e      	adds	r3, #78	; 0x4e
    5648:	00db      	lsls	r3, r3, #3
    564a:	4413      	add	r3, r2
    564c:	891b      	ldrh	r3, [r3, #8]
    564e:	005b      	lsls	r3, r3, #1
    5650:	9a03      	ldr	r2, [sp, #12]
    5652:	4313      	orrs	r3, r2
    5654:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    5656:	9a01      	ldr	r2, [sp, #4]
    5658:	9b02      	ldr	r3, [sp, #8]
    565a:	334e      	adds	r3, #78	; 0x4e
    565c:	00db      	lsls	r3, r3, #3
    565e:	4413      	add	r3, r2
    5660:	685b      	ldr	r3, [r3, #4]
    5662:	2b13      	cmp	r3, #19
    5664:	d109      	bne.n	567a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    5666:	9a01      	ldr	r2, [sp, #4]
    5668:	9b02      	ldr	r3, [sp, #8]
    566a:	334e      	adds	r3, #78	; 0x4e
    566c:	00db      	lsls	r3, r3, #3
    566e:	4413      	add	r3, r2
    5670:	891b      	ldrh	r3, [r3, #8]
    5672:	461a      	mov	r2, r3
    5674:	9b03      	ldr	r3, [sp, #12]
    5676:	4313      	orrs	r3, r2
    5678:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    567a:	9b02      	ldr	r3, [sp, #8]
    567c:	3301      	adds	r3, #1
    567e:	9302      	str	r3, [sp, #8]
    5680:	9b01      	ldr	r3, [sp, #4]
    5682:	7c1b      	ldrb	r3, [r3, #16]
    5684:	461a      	mov	r2, r3
    5686:	9b02      	ldr	r3, [sp, #8]
    5688:	4293      	cmp	r3, r2
    568a:	d3d2      	bcc.n	5632 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    568c:	4a04      	ldr	r2, [pc, #16]	; (56a0 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    568e:	9b03      	ldr	r3, [sp, #12]
    5690:	6113      	str	r3, [r2, #16]
}
    5692:	bf00      	nop
    5694:	b004      	add	sp, #16
    5696:	4770      	bx	lr
    5698:	000117dc 	.word	0x000117dc
    569c:	00011894 	.word	0x00011894
    56a0:	40048000 	.word	0x40048000

000056a4 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    56a4:	b500      	push	{lr}
    56a6:	b089      	sub	sp, #36	; 0x24
    56a8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    56aa:	2300      	movs	r3, #0
    56ac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    56b0:	4a21      	ldr	r2, [pc, #132]	; (5738 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    56b6:	4b21      	ldr	r3, [pc, #132]	; (573c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    56b8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    56bc:	f003 0301 	and.w	r3, r3, #1
    56c0:	2b00      	cmp	r3, #0
    56c2:	d12e      	bne.n	5722 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    56c4:	4b1e      	ldr	r3, [pc, #120]	; (5740 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    56c6:	2200      	movs	r2, #0
    56c8:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    56ca:	f7ff ff69 	bl	55a0 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    56ce:	aa03      	add	r2, sp, #12
    56d0:	a904      	add	r1, sp, #16
    56d2:	a805      	add	r0, sp, #20
    56d4:	f24c 3350 	movw	r3, #50000	; 0xc350
    56d8:	f7fe f8ae 	bl	3838 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    56dc:	4b17      	ldr	r3, [pc, #92]	; (573c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    56de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    56e2:	0e1b      	lsrs	r3, r3, #24
    56e4:	f003 0301 	and.w	r3, r3, #1
    56e8:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    56ea:	9a03      	ldr	r2, [sp, #12]
    56ec:	a904      	add	r1, sp, #16
    56ee:	ab05      	add	r3, sp, #20
    56f0:	4618      	mov	r0, r3
    56f2:	f7fe f8bb 	bl	386c <Clock_Ip_TimeoutExpired>
    56f6:	4603      	mov	r3, r0
    56f8:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    56fc:	9b06      	ldr	r3, [sp, #24]
    56fe:	2b00      	cmp	r3, #0
    5700:	d106      	bne.n	5710 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    5702:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5706:	f083 0301 	eor.w	r3, r3, #1
    570a:	b2db      	uxtb	r3, r3
    570c:	2b00      	cmp	r3, #0
    570e:	d1e5      	bne.n	56dc <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    5710:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5714:	2b00      	cmp	r3, #0
    5716:	d007      	beq.n	5728 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    5718:	2105      	movs	r1, #5
    571a:	2001      	movs	r0, #1
    571c:	f7fe f87c 	bl	3818 <Clock_Ip_ReportClockErrors>
    5720:	e002      	b.n	5728 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    5722:	4b07      	ldr	r3, [pc, #28]	; (5740 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    5724:	2201      	movs	r2, #1
    5726:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    5728:	9801      	ldr	r0, [sp, #4]
    572a:	f7ff ff49 	bl	55c0 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    572e:	bf00      	nop
    5730:	b009      	add	sp, #36	; 0x24
    5732:	f85d fb04 	ldr.w	pc, [sp], #4
    5736:	bf00      	nop
    5738:	1fff8bb8 	.word	0x1fff8bb8
    573c:	40064000 	.word	0x40064000
    5740:	1fff8b18 	.word	0x1fff8b18

00005744 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    5744:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    5746:	2300      	movs	r3, #0
    5748:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    574a:	4b29      	ldr	r3, [pc, #164]	; (57f0 <getFircConfig+0xac>)
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	2b00      	cmp	r3, #0
    5750:	d024      	beq.n	579c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5752:	2300      	movs	r3, #0
    5754:	9301      	str	r3, [sp, #4]
    5756:	e01a      	b.n	578e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5758:	4b25      	ldr	r3, [pc, #148]	; (57f0 <getFircConfig+0xac>)
    575a:	6819      	ldr	r1, [r3, #0]
    575c:	9a01      	ldr	r2, [sp, #4]
    575e:	4613      	mov	r3, r2
    5760:	005b      	lsls	r3, r3, #1
    5762:	4413      	add	r3, r2
    5764:	009b      	lsls	r3, r3, #2
    5766:	440b      	add	r3, r1
    5768:	3314      	adds	r3, #20
    576a:	681b      	ldr	r3, [r3, #0]
    576c:	2b05      	cmp	r3, #5
    576e:	d10b      	bne.n	5788 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5770:	4b1f      	ldr	r3, [pc, #124]	; (57f0 <getFircConfig+0xac>)
    5772:	6819      	ldr	r1, [r3, #0]
    5774:	9a01      	ldr	r2, [sp, #4]
    5776:	4613      	mov	r3, r2
    5778:	005b      	lsls	r3, r3, #1
    577a:	4413      	add	r3, r2
    577c:	009b      	lsls	r3, r3, #2
    577e:	3310      	adds	r3, #16
    5780:	440b      	add	r3, r1
    5782:	3304      	adds	r3, #4
    5784:	9300      	str	r3, [sp, #0]
                break;
    5786:	e009      	b.n	579c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5788:	9b01      	ldr	r3, [sp, #4]
    578a:	3301      	adds	r3, #1
    578c:	9301      	str	r3, [sp, #4]
    578e:	4b18      	ldr	r3, [pc, #96]	; (57f0 <getFircConfig+0xac>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	7a1b      	ldrb	r3, [r3, #8]
    5794:	461a      	mov	r2, r3
    5796:	9b01      	ldr	r3, [sp, #4]
    5798:	4293      	cmp	r3, r2
    579a:	d3dd      	bcc.n	5758 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    579c:	9b00      	ldr	r3, [sp, #0]
    579e:	2b00      	cmp	r3, #0
    57a0:	d121      	bne.n	57e6 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    57a2:	4b14      	ldr	r3, [pc, #80]	; (57f4 <getFircConfig+0xb0>)
    57a4:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    57a6:	4b13      	ldr	r3, [pc, #76]	; (57f4 <getFircConfig+0xb0>)
    57a8:	2205      	movs	r2, #5
    57aa:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    57ac:	4b12      	ldr	r3, [pc, #72]	; (57f8 <getFircConfig+0xb4>)
    57ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    57b2:	b29b      	uxth	r3, r3
    57b4:	f003 0301 	and.w	r3, r3, #1
    57b8:	b29a      	uxth	r2, r3
    57ba:	4b0e      	ldr	r3, [pc, #56]	; (57f4 <getFircConfig+0xb0>)
    57bc:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    57be:	4b0e      	ldr	r3, [pc, #56]	; (57f8 <getFircConfig+0xb4>)
    57c0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    57c4:	b2db      	uxtb	r3, r3
    57c6:	f003 0303 	and.w	r3, r3, #3
    57ca:	b2da      	uxtb	r2, r3
    57cc:	4b09      	ldr	r3, [pc, #36]	; (57f4 <getFircConfig+0xb0>)
    57ce:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    57d0:	4b09      	ldr	r3, [pc, #36]	; (57f8 <getFircConfig+0xb4>)
    57d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    57d6:	b2db      	uxtb	r3, r3
    57d8:	10db      	asrs	r3, r3, #3
    57da:	b2db      	uxtb	r3, r3
    57dc:	f003 0301 	and.w	r3, r3, #1
    57e0:	b2da      	uxtb	r2, r3
    57e2:	4b04      	ldr	r3, [pc, #16]	; (57f4 <getFircConfig+0xb0>)
    57e4:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    57e6:	9b00      	ldr	r3, [sp, #0]
}
    57e8:	4618      	mov	r0, r3
    57ea:	b002      	add	sp, #8
    57ec:	4770      	bx	lr
    57ee:	bf00      	nop
    57f0:	1fff8bb8 	.word	0x1fff8bb8
    57f4:	1fff8c24 	.word	0x1fff8c24
    57f8:	40064000 	.word	0x40064000

000057fc <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    57fc:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    57fe:	2300      	movs	r3, #0
    5800:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5802:	4b20      	ldr	r3, [pc, #128]	; (5884 <getSoscConfig+0x88>)
    5804:	681b      	ldr	r3, [r3, #0]
    5806:	2b00      	cmp	r3, #0
    5808:	d024      	beq.n	5854 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    580a:	2300      	movs	r3, #0
    580c:	9301      	str	r3, [sp, #4]
    580e:	e01a      	b.n	5846 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    5810:	4b1c      	ldr	r3, [pc, #112]	; (5884 <getSoscConfig+0x88>)
    5812:	6819      	ldr	r1, [r3, #0]
    5814:	9a01      	ldr	r2, [sp, #4]
    5816:	4613      	mov	r3, r2
    5818:	009b      	lsls	r3, r3, #2
    581a:	4413      	add	r3, r2
    581c:	009b      	lsls	r3, r3, #2
    581e:	440b      	add	r3, r1
    5820:	332c      	adds	r3, #44	; 0x2c
    5822:	681b      	ldr	r3, [r3, #0]
    5824:	2b08      	cmp	r3, #8
    5826:	d10b      	bne.n	5840 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    5828:	4b16      	ldr	r3, [pc, #88]	; (5884 <getSoscConfig+0x88>)
    582a:	6819      	ldr	r1, [r3, #0]
    582c:	9a01      	ldr	r2, [sp, #4]
    582e:	4613      	mov	r3, r2
    5830:	009b      	lsls	r3, r3, #2
    5832:	4413      	add	r3, r2
    5834:	009b      	lsls	r3, r3, #2
    5836:	3328      	adds	r3, #40	; 0x28
    5838:	440b      	add	r3, r1
    583a:	3304      	adds	r3, #4
    583c:	9300      	str	r3, [sp, #0]
                break;
    583e:	e009      	b.n	5854 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5840:	9b01      	ldr	r3, [sp, #4]
    5842:	3301      	adds	r3, #1
    5844:	9301      	str	r3, [sp, #4]
    5846:	4b0f      	ldr	r3, [pc, #60]	; (5884 <getSoscConfig+0x88>)
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	7a5b      	ldrb	r3, [r3, #9]
    584c:	461a      	mov	r2, r3
    584e:	9b01      	ldr	r3, [sp, #4]
    5850:	4293      	cmp	r3, r2
    5852:	d3dd      	bcc.n	5810 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5854:	9b00      	ldr	r3, [sp, #0]
    5856:	2b00      	cmp	r3, #0
    5858:	d110      	bne.n	587c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    585a:	4b0b      	ldr	r3, [pc, #44]	; (5888 <getSoscConfig+0x8c>)
    585c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    585e:	4b0a      	ldr	r3, [pc, #40]	; (5888 <getSoscConfig+0x8c>)
    5860:	2208      	movs	r2, #8
    5862:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5864:	4b09      	ldr	r3, [pc, #36]	; (588c <getSoscConfig+0x90>)
    5866:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    586a:	b29b      	uxth	r3, r3
    586c:	f003 0301 	and.w	r3, r3, #1
    5870:	b29a      	uxth	r2, r3
    5872:	4b05      	ldr	r3, [pc, #20]	; (5888 <getSoscConfig+0x8c>)
    5874:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5876:	4b04      	ldr	r3, [pc, #16]	; (5888 <getSoscConfig+0x8c>)
    5878:	4a05      	ldr	r2, [pc, #20]	; (5890 <getSoscConfig+0x94>)
    587a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    587c:	9b00      	ldr	r3, [sp, #0]
}
    587e:	4618      	mov	r0, r3
    5880:	b002      	add	sp, #8
    5882:	4770      	bx	lr
    5884:	1fff8bb8 	.word	0x1fff8bb8
    5888:	1fff8c30 	.word	0x1fff8c30
    588c:	40064000 	.word	0x40064000
    5890:	02625a00 	.word	0x02625a00

00005894 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5894:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5896:	2300      	movs	r3, #0
    5898:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    589a:	4b28      	ldr	r3, [pc, #160]	; (593c <getSpllConfig+0xa8>)
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	2b00      	cmp	r3, #0
    58a0:	d023      	beq.n	58ea <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    58a2:	2300      	movs	r3, #0
    58a4:	9301      	str	r3, [sp, #4]
    58a6:	e019      	b.n	58dc <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    58a8:	4b24      	ldr	r3, [pc, #144]	; (593c <getSpllConfig+0xa8>)
    58aa:	6819      	ldr	r1, [r3, #0]
    58ac:	9a01      	ldr	r2, [sp, #4]
    58ae:	4613      	mov	r3, r2
    58b0:	009b      	lsls	r3, r3, #2
    58b2:	4413      	add	r3, r2
    58b4:	00db      	lsls	r3, r3, #3
    58b6:	440b      	add	r3, r1
    58b8:	3340      	adds	r3, #64	; 0x40
    58ba:	681b      	ldr	r3, [r3, #0]
    58bc:	2b09      	cmp	r3, #9
    58be:	d10a      	bne.n	58d6 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    58c0:	4b1e      	ldr	r3, [pc, #120]	; (593c <getSpllConfig+0xa8>)
    58c2:	6819      	ldr	r1, [r3, #0]
    58c4:	9a01      	ldr	r2, [sp, #4]
    58c6:	4613      	mov	r3, r2
    58c8:	009b      	lsls	r3, r3, #2
    58ca:	4413      	add	r3, r2
    58cc:	00db      	lsls	r3, r3, #3
    58ce:	3340      	adds	r3, #64	; 0x40
    58d0:	440b      	add	r3, r1
    58d2:	9300      	str	r3, [sp, #0]
                break;
    58d4:	e009      	b.n	58ea <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    58d6:	9b01      	ldr	r3, [sp, #4]
    58d8:	3301      	adds	r3, #1
    58da:	9301      	str	r3, [sp, #4]
    58dc:	4b17      	ldr	r3, [pc, #92]	; (593c <getSpllConfig+0xa8>)
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	7a9b      	ldrb	r3, [r3, #10]
    58e2:	461a      	mov	r2, r3
    58e4:	9b01      	ldr	r3, [sp, #4]
    58e6:	4293      	cmp	r3, r2
    58e8:	d3de      	bcc.n	58a8 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    58ea:	9b00      	ldr	r3, [sp, #0]
    58ec:	2b00      	cmp	r3, #0
    58ee:	d121      	bne.n	5934 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    58f0:	4b13      	ldr	r3, [pc, #76]	; (5940 <getSpllConfig+0xac>)
    58f2:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    58f4:	4b12      	ldr	r3, [pc, #72]	; (5940 <getSpllConfig+0xac>)
    58f6:	2209      	movs	r2, #9
    58f8:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    58fa:	4b12      	ldr	r3, [pc, #72]	; (5944 <getSpllConfig+0xb0>)
    58fc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5900:	b29b      	uxth	r3, r3
    5902:	f003 0301 	and.w	r3, r3, #1
    5906:	b29a      	uxth	r2, r3
    5908:	4b0d      	ldr	r3, [pc, #52]	; (5940 <getSpllConfig+0xac>)
    590a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    590c:	4b0d      	ldr	r3, [pc, #52]	; (5944 <getSpllConfig+0xb0>)
    590e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5912:	0a1b      	lsrs	r3, r3, #8
    5914:	b2db      	uxtb	r3, r3
    5916:	f003 0307 	and.w	r3, r3, #7
    591a:	b2da      	uxtb	r2, r3
    591c:	4b08      	ldr	r3, [pc, #32]	; (5940 <getSpllConfig+0xac>)
    591e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5920:	4b08      	ldr	r3, [pc, #32]	; (5944 <getSpllConfig+0xb0>)
    5922:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5926:	0c1b      	lsrs	r3, r3, #16
    5928:	b2db      	uxtb	r3, r3
    592a:	f003 031f 	and.w	r3, r3, #31
    592e:	b2da      	uxtb	r2, r3
    5930:	4b03      	ldr	r3, [pc, #12]	; (5940 <getSpllConfig+0xac>)
    5932:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5934:	9b00      	ldr	r3, [sp, #0]
}
    5936:	4618      	mov	r0, r3
    5938:	b002      	add	sp, #8
    593a:	4770      	bx	lr
    593c:	1fff8bb8 	.word	0x1fff8bb8
    5940:	1fff8c44 	.word	0x1fff8c44
    5944:	40064000 	.word	0x40064000

00005948 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5948:	b086      	sub	sp, #24
    594a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    594c:	2300      	movs	r3, #0
    594e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5950:	9b01      	ldr	r3, [sp, #4]
    5952:	2b1b      	cmp	r3, #27
    5954:	d00f      	beq.n	5976 <getSelectorConfig+0x2e>
    5956:	9b01      	ldr	r3, [sp, #4]
    5958:	2b1b      	cmp	r3, #27
    595a:	d80f      	bhi.n	597c <getSelectorConfig+0x34>
    595c:	9b01      	ldr	r3, [sp, #4]
    595e:	2b19      	cmp	r3, #25
    5960:	d003      	beq.n	596a <getSelectorConfig+0x22>
    5962:	9b01      	ldr	r3, [sp, #4]
    5964:	2b1a      	cmp	r3, #26
    5966:	d003      	beq.n	5970 <getSelectorConfig+0x28>
    5968:	e008      	b.n	597c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    596a:	2300      	movs	r3, #0
    596c:	9304      	str	r3, [sp, #16]
            break;
    596e:	e008      	b.n	5982 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5970:	2301      	movs	r3, #1
    5972:	9304      	str	r3, [sp, #16]
            break;
    5974:	e005      	b.n	5982 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5976:	2302      	movs	r3, #2
    5978:	9304      	str	r3, [sp, #16]
            break;
    597a:	e002      	b.n	5982 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    597c:	2300      	movs	r3, #0
    597e:	9304      	str	r3, [sp, #16]
            break;
    5980:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5982:	4b36      	ldr	r3, [pc, #216]	; (5a5c <getSelectorConfig+0x114>)
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	2b00      	cmp	r3, #0
    5988:	d01d      	beq.n	59c6 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    598a:	2300      	movs	r3, #0
    598c:	9303      	str	r3, [sp, #12]
    598e:	e013      	b.n	59b8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5990:	4b32      	ldr	r3, [pc, #200]	; (5a5c <getSelectorConfig+0x114>)
    5992:	681b      	ldr	r3, [r3, #0]
    5994:	9a03      	ldr	r2, [sp, #12]
    5996:	320d      	adds	r2, #13
    5998:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    599c:	9a01      	ldr	r2, [sp, #4]
    599e:	429a      	cmp	r2, r3
    59a0:	d107      	bne.n	59b2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    59a2:	4b2e      	ldr	r3, [pc, #184]	; (5a5c <getSelectorConfig+0x114>)
    59a4:	681a      	ldr	r2, [r3, #0]
    59a6:	9b03      	ldr	r3, [sp, #12]
    59a8:	330d      	adds	r3, #13
    59aa:	00db      	lsls	r3, r3, #3
    59ac:	4413      	add	r3, r2
    59ae:	9305      	str	r3, [sp, #20]
                break;
    59b0:	e009      	b.n	59c6 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    59b2:	9b03      	ldr	r3, [sp, #12]
    59b4:	3301      	adds	r3, #1
    59b6:	9303      	str	r3, [sp, #12]
    59b8:	4b28      	ldr	r3, [pc, #160]	; (5a5c <getSelectorConfig+0x114>)
    59ba:	681b      	ldr	r3, [r3, #0]
    59bc:	7adb      	ldrb	r3, [r3, #11]
    59be:	461a      	mov	r2, r3
    59c0:	9b03      	ldr	r3, [sp, #12]
    59c2:	4293      	cmp	r3, r2
    59c4:	d3e4      	bcc.n	5990 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    59c6:	9b05      	ldr	r3, [sp, #20]
    59c8:	2b00      	cmp	r3, #0
    59ca:	d140      	bne.n	5a4e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    59cc:	9b04      	ldr	r3, [sp, #16]
    59ce:	00db      	lsls	r3, r3, #3
    59d0:	4a23      	ldr	r2, [pc, #140]	; (5a60 <getSelectorConfig+0x118>)
    59d2:	4413      	add	r3, r2
    59d4:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    59d6:	4922      	ldr	r1, [pc, #136]	; (5a60 <getSelectorConfig+0x118>)
    59d8:	9b04      	ldr	r3, [sp, #16]
    59da:	9a01      	ldr	r2, [sp, #4]
    59dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    59e0:	9b01      	ldr	r3, [sp, #4]
    59e2:	2b1b      	cmp	r3, #27
    59e4:	d025      	beq.n	5a32 <getSelectorConfig+0xea>
    59e6:	9b01      	ldr	r3, [sp, #4]
    59e8:	2b1b      	cmp	r3, #27
    59ea:	d832      	bhi.n	5a52 <getSelectorConfig+0x10a>
    59ec:	9b01      	ldr	r3, [sp, #4]
    59ee:	2b19      	cmp	r3, #25
    59f0:	d003      	beq.n	59fa <getSelectorConfig+0xb2>
    59f2:	9b01      	ldr	r3, [sp, #4]
    59f4:	2b1a      	cmp	r3, #26
    59f6:	d00e      	beq.n	5a16 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    59f8:	e02b      	b.n	5a52 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    59fa:	4b1a      	ldr	r3, [pc, #104]	; (5a64 <getSelectorConfig+0x11c>)
    59fc:	695b      	ldr	r3, [r3, #20]
    59fe:	0e1b      	lsrs	r3, r3, #24
    5a00:	f003 030f 	and.w	r3, r3, #15
    5a04:	4a18      	ldr	r2, [pc, #96]	; (5a68 <getSelectorConfig+0x120>)
    5a06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5a0a:	4915      	ldr	r1, [pc, #84]	; (5a60 <getSelectorConfig+0x118>)
    5a0c:	9b04      	ldr	r3, [sp, #16]
    5a0e:	00db      	lsls	r3, r3, #3
    5a10:	440b      	add	r3, r1
    5a12:	605a      	str	r2, [r3, #4]
                break;
    5a14:	e01e      	b.n	5a54 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5a16:	4b13      	ldr	r3, [pc, #76]	; (5a64 <getSelectorConfig+0x11c>)
    5a18:	699b      	ldr	r3, [r3, #24]
    5a1a:	0e1b      	lsrs	r3, r3, #24
    5a1c:	f003 030f 	and.w	r3, r3, #15
    5a20:	4a11      	ldr	r2, [pc, #68]	; (5a68 <getSelectorConfig+0x120>)
    5a22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5a26:	490e      	ldr	r1, [pc, #56]	; (5a60 <getSelectorConfig+0x118>)
    5a28:	9b04      	ldr	r3, [sp, #16]
    5a2a:	00db      	lsls	r3, r3, #3
    5a2c:	440b      	add	r3, r1
    5a2e:	605a      	str	r2, [r3, #4]
                break;
    5a30:	e010      	b.n	5a54 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5a32:	4b0c      	ldr	r3, [pc, #48]	; (5a64 <getSelectorConfig+0x11c>)
    5a34:	69db      	ldr	r3, [r3, #28]
    5a36:	0e1b      	lsrs	r3, r3, #24
    5a38:	f003 030f 	and.w	r3, r3, #15
    5a3c:	4a0a      	ldr	r2, [pc, #40]	; (5a68 <getSelectorConfig+0x120>)
    5a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5a42:	4907      	ldr	r1, [pc, #28]	; (5a60 <getSelectorConfig+0x118>)
    5a44:	9b04      	ldr	r3, [sp, #16]
    5a46:	00db      	lsls	r3, r3, #3
    5a48:	440b      	add	r3, r1
    5a4a:	605a      	str	r2, [r3, #4]
                break;
    5a4c:	e002      	b.n	5a54 <getSelectorConfig+0x10c>
        }
    }
    5a4e:	bf00      	nop
    5a50:	e000      	b.n	5a54 <getSelectorConfig+0x10c>
                break;
    5a52:	bf00      	nop

    return ReturnValue;
    5a54:	9b05      	ldr	r3, [sp, #20]
}
    5a56:	4618      	mov	r0, r3
    5a58:	b006      	add	sp, #24
    5a5a:	4770      	bx	lr
    5a5c:	1fff8bb8 	.word	0x1fff8bb8
    5a60:	1fff8c6c 	.word	0x1fff8c6c
    5a64:	40064000 	.word	0x40064000
    5a68:	00011b5c 	.word	0x00011b5c

00005a6c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5a6c:	b086      	sub	sp, #24
    5a6e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5a70:	2300      	movs	r3, #0
    5a72:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5a74:	2300      	movs	r3, #0
    5a76:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5a78:	9b01      	ldr	r3, [sp, #4]
    5a7a:	2b1f      	cmp	r3, #31
    5a7c:	d00f      	beq.n	5a9e <getCoreDividerConfig+0x32>
    5a7e:	9b01      	ldr	r3, [sp, #4]
    5a80:	2b1f      	cmp	r3, #31
    5a82:	d80f      	bhi.n	5aa4 <getCoreDividerConfig+0x38>
    5a84:	9b01      	ldr	r3, [sp, #4]
    5a86:	2b1d      	cmp	r3, #29
    5a88:	d003      	beq.n	5a92 <getCoreDividerConfig+0x26>
    5a8a:	9b01      	ldr	r3, [sp, #4]
    5a8c:	2b1e      	cmp	r3, #30
    5a8e:	d003      	beq.n	5a98 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5a90:	e008      	b.n	5aa4 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5a92:	2300      	movs	r3, #0
    5a94:	9304      	str	r3, [sp, #16]
            break;
    5a96:	e006      	b.n	5aa6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5a98:	2301      	movs	r3, #1
    5a9a:	9304      	str	r3, [sp, #16]
            break;
    5a9c:	e003      	b.n	5aa6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5a9e:	2302      	movs	r3, #2
    5aa0:	9304      	str	r3, [sp, #16]
            break;
    5aa2:	e000      	b.n	5aa6 <getCoreDividerConfig+0x3a>
                break;
    5aa4:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5aa6:	4b41      	ldr	r3, [pc, #260]	; (5bac <getCoreDividerConfig+0x140>)
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d026      	beq.n	5afc <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5aae:	2300      	movs	r3, #0
    5ab0:	9303      	str	r3, [sp, #12]
    5ab2:	e01c      	b.n	5aee <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5ab4:	4b3d      	ldr	r3, [pc, #244]	; (5bac <getCoreDividerConfig+0x140>)
    5ab6:	6819      	ldr	r1, [r3, #0]
    5ab8:	9a03      	ldr	r2, [sp, #12]
    5aba:	4613      	mov	r3, r2
    5abc:	005b      	lsls	r3, r3, #1
    5abe:	4413      	add	r3, r2
    5ac0:	009b      	lsls	r3, r3, #2
    5ac2:	440b      	add	r3, r1
    5ac4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5ac8:	681b      	ldr	r3, [r3, #0]
    5aca:	9a01      	ldr	r2, [sp, #4]
    5acc:	429a      	cmp	r2, r3
    5ace:	d10b      	bne.n	5ae8 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5ad0:	4b36      	ldr	r3, [pc, #216]	; (5bac <getCoreDividerConfig+0x140>)
    5ad2:	6819      	ldr	r1, [r3, #0]
    5ad4:	9a03      	ldr	r2, [sp, #12]
    5ad6:	4613      	mov	r3, r2
    5ad8:	005b      	lsls	r3, r3, #1
    5ada:	4413      	add	r3, r2
    5adc:	009b      	lsls	r3, r3, #2
    5ade:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5ae2:	440b      	add	r3, r1
    5ae4:	9305      	str	r3, [sp, #20]
                break;
    5ae6:	e009      	b.n	5afc <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5ae8:	9b03      	ldr	r3, [sp, #12]
    5aea:	3301      	adds	r3, #1
    5aec:	9303      	str	r3, [sp, #12]
    5aee:	4b2f      	ldr	r3, [pc, #188]	; (5bac <getCoreDividerConfig+0x140>)
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	7b1b      	ldrb	r3, [r3, #12]
    5af4:	461a      	mov	r2, r3
    5af6:	9b03      	ldr	r3, [sp, #12]
    5af8:	4293      	cmp	r3, r2
    5afa:	d3db      	bcc.n	5ab4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5afc:	9b05      	ldr	r3, [sp, #20]
    5afe:	2b00      	cmp	r3, #0
    5b00:	d14d      	bne.n	5b9e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5b02:	9a04      	ldr	r2, [sp, #16]
    5b04:	4613      	mov	r3, r2
    5b06:	005b      	lsls	r3, r3, #1
    5b08:	4413      	add	r3, r2
    5b0a:	009b      	lsls	r3, r3, #2
    5b0c:	4a28      	ldr	r2, [pc, #160]	; (5bb0 <getCoreDividerConfig+0x144>)
    5b0e:	4413      	add	r3, r2
    5b10:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5b12:	4927      	ldr	r1, [pc, #156]	; (5bb0 <getCoreDividerConfig+0x144>)
    5b14:	9a04      	ldr	r2, [sp, #16]
    5b16:	4613      	mov	r3, r2
    5b18:	005b      	lsls	r3, r3, #1
    5b1a:	4413      	add	r3, r2
    5b1c:	009b      	lsls	r3, r3, #2
    5b1e:	440b      	add	r3, r1
    5b20:	9a01      	ldr	r2, [sp, #4]
    5b22:	601a      	str	r2, [r3, #0]
        switch(Name)
    5b24:	9b01      	ldr	r3, [sp, #4]
    5b26:	2b1f      	cmp	r3, #31
    5b28:	d029      	beq.n	5b7e <getCoreDividerConfig+0x112>
    5b2a:	9b01      	ldr	r3, [sp, #4]
    5b2c:	2b1f      	cmp	r3, #31
    5b2e:	d838      	bhi.n	5ba2 <getCoreDividerConfig+0x136>
    5b30:	9b01      	ldr	r3, [sp, #4]
    5b32:	2b1d      	cmp	r3, #29
    5b34:	d003      	beq.n	5b3e <getCoreDividerConfig+0xd2>
    5b36:	9b01      	ldr	r3, [sp, #4]
    5b38:	2b1e      	cmp	r3, #30
    5b3a:	d010      	beq.n	5b5e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5b3c:	e031      	b.n	5ba2 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5b3e:	4b1d      	ldr	r3, [pc, #116]	; (5bb4 <getCoreDividerConfig+0x148>)
    5b40:	695b      	ldr	r3, [r3, #20]
    5b42:	0c1b      	lsrs	r3, r3, #16
    5b44:	f003 030f 	and.w	r3, r3, #15
    5b48:	1c59      	adds	r1, r3, #1
    5b4a:	4819      	ldr	r0, [pc, #100]	; (5bb0 <getCoreDividerConfig+0x144>)
    5b4c:	9a04      	ldr	r2, [sp, #16]
    5b4e:	4613      	mov	r3, r2
    5b50:	005b      	lsls	r3, r3, #1
    5b52:	4413      	add	r3, r2
    5b54:	009b      	lsls	r3, r3, #2
    5b56:	4403      	add	r3, r0
    5b58:	3304      	adds	r3, #4
    5b5a:	6019      	str	r1, [r3, #0]
                break;
    5b5c:	e022      	b.n	5ba4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5b5e:	4b15      	ldr	r3, [pc, #84]	; (5bb4 <getCoreDividerConfig+0x148>)
    5b60:	699b      	ldr	r3, [r3, #24]
    5b62:	0c1b      	lsrs	r3, r3, #16
    5b64:	f003 030f 	and.w	r3, r3, #15
    5b68:	1c59      	adds	r1, r3, #1
    5b6a:	4811      	ldr	r0, [pc, #68]	; (5bb0 <getCoreDividerConfig+0x144>)
    5b6c:	9a04      	ldr	r2, [sp, #16]
    5b6e:	4613      	mov	r3, r2
    5b70:	005b      	lsls	r3, r3, #1
    5b72:	4413      	add	r3, r2
    5b74:	009b      	lsls	r3, r3, #2
    5b76:	4403      	add	r3, r0
    5b78:	3304      	adds	r3, #4
    5b7a:	6019      	str	r1, [r3, #0]
                break;
    5b7c:	e012      	b.n	5ba4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5b7e:	4b0d      	ldr	r3, [pc, #52]	; (5bb4 <getCoreDividerConfig+0x148>)
    5b80:	69db      	ldr	r3, [r3, #28]
    5b82:	0c1b      	lsrs	r3, r3, #16
    5b84:	f003 030f 	and.w	r3, r3, #15
    5b88:	1c59      	adds	r1, r3, #1
    5b8a:	4809      	ldr	r0, [pc, #36]	; (5bb0 <getCoreDividerConfig+0x144>)
    5b8c:	9a04      	ldr	r2, [sp, #16]
    5b8e:	4613      	mov	r3, r2
    5b90:	005b      	lsls	r3, r3, #1
    5b92:	4413      	add	r3, r2
    5b94:	009b      	lsls	r3, r3, #2
    5b96:	4403      	add	r3, r0
    5b98:	3304      	adds	r3, #4
    5b9a:	6019      	str	r1, [r3, #0]
                break;
    5b9c:	e002      	b.n	5ba4 <getCoreDividerConfig+0x138>
        }
    }
    5b9e:	bf00      	nop
    5ba0:	e000      	b.n	5ba4 <getCoreDividerConfig+0x138>
                break;
    5ba2:	bf00      	nop

    return ReturnValue;
    5ba4:	9b05      	ldr	r3, [sp, #20]
}
    5ba6:	4618      	mov	r0, r3
    5ba8:	b006      	add	sp, #24
    5baa:	4770      	bx	lr
    5bac:	1fff8bb8 	.word	0x1fff8bb8
    5bb0:	1fff8c84 	.word	0x1fff8c84
    5bb4:	40064000 	.word	0x40064000

00005bb8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5bb8:	b086      	sub	sp, #24
    5bba:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5bbc:	2300      	movs	r3, #0
    5bbe:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5bc0:	2300      	movs	r3, #0
    5bc2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5bc4:	9b01      	ldr	r3, [sp, #4]
    5bc6:	2b23      	cmp	r3, #35	; 0x23
    5bc8:	d00f      	beq.n	5bea <getBusDividerConfig+0x32>
    5bca:	9b01      	ldr	r3, [sp, #4]
    5bcc:	2b23      	cmp	r3, #35	; 0x23
    5bce:	d80f      	bhi.n	5bf0 <getBusDividerConfig+0x38>
    5bd0:	9b01      	ldr	r3, [sp, #4]
    5bd2:	2b21      	cmp	r3, #33	; 0x21
    5bd4:	d003      	beq.n	5bde <getBusDividerConfig+0x26>
    5bd6:	9b01      	ldr	r3, [sp, #4]
    5bd8:	2b22      	cmp	r3, #34	; 0x22
    5bda:	d003      	beq.n	5be4 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5bdc:	e008      	b.n	5bf0 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5bde:	2300      	movs	r3, #0
    5be0:	9304      	str	r3, [sp, #16]
            break;
    5be2:	e006      	b.n	5bf2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5be4:	2301      	movs	r3, #1
    5be6:	9304      	str	r3, [sp, #16]
            break;
    5be8:	e003      	b.n	5bf2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5bea:	2302      	movs	r3, #2
    5bec:	9304      	str	r3, [sp, #16]
            break;
    5bee:	e000      	b.n	5bf2 <getBusDividerConfig+0x3a>
                break;
    5bf0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5bf2:	4b41      	ldr	r3, [pc, #260]	; (5cf8 <getBusDividerConfig+0x140>)
    5bf4:	681b      	ldr	r3, [r3, #0]
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d026      	beq.n	5c48 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5bfa:	2300      	movs	r3, #0
    5bfc:	9303      	str	r3, [sp, #12]
    5bfe:	e01c      	b.n	5c3a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5c00:	4b3d      	ldr	r3, [pc, #244]	; (5cf8 <getBusDividerConfig+0x140>)
    5c02:	6819      	ldr	r1, [r3, #0]
    5c04:	9a03      	ldr	r2, [sp, #12]
    5c06:	4613      	mov	r3, r2
    5c08:	005b      	lsls	r3, r3, #1
    5c0a:	4413      	add	r3, r2
    5c0c:	009b      	lsls	r3, r3, #2
    5c0e:	440b      	add	r3, r1
    5c10:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5c14:	681b      	ldr	r3, [r3, #0]
    5c16:	9a01      	ldr	r2, [sp, #4]
    5c18:	429a      	cmp	r2, r3
    5c1a:	d10b      	bne.n	5c34 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5c1c:	4b36      	ldr	r3, [pc, #216]	; (5cf8 <getBusDividerConfig+0x140>)
    5c1e:	6819      	ldr	r1, [r3, #0]
    5c20:	9a03      	ldr	r2, [sp, #12]
    5c22:	4613      	mov	r3, r2
    5c24:	005b      	lsls	r3, r3, #1
    5c26:	4413      	add	r3, r2
    5c28:	009b      	lsls	r3, r3, #2
    5c2a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5c2e:	440b      	add	r3, r1
    5c30:	9305      	str	r3, [sp, #20]
                break;
    5c32:	e009      	b.n	5c48 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5c34:	9b03      	ldr	r3, [sp, #12]
    5c36:	3301      	adds	r3, #1
    5c38:	9303      	str	r3, [sp, #12]
    5c3a:	4b2f      	ldr	r3, [pc, #188]	; (5cf8 <getBusDividerConfig+0x140>)
    5c3c:	681b      	ldr	r3, [r3, #0]
    5c3e:	7b1b      	ldrb	r3, [r3, #12]
    5c40:	461a      	mov	r2, r3
    5c42:	9b03      	ldr	r3, [sp, #12]
    5c44:	4293      	cmp	r3, r2
    5c46:	d3db      	bcc.n	5c00 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5c48:	9b05      	ldr	r3, [sp, #20]
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d14d      	bne.n	5cea <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5c4e:	9a04      	ldr	r2, [sp, #16]
    5c50:	4613      	mov	r3, r2
    5c52:	005b      	lsls	r3, r3, #1
    5c54:	4413      	add	r3, r2
    5c56:	009b      	lsls	r3, r3, #2
    5c58:	4a28      	ldr	r2, [pc, #160]	; (5cfc <getBusDividerConfig+0x144>)
    5c5a:	4413      	add	r3, r2
    5c5c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5c5e:	4927      	ldr	r1, [pc, #156]	; (5cfc <getBusDividerConfig+0x144>)
    5c60:	9a04      	ldr	r2, [sp, #16]
    5c62:	4613      	mov	r3, r2
    5c64:	005b      	lsls	r3, r3, #1
    5c66:	4413      	add	r3, r2
    5c68:	009b      	lsls	r3, r3, #2
    5c6a:	440b      	add	r3, r1
    5c6c:	9a01      	ldr	r2, [sp, #4]
    5c6e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5c70:	9b01      	ldr	r3, [sp, #4]
    5c72:	2b23      	cmp	r3, #35	; 0x23
    5c74:	d029      	beq.n	5cca <getBusDividerConfig+0x112>
    5c76:	9b01      	ldr	r3, [sp, #4]
    5c78:	2b23      	cmp	r3, #35	; 0x23
    5c7a:	d838      	bhi.n	5cee <getBusDividerConfig+0x136>
    5c7c:	9b01      	ldr	r3, [sp, #4]
    5c7e:	2b21      	cmp	r3, #33	; 0x21
    5c80:	d003      	beq.n	5c8a <getBusDividerConfig+0xd2>
    5c82:	9b01      	ldr	r3, [sp, #4]
    5c84:	2b22      	cmp	r3, #34	; 0x22
    5c86:	d010      	beq.n	5caa <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c88:	e031      	b.n	5cee <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5c8a:	4b1d      	ldr	r3, [pc, #116]	; (5d00 <getBusDividerConfig+0x148>)
    5c8c:	695b      	ldr	r3, [r3, #20]
    5c8e:	091b      	lsrs	r3, r3, #4
    5c90:	f003 030f 	and.w	r3, r3, #15
    5c94:	1c59      	adds	r1, r3, #1
    5c96:	4819      	ldr	r0, [pc, #100]	; (5cfc <getBusDividerConfig+0x144>)
    5c98:	9a04      	ldr	r2, [sp, #16]
    5c9a:	4613      	mov	r3, r2
    5c9c:	005b      	lsls	r3, r3, #1
    5c9e:	4413      	add	r3, r2
    5ca0:	009b      	lsls	r3, r3, #2
    5ca2:	4403      	add	r3, r0
    5ca4:	3304      	adds	r3, #4
    5ca6:	6019      	str	r1, [r3, #0]
                break;
    5ca8:	e022      	b.n	5cf0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5caa:	4b15      	ldr	r3, [pc, #84]	; (5d00 <getBusDividerConfig+0x148>)
    5cac:	699b      	ldr	r3, [r3, #24]
    5cae:	091b      	lsrs	r3, r3, #4
    5cb0:	f003 030f 	and.w	r3, r3, #15
    5cb4:	1c59      	adds	r1, r3, #1
    5cb6:	4811      	ldr	r0, [pc, #68]	; (5cfc <getBusDividerConfig+0x144>)
    5cb8:	9a04      	ldr	r2, [sp, #16]
    5cba:	4613      	mov	r3, r2
    5cbc:	005b      	lsls	r3, r3, #1
    5cbe:	4413      	add	r3, r2
    5cc0:	009b      	lsls	r3, r3, #2
    5cc2:	4403      	add	r3, r0
    5cc4:	3304      	adds	r3, #4
    5cc6:	6019      	str	r1, [r3, #0]
                break;
    5cc8:	e012      	b.n	5cf0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5cca:	4b0d      	ldr	r3, [pc, #52]	; (5d00 <getBusDividerConfig+0x148>)
    5ccc:	69db      	ldr	r3, [r3, #28]
    5cce:	091b      	lsrs	r3, r3, #4
    5cd0:	f003 030f 	and.w	r3, r3, #15
    5cd4:	1c59      	adds	r1, r3, #1
    5cd6:	4809      	ldr	r0, [pc, #36]	; (5cfc <getBusDividerConfig+0x144>)
    5cd8:	9a04      	ldr	r2, [sp, #16]
    5cda:	4613      	mov	r3, r2
    5cdc:	005b      	lsls	r3, r3, #1
    5cde:	4413      	add	r3, r2
    5ce0:	009b      	lsls	r3, r3, #2
    5ce2:	4403      	add	r3, r0
    5ce4:	3304      	adds	r3, #4
    5ce6:	6019      	str	r1, [r3, #0]
                break;
    5ce8:	e002      	b.n	5cf0 <getBusDividerConfig+0x138>
        }
    }
    5cea:	bf00      	nop
    5cec:	e000      	b.n	5cf0 <getBusDividerConfig+0x138>
                break;
    5cee:	bf00      	nop

    return ReturnValue;
    5cf0:	9b05      	ldr	r3, [sp, #20]
}
    5cf2:	4618      	mov	r0, r3
    5cf4:	b006      	add	sp, #24
    5cf6:	4770      	bx	lr
    5cf8:	1fff8bb8 	.word	0x1fff8bb8
    5cfc:	1fff8ca8 	.word	0x1fff8ca8
    5d00:	40064000 	.word	0x40064000

00005d04 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5d04:	b086      	sub	sp, #24
    5d06:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5d08:	2300      	movs	r3, #0
    5d0a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5d0c:	2300      	movs	r3, #0
    5d0e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5d10:	9b01      	ldr	r3, [sp, #4]
    5d12:	2b27      	cmp	r3, #39	; 0x27
    5d14:	d00f      	beq.n	5d36 <getSlowDividerConfig+0x32>
    5d16:	9b01      	ldr	r3, [sp, #4]
    5d18:	2b27      	cmp	r3, #39	; 0x27
    5d1a:	d80f      	bhi.n	5d3c <getSlowDividerConfig+0x38>
    5d1c:	9b01      	ldr	r3, [sp, #4]
    5d1e:	2b25      	cmp	r3, #37	; 0x25
    5d20:	d003      	beq.n	5d2a <getSlowDividerConfig+0x26>
    5d22:	9b01      	ldr	r3, [sp, #4]
    5d24:	2b26      	cmp	r3, #38	; 0x26
    5d26:	d003      	beq.n	5d30 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5d28:	e008      	b.n	5d3c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5d2a:	2300      	movs	r3, #0
    5d2c:	9304      	str	r3, [sp, #16]
            break;
    5d2e:	e006      	b.n	5d3e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5d30:	2301      	movs	r3, #1
    5d32:	9304      	str	r3, [sp, #16]
            break;
    5d34:	e003      	b.n	5d3e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5d36:	2302      	movs	r3, #2
    5d38:	9304      	str	r3, [sp, #16]
            break;
    5d3a:	e000      	b.n	5d3e <getSlowDividerConfig+0x3a>
                break;
    5d3c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5d3e:	4b40      	ldr	r3, [pc, #256]	; (5e40 <getSlowDividerConfig+0x13c>)
    5d40:	681b      	ldr	r3, [r3, #0]
    5d42:	2b00      	cmp	r3, #0
    5d44:	d026      	beq.n	5d94 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d46:	2300      	movs	r3, #0
    5d48:	9303      	str	r3, [sp, #12]
    5d4a:	e01c      	b.n	5d86 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5d4c:	4b3c      	ldr	r3, [pc, #240]	; (5e40 <getSlowDividerConfig+0x13c>)
    5d4e:	6819      	ldr	r1, [r3, #0]
    5d50:	9a03      	ldr	r2, [sp, #12]
    5d52:	4613      	mov	r3, r2
    5d54:	005b      	lsls	r3, r3, #1
    5d56:	4413      	add	r3, r2
    5d58:	009b      	lsls	r3, r3, #2
    5d5a:	440b      	add	r3, r1
    5d5c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d60:	681b      	ldr	r3, [r3, #0]
    5d62:	9a01      	ldr	r2, [sp, #4]
    5d64:	429a      	cmp	r2, r3
    5d66:	d10b      	bne.n	5d80 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5d68:	4b35      	ldr	r3, [pc, #212]	; (5e40 <getSlowDividerConfig+0x13c>)
    5d6a:	6819      	ldr	r1, [r3, #0]
    5d6c:	9a03      	ldr	r2, [sp, #12]
    5d6e:	4613      	mov	r3, r2
    5d70:	005b      	lsls	r3, r3, #1
    5d72:	4413      	add	r3, r2
    5d74:	009b      	lsls	r3, r3, #2
    5d76:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d7a:	440b      	add	r3, r1
    5d7c:	9305      	str	r3, [sp, #20]
                break;
    5d7e:	e009      	b.n	5d94 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d80:	9b03      	ldr	r3, [sp, #12]
    5d82:	3301      	adds	r3, #1
    5d84:	9303      	str	r3, [sp, #12]
    5d86:	4b2e      	ldr	r3, [pc, #184]	; (5e40 <getSlowDividerConfig+0x13c>)
    5d88:	681b      	ldr	r3, [r3, #0]
    5d8a:	7b1b      	ldrb	r3, [r3, #12]
    5d8c:	461a      	mov	r2, r3
    5d8e:	9b03      	ldr	r3, [sp, #12]
    5d90:	4293      	cmp	r3, r2
    5d92:	d3db      	bcc.n	5d4c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5d94:	9b05      	ldr	r3, [sp, #20]
    5d96:	2b00      	cmp	r3, #0
    5d98:	d14a      	bne.n	5e30 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5d9a:	9a04      	ldr	r2, [sp, #16]
    5d9c:	4613      	mov	r3, r2
    5d9e:	005b      	lsls	r3, r3, #1
    5da0:	4413      	add	r3, r2
    5da2:	009b      	lsls	r3, r3, #2
    5da4:	4a27      	ldr	r2, [pc, #156]	; (5e44 <getSlowDividerConfig+0x140>)
    5da6:	4413      	add	r3, r2
    5da8:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5daa:	4926      	ldr	r1, [pc, #152]	; (5e44 <getSlowDividerConfig+0x140>)
    5dac:	9a04      	ldr	r2, [sp, #16]
    5dae:	4613      	mov	r3, r2
    5db0:	005b      	lsls	r3, r3, #1
    5db2:	4413      	add	r3, r2
    5db4:	009b      	lsls	r3, r3, #2
    5db6:	440b      	add	r3, r1
    5db8:	9a01      	ldr	r2, [sp, #4]
    5dba:	601a      	str	r2, [r3, #0]
        switch(Name)
    5dbc:	9b01      	ldr	r3, [sp, #4]
    5dbe:	2b27      	cmp	r3, #39	; 0x27
    5dc0:	d027      	beq.n	5e12 <getSlowDividerConfig+0x10e>
    5dc2:	9b01      	ldr	r3, [sp, #4]
    5dc4:	2b27      	cmp	r3, #39	; 0x27
    5dc6:	d835      	bhi.n	5e34 <getSlowDividerConfig+0x130>
    5dc8:	9b01      	ldr	r3, [sp, #4]
    5dca:	2b25      	cmp	r3, #37	; 0x25
    5dcc:	d003      	beq.n	5dd6 <getSlowDividerConfig+0xd2>
    5dce:	9b01      	ldr	r3, [sp, #4]
    5dd0:	2b26      	cmp	r3, #38	; 0x26
    5dd2:	d00f      	beq.n	5df4 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5dd4:	e02e      	b.n	5e34 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5dd6:	4b1c      	ldr	r3, [pc, #112]	; (5e48 <getSlowDividerConfig+0x144>)
    5dd8:	695b      	ldr	r3, [r3, #20]
    5dda:	f003 030f 	and.w	r3, r3, #15
    5dde:	1c59      	adds	r1, r3, #1
    5de0:	4818      	ldr	r0, [pc, #96]	; (5e44 <getSlowDividerConfig+0x140>)
    5de2:	9a04      	ldr	r2, [sp, #16]
    5de4:	4613      	mov	r3, r2
    5de6:	005b      	lsls	r3, r3, #1
    5de8:	4413      	add	r3, r2
    5dea:	009b      	lsls	r3, r3, #2
    5dec:	4403      	add	r3, r0
    5dee:	3304      	adds	r3, #4
    5df0:	6019      	str	r1, [r3, #0]
                break;
    5df2:	e020      	b.n	5e36 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5df4:	4b14      	ldr	r3, [pc, #80]	; (5e48 <getSlowDividerConfig+0x144>)
    5df6:	699b      	ldr	r3, [r3, #24]
    5df8:	f003 030f 	and.w	r3, r3, #15
    5dfc:	1c59      	adds	r1, r3, #1
    5dfe:	4811      	ldr	r0, [pc, #68]	; (5e44 <getSlowDividerConfig+0x140>)
    5e00:	9a04      	ldr	r2, [sp, #16]
    5e02:	4613      	mov	r3, r2
    5e04:	005b      	lsls	r3, r3, #1
    5e06:	4413      	add	r3, r2
    5e08:	009b      	lsls	r3, r3, #2
    5e0a:	4403      	add	r3, r0
    5e0c:	3304      	adds	r3, #4
    5e0e:	6019      	str	r1, [r3, #0]
                break;
    5e10:	e011      	b.n	5e36 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5e12:	4b0d      	ldr	r3, [pc, #52]	; (5e48 <getSlowDividerConfig+0x144>)
    5e14:	69db      	ldr	r3, [r3, #28]
    5e16:	f003 030f 	and.w	r3, r3, #15
    5e1a:	1c59      	adds	r1, r3, #1
    5e1c:	4809      	ldr	r0, [pc, #36]	; (5e44 <getSlowDividerConfig+0x140>)
    5e1e:	9a04      	ldr	r2, [sp, #16]
    5e20:	4613      	mov	r3, r2
    5e22:	005b      	lsls	r3, r3, #1
    5e24:	4413      	add	r3, r2
    5e26:	009b      	lsls	r3, r3, #2
    5e28:	4403      	add	r3, r0
    5e2a:	3304      	adds	r3, #4
    5e2c:	6019      	str	r1, [r3, #0]
                break;
    5e2e:	e002      	b.n	5e36 <getSlowDividerConfig+0x132>
        }
    }
    5e30:	bf00      	nop
    5e32:	e000      	b.n	5e36 <getSlowDividerConfig+0x132>
                break;
    5e34:	bf00      	nop

    return ReturnValue;
    5e36:	9b05      	ldr	r3, [sp, #20]
}
    5e38:	4618      	mov	r0, r3
    5e3a:	b006      	add	sp, #24
    5e3c:	4770      	bx	lr
    5e3e:	bf00      	nop
    5e40:	1fff8bb8 	.word	0x1fff8bb8
    5e44:	1fff8ccc 	.word	0x1fff8ccc
    5e48:	40064000 	.word	0x40064000

00005e4c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5e4c:	b500      	push	{lr}
    5e4e:	b083      	sub	sp, #12
    5e50:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5e52:	4b64      	ldr	r3, [pc, #400]	; (5fe4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5e54:	781b      	ldrb	r3, [r3, #0]
    5e56:	f083 0301 	eor.w	r3, r3, #1
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d05b      	beq.n	5f18 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5e60:	4b60      	ldr	r3, [pc, #384]	; (5fe4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5e62:	2201      	movs	r2, #1
    5e64:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5e66:	4b60      	ldr	r3, [pc, #384]	; (5fe8 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5e68:	785b      	ldrb	r3, [r3, #1]
    5e6a:	461a      	mov	r2, r3
    5e6c:	4613      	mov	r3, r2
    5e6e:	009b      	lsls	r3, r3, #2
    5e70:	4413      	add	r3, r2
    5e72:	009b      	lsls	r3, r3, #2
    5e74:	4a5d      	ldr	r2, [pc, #372]	; (5fec <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5e76:	4413      	add	r3, r2
    5e78:	4a5d      	ldr	r2, [pc, #372]	; (5ff0 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5e7a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5e7c:	4b5d      	ldr	r3, [pc, #372]	; (5ff4 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5e7e:	785b      	ldrb	r3, [r3, #1]
    5e80:	461a      	mov	r2, r3
    5e82:	4613      	mov	r3, r2
    5e84:	009b      	lsls	r3, r3, #2
    5e86:	4413      	add	r3, r2
    5e88:	009b      	lsls	r3, r3, #2
    5e8a:	4a5b      	ldr	r2, [pc, #364]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5e8c:	4413      	add	r3, r2
    5e8e:	4a5b      	ldr	r2, [pc, #364]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5e90:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5e92:	4b5b      	ldr	r3, [pc, #364]	; (6000 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5e94:	791b      	ldrb	r3, [r3, #4]
    5e96:	461a      	mov	r2, r3
    5e98:	4613      	mov	r3, r2
    5e9a:	005b      	lsls	r3, r3, #1
    5e9c:	4413      	add	r3, r2
    5e9e:	009b      	lsls	r3, r3, #2
    5ea0:	4a58      	ldr	r2, [pc, #352]	; (6004 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5ea2:	4413      	add	r3, r2
    5ea4:	4a58      	ldr	r2, [pc, #352]	; (6008 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5ea6:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5ea8:	4b58      	ldr	r3, [pc, #352]	; (600c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5eaa:	795b      	ldrb	r3, [r3, #5]
    5eac:	00db      	lsls	r3, r3, #3
    5eae:	4a58      	ldr	r2, [pc, #352]	; (6010 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5eb0:	4413      	add	r3, r2
    5eb2:	4a58      	ldr	r2, [pc, #352]	; (6014 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5eb4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5eb6:	4b55      	ldr	r3, [pc, #340]	; (600c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5eb8:	79db      	ldrb	r3, [r3, #7]
    5eba:	00db      	lsls	r3, r3, #3
    5ebc:	4a54      	ldr	r2, [pc, #336]	; (6010 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5ebe:	4413      	add	r3, r2
    5ec0:	4a55      	ldr	r2, [pc, #340]	; (6018 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5ec2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5ec4:	4b55      	ldr	r3, [pc, #340]	; (601c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ec6:	799b      	ldrb	r3, [r3, #6]
    5ec8:	009b      	lsls	r3, r3, #2
    5eca:	4a55      	ldr	r2, [pc, #340]	; (6020 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ecc:	4413      	add	r3, r2
    5ece:	4a55      	ldr	r2, [pc, #340]	; (6024 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5ed0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5ed2:	4b52      	ldr	r3, [pc, #328]	; (601c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ed4:	7a1b      	ldrb	r3, [r3, #8]
    5ed6:	009b      	lsls	r3, r3, #2
    5ed8:	4a51      	ldr	r2, [pc, #324]	; (6020 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5eda:	4413      	add	r3, r2
    5edc:	4a52      	ldr	r2, [pc, #328]	; (6028 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5ede:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5ee0:	4b4e      	ldr	r3, [pc, #312]	; (601c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ee2:	7a5b      	ldrb	r3, [r3, #9]
    5ee4:	009b      	lsls	r3, r3, #2
    5ee6:	4a4e      	ldr	r2, [pc, #312]	; (6020 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ee8:	4413      	add	r3, r2
    5eea:	4a50      	ldr	r2, [pc, #320]	; (602c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5eec:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5eee:	4b4b      	ldr	r3, [pc, #300]	; (601c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ef0:	7adb      	ldrb	r3, [r3, #11]
    5ef2:	009b      	lsls	r3, r3, #2
    5ef4:	4a4a      	ldr	r2, [pc, #296]	; (6020 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ef6:	4413      	add	r3, r2
    5ef8:	4a4d      	ldr	r2, [pc, #308]	; (6030 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5efa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5efc:	4b47      	ldr	r3, [pc, #284]	; (601c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5efe:	7b1b      	ldrb	r3, [r3, #12]
    5f00:	009b      	lsls	r3, r3, #2
    5f02:	4a47      	ldr	r2, [pc, #284]	; (6020 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5f04:	4413      	add	r3, r2
    5f06:	4a4b      	ldr	r2, [pc, #300]	; (6034 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5f08:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5f0a:	4b44      	ldr	r3, [pc, #272]	; (601c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5f0c:	7b9b      	ldrb	r3, [r3, #14]
    5f0e:	009b      	lsls	r3, r3, #2
    5f10:	4a43      	ldr	r2, [pc, #268]	; (6020 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5f12:	4413      	add	r3, r2
    5f14:	4a48      	ldr	r2, [pc, #288]	; (6038 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5f16:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5f18:	4b48      	ldr	r3, [pc, #288]	; (603c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5f1a:	781b      	ldrb	r3, [r3, #0]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d002      	beq.n	5f26 <Clock_Ip_ClockInitializeObjects+0xda>
    5f20:	9b01      	ldr	r3, [sp, #4]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d003      	beq.n	5f2e <Clock_Ip_ClockInitializeObjects+0xe2>
    5f26:	4b46      	ldr	r3, [pc, #280]	; (6040 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5f28:	781b      	ldrb	r3, [r3, #0]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d056      	beq.n	5fdc <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5f2e:	f7ff fc09 	bl	5744 <getFircConfig>
    5f32:	4603      	mov	r3, r0
    5f34:	4a43      	ldr	r2, [pc, #268]	; (6044 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5f36:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5f38:	f7ff fc60 	bl	57fc <getSoscConfig>
    5f3c:	4603      	mov	r3, r0
    5f3e:	4a42      	ldr	r2, [pc, #264]	; (6048 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5f40:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5f42:	f7ff fca7 	bl	5894 <getSpllConfig>
    5f46:	4603      	mov	r3, r0
    5f48:	4a40      	ldr	r2, [pc, #256]	; (604c <Clock_Ip_ClockInitializeObjects+0x200>)
    5f4a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5f4c:	2019      	movs	r0, #25
    5f4e:	f7ff fcfb 	bl	5948 <getSelectorConfig>
    5f52:	4603      	mov	r3, r0
    5f54:	4a3e      	ldr	r2, [pc, #248]	; (6050 <Clock_Ip_ClockInitializeObjects+0x204>)
    5f56:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5f58:	201a      	movs	r0, #26
    5f5a:	f7ff fcf5 	bl	5948 <getSelectorConfig>
    5f5e:	4603      	mov	r3, r0
    5f60:	4a3c      	ldr	r2, [pc, #240]	; (6054 <Clock_Ip_ClockInitializeObjects+0x208>)
    5f62:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5f64:	201b      	movs	r0, #27
    5f66:	f7ff fcef 	bl	5948 <getSelectorConfig>
    5f6a:	4603      	mov	r3, r0
    5f6c:	4a3a      	ldr	r2, [pc, #232]	; (6058 <Clock_Ip_ClockInitializeObjects+0x20c>)
    5f6e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5f70:	201d      	movs	r0, #29
    5f72:	f7ff fd7b 	bl	5a6c <getCoreDividerConfig>
    5f76:	4603      	mov	r3, r0
    5f78:	4a38      	ldr	r2, [pc, #224]	; (605c <Clock_Ip_ClockInitializeObjects+0x210>)
    5f7a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5f7c:	201e      	movs	r0, #30
    5f7e:	f7ff fd75 	bl	5a6c <getCoreDividerConfig>
    5f82:	4603      	mov	r3, r0
    5f84:	4a36      	ldr	r2, [pc, #216]	; (6060 <Clock_Ip_ClockInitializeObjects+0x214>)
    5f86:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5f88:	201f      	movs	r0, #31
    5f8a:	f7ff fd6f 	bl	5a6c <getCoreDividerConfig>
    5f8e:	4603      	mov	r3, r0
    5f90:	4a34      	ldr	r2, [pc, #208]	; (6064 <Clock_Ip_ClockInitializeObjects+0x218>)
    5f92:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5f94:	2021      	movs	r0, #33	; 0x21
    5f96:	f7ff fe0f 	bl	5bb8 <getBusDividerConfig>
    5f9a:	4603      	mov	r3, r0
    5f9c:	4a32      	ldr	r2, [pc, #200]	; (6068 <Clock_Ip_ClockInitializeObjects+0x21c>)
    5f9e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5fa0:	2022      	movs	r0, #34	; 0x22
    5fa2:	f7ff fe09 	bl	5bb8 <getBusDividerConfig>
    5fa6:	4603      	mov	r3, r0
    5fa8:	4a30      	ldr	r2, [pc, #192]	; (606c <Clock_Ip_ClockInitializeObjects+0x220>)
    5faa:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5fac:	2023      	movs	r0, #35	; 0x23
    5fae:	f7ff fe03 	bl	5bb8 <getBusDividerConfig>
    5fb2:	4603      	mov	r3, r0
    5fb4:	4a2e      	ldr	r2, [pc, #184]	; (6070 <Clock_Ip_ClockInitializeObjects+0x224>)
    5fb6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5fb8:	2025      	movs	r0, #37	; 0x25
    5fba:	f7ff fea3 	bl	5d04 <getSlowDividerConfig>
    5fbe:	4603      	mov	r3, r0
    5fc0:	4a2c      	ldr	r2, [pc, #176]	; (6074 <Clock_Ip_ClockInitializeObjects+0x228>)
    5fc2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5fc4:	2026      	movs	r0, #38	; 0x26
    5fc6:	f7ff fe9d 	bl	5d04 <getSlowDividerConfig>
    5fca:	4603      	mov	r3, r0
    5fcc:	4a2a      	ldr	r2, [pc, #168]	; (6078 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5fce:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5fd0:	2027      	movs	r0, #39	; 0x27
    5fd2:	f7ff fe97 	bl	5d04 <getSlowDividerConfig>
    5fd6:	4603      	mov	r3, r0
    5fd8:	4a28      	ldr	r2, [pc, #160]	; (607c <Clock_Ip_ClockInitializeObjects+0x230>)
    5fda:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5fdc:	bf00      	nop
    5fde:	b003      	add	sp, #12
    5fe0:	f85d fb04 	ldr.w	pc, [sp], #4
    5fe4:	1fff8cf0 	.word	0x1fff8cf0
    5fe8:	0001148c 	.word	0x0001148c
    5fec:	00011ad8 	.word	0x00011ad8
    5ff0:	1fff8bbc 	.word	0x1fff8bbc
    5ff4:	0001144c 	.word	0x0001144c
    5ff8:	00011a20 	.word	0x00011a20
    5ffc:	1fff8bc0 	.word	0x1fff8bc0
    6000:	0001145c 	.word	0x0001145c
    6004:	00011a8c 	.word	0x00011a8c
    6008:	1fff8bc4 	.word	0x1fff8bc4
    600c:	0001149c 	.word	0x0001149c
    6010:	00011b04 	.word	0x00011b04
    6014:	1fff8bc8 	.word	0x1fff8bc8
    6018:	1fff8c04 	.word	0x1fff8c04
    601c:	0001142c 	.word	0x0001142c
    6020:	000119dc 	.word	0x000119dc
    6024:	1fff8bcc 	.word	0x1fff8bcc
    6028:	1fff8c08 	.word	0x1fff8c08
    602c:	1fff8bd0 	.word	0x1fff8bd0
    6030:	1fff8c0c 	.word	0x1fff8c0c
    6034:	1fff8bd4 	.word	0x1fff8bd4
    6038:	1fff8c10 	.word	0x1fff8c10
    603c:	1fff8b19 	.word	0x1fff8b19
    6040:	1fff8b10 	.word	0x1fff8b10
    6044:	1fff8bd8 	.word	0x1fff8bd8
    6048:	1fff8bdc 	.word	0x1fff8bdc
    604c:	1fff8be0 	.word	0x1fff8be0
    6050:	1fff8be4 	.word	0x1fff8be4
    6054:	1fff8be8 	.word	0x1fff8be8
    6058:	1fff8c14 	.word	0x1fff8c14
    605c:	1fff8bec 	.word	0x1fff8bec
    6060:	1fff8bf0 	.word	0x1fff8bf0
    6064:	1fff8c18 	.word	0x1fff8c18
    6068:	1fff8bf4 	.word	0x1fff8bf4
    606c:	1fff8bf8 	.word	0x1fff8bf8
    6070:	1fff8c1c 	.word	0x1fff8c1c
    6074:	1fff8bfc 	.word	0x1fff8bfc
    6078:	1fff8c00 	.word	0x1fff8c00
    607c:	1fff8c20 	.word	0x1fff8c20

00006080 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    6080:	b500      	push	{lr}
    6082:	b083      	sub	sp, #12
    6084:	9001      	str	r0, [sp, #4]
    6086:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    6088:	9b01      	ldr	r3, [sp, #4]
    608a:	2b03      	cmp	r3, #3
    608c:	f000 8090 	beq.w	61b0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	2b03      	cmp	r3, #3
    6094:	f200 80d3 	bhi.w	623e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    6098:	9b01      	ldr	r3, [sp, #4]
    609a:	2b00      	cmp	r3, #0
    609c:	d040      	beq.n	6120 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    609e:	9b01      	ldr	r3, [sp, #4]
    60a0:	3b01      	subs	r3, #1
    60a2:	2b01      	cmp	r3, #1
    60a4:	f200 80cb 	bhi.w	623e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    60a8:	9b00      	ldr	r3, [sp, #0]
    60aa:	2b00      	cmp	r3, #0
    60ac:	f040 80c9 	bne.w	6242 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    60b0:	4b68      	ldr	r3, [pc, #416]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    60b2:	2200      	movs	r2, #0
    60b4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    60b6:	4b68      	ldr	r3, [pc, #416]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    60b8:	681b      	ldr	r3, [r3, #0]
    60ba:	685b      	ldr	r3, [r3, #4]
    60bc:	4a67      	ldr	r2, [pc, #412]	; (625c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    60be:	6812      	ldr	r2, [r2, #0]
    60c0:	4610      	mov	r0, r2
    60c2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    60c4:	4b66      	ldr	r3, [pc, #408]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    60c6:	681b      	ldr	r3, [r3, #0]
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	4a66      	ldr	r2, [pc, #408]	; (6264 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    60cc:	6812      	ldr	r2, [r2, #0]
    60ce:	4610      	mov	r0, r2
    60d0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    60d2:	4b65      	ldr	r3, [pc, #404]	; (6268 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    60d4:	681b      	ldr	r3, [r3, #0]
    60d6:	681b      	ldr	r3, [r3, #0]
    60d8:	4a64      	ldr	r2, [pc, #400]	; (626c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    60da:	6812      	ldr	r2, [r2, #0]
    60dc:	4610      	mov	r0, r2
    60de:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    60e0:	4b63      	ldr	r3, [pc, #396]	; (6270 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    60e2:	681b      	ldr	r3, [r3, #0]
    60e4:	681b      	ldr	r3, [r3, #0]
    60e6:	4a63      	ldr	r2, [pc, #396]	; (6274 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    60e8:	6812      	ldr	r2, [r2, #0]
    60ea:	4610      	mov	r0, r2
    60ec:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    60ee:	4b62      	ldr	r3, [pc, #392]	; (6278 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	691b      	ldr	r3, [r3, #16]
    60f4:	4a61      	ldr	r2, [pc, #388]	; (627c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    60f6:	6812      	ldr	r2, [r2, #0]
    60f8:	6812      	ldr	r2, [r2, #0]
    60fa:	4610      	mov	r0, r2
    60fc:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    60fe:	4b60      	ldr	r3, [pc, #384]	; (6280 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	68db      	ldr	r3, [r3, #12]
    6104:	4a5f      	ldr	r2, [pc, #380]	; (6284 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6106:	6812      	ldr	r2, [r2, #0]
    6108:	6812      	ldr	r2, [r2, #0]
    610a:	4610      	mov	r0, r2
    610c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    610e:	4b5e      	ldr	r3, [pc, #376]	; (6288 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6110:	681b      	ldr	r3, [r3, #0]
    6112:	689b      	ldr	r3, [r3, #8]
    6114:	4a5d      	ldr	r2, [pc, #372]	; (628c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    6116:	6812      	ldr	r2, [r2, #0]
    6118:	6812      	ldr	r2, [r2, #0]
    611a:	4610      	mov	r0, r2
    611c:	4798      	blx	r3
            }
        }
        break;
    611e:	e090      	b.n	6242 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    6120:	9b00      	ldr	r3, [sp, #0]
    6122:	2b02      	cmp	r3, #2
    6124:	f040 808f 	bne.w	6246 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    6128:	4b4a      	ldr	r3, [pc, #296]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    612a:	2201      	movs	r2, #1
    612c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    612e:	4b56      	ldr	r3, [pc, #344]	; (6288 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6130:	681b      	ldr	r3, [r3, #0]
    6132:	685b      	ldr	r3, [r3, #4]
    6134:	4a55      	ldr	r2, [pc, #340]	; (628c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    6136:	6812      	ldr	r2, [r2, #0]
    6138:	4610      	mov	r0, r2
    613a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    613c:	4b50      	ldr	r3, [pc, #320]	; (6280 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    613e:	681b      	ldr	r3, [r3, #0]
    6140:	691b      	ldr	r3, [r3, #16]
    6142:	4a50      	ldr	r2, [pc, #320]	; (6284 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6144:	6812      	ldr	r2, [r2, #0]
    6146:	4610      	mov	r0, r2
    6148:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    614a:	4b4d      	ldr	r3, [pc, #308]	; (6280 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	689b      	ldr	r3, [r3, #8]
    6150:	4a4c      	ldr	r2, [pc, #304]	; (6284 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6152:	6812      	ldr	r2, [r2, #0]
    6154:	4610      	mov	r0, r2
    6156:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    6158:	4b47      	ldr	r3, [pc, #284]	; (6278 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    615a:	681b      	ldr	r3, [r3, #0]
    615c:	68db      	ldr	r3, [r3, #12]
    615e:	4a47      	ldr	r2, [pc, #284]	; (627c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6160:	6812      	ldr	r2, [r2, #0]
    6162:	4610      	mov	r0, r2
    6164:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    6166:	4b44      	ldr	r3, [pc, #272]	; (6278 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6168:	681b      	ldr	r3, [r3, #0]
    616a:	689b      	ldr	r3, [r3, #8]
    616c:	4a43      	ldr	r2, [pc, #268]	; (627c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    616e:	6812      	ldr	r2, [r2, #0]
    6170:	6812      	ldr	r2, [r2, #0]
    6172:	4610      	mov	r0, r2
    6174:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    6176:	4b38      	ldr	r3, [pc, #224]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    6178:	681b      	ldr	r3, [r3, #0]
    617a:	685b      	ldr	r3, [r3, #4]
    617c:	4a44      	ldr	r2, [pc, #272]	; (6290 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    617e:	6812      	ldr	r2, [r2, #0]
    6180:	4610      	mov	r0, r2
    6182:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    6184:	4b36      	ldr	r3, [pc, #216]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    6186:	681b      	ldr	r3, [r3, #0]
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	4a42      	ldr	r2, [pc, #264]	; (6294 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    618c:	6812      	ldr	r2, [r2, #0]
    618e:	4610      	mov	r0, r2
    6190:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    6192:	4b35      	ldr	r3, [pc, #212]	; (6268 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	4a3f      	ldr	r2, [pc, #252]	; (6298 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    619a:	6812      	ldr	r2, [r2, #0]
    619c:	4610      	mov	r0, r2
    619e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    61a0:	4b33      	ldr	r3, [pc, #204]	; (6270 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    61a2:	681b      	ldr	r3, [r3, #0]
    61a4:	681b      	ldr	r3, [r3, #0]
    61a6:	4a3d      	ldr	r2, [pc, #244]	; (629c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    61a8:	6812      	ldr	r2, [r2, #0]
    61aa:	4610      	mov	r0, r2
    61ac:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    61ae:	e04a      	b.n	6246 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    61b0:	9b00      	ldr	r3, [sp, #0]
    61b2:	2b02      	cmp	r3, #2
    61b4:	d149      	bne.n	624a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    61b6:	4b27      	ldr	r3, [pc, #156]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    61b8:	2201      	movs	r2, #1
    61ba:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    61bc:	4b32      	ldr	r3, [pc, #200]	; (6288 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    61be:	681b      	ldr	r3, [r3, #0]
    61c0:	685b      	ldr	r3, [r3, #4]
    61c2:	4a32      	ldr	r2, [pc, #200]	; (628c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    61c4:	6812      	ldr	r2, [r2, #0]
    61c6:	4610      	mov	r0, r2
    61c8:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    61ca:	4b2d      	ldr	r3, [pc, #180]	; (6280 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    61cc:	681b      	ldr	r3, [r3, #0]
    61ce:	691b      	ldr	r3, [r3, #16]
    61d0:	4a2c      	ldr	r2, [pc, #176]	; (6284 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    61d2:	6812      	ldr	r2, [r2, #0]
    61d4:	4610      	mov	r0, r2
    61d6:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    61d8:	4b29      	ldr	r3, [pc, #164]	; (6280 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    61da:	681b      	ldr	r3, [r3, #0]
    61dc:	689b      	ldr	r3, [r3, #8]
    61de:	4a29      	ldr	r2, [pc, #164]	; (6284 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    61e0:	6812      	ldr	r2, [r2, #0]
    61e2:	4610      	mov	r0, r2
    61e4:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    61e6:	4b24      	ldr	r3, [pc, #144]	; (6278 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    61e8:	681b      	ldr	r3, [r3, #0]
    61ea:	68db      	ldr	r3, [r3, #12]
    61ec:	4a23      	ldr	r2, [pc, #140]	; (627c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    61ee:	6812      	ldr	r2, [r2, #0]
    61f0:	4610      	mov	r0, r2
    61f2:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    61f4:	4b20      	ldr	r3, [pc, #128]	; (6278 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    61f6:	681b      	ldr	r3, [r3, #0]
    61f8:	689b      	ldr	r3, [r3, #8]
    61fa:	4a20      	ldr	r2, [pc, #128]	; (627c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    61fc:	6812      	ldr	r2, [r2, #0]
    61fe:	6812      	ldr	r2, [r2, #0]
    6200:	4610      	mov	r0, r2
    6202:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    6204:	4b26      	ldr	r3, [pc, #152]	; (62a0 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	685b      	ldr	r3, [r3, #4]
    620a:	4a26      	ldr	r2, [pc, #152]	; (62a4 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    620c:	6812      	ldr	r2, [r2, #0]
    620e:	4610      	mov	r0, r2
    6210:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    6212:	4b25      	ldr	r3, [pc, #148]	; (62a8 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    6214:	681b      	ldr	r3, [r3, #0]
    6216:	681b      	ldr	r3, [r3, #0]
    6218:	4a24      	ldr	r2, [pc, #144]	; (62ac <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    621a:	6812      	ldr	r2, [r2, #0]
    621c:	4610      	mov	r0, r2
    621e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    6220:	4b23      	ldr	r3, [pc, #140]	; (62b0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    6222:	681b      	ldr	r3, [r3, #0]
    6224:	681b      	ldr	r3, [r3, #0]
    6226:	4a23      	ldr	r2, [pc, #140]	; (62b4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    6228:	6812      	ldr	r2, [r2, #0]
    622a:	4610      	mov	r0, r2
    622c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    622e:	4b22      	ldr	r3, [pc, #136]	; (62b8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    6230:	681b      	ldr	r3, [r3, #0]
    6232:	681b      	ldr	r3, [r3, #0]
    6234:	4a21      	ldr	r2, [pc, #132]	; (62bc <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    6236:	6812      	ldr	r2, [r2, #0]
    6238:	4610      	mov	r0, r2
    623a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    623c:	e005      	b.n	624a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    623e:	bf00      	nop
    6240:	e004      	b.n	624c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    6242:	bf00      	nop
    6244:	e002      	b.n	624c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    6246:	bf00      	nop
    6248:	e000      	b.n	624c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    624a:	bf00      	nop
    }

}
    624c:	bf00      	nop
    624e:	b003      	add	sp, #12
    6250:	f85d fb04 	ldr.w	pc, [sp], #4
    6254:	1fff8b19 	.word	0x1fff8b19
    6258:	1fff8bc8 	.word	0x1fff8bc8
    625c:	1fff8be8 	.word	0x1fff8be8
    6260:	1fff8bcc 	.word	0x1fff8bcc
    6264:	1fff8bf0 	.word	0x1fff8bf0
    6268:	1fff8bd0 	.word	0x1fff8bd0
    626c:	1fff8bf8 	.word	0x1fff8bf8
    6270:	1fff8bd4 	.word	0x1fff8bd4
    6274:	1fff8c00 	.word	0x1fff8c00
    6278:	1fff8bbc 	.word	0x1fff8bbc
    627c:	1fff8be0 	.word	0x1fff8be0
    6280:	1fff8bc0 	.word	0x1fff8bc0
    6284:	1fff8bdc 	.word	0x1fff8bdc
    6288:	1fff8bc4 	.word	0x1fff8bc4
    628c:	1fff8bd8 	.word	0x1fff8bd8
    6290:	1fff8be4 	.word	0x1fff8be4
    6294:	1fff8bec 	.word	0x1fff8bec
    6298:	1fff8bf4 	.word	0x1fff8bf4
    629c:	1fff8bfc 	.word	0x1fff8bfc
    62a0:	1fff8c04 	.word	0x1fff8c04
    62a4:	1fff8c14 	.word	0x1fff8c14
    62a8:	1fff8c08 	.word	0x1fff8c08
    62ac:	1fff8c18 	.word	0x1fff8c18
    62b0:	1fff8c0c 	.word	0x1fff8c0c
    62b4:	1fff8c1c 	.word	0x1fff8c1c
    62b8:	1fff8c10 	.word	0x1fff8c10
    62bc:	1fff8c20 	.word	0x1fff8c20

000062c0 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    62c0:	b500      	push	{lr}
    62c2:	b083      	sub	sp, #12
    62c4:	9001      	str	r0, [sp, #4]
    62c6:	9100      	str	r1, [sp, #0]
    switch(Command)
    62c8:	9b00      	ldr	r3, [sp, #0]
    62ca:	2b04      	cmp	r3, #4
    62cc:	d010      	beq.n	62f0 <Clock_Ip_Command+0x30>
    62ce:	9b00      	ldr	r3, [sp, #0]
    62d0:	2b04      	cmp	r3, #4
    62d2:	d811      	bhi.n	62f8 <Clock_Ip_Command+0x38>
    62d4:	9b00      	ldr	r3, [sp, #0]
    62d6:	2b01      	cmp	r3, #1
    62d8:	d006      	beq.n	62e8 <Clock_Ip_Command+0x28>
    62da:	9b00      	ldr	r3, [sp, #0]
    62dc:	2b02      	cmp	r3, #2
    62de:	d10b      	bne.n	62f8 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    62e0:	9801      	ldr	r0, [sp, #4]
    62e2:	f7ff fdb3 	bl	5e4c <Clock_Ip_ClockInitializeObjects>
            break;
    62e6:	e008      	b.n	62fa <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    62e8:	9801      	ldr	r0, [sp, #4]
    62ea:	f7ff f9db 	bl	56a4 <Clock_Ip_SpecificPlatformInitClock>
            break;
    62ee:	e004      	b.n	62fa <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    62f0:	9801      	ldr	r0, [sp, #4]
    62f2:	f7ff f8ed 	bl	54d0 <DisableSafeClock>
            break;
    62f6:	e000      	b.n	62fa <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    62f8:	bf00      	nop
    }
}
    62fa:	bf00      	nop
    62fc:	b003      	add	sp, #12
    62fe:	f85d fb04 	ldr.w	pc, [sp], #4
    6302:	bf00      	nop

00006304 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    6304:	b500      	push	{lr}
    6306:	b085      	sub	sp, #20
    6308:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    630a:	4a20      	ldr	r2, [pc, #128]	; (638c <Mcu_Init+0x88>)
    630c:	9b01      	ldr	r3, [sp, #4]
    630e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    6310:	2300      	movs	r3, #0
    6312:	9303      	str	r3, [sp, #12]
    6314:	e010      	b.n	6338 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    6316:	4b1d      	ldr	r3, [pc, #116]	; (638c <Mcu_Init+0x88>)
    6318:	681b      	ldr	r3, [r3, #0]
    631a:	6919      	ldr	r1, [r3, #16]
    631c:	9a03      	ldr	r2, [sp, #12]
    631e:	4613      	mov	r3, r2
    6320:	005b      	lsls	r3, r3, #1
    6322:	4413      	add	r3, r2
    6324:	009b      	lsls	r3, r3, #2
    6326:	440b      	add	r3, r1
    6328:	681b      	ldr	r3, [r3, #0]
    632a:	9a03      	ldr	r2, [sp, #12]
    632c:	b2d1      	uxtb	r1, r2
    632e:	4a18      	ldr	r2, [pc, #96]	; (6390 <Mcu_Init+0x8c>)
    6330:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    6332:	9b03      	ldr	r3, [sp, #12]
    6334:	3301      	adds	r3, #1
    6336:	9303      	str	r3, [sp, #12]
    6338:	4b14      	ldr	r3, [pc, #80]	; (638c <Mcu_Init+0x88>)
    633a:	681b      	ldr	r3, [r3, #0]
    633c:	689b      	ldr	r3, [r3, #8]
    633e:	9a03      	ldr	r2, [sp, #12]
    6340:	429a      	cmp	r2, r3
    6342:	d3e8      	bcc.n	6316 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6344:	2300      	movs	r3, #0
    6346:	9303      	str	r3, [sp, #12]
    6348:	e010      	b.n	636c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    634a:	4b10      	ldr	r3, [pc, #64]	; (638c <Mcu_Init+0x88>)
    634c:	681b      	ldr	r3, [r3, #0]
    634e:	6959      	ldr	r1, [r3, #20]
    6350:	9a03      	ldr	r2, [sp, #12]
    6352:	4613      	mov	r3, r2
    6354:	01db      	lsls	r3, r3, #7
    6356:	1a9b      	subs	r3, r3, r2
    6358:	00db      	lsls	r3, r3, #3
    635a:	440b      	add	r3, r1
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	9a03      	ldr	r2, [sp, #12]
    6360:	b2d1      	uxtb	r1, r2
    6362:	4a0c      	ldr	r2, [pc, #48]	; (6394 <Mcu_Init+0x90>)
    6364:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6366:	9b03      	ldr	r3, [sp, #12]
    6368:	3301      	adds	r3, #1
    636a:	9303      	str	r3, [sp, #12]
    636c:	4b07      	ldr	r3, [pc, #28]	; (638c <Mcu_Init+0x88>)
    636e:	681b      	ldr	r3, [r3, #0]
    6370:	68db      	ldr	r3, [r3, #12]
    6372:	9a03      	ldr	r2, [sp, #12]
    6374:	429a      	cmp	r2, r3
    6376:	d3e8      	bcc.n	634a <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    6378:	4b04      	ldr	r3, [pc, #16]	; (638c <Mcu_Init+0x88>)
    637a:	681b      	ldr	r3, [r3, #0]
    637c:	699b      	ldr	r3, [r3, #24]
    637e:	4618      	mov	r0, r3
    6380:	f000 f88a 	bl	6498 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6384:	bf00      	nop
    6386:	b005      	add	sp, #20
    6388:	f85d fb04 	ldr.w	pc, [sp], #4
    638c:	1fff8cfc 	.word	0x1fff8cfc
    6390:	1fff8cf8 	.word	0x1fff8cf8
    6394:	1fff8cf4 	.word	0x1fff8cf4

00006398 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    6398:	b084      	sub	sp, #16
    639a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    639c:	2301      	movs	r3, #1
    639e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    63a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    63a6:	4618      	mov	r0, r3
    63a8:	b004      	add	sp, #16
    63aa:	4770      	bx	lr

000063ac <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    63ac:	b500      	push	{lr}
    63ae:	b085      	sub	sp, #20
    63b0:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    63b2:	4a0e      	ldr	r2, [pc, #56]	; (63ec <Mcu_InitClock+0x40>)
    63b4:	9b01      	ldr	r3, [sp, #4]
    63b6:	4413      	add	r3, r2
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    63be:	4b0c      	ldr	r3, [pc, #48]	; (63f0 <Mcu_InitClock+0x44>)
    63c0:	681b      	ldr	r3, [r3, #0]
    63c2:	6959      	ldr	r1, [r3, #20]
    63c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    63c8:	4613      	mov	r3, r2
    63ca:	01db      	lsls	r3, r3, #7
    63cc:	1a9b      	subs	r3, r3, r2
    63ce:	00db      	lsls	r3, r3, #3
    63d0:	440b      	add	r3, r1
    63d2:	4618      	mov	r0, r3
    63d4:	f000 f86a 	bl	64ac <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    63d8:	2300      	movs	r3, #0
    63da:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    63de:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    63e2:	4618      	mov	r0, r3
    63e4:	b005      	add	sp, #20
    63e6:	f85d fb04 	ldr.w	pc, [sp], #4
    63ea:	bf00      	nop
    63ec:	1fff8cf4 	.word	0x1fff8cf4
    63f0:	1fff8cfc 	.word	0x1fff8cfc

000063f4 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    63f4:	b500      	push	{lr}
    63f6:	b085      	sub	sp, #20
    63f8:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    63fa:	4a0d      	ldr	r2, [pc, #52]	; (6430 <Mcu_SetMode+0x3c>)
    63fc:	9b01      	ldr	r3, [sp, #4]
    63fe:	4413      	add	r3, r2
    6400:	781b      	ldrb	r3, [r3, #0]
    6402:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    6406:	f009 fc55 	bl	fcb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    640a:	4b0a      	ldr	r3, [pc, #40]	; (6434 <Mcu_SetMode+0x40>)
    640c:	681b      	ldr	r3, [r3, #0]
    640e:	6919      	ldr	r1, [r3, #16]
    6410:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6414:	4613      	mov	r3, r2
    6416:	005b      	lsls	r3, r3, #1
    6418:	4413      	add	r3, r2
    641a:	009b      	lsls	r3, r3, #2
    641c:	440b      	add	r3, r1
    641e:	4618      	mov	r0, r3
    6420:	f000 f84e 	bl	64c0 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    6424:	f009 fc72 	bl	fd0c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6428:	bf00      	nop
    642a:	b005      	add	sp, #20
    642c:	f85d fb04 	ldr.w	pc, [sp], #4
    6430:	1fff8cf8 	.word	0x1fff8cf8
    6434:	1fff8cfc 	.word	0x1fff8cfc

00006438 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    6438:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    643a:	2302      	movs	r3, #2
    643c:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    643e:	9b01      	ldr	r3, [sp, #4]
}
    6440:	4618      	mov	r0, r3
    6442:	b002      	add	sp, #8
    6444:	4770      	bx	lr

00006446 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    6446:	b500      	push	{lr}
    6448:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    644a:	f000 f843 	bl	64d4 <Mcu_Ipw_GetResetReason>
    644e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    6450:	9b01      	ldr	r3, [sp, #4]
}
    6452:	4618      	mov	r0, r3
    6454:	b003      	add	sp, #12
    6456:	f85d fb04 	ldr.w	pc, [sp], #4

0000645a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    645a:	b500      	push	{lr}
    645c:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    645e:	f000 f83f 	bl	64e0 <Mcu_Ipw_GetResetRawValue>
    6462:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    6464:	9b01      	ldr	r3, [sp, #4]
}
    6466:	4618      	mov	r0, r3
    6468:	b003      	add	sp, #12
    646a:	f85d fb04 	ldr.w	pc, [sp], #4

0000646e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    646e:	b500      	push	{lr}
    6470:	b083      	sub	sp, #12
    6472:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    6474:	9801      	ldr	r0, [sp, #4]
    6476:	f000 f839 	bl	64ec <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    647a:	bf00      	nop
    647c:	b003      	add	sp, #12
    647e:	f85d fb04 	ldr.w	pc, [sp], #4

00006482 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    6482:	b082      	sub	sp, #8
    6484:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    6486:	4b03      	ldr	r3, [pc, #12]	; (6494 <Mcu_ClkSrcFailureNotification+0x12>)
    6488:	681b      	ldr	r3, [r3, #0]
    648a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    648c:	bf00      	nop
    648e:	b002      	add	sp, #8
    6490:	4770      	bx	lr
    6492:	bf00      	nop
    6494:	1fff8cfc 	.word	0x1fff8cfc

00006498 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    6498:	b500      	push	{lr}
    649a:	b083      	sub	sp, #12
    649c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    649e:	9801      	ldr	r0, [sp, #4]
    64a0:	f000 f882 	bl	65a8 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    64a4:	bf00      	nop
    64a6:	b003      	add	sp, #12
    64a8:	f85d fb04 	ldr.w	pc, [sp], #4

000064ac <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    64ac:	b500      	push	{lr}
    64ae:	b083      	sub	sp, #12
    64b0:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    64b2:	9801      	ldr	r0, [sp, #4]
    64b4:	f7fc fc6a 	bl	2d8c <Clock_Ip_InitClock>
}
    64b8:	bf00      	nop
    64ba:	b003      	add	sp, #12
    64bc:	f85d fb04 	ldr.w	pc, [sp], #4

000064c0 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    64c0:	b500      	push	{lr}
    64c2:	b083      	sub	sp, #12
    64c4:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    64c6:	9801      	ldr	r0, [sp, #4]
    64c8:	f000 f820 	bl	650c <Power_Ip_SetMode>
}
    64cc:	bf00      	nop
    64ce:	b003      	add	sp, #12
    64d0:	f85d fb04 	ldr.w	pc, [sp], #4

000064d4 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    64d4:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    64d6:	f000 f84f 	bl	6578 <Power_Ip_GetResetReason>
    64da:	4603      	mov	r3, r0
}
    64dc:	4618      	mov	r0, r3
    64de:	bd08      	pop	{r3, pc}

000064e0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    64e0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    64e2:	f000 f857 	bl	6594 <Power_Ip_GetResetRawValue>
    64e6:	4603      	mov	r3, r0
}
    64e8:	4618      	mov	r0, r3
    64ea:	bd08      	pop	{r3, pc}

000064ec <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    64ec:	b500      	push	{lr}
    64ee:	b083      	sub	sp, #12
    64f0:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    64f2:	9b01      	ldr	r3, [sp, #4]
    64f4:	2b00      	cmp	r3, #0
    64f6:	d102      	bne.n	64fe <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    64f8:	f000 f86c 	bl	65d4 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    64fc:	e001      	b.n	6502 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    64fe:	f000 f86e 	bl	65de <Power_Ip_EnableSleepOnExit>
}
    6502:	bf00      	nop
    6504:	b003      	add	sp, #12
    6506:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000650c <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    650c:	b500      	push	{lr}
    650e:	b085      	sub	sp, #20
    6510:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    6512:	9b01      	ldr	r3, [sp, #4]
    6514:	685b      	ldr	r3, [r3, #4]
    6516:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    6518:	9802      	ldr	r0, [sp, #8]
    651a:	f000 f9f5 	bl	6908 <Power_Ip_SMC_ModeCheckEntry>
    651e:	4603      	mov	r3, r0
    6520:	2b00      	cmp	r3, #0
    6522:	d002      	beq.n	652a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6524:	2301      	movs	r3, #1
    6526:	9303      	str	r3, [sp, #12]
    6528:	e003      	b.n	6532 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    652a:	9801      	ldr	r0, [sp, #4]
    652c:	f000 fa1e 	bl	696c <Power_Ip_SMC_ModeConfig>
    6530:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    6532:	9b03      	ldr	r3, [sp, #12]
    6534:	2b01      	cmp	r3, #1
    6536:	d103      	bne.n	6540 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6538:	21ff      	movs	r1, #255	; 0xff
    653a:	2003      	movs	r0, #3
    653c:	f000 f8f4 	bl	6728 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    6540:	bf00      	nop
    6542:	b005      	add	sp, #20
    6544:	f85d fb04 	ldr.w	pc, [sp], #4

00006548 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    6548:	b084      	sub	sp, #16
    654a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    654c:	230c      	movs	r3, #12
    654e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    6550:	4a08      	ldr	r2, [pc, #32]	; (6574 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6552:	9b01      	ldr	r3, [sp, #4]
    6554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6558:	2b0e      	cmp	r3, #14
    655a:	d805      	bhi.n	6568 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    655c:	4a05      	ldr	r2, [pc, #20]	; (6574 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6564:	9303      	str	r3, [sp, #12]
    6566:	e001      	b.n	656c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    6568:	230c      	movs	r3, #12
    656a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    656c:	9b03      	ldr	r3, [sp, #12]
}
    656e:	4618      	mov	r0, r3
    6570:	b004      	add	sp, #16
    6572:	4770      	bx	lr
    6574:	00011b78 	.word	0x00011b78

00006578 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    6578:	b500      	push	{lr}
    657a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    657c:	f000 f940 	bl	6800 <Power_Ip_RCM_GetResetReason>
    6580:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    6582:	9801      	ldr	r0, [sp, #4]
    6584:	f7ff ffe0 	bl	6548 <Power_Ip_ConvertIntergeToResetType>
    6588:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    658a:	9b00      	ldr	r3, [sp, #0]
}
    658c:	4618      	mov	r0, r3
    658e:	b003      	add	sp, #12
    6590:	f85d fb04 	ldr.w	pc, [sp], #4

00006594 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6594:	b500      	push	{lr}
    6596:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    6598:	f000 f98a 	bl	68b0 <Power_Ip_RCM_GetResetRawValue>
    659c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    659e:	9b01      	ldr	r3, [sp, #4]
}
    65a0:	4618      	mov	r0, r3
    65a2:	b003      	add	sp, #12
    65a4:	f85d fb04 	ldr.w	pc, [sp], #4

000065a8 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    65a8:	b500      	push	{lr}
    65aa:	b083      	sub	sp, #12
    65ac:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    65ae:	9b01      	ldr	r3, [sp, #4]
    65b0:	681b      	ldr	r3, [r3, #0]
    65b2:	4618      	mov	r0, r3
    65b4:	f000 f90e 	bl	67d4 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    65b8:	9b01      	ldr	r3, [sp, #4]
    65ba:	685b      	ldr	r3, [r3, #4]
    65bc:	4618      	mov	r0, r3
    65be:	f000 f86d 	bl	669c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	689b      	ldr	r3, [r3, #8]
    65c6:	4618      	mov	r0, r3
    65c8:	f000 f990 	bl	68ec <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    65cc:	bf00      	nop
    65ce:	b003      	add	sp, #12
    65d0:	f85d fb04 	ldr.w	pc, [sp], #4

000065d4 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    65d4:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    65d6:	f000 f811 	bl	65fc <Power_Ip_CM4_DisableSleepOnExit>
}
    65da:	bf00      	nop
    65dc:	bd08      	pop	{r3, pc}

000065de <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    65de:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    65e0:	f000 f820 	bl	6624 <Power_Ip_CM4_EnableSleepOnExit>
}
    65e4:	bf00      	nop
    65e6:	bd08      	pop	{r3, pc}

000065e8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    65e8:	b082      	sub	sp, #8
    65ea:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    65ec:	4a02      	ldr	r2, [pc, #8]	; (65f8 <Power_Ip_InstallNotificationsCallback+0x10>)
    65ee:	9b01      	ldr	r3, [sp, #4]
    65f0:	6013      	str	r3, [r2, #0]
}
    65f2:	bf00      	nop
    65f4:	b002      	add	sp, #8
    65f6:	4770      	bx	lr
    65f8:	1fff8b1c 	.word	0x1fff8b1c

000065fc <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    65fc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    65fe:	2300      	movs	r3, #0
    6600:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6602:	4b07      	ldr	r3, [pc, #28]	; (6620 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6604:	681b      	ldr	r3, [r3, #0]
    6606:	685b      	ldr	r3, [r3, #4]
    6608:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    660a:	9b01      	ldr	r3, [sp, #4]
    660c:	f023 0302 	bic.w	r3, r3, #2
    6610:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6612:	4b03      	ldr	r3, [pc, #12]	; (6620 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6614:	681b      	ldr	r3, [r3, #0]
    6616:	9a01      	ldr	r2, [sp, #4]
    6618:	605a      	str	r2, [r3, #4]
}
    661a:	bf00      	nop
    661c:	b002      	add	sp, #8
    661e:	4770      	bx	lr
    6620:	1fff8b20 	.word	0x1fff8b20

00006624 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    6624:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6626:	2300      	movs	r3, #0
    6628:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    662a:	4b07      	ldr	r3, [pc, #28]	; (6648 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    662c:	681b      	ldr	r3, [r3, #0]
    662e:	685b      	ldr	r3, [r3, #4]
    6630:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    6632:	9b01      	ldr	r3, [sp, #4]
    6634:	f043 0302 	orr.w	r3, r3, #2
    6638:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    663a:	4b03      	ldr	r3, [pc, #12]	; (6648 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    663c:	681b      	ldr	r3, [r3, #0]
    663e:	9a01      	ldr	r2, [sp, #4]
    6640:	605a      	str	r2, [r3, #4]
}
    6642:	bf00      	nop
    6644:	b002      	add	sp, #8
    6646:	4770      	bx	lr
    6648:	1fff8b20 	.word	0x1fff8b20

0000664c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    664c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    664e:	2300      	movs	r3, #0
    6650:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6652:	4b07      	ldr	r3, [pc, #28]	; (6670 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6654:	681b      	ldr	r3, [r3, #0]
    6656:	685b      	ldr	r3, [r3, #4]
    6658:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	f043 0304 	orr.w	r3, r3, #4
    6660:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6662:	4b03      	ldr	r3, [pc, #12]	; (6670 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6664:	681b      	ldr	r3, [r3, #0]
    6666:	9a01      	ldr	r2, [sp, #4]
    6668:	605a      	str	r2, [r3, #4]
}
    666a:	bf00      	nop
    666c:	b002      	add	sp, #8
    666e:	4770      	bx	lr
    6670:	1fff8b20 	.word	0x1fff8b20

00006674 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6674:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6676:	2300      	movs	r3, #0
    6678:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    667a:	4b07      	ldr	r3, [pc, #28]	; (6698 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	685b      	ldr	r3, [r3, #4]
    6680:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6682:	9b01      	ldr	r3, [sp, #4]
    6684:	f023 0304 	bic.w	r3, r3, #4
    6688:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    668a:	4b03      	ldr	r3, [pc, #12]	; (6698 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    668c:	681b      	ldr	r3, [r3, #0]
    668e:	9a01      	ldr	r2, [sp, #4]
    6690:	605a      	str	r2, [r3, #4]
}
    6692:	bf00      	nop
    6694:	b002      	add	sp, #8
    6696:	4770      	bx	lr
    6698:	1fff8b20 	.word	0x1fff8b20

0000669c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    669c:	b084      	sub	sp, #16
    669e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    66a0:	4b20      	ldr	r3, [pc, #128]	; (6724 <Power_Ip_PMC_PowerInit+0x88>)
    66a2:	781b      	ldrb	r3, [r3, #0]
    66a4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    66a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66ac:	f003 030f 	and.w	r3, r3, #15
    66b0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    66b4:	9b01      	ldr	r3, [sp, #4]
    66b6:	781a      	ldrb	r2, [r3, #0]
    66b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66bc:	4313      	orrs	r3, r2
    66be:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    66c2:	4a18      	ldr	r2, [pc, #96]	; (6724 <Power_Ip_PMC_PowerInit+0x88>)
    66c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66c8:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    66ca:	4b16      	ldr	r3, [pc, #88]	; (6724 <Power_Ip_PMC_PowerInit+0x88>)
    66cc:	785b      	ldrb	r3, [r3, #1]
    66ce:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    66d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66d6:	f003 031f 	and.w	r3, r3, #31
    66da:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    66de:	9b01      	ldr	r3, [sp, #4]
    66e0:	785a      	ldrb	r2, [r3, #1]
    66e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66e6:	4313      	orrs	r3, r2
    66e8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    66ec:	4a0d      	ldr	r2, [pc, #52]	; (6724 <Power_Ip_PMC_PowerInit+0x88>)
    66ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66f2:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    66f4:	4b0b      	ldr	r3, [pc, #44]	; (6724 <Power_Ip_PMC_PowerInit+0x88>)
    66f6:	789b      	ldrb	r3, [r3, #2]
    66f8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    66fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6700:	f003 0338 	and.w	r3, r3, #56	; 0x38
    6704:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6708:	9b01      	ldr	r3, [sp, #4]
    670a:	789a      	ldrb	r2, [r3, #2]
    670c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6710:	4313      	orrs	r3, r2
    6712:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    6716:	4a03      	ldr	r2, [pc, #12]	; (6724 <Power_Ip_PMC_PowerInit+0x88>)
    6718:	f89d 300f 	ldrb.w	r3, [sp, #15]
    671c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    671e:	bf00      	nop
    6720:	b004      	add	sp, #16
    6722:	4770      	bx	lr
    6724:	4007d000 	.word	0x4007d000

00006728 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6728:	b500      	push	{lr}
    672a:	b083      	sub	sp, #12
    672c:	9001      	str	r0, [sp, #4]
    672e:	460b      	mov	r3, r1
    6730:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6734:	4b05      	ldr	r3, [pc, #20]	; (674c <Power_Ip_ReportPowerErrors+0x24>)
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	f89d 2003 	ldrb.w	r2, [sp, #3]
    673c:	4611      	mov	r1, r2
    673e:	9801      	ldr	r0, [sp, #4]
    6740:	4798      	blx	r3
}
    6742:	bf00      	nop
    6744:	b003      	add	sp, #12
    6746:	f85d fb04 	ldr.w	pc, [sp], #4
    674a:	bf00      	nop
    674c:	1fff8b1c 	.word	0x1fff8b1c

00006750 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6750:	b082      	sub	sp, #8
    6752:	9001      	str	r0, [sp, #4]
    6754:	460b      	mov	r3, r1
    6756:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    675a:	bf00      	nop
    675c:	b002      	add	sp, #8
    675e:	4770      	bx	lr

00006760 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6760:	b500      	push	{lr}
    6762:	b085      	sub	sp, #20
    6764:	9003      	str	r0, [sp, #12]
    6766:	9102      	str	r1, [sp, #8]
    6768:	9201      	str	r2, [sp, #4]
    676a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    676c:	2000      	movs	r0, #0
    676e:	f7fc f83d 	bl	27ec <OsIf_GetCounter>
    6772:	4602      	mov	r2, r0
    6774:	9b03      	ldr	r3, [sp, #12]
    6776:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6778:	9b02      	ldr	r3, [sp, #8]
    677a:	2200      	movs	r2, #0
    677c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    677e:	2100      	movs	r1, #0
    6780:	9800      	ldr	r0, [sp, #0]
    6782:	f7fc f87f 	bl	2884 <OsIf_MicrosToTicks>
    6786:	4602      	mov	r2, r0
    6788:	9b01      	ldr	r3, [sp, #4]
    678a:	601a      	str	r2, [r3, #0]
}
    678c:	bf00      	nop
    678e:	b005      	add	sp, #20
    6790:	f85d fb04 	ldr.w	pc, [sp], #4

00006794 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6794:	b500      	push	{lr}
    6796:	b087      	sub	sp, #28
    6798:	9003      	str	r0, [sp, #12]
    679a:	9102      	str	r1, [sp, #8]
    679c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    679e:	2300      	movs	r3, #0
    67a0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    67a4:	2100      	movs	r1, #0
    67a6:	9803      	ldr	r0, [sp, #12]
    67a8:	f7fc f839 	bl	281e <OsIf_GetElapsed>
    67ac:	4602      	mov	r2, r0
    67ae:	9b02      	ldr	r3, [sp, #8]
    67b0:	681b      	ldr	r3, [r3, #0]
    67b2:	441a      	add	r2, r3
    67b4:	9b02      	ldr	r3, [sp, #8]
    67b6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    67b8:	9b02      	ldr	r3, [sp, #8]
    67ba:	681b      	ldr	r3, [r3, #0]
    67bc:	9a01      	ldr	r2, [sp, #4]
    67be:	429a      	cmp	r2, r3
    67c0:	d802      	bhi.n	67c8 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    67c2:	2301      	movs	r3, #1
    67c4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    67c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    67cc:	4618      	mov	r0, r3
    67ce:	b007      	add	sp, #28
    67d0:	f85d fb04 	ldr.w	pc, [sp], #4

000067d4 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    67d4:	b082      	sub	sp, #8
    67d6:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    67d8:	9b01      	ldr	r3, [sp, #4]
    67da:	681a      	ldr	r2, [r3, #0]
    67dc:	4907      	ldr	r1, [pc, #28]	; (67fc <Power_Ip_RCM_ResetInit+0x28>)
    67de:	f641 7307 	movw	r3, #7943	; 0x1f07
    67e2:	4013      	ands	r3, r2
    67e4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    67e6:	9b01      	ldr	r3, [sp, #4]
    67e8:	685a      	ldr	r2, [r3, #4]
    67ea:	4904      	ldr	r1, [pc, #16]	; (67fc <Power_Ip_RCM_ResetInit+0x28>)
    67ec:	f642 73ff 	movw	r3, #12287	; 0x2fff
    67f0:	4013      	ands	r3, r2
    67f2:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    67f4:	bf00      	nop
    67f6:	b002      	add	sp, #8
    67f8:	4770      	bx	lr
    67fa:	bf00      	nop
    67fc:	4007f000 	.word	0x4007f000

00006800 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6800:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6802:	230c      	movs	r3, #12
    6804:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    6806:	2300      	movs	r3, #0
    6808:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    680a:	2300      	movs	r3, #0
    680c:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    680e:	2300      	movs	r3, #0
    6810:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6812:	4b25      	ldr	r3, [pc, #148]	; (68a8 <Power_Ip_RCM_GetResetReason+0xa8>)
    6814:	699a      	ldr	r2, [r3, #24]
    6816:	f642 73ee 	movw	r3, #12270	; 0x2fee
    681a:	4013      	ands	r3, r2
    681c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    681e:	9b03      	ldr	r3, [sp, #12]
    6820:	2b00      	cmp	r3, #0
    6822:	d008      	beq.n	6836 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6824:	4920      	ldr	r1, [pc, #128]	; (68a8 <Power_Ip_RCM_GetResetReason+0xa8>)
    6826:	9a03      	ldr	r2, [sp, #12]
    6828:	f642 73ee 	movw	r3, #12270	; 0x2fee
    682c:	4013      	ands	r3, r2
    682e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6830:	4a1e      	ldr	r2, [pc, #120]	; (68ac <Power_Ip_RCM_GetResetReason+0xac>)
    6832:	9b03      	ldr	r3, [sp, #12]
    6834:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6836:	4b1d      	ldr	r3, [pc, #116]	; (68ac <Power_Ip_RCM_GetResetReason+0xac>)
    6838:	681b      	ldr	r3, [r3, #0]
    683a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    683c:	9a02      	ldr	r2, [sp, #8]
    683e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6842:	4013      	ands	r3, r2
    6844:	2b82      	cmp	r3, #130	; 0x82
    6846:	d102      	bne.n	684e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6848:	2305      	movs	r3, #5
    684a:	9307      	str	r3, [sp, #28]
    684c:	e027      	b.n	689e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    684e:	2300      	movs	r3, #0
    6850:	9306      	str	r3, [sp, #24]
    6852:	e021      	b.n	6898 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6854:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6858:	9b06      	ldr	r3, [sp, #24]
    685a:	fa22 f303 	lsr.w	r3, r2, r3
    685e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6860:	9a01      	ldr	r2, [sp, #4]
    6862:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6866:	4013      	ands	r3, r2
    6868:	2b00      	cmp	r3, #0
    686a:	d012      	beq.n	6892 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    686c:	9a01      	ldr	r2, [sp, #4]
    686e:	9b02      	ldr	r3, [sp, #8]
    6870:	4013      	ands	r3, r2
    6872:	2b00      	cmp	r3, #0
    6874:	d00a      	beq.n	688c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6876:	9b05      	ldr	r3, [sp, #20]
    6878:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    687a:	9b04      	ldr	r3, [sp, #16]
    687c:	3301      	adds	r3, #1
    687e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6880:	9b04      	ldr	r3, [sp, #16]
    6882:	2b01      	cmp	r3, #1
    6884:	d902      	bls.n	688c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6886:	230d      	movs	r3, #13
    6888:	9307      	str	r3, [sp, #28]
                        break;
    688a:	e008      	b.n	689e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    688c:	9b05      	ldr	r3, [sp, #20]
    688e:	3301      	adds	r3, #1
    6890:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6892:	9b06      	ldr	r3, [sp, #24]
    6894:	3301      	adds	r3, #1
    6896:	9306      	str	r3, [sp, #24]
    6898:	9b06      	ldr	r3, [sp, #24]
    689a:	2b1f      	cmp	r3, #31
    689c:	d9da      	bls.n	6854 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    689e:	9b07      	ldr	r3, [sp, #28]
}
    68a0:	4618      	mov	r0, r3
    68a2:	b008      	add	sp, #32
    68a4:	4770      	bx	lr
    68a6:	bf00      	nop
    68a8:	4007f000 	.word	0x4007f000
    68ac:	1fff8d00 	.word	0x1fff8d00

000068b0 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    68b0:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    68b2:	4b0c      	ldr	r3, [pc, #48]	; (68e4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    68b4:	699a      	ldr	r2, [r3, #24]
    68b6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    68ba:	4013      	ands	r3, r2
    68bc:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    68be:	9b01      	ldr	r3, [sp, #4]
    68c0:	2b00      	cmp	r3, #0
    68c2:	d008      	beq.n	68d6 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    68c4:	4907      	ldr	r1, [pc, #28]	; (68e4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    68c6:	9a01      	ldr	r2, [sp, #4]
    68c8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    68cc:	4013      	ands	r3, r2
    68ce:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    68d0:	4a05      	ldr	r2, [pc, #20]	; (68e8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    68d2:	9b01      	ldr	r3, [sp, #4]
    68d4:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    68d6:	4b04      	ldr	r3, [pc, #16]	; (68e8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    68d8:	681b      	ldr	r3, [r3, #0]
    68da:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    68dc:	9b00      	ldr	r3, [sp, #0]
}
    68de:	4618      	mov	r0, r3
    68e0:	b002      	add	sp, #8
    68e2:	4770      	bx	lr
    68e4:	4007f000 	.word	0x4007f000
    68e8:	1fff8d00 	.word	0x1fff8d00

000068ec <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    68ec:	b082      	sub	sp, #8
    68ee:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    68f0:	9b01      	ldr	r3, [sp, #4]
    68f2:	681b      	ldr	r3, [r3, #0]
    68f4:	4a03      	ldr	r2, [pc, #12]	; (6904 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    68f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    68fa:	6093      	str	r3, [r2, #8]
}
    68fc:	bf00      	nop
    68fe:	b002      	add	sp, #8
    6900:	4770      	bx	lr
    6902:	bf00      	nop
    6904:	4007e000 	.word	0x4007e000

00006908 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6908:	b084      	sub	sp, #16
    690a:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    690c:	2301      	movs	r3, #1
    690e:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6910:	4b15      	ldr	r3, [pc, #84]	; (6968 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6912:	695b      	ldr	r3, [r3, #20]
    6914:	b2db      	uxtb	r3, r3
    6916:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6918:	9b01      	ldr	r3, [sp, #4]
    691a:	2b02      	cmp	r3, #2
    691c:	d012      	beq.n	6944 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    691e:	9b01      	ldr	r3, [sp, #4]
    6920:	2b02      	cmp	r3, #2
    6922:	d818      	bhi.n	6956 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6924:	9b01      	ldr	r3, [sp, #4]
    6926:	2b00      	cmp	r3, #0
    6928:	d003      	beq.n	6932 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    692a:	9b01      	ldr	r3, [sp, #4]
    692c:	2b01      	cmp	r3, #1
    692e:	d003      	beq.n	6938 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6930:	e011      	b.n	6956 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6932:	2300      	movs	r3, #0
    6934:	9303      	str	r3, [sp, #12]
            break;
    6936:	e013      	b.n	6960 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6938:	9b02      	ldr	r3, [sp, #8]
    693a:	2b01      	cmp	r3, #1
    693c:	d10d      	bne.n	695a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    693e:	2300      	movs	r3, #0
    6940:	9303      	str	r3, [sp, #12]
            break;
    6942:	e00a      	b.n	695a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6944:	9b02      	ldr	r3, [sp, #8]
    6946:	2b01      	cmp	r3, #1
    6948:	d002      	beq.n	6950 <Power_Ip_SMC_ModeCheckEntry+0x48>
    694a:	9b02      	ldr	r3, [sp, #8]
    694c:	2b10      	cmp	r3, #16
    694e:	d106      	bne.n	695e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6950:	2300      	movs	r3, #0
    6952:	9303      	str	r3, [sp, #12]
            break;
    6954:	e003      	b.n	695e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6956:	bf00      	nop
    6958:	e002      	b.n	6960 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    695a:	bf00      	nop
    695c:	e000      	b.n	6960 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    695e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6960:	9b03      	ldr	r3, [sp, #12]
}
    6962:	4618      	mov	r0, r3
    6964:	b004      	add	sp, #16
    6966:	4770      	bx	lr
    6968:	4007e000 	.word	0x4007e000

0000696c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    696c:	b500      	push	{lr}
    696e:	b08b      	sub	sp, #44	; 0x2c
    6970:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6972:	2300      	movs	r3, #0
    6974:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6976:	2300      	movs	r3, #0
    6978:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    697a:	2300      	movs	r3, #0
    697c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6980:	9b01      	ldr	r3, [sp, #4]
    6982:	685b      	ldr	r3, [r3, #4]
    6984:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6986:	9b08      	ldr	r3, [sp, #32]
    6988:	2b02      	cmp	r3, #2
    698a:	d076      	beq.n	6a7a <Power_Ip_SMC_ModeConfig+0x10e>
    698c:	9b08      	ldr	r3, [sp, #32]
    698e:	2b02      	cmp	r3, #2
    6990:	f200 80ab 	bhi.w	6aea <Power_Ip_SMC_ModeConfig+0x17e>
    6994:	9b08      	ldr	r3, [sp, #32]
    6996:	2b00      	cmp	r3, #0
    6998:	d003      	beq.n	69a2 <Power_Ip_SMC_ModeConfig+0x36>
    699a:	9b08      	ldr	r3, [sp, #32]
    699c:	2b01      	cmp	r3, #1
    699e:	d034      	beq.n	6a0a <Power_Ip_SMC_ModeConfig+0x9e>
    69a0:	e0a3      	b.n	6aea <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    69a2:	4b58      	ldr	r3, [pc, #352]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    69a4:	68db      	ldr	r3, [r3, #12]
    69a6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    69a8:	9b06      	ldr	r3, [sp, #24]
    69aa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    69ae:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    69b0:	4a54      	ldr	r2, [pc, #336]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    69b2:	9b06      	ldr	r3, [sp, #24]
    69b4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    69b6:	aa02      	add	r2, sp, #8
    69b8:	a903      	add	r1, sp, #12
    69ba:	a804      	add	r0, sp, #16
    69bc:	f24c 3350 	movw	r3, #50000	; 0xc350
    69c0:	f7ff fece 	bl	6760 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    69c4:	9a02      	ldr	r2, [sp, #8]
    69c6:	a903      	add	r1, sp, #12
    69c8:	ab04      	add	r3, sp, #16
    69ca:	4618      	mov	r0, r3
    69cc:	f7ff fee2 	bl	6794 <Power_Ip_TimeoutExpired>
    69d0:	4603      	mov	r3, r0
    69d2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    69d6:	4b4b      	ldr	r3, [pc, #300]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    69d8:	695b      	ldr	r3, [r3, #20]
    69da:	f003 0301 	and.w	r3, r3, #1
    69de:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    69e0:	9b05      	ldr	r3, [sp, #20]
    69e2:	2b01      	cmp	r3, #1
    69e4:	d006      	beq.n	69f4 <Power_Ip_SMC_ModeConfig+0x88>
    69e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    69ea:	f083 0301 	eor.w	r3, r3, #1
    69ee:	b2db      	uxtb	r3, r3
    69f0:	2b00      	cmp	r3, #0
    69f2:	d1e7      	bne.n	69c4 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    69f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    69f8:	2b00      	cmp	r3, #0
    69fa:	d079      	beq.n	6af0 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    69fc:	2301      	movs	r3, #1
    69fe:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a00:	21ff      	movs	r1, #255	; 0xff
    6a02:	2000      	movs	r0, #0
    6a04:	f7ff fe90 	bl	6728 <Power_Ip_ReportPowerErrors>
            }

            break;
    6a08:	e072      	b.n	6af0 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    6a0a:	4b3e      	ldr	r3, [pc, #248]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    6a0c:	68db      	ldr	r3, [r3, #12]
    6a0e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6a10:	9b06      	ldr	r3, [sp, #24]
    6a12:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6a16:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6a18:	9b06      	ldr	r3, [sp, #24]
    6a1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6a1e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6a20:	4a38      	ldr	r2, [pc, #224]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    6a22:	9b06      	ldr	r3, [sp, #24]
    6a24:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6a26:	aa02      	add	r2, sp, #8
    6a28:	a903      	add	r1, sp, #12
    6a2a:	a804      	add	r0, sp, #16
    6a2c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6a30:	f7ff fe96 	bl	6760 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6a34:	9a02      	ldr	r2, [sp, #8]
    6a36:	a903      	add	r1, sp, #12
    6a38:	ab04      	add	r3, sp, #16
    6a3a:	4618      	mov	r0, r3
    6a3c:	f7ff feaa 	bl	6794 <Power_Ip_TimeoutExpired>
    6a40:	4603      	mov	r3, r0
    6a42:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6a46:	4b2f      	ldr	r3, [pc, #188]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    6a48:	695b      	ldr	r3, [r3, #20]
    6a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6a4e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6a50:	9b05      	ldr	r3, [sp, #20]
    6a52:	2b80      	cmp	r3, #128	; 0x80
    6a54:	d006      	beq.n	6a64 <Power_Ip_SMC_ModeConfig+0xf8>
    6a56:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a5a:	f083 0301 	eor.w	r3, r3, #1
    6a5e:	b2db      	uxtb	r3, r3
    6a60:	2b00      	cmp	r3, #0
    6a62:	d1e7      	bne.n	6a34 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6a64:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d043      	beq.n	6af4 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a6c:	2301      	movs	r3, #1
    6a6e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a70:	21ff      	movs	r1, #255	; 0xff
    6a72:	2000      	movs	r0, #0
    6a74:	f7ff fe58 	bl	6728 <Power_Ip_ReportPowerErrors>
            }

            break;
    6a78:	e03c      	b.n	6af4 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6a7a:	4b22      	ldr	r3, [pc, #136]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    6a7c:	68db      	ldr	r3, [r3, #12]
    6a7e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6a80:	9b06      	ldr	r3, [sp, #24]
    6a82:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6a86:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6a88:	9b06      	ldr	r3, [sp, #24]
    6a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a8e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6a90:	4a1c      	ldr	r2, [pc, #112]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    6a92:	9b06      	ldr	r3, [sp, #24]
    6a94:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6a96:	aa02      	add	r2, sp, #8
    6a98:	a903      	add	r1, sp, #12
    6a9a:	a804      	add	r0, sp, #16
    6a9c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6aa0:	f7ff fe5e 	bl	6760 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6aa4:	9a02      	ldr	r2, [sp, #8]
    6aa6:	a903      	add	r1, sp, #12
    6aa8:	ab04      	add	r3, sp, #16
    6aaa:	4618      	mov	r0, r3
    6aac:	f7ff fe72 	bl	6794 <Power_Ip_TimeoutExpired>
    6ab0:	4603      	mov	r3, r0
    6ab2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6ab6:	4b13      	ldr	r3, [pc, #76]	; (6b04 <Power_Ip_SMC_ModeConfig+0x198>)
    6ab8:	695b      	ldr	r3, [r3, #20]
    6aba:	f003 0304 	and.w	r3, r3, #4
    6abe:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6ac0:	9b05      	ldr	r3, [sp, #20]
    6ac2:	2b04      	cmp	r3, #4
    6ac4:	d006      	beq.n	6ad4 <Power_Ip_SMC_ModeConfig+0x168>
    6ac6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6aca:	f083 0301 	eor.w	r3, r3, #1
    6ace:	b2db      	uxtb	r3, r3
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d1e7      	bne.n	6aa4 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6ad4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6ad8:	2b00      	cmp	r3, #0
    6ada:	d00d      	beq.n	6af8 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6adc:	2301      	movs	r3, #1
    6ade:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6ae0:	21ff      	movs	r1, #255	; 0xff
    6ae2:	2000      	movs	r0, #0
    6ae4:	f7ff fe20 	bl	6728 <Power_Ip_ReportPowerErrors>
            }

            break;
    6ae8:	e006      	b.n	6af8 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6aea:	2301      	movs	r3, #1
    6aec:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6aee:	e004      	b.n	6afa <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6af0:	bf00      	nop
    6af2:	e002      	b.n	6afa <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6af4:	bf00      	nop
    6af6:	e000      	b.n	6afa <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6af8:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6afc:	4618      	mov	r0, r3
    6afe:	b00b      	add	sp, #44	; 0x2c
    6b00:	f85d fb04 	ldr.w	pc, [sp], #4
    6b04:	4007e000 	.word	0x4007e000

00006b08 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6b08:	b500      	push	{lr}
    6b0a:	b085      	sub	sp, #20
    6b0c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6b0e:	9b01      	ldr	r3, [sp, #4]
    6b10:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6b12:	9803      	ldr	r0, [sp, #12]
    6b14:	f000 fbc8 	bl	72a8 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    6b18:	4a03      	ldr	r2, [pc, #12]	; (6b28 <Port_Init+0x20>)
    6b1a:	9b03      	ldr	r3, [sp, #12]
    6b1c:	6013      	str	r3, [r2, #0]
        }
    }
}
    6b1e:	bf00      	nop
    6b20:	b005      	add	sp, #20
    6b22:	f85d fb04 	ldr.w	pc, [sp], #4
    6b26:	bf00      	nop
    6b28:	1fff8d04 	.word	0x1fff8d04

00006b2c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6b2c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6b2e:	4b03      	ldr	r3, [pc, #12]	; (6b3c <Port_RefreshPortDirection+0x10>)
    6b30:	681b      	ldr	r3, [r3, #0]
    6b32:	4618      	mov	r0, r3
    6b34:	f000 fc10 	bl	7358 <Port_Ipw_RefreshPortDirection>
    }
}
    6b38:	bf00      	nop
    6b3a:	bd08      	pop	{r3, pc}
    6b3c:	1fff8d04 	.word	0x1fff8d04

00006b40 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6b40:	b086      	sub	sp, #24
    6b42:	9003      	str	r0, [sp, #12]
    6b44:	9102      	str	r1, [sp, #8]
    6b46:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6b48:	23ff      	movs	r3, #255	; 0xff
    6b4a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6b4c:	9b03      	ldr	r3, [sp, #12]
    6b4e:	4a39      	ldr	r2, [pc, #228]	; (6c34 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6b50:	4293      	cmp	r3, r2
    6b52:	d151      	bne.n	6bf8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6b54:	9b02      	ldr	r3, [sp, #8]
    6b56:	2b10      	cmp	r3, #16
    6b58:	d867      	bhi.n	6c2a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    6b5a:	a201      	add	r2, pc, #4	; (adr r2, 6b60 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6b60:	00006ba5 	.word	0x00006ba5
    6b64:	00006bb3 	.word	0x00006bb3
    6b68:	00006c2b 	.word	0x00006c2b
    6b6c:	00006c2b 	.word	0x00006c2b
    6b70:	00006c2b 	.word	0x00006c2b
    6b74:	00006c2b 	.word	0x00006c2b
    6b78:	00006c2b 	.word	0x00006c2b
    6b7c:	00006c2b 	.word	0x00006c2b
    6b80:	00006c2b 	.word	0x00006c2b
    6b84:	00006c2b 	.word	0x00006c2b
    6b88:	00006c2b 	.word	0x00006c2b
    6b8c:	00006c2b 	.word	0x00006c2b
    6b90:	00006c2b 	.word	0x00006c2b
    6b94:	00006bc1 	.word	0x00006bc1
    6b98:	00006bcf 	.word	0x00006bcf
    6b9c:	00006bdd 	.word	0x00006bdd
    6ba0:	00006beb 	.word	0x00006beb
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6ba4:	2301      	movs	r3, #1
    6ba6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6ba8:	9a05      	ldr	r2, [sp, #20]
    6baa:	9b01      	ldr	r3, [sp, #4]
    6bac:	4313      	orrs	r3, r2
    6bae:	9305      	str	r3, [sp, #20]
                break;
    6bb0:	e03c      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6bb2:	2302      	movs	r3, #2
    6bb4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6bb6:	9a05      	ldr	r2, [sp, #20]
    6bb8:	9b01      	ldr	r3, [sp, #4]
    6bba:	4313      	orrs	r3, r2
    6bbc:	9305      	str	r3, [sp, #20]
                break;
    6bbe:	e035      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6bc0:	2304      	movs	r3, #4
    6bc2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6bc4:	9a05      	ldr	r2, [sp, #20]
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	4313      	orrs	r3, r2
    6bca:	9305      	str	r3, [sp, #20]
                break;
    6bcc:	e02e      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6bce:	2308      	movs	r3, #8
    6bd0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6bd2:	9a05      	ldr	r2, [sp, #20]
    6bd4:	9b01      	ldr	r3, [sp, #4]
    6bd6:	4313      	orrs	r3, r2
    6bd8:	9305      	str	r3, [sp, #20]
                break;
    6bda:	e027      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    6bdc:	230e      	movs	r3, #14
    6bde:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6be0:	9a05      	ldr	r2, [sp, #20]
    6be2:	9b01      	ldr	r3, [sp, #4]
    6be4:	4013      	ands	r3, r2
    6be6:	9305      	str	r3, [sp, #20]
                break;
    6be8:	e020      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    6bea:	230d      	movs	r3, #13
    6bec:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bee:	9a05      	ldr	r2, [sp, #20]
    6bf0:	9b01      	ldr	r3, [sp, #4]
    6bf2:	4013      	ands	r3, r2
    6bf4:	9305      	str	r3, [sp, #20]
                break;
    6bf6:	e019      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6bf8:	9b03      	ldr	r3, [sp, #12]
    6bfa:	4a0f      	ldr	r2, [pc, #60]	; (6c38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6bfc:	4293      	cmp	r3, r2
    6bfe:	d115      	bne.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6c00:	9b02      	ldr	r3, [sp, #8]
    6c02:	2b00      	cmp	r3, #0
    6c04:	d003      	beq.n	6c0e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6c06:	9b02      	ldr	r3, [sp, #8]
    6c08:	2b01      	cmp	r3, #1
    6c0a:	d007      	beq.n	6c1c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6c0c:	e00e      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6c0e:	230b      	movs	r3, #11
    6c10:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6c12:	9a05      	ldr	r2, [sp, #20]
    6c14:	9b01      	ldr	r3, [sp, #4]
    6c16:	4013      	ands	r3, r2
    6c18:	9305      	str	r3, [sp, #20]
                break;
    6c1a:	e007      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6c1c:	2307      	movs	r3, #7
    6c1e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6c20:	9a05      	ldr	r2, [sp, #20]
    6c22:	9b01      	ldr	r3, [sp, #4]
    6c24:	4013      	ands	r3, r2
    6c26:	9305      	str	r3, [sp, #20]
                break;
    6c28:	e000      	b.n	6c2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6c2a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6c2c:	9b05      	ldr	r3, [sp, #20]
}
    6c2e:	4618      	mov	r0, r3
    6c30:	b006      	add	sp, #24
    6c32:	4770      	bx	lr
    6c34:	4004a000 	.word	0x4004a000
    6c38:	4004b000 	.word	0x4004b000

00006c3c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6c3c:	b500      	push	{lr}
    6c3e:	b089      	sub	sp, #36	; 0x24
    6c40:	9003      	str	r0, [sp, #12]
    6c42:	9102      	str	r1, [sp, #8]
    6c44:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6c46:	9b01      	ldr	r3, [sp, #4]
    6c48:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6c4a:	9b01      	ldr	r3, [sp, #4]
    6c4c:	2b08      	cmp	r3, #8
    6c4e:	d121      	bne.n	6c94 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6c50:	4b13      	ldr	r3, [pc, #76]	; (6ca0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c52:	685b      	ldr	r3, [r3, #4]
    6c54:	f003 030f 	and.w	r3, r3, #15
    6c58:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6c5a:	9a06      	ldr	r2, [sp, #24]
    6c5c:	9902      	ldr	r1, [sp, #8]
    6c5e:	9803      	ldr	r0, [sp, #12]
    6c60:	f7ff ff6e 	bl	6b40 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6c64:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6c66:	9b05      	ldr	r3, [sp, #20]
    6c68:	2bff      	cmp	r3, #255	; 0xff
    6c6a:	d011      	beq.n	6c90 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6c6c:	f009 fab2 	bl	101d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6c70:	4b0b      	ldr	r3, [pc, #44]	; (6ca0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c72:	685b      	ldr	r3, [r3, #4]
    6c74:	4a0a      	ldr	r2, [pc, #40]	; (6ca0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c76:	f023 030f 	bic.w	r3, r3, #15
    6c7a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6c7c:	4b08      	ldr	r3, [pc, #32]	; (6ca0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c7e:	685a      	ldr	r2, [r3, #4]
    6c80:	9b05      	ldr	r3, [sp, #20]
    6c82:	f003 030f 	and.w	r3, r3, #15
    6c86:	4906      	ldr	r1, [pc, #24]	; (6ca0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c88:	4313      	orrs	r3, r2
    6c8a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6c8c:	f009 face 	bl	1022c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6c90:	2300      	movs	r3, #0
    6c92:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6c94:	9b07      	ldr	r3, [sp, #28]
}
    6c96:	4618      	mov	r0, r3
    6c98:	b009      	add	sp, #36	; 0x24
    6c9a:	f85d fb04 	ldr.w	pc, [sp], #4
    6c9e:	bf00      	nop
    6ca0:	40048000 	.word	0x40048000

00006ca4 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6ca4:	b500      	push	{lr}
    6ca6:	b087      	sub	sp, #28
    6ca8:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6caa:	2300      	movs	r3, #0
    6cac:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6cae:	2300      	movs	r3, #0
    6cb0:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6cb2:	2300      	movs	r3, #0
    6cb4:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6cb6:	9b01      	ldr	r3, [sp, #4]
    6cb8:	68db      	ldr	r3, [r3, #12]
    6cba:	2b02      	cmp	r3, #2
    6cbc:	d00a      	beq.n	6cd4 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6cbe:	9b05      	ldr	r3, [sp, #20]
    6cc0:	f043 0302 	orr.w	r3, r3, #2
    6cc4:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6cc6:	9b01      	ldr	r3, [sp, #4]
    6cc8:	68db      	ldr	r3, [r3, #12]
    6cca:	f003 0301 	and.w	r3, r3, #1
    6cce:	9a05      	ldr	r2, [sp, #20]
    6cd0:	4313      	orrs	r3, r2
    6cd2:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6cd4:	9b01      	ldr	r3, [sp, #4]
    6cd6:	699b      	ldr	r3, [r3, #24]
    6cd8:	019b      	lsls	r3, r3, #6
    6cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6cde:	9a05      	ldr	r2, [sp, #20]
    6ce0:	4313      	orrs	r3, r2
    6ce2:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6ce4:	9b01      	ldr	r3, [sp, #4]
    6ce6:	6a1b      	ldr	r3, [r3, #32]
    6ce8:	03db      	lsls	r3, r3, #15
    6cea:	b29b      	uxth	r3, r3
    6cec:	9a05      	ldr	r2, [sp, #20]
    6cee:	4313      	orrs	r3, r2
    6cf0:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6cf2:	9b01      	ldr	r3, [sp, #4]
    6cf4:	7f1b      	ldrb	r3, [r3, #28]
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d001      	beq.n	6cfe <Port_Ci_Port_Ip_PinInit+0x5a>
    6cfa:	2310      	movs	r3, #16
    6cfc:	e000      	b.n	6d00 <Port_Ci_Port_Ip_PinInit+0x5c>
    6cfe:	2300      	movs	r3, #0
    6d00:	9a05      	ldr	r2, [sp, #20]
    6d02:	4313      	orrs	r3, r2
    6d04:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6d06:	9b01      	ldr	r3, [sp, #4]
    6d08:	691b      	ldr	r3, [r3, #16]
    6d0a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6d0c:	9b01      	ldr	r3, [sp, #4]
    6d0e:	6818      	ldr	r0, [r3, #0]
    6d10:	9b01      	ldr	r3, [sp, #4]
    6d12:	689b      	ldr	r3, [r3, #8]
    6d14:	9a04      	ldr	r2, [sp, #16]
    6d16:	4619      	mov	r1, r3
    6d18:	f7ff ff90 	bl	6c3c <Port_Ci_Port_Ip_ConfigureInterleave>
    6d1c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6d1e:	9b03      	ldr	r3, [sp, #12]
    6d20:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6d22:	9b04      	ldr	r3, [sp, #16]
    6d24:	021b      	lsls	r3, r3, #8
    6d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6d2a:	9a05      	ldr	r2, [sp, #20]
    6d2c:	4313      	orrs	r3, r2
    6d2e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6d30:	f009 f8b6 	bl	fea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6d34:	9b01      	ldr	r3, [sp, #4]
    6d36:	681b      	ldr	r3, [r3, #0]
    6d38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6d3c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6d3e:	9b01      	ldr	r3, [sp, #4]
    6d40:	689b      	ldr	r3, [r3, #8]
    6d42:	2201      	movs	r2, #1
    6d44:	fa02 f303 	lsl.w	r3, r2, r3
    6d48:	43db      	mvns	r3, r3
    6d4a:	9a02      	ldr	r2, [sp, #8]
    6d4c:	4013      	ands	r3, r2
    6d4e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6d50:	9b01      	ldr	r3, [sp, #4]
    6d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6d56:	2b00      	cmp	r3, #0
    6d58:	d001      	beq.n	6d5e <Port_Ci_Port_Ip_PinInit+0xba>
    6d5a:	2201      	movs	r2, #1
    6d5c:	e000      	b.n	6d60 <Port_Ci_Port_Ip_PinInit+0xbc>
    6d5e:	2200      	movs	r2, #0
    6d60:	9b01      	ldr	r3, [sp, #4]
    6d62:	689b      	ldr	r3, [r3, #8]
    6d64:	fa02 f303 	lsl.w	r3, r2, r3
    6d68:	9a02      	ldr	r2, [sp, #8]
    6d6a:	4313      	orrs	r3, r2
    6d6c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6d6e:	9b01      	ldr	r3, [sp, #4]
    6d70:	681b      	ldr	r3, [r3, #0]
    6d72:	9a02      	ldr	r2, [sp, #8]
    6d74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6d78:	f009 f8be 	bl	fef8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6d7c:	9b04      	ldr	r3, [sp, #16]
    6d7e:	2b01      	cmp	r3, #1
    6d80:	d16d      	bne.n	6e5e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6d82:	9b01      	ldr	r3, [sp, #4]
    6d84:	695b      	ldr	r3, [r3, #20]
    6d86:	2b02      	cmp	r3, #2
    6d88:	d138      	bne.n	6dfc <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6d8a:	9b01      	ldr	r3, [sp, #4]
    6d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d90:	2b01      	cmp	r3, #1
    6d92:	d10f      	bne.n	6db4 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6d94:	f009 f8d6 	bl	ff44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6d98:	9b01      	ldr	r3, [sp, #4]
    6d9a:	685b      	ldr	r3, [r3, #4]
    6d9c:	6859      	ldr	r1, [r3, #4]
    6d9e:	9b01      	ldr	r3, [sp, #4]
    6da0:	689b      	ldr	r3, [r3, #8]
    6da2:	2201      	movs	r2, #1
    6da4:	409a      	lsls	r2, r3
    6da6:	9b01      	ldr	r3, [sp, #4]
    6da8:	685b      	ldr	r3, [r3, #4]
    6daa:	430a      	orrs	r2, r1
    6dac:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6dae:	f009 f8f5 	bl	ff9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6db2:	e013      	b.n	6ddc <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6db4:	9b01      	ldr	r3, [sp, #4]
    6db6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d10e      	bne.n	6ddc <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6dbe:	f009 f913 	bl	ffe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6dc2:	9b01      	ldr	r3, [sp, #4]
    6dc4:	685b      	ldr	r3, [r3, #4]
    6dc6:	6899      	ldr	r1, [r3, #8]
    6dc8:	9b01      	ldr	r3, [sp, #4]
    6dca:	689b      	ldr	r3, [r3, #8]
    6dcc:	2201      	movs	r2, #1
    6dce:	409a      	lsls	r2, r3
    6dd0:	9b01      	ldr	r3, [sp, #4]
    6dd2:	685b      	ldr	r3, [r3, #4]
    6dd4:	430a      	orrs	r2, r1
    6dd6:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6dd8:	f009 f932 	bl	10040 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6ddc:	f009 f956 	bl	1008c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6de0:	9b01      	ldr	r3, [sp, #4]
    6de2:	685b      	ldr	r3, [r3, #4]
    6de4:	6959      	ldr	r1, [r3, #20]
    6de6:	9b01      	ldr	r3, [sp, #4]
    6de8:	689b      	ldr	r3, [r3, #8]
    6dea:	2201      	movs	r2, #1
    6dec:	409a      	lsls	r2, r3
    6dee:	9b01      	ldr	r3, [sp, #4]
    6df0:	685b      	ldr	r3, [r3, #4]
    6df2:	430a      	orrs	r2, r1
    6df4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6df6:	f009 f975 	bl	100e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6dfa:	e030      	b.n	6e5e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6dfc:	f009 f946 	bl	1008c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6e00:	9b01      	ldr	r3, [sp, #4]
    6e02:	685b      	ldr	r3, [r3, #4]
    6e04:	6959      	ldr	r1, [r3, #20]
    6e06:	9b01      	ldr	r3, [sp, #4]
    6e08:	689b      	ldr	r3, [r3, #8]
    6e0a:	2201      	movs	r2, #1
    6e0c:	fa02 f303 	lsl.w	r3, r2, r3
    6e10:	43da      	mvns	r2, r3
    6e12:	9b01      	ldr	r3, [sp, #4]
    6e14:	685b      	ldr	r3, [r3, #4]
    6e16:	400a      	ands	r2, r1
    6e18:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6e1a:	f009 f963 	bl	100e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6e1e:	f009 f987 	bl	10130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6e22:	9b01      	ldr	r3, [sp, #4]
    6e24:	685b      	ldr	r3, [r3, #4]
    6e26:	6999      	ldr	r1, [r3, #24]
    6e28:	9b01      	ldr	r3, [sp, #4]
    6e2a:	689b      	ldr	r3, [r3, #8]
    6e2c:	2201      	movs	r2, #1
    6e2e:	fa02 f303 	lsl.w	r3, r2, r3
    6e32:	43da      	mvns	r2, r3
    6e34:	9b01      	ldr	r3, [sp, #4]
    6e36:	685b      	ldr	r3, [r3, #4]
    6e38:	400a      	ands	r2, r1
    6e3a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6e3c:	9b01      	ldr	r3, [sp, #4]
    6e3e:	695b      	ldr	r3, [r3, #20]
    6e40:	2b03      	cmp	r3, #3
    6e42:	d10a      	bne.n	6e5a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6e44:	9b01      	ldr	r3, [sp, #4]
    6e46:	685b      	ldr	r3, [r3, #4]
    6e48:	6999      	ldr	r1, [r3, #24]
    6e4a:	9b01      	ldr	r3, [sp, #4]
    6e4c:	689b      	ldr	r3, [r3, #8]
    6e4e:	2201      	movs	r2, #1
    6e50:	409a      	lsls	r2, r3
    6e52:	9b01      	ldr	r3, [sp, #4]
    6e54:	685b      	ldr	r3, [r3, #4]
    6e56:	430a      	orrs	r2, r1
    6e58:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6e5a:	f009 f995 	bl	10188 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6e5e:	9b01      	ldr	r3, [sp, #4]
    6e60:	681b      	ldr	r3, [r3, #0]
    6e62:	9a01      	ldr	r2, [sp, #4]
    6e64:	6892      	ldr	r2, [r2, #8]
    6e66:	9905      	ldr	r1, [sp, #20]
    6e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6e6c:	bf00      	nop
    6e6e:	b007      	add	sp, #28
    6e70:	f85d fb04 	ldr.w	pc, [sp], #4

00006e74 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6e74:	b500      	push	{lr}
    6e76:	b085      	sub	sp, #20
    6e78:	9001      	str	r0, [sp, #4]
    6e7a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6e7c:	2300      	movs	r3, #0
    6e7e:	9303      	str	r3, [sp, #12]
    6e80:	e00d      	b.n	6e9e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6e82:	9a03      	ldr	r2, [sp, #12]
    6e84:	4613      	mov	r3, r2
    6e86:	009b      	lsls	r3, r3, #2
    6e88:	4413      	add	r3, r2
    6e8a:	00db      	lsls	r3, r3, #3
    6e8c:	461a      	mov	r2, r3
    6e8e:	9b00      	ldr	r3, [sp, #0]
    6e90:	4413      	add	r3, r2
    6e92:	4618      	mov	r0, r3
    6e94:	f7ff ff06 	bl	6ca4 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6e98:	9b03      	ldr	r3, [sp, #12]
    6e9a:	3301      	adds	r3, #1
    6e9c:	9303      	str	r3, [sp, #12]
    6e9e:	9a03      	ldr	r2, [sp, #12]
    6ea0:	9b01      	ldr	r3, [sp, #4]
    6ea2:	429a      	cmp	r2, r3
    6ea4:	d3ed      	bcc.n	6e82 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6ea6:	2300      	movs	r3, #0
}
    6ea8:	4618      	mov	r0, r3
    6eaa:	b005      	add	sp, #20
    6eac:	f85d fb04 	ldr.w	pc, [sp], #4

00006eb0 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6eb0:	b500      	push	{lr}
    6eb2:	b087      	sub	sp, #28
    6eb4:	9003      	str	r0, [sp, #12]
    6eb6:	9102      	str	r1, [sp, #8]
    6eb8:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6eba:	9a01      	ldr	r2, [sp, #4]
    6ebc:	9902      	ldr	r1, [sp, #8]
    6ebe:	9803      	ldr	r0, [sp, #12]
    6ec0:	f7ff febc 	bl	6c3c <Port_Ci_Port_Ip_ConfigureInterleave>
    6ec4:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6ec6:	f009 f9d7 	bl	10278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6eca:	9b03      	ldr	r3, [sp, #12]
    6ecc:	9a02      	ldr	r2, [sp, #8]
    6ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ed2:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6ed4:	9b04      	ldr	r3, [sp, #16]
    6ed6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6eda:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6edc:	9b05      	ldr	r3, [sp, #20]
    6ede:	021b      	lsls	r3, r3, #8
    6ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6ee4:	9a04      	ldr	r2, [sp, #16]
    6ee6:	4313      	orrs	r3, r2
    6ee8:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6eea:	9b03      	ldr	r3, [sp, #12]
    6eec:	9a02      	ldr	r2, [sp, #8]
    6eee:	9904      	ldr	r1, [sp, #16]
    6ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6ef4:	f009 f9ec 	bl	102d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6ef8:	bf00      	nop
    6efa:	b007      	add	sp, #28
    6efc:	f85d fb04 	ldr.w	pc, [sp], #4

00006f00 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6f00:	b500      	push	{lr}
    6f02:	b083      	sub	sp, #12
    6f04:	9001      	str	r0, [sp, #4]
    6f06:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6f08:	f009 fa08 	bl	1031c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6f0c:	9b01      	ldr	r3, [sp, #4]
    6f0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6f12:	2101      	movs	r1, #1
    6f14:	9b00      	ldr	r3, [sp, #0]
    6f16:	fa01 f303 	lsl.w	r3, r1, r3
    6f1a:	431a      	orrs	r2, r3
    6f1c:	9b01      	ldr	r3, [sp, #4]
    6f1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6f22:	f009 fa27 	bl	10374 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6f26:	bf00      	nop
    6f28:	b003      	add	sp, #12
    6f2a:	f85d fb04 	ldr.w	pc, [sp], #4

00006f2e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6f2e:	b500      	push	{lr}
    6f30:	b083      	sub	sp, #12
    6f32:	9001      	str	r0, [sp, #4]
    6f34:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6f36:	f009 fa43 	bl	103c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6f3a:	9b01      	ldr	r3, [sp, #4]
    6f3c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6f40:	2101      	movs	r1, #1
    6f42:	9b00      	ldr	r3, [sp, #0]
    6f44:	fa01 f303 	lsl.w	r3, r1, r3
    6f48:	43db      	mvns	r3, r3
    6f4a:	401a      	ands	r2, r3
    6f4c:	9b01      	ldr	r3, [sp, #4]
    6f4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6f52:	f009 fa61 	bl	10418 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6f56:	bf00      	nop
    6f58:	b003      	add	sp, #12
    6f5a:	f85d fb04 	ldr.w	pc, [sp], #4

00006f5e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6f5e:	b082      	sub	sp, #8
    6f60:	9001      	str	r0, [sp, #4]
    6f62:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6f64:	9b00      	ldr	r3, [sp, #0]
    6f66:	785b      	ldrb	r3, [r3, #1]
    6f68:	f003 0201 	and.w	r2, r3, #1
    6f6c:	9b01      	ldr	r3, [sp, #4]
    6f6e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6f72:	9b00      	ldr	r3, [sp, #0]
    6f74:	789b      	ldrb	r3, [r3, #2]
    6f76:	f003 021f 	and.w	r2, r3, #31
    6f7a:	9b01      	ldr	r3, [sp, #4]
    6f7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6f80:	bf00      	nop
    6f82:	b002      	add	sp, #8
    6f84:	4770      	bx	lr

00006f86 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6f86:	b086      	sub	sp, #24
    6f88:	9003      	str	r0, [sp, #12]
    6f8a:	9301      	str	r3, [sp, #4]
    6f8c:	460b      	mov	r3, r1
    6f8e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6f92:	4613      	mov	r3, r2
    6f94:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6f98:	2300      	movs	r3, #0
    6f9a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6f9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fa2:	f043 0301 	orr.w	r3, r3, #1
    6fa6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6faa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fae:	f043 0302 	orr.w	r3, r3, #2
    6fb2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6fb6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fba:	f043 0310 	orr.w	r3, r3, #16
    6fbe:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6fc2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6fca:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6fce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6fd6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6fda:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6fe6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6fea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6fee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6ff2:	4013      	ands	r3, r2
    6ff4:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6ff8:	9b01      	ldr	r3, [sp, #4]
    6ffa:	2b00      	cmp	r3, #0
    6ffc:	d003      	beq.n	7006 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6ffe:	9b01      	ldr	r3, [sp, #4]
    7000:	2b01      	cmp	r3, #1
    7002:	d00a      	beq.n	701a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    7004:	e013      	b.n	702e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    7006:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    700a:	041a      	lsls	r2, r3, #16
    700c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7010:	431a      	orrs	r2, r3
    7012:	9b03      	ldr	r3, [sp, #12]
    7014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    7018:	e009      	b.n	702e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    701a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    701e:	041a      	lsls	r2, r3, #16
    7020:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7024:	431a      	orrs	r2, r3
    7026:	9b03      	ldr	r3, [sp, #12]
    7028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    702c:	bf00      	nop
    }
}
    702e:	bf00      	nop
    7030:	b006      	add	sp, #24
    7032:	4770      	bx	lr

00007034 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    7034:	b500      	push	{lr}
    7036:	b087      	sub	sp, #28
    7038:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    703a:	9b01      	ldr	r3, [sp, #4]
    703c:	885b      	ldrh	r3, [r3, #2]
    703e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    7042:	9b01      	ldr	r3, [sp, #4]
    7044:	689b      	ldr	r3, [r3, #8]
    7046:	7a1b      	ldrb	r3, [r3, #8]
    7048:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	689b      	ldr	r3, [r3, #8]
    7050:	681b      	ldr	r3, [r3, #0]
    7052:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    7054:	9b01      	ldr	r3, [sp, #4]
    7056:	689b      	ldr	r3, [r3, #8]
    7058:	685b      	ldr	r3, [r3, #4]
    705a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    705c:	2300      	movs	r3, #0
    705e:	f8ad 3016 	strh.w	r3, [sp, #22]
    7062:	e111      	b.n	7288 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    7064:	9b02      	ldr	r3, [sp, #8]
    7066:	2b02      	cmp	r3, #2
    7068:	d169      	bne.n	713e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    706a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    706e:	2b01      	cmp	r3, #1
    7070:	d11a      	bne.n	70a8 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7072:	9b01      	ldr	r3, [sp, #4]
    7074:	685a      	ldr	r2, [r3, #4]
    7076:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    707a:	005b      	lsls	r3, r3, #1
    707c:	4413      	add	r3, r2
    707e:	881b      	ldrh	r3, [r3, #0]
    7080:	f003 021f 	and.w	r2, r3, #31
    7084:	9b01      	ldr	r3, [sp, #4]
    7086:	6859      	ldr	r1, [r3, #4]
    7088:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    708c:	005b      	lsls	r3, r3, #1
    708e:	440b      	add	r3, r1
    7090:	881b      	ldrh	r3, [r3, #0]
    7092:	095b      	lsrs	r3, r3, #5
    7094:	b29b      	uxth	r3, r3
    7096:	4619      	mov	r1, r3
    7098:	4b81      	ldr	r3, [pc, #516]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    709a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    709e:	2101      	movs	r1, #1
    70a0:	fa01 f202 	lsl.w	r2, r1, r2
    70a4:	605a      	str	r2, [r3, #4]
    70a6:	e01d      	b.n	70e4 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    70a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    70ac:	2b00      	cmp	r3, #0
    70ae:	d119      	bne.n	70e4 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    70b0:	9b01      	ldr	r3, [sp, #4]
    70b2:	685a      	ldr	r2, [r3, #4]
    70b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70b8:	005b      	lsls	r3, r3, #1
    70ba:	4413      	add	r3, r2
    70bc:	881b      	ldrh	r3, [r3, #0]
    70be:	f003 021f 	and.w	r2, r3, #31
    70c2:	9b01      	ldr	r3, [sp, #4]
    70c4:	6859      	ldr	r1, [r3, #4]
    70c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70ca:	005b      	lsls	r3, r3, #1
    70cc:	440b      	add	r3, r1
    70ce:	881b      	ldrh	r3, [r3, #0]
    70d0:	095b      	lsrs	r3, r3, #5
    70d2:	b29b      	uxth	r3, r3
    70d4:	4619      	mov	r1, r3
    70d6:	4b72      	ldr	r3, [pc, #456]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    70d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    70dc:	2101      	movs	r1, #1
    70de:	fa01 f202 	lsl.w	r2, r1, r2
    70e2:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    70e4:	f009 f9be 	bl	10464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    70e8:	9b01      	ldr	r3, [sp, #4]
    70ea:	685a      	ldr	r2, [r3, #4]
    70ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70f0:	005b      	lsls	r3, r3, #1
    70f2:	4413      	add	r3, r2
    70f4:	881b      	ldrh	r3, [r3, #0]
    70f6:	095b      	lsrs	r3, r3, #5
    70f8:	b29b      	uxth	r3, r3
    70fa:	461a      	mov	r2, r3
    70fc:	4b68      	ldr	r3, [pc, #416]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    70fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7102:	6959      	ldr	r1, [r3, #20]
    7104:	9b01      	ldr	r3, [sp, #4]
    7106:	685a      	ldr	r2, [r3, #4]
    7108:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    710c:	005b      	lsls	r3, r3, #1
    710e:	4413      	add	r3, r2
    7110:	881b      	ldrh	r3, [r3, #0]
    7112:	f003 031f 	and.w	r3, r3, #31
    7116:	2201      	movs	r2, #1
    7118:	409a      	lsls	r2, r3
    711a:	9b01      	ldr	r3, [sp, #4]
    711c:	6858      	ldr	r0, [r3, #4]
    711e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7122:	005b      	lsls	r3, r3, #1
    7124:	4403      	add	r3, r0
    7126:	881b      	ldrh	r3, [r3, #0]
    7128:	095b      	lsrs	r3, r3, #5
    712a:	b29b      	uxth	r3, r3
    712c:	4618      	mov	r0, r3
    712e:	4b5c      	ldr	r3, [pc, #368]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    7130:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7134:	430a      	orrs	r2, r1
    7136:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    7138:	f009 f9c0 	bl	104bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    713c:	e086      	b.n	724c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    713e:	f009 f991 	bl	10464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    7142:	9b01      	ldr	r3, [sp, #4]
    7144:	685a      	ldr	r2, [r3, #4]
    7146:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    714a:	005b      	lsls	r3, r3, #1
    714c:	4413      	add	r3, r2
    714e:	881b      	ldrh	r3, [r3, #0]
    7150:	095b      	lsrs	r3, r3, #5
    7152:	b29b      	uxth	r3, r3
    7154:	461a      	mov	r2, r3
    7156:	4b52      	ldr	r3, [pc, #328]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    7158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    715c:	6959      	ldr	r1, [r3, #20]
    715e:	9b01      	ldr	r3, [sp, #4]
    7160:	685a      	ldr	r2, [r3, #4]
    7162:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7166:	005b      	lsls	r3, r3, #1
    7168:	4413      	add	r3, r2
    716a:	881b      	ldrh	r3, [r3, #0]
    716c:	f003 031f 	and.w	r3, r3, #31
    7170:	2201      	movs	r2, #1
    7172:	fa02 f303 	lsl.w	r3, r2, r3
    7176:	43da      	mvns	r2, r3
    7178:	9b01      	ldr	r3, [sp, #4]
    717a:	6858      	ldr	r0, [r3, #4]
    717c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7180:	005b      	lsls	r3, r3, #1
    7182:	4403      	add	r3, r0
    7184:	881b      	ldrh	r3, [r3, #0]
    7186:	095b      	lsrs	r3, r3, #5
    7188:	b29b      	uxth	r3, r3
    718a:	4618      	mov	r0, r3
    718c:	4b44      	ldr	r3, [pc, #272]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    718e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7192:	400a      	ands	r2, r1
    7194:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    7196:	f009 f991 	bl	104bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    719a:	f009 f9b5 	bl	10508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    719e:	9b01      	ldr	r3, [sp, #4]
    71a0:	685a      	ldr	r2, [r3, #4]
    71a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71a6:	005b      	lsls	r3, r3, #1
    71a8:	4413      	add	r3, r2
    71aa:	881b      	ldrh	r3, [r3, #0]
    71ac:	095b      	lsrs	r3, r3, #5
    71ae:	b29b      	uxth	r3, r3
    71b0:	461a      	mov	r2, r3
    71b2:	4b3b      	ldr	r3, [pc, #236]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    71b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71b8:	6999      	ldr	r1, [r3, #24]
    71ba:	9b01      	ldr	r3, [sp, #4]
    71bc:	685a      	ldr	r2, [r3, #4]
    71be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71c2:	005b      	lsls	r3, r3, #1
    71c4:	4413      	add	r3, r2
    71c6:	881b      	ldrh	r3, [r3, #0]
    71c8:	f003 031f 	and.w	r3, r3, #31
    71cc:	2201      	movs	r2, #1
    71ce:	fa02 f303 	lsl.w	r3, r2, r3
    71d2:	43da      	mvns	r2, r3
    71d4:	9b01      	ldr	r3, [sp, #4]
    71d6:	6858      	ldr	r0, [r3, #4]
    71d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71dc:	005b      	lsls	r3, r3, #1
    71de:	4403      	add	r3, r0
    71e0:	881b      	ldrh	r3, [r3, #0]
    71e2:	095b      	lsrs	r3, r3, #5
    71e4:	b29b      	uxth	r3, r3
    71e6:	4618      	mov	r0, r3
    71e8:	4b2d      	ldr	r3, [pc, #180]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    71ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    71ee:	400a      	ands	r2, r1
    71f0:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    71f2:	9b02      	ldr	r3, [sp, #8]
    71f4:	2b03      	cmp	r3, #3
    71f6:	d127      	bne.n	7248 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    71f8:	9b01      	ldr	r3, [sp, #4]
    71fa:	685a      	ldr	r2, [r3, #4]
    71fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7200:	005b      	lsls	r3, r3, #1
    7202:	4413      	add	r3, r2
    7204:	881b      	ldrh	r3, [r3, #0]
    7206:	095b      	lsrs	r3, r3, #5
    7208:	b29b      	uxth	r3, r3
    720a:	461a      	mov	r2, r3
    720c:	4b24      	ldr	r3, [pc, #144]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    720e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7212:	6999      	ldr	r1, [r3, #24]
    7214:	9b01      	ldr	r3, [sp, #4]
    7216:	685a      	ldr	r2, [r3, #4]
    7218:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    721c:	005b      	lsls	r3, r3, #1
    721e:	4413      	add	r3, r2
    7220:	881b      	ldrh	r3, [r3, #0]
    7222:	f003 031f 	and.w	r3, r3, #31
    7226:	2201      	movs	r2, #1
    7228:	409a      	lsls	r2, r3
    722a:	9b01      	ldr	r3, [sp, #4]
    722c:	6858      	ldr	r0, [r3, #4]
    722e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7232:	005b      	lsls	r3, r3, #1
    7234:	4403      	add	r3, r0
    7236:	881b      	ldrh	r3, [r3, #0]
    7238:	095b      	lsrs	r3, r3, #5
    723a:	b29b      	uxth	r3, r3
    723c:	4618      	mov	r0, r3
    723e:	4b18      	ldr	r3, [pc, #96]	; (72a0 <Port_Ipw_Init_UnusedPins+0x26c>)
    7240:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7244:	430a      	orrs	r2, r1
    7246:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    7248:	f009 f98a 	bl	10560 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    724c:	9b01      	ldr	r3, [sp, #4]
    724e:	685a      	ldr	r2, [r3, #4]
    7250:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7254:	005b      	lsls	r3, r3, #1
    7256:	4413      	add	r3, r2
    7258:	881b      	ldrh	r3, [r3, #0]
    725a:	095b      	lsrs	r3, r3, #5
    725c:	b29b      	uxth	r3, r3
    725e:	461a      	mov	r2, r3
    7260:	4b10      	ldr	r3, [pc, #64]	; (72a4 <Port_Ipw_Init_UnusedPins+0x270>)
    7262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7266:	9a01      	ldr	r2, [sp, #4]
    7268:	6851      	ldr	r1, [r2, #4]
    726a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    726e:	0052      	lsls	r2, r2, #1
    7270:	440a      	add	r2, r1
    7272:	8812      	ldrh	r2, [r2, #0]
    7274:	f002 021f 	and.w	r2, r2, #31
    7278:	9903      	ldr	r1, [sp, #12]
    727a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    727e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7282:	3301      	adds	r3, #1
    7284:	f8ad 3016 	strh.w	r3, [sp, #22]
    7288:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    728c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7290:	429a      	cmp	r2, r3
    7292:	f4ff aee7 	bcc.w	7064 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    7296:	bf00      	nop
    7298:	bf00      	nop
    729a:	b007      	add	sp, #28
    729c:	f85d fb04 	ldr.w	pc, [sp], #4
    72a0:	00011bc8 	.word	0x00011bc8
    72a4:	00011bb4 	.word	0x00011bb4

000072a8 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    72a8:	b500      	push	{lr}
    72aa:	b085      	sub	sp, #20
    72ac:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    72ae:	9b01      	ldr	r3, [sp, #4]
    72b0:	7c1b      	ldrb	r3, [r3, #16]
    72b2:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    72b6:	2300      	movs	r3, #0
    72b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    72bc:	e035      	b.n	732a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    72be:	9b01      	ldr	r3, [sp, #4]
    72c0:	695a      	ldr	r2, [r3, #20]
    72c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72c6:	00db      	lsls	r3, r3, #3
    72c8:	4413      	add	r3, r2
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    72d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    72d4:	4a1f      	ldr	r2, [pc, #124]	; (7354 <Port_Ipw_Init+0xac>)
    72d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    72da:	9b01      	ldr	r3, [sp, #4]
    72dc:	695a      	ldr	r2, [r3, #20]
    72de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72e2:	00db      	lsls	r3, r3, #3
    72e4:	4413      	add	r3, r2
    72e6:	4619      	mov	r1, r3
    72e8:	f7ff fe39 	bl	6f5e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    72ec:	f009 faa6 	bl	1083c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    72f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    72f4:	4a17      	ldr	r2, [pc, #92]	; (7354 <Port_Ipw_Init+0xac>)
    72f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    72fe:	9b01      	ldr	r3, [sp, #4]
    7300:	695a      	ldr	r2, [r3, #20]
    7302:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7306:	00db      	lsls	r3, r3, #3
    7308:	4413      	add	r3, r2
    730a:	685a      	ldr	r2, [r3, #4]
    730c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7310:	4810      	ldr	r0, [pc, #64]	; (7354 <Port_Ipw_Init+0xac>)
    7312:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7316:	430a      	orrs	r2, r1
    7318:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    731c:	f009 faba 	bl	10894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7320:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7324:	3301      	adds	r3, #1
    7326:	f8ad 300e 	strh.w	r3, [sp, #14]
    732a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    732e:	b29b      	uxth	r3, r3
    7330:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7334:	429a      	cmp	r2, r3
    7336:	d3c2      	bcc.n	72be <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    7338:	9b01      	ldr	r3, [sp, #4]
    733a:	6a1b      	ldr	r3, [r3, #32]
    733c:	4619      	mov	r1, r3
    733e:	2008      	movs	r0, #8
    7340:	f7ff fd98 	bl	6e74 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    7344:	9801      	ldr	r0, [sp, #4]
    7346:	f7ff fe75 	bl	7034 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    734a:	bf00      	nop
    734c:	b005      	add	sp, #20
    734e:	f85d fb04 	ldr.w	pc, [sp], #4
    7352:	bf00      	nop
    7354:	00011bb4 	.word	0x00011bb4

00007358 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7358:	b500      	push	{lr}
    735a:	b085      	sub	sp, #20
    735c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    735e:	9b01      	ldr	r3, [sp, #4]
    7360:	881b      	ldrh	r3, [r3, #0]
    7362:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7366:	2300      	movs	r3, #0
    7368:	f8ad 300e 	strh.w	r3, [sp, #14]
    736c:	e0d2      	b.n	7514 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    736e:	9b01      	ldr	r3, [sp, #4]
    7370:	68d9      	ldr	r1, [r3, #12]
    7372:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7376:	4613      	mov	r3, r2
    7378:	009b      	lsls	r3, r3, #2
    737a:	4413      	add	r3, r2
    737c:	009b      	lsls	r3, r3, #2
    737e:	440b      	add	r3, r1
    7380:	7c5b      	ldrb	r3, [r3, #17]
    7382:	f083 0301 	eor.w	r3, r3, #1
    7386:	b2db      	uxtb	r3, r3
    7388:	2b00      	cmp	r3, #0
    738a:	f000 80be 	beq.w	750a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    738e:	9b01      	ldr	r3, [sp, #4]
    7390:	68d9      	ldr	r1, [r3, #12]
    7392:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7396:	4613      	mov	r3, r2
    7398:	009b      	lsls	r3, r3, #2
    739a:	4413      	add	r3, r2
    739c:	009b      	lsls	r3, r3, #2
    739e:	440b      	add	r3, r1
    73a0:	7c1b      	ldrb	r3, [r3, #16]
    73a2:	2b00      	cmp	r3, #0
    73a4:	f000 80b1 	beq.w	750a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    73a8:	9b01      	ldr	r3, [sp, #4]
    73aa:	68d9      	ldr	r1, [r3, #12]
    73ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73b0:	4613      	mov	r3, r2
    73b2:	009b      	lsls	r3, r3, #2
    73b4:	4413      	add	r3, r2
    73b6:	009b      	lsls	r3, r3, #2
    73b8:	440b      	add	r3, r1
    73ba:	881b      	ldrh	r3, [r3, #0]
    73bc:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    73c0:	9b01      	ldr	r3, [sp, #4]
    73c2:	68d9      	ldr	r1, [r3, #12]
    73c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73c8:	4613      	mov	r3, r2
    73ca:	009b      	lsls	r3, r3, #2
    73cc:	4413      	add	r3, r2
    73ce:	009b      	lsls	r3, r3, #2
    73d0:	440b      	add	r3, r1
    73d2:	68db      	ldr	r3, [r3, #12]
    73d4:	2b02      	cmp	r3, #2
    73d6:	d11d      	bne.n	7414 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    73d8:	f009 fb78 	bl	10acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73e0:	095b      	lsrs	r3, r3, #5
    73e2:	b29b      	uxth	r3, r3
    73e4:	461a      	mov	r2, r3
    73e6:	4b51      	ldr	r3, [pc, #324]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    73e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73ec:	6959      	ldr	r1, [r3, #20]
    73ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73f2:	f003 031f 	and.w	r3, r3, #31
    73f6:	2201      	movs	r2, #1
    73f8:	409a      	lsls	r2, r3
    73fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73fe:	095b      	lsrs	r3, r3, #5
    7400:	b29b      	uxth	r3, r3
    7402:	4618      	mov	r0, r3
    7404:	4b49      	ldr	r3, [pc, #292]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7406:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    740a:	430a      	orrs	r2, r1
    740c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    740e:	f009 fb89 	bl	10b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    7412:	e07a      	b.n	750a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7414:	9b01      	ldr	r3, [sp, #4]
    7416:	68d9      	ldr	r1, [r3, #12]
    7418:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    741c:	4613      	mov	r3, r2
    741e:	009b      	lsls	r3, r3, #2
    7420:	4413      	add	r3, r2
    7422:	009b      	lsls	r3, r3, #2
    7424:	440b      	add	r3, r1
    7426:	68db      	ldr	r3, [r3, #12]
    7428:	2b01      	cmp	r3, #1
    742a:	d00b      	beq.n	7444 <Port_Ipw_RefreshPortDirection+0xec>
    742c:	9b01      	ldr	r3, [sp, #4]
    742e:	68d9      	ldr	r1, [r3, #12]
    7430:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7434:	4613      	mov	r3, r2
    7436:	009b      	lsls	r3, r3, #2
    7438:	4413      	add	r3, r2
    743a:	009b      	lsls	r3, r3, #2
    743c:	440b      	add	r3, r1
    743e:	68db      	ldr	r3, [r3, #12]
    7440:	2b03      	cmp	r3, #3
    7442:	d162      	bne.n	750a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7444:	f009 fb42 	bl	10acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7448:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    744c:	095b      	lsrs	r3, r3, #5
    744e:	b29b      	uxth	r3, r3
    7450:	461a      	mov	r2, r3
    7452:	4b36      	ldr	r3, [pc, #216]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7458:	6959      	ldr	r1, [r3, #20]
    745a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    745e:	f003 031f 	and.w	r3, r3, #31
    7462:	2201      	movs	r2, #1
    7464:	fa02 f303 	lsl.w	r3, r2, r3
    7468:	43da      	mvns	r2, r3
    746a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    746e:	095b      	lsrs	r3, r3, #5
    7470:	b29b      	uxth	r3, r3
    7472:	4618      	mov	r0, r3
    7474:	4b2d      	ldr	r3, [pc, #180]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7476:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    747a:	400a      	ands	r2, r1
    747c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    747e:	f009 fb51 	bl	10b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    7482:	f009 fb75 	bl	10b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7486:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    748a:	095b      	lsrs	r3, r3, #5
    748c:	b29b      	uxth	r3, r3
    748e:	461a      	mov	r2, r3
    7490:	4b26      	ldr	r3, [pc, #152]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7496:	6999      	ldr	r1, [r3, #24]
    7498:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    749c:	f003 031f 	and.w	r3, r3, #31
    74a0:	2201      	movs	r2, #1
    74a2:	fa02 f303 	lsl.w	r3, r2, r3
    74a6:	43da      	mvns	r2, r3
    74a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74ac:	095b      	lsrs	r3, r3, #5
    74ae:	b29b      	uxth	r3, r3
    74b0:	4618      	mov	r0, r3
    74b2:	4b1e      	ldr	r3, [pc, #120]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    74b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    74b8:	400a      	ands	r2, r1
    74ba:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    74bc:	9b01      	ldr	r3, [sp, #4]
    74be:	68d9      	ldr	r1, [r3, #12]
    74c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74c4:	4613      	mov	r3, r2
    74c6:	009b      	lsls	r3, r3, #2
    74c8:	4413      	add	r3, r2
    74ca:	009b      	lsls	r3, r3, #2
    74cc:	440b      	add	r3, r1
    74ce:	68db      	ldr	r3, [r3, #12]
    74d0:	2b03      	cmp	r3, #3
    74d2:	d118      	bne.n	7506 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    74d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74d8:	095b      	lsrs	r3, r3, #5
    74da:	b29b      	uxth	r3, r3
    74dc:	461a      	mov	r2, r3
    74de:	4b13      	ldr	r3, [pc, #76]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    74e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    74e4:	6999      	ldr	r1, [r3, #24]
    74e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74ea:	f003 031f 	and.w	r3, r3, #31
    74ee:	2201      	movs	r2, #1
    74f0:	409a      	lsls	r2, r3
    74f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74f6:	095b      	lsrs	r3, r3, #5
    74f8:	b29b      	uxth	r3, r3
    74fa:	4618      	mov	r0, r3
    74fc:	4b0b      	ldr	r3, [pc, #44]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    74fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7502:	430a      	orrs	r2, r1
    7504:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    7506:	f009 fb5f 	bl	10bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    750a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    750e:	3301      	adds	r3, #1
    7510:	f8ad 300e 	strh.w	r3, [sp, #14]
    7514:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7518:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    751c:	429a      	cmp	r2, r3
    751e:	f4ff af26 	bcc.w	736e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    7522:	bf00      	nop
    7524:	bf00      	nop
    7526:	b005      	add	sp, #20
    7528:	f85d fb04 	ldr.w	pc, [sp], #4
    752c:	00011bc8 	.word	0x00011bc8

00007530 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    7530:	b500      	push	{lr}
    7532:	b085      	sub	sp, #20
    7534:	4603      	mov	r3, r0
    7536:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    753a:	2300      	movs	r3, #0
    753c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    7540:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7544:	4618      	mov	r0, r3
    7546:	f000 f871 	bl	762c <Dio_Ipw_ReadChannel>
    754a:	4603      	mov	r3, r0
    754c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    7550:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7554:	4618      	mov	r0, r3
    7556:	b005      	add	sp, #20
    7558:	f85d fb04 	ldr.w	pc, [sp], #4

0000755c <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    755c:	b500      	push	{lr}
    755e:	b083      	sub	sp, #12
    7560:	4603      	mov	r3, r0
    7562:	460a      	mov	r2, r1
    7564:	f8ad 3006 	strh.w	r3, [sp, #6]
    7568:	4613      	mov	r3, r2
    756a:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    756e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7572:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7576:	4611      	mov	r1, r2
    7578:	4618      	mov	r0, r3
    757a:	f000 f87d 	bl	7678 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    757e:	bf00      	nop
    7580:	b003      	add	sp, #12
    7582:	f85d fb04 	ldr.w	pc, [sp], #4

00007586 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7586:	b500      	push	{lr}
    7588:	b085      	sub	sp, #20
    758a:	4603      	mov	r3, r0
    758c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    7590:	2300      	movs	r3, #0
    7592:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    7596:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    759a:	4618      	mov	r0, r3
    759c:	f000 f892 	bl	76c4 <Dio_Ipw_FlipChannel>
    75a0:	4603      	mov	r3, r0
    75a2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    75a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    75aa:	4618      	mov	r0, r3
    75ac:	b005      	add	sp, #20
    75ae:	f85d fb04 	ldr.w	pc, [sp], #4

000075b2 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    75b2:	b500      	push	{lr}
    75b4:	b085      	sub	sp, #20
    75b6:	4603      	mov	r3, r0
    75b8:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    75bc:	2300      	movs	r3, #0
    75be:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    75c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75c4:	4618      	mov	r0, r3
    75c6:	f000 f8b3 	bl	7730 <Dio_Ipw_ReadPort>
    75ca:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    75cc:	9b03      	ldr	r3, [sp, #12]
}
    75ce:	4618      	mov	r0, r3
    75d0:	b005      	add	sp, #20
    75d2:	f85d fb04 	ldr.w	pc, [sp], #4

000075d6 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    75d6:	b500      	push	{lr}
    75d8:	b083      	sub	sp, #12
    75da:	4603      	mov	r3, r0
    75dc:	9100      	str	r1, [sp, #0]
    75de:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    75e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75e6:	9900      	ldr	r1, [sp, #0]
    75e8:	4618      	mov	r0, r3
    75ea:	f000 f8b9 	bl	7760 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    75ee:	bf00      	nop
    75f0:	b003      	add	sp, #12
    75f2:	f85d fb04 	ldr.w	pc, [sp], #4

000075f6 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    75f6:	b500      	push	{lr}
    75f8:	b085      	sub	sp, #20
    75fa:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    75fc:	2300      	movs	r3, #0
    75fe:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    7600:	9801      	ldr	r0, [sp, #4]
    7602:	f000 f8c5 	bl	7790 <Dio_Ipw_ReadChannelGroup>
    7606:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    7608:	9b03      	ldr	r3, [sp, #12]
}
    760a:	4618      	mov	r0, r3
    760c:	b005      	add	sp, #20
    760e:	f85d fb04 	ldr.w	pc, [sp], #4

00007612 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    7612:	b500      	push	{lr}
    7614:	b083      	sub	sp, #12
    7616:	9001      	str	r0, [sp, #4]
    7618:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    761a:	9900      	ldr	r1, [sp, #0]
    761c:	9801      	ldr	r0, [sp, #4]
    761e:	f000 f8d7 	bl	77d0 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    7622:	bf00      	nop
    7624:	b003      	add	sp, #12
    7626:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000762c <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    762c:	b500      	push	{lr}
    762e:	b087      	sub	sp, #28
    7630:	4603      	mov	r3, r0
    7632:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    7636:	2300      	movs	r3, #0
    7638:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    763c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7640:	095b      	lsrs	r3, r3, #5
    7642:	b29b      	uxth	r3, r3
    7644:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7646:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    764a:	f003 031f 	and.w	r3, r3, #31
    764e:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    7650:	4a08      	ldr	r2, [pc, #32]	; (7674 <Dio_Ipw_ReadChannel+0x48>)
    7652:	9b04      	ldr	r3, [sp, #16]
    7654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7658:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    765a:	9903      	ldr	r1, [sp, #12]
    765c:	9802      	ldr	r0, [sp, #8]
    765e:	f000 f940 	bl	78e2 <Gpio_Dio_Ip_ReadPin>
    7662:	4603      	mov	r3, r0
    7664:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    7668:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    766c:	4618      	mov	r0, r3
    766e:	b007      	add	sp, #28
    7670:	f85d fb04 	ldr.w	pc, [sp], #4
    7674:	1fff8b24 	.word	0x1fff8b24

00007678 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7678:	b500      	push	{lr}
    767a:	b087      	sub	sp, #28
    767c:	4603      	mov	r3, r0
    767e:	460a      	mov	r2, r1
    7680:	f8ad 3006 	strh.w	r3, [sp, #6]
    7684:	4613      	mov	r3, r2
    7686:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    768a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    768e:	095b      	lsrs	r3, r3, #5
    7690:	b29b      	uxth	r3, r3
    7692:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7694:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7698:	f003 031f 	and.w	r3, r3, #31
    769c:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    769e:	4a08      	ldr	r2, [pc, #32]	; (76c0 <Dio_Ipw_WriteChannel+0x48>)
    76a0:	9b05      	ldr	r3, [sp, #20]
    76a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a6:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    76a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76ac:	461a      	mov	r2, r3
    76ae:	9904      	ldr	r1, [sp, #16]
    76b0:	9803      	ldr	r0, [sp, #12]
    76b2:	f000 f8b7 	bl	7824 <Gpio_Dio_Ip_WritePin>
}
    76b6:	bf00      	nop
    76b8:	b007      	add	sp, #28
    76ba:	f85d fb04 	ldr.w	pc, [sp], #4
    76be:	bf00      	nop
    76c0:	1fff8b24 	.word	0x1fff8b24

000076c4 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    76c4:	b500      	push	{lr}
    76c6:	b089      	sub	sp, #36	; 0x24
    76c8:	4603      	mov	r3, r0
    76ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    76ce:	2300      	movs	r3, #0
    76d0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    76d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    76d8:	095b      	lsrs	r3, r3, #5
    76da:	b29b      	uxth	r3, r3
    76dc:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    76de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    76e2:	f003 031f 	and.w	r3, r3, #31
    76e6:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    76e8:	4a10      	ldr	r2, [pc, #64]	; (772c <Dio_Ipw_FlipChannel+0x68>)
    76ea:	9b06      	ldr	r3, [sp, #24]
    76ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f0:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    76f2:	2201      	movs	r2, #1
    76f4:	9b05      	ldr	r3, [sp, #20]
    76f6:	fa02 f303 	lsl.w	r3, r2, r3
    76fa:	4619      	mov	r1, r3
    76fc:	9804      	ldr	r0, [sp, #16]
    76fe:	f000 f8dc 	bl	78ba <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    7702:	9804      	ldr	r0, [sp, #16]
    7704:	f000 f8bc 	bl	7880 <Gpio_Dio_Ip_GetPinsOutput>
    7708:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    770a:	2201      	movs	r2, #1
    770c:	9b05      	ldr	r3, [sp, #20]
    770e:	409a      	lsls	r2, r3
    7710:	9b03      	ldr	r3, [sp, #12]
    7712:	401a      	ands	r2, r3
    7714:	9b05      	ldr	r3, [sp, #20]
    7716:	fa22 f303 	lsr.w	r3, r2, r3
    771a:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    771e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7722:	4618      	mov	r0, r3
    7724:	b009      	add	sp, #36	; 0x24
    7726:	f85d fb04 	ldr.w	pc, [sp], #4
    772a:	bf00      	nop
    772c:	1fff8b24 	.word	0x1fff8b24

00007730 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    7730:	b500      	push	{lr}
    7732:	b085      	sub	sp, #20
    7734:	4603      	mov	r3, r0
    7736:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    773a:	2300      	movs	r3, #0
    773c:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    773e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7742:	4a06      	ldr	r2, [pc, #24]	; (775c <Dio_Ipw_ReadPort+0x2c>)
    7744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7748:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    774a:	9802      	ldr	r0, [sp, #8]
    774c:	f000 f8be 	bl	78cc <Gpio_Dio_Ip_ReadPins>
    7750:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    7752:	9b03      	ldr	r3, [sp, #12]
}
    7754:	4618      	mov	r0, r3
    7756:	b005      	add	sp, #20
    7758:	f85d fb04 	ldr.w	pc, [sp], #4
    775c:	1fff8b24 	.word	0x1fff8b24

00007760 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    7760:	b500      	push	{lr}
    7762:	b085      	sub	sp, #20
    7764:	4603      	mov	r3, r0
    7766:	9100      	str	r1, [sp, #0]
    7768:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    776c:	9b00      	ldr	r3, [sp, #0]
    776e:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    7770:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7774:	4a05      	ldr	r2, [pc, #20]	; (778c <Dio_Ipw_WritePort+0x2c>)
    7776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    777a:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    777c:	9903      	ldr	r1, [sp, #12]
    777e:	9802      	ldr	r0, [sp, #8]
    7780:	f000 f875 	bl	786e <Gpio_Dio_Ip_WritePins>
}
    7784:	bf00      	nop
    7786:	b005      	add	sp, #20
    7788:	f85d fb04 	ldr.w	pc, [sp], #4
    778c:	1fff8b24 	.word	0x1fff8b24

00007790 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    7790:	b500      	push	{lr}
    7792:	b087      	sub	sp, #28
    7794:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7796:	2300      	movs	r3, #0
    7798:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    779a:	9b01      	ldr	r3, [sp, #4]
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	461a      	mov	r2, r3
    77a0:	4b0a      	ldr	r3, [pc, #40]	; (77cc <Dio_Ipw_ReadChannelGroup+0x3c>)
    77a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77a6:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    77a8:	9804      	ldr	r0, [sp, #16]
    77aa:	f000 f88f 	bl	78cc <Gpio_Dio_Ip_ReadPins>
    77ae:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    77b0:	9b01      	ldr	r3, [sp, #4]
    77b2:	685a      	ldr	r2, [r3, #4]
    77b4:	9b03      	ldr	r3, [sp, #12]
    77b6:	4013      	ands	r3, r2
    77b8:	9a01      	ldr	r2, [sp, #4]
    77ba:	7852      	ldrb	r2, [r2, #1]
    77bc:	40d3      	lsrs	r3, r2
    77be:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    77c0:	9b05      	ldr	r3, [sp, #20]
}
    77c2:	4618      	mov	r0, r3
    77c4:	b007      	add	sp, #28
    77c6:	f85d fb04 	ldr.w	pc, [sp], #4
    77ca:	bf00      	nop
    77cc:	1fff8b24 	.word	0x1fff8b24

000077d0 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    77d0:	b500      	push	{lr}
    77d2:	b087      	sub	sp, #28
    77d4:	9001      	str	r0, [sp, #4]
    77d6:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    77d8:	9b01      	ldr	r3, [sp, #4]
    77da:	781b      	ldrb	r3, [r3, #0]
    77dc:	461a      	mov	r2, r3
    77de:	4b10      	ldr	r3, [pc, #64]	; (7820 <Dio_Ipw_WriteChannelGroup+0x50>)
    77e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77e4:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    77e6:	9b01      	ldr	r3, [sp, #4]
    77e8:	785b      	ldrb	r3, [r3, #1]
    77ea:	461a      	mov	r2, r3
    77ec:	9b00      	ldr	r3, [sp, #0]
    77ee:	fa03 f202 	lsl.w	r2, r3, r2
    77f2:	9b01      	ldr	r3, [sp, #4]
    77f4:	685b      	ldr	r3, [r3, #4]
    77f6:	4013      	ands	r3, r2
    77f8:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    77fa:	9904      	ldr	r1, [sp, #16]
    77fc:	9805      	ldr	r0, [sp, #20]
    77fe:	f000 f84a 	bl	7896 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    7802:	9b04      	ldr	r3, [sp, #16]
    7804:	43da      	mvns	r2, r3
    7806:	9b01      	ldr	r3, [sp, #4]
    7808:	685b      	ldr	r3, [r3, #4]
    780a:	4013      	ands	r3, r2
    780c:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    780e:	9903      	ldr	r1, [sp, #12]
    7810:	9805      	ldr	r0, [sp, #20]
    7812:	f000 f849 	bl	78a8 <Gpio_Dio_Ip_ClearPins>

}
    7816:	bf00      	nop
    7818:	b007      	add	sp, #28
    781a:	f85d fb04 	ldr.w	pc, [sp], #4
    781e:	bf00      	nop
    7820:	1fff8b24 	.word	0x1fff8b24

00007824 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    7824:	b500      	push	{lr}
    7826:	b087      	sub	sp, #28
    7828:	9003      	str	r0, [sp, #12]
    782a:	9102      	str	r1, [sp, #8]
    782c:	4613      	mov	r3, r2
    782e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    7832:	f008 f99b 	bl	fb6c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    7836:	9b03      	ldr	r3, [sp, #12]
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    783c:	2201      	movs	r2, #1
    783e:	9b02      	ldr	r3, [sp, #8]
    7840:	fa02 f303 	lsl.w	r3, r2, r3
    7844:	43db      	mvns	r3, r3
    7846:	9a05      	ldr	r2, [sp, #20]
    7848:	4013      	ands	r3, r2
    784a:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    784c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7850:	9b02      	ldr	r3, [sp, #8]
    7852:	fa02 f303 	lsl.w	r3, r2, r3
    7856:	9a05      	ldr	r2, [sp, #20]
    7858:	4313      	orrs	r3, r2
    785a:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    785c:	9b03      	ldr	r3, [sp, #12]
    785e:	9a05      	ldr	r2, [sp, #20]
    7860:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    7862:	f008 f9af 	bl	fbc4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    7866:	bf00      	nop
    7868:	b007      	add	sp, #28
    786a:	f85d fb04 	ldr.w	pc, [sp], #4

0000786e <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    786e:	b082      	sub	sp, #8
    7870:	9001      	str	r0, [sp, #4]
    7872:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7874:	9b01      	ldr	r3, [sp, #4]
    7876:	9a00      	ldr	r2, [sp, #0]
    7878:	601a      	str	r2, [r3, #0]
}
    787a:	bf00      	nop
    787c:	b002      	add	sp, #8
    787e:	4770      	bx	lr

00007880 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    7880:	b084      	sub	sp, #16
    7882:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7884:	2300      	movs	r3, #0
    7886:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    7888:	9b01      	ldr	r3, [sp, #4]
    788a:	681b      	ldr	r3, [r3, #0]
    788c:	9303      	str	r3, [sp, #12]
    return returnValue;
    788e:	9b03      	ldr	r3, [sp, #12]
}
    7890:	4618      	mov	r0, r3
    7892:	b004      	add	sp, #16
    7894:	4770      	bx	lr

00007896 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7896:	b082      	sub	sp, #8
    7898:	9001      	str	r0, [sp, #4]
    789a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    789c:	9b01      	ldr	r3, [sp, #4]
    789e:	9a00      	ldr	r2, [sp, #0]
    78a0:	605a      	str	r2, [r3, #4]
}
    78a2:	bf00      	nop
    78a4:	b002      	add	sp, #8
    78a6:	4770      	bx	lr

000078a8 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    78a8:	b082      	sub	sp, #8
    78aa:	9001      	str	r0, [sp, #4]
    78ac:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    78ae:	9b01      	ldr	r3, [sp, #4]
    78b0:	9a00      	ldr	r2, [sp, #0]
    78b2:	609a      	str	r2, [r3, #8]
}
    78b4:	bf00      	nop
    78b6:	b002      	add	sp, #8
    78b8:	4770      	bx	lr

000078ba <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    78ba:	b082      	sub	sp, #8
    78bc:	9001      	str	r0, [sp, #4]
    78be:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    78c0:	9b01      	ldr	r3, [sp, #4]
    78c2:	9a00      	ldr	r2, [sp, #0]
    78c4:	60da      	str	r2, [r3, #12]
}
    78c6:	bf00      	nop
    78c8:	b002      	add	sp, #8
    78ca:	4770      	bx	lr

000078cc <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    78cc:	b084      	sub	sp, #16
    78ce:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    78d0:	2300      	movs	r3, #0
    78d2:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    78d4:	9b01      	ldr	r3, [sp, #4]
    78d6:	691b      	ldr	r3, [r3, #16]
    78d8:	9303      	str	r3, [sp, #12]
    return returnValue;
    78da:	9b03      	ldr	r3, [sp, #12]
}
    78dc:	4618      	mov	r0, r3
    78de:	b004      	add	sp, #16
    78e0:	4770      	bx	lr

000078e2 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    78e2:	b084      	sub	sp, #16
    78e4:	9001      	str	r0, [sp, #4]
    78e6:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    78e8:	2300      	movs	r3, #0
    78ea:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    78ee:	9b01      	ldr	r3, [sp, #4]
    78f0:	691a      	ldr	r2, [r3, #16]
    78f2:	2101      	movs	r1, #1
    78f4:	9b00      	ldr	r3, [sp, #0]
    78f6:	fa01 f303 	lsl.w	r3, r1, r3
    78fa:	401a      	ands	r2, r3
    78fc:	9b00      	ldr	r3, [sp, #0]
    78fe:	fa22 f303 	lsr.w	r3, r2, r3
    7902:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    7906:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    790a:	4618      	mov	r0, r3
    790c:	b004      	add	sp, #16
    790e:	4770      	bx	lr

00007910 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    7910:	b500      	push	{lr}
    7912:	b083      	sub	sp, #12
    7914:	4603      	mov	r3, r0
    7916:	460a      	mov	r2, r1
    7918:	f88d 3007 	strb.w	r3, [sp, #7]
    791c:	4613      	mov	r3, r2
    791e:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    7922:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7926:	f89d 2007 	ldrb.w	r2, [sp, #7]
    792a:	2100      	movs	r1, #0
    792c:	207b      	movs	r0, #123	; 0x7b
    792e:	f009 fbeb 	bl	11108 <Det_ReportRuntimeError>
}
    7932:	bf00      	nop
    7934:	b003      	add	sp, #12
    7936:	f85d fb04 	ldr.w	pc, [sp], #4

0000793a <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    793a:	b500      	push	{lr}
    793c:	b085      	sub	sp, #20
    793e:	4603      	mov	r3, r0
    7940:	460a      	mov	r2, r1
    7942:	f88d 3007 	strb.w	r3, [sp, #7]
    7946:	4613      	mov	r3, r2
    7948:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    794c:	2300      	movs	r3, #0
    794e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7952:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7956:	4a0c      	ldr	r2, [pc, #48]	; (7988 <Adc_ValidateNotBusyNoQueue+0x4e>)
    7958:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    795c:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    7960:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7964:	2b00      	cmp	r3, #0
    7966:	d008      	beq.n	797a <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7968:	f89d 3006 	ldrb.w	r3, [sp, #6]
    796c:	210b      	movs	r1, #11
    796e:	4618      	mov	r0, r3
    7970:	f7ff ffce 	bl	7910 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    7974:	2301      	movs	r3, #1
    7976:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    797a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    797e:	4618      	mov	r0, r3
    7980:	b005      	add	sp, #20
    7982:	f85d fb04 	ldr.w	pc, [sp], #4
    7986:	bf00      	nop
    7988:	1fff8d34 	.word	0x1fff8d34

0000798c <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    798c:	b500      	push	{lr}
    798e:	b085      	sub	sp, #20
    7990:	4603      	mov	r3, r0
    7992:	f8ad 3006 	strh.w	r3, [sp, #6]
    7996:	460b      	mov	r3, r1
    7998:	f88d 3005 	strb.w	r3, [sp, #5]
    799c:	4613      	mov	r3, r2
    799e:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    79a2:	2301      	movs	r3, #1
    79a4:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    79a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    79ac:	4917      	ldr	r1, [pc, #92]	; (7a0c <Adc_ValidateNotBusyNoPrio+0x80>)
    79ae:	4613      	mov	r3, r2
    79b0:	009b      	lsls	r3, r3, #2
    79b2:	4413      	add	r3, r2
    79b4:	009b      	lsls	r3, r3, #2
    79b6:	440b      	add	r3, r1
    79b8:	681b      	ldr	r3, [r3, #0]
    79ba:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    79bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79c0:	f083 0301 	eor.w	r3, r3, #1
    79c4:	b2db      	uxtb	r3, r3
    79c6:	2b00      	cmp	r3, #0
    79c8:	d007      	beq.n	79da <Adc_ValidateNotBusyNoPrio+0x4e>
    79ca:	9b02      	ldr	r3, [sp, #8]
    79cc:	2b00      	cmp	r3, #0
    79ce:	d004      	beq.n	79da <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    79d0:	210b      	movs	r1, #11
    79d2:	2002      	movs	r0, #2
    79d4:	f7ff ff9c 	bl	7910 <Adc_ReportDetRuntimeError>
    79d8:	e011      	b.n	79fe <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    79da:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79de:	2b00      	cmp	r3, #0
    79e0:	d00a      	beq.n	79f8 <Adc_ValidateNotBusyNoPrio+0x6c>
    79e2:	9b02      	ldr	r3, [sp, #8]
    79e4:	2b00      	cmp	r3, #0
    79e6:	d007      	beq.n	79f8 <Adc_ValidateNotBusyNoPrio+0x6c>
    79e8:	9b02      	ldr	r3, [sp, #8]
    79ea:	2b03      	cmp	r3, #3
    79ec:	d004      	beq.n	79f8 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    79ee:	210b      	movs	r1, #11
    79f0:	2002      	movs	r0, #2
    79f2:	f7ff ff8d 	bl	7910 <Adc_ReportDetRuntimeError>
    79f6:	e002      	b.n	79fe <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    79f8:	2300      	movs	r3, #0
    79fa:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    79fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7a02:	4618      	mov	r0, r3
    7a04:	b005      	add	sp, #20
    7a06:	f85d fb04 	ldr.w	pc, [sp], #4
    7a0a:	bf00      	nop
    7a0c:	1fff8d0c 	.word	0x1fff8d0c

00007a10 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    7a10:	b500      	push	{lr}
    7a12:	b087      	sub	sp, #28
    7a14:	4603      	mov	r3, r0
    7a16:	460a      	mov	r2, r1
    7a18:	f88d 3007 	strb.w	r3, [sp, #7]
    7a1c:	4613      	mov	r3, r2
    7a1e:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    7a22:	2300      	movs	r3, #0
    7a24:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7a28:	2300      	movs	r3, #0
    7a2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    7a2e:	e02c      	b.n	7a8a <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    7a30:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a34:	4a1d      	ldr	r2, [pc, #116]	; (7aac <Adc_ValidateCheckGroupNotConversion+0x9c>)
    7a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a3a:	685a      	ldr	r2, [r3, #4]
    7a3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a40:	2134      	movs	r1, #52	; 0x34
    7a42:	fb01 f303 	mul.w	r3, r1, r3
    7a46:	4413      	add	r3, r2
    7a48:	881b      	ldrh	r3, [r3, #0]
    7a4a:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    7a4e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7a52:	4917      	ldr	r1, [pc, #92]	; (7ab0 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    7a54:	4613      	mov	r3, r2
    7a56:	009b      	lsls	r3, r3, #2
    7a58:	4413      	add	r3, r2
    7a5a:	009b      	lsls	r3, r3, #2
    7a5c:	440b      	add	r3, r1
    7a5e:	681b      	ldr	r3, [r3, #0]
    7a60:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    7a62:	9b03      	ldr	r3, [sp, #12]
    7a64:	2b00      	cmp	r3, #0
    7a66:	d00b      	beq.n	7a80 <Adc_ValidateCheckGroupNotConversion+0x70>
    7a68:	9b03      	ldr	r3, [sp, #12]
    7a6a:	2b03      	cmp	r3, #3
    7a6c:	d008      	beq.n	7a80 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a72:	210b      	movs	r1, #11
    7a74:	4618      	mov	r0, r3
    7a76:	f7ff ff4b 	bl	7910 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    7a7a:	2301      	movs	r3, #1
    7a7c:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7a80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a84:	3301      	adds	r3, #1
    7a86:	f8ad 3016 	strh.w	r3, [sp, #22]
    7a8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a8e:	4a07      	ldr	r2, [pc, #28]	; (7aac <Adc_ValidateCheckGroupNotConversion+0x9c>)
    7a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a94:	891b      	ldrh	r3, [r3, #8]
    7a96:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7a9a:	429a      	cmp	r2, r3
    7a9c:	d3c8      	bcc.n	7a30 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    7a9e:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    7aa2:	4618      	mov	r0, r3
    7aa4:	b007      	add	sp, #28
    7aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    7aaa:	bf00      	nop
    7aac:	1fff8d08 	.word	0x1fff8d08
    7ab0:	1fff8d0c 	.word	0x1fff8d0c

00007ab4 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    7ab4:	b500      	push	{lr}
    7ab6:	b085      	sub	sp, #20
    7ab8:	4603      	mov	r3, r0
    7aba:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    7abe:	2300      	movs	r3, #0
    7ac0:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7ac4:	2301      	movs	r3, #1
    7ac6:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7aca:	2300      	movs	r3, #0
    7acc:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7ad0:	2300      	movs	r3, #0
    7ad2:	f88d 300d 	strb.w	r3, [sp, #13]
    7ad6:	e01d      	b.n	7b14 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7ad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7adc:	4a1b      	ldr	r2, [pc, #108]	; (7b4c <Adc_ValidateDeInitNotBusy+0x98>)
    7ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ae2:	681a      	ldr	r2, [r3, #0]
    7ae4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ae8:	4413      	add	r3, r2
    7aea:	7f9b      	ldrb	r3, [r3, #30]
    7aec:	2b01      	cmp	r3, #1
    7aee:	d10c      	bne.n	7b0a <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    7af0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7af4:	2101      	movs	r1, #1
    7af6:	4618      	mov	r0, r3
    7af8:	f7ff ff1f 	bl	793a <Adc_ValidateNotBusyNoQueue>
    7afc:	4603      	mov	r3, r0
    7afe:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    7b02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b06:	2b01      	cmp	r3, #1
    7b08:	d009      	beq.n	7b1e <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7b0a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b0e:	3301      	adds	r3, #1
    7b10:	f88d 300d 	strb.w	r3, [sp, #13]
    7b14:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b18:	2b01      	cmp	r3, #1
    7b1a:	d9dd      	bls.n	7ad8 <Adc_ValidateDeInitNotBusy+0x24>
    7b1c:	e000      	b.n	7b20 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    7b1e:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    7b20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b24:	2b00      	cmp	r3, #0
    7b26:	d10b      	bne.n	7b40 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    7b28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b2c:	4619      	mov	r1, r3
    7b2e:	2001      	movs	r0, #1
    7b30:	f7ff ff6e 	bl	7a10 <Adc_ValidateCheckGroupNotConversion>
    7b34:	4603      	mov	r3, r0
    7b36:	2b00      	cmp	r3, #0
    7b38:	d102      	bne.n	7b40 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    7b3a:	2300      	movs	r3, #0
    7b3c:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    7b40:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7b44:	4618      	mov	r0, r3
    7b46:	b005      	add	sp, #20
    7b48:	f85d fb04 	ldr.w	pc, [sp], #4
    7b4c:	1fff8d08 	.word	0x1fff8d08

00007b50 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    7b50:	b500      	push	{lr}
    7b52:	b085      	sub	sp, #20
    7b54:	4603      	mov	r3, r0
    7b56:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7b5a:	2301      	movs	r3, #1
    7b5c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    7b60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b64:	490b      	ldr	r1, [pc, #44]	; (7b94 <Adc_ValidateSetupBufferNotBusy+0x44>)
    7b66:	4613      	mov	r3, r2
    7b68:	009b      	lsls	r3, r3, #2
    7b6a:	4413      	add	r3, r2
    7b6c:	009b      	lsls	r3, r3, #2
    7b6e:	440b      	add	r3, r1
    7b70:	681b      	ldr	r3, [r3, #0]
    7b72:	2b00      	cmp	r3, #0
    7b74:	d004      	beq.n	7b80 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    7b76:	210b      	movs	r1, #11
    7b78:	200c      	movs	r0, #12
    7b7a:	f7ff fec9 	bl	7910 <Adc_ReportDetRuntimeError>
    7b7e:	e002      	b.n	7b86 <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    7b80:	2300      	movs	r3, #0
    7b82:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    7b86:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7b8a:	4618      	mov	r0, r3
    7b8c:	b005      	add	sp, #20
    7b8e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b92:	bf00      	nop
    7b94:	1fff8d0c 	.word	0x1fff8d0c

00007b98 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    7b98:	b500      	push	{lr}
    7b9a:	b085      	sub	sp, #20
    7b9c:	4603      	mov	r3, r0
    7b9e:	460a      	mov	r2, r1
    7ba0:	f8ad 3006 	strh.w	r3, [sp, #6]
    7ba4:	4613      	mov	r3, r2
    7ba6:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7baa:	2300      	movs	r3, #0
    7bac:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    7bb0:	2300      	movs	r3, #0
    7bb2:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7bb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bba:	4a32      	ldr	r2, [pc, #200]	; (7c84 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bc0:	68da      	ldr	r2, [r3, #12]
    7bc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7bc6:	005b      	lsls	r3, r3, #1
    7bc8:	4413      	add	r3, r2
    7bca:	881b      	ldrh	r3, [r3, #0]
    7bcc:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7bd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bd4:	4a2b      	ldr	r2, [pc, #172]	; (7c84 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bda:	685a      	ldr	r2, [r3, #4]
    7bdc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7be0:	2134      	movs	r1, #52	; 0x34
    7be2:	fb01 f303 	mul.w	r3, r1, r3
    7be6:	4413      	add	r3, r2
    7be8:	689b      	ldr	r3, [r3, #8]
    7bea:	2b00      	cmp	r3, #0
    7bec:	d02c      	beq.n	7c48 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7bee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bf2:	4a24      	ldr	r2, [pc, #144]	; (7c84 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bf8:	685a      	ldr	r2, [r3, #4]
    7bfa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bfe:	2134      	movs	r1, #52	; 0x34
    7c00:	fb01 f303 	mul.w	r3, r1, r3
    7c04:	4413      	add	r3, r2
    7c06:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7c08:	2b01      	cmp	r3, #1
    7c0a:	d120      	bne.n	7c4e <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7c0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7c10:	4a1c      	ldr	r2, [pc, #112]	; (7c84 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c16:	685a      	ldr	r2, [r3, #4]
    7c18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c1c:	2134      	movs	r1, #52	; 0x34
    7c1e:	fb01 f303 	mul.w	r3, r1, r3
    7c22:	4413      	add	r3, r2
    7c24:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7c26:	2b01      	cmp	r3, #1
    7c28:	d111      	bne.n	7c4e <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    7c2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7c2e:	4a15      	ldr	r2, [pc, #84]	; (7c84 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c34:	685a      	ldr	r2, [r3, #4]
    7c36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c3a:	2134      	movs	r1, #52	; 0x34
    7c3c:	fb01 f303 	mul.w	r3, r1, r3
    7c40:	4413      	add	r3, r2
    7c42:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7c44:	2b00      	cmp	r3, #0
    7c46:	d102      	bne.n	7c4e <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    7c48:	2301      	movs	r3, #1
    7c4a:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    7c4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c52:	2b01      	cmp	r3, #1
    7c54:	d104      	bne.n	7c60 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7c56:	210b      	movs	r1, #11
    7c58:	2002      	movs	r0, #2
    7c5a:	f7ff fe59 	bl	7910 <Adc_ReportDetRuntimeError>
    7c5e:	e00b      	b.n	7c78 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    7c60:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7c64:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7c68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c6c:	4618      	mov	r0, r3
    7c6e:	f7ff fe8d 	bl	798c <Adc_ValidateNotBusyNoPrio>
    7c72:	4603      	mov	r3, r0
    7c74:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    7c78:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7c7c:	4618      	mov	r0, r3
    7c7e:	b005      	add	sp, #20
    7c80:	f85d fb04 	ldr.w	pc, [sp], #4
    7c84:	1fff8d08 	.word	0x1fff8d08

00007c88 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    7c88:	b500      	push	{lr}
    7c8a:	b085      	sub	sp, #20
    7c8c:	4603      	mov	r3, r0
    7c8e:	f88d 3007 	strb.w	r3, [sp, #7]
    7c92:	460b      	mov	r3, r1
    7c94:	f8ad 3004 	strh.w	r3, [sp, #4]
    7c98:	4613      	mov	r3, r2
    7c9a:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7c9e:	2300      	movs	r3, #0
    7ca0:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    7ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ca8:	2b0b      	cmp	r3, #11
    7caa:	d03b      	beq.n	7d24 <Adc_ValidateStateNotIdle+0x9c>
    7cac:	2b0b      	cmp	r3, #11
    7cae:	dc4e      	bgt.n	7d4e <Adc_ValidateStateNotIdle+0xc6>
    7cb0:	2b03      	cmp	r3, #3
    7cb2:	d022      	beq.n	7cfa <Adc_ValidateStateNotIdle+0x72>
    7cb4:	2b04      	cmp	r3, #4
    7cb6:	d14a      	bne.n	7d4e <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7cb8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7cbc:	492a      	ldr	r1, [pc, #168]	; (7d68 <Adc_ValidateStateNotIdle+0xe0>)
    7cbe:	4613      	mov	r3, r2
    7cc0:	009b      	lsls	r3, r3, #2
    7cc2:	4413      	add	r3, r2
    7cc4:	009b      	lsls	r3, r3, #2
    7cc6:	440b      	add	r3, r1
    7cc8:	681b      	ldr	r3, [r3, #0]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d141      	bne.n	7d52 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    7cce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7cd2:	4925      	ldr	r1, [pc, #148]	; (7d68 <Adc_ValidateStateNotIdle+0xe0>)
    7cd4:	4613      	mov	r3, r2
    7cd6:	009b      	lsls	r3, r3, #2
    7cd8:	4413      	add	r3, r2
    7cda:	009b      	lsls	r3, r3, #2
    7cdc:	440b      	add	r3, r1
    7cde:	3304      	adds	r3, #4
    7ce0:	681b      	ldr	r3, [r3, #0]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d135      	bne.n	7d52 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7ce6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cea:	210c      	movs	r1, #12
    7cec:	4618      	mov	r0, r3
    7cee:	f7ff fe0f 	bl	7910 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    7cf2:	2301      	movs	r3, #1
    7cf4:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    7cf8:	e02b      	b.n	7d52 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7cfa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7cfe:	491a      	ldr	r1, [pc, #104]	; (7d68 <Adc_ValidateStateNotIdle+0xe0>)
    7d00:	4613      	mov	r3, r2
    7d02:	009b      	lsls	r3, r3, #2
    7d04:	4413      	add	r3, r2
    7d06:	009b      	lsls	r3, r3, #2
    7d08:	440b      	add	r3, r1
    7d0a:	681b      	ldr	r3, [r3, #0]
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	d122      	bne.n	7d56 <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7d10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d14:	210c      	movs	r1, #12
    7d16:	4618      	mov	r0, r3
    7d18:	f7ff fdfa 	bl	7910 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    7d1c:	2301      	movs	r3, #1
    7d1e:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    7d22:	e018      	b.n	7d56 <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7d24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7d28:	490f      	ldr	r1, [pc, #60]	; (7d68 <Adc_ValidateStateNotIdle+0xe0>)
    7d2a:	4613      	mov	r3, r2
    7d2c:	009b      	lsls	r3, r3, #2
    7d2e:	4413      	add	r3, r2
    7d30:	009b      	lsls	r3, r3, #2
    7d32:	440b      	add	r3, r1
    7d34:	681b      	ldr	r3, [r3, #0]
    7d36:	2b00      	cmp	r3, #0
    7d38:	d10f      	bne.n	7d5a <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7d3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d3e:	210c      	movs	r1, #12
    7d40:	4618      	mov	r0, r3
    7d42:	f7ff fde5 	bl	7910 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    7d46:	2301      	movs	r3, #1
    7d48:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    7d4c:	e005      	b.n	7d5a <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    7d4e:	bf00      	nop
    7d50:	e004      	b.n	7d5c <Adc_ValidateStateNotIdle+0xd4>
            break;
    7d52:	bf00      	nop
    7d54:	e002      	b.n	7d5c <Adc_ValidateStateNotIdle+0xd4>
            break;
    7d56:	bf00      	nop
    7d58:	e000      	b.n	7d5c <Adc_ValidateStateNotIdle+0xd4>
            break;
    7d5a:	bf00      	nop
        }
    }

    return ValidState;
    7d5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7d60:	4618      	mov	r0, r3
    7d62:	b005      	add	sp, #20
    7d64:	f85d fb04 	ldr.w	pc, [sp], #4
    7d68:	1fff8d0c 	.word	0x1fff8d0c

00007d6c <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    7d6c:	b084      	sub	sp, #16
    7d6e:	4603      	mov	r3, r0
    7d70:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    7d74:	2300      	movs	r3, #0
    7d76:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    7d7a:	2300      	movs	r3, #0
    7d7c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7d80:	2300      	movs	r3, #0
    7d82:	f8ad 300e 	strh.w	r3, [sp, #14]
    7d86:	e049      	b.n	7e1c <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    7d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d8c:	4a2a      	ldr	r2, [pc, #168]	; (7e38 <Adc_InitGroupsStatus+0xcc>)
    7d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d92:	685a      	ldr	r2, [r3, #4]
    7d94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d98:	2134      	movs	r1, #52	; 0x34
    7d9a:	fb01 f303 	mul.w	r3, r1, r3
    7d9e:	4413      	add	r3, r2
    7da0:	881b      	ldrh	r3, [r3, #0]
    7da2:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    7da6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7daa:	4924      	ldr	r1, [pc, #144]	; (7e3c <Adc_InitGroupsStatus+0xd0>)
    7dac:	4613      	mov	r3, r2
    7dae:	009b      	lsls	r3, r3, #2
    7db0:	4413      	add	r3, r2
    7db2:	009b      	lsls	r3, r3, #2
    7db4:	440b      	add	r3, r1
    7db6:	2200      	movs	r2, #0
    7db8:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    7dba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7dbe:	491f      	ldr	r1, [pc, #124]	; (7e3c <Adc_InitGroupsStatus+0xd0>)
    7dc0:	4613      	mov	r3, r2
    7dc2:	009b      	lsls	r3, r3, #2
    7dc4:	4413      	add	r3, r2
    7dc6:	009b      	lsls	r3, r3, #2
    7dc8:	440b      	add	r3, r1
    7dca:	3304      	adds	r3, #4
    7dcc:	2200      	movs	r2, #0
    7dce:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7dd0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7dd4:	4919      	ldr	r1, [pc, #100]	; (7e3c <Adc_InitGroupsStatus+0xd0>)
    7dd6:	4613      	mov	r3, r2
    7dd8:	009b      	lsls	r3, r3, #2
    7dda:	4413      	add	r3, r2
    7ddc:	009b      	lsls	r3, r3, #2
    7dde:	440b      	add	r3, r1
    7de0:	3308      	adds	r3, #8
    7de2:	2200      	movs	r2, #0
    7de4:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    7de6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7dea:	4914      	ldr	r1, [pc, #80]	; (7e3c <Adc_InitGroupsStatus+0xd0>)
    7dec:	4613      	mov	r3, r2
    7dee:	009b      	lsls	r3, r3, #2
    7df0:	4413      	add	r3, r2
    7df2:	009b      	lsls	r3, r3, #2
    7df4:	440b      	add	r3, r1
    7df6:	330c      	adds	r3, #12
    7df8:	2200      	movs	r2, #0
    7dfa:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7dfc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7e00:	490e      	ldr	r1, [pc, #56]	; (7e3c <Adc_InitGroupsStatus+0xd0>)
    7e02:	4613      	mov	r3, r2
    7e04:	009b      	lsls	r3, r3, #2
    7e06:	4413      	add	r3, r2
    7e08:	009b      	lsls	r3, r3, #2
    7e0a:	440b      	add	r3, r1
    7e0c:	3310      	adds	r3, #16
    7e0e:	2200      	movs	r2, #0
    7e10:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7e12:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e16:	3301      	adds	r3, #1
    7e18:	f8ad 300e 	strh.w	r3, [sp, #14]
    7e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e20:	4a05      	ldr	r2, [pc, #20]	; (7e38 <Adc_InitGroupsStatus+0xcc>)
    7e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e26:	891b      	ldrh	r3, [r3, #8]
    7e28:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7e2c:	429a      	cmp	r2, r3
    7e2e:	d3ab      	bcc.n	7d88 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7e30:	bf00      	nop
    7e32:	bf00      	nop
    7e34:	b004      	add	sp, #16
    7e36:	4770      	bx	lr
    7e38:	1fff8d08 	.word	0x1fff8d08
    7e3c:	1fff8d0c 	.word	0x1fff8d0c

00007e40 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    7e40:	b084      	sub	sp, #16
    7e42:	4603      	mov	r3, r0
    7e44:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7e48:	2300      	movs	r3, #0
    7e4a:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    7e4e:	2300      	movs	r3, #0
    7e50:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7e54:	2300      	movs	r3, #0
    7e56:	f88d 300f 	strb.w	r3, [sp, #15]
    7e5a:	e035      	b.n	7ec8 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e60:	4a1d      	ldr	r2, [pc, #116]	; (7ed8 <Adc_InitUnitStatus+0x98>)
    7e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e66:	681a      	ldr	r2, [r3, #0]
    7e68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e6c:	4413      	add	r3, r2
    7e6e:	7f9b      	ldrb	r3, [r3, #30]
    7e70:	2b01      	cmp	r3, #1
    7e72:	d124      	bne.n	7ebe <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    7e74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e78:	4a18      	ldr	r2, [pc, #96]	; (7edc <Adc_InitUnitStatus+0x9c>)
    7e7a:	2100      	movs	r1, #0
    7e7c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e80:	2300      	movs	r3, #0
    7e82:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e86:	e00f      	b.n	7ea8 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    7e88:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7e8c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e90:	4912      	ldr	r1, [pc, #72]	; (7edc <Adc_InitUnitStatus+0x9c>)
    7e92:	0092      	lsls	r2, r2, #2
    7e94:	4413      	add	r3, r2
    7e96:	005b      	lsls	r3, r3, #1
    7e98:	440b      	add	r3, r1
    7e9a:	2200      	movs	r2, #0
    7e9c:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7ea2:	3301      	adds	r3, #1
    7ea4:	f8ad 300c 	strh.w	r3, [sp, #12]
    7ea8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7eac:	2b01      	cmp	r3, #1
    7eae:	d9eb      	bls.n	7e88 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7eb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eb4:	4a09      	ldr	r2, [pc, #36]	; (7edc <Adc_InitUnitStatus+0x9c>)
    7eb6:	00db      	lsls	r3, r3, #3
    7eb8:	4413      	add	r3, r2
    7eba:	2200      	movs	r2, #0
    7ebc:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7ebe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ec2:	3301      	adds	r3, #1
    7ec4:	f88d 300f 	strb.w	r3, [sp, #15]
    7ec8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ecc:	2b01      	cmp	r3, #1
    7ece:	d9c5      	bls.n	7e5c <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7ed0:	bf00      	nop
    7ed2:	bf00      	nop
    7ed4:	b004      	add	sp, #16
    7ed6:	4770      	bx	lr
    7ed8:	1fff8d08 	.word	0x1fff8d08
    7edc:	1fff8d34 	.word	0x1fff8d34

00007ee0 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7ee0:	b084      	sub	sp, #16
    7ee2:	9001      	str	r0, [sp, #4]
    7ee4:	460b      	mov	r3, r1
    7ee6:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7eea:	2300      	movs	r3, #0
    7eec:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7ef0:	2301      	movs	r3, #1
    7ef2:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    7ef6:	9b01      	ldr	r3, [sp, #4]
    7ef8:	7c1b      	ldrb	r3, [r3, #16]
    7efa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7efe:	429a      	cmp	r2, r3
    7f00:	d11c      	bne.n	7f3c <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7f02:	2300      	movs	r3, #0
    7f04:	f88d 300f 	strb.w	r3, [sp, #15]
    7f08:	e012      	b.n	7f30 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7f0a:	9b01      	ldr	r3, [sp, #4]
    7f0c:	695a      	ldr	r2, [r3, #20]
    7f0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f12:	4413      	add	r3, r2
    7f14:	781b      	ldrb	r3, [r3, #0]
    7f16:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7f1a:	429a      	cmp	r2, r3
    7f1c:	d103      	bne.n	7f26 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7f1e:	2300      	movs	r3, #0
    7f20:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    7f24:	e00a      	b.n	7f3c <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7f26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f2a:	3301      	adds	r3, #1
    7f2c:	f88d 300f 	strb.w	r3, [sp, #15]
    7f30:	9b01      	ldr	r3, [sp, #4]
    7f32:	7e1b      	ldrb	r3, [r3, #24]
    7f34:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7f38:	429a      	cmp	r2, r3
    7f3a:	d3e6      	bcc.n	7f0a <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    7f3c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7f40:	4618      	mov	r0, r3
    7f42:	b004      	add	sp, #16
    7f44:	4770      	bx	lr

00007f46 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    7f46:	b500      	push	{lr}
    7f48:	b085      	sub	sp, #20
    7f4a:	4603      	mov	r3, r0
    7f4c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7f50:	460b      	mov	r3, r1
    7f52:	f88d 3005 	strb.w	r3, [sp, #5]
    7f56:	4613      	mov	r3, r2
    7f58:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    7f5c:	2300      	movs	r3, #0
    7f5e:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7f62:	2300      	movs	r3, #0
    7f64:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7f68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f6c:	493e      	ldr	r1, [pc, #248]	; (8068 <Adc_UpdateStatusStartConversion+0x122>)
    7f6e:	4613      	mov	r3, r2
    7f70:	009b      	lsls	r3, r3, #2
    7f72:	4413      	add	r3, r2
    7f74:	009b      	lsls	r3, r3, #2
    7f76:	440b      	add	r3, r1
    7f78:	2201      	movs	r2, #1
    7f7a:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    7f7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f80:	4939      	ldr	r1, [pc, #228]	; (8068 <Adc_UpdateStatusStartConversion+0x122>)
    7f82:	4613      	mov	r3, r2
    7f84:	009b      	lsls	r3, r3, #2
    7f86:	4413      	add	r3, r2
    7f88:	009b      	lsls	r3, r3, #2
    7f8a:	440b      	add	r3, r1
    7f8c:	3308      	adds	r3, #8
    7f8e:	2200      	movs	r2, #0
    7f90:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7f92:	f003 fed9 	bl	bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7f96:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f9a:	4a34      	ldr	r2, [pc, #208]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    7f9c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7fa0:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    7fa4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d016      	beq.n	7fda <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    7fac:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7fb0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fb4:	492d      	ldr	r1, [pc, #180]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    7fb6:	0092      	lsls	r2, r2, #2
    7fb8:	4413      	add	r3, r2
    7fba:	005b      	lsls	r3, r3, #1
    7fbc:	440b      	add	r3, r1
    7fbe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fc2:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7fc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fc8:	4a28      	ldr	r2, [pc, #160]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    7fca:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7fce:	b292      	uxth	r2, r2
    7fd0:	3201      	adds	r2, #1
    7fd2:	b291      	uxth	r1, r2
    7fd4:	4a25      	ldr	r2, [pc, #148]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    7fd6:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7fda:	f003 fee1 	bl	bda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7fde:	f003 feb3 	bl	bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7fe2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fe6:	4a21      	ldr	r2, [pc, #132]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    7fe8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7fec:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7ff0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ff4:	4a1d      	ldr	r2, [pc, #116]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    7ff6:	00db      	lsls	r3, r3, #3
    7ff8:	4413      	add	r3, r2
    7ffa:	885b      	ldrh	r3, [r3, #2]
    7ffc:	b29b      	uxth	r3, r3
    7ffe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8002:	429a      	cmp	r2, r3
    8004:	d003      	beq.n	800e <Adc_UpdateStatusStartConversion+0xc8>
    8006:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    800a:	2b00      	cmp	r3, #0
    800c:	d125      	bne.n	805a <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    800e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8012:	4a16      	ldr	r2, [pc, #88]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    8014:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8018:	b29b      	uxth	r3, r3
    801a:	2b00      	cmp	r3, #0
    801c:	d112      	bne.n	8044 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    801e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8022:	4a12      	ldr	r2, [pc, #72]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    8024:	00db      	lsls	r3, r3, #3
    8026:	4413      	add	r3, r2
    8028:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    802c:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    802e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8032:	4a0e      	ldr	r2, [pc, #56]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    8034:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    8038:	b292      	uxth	r2, r2
    803a:	3201      	adds	r2, #1
    803c:	b291      	uxth	r1, r2
    803e:	4a0b      	ldr	r2, [pc, #44]	; (806c <Adc_UpdateStatusStartConversion+0x126>)
    8040:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    8044:	f003 feac 	bl	bda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    8048:	f89d 2004 	ldrb.w	r2, [sp, #4]
    804c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8050:	4611      	mov	r1, r2
    8052:	4618      	mov	r0, r3
    8054:	f002 fbf2 	bl	a83c <Adc_Ipw_StartNormalConversion>
    8058:	e002      	b.n	8060 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    805a:	f003 fea1 	bl	bda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    805e:	bf00      	nop
    8060:	bf00      	nop
    8062:	b005      	add	sp, #20
    8064:	f85d fb04 	ldr.w	pc, [sp], #4
    8068:	1fff8d0c 	.word	0x1fff8d0c
    806c:	1fff8d34 	.word	0x1fff8d34

00008070 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    8070:	b500      	push	{lr}
    8072:	b085      	sub	sp, #20
    8074:	9001      	str	r0, [sp, #4]
    8076:	4608      	mov	r0, r1
    8078:	4611      	mov	r1, r2
    807a:	461a      	mov	r2, r3
    807c:	4603      	mov	r3, r0
    807e:	f8ad 3002 	strh.w	r3, [sp, #2]
    8082:	460b      	mov	r3, r1
    8084:	f88d 3001 	strb.w	r3, [sp, #1]
    8088:	4613      	mov	r3, r2
    808a:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    808e:	2300      	movs	r3, #0
    8090:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    8094:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8098:	4a26      	ldr	r2, [pc, #152]	; (8134 <Adc_StopSwGroupConversion+0xc4>)
    809a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    809e:	b29a      	uxth	r2, r3
    80a0:	9b01      	ldr	r3, [sp, #4]
    80a2:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    80a4:	f89d 3001 	ldrb.w	r3, [sp, #1]
    80a8:	4a22      	ldr	r2, [pc, #136]	; (8134 <Adc_StopSwGroupConversion+0xc4>)
    80aa:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    80ae:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    80b2:	2300      	movs	r3, #0
    80b4:	f8ad 300c 	strh.w	r3, [sp, #12]
    80b8:	e02f      	b.n	811a <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    80ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
    80be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80c2:	491c      	ldr	r1, [pc, #112]	; (8134 <Adc_StopSwGroupConversion+0xc4>)
    80c4:	0092      	lsls	r2, r2, #2
    80c6:	4413      	add	r3, r2
    80c8:	005b      	lsls	r3, r3, #1
    80ca:	440b      	add	r3, r1
    80cc:	885b      	ldrh	r3, [r3, #2]
    80ce:	b29b      	uxth	r3, r3
    80d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    80d4:	429a      	cmp	r2, r3
    80d6:	d11b      	bne.n	8110 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    80d8:	9b01      	ldr	r3, [sp, #4]
    80da:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80de:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    80e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80e4:	2b00      	cmp	r3, #0
    80e6:	d10b      	bne.n	8100 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    80e8:	f89d 2000 	ldrb.w	r2, [sp]
    80ec:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    80f0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    80f4:	4618      	mov	r0, r3
    80f6:	f002 fc4b 	bl	a990 <Adc_Ipw_StopCurrentConversion>
    80fa:	4603      	mov	r3, r0
    80fc:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    8100:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8104:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8108:	4611      	mov	r1, r2
    810a:	4618      	mov	r0, r3
    810c:	f001 fd88 	bl	9c20 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    8110:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8114:	3301      	adds	r3, #1
    8116:	f8ad 300c 	strh.w	r3, [sp, #12]
    811a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    811e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8122:	429a      	cmp	r2, r3
    8124:	d3c9      	bcc.n	80ba <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    8126:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    812a:	4618      	mov	r0, r3
    812c:	b005      	add	sp, #20
    812e:	f85d fb04 	ldr.w	pc, [sp], #4
    8132:	bf00      	nop
    8134:	1fff8d34 	.word	0x1fff8d34

00008138 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    8138:	b500      	push	{lr}
    813a:	b089      	sub	sp, #36	; 0x24
    813c:	4603      	mov	r3, r0
    813e:	f8ad 3006 	strh.w	r3, [sp, #6]
    8142:	460b      	mov	r3, r1
    8144:	f88d 3005 	strb.w	r3, [sp, #5]
    8148:	4613      	mov	r3, r2
    814a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    814e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8152:	4a4f      	ldr	r2, [pc, #316]	; (8290 <Adc_UpdateStatusStopConversion+0x158>)
    8154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8158:	68da      	ldr	r2, [r3, #12]
    815a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    815e:	005b      	lsls	r3, r3, #1
    8160:	4413      	add	r3, r2
    8162:	881b      	ldrh	r3, [r3, #0]
    8164:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    8168:	2300      	movs	r3, #0
    816a:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    816e:	2300      	movs	r3, #0
    8170:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    8174:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8178:	4a45      	ldr	r2, [pc, #276]	; (8290 <Adc_UpdateStatusStopConversion+0x158>)
    817a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    817e:	685a      	ldr	r2, [r3, #4]
    8180:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8184:	2134      	movs	r1, #52	; 0x34
    8186:	fb01 f303 	mul.w	r3, r1, r3
    818a:	4413      	add	r3, r2
    818c:	689b      	ldr	r3, [r3, #8]
    818e:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    8190:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8194:	4a3e      	ldr	r2, [pc, #248]	; (8290 <Adc_UpdateStatusStopConversion+0x158>)
    8196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    819a:	685a      	ldr	r2, [r3, #4]
    819c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81a0:	2134      	movs	r1, #52	; 0x34
    81a2:	fb01 f303 	mul.w	r3, r1, r3
    81a6:	4413      	add	r3, r2
    81a8:	685b      	ldr	r3, [r3, #4]
    81aa:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    81ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
    81b0:	4a37      	ldr	r2, [pc, #220]	; (8290 <Adc_UpdateStatusStopConversion+0x158>)
    81b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81b6:	685a      	ldr	r2, [r3, #4]
    81b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81bc:	2134      	movs	r1, #52	; 0x34
    81be:	fb01 f303 	mul.w	r3, r1, r3
    81c2:	4413      	add	r3, r2
    81c4:	699b      	ldr	r3, [r3, #24]
    81c6:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    81c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81cc:	4931      	ldr	r1, [pc, #196]	; (8294 <Adc_UpdateStatusStopConversion+0x15c>)
    81ce:	4613      	mov	r3, r2
    81d0:	009b      	lsls	r3, r3, #2
    81d2:	4413      	add	r3, r2
    81d4:	009b      	lsls	r3, r3, #2
    81d6:	440b      	add	r3, r1
    81d8:	681b      	ldr	r3, [r3, #0]
    81da:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    81dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81e0:	492c      	ldr	r1, [pc, #176]	; (8294 <Adc_UpdateStatusStopConversion+0x15c>)
    81e2:	4613      	mov	r3, r2
    81e4:	009b      	lsls	r3, r3, #2
    81e6:	4413      	add	r3, r2
    81e8:	009b      	lsls	r3, r3, #2
    81ea:	440b      	add	r3, r1
    81ec:	3308      	adds	r3, #8
    81ee:	2200      	movs	r2, #0
    81f0:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    81f2:	9b06      	ldr	r3, [sp, #24]
    81f4:	2b00      	cmp	r3, #0
    81f6:	d005      	beq.n	8204 <Adc_UpdateStatusStopConversion+0xcc>
    81f8:	9b05      	ldr	r3, [sp, #20]
    81fa:	2b01      	cmp	r3, #1
    81fc:	d110      	bne.n	8220 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    81fe:	9b04      	ldr	r3, [sp, #16]
    8200:	2b00      	cmp	r3, #0
    8202:	d10d      	bne.n	8220 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    8204:	9b03      	ldr	r3, [sp, #12]
    8206:	2b03      	cmp	r3, #3
    8208:	d10a      	bne.n	8220 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    820a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    820e:	4921      	ldr	r1, [pc, #132]	; (8294 <Adc_UpdateStatusStopConversion+0x15c>)
    8210:	4613      	mov	r3, r2
    8212:	009b      	lsls	r3, r3, #2
    8214:	4413      	add	r3, r2
    8216:	009b      	lsls	r3, r3, #2
    8218:	440b      	add	r3, r1
    821a:	2200      	movs	r2, #0
    821c:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    821e:	e032      	b.n	8286 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    8220:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8224:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8228:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    822c:	f10d 000a 	add.w	r0, sp, #10
    8230:	f7ff ff1e 	bl	8070 <Adc_StopSwGroupConversion>
    8234:	4603      	mov	r3, r0
    8236:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    823a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    823e:	4915      	ldr	r1, [pc, #84]	; (8294 <Adc_UpdateStatusStopConversion+0x15c>)
    8240:	4613      	mov	r3, r2
    8242:	009b      	lsls	r3, r3, #2
    8244:	4413      	add	r3, r2
    8246:	009b      	lsls	r3, r3, #2
    8248:	440b      	add	r3, r1
    824a:	2200      	movs	r2, #0
    824c:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    824e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8252:	2b00      	cmp	r3, #0
    8254:	d10f      	bne.n	8276 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    8256:	f89d 3005 	ldrb.w	r3, [sp, #5]
    825a:	4a0f      	ldr	r2, [pc, #60]	; (8298 <Adc_UpdateStatusStopConversion+0x160>)
    825c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8260:	b29b      	uxth	r3, r3
    8262:	2b00      	cmp	r3, #0
    8264:	d007      	beq.n	8276 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    8266:	f89d 2004 	ldrb.w	r2, [sp, #4]
    826a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    826e:	4611      	mov	r1, r2
    8270:	4618      	mov	r0, r3
    8272:	f002 fae3 	bl	a83c <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    8276:	f89d 301d 	ldrb.w	r3, [sp, #29]
    827a:	2b01      	cmp	r3, #1
    827c:	d103      	bne.n	8286 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    827e:	212b      	movs	r1, #43	; 0x2b
    8280:	2003      	movs	r0, #3
    8282:	f7ff fb45 	bl	7910 <Adc_ReportDetRuntimeError>
}
    8286:	bf00      	nop
    8288:	b009      	add	sp, #36	; 0x24
    828a:	f85d fb04 	ldr.w	pc, [sp], #4
    828e:	bf00      	nop
    8290:	1fff8d08 	.word	0x1fff8d08
    8294:	1fff8d0c 	.word	0x1fff8d0c
    8298:	1fff8d34 	.word	0x1fff8d34

0000829c <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    829c:	b500      	push	{lr}
    829e:	b085      	sub	sp, #20
    82a0:	4603      	mov	r3, r0
    82a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    82a6:	460b      	mov	r3, r1
    82a8:	f88d 3005 	strb.w	r3, [sp, #5]
    82ac:	4613      	mov	r3, r2
    82ae:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    82b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    82b6:	4a18      	ldr	r2, [pc, #96]	; (8318 <Adc_UpdateStatusReadGroup+0x7c>)
    82b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82bc:	68da      	ldr	r2, [r3, #12]
    82be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82c2:	005b      	lsls	r3, r3, #1
    82c4:	4413      	add	r3, r2
    82c6:	881b      	ldrh	r3, [r3, #0]
    82c8:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    82cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    82d0:	4a11      	ldr	r2, [pc, #68]	; (8318 <Adc_UpdateStatusReadGroup+0x7c>)
    82d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82d6:	685a      	ldr	r2, [r3, #4]
    82d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    82dc:	2134      	movs	r1, #52	; 0x34
    82de:	fb01 f303 	mul.w	r3, r1, r3
    82e2:	4413      	add	r3, r2
    82e4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    82e8:	2b01      	cmp	r3, #1
    82ea:	d109      	bne.n	8300 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    82ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
    82f0:	f89d 1005 	ldrb.w	r1, [sp, #5]
    82f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82f8:	4618      	mov	r0, r3
    82fa:	f000 f80f 	bl	831c <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    82fe:	e007      	b.n	8310 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    8300:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8304:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8308:	4611      	mov	r1, r2
    830a:	4618      	mov	r0, r3
    830c:	f000 f8e8 	bl	84e0 <Adc_UpdateStatusReadGroupInt>
}
    8310:	bf00      	nop
    8312:	b005      	add	sp, #20
    8314:	f85d fb04 	ldr.w	pc, [sp], #4
    8318:	1fff8d08 	.word	0x1fff8d08

0000831c <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    831c:	b500      	push	{lr}
    831e:	b085      	sub	sp, #20
    8320:	4603      	mov	r3, r0
    8322:	f8ad 3006 	strh.w	r3, [sp, #6]
    8326:	460b      	mov	r3, r1
    8328:	f88d 3005 	strb.w	r3, [sp, #5]
    832c:	4613      	mov	r3, r2
    832e:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8332:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8336:	4a2c      	ldr	r2, [pc, #176]	; (83e8 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    833c:	68da      	ldr	r2, [r3, #12]
    833e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8342:	005b      	lsls	r3, r3, #1
    8344:	4413      	add	r3, r2
    8346:	881b      	ldrh	r3, [r3, #0]
    8348:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    834c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8350:	4926      	ldr	r1, [pc, #152]	; (83ec <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    8352:	4613      	mov	r3, r2
    8354:	009b      	lsls	r3, r3, #2
    8356:	4413      	add	r3, r2
    8358:	009b      	lsls	r3, r3, #2
    835a:	440b      	add	r3, r1
    835c:	3304      	adds	r3, #4
    835e:	2201      	movs	r2, #1
    8360:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    8362:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8366:	2b00      	cmp	r3, #0
    8368:	d03a      	beq.n	83e0 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    836a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    836e:	4a1e      	ldr	r2, [pc, #120]	; (83e8 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8374:	685a      	ldr	r2, [r3, #4]
    8376:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    837a:	2134      	movs	r1, #52	; 0x34
    837c:	fb01 f303 	mul.w	r3, r1, r3
    8380:	4413      	add	r3, r2
    8382:	689b      	ldr	r3, [r3, #8]
    8384:	2b01      	cmp	r3, #1
    8386:	d10a      	bne.n	839e <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8388:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    838c:	4917      	ldr	r1, [pc, #92]	; (83ec <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    838e:	4613      	mov	r3, r2
    8390:	009b      	lsls	r3, r3, #2
    8392:	4413      	add	r3, r2
    8394:	009b      	lsls	r3, r3, #2
    8396:	440b      	add	r3, r1
    8398:	2201      	movs	r2, #1
    839a:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    839c:	e020      	b.n	83e0 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    839e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    83a2:	4a11      	ldr	r2, [pc, #68]	; (83e8 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    83a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83a8:	685a      	ldr	r2, [r3, #4]
    83aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    83ae:	2134      	movs	r1, #52	; 0x34
    83b0:	fb01 f303 	mul.w	r3, r1, r3
    83b4:	4413      	add	r3, r2
    83b6:	695b      	ldr	r3, [r3, #20]
    83b8:	2b00      	cmp	r3, #0
    83ba:	d111      	bne.n	83e0 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    83bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    83c0:	490a      	ldr	r1, [pc, #40]	; (83ec <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    83c2:	4613      	mov	r3, r2
    83c4:	009b      	lsls	r3, r3, #2
    83c6:	4413      	add	r3, r2
    83c8:	009b      	lsls	r3, r3, #2
    83ca:	440b      	add	r3, r1
    83cc:	2200      	movs	r2, #0
    83ce:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    83d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    83d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83d8:	4611      	mov	r1, r2
    83da:	4618      	mov	r0, r3
    83dc:	f000 f808 	bl	83f0 <Adc_UpdateSwQueueIndexNoInt>
}
    83e0:	bf00      	nop
    83e2:	b005      	add	sp, #20
    83e4:	f85d fb04 	ldr.w	pc, [sp], #4
    83e8:	1fff8d08 	.word	0x1fff8d08
    83ec:	1fff8d0c 	.word	0x1fff8d0c

000083f0 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    83f0:	b500      	push	{lr}
    83f2:	b085      	sub	sp, #20
    83f4:	4603      	mov	r3, r0
    83f6:	460a      	mov	r2, r1
    83f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    83fc:	4613      	mov	r3, r2
    83fe:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8402:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8406:	4a34      	ldr	r2, [pc, #208]	; (84d8 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    8408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    840c:	68da      	ldr	r2, [r3, #12]
    840e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8412:	005b      	lsls	r3, r3, #1
    8414:	4413      	add	r3, r2
    8416:	881b      	ldrh	r3, [r3, #0]
    8418:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    841c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8420:	4a2d      	ldr	r2, [pc, #180]	; (84d8 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    8422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8426:	685a      	ldr	r2, [r3, #4]
    8428:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    842c:	2134      	movs	r1, #52	; 0x34
    842e:	fb01 f303 	mul.w	r3, r1, r3
    8432:	4413      	add	r3, r2
    8434:	789b      	ldrb	r3, [r3, #2]
    8436:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    843a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    843e:	4a27      	ldr	r2, [pc, #156]	; (84dc <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8440:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8444:	b29b      	uxth	r3, r3
    8446:	2b00      	cmp	r3, #0
    8448:	d041      	beq.n	84ce <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    844a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    844e:	4a23      	ldr	r2, [pc, #140]	; (84dc <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8450:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8454:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    8458:	2300      	movs	r3, #0
    845a:	f8ad 300e 	strh.w	r3, [sp, #14]
    845e:	e01c      	b.n	849a <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    8460:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8464:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8468:	491c      	ldr	r1, [pc, #112]	; (84dc <Adc_UpdateSwQueueIndexNoInt+0xec>)
    846a:	0092      	lsls	r2, r2, #2
    846c:	4413      	add	r3, r2
    846e:	005b      	lsls	r3, r3, #1
    8470:	440b      	add	r3, r1
    8472:	885b      	ldrh	r3, [r3, #2]
    8474:	b29b      	uxth	r3, r3
    8476:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    847a:	429a      	cmp	r2, r3
    847c:	d108      	bne.n	8490 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    847e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8482:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8486:	4611      	mov	r1, r2
    8488:	4618      	mov	r0, r3
    848a:	f001 fbc9 	bl	9c20 <Adc_Ipw_RemoveFromQueue>
                    break;
    848e:	e00a      	b.n	84a6 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    8490:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8494:	3301      	adds	r3, #1
    8496:	f8ad 300e 	strh.w	r3, [sp, #14]
    849a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    849e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    84a2:	429a      	cmp	r2, r3
    84a4:	d3dc      	bcc.n	8460 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    84a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    84aa:	2b00      	cmp	r3, #0
    84ac:	d10f      	bne.n	84ce <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    84ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    84b2:	4a0a      	ldr	r2, [pc, #40]	; (84dc <Adc_UpdateSwQueueIndexNoInt+0xec>)
    84b4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    84b8:	b29b      	uxth	r3, r3
    84ba:	2b00      	cmp	r3, #0
    84bc:	d007      	beq.n	84ce <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    84be:	f89d 2005 	ldrb.w	r2, [sp, #5]
    84c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    84c6:	4611      	mov	r1, r2
    84c8:	4618      	mov	r0, r3
    84ca:	f002 f9b7 	bl	a83c <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    84ce:	bf00      	nop
    84d0:	b005      	add	sp, #20
    84d2:	f85d fb04 	ldr.w	pc, [sp], #4
    84d6:	bf00      	nop
    84d8:	1fff8d08 	.word	0x1fff8d08
    84dc:	1fff8d34 	.word	0x1fff8d34

000084e0 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    84e0:	b084      	sub	sp, #16
    84e2:	4603      	mov	r3, r0
    84e4:	460a      	mov	r2, r1
    84e6:	f8ad 3006 	strh.w	r3, [sp, #6]
    84ea:	4613      	mov	r3, r2
    84ec:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    84f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    84f4:	4a47      	ldr	r2, [pc, #284]	; (8614 <Adc_UpdateStatusReadGroupInt+0x134>)
    84f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84fa:	68da      	ldr	r2, [r3, #12]
    84fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8500:	005b      	lsls	r3, r3, #1
    8502:	4413      	add	r3, r2
    8504:	881b      	ldrh	r3, [r3, #0]
    8506:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    850a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    850e:	4942      	ldr	r1, [pc, #264]	; (8618 <Adc_UpdateStatusReadGroupInt+0x138>)
    8510:	4613      	mov	r3, r2
    8512:	009b      	lsls	r3, r3, #2
    8514:	4413      	add	r3, r2
    8516:	009b      	lsls	r3, r3, #2
    8518:	440b      	add	r3, r1
    851a:	681b      	ldr	r3, [r3, #0]
    851c:	2b02      	cmp	r3, #2
    851e:	d10a      	bne.n	8536 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8520:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8524:	493c      	ldr	r1, [pc, #240]	; (8618 <Adc_UpdateStatusReadGroupInt+0x138>)
    8526:	4613      	mov	r3, r2
    8528:	009b      	lsls	r3, r3, #2
    852a:	4413      	add	r3, r2
    852c:	009b      	lsls	r3, r3, #2
    852e:	440b      	add	r3, r1
    8530:	2201      	movs	r2, #1
    8532:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    8534:	e06a      	b.n	860c <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    8536:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    853a:	4937      	ldr	r1, [pc, #220]	; (8618 <Adc_UpdateStatusReadGroupInt+0x138>)
    853c:	4613      	mov	r3, r2
    853e:	009b      	lsls	r3, r3, #2
    8540:	4413      	add	r3, r2
    8542:	009b      	lsls	r3, r3, #2
    8544:	440b      	add	r3, r1
    8546:	681b      	ldr	r3, [r3, #0]
    8548:	2b03      	cmp	r3, #3
    854a:	d15f      	bne.n	860c <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    854c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8550:	4a30      	ldr	r2, [pc, #192]	; (8614 <Adc_UpdateStatusReadGroupInt+0x134>)
    8552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8556:	685a      	ldr	r2, [r3, #4]
    8558:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    855c:	2134      	movs	r1, #52	; 0x34
    855e:	fb01 f303 	mul.w	r3, r1, r3
    8562:	4413      	add	r3, r2
    8564:	695b      	ldr	r3, [r3, #20]
    8566:	2b00      	cmp	r3, #0
    8568:	d150      	bne.n	860c <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    856a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    856e:	4a29      	ldr	r2, [pc, #164]	; (8614 <Adc_UpdateStatusReadGroupInt+0x134>)
    8570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8574:	685a      	ldr	r2, [r3, #4]
    8576:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    857a:	2134      	movs	r1, #52	; 0x34
    857c:	fb01 f303 	mul.w	r3, r1, r3
    8580:	4413      	add	r3, r2
    8582:	689b      	ldr	r3, [r3, #8]
    8584:	2b00      	cmp	r3, #0
    8586:	d02c      	beq.n	85e2 <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8588:	f89d 3005 	ldrb.w	r3, [sp, #5]
    858c:	4a21      	ldr	r2, [pc, #132]	; (8614 <Adc_UpdateStatusReadGroupInt+0x134>)
    858e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8592:	685a      	ldr	r2, [r3, #4]
    8594:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8598:	2134      	movs	r1, #52	; 0x34
    859a:	fb01 f303 	mul.w	r3, r1, r3
    859e:	4413      	add	r3, r2
    85a0:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    85a2:	2b01      	cmp	r3, #1
    85a4:	d128      	bne.n	85f8 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    85a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    85aa:	4a1a      	ldr	r2, [pc, #104]	; (8614 <Adc_UpdateStatusReadGroupInt+0x134>)
    85ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85b0:	685a      	ldr	r2, [r3, #4]
    85b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    85b6:	2134      	movs	r1, #52	; 0x34
    85b8:	fb01 f303 	mul.w	r3, r1, r3
    85bc:	4413      	add	r3, r2
    85be:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    85c0:	2b01      	cmp	r3, #1
    85c2:	d119      	bne.n	85f8 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    85c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    85c8:	4a12      	ldr	r2, [pc, #72]	; (8614 <Adc_UpdateStatusReadGroupInt+0x134>)
    85ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85ce:	685a      	ldr	r2, [r3, #4]
    85d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    85d4:	2134      	movs	r1, #52	; 0x34
    85d6:	fb01 f303 	mul.w	r3, r1, r3
    85da:	4413      	add	r3, r2
    85dc:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    85de:	2b00      	cmp	r3, #0
    85e0:	d10a      	bne.n	85f8 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    85e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85e6:	490c      	ldr	r1, [pc, #48]	; (8618 <Adc_UpdateStatusReadGroupInt+0x138>)
    85e8:	4613      	mov	r3, r2
    85ea:	009b      	lsls	r3, r3, #2
    85ec:	4413      	add	r3, r2
    85ee:	009b      	lsls	r3, r3, #2
    85f0:	440b      	add	r3, r1
    85f2:	2200      	movs	r2, #0
    85f4:	601a      	str	r2, [r3, #0]
}
    85f6:	e009      	b.n	860c <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    85f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85fc:	4906      	ldr	r1, [pc, #24]	; (8618 <Adc_UpdateStatusReadGroupInt+0x138>)
    85fe:	4613      	mov	r3, r2
    8600:	009b      	lsls	r3, r3, #2
    8602:	4413      	add	r3, r2
    8604:	009b      	lsls	r3, r3, #2
    8606:	440b      	add	r3, r1
    8608:	2201      	movs	r2, #1
    860a:	601a      	str	r2, [r3, #0]
}
    860c:	bf00      	nop
    860e:	b004      	add	sp, #16
    8610:	4770      	bx	lr
    8612:	bf00      	nop
    8614:	1fff8d08 	.word	0x1fff8d08
    8618:	1fff8d0c 	.word	0x1fff8d0c

0000861c <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    861c:	b084      	sub	sp, #16
    861e:	4603      	mov	r3, r0
    8620:	460a      	mov	r2, r1
    8622:	f8ad 3006 	strh.w	r3, [sp, #6]
    8626:	4613      	mov	r3, r2
    8628:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    862c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8630:	4a46      	ldr	r2, [pc, #280]	; (874c <Adc_UpdateStatusAfterGetStream+0x130>)
    8632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8636:	68da      	ldr	r2, [r3, #12]
    8638:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    863c:	005b      	lsls	r3, r3, #1
    863e:	4413      	add	r3, r2
    8640:	881b      	ldrh	r3, [r3, #0]
    8642:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    8646:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    864a:	4941      	ldr	r1, [pc, #260]	; (8750 <Adc_UpdateStatusAfterGetStream+0x134>)
    864c:	4613      	mov	r3, r2
    864e:	009b      	lsls	r3, r3, #2
    8650:	4413      	add	r3, r2
    8652:	009b      	lsls	r3, r3, #2
    8654:	440b      	add	r3, r1
    8656:	681b      	ldr	r3, [r3, #0]
    8658:	2b02      	cmp	r3, #2
    865a:	d109      	bne.n	8670 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    865c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8660:	493b      	ldr	r1, [pc, #236]	; (8750 <Adc_UpdateStatusAfterGetStream+0x134>)
    8662:	4613      	mov	r3, r2
    8664:	009b      	lsls	r3, r3, #2
    8666:	4413      	add	r3, r2
    8668:	009b      	lsls	r3, r3, #2
    866a:	440b      	add	r3, r1
    866c:	2201      	movs	r2, #1
    866e:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    8670:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8674:	4936      	ldr	r1, [pc, #216]	; (8750 <Adc_UpdateStatusAfterGetStream+0x134>)
    8676:	4613      	mov	r3, r2
    8678:	009b      	lsls	r3, r3, #2
    867a:	4413      	add	r3, r2
    867c:	009b      	lsls	r3, r3, #2
    867e:	440b      	add	r3, r1
    8680:	681b      	ldr	r3, [r3, #0]
    8682:	2b03      	cmp	r3, #3
    8684:	d15f      	bne.n	8746 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8686:	f89d 3005 	ldrb.w	r3, [sp, #5]
    868a:	4a30      	ldr	r2, [pc, #192]	; (874c <Adc_UpdateStatusAfterGetStream+0x130>)
    868c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8690:	685a      	ldr	r2, [r3, #4]
    8692:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8696:	2134      	movs	r1, #52	; 0x34
    8698:	fb01 f303 	mul.w	r3, r1, r3
    869c:	4413      	add	r3, r2
    869e:	695b      	ldr	r3, [r3, #20]
    86a0:	2b00      	cmp	r3, #0
    86a2:	d150      	bne.n	8746 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    86a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86a8:	4a28      	ldr	r2, [pc, #160]	; (874c <Adc_UpdateStatusAfterGetStream+0x130>)
    86aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ae:	685a      	ldr	r2, [r3, #4]
    86b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86b4:	2134      	movs	r1, #52	; 0x34
    86b6:	fb01 f303 	mul.w	r3, r1, r3
    86ba:	4413      	add	r3, r2
    86bc:	689b      	ldr	r3, [r3, #8]
    86be:	2b00      	cmp	r3, #0
    86c0:	d02c      	beq.n	871c <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    86c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86c6:	4a21      	ldr	r2, [pc, #132]	; (874c <Adc_UpdateStatusAfterGetStream+0x130>)
    86c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86cc:	685a      	ldr	r2, [r3, #4]
    86ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86d2:	2134      	movs	r1, #52	; 0x34
    86d4:	fb01 f303 	mul.w	r3, r1, r3
    86d8:	4413      	add	r3, r2
    86da:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    86dc:	2b01      	cmp	r3, #1
    86de:	d128      	bne.n	8732 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    86e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86e4:	4a19      	ldr	r2, [pc, #100]	; (874c <Adc_UpdateStatusAfterGetStream+0x130>)
    86e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ea:	685a      	ldr	r2, [r3, #4]
    86ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86f0:	2134      	movs	r1, #52	; 0x34
    86f2:	fb01 f303 	mul.w	r3, r1, r3
    86f6:	4413      	add	r3, r2
    86f8:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    86fa:	2b01      	cmp	r3, #1
    86fc:	d119      	bne.n	8732 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    86fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8702:	4a12      	ldr	r2, [pc, #72]	; (874c <Adc_UpdateStatusAfterGetStream+0x130>)
    8704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8708:	685a      	ldr	r2, [r3, #4]
    870a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    870e:	2134      	movs	r1, #52	; 0x34
    8710:	fb01 f303 	mul.w	r3, r1, r3
    8714:	4413      	add	r3, r2
    8716:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8718:	2b00      	cmp	r3, #0
    871a:	d10a      	bne.n	8732 <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    871c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8720:	490b      	ldr	r1, [pc, #44]	; (8750 <Adc_UpdateStatusAfterGetStream+0x134>)
    8722:	4613      	mov	r3, r2
    8724:	009b      	lsls	r3, r3, #2
    8726:	4413      	add	r3, r2
    8728:	009b      	lsls	r3, r3, #2
    872a:	440b      	add	r3, r1
    872c:	2200      	movs	r2, #0
    872e:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    8730:	e009      	b.n	8746 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8732:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8736:	4906      	ldr	r1, [pc, #24]	; (8750 <Adc_UpdateStatusAfterGetStream+0x134>)
    8738:	4613      	mov	r3, r2
    873a:	009b      	lsls	r3, r3, #2
    873c:	4413      	add	r3, r2
    873e:	009b      	lsls	r3, r3, #2
    8740:	440b      	add	r3, r1
    8742:	2201      	movs	r2, #1
    8744:	601a      	str	r2, [r3, #0]
}
    8746:	bf00      	nop
    8748:	b004      	add	sp, #16
    874a:	4770      	bx	lr
    874c:	1fff8d08 	.word	0x1fff8d08
    8750:	1fff8d0c 	.word	0x1fff8d0c

00008754 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    8754:	b500      	push	{lr}
    8756:	b085      	sub	sp, #20
    8758:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    875a:	f002 fa5b 	bl	ac14 <Adc_GetCoreID>
    875e:	4603      	mov	r3, r0
    8760:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    8764:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8768:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    876c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8770:	b2db      	uxtb	r3, r3
    8772:	4619      	mov	r1, r3
    8774:	9801      	ldr	r0, [sp, #4]
    8776:	f7ff fbb3 	bl	7ee0 <Adc_CheckCurrentCoreId>
    877a:	4603      	mov	r3, r0
    877c:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    8780:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8784:	2b00      	cmp	r3, #0
    8786:	d12c      	bne.n	87e2 <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    8788:	f89d 300c 	ldrb.w	r3, [sp, #12]
    878c:	b2db      	uxtb	r3, r3
    878e:	4619      	mov	r1, r3
    8790:	4a16      	ldr	r2, [pc, #88]	; (87ec <Adc_Init+0x98>)
    8792:	9b01      	ldr	r3, [sp, #4]
    8794:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    8798:	f89d 300c 	ldrb.w	r3, [sp, #12]
    879c:	b2db      	uxtb	r3, r3
    879e:	4618      	mov	r0, r3
    87a0:	f7ff fb4e 	bl	7e40 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    87a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    87a8:	b2db      	uxtb	r3, r3
    87aa:	4618      	mov	r0, r3
    87ac:	f7ff fade 	bl	7d6c <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    87b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    87b4:	b2db      	uxtb	r3, r3
    87b6:	461a      	mov	r2, r3
    87b8:	4b0c      	ldr	r3, [pc, #48]	; (87ec <Adc_Init+0x98>)
    87ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    87be:	681b      	ldr	r3, [r3, #0]
    87c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    87c4:	4611      	mov	r1, r2
    87c6:	4618      	mov	r0, r3
    87c8:	f001 ff78 	bl	a6bc <Adc_Ipw_Init>
    87cc:	4603      	mov	r3, r0
    87ce:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    87d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    87d6:	2b01      	cmp	r3, #1
    87d8:	d103      	bne.n	87e2 <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    87da:	212b      	movs	r1, #43	; 0x2b
    87dc:	2000      	movs	r0, #0
    87de:	f7ff f897 	bl	7910 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    87e2:	bf00      	nop
    87e4:	b005      	add	sp, #20
    87e6:	f85d fb04 	ldr.w	pc, [sp], #4
    87ea:	bf00      	nop
    87ec:	1fff8d08 	.word	0x1fff8d08

000087f0 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    87f0:	b500      	push	{lr}
    87f2:	b085      	sub	sp, #20
    87f4:	4603      	mov	r3, r0
    87f6:	9100      	str	r1, [sp, #0]
    87f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    87fc:	2301      	movs	r3, #1
    87fe:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    8802:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8806:	4618      	mov	r0, r3
    8808:	f7ff f9a2 	bl	7b50 <Adc_ValidateSetupBufferNotBusy>
    880c:	4603      	mov	r3, r0
    880e:	2b00      	cmp	r3, #0
    8810:	d10d      	bne.n	882e <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    8812:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8816:	4909      	ldr	r1, [pc, #36]	; (883c <Adc_SetupResultBuffer+0x4c>)
    8818:	4613      	mov	r3, r2
    881a:	009b      	lsls	r3, r3, #2
    881c:	4413      	add	r3, r2
    881e:	009b      	lsls	r3, r3, #2
    8820:	440b      	add	r3, r1
    8822:	330c      	adds	r3, #12
    8824:	9a00      	ldr	r2, [sp, #0]
    8826:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    8828:	2300      	movs	r3, #0
    882a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    882e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8832:	4618      	mov	r0, r3
    8834:	b005      	add	sp, #20
    8836:	f85d fb04 	ldr.w	pc, [sp], #4
    883a:	bf00      	nop
    883c:	1fff8d0c 	.word	0x1fff8d0c

00008840 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    8840:	b500      	push	{lr}
    8842:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8844:	2300      	movs	r3, #0
    8846:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    884a:	f002 f9e3 	bl	ac14 <Adc_GetCoreID>
    884e:	4603      	mov	r3, r0
    8850:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    8854:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8858:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    885c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8860:	b2db      	uxtb	r3, r3
    8862:	461a      	mov	r2, r3
    8864:	4b2d      	ldr	r3, [pc, #180]	; (891c <Adc_DeInit+0xdc>)
    8866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    886a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    886e:	4611      	mov	r1, r2
    8870:	4618      	mov	r0, r3
    8872:	f7ff fb35 	bl	7ee0 <Adc_CheckCurrentCoreId>
    8876:	4603      	mov	r3, r0
    8878:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    887c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8880:	2b00      	cmp	r3, #0
    8882:	d147      	bne.n	8914 <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    8884:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8888:	b2db      	uxtb	r3, r3
    888a:	4618      	mov	r0, r3
    888c:	f7ff f912 	bl	7ab4 <Adc_ValidateDeInitNotBusy>
    8890:	4603      	mov	r3, r0
    8892:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    8896:	f89d 3004 	ldrb.w	r3, [sp, #4]
    889a:	2b00      	cmp	r3, #0
    889c:	d13a      	bne.n	8914 <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    889e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    88a2:	b2db      	uxtb	r3, r3
    88a4:	4618      	mov	r0, r3
    88a6:	f001 ff4e 	bl	a746 <Adc_Ipw_DeInit>
    88aa:	4603      	mov	r3, r0
    88ac:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    88b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    88b4:	2b01      	cmp	r3, #1
    88b6:	d103      	bne.n	88c0 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    88b8:	212b      	movs	r1, #43	; 0x2b
    88ba:	2001      	movs	r0, #1
    88bc:	f7ff f828 	bl	7910 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    88c0:	2300      	movs	r3, #0
    88c2:	f88d 3007 	strb.w	r3, [sp, #7]
    88c6:	e019      	b.n	88fc <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    88c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    88cc:	b2db      	uxtb	r3, r3
    88ce:	461a      	mov	r2, r3
    88d0:	4b12      	ldr	r3, [pc, #72]	; (891c <Adc_DeInit+0xdc>)
    88d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88d6:	681a      	ldr	r2, [r3, #0]
    88d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88dc:	4413      	add	r3, r2
    88de:	7f9b      	ldrb	r3, [r3, #30]
    88e0:	2b01      	cmp	r3, #1
    88e2:	d106      	bne.n	88f2 <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    88e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88e8:	4a0d      	ldr	r2, [pc, #52]	; (8920 <Adc_DeInit+0xe0>)
    88ea:	00db      	lsls	r3, r3, #3
    88ec:	4413      	add	r3, r2
    88ee:	2200      	movs	r2, #0
    88f0:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    88f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88f6:	3301      	adds	r3, #1
    88f8:	f88d 3007 	strb.w	r3, [sp, #7]
    88fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8900:	2b01      	cmp	r3, #1
    8902:	d9e1      	bls.n	88c8 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    8904:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8908:	b2db      	uxtb	r3, r3
    890a:	4619      	mov	r1, r3
    890c:	4b03      	ldr	r3, [pc, #12]	; (891c <Adc_DeInit+0xdc>)
    890e:	2200      	movs	r2, #0
    8910:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    8914:	bf00      	nop
    8916:	b003      	add	sp, #12
    8918:	f85d fb04 	ldr.w	pc, [sp], #4
    891c:	1fff8d08 	.word	0x1fff8d08
    8920:	1fff8d34 	.word	0x1fff8d34

00008924 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    8924:	b500      	push	{lr}
    8926:	b085      	sub	sp, #20
    8928:	4603      	mov	r3, r0
    892a:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    892e:	2300      	movs	r3, #0
    8930:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8934:	2300      	movs	r3, #0
    8936:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    893a:	f002 f96b 	bl	ac14 <Adc_GetCoreID>
    893e:	4603      	mov	r3, r0
    8940:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8944:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8948:	b2db      	uxtb	r3, r3
    894a:	461a      	mov	r2, r3
    894c:	4b1a      	ldr	r3, [pc, #104]	; (89b8 <Adc_StartGroupConversion+0x94>)
    894e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8952:	68da      	ldr	r2, [r3, #12]
    8954:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8958:	005b      	lsls	r3, r3, #1
    895a:	4413      	add	r3, r2
    895c:	881b      	ldrh	r3, [r3, #0]
    895e:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    8962:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8966:	b2da      	uxtb	r2, r3
    8968:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    896c:	4611      	mov	r1, r2
    896e:	4618      	mov	r0, r3
    8970:	f7ff f912 	bl	7b98 <Adc_ValidateStateStartGroupConvNotBusy>
    8974:	4603      	mov	r3, r0
    8976:	2b00      	cmp	r3, #0
    8978:	d11a      	bne.n	89b0 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    897a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    897e:	b2db      	uxtb	r3, r3
    8980:	461a      	mov	r2, r3
    8982:	4b0d      	ldr	r3, [pc, #52]	; (89b8 <Adc_StartGroupConversion+0x94>)
    8984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8988:	685a      	ldr	r2, [r3, #4]
    898a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    898e:	2134      	movs	r1, #52	; 0x34
    8990:	fb01 f303 	mul.w	r3, r1, r3
    8994:	4413      	add	r3, r2
    8996:	789b      	ldrb	r3, [r3, #2]
    8998:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    899c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    89a0:	b2da      	uxtb	r2, r3
    89a2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    89a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89aa:	4618      	mov	r0, r3
    89ac:	f7ff facb 	bl	7f46 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    89b0:	bf00      	nop
    89b2:	b005      	add	sp, #20
    89b4:	f85d fb04 	ldr.w	pc, [sp], #4
    89b8:	1fff8d08 	.word	0x1fff8d08

000089bc <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    89bc:	b500      	push	{lr}
    89be:	b085      	sub	sp, #20
    89c0:	4603      	mov	r3, r0
    89c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    89c6:	2300      	movs	r3, #0
    89c8:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    89cc:	2300      	movs	r3, #0
    89ce:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    89d2:	f002 f91f 	bl	ac14 <Adc_GetCoreID>
    89d6:	4603      	mov	r3, r0
    89d8:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    89dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89e0:	b2da      	uxtb	r2, r3
    89e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89e6:	4619      	mov	r1, r3
    89e8:	2003      	movs	r0, #3
    89ea:	f7ff f94d 	bl	7c88 <Adc_ValidateStateNotIdle>
    89ee:	4603      	mov	r3, r0
    89f0:	2b00      	cmp	r3, #0
    89f2:	d129      	bne.n	8a48 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    89f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89f8:	b2db      	uxtb	r3, r3
    89fa:	461a      	mov	r2, r3
    89fc:	4b14      	ldr	r3, [pc, #80]	; (8a50 <Adc_StopGroupConversion+0x94>)
    89fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a02:	68da      	ldr	r2, [r3, #12]
    8a04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a08:	005b      	lsls	r3, r3, #1
    8a0a:	4413      	add	r3, r2
    8a0c:	881b      	ldrh	r3, [r3, #0]
    8a0e:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8a12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8a16:	b2db      	uxtb	r3, r3
    8a18:	461a      	mov	r2, r3
    8a1a:	4b0d      	ldr	r3, [pc, #52]	; (8a50 <Adc_StopGroupConversion+0x94>)
    8a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a20:	685a      	ldr	r2, [r3, #4]
    8a22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8a26:	2134      	movs	r1, #52	; 0x34
    8a28:	fb01 f303 	mul.w	r3, r1, r3
    8a2c:	4413      	add	r3, r2
    8a2e:	789b      	ldrb	r3, [r3, #2]
    8a30:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    8a34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8a38:	b2da      	uxtb	r2, r3
    8a3a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8a3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a42:	4618      	mov	r0, r3
    8a44:	f7ff fb78 	bl	8138 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    8a48:	bf00      	nop
    8a4a:	b005      	add	sp, #20
    8a4c:	f85d fb04 	ldr.w	pc, [sp], #4
    8a50:	1fff8d08 	.word	0x1fff8d08

00008a54 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    8a54:	b500      	push	{lr}
    8a56:	b085      	sub	sp, #20
    8a58:	4603      	mov	r3, r0
    8a5a:	9100      	str	r1, [sp, #0]
    8a5c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    8a60:	2301      	movs	r3, #1
    8a62:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    8a66:	2301      	movs	r3, #1
    8a68:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    8a6c:	f002 f8d2 	bl	ac14 <Adc_GetCoreID>
    8a70:	4603      	mov	r3, r0
    8a72:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    8a76:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a7a:	b2da      	uxtb	r2, r3
    8a7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a80:	4619      	mov	r1, r3
    8a82:	2004      	movs	r0, #4
    8a84:	f7ff f900 	bl	7c88 <Adc_ValidateStateNotIdle>
    8a88:	4603      	mov	r3, r0
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d121      	bne.n	8ad2 <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    8a8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a92:	b2db      	uxtb	r3, r3
    8a94:	f10d 020d 	add.w	r2, sp, #13
    8a98:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    8a9c:	9900      	ldr	r1, [sp, #0]
    8a9e:	f002 f812 	bl	aac6 <Adc_Ipw_ReadGroup>
    8aa2:	4603      	mov	r3, r0
    8aa4:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    8aa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8aac:	2b00      	cmp	r3, #0
    8aae:	d006      	beq.n	8abe <Adc_ReadGroup+0x6a>
    8ab0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8ab4:	f083 0301 	eor.w	r3, r3, #1
    8ab8:	b2db      	uxtb	r3, r3
    8aba:	2b00      	cmp	r3, #0
    8abc:	d009      	beq.n	8ad2 <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    8abe:	f89d 100d 	ldrb.w	r1, [sp, #13]
    8ac2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8ac6:	b2da      	uxtb	r2, r3
    8ac8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8acc:	4618      	mov	r0, r3
    8ace:	f7ff fbe5 	bl	829c <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    8ad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8ad6:	4618      	mov	r0, r3
    8ad8:	b005      	add	sp, #20
    8ada:	f85d fb04 	ldr.w	pc, [sp], #4

00008ade <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    8ade:	b084      	sub	sp, #16
    8ae0:	4603      	mov	r3, r0
    8ae2:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    8ae6:	2300      	movs	r3, #0
    8ae8:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    8aea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8aee:	4906      	ldr	r1, [pc, #24]	; (8b08 <Adc_GetGroupStatus+0x2a>)
    8af0:	4613      	mov	r3, r2
    8af2:	009b      	lsls	r3, r3, #2
    8af4:	4413      	add	r3, r2
    8af6:	009b      	lsls	r3, r3, #2
    8af8:	440b      	add	r3, r1
    8afa:	681b      	ldr	r3, [r3, #0]
    8afc:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    8afe:	9b03      	ldr	r3, [sp, #12]
}
    8b00:	4618      	mov	r0, r3
    8b02:	b004      	add	sp, #16
    8b04:	4770      	bx	lr
    8b06:	bf00      	nop
    8b08:	1fff8d0c 	.word	0x1fff8d0c

00008b0c <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    8b0c:	b500      	push	{lr}
    8b0e:	b085      	sub	sp, #20
    8b10:	4603      	mov	r3, r0
    8b12:	9100      	str	r1, [sp, #0]
    8b14:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    8b18:	f002 f87c 	bl	ac14 <Adc_GetCoreID>
    8b1c:	4603      	mov	r3, r0
    8b1e:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    8b22:	2300      	movs	r3, #0
    8b24:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    8b28:	2300      	movs	r3, #0
    8b2a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8b2e:	2300      	movs	r3, #0
    8b30:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    8b34:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b38:	b2da      	uxtb	r2, r3
    8b3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8b3e:	4619      	mov	r1, r3
    8b40:	200b      	movs	r0, #11
    8b42:	f7ff f8a1 	bl	7c88 <Adc_ValidateStateNotIdle>
    8b46:	4603      	mov	r3, r0
    8b48:	2b00      	cmp	r3, #0
    8b4a:	f040 808e 	bne.w	8c6a <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    8b4e:	9b00      	ldr	r3, [sp, #0]
    8b50:	2200      	movs	r2, #0
    8b52:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8b54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b58:	4948      	ldr	r1, [pc, #288]	; (8c7c <Adc_GetStreamLastPointer+0x170>)
    8b5a:	4613      	mov	r3, r2
    8b5c:	009b      	lsls	r3, r3, #2
    8b5e:	4413      	add	r3, r2
    8b60:	009b      	lsls	r3, r3, #2
    8b62:	440b      	add	r3, r1
    8b64:	681b      	ldr	r3, [r3, #0]
    8b66:	2b00      	cmp	r3, #0
    8b68:	f000 8082 	beq.w	8c70 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    8b6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b70:	4942      	ldr	r1, [pc, #264]	; (8c7c <Adc_GetStreamLastPointer+0x170>)
    8b72:	4613      	mov	r3, r2
    8b74:	009b      	lsls	r3, r3, #2
    8b76:	4413      	add	r3, r2
    8b78:	009b      	lsls	r3, r3, #2
    8b7a:	440b      	add	r3, r1
    8b7c:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8b7e:	2b01      	cmp	r3, #1
    8b80:	d076      	beq.n	8c70 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8b82:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b86:	b2db      	uxtb	r3, r3
    8b88:	461a      	mov	r2, r3
    8b8a:	4b3d      	ldr	r3, [pc, #244]	; (8c80 <Adc_GetStreamLastPointer+0x174>)
    8b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b90:	68da      	ldr	r2, [r3, #12]
    8b92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8b96:	005b      	lsls	r3, r3, #1
    8b98:	4413      	add	r3, r2
    8b9a:	881b      	ldrh	r3, [r3, #0]
    8b9c:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8ba0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8ba4:	4935      	ldr	r1, [pc, #212]	; (8c7c <Adc_GetStreamLastPointer+0x170>)
    8ba6:	4613      	mov	r3, r2
    8ba8:	009b      	lsls	r3, r3, #2
    8baa:	4413      	add	r3, r2
    8bac:	009b      	lsls	r3, r3, #2
    8bae:	440b      	add	r3, r1
    8bb0:	3308      	adds	r3, #8
    8bb2:	881b      	ldrh	r3, [r3, #0]
    8bb4:	b29b      	uxth	r3, r3
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d123      	bne.n	8c02 <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    8bba:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8bbe:	b2db      	uxtb	r3, r3
    8bc0:	461a      	mov	r2, r3
    8bc2:	4b2f      	ldr	r3, [pc, #188]	; (8c80 <Adc_GetStreamLastPointer+0x174>)
    8bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bc8:	685a      	ldr	r2, [r3, #4]
    8bca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8bce:	2134      	movs	r1, #52	; 0x34
    8bd0:	fb01 f303 	mul.w	r3, r1, r3
    8bd4:	4413      	add	r3, r2
    8bd6:	8b9b      	ldrh	r3, [r3, #28]
    8bd8:	3b01      	subs	r3, #1
    8bda:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    8bde:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8be2:	b2db      	uxtb	r3, r3
    8be4:	461a      	mov	r2, r3
    8be6:	4b26      	ldr	r3, [pc, #152]	; (8c80 <Adc_GetStreamLastPointer+0x174>)
    8be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bec:	685a      	ldr	r2, [r3, #4]
    8bee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8bf2:	2134      	movs	r1, #52	; 0x34
    8bf4:	fb01 f303 	mul.w	r3, r1, r3
    8bf8:	4413      	add	r3, r2
    8bfa:	8b9b      	ldrh	r3, [r3, #28]
    8bfc:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c00:	e019      	b.n	8c36 <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8c02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8c06:	491d      	ldr	r1, [pc, #116]	; (8c7c <Adc_GetStreamLastPointer+0x170>)
    8c08:	4613      	mov	r3, r2
    8c0a:	009b      	lsls	r3, r3, #2
    8c0c:	4413      	add	r3, r2
    8c0e:	009b      	lsls	r3, r3, #2
    8c10:	440b      	add	r3, r1
    8c12:	3308      	adds	r3, #8
    8c14:	881b      	ldrh	r3, [r3, #0]
    8c16:	b29b      	uxth	r3, r3
    8c18:	3b01      	subs	r3, #1
    8c1a:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    8c1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8c22:	4916      	ldr	r1, [pc, #88]	; (8c7c <Adc_GetStreamLastPointer+0x170>)
    8c24:	4613      	mov	r3, r2
    8c26:	009b      	lsls	r3, r3, #2
    8c28:	4413      	add	r3, r2
    8c2a:	009b      	lsls	r3, r3, #2
    8c2c:	440b      	add	r3, r1
    8c2e:	3308      	adds	r3, #8
    8c30:	881b      	ldrh	r3, [r3, #0]
    8c32:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8c36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8c3a:	4910      	ldr	r1, [pc, #64]	; (8c7c <Adc_GetStreamLastPointer+0x170>)
    8c3c:	4613      	mov	r3, r2
    8c3e:	009b      	lsls	r3, r3, #2
    8c40:	4413      	add	r3, r2
    8c42:	009b      	lsls	r3, r3, #2
    8c44:	440b      	add	r3, r1
    8c46:	330c      	adds	r3, #12
    8c48:	681a      	ldr	r2, [r3, #0]
    8c4a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c4e:	005b      	lsls	r3, r3, #1
    8c50:	441a      	add	r2, r3
    8c52:	9b00      	ldr	r3, [sp, #0]
    8c54:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    8c56:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8c5a:	b2da      	uxtb	r2, r3
    8c5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8c60:	4611      	mov	r1, r2
    8c62:	4618      	mov	r0, r3
    8c64:	f7ff fcda 	bl	861c <Adc_UpdateStatusAfterGetStream>
    8c68:	e002      	b.n	8c70 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    8c6a:	9b00      	ldr	r3, [sp, #0]
    8c6c:	2200      	movs	r2, #0
    8c6e:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    8c70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8c74:	4618      	mov	r0, r3
    8c76:	b005      	add	sp, #20
    8c78:	f85d fb04 	ldr.w	pc, [sp], #4
    8c7c:	1fff8d0c 	.word	0x1fff8d0c
    8c80:	1fff8d08 	.word	0x1fff8d08

00008c84 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    8c84:	b082      	sub	sp, #8
    8c86:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    8c88:	9b01      	ldr	r3, [sp, #4]
    8c8a:	222b      	movs	r2, #43	; 0x2b
    8c8c:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    8c8e:	9b01      	ldr	r3, [sp, #4]
    8c90:	227b      	movs	r2, #123	; 0x7b
    8c92:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    8c94:	9b01      	ldr	r3, [sp, #4]
    8c96:	2202      	movs	r2, #2
    8c98:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    8c9a:	9b01      	ldr	r3, [sp, #4]
    8c9c:	2200      	movs	r2, #0
    8c9e:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    8ca0:	9b01      	ldr	r3, [sp, #4]
    8ca2:	2200      	movs	r2, #0
    8ca4:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    8ca6:	bf00      	nop
    8ca8:	b002      	add	sp, #8
    8caa:	4770      	bx	lr

00008cac <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    8cac:	b500      	push	{lr}
    8cae:	b085      	sub	sp, #20
    8cb0:	4603      	mov	r3, r0
    8cb2:	9100      	str	r1, [sp, #0]
    8cb4:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    8cb8:	2300      	movs	r3, #0
    8cba:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    8cbe:	f001 ffa9 	bl	ac14 <Adc_GetCoreID>
    8cc2:	4603      	mov	r3, r0
    8cc4:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    8cc8:	9b00      	ldr	r3, [sp, #0]
    8cca:	2201      	movs	r2, #1
    8ccc:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    8cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cd2:	2129      	movs	r1, #41	; 0x29
    8cd4:	4618      	mov	r0, r3
    8cd6:	f7fe fe30 	bl	793a <Adc_ValidateNotBusyNoQueue>
    8cda:	4603      	mov	r3, r0
    8cdc:	2b00      	cmp	r3, #0
    8cde:	d115      	bne.n	8d0c <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    8ce0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8ce4:	b2db      	uxtb	r3, r3
    8ce6:	4619      	mov	r1, r3
    8ce8:	2029      	movs	r0, #41	; 0x29
    8cea:	f7fe fe91 	bl	7a10 <Adc_ValidateCheckGroupNotConversion>
    8cee:	4603      	mov	r3, r0
    8cf0:	2b00      	cmp	r3, #0
    8cf2:	d10b      	bne.n	8d0c <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    8cf4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8cf8:	b2da      	uxtb	r2, r3
    8cfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cfe:	9900      	ldr	r1, [sp, #0]
    8d00:	4618      	mov	r0, r3
    8d02:	f001 ff5d 	bl	abc0 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    8d06:	2301      	movs	r3, #1
    8d08:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    8d0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8d10:	2b00      	cmp	r3, #0
    8d12:	d007      	beq.n	8d24 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    8d14:	9b00      	ldr	r3, [sp, #0]
    8d16:	781b      	ldrb	r3, [r3, #0]
    8d18:	2b01      	cmp	r3, #1
    8d1a:	d103      	bne.n	8d24 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    8d1c:	212b      	movs	r1, #43	; 0x2b
    8d1e:	2029      	movs	r0, #41	; 0x29
    8d20:	f7fe fdf6 	bl	7910 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    8d24:	bf00      	nop
    8d26:	b005      	add	sp, #20
    8d28:	f85d fb04 	ldr.w	pc, [sp], #4

00008d2c <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    8d2c:	b086      	sub	sp, #24
    8d2e:	9003      	str	r0, [sp, #12]
    8d30:	9102      	str	r1, [sp, #8]
    8d32:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    8d34:	9b03      	ldr	r3, [sp, #12]
    8d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8d3a:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    8d3c:	9b02      	ldr	r3, [sp, #8]
    8d3e:	43db      	mvns	r3, r3
    8d40:	9a05      	ldr	r2, [sp, #20]
    8d42:	4013      	ands	r3, r2
    8d44:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    8d46:	9a05      	ldr	r2, [sp, #20]
    8d48:	9b01      	ldr	r3, [sp, #4]
    8d4a:	4313      	orrs	r3, r2
    8d4c:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    8d4e:	9b03      	ldr	r3, [sp, #12]
    8d50:	9a05      	ldr	r2, [sp, #20]
    8d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8d56:	bf00      	nop
    8d58:	b006      	add	sp, #24
    8d5a:	4770      	bx	lr

00008d5c <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    8d5c:	b086      	sub	sp, #24
    8d5e:	9003      	str	r0, [sp, #12]
    8d60:	9102      	str	r1, [sp, #8]
    8d62:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    8d64:	9b03      	ldr	r3, [sp, #12]
    8d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8d68:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    8d6a:	9b05      	ldr	r3, [sp, #20]
    8d6c:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    8d70:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    8d72:	9b02      	ldr	r3, [sp, #8]
    8d74:	015b      	lsls	r3, r3, #5
    8d76:	f003 0360 	and.w	r3, r3, #96	; 0x60
    8d7a:	9a05      	ldr	r2, [sp, #20]
    8d7c:	4313      	orrs	r3, r2
    8d7e:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    8d80:	9b01      	ldr	r3, [sp, #4]
    8d82:	f003 0303 	and.w	r3, r3, #3
    8d86:	9a05      	ldr	r2, [sp, #20]
    8d88:	4313      	orrs	r3, r2
    8d8a:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    8d8c:	9b03      	ldr	r3, [sp, #12]
    8d8e:	9a05      	ldr	r2, [sp, #20]
    8d90:	641a      	str	r2, [r3, #64]	; 0x40
}
    8d92:	bf00      	nop
    8d94:	b006      	add	sp, #24
    8d96:	4770      	bx	lr

00008d98 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    8d98:	b084      	sub	sp, #16
    8d9a:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    8d9c:	2300      	movs	r3, #0
    8d9e:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    8da0:	9b01      	ldr	r3, [sp, #4]
    8da2:	095b      	lsrs	r3, r3, #5
    8da4:	f003 0303 	and.w	r3, r3, #3
    8da8:	2b03      	cmp	r3, #3
    8daa:	d00c      	beq.n	8dc6 <Adc_HwAcc_GetClockDivide+0x2e>
    8dac:	2b03      	cmp	r3, #3
    8dae:	d80d      	bhi.n	8dcc <Adc_HwAcc_GetClockDivide+0x34>
    8db0:	2b01      	cmp	r3, #1
    8db2:	d002      	beq.n	8dba <Adc_HwAcc_GetClockDivide+0x22>
    8db4:	2b02      	cmp	r3, #2
    8db6:	d003      	beq.n	8dc0 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    8db8:	e008      	b.n	8dcc <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    8dba:	2301      	movs	r3, #1
    8dbc:	9303      	str	r3, [sp, #12]
            break;
    8dbe:	e006      	b.n	8dce <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    8dc0:	2302      	movs	r3, #2
    8dc2:	9303      	str	r3, [sp, #12]
            break;
    8dc4:	e003      	b.n	8dce <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    8dc6:	2303      	movs	r3, #3
    8dc8:	9303      	str	r3, [sp, #12]
            break;
    8dca:	e000      	b.n	8dce <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8dcc:	bf00      	nop
    }
    return ReturnValue;
    8dce:	9b03      	ldr	r3, [sp, #12]
}
    8dd0:	4618      	mov	r0, r3
    8dd2:	b004      	add	sp, #16
    8dd4:	4770      	bx	lr

00008dd6 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    8dd6:	b084      	sub	sp, #16
    8dd8:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8dda:	2300      	movs	r3, #0
    8ddc:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8dde:	9b01      	ldr	r3, [sp, #4]
    8de0:	f003 0303 	and.w	r3, r3, #3
    8de4:	2b03      	cmp	r3, #3
    8de6:	d00c      	beq.n	8e02 <Adc_HwAcc_GetInputClock+0x2c>
    8de8:	2b03      	cmp	r3, #3
    8dea:	d80d      	bhi.n	8e08 <Adc_HwAcc_GetInputClock+0x32>
    8dec:	2b01      	cmp	r3, #1
    8dee:	d002      	beq.n	8df6 <Adc_HwAcc_GetInputClock+0x20>
    8df0:	2b02      	cmp	r3, #2
    8df2:	d003      	beq.n	8dfc <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    8df4:	e008      	b.n	8e08 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    8df6:	2301      	movs	r3, #1
    8df8:	9303      	str	r3, [sp, #12]
            break;
    8dfa:	e006      	b.n	8e0a <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8dfc:	2302      	movs	r3, #2
    8dfe:	9303      	str	r3, [sp, #12]
            break;
    8e00:	e003      	b.n	8e0a <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    8e02:	2303      	movs	r3, #3
    8e04:	9303      	str	r3, [sp, #12]
            break;
    8e06:	e000      	b.n	8e0a <Adc_HwAcc_GetInputClock+0x34>
            break;
    8e08:	bf00      	nop
    }
    return ReturnValue;
    8e0a:	9b03      	ldr	r3, [sp, #12]
}
    8e0c:	4618      	mov	r0, r3
    8e0e:	b004      	add	sp, #16
    8e10:	4770      	bx	lr

00008e12 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    8e12:	b084      	sub	sp, #16
    8e14:	9001      	str	r0, [sp, #4]
    8e16:	460b      	mov	r3, r1
    8e18:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8e1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e20:	2b00      	cmp	r3, #0
    8e22:	d002      	beq.n	8e2a <Adc_HwAcc_SetSampleTime+0x18>
    8e24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e28:	e000      	b.n	8e2c <Adc_HwAcc_SetSampleTime+0x1a>
    8e2a:	2301      	movs	r3, #1
    8e2c:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8e30:	9b01      	ldr	r3, [sp, #4]
    8e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8e34:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    8e36:	9b02      	ldr	r3, [sp, #8]
    8e38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8e3c:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    8e3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e42:	9a02      	ldr	r2, [sp, #8]
    8e44:	4313      	orrs	r3, r2
    8e46:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    8e48:	9b01      	ldr	r3, [sp, #4]
    8e4a:	9a02      	ldr	r2, [sp, #8]
    8e4c:	645a      	str	r2, [r3, #68]	; 0x44
}
    8e4e:	bf00      	nop
    8e50:	b004      	add	sp, #16
    8e52:	4770      	bx	lr

00008e54 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    8e54:	b086      	sub	sp, #24
    8e56:	9003      	str	r0, [sp, #12]
    8e58:	460b      	mov	r3, r1
    8e5a:	9201      	str	r2, [sp, #4]
    8e5c:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    8e60:	9b03      	ldr	r3, [sp, #12]
    8e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8e66:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    8e68:	9b05      	ldr	r3, [sp, #20]
    8e6a:	f023 0307 	bic.w	r3, r3, #7
    8e6e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    8e70:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8e74:	2b00      	cmp	r3, #0
    8e76:	d001      	beq.n	8e7c <Adc_HwAcc_SetAveraging+0x28>
    8e78:	2304      	movs	r3, #4
    8e7a:	e000      	b.n	8e7e <Adc_HwAcc_SetAveraging+0x2a>
    8e7c:	2300      	movs	r3, #0
    8e7e:	9a05      	ldr	r2, [sp, #20]
    8e80:	4313      	orrs	r3, r2
    8e82:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    8e84:	9b01      	ldr	r3, [sp, #4]
    8e86:	f003 0303 	and.w	r3, r3, #3
    8e8a:	9a05      	ldr	r2, [sp, #20]
    8e8c:	4313      	orrs	r3, r2
    8e8e:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    8e90:	9b03      	ldr	r3, [sp, #12]
    8e92:	9a05      	ldr	r2, [sp, #20]
    8e94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8e98:	bf00      	nop
    8e9a:	b006      	add	sp, #24
    8e9c:	4770      	bx	lr

00008e9e <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    8e9e:	b084      	sub	sp, #16
    8ea0:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    8ea2:	2300      	movs	r3, #0
    8ea4:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    8ea6:	9b01      	ldr	r3, [sp, #4]
    8ea8:	f003 0303 	and.w	r3, r3, #3
    8eac:	2b03      	cmp	r3, #3
    8eae:	d00c      	beq.n	8eca <Adc_HwAcc_GetAverageSelect+0x2c>
    8eb0:	2b03      	cmp	r3, #3
    8eb2:	d80d      	bhi.n	8ed0 <Adc_HwAcc_GetAverageSelect+0x32>
    8eb4:	2b01      	cmp	r3, #1
    8eb6:	d002      	beq.n	8ebe <Adc_HwAcc_GetAverageSelect+0x20>
    8eb8:	2b02      	cmp	r3, #2
    8eba:	d003      	beq.n	8ec4 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    8ebc:	e008      	b.n	8ed0 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    8ebe:	2301      	movs	r3, #1
    8ec0:	9303      	str	r3, [sp, #12]
            break;
    8ec2:	e006      	b.n	8ed2 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    8ec4:	2302      	movs	r3, #2
    8ec6:	9303      	str	r3, [sp, #12]
            break;
    8ec8:	e003      	b.n	8ed2 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    8eca:	2303      	movs	r3, #3
    8ecc:	9303      	str	r3, [sp, #12]
            break;
    8ece:	e000      	b.n	8ed2 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8ed0:	bf00      	nop
    }
    return ReturnValue;
    8ed2:	9b03      	ldr	r3, [sp, #12]
}
    8ed4:	4618      	mov	r0, r3
    8ed6:	b004      	add	sp, #16
    8ed8:	4770      	bx	lr

00008eda <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8eda:	b084      	sub	sp, #16
    8edc:	9001      	str	r0, [sp, #4]
    8ede:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8ee0:	9b01      	ldr	r3, [sp, #4]
    8ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8ee6:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8ee8:	9b03      	ldr	r3, [sp, #12]
    8eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8eee:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8ef0:	9b00      	ldr	r3, [sp, #0]
    8ef2:	019b      	lsls	r3, r3, #6
    8ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ef8:	9a03      	ldr	r2, [sp, #12]
    8efa:	4313      	orrs	r3, r2
    8efc:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8efe:	9b01      	ldr	r3, [sp, #4]
    8f00:	9a03      	ldr	r2, [sp, #12]
    8f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8f06:	bf00      	nop
    8f08:	b004      	add	sp, #16
    8f0a:	4770      	bx	lr

00008f0c <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8f0c:	b084      	sub	sp, #16
    8f0e:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8f10:	2300      	movs	r3, #0
    8f12:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    8f14:	9b01      	ldr	r3, [sp, #4]
    8f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8f1a:	2b00      	cmp	r3, #0
    8f1c:	d001      	beq.n	8f22 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8f1e:	2301      	movs	r3, #1
    8f20:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    8f22:	9b03      	ldr	r3, [sp, #12]
}
    8f24:	4618      	mov	r0, r3
    8f26:	b004      	add	sp, #16
    8f28:	4770      	bx	lr

00008f2a <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8f2a:	b086      	sub	sp, #24
    8f2c:	9003      	str	r0, [sp, #12]
    8f2e:	9201      	str	r2, [sp, #4]
    8f30:	461a      	mov	r2, r3
    8f32:	460b      	mov	r3, r1
    8f34:	f88d 300b 	strb.w	r3, [sp, #11]
    8f38:	4613      	mov	r3, r2
    8f3a:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    8f3e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8f42:	9b03      	ldr	r3, [sp, #12]
    8f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8f48:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    8f4a:	9b05      	ldr	r3, [sp, #20]
    8f4c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    8f50:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    8f52:	9b01      	ldr	r3, [sp, #4]
    8f54:	f003 031f 	and.w	r3, r3, #31
    8f58:	9a05      	ldr	r2, [sp, #20]
    8f5a:	4313      	orrs	r3, r2
    8f5c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    8f5e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8f62:	2b00      	cmp	r3, #0
    8f64:	d001      	beq.n	8f6a <Adc_HwAcc_SetChannel+0x40>
    8f66:	2340      	movs	r3, #64	; 0x40
    8f68:	e000      	b.n	8f6c <Adc_HwAcc_SetChannel+0x42>
    8f6a:	2300      	movs	r3, #0
    8f6c:	9a05      	ldr	r2, [sp, #20]
    8f6e:	4313      	orrs	r3, r2
    8f70:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    8f72:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8f76:	9b03      	ldr	r3, [sp, #12]
    8f78:	9905      	ldr	r1, [sp, #20]
    8f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8f7e:	bf00      	nop
    8f80:	b006      	add	sp, #24
    8f82:	4770      	bx	lr

00008f84 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    8f84:	b082      	sub	sp, #8
    8f86:	9001      	str	r0, [sp, #4]
    8f88:	460b      	mov	r3, r1
    8f8a:	f8ad 3002 	strh.w	r3, [sp, #2]
    8f8e:	4613      	mov	r3, r2
    8f90:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    8f94:	f8bd 3000 	ldrh.w	r3, [sp]
    8f98:	b2da      	uxtb	r2, r3
    8f9a:	9b01      	ldr	r3, [sp, #4]
    8f9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    8fa0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8fa8:	9b01      	ldr	r3, [sp, #4]
    8faa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    8fae:	bf00      	nop
    8fb0:	b002      	add	sp, #8
    8fb2:	4770      	bx	lr

00008fb4 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    8fb4:	b082      	sub	sp, #8
    8fb6:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    8fb8:	9b01      	ldr	r3, [sp, #4]
    8fba:	099b      	lsrs	r3, r3, #6
    8fbc:	f003 0301 	and.w	r3, r3, #1
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	bf14      	ite	ne
    8fc4:	2301      	movne	r3, #1
    8fc6:	2300      	moveq	r3, #0
    8fc8:	b2db      	uxtb	r3, r3
}
    8fca:	4618      	mov	r0, r3
    8fcc:	b002      	add	sp, #8
    8fce:	4770      	bx	lr

00008fd0 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8fd0:	b082      	sub	sp, #8
    8fd2:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    8fd4:	9b01      	ldr	r3, [sp, #4]
    8fd6:	09db      	lsrs	r3, r3, #7
    8fd8:	f003 0301 	and.w	r3, r3, #1
    8fdc:	2b00      	cmp	r3, #0
    8fde:	bf14      	ite	ne
    8fe0:	2301      	movne	r3, #1
    8fe2:	2300      	moveq	r3, #0
    8fe4:	b2db      	uxtb	r3, r3
}
    8fe6:	4618      	mov	r0, r3
    8fe8:	b002      	add	sp, #8
    8fea:	4770      	bx	lr

00008fec <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8fec:	b084      	sub	sp, #16
    8fee:	9001      	str	r0, [sp, #4]
    8ff0:	460b      	mov	r3, r1
    8ff2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    8ff6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8ffa:	9b01      	ldr	r3, [sp, #4]
    8ffc:	3212      	adds	r2, #18
    8ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9002:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    9006:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    900a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    900e:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    9012:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    9016:	4618      	mov	r0, r3
    9018:	b004      	add	sp, #16
    901a:	4770      	bx	lr

0000901c <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    901c:	b500      	push	{lr}
    901e:	b085      	sub	sp, #20
    9020:	9003      	str	r0, [sp, #12]
    9022:	9102      	str	r1, [sp, #8]
    9024:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    9026:	f003 ff87 	bl	cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    902a:	9b02      	ldr	r3, [sp, #8]
    902c:	7a59      	ldrb	r1, [r3, #9]
    902e:	9b02      	ldr	r3, [sp, #8]
    9030:	68db      	ldr	r3, [r3, #12]
    9032:	461a      	mov	r2, r3
    9034:	9803      	ldr	r0, [sp, #12]
    9036:	f7ff ff0d 	bl	8e54 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    903a:	f003 ffa9 	bl	cf90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    903e:	f003 fde1 	bl	cc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    9042:	9901      	ldr	r1, [sp, #4]
    9044:	9803      	ldr	r0, [sp, #12]
    9046:	f7ff ff48 	bl	8eda <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    904a:	f003 fe07 	bl	cc5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    904e:	f003 faf7 	bl	c640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    9052:	9b02      	ldr	r3, [sp, #8]
    9054:	7a1b      	ldrb	r3, [r3, #8]
    9056:	4619      	mov	r1, r3
    9058:	9803      	ldr	r0, [sp, #12]
    905a:	f7ff feda 	bl	8e12 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    905e:	f003 fb1b 	bl	c698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    9062:	f003 fa49 	bl	c4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    9066:	9b02      	ldr	r3, [sp, #8]
    9068:	6819      	ldr	r1, [r3, #0]
    906a:	9b02      	ldr	r3, [sp, #8]
    906c:	685b      	ldr	r3, [r3, #4]
    906e:	461a      	mov	r2, r3
    9070:	9803      	ldr	r0, [sp, #12]
    9072:	f7ff fe73 	bl	8d5c <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    9076:	f003 fa6b 	bl	c550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    907a:	bf00      	nop
    907c:	b005      	add	sp, #20
    907e:	f85d fb04 	ldr.w	pc, [sp], #4

00009082 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    9082:	b500      	push	{lr}
    9084:	b087      	sub	sp, #28
    9086:	9001      	str	r0, [sp, #4]
    9088:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    908a:	4a67      	ldr	r2, [pc, #412]	; (9228 <Adc_Ip_Init+0x1a6>)
    908c:	9b01      	ldr	r3, [sp, #4]
    908e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9092:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    9094:	2300      	movs	r3, #0
    9096:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    9098:	2300      	movs	r3, #0
    909a:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    909c:	9b00      	ldr	r3, [sp, #0]
    909e:	6819      	ldr	r1, [r3, #0]
    90a0:	9b00      	ldr	r3, [sp, #0]
    90a2:	689b      	ldr	r3, [r3, #8]
    90a4:	461a      	mov	r2, r3
    90a6:	9802      	ldr	r0, [sp, #8]
    90a8:	f7ff fe58 	bl	8d5c <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    90ac:	9b00      	ldr	r3, [sp, #0]
    90ae:	7b1b      	ldrb	r3, [r3, #12]
    90b0:	4619      	mov	r1, r3
    90b2:	9802      	ldr	r0, [sp, #8]
    90b4:	f7ff fead 	bl	8e12 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    90b8:	9b00      	ldr	r3, [sp, #0]
    90ba:	7b59      	ldrb	r1, [r3, #13]
    90bc:	9b00      	ldr	r3, [sp, #0]
    90be:	691b      	ldr	r3, [r3, #16]
    90c0:	461a      	mov	r2, r3
    90c2:	9802      	ldr	r0, [sp, #8]
    90c4:	f7ff fec6 	bl	8e54 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    90c8:	9b00      	ldr	r3, [sp, #0]
    90ca:	695b      	ldr	r3, [r3, #20]
    90cc:	4619      	mov	r1, r3
    90ce:	9801      	ldr	r0, [sp, #4]
    90d0:	f000 f9ea 	bl	94a8 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    90d4:	9b04      	ldr	r3, [sp, #16]
    90d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    90da:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    90dc:	9b00      	ldr	r3, [sp, #0]
    90de:	699b      	ldr	r3, [r3, #24]
    90e0:	019b      	lsls	r3, r3, #6
    90e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90e6:	9a05      	ldr	r2, [sp, #20]
    90e8:	4313      	orrs	r3, r2
    90ea:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    90ec:	9b00      	ldr	r3, [sp, #0]
    90ee:	7f1b      	ldrb	r3, [r3, #28]
    90f0:	2b00      	cmp	r3, #0
    90f2:	d004      	beq.n	90fe <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    90f4:	9b05      	ldr	r3, [sp, #20]
    90f6:	f043 0304 	orr.w	r3, r3, #4
    90fa:	9305      	str	r3, [sp, #20]
    90fc:	e003      	b.n	9106 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    90fe:	9b04      	ldr	r3, [sp, #16]
    9100:	f043 0304 	orr.w	r3, r3, #4
    9104:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    9106:	9b04      	ldr	r3, [sp, #16]
    9108:	f043 0303 	orr.w	r3, r3, #3
    910c:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    910e:	9b00      	ldr	r3, [sp, #0]
    9110:	6a1b      	ldr	r3, [r3, #32]
    9112:	f003 0303 	and.w	r3, r3, #3
    9116:	9a05      	ldr	r2, [sp, #20]
    9118:	4313      	orrs	r3, r2
    911a:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    911c:	9b04      	ldr	r3, [sp, #16]
    911e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9122:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    9124:	9b00      	ldr	r3, [sp, #0]
    9126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    912a:	2b00      	cmp	r3, #0
    912c:	d001      	beq.n	9132 <Adc_Ip_Init+0xb0>
    912e:	2320      	movs	r3, #32
    9130:	e000      	b.n	9134 <Adc_Ip_Init+0xb2>
    9132:	2300      	movs	r3, #0
    9134:	9a05      	ldr	r2, [sp, #20]
    9136:	4313      	orrs	r3, r2
    9138:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    913a:	9b00      	ldr	r3, [sp, #0]
    913c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    9140:	2b00      	cmp	r3, #0
    9142:	d001      	beq.n	9148 <Adc_Ip_Init+0xc6>
    9144:	2310      	movs	r3, #16
    9146:	e000      	b.n	914a <Adc_Ip_Init+0xc8>
    9148:	2300      	movs	r3, #0
    914a:	9a05      	ldr	r2, [sp, #20]
    914c:	4313      	orrs	r3, r2
    914e:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    9150:	9b00      	ldr	r3, [sp, #0]
    9152:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    9156:	2b00      	cmp	r3, #0
    9158:	d001      	beq.n	915e <Adc_Ip_Init+0xdc>
    915a:	2308      	movs	r3, #8
    915c:	e000      	b.n	9160 <Adc_Ip_Init+0xde>
    915e:	2300      	movs	r3, #0
    9160:	9a05      	ldr	r2, [sp, #20]
    9162:	4313      	orrs	r3, r2
    9164:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    9166:	9b00      	ldr	r3, [sp, #0]
    9168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    916a:	461a      	mov	r2, r3
    916c:	9b02      	ldr	r3, [sp, #8]
    916e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    9172:	9b00      	ldr	r3, [sp, #0]
    9174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9176:	461a      	mov	r2, r3
    9178:	9b02      	ldr	r3, [sp, #8]
    917a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    917e:	9a05      	ldr	r2, [sp, #20]
    9180:	9904      	ldr	r1, [sp, #16]
    9182:	9802      	ldr	r0, [sp, #8]
    9184:	f7ff fdd2 	bl	8d2c <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    9188:	9b00      	ldr	r3, [sp, #0]
    918a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    918c:	9b00      	ldr	r3, [sp, #0]
    918e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9190:	461a      	mov	r2, r3
    9192:	9802      	ldr	r0, [sp, #8]
    9194:	f7ff fef6 	bl	8f84 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    9198:	9b00      	ldr	r3, [sp, #0]
    919a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    919e:	4619      	mov	r1, r3
    91a0:	9801      	ldr	r0, [sp, #4]
    91a2:	f000 f955 	bl	9450 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    91a6:	9b00      	ldr	r3, [sp, #0]
    91a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    91aa:	2b00      	cmp	r3, #0
    91ac:	d01c      	beq.n	91e8 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    91ae:	2300      	movs	r3, #0
    91b0:	f88d 300f 	strb.w	r3, [sp, #15]
    91b4:	e011      	b.n	91da <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    91b6:	9b00      	ldr	r3, [sp, #0]
    91b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    91ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    91be:	4613      	mov	r3, r2
    91c0:	005b      	lsls	r3, r3, #1
    91c2:	4413      	add	r3, r2
    91c4:	009b      	lsls	r3, r3, #2
    91c6:	440b      	add	r3, r1
    91c8:	4619      	mov	r1, r3
    91ca:	9801      	ldr	r0, [sp, #4]
    91cc:	f000 f9c2 	bl	9554 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    91d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91d4:	3301      	adds	r3, #1
    91d6:	f88d 300f 	strb.w	r3, [sp, #15]
    91da:	9b00      	ldr	r3, [sp, #0]
    91dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    91e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    91e4:	429a      	cmp	r2, r3
    91e6:	d3e6      	bcc.n	91b6 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    91e8:	9b00      	ldr	r3, [sp, #0]
    91ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    91ec:	490f      	ldr	r1, [pc, #60]	; (922c <Adc_Ip_Init+0x1aa>)
    91ee:	9b01      	ldr	r3, [sp, #4]
    91f0:	204c      	movs	r0, #76	; 0x4c
    91f2:	fb00 f303 	mul.w	r3, r0, r3
    91f6:	440b      	add	r3, r1
    91f8:	3308      	adds	r3, #8
    91fa:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    91fc:	9b00      	ldr	r3, [sp, #0]
    91fe:	685a      	ldr	r2, [r3, #4]
    9200:	490a      	ldr	r1, [pc, #40]	; (922c <Adc_Ip_Init+0x1aa>)
    9202:	9b01      	ldr	r3, [sp, #4]
    9204:	204c      	movs	r0, #76	; 0x4c
    9206:	fb00 f303 	mul.w	r3, r0, r3
    920a:	440b      	add	r3, r1
    920c:	3304      	adds	r3, #4
    920e:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    9210:	4a06      	ldr	r2, [pc, #24]	; (922c <Adc_Ip_Init+0x1aa>)
    9212:	9b01      	ldr	r3, [sp, #4]
    9214:	214c      	movs	r1, #76	; 0x4c
    9216:	fb01 f303 	mul.w	r3, r1, r3
    921a:	4413      	add	r3, r2
    921c:	2201      	movs	r2, #1
    921e:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    9220:	bf00      	nop
    9222:	b007      	add	sp, #28
    9224:	f85d fb04 	ldr.w	pc, [sp], #4
    9228:	00011bdc 	.word	0x00011bdc
    922c:	1fff8d44 	.word	0x1fff8d44

00009230 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    9230:	b500      	push	{lr}
    9232:	b0c3      	sub	sp, #268	; 0x10c
    9234:	ab42      	add	r3, sp, #264	; 0x108
    9236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    923a:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    923c:	2300      	movs	r3, #0
    923e:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    9240:	2303      	movs	r3, #3
    9242:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    9244:	2300      	movs	r3, #0
    9246:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    9248:	230c      	movs	r3, #12
    924a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    924e:	2300      	movs	r3, #0
    9250:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    9254:	2300      	movs	r3, #0
    9256:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    9258:	2300      	movs	r3, #0
    925a:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    925c:	2300      	movs	r3, #0
    925e:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    9260:	2300      	movs	r3, #0
    9262:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    9266:	2300      	movs	r3, #0
    9268:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    926a:	2300      	movs	r3, #0
    926c:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    9270:	2300      	movs	r3, #0
    9272:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    9276:	2300      	movs	r3, #0
    9278:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    927c:	2300      	movs	r3, #0
    927e:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    9282:	2300      	movs	r3, #0
    9284:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    9288:	2300      	movs	r3, #0
    928a:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    928e:	2304      	movs	r3, #4
    9290:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    9294:	2300      	movs	r3, #0
    9296:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    929a:	2310      	movs	r3, #16
    929c:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    92a0:	2300      	movs	r3, #0
    92a2:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    92a6:	e02b      	b.n	9300 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    92a8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    92ac:	ab42      	add	r3, sp, #264	; 0x108
    92ae:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    92b2:	4613      	mov	r3, r2
    92b4:	005b      	lsls	r3, r3, #1
    92b6:	4413      	add	r3, r2
    92b8:	009b      	lsls	r3, r3, #2
    92ba:	440b      	add	r3, r1
    92bc:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    92c0:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    92c2:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    92c6:	ab42      	add	r3, sp, #264	; 0x108
    92c8:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    92cc:	4613      	mov	r3, r2
    92ce:	005b      	lsls	r3, r3, #1
    92d0:	4413      	add	r3, r2
    92d2:	009b      	lsls	r3, r3, #2
    92d4:	440b      	add	r3, r1
    92d6:	3304      	adds	r3, #4
    92d8:	221f      	movs	r2, #31
    92da:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    92dc:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    92e0:	ab42      	add	r3, sp, #264	; 0x108
    92e2:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    92e6:	4613      	mov	r3, r2
    92e8:	005b      	lsls	r3, r3, #1
    92ea:	4413      	add	r3, r2
    92ec:	009b      	lsls	r3, r3, #2
    92ee:	440b      	add	r3, r1
    92f0:	3308      	adds	r3, #8
    92f2:	2200      	movs	r2, #0
    92f4:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    92f6:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    92fa:	3301      	adds	r3, #1
    92fc:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    9300:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    9304:	2b0f      	cmp	r3, #15
    9306:	d9cf      	bls.n	92a8 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    9308:	ab02      	add	r3, sp, #8
    930a:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    930c:	2300      	movs	r3, #0
    930e:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    9310:	aa32      	add	r2, sp, #200	; 0xc8
    9312:	ab42      	add	r3, sp, #264	; 0x108
    9314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    9318:	4611      	mov	r1, r2
    931a:	6818      	ldr	r0, [r3, #0]
    931c:	f7ff feb1 	bl	9082 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    9320:	4a07      	ldr	r2, [pc, #28]	; (9340 <Adc_Ip_DeInit+0x110>)
    9322:	ab42      	add	r3, sp, #264	; 0x108
    9324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    9328:	681b      	ldr	r3, [r3, #0]
    932a:	214c      	movs	r1, #76	; 0x4c
    932c:	fb01 f303 	mul.w	r3, r1, r3
    9330:	4413      	add	r3, r2
    9332:	2200      	movs	r2, #0
    9334:	701a      	strb	r2, [r3, #0]
}
    9336:	bf00      	nop
    9338:	b043      	add	sp, #268	; 0x10c
    933a:	f85d fb04 	ldr.w	pc, [sp], #4
    933e:	bf00      	nop
    9340:	1fff8d44 	.word	0x1fff8d44

00009344 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    9344:	b500      	push	{lr}
    9346:	b087      	sub	sp, #28
    9348:	9003      	str	r0, [sp, #12]
    934a:	460b      	mov	r3, r1
    934c:	9201      	str	r2, [sp, #4]
    934e:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9352:	4a0a      	ldr	r2, [pc, #40]	; (937c <Adc_Ip_SetAveraging+0x38>)
    9354:	9b03      	ldr	r3, [sp, #12]
    9356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    935a:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    935c:	f003 fd48 	bl	cdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    9360:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9364:	9a01      	ldr	r2, [sp, #4]
    9366:	4619      	mov	r1, r3
    9368:	9805      	ldr	r0, [sp, #20]
    936a:	f7ff fd73 	bl	8e54 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    936e:	f003 fd6b 	bl	ce48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    9372:	bf00      	nop
    9374:	b007      	add	sp, #28
    9376:	f85d fb04 	ldr.w	pc, [sp], #4
    937a:	bf00      	nop
    937c:	00011bdc 	.word	0x00011bdc

00009380 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    9380:	b500      	push	{lr}
    9382:	b085      	sub	sp, #20
    9384:	9001      	str	r0, [sp, #4]
    9386:	460b      	mov	r3, r1
    9388:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    938c:	4a09      	ldr	r2, [pc, #36]	; (93b4 <Adc_Ip_SetSampleTime+0x34>)
    938e:	9b01      	ldr	r3, [sp, #4]
    9390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9394:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    9396:	f003 f9a5 	bl	c6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    939a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    939e:	4619      	mov	r1, r3
    93a0:	9803      	ldr	r0, [sp, #12]
    93a2:	f7ff fd36 	bl	8e12 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    93a6:	f003 f9c9 	bl	c73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    93aa:	bf00      	nop
    93ac:	b005      	add	sp, #20
    93ae:	f85d fb04 	ldr.w	pc, [sp], #4
    93b2:	bf00      	nop
    93b4:	00011bdc 	.word	0x00011bdc

000093b8 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    93b8:	b500      	push	{lr}
    93ba:	b085      	sub	sp, #20
    93bc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    93be:	4a0a      	ldr	r2, [pc, #40]	; (93e8 <Adc_Ip_EnableDma+0x30>)
    93c0:	9b01      	ldr	r3, [sp, #4]
    93c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93c6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    93c8:	f003 fcc0 	bl	cd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    93cc:	9b03      	ldr	r3, [sp, #12]
    93ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    93d2:	f043 0204 	orr.w	r2, r3, #4
    93d6:	9b03      	ldr	r3, [sp, #12]
    93d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    93dc:	f003 fce2 	bl	cda4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    93e0:	bf00      	nop
    93e2:	b005      	add	sp, #20
    93e4:	f85d fb04 	ldr.w	pc, [sp], #4
    93e8:	00011bdc 	.word	0x00011bdc

000093ec <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    93ec:	b500      	push	{lr}
    93ee:	b085      	sub	sp, #20
    93f0:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    93f2:	4a0a      	ldr	r2, [pc, #40]	; (941c <Adc_Ip_DisableDma+0x30>)
    93f4:	9b01      	ldr	r3, [sp, #4]
    93f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93fa:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    93fc:	f003 fb5e 	bl	cabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    9400:	9b03      	ldr	r3, [sp, #12]
    9402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9406:	f023 0204 	bic.w	r2, r3, #4
    940a:	9b03      	ldr	r3, [sp, #12]
    940c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    9410:	f003 fb80 	bl	cb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    9414:	bf00      	nop
    9416:	b005      	add	sp, #20
    9418:	f85d fb04 	ldr.w	pc, [sp], #4
    941c:	00011bdc 	.word	0x00011bdc

00009420 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    9420:	b500      	push	{lr}
    9422:	b085      	sub	sp, #20
    9424:	9001      	str	r0, [sp, #4]
    9426:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9428:	4a08      	ldr	r2, [pc, #32]	; (944c <Adc_Ip_SetTriggerMode+0x2c>)
    942a:	9b01      	ldr	r3, [sp, #4]
    942c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9430:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    9432:	f003 fb95 	bl	cb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    9436:	9900      	ldr	r1, [sp, #0]
    9438:	9803      	ldr	r0, [sp, #12]
    943a:	f7ff fd4e 	bl	8eda <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    943e:	f003 fbbb 	bl	cbb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    9442:	bf00      	nop
    9444:	b005      	add	sp, #20
    9446:	f85d fb04 	ldr.w	pc, [sp], #4
    944a:	bf00      	nop
    944c:	00011bdc 	.word	0x00011bdc

00009450 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    9450:	b500      	push	{lr}
    9452:	b085      	sub	sp, #20
    9454:	9001      	str	r0, [sp, #4]
    9456:	460b      	mov	r3, r1
    9458:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    945c:	4a11      	ldr	r2, [pc, #68]	; (94a4 <Adc_Ip_SetContinuousMode+0x54>)
    945e:	9b01      	ldr	r3, [sp, #4]
    9460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9464:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    9466:	f003 fdb9 	bl	cfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    946a:	9b03      	ldr	r3, [sp, #12]
    946c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9470:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    9472:	9b02      	ldr	r3, [sp, #8]
    9474:	f023 0308 	bic.w	r3, r3, #8
    9478:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    947a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    947e:	2b00      	cmp	r3, #0
    9480:	d001      	beq.n	9486 <Adc_Ip_SetContinuousMode+0x36>
    9482:	2308      	movs	r3, #8
    9484:	e000      	b.n	9488 <Adc_Ip_SetContinuousMode+0x38>
    9486:	2300      	movs	r3, #0
    9488:	9a02      	ldr	r2, [sp, #8]
    948a:	4313      	orrs	r3, r2
    948c:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    948e:	9b03      	ldr	r3, [sp, #12]
    9490:	9a02      	ldr	r2, [sp, #8]
    9492:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    9496:	f003 fdcd 	bl	d034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    949a:	bf00      	nop
    949c:	b005      	add	sp, #20
    949e:	f85d fb04 	ldr.w	pc, [sp], #4
    94a2:	bf00      	nop
    94a4:	00011bdc 	.word	0x00011bdc

000094a8 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    94a8:	b500      	push	{lr}
    94aa:	b085      	sub	sp, #20
    94ac:	9001      	str	r0, [sp, #4]
    94ae:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    94b0:	4a0e      	ldr	r2, [pc, #56]	; (94ec <Adc_Ip_SetResolution+0x44>)
    94b2:	9b01      	ldr	r3, [sp, #4]
    94b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94b8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    94ba:	f002 fddf 	bl	c07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    94be:	9b03      	ldr	r3, [sp, #12]
    94c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    94c2:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    94c4:	9b02      	ldr	r3, [sp, #8]
    94c6:	f023 030c 	bic.w	r3, r3, #12
    94ca:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    94cc:	9b00      	ldr	r3, [sp, #0]
    94ce:	009b      	lsls	r3, r3, #2
    94d0:	f003 030c 	and.w	r3, r3, #12
    94d4:	9a02      	ldr	r2, [sp, #8]
    94d6:	4313      	orrs	r3, r2
    94d8:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    94da:	9b03      	ldr	r3, [sp, #12]
    94dc:	9a02      	ldr	r2, [sp, #8]
    94de:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    94e0:	f002 fdf8 	bl	c0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    94e4:	bf00      	nop
    94e6:	b005      	add	sp, #20
    94e8:	f85d fb04 	ldr.w	pc, [sp], #4
    94ec:	00011bdc 	.word	0x00011bdc

000094f0 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    94f0:	b500      	push	{lr}
    94f2:	b085      	sub	sp, #20
    94f4:	9001      	str	r0, [sp, #4]
    94f6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    94f8:	4a15      	ldr	r2, [pc, #84]	; (9550 <Adc_Ip_SetClockMode+0x60>)
    94fa:	9b01      	ldr	r3, [sp, #4]
    94fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9500:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    9502:	f002 ff55 	bl	c3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    9506:	9b00      	ldr	r3, [sp, #0]
    9508:	6819      	ldr	r1, [r3, #0]
    950a:	9b00      	ldr	r3, [sp, #0]
    950c:	685b      	ldr	r3, [r3, #4]
    950e:	461a      	mov	r2, r3
    9510:	9803      	ldr	r0, [sp, #12]
    9512:	f7ff fc23 	bl	8d5c <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    9516:	f002 ff77 	bl	c408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    951a:	f003 f83f 	bl	c59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    951e:	9b00      	ldr	r3, [sp, #0]
    9520:	7a1b      	ldrb	r3, [r3, #8]
    9522:	4619      	mov	r1, r3
    9524:	9803      	ldr	r0, [sp, #12]
    9526:	f7ff fc74 	bl	8e12 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    952a:	f003 f863 	bl	c5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    952e:	f003 fcb1 	bl	ce94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    9532:	9b00      	ldr	r3, [sp, #0]
    9534:	7a59      	ldrb	r1, [r3, #9]
    9536:	9b00      	ldr	r3, [sp, #0]
    9538:	68db      	ldr	r3, [r3, #12]
    953a:	461a      	mov	r2, r3
    953c:	9803      	ldr	r0, [sp, #12]
    953e:	f7ff fc89 	bl	8e54 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    9542:	f003 fcd3 	bl	ceec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    9546:	bf00      	nop
    9548:	b005      	add	sp, #20
    954a:	f85d fb04 	ldr.w	pc, [sp], #4
    954e:	bf00      	nop
    9550:	00011bdc 	.word	0x00011bdc

00009554 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    9554:	b510      	push	{r4, lr}
    9556:	b084      	sub	sp, #16
    9558:	9001      	str	r0, [sp, #4]
    955a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    955c:	4a13      	ldr	r2, [pc, #76]	; (95ac <Adc_Ip_ConfigChannel+0x58>)
    955e:	9b01      	ldr	r3, [sp, #4]
    9560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9564:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    9566:	9b00      	ldr	r3, [sp, #0]
    9568:	685b      	ldr	r3, [r3, #4]
    956a:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    956c:	f003 fa54 	bl	ca18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    9570:	9b00      	ldr	r3, [sp, #0]
    9572:	7819      	ldrb	r1, [r3, #0]
    9574:	9b00      	ldr	r3, [sp, #0]
    9576:	7a1b      	ldrb	r3, [r3, #8]
    9578:	9a02      	ldr	r2, [sp, #8]
    957a:	9803      	ldr	r0, [sp, #12]
    957c:	f7ff fcd5 	bl	8f2a <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    9580:	f003 fa76 	bl	ca70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    9584:	9b00      	ldr	r3, [sp, #0]
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	461c      	mov	r4, r3
    958a:	9b00      	ldr	r3, [sp, #0]
    958c:	6859      	ldr	r1, [r3, #4]
    958e:	4808      	ldr	r0, [pc, #32]	; (95b0 <Adc_Ip_ConfigChannel+0x5c>)
    9590:	9a01      	ldr	r2, [sp, #4]
    9592:	4613      	mov	r3, r2
    9594:	00db      	lsls	r3, r3, #3
    9596:	4413      	add	r3, r2
    9598:	005b      	lsls	r3, r3, #1
    959a:	4413      	add	r3, r2
    959c:	4423      	add	r3, r4
    959e:	3302      	adds	r3, #2
    95a0:	009b      	lsls	r3, r3, #2
    95a2:	4403      	add	r3, r0
    95a4:	6059      	str	r1, [r3, #4]
}
    95a6:	bf00      	nop
    95a8:	b004      	add	sp, #16
    95aa:	bd10      	pop	{r4, pc}
    95ac:	00011bdc 	.word	0x00011bdc
    95b0:	1fff8d44 	.word	0x1fff8d44

000095b4 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    95b4:	b500      	push	{lr}
    95b6:	b089      	sub	sp, #36	; 0x24
    95b8:	9001      	str	r0, [sp, #4]
    95ba:	460b      	mov	r3, r1
    95bc:	f88d 3003 	strb.w	r3, [sp, #3]
    95c0:	4613      	mov	r3, r2
    95c2:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    95c6:	4a24      	ldr	r2, [pc, #144]	; (9658 <Adc_Ip_SetDisabledChannel+0xa4>)
    95c8:	9b01      	ldr	r3, [sp, #4]
    95ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ce:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    95d0:	2300      	movs	r3, #0
    95d2:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    95d4:	2100      	movs	r1, #0
    95d6:	4821      	ldr	r0, [pc, #132]	; (965c <Adc_Ip_SetDisabledChannel+0xa8>)
    95d8:	f7f9 f954 	bl	2884 <OsIf_MicrosToTicks>
    95dc:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    95de:	2000      	movs	r0, #0
    95e0:	f7f9 f904 	bl	27ec <OsIf_GetCounter>
    95e4:	4603      	mov	r3, r0
    95e6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    95e8:	2300      	movs	r3, #0
    95ea:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    95ec:	f003 f8cc 	bl	c788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    95f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    95f4:	9b05      	ldr	r3, [sp, #20]
    95f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    95fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    95fe:	f043 011f 	orr.w	r1, r3, #31
    9602:	9b05      	ldr	r3, [sp, #20]
    9604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    9608:	f003 f8ea 	bl	c7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    960c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9610:	2b00      	cmp	r3, #0
    9612:	d01c      	beq.n	964e <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    9614:	e008      	b.n	9628 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    9616:	ab03      	add	r3, sp, #12
    9618:	2100      	movs	r1, #0
    961a:	4618      	mov	r0, r3
    961c:	f7f9 f8ff 	bl	281e <OsIf_GetElapsed>
    9620:	4602      	mov	r2, r0
    9622:	9b06      	ldr	r3, [sp, #24]
    9624:	4413      	add	r3, r2
    9626:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    9628:	f89d 2003 	ldrb.w	r2, [sp, #3]
    962c:	9b05      	ldr	r3, [sp, #20]
    962e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9632:	f003 031f 	and.w	r3, r3, #31
    9636:	2b1f      	cmp	r3, #31
    9638:	d003      	beq.n	9642 <Adc_Ip_SetDisabledChannel+0x8e>
    963a:	9a06      	ldr	r2, [sp, #24]
    963c:	9b04      	ldr	r3, [sp, #16]
    963e:	429a      	cmp	r2, r3
    9640:	d3e9      	bcc.n	9616 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    9642:	9a06      	ldr	r2, [sp, #24]
    9644:	9b04      	ldr	r3, [sp, #16]
    9646:	429a      	cmp	r2, r3
    9648:	d301      	bcc.n	964e <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    964a:	2302      	movs	r3, #2
    964c:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    964e:	9b07      	ldr	r3, [sp, #28]
}
    9650:	4618      	mov	r0, r3
    9652:	b009      	add	sp, #36	; 0x24
    9654:	f85d fb04 	ldr.w	pc, [sp], #4
    9658:	00011bdc 	.word	0x00011bdc
    965c:	000186a0 	.word	0x000186a0

00009660 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    9660:	b500      	push	{lr}
    9662:	b087      	sub	sp, #28
    9664:	9003      	str	r0, [sp, #12]
    9666:	9102      	str	r1, [sp, #8]
    9668:	4613      	mov	r3, r2
    966a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    966e:	4a0a      	ldr	r2, [pc, #40]	; (9698 <Adc_Ip_StartConversion+0x38>)
    9670:	9b03      	ldr	r3, [sp, #12]
    9672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9676:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    9678:	f003 f8d8 	bl	c82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    967c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9680:	9a02      	ldr	r2, [sp, #8]
    9682:	2100      	movs	r1, #0
    9684:	9805      	ldr	r0, [sp, #20]
    9686:	f7ff fc50 	bl	8f2a <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    968a:	f003 f8fb 	bl	c884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    968e:	bf00      	nop
    9690:	b007      	add	sp, #28
    9692:	f85d fb04 	ldr.w	pc, [sp], #4
    9696:	bf00      	nop
    9698:	00011bdc 	.word	0x00011bdc

0000969c <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    969c:	b084      	sub	sp, #16
    969e:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    96a0:	4a0b      	ldr	r2, [pc, #44]	; (96d0 <Adc_Ip_GetConvActiveFlag+0x34>)
    96a2:	9b01      	ldr	r3, [sp, #4]
    96a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a8:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    96aa:	9b03      	ldr	r3, [sp, #12]
    96ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    96b0:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    96b2:	9b02      	ldr	r3, [sp, #8]
    96b4:	09db      	lsrs	r3, r3, #7
    96b6:	f003 0301 	and.w	r3, r3, #1
    96ba:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    96bc:	9b02      	ldr	r3, [sp, #8]
    96be:	2b00      	cmp	r3, #0
    96c0:	bf14      	ite	ne
    96c2:	2301      	movne	r3, #1
    96c4:	2300      	moveq	r3, #0
    96c6:	b2db      	uxtb	r3, r3
}
    96c8:	4618      	mov	r0, r3
    96ca:	b004      	add	sp, #16
    96cc:	4770      	bx	lr
    96ce:	bf00      	nop
    96d0:	00011bdc 	.word	0x00011bdc

000096d4 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    96d4:	b500      	push	{lr}
    96d6:	b085      	sub	sp, #20
    96d8:	9001      	str	r0, [sp, #4]
    96da:	460b      	mov	r3, r1
    96dc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    96e0:	4a08      	ldr	r2, [pc, #32]	; (9704 <Adc_Ip_GetChanInterrupt+0x30>)
    96e2:	9b01      	ldr	r3, [sp, #4]
    96e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96f0:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    96f2:	9803      	ldr	r0, [sp, #12]
    96f4:	f7ff fc5e 	bl	8fb4 <Adc_HwAcc_GetAIEN>
    96f8:	4603      	mov	r3, r0
}
    96fa:	4618      	mov	r0, r3
    96fc:	b005      	add	sp, #20
    96fe:	f85d fb04 	ldr.w	pc, [sp], #4
    9702:	bf00      	nop
    9704:	00011bdc 	.word	0x00011bdc

00009708 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    9708:	b500      	push	{lr}
    970a:	b085      	sub	sp, #20
    970c:	9001      	str	r0, [sp, #4]
    970e:	460b      	mov	r3, r1
    9710:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9714:	4a08      	ldr	r2, [pc, #32]	; (9738 <Adc_Ip_GetConvCompleteFlag+0x30>)
    9716:	9b01      	ldr	r3, [sp, #4]
    9718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    971c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9724:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    9726:	9803      	ldr	r0, [sp, #12]
    9728:	f7ff fc52 	bl	8fd0 <Adc_HwAcc_GetCOCO>
    972c:	4603      	mov	r3, r0
}
    972e:	4618      	mov	r0, r3
    9730:	b005      	add	sp, #20
    9732:	f85d fb04 	ldr.w	pc, [sp], #4
    9736:	bf00      	nop
    9738:	00011bdc 	.word	0x00011bdc

0000973c <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    973c:	b500      	push	{lr}
    973e:	b085      	sub	sp, #20
    9740:	9001      	str	r0, [sp, #4]
    9742:	460b      	mov	r3, r1
    9744:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9748:	4a07      	ldr	r2, [pc, #28]	; (9768 <Adc_Ip_GetConvData+0x2c>)
    974a:	9b01      	ldr	r3, [sp, #4]
    974c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9750:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    9752:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9756:	4619      	mov	r1, r3
    9758:	9803      	ldr	r0, [sp, #12]
    975a:	f7ff fc47 	bl	8fec <Adc_HwAcc_GetData>
    975e:	4603      	mov	r3, r0
}
    9760:	4618      	mov	r0, r3
    9762:	b005      	add	sp, #20
    9764:	f85d fb04 	ldr.w	pc, [sp], #4
    9768:	00011bdc 	.word	0x00011bdc

0000976c <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    976c:	b500      	push	{lr}
    976e:	b093      	sub	sp, #76	; 0x4c
    9770:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9772:	4a59      	ldr	r2, [pc, #356]	; (98d8 <Adc_Ip_DoCalibration+0x16c>)
    9774:	9b01      	ldr	r3, [sp, #4]
    9776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    977a:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    977c:	2300      	movs	r3, #0
    977e:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    9780:	2100      	movs	r1, #0
    9782:	4856      	ldr	r0, [pc, #344]	; (98dc <Adc_Ip_DoCalibration+0x170>)
    9784:	f7f9 f87e 	bl	2884 <OsIf_MicrosToTicks>
    9788:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    978a:	2000      	movs	r0, #0
    978c:	f7f9 f82e 	bl	27ec <OsIf_GetCounter>
    9790:	4603      	mov	r3, r0
    9792:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    9794:	2300      	movs	r3, #0
    9796:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    9798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    979a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    979e:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    97a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    97a2:	089b      	lsrs	r3, r3, #2
    97a4:	f003 0301 	and.w	r3, r3, #1
    97a8:	2b00      	cmp	r3, #0
    97aa:	bf14      	ite	ne
    97ac:	2301      	movne	r3, #1
    97ae:	2300      	moveq	r3, #0
    97b0:	b2db      	uxtb	r3, r3
    97b2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    97b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    97b8:	f7ff fb71 	bl	8e9e <Adc_HwAcc_GetAverageSelect>
    97bc:	4603      	mov	r3, r0
    97be:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    97c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    97c4:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    97c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    97c8:	b2db      	uxtb	r3, r3
    97ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    97ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    97d4:	4618      	mov	r0, r3
    97d6:	f7ff fb99 	bl	8f0c <Adc_HwAcc_GetTriggerMode>
    97da:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    97dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    97e0:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    97e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    97e4:	f7ff fad8 	bl	8d98 <Adc_HwAcc_GetClockDivide>
    97e8:	4603      	mov	r3, r0
    97ea:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    97ec:	980d      	ldr	r0, [sp, #52]	; 0x34
    97ee:	f7ff faf2 	bl	8dd6 <Adc_HwAcc_GetInputClock>
    97f2:	4603      	mov	r3, r0
    97f4:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    97f6:	2301      	movs	r3, #1
    97f8:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    97fc:	2303      	movs	r3, #3
    97fe:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    9800:	230c      	movs	r3, #12
    9802:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    9806:	4a36      	ldr	r2, [pc, #216]	; (98e0 <Adc_Ip_DoCalibration+0x174>)
    9808:	9b01      	ldr	r3, [sp, #4]
    980a:	214c      	movs	r1, #76	; 0x4c
    980c:	fb01 f303 	mul.w	r3, r1, r3
    9810:	4413      	add	r3, r2
    9812:	3304      	adds	r3, #4
    9814:	681b      	ldr	r3, [r3, #0]
    9816:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    9818:	9b08      	ldr	r3, [sp, #32]
    981a:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    981c:	ab03      	add	r3, sp, #12
    981e:	2200      	movs	r2, #0
    9820:	4619      	mov	r1, r3
    9822:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9824:	f7ff fbfa 	bl	901c <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    9828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    982a:	2200      	movs	r2, #0
    982c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    9830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9832:	2200      	movs	r2, #0
    9834:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    9838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    983a:	2200      	movs	r2, #0
    983c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    9840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9842:	2200      	movs	r2, #0
    9844:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    9848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    984a:	2200      	movs	r2, #0
    984c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    9850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9852:	2200      	movs	r2, #0
    9854:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    9858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    985a:	2200      	movs	r2, #0
    985c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    9860:	f003 fb6a 	bl	cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    9864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    986a:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    986c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    986e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9872:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    9874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    987a:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    987c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    987e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9880:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    9884:	f003 fb84 	bl	cf90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9888:	e008      	b.n	989c <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    988a:	ab0b      	add	r3, sp, #44	; 0x2c
    988c:	2100      	movs	r1, #0
    988e:	4618      	mov	r0, r3
    9890:	f7f8 ffc5 	bl	281e <OsIf_GetElapsed>
    9894:	4602      	mov	r2, r0
    9896:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9898:	4413      	add	r3, r2
    989a:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    989c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    989e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    98a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    98a6:	2b00      	cmp	r3, #0
    98a8:	d003      	beq.n	98b2 <Adc_Ip_DoCalibration+0x146>
    98aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    98ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    98ae:	429a      	cmp	r2, r3
    98b0:	d3eb      	bcc.n	988a <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    98b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    98b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    98b6:	429a      	cmp	r2, r3
    98b8:	d301      	bcc.n	98be <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    98ba:	2302      	movs	r3, #2
    98bc:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    98be:	ab07      	add	r3, sp, #28
    98c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    98c2:	4619      	mov	r1, r3
    98c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    98c6:	f7ff fba9 	bl	901c <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    98ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    98cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    98ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    98d0:	4618      	mov	r0, r3
    98d2:	b013      	add	sp, #76	; 0x4c
    98d4:	f85d fb04 	ldr.w	pc, [sp], #4
    98d8:	00011bdc 	.word	0x00011bdc
    98dc:	000186a0 	.word	0x000186a0
    98e0:	1fff8d44 	.word	0x1fff8d44

000098e4 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    98e4:	b500      	push	{lr}
    98e6:	b089      	sub	sp, #36	; 0x24
    98e8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    98ea:	4a1e      	ldr	r2, [pc, #120]	; (9964 <Adc_Ip_ClearLatchedTriggers+0x80>)
    98ec:	9b01      	ldr	r3, [sp, #4]
    98ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98f2:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    98f4:	2300      	movs	r3, #0
    98f6:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    98f8:	2100      	movs	r1, #0
    98fa:	481b      	ldr	r0, [pc, #108]	; (9968 <Adc_Ip_ClearLatchedTriggers+0x84>)
    98fc:	f7f8 ffc2 	bl	2884 <OsIf_MicrosToTicks>
    9900:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    9902:	2000      	movs	r0, #0
    9904:	f7f8 ff72 	bl	27ec <OsIf_GetCounter>
    9908:	4603      	mov	r3, r0
    990a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    990c:	2300      	movs	r3, #0
    990e:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    9910:	f002 fda0 	bl	c454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    9914:	9b05      	ldr	r3, [sp, #20]
    9916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    991c:	9b05      	ldr	r3, [sp, #20]
    991e:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    9920:	f002 fdc4 	bl	c4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9924:	e008      	b.n	9938 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    9926:	ab03      	add	r3, sp, #12
    9928:	2100      	movs	r1, #0
    992a:	4618      	mov	r0, r3
    992c:	f7f8 ff77 	bl	281e <OsIf_GetElapsed>
    9930:	4602      	mov	r2, r0
    9932:	9b06      	ldr	r3, [sp, #24]
    9934:	4413      	add	r3, r2
    9936:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9938:	9b05      	ldr	r3, [sp, #20]
    993a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    993e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    9942:	2b00      	cmp	r3, #0
    9944:	d003      	beq.n	994e <Adc_Ip_ClearLatchedTriggers+0x6a>
    9946:	9a06      	ldr	r2, [sp, #24]
    9948:	9b04      	ldr	r3, [sp, #16]
    994a:	429a      	cmp	r2, r3
    994c:	d3eb      	bcc.n	9926 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    994e:	9a06      	ldr	r2, [sp, #24]
    9950:	9b04      	ldr	r3, [sp, #16]
    9952:	429a      	cmp	r2, r3
    9954:	d301      	bcc.n	995a <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    9956:	2302      	movs	r3, #2
    9958:	9307      	str	r3, [sp, #28]
    }

    return Status;
    995a:	9b07      	ldr	r3, [sp, #28]
}
    995c:	4618      	mov	r0, r3
    995e:	b009      	add	sp, #36	; 0x24
    9960:	f85d fb04 	ldr.w	pc, [sp], #4
    9964:	00011bdc 	.word	0x00011bdc
    9968:	000186a0 	.word	0x000186a0

0000996c <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    996c:	b500      	push	{lr}
    996e:	b085      	sub	sp, #20
    9970:	9001      	str	r0, [sp, #4]
    9972:	460b      	mov	r3, r1
    9974:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9978:	4a0c      	ldr	r2, [pc, #48]	; (99ac <Adc_Ip_EnableChannelNotification+0x40>)
    997a:	9b01      	ldr	r3, [sp, #4]
    997c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9980:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    9982:	f002 ffa5 	bl	c8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    9986:	f89d 2003 	ldrb.w	r2, [sp, #3]
    998a:	9b03      	ldr	r3, [sp, #12]
    998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9990:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9994:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    9998:	9b03      	ldr	r3, [sp, #12]
    999a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    999e:	f002 ffc3 	bl	c928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    99a2:	bf00      	nop
    99a4:	b005      	add	sp, #20
    99a6:	f85d fb04 	ldr.w	pc, [sp], #4
    99aa:	bf00      	nop
    99ac:	00011bdc 	.word	0x00011bdc

000099b0 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    99b0:	b500      	push	{lr}
    99b2:	b085      	sub	sp, #20
    99b4:	9001      	str	r0, [sp, #4]
    99b6:	460b      	mov	r3, r1
    99b8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    99bc:	4a0c      	ldr	r2, [pc, #48]	; (99f0 <Adc_Ip_DisableChannelNotification+0x40>)
    99be:	9b01      	ldr	r3, [sp, #4]
    99c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99c4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    99c6:	f002 ffd5 	bl	c974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    99ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    99ce:	9b03      	ldr	r3, [sp, #12]
    99d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    99d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    99d8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    99dc:	9b03      	ldr	r3, [sp, #12]
    99de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    99e2:	f002 fff3 	bl	c9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    99e6:	bf00      	nop
    99e8:	b005      	add	sp, #20
    99ea:	f85d fb04 	ldr.w	pc, [sp], #4
    99ee:	bf00      	nop
    99f0:	00011bdc 	.word	0x00011bdc

000099f4 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    99f4:	b500      	push	{lr}
    99f6:	b085      	sub	sp, #20
    99f8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    99fa:	4a0a      	ldr	r2, [pc, #40]	; (9a24 <Adc_Ip_ClearTrigErrReg+0x30>)
    99fc:	9b01      	ldr	r3, [sp, #4]
    99fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a02:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    9a04:	f003 f950 	bl	cca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    9a08:	9b03      	ldr	r3, [sp, #12]
    9a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9a0e:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    9a12:	9b03      	ldr	r3, [sp, #12]
    9a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    9a18:	f003 f972 	bl	cd00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    9a1c:	bf00      	nop
    9a1e:	b005      	add	sp, #20
    9a20:	f85d fb04 	ldr.w	pc, [sp], #4
    9a24:	00011bdc 	.word	0x00011bdc

00009a28 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    9a28:	b084      	sub	sp, #16
    9a2a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9a2c:	4a06      	ldr	r2, [pc, #24]	; (9a48 <Adc_Ip_GetTrigErrReg+0x20>)
    9a2e:	9b01      	ldr	r3, [sp, #4]
    9a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a34:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    9a36:	9b03      	ldr	r3, [sp, #12]
    9a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9a3c:	0e1b      	lsrs	r3, r3, #24
    9a3e:	f003 030f 	and.w	r3, r3, #15
}
    9a42:	4618      	mov	r0, r3
    9a44:	b004      	add	sp, #16
    9a46:	4770      	bx	lr
    9a48:	00011bdc 	.word	0x00011bdc

00009a4c <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    9a4c:	b082      	sub	sp, #8
    9a4e:	9001      	str	r0, [sp, #4]
    9a50:	460b      	mov	r3, r1
    9a52:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    9a56:	4a06      	ldr	r2, [pc, #24]	; (9a70 <Adc_Ip_GetDataAddress+0x24>)
    9a58:	9b01      	ldr	r3, [sp, #4]
    9a5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9a5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9a62:	3312      	adds	r3, #18
    9a64:	009b      	lsls	r3, r3, #2
    9a66:	4413      	add	r3, r2
}
    9a68:	4618      	mov	r0, r3
    9a6a:	b002      	add	sp, #8
    9a6c:	4770      	bx	lr
    9a6e:	bf00      	nop
    9a70:	00011bdc 	.word	0x00011bdc

00009a74 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    9a74:	b088      	sub	sp, #32
    9a76:	9003      	str	r0, [sp, #12]
    9a78:	9102      	str	r1, [sp, #8]
    9a7a:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9a7c:	4a25      	ldr	r2, [pc, #148]	; (9b14 <Adc_Ip_GetChanData+0xa0>)
    9a7e:	9b03      	ldr	r3, [sp, #12]
    9a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a84:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9a86:	2300      	movs	r3, #0
    9a88:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    9a8a:	2300      	movs	r3, #0
    9a8c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    9a90:	2300      	movs	r3, #0
    9a92:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9a96:	2300      	movs	r3, #0
    9a98:	f88d 3019 	strb.w	r3, [sp, #25]
    9a9c:	e019      	b.n	9ad2 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    9a9e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    9aa2:	481d      	ldr	r0, [pc, #116]	; (9b18 <Adc_Ip_GetChanData+0xa4>)
    9aa4:	9a03      	ldr	r2, [sp, #12]
    9aa6:	4613      	mov	r3, r2
    9aa8:	00db      	lsls	r3, r3, #3
    9aaa:	4413      	add	r3, r2
    9aac:	005b      	lsls	r3, r3, #1
    9aae:	4413      	add	r3, r2
    9ab0:	440b      	add	r3, r1
    9ab2:	3302      	adds	r3, #2
    9ab4:	009b      	lsls	r3, r3, #2
    9ab6:	4403      	add	r3, r0
    9ab8:	685b      	ldr	r3, [r3, #4]
    9aba:	9a02      	ldr	r2, [sp, #8]
    9abc:	429a      	cmp	r2, r3
    9abe:	d103      	bne.n	9ac8 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    9ac0:	2301      	movs	r3, #1
    9ac2:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    9ac6:	e008      	b.n	9ada <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9ac8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9acc:	3301      	adds	r3, #1
    9ace:	f88d 3019 	strb.w	r3, [sp, #25]
    9ad2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9ad6:	2b0f      	cmp	r3, #15
    9ad8:	d9e1      	bls.n	9a9e <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    9ada:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d00e      	beq.n	9b00 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    9ae2:	f89d 2019 	ldrb.w	r2, [sp, #25]
    9ae6:	9b05      	ldr	r3, [sp, #20]
    9ae8:	3212      	adds	r2, #18
    9aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9aee:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    9af2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9afa:	f8ad 301a 	strh.w	r3, [sp, #26]
    9afe:	e001      	b.n	9b04 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    9b00:	2301      	movs	r3, #1
    9b02:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    9b04:	9b01      	ldr	r3, [sp, #4]
    9b06:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9b0a:	801a      	strh	r2, [r3, #0]

    return Status;
    9b0c:	9b07      	ldr	r3, [sp, #28]
}
    9b0e:	4618      	mov	r0, r3
    9b10:	b008      	add	sp, #32
    9b12:	4770      	bx	lr
    9b14:	00011bdc 	.word	0x00011bdc
    9b18:	1fff8d44 	.word	0x1fff8d44

00009b1c <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    9b1c:	b500      	push	{lr}
    9b1e:	b085      	sub	sp, #20
    9b20:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    9b22:	2300      	movs	r3, #0
    9b24:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    9b28:	2300      	movs	r3, #0
    9b2a:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    9b2e:	4a32      	ldr	r2, [pc, #200]	; (9bf8 <Adc_Ip_IRQHandler+0xdc>)
    9b30:	9b01      	ldr	r3, [sp, #4]
    9b32:	214c      	movs	r1, #76	; 0x4c
    9b34:	fb01 f303 	mul.w	r3, r1, r3
    9b38:	4413      	add	r3, r2
    9b3a:	781b      	ldrb	r3, [r3, #0]
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	d040      	beq.n	9bc2 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    9b40:	4a2d      	ldr	r2, [pc, #180]	; (9bf8 <Adc_Ip_IRQHandler+0xdc>)
    9b42:	9b01      	ldr	r3, [sp, #4]
    9b44:	214c      	movs	r1, #76	; 0x4c
    9b46:	fb01 f303 	mul.w	r3, r1, r3
    9b4a:	4413      	add	r3, r2
    9b4c:	3308      	adds	r3, #8
    9b4e:	681b      	ldr	r3, [r3, #0]
    9b50:	2b00      	cmp	r3, #0
    9b52:	d04d      	beq.n	9bf0 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b54:	2300      	movs	r3, #0
    9b56:	f88d 300f 	strb.w	r3, [sp, #15]
    9b5a:	e02d      	b.n	9bb8 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9b5c:	4a27      	ldr	r2, [pc, #156]	; (9bfc <Adc_Ip_IRQHandler+0xe0>)
    9b5e:	9b01      	ldr	r3, [sp, #4]
    9b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9b6c:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    9b6e:	9802      	ldr	r0, [sp, #8]
    9b70:	f7ff fa20 	bl	8fb4 <Adc_HwAcc_GetAIEN>
    9b74:	4603      	mov	r3, r0
    9b76:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    9b7a:	9802      	ldr	r0, [sp, #8]
    9b7c:	f7ff fa28 	bl	8fd0 <Adc_HwAcc_GetCOCO>
    9b80:	4603      	mov	r3, r0
    9b82:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    9b86:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d00f      	beq.n	9bae <Adc_Ip_IRQHandler+0x92>
    9b8e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b92:	2b00      	cmp	r3, #0
    9b94:	d00b      	beq.n	9bae <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    9b96:	4a18      	ldr	r2, [pc, #96]	; (9bf8 <Adc_Ip_IRQHandler+0xdc>)
    9b98:	9b01      	ldr	r3, [sp, #4]
    9b9a:	214c      	movs	r1, #76	; 0x4c
    9b9c:	fb01 f303 	mul.w	r3, r1, r3
    9ba0:	4413      	add	r3, r2
    9ba2:	3308      	adds	r3, #8
    9ba4:	681b      	ldr	r3, [r3, #0]
    9ba6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9baa:	4610      	mov	r0, r2
    9bac:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9bae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bb2:	3301      	adds	r3, #1
    9bb4:	f88d 300f 	strb.w	r3, [sp, #15]
    9bb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bbc:	2b0f      	cmp	r3, #15
    9bbe:	d9cd      	bls.n	9b5c <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    9bc0:	e016      	b.n	9bf0 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9bc2:	2300      	movs	r3, #0
    9bc4:	f88d 300f 	strb.w	r3, [sp, #15]
    9bc8:	e00e      	b.n	9be8 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9bca:	4a0c      	ldr	r2, [pc, #48]	; (9bfc <Adc_Ip_IRQHandler+0xe0>)
    9bcc:	9b01      	ldr	r3, [sp, #4]
    9bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9bd6:	4611      	mov	r1, r2
    9bd8:	4618      	mov	r0, r3
    9bda:	f7ff fa07 	bl	8fec <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9bde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9be2:	3301      	adds	r3, #1
    9be4:	f88d 300f 	strb.w	r3, [sp, #15]
    9be8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bec:	2b0f      	cmp	r3, #15
    9bee:	d9ec      	bls.n	9bca <Adc_Ip_IRQHandler+0xae>
}
    9bf0:	bf00      	nop
    9bf2:	b005      	add	sp, #20
    9bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    9bf8:	1fff8d44 	.word	0x1fff8d44
    9bfc:	00011bdc 	.word	0x00011bdc

00009c00 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    9c00:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    9c02:	2000      	movs	r0, #0
    9c04:	f7ff ff8a 	bl	9b1c <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9c08:	f3bf 8f4f 	dsb	sy
}
    9c0c:	bf00      	nop
    9c0e:	bd08      	pop	{r3, pc}

00009c10 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    9c10:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    9c12:	2001      	movs	r0, #1
    9c14:	f7ff ff82 	bl	9b1c <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9c18:	f3bf 8f4f 	dsb	sy
}
    9c1c:	bf00      	nop
    9c1e:	bd08      	pop	{r3, pc}

00009c20 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    9c20:	b510      	push	{r4, lr}
    9c22:	b084      	sub	sp, #16
    9c24:	4603      	mov	r3, r0
    9c26:	460a      	mov	r2, r1
    9c28:	f88d 3007 	strb.w	r3, [sp, #7]
    9c2c:	4613      	mov	r3, r2
    9c2e:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    9c32:	2300      	movs	r3, #0
    9c34:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    9c38:	2300      	movs	r3, #0
    9c3a:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    9c3e:	f002 f831 	bl	bca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c46:	4a24      	ldr	r2, [pc, #144]	; (9cd8 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c48:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9c4c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    9c50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c54:	2b01      	cmp	r3, #1
    9c56:	d806      	bhi.n	9c66 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    9c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c5c:	4a1e      	ldr	r2, [pc, #120]	; (9cd8 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c5e:	2100      	movs	r1, #0
    9c60:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    9c64:	e032      	b.n	9ccc <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9c66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9c6a:	3301      	adds	r3, #1
    9c6c:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c70:	e01b      	b.n	9caa <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    9c72:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9c76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c7a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9c7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c82:	3a01      	subs	r2, #1
    9c84:	4c14      	ldr	r4, [pc, #80]	; (9cd8 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c86:	0080      	lsls	r0, r0, #2
    9c88:	4403      	add	r3, r0
    9c8a:	005b      	lsls	r3, r3, #1
    9c8c:	4423      	add	r3, r4
    9c8e:	885b      	ldrh	r3, [r3, #2]
    9c90:	b29c      	uxth	r4, r3
    9c92:	4811      	ldr	r0, [pc, #68]	; (9cd8 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c94:	008b      	lsls	r3, r1, #2
    9c96:	4413      	add	r3, r2
    9c98:	005b      	lsls	r3, r3, #1
    9c9a:	4403      	add	r3, r0
    9c9c:	4622      	mov	r2, r4
    9c9e:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9ca0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ca4:	3301      	adds	r3, #1
    9ca6:	f8ad 300e 	strh.w	r3, [sp, #14]
    9caa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9cae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9cb2:	429a      	cmp	r2, r3
    9cb4:	d3dd      	bcc.n	9c72 <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    9cb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cba:	4a07      	ldr	r2, [pc, #28]	; (9cd8 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9cbc:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    9cc0:	b292      	uxth	r2, r2
    9cc2:	3a01      	subs	r2, #1
    9cc4:	b291      	uxth	r1, r2
    9cc6:	4a04      	ldr	r2, [pc, #16]	; (9cd8 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9cc8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    9ccc:	f002 f816 	bl	bcfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    9cd0:	bf00      	nop
    9cd2:	b004      	add	sp, #16
    9cd4:	bd10      	pop	{r4, pc}
    9cd6:	bf00      	nop
    9cd8:	1fff8d34 	.word	0x1fff8d34

00009cdc <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    9cdc:	b500      	push	{lr}
    9cde:	b087      	sub	sp, #28
    9ce0:	9003      	str	r0, [sp, #12]
    9ce2:	9102      	str	r1, [sp, #8]
    9ce4:	9201      	str	r2, [sp, #4]
    9ce6:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9cea:	2300      	movs	r3, #0
    9cec:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9cf0:	9b03      	ldr	r3, [sp, #12]
    9cf2:	789b      	ldrb	r3, [r3, #2]
    9cf4:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9cf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9cfc:	4a29      	ldr	r2, [pc, #164]	; (9da4 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d02:	681a      	ldr	r2, [r3, #0]
    9d04:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9d08:	4413      	add	r3, r2
    9d0a:	7c1b      	ldrb	r3, [r3, #16]
    9d0c:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    9d10:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9d14:	4a23      	ldr	r2, [pc, #140]	; (9da4 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d1a:	681b      	ldr	r3, [r3, #0]
    9d1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    9d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9d24:	695b      	ldr	r3, [r3, #20]
    9d26:	4618      	mov	r0, r3
    9d28:	f000 fbce 	bl	a4c8 <Adc_Ipw_CalculateNumsBitShift>
    9d2c:	4603      	mov	r3, r0
    9d2e:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9d32:	9b03      	ldr	r3, [sp, #12]
    9d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9d38:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9d3c:	2300      	movs	r3, #0
    9d3e:	f88d 3017 	strb.w	r3, [sp, #23]
    9d42:	e022      	b.n	9d8a <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    9d44:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9d48:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9d4c:	4611      	mov	r1, r2
    9d4e:	4618      	mov	r0, r3
    9d50:	f7ff fcf4 	bl	973c <Adc_Ip_GetConvData>
    9d54:	4603      	mov	r3, r0
    9d56:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    9d5a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d5e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d62:	fa02 f303 	lsl.w	r3, r2, r3
    9d66:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    9d6a:	9b01      	ldr	r3, [sp, #4]
    9d6c:	2201      	movs	r2, #1
    9d6e:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    9d70:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d74:	005b      	lsls	r3, r3, #1
    9d76:	9a02      	ldr	r2, [sp, #8]
    9d78:	4413      	add	r3, r2
    9d7a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d7e:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9d80:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d84:	3301      	adds	r3, #1
    9d86:	f88d 3017 	strb.w	r3, [sp, #23]
    9d8a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9d8e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9d92:	429a      	cmp	r2, r3
    9d94:	d3d6      	bcc.n	9d44 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    9d96:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    9d9a:	4618      	mov	r0, r3
    9d9c:	b007      	add	sp, #28
    9d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    9da2:	bf00      	nop
    9da4:	1fff8d08 	.word	0x1fff8d08

00009da8 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    9da8:	b500      	push	{lr}
    9daa:	b087      	sub	sp, #28
    9dac:	9003      	str	r0, [sp, #12]
    9dae:	9102      	str	r1, [sp, #8]
    9db0:	9201      	str	r2, [sp, #4]
    9db2:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    9db6:	2301      	movs	r3, #1
    9db8:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9dbc:	2300      	movs	r3, #0
    9dbe:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9dc2:	9b03      	ldr	r3, [sp, #12]
    9dc4:	789b      	ldrb	r3, [r3, #2]
    9dc6:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9dca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9dce:	4a19      	ldr	r2, [pc, #100]	; (9e34 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    9dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd4:	681a      	ldr	r2, [r3, #0]
    9dd6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9dda:	4413      	add	r3, r2
    9ddc:	7c1b      	ldrb	r3, [r3, #16]
    9dde:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    9de2:	9b03      	ldr	r3, [sp, #12]
    9de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9de8:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9dec:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9df0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9df4:	2100      	movs	r1, #0
    9df6:	4618      	mov	r0, r3
    9df8:	f000 fe2a 	bl	aa50 <Adc_Ipw_CheckValidConversion>
    9dfc:	4603      	mov	r3, r0
    9dfe:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    9e02:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d00a      	beq.n	9e20 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9e0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9e0e:	9a01      	ldr	r2, [sp, #4]
    9e10:	9902      	ldr	r1, [sp, #8]
    9e12:	9803      	ldr	r0, [sp, #12]
    9e14:	f7ff ff62 	bl	9cdc <Adc_Ipw_ReadGroupConvData>
    9e18:	4603      	mov	r3, r0
    9e1a:	f88d 3017 	strb.w	r3, [sp, #23]
    9e1e:	e002      	b.n	9e26 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9e20:	2301      	movs	r3, #1
    9e22:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    9e26:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9e2a:	4618      	mov	r0, r3
    9e2c:	b007      	add	sp, #28
    9e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e32:	bf00      	nop
    9e34:	1fff8d08 	.word	0x1fff8d08

00009e38 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    9e38:	b088      	sub	sp, #32
    9e3a:	4603      	mov	r3, r0
    9e3c:	9100      	str	r1, [sp, #0]
    9e3e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9e42:	4613      	mov	r3, r2
    9e44:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9e48:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e4c:	4a3a      	ldr	r2, [pc, #232]	; (9f38 <Adc_Ipw_WriteDataBuffer+0x100>)
    9e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e52:	68da      	ldr	r2, [r3, #12]
    9e54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9e58:	005b      	lsls	r3, r3, #1
    9e5a:	4413      	add	r3, r2
    9e5c:	881b      	ldrh	r3, [r3, #0]
    9e5e:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9e62:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e66:	4a34      	ldr	r2, [pc, #208]	; (9f38 <Adc_Ipw_WriteDataBuffer+0x100>)
    9e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e6c:	685a      	ldr	r2, [r3, #4]
    9e6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9e72:	2134      	movs	r1, #52	; 0x34
    9e74:	fb01 f303 	mul.w	r3, r1, r3
    9e78:	4413      	add	r3, r2
    9e7a:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9e7c:	9b04      	ldr	r3, [sp, #16]
    9e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e82:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    9e86:	2300      	movs	r3, #0
    9e88:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    9e8a:	2300      	movs	r3, #0
    9e8c:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    9e90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e94:	4929      	ldr	r1, [pc, #164]	; (9f3c <Adc_Ipw_WriteDataBuffer+0x104>)
    9e96:	4613      	mov	r3, r2
    9e98:	009b      	lsls	r3, r3, #2
    9e9a:	4413      	add	r3, r2
    9e9c:	009b      	lsls	r3, r3, #2
    9e9e:	440b      	add	r3, r1
    9ea0:	3308      	adds	r3, #8
    9ea2:	881b      	ldrh	r3, [r3, #0]
    9ea4:	b29b      	uxth	r3, r3
    9ea6:	3b01      	subs	r3, #1
    9ea8:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    9eac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9eb0:	4922      	ldr	r1, [pc, #136]	; (9f3c <Adc_Ipw_WriteDataBuffer+0x104>)
    9eb2:	4613      	mov	r3, r2
    9eb4:	009b      	lsls	r3, r3, #2
    9eb6:	4413      	add	r3, r2
    9eb8:	009b      	lsls	r3, r3, #2
    9eba:	440b      	add	r3, r1
    9ebc:	3308      	adds	r3, #8
    9ebe:	881b      	ldrh	r3, [r3, #0]
    9ec0:	b29b      	uxth	r3, r3
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d104      	bne.n	9ed0 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    9ec6:	9b04      	ldr	r3, [sp, #16]
    9ec8:	8b9b      	ldrh	r3, [r3, #28]
    9eca:	3b01      	subs	r3, #1
    9ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    9ed0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9ed4:	4919      	ldr	r1, [pc, #100]	; (9f3c <Adc_Ipw_WriteDataBuffer+0x104>)
    9ed6:	4613      	mov	r3, r2
    9ed8:	009b      	lsls	r3, r3, #2
    9eda:	4413      	add	r3, r2
    9edc:	009b      	lsls	r3, r3, #2
    9ede:	440b      	add	r3, r1
    9ee0:	330c      	adds	r3, #12
    9ee2:	681a      	ldr	r2, [r3, #0]
    9ee4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9ee8:	005b      	lsls	r3, r3, #1
    9eea:	4413      	add	r3, r2
    9eec:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9eee:	9b04      	ldr	r3, [sp, #16]
    9ef0:	8b9b      	ldrh	r3, [r3, #28]
    9ef2:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    9ef6:	2300      	movs	r3, #0
    9ef8:	f88d 301f 	strb.w	r3, [sp, #31]
    9efc:	e012      	b.n	9f24 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9efe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f02:	005b      	lsls	r3, r3, #1
    9f04:	9a00      	ldr	r2, [sp, #0]
    9f06:	4413      	add	r3, r2
    9f08:	9a06      	ldr	r2, [sp, #24]
    9f0a:	8812      	ldrh	r2, [r2, #0]
    9f0c:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9f0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9f12:	005b      	lsls	r3, r3, #1
    9f14:	9a06      	ldr	r2, [sp, #24]
    9f16:	4413      	add	r3, r2
    9f18:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9f1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f1e:	3301      	adds	r3, #1
    9f20:	f88d 301f 	strb.w	r3, [sp, #31]
    9f24:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f2c:	429a      	cmp	r2, r3
    9f2e:	d3e6      	bcc.n	9efe <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9f30:	bf00      	nop
    9f32:	bf00      	nop
    9f34:	b008      	add	sp, #32
    9f36:	4770      	bx	lr
    9f38:	1fff8d08 	.word	0x1fff8d08
    9f3c:	1fff8d0c 	.word	0x1fff8d0c

00009f40 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    9f40:	b500      	push	{lr}
    9f42:	b089      	sub	sp, #36	; 0x24
    9f44:	9200      	str	r2, [sp, #0]
    9f46:	461a      	mov	r2, r3
    9f48:	4603      	mov	r3, r0
    9f4a:	f88d 3007 	strb.w	r3, [sp, #7]
    9f4e:	460b      	mov	r3, r1
    9f50:	f8ad 3004 	strh.w	r3, [sp, #4]
    9f54:	4613      	mov	r3, r2
    9f56:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    9f5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f5e:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9f62:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f66:	f003 0307 	and.w	r3, r3, #7
    9f6a:	b2db      	uxtb	r3, r3
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	d006      	beq.n	9f7e <Adc_Ipw_ConfigurePdbChannels+0x3e>
    9f70:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f74:	08db      	lsrs	r3, r3, #3
    9f76:	b2db      	uxtb	r3, r3
    9f78:	3301      	adds	r3, #1
    9f7a:	b2db      	uxtb	r3, r3
    9f7c:	e003      	b.n	9f86 <Adc_Ipw_ConfigurePdbChannels+0x46>
    9f7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f82:	08db      	lsrs	r3, r3, #3
    9f84:	b2db      	uxtb	r3, r3
    9f86:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    9f8a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f8e:	4987      	ldr	r1, [pc, #540]	; (a1ac <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    9f90:	4613      	mov	r3, r2
    9f92:	009b      	lsls	r3, r3, #2
    9f94:	4413      	add	r3, r2
    9f96:	009b      	lsls	r3, r3, #2
    9f98:	440b      	add	r3, r1
    9f9a:	3310      	adds	r3, #16
    9f9c:	781b      	ldrb	r3, [r3, #0]
    9f9e:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9fa2:	4b83      	ldr	r3, [pc, #524]	; (a1b0 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    9fa4:	681b      	ldr	r3, [r3, #0]
    9fa6:	681a      	ldr	r2, [r3, #0]
    9fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fac:	4413      	add	r3, r2
    9fae:	7c1b      	ldrb	r3, [r3, #16]
    9fb0:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9fb4:	9b00      	ldr	r3, [sp, #0]
    9fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fb8:	691b      	ldr	r3, [r3, #16]
    9fba:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9fbc:	2300      	movs	r3, #0
    9fbe:	f88d 301f 	strb.w	r3, [sp, #31]
    9fc2:	e0e6      	b.n	a192 <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    9fc4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9fc8:	08db      	lsrs	r3, r3, #3
    9fca:	b2db      	uxtb	r3, r3
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d102      	bne.n	9fd6 <Adc_Ipw_ConfigurePdbChannels+0x96>
    9fd0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9fd4:	e000      	b.n	9fd8 <Adc_Ipw_ConfigurePdbChannels+0x98>
    9fd6:	2308      	movs	r3, #8
    9fd8:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9fdc:	9b00      	ldr	r3, [sp, #0]
    9fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fe0:	7bdb      	ldrb	r3, [r3, #15]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d05e      	beq.n	a0a4 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9fe6:	9b00      	ldr	r3, [sp, #0]
    9fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fea:	7b9b      	ldrb	r3, [r3, #14]
    9fec:	f083 0301 	eor.w	r3, r3, #1
    9ff0:	b2db      	uxtb	r3, r3
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d02a      	beq.n	a04c <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9ff6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9ffa:	f1c3 0308 	rsb	r3, r3, #8
    9ffe:	22ff      	movs	r2, #255	; 0xff
    a000:	fa22 f303 	lsr.w	r3, r2, r3
    a004:	b2db      	uxtb	r3, r3
    a006:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    a00a:	2300      	movs	r3, #0
    a00c:	f88d 301e 	strb.w	r3, [sp, #30]
    a010:	e015      	b.n	a03e <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    a012:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a016:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    a01a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a01e:	4413      	add	r3, r2
    a020:	005b      	lsls	r3, r3, #1
    a022:	9a05      	ldr	r2, [sp, #20]
    a024:	4413      	add	r3, r2
    a026:	881b      	ldrh	r3, [r3, #0]
    a028:	f89d 201e 	ldrb.w	r2, [sp, #30]
    a02c:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a030:	f001 fd16 	bl	ba60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    a034:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a038:	3301      	adds	r3, #1
    a03a:	f88d 301e 	strb.w	r3, [sp, #30]
    a03e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    a042:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a046:	429a      	cmp	r2, r3
    a048:	d3e3      	bcc.n	a012 <Adc_Ipw_ConfigurePdbChannels+0xd2>
    a04a:	e051      	b.n	a0f0 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    a04c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a050:	2b00      	cmp	r3, #0
    a052:	d110      	bne.n	a076 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    a054:	2301      	movs	r3, #1
    a056:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    a05a:	9b05      	ldr	r3, [sp, #20]
    a05c:	881b      	ldrh	r3, [r3, #0]
    a05e:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a062:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a066:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a06a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a06e:	2200      	movs	r2, #0
    a070:	f001 fcf6 	bl	ba60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a074:	e03c      	b.n	a0f0 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    a076:	2301      	movs	r3, #1
    a078:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a07c:	9b00      	ldr	r3, [sp, #0]
    a07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a080:	899a      	ldrh	r2, [r3, #12]
    a082:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a086:	b29b      	uxth	r3, r3
    a088:	fb12 f303 	smulbb	r3, r2, r3
    a08c:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a090:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a094:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a098:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a09c:	2200      	movs	r2, #0
    a09e:	f001 fcdf 	bl	ba60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a0a2:	e025      	b.n	a0f0 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    a0a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a0a8:	2b00      	cmp	r3, #0
    a0aa:	d10b      	bne.n	a0c4 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    a0ac:	2301      	movs	r3, #1
    a0ae:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    a0b2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a0b6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a0ba:	2300      	movs	r3, #0
    a0bc:	2200      	movs	r2, #0
    a0be:	f001 fccf 	bl	ba60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a0c2:	e015      	b.n	a0f0 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    a0c4:	2301      	movs	r3, #1
    a0c6:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a0ca:	9b00      	ldr	r3, [sp, #0]
    a0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0ce:	899a      	ldrh	r2, [r3, #12]
    a0d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a0d4:	b29b      	uxth	r3, r3
    a0d6:	fb12 f303 	smulbb	r3, r2, r3
    a0da:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a0de:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a0e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a0e6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a0ea:	2200      	movs	r2, #0
    a0ec:	f001 fcb8 	bl	ba60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a0f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a0f4:	4618      	mov	r0, r3
    a0f6:	f001 fb87 	bl	b808 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    a0fa:	f89d 201d 	ldrb.w	r2, [sp, #29]
    a0fe:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a102:	1ad3      	subs	r3, r2, r3
    a104:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    a108:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a10c:	b29a      	uxth	r2, r3
    a10e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a112:	4413      	add	r3, r2
    a114:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a118:	9b00      	ldr	r3, [sp, #0]
    a11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a11c:	7b9b      	ldrb	r3, [r3, #14]
    a11e:	2b00      	cmp	r3, #0
    a120:	d01d      	beq.n	a15e <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    a122:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a126:	2b00      	cmp	r3, #0
    a128:	d10c      	bne.n	a144 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a12a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a12e:	f1c3 0308 	rsb	r3, r3, #8
    a132:	22ff      	movs	r2, #255	; 0xff
    a134:	fa22 f303 	lsr.w	r3, r2, r3
    a138:	b2db      	uxtb	r3, r3
    a13a:	3b01      	subs	r3, #1
    a13c:	b2db      	uxtb	r3, r3
    a13e:	f88d 300e 	strb.w	r3, [sp, #14]
    a142:	e00f      	b.n	a164 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a144:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a148:	f1c3 0308 	rsb	r3, r3, #8
    a14c:	22ff      	movs	r2, #255	; 0xff
    a14e:	fa22 f303 	lsr.w	r3, r2, r3
    a152:	b2db      	uxtb	r3, r3
    a154:	3b01      	subs	r3, #1
    a156:	b2db      	uxtb	r3, r3
    a158:	f88d 300e 	strb.w	r3, [sp, #14]
    a15c:	e002      	b.n	a164 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a15e:	2300      	movs	r3, #0
    a160:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    a164:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a168:	f1c3 0308 	rsb	r3, r3, #8
    a16c:	22ff      	movs	r2, #255	; 0xff
    a16e:	fa22 f303 	lsr.w	r3, r2, r3
    a172:	b2db      	uxtb	r3, r3
    a174:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a178:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a17c:	aa03      	add	r2, sp, #12
    a17e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a182:	4618      	mov	r0, r3
    a184:	f001 fb7c 	bl	b880 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    a188:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a18c:	3301      	adds	r3, #1
    a18e:	f88d 301f 	strb.w	r3, [sp, #31]
    a192:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a196:	f89d 3019 	ldrb.w	r3, [sp, #25]
    a19a:	429a      	cmp	r2, r3
    a19c:	f4ff af12 	bcc.w	9fc4 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    a1a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a1a4:	4618      	mov	r0, r3
    a1a6:	b009      	add	sp, #36	; 0x24
    a1a8:	f85d fb04 	ldr.w	pc, [sp], #4
    a1ac:	1fff8d0c 	.word	0x1fff8d0c
    a1b0:	1fff8d08 	.word	0x1fff8d08

0000a1b4 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    a1b4:	b500      	push	{lr}
    a1b6:	b089      	sub	sp, #36	; 0x24
    a1b8:	9202      	str	r2, [sp, #8]
    a1ba:	9301      	str	r3, [sp, #4]
    a1bc:	4603      	mov	r3, r0
    a1be:	f88d 300f 	strb.w	r3, [sp, #15]
    a1c2:	460b      	mov	r3, r1
    a1c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    a1c8:	2300      	movs	r3, #0
    a1ca:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a1ce:	4b62      	ldr	r3, [pc, #392]	; (a358 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    a1d0:	681b      	ldr	r3, [r3, #0]
    a1d2:	681a      	ldr	r2, [r3, #0]
    a1d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1d8:	4413      	add	r3, r2
    a1da:	7c1b      	ldrb	r3, [r3, #16]
    a1dc:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    a1e0:	9b02      	ldr	r3, [sp, #8]
    a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1e4:	691b      	ldr	r3, [r3, #16]
    a1e6:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    a1e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1ec:	f003 0307 	and.w	r3, r3, #7
    a1f0:	b2db      	uxtb	r3, r3
    a1f2:	2b00      	cmp	r3, #0
    a1f4:	d006      	beq.n	a204 <Adc_Ipw_ConfigurePdbConversion+0x50>
    a1f6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1fa:	08db      	lsrs	r3, r3, #3
    a1fc:	b2db      	uxtb	r3, r3
    a1fe:	3301      	adds	r3, #1
    a200:	b2db      	uxtb	r3, r3
    a202:	e003      	b.n	a20c <Adc_Ipw_ConfigurePdbConversion+0x58>
    a204:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a208:	08db      	lsrs	r3, r3, #3
    a20a:	b2db      	uxtb	r3, r3
    a20c:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    a210:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a214:	4618      	mov	r0, r3
    a216:	f001 fa61 	bl	b6dc <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    a21a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a21e:	9901      	ldr	r1, [sp, #4]
    a220:	4618      	mov	r0, r3
    a222:	f001 fa89 	bl	b738 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    a226:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a22a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a22e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a232:	9a02      	ldr	r2, [sp, #8]
    a234:	f7ff fe84 	bl	9f40 <Adc_Ipw_ConfigurePdbChannels>
    a238:	4603      	mov	r3, r0
    a23a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    a23e:	9b02      	ldr	r3, [sp, #8]
    a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a242:	7bdb      	ldrb	r3, [r3, #15]
    a244:	2b00      	cmp	r3, #0
    a246:	d02f      	beq.n	a2a8 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a248:	9b02      	ldr	r3, [sp, #8]
    a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a24c:	7b9b      	ldrb	r3, [r3, #14]
    a24e:	f083 0301 	eor.w	r3, r3, #1
    a252:	b2db      	uxtb	r3, r3
    a254:	2b00      	cmp	r3, #0
    a256:	d017      	beq.n	a288 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    a258:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a25c:	493f      	ldr	r1, [pc, #252]	; (a35c <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a25e:	4613      	mov	r3, r2
    a260:	009b      	lsls	r3, r3, #2
    a262:	4413      	add	r3, r2
    a264:	009b      	lsls	r3, r3, #2
    a266:	440b      	add	r3, r1
    a268:	3310      	adds	r3, #16
    a26a:	781b      	ldrb	r3, [r3, #0]
    a26c:	461a      	mov	r2, r3
    a26e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a272:	4413      	add	r3, r2
    a274:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    a278:	3b01      	subs	r3, #1
    a27a:	005b      	lsls	r3, r3, #1
    a27c:	9a05      	ldr	r2, [sp, #20]
    a27e:	4413      	add	r3, r2
    a280:	881b      	ldrh	r3, [r3, #0]
    a282:	f8ad 301c 	strh.w	r3, [sp, #28]
    a286:	e01a      	b.n	a2be <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    a288:	9b05      	ldr	r3, [sp, #20]
    a28a:	881a      	ldrh	r2, [r3, #0]
    a28c:	9b02      	ldr	r3, [sp, #8]
    a28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a290:	8999      	ldrh	r1, [r3, #12]
    a292:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a296:	3b01      	subs	r3, #1
    a298:	b29b      	uxth	r3, r3
    a29a:	fb11 f303 	smulbb	r3, r1, r3
    a29e:	b29b      	uxth	r3, r3
    a2a0:	4413      	add	r3, r2
    a2a2:	f8ad 301c 	strh.w	r3, [sp, #28]
    a2a6:	e00a      	b.n	a2be <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    a2a8:	9b02      	ldr	r3, [sp, #8]
    a2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a2ac:	899a      	ldrh	r2, [r3, #12]
    a2ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a2b2:	3b01      	subs	r3, #1
    a2b4:	b29b      	uxth	r3, r3
    a2b6:	fb12 f303 	smulbb	r3, r2, r3
    a2ba:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    a2be:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a2c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a2c6:	4611      	mov	r1, r2
    a2c8:	4618      	mov	r0, r3
    a2ca:	f001 fab5 	bl	b838 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a2ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a2d2:	4618      	mov	r0, r3
    a2d4:	f001 fa98 	bl	b808 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    a2d8:	2300      	movs	r3, #0
    a2da:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    a2de:	2300      	movs	r3, #0
    a2e0:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a2e4:	2300      	movs	r3, #0
    a2e6:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a2ea:	e00c      	b.n	a306 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a2ec:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a2f0:	aa04      	add	r2, sp, #16
    a2f2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a2f6:	4618      	mov	r0, r3
    a2f8:	f001 fac2 	bl	b880 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a2fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a300:	3301      	adds	r3, #1
    a302:	f88d 301f 	strb.w	r3, [sp, #31]
    a306:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a30a:	2b01      	cmp	r3, #1
    a30c:	d9ee      	bls.n	a2ec <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    a30e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a312:	4912      	ldr	r1, [pc, #72]	; (a35c <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a314:	4613      	mov	r3, r2
    a316:	009b      	lsls	r3, r3, #2
    a318:	4413      	add	r3, r2
    a31a:	009b      	lsls	r3, r3, #2
    a31c:	440b      	add	r3, r1
    a31e:	3310      	adds	r3, #16
    a320:	7819      	ldrb	r1, [r3, #0]
    a322:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a326:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a32a:	440b      	add	r3, r1
    a32c:	b2d8      	uxtb	r0, r3
    a32e:	490b      	ldr	r1, [pc, #44]	; (a35c <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a330:	4613      	mov	r3, r2
    a332:	009b      	lsls	r3, r3, #2
    a334:	4413      	add	r3, r2
    a336:	009b      	lsls	r3, r3, #2
    a338:	440b      	add	r3, r1
    a33a:	3310      	adds	r3, #16
    a33c:	4602      	mov	r2, r0
    a33e:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    a340:	9b01      	ldr	r3, [sp, #4]
    a342:	2b0f      	cmp	r3, #15
    a344:	d104      	bne.n	a350 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a346:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a34a:	4618      	mov	r0, r3
    a34c:	f001 fa34 	bl	b7b8 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    a350:	bf00      	nop
    a352:	b009      	add	sp, #36	; 0x24
    a354:	f85d fb04 	ldr.w	pc, [sp], #4
    a358:	1fff8d08 	.word	0x1fff8d08
    a35c:	1fff8d0c 	.word	0x1fff8d0c

0000a360 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    a360:	b500      	push	{lr}
    a362:	b087      	sub	sp, #28
    a364:	4603      	mov	r3, r0
    a366:	f88d 3007 	strb.w	r3, [sp, #7]
    a36a:	460b      	mov	r3, r1
    a36c:	f8ad 3004 	strh.w	r3, [sp, #4]
    a370:	4613      	mov	r3, r2
    a372:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a376:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a37a:	4a36      	ldr	r2, [pc, #216]	; (a454 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a380:	68da      	ldr	r2, [r3, #12]
    a382:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a386:	005b      	lsls	r3, r3, #1
    a388:	4413      	add	r3, r2
    a38a:	881b      	ldrh	r3, [r3, #0]
    a38c:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a390:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a394:	4a2f      	ldr	r2, [pc, #188]	; (a454 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a39a:	681a      	ldr	r2, [r3, #0]
    a39c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3a0:	4413      	add	r3, r2
    a3a2:	7c1b      	ldrb	r3, [r3, #16]
    a3a4:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    a3a8:	2300      	movs	r3, #0
    a3aa:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    a3ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3b2:	4618      	mov	r0, r3
    a3b4:	f001 fb7e 	bl	bab4 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    a3b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a3bc:	4a25      	ldr	r2, [pc, #148]	; (a454 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3c2:	685a      	ldr	r2, [r3, #4]
    a3c4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a3c8:	2134      	movs	r1, #52	; 0x34
    a3ca:	fb01 f303 	mul.w	r3, r1, r3
    a3ce:	4413      	add	r3, r2
    a3d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a3d4:	2b01      	cmp	r3, #1
    a3d6:	d114      	bne.n	a402 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    a3d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a3dc:	4a1d      	ldr	r2, [pc, #116]	; (a454 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e2:	685a      	ldr	r2, [r3, #4]
    a3e4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a3e8:	2134      	movs	r1, #52	; 0x34
    a3ea:	fb01 f303 	mul.w	r3, r1, r3
    a3ee:	4413      	add	r3, r2
    a3f0:	689b      	ldr	r3, [r3, #8]
    a3f2:	2b01      	cmp	r3, #1
    a3f4:	d105      	bne.n	a402 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    a3f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3fa:	2100      	movs	r1, #0
    a3fc:	4618      	mov	r0, r3
    a3fe:	f7ff f827 	bl	9450 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a402:	2300      	movs	r3, #0
    a404:	f88d 3016 	strb.w	r3, [sp, #22]
    a408:	e013      	b.n	a432 <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    a40a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a40e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a412:	2201      	movs	r2, #1
    a414:	4618      	mov	r0, r3
    a416:	f7ff f8cd 	bl	95b4 <Adc_Ip_SetDisabledChannel>
    a41a:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    a41c:	9b03      	ldr	r3, [sp, #12]
    a41e:	2b02      	cmp	r3, #2
    a420:	d102      	bne.n	a428 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    a422:	2301      	movs	r3, #1
    a424:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a428:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a42c:	3301      	adds	r3, #1
    a42e:	f88d 3016 	strb.w	r3, [sp, #22]
    a432:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a436:	4a08      	ldr	r2, [pc, #32]	; (a458 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    a438:	00db      	lsls	r3, r3, #3
    a43a:	4413      	add	r3, r2
    a43c:	799b      	ldrb	r3, [r3, #6]
    a43e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a442:	429a      	cmp	r2, r3
    a444:	d3e1      	bcc.n	a40a <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    a446:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a44a:	4618      	mov	r0, r3
    a44c:	b007      	add	sp, #28
    a44e:	f85d fb04 	ldr.w	pc, [sp], #4
    a452:	bf00      	nop
    a454:	1fff8d08 	.word	0x1fff8d08
    a458:	1fff8d34 	.word	0x1fff8d34

0000a45c <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    a45c:	b500      	push	{lr}
    a45e:	b085      	sub	sp, #20
    a460:	4603      	mov	r3, r0
    a462:	9100      	str	r1, [sp, #0]
    a464:	f88d 3007 	strb.w	r3, [sp, #7]
    a468:	4613      	mov	r3, r2
    a46a:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a46e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a472:	4a14      	ldr	r2, [pc, #80]	; (a4c4 <Adc_Ipw_PrepareGroupStart+0x68>)
    a474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a478:	681a      	ldr	r2, [r3, #0]
    a47a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a47e:	4413      	add	r3, r2
    a480:	7c1b      	ldrb	r3, [r3, #16]
    a482:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    a486:	9b00      	ldr	r3, [sp, #0]
    a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	2b01      	cmp	r3, #1
    a48e:	d108      	bne.n	a4a2 <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    a490:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a494:	9b00      	ldr	r3, [sp, #0]
    a496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a498:	685b      	ldr	r3, [r3, #4]
    a49a:	461a      	mov	r2, r3
    a49c:	2101      	movs	r1, #1
    a49e:	f7fe ff51 	bl	9344 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    a4a2:	9b00      	ldr	r3, [sp, #0]
    a4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a4a6:	7a1b      	ldrb	r3, [r3, #8]
    a4a8:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    a4ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4b0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a4b4:	4611      	mov	r1, r2
    a4b6:	4618      	mov	r0, r3
    a4b8:	f7fe ff62 	bl	9380 <Adc_Ip_SetSampleTime>
}
    a4bc:	bf00      	nop
    a4be:	b005      	add	sp, #20
    a4c0:	f85d fb04 	ldr.w	pc, [sp], #4
    a4c4:	1fff8d08 	.word	0x1fff8d08

0000a4c8 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    a4c8:	b084      	sub	sp, #16
    a4ca:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    a4cc:	2300      	movs	r3, #0
    a4ce:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    a4d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a4d6:	4618      	mov	r0, r3
    a4d8:	b004      	add	sp, #16
    a4da:	4770      	bx	lr

0000a4dc <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    a4dc:	b500      	push	{lr}
    a4de:	b08f      	sub	sp, #60	; 0x3c
    a4e0:	9202      	str	r2, [sp, #8]
    a4e2:	461a      	mov	r2, r3
    a4e4:	4603      	mov	r3, r0
    a4e6:	f88d 300f 	strb.w	r3, [sp, #15]
    a4ea:	460b      	mov	r3, r1
    a4ec:	f8ad 300c 	strh.w	r3, [sp, #12]
    a4f0:	4613      	mov	r3, r2
    a4f2:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a4f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a4fa:	4a6d      	ldr	r2, [pc, #436]	; (a6b0 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a500:	68da      	ldr	r2, [r3, #12]
    a502:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a506:	005b      	lsls	r3, r3, #1
    a508:	4413      	add	r3, r2
    a50a:	881b      	ldrh	r3, [r3, #0]
    a50c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a510:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a514:	4a66      	ldr	r2, [pc, #408]	; (a6b0 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a51a:	685a      	ldr	r2, [r3, #4]
    a51c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    a520:	2134      	movs	r1, #52	; 0x34
    a522:	fb01 f303 	mul.w	r3, r1, r3
    a526:	4413      	add	r3, r2
    a528:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a52a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a52e:	4a60      	ldr	r2, [pc, #384]	; (a6b0 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a534:	681a      	ldr	r2, [r3, #0]
    a536:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a53a:	4413      	add	r3, r2
    a53c:	7c1b      	ldrb	r3, [r3, #16]
    a53e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    a542:	2300      	movs	r3, #0
    a544:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    a546:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a54a:	495a      	ldr	r1, [pc, #360]	; (a6b4 <Adc_Ipw_ConfigureConversion+0x1d8>)
    a54c:	4613      	mov	r3, r2
    a54e:	009b      	lsls	r3, r3, #2
    a550:	4413      	add	r3, r2
    a552:	009b      	lsls	r3, r3, #2
    a554:	440b      	add	r3, r1
    a556:	3310      	adds	r3, #16
    a558:	781b      	ldrb	r3, [r3, #0]
    a55a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    a55e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a560:	6a1b      	ldr	r3, [r3, #32]
    a562:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a564:	2300      	movs	r3, #0
    a566:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a56a:	e030      	b.n	a5ce <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a56c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a570:	4a4f      	ldr	r2, [pc, #316]	; (a6b0 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a576:	681b      	ldr	r3, [r3, #0]
    a578:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a582:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a586:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a58a:	440b      	add	r3, r1
    a58c:	005b      	lsls	r3, r3, #1
    a58e:	990a      	ldr	r1, [sp, #40]	; 0x28
    a590:	440b      	add	r3, r1
    a592:	881b      	ldrh	r3, [r3, #0]
    a594:	4619      	mov	r1, r3
    a596:	460b      	mov	r3, r1
    a598:	005b      	lsls	r3, r3, #1
    a59a:	440b      	add	r3, r1
    a59c:	009b      	lsls	r3, r3, #2
    a59e:	4413      	add	r3, r2
    a5a0:	685b      	ldr	r3, [r3, #4]
    a5a2:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    a5a4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5a8:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    a5ac:	9b08      	ldr	r3, [sp, #32]
    a5ae:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    a5b0:	2300      	movs	r3, #0
    a5b2:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a5b6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a5ba:	aa05      	add	r2, sp, #20
    a5bc:	4611      	mov	r1, r2
    a5be:	4618      	mov	r0, r3
    a5c0:	f7fe ffc8 	bl	9554 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a5c4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5c8:	3301      	adds	r3, #1
    a5ca:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a5ce:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    a5d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a5d6:	3b01      	subs	r3, #1
    a5d8:	429a      	cmp	r2, r3
    a5da:	d3c7      	bcc.n	a56c <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a5dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a5e0:	4a33      	ldr	r2, [pc, #204]	; (a6b0 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5e6:	681b      	ldr	r3, [r3, #0]
    a5e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a5f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a5f2:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a5f6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5fa:	440b      	add	r3, r1
    a5fc:	005b      	lsls	r3, r3, #1
    a5fe:	990a      	ldr	r1, [sp, #40]	; 0x28
    a600:	440b      	add	r3, r1
    a602:	881b      	ldrh	r3, [r3, #0]
    a604:	4619      	mov	r1, r3
    a606:	460b      	mov	r3, r1
    a608:	005b      	lsls	r3, r3, #1
    a60a:	440b      	add	r3, r1
    a60c:	009b      	lsls	r3, r3, #2
    a60e:	4413      	add	r3, r2
    a610:	685b      	ldr	r3, [r3, #4]
    a612:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    a614:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a618:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    a61c:	9b08      	ldr	r3, [sp, #32]
    a61e:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    a620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a622:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a626:	2b00      	cmp	r3, #0
    a628:	d103      	bne.n	a632 <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    a62a:	2301      	movs	r3, #1
    a62c:	f88d 301c 	strb.w	r3, [sp, #28]
    a630:	e002      	b.n	a638 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    a632:	2300      	movs	r3, #0
    a634:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a638:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a63c:	aa05      	add	r2, sp, #20
    a63e:	4611      	mov	r1, r2
    a640:	4618      	mov	r0, r3
    a642:	f7fe ff87 	bl	9554 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a646:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a64a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a64e:	e014      	b.n	a67a <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    a650:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a654:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    a658:	231f      	movs	r3, #31
    a65a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    a65c:	2300      	movs	r3, #0
    a65e:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a662:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a666:	aa05      	add	r2, sp, #20
    a668:	4611      	mov	r1, r2
    a66a:	4618      	mov	r0, r3
    a66c:	f7fe ff72 	bl	9554 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a670:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a674:	3301      	adds	r3, #1
    a676:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a67a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a67e:	2b0f      	cmp	r3, #15
    a680:	d9e6      	bls.n	a650 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a682:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a686:	4a0c      	ldr	r2, [pc, #48]	; (a6b8 <Adc_Ipw_ConfigureConversion+0x1dc>)
    a688:	00db      	lsls	r3, r3, #3
    a68a:	4413      	add	r3, r2
    a68c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a690:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    a692:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a696:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a69a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a69e:	9300      	str	r3, [sp, #0]
    a6a0:	9b02      	ldr	r3, [sp, #8]
    a6a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a6a4:	f7ff fd86 	bl	a1b4 <Adc_Ipw_ConfigurePdbConversion>
}
    a6a8:	bf00      	nop
    a6aa:	b00f      	add	sp, #60	; 0x3c
    a6ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a6b0:	1fff8d08 	.word	0x1fff8d08
    a6b4:	1fff8d0c 	.word	0x1fff8d0c
    a6b8:	1fff8d34 	.word	0x1fff8d34

0000a6bc <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    a6bc:	b500      	push	{lr}
    a6be:	b085      	sub	sp, #20
    a6c0:	9001      	str	r0, [sp, #4]
    a6c2:	460b      	mov	r3, r1
    a6c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a6c8:	2300      	movs	r3, #0
    a6ca:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a6ce:	2300      	movs	r3, #0
    a6d0:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    a6d4:	2300      	movs	r3, #0
    a6d6:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a6da:	2300      	movs	r3, #0
    a6dc:	f88d 300f 	strb.w	r3, [sp, #15]
    a6e0:	e027      	b.n	a732 <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    a6e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6e6:	9a01      	ldr	r2, [sp, #4]
    a6e8:	4413      	add	r3, r2
    a6ea:	7f9b      	ldrb	r3, [r3, #30]
    a6ec:	2b01      	cmp	r3, #1
    a6ee:	d11b      	bne.n	a728 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a6f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6f4:	9a01      	ldr	r2, [sp, #4]
    a6f6:	4413      	add	r3, r2
    a6f8:	7c1b      	ldrb	r3, [r3, #16]
    a6fa:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    a6fe:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a702:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a706:	9b01      	ldr	r3, [sp, #4]
    a708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a70c:	4619      	mov	r1, r3
    a70e:	f7fe fcb8 	bl	9082 <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    a712:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a716:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a71a:	9b01      	ldr	r3, [sp, #4]
    a71c:	3202      	adds	r2, #2
    a71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a722:	4619      	mov	r1, r3
    a724:	f000 fead 	bl	b482 <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a728:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a72c:	3301      	adds	r3, #1
    a72e:	f88d 300f 	strb.w	r3, [sp, #15]
    a732:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a736:	2b01      	cmp	r3, #1
    a738:	d9d3      	bls.n	a6e2 <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    a73a:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    a73e:	4618      	mov	r0, r3
    a740:	b005      	add	sp, #20
    a742:	f85d fb04 	ldr.w	pc, [sp], #4

0000a746 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    a746:	b500      	push	{lr}
    a748:	b087      	sub	sp, #28
    a74a:	4603      	mov	r3, r0
    a74c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a750:	2300      	movs	r3, #0
    a752:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a756:	2300      	movs	r3, #0
    a758:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    a75c:	2300      	movs	r3, #0
    a75e:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    a762:	2300      	movs	r3, #0
    a764:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    a768:	2300      	movs	r3, #0
    a76a:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a76e:	2300      	movs	r3, #0
    a770:	f88d 3017 	strb.w	r3, [sp, #23]
    a774:	e026      	b.n	a7c4 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    a776:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a77a:	4a2e      	ldr	r2, [pc, #184]	; (a834 <Adc_Ipw_DeInit+0xee>)
    a77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a780:	681a      	ldr	r2, [r3, #0]
    a782:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a786:	4413      	add	r3, r2
    a788:	7f9b      	ldrb	r3, [r3, #30]
    a78a:	2b01      	cmp	r3, #1
    a78c:	d115      	bne.n	a7ba <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a78e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a792:	4a28      	ldr	r2, [pc, #160]	; (a834 <Adc_Ipw_DeInit+0xee>)
    a794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a798:	681a      	ldr	r2, [r3, #0]
    a79a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a79e:	4413      	add	r3, r2
    a7a0:	7c1b      	ldrb	r3, [r3, #16]
    a7a2:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    a7a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a7aa:	4618      	mov	r0, r3
    a7ac:	f7fe fd40 	bl	9230 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    a7b0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a7b4:	4618      	mov	r0, r3
    a7b6:	f000 ff0d 	bl	b5d4 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a7ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7be:	3301      	adds	r3, #1
    a7c0:	f88d 3017 	strb.w	r3, [sp, #23]
    a7c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7c8:	2b01      	cmp	r3, #1
    a7ca:	d9d4      	bls.n	a776 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a7cc:	2300      	movs	r3, #0
    a7ce:	f8ad 3014 	strh.w	r3, [sp, #20]
    a7d2:	e01e      	b.n	a812 <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    a7d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7d8:	4a16      	ldr	r2, [pc, #88]	; (a834 <Adc_Ipw_DeInit+0xee>)
    a7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7de:	685a      	ldr	r2, [r3, #4]
    a7e0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a7e4:	2134      	movs	r1, #52	; 0x34
    a7e6:	fb01 f303 	mul.w	r3, r1, r3
    a7ea:	4413      	add	r3, r2
    a7ec:	881b      	ldrh	r3, [r3, #0]
    a7ee:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    a7f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a7f6:	4910      	ldr	r1, [pc, #64]	; (a838 <Adc_Ipw_DeInit+0xf2>)
    a7f8:	4613      	mov	r3, r2
    a7fa:	009b      	lsls	r3, r3, #2
    a7fc:	4413      	add	r3, r2
    a7fe:	009b      	lsls	r3, r3, #2
    a800:	440b      	add	r3, r1
    a802:	330c      	adds	r3, #12
    a804:	2200      	movs	r2, #0
    a806:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a808:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a80c:	3301      	adds	r3, #1
    a80e:	f8ad 3014 	strh.w	r3, [sp, #20]
    a812:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a816:	4a07      	ldr	r2, [pc, #28]	; (a834 <Adc_Ipw_DeInit+0xee>)
    a818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a81c:	891b      	ldrh	r3, [r3, #8]
    a81e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a822:	429a      	cmp	r2, r3
    a824:	d3d6      	bcc.n	a7d4 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    a826:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a82a:	4618      	mov	r0, r3
    a82c:	b007      	add	sp, #28
    a82e:	f85d fb04 	ldr.w	pc, [sp], #4
    a832:	bf00      	nop
    a834:	1fff8d08 	.word	0x1fff8d08
    a838:	1fff8d0c 	.word	0x1fff8d0c

0000a83c <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    a83c:	b500      	push	{lr}
    a83e:	b089      	sub	sp, #36	; 0x24
    a840:	4603      	mov	r3, r0
    a842:	460a      	mov	r2, r1
    a844:	f88d 300f 	strb.w	r3, [sp, #15]
    a848:	4613      	mov	r3, r2
    a84a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    a84e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a852:	4a4c      	ldr	r2, [pc, #304]	; (a984 <Adc_Ipw_StartNormalConversion+0x148>)
    a854:	00db      	lsls	r3, r3, #3
    a856:	4413      	add	r3, r2
    a858:	885b      	ldrh	r3, [r3, #2]
    a85a:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    a85e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a862:	4a49      	ldr	r2, [pc, #292]	; (a988 <Adc_Ipw_StartNormalConversion+0x14c>)
    a864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a868:	68da      	ldr	r2, [r3, #12]
    a86a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    a86e:	005b      	lsls	r3, r3, #1
    a870:	4413      	add	r3, r2
    a872:	881b      	ldrh	r3, [r3, #0]
    a874:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    a878:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a87c:	4a42      	ldr	r2, [pc, #264]	; (a988 <Adc_Ipw_StartNormalConversion+0x14c>)
    a87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a882:	685a      	ldr	r2, [r3, #4]
    a884:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a888:	2134      	movs	r1, #52	; 0x34
    a88a:	fb01 f303 	mul.w	r3, r1, r3
    a88e:	4413      	add	r3, r2
    a890:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a892:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a896:	4a3c      	ldr	r2, [pc, #240]	; (a988 <Adc_Ipw_StartNormalConversion+0x14c>)
    a898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a89c:	681a      	ldr	r2, [r3, #0]
    a89e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8a2:	4413      	add	r3, r2
    a8a4:	7c1b      	ldrb	r3, [r3, #16]
    a8a6:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    a8aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8ae:	4a35      	ldr	r2, [pc, #212]	; (a984 <Adc_Ipw_StartNormalConversion+0x148>)
    a8b0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a8b4:	b29b      	uxth	r3, r3
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	d05f      	beq.n	a97a <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    a8ba:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a8be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8c2:	9905      	ldr	r1, [sp, #20]
    a8c4:	4618      	mov	r0, r3
    a8c6:	f7ff fdc9 	bl	a45c <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a8ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a8ce:	492f      	ldr	r1, [pc, #188]	; (a98c <Adc_Ipw_StartNormalConversion+0x150>)
    a8d0:	4613      	mov	r3, r2
    a8d2:	009b      	lsls	r3, r3, #2
    a8d4:	4413      	add	r3, r2
    a8d6:	009b      	lsls	r3, r3, #2
    a8d8:	440b      	add	r3, r1
    a8da:	3310      	adds	r3, #16
    a8dc:	2200      	movs	r2, #0
    a8de:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    a8e0:	9b05      	ldr	r3, [sp, #20]
    a8e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a8e6:	2b0f      	cmp	r3, #15
    a8e8:	d806      	bhi.n	a8f8 <Adc_Ipw_StartNormalConversion+0xbc>
    a8ea:	9b05      	ldr	r3, [sp, #20]
    a8ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a8f0:	f003 030f 	and.w	r3, r3, #15
    a8f4:	b2db      	uxtb	r3, r3
    a8f6:	e000      	b.n	a8fa <Adc_Ipw_StartNormalConversion+0xbe>
    a8f8:	2310      	movs	r3, #16
    a8fa:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    a8fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a902:	4a20      	ldr	r2, [pc, #128]	; (a984 <Adc_Ipw_StartNormalConversion+0x148>)
    a904:	00db      	lsls	r3, r3, #3
    a906:	4413      	add	r3, r2
    a908:	799b      	ldrb	r3, [r3, #6]
    a90a:	2b00      	cmp	r3, #0
    a90c:	d107      	bne.n	a91e <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a90e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a912:	4a1c      	ldr	r2, [pc, #112]	; (a984 <Adc_Ipw_StartNormalConversion+0x148>)
    a914:	00db      	lsls	r3, r3, #3
    a916:	4413      	add	r3, r2
    a918:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a91c:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a91e:	2300      	movs	r3, #0
    a920:	f88d 301f 	strb.w	r3, [sp, #31]
    a924:	e00c      	b.n	a940 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a926:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a92a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a92e:	4611      	mov	r1, r2
    a930:	4618      	mov	r0, r3
    a932:	f7fe ff03 	bl	973c <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a936:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a93a:	3301      	adds	r3, #1
    a93c:	f88d 301f 	strb.w	r3, [sp, #31]
    a940:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a944:	4a0f      	ldr	r2, [pc, #60]	; (a984 <Adc_Ipw_StartNormalConversion+0x148>)
    a946:	00db      	lsls	r3, r3, #3
    a948:	4413      	add	r3, r2
    a94a:	799b      	ldrb	r3, [r3, #6]
    a94c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a950:	429a      	cmp	r2, r3
    a952:	d3e8      	bcc.n	a926 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    a954:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a958:	2101      	movs	r1, #1
    a95a:	4618      	mov	r0, r3
    a95c:	f7fe fd60 	bl	9420 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a960:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a964:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    a968:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a96c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a970:	9300      	str	r3, [sp, #0]
    a972:	4613      	mov	r3, r2
    a974:	220f      	movs	r2, #15
    a976:	f7ff fdb1 	bl	a4dc <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    a97a:	bf00      	nop
    a97c:	b009      	add	sp, #36	; 0x24
    a97e:	f85d fb04 	ldr.w	pc, [sp], #4
    a982:	bf00      	nop
    a984:	1fff8d34 	.word	0x1fff8d34
    a988:	1fff8d08 	.word	0x1fff8d08
    a98c:	1fff8d0c 	.word	0x1fff8d0c

0000a990 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a990:	b500      	push	{lr}
    a992:	b085      	sub	sp, #20
    a994:	4603      	mov	r3, r0
    a996:	f88d 3007 	strb.w	r3, [sp, #7]
    a99a:	460b      	mov	r3, r1
    a99c:	f8ad 3004 	strh.w	r3, [sp, #4]
    a9a0:	4613      	mov	r3, r2
    a9a2:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    a9a6:	2300      	movs	r3, #0
    a9a8:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a9ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a9b0:	4a24      	ldr	r2, [pc, #144]	; (aa44 <Adc_Ipw_StopCurrentConversion+0xb4>)
    a9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9b6:	681a      	ldr	r2, [r3, #0]
    a9b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9bc:	4413      	add	r3, r2
    a9be:	7c1b      	ldrb	r3, [r3, #16]
    a9c0:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a9c4:	2300      	movs	r3, #0
    a9c6:	f88d 300f 	strb.w	r3, [sp, #15]
    a9ca:	e014      	b.n	a9f6 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    a9cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a9d0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a9d4:	2200      	movs	r2, #0
    a9d6:	4618      	mov	r0, r3
    a9d8:	f7fe fdec 	bl	95b4 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a9dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a9e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a9e4:	4611      	mov	r1, r2
    a9e6:	4618      	mov	r0, r3
    a9e8:	f7fe fea8 	bl	973c <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a9ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a9f0:	3301      	adds	r3, #1
    a9f2:	f88d 300f 	strb.w	r3, [sp, #15]
    a9f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9fa:	4a13      	ldr	r2, [pc, #76]	; (aa48 <Adc_Ipw_StopCurrentConversion+0xb8>)
    a9fc:	00db      	lsls	r3, r3, #3
    a9fe:	4413      	add	r3, r2
    aa00:	799b      	ldrb	r3, [r3, #6]
    aa02:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa06:	429a      	cmp	r2, r3
    aa08:	d3e0      	bcc.n	a9cc <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    aa0a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    aa0e:	490f      	ldr	r1, [pc, #60]	; (aa4c <Adc_Ipw_StopCurrentConversion+0xbc>)
    aa10:	4613      	mov	r3, r2
    aa12:	009b      	lsls	r3, r3, #2
    aa14:	4413      	add	r3, r2
    aa16:	009b      	lsls	r3, r3, #2
    aa18:	440b      	add	r3, r1
    aa1a:	3310      	adds	r3, #16
    aa1c:	2200      	movs	r2, #0
    aa1e:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    aa20:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aa24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aa28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa2c:	4618      	mov	r0, r3
    aa2e:	f7ff fc97 	bl	a360 <Adc_Ipw_StopConversionCheckTimeout>
    aa32:	4603      	mov	r3, r0
    aa34:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    aa38:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    aa3c:	4618      	mov	r0, r3
    aa3e:	b005      	add	sp, #20
    aa40:	f85d fb04 	ldr.w	pc, [sp], #4
    aa44:	1fff8d08 	.word	0x1fff8d08
    aa48:	1fff8d34 	.word	0x1fff8d34
    aa4c:	1fff8d0c 	.word	0x1fff8d0c

0000aa50 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    aa50:	b500      	push	{lr}
    aa52:	b085      	sub	sp, #20
    aa54:	4603      	mov	r3, r0
    aa56:	f88d 3007 	strb.w	r3, [sp, #7]
    aa5a:	460b      	mov	r3, r1
    aa5c:	f88d 3006 	strb.w	r3, [sp, #6]
    aa60:	4613      	mov	r3, r2
    aa62:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    aa66:	2301      	movs	r3, #1
    aa68:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    aa6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa70:	f88d 300f 	strb.w	r3, [sp, #15]
    aa74:	e019      	b.n	aaaa <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    aa76:	f89d 0007 	ldrb.w	r0, [sp, #7]
    aa7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa82:	1ad3      	subs	r3, r2, r3
    aa84:	b2db      	uxtb	r3, r3
    aa86:	4619      	mov	r1, r3
    aa88:	f7fe fe3e 	bl	9708 <Adc_Ip_GetConvCompleteFlag>
    aa8c:	4603      	mov	r3, r0
    aa8e:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    aa92:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa96:	f083 0301 	eor.w	r3, r3, #1
    aa9a:	b2db      	uxtb	r3, r3
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	d10b      	bne.n	aab8 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    aaa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aaa4:	3301      	adds	r3, #1
    aaa6:	f88d 300f 	strb.w	r3, [sp, #15]
    aaaa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aaae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    aab2:	429a      	cmp	r2, r3
    aab4:	d3df      	bcc.n	aa76 <Adc_Ipw_CheckValidConversion+0x26>
    aab6:	e000      	b.n	aaba <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    aab8:	bf00      	nop
        }
    }

    return ValidConversion;
    aaba:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    aabe:	4618      	mov	r0, r3
    aac0:	b005      	add	sp, #20
    aac2:	f85d fb04 	ldr.w	pc, [sp], #4

0000aac6 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    aac6:	b500      	push	{lr}
    aac8:	b089      	sub	sp, #36	; 0x24
    aaca:	9102      	str	r1, [sp, #8]
    aacc:	9201      	str	r2, [sp, #4]
    aace:	461a      	mov	r2, r3
    aad0:	4603      	mov	r3, r0
    aad2:	f8ad 300e 	strh.w	r3, [sp, #14]
    aad6:	4613      	mov	r3, r2
    aad8:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    aadc:	2300      	movs	r3, #0
    aade:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    aae2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aae6:	4a33      	ldr	r2, [pc, #204]	; (abb4 <Adc_Ipw_ReadGroup+0xee>)
    aae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaec:	68da      	ldr	r2, [r3, #12]
    aaee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aaf2:	005b      	lsls	r3, r3, #1
    aaf4:	4413      	add	r3, r2
    aaf6:	881b      	ldrh	r3, [r3, #0]
    aaf8:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    aafc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ab00:	4a2c      	ldr	r2, [pc, #176]	; (abb4 <Adc_Ipw_ReadGroup+0xee>)
    ab02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab06:	685a      	ldr	r2, [r3, #4]
    ab08:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    ab0c:	2134      	movs	r1, #52	; 0x34
    ab0e:	fb01 f303 	mul.w	r3, r1, r3
    ab12:	4413      	add	r3, r2
    ab14:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    ab16:	9b06      	ldr	r3, [sp, #24]
    ab18:	789b      	ldrb	r3, [r3, #2]
    ab1a:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    ab1e:	9b06      	ldr	r3, [sp, #24]
    ab20:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ab24:	2b01      	cmp	r3, #1
    ab26:	d124      	bne.n	ab72 <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    ab28:	9b06      	ldr	r3, [sp, #24]
    ab2a:	68db      	ldr	r3, [r3, #12]
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d111      	bne.n	ab54 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    ab30:	9b06      	ldr	r3, [sp, #24]
    ab32:	695b      	ldr	r3, [r3, #20]
    ab34:	2b00      	cmp	r3, #0
    ab36:	d10d      	bne.n	ab54 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    ab38:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab3c:	4a1e      	ldr	r2, [pc, #120]	; (abb8 <Adc_Ipw_ReadGroup+0xf2>)
    ab3e:	00db      	lsls	r3, r3, #3
    ab40:	4413      	add	r3, r2
    ab42:	885b      	ldrh	r3, [r3, #2]
    ab44:	b29b      	uxth	r3, r3
    ab46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ab4a:	429a      	cmp	r2, r3
    ab4c:	d002      	beq.n	ab54 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    ab4e:	2301      	movs	r3, #1
    ab50:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    ab54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ab58:	2b00      	cmp	r3, #0
    ab5a:	d124      	bne.n	aba6 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    ab5c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ab60:	9a01      	ldr	r2, [sp, #4]
    ab62:	9902      	ldr	r1, [sp, #8]
    ab64:	9806      	ldr	r0, [sp, #24]
    ab66:	f7ff f91f 	bl	9da8 <Adc_Ipw_ReadGroupNoInt>
    ab6a:	4603      	mov	r3, r0
    ab6c:	f88d 301f 	strb.w	r3, [sp, #31]
    ab70:	e019      	b.n	aba6 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    ab72:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ab76:	4911      	ldr	r1, [pc, #68]	; (abbc <Adc_Ipw_ReadGroup+0xf6>)
    ab78:	4613      	mov	r3, r2
    ab7a:	009b      	lsls	r3, r3, #2
    ab7c:	4413      	add	r3, r2
    ab7e:	009b      	lsls	r3, r3, #2
    ab80:	440b      	add	r3, r1
    ab82:	681b      	ldr	r3, [r3, #0]
    ab84:	2b01      	cmp	r3, #1
    ab86:	d102      	bne.n	ab8e <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    ab88:	2301      	movs	r3, #1
    ab8a:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    ab8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ab92:	2b00      	cmp	r3, #0
    ab94:	d107      	bne.n	aba6 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    ab96:	f89d 200d 	ldrb.w	r2, [sp, #13]
    ab9a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab9e:	9902      	ldr	r1, [sp, #8]
    aba0:	4618      	mov	r0, r3
    aba2:	f7ff f949 	bl	9e38 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    aba6:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    abaa:	4618      	mov	r0, r3
    abac:	b009      	add	sp, #36	; 0x24
    abae:	f85d fb04 	ldr.w	pc, [sp], #4
    abb2:	bf00      	nop
    abb4:	1fff8d08 	.word	0x1fff8d08
    abb8:	1fff8d34 	.word	0x1fff8d34
    abbc:	1fff8d0c 	.word	0x1fff8d0c

0000abc0 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    abc0:	b500      	push	{lr}
    abc2:	b085      	sub	sp, #20
    abc4:	4603      	mov	r3, r0
    abc6:	9100      	str	r1, [sp, #0]
    abc8:	f88d 3007 	strb.w	r3, [sp, #7]
    abcc:	4613      	mov	r3, r2
    abce:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    abd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abd6:	4a0e      	ldr	r2, [pc, #56]	; (ac10 <Adc_Ipw_Calibrate+0x50>)
    abd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abdc:	681a      	ldr	r2, [r3, #0]
    abde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abe2:	4413      	add	r3, r2
    abe4:	7c1b      	ldrb	r3, [r3, #16]
    abe6:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    abea:	9b00      	ldr	r3, [sp, #0]
    abec:	2200      	movs	r2, #0
    abee:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    abf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    abf4:	4618      	mov	r0, r3
    abf6:	f7fe fdb9 	bl	976c <Adc_Ip_DoCalibration>
    abfa:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    abfc:	9b02      	ldr	r3, [sp, #8]
    abfe:	2b00      	cmp	r3, #0
    ac00:	d002      	beq.n	ac08 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    ac02:	9b00      	ldr	r3, [sp, #0]
    ac04:	2201      	movs	r2, #1
    ac06:	701a      	strb	r2, [r3, #0]
    }
}
    ac08:	bf00      	nop
    ac0a:	b005      	add	sp, #20
    ac0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ac10:	1fff8d08 	.word	0x1fff8d08

0000ac14 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    ac14:	2300      	movs	r3, #0
}
    ac16:	4618      	mov	r0, r3
    ac18:	4770      	bx	lr
    ac1a:	bf00      	nop

0000ac1c <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    ac1c:	b500      	push	{lr}
    ac1e:	b083      	sub	sp, #12
    ac20:	4603      	mov	r3, r0
    ac22:	460a      	mov	r2, r1
    ac24:	f88d 3007 	strb.w	r3, [sp, #7]
    ac28:	4613      	mov	r3, r2
    ac2a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    ac2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac32:	2100      	movs	r1, #0
    ac34:	4618      	mov	r0, r3
    ac36:	f7fe fff3 	bl	9c20 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    ac3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac3e:	4a09      	ldr	r2, [pc, #36]	; (ac64 <Adc_Ipw_UpdateQueue+0x48>)
    ac40:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    ac44:	b29b      	uxth	r3, r3
    ac46:	2b00      	cmp	r3, #0
    ac48:	d007      	beq.n	ac5a <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    ac4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ac4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac52:	4611      	mov	r1, r2
    ac54:	4618      	mov	r0, r3
    ac56:	f7ff fdf1 	bl	a83c <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    ac5a:	bf00      	nop
    ac5c:	b003      	add	sp, #12
    ac5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac62:	bf00      	nop
    ac64:	1fff8d34 	.word	0x1fff8d34

0000ac68 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    ac68:	b510      	push	{r4, lr}
    ac6a:	b08a      	sub	sp, #40	; 0x28
    ac6c:	4604      	mov	r4, r0
    ac6e:	4608      	mov	r0, r1
    ac70:	4611      	mov	r1, r2
    ac72:	461a      	mov	r2, r3
    ac74:	4623      	mov	r3, r4
    ac76:	f88d 300f 	strb.w	r3, [sp, #15]
    ac7a:	4603      	mov	r3, r0
    ac7c:	f8ad 300c 	strh.w	r3, [sp, #12]
    ac80:	460b      	mov	r3, r1
    ac82:	f8ad 300a 	strh.w	r3, [sp, #10]
    ac86:	4613      	mov	r3, r2
    ac88:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ac8c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac90:	4a68      	ldr	r2, [pc, #416]	; (ae34 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac96:	68da      	ldr	r2, [r3, #12]
    ac98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ac9c:	005b      	lsls	r3, r3, #1
    ac9e:	4413      	add	r3, r2
    aca0:	881b      	ldrh	r3, [r3, #0]
    aca2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    aca6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    acaa:	4963      	ldr	r1, [pc, #396]	; (ae38 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    acac:	4613      	mov	r3, r2
    acae:	009b      	lsls	r3, r3, #2
    acb0:	4413      	add	r3, r2
    acb2:	009b      	lsls	r3, r3, #2
    acb4:	440b      	add	r3, r1
    acb6:	3310      	adds	r3, #16
    acb8:	781b      	ldrb	r3, [r3, #0]
    acba:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    acbe:	2300      	movs	r3, #0
    acc0:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    acc2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    acc6:	4a5b      	ldr	r2, [pc, #364]	; (ae34 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    acc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    accc:	681a      	ldr	r2, [r3, #0]
    acce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    acd2:	4413      	add	r3, r2
    acd4:	7c1b      	ldrb	r3, [r3, #16]
    acd6:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    acda:	2300      	movs	r3, #0
    acdc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    ace0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ace4:	4a53      	ldr	r2, [pc, #332]	; (ae34 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ace6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acea:	681b      	ldr	r3, [r3, #0]
    acec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    acf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    acf4:	695b      	ldr	r3, [r3, #20]
    acf6:	4618      	mov	r0, r3
    acf8:	f7ff fbe6 	bl	a4c8 <Adc_Ipw_CalculateNumsBitShift>
    acfc:	4603      	mov	r3, r0
    acfe:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    ad02:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ad06:	4a4b      	ldr	r2, [pc, #300]	; (ae34 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ad08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad0c:	685a      	ldr	r2, [r3, #4]
    ad0e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ad12:	2134      	movs	r1, #52	; 0x34
    ad14:	fb01 f303 	mul.w	r3, r1, r3
    ad18:	4413      	add	r3, r2
    ad1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    ad1e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    ad22:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ad26:	4a43      	ldr	r2, [pc, #268]	; (ae34 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ad28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2c:	685a      	ldr	r2, [r3, #4]
    ad2e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ad32:	2134      	movs	r1, #52	; 0x34
    ad34:	fb01 f303 	mul.w	r3, r1, r3
    ad38:	4413      	add	r3, r2
    ad3a:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    ad3c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ad40:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ad44:	429a      	cmp	r2, r3
    ad46:	d870      	bhi.n	ae2a <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    ad48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad4c:	f003 030f 	and.w	r3, r3, #15
    ad50:	b2db      	uxtb	r3, r3
    ad52:	2b00      	cmp	r3, #0
    ad54:	d104      	bne.n	ad60 <Adc_Ipw_CheckConversionChannels+0xf8>
    ad56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad5a:	3b10      	subs	r3, #16
    ad5c:	b2db      	uxtb	r3, r3
    ad5e:	e004      	b.n	ad6a <Adc_Ipw_CheckConversionChannels+0x102>
    ad60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad64:	f023 030f 	bic.w	r3, r3, #15
    ad68:	b2db      	uxtb	r3, r3
    ad6a:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    ad6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad72:	4931      	ldr	r1, [pc, #196]	; (ae38 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad74:	4613      	mov	r3, r2
    ad76:	009b      	lsls	r3, r3, #2
    ad78:	4413      	add	r3, r2
    ad7a:	009b      	lsls	r3, r3, #2
    ad7c:	440b      	add	r3, r1
    ad7e:	330c      	adds	r3, #12
    ad80:	6819      	ldr	r1, [r3, #0]
    ad82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad86:	482c      	ldr	r0, [pc, #176]	; (ae38 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad88:	4613      	mov	r3, r2
    ad8a:	009b      	lsls	r3, r3, #2
    ad8c:	4413      	add	r3, r2
    ad8e:	009b      	lsls	r3, r3, #2
    ad90:	4403      	add	r3, r0
    ad92:	3308      	adds	r3, #8
    ad94:	881b      	ldrh	r3, [r3, #0]
    ad96:	b29b      	uxth	r3, r3
    ad98:	005b      	lsls	r3, r3, #1
    ad9a:	440b      	add	r3, r1
    ad9c:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    ad9e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ada2:	f89d 1013 	ldrb.w	r1, [sp, #19]
    ada6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    adaa:	4618      	mov	r0, r3
    adac:	f7ff fe50 	bl	aa50 <Adc_Ipw_CheckValidConversion>
    adb0:	4603      	mov	r3, r0
    adb2:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    adb6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    adba:	2b00      	cmp	r3, #0
    adbc:	d032      	beq.n	ae24 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    adbe:	f89d 3013 	ldrb.w	r3, [sp, #19]
    adc2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    adc6:	e026      	b.n	ae16 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    adc8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    adcc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    add0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    add4:	1ad3      	subs	r3, r2, r3
    add6:	b2db      	uxtb	r3, r3
    add8:	4619      	mov	r1, r3
    adda:	f7fe fcaf 	bl	973c <Adc_Ip_GetConvData>
    adde:	4603      	mov	r3, r0
    ade0:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    ade4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ade8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    adec:	fa02 f303 	lsl.w	r3, r2, r3
    adf0:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    adf4:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    adf8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    adfc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ae00:	9300      	str	r3, [sp, #0]
    ae02:	460b      	mov	r3, r1
    ae04:	9907      	ldr	r1, [sp, #28]
    ae06:	9805      	ldr	r0, [sp, #20]
    ae08:	f000 fa02 	bl	b210 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    ae0c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ae10:	3301      	adds	r3, #1
    ae12:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    ae16:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ae1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ae1e:	429a      	cmp	r2, r3
    ae20:	d3d2      	bcc.n	adc8 <Adc_Ipw_CheckConversionChannels+0x160>
    ae22:	e002      	b.n	ae2a <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    ae24:	2301      	movs	r3, #1
    ae26:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    ae2a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    ae2e:	4618      	mov	r0, r3
    ae30:	b00a      	add	sp, #40	; 0x28
    ae32:	bd10      	pop	{r4, pc}
    ae34:	1fff8d08 	.word	0x1fff8d08
    ae38:	1fff8d0c 	.word	0x1fff8d0c

0000ae3c <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    ae3c:	b500      	push	{lr}
    ae3e:	b087      	sub	sp, #28
    ae40:	4603      	mov	r3, r0
    ae42:	f88d 300f 	strb.w	r3, [sp, #15]
    ae46:	460b      	mov	r3, r1
    ae48:	f8ad 300c 	strh.w	r3, [sp, #12]
    ae4c:	4613      	mov	r3, r2
    ae4e:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ae52:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae56:	4a33      	ldr	r2, [pc, #204]	; (af24 <Adc_Ipw_RestartConversion+0xe8>)
    ae58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae5c:	68da      	ldr	r2, [r3, #12]
    ae5e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ae62:	005b      	lsls	r3, r3, #1
    ae64:	4413      	add	r3, r2
    ae66:	881b      	ldrh	r3, [r3, #0]
    ae68:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ae6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae70:	4a2c      	ldr	r2, [pc, #176]	; (af24 <Adc_Ipw_RestartConversion+0xe8>)
    ae72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae76:	681a      	ldr	r2, [r3, #0]
    ae78:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ae7c:	4413      	add	r3, r2
    ae7e:	7c1b      	ldrb	r3, [r3, #16]
    ae80:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    ae84:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae88:	4a26      	ldr	r2, [pc, #152]	; (af24 <Adc_Ipw_RestartConversion+0xe8>)
    ae8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae8e:	685a      	ldr	r2, [r3, #4]
    ae90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae94:	2134      	movs	r1, #52	; 0x34
    ae96:	fb01 f303 	mul.w	r3, r1, r3
    ae9a:	4413      	add	r3, r2
    ae9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    aea0:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    aea4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    aea8:	2b0f      	cmp	r3, #15
    aeaa:	d805      	bhi.n	aeb8 <Adc_Ipw_RestartConversion+0x7c>
    aeac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    aeb0:	f003 030f 	and.w	r3, r3, #15
    aeb4:	b2db      	uxtb	r3, r3
    aeb6:	e000      	b.n	aeba <Adc_Ipw_RestartConversion+0x7e>
    aeb8:	2310      	movs	r3, #16
    aeba:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    aebe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    aec2:	2b10      	cmp	r3, #16
    aec4:	d811      	bhi.n	aeea <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    aec6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aeca:	4917      	ldr	r1, [pc, #92]	; (af28 <Adc_Ipw_RestartConversion+0xec>)
    aecc:	4613      	mov	r3, r2
    aece:	009b      	lsls	r3, r3, #2
    aed0:	4413      	add	r3, r2
    aed2:	009b      	lsls	r3, r3, #2
    aed4:	440b      	add	r3, r1
    aed6:	3310      	adds	r3, #16
    aed8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    aedc:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    aede:	f89d 3015 	ldrb.w	r3, [sp, #21]
    aee2:	4618      	mov	r0, r3
    aee4:	f000 fc68 	bl	b7b8 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    aee8:	e017      	b.n	af1a <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    aeea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aeee:	490e      	ldr	r1, [pc, #56]	; (af28 <Adc_Ipw_RestartConversion+0xec>)
    aef0:	4613      	mov	r3, r2
    aef2:	009b      	lsls	r3, r3, #2
    aef4:	4413      	add	r3, r2
    aef6:	009b      	lsls	r3, r3, #2
    aef8:	440b      	add	r3, r1
    aefa:	3310      	adds	r3, #16
    aefc:	2200      	movs	r2, #0
    aefe:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    af00:	f89d 2013 	ldrb.w	r2, [sp, #19]
    af04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    af08:	f89d 000f 	ldrb.w	r0, [sp, #15]
    af0c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    af10:	9300      	str	r3, [sp, #0]
    af12:	4613      	mov	r3, r2
    af14:	220f      	movs	r2, #15
    af16:	f7ff fae1 	bl	a4dc <Adc_Ipw_ConfigureConversion>
}
    af1a:	bf00      	nop
    af1c:	b007      	add	sp, #28
    af1e:	f85d fb04 	ldr.w	pc, [sp], #4
    af22:	bf00      	nop
    af24:	1fff8d08 	.word	0x1fff8d08
    af28:	1fff8d0c 	.word	0x1fff8d0c

0000af2c <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    af2c:	b084      	sub	sp, #16
    af2e:	4603      	mov	r3, r0
    af30:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    af34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    af38:	4907      	ldr	r1, [pc, #28]	; (af58 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    af3a:	4613      	mov	r3, r2
    af3c:	009b      	lsls	r3, r3, #2
    af3e:	4413      	add	r3, r2
    af40:	009b      	lsls	r3, r3, #2
    af42:	440b      	add	r3, r1
    af44:	3308      	adds	r3, #8
    af46:	881b      	ldrh	r3, [r3, #0]
    af48:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    af4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    af50:	4618      	mov	r0, r3
    af52:	b004      	add	sp, #16
    af54:	4770      	bx	lr
    af56:	bf00      	nop
    af58:	1fff8d0c 	.word	0x1fff8d0c

0000af5c <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    af5c:	b510      	push	{r4, lr}
    af5e:	b084      	sub	sp, #16
    af60:	4604      	mov	r4, r0
    af62:	4608      	mov	r0, r1
    af64:	4611      	mov	r1, r2
    af66:	461a      	mov	r2, r3
    af68:	4623      	mov	r3, r4
    af6a:	f88d 3007 	strb.w	r3, [sp, #7]
    af6e:	4603      	mov	r3, r0
    af70:	f8ad 3004 	strh.w	r3, [sp, #4]
    af74:	460b      	mov	r3, r1
    af76:	f8ad 3002 	strh.w	r3, [sp, #2]
    af7a:	4613      	mov	r3, r2
    af7c:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    af80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af84:	4a4f      	ldr	r2, [pc, #316]	; (b0c4 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    af86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af8a:	68da      	ldr	r2, [r3, #12]
    af8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    af90:	005b      	lsls	r3, r3, #1
    af92:	4413      	add	r3, r2
    af94:	881b      	ldrh	r3, [r3, #0]
    af96:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    af9a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af9e:	494a      	ldr	r1, [pc, #296]	; (b0c8 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    afa0:	4613      	mov	r3, r2
    afa2:	009b      	lsls	r3, r3, #2
    afa4:	4413      	add	r3, r2
    afa6:	009b      	lsls	r3, r3, #2
    afa8:	440b      	add	r3, r1
    afaa:	3304      	adds	r3, #4
    afac:	2201      	movs	r2, #1
    afae:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    afb0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    afb4:	4944      	ldr	r1, [pc, #272]	; (b0c8 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    afb6:	4613      	mov	r3, r2
    afb8:	009b      	lsls	r3, r3, #2
    afba:	4413      	add	r3, r2
    afbc:	009b      	lsls	r3, r3, #2
    afbe:	440b      	add	r3, r1
    afc0:	681b      	ldr	r3, [r3, #0]
    afc2:	2b01      	cmp	r3, #1
    afc4:	d109      	bne.n	afda <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    afc6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    afca:	493f      	ldr	r1, [pc, #252]	; (b0c8 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    afcc:	4613      	mov	r3, r2
    afce:	009b      	lsls	r3, r3, #2
    afd0:	4413      	add	r3, r2
    afd2:	009b      	lsls	r3, r3, #2
    afd4:	440b      	add	r3, r1
    afd6:	2202      	movs	r2, #2
    afd8:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    afda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    afde:	4618      	mov	r0, r3
    afe0:	f7ff ffa4 	bl	af2c <Adc_Ipw_GetCurrentSampleCount>
    afe4:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    afe6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    afea:	9a02      	ldr	r2, [sp, #8]
    afec:	429a      	cmp	r2, r3
    afee:	d35d      	bcc.n	b0ac <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    aff0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    aff4:	4934      	ldr	r1, [pc, #208]	; (b0c8 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    aff6:	4613      	mov	r3, r2
    aff8:	009b      	lsls	r3, r3, #2
    affa:	4413      	add	r3, r2
    affc:	009b      	lsls	r3, r3, #2
    affe:	440b      	add	r3, r1
    b000:	2203      	movs	r2, #3
    b002:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    b004:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b008:	4a2e      	ldr	r2, [pc, #184]	; (b0c4 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    b00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b00e:	685a      	ldr	r2, [r3, #4]
    b010:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b014:	2134      	movs	r1, #52	; 0x34
    b016:	fb01 f303 	mul.w	r3, r1, r3
    b01a:	4413      	add	r3, r2
    b01c:	699b      	ldr	r3, [r3, #24]
    b01e:	2b00      	cmp	r3, #0
    b020:	d117      	bne.n	b052 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    b022:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b026:	4a27      	ldr	r2, [pc, #156]	; (b0c4 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    b028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b02c:	685a      	ldr	r2, [r3, #4]
    b02e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b032:	2134      	movs	r1, #52	; 0x34
    b034:	fb01 f303 	mul.w	r3, r1, r3
    b038:	4413      	add	r3, r2
    b03a:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    b03c:	2b01      	cmp	r3, #1
    b03e:	d108      	bne.n	b052 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    b040:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b048:	4611      	mov	r1, r2
    b04a:	4618      	mov	r0, r3
    b04c:	f7ff fde6 	bl	ac1c <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    b050:	e035      	b.n	b0be <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    b052:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b056:	4a1b      	ldr	r2, [pc, #108]	; (b0c4 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    b058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b05c:	685a      	ldr	r2, [r3, #4]
    b05e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b062:	2134      	movs	r1, #52	; 0x34
    b064:	fb01 f303 	mul.w	r3, r1, r3
    b068:	4413      	add	r3, r2
    b06a:	689b      	ldr	r3, [r3, #8]
    b06c:	2b01      	cmp	r3, #1
    b06e:	d114      	bne.n	b09a <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    b070:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b074:	4914      	ldr	r1, [pc, #80]	; (b0c8 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    b076:	4613      	mov	r3, r2
    b078:	009b      	lsls	r3, r3, #2
    b07a:	4413      	add	r3, r2
    b07c:	009b      	lsls	r3, r3, #2
    b07e:	440b      	add	r3, r1
    b080:	3308      	adds	r3, #8
    b082:	2200      	movs	r2, #0
    b084:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b086:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b08a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b08e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b092:	4618      	mov	r0, r3
    b094:	f7ff fed2 	bl	ae3c <Adc_Ipw_RestartConversion>
}
    b098:	e011      	b.n	b0be <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    b09a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b09e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0a2:	4611      	mov	r1, r2
    b0a4:	4618      	mov	r0, r3
    b0a6:	f7ff fdb9 	bl	ac1c <Adc_Ipw_UpdateQueue>
}
    b0aa:	e008      	b.n	b0be <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b0ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b0b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b0b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0b8:	4618      	mov	r0, r3
    b0ba:	f7ff febf 	bl	ae3c <Adc_Ipw_RestartConversion>
}
    b0be:	bf00      	nop
    b0c0:	b004      	add	sp, #16
    b0c2:	bd10      	pop	{r4, pc}
    b0c4:	1fff8d08 	.word	0x1fff8d08
    b0c8:	1fff8d0c 	.word	0x1fff8d0c

0000b0cc <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    b0cc:	b510      	push	{r4, lr}
    b0ce:	b088      	sub	sp, #32
    b0d0:	4604      	mov	r4, r0
    b0d2:	4608      	mov	r0, r1
    b0d4:	4611      	mov	r1, r2
    b0d6:	461a      	mov	r2, r3
    b0d8:	4623      	mov	r3, r4
    b0da:	f88d 300f 	strb.w	r3, [sp, #15]
    b0de:	4603      	mov	r3, r0
    b0e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    b0e4:	460b      	mov	r3, r1
    b0e6:	f88d 300e 	strb.w	r3, [sp, #14]
    b0ea:	4613      	mov	r3, r2
    b0ec:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b0f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0f4:	4a44      	ldr	r2, [pc, #272]	; (b208 <Adc_Ipw_EndConversion+0x13c>)
    b0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0fa:	68da      	ldr	r2, [r3, #12]
    b0fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b100:	005b      	lsls	r3, r3, #1
    b102:	4413      	add	r3, r2
    b104:	881b      	ldrh	r3, [r3, #0]
    b106:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b10a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b10e:	4a3e      	ldr	r2, [pc, #248]	; (b208 <Adc_Ipw_EndConversion+0x13c>)
    b110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b114:	685a      	ldr	r2, [r3, #4]
    b116:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    b11a:	2134      	movs	r1, #52	; 0x34
    b11c:	fb01 f303 	mul.w	r3, r1, r3
    b120:	4413      	add	r3, r2
    b122:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    b124:	9b06      	ldr	r3, [sp, #24]
    b126:	8b9a      	ldrh	r2, [r3, #28]
    b128:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b12c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b130:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b134:	f7ff fd98 	bl	ac68 <Adc_Ipw_CheckConversionChannels>
    b138:	4603      	mov	r3, r0
    b13a:	2b00      	cmp	r3, #0
    b13c:	d160      	bne.n	b200 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    b13e:	9b06      	ldr	r3, [sp, #24]
    b140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b144:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    b148:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b14c:	492f      	ldr	r1, [pc, #188]	; (b20c <Adc_Ipw_EndConversion+0x140>)
    b14e:	4613      	mov	r3, r2
    b150:	009b      	lsls	r3, r3, #2
    b152:	4413      	add	r3, r2
    b154:	009b      	lsls	r3, r3, #2
    b156:	440b      	add	r3, r1
    b158:	3310      	adds	r3, #16
    b15a:	781b      	ldrb	r3, [r3, #0]
    b15c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b160:	429a      	cmp	r2, r3
    b162:	d929      	bls.n	b1b8 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    b164:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b168:	4928      	ldr	r1, [pc, #160]	; (b20c <Adc_Ipw_EndConversion+0x140>)
    b16a:	4613      	mov	r3, r2
    b16c:	009b      	lsls	r3, r3, #2
    b16e:	4413      	add	r3, r2
    b170:	009b      	lsls	r3, r3, #2
    b172:	440b      	add	r3, r1
    b174:	3310      	adds	r3, #16
    b176:	781b      	ldrb	r3, [r3, #0]
    b178:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b17c:	1ad3      	subs	r3, r2, r3
    b17e:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    b182:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b186:	2b0f      	cmp	r3, #15
    b188:	d805      	bhi.n	b196 <Adc_Ipw_EndConversion+0xca>
    b18a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b18e:	f003 030f 	and.w	r3, r3, #15
    b192:	b2db      	uxtb	r3, r3
    b194:	e000      	b.n	b198 <Adc_Ipw_EndConversion+0xcc>
    b196:	2310      	movs	r3, #16
    b198:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    b19c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b1a0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b1a4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b1a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1ac:	9300      	str	r3, [sp, #0]
    b1ae:	4613      	mov	r3, r2
    b1b0:	220f      	movs	r2, #15
    b1b2:	f7ff f993 	bl	a4dc <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    b1b6:	e023      	b.n	b200 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    b1b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b1bc:	4913      	ldr	r1, [pc, #76]	; (b20c <Adc_Ipw_EndConversion+0x140>)
    b1be:	4613      	mov	r3, r2
    b1c0:	009b      	lsls	r3, r3, #2
    b1c2:	4413      	add	r3, r2
    b1c4:	009b      	lsls	r3, r3, #2
    b1c6:	440b      	add	r3, r1
    b1c8:	3308      	adds	r3, #8
    b1ca:	881b      	ldrh	r3, [r3, #0]
    b1cc:	b29b      	uxth	r3, r3
    b1ce:	3301      	adds	r3, #1
    b1d0:	b298      	uxth	r0, r3
    b1d2:	490e      	ldr	r1, [pc, #56]	; (b20c <Adc_Ipw_EndConversion+0x140>)
    b1d4:	4613      	mov	r3, r2
    b1d6:	009b      	lsls	r3, r3, #2
    b1d8:	4413      	add	r3, r2
    b1da:	009b      	lsls	r3, r3, #2
    b1dc:	440b      	add	r3, r1
    b1de:	3308      	adds	r3, #8
    b1e0:	4602      	mov	r2, r0
    b1e2:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    b1e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	d009      	beq.n	b200 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    b1ec:	9b06      	ldr	r3, [sp, #24]
    b1ee:	8b9a      	ldrh	r2, [r3, #28]
    b1f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1f4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b1f8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b1fc:	f7ff feae 	bl	af5c <Adc_Ipw_UpdateSoftwareGroupState>
}
    b200:	bf00      	nop
    b202:	b008      	add	sp, #32
    b204:	bd10      	pop	{r4, pc}
    b206:	bf00      	nop
    b208:	1fff8d08 	.word	0x1fff8d08
    b20c:	1fff8d0c 	.word	0x1fff8d0c

0000b210 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    b210:	b084      	sub	sp, #16
    b212:	9003      	str	r0, [sp, #12]
    b214:	9102      	str	r1, [sp, #8]
    b216:	4611      	mov	r1, r2
    b218:	461a      	mov	r2, r3
    b21a:	460b      	mov	r3, r1
    b21c:	f8ad 3006 	strh.w	r3, [sp, #6]
    b220:	4613      	mov	r3, r2
    b222:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    b226:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b22a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b22e:	fb02 f303 	mul.w	r3, r2, r3
    b232:	005b      	lsls	r3, r3, #1
    b234:	9a02      	ldr	r2, [sp, #8]
    b236:	4413      	add	r3, r2
    b238:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b23c:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b23e:	bf00      	nop
    b240:	b004      	add	sp, #16
    b242:	4770      	bx	lr

0000b244 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    b244:	b500      	push	{lr}
    b246:	b085      	sub	sp, #20
    b248:	4603      	mov	r3, r0
    b24a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    b24e:	f7ff fce1 	bl	ac14 <Adc_GetCoreID>
    b252:	4603      	mov	r3, r0
    b254:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    b258:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b25c:	b2db      	uxtb	r3, r3
    b25e:	461a      	mov	r2, r3
    b260:	4b14      	ldr	r3, [pc, #80]	; (b2b4 <Adc_Ipw_EndConversionNotification+0x70>)
    b262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b266:	681a      	ldr	r2, [r3, #0]
    b268:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b26c:	4413      	add	r3, r2
    b26e:	f893 3020 	ldrb.w	r3, [r3, #32]
    b272:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    b276:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b27a:	4a0f      	ldr	r2, [pc, #60]	; (b2b8 <Adc_Ipw_EndConversionNotification+0x74>)
    b27c:	00db      	lsls	r3, r3, #3
    b27e:	4413      	add	r3, r2
    b280:	885b      	ldrh	r3, [r3, #2]
    b282:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    b286:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b28a:	4a0b      	ldr	r2, [pc, #44]	; (b2b8 <Adc_Ipw_EndConversionNotification+0x74>)
    b28c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b290:	b29b      	uxth	r3, r3
    b292:	2b00      	cmp	r3, #0
    b294:	d009      	beq.n	b2aa <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    b296:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b29a:	b2db      	uxtb	r3, r3
    b29c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b2a0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b2a4:	2201      	movs	r2, #1
    b2a6:	f7ff ff11 	bl	b0cc <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    b2aa:	bf00      	nop
    b2ac:	b005      	add	sp, #20
    b2ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b2b2:	bf00      	nop
    b2b4:	1fff8d08 	.word	0x1fff8d08
    b2b8:	1fff8d34 	.word	0x1fff8d34

0000b2bc <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    b2bc:	b500      	push	{lr}
    b2be:	b085      	sub	sp, #20
    b2c0:	4603      	mov	r3, r0
    b2c2:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    b2c6:	2300      	movs	r3, #0
    b2c8:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b2cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b2d0:	4618      	mov	r0, r3
    b2d2:	f7ff ffb7 	bl	b244 <Adc_Ipw_EndConversionNotification>
}
    b2d6:	bf00      	nop
    b2d8:	b005      	add	sp, #20
    b2da:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2de <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    b2de:	b500      	push	{lr}
    b2e0:	b085      	sub	sp, #20
    b2e2:	4603      	mov	r3, r0
    b2e4:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    b2e8:	2301      	movs	r3, #1
    b2ea:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b2ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b2f2:	4618      	mov	r0, r3
    b2f4:	f7ff ffa6 	bl	b244 <Adc_Ipw_EndConversionNotification>
}
    b2f8:	bf00      	nop
    b2fa:	b005      	add	sp, #20
    b2fc:	f85d fb04 	ldr.w	pc, [sp], #4

0000b300 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    b300:	b084      	sub	sp, #16
    b302:	9003      	str	r0, [sp, #12]
    b304:	9201      	str	r2, [sp, #4]
    b306:	461a      	mov	r2, r3
    b308:	460b      	mov	r3, r1
    b30a:	f88d 300b 	strb.w	r3, [sp, #11]
    b30e:	4613      	mov	r3, r2
    b310:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    b314:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b318:	2b00      	cmp	r3, #0
    b31a:	d016      	beq.n	b34a <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    b31c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b320:	9903      	ldr	r1, [sp, #12]
    b322:	4613      	mov	r3, r2
    b324:	009b      	lsls	r3, r3, #2
    b326:	4413      	add	r3, r2
    b328:	00db      	lsls	r3, r3, #3
    b32a:	440b      	add	r3, r1
    b32c:	3310      	adds	r3, #16
    b32e:	6819      	ldr	r1, [r3, #0]
    b330:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b334:	9b01      	ldr	r3, [sp, #4]
    b336:	4319      	orrs	r1, r3
    b338:	9803      	ldr	r0, [sp, #12]
    b33a:	4613      	mov	r3, r2
    b33c:	009b      	lsls	r3, r3, #2
    b33e:	4413      	add	r3, r2
    b340:	00db      	lsls	r3, r3, #3
    b342:	4403      	add	r3, r0
    b344:	3310      	adds	r3, #16
    b346:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    b348:	e016      	b.n	b378 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    b34a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b34e:	9903      	ldr	r1, [sp, #12]
    b350:	4613      	mov	r3, r2
    b352:	009b      	lsls	r3, r3, #2
    b354:	4413      	add	r3, r2
    b356:	00db      	lsls	r3, r3, #3
    b358:	440b      	add	r3, r1
    b35a:	3310      	adds	r3, #16
    b35c:	6819      	ldr	r1, [r3, #0]
    b35e:	9b01      	ldr	r3, [sp, #4]
    b360:	43db      	mvns	r3, r3
    b362:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b366:	4019      	ands	r1, r3
    b368:	9803      	ldr	r0, [sp, #12]
    b36a:	4613      	mov	r3, r2
    b36c:	009b      	lsls	r3, r3, #2
    b36e:	4413      	add	r3, r2
    b370:	00db      	lsls	r3, r3, #3
    b372:	4403      	add	r3, r0
    b374:	3310      	adds	r3, #16
    b376:	6019      	str	r1, [r3, #0]
}
    b378:	bf00      	nop
    b37a:	b004      	add	sp, #16
    b37c:	4770      	bx	lr

0000b37e <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    b37e:	b082      	sub	sp, #8
    b380:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    b382:	9b01      	ldr	r3, [sp, #4]
    b384:	681b      	ldr	r3, [r3, #0]
    b386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    b38a:	9b01      	ldr	r3, [sp, #4]
    b38c:	601a      	str	r2, [r3, #0]
}
    b38e:	bf00      	nop
    b390:	b002      	add	sp, #8
    b392:	4770      	bx	lr

0000b394 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    b394:	b082      	sub	sp, #8
    b396:	9001      	str	r0, [sp, #4]
    b398:	460b      	mov	r3, r1
    b39a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    b39e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d006      	beq.n	b3b4 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    b3a6:	9b01      	ldr	r3, [sp, #4]
    b3a8:	681b      	ldr	r3, [r3, #0]
    b3aa:	f043 0202 	orr.w	r2, r3, #2
    b3ae:	9b01      	ldr	r3, [sp, #4]
    b3b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    b3b2:	e005      	b.n	b3c0 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    b3b4:	9b01      	ldr	r3, [sp, #4]
    b3b6:	681b      	ldr	r3, [r3, #0]
    b3b8:	f023 0202 	bic.w	r2, r3, #2
    b3bc:	9b01      	ldr	r3, [sp, #4]
    b3be:	601a      	str	r2, [r3, #0]
}
    b3c0:	bf00      	nop
    b3c2:	b002      	add	sp, #8
    b3c4:	4770      	bx	lr

0000b3c6 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b3c6:	b086      	sub	sp, #24
    b3c8:	9003      	str	r0, [sp, #12]
    b3ca:	460b      	mov	r3, r1
    b3cc:	9201      	str	r2, [sp, #4]
    b3ce:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    b3d2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b3d6:	9903      	ldr	r1, [sp, #12]
    b3d8:	4613      	mov	r3, r2
    b3da:	009b      	lsls	r3, r3, #2
    b3dc:	4413      	add	r3, r2
    b3de:	00db      	lsls	r3, r3, #3
    b3e0:	440b      	add	r3, r1
    b3e2:	3310      	adds	r3, #16
    b3e4:	681b      	ldr	r3, [r3, #0]
    b3e6:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    b3e8:	9b05      	ldr	r3, [sp, #20]
    b3ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    b3ee:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    b3f0:	9b01      	ldr	r3, [sp, #4]
    b3f2:	781b      	ldrb	r3, [r3, #0]
    b3f4:	461a      	mov	r2, r3
    b3f6:	9b05      	ldr	r3, [sp, #20]
    b3f8:	4313      	orrs	r3, r2
    b3fa:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    b3fc:	9b01      	ldr	r3, [sp, #4]
    b3fe:	785b      	ldrb	r3, [r3, #1]
    b400:	021b      	lsls	r3, r3, #8
    b402:	b29b      	uxth	r3, r3
    b404:	9a05      	ldr	r2, [sp, #20]
    b406:	4313      	orrs	r3, r2
    b408:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    b40a:	9b01      	ldr	r3, [sp, #4]
    b40c:	789b      	ldrb	r3, [r3, #2]
    b40e:	041b      	lsls	r3, r3, #16
    b410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b414:	9a05      	ldr	r2, [sp, #20]
    b416:	4313      	orrs	r3, r2
    b418:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    b41a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b41e:	9903      	ldr	r1, [sp, #12]
    b420:	4613      	mov	r3, r2
    b422:	009b      	lsls	r3, r3, #2
    b424:	4413      	add	r3, r2
    b426:	00db      	lsls	r3, r3, #3
    b428:	440b      	add	r3, r1
    b42a:	3310      	adds	r3, #16
    b42c:	9a05      	ldr	r2, [sp, #20]
    b42e:	601a      	str	r2, [r3, #0]
}
    b430:	bf00      	nop
    b432:	b006      	add	sp, #24
    b434:	4770      	bx	lr

0000b436 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    b436:	b082      	sub	sp, #8
    b438:	9001      	str	r0, [sp, #4]
    b43a:	460b      	mov	r3, r1
    b43c:	f88d 3003 	strb.w	r3, [sp, #3]
    b440:	4613      	mov	r3, r2
    b442:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    b446:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b44a:	9901      	ldr	r1, [sp, #4]
    b44c:	4613      	mov	r3, r2
    b44e:	009b      	lsls	r3, r3, #2
    b450:	4413      	add	r3, r2
    b452:	00db      	lsls	r3, r3, #3
    b454:	440b      	add	r3, r1
    b456:	3314      	adds	r3, #20
    b458:	6819      	ldr	r1, [r3, #0]
    b45a:	f8bd 3000 	ldrh.w	r3, [sp]
    b45e:	041b      	lsls	r3, r3, #16
    b460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b464:	43db      	mvns	r3, r3
    b466:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b46a:	4019      	ands	r1, r3
    b46c:	9801      	ldr	r0, [sp, #4]
    b46e:	4613      	mov	r3, r2
    b470:	009b      	lsls	r3, r3, #2
    b472:	4413      	add	r3, r2
    b474:	00db      	lsls	r3, r3, #3
    b476:	4403      	add	r3, r0
    b478:	3314      	adds	r3, #20
    b47a:	6019      	str	r1, [r3, #0]
}
    b47c:	bf00      	nop
    b47e:	b002      	add	sp, #8
    b480:	4770      	bx	lr

0000b482 <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    b482:	b500      	push	{lr}
    b484:	b087      	sub	sp, #28
    b486:	9001      	str	r0, [sp, #4]
    b488:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b48a:	4a50      	ldr	r2, [pc, #320]	; (b5cc <Pdb_Adc_Ip_Init+0x14a>)
    b48c:	9b01      	ldr	r3, [sp, #4]
    b48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b492:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    b494:	2300      	movs	r3, #0
    b496:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    b498:	9b00      	ldr	r3, [sp, #0]
    b49a:	681b      	ldr	r3, [r3, #0]
    b49c:	049b      	lsls	r3, r3, #18
    b49e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    b4a2:	9a04      	ldr	r2, [sp, #16]
    b4a4:	4313      	orrs	r3, r2
    b4a6:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    b4a8:	9b00      	ldr	r3, [sp, #0]
    b4aa:	685b      	ldr	r3, [r3, #4]
    b4ac:	031b      	lsls	r3, r3, #12
    b4ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    b4b2:	9a04      	ldr	r2, [sp, #16]
    b4b4:	4313      	orrs	r3, r2
    b4b6:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    b4b8:	9b00      	ldr	r3, [sp, #0]
    b4ba:	689b      	ldr	r3, [r3, #8]
    b4bc:	009b      	lsls	r3, r3, #2
    b4be:	f003 030c 	and.w	r3, r3, #12
    b4c2:	9a04      	ldr	r2, [sp, #16]
    b4c4:	4313      	orrs	r3, r2
    b4c6:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    b4c8:	9b00      	ldr	r3, [sp, #0]
    b4ca:	68db      	ldr	r3, [r3, #12]
    b4cc:	021b      	lsls	r3, r3, #8
    b4ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b4d2:	9a04      	ldr	r2, [sp, #16]
    b4d4:	4313      	orrs	r3, r2
    b4d6:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    b4d8:	9b00      	ldr	r3, [sp, #0]
    b4da:	7c1b      	ldrb	r3, [r3, #16]
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d003      	beq.n	b4e8 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    b4e0:	9b04      	ldr	r3, [sp, #16]
    b4e2:	f043 0302 	orr.w	r3, r3, #2
    b4e6:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    b4e8:	9b00      	ldr	r3, [sp, #0]
    b4ea:	7c5b      	ldrb	r3, [r3, #17]
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	d003      	beq.n	b4f8 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    b4f0:	9b04      	ldr	r3, [sp, #16]
    b4f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b4f6:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    b4f8:	9b00      	ldr	r3, [sp, #0]
    b4fa:	69db      	ldr	r3, [r3, #28]
    b4fc:	2b00      	cmp	r3, #0
    b4fe:	d003      	beq.n	b508 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    b500:	9b04      	ldr	r3, [sp, #16]
    b502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b506:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    b508:	9b03      	ldr	r3, [sp, #12]
    b50a:	9a04      	ldr	r2, [sp, #16]
    b50c:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    b50e:	9b00      	ldr	r3, [sp, #0]
    b510:	8a5b      	ldrh	r3, [r3, #18]
    b512:	4619      	mov	r1, r3
    b514:	9801      	ldr	r0, [sp, #4]
    b516:	f000 f98f 	bl	b838 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    b51a:	9b00      	ldr	r3, [sp, #0]
    b51c:	7d1b      	ldrb	r3, [r3, #20]
    b51e:	2b00      	cmp	r3, #0
    b520:	d03e      	beq.n	b5a0 <Pdb_Adc_Ip_Init+0x11e>
    b522:	9b00      	ldr	r3, [sp, #0]
    b524:	699b      	ldr	r3, [r3, #24]
    b526:	2b00      	cmp	r3, #0
    b528:	d03a      	beq.n	b5a0 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b52a:	2300      	movs	r3, #0
    b52c:	f88d 3017 	strb.w	r3, [sp, #23]
    b530:	e030      	b.n	b594 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    b532:	9b00      	ldr	r3, [sp, #0]
    b534:	6999      	ldr	r1, [r3, #24]
    b536:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b53a:	4613      	mov	r3, r2
    b53c:	009b      	lsls	r3, r3, #2
    b53e:	4413      	add	r3, r2
    b540:	009b      	lsls	r3, r3, #2
    b542:	440b      	add	r3, r1
    b544:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    b546:	9b02      	ldr	r3, [sp, #8]
    b548:	7819      	ldrb	r1, [r3, #0]
    b54a:	9b02      	ldr	r3, [sp, #8]
    b54c:	3301      	adds	r3, #1
    b54e:	461a      	mov	r2, r3
    b550:	9803      	ldr	r0, [sp, #12]
    b552:	f7ff ff38 	bl	b3c6 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b556:	2300      	movs	r3, #0
    b558:	f88d 3016 	strb.w	r3, [sp, #22]
    b55c:	e011      	b.n	b582 <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    b55e:	9b02      	ldr	r3, [sp, #8]
    b560:	7819      	ldrb	r1, [r3, #0]
    b562:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b566:	9a02      	ldr	r2, [sp, #8]
    b568:	005b      	lsls	r3, r3, #1
    b56a:	4413      	add	r3, r2
    b56c:	889b      	ldrh	r3, [r3, #4]
    b56e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    b572:	9801      	ldr	r0, [sp, #4]
    b574:	f000 fa74 	bl	ba60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b578:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b57c:	3301      	adds	r3, #1
    b57e:	f88d 3016 	strb.w	r3, [sp, #22]
    b582:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b586:	2b07      	cmp	r3, #7
    b588:	d9e9      	bls.n	b55e <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b58a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b58e:	3301      	adds	r3, #1
    b590:	f88d 3017 	strb.w	r3, [sp, #23]
    b594:	9b00      	ldr	r3, [sp, #0]
    b596:	7d1b      	ldrb	r3, [r3, #20]
    b598:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b59c:	429a      	cmp	r2, r3
    b59e:	d3c8      	bcc.n	b532 <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    b5a0:	9801      	ldr	r0, [sp, #4]
    b5a2:	f000 f89b 	bl	b6dc <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    b5a6:	9801      	ldr	r0, [sp, #4]
    b5a8:	f000 f92e 	bl	b808 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    b5ac:	9b00      	ldr	r3, [sp, #0]
    b5ae:	69da      	ldr	r2, [r3, #28]
    b5b0:	4907      	ldr	r1, [pc, #28]	; (b5d0 <Pdb_Adc_Ip_Init+0x14e>)
    b5b2:	9b01      	ldr	r3, [sp, #4]
    b5b4:	00db      	lsls	r3, r3, #3
    b5b6:	440b      	add	r3, r1
    b5b8:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    b5ba:	4a05      	ldr	r2, [pc, #20]	; (b5d0 <Pdb_Adc_Ip_Init+0x14e>)
    b5bc:	9b01      	ldr	r3, [sp, #4]
    b5be:	2101      	movs	r1, #1
    b5c0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b5c4:	bf00      	nop
    b5c6:	b007      	add	sp, #28
    b5c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b5cc:	00011be4 	.word	0x00011be4
    b5d0:	1fff8ddc 	.word	0x1fff8ddc

0000b5d4 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    b5d4:	b500      	push	{lr}
    b5d6:	b097      	sub	sp, #92	; 0x5c
    b5d8:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    b5da:	2300      	movs	r3, #0
    b5dc:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    b5de:	2300      	movs	r3, #0
    b5e0:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    b5e2:	2300      	movs	r3, #0
    b5e4:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    b5e6:	2300      	movs	r3, #0
    b5e8:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    b5ea:	2300      	movs	r3, #0
    b5ec:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    b5f0:	2300      	movs	r3, #0
    b5f2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    b5f6:	2300      	movs	r3, #0
    b5f8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    b5fc:	2302      	movs	r3, #2
    b5fe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b602:	2300      	movs	r3, #0
    b604:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b608:	e04d      	b.n	b6a6 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    b60a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b60e:	4613      	mov	r3, r2
    b610:	009b      	lsls	r3, r3, #2
    b612:	4413      	add	r3, r2
    b614:	009b      	lsls	r3, r3, #2
    b616:	aa16      	add	r2, sp, #88	; 0x58
    b618:	4413      	add	r3, r2
    b61a:	3b4c      	subs	r3, #76	; 0x4c
    b61c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b620:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    b622:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b626:	4613      	mov	r3, r2
    b628:	009b      	lsls	r3, r3, #2
    b62a:	4413      	add	r3, r2
    b62c:	009b      	lsls	r3, r3, #2
    b62e:	aa16      	add	r2, sp, #88	; 0x58
    b630:	4413      	add	r3, r2
    b632:	3b4b      	subs	r3, #75	; 0x4b
    b634:	2200      	movs	r2, #0
    b636:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    b638:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b63c:	4613      	mov	r3, r2
    b63e:	009b      	lsls	r3, r3, #2
    b640:	4413      	add	r3, r2
    b642:	009b      	lsls	r3, r3, #2
    b644:	aa16      	add	r2, sp, #88	; 0x58
    b646:	4413      	add	r3, r2
    b648:	3b4a      	subs	r3, #74	; 0x4a
    b64a:	2200      	movs	r2, #0
    b64c:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    b64e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b652:	4613      	mov	r3, r2
    b654:	009b      	lsls	r3, r3, #2
    b656:	4413      	add	r3, r2
    b658:	009b      	lsls	r3, r3, #2
    b65a:	aa16      	add	r2, sp, #88	; 0x58
    b65c:	4413      	add	r3, r2
    b65e:	3b49      	subs	r3, #73	; 0x49
    b660:	2200      	movs	r2, #0
    b662:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b664:	2300      	movs	r3, #0
    b666:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b66a:	e013      	b.n	b694 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    b66c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b670:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    b674:	4613      	mov	r3, r2
    b676:	009b      	lsls	r3, r3, #2
    b678:	4413      	add	r3, r2
    b67a:	005b      	lsls	r3, r3, #1
    b67c:	440b      	add	r3, r1
    b67e:	005b      	lsls	r3, r3, #1
    b680:	aa16      	add	r2, sp, #88	; 0x58
    b682:	4413      	add	r3, r2
    b684:	2200      	movs	r2, #0
    b686:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b68a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b68e:	3301      	adds	r3, #1
    b690:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b694:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b698:	2b07      	cmp	r3, #7
    b69a:	d9e7      	bls.n	b66c <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b69c:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b6a0:	3301      	adds	r3, #1
    b6a2:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b6a6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b6aa:	2b01      	cmp	r3, #1
    b6ac:	d9ad      	bls.n	b60a <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    b6ae:	ab03      	add	r3, sp, #12
    b6b0:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    b6b2:	2300      	movs	r3, #0
    b6b4:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    b6b6:	ab0d      	add	r3, sp, #52	; 0x34
    b6b8:	4619      	mov	r1, r3
    b6ba:	9801      	ldr	r0, [sp, #4]
    b6bc:	f7ff fee1 	bl	b482 <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    b6c0:	9801      	ldr	r0, [sp, #4]
    b6c2:	f000 f823 	bl	b70c <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    b6c6:	4a04      	ldr	r2, [pc, #16]	; (b6d8 <Pdb_Adc_Ip_DeInit+0x104>)
    b6c8:	9b01      	ldr	r3, [sp, #4]
    b6ca:	2100      	movs	r1, #0
    b6cc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b6d0:	bf00      	nop
    b6d2:	b017      	add	sp, #92	; 0x5c
    b6d4:	f85d fb04 	ldr.w	pc, [sp], #4
    b6d8:	1fff8ddc 	.word	0x1fff8ddc

0000b6dc <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    b6dc:	b500      	push	{lr}
    b6de:	b085      	sub	sp, #20
    b6e0:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6e2:	4a09      	ldr	r2, [pc, #36]	; (b708 <Pdb_Adc_Ip_Enable+0x2c>)
    b6e4:	9b01      	ldr	r3, [sp, #4]
    b6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6ea:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    b6ec:	f001 fdbe 	bl	d26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    b6f0:	9b03      	ldr	r3, [sp, #12]
    b6f2:	681b      	ldr	r3, [r3, #0]
    b6f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    b6f8:	9b03      	ldr	r3, [sp, #12]
    b6fa:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    b6fc:	f001 fde2 	bl	d2c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    b700:	bf00      	nop
    b702:	b005      	add	sp, #20
    b704:	f85d fb04 	ldr.w	pc, [sp], #4
    b708:	00011be4 	.word	0x00011be4

0000b70c <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    b70c:	b500      	push	{lr}
    b70e:	b085      	sub	sp, #20
    b710:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b712:	4a08      	ldr	r2, [pc, #32]	; (b734 <Pdb_Adc_Ip_Disable+0x28>)
    b714:	9b01      	ldr	r3, [sp, #4]
    b716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b71a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    b71c:	f001 fdf8 	bl	d310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b720:	9803      	ldr	r0, [sp, #12]
    b722:	f7ff fe2c 	bl	b37e <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    b726:	f001 fe1f 	bl	d368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    b72a:	bf00      	nop
    b72c:	b005      	add	sp, #20
    b72e:	f85d fb04 	ldr.w	pc, [sp], #4
    b732:	bf00      	nop
    b734:	00011be4 	.word	0x00011be4

0000b738 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    b738:	b500      	push	{lr}
    b73a:	b085      	sub	sp, #20
    b73c:	9001      	str	r0, [sp, #4]
    b73e:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b740:	4a0e      	ldr	r2, [pc, #56]	; (b77c <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    b742:	9b01      	ldr	r3, [sp, #4]
    b744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b748:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    b74a:	f001 fe33 	bl	d3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    b74e:	9b03      	ldr	r3, [sp, #12]
    b750:	681b      	ldr	r3, [r3, #0]
    b752:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    b754:	9b02      	ldr	r3, [sp, #8]
    b756:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    b75a:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    b75c:	9b00      	ldr	r3, [sp, #0]
    b75e:	021b      	lsls	r3, r3, #8
    b760:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b764:	9a02      	ldr	r2, [sp, #8]
    b766:	4313      	orrs	r3, r2
    b768:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    b76a:	9b03      	ldr	r3, [sp, #12]
    b76c:	9a02      	ldr	r2, [sp, #8]
    b76e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    b770:	f001 fe4c 	bl	d40c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    b774:	bf00      	nop
    b776:	b005      	add	sp, #20
    b778:	f85d fb04 	ldr.w	pc, [sp], #4
    b77c:	00011be4 	.word	0x00011be4

0000b780 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    b780:	b500      	push	{lr}
    b782:	b085      	sub	sp, #20
    b784:	9001      	str	r0, [sp, #4]
    b786:	460b      	mov	r3, r1
    b788:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b78c:	4a09      	ldr	r2, [pc, #36]	; (b7b4 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    b78e:	9b01      	ldr	r3, [sp, #4]
    b790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b794:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    b796:	f001 fe5f 	bl	d458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    b79a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b79e:	4619      	mov	r1, r3
    b7a0:	9803      	ldr	r0, [sp, #12]
    b7a2:	f7ff fdf7 	bl	b394 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    b7a6:	f001 fe83 	bl	d4b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    b7aa:	bf00      	nop
    b7ac:	b005      	add	sp, #20
    b7ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b7b2:	bf00      	nop
    b7b4:	00011be4 	.word	0x00011be4

0000b7b8 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    b7b8:	b500      	push	{lr}
    b7ba:	b085      	sub	sp, #20
    b7bc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7be:	4a09      	ldr	r2, [pc, #36]	; (b7e4 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    b7c0:	9b01      	ldr	r3, [sp, #4]
    b7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7c6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    b7c8:	f001 fe98 	bl	d4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    b7cc:	9b03      	ldr	r3, [sp, #12]
    b7ce:	681b      	ldr	r3, [r3, #0]
    b7d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    b7d4:	9b03      	ldr	r3, [sp, #12]
    b7d6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    b7d8:	f001 febc 	bl	d554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    b7dc:	bf00      	nop
    b7de:	b005      	add	sp, #20
    b7e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b7e4:	00011be4 	.word	0x00011be4

0000b7e8 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    b7e8:	b084      	sub	sp, #16
    b7ea:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7ec:	4a05      	ldr	r2, [pc, #20]	; (b804 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    b7ee:	9b01      	ldr	r3, [sp, #4]
    b7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7f4:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    b7f6:	9b03      	ldr	r3, [sp, #12]
    b7f8:	689b      	ldr	r3, [r3, #8]
    b7fa:	b29b      	uxth	r3, r3
}
    b7fc:	4618      	mov	r0, r3
    b7fe:	b004      	add	sp, #16
    b800:	4770      	bx	lr
    b802:	bf00      	nop
    b804:	00011be4 	.word	0x00011be4

0000b808 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    b808:	b500      	push	{lr}
    b80a:	b085      	sub	sp, #20
    b80c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b80e:	4a09      	ldr	r2, [pc, #36]	; (b834 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    b810:	9b01      	ldr	r3, [sp, #4]
    b812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b816:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    b818:	f001 fec2 	bl	d5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    b81c:	9b03      	ldr	r3, [sp, #12]
    b81e:	681b      	ldr	r3, [r3, #0]
    b820:	f043 0201 	orr.w	r2, r3, #1
    b824:	9b03      	ldr	r3, [sp, #12]
    b826:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    b828:	f001 fee6 	bl	d5f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    b82c:	bf00      	nop
    b82e:	b005      	add	sp, #20
    b830:	f85d fb04 	ldr.w	pc, [sp], #4
    b834:	00011be4 	.word	0x00011be4

0000b838 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    b838:	b500      	push	{lr}
    b83a:	b085      	sub	sp, #20
    b83c:	9001      	str	r0, [sp, #4]
    b83e:	460b      	mov	r3, r1
    b840:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b844:	4a0d      	ldr	r2, [pc, #52]	; (b87c <Pdb_Adc_Ip_SetModulus+0x44>)
    b846:	9b01      	ldr	r3, [sp, #4]
    b848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b84c:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    b84e:	f002 f989 	bl	db64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    b852:	9b03      	ldr	r3, [sp, #12]
    b854:	685b      	ldr	r3, [r3, #4]
    b856:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    b858:	9b02      	ldr	r3, [sp, #8]
    b85a:	0c1b      	lsrs	r3, r3, #16
    b85c:	041b      	lsls	r3, r3, #16
    b85e:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    b860:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b864:	9a02      	ldr	r2, [sp, #8]
    b866:	4313      	orrs	r3, r2
    b868:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    b86a:	9b03      	ldr	r3, [sp, #12]
    b86c:	9a02      	ldr	r2, [sp, #8]
    b86e:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    b870:	f002 f9a4 	bl	dbbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    b874:	bf00      	nop
    b876:	b005      	add	sp, #20
    b878:	f85d fb04 	ldr.w	pc, [sp], #4
    b87c:	00011be4 	.word	0x00011be4

0000b880 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b880:	b500      	push	{lr}
    b882:	b087      	sub	sp, #28
    b884:	9003      	str	r0, [sp, #12]
    b886:	460b      	mov	r3, r1
    b888:	9201      	str	r2, [sp, #4]
    b88a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b88e:	4a0a      	ldr	r2, [pc, #40]	; (b8b8 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    b890:	9b03      	ldr	r3, [sp, #12]
    b892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b896:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    b898:	f001 ff26 	bl	d6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    b89c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b8a0:	9a01      	ldr	r2, [sp, #4]
    b8a2:	4619      	mov	r1, r3
    b8a4:	9805      	ldr	r0, [sp, #20]
    b8a6:	f7ff fd8e 	bl	b3c6 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    b8aa:	f001 ff49 	bl	d740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    b8ae:	bf00      	nop
    b8b0:	b007      	add	sp, #28
    b8b2:	f85d fb04 	ldr.w	pc, [sp], #4
    b8b6:	bf00      	nop
    b8b8:	00011be4 	.word	0x00011be4

0000b8bc <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    b8bc:	b084      	sub	sp, #16
    b8be:	9001      	str	r0, [sp, #4]
    b8c0:	460b      	mov	r3, r1
    b8c2:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8c6:	4a0c      	ldr	r2, [pc, #48]	; (b8f8 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    b8c8:	9b01      	ldr	r3, [sp, #4]
    b8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ce:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    b8d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b8d4:	9903      	ldr	r1, [sp, #12]
    b8d6:	4613      	mov	r3, r2
    b8d8:	009b      	lsls	r3, r3, #2
    b8da:	4413      	add	r3, r2
    b8dc:	00db      	lsls	r3, r3, #3
    b8de:	440b      	add	r3, r1
    b8e0:	3314      	adds	r3, #20
    b8e2:	681b      	ldr	r3, [r3, #0]
    b8e4:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    b8e6:	9b02      	ldr	r3, [sp, #8]
    b8e8:	0c1b      	lsrs	r3, r3, #16
    b8ea:	b2db      	uxtb	r3, r3
    b8ec:	9302      	str	r3, [sp, #8]

    return Result;
    b8ee:	9b02      	ldr	r3, [sp, #8]
}
    b8f0:	4618      	mov	r0, r3
    b8f2:	b004      	add	sp, #16
    b8f4:	4770      	bx	lr
    b8f6:	bf00      	nop
    b8f8:	00011be4 	.word	0x00011be4

0000b8fc <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    b8fc:	b500      	push	{lr}
    b8fe:	b085      	sub	sp, #20
    b900:	9001      	str	r0, [sp, #4]
    b902:	460b      	mov	r3, r1
    b904:	f88d 3003 	strb.w	r3, [sp, #3]
    b908:	4613      	mov	r3, r2
    b90a:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b90e:	4a0a      	ldr	r2, [pc, #40]	; (b938 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    b910:	9b01      	ldr	r3, [sp, #4]
    b912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b916:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    b918:	f002 f880 	bl	da1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    b91c:	f8bd 2000 	ldrh.w	r2, [sp]
    b920:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b924:	4619      	mov	r1, r3
    b926:	9803      	ldr	r0, [sp, #12]
    b928:	f7ff fd85 	bl	b436 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    b92c:	f002 f8a2 	bl	da74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    b930:	bf00      	nop
    b932:	b005      	add	sp, #20
    b934:	f85d fb04 	ldr.w	pc, [sp], #4
    b938:	00011be4 	.word	0x00011be4

0000b93c <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    b93c:	b500      	push	{lr}
    b93e:	b085      	sub	sp, #20
    b940:	9001      	str	r0, [sp, #4]
    b942:	4608      	mov	r0, r1
    b944:	4611      	mov	r1, r2
    b946:	461a      	mov	r2, r3
    b948:	4603      	mov	r3, r0
    b94a:	f88d 3003 	strb.w	r3, [sp, #3]
    b94e:	460b      	mov	r3, r1
    b950:	f88d 3002 	strb.w	r3, [sp, #2]
    b954:	4613      	mov	r3, r2
    b956:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b95a:	4a10      	ldr	r2, [pc, #64]	; (b99c <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    b95c:	9b01      	ldr	r3, [sp, #4]
    b95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b962:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b964:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b968:	2201      	movs	r2, #1
    b96a:	fa02 f303 	lsl.w	r3, r2, r3
    b96e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    b970:	9b02      	ldr	r3, [sp, #8]
    b972:	041b      	lsls	r3, r3, #16
    b974:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b978:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    b97a:	f001 ff07 	bl	d78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b97e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b982:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b986:	9a02      	ldr	r2, [sp, #8]
    b988:	9803      	ldr	r0, [sp, #12]
    b98a:	f7ff fcb9 	bl	b300 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    b98e:	f001 ff29 	bl	d7e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    b992:	bf00      	nop
    b994:	b005      	add	sp, #20
    b996:	f85d fb04 	ldr.w	pc, [sp], #4
    b99a:	bf00      	nop
    b99c:	00011be4 	.word	0x00011be4

0000b9a0 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    b9a0:	b500      	push	{lr}
    b9a2:	b085      	sub	sp, #20
    b9a4:	9001      	str	r0, [sp, #4]
    b9a6:	4608      	mov	r0, r1
    b9a8:	4611      	mov	r1, r2
    b9aa:	461a      	mov	r2, r3
    b9ac:	4603      	mov	r3, r0
    b9ae:	f88d 3003 	strb.w	r3, [sp, #3]
    b9b2:	460b      	mov	r3, r1
    b9b4:	f88d 3002 	strb.w	r3, [sp, #2]
    b9b8:	4613      	mov	r3, r2
    b9ba:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b9be:	4a0f      	ldr	r2, [pc, #60]	; (b9fc <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    b9c0:	9b01      	ldr	r3, [sp, #4]
    b9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9c6:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b9c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b9cc:	2201      	movs	r2, #1
    b9ce:	fa02 f303 	lsl.w	r3, r2, r3
    b9d2:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    b9d4:	9b02      	ldr	r3, [sp, #8]
    b9d6:	b2db      	uxtb	r3, r3
    b9d8:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    b9da:	f001 ff29 	bl	d830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b9de:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b9e2:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b9e6:	9a02      	ldr	r2, [sp, #8]
    b9e8:	9803      	ldr	r0, [sp, #12]
    b9ea:	f7ff fc89 	bl	b300 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    b9ee:	f001 ff4b 	bl	d888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    b9f2:	bf00      	nop
    b9f4:	b005      	add	sp, #20
    b9f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b9fa:	bf00      	nop
    b9fc:	00011be4 	.word	0x00011be4

0000ba00 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    ba00:	b500      	push	{lr}
    ba02:	b085      	sub	sp, #20
    ba04:	9001      	str	r0, [sp, #4]
    ba06:	4608      	mov	r0, r1
    ba08:	4611      	mov	r1, r2
    ba0a:	461a      	mov	r2, r3
    ba0c:	4603      	mov	r3, r0
    ba0e:	f88d 3003 	strb.w	r3, [sp, #3]
    ba12:	460b      	mov	r3, r1
    ba14:	f88d 3002 	strb.w	r3, [sp, #2]
    ba18:	4613      	mov	r3, r2
    ba1a:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba1e:	4a0f      	ldr	r2, [pc, #60]	; (ba5c <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    ba20:	9b01      	ldr	r3, [sp, #4]
    ba22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba26:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ba28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ba2c:	2201      	movs	r2, #1
    ba2e:	fa02 f303 	lsl.w	r3, r2, r3
    ba32:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    ba34:	9b02      	ldr	r3, [sp, #8]
    ba36:	021b      	lsls	r3, r3, #8
    ba38:	b29b      	uxth	r3, r3
    ba3a:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    ba3c:	f001 ff4a 	bl	d8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    ba40:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ba44:	f89d 1003 	ldrb.w	r1, [sp, #3]
    ba48:	9a02      	ldr	r2, [sp, #8]
    ba4a:	9803      	ldr	r0, [sp, #12]
    ba4c:	f7ff fc58 	bl	b300 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    ba50:	f001 ff6c 	bl	d92c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    ba54:	bf00      	nop
    ba56:	b005      	add	sp, #20
    ba58:	f85d fb04 	ldr.w	pc, [sp], #4
    ba5c:	00011be4 	.word	0x00011be4

0000ba60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    ba60:	b410      	push	{r4}
    ba62:	b085      	sub	sp, #20
    ba64:	9001      	str	r0, [sp, #4]
    ba66:	4608      	mov	r0, r1
    ba68:	4611      	mov	r1, r2
    ba6a:	461a      	mov	r2, r3
    ba6c:	4603      	mov	r3, r0
    ba6e:	f88d 3003 	strb.w	r3, [sp, #3]
    ba72:	460b      	mov	r3, r1
    ba74:	f88d 3002 	strb.w	r3, [sp, #2]
    ba78:	4613      	mov	r3, r2
    ba7a:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba7e:	4a0c      	ldr	r2, [pc, #48]	; (bab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    ba80:	9b01      	ldr	r3, [sp, #4]
    ba82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba86:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    ba88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba8c:	f89d 4002 	ldrb.w	r4, [sp, #2]
    ba90:	f8bd 0000 	ldrh.w	r0, [sp]
    ba94:	9903      	ldr	r1, [sp, #12]
    ba96:	4613      	mov	r3, r2
    ba98:	009b      	lsls	r3, r3, #2
    ba9a:	4413      	add	r3, r2
    ba9c:	005b      	lsls	r3, r3, #1
    ba9e:	4423      	add	r3, r4
    baa0:	3306      	adds	r3, #6
    baa2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    baa6:	bf00      	nop
    baa8:	b005      	add	sp, #20
    baaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    baae:	4770      	bx	lr
    bab0:	00011be4 	.word	0x00011be4

0000bab4 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    bab4:	b500      	push	{lr}
    bab6:	b087      	sub	sp, #28
    bab8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    baba:	4a19      	ldr	r2, [pc, #100]	; (bb20 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    babc:	9b01      	ldr	r3, [sp, #4]
    babe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bac2:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    bac4:	2300      	movs	r3, #0
    bac6:	f88d 300c 	strb.w	r3, [sp, #12]
    baca:	2300      	movs	r3, #0
    bacc:	f88d 300d 	strb.w	r3, [sp, #13]
    bad0:	2300      	movs	r3, #0
    bad2:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    bad6:	f001 fdb5 	bl	d644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    bada:	9804      	ldr	r0, [sp, #16]
    badc:	f7ff fc4f 	bl	b37e <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    bae0:	2100      	movs	r1, #0
    bae2:	9804      	ldr	r0, [sp, #16]
    bae4:	f7ff fc56 	bl	b394 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    bae8:	f001 fdd8 	bl	d69c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    baec:	2300      	movs	r3, #0
    baee:	f88d 3017 	strb.w	r3, [sp, #23]
    baf2:	e00b      	b.n	bb0c <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    baf4:	aa03      	add	r2, sp, #12
    baf6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bafa:	4619      	mov	r1, r3
    bafc:	9804      	ldr	r0, [sp, #16]
    bafe:	f000 f899 	bl	bc34 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bb02:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bb06:	3301      	adds	r3, #1
    bb08:	f88d 3017 	strb.w	r3, [sp, #23]
    bb0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bb10:	2b01      	cmp	r3, #1
    bb12:	d9ef      	bls.n	baf4 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    bb14:	bf00      	nop
    bb16:	bf00      	nop
    bb18:	b007      	add	sp, #28
    bb1a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb1e:	bf00      	nop
    bb20:	00011be4 	.word	0x00011be4

0000bb24 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    bb24:	b500      	push	{lr}
    bb26:	b087      	sub	sp, #28
    bb28:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    bb2a:	4a40      	ldr	r2, [pc, #256]	; (bc2c <Pdb_Adc_Ip_IRQHandler+0x108>)
    bb2c:	9b01      	ldr	r3, [sp, #4]
    bb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb32:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    bb34:	4a3e      	ldr	r2, [pc, #248]	; (bc30 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bb36:	9b01      	ldr	r3, [sp, #4]
    bb38:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	d04d      	beq.n	bbdc <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    bb40:	9b04      	ldr	r3, [sp, #16]
    bb42:	681b      	ldr	r3, [r3, #0]
    bb44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    bb48:	2b00      	cmp	r3, #0
    bb4a:	d06a      	beq.n	bc22 <Pdb_Adc_Ip_IRQHandler+0xfe>
    bb4c:	4a38      	ldr	r2, [pc, #224]	; (bc30 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bb4e:	9b01      	ldr	r3, [sp, #4]
    bb50:	00db      	lsls	r3, r3, #3
    bb52:	4413      	add	r3, r2
    bb54:	685b      	ldr	r3, [r3, #4]
    bb56:	2b00      	cmp	r3, #0
    bb58:	d063      	beq.n	bc22 <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bb5a:	2300      	movs	r3, #0
    bb5c:	f88d 3017 	strb.w	r3, [sp, #23]
    bb60:	e037      	b.n	bbd2 <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    bb62:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb66:	9904      	ldr	r1, [sp, #16]
    bb68:	4613      	mov	r3, r2
    bb6a:	009b      	lsls	r3, r3, #2
    bb6c:	4413      	add	r3, r2
    bb6e:	00db      	lsls	r3, r3, #3
    bb70:	440b      	add	r3, r1
    bb72:	3314      	adds	r3, #20
    bb74:	681b      	ldr	r3, [r3, #0]
    bb76:	b29b      	uxth	r3, r3
    bb78:	b2db      	uxtb	r3, r3
    bb7a:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    bb7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    bb82:	2b00      	cmp	r3, #0
    bb84:	d020      	beq.n	bbc8 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bb86:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb8a:	9904      	ldr	r1, [sp, #16]
    bb8c:	4613      	mov	r3, r2
    bb8e:	009b      	lsls	r3, r3, #2
    bb90:	4413      	add	r3, r2
    bb92:	00db      	lsls	r3, r3, #3
    bb94:	440b      	add	r3, r1
    bb96:	3314      	adds	r3, #20
    bb98:	681b      	ldr	r3, [r3, #0]
    bb9a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bba2:	9804      	ldr	r0, [sp, #16]
    bba4:	4613      	mov	r3, r2
    bba6:	009b      	lsls	r3, r3, #2
    bba8:	4413      	add	r3, r2
    bbaa:	00db      	lsls	r3, r3, #3
    bbac:	4403      	add	r3, r0
    bbae:	3314      	adds	r3, #20
    bbb0:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    bbb2:	4a1f      	ldr	r2, [pc, #124]	; (bc30 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bbb4:	9b01      	ldr	r3, [sp, #4]
    bbb6:	00db      	lsls	r3, r3, #3
    bbb8:	4413      	add	r3, r2
    bbba:	685b      	ldr	r3, [r3, #4]
    bbbc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    bbc0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bbc4:	4610      	mov	r0, r2
    bbc6:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bbc8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbcc:	3301      	adds	r3, #1
    bbce:	f88d 3017 	strb.w	r3, [sp, #23]
    bbd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbd6:	2b01      	cmp	r3, #1
    bbd8:	d9c3      	bls.n	bb62 <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    bbda:	e022      	b.n	bc22 <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bbdc:	2300      	movs	r3, #0
    bbde:	f88d 3017 	strb.w	r3, [sp, #23]
    bbe2:	e01a      	b.n	bc1a <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bbe4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bbe8:	9904      	ldr	r1, [sp, #16]
    bbea:	4613      	mov	r3, r2
    bbec:	009b      	lsls	r3, r3, #2
    bbee:	4413      	add	r3, r2
    bbf0:	00db      	lsls	r3, r3, #3
    bbf2:	440b      	add	r3, r1
    bbf4:	3314      	adds	r3, #20
    bbf6:	681b      	ldr	r3, [r3, #0]
    bbf8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bbfc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bc00:	9804      	ldr	r0, [sp, #16]
    bc02:	4613      	mov	r3, r2
    bc04:	009b      	lsls	r3, r3, #2
    bc06:	4413      	add	r3, r2
    bc08:	00db      	lsls	r3, r3, #3
    bc0a:	4403      	add	r3, r0
    bc0c:	3314      	adds	r3, #20
    bc0e:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bc10:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bc14:	3301      	adds	r3, #1
    bc16:	f88d 3017 	strb.w	r3, [sp, #23]
    bc1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bc1e:	2b01      	cmp	r3, #1
    bc20:	d9e0      	bls.n	bbe4 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    bc22:	bf00      	nop
    bc24:	b007      	add	sp, #28
    bc26:	f85d fb04 	ldr.w	pc, [sp], #4
    bc2a:	bf00      	nop
    bc2c:	00011be4 	.word	0x00011be4
    bc30:	1fff8ddc 	.word	0x1fff8ddc

0000bc34 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    bc34:	b500      	push	{lr}
    bc36:	b085      	sub	sp, #20
    bc38:	9003      	str	r0, [sp, #12]
    bc3a:	460b      	mov	r3, r1
    bc3c:	9201      	str	r2, [sp, #4]
    bc3e:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    bc42:	f001 fe99 	bl	d978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    bc46:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc4a:	9a01      	ldr	r2, [sp, #4]
    bc4c:	4619      	mov	r1, r3
    bc4e:	9803      	ldr	r0, [sp, #12]
    bc50:	f7ff fbb9 	bl	b3c6 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    bc54:	f001 febc 	bl	d9d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    bc58:	f001 ff32 	bl	dac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    bc5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc60:	22ff      	movs	r2, #255	; 0xff
    bc62:	4619      	mov	r1, r3
    bc64:	9803      	ldr	r0, [sp, #12]
    bc66:	f7ff fbe6 	bl	b436 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bc6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc6e:	9903      	ldr	r1, [sp, #12]
    bc70:	4613      	mov	r3, r2
    bc72:	009b      	lsls	r3, r3, #2
    bc74:	4413      	add	r3, r2
    bc76:	00db      	lsls	r3, r3, #3
    bc78:	440b      	add	r3, r1
    bc7a:	3314      	adds	r3, #20
    bc7c:	681b      	ldr	r3, [r3, #0]
    bc7e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bc86:	9803      	ldr	r0, [sp, #12]
    bc88:	4613      	mov	r3, r2
    bc8a:	009b      	lsls	r3, r3, #2
    bc8c:	4413      	add	r3, r2
    bc8e:	00db      	lsls	r3, r3, #3
    bc90:	4403      	add	r3, r0
    bc92:	3314      	adds	r3, #20
    bc94:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    bc96:	f001 ff3f 	bl	db18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    bc9a:	bf00      	nop
    bc9c:	b005      	add	sp, #20
    bc9e:	f85d fb04 	ldr.w	pc, [sp], #4
    bca2:	bf00      	nop

0000bca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    bca4:	b500      	push	{lr}
    bca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bca8:	f7f5 fde0 	bl	186c <Sys_GetCoreID>
    bcac:	4603      	mov	r3, r0
    bcae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    bcb0:	4a10      	ldr	r2, [pc, #64]	; (bcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    bcb2:	9b01      	ldr	r3, [sp, #4]
    bcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcb8:	2b00      	cmp	r3, #0
    bcba:	d10d      	bne.n	bcd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bcbc:	f7f4 ffec 	bl	c98 <Adc_schm_read_msr>
    bcc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bcc2:	9b00      	ldr	r3, [sp, #0]
    bcc4:	f003 0301 	and.w	r3, r3, #1
    bcc8:	2b00      	cmp	r3, #0
    bcca:	d100      	bne.n	bcce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    bcce:	490a      	ldr	r1, [pc, #40]	; (bcf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    bcd0:	9b01      	ldr	r3, [sp, #4]
    bcd2:	9a00      	ldr	r2, [sp, #0]
    bcd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    bcd8:	4a06      	ldr	r2, [pc, #24]	; (bcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    bcda:	9b01      	ldr	r3, [sp, #4]
    bcdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bce0:	1c5a      	adds	r2, r3, #1
    bce2:	4904      	ldr	r1, [pc, #16]	; (bcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    bce4:	9b01      	ldr	r3, [sp, #4]
    bce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bcea:	bf00      	nop
    bcec:	b003      	add	sp, #12
    bcee:	f85d fb04 	ldr.w	pc, [sp], #4
    bcf2:	bf00      	nop
    bcf4:	1fff8df0 	.word	0x1fff8df0
    bcf8:	1fff8dec 	.word	0x1fff8dec

0000bcfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    bcfc:	b500      	push	{lr}
    bcfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd00:	f7f5 fdb4 	bl	186c <Sys_GetCoreID>
    bd04:	4603      	mov	r3, r0
    bd06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    bd08:	4a0d      	ldr	r2, [pc, #52]	; (bd40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    bd0a:	9b01      	ldr	r3, [sp, #4]
    bd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd10:	1e5a      	subs	r2, r3, #1
    bd12:	490b      	ldr	r1, [pc, #44]	; (bd40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    bd14:	9b01      	ldr	r3, [sp, #4]
    bd16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    bd1a:	4a0a      	ldr	r2, [pc, #40]	; (bd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    bd1c:	9b01      	ldr	r3, [sp, #4]
    bd1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd22:	f003 0301 	and.w	r3, r3, #1
    bd26:	2b00      	cmp	r3, #0
    bd28:	d106      	bne.n	bd38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    bd2a:	4a05      	ldr	r2, [pc, #20]	; (bd40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    bd2c:	9b01      	ldr	r3, [sp, #4]
    bd2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd32:	2b00      	cmp	r3, #0
    bd34:	d100      	bne.n	bd38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd38:	bf00      	nop
    bd3a:	b003      	add	sp, #12
    bd3c:	f85d fb04 	ldr.w	pc, [sp], #4
    bd40:	1fff8df0 	.word	0x1fff8df0
    bd44:	1fff8dec 	.word	0x1fff8dec

0000bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    bd48:	b500      	push	{lr}
    bd4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd4c:	f7f5 fd8e 	bl	186c <Sys_GetCoreID>
    bd50:	4603      	mov	r3, r0
    bd52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    bd54:	4a10      	ldr	r2, [pc, #64]	; (bd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    bd56:	9b01      	ldr	r3, [sp, #4]
    bd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d10d      	bne.n	bd7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd60:	f7f4 ff9a 	bl	c98 <Adc_schm_read_msr>
    bd64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd66:	9b00      	ldr	r3, [sp, #0]
    bd68:	f003 0301 	and.w	r3, r3, #1
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	d100      	bne.n	bd72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    bd72:	490a      	ldr	r1, [pc, #40]	; (bd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    bd74:	9b01      	ldr	r3, [sp, #4]
    bd76:	9a00      	ldr	r2, [sp, #0]
    bd78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    bd7c:	4a06      	ldr	r2, [pc, #24]	; (bd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    bd7e:	9b01      	ldr	r3, [sp, #4]
    bd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd84:	1c5a      	adds	r2, r3, #1
    bd86:	4904      	ldr	r1, [pc, #16]	; (bd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    bd88:	9b01      	ldr	r3, [sp, #4]
    bd8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd8e:	bf00      	nop
    bd90:	b003      	add	sp, #12
    bd92:	f85d fb04 	ldr.w	pc, [sp], #4
    bd96:	bf00      	nop
    bd98:	1fff8df8 	.word	0x1fff8df8
    bd9c:	1fff8df4 	.word	0x1fff8df4

0000bda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    bda0:	b500      	push	{lr}
    bda2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bda4:	f7f5 fd62 	bl	186c <Sys_GetCoreID>
    bda8:	4603      	mov	r3, r0
    bdaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    bdac:	4a0d      	ldr	r2, [pc, #52]	; (bde4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    bdae:	9b01      	ldr	r3, [sp, #4]
    bdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdb4:	1e5a      	subs	r2, r3, #1
    bdb6:	490b      	ldr	r1, [pc, #44]	; (bde4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    bdb8:	9b01      	ldr	r3, [sp, #4]
    bdba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    bdbe:	4a0a      	ldr	r2, [pc, #40]	; (bde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    bdc0:	9b01      	ldr	r3, [sp, #4]
    bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdc6:	f003 0301 	and.w	r3, r3, #1
    bdca:	2b00      	cmp	r3, #0
    bdcc:	d106      	bne.n	bddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    bdce:	4a05      	ldr	r2, [pc, #20]	; (bde4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    bdd0:	9b01      	ldr	r3, [sp, #4]
    bdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	d100      	bne.n	bddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bdda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bddc:	bf00      	nop
    bdde:	b003      	add	sp, #12
    bde0:	f85d fb04 	ldr.w	pc, [sp], #4
    bde4:	1fff8df8 	.word	0x1fff8df8
    bde8:	1fff8df4 	.word	0x1fff8df4

0000bdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    bdec:	b500      	push	{lr}
    bdee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdf0:	f7f5 fd3c 	bl	186c <Sys_GetCoreID>
    bdf4:	4603      	mov	r3, r0
    bdf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    bdf8:	4a10      	ldr	r2, [pc, #64]	; (be3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    bdfa:	9b01      	ldr	r3, [sp, #4]
    bdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be00:	2b00      	cmp	r3, #0
    be02:	d10d      	bne.n	be20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be04:	f7f4 ff48 	bl	c98 <Adc_schm_read_msr>
    be08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be0a:	9b00      	ldr	r3, [sp, #0]
    be0c:	f003 0301 	and.w	r3, r3, #1
    be10:	2b00      	cmp	r3, #0
    be12:	d100      	bne.n	be16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    be16:	490a      	ldr	r1, [pc, #40]	; (be40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    be18:	9b01      	ldr	r3, [sp, #4]
    be1a:	9a00      	ldr	r2, [sp, #0]
    be1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    be20:	4a06      	ldr	r2, [pc, #24]	; (be3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    be22:	9b01      	ldr	r3, [sp, #4]
    be24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be28:	1c5a      	adds	r2, r3, #1
    be2a:	4904      	ldr	r1, [pc, #16]	; (be3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    be2c:	9b01      	ldr	r3, [sp, #4]
    be2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be32:	bf00      	nop
    be34:	b003      	add	sp, #12
    be36:	f85d fb04 	ldr.w	pc, [sp], #4
    be3a:	bf00      	nop
    be3c:	1fff8e00 	.word	0x1fff8e00
    be40:	1fff8dfc 	.word	0x1fff8dfc

0000be44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    be44:	b500      	push	{lr}
    be46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be48:	f7f5 fd10 	bl	186c <Sys_GetCoreID>
    be4c:	4603      	mov	r3, r0
    be4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    be50:	4a0d      	ldr	r2, [pc, #52]	; (be88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    be52:	9b01      	ldr	r3, [sp, #4]
    be54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be58:	1e5a      	subs	r2, r3, #1
    be5a:	490b      	ldr	r1, [pc, #44]	; (be88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    be5c:	9b01      	ldr	r3, [sp, #4]
    be5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    be62:	4a0a      	ldr	r2, [pc, #40]	; (be8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    be64:	9b01      	ldr	r3, [sp, #4]
    be66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be6a:	f003 0301 	and.w	r3, r3, #1
    be6e:	2b00      	cmp	r3, #0
    be70:	d106      	bne.n	be80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    be72:	4a05      	ldr	r2, [pc, #20]	; (be88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    be74:	9b01      	ldr	r3, [sp, #4]
    be76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be7a:	2b00      	cmp	r3, #0
    be7c:	d100      	bne.n	be80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be80:	bf00      	nop
    be82:	b003      	add	sp, #12
    be84:	f85d fb04 	ldr.w	pc, [sp], #4
    be88:	1fff8e00 	.word	0x1fff8e00
    be8c:	1fff8dfc 	.word	0x1fff8dfc

0000be90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    be90:	b500      	push	{lr}
    be92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be94:	f7f5 fcea 	bl	186c <Sys_GetCoreID>
    be98:	4603      	mov	r3, r0
    be9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    be9c:	4a10      	ldr	r2, [pc, #64]	; (bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    be9e:	9b01      	ldr	r3, [sp, #4]
    bea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea4:	2b00      	cmp	r3, #0
    bea6:	d10d      	bne.n	bec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bea8:	f7f4 fef6 	bl	c98 <Adc_schm_read_msr>
    beac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    beae:	9b00      	ldr	r3, [sp, #0]
    beb0:	f003 0301 	and.w	r3, r3, #1
    beb4:	2b00      	cmp	r3, #0
    beb6:	d100      	bne.n	beba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    beb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    beba:	490a      	ldr	r1, [pc, #40]	; (bee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    bebc:	9b01      	ldr	r3, [sp, #4]
    bebe:	9a00      	ldr	r2, [sp, #0]
    bec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    bec4:	4a06      	ldr	r2, [pc, #24]	; (bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    bec6:	9b01      	ldr	r3, [sp, #4]
    bec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    becc:	1c5a      	adds	r2, r3, #1
    bece:	4904      	ldr	r1, [pc, #16]	; (bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    bed0:	9b01      	ldr	r3, [sp, #4]
    bed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bed6:	bf00      	nop
    bed8:	b003      	add	sp, #12
    beda:	f85d fb04 	ldr.w	pc, [sp], #4
    bede:	bf00      	nop
    bee0:	1fff8e08 	.word	0x1fff8e08
    bee4:	1fff8e04 	.word	0x1fff8e04

0000bee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    bee8:	b500      	push	{lr}
    beea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    beec:	f7f5 fcbe 	bl	186c <Sys_GetCoreID>
    bef0:	4603      	mov	r3, r0
    bef2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    bef4:	4a0d      	ldr	r2, [pc, #52]	; (bf2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    bef6:	9b01      	ldr	r3, [sp, #4]
    bef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    befc:	1e5a      	subs	r2, r3, #1
    befe:	490b      	ldr	r1, [pc, #44]	; (bf2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    bf00:	9b01      	ldr	r3, [sp, #4]
    bf02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    bf06:	4a0a      	ldr	r2, [pc, #40]	; (bf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    bf08:	9b01      	ldr	r3, [sp, #4]
    bf0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf0e:	f003 0301 	and.w	r3, r3, #1
    bf12:	2b00      	cmp	r3, #0
    bf14:	d106      	bne.n	bf24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    bf16:	4a05      	ldr	r2, [pc, #20]	; (bf2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    bf18:	9b01      	ldr	r3, [sp, #4]
    bf1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d100      	bne.n	bf24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf24:	bf00      	nop
    bf26:	b003      	add	sp, #12
    bf28:	f85d fb04 	ldr.w	pc, [sp], #4
    bf2c:	1fff8e08 	.word	0x1fff8e08
    bf30:	1fff8e04 	.word	0x1fff8e04

0000bf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    bf34:	b500      	push	{lr}
    bf36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf38:	f7f5 fc98 	bl	186c <Sys_GetCoreID>
    bf3c:	4603      	mov	r3, r0
    bf3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    bf40:	4a10      	ldr	r2, [pc, #64]	; (bf84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    bf42:	9b01      	ldr	r3, [sp, #4]
    bf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf48:	2b00      	cmp	r3, #0
    bf4a:	d10d      	bne.n	bf68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf4c:	f7f4 fea4 	bl	c98 <Adc_schm_read_msr>
    bf50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf52:	9b00      	ldr	r3, [sp, #0]
    bf54:	f003 0301 	and.w	r3, r3, #1
    bf58:	2b00      	cmp	r3, #0
    bf5a:	d100      	bne.n	bf5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    bf5e:	490a      	ldr	r1, [pc, #40]	; (bf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	9a00      	ldr	r2, [sp, #0]
    bf64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    bf68:	4a06      	ldr	r2, [pc, #24]	; (bf84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    bf6a:	9b01      	ldr	r3, [sp, #4]
    bf6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf70:	1c5a      	adds	r2, r3, #1
    bf72:	4904      	ldr	r1, [pc, #16]	; (bf84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    bf74:	9b01      	ldr	r3, [sp, #4]
    bf76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf7a:	bf00      	nop
    bf7c:	b003      	add	sp, #12
    bf7e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf82:	bf00      	nop
    bf84:	1fff8e10 	.word	0x1fff8e10
    bf88:	1fff8e0c 	.word	0x1fff8e0c

0000bf8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    bf8c:	b500      	push	{lr}
    bf8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf90:	f7f5 fc6c 	bl	186c <Sys_GetCoreID>
    bf94:	4603      	mov	r3, r0
    bf96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    bf98:	4a0d      	ldr	r2, [pc, #52]	; (bfd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    bf9a:	9b01      	ldr	r3, [sp, #4]
    bf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfa0:	1e5a      	subs	r2, r3, #1
    bfa2:	490b      	ldr	r1, [pc, #44]	; (bfd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    bfa4:	9b01      	ldr	r3, [sp, #4]
    bfa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    bfaa:	4a0a      	ldr	r2, [pc, #40]	; (bfd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    bfac:	9b01      	ldr	r3, [sp, #4]
    bfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfb2:	f003 0301 	and.w	r3, r3, #1
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d106      	bne.n	bfc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    bfba:	4a05      	ldr	r2, [pc, #20]	; (bfd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    bfbc:	9b01      	ldr	r3, [sp, #4]
    bfbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d100      	bne.n	bfc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bfc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bfc8:	bf00      	nop
    bfca:	b003      	add	sp, #12
    bfcc:	f85d fb04 	ldr.w	pc, [sp], #4
    bfd0:	1fff8e10 	.word	0x1fff8e10
    bfd4:	1fff8e0c 	.word	0x1fff8e0c

0000bfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    bfd8:	b500      	push	{lr}
    bfda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfdc:	f7f5 fc46 	bl	186c <Sys_GetCoreID>
    bfe0:	4603      	mov	r3, r0
    bfe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    bfe4:	4a10      	ldr	r2, [pc, #64]	; (c028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    bfe6:	9b01      	ldr	r3, [sp, #4]
    bfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfec:	2b00      	cmp	r3, #0
    bfee:	d10d      	bne.n	c00c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bff0:	f7f4 fe52 	bl	c98 <Adc_schm_read_msr>
    bff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bff6:	9b00      	ldr	r3, [sp, #0]
    bff8:	f003 0301 	and.w	r3, r3, #1
    bffc:	2b00      	cmp	r3, #0
    bffe:	d100      	bne.n	c002 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    c002:	490a      	ldr	r1, [pc, #40]	; (c02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    c004:	9b01      	ldr	r3, [sp, #4]
    c006:	9a00      	ldr	r2, [sp, #0]
    c008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    c00c:	4a06      	ldr	r2, [pc, #24]	; (c028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    c00e:	9b01      	ldr	r3, [sp, #4]
    c010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c014:	1c5a      	adds	r2, r3, #1
    c016:	4904      	ldr	r1, [pc, #16]	; (c028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    c018:	9b01      	ldr	r3, [sp, #4]
    c01a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c01e:	bf00      	nop
    c020:	b003      	add	sp, #12
    c022:	f85d fb04 	ldr.w	pc, [sp], #4
    c026:	bf00      	nop
    c028:	1fff8e18 	.word	0x1fff8e18
    c02c:	1fff8e14 	.word	0x1fff8e14

0000c030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    c030:	b500      	push	{lr}
    c032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c034:	f7f5 fc1a 	bl	186c <Sys_GetCoreID>
    c038:	4603      	mov	r3, r0
    c03a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    c03c:	4a0d      	ldr	r2, [pc, #52]	; (c074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    c03e:	9b01      	ldr	r3, [sp, #4]
    c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c044:	1e5a      	subs	r2, r3, #1
    c046:	490b      	ldr	r1, [pc, #44]	; (c074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    c048:	9b01      	ldr	r3, [sp, #4]
    c04a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    c04e:	4a0a      	ldr	r2, [pc, #40]	; (c078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    c050:	9b01      	ldr	r3, [sp, #4]
    c052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c056:	f003 0301 	and.w	r3, r3, #1
    c05a:	2b00      	cmp	r3, #0
    c05c:	d106      	bne.n	c06c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    c05e:	4a05      	ldr	r2, [pc, #20]	; (c074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c066:	2b00      	cmp	r3, #0
    c068:	d100      	bne.n	c06c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c06a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c06c:	bf00      	nop
    c06e:	b003      	add	sp, #12
    c070:	f85d fb04 	ldr.w	pc, [sp], #4
    c074:	1fff8e18 	.word	0x1fff8e18
    c078:	1fff8e14 	.word	0x1fff8e14

0000c07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    c07c:	b500      	push	{lr}
    c07e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c080:	f7f5 fbf4 	bl	186c <Sys_GetCoreID>
    c084:	4603      	mov	r3, r0
    c086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    c088:	4a10      	ldr	r2, [pc, #64]	; (c0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    c08a:	9b01      	ldr	r3, [sp, #4]
    c08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c090:	2b00      	cmp	r3, #0
    c092:	d10d      	bne.n	c0b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c094:	f7f4 fe00 	bl	c98 <Adc_schm_read_msr>
    c098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c09a:	9b00      	ldr	r3, [sp, #0]
    c09c:	f003 0301 	and.w	r3, r3, #1
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d100      	bne.n	c0a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    c0a6:	490a      	ldr	r1, [pc, #40]	; (c0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    c0a8:	9b01      	ldr	r3, [sp, #4]
    c0aa:	9a00      	ldr	r2, [sp, #0]
    c0ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    c0b0:	4a06      	ldr	r2, [pc, #24]	; (c0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    c0b2:	9b01      	ldr	r3, [sp, #4]
    c0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0b8:	1c5a      	adds	r2, r3, #1
    c0ba:	4904      	ldr	r1, [pc, #16]	; (c0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    c0bc:	9b01      	ldr	r3, [sp, #4]
    c0be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c0c2:	bf00      	nop
    c0c4:	b003      	add	sp, #12
    c0c6:	f85d fb04 	ldr.w	pc, [sp], #4
    c0ca:	bf00      	nop
    c0cc:	1fff8e20 	.word	0x1fff8e20
    c0d0:	1fff8e1c 	.word	0x1fff8e1c

0000c0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    c0d4:	b500      	push	{lr}
    c0d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0d8:	f7f5 fbc8 	bl	186c <Sys_GetCoreID>
    c0dc:	4603      	mov	r3, r0
    c0de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    c0e0:	4a0d      	ldr	r2, [pc, #52]	; (c118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    c0e2:	9b01      	ldr	r3, [sp, #4]
    c0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0e8:	1e5a      	subs	r2, r3, #1
    c0ea:	490b      	ldr	r1, [pc, #44]	; (c118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    c0ec:	9b01      	ldr	r3, [sp, #4]
    c0ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    c0f2:	4a0a      	ldr	r2, [pc, #40]	; (c11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    c0f4:	9b01      	ldr	r3, [sp, #4]
    c0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0fa:	f003 0301 	and.w	r3, r3, #1
    c0fe:	2b00      	cmp	r3, #0
    c100:	d106      	bne.n	c110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    c102:	4a05      	ldr	r2, [pc, #20]	; (c118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    c104:	9b01      	ldr	r3, [sp, #4]
    c106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c10a:	2b00      	cmp	r3, #0
    c10c:	d100      	bne.n	c110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c10e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c110:	bf00      	nop
    c112:	b003      	add	sp, #12
    c114:	f85d fb04 	ldr.w	pc, [sp], #4
    c118:	1fff8e20 	.word	0x1fff8e20
    c11c:	1fff8e1c 	.word	0x1fff8e1c

0000c120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    c120:	b500      	push	{lr}
    c122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c124:	f7f5 fba2 	bl	186c <Sys_GetCoreID>
    c128:	4603      	mov	r3, r0
    c12a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    c12c:	4a10      	ldr	r2, [pc, #64]	; (c170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    c12e:	9b01      	ldr	r3, [sp, #4]
    c130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c134:	2b00      	cmp	r3, #0
    c136:	d10d      	bne.n	c154 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c138:	f7f4 fdae 	bl	c98 <Adc_schm_read_msr>
    c13c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c13e:	9b00      	ldr	r3, [sp, #0]
    c140:	f003 0301 	and.w	r3, r3, #1
    c144:	2b00      	cmp	r3, #0
    c146:	d100      	bne.n	c14a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    c14a:	490a      	ldr	r1, [pc, #40]	; (c174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    c14c:	9b01      	ldr	r3, [sp, #4]
    c14e:	9a00      	ldr	r2, [sp, #0]
    c150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    c154:	4a06      	ldr	r2, [pc, #24]	; (c170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    c156:	9b01      	ldr	r3, [sp, #4]
    c158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c15c:	1c5a      	adds	r2, r3, #1
    c15e:	4904      	ldr	r1, [pc, #16]	; (c170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    c160:	9b01      	ldr	r3, [sp, #4]
    c162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c166:	bf00      	nop
    c168:	b003      	add	sp, #12
    c16a:	f85d fb04 	ldr.w	pc, [sp], #4
    c16e:	bf00      	nop
    c170:	1fff8e28 	.word	0x1fff8e28
    c174:	1fff8e24 	.word	0x1fff8e24

0000c178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    c178:	b500      	push	{lr}
    c17a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c17c:	f7f5 fb76 	bl	186c <Sys_GetCoreID>
    c180:	4603      	mov	r3, r0
    c182:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    c184:	4a0d      	ldr	r2, [pc, #52]	; (c1bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    c186:	9b01      	ldr	r3, [sp, #4]
    c188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c18c:	1e5a      	subs	r2, r3, #1
    c18e:	490b      	ldr	r1, [pc, #44]	; (c1bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    c190:	9b01      	ldr	r3, [sp, #4]
    c192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    c196:	4a0a      	ldr	r2, [pc, #40]	; (c1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    c198:	9b01      	ldr	r3, [sp, #4]
    c19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c19e:	f003 0301 	and.w	r3, r3, #1
    c1a2:	2b00      	cmp	r3, #0
    c1a4:	d106      	bne.n	c1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    c1a6:	4a05      	ldr	r2, [pc, #20]	; (c1bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    c1a8:	9b01      	ldr	r3, [sp, #4]
    c1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d100      	bne.n	c1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c1b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c1b4:	bf00      	nop
    c1b6:	b003      	add	sp, #12
    c1b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c1bc:	1fff8e28 	.word	0x1fff8e28
    c1c0:	1fff8e24 	.word	0x1fff8e24

0000c1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    c1c4:	b500      	push	{lr}
    c1c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1c8:	f7f5 fb50 	bl	186c <Sys_GetCoreID>
    c1cc:	4603      	mov	r3, r0
    c1ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    c1d0:	4a10      	ldr	r2, [pc, #64]	; (c214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    c1d2:	9b01      	ldr	r3, [sp, #4]
    c1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d10d      	bne.n	c1f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c1dc:	f7f4 fd5c 	bl	c98 <Adc_schm_read_msr>
    c1e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c1e2:	9b00      	ldr	r3, [sp, #0]
    c1e4:	f003 0301 	and.w	r3, r3, #1
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	d100      	bne.n	c1ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c1ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    c1ee:	490a      	ldr	r1, [pc, #40]	; (c218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    c1f0:	9b01      	ldr	r3, [sp, #4]
    c1f2:	9a00      	ldr	r2, [sp, #0]
    c1f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    c1f8:	4a06      	ldr	r2, [pc, #24]	; (c214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    c1fa:	9b01      	ldr	r3, [sp, #4]
    c1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c200:	1c5a      	adds	r2, r3, #1
    c202:	4904      	ldr	r1, [pc, #16]	; (c214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    c204:	9b01      	ldr	r3, [sp, #4]
    c206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c20a:	bf00      	nop
    c20c:	b003      	add	sp, #12
    c20e:	f85d fb04 	ldr.w	pc, [sp], #4
    c212:	bf00      	nop
    c214:	1fff8e30 	.word	0x1fff8e30
    c218:	1fff8e2c 	.word	0x1fff8e2c

0000c21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    c21c:	b500      	push	{lr}
    c21e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c220:	f7f5 fb24 	bl	186c <Sys_GetCoreID>
    c224:	4603      	mov	r3, r0
    c226:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    c228:	4a0d      	ldr	r2, [pc, #52]	; (c260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    c22a:	9b01      	ldr	r3, [sp, #4]
    c22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c230:	1e5a      	subs	r2, r3, #1
    c232:	490b      	ldr	r1, [pc, #44]	; (c260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    c234:	9b01      	ldr	r3, [sp, #4]
    c236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    c23a:	4a0a      	ldr	r2, [pc, #40]	; (c264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    c23c:	9b01      	ldr	r3, [sp, #4]
    c23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c242:	f003 0301 	and.w	r3, r3, #1
    c246:	2b00      	cmp	r3, #0
    c248:	d106      	bne.n	c258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    c24a:	4a05      	ldr	r2, [pc, #20]	; (c260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    c24c:	9b01      	ldr	r3, [sp, #4]
    c24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c252:	2b00      	cmp	r3, #0
    c254:	d100      	bne.n	c258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c258:	bf00      	nop
    c25a:	b003      	add	sp, #12
    c25c:	f85d fb04 	ldr.w	pc, [sp], #4
    c260:	1fff8e30 	.word	0x1fff8e30
    c264:	1fff8e2c 	.word	0x1fff8e2c

0000c268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    c268:	b500      	push	{lr}
    c26a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c26c:	f7f5 fafe 	bl	186c <Sys_GetCoreID>
    c270:	4603      	mov	r3, r0
    c272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    c274:	4a10      	ldr	r2, [pc, #64]	; (c2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    c276:	9b01      	ldr	r3, [sp, #4]
    c278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c27c:	2b00      	cmp	r3, #0
    c27e:	d10d      	bne.n	c29c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c280:	f7f4 fd0a 	bl	c98 <Adc_schm_read_msr>
    c284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c286:	9b00      	ldr	r3, [sp, #0]
    c288:	f003 0301 	and.w	r3, r3, #1
    c28c:	2b00      	cmp	r3, #0
    c28e:	d100      	bne.n	c292 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    c292:	490a      	ldr	r1, [pc, #40]	; (c2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    c294:	9b01      	ldr	r3, [sp, #4]
    c296:	9a00      	ldr	r2, [sp, #0]
    c298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    c29c:	4a06      	ldr	r2, [pc, #24]	; (c2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    c29e:	9b01      	ldr	r3, [sp, #4]
    c2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2a4:	1c5a      	adds	r2, r3, #1
    c2a6:	4904      	ldr	r1, [pc, #16]	; (c2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c2ae:	bf00      	nop
    c2b0:	b003      	add	sp, #12
    c2b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b6:	bf00      	nop
    c2b8:	1fff8e38 	.word	0x1fff8e38
    c2bc:	1fff8e34 	.word	0x1fff8e34

0000c2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    c2c0:	b500      	push	{lr}
    c2c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2c4:	f7f5 fad2 	bl	186c <Sys_GetCoreID>
    c2c8:	4603      	mov	r3, r0
    c2ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    c2cc:	4a0d      	ldr	r2, [pc, #52]	; (c304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    c2ce:	9b01      	ldr	r3, [sp, #4]
    c2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2d4:	1e5a      	subs	r2, r3, #1
    c2d6:	490b      	ldr	r1, [pc, #44]	; (c304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    c2d8:	9b01      	ldr	r3, [sp, #4]
    c2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    c2de:	4a0a      	ldr	r2, [pc, #40]	; (c308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    c2e0:	9b01      	ldr	r3, [sp, #4]
    c2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2e6:	f003 0301 	and.w	r3, r3, #1
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d106      	bne.n	c2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    c2ee:	4a05      	ldr	r2, [pc, #20]	; (c304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	d100      	bne.n	c2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2fc:	bf00      	nop
    c2fe:	b003      	add	sp, #12
    c300:	f85d fb04 	ldr.w	pc, [sp], #4
    c304:	1fff8e38 	.word	0x1fff8e38
    c308:	1fff8e34 	.word	0x1fff8e34

0000c30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    c30c:	b500      	push	{lr}
    c30e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c310:	f7f5 faac 	bl	186c <Sys_GetCoreID>
    c314:	4603      	mov	r3, r0
    c316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    c318:	4a10      	ldr	r2, [pc, #64]	; (c35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    c31a:	9b01      	ldr	r3, [sp, #4]
    c31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c320:	2b00      	cmp	r3, #0
    c322:	d10d      	bne.n	c340 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c324:	f7f4 fcb8 	bl	c98 <Adc_schm_read_msr>
    c328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c32a:	9b00      	ldr	r3, [sp, #0]
    c32c:	f003 0301 	and.w	r3, r3, #1
    c330:	2b00      	cmp	r3, #0
    c332:	d100      	bne.n	c336 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    c336:	490a      	ldr	r1, [pc, #40]	; (c360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    c338:	9b01      	ldr	r3, [sp, #4]
    c33a:	9a00      	ldr	r2, [sp, #0]
    c33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    c340:	4a06      	ldr	r2, [pc, #24]	; (c35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    c342:	9b01      	ldr	r3, [sp, #4]
    c344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c348:	1c5a      	adds	r2, r3, #1
    c34a:	4904      	ldr	r1, [pc, #16]	; (c35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    c34c:	9b01      	ldr	r3, [sp, #4]
    c34e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c352:	bf00      	nop
    c354:	b003      	add	sp, #12
    c356:	f85d fb04 	ldr.w	pc, [sp], #4
    c35a:	bf00      	nop
    c35c:	1fff8e40 	.word	0x1fff8e40
    c360:	1fff8e3c 	.word	0x1fff8e3c

0000c364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    c364:	b500      	push	{lr}
    c366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c368:	f7f5 fa80 	bl	186c <Sys_GetCoreID>
    c36c:	4603      	mov	r3, r0
    c36e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    c370:	4a0d      	ldr	r2, [pc, #52]	; (c3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    c372:	9b01      	ldr	r3, [sp, #4]
    c374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c378:	1e5a      	subs	r2, r3, #1
    c37a:	490b      	ldr	r1, [pc, #44]	; (c3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    c37c:	9b01      	ldr	r3, [sp, #4]
    c37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    c382:	4a0a      	ldr	r2, [pc, #40]	; (c3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    c384:	9b01      	ldr	r3, [sp, #4]
    c386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c38a:	f003 0301 	and.w	r3, r3, #1
    c38e:	2b00      	cmp	r3, #0
    c390:	d106      	bne.n	c3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    c392:	4a05      	ldr	r2, [pc, #20]	; (c3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    c394:	9b01      	ldr	r3, [sp, #4]
    c396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c39a:	2b00      	cmp	r3, #0
    c39c:	d100      	bne.n	c3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c39e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3a0:	bf00      	nop
    c3a2:	b003      	add	sp, #12
    c3a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3a8:	1fff8e40 	.word	0x1fff8e40
    c3ac:	1fff8e3c 	.word	0x1fff8e3c

0000c3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    c3b0:	b500      	push	{lr}
    c3b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3b4:	f7f5 fa5a 	bl	186c <Sys_GetCoreID>
    c3b8:	4603      	mov	r3, r0
    c3ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    c3bc:	4a10      	ldr	r2, [pc, #64]	; (c400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    c3be:	9b01      	ldr	r3, [sp, #4]
    c3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d10d      	bne.n	c3e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c3c8:	f7f4 fc66 	bl	c98 <Adc_schm_read_msr>
    c3cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c3ce:	9b00      	ldr	r3, [sp, #0]
    c3d0:	f003 0301 	and.w	r3, r3, #1
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	d100      	bne.n	c3da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c3d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    c3da:	490a      	ldr	r1, [pc, #40]	; (c404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    c3dc:	9b01      	ldr	r3, [sp, #4]
    c3de:	9a00      	ldr	r2, [sp, #0]
    c3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    c3e4:	4a06      	ldr	r2, [pc, #24]	; (c400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    c3e6:	9b01      	ldr	r3, [sp, #4]
    c3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ec:	1c5a      	adds	r2, r3, #1
    c3ee:	4904      	ldr	r1, [pc, #16]	; (c400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    c3f0:	9b01      	ldr	r3, [sp, #4]
    c3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3f6:	bf00      	nop
    c3f8:	b003      	add	sp, #12
    c3fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c3fe:	bf00      	nop
    c400:	1fff8e48 	.word	0x1fff8e48
    c404:	1fff8e44 	.word	0x1fff8e44

0000c408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    c408:	b500      	push	{lr}
    c40a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c40c:	f7f5 fa2e 	bl	186c <Sys_GetCoreID>
    c410:	4603      	mov	r3, r0
    c412:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    c414:	4a0d      	ldr	r2, [pc, #52]	; (c44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    c416:	9b01      	ldr	r3, [sp, #4]
    c418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c41c:	1e5a      	subs	r2, r3, #1
    c41e:	490b      	ldr	r1, [pc, #44]	; (c44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    c420:	9b01      	ldr	r3, [sp, #4]
    c422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    c426:	4a0a      	ldr	r2, [pc, #40]	; (c450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    c428:	9b01      	ldr	r3, [sp, #4]
    c42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c42e:	f003 0301 	and.w	r3, r3, #1
    c432:	2b00      	cmp	r3, #0
    c434:	d106      	bne.n	c444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    c436:	4a05      	ldr	r2, [pc, #20]	; (c44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    c438:	9b01      	ldr	r3, [sp, #4]
    c43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c43e:	2b00      	cmp	r3, #0
    c440:	d100      	bne.n	c444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c444:	bf00      	nop
    c446:	b003      	add	sp, #12
    c448:	f85d fb04 	ldr.w	pc, [sp], #4
    c44c:	1fff8e48 	.word	0x1fff8e48
    c450:	1fff8e44 	.word	0x1fff8e44

0000c454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    c454:	b500      	push	{lr}
    c456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c458:	f7f5 fa08 	bl	186c <Sys_GetCoreID>
    c45c:	4603      	mov	r3, r0
    c45e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    c460:	4a10      	ldr	r2, [pc, #64]	; (c4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    c462:	9b01      	ldr	r3, [sp, #4]
    c464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c468:	2b00      	cmp	r3, #0
    c46a:	d10d      	bne.n	c488 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c46c:	f7f4 fc14 	bl	c98 <Adc_schm_read_msr>
    c470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c472:	9b00      	ldr	r3, [sp, #0]
    c474:	f003 0301 	and.w	r3, r3, #1
    c478:	2b00      	cmp	r3, #0
    c47a:	d100      	bne.n	c47e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c47c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    c47e:	490a      	ldr	r1, [pc, #40]	; (c4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    c480:	9b01      	ldr	r3, [sp, #4]
    c482:	9a00      	ldr	r2, [sp, #0]
    c484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    c488:	4a06      	ldr	r2, [pc, #24]	; (c4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    c48a:	9b01      	ldr	r3, [sp, #4]
    c48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c490:	1c5a      	adds	r2, r3, #1
    c492:	4904      	ldr	r1, [pc, #16]	; (c4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    c494:	9b01      	ldr	r3, [sp, #4]
    c496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c49a:	bf00      	nop
    c49c:	b003      	add	sp, #12
    c49e:	f85d fb04 	ldr.w	pc, [sp], #4
    c4a2:	bf00      	nop
    c4a4:	1fff8e50 	.word	0x1fff8e50
    c4a8:	1fff8e4c 	.word	0x1fff8e4c

0000c4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    c4ac:	b500      	push	{lr}
    c4ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4b0:	f7f5 f9dc 	bl	186c <Sys_GetCoreID>
    c4b4:	4603      	mov	r3, r0
    c4b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    c4b8:	4a0d      	ldr	r2, [pc, #52]	; (c4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    c4ba:	9b01      	ldr	r3, [sp, #4]
    c4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4c0:	1e5a      	subs	r2, r3, #1
    c4c2:	490b      	ldr	r1, [pc, #44]	; (c4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    c4c4:	9b01      	ldr	r3, [sp, #4]
    c4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    c4ca:	4a0a      	ldr	r2, [pc, #40]	; (c4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    c4cc:	9b01      	ldr	r3, [sp, #4]
    c4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4d2:	f003 0301 	and.w	r3, r3, #1
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d106      	bne.n	c4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    c4da:	4a05      	ldr	r2, [pc, #20]	; (c4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    c4dc:	9b01      	ldr	r3, [sp, #4]
    c4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d100      	bne.n	c4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c4e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c4e8:	bf00      	nop
    c4ea:	b003      	add	sp, #12
    c4ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c4f0:	1fff8e50 	.word	0x1fff8e50
    c4f4:	1fff8e4c 	.word	0x1fff8e4c

0000c4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    c4f8:	b500      	push	{lr}
    c4fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4fc:	f7f5 f9b6 	bl	186c <Sys_GetCoreID>
    c500:	4603      	mov	r3, r0
    c502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    c504:	4a10      	ldr	r2, [pc, #64]	; (c548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    c506:	9b01      	ldr	r3, [sp, #4]
    c508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c50c:	2b00      	cmp	r3, #0
    c50e:	d10d      	bne.n	c52c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c510:	f7f4 fbc2 	bl	c98 <Adc_schm_read_msr>
    c514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c516:	9b00      	ldr	r3, [sp, #0]
    c518:	f003 0301 	and.w	r3, r3, #1
    c51c:	2b00      	cmp	r3, #0
    c51e:	d100      	bne.n	c522 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    c522:	490a      	ldr	r1, [pc, #40]	; (c54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    c524:	9b01      	ldr	r3, [sp, #4]
    c526:	9a00      	ldr	r2, [sp, #0]
    c528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    c52c:	4a06      	ldr	r2, [pc, #24]	; (c548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    c52e:	9b01      	ldr	r3, [sp, #4]
    c530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c534:	1c5a      	adds	r2, r3, #1
    c536:	4904      	ldr	r1, [pc, #16]	; (c548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    c538:	9b01      	ldr	r3, [sp, #4]
    c53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c53e:	bf00      	nop
    c540:	b003      	add	sp, #12
    c542:	f85d fb04 	ldr.w	pc, [sp], #4
    c546:	bf00      	nop
    c548:	1fff8e58 	.word	0x1fff8e58
    c54c:	1fff8e54 	.word	0x1fff8e54

0000c550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    c550:	b500      	push	{lr}
    c552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c554:	f7f5 f98a 	bl	186c <Sys_GetCoreID>
    c558:	4603      	mov	r3, r0
    c55a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    c55c:	4a0d      	ldr	r2, [pc, #52]	; (c594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    c55e:	9b01      	ldr	r3, [sp, #4]
    c560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c564:	1e5a      	subs	r2, r3, #1
    c566:	490b      	ldr	r1, [pc, #44]	; (c594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    c568:	9b01      	ldr	r3, [sp, #4]
    c56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    c56e:	4a0a      	ldr	r2, [pc, #40]	; (c598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    c570:	9b01      	ldr	r3, [sp, #4]
    c572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c576:	f003 0301 	and.w	r3, r3, #1
    c57a:	2b00      	cmp	r3, #0
    c57c:	d106      	bne.n	c58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    c57e:	4a05      	ldr	r2, [pc, #20]	; (c594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c586:	2b00      	cmp	r3, #0
    c588:	d100      	bne.n	c58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c58a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c58c:	bf00      	nop
    c58e:	b003      	add	sp, #12
    c590:	f85d fb04 	ldr.w	pc, [sp], #4
    c594:	1fff8e58 	.word	0x1fff8e58
    c598:	1fff8e54 	.word	0x1fff8e54

0000c59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    c59c:	b500      	push	{lr}
    c59e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5a0:	f7f5 f964 	bl	186c <Sys_GetCoreID>
    c5a4:	4603      	mov	r3, r0
    c5a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    c5a8:	4a10      	ldr	r2, [pc, #64]	; (c5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    c5aa:	9b01      	ldr	r3, [sp, #4]
    c5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5b0:	2b00      	cmp	r3, #0
    c5b2:	d10d      	bne.n	c5d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c5b4:	f7f4 fb70 	bl	c98 <Adc_schm_read_msr>
    c5b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c5ba:	9b00      	ldr	r3, [sp, #0]
    c5bc:	f003 0301 	and.w	r3, r3, #1
    c5c0:	2b00      	cmp	r3, #0
    c5c2:	d100      	bne.n	c5c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c5c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    c5c6:	490a      	ldr	r1, [pc, #40]	; (c5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    c5c8:	9b01      	ldr	r3, [sp, #4]
    c5ca:	9a00      	ldr	r2, [sp, #0]
    c5cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    c5d0:	4a06      	ldr	r2, [pc, #24]	; (c5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    c5d2:	9b01      	ldr	r3, [sp, #4]
    c5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5d8:	1c5a      	adds	r2, r3, #1
    c5da:	4904      	ldr	r1, [pc, #16]	; (c5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    c5dc:	9b01      	ldr	r3, [sp, #4]
    c5de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c5e2:	bf00      	nop
    c5e4:	b003      	add	sp, #12
    c5e6:	f85d fb04 	ldr.w	pc, [sp], #4
    c5ea:	bf00      	nop
    c5ec:	1fff8e60 	.word	0x1fff8e60
    c5f0:	1fff8e5c 	.word	0x1fff8e5c

0000c5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    c5f4:	b500      	push	{lr}
    c5f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5f8:	f7f5 f938 	bl	186c <Sys_GetCoreID>
    c5fc:	4603      	mov	r3, r0
    c5fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    c600:	4a0d      	ldr	r2, [pc, #52]	; (c638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    c602:	9b01      	ldr	r3, [sp, #4]
    c604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c608:	1e5a      	subs	r2, r3, #1
    c60a:	490b      	ldr	r1, [pc, #44]	; (c638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    c60c:	9b01      	ldr	r3, [sp, #4]
    c60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    c612:	4a0a      	ldr	r2, [pc, #40]	; (c63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    c614:	9b01      	ldr	r3, [sp, #4]
    c616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c61a:	f003 0301 	and.w	r3, r3, #1
    c61e:	2b00      	cmp	r3, #0
    c620:	d106      	bne.n	c630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    c622:	4a05      	ldr	r2, [pc, #20]	; (c638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    c624:	9b01      	ldr	r3, [sp, #4]
    c626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c62a:	2b00      	cmp	r3, #0
    c62c:	d100      	bne.n	c630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c62e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c630:	bf00      	nop
    c632:	b003      	add	sp, #12
    c634:	f85d fb04 	ldr.w	pc, [sp], #4
    c638:	1fff8e60 	.word	0x1fff8e60
    c63c:	1fff8e5c 	.word	0x1fff8e5c

0000c640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    c640:	b500      	push	{lr}
    c642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c644:	f7f5 f912 	bl	186c <Sys_GetCoreID>
    c648:	4603      	mov	r3, r0
    c64a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    c64c:	4a10      	ldr	r2, [pc, #64]	; (c690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    c64e:	9b01      	ldr	r3, [sp, #4]
    c650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c654:	2b00      	cmp	r3, #0
    c656:	d10d      	bne.n	c674 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c658:	f7f4 fb1e 	bl	c98 <Adc_schm_read_msr>
    c65c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c65e:	9b00      	ldr	r3, [sp, #0]
    c660:	f003 0301 	and.w	r3, r3, #1
    c664:	2b00      	cmp	r3, #0
    c666:	d100      	bne.n	c66a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    c66a:	490a      	ldr	r1, [pc, #40]	; (c694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    c66c:	9b01      	ldr	r3, [sp, #4]
    c66e:	9a00      	ldr	r2, [sp, #0]
    c670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    c674:	4a06      	ldr	r2, [pc, #24]	; (c690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    c676:	9b01      	ldr	r3, [sp, #4]
    c678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c67c:	1c5a      	adds	r2, r3, #1
    c67e:	4904      	ldr	r1, [pc, #16]	; (c690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    c680:	9b01      	ldr	r3, [sp, #4]
    c682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c686:	bf00      	nop
    c688:	b003      	add	sp, #12
    c68a:	f85d fb04 	ldr.w	pc, [sp], #4
    c68e:	bf00      	nop
    c690:	1fff8e68 	.word	0x1fff8e68
    c694:	1fff8e64 	.word	0x1fff8e64

0000c698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    c698:	b500      	push	{lr}
    c69a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c69c:	f7f5 f8e6 	bl	186c <Sys_GetCoreID>
    c6a0:	4603      	mov	r3, r0
    c6a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    c6a4:	4a0d      	ldr	r2, [pc, #52]	; (c6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    c6a6:	9b01      	ldr	r3, [sp, #4]
    c6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ac:	1e5a      	subs	r2, r3, #1
    c6ae:	490b      	ldr	r1, [pc, #44]	; (c6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    c6b0:	9b01      	ldr	r3, [sp, #4]
    c6b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    c6b6:	4a0a      	ldr	r2, [pc, #40]	; (c6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    c6b8:	9b01      	ldr	r3, [sp, #4]
    c6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6be:	f003 0301 	and.w	r3, r3, #1
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d106      	bne.n	c6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    c6c6:	4a05      	ldr	r2, [pc, #20]	; (c6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    c6c8:	9b01      	ldr	r3, [sp, #4]
    c6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d100      	bne.n	c6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c6d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c6d4:	bf00      	nop
    c6d6:	b003      	add	sp, #12
    c6d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c6dc:	1fff8e68 	.word	0x1fff8e68
    c6e0:	1fff8e64 	.word	0x1fff8e64

0000c6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    c6e4:	b500      	push	{lr}
    c6e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6e8:	f7f5 f8c0 	bl	186c <Sys_GetCoreID>
    c6ec:	4603      	mov	r3, r0
    c6ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    c6f0:	4a10      	ldr	r2, [pc, #64]	; (c734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    c6f2:	9b01      	ldr	r3, [sp, #4]
    c6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d10d      	bne.n	c718 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6fc:	f7f4 facc 	bl	c98 <Adc_schm_read_msr>
    c700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c702:	9b00      	ldr	r3, [sp, #0]
    c704:	f003 0301 	and.w	r3, r3, #1
    c708:	2b00      	cmp	r3, #0
    c70a:	d100      	bne.n	c70e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c70c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    c70e:	490a      	ldr	r1, [pc, #40]	; (c738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    c710:	9b01      	ldr	r3, [sp, #4]
    c712:	9a00      	ldr	r2, [sp, #0]
    c714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    c718:	4a06      	ldr	r2, [pc, #24]	; (c734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    c71a:	9b01      	ldr	r3, [sp, #4]
    c71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c720:	1c5a      	adds	r2, r3, #1
    c722:	4904      	ldr	r1, [pc, #16]	; (c734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    c724:	9b01      	ldr	r3, [sp, #4]
    c726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c72a:	bf00      	nop
    c72c:	b003      	add	sp, #12
    c72e:	f85d fb04 	ldr.w	pc, [sp], #4
    c732:	bf00      	nop
    c734:	1fff8e70 	.word	0x1fff8e70
    c738:	1fff8e6c 	.word	0x1fff8e6c

0000c73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    c73c:	b500      	push	{lr}
    c73e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c740:	f7f5 f894 	bl	186c <Sys_GetCoreID>
    c744:	4603      	mov	r3, r0
    c746:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    c748:	4a0d      	ldr	r2, [pc, #52]	; (c780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    c74a:	9b01      	ldr	r3, [sp, #4]
    c74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c750:	1e5a      	subs	r2, r3, #1
    c752:	490b      	ldr	r1, [pc, #44]	; (c780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    c754:	9b01      	ldr	r3, [sp, #4]
    c756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    c75a:	4a0a      	ldr	r2, [pc, #40]	; (c784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    c75c:	9b01      	ldr	r3, [sp, #4]
    c75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c762:	f003 0301 	and.w	r3, r3, #1
    c766:	2b00      	cmp	r3, #0
    c768:	d106      	bne.n	c778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    c76a:	4a05      	ldr	r2, [pc, #20]	; (c780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    c76c:	9b01      	ldr	r3, [sp, #4]
    c76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c772:	2b00      	cmp	r3, #0
    c774:	d100      	bne.n	c778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c778:	bf00      	nop
    c77a:	b003      	add	sp, #12
    c77c:	f85d fb04 	ldr.w	pc, [sp], #4
    c780:	1fff8e70 	.word	0x1fff8e70
    c784:	1fff8e6c 	.word	0x1fff8e6c

0000c788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    c788:	b500      	push	{lr}
    c78a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c78c:	f7f5 f86e 	bl	186c <Sys_GetCoreID>
    c790:	4603      	mov	r3, r0
    c792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    c794:	4a10      	ldr	r2, [pc, #64]	; (c7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    c796:	9b01      	ldr	r3, [sp, #4]
    c798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c79c:	2b00      	cmp	r3, #0
    c79e:	d10d      	bne.n	c7bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7a0:	f7f4 fa7a 	bl	c98 <Adc_schm_read_msr>
    c7a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7a6:	9b00      	ldr	r3, [sp, #0]
    c7a8:	f003 0301 	and.w	r3, r3, #1
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	d100      	bne.n	c7b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c7b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    c7b2:	490a      	ldr	r1, [pc, #40]	; (c7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    c7b4:	9b01      	ldr	r3, [sp, #4]
    c7b6:	9a00      	ldr	r2, [sp, #0]
    c7b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    c7bc:	4a06      	ldr	r2, [pc, #24]	; (c7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    c7be:	9b01      	ldr	r3, [sp, #4]
    c7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7c4:	1c5a      	adds	r2, r3, #1
    c7c6:	4904      	ldr	r1, [pc, #16]	; (c7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    c7c8:	9b01      	ldr	r3, [sp, #4]
    c7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c7ce:	bf00      	nop
    c7d0:	b003      	add	sp, #12
    c7d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c7d6:	bf00      	nop
    c7d8:	1fff8e78 	.word	0x1fff8e78
    c7dc:	1fff8e74 	.word	0x1fff8e74

0000c7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    c7e0:	b500      	push	{lr}
    c7e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7e4:	f7f5 f842 	bl	186c <Sys_GetCoreID>
    c7e8:	4603      	mov	r3, r0
    c7ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    c7ec:	4a0d      	ldr	r2, [pc, #52]	; (c824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    c7ee:	9b01      	ldr	r3, [sp, #4]
    c7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7f4:	1e5a      	subs	r2, r3, #1
    c7f6:	490b      	ldr	r1, [pc, #44]	; (c824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    c7f8:	9b01      	ldr	r3, [sp, #4]
    c7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    c7fe:	4a0a      	ldr	r2, [pc, #40]	; (c828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    c800:	9b01      	ldr	r3, [sp, #4]
    c802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c806:	f003 0301 	and.w	r3, r3, #1
    c80a:	2b00      	cmp	r3, #0
    c80c:	d106      	bne.n	c81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    c80e:	4a05      	ldr	r2, [pc, #20]	; (c824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    c810:	9b01      	ldr	r3, [sp, #4]
    c812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c816:	2b00      	cmp	r3, #0
    c818:	d100      	bne.n	c81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c81a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c81c:	bf00      	nop
    c81e:	b003      	add	sp, #12
    c820:	f85d fb04 	ldr.w	pc, [sp], #4
    c824:	1fff8e78 	.word	0x1fff8e78
    c828:	1fff8e74 	.word	0x1fff8e74

0000c82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    c82c:	b500      	push	{lr}
    c82e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c830:	f7f5 f81c 	bl	186c <Sys_GetCoreID>
    c834:	4603      	mov	r3, r0
    c836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    c838:	4a10      	ldr	r2, [pc, #64]	; (c87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    c83a:	9b01      	ldr	r3, [sp, #4]
    c83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c840:	2b00      	cmp	r3, #0
    c842:	d10d      	bne.n	c860 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c844:	f7f4 fa28 	bl	c98 <Adc_schm_read_msr>
    c848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c84a:	9b00      	ldr	r3, [sp, #0]
    c84c:	f003 0301 	and.w	r3, r3, #1
    c850:	2b00      	cmp	r3, #0
    c852:	d100      	bne.n	c856 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    c856:	490a      	ldr	r1, [pc, #40]	; (c880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    c858:	9b01      	ldr	r3, [sp, #4]
    c85a:	9a00      	ldr	r2, [sp, #0]
    c85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    c860:	4a06      	ldr	r2, [pc, #24]	; (c87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    c862:	9b01      	ldr	r3, [sp, #4]
    c864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c868:	1c5a      	adds	r2, r3, #1
    c86a:	4904      	ldr	r1, [pc, #16]	; (c87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    c86c:	9b01      	ldr	r3, [sp, #4]
    c86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c872:	bf00      	nop
    c874:	b003      	add	sp, #12
    c876:	f85d fb04 	ldr.w	pc, [sp], #4
    c87a:	bf00      	nop
    c87c:	1fff8e80 	.word	0x1fff8e80
    c880:	1fff8e7c 	.word	0x1fff8e7c

0000c884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    c884:	b500      	push	{lr}
    c886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c888:	f7f4 fff0 	bl	186c <Sys_GetCoreID>
    c88c:	4603      	mov	r3, r0
    c88e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    c890:	4a0d      	ldr	r2, [pc, #52]	; (c8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    c892:	9b01      	ldr	r3, [sp, #4]
    c894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c898:	1e5a      	subs	r2, r3, #1
    c89a:	490b      	ldr	r1, [pc, #44]	; (c8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    c89c:	9b01      	ldr	r3, [sp, #4]
    c89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    c8a2:	4a0a      	ldr	r2, [pc, #40]	; (c8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    c8a4:	9b01      	ldr	r3, [sp, #4]
    c8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8aa:	f003 0301 	and.w	r3, r3, #1
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d106      	bne.n	c8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    c8b2:	4a05      	ldr	r2, [pc, #20]	; (c8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    c8b4:	9b01      	ldr	r3, [sp, #4]
    c8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d100      	bne.n	c8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c8be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c8c0:	bf00      	nop
    c8c2:	b003      	add	sp, #12
    c8c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c8c8:	1fff8e80 	.word	0x1fff8e80
    c8cc:	1fff8e7c 	.word	0x1fff8e7c

0000c8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    c8d0:	b500      	push	{lr}
    c8d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8d4:	f7f4 ffca 	bl	186c <Sys_GetCoreID>
    c8d8:	4603      	mov	r3, r0
    c8da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    c8dc:	4a10      	ldr	r2, [pc, #64]	; (c920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    c8de:	9b01      	ldr	r3, [sp, #4]
    c8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d10d      	bne.n	c904 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c8e8:	f7f4 f9d6 	bl	c98 <Adc_schm_read_msr>
    c8ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c8ee:	9b00      	ldr	r3, [sp, #0]
    c8f0:	f003 0301 	and.w	r3, r3, #1
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	d100      	bne.n	c8fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    c8fa:	490a      	ldr	r1, [pc, #40]	; (c924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    c8fc:	9b01      	ldr	r3, [sp, #4]
    c8fe:	9a00      	ldr	r2, [sp, #0]
    c900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    c904:	4a06      	ldr	r2, [pc, #24]	; (c920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    c906:	9b01      	ldr	r3, [sp, #4]
    c908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c90c:	1c5a      	adds	r2, r3, #1
    c90e:	4904      	ldr	r1, [pc, #16]	; (c920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    c910:	9b01      	ldr	r3, [sp, #4]
    c912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c916:	bf00      	nop
    c918:	b003      	add	sp, #12
    c91a:	f85d fb04 	ldr.w	pc, [sp], #4
    c91e:	bf00      	nop
    c920:	1fff8e88 	.word	0x1fff8e88
    c924:	1fff8e84 	.word	0x1fff8e84

0000c928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    c928:	b500      	push	{lr}
    c92a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c92c:	f7f4 ff9e 	bl	186c <Sys_GetCoreID>
    c930:	4603      	mov	r3, r0
    c932:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    c934:	4a0d      	ldr	r2, [pc, #52]	; (c96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    c936:	9b01      	ldr	r3, [sp, #4]
    c938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c93c:	1e5a      	subs	r2, r3, #1
    c93e:	490b      	ldr	r1, [pc, #44]	; (c96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    c940:	9b01      	ldr	r3, [sp, #4]
    c942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    c946:	4a0a      	ldr	r2, [pc, #40]	; (c970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    c948:	9b01      	ldr	r3, [sp, #4]
    c94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c94e:	f003 0301 	and.w	r3, r3, #1
    c952:	2b00      	cmp	r3, #0
    c954:	d106      	bne.n	c964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    c956:	4a05      	ldr	r2, [pc, #20]	; (c96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    c958:	9b01      	ldr	r3, [sp, #4]
    c95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c95e:	2b00      	cmp	r3, #0
    c960:	d100      	bne.n	c964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c964:	bf00      	nop
    c966:	b003      	add	sp, #12
    c968:	f85d fb04 	ldr.w	pc, [sp], #4
    c96c:	1fff8e88 	.word	0x1fff8e88
    c970:	1fff8e84 	.word	0x1fff8e84

0000c974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    c974:	b500      	push	{lr}
    c976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c978:	f7f4 ff78 	bl	186c <Sys_GetCoreID>
    c97c:	4603      	mov	r3, r0
    c97e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    c980:	4a10      	ldr	r2, [pc, #64]	; (c9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    c982:	9b01      	ldr	r3, [sp, #4]
    c984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c988:	2b00      	cmp	r3, #0
    c98a:	d10d      	bne.n	c9a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c98c:	f7f4 f984 	bl	c98 <Adc_schm_read_msr>
    c990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c992:	9b00      	ldr	r3, [sp, #0]
    c994:	f003 0301 	and.w	r3, r3, #1
    c998:	2b00      	cmp	r3, #0
    c99a:	d100      	bne.n	c99e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c99c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    c99e:	490a      	ldr	r1, [pc, #40]	; (c9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    c9a0:	9b01      	ldr	r3, [sp, #4]
    c9a2:	9a00      	ldr	r2, [sp, #0]
    c9a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    c9a8:	4a06      	ldr	r2, [pc, #24]	; (c9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    c9aa:	9b01      	ldr	r3, [sp, #4]
    c9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9b0:	1c5a      	adds	r2, r3, #1
    c9b2:	4904      	ldr	r1, [pc, #16]	; (c9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    c9b4:	9b01      	ldr	r3, [sp, #4]
    c9b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c9ba:	bf00      	nop
    c9bc:	b003      	add	sp, #12
    c9be:	f85d fb04 	ldr.w	pc, [sp], #4
    c9c2:	bf00      	nop
    c9c4:	1fff8e90 	.word	0x1fff8e90
    c9c8:	1fff8e8c 	.word	0x1fff8e8c

0000c9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    c9cc:	b500      	push	{lr}
    c9ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9d0:	f7f4 ff4c 	bl	186c <Sys_GetCoreID>
    c9d4:	4603      	mov	r3, r0
    c9d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    c9d8:	4a0d      	ldr	r2, [pc, #52]	; (ca10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    c9da:	9b01      	ldr	r3, [sp, #4]
    c9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9e0:	1e5a      	subs	r2, r3, #1
    c9e2:	490b      	ldr	r1, [pc, #44]	; (ca10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    c9e4:	9b01      	ldr	r3, [sp, #4]
    c9e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    c9ea:	4a0a      	ldr	r2, [pc, #40]	; (ca14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    c9ec:	9b01      	ldr	r3, [sp, #4]
    c9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9f2:	f003 0301 	and.w	r3, r3, #1
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	d106      	bne.n	ca08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    c9fa:	4a05      	ldr	r2, [pc, #20]	; (ca10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca02:	2b00      	cmp	r3, #0
    ca04:	d100      	bne.n	ca08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca08:	bf00      	nop
    ca0a:	b003      	add	sp, #12
    ca0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca10:	1fff8e90 	.word	0x1fff8e90
    ca14:	1fff8e8c 	.word	0x1fff8e8c

0000ca18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    ca18:	b500      	push	{lr}
    ca1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca1c:	f7f4 ff26 	bl	186c <Sys_GetCoreID>
    ca20:	4603      	mov	r3, r0
    ca22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    ca24:	4a10      	ldr	r2, [pc, #64]	; (ca68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ca26:	9b01      	ldr	r3, [sp, #4]
    ca28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	d10d      	bne.n	ca4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca30:	f7f4 f932 	bl	c98 <Adc_schm_read_msr>
    ca34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca36:	9b00      	ldr	r3, [sp, #0]
    ca38:	f003 0301 	and.w	r3, r3, #1
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d100      	bne.n	ca42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    ca42:	490a      	ldr	r1, [pc, #40]	; (ca6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    ca44:	9b01      	ldr	r3, [sp, #4]
    ca46:	9a00      	ldr	r2, [sp, #0]
    ca48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    ca4c:	4a06      	ldr	r2, [pc, #24]	; (ca68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ca4e:	9b01      	ldr	r3, [sp, #4]
    ca50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca54:	1c5a      	adds	r2, r3, #1
    ca56:	4904      	ldr	r1, [pc, #16]	; (ca68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ca58:	9b01      	ldr	r3, [sp, #4]
    ca5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca5e:	bf00      	nop
    ca60:	b003      	add	sp, #12
    ca62:	f85d fb04 	ldr.w	pc, [sp], #4
    ca66:	bf00      	nop
    ca68:	1fff8e98 	.word	0x1fff8e98
    ca6c:	1fff8e94 	.word	0x1fff8e94

0000ca70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    ca70:	b500      	push	{lr}
    ca72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca74:	f7f4 fefa 	bl	186c <Sys_GetCoreID>
    ca78:	4603      	mov	r3, r0
    ca7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    ca7c:	4a0d      	ldr	r2, [pc, #52]	; (cab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ca7e:	9b01      	ldr	r3, [sp, #4]
    ca80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca84:	1e5a      	subs	r2, r3, #1
    ca86:	490b      	ldr	r1, [pc, #44]	; (cab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ca88:	9b01      	ldr	r3, [sp, #4]
    ca8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    ca8e:	4a0a      	ldr	r2, [pc, #40]	; (cab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    ca90:	9b01      	ldr	r3, [sp, #4]
    ca92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca96:	f003 0301 	and.w	r3, r3, #1
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d106      	bne.n	caac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    ca9e:	4a05      	ldr	r2, [pc, #20]	; (cab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d100      	bne.n	caac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    caaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    caac:	bf00      	nop
    caae:	b003      	add	sp, #12
    cab0:	f85d fb04 	ldr.w	pc, [sp], #4
    cab4:	1fff8e98 	.word	0x1fff8e98
    cab8:	1fff8e94 	.word	0x1fff8e94

0000cabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    cabc:	b500      	push	{lr}
    cabe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cac0:	f7f4 fed4 	bl	186c <Sys_GetCoreID>
    cac4:	4603      	mov	r3, r0
    cac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    cac8:	4a10      	ldr	r2, [pc, #64]	; (cb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    caca:	9b01      	ldr	r3, [sp, #4]
    cacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cad0:	2b00      	cmp	r3, #0
    cad2:	d10d      	bne.n	caf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cad4:	f7f4 f8e0 	bl	c98 <Adc_schm_read_msr>
    cad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cada:	9b00      	ldr	r3, [sp, #0]
    cadc:	f003 0301 	and.w	r3, r3, #1
    cae0:	2b00      	cmp	r3, #0
    cae2:	d100      	bne.n	cae6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    cae6:	490a      	ldr	r1, [pc, #40]	; (cb10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    cae8:	9b01      	ldr	r3, [sp, #4]
    caea:	9a00      	ldr	r2, [sp, #0]
    caec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    caf0:	4a06      	ldr	r2, [pc, #24]	; (cb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    caf2:	9b01      	ldr	r3, [sp, #4]
    caf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caf8:	1c5a      	adds	r2, r3, #1
    cafa:	4904      	ldr	r1, [pc, #16]	; (cb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    cafc:	9b01      	ldr	r3, [sp, #4]
    cafe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb02:	bf00      	nop
    cb04:	b003      	add	sp, #12
    cb06:	f85d fb04 	ldr.w	pc, [sp], #4
    cb0a:	bf00      	nop
    cb0c:	1fff8ea0 	.word	0x1fff8ea0
    cb10:	1fff8e9c 	.word	0x1fff8e9c

0000cb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    cb14:	b500      	push	{lr}
    cb16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb18:	f7f4 fea8 	bl	186c <Sys_GetCoreID>
    cb1c:	4603      	mov	r3, r0
    cb1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    cb20:	4a0d      	ldr	r2, [pc, #52]	; (cb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    cb22:	9b01      	ldr	r3, [sp, #4]
    cb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb28:	1e5a      	subs	r2, r3, #1
    cb2a:	490b      	ldr	r1, [pc, #44]	; (cb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    cb2c:	9b01      	ldr	r3, [sp, #4]
    cb2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    cb32:	4a0a      	ldr	r2, [pc, #40]	; (cb5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    cb34:	9b01      	ldr	r3, [sp, #4]
    cb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb3a:	f003 0301 	and.w	r3, r3, #1
    cb3e:	2b00      	cmp	r3, #0
    cb40:	d106      	bne.n	cb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    cb42:	4a05      	ldr	r2, [pc, #20]	; (cb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    cb44:	9b01      	ldr	r3, [sp, #4]
    cb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	d100      	bne.n	cb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb50:	bf00      	nop
    cb52:	b003      	add	sp, #12
    cb54:	f85d fb04 	ldr.w	pc, [sp], #4
    cb58:	1fff8ea0 	.word	0x1fff8ea0
    cb5c:	1fff8e9c 	.word	0x1fff8e9c

0000cb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    cb60:	b500      	push	{lr}
    cb62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb64:	f7f4 fe82 	bl	186c <Sys_GetCoreID>
    cb68:	4603      	mov	r3, r0
    cb6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    cb6c:	4a10      	ldr	r2, [pc, #64]	; (cbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    cb6e:	9b01      	ldr	r3, [sp, #4]
    cb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb74:	2b00      	cmp	r3, #0
    cb76:	d10d      	bne.n	cb94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb78:	f7f4 f88e 	bl	c98 <Adc_schm_read_msr>
    cb7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb7e:	9b00      	ldr	r3, [sp, #0]
    cb80:	f003 0301 	and.w	r3, r3, #1
    cb84:	2b00      	cmp	r3, #0
    cb86:	d100      	bne.n	cb8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    cb8a:	490a      	ldr	r1, [pc, #40]	; (cbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    cb8c:	9b01      	ldr	r3, [sp, #4]
    cb8e:	9a00      	ldr	r2, [sp, #0]
    cb90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    cb94:	4a06      	ldr	r2, [pc, #24]	; (cbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    cb96:	9b01      	ldr	r3, [sp, #4]
    cb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb9c:	1c5a      	adds	r2, r3, #1
    cb9e:	4904      	ldr	r1, [pc, #16]	; (cbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    cba0:	9b01      	ldr	r3, [sp, #4]
    cba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cba6:	bf00      	nop
    cba8:	b003      	add	sp, #12
    cbaa:	f85d fb04 	ldr.w	pc, [sp], #4
    cbae:	bf00      	nop
    cbb0:	1fff8ea8 	.word	0x1fff8ea8
    cbb4:	1fff8ea4 	.word	0x1fff8ea4

0000cbb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    cbb8:	b500      	push	{lr}
    cbba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbbc:	f7f4 fe56 	bl	186c <Sys_GetCoreID>
    cbc0:	4603      	mov	r3, r0
    cbc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    cbc4:	4a0d      	ldr	r2, [pc, #52]	; (cbfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    cbc6:	9b01      	ldr	r3, [sp, #4]
    cbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbcc:	1e5a      	subs	r2, r3, #1
    cbce:	490b      	ldr	r1, [pc, #44]	; (cbfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    cbd0:	9b01      	ldr	r3, [sp, #4]
    cbd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    cbd6:	4a0a      	ldr	r2, [pc, #40]	; (cc00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    cbd8:	9b01      	ldr	r3, [sp, #4]
    cbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbde:	f003 0301 	and.w	r3, r3, #1
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d106      	bne.n	cbf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    cbe6:	4a05      	ldr	r2, [pc, #20]	; (cbfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    cbe8:	9b01      	ldr	r3, [sp, #4]
    cbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbee:	2b00      	cmp	r3, #0
    cbf0:	d100      	bne.n	cbf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cbf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cbf4:	bf00      	nop
    cbf6:	b003      	add	sp, #12
    cbf8:	f85d fb04 	ldr.w	pc, [sp], #4
    cbfc:	1fff8ea8 	.word	0x1fff8ea8
    cc00:	1fff8ea4 	.word	0x1fff8ea4

0000cc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    cc04:	b500      	push	{lr}
    cc06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc08:	f7f4 fe30 	bl	186c <Sys_GetCoreID>
    cc0c:	4603      	mov	r3, r0
    cc0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    cc10:	4a10      	ldr	r2, [pc, #64]	; (cc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    cc12:	9b01      	ldr	r3, [sp, #4]
    cc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d10d      	bne.n	cc38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc1c:	f7f4 f83c 	bl	c98 <Adc_schm_read_msr>
    cc20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc22:	9b00      	ldr	r3, [sp, #0]
    cc24:	f003 0301 	and.w	r3, r3, #1
    cc28:	2b00      	cmp	r3, #0
    cc2a:	d100      	bne.n	cc2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    cc2e:	490a      	ldr	r1, [pc, #40]	; (cc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    cc30:	9b01      	ldr	r3, [sp, #4]
    cc32:	9a00      	ldr	r2, [sp, #0]
    cc34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    cc38:	4a06      	ldr	r2, [pc, #24]	; (cc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    cc3a:	9b01      	ldr	r3, [sp, #4]
    cc3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc40:	1c5a      	adds	r2, r3, #1
    cc42:	4904      	ldr	r1, [pc, #16]	; (cc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    cc44:	9b01      	ldr	r3, [sp, #4]
    cc46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc4a:	bf00      	nop
    cc4c:	b003      	add	sp, #12
    cc4e:	f85d fb04 	ldr.w	pc, [sp], #4
    cc52:	bf00      	nop
    cc54:	1fff8eb0 	.word	0x1fff8eb0
    cc58:	1fff8eac 	.word	0x1fff8eac

0000cc5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    cc5c:	b500      	push	{lr}
    cc5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc60:	f7f4 fe04 	bl	186c <Sys_GetCoreID>
    cc64:	4603      	mov	r3, r0
    cc66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    cc68:	4a0d      	ldr	r2, [pc, #52]	; (cca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    cc6a:	9b01      	ldr	r3, [sp, #4]
    cc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc70:	1e5a      	subs	r2, r3, #1
    cc72:	490b      	ldr	r1, [pc, #44]	; (cca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    cc74:	9b01      	ldr	r3, [sp, #4]
    cc76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    cc7a:	4a0a      	ldr	r2, [pc, #40]	; (cca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    cc7c:	9b01      	ldr	r3, [sp, #4]
    cc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc82:	f003 0301 	and.w	r3, r3, #1
    cc86:	2b00      	cmp	r3, #0
    cc88:	d106      	bne.n	cc98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    cc8a:	4a05      	ldr	r2, [pc, #20]	; (cca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    cc8c:	9b01      	ldr	r3, [sp, #4]
    cc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc92:	2b00      	cmp	r3, #0
    cc94:	d100      	bne.n	cc98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc98:	bf00      	nop
    cc9a:	b003      	add	sp, #12
    cc9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cca0:	1fff8eb0 	.word	0x1fff8eb0
    cca4:	1fff8eac 	.word	0x1fff8eac

0000cca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    cca8:	b500      	push	{lr}
    ccaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccac:	f7f4 fdde 	bl	186c <Sys_GetCoreID>
    ccb0:	4603      	mov	r3, r0
    ccb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    ccb4:	4a10      	ldr	r2, [pc, #64]	; (ccf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    ccb6:	9b01      	ldr	r3, [sp, #4]
    ccb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	d10d      	bne.n	ccdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ccc0:	f7f3 ffea 	bl	c98 <Adc_schm_read_msr>
    ccc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ccc6:	9b00      	ldr	r3, [sp, #0]
    ccc8:	f003 0301 	and.w	r3, r3, #1
    cccc:	2b00      	cmp	r3, #0
    ccce:	d100      	bne.n	ccd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ccd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    ccd2:	490a      	ldr	r1, [pc, #40]	; (ccfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	9a00      	ldr	r2, [sp, #0]
    ccd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    ccdc:	4a06      	ldr	r2, [pc, #24]	; (ccf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    ccde:	9b01      	ldr	r3, [sp, #4]
    cce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cce4:	1c5a      	adds	r2, r3, #1
    cce6:	4904      	ldr	r1, [pc, #16]	; (ccf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    cce8:	9b01      	ldr	r3, [sp, #4]
    ccea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ccee:	bf00      	nop
    ccf0:	b003      	add	sp, #12
    ccf2:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf6:	bf00      	nop
    ccf8:	1fff8eb8 	.word	0x1fff8eb8
    ccfc:	1fff8eb4 	.word	0x1fff8eb4

0000cd00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    cd00:	b500      	push	{lr}
    cd02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd04:	f7f4 fdb2 	bl	186c <Sys_GetCoreID>
    cd08:	4603      	mov	r3, r0
    cd0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    cd0c:	4a0d      	ldr	r2, [pc, #52]	; (cd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    cd0e:	9b01      	ldr	r3, [sp, #4]
    cd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd14:	1e5a      	subs	r2, r3, #1
    cd16:	490b      	ldr	r1, [pc, #44]	; (cd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    cd18:	9b01      	ldr	r3, [sp, #4]
    cd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    cd1e:	4a0a      	ldr	r2, [pc, #40]	; (cd48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    cd20:	9b01      	ldr	r3, [sp, #4]
    cd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd26:	f003 0301 	and.w	r3, r3, #1
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	d106      	bne.n	cd3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    cd2e:	4a05      	ldr	r2, [pc, #20]	; (cd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    cd30:	9b01      	ldr	r3, [sp, #4]
    cd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd36:	2b00      	cmp	r3, #0
    cd38:	d100      	bne.n	cd3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd3c:	bf00      	nop
    cd3e:	b003      	add	sp, #12
    cd40:	f85d fb04 	ldr.w	pc, [sp], #4
    cd44:	1fff8eb8 	.word	0x1fff8eb8
    cd48:	1fff8eb4 	.word	0x1fff8eb4

0000cd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    cd4c:	b500      	push	{lr}
    cd4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd50:	f7f4 fd8c 	bl	186c <Sys_GetCoreID>
    cd54:	4603      	mov	r3, r0
    cd56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    cd58:	4a10      	ldr	r2, [pc, #64]	; (cd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    cd5a:	9b01      	ldr	r3, [sp, #4]
    cd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd60:	2b00      	cmp	r3, #0
    cd62:	d10d      	bne.n	cd80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd64:	f7f3 ff98 	bl	c98 <Adc_schm_read_msr>
    cd68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd6a:	9b00      	ldr	r3, [sp, #0]
    cd6c:	f003 0301 	and.w	r3, r3, #1
    cd70:	2b00      	cmp	r3, #0
    cd72:	d100      	bne.n	cd76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    cd76:	490a      	ldr	r1, [pc, #40]	; (cda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    cd78:	9b01      	ldr	r3, [sp, #4]
    cd7a:	9a00      	ldr	r2, [sp, #0]
    cd7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    cd80:	4a06      	ldr	r2, [pc, #24]	; (cd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    cd82:	9b01      	ldr	r3, [sp, #4]
    cd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd88:	1c5a      	adds	r2, r3, #1
    cd8a:	4904      	ldr	r1, [pc, #16]	; (cd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    cd8c:	9b01      	ldr	r3, [sp, #4]
    cd8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd92:	bf00      	nop
    cd94:	b003      	add	sp, #12
    cd96:	f85d fb04 	ldr.w	pc, [sp], #4
    cd9a:	bf00      	nop
    cd9c:	1fff8ec0 	.word	0x1fff8ec0
    cda0:	1fff8ebc 	.word	0x1fff8ebc

0000cda4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    cda4:	b500      	push	{lr}
    cda6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cda8:	f7f4 fd60 	bl	186c <Sys_GetCoreID>
    cdac:	4603      	mov	r3, r0
    cdae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    cdb0:	4a0d      	ldr	r2, [pc, #52]	; (cde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    cdb2:	9b01      	ldr	r3, [sp, #4]
    cdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb8:	1e5a      	subs	r2, r3, #1
    cdba:	490b      	ldr	r1, [pc, #44]	; (cde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    cdbc:	9b01      	ldr	r3, [sp, #4]
    cdbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    cdc2:	4a0a      	ldr	r2, [pc, #40]	; (cdec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    cdc4:	9b01      	ldr	r3, [sp, #4]
    cdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdca:	f003 0301 	and.w	r3, r3, #1
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d106      	bne.n	cde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    cdd2:	4a05      	ldr	r2, [pc, #20]	; (cde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    cdd4:	9b01      	ldr	r3, [sp, #4]
    cdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdda:	2b00      	cmp	r3, #0
    cddc:	d100      	bne.n	cde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cdde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cde0:	bf00      	nop
    cde2:	b003      	add	sp, #12
    cde4:	f85d fb04 	ldr.w	pc, [sp], #4
    cde8:	1fff8ec0 	.word	0x1fff8ec0
    cdec:	1fff8ebc 	.word	0x1fff8ebc

0000cdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    cdf0:	b500      	push	{lr}
    cdf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdf4:	f7f4 fd3a 	bl	186c <Sys_GetCoreID>
    cdf8:	4603      	mov	r3, r0
    cdfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    cdfc:	4a10      	ldr	r2, [pc, #64]	; (ce40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    cdfe:	9b01      	ldr	r3, [sp, #4]
    ce00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d10d      	bne.n	ce24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce08:	f7f3 ff46 	bl	c98 <Adc_schm_read_msr>
    ce0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce0e:	9b00      	ldr	r3, [sp, #0]
    ce10:	f003 0301 	and.w	r3, r3, #1
    ce14:	2b00      	cmp	r3, #0
    ce16:	d100      	bne.n	ce1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    ce1a:	490a      	ldr	r1, [pc, #40]	; (ce44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    ce1c:	9b01      	ldr	r3, [sp, #4]
    ce1e:	9a00      	ldr	r2, [sp, #0]
    ce20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    ce24:	4a06      	ldr	r2, [pc, #24]	; (ce40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    ce26:	9b01      	ldr	r3, [sp, #4]
    ce28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce2c:	1c5a      	adds	r2, r3, #1
    ce2e:	4904      	ldr	r1, [pc, #16]	; (ce40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    ce30:	9b01      	ldr	r3, [sp, #4]
    ce32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce36:	bf00      	nop
    ce38:	b003      	add	sp, #12
    ce3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce3e:	bf00      	nop
    ce40:	1fff8ec8 	.word	0x1fff8ec8
    ce44:	1fff8ec4 	.word	0x1fff8ec4

0000ce48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    ce48:	b500      	push	{lr}
    ce4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce4c:	f7f4 fd0e 	bl	186c <Sys_GetCoreID>
    ce50:	4603      	mov	r3, r0
    ce52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    ce54:	4a0d      	ldr	r2, [pc, #52]	; (ce8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    ce56:	9b01      	ldr	r3, [sp, #4]
    ce58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce5c:	1e5a      	subs	r2, r3, #1
    ce5e:	490b      	ldr	r1, [pc, #44]	; (ce8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    ce60:	9b01      	ldr	r3, [sp, #4]
    ce62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    ce66:	4a0a      	ldr	r2, [pc, #40]	; (ce90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    ce68:	9b01      	ldr	r3, [sp, #4]
    ce6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce6e:	f003 0301 	and.w	r3, r3, #1
    ce72:	2b00      	cmp	r3, #0
    ce74:	d106      	bne.n	ce84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    ce76:	4a05      	ldr	r2, [pc, #20]	; (ce8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    ce78:	9b01      	ldr	r3, [sp, #4]
    ce7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d100      	bne.n	ce84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce84:	bf00      	nop
    ce86:	b003      	add	sp, #12
    ce88:	f85d fb04 	ldr.w	pc, [sp], #4
    ce8c:	1fff8ec8 	.word	0x1fff8ec8
    ce90:	1fff8ec4 	.word	0x1fff8ec4

0000ce94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    ce94:	b500      	push	{lr}
    ce96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce98:	f7f4 fce8 	bl	186c <Sys_GetCoreID>
    ce9c:	4603      	mov	r3, r0
    ce9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    cea0:	4a10      	ldr	r2, [pc, #64]	; (cee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    cea2:	9b01      	ldr	r3, [sp, #4]
    cea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cea8:	2b00      	cmp	r3, #0
    ceaa:	d10d      	bne.n	cec8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ceac:	f7f3 fef4 	bl	c98 <Adc_schm_read_msr>
    ceb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ceb2:	9b00      	ldr	r3, [sp, #0]
    ceb4:	f003 0301 	and.w	r3, r3, #1
    ceb8:	2b00      	cmp	r3, #0
    ceba:	d100      	bne.n	cebe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    cebe:	490a      	ldr	r1, [pc, #40]	; (cee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	9a00      	ldr	r2, [sp, #0]
    cec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    cec8:	4a06      	ldr	r2, [pc, #24]	; (cee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    ceca:	9b01      	ldr	r3, [sp, #4]
    cecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ced0:	1c5a      	adds	r2, r3, #1
    ced2:	4904      	ldr	r1, [pc, #16]	; (cee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    ced4:	9b01      	ldr	r3, [sp, #4]
    ced6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ceda:	bf00      	nop
    cedc:	b003      	add	sp, #12
    cede:	f85d fb04 	ldr.w	pc, [sp], #4
    cee2:	bf00      	nop
    cee4:	1fff8ed0 	.word	0x1fff8ed0
    cee8:	1fff8ecc 	.word	0x1fff8ecc

0000ceec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    ceec:	b500      	push	{lr}
    ceee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cef0:	f7f4 fcbc 	bl	186c <Sys_GetCoreID>
    cef4:	4603      	mov	r3, r0
    cef6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    cef8:	4a0d      	ldr	r2, [pc, #52]	; (cf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    cefa:	9b01      	ldr	r3, [sp, #4]
    cefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf00:	1e5a      	subs	r2, r3, #1
    cf02:	490b      	ldr	r1, [pc, #44]	; (cf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    cf04:	9b01      	ldr	r3, [sp, #4]
    cf06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    cf0a:	4a0a      	ldr	r2, [pc, #40]	; (cf34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    cf0c:	9b01      	ldr	r3, [sp, #4]
    cf0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf12:	f003 0301 	and.w	r3, r3, #1
    cf16:	2b00      	cmp	r3, #0
    cf18:	d106      	bne.n	cf28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    cf1a:	4a05      	ldr	r2, [pc, #20]	; (cf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf22:	2b00      	cmp	r3, #0
    cf24:	d100      	bne.n	cf28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf28:	bf00      	nop
    cf2a:	b003      	add	sp, #12
    cf2c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf30:	1fff8ed0 	.word	0x1fff8ed0
    cf34:	1fff8ecc 	.word	0x1fff8ecc

0000cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    cf38:	b500      	push	{lr}
    cf3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf3c:	f7f4 fc96 	bl	186c <Sys_GetCoreID>
    cf40:	4603      	mov	r3, r0
    cf42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    cf44:	4a10      	ldr	r2, [pc, #64]	; (cf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    cf46:	9b01      	ldr	r3, [sp, #4]
    cf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d10d      	bne.n	cf6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf50:	f7f3 fea2 	bl	c98 <Adc_schm_read_msr>
    cf54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf56:	9b00      	ldr	r3, [sp, #0]
    cf58:	f003 0301 	and.w	r3, r3, #1
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d100      	bne.n	cf62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    cf62:	490a      	ldr	r1, [pc, #40]	; (cf8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    cf64:	9b01      	ldr	r3, [sp, #4]
    cf66:	9a00      	ldr	r2, [sp, #0]
    cf68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    cf6c:	4a06      	ldr	r2, [pc, #24]	; (cf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    cf6e:	9b01      	ldr	r3, [sp, #4]
    cf70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf74:	1c5a      	adds	r2, r3, #1
    cf76:	4904      	ldr	r1, [pc, #16]	; (cf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    cf78:	9b01      	ldr	r3, [sp, #4]
    cf7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf7e:	bf00      	nop
    cf80:	b003      	add	sp, #12
    cf82:	f85d fb04 	ldr.w	pc, [sp], #4
    cf86:	bf00      	nop
    cf88:	1fff8ed8 	.word	0x1fff8ed8
    cf8c:	1fff8ed4 	.word	0x1fff8ed4

0000cf90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    cf90:	b500      	push	{lr}
    cf92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf94:	f7f4 fc6a 	bl	186c <Sys_GetCoreID>
    cf98:	4603      	mov	r3, r0
    cf9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    cf9c:	4a0d      	ldr	r2, [pc, #52]	; (cfd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    cf9e:	9b01      	ldr	r3, [sp, #4]
    cfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfa4:	1e5a      	subs	r2, r3, #1
    cfa6:	490b      	ldr	r1, [pc, #44]	; (cfd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    cfa8:	9b01      	ldr	r3, [sp, #4]
    cfaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    cfae:	4a0a      	ldr	r2, [pc, #40]	; (cfd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    cfb0:	9b01      	ldr	r3, [sp, #4]
    cfb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfb6:	f003 0301 	and.w	r3, r3, #1
    cfba:	2b00      	cmp	r3, #0
    cfbc:	d106      	bne.n	cfcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    cfbe:	4a05      	ldr	r2, [pc, #20]	; (cfd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    cfc0:	9b01      	ldr	r3, [sp, #4]
    cfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d100      	bne.n	cfcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cfca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cfcc:	bf00      	nop
    cfce:	b003      	add	sp, #12
    cfd0:	f85d fb04 	ldr.w	pc, [sp], #4
    cfd4:	1fff8ed8 	.word	0x1fff8ed8
    cfd8:	1fff8ed4 	.word	0x1fff8ed4

0000cfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    cfdc:	b500      	push	{lr}
    cfde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfe0:	f7f4 fc44 	bl	186c <Sys_GetCoreID>
    cfe4:	4603      	mov	r3, r0
    cfe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    cfe8:	4a10      	ldr	r2, [pc, #64]	; (d02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    cfea:	9b01      	ldr	r3, [sp, #4]
    cfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff0:	2b00      	cmp	r3, #0
    cff2:	d10d      	bne.n	d010 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cff4:	f7f3 fe50 	bl	c98 <Adc_schm_read_msr>
    cff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cffa:	9b00      	ldr	r3, [sp, #0]
    cffc:	f003 0301 	and.w	r3, r3, #1
    d000:	2b00      	cmp	r3, #0
    d002:	d100      	bne.n	d006 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    d006:	490a      	ldr	r1, [pc, #40]	; (d030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    d008:	9b01      	ldr	r3, [sp, #4]
    d00a:	9a00      	ldr	r2, [sp, #0]
    d00c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    d010:	4a06      	ldr	r2, [pc, #24]	; (d02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    d012:	9b01      	ldr	r3, [sp, #4]
    d014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d018:	1c5a      	adds	r2, r3, #1
    d01a:	4904      	ldr	r1, [pc, #16]	; (d02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    d01c:	9b01      	ldr	r3, [sp, #4]
    d01e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d022:	bf00      	nop
    d024:	b003      	add	sp, #12
    d026:	f85d fb04 	ldr.w	pc, [sp], #4
    d02a:	bf00      	nop
    d02c:	1fff8ee0 	.word	0x1fff8ee0
    d030:	1fff8edc 	.word	0x1fff8edc

0000d034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    d034:	b500      	push	{lr}
    d036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d038:	f7f4 fc18 	bl	186c <Sys_GetCoreID>
    d03c:	4603      	mov	r3, r0
    d03e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    d040:	4a0d      	ldr	r2, [pc, #52]	; (d078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    d042:	9b01      	ldr	r3, [sp, #4]
    d044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d048:	1e5a      	subs	r2, r3, #1
    d04a:	490b      	ldr	r1, [pc, #44]	; (d078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    d04c:	9b01      	ldr	r3, [sp, #4]
    d04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    d052:	4a0a      	ldr	r2, [pc, #40]	; (d07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    d054:	9b01      	ldr	r3, [sp, #4]
    d056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d05a:	f003 0301 	and.w	r3, r3, #1
    d05e:	2b00      	cmp	r3, #0
    d060:	d106      	bne.n	d070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    d062:	4a05      	ldr	r2, [pc, #20]	; (d078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    d064:	9b01      	ldr	r3, [sp, #4]
    d066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d06a:	2b00      	cmp	r3, #0
    d06c:	d100      	bne.n	d070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d06e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d070:	bf00      	nop
    d072:	b003      	add	sp, #12
    d074:	f85d fb04 	ldr.w	pc, [sp], #4
    d078:	1fff8ee0 	.word	0x1fff8ee0
    d07c:	1fff8edc 	.word	0x1fff8edc

0000d080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    d080:	b500      	push	{lr}
    d082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d084:	f7f4 fbf2 	bl	186c <Sys_GetCoreID>
    d088:	4603      	mov	r3, r0
    d08a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    d08c:	4a10      	ldr	r2, [pc, #64]	; (d0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    d08e:	9b01      	ldr	r3, [sp, #4]
    d090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d094:	2b00      	cmp	r3, #0
    d096:	d10d      	bne.n	d0b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d098:	f7f3 fdfe 	bl	c98 <Adc_schm_read_msr>
    d09c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d09e:	9b00      	ldr	r3, [sp, #0]
    d0a0:	f003 0301 	and.w	r3, r3, #1
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d100      	bne.n	d0aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    d0aa:	490a      	ldr	r1, [pc, #40]	; (d0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    d0ac:	9b01      	ldr	r3, [sp, #4]
    d0ae:	9a00      	ldr	r2, [sp, #0]
    d0b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    d0b4:	4a06      	ldr	r2, [pc, #24]	; (d0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    d0b6:	9b01      	ldr	r3, [sp, #4]
    d0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0bc:	1c5a      	adds	r2, r3, #1
    d0be:	4904      	ldr	r1, [pc, #16]	; (d0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    d0c0:	9b01      	ldr	r3, [sp, #4]
    d0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d0c6:	bf00      	nop
    d0c8:	b003      	add	sp, #12
    d0ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d0ce:	bf00      	nop
    d0d0:	1fff8ee8 	.word	0x1fff8ee8
    d0d4:	1fff8ee4 	.word	0x1fff8ee4

0000d0d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    d0d8:	b500      	push	{lr}
    d0da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0dc:	f7f4 fbc6 	bl	186c <Sys_GetCoreID>
    d0e0:	4603      	mov	r3, r0
    d0e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    d0e4:	4a0d      	ldr	r2, [pc, #52]	; (d11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    d0e6:	9b01      	ldr	r3, [sp, #4]
    d0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ec:	1e5a      	subs	r2, r3, #1
    d0ee:	490b      	ldr	r1, [pc, #44]	; (d11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    d0f0:	9b01      	ldr	r3, [sp, #4]
    d0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    d0f6:	4a0a      	ldr	r2, [pc, #40]	; (d120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    d0f8:	9b01      	ldr	r3, [sp, #4]
    d0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0fe:	f003 0301 	and.w	r3, r3, #1
    d102:	2b00      	cmp	r3, #0
    d104:	d106      	bne.n	d114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    d106:	4a05      	ldr	r2, [pc, #20]	; (d11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    d108:	9b01      	ldr	r3, [sp, #4]
    d10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d10e:	2b00      	cmp	r3, #0
    d110:	d100      	bne.n	d114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d114:	bf00      	nop
    d116:	b003      	add	sp, #12
    d118:	f85d fb04 	ldr.w	pc, [sp], #4
    d11c:	1fff8ee8 	.word	0x1fff8ee8
    d120:	1fff8ee4 	.word	0x1fff8ee4

0000d124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    d124:	b500      	push	{lr}
    d126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d128:	f7f4 fba0 	bl	186c <Sys_GetCoreID>
    d12c:	4603      	mov	r3, r0
    d12e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    d130:	4a10      	ldr	r2, [pc, #64]	; (d174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    d132:	9b01      	ldr	r3, [sp, #4]
    d134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d138:	2b00      	cmp	r3, #0
    d13a:	d10d      	bne.n	d158 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d13c:	f7f3 fdac 	bl	c98 <Adc_schm_read_msr>
    d140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d142:	9b00      	ldr	r3, [sp, #0]
    d144:	f003 0301 	and.w	r3, r3, #1
    d148:	2b00      	cmp	r3, #0
    d14a:	d100      	bne.n	d14e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d14c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    d14e:	490a      	ldr	r1, [pc, #40]	; (d178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    d150:	9b01      	ldr	r3, [sp, #4]
    d152:	9a00      	ldr	r2, [sp, #0]
    d154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    d158:	4a06      	ldr	r2, [pc, #24]	; (d174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    d15a:	9b01      	ldr	r3, [sp, #4]
    d15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d160:	1c5a      	adds	r2, r3, #1
    d162:	4904      	ldr	r1, [pc, #16]	; (d174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    d164:	9b01      	ldr	r3, [sp, #4]
    d166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d16a:	bf00      	nop
    d16c:	b003      	add	sp, #12
    d16e:	f85d fb04 	ldr.w	pc, [sp], #4
    d172:	bf00      	nop
    d174:	1fff8ef0 	.word	0x1fff8ef0
    d178:	1fff8eec 	.word	0x1fff8eec

0000d17c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    d17c:	b500      	push	{lr}
    d17e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d180:	f7f4 fb74 	bl	186c <Sys_GetCoreID>
    d184:	4603      	mov	r3, r0
    d186:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    d188:	4a0d      	ldr	r2, [pc, #52]	; (d1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    d18a:	9b01      	ldr	r3, [sp, #4]
    d18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d190:	1e5a      	subs	r2, r3, #1
    d192:	490b      	ldr	r1, [pc, #44]	; (d1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    d194:	9b01      	ldr	r3, [sp, #4]
    d196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    d19a:	4a0a      	ldr	r2, [pc, #40]	; (d1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a2:	f003 0301 	and.w	r3, r3, #1
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d106      	bne.n	d1b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    d1aa:	4a05      	ldr	r2, [pc, #20]	; (d1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    d1ac:	9b01      	ldr	r3, [sp, #4]
    d1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d100      	bne.n	d1b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d1b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d1b8:	bf00      	nop
    d1ba:	b003      	add	sp, #12
    d1bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c0:	1fff8ef0 	.word	0x1fff8ef0
    d1c4:	1fff8eec 	.word	0x1fff8eec

0000d1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    d1c8:	b500      	push	{lr}
    d1ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1cc:	f7f4 fb4e 	bl	186c <Sys_GetCoreID>
    d1d0:	4603      	mov	r3, r0
    d1d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    d1d4:	4a10      	ldr	r2, [pc, #64]	; (d218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    d1d6:	9b01      	ldr	r3, [sp, #4]
    d1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d10d      	bne.n	d1fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d1e0:	f7f3 fd5a 	bl	c98 <Adc_schm_read_msr>
    d1e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d1e6:	9b00      	ldr	r3, [sp, #0]
    d1e8:	f003 0301 	and.w	r3, r3, #1
    d1ec:	2b00      	cmp	r3, #0
    d1ee:	d100      	bne.n	d1f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    d1f2:	490a      	ldr	r1, [pc, #40]	; (d21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	9a00      	ldr	r2, [sp, #0]
    d1f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    d1fc:	4a06      	ldr	r2, [pc, #24]	; (d218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    d1fe:	9b01      	ldr	r3, [sp, #4]
    d200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d204:	1c5a      	adds	r2, r3, #1
    d206:	4904      	ldr	r1, [pc, #16]	; (d218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    d208:	9b01      	ldr	r3, [sp, #4]
    d20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d20e:	bf00      	nop
    d210:	b003      	add	sp, #12
    d212:	f85d fb04 	ldr.w	pc, [sp], #4
    d216:	bf00      	nop
    d218:	1fff8ef8 	.word	0x1fff8ef8
    d21c:	1fff8ef4 	.word	0x1fff8ef4

0000d220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    d220:	b500      	push	{lr}
    d222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d224:	f7f4 fb22 	bl	186c <Sys_GetCoreID>
    d228:	4603      	mov	r3, r0
    d22a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    d22c:	4a0d      	ldr	r2, [pc, #52]	; (d264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    d22e:	9b01      	ldr	r3, [sp, #4]
    d230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d234:	1e5a      	subs	r2, r3, #1
    d236:	490b      	ldr	r1, [pc, #44]	; (d264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    d238:	9b01      	ldr	r3, [sp, #4]
    d23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    d23e:	4a0a      	ldr	r2, [pc, #40]	; (d268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    d240:	9b01      	ldr	r3, [sp, #4]
    d242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d246:	f003 0301 	and.w	r3, r3, #1
    d24a:	2b00      	cmp	r3, #0
    d24c:	d106      	bne.n	d25c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    d24e:	4a05      	ldr	r2, [pc, #20]	; (d264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    d250:	9b01      	ldr	r3, [sp, #4]
    d252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d256:	2b00      	cmp	r3, #0
    d258:	d100      	bne.n	d25c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d25a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d25c:	bf00      	nop
    d25e:	b003      	add	sp, #12
    d260:	f85d fb04 	ldr.w	pc, [sp], #4
    d264:	1fff8ef8 	.word	0x1fff8ef8
    d268:	1fff8ef4 	.word	0x1fff8ef4

0000d26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    d26c:	b500      	push	{lr}
    d26e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d270:	f7f4 fafc 	bl	186c <Sys_GetCoreID>
    d274:	4603      	mov	r3, r0
    d276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    d278:	4a10      	ldr	r2, [pc, #64]	; (d2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    d27a:	9b01      	ldr	r3, [sp, #4]
    d27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d280:	2b00      	cmp	r3, #0
    d282:	d10d      	bne.n	d2a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d284:	f7f3 fd08 	bl	c98 <Adc_schm_read_msr>
    d288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d28a:	9b00      	ldr	r3, [sp, #0]
    d28c:	f003 0301 	and.w	r3, r3, #1
    d290:	2b00      	cmp	r3, #0
    d292:	d100      	bne.n	d296 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    d296:	490a      	ldr	r1, [pc, #40]	; (d2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    d298:	9b01      	ldr	r3, [sp, #4]
    d29a:	9a00      	ldr	r2, [sp, #0]
    d29c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    d2a0:	4a06      	ldr	r2, [pc, #24]	; (d2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    d2a2:	9b01      	ldr	r3, [sp, #4]
    d2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a8:	1c5a      	adds	r2, r3, #1
    d2aa:	4904      	ldr	r1, [pc, #16]	; (d2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    d2ac:	9b01      	ldr	r3, [sp, #4]
    d2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d2b2:	bf00      	nop
    d2b4:	b003      	add	sp, #12
    d2b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ba:	bf00      	nop
    d2bc:	1fff8f00 	.word	0x1fff8f00
    d2c0:	1fff8efc 	.word	0x1fff8efc

0000d2c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    d2c4:	b500      	push	{lr}
    d2c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c8:	f7f4 fad0 	bl	186c <Sys_GetCoreID>
    d2cc:	4603      	mov	r3, r0
    d2ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    d2d0:	4a0d      	ldr	r2, [pc, #52]	; (d308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    d2d2:	9b01      	ldr	r3, [sp, #4]
    d2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d8:	1e5a      	subs	r2, r3, #1
    d2da:	490b      	ldr	r1, [pc, #44]	; (d308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    d2dc:	9b01      	ldr	r3, [sp, #4]
    d2de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    d2e2:	4a0a      	ldr	r2, [pc, #40]	; (d30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    d2e4:	9b01      	ldr	r3, [sp, #4]
    d2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ea:	f003 0301 	and.w	r3, r3, #1
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d106      	bne.n	d300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    d2f2:	4a05      	ldr	r2, [pc, #20]	; (d308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    d2f4:	9b01      	ldr	r3, [sp, #4]
    d2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	d100      	bne.n	d300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d300:	bf00      	nop
    d302:	b003      	add	sp, #12
    d304:	f85d fb04 	ldr.w	pc, [sp], #4
    d308:	1fff8f00 	.word	0x1fff8f00
    d30c:	1fff8efc 	.word	0x1fff8efc

0000d310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    d310:	b500      	push	{lr}
    d312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d314:	f7f4 faaa 	bl	186c <Sys_GetCoreID>
    d318:	4603      	mov	r3, r0
    d31a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    d31c:	4a10      	ldr	r2, [pc, #64]	; (d360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    d31e:	9b01      	ldr	r3, [sp, #4]
    d320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d324:	2b00      	cmp	r3, #0
    d326:	d10d      	bne.n	d344 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d328:	f7f3 fcb6 	bl	c98 <Adc_schm_read_msr>
    d32c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d32e:	9b00      	ldr	r3, [sp, #0]
    d330:	f003 0301 	and.w	r3, r3, #1
    d334:	2b00      	cmp	r3, #0
    d336:	d100      	bne.n	d33a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    d33a:	490a      	ldr	r1, [pc, #40]	; (d364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    d33c:	9b01      	ldr	r3, [sp, #4]
    d33e:	9a00      	ldr	r2, [sp, #0]
    d340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    d344:	4a06      	ldr	r2, [pc, #24]	; (d360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    d346:	9b01      	ldr	r3, [sp, #4]
    d348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34c:	1c5a      	adds	r2, r3, #1
    d34e:	4904      	ldr	r1, [pc, #16]	; (d360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    d350:	9b01      	ldr	r3, [sp, #4]
    d352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d356:	bf00      	nop
    d358:	b003      	add	sp, #12
    d35a:	f85d fb04 	ldr.w	pc, [sp], #4
    d35e:	bf00      	nop
    d360:	1fff8f08 	.word	0x1fff8f08
    d364:	1fff8f04 	.word	0x1fff8f04

0000d368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    d368:	b500      	push	{lr}
    d36a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d36c:	f7f4 fa7e 	bl	186c <Sys_GetCoreID>
    d370:	4603      	mov	r3, r0
    d372:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    d374:	4a0d      	ldr	r2, [pc, #52]	; (d3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    d376:	9b01      	ldr	r3, [sp, #4]
    d378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d37c:	1e5a      	subs	r2, r3, #1
    d37e:	490b      	ldr	r1, [pc, #44]	; (d3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    d380:	9b01      	ldr	r3, [sp, #4]
    d382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    d386:	4a0a      	ldr	r2, [pc, #40]	; (d3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    d388:	9b01      	ldr	r3, [sp, #4]
    d38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d38e:	f003 0301 	and.w	r3, r3, #1
    d392:	2b00      	cmp	r3, #0
    d394:	d106      	bne.n	d3a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    d396:	4a05      	ldr	r2, [pc, #20]	; (d3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    d398:	9b01      	ldr	r3, [sp, #4]
    d39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d100      	bne.n	d3a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3a4:	bf00      	nop
    d3a6:	b003      	add	sp, #12
    d3a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ac:	1fff8f08 	.word	0x1fff8f08
    d3b0:	1fff8f04 	.word	0x1fff8f04

0000d3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    d3b4:	b500      	push	{lr}
    d3b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3b8:	f7f4 fa58 	bl	186c <Sys_GetCoreID>
    d3bc:	4603      	mov	r3, r0
    d3be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    d3c0:	4a10      	ldr	r2, [pc, #64]	; (d404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    d3c2:	9b01      	ldr	r3, [sp, #4]
    d3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d10d      	bne.n	d3e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d3cc:	f7f3 fc64 	bl	c98 <Adc_schm_read_msr>
    d3d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d3d2:	9b00      	ldr	r3, [sp, #0]
    d3d4:	f003 0301 	and.w	r3, r3, #1
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d100      	bne.n	d3de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d3dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    d3de:	490a      	ldr	r1, [pc, #40]	; (d408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	9a00      	ldr	r2, [sp, #0]
    d3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    d3e8:	4a06      	ldr	r2, [pc, #24]	; (d404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    d3ea:	9b01      	ldr	r3, [sp, #4]
    d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f0:	1c5a      	adds	r2, r3, #1
    d3f2:	4904      	ldr	r1, [pc, #16]	; (d404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    d3f4:	9b01      	ldr	r3, [sp, #4]
    d3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3fa:	bf00      	nop
    d3fc:	b003      	add	sp, #12
    d3fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d402:	bf00      	nop
    d404:	1fff8f10 	.word	0x1fff8f10
    d408:	1fff8f0c 	.word	0x1fff8f0c

0000d40c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    d40c:	b500      	push	{lr}
    d40e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d410:	f7f4 fa2c 	bl	186c <Sys_GetCoreID>
    d414:	4603      	mov	r3, r0
    d416:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    d418:	4a0d      	ldr	r2, [pc, #52]	; (d450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    d41a:	9b01      	ldr	r3, [sp, #4]
    d41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d420:	1e5a      	subs	r2, r3, #1
    d422:	490b      	ldr	r1, [pc, #44]	; (d450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    d424:	9b01      	ldr	r3, [sp, #4]
    d426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    d42a:	4a0a      	ldr	r2, [pc, #40]	; (d454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    d42c:	9b01      	ldr	r3, [sp, #4]
    d42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d432:	f003 0301 	and.w	r3, r3, #1
    d436:	2b00      	cmp	r3, #0
    d438:	d106      	bne.n	d448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    d43a:	4a05      	ldr	r2, [pc, #20]	; (d450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    d43c:	9b01      	ldr	r3, [sp, #4]
    d43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d442:	2b00      	cmp	r3, #0
    d444:	d100      	bne.n	d448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d448:	bf00      	nop
    d44a:	b003      	add	sp, #12
    d44c:	f85d fb04 	ldr.w	pc, [sp], #4
    d450:	1fff8f10 	.word	0x1fff8f10
    d454:	1fff8f0c 	.word	0x1fff8f0c

0000d458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    d458:	b500      	push	{lr}
    d45a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d45c:	f7f4 fa06 	bl	186c <Sys_GetCoreID>
    d460:	4603      	mov	r3, r0
    d462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    d464:	4a10      	ldr	r2, [pc, #64]	; (d4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    d466:	9b01      	ldr	r3, [sp, #4]
    d468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d46c:	2b00      	cmp	r3, #0
    d46e:	d10d      	bne.n	d48c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d470:	f7f3 fc12 	bl	c98 <Adc_schm_read_msr>
    d474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d476:	9b00      	ldr	r3, [sp, #0]
    d478:	f003 0301 	and.w	r3, r3, #1
    d47c:	2b00      	cmp	r3, #0
    d47e:	d100      	bne.n	d482 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    d482:	490a      	ldr	r1, [pc, #40]	; (d4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	9a00      	ldr	r2, [sp, #0]
    d488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    d48c:	4a06      	ldr	r2, [pc, #24]	; (d4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    d48e:	9b01      	ldr	r3, [sp, #4]
    d490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d494:	1c5a      	adds	r2, r3, #1
    d496:	4904      	ldr	r1, [pc, #16]	; (d4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    d498:	9b01      	ldr	r3, [sp, #4]
    d49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d49e:	bf00      	nop
    d4a0:	b003      	add	sp, #12
    d4a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a6:	bf00      	nop
    d4a8:	1fff8f18 	.word	0x1fff8f18
    d4ac:	1fff8f14 	.word	0x1fff8f14

0000d4b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    d4b0:	b500      	push	{lr}
    d4b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4b4:	f7f4 f9da 	bl	186c <Sys_GetCoreID>
    d4b8:	4603      	mov	r3, r0
    d4ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    d4bc:	4a0d      	ldr	r2, [pc, #52]	; (d4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    d4be:	9b01      	ldr	r3, [sp, #4]
    d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c4:	1e5a      	subs	r2, r3, #1
    d4c6:	490b      	ldr	r1, [pc, #44]	; (d4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    d4c8:	9b01      	ldr	r3, [sp, #4]
    d4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    d4ce:	4a0a      	ldr	r2, [pc, #40]	; (d4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    d4d0:	9b01      	ldr	r3, [sp, #4]
    d4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4d6:	f003 0301 	and.w	r3, r3, #1
    d4da:	2b00      	cmp	r3, #0
    d4dc:	d106      	bne.n	d4ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    d4de:	4a05      	ldr	r2, [pc, #20]	; (d4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d100      	bne.n	d4ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4ec:	bf00      	nop
    d4ee:	b003      	add	sp, #12
    d4f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f4:	1fff8f18 	.word	0x1fff8f18
    d4f8:	1fff8f14 	.word	0x1fff8f14

0000d4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    d4fc:	b500      	push	{lr}
    d4fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d500:	f7f4 f9b4 	bl	186c <Sys_GetCoreID>
    d504:	4603      	mov	r3, r0
    d506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    d508:	4a10      	ldr	r2, [pc, #64]	; (d54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    d50a:	9b01      	ldr	r3, [sp, #4]
    d50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d510:	2b00      	cmp	r3, #0
    d512:	d10d      	bne.n	d530 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d514:	f7f3 fbc0 	bl	c98 <Adc_schm_read_msr>
    d518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d51a:	9b00      	ldr	r3, [sp, #0]
    d51c:	f003 0301 	and.w	r3, r3, #1
    d520:	2b00      	cmp	r3, #0
    d522:	d100      	bne.n	d526 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    d526:	490a      	ldr	r1, [pc, #40]	; (d550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	9a00      	ldr	r2, [sp, #0]
    d52c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    d530:	4a06      	ldr	r2, [pc, #24]	; (d54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    d532:	9b01      	ldr	r3, [sp, #4]
    d534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d538:	1c5a      	adds	r2, r3, #1
    d53a:	4904      	ldr	r1, [pc, #16]	; (d54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    d53c:	9b01      	ldr	r3, [sp, #4]
    d53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d542:	bf00      	nop
    d544:	b003      	add	sp, #12
    d546:	f85d fb04 	ldr.w	pc, [sp], #4
    d54a:	bf00      	nop
    d54c:	1fff8f20 	.word	0x1fff8f20
    d550:	1fff8f1c 	.word	0x1fff8f1c

0000d554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    d554:	b500      	push	{lr}
    d556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d558:	f7f4 f988 	bl	186c <Sys_GetCoreID>
    d55c:	4603      	mov	r3, r0
    d55e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    d560:	4a0d      	ldr	r2, [pc, #52]	; (d598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    d562:	9b01      	ldr	r3, [sp, #4]
    d564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d568:	1e5a      	subs	r2, r3, #1
    d56a:	490b      	ldr	r1, [pc, #44]	; (d598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    d56c:	9b01      	ldr	r3, [sp, #4]
    d56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    d572:	4a0a      	ldr	r2, [pc, #40]	; (d59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    d574:	9b01      	ldr	r3, [sp, #4]
    d576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d57a:	f003 0301 	and.w	r3, r3, #1
    d57e:	2b00      	cmp	r3, #0
    d580:	d106      	bne.n	d590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    d582:	4a05      	ldr	r2, [pc, #20]	; (d598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    d584:	9b01      	ldr	r3, [sp, #4]
    d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d58a:	2b00      	cmp	r3, #0
    d58c:	d100      	bne.n	d590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d58e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d590:	bf00      	nop
    d592:	b003      	add	sp, #12
    d594:	f85d fb04 	ldr.w	pc, [sp], #4
    d598:	1fff8f20 	.word	0x1fff8f20
    d59c:	1fff8f1c 	.word	0x1fff8f1c

0000d5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    d5a0:	b500      	push	{lr}
    d5a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a4:	f7f4 f962 	bl	186c <Sys_GetCoreID>
    d5a8:	4603      	mov	r3, r0
    d5aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    d5ac:	4a10      	ldr	r2, [pc, #64]	; (d5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    d5ae:	9b01      	ldr	r3, [sp, #4]
    d5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d10d      	bne.n	d5d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d5b8:	f7f3 fb6e 	bl	c98 <Adc_schm_read_msr>
    d5bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d5be:	9b00      	ldr	r3, [sp, #0]
    d5c0:	f003 0301 	and.w	r3, r3, #1
    d5c4:	2b00      	cmp	r3, #0
    d5c6:	d100      	bne.n	d5ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d5c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    d5ca:	490a      	ldr	r1, [pc, #40]	; (d5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    d5cc:	9b01      	ldr	r3, [sp, #4]
    d5ce:	9a00      	ldr	r2, [sp, #0]
    d5d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    d5d4:	4a06      	ldr	r2, [pc, #24]	; (d5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    d5d6:	9b01      	ldr	r3, [sp, #4]
    d5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5dc:	1c5a      	adds	r2, r3, #1
    d5de:	4904      	ldr	r1, [pc, #16]	; (d5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    d5e0:	9b01      	ldr	r3, [sp, #4]
    d5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5e6:	bf00      	nop
    d5e8:	b003      	add	sp, #12
    d5ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ee:	bf00      	nop
    d5f0:	1fff8f28 	.word	0x1fff8f28
    d5f4:	1fff8f24 	.word	0x1fff8f24

0000d5f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    d5f8:	b500      	push	{lr}
    d5fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5fc:	f7f4 f936 	bl	186c <Sys_GetCoreID>
    d600:	4603      	mov	r3, r0
    d602:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    d604:	4a0d      	ldr	r2, [pc, #52]	; (d63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    d606:	9b01      	ldr	r3, [sp, #4]
    d608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d60c:	1e5a      	subs	r2, r3, #1
    d60e:	490b      	ldr	r1, [pc, #44]	; (d63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    d610:	9b01      	ldr	r3, [sp, #4]
    d612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    d616:	4a0a      	ldr	r2, [pc, #40]	; (d640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    d618:	9b01      	ldr	r3, [sp, #4]
    d61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d61e:	f003 0301 	and.w	r3, r3, #1
    d622:	2b00      	cmp	r3, #0
    d624:	d106      	bne.n	d634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    d626:	4a05      	ldr	r2, [pc, #20]	; (d63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d62e:	2b00      	cmp	r3, #0
    d630:	d100      	bne.n	d634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d634:	bf00      	nop
    d636:	b003      	add	sp, #12
    d638:	f85d fb04 	ldr.w	pc, [sp], #4
    d63c:	1fff8f28 	.word	0x1fff8f28
    d640:	1fff8f24 	.word	0x1fff8f24

0000d644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    d644:	b500      	push	{lr}
    d646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d648:	f7f4 f910 	bl	186c <Sys_GetCoreID>
    d64c:	4603      	mov	r3, r0
    d64e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    d650:	4a10      	ldr	r2, [pc, #64]	; (d694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    d652:	9b01      	ldr	r3, [sp, #4]
    d654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d658:	2b00      	cmp	r3, #0
    d65a:	d10d      	bne.n	d678 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d65c:	f7f3 fb1c 	bl	c98 <Adc_schm_read_msr>
    d660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d662:	9b00      	ldr	r3, [sp, #0]
    d664:	f003 0301 	and.w	r3, r3, #1
    d668:	2b00      	cmp	r3, #0
    d66a:	d100      	bne.n	d66e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d66c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    d66e:	490a      	ldr	r1, [pc, #40]	; (d698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    d670:	9b01      	ldr	r3, [sp, #4]
    d672:	9a00      	ldr	r2, [sp, #0]
    d674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    d678:	4a06      	ldr	r2, [pc, #24]	; (d694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    d67a:	9b01      	ldr	r3, [sp, #4]
    d67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d680:	1c5a      	adds	r2, r3, #1
    d682:	4904      	ldr	r1, [pc, #16]	; (d694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    d684:	9b01      	ldr	r3, [sp, #4]
    d686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d68a:	bf00      	nop
    d68c:	b003      	add	sp, #12
    d68e:	f85d fb04 	ldr.w	pc, [sp], #4
    d692:	bf00      	nop
    d694:	1fff8f30 	.word	0x1fff8f30
    d698:	1fff8f2c 	.word	0x1fff8f2c

0000d69c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    d69c:	b500      	push	{lr}
    d69e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6a0:	f7f4 f8e4 	bl	186c <Sys_GetCoreID>
    d6a4:	4603      	mov	r3, r0
    d6a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    d6a8:	4a0d      	ldr	r2, [pc, #52]	; (d6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    d6aa:	9b01      	ldr	r3, [sp, #4]
    d6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6b0:	1e5a      	subs	r2, r3, #1
    d6b2:	490b      	ldr	r1, [pc, #44]	; (d6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    d6b4:	9b01      	ldr	r3, [sp, #4]
    d6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    d6ba:	4a0a      	ldr	r2, [pc, #40]	; (d6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    d6bc:	9b01      	ldr	r3, [sp, #4]
    d6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c2:	f003 0301 	and.w	r3, r3, #1
    d6c6:	2b00      	cmp	r3, #0
    d6c8:	d106      	bne.n	d6d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    d6ca:	4a05      	ldr	r2, [pc, #20]	; (d6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    d6cc:	9b01      	ldr	r3, [sp, #4]
    d6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	d100      	bne.n	d6d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d6d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d6d8:	bf00      	nop
    d6da:	b003      	add	sp, #12
    d6dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e0:	1fff8f30 	.word	0x1fff8f30
    d6e4:	1fff8f2c 	.word	0x1fff8f2c

0000d6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    d6e8:	b500      	push	{lr}
    d6ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6ec:	f7f4 f8be 	bl	186c <Sys_GetCoreID>
    d6f0:	4603      	mov	r3, r0
    d6f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    d6f4:	4a10      	ldr	r2, [pc, #64]	; (d738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    d6f6:	9b01      	ldr	r3, [sp, #4]
    d6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d10d      	bne.n	d71c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d700:	f7f3 faca 	bl	c98 <Adc_schm_read_msr>
    d704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d706:	9b00      	ldr	r3, [sp, #0]
    d708:	f003 0301 	and.w	r3, r3, #1
    d70c:	2b00      	cmp	r3, #0
    d70e:	d100      	bne.n	d712 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    d712:	490a      	ldr	r1, [pc, #40]	; (d73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    d714:	9b01      	ldr	r3, [sp, #4]
    d716:	9a00      	ldr	r2, [sp, #0]
    d718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    d71c:	4a06      	ldr	r2, [pc, #24]	; (d738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    d71e:	9b01      	ldr	r3, [sp, #4]
    d720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d724:	1c5a      	adds	r2, r3, #1
    d726:	4904      	ldr	r1, [pc, #16]	; (d738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d72e:	bf00      	nop
    d730:	b003      	add	sp, #12
    d732:	f85d fb04 	ldr.w	pc, [sp], #4
    d736:	bf00      	nop
    d738:	1fff8f38 	.word	0x1fff8f38
    d73c:	1fff8f34 	.word	0x1fff8f34

0000d740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    d740:	b500      	push	{lr}
    d742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d744:	f7f4 f892 	bl	186c <Sys_GetCoreID>
    d748:	4603      	mov	r3, r0
    d74a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    d74c:	4a0d      	ldr	r2, [pc, #52]	; (d784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    d74e:	9b01      	ldr	r3, [sp, #4]
    d750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d754:	1e5a      	subs	r2, r3, #1
    d756:	490b      	ldr	r1, [pc, #44]	; (d784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    d758:	9b01      	ldr	r3, [sp, #4]
    d75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    d75e:	4a0a      	ldr	r2, [pc, #40]	; (d788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    d760:	9b01      	ldr	r3, [sp, #4]
    d762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d766:	f003 0301 	and.w	r3, r3, #1
    d76a:	2b00      	cmp	r3, #0
    d76c:	d106      	bne.n	d77c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    d76e:	4a05      	ldr	r2, [pc, #20]	; (d784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d776:	2b00      	cmp	r3, #0
    d778:	d100      	bne.n	d77c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d77a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d77c:	bf00      	nop
    d77e:	b003      	add	sp, #12
    d780:	f85d fb04 	ldr.w	pc, [sp], #4
    d784:	1fff8f38 	.word	0x1fff8f38
    d788:	1fff8f34 	.word	0x1fff8f34

0000d78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    d78c:	b500      	push	{lr}
    d78e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d790:	f7f4 f86c 	bl	186c <Sys_GetCoreID>
    d794:	4603      	mov	r3, r0
    d796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    d798:	4a10      	ldr	r2, [pc, #64]	; (d7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    d79a:	9b01      	ldr	r3, [sp, #4]
    d79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	d10d      	bne.n	d7c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7a4:	f7f3 fa78 	bl	c98 <Adc_schm_read_msr>
    d7a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7aa:	9b00      	ldr	r3, [sp, #0]
    d7ac:	f003 0301 	and.w	r3, r3, #1
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d100      	bne.n	d7b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    d7b6:	490a      	ldr	r1, [pc, #40]	; (d7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    d7b8:	9b01      	ldr	r3, [sp, #4]
    d7ba:	9a00      	ldr	r2, [sp, #0]
    d7bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    d7c0:	4a06      	ldr	r2, [pc, #24]	; (d7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    d7c2:	9b01      	ldr	r3, [sp, #4]
    d7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c8:	1c5a      	adds	r2, r3, #1
    d7ca:	4904      	ldr	r1, [pc, #16]	; (d7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7d2:	bf00      	nop
    d7d4:	b003      	add	sp, #12
    d7d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d7da:	bf00      	nop
    d7dc:	1fff8f40 	.word	0x1fff8f40
    d7e0:	1fff8f3c 	.word	0x1fff8f3c

0000d7e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    d7e4:	b500      	push	{lr}
    d7e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e8:	f7f4 f840 	bl	186c <Sys_GetCoreID>
    d7ec:	4603      	mov	r3, r0
    d7ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    d7f0:	4a0d      	ldr	r2, [pc, #52]	; (d828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    d7f2:	9b01      	ldr	r3, [sp, #4]
    d7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f8:	1e5a      	subs	r2, r3, #1
    d7fa:	490b      	ldr	r1, [pc, #44]	; (d828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    d7fc:	9b01      	ldr	r3, [sp, #4]
    d7fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    d802:	4a0a      	ldr	r2, [pc, #40]	; (d82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    d804:	9b01      	ldr	r3, [sp, #4]
    d806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d80a:	f003 0301 	and.w	r3, r3, #1
    d80e:	2b00      	cmp	r3, #0
    d810:	d106      	bne.n	d820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    d812:	4a05      	ldr	r2, [pc, #20]	; (d828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    d814:	9b01      	ldr	r3, [sp, #4]
    d816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81a:	2b00      	cmp	r3, #0
    d81c:	d100      	bne.n	d820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d81e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d820:	bf00      	nop
    d822:	b003      	add	sp, #12
    d824:	f85d fb04 	ldr.w	pc, [sp], #4
    d828:	1fff8f40 	.word	0x1fff8f40
    d82c:	1fff8f3c 	.word	0x1fff8f3c

0000d830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    d830:	b500      	push	{lr}
    d832:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d834:	f7f4 f81a 	bl	186c <Sys_GetCoreID>
    d838:	4603      	mov	r3, r0
    d83a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    d83c:	4a10      	ldr	r2, [pc, #64]	; (d880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    d83e:	9b01      	ldr	r3, [sp, #4]
    d840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d844:	2b00      	cmp	r3, #0
    d846:	d10d      	bne.n	d864 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d848:	f7f3 fa26 	bl	c98 <Adc_schm_read_msr>
    d84c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d84e:	9b00      	ldr	r3, [sp, #0]
    d850:	f003 0301 	and.w	r3, r3, #1
    d854:	2b00      	cmp	r3, #0
    d856:	d100      	bne.n	d85a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d858:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    d85a:	490a      	ldr	r1, [pc, #40]	; (d884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    d85c:	9b01      	ldr	r3, [sp, #4]
    d85e:	9a00      	ldr	r2, [sp, #0]
    d860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    d864:	4a06      	ldr	r2, [pc, #24]	; (d880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    d866:	9b01      	ldr	r3, [sp, #4]
    d868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86c:	1c5a      	adds	r2, r3, #1
    d86e:	4904      	ldr	r1, [pc, #16]	; (d880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    d870:	9b01      	ldr	r3, [sp, #4]
    d872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d876:	bf00      	nop
    d878:	b003      	add	sp, #12
    d87a:	f85d fb04 	ldr.w	pc, [sp], #4
    d87e:	bf00      	nop
    d880:	1fff8f48 	.word	0x1fff8f48
    d884:	1fff8f44 	.word	0x1fff8f44

0000d888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    d888:	b500      	push	{lr}
    d88a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d88c:	f7f3 ffee 	bl	186c <Sys_GetCoreID>
    d890:	4603      	mov	r3, r0
    d892:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    d894:	4a0d      	ldr	r2, [pc, #52]	; (d8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    d896:	9b01      	ldr	r3, [sp, #4]
    d898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d89c:	1e5a      	subs	r2, r3, #1
    d89e:	490b      	ldr	r1, [pc, #44]	; (d8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    d8a0:	9b01      	ldr	r3, [sp, #4]
    d8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    d8a6:	4a0a      	ldr	r2, [pc, #40]	; (d8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    d8a8:	9b01      	ldr	r3, [sp, #4]
    d8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ae:	f003 0301 	and.w	r3, r3, #1
    d8b2:	2b00      	cmp	r3, #0
    d8b4:	d106      	bne.n	d8c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    d8b6:	4a05      	ldr	r2, [pc, #20]	; (d8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d100      	bne.n	d8c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d8c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d8c4:	bf00      	nop
    d8c6:	b003      	add	sp, #12
    d8c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8cc:	1fff8f48 	.word	0x1fff8f48
    d8d0:	1fff8f44 	.word	0x1fff8f44

0000d8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    d8d4:	b500      	push	{lr}
    d8d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8d8:	f7f3 ffc8 	bl	186c <Sys_GetCoreID>
    d8dc:	4603      	mov	r3, r0
    d8de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    d8e0:	4a10      	ldr	r2, [pc, #64]	; (d924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    d8e2:	9b01      	ldr	r3, [sp, #4]
    d8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d10d      	bne.n	d908 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8ec:	f7f3 f9d4 	bl	c98 <Adc_schm_read_msr>
    d8f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8f2:	9b00      	ldr	r3, [sp, #0]
    d8f4:	f003 0301 	and.w	r3, r3, #1
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d100      	bne.n	d8fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    d8fe:	490a      	ldr	r1, [pc, #40]	; (d928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	9a00      	ldr	r2, [sp, #0]
    d904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    d908:	4a06      	ldr	r2, [pc, #24]	; (d924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    d90a:	9b01      	ldr	r3, [sp, #4]
    d90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d910:	1c5a      	adds	r2, r3, #1
    d912:	4904      	ldr	r1, [pc, #16]	; (d924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    d914:	9b01      	ldr	r3, [sp, #4]
    d916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d91a:	bf00      	nop
    d91c:	b003      	add	sp, #12
    d91e:	f85d fb04 	ldr.w	pc, [sp], #4
    d922:	bf00      	nop
    d924:	1fff8f50 	.word	0x1fff8f50
    d928:	1fff8f4c 	.word	0x1fff8f4c

0000d92c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    d92c:	b500      	push	{lr}
    d92e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d930:	f7f3 ff9c 	bl	186c <Sys_GetCoreID>
    d934:	4603      	mov	r3, r0
    d936:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    d938:	4a0d      	ldr	r2, [pc, #52]	; (d970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    d93a:	9b01      	ldr	r3, [sp, #4]
    d93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d940:	1e5a      	subs	r2, r3, #1
    d942:	490b      	ldr	r1, [pc, #44]	; (d970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    d944:	9b01      	ldr	r3, [sp, #4]
    d946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    d94a:	4a0a      	ldr	r2, [pc, #40]	; (d974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    d94c:	9b01      	ldr	r3, [sp, #4]
    d94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d952:	f003 0301 	and.w	r3, r3, #1
    d956:	2b00      	cmp	r3, #0
    d958:	d106      	bne.n	d968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    d95a:	4a05      	ldr	r2, [pc, #20]	; (d970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    d95c:	9b01      	ldr	r3, [sp, #4]
    d95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d962:	2b00      	cmp	r3, #0
    d964:	d100      	bne.n	d968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d966:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d968:	bf00      	nop
    d96a:	b003      	add	sp, #12
    d96c:	f85d fb04 	ldr.w	pc, [sp], #4
    d970:	1fff8f50 	.word	0x1fff8f50
    d974:	1fff8f4c 	.word	0x1fff8f4c

0000d978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    d978:	b500      	push	{lr}
    d97a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d97c:	f7f3 ff76 	bl	186c <Sys_GetCoreID>
    d980:	4603      	mov	r3, r0
    d982:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    d984:	4a10      	ldr	r2, [pc, #64]	; (d9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    d986:	9b01      	ldr	r3, [sp, #4]
    d988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d98c:	2b00      	cmp	r3, #0
    d98e:	d10d      	bne.n	d9ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d990:	f7f3 f982 	bl	c98 <Adc_schm_read_msr>
    d994:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d996:	9b00      	ldr	r3, [sp, #0]
    d998:	f003 0301 	and.w	r3, r3, #1
    d99c:	2b00      	cmp	r3, #0
    d99e:	d100      	bne.n	d9a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    d9a2:	490a      	ldr	r1, [pc, #40]	; (d9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	9a00      	ldr	r2, [sp, #0]
    d9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    d9ac:	4a06      	ldr	r2, [pc, #24]	; (d9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    d9ae:	9b01      	ldr	r3, [sp, #4]
    d9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b4:	1c5a      	adds	r2, r3, #1
    d9b6:	4904      	ldr	r1, [pc, #16]	; (d9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    d9b8:	9b01      	ldr	r3, [sp, #4]
    d9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d9be:	bf00      	nop
    d9c0:	b003      	add	sp, #12
    d9c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c6:	bf00      	nop
    d9c8:	1fff8f58 	.word	0x1fff8f58
    d9cc:	1fff8f54 	.word	0x1fff8f54

0000d9d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    d9d0:	b500      	push	{lr}
    d9d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9d4:	f7f3 ff4a 	bl	186c <Sys_GetCoreID>
    d9d8:	4603      	mov	r3, r0
    d9da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    d9dc:	4a0d      	ldr	r2, [pc, #52]	; (da14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    d9de:	9b01      	ldr	r3, [sp, #4]
    d9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e4:	1e5a      	subs	r2, r3, #1
    d9e6:	490b      	ldr	r1, [pc, #44]	; (da14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    d9e8:	9b01      	ldr	r3, [sp, #4]
    d9ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    d9ee:	4a0a      	ldr	r2, [pc, #40]	; (da18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    d9f0:	9b01      	ldr	r3, [sp, #4]
    d9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9f6:	f003 0301 	and.w	r3, r3, #1
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d106      	bne.n	da0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    d9fe:	4a05      	ldr	r2, [pc, #20]	; (da14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    da00:	9b01      	ldr	r3, [sp, #4]
    da02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da06:	2b00      	cmp	r3, #0
    da08:	d100      	bne.n	da0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da0c:	bf00      	nop
    da0e:	b003      	add	sp, #12
    da10:	f85d fb04 	ldr.w	pc, [sp], #4
    da14:	1fff8f58 	.word	0x1fff8f58
    da18:	1fff8f54 	.word	0x1fff8f54

0000da1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    da1c:	b500      	push	{lr}
    da1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da20:	f7f3 ff24 	bl	186c <Sys_GetCoreID>
    da24:	4603      	mov	r3, r0
    da26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    da28:	4a10      	ldr	r2, [pc, #64]	; (da6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    da2a:	9b01      	ldr	r3, [sp, #4]
    da2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da30:	2b00      	cmp	r3, #0
    da32:	d10d      	bne.n	da50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da34:	f7f3 f930 	bl	c98 <Adc_schm_read_msr>
    da38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da3a:	9b00      	ldr	r3, [sp, #0]
    da3c:	f003 0301 	and.w	r3, r3, #1
    da40:	2b00      	cmp	r3, #0
    da42:	d100      	bne.n	da46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    da46:	490a      	ldr	r1, [pc, #40]	; (da70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	9a00      	ldr	r2, [sp, #0]
    da4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    da50:	4a06      	ldr	r2, [pc, #24]	; (da6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    da52:	9b01      	ldr	r3, [sp, #4]
    da54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da58:	1c5a      	adds	r2, r3, #1
    da5a:	4904      	ldr	r1, [pc, #16]	; (da6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    da5c:	9b01      	ldr	r3, [sp, #4]
    da5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da62:	bf00      	nop
    da64:	b003      	add	sp, #12
    da66:	f85d fb04 	ldr.w	pc, [sp], #4
    da6a:	bf00      	nop
    da6c:	1fff8f60 	.word	0x1fff8f60
    da70:	1fff8f5c 	.word	0x1fff8f5c

0000da74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    da74:	b500      	push	{lr}
    da76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da78:	f7f3 fef8 	bl	186c <Sys_GetCoreID>
    da7c:	4603      	mov	r3, r0
    da7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    da80:	4a0d      	ldr	r2, [pc, #52]	; (dab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    da82:	9b01      	ldr	r3, [sp, #4]
    da84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da88:	1e5a      	subs	r2, r3, #1
    da8a:	490b      	ldr	r1, [pc, #44]	; (dab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    da8c:	9b01      	ldr	r3, [sp, #4]
    da8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    da92:	4a0a      	ldr	r2, [pc, #40]	; (dabc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    da94:	9b01      	ldr	r3, [sp, #4]
    da96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da9a:	f003 0301 	and.w	r3, r3, #1
    da9e:	2b00      	cmp	r3, #0
    daa0:	d106      	bne.n	dab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    daa2:	4a05      	ldr	r2, [pc, #20]	; (dab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    daa4:	9b01      	ldr	r3, [sp, #4]
    daa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daaa:	2b00      	cmp	r3, #0
    daac:	d100      	bne.n	dab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    daae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dab0:	bf00      	nop
    dab2:	b003      	add	sp, #12
    dab4:	f85d fb04 	ldr.w	pc, [sp], #4
    dab8:	1fff8f60 	.word	0x1fff8f60
    dabc:	1fff8f5c 	.word	0x1fff8f5c

0000dac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    dac0:	b500      	push	{lr}
    dac2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac4:	f7f3 fed2 	bl	186c <Sys_GetCoreID>
    dac8:	4603      	mov	r3, r0
    daca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    dacc:	4a10      	ldr	r2, [pc, #64]	; (db10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    dace:	9b01      	ldr	r3, [sp, #4]
    dad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad4:	2b00      	cmp	r3, #0
    dad6:	d10d      	bne.n	daf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dad8:	f7f3 f8de 	bl	c98 <Adc_schm_read_msr>
    dadc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dade:	9b00      	ldr	r3, [sp, #0]
    dae0:	f003 0301 	and.w	r3, r3, #1
    dae4:	2b00      	cmp	r3, #0
    dae6:	d100      	bne.n	daea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dae8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    daea:	490a      	ldr	r1, [pc, #40]	; (db14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	9a00      	ldr	r2, [sp, #0]
    daf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    daf4:	4a06      	ldr	r2, [pc, #24]	; (db10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    daf6:	9b01      	ldr	r3, [sp, #4]
    daf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafc:	1c5a      	adds	r2, r3, #1
    dafe:	4904      	ldr	r1, [pc, #16]	; (db10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db06:	bf00      	nop
    db08:	b003      	add	sp, #12
    db0a:	f85d fb04 	ldr.w	pc, [sp], #4
    db0e:	bf00      	nop
    db10:	1fff8f68 	.word	0x1fff8f68
    db14:	1fff8f64 	.word	0x1fff8f64

0000db18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    db18:	b500      	push	{lr}
    db1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db1c:	f7f3 fea6 	bl	186c <Sys_GetCoreID>
    db20:	4603      	mov	r3, r0
    db22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    db24:	4a0d      	ldr	r2, [pc, #52]	; (db5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db2c:	1e5a      	subs	r2, r3, #1
    db2e:	490b      	ldr	r1, [pc, #44]	; (db5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    db30:	9b01      	ldr	r3, [sp, #4]
    db32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    db36:	4a0a      	ldr	r2, [pc, #40]	; (db60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    db38:	9b01      	ldr	r3, [sp, #4]
    db3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db3e:	f003 0301 	and.w	r3, r3, #1
    db42:	2b00      	cmp	r3, #0
    db44:	d106      	bne.n	db54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    db46:	4a05      	ldr	r2, [pc, #20]	; (db5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db4e:	2b00      	cmp	r3, #0
    db50:	d100      	bne.n	db54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db54:	bf00      	nop
    db56:	b003      	add	sp, #12
    db58:	f85d fb04 	ldr.w	pc, [sp], #4
    db5c:	1fff8f68 	.word	0x1fff8f68
    db60:	1fff8f64 	.word	0x1fff8f64

0000db64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    db64:	b500      	push	{lr}
    db66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db68:	f7f3 fe80 	bl	186c <Sys_GetCoreID>
    db6c:	4603      	mov	r3, r0
    db6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    db70:	4a10      	ldr	r2, [pc, #64]	; (dbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    db72:	9b01      	ldr	r3, [sp, #4]
    db74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db78:	2b00      	cmp	r3, #0
    db7a:	d10d      	bne.n	db98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db7c:	f7f3 f88c 	bl	c98 <Adc_schm_read_msr>
    db80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db82:	9b00      	ldr	r3, [sp, #0]
    db84:	f003 0301 	and.w	r3, r3, #1
    db88:	2b00      	cmp	r3, #0
    db8a:	d100      	bne.n	db8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    db8e:	490a      	ldr	r1, [pc, #40]	; (dbb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    db90:	9b01      	ldr	r3, [sp, #4]
    db92:	9a00      	ldr	r2, [sp, #0]
    db94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    db98:	4a06      	ldr	r2, [pc, #24]	; (dbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    db9a:	9b01      	ldr	r3, [sp, #4]
    db9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba0:	1c5a      	adds	r2, r3, #1
    dba2:	4904      	ldr	r1, [pc, #16]	; (dbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbaa:	bf00      	nop
    dbac:	b003      	add	sp, #12
    dbae:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb2:	bf00      	nop
    dbb4:	1fff8f70 	.word	0x1fff8f70
    dbb8:	1fff8f6c 	.word	0x1fff8f6c

0000dbbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    dbbc:	b500      	push	{lr}
    dbbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbc0:	f7f3 fe54 	bl	186c <Sys_GetCoreID>
    dbc4:	4603      	mov	r3, r0
    dbc6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    dbc8:	4a0d      	ldr	r2, [pc, #52]	; (dc00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    dbca:	9b01      	ldr	r3, [sp, #4]
    dbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd0:	1e5a      	subs	r2, r3, #1
    dbd2:	490b      	ldr	r1, [pc, #44]	; (dc00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    dbd4:	9b01      	ldr	r3, [sp, #4]
    dbd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    dbda:	4a0a      	ldr	r2, [pc, #40]	; (dc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    dbdc:	9b01      	ldr	r3, [sp, #4]
    dbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe2:	f003 0301 	and.w	r3, r3, #1
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d106      	bne.n	dbf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    dbea:	4a05      	ldr	r2, [pc, #20]	; (dc00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    dbec:	9b01      	ldr	r3, [sp, #4]
    dbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d100      	bne.n	dbf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbf8:	bf00      	nop
    dbfa:	b003      	add	sp, #12
    dbfc:	f85d fb04 	ldr.w	pc, [sp], #4
    dc00:	1fff8f70 	.word	0x1fff8f70
    dc04:	1fff8f6c 	.word	0x1fff8f6c

0000dc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    dc08:	b500      	push	{lr}
    dc0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc0c:	f7f3 fe2e 	bl	186c <Sys_GetCoreID>
    dc10:	4603      	mov	r3, r0
    dc12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    dc14:	4a10      	ldr	r2, [pc, #64]	; (dc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    dc16:	9b01      	ldr	r3, [sp, #4]
    dc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d10d      	bne.n	dc3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc20:	f7f3 f83a 	bl	c98 <Adc_schm_read_msr>
    dc24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc26:	9b00      	ldr	r3, [sp, #0]
    dc28:	f003 0301 	and.w	r3, r3, #1
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	d100      	bne.n	dc32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    dc32:	490a      	ldr	r1, [pc, #40]	; (dc5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    dc34:	9b01      	ldr	r3, [sp, #4]
    dc36:	9a00      	ldr	r2, [sp, #0]
    dc38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    dc3c:	4a06      	ldr	r2, [pc, #24]	; (dc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    dc3e:	9b01      	ldr	r3, [sp, #4]
    dc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc44:	1c5a      	adds	r2, r3, #1
    dc46:	4904      	ldr	r1, [pc, #16]	; (dc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    dc48:	9b01      	ldr	r3, [sp, #4]
    dc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc4e:	bf00      	nop
    dc50:	b003      	add	sp, #12
    dc52:	f85d fb04 	ldr.w	pc, [sp], #4
    dc56:	bf00      	nop
    dc58:	1fff8f78 	.word	0x1fff8f78
    dc5c:	1fff8f74 	.word	0x1fff8f74

0000dc60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    dc60:	b500      	push	{lr}
    dc62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc64:	f7f3 fe02 	bl	186c <Sys_GetCoreID>
    dc68:	4603      	mov	r3, r0
    dc6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    dc6c:	4a0d      	ldr	r2, [pc, #52]	; (dca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    dc6e:	9b01      	ldr	r3, [sp, #4]
    dc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc74:	1e5a      	subs	r2, r3, #1
    dc76:	490b      	ldr	r1, [pc, #44]	; (dca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    dc78:	9b01      	ldr	r3, [sp, #4]
    dc7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    dc7e:	4a0a      	ldr	r2, [pc, #40]	; (dca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    dc80:	9b01      	ldr	r3, [sp, #4]
    dc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc86:	f003 0301 	and.w	r3, r3, #1
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	d106      	bne.n	dc9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    dc8e:	4a05      	ldr	r2, [pc, #20]	; (dca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    dc90:	9b01      	ldr	r3, [sp, #4]
    dc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc96:	2b00      	cmp	r3, #0
    dc98:	d100      	bne.n	dc9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc9c:	bf00      	nop
    dc9e:	b003      	add	sp, #12
    dca0:	f85d fb04 	ldr.w	pc, [sp], #4
    dca4:	1fff8f78 	.word	0x1fff8f78
    dca8:	1fff8f74 	.word	0x1fff8f74

0000dcac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    dcac:	b500      	push	{lr}
    dcae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb0:	f7f3 fddc 	bl	186c <Sys_GetCoreID>
    dcb4:	4603      	mov	r3, r0
    dcb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    dcb8:	4a10      	ldr	r2, [pc, #64]	; (dcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    dcba:	9b01      	ldr	r3, [sp, #4]
    dcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d10d      	bne.n	dce0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dcc4:	f7f2 ffe8 	bl	c98 <Adc_schm_read_msr>
    dcc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dcca:	9b00      	ldr	r3, [sp, #0]
    dccc:	f003 0301 	and.w	r3, r3, #1
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	d100      	bne.n	dcd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dcd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    dcd6:	490a      	ldr	r1, [pc, #40]	; (dd00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	9a00      	ldr	r2, [sp, #0]
    dcdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    dce0:	4a06      	ldr	r2, [pc, #24]	; (dcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    dce2:	9b01      	ldr	r3, [sp, #4]
    dce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce8:	1c5a      	adds	r2, r3, #1
    dcea:	4904      	ldr	r1, [pc, #16]	; (dcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    dcec:	9b01      	ldr	r3, [sp, #4]
    dcee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dcf2:	bf00      	nop
    dcf4:	b003      	add	sp, #12
    dcf6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcfa:	bf00      	nop
    dcfc:	1fff8f80 	.word	0x1fff8f80
    dd00:	1fff8f7c 	.word	0x1fff8f7c

0000dd04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    dd04:	b500      	push	{lr}
    dd06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd08:	f7f3 fdb0 	bl	186c <Sys_GetCoreID>
    dd0c:	4603      	mov	r3, r0
    dd0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    dd10:	4a0d      	ldr	r2, [pc, #52]	; (dd48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    dd12:	9b01      	ldr	r3, [sp, #4]
    dd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd18:	1e5a      	subs	r2, r3, #1
    dd1a:	490b      	ldr	r1, [pc, #44]	; (dd48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    dd1c:	9b01      	ldr	r3, [sp, #4]
    dd1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    dd22:	4a0a      	ldr	r2, [pc, #40]	; (dd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    dd24:	9b01      	ldr	r3, [sp, #4]
    dd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd2a:	f003 0301 	and.w	r3, r3, #1
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d106      	bne.n	dd40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    dd32:	4a05      	ldr	r2, [pc, #20]	; (dd48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    dd34:	9b01      	ldr	r3, [sp, #4]
    dd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d100      	bne.n	dd40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd40:	bf00      	nop
    dd42:	b003      	add	sp, #12
    dd44:	f85d fb04 	ldr.w	pc, [sp], #4
    dd48:	1fff8f80 	.word	0x1fff8f80
    dd4c:	1fff8f7c 	.word	0x1fff8f7c

0000dd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    dd50:	b500      	push	{lr}
    dd52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd54:	f7f3 fd8a 	bl	186c <Sys_GetCoreID>
    dd58:	4603      	mov	r3, r0
    dd5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    dd5c:	4a10      	ldr	r2, [pc, #64]	; (dda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    dd5e:	9b01      	ldr	r3, [sp, #4]
    dd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd64:	2b00      	cmp	r3, #0
    dd66:	d10d      	bne.n	dd84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd68:	f7f2 ff96 	bl	c98 <Adc_schm_read_msr>
    dd6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd6e:	9b00      	ldr	r3, [sp, #0]
    dd70:	f003 0301 	and.w	r3, r3, #1
    dd74:	2b00      	cmp	r3, #0
    dd76:	d100      	bne.n	dd7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    dd7a:	490a      	ldr	r1, [pc, #40]	; (dda4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    dd7c:	9b01      	ldr	r3, [sp, #4]
    dd7e:	9a00      	ldr	r2, [sp, #0]
    dd80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    dd84:	4a06      	ldr	r2, [pc, #24]	; (dda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    dd86:	9b01      	ldr	r3, [sp, #4]
    dd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8c:	1c5a      	adds	r2, r3, #1
    dd8e:	4904      	ldr	r1, [pc, #16]	; (dda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    dd90:	9b01      	ldr	r3, [sp, #4]
    dd92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd96:	bf00      	nop
    dd98:	b003      	add	sp, #12
    dd9a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd9e:	bf00      	nop
    dda0:	1fff8f88 	.word	0x1fff8f88
    dda4:	1fff8f84 	.word	0x1fff8f84

0000dda8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    dda8:	b500      	push	{lr}
    ddaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddac:	f7f3 fd5e 	bl	186c <Sys_GetCoreID>
    ddb0:	4603      	mov	r3, r0
    ddb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    ddb4:	4a0d      	ldr	r2, [pc, #52]	; (ddec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ddb6:	9b01      	ldr	r3, [sp, #4]
    ddb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddbc:	1e5a      	subs	r2, r3, #1
    ddbe:	490b      	ldr	r1, [pc, #44]	; (ddec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ddc0:	9b01      	ldr	r3, [sp, #4]
    ddc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    ddc6:	4a0a      	ldr	r2, [pc, #40]	; (ddf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    ddc8:	9b01      	ldr	r3, [sp, #4]
    ddca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddce:	f003 0301 	and.w	r3, r3, #1
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d106      	bne.n	dde4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    ddd6:	4a05      	ldr	r2, [pc, #20]	; (ddec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddde:	2b00      	cmp	r3, #0
    dde0:	d100      	bne.n	dde4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dde2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dde4:	bf00      	nop
    dde6:	b003      	add	sp, #12
    dde8:	f85d fb04 	ldr.w	pc, [sp], #4
    ddec:	1fff8f88 	.word	0x1fff8f88
    ddf0:	1fff8f84 	.word	0x1fff8f84

0000ddf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    ddf4:	b500      	push	{lr}
    ddf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddf8:	f7f3 fd38 	bl	186c <Sys_GetCoreID>
    ddfc:	4603      	mov	r3, r0
    ddfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    de00:	4a10      	ldr	r2, [pc, #64]	; (de44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    de02:	9b01      	ldr	r3, [sp, #4]
    de04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de08:	2b00      	cmp	r3, #0
    de0a:	d10d      	bne.n	de28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de0c:	f7f2 ff44 	bl	c98 <Adc_schm_read_msr>
    de10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de12:	9b00      	ldr	r3, [sp, #0]
    de14:	f003 0301 	and.w	r3, r3, #1
    de18:	2b00      	cmp	r3, #0
    de1a:	d100      	bne.n	de1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    de1e:	490a      	ldr	r1, [pc, #40]	; (de48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    de20:	9b01      	ldr	r3, [sp, #4]
    de22:	9a00      	ldr	r2, [sp, #0]
    de24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    de28:	4a06      	ldr	r2, [pc, #24]	; (de44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    de2a:	9b01      	ldr	r3, [sp, #4]
    de2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de30:	1c5a      	adds	r2, r3, #1
    de32:	4904      	ldr	r1, [pc, #16]	; (de44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    de34:	9b01      	ldr	r3, [sp, #4]
    de36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de3a:	bf00      	nop
    de3c:	b003      	add	sp, #12
    de3e:	f85d fb04 	ldr.w	pc, [sp], #4
    de42:	bf00      	nop
    de44:	1fff8f90 	.word	0x1fff8f90
    de48:	1fff8f8c 	.word	0x1fff8f8c

0000de4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    de4c:	b500      	push	{lr}
    de4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de50:	f7f3 fd0c 	bl	186c <Sys_GetCoreID>
    de54:	4603      	mov	r3, r0
    de56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    de58:	4a0d      	ldr	r2, [pc, #52]	; (de90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    de5a:	9b01      	ldr	r3, [sp, #4]
    de5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de60:	1e5a      	subs	r2, r3, #1
    de62:	490b      	ldr	r1, [pc, #44]	; (de90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    de64:	9b01      	ldr	r3, [sp, #4]
    de66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    de6a:	4a0a      	ldr	r2, [pc, #40]	; (de94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    de6c:	9b01      	ldr	r3, [sp, #4]
    de6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de72:	f003 0301 	and.w	r3, r3, #1
    de76:	2b00      	cmp	r3, #0
    de78:	d106      	bne.n	de88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    de7a:	4a05      	ldr	r2, [pc, #20]	; (de90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    de7c:	9b01      	ldr	r3, [sp, #4]
    de7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de82:	2b00      	cmp	r3, #0
    de84:	d100      	bne.n	de88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de88:	bf00      	nop
    de8a:	b003      	add	sp, #12
    de8c:	f85d fb04 	ldr.w	pc, [sp], #4
    de90:	1fff8f90 	.word	0x1fff8f90
    de94:	1fff8f8c 	.word	0x1fff8f8c

0000de98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    de98:	b500      	push	{lr}
    de9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de9c:	f7f3 fce6 	bl	186c <Sys_GetCoreID>
    dea0:	4603      	mov	r3, r0
    dea2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    dea4:	4a10      	ldr	r2, [pc, #64]	; (dee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    dea6:	9b01      	ldr	r3, [sp, #4]
    dea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deac:	2b00      	cmp	r3, #0
    deae:	d10d      	bne.n	decc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    deb0:	f7f2 fef2 	bl	c98 <Adc_schm_read_msr>
    deb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    deb6:	9b00      	ldr	r3, [sp, #0]
    deb8:	f003 0301 	and.w	r3, r3, #1
    debc:	2b00      	cmp	r3, #0
    debe:	d100      	bne.n	dec2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dec0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    dec2:	490a      	ldr	r1, [pc, #40]	; (deec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    dec4:	9b01      	ldr	r3, [sp, #4]
    dec6:	9a00      	ldr	r2, [sp, #0]
    dec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    decc:	4a06      	ldr	r2, [pc, #24]	; (dee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    dece:	9b01      	ldr	r3, [sp, #4]
    ded0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded4:	1c5a      	adds	r2, r3, #1
    ded6:	4904      	ldr	r1, [pc, #16]	; (dee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    ded8:	9b01      	ldr	r3, [sp, #4]
    deda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dede:	bf00      	nop
    dee0:	b003      	add	sp, #12
    dee2:	f85d fb04 	ldr.w	pc, [sp], #4
    dee6:	bf00      	nop
    dee8:	1fff8f98 	.word	0x1fff8f98
    deec:	1fff8f94 	.word	0x1fff8f94

0000def0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    def0:	b500      	push	{lr}
    def2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    def4:	f7f3 fcba 	bl	186c <Sys_GetCoreID>
    def8:	4603      	mov	r3, r0
    defa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    defc:	4a0d      	ldr	r2, [pc, #52]	; (df34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    defe:	9b01      	ldr	r3, [sp, #4]
    df00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df04:	1e5a      	subs	r2, r3, #1
    df06:	490b      	ldr	r1, [pc, #44]	; (df34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    df08:	9b01      	ldr	r3, [sp, #4]
    df0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    df0e:	4a0a      	ldr	r2, [pc, #40]	; (df38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    df10:	9b01      	ldr	r3, [sp, #4]
    df12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df16:	f003 0301 	and.w	r3, r3, #1
    df1a:	2b00      	cmp	r3, #0
    df1c:	d106      	bne.n	df2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    df1e:	4a05      	ldr	r2, [pc, #20]	; (df34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    df20:	9b01      	ldr	r3, [sp, #4]
    df22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df26:	2b00      	cmp	r3, #0
    df28:	d100      	bne.n	df2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df2c:	bf00      	nop
    df2e:	b003      	add	sp, #12
    df30:	f85d fb04 	ldr.w	pc, [sp], #4
    df34:	1fff8f98 	.word	0x1fff8f98
    df38:	1fff8f94 	.word	0x1fff8f94

0000df3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    df3c:	b500      	push	{lr}
    df3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df40:	f7f3 fc94 	bl	186c <Sys_GetCoreID>
    df44:	4603      	mov	r3, r0
    df46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    df48:	4a10      	ldr	r2, [pc, #64]	; (df8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    df4a:	9b01      	ldr	r3, [sp, #4]
    df4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df50:	2b00      	cmp	r3, #0
    df52:	d10d      	bne.n	df70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df54:	f7f2 fea0 	bl	c98 <Adc_schm_read_msr>
    df58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df5a:	9b00      	ldr	r3, [sp, #0]
    df5c:	f003 0301 	and.w	r3, r3, #1
    df60:	2b00      	cmp	r3, #0
    df62:	d100      	bne.n	df66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    df66:	490a      	ldr	r1, [pc, #40]	; (df90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    df68:	9b01      	ldr	r3, [sp, #4]
    df6a:	9a00      	ldr	r2, [sp, #0]
    df6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    df70:	4a06      	ldr	r2, [pc, #24]	; (df8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    df72:	9b01      	ldr	r3, [sp, #4]
    df74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df78:	1c5a      	adds	r2, r3, #1
    df7a:	4904      	ldr	r1, [pc, #16]	; (df8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    df7c:	9b01      	ldr	r3, [sp, #4]
    df7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df82:	bf00      	nop
    df84:	b003      	add	sp, #12
    df86:	f85d fb04 	ldr.w	pc, [sp], #4
    df8a:	bf00      	nop
    df8c:	1fff8fa0 	.word	0x1fff8fa0
    df90:	1fff8f9c 	.word	0x1fff8f9c

0000df94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    df94:	b500      	push	{lr}
    df96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df98:	f7f3 fc68 	bl	186c <Sys_GetCoreID>
    df9c:	4603      	mov	r3, r0
    df9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    dfa0:	4a0d      	ldr	r2, [pc, #52]	; (dfd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    dfa2:	9b01      	ldr	r3, [sp, #4]
    dfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa8:	1e5a      	subs	r2, r3, #1
    dfaa:	490b      	ldr	r1, [pc, #44]	; (dfd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    dfac:	9b01      	ldr	r3, [sp, #4]
    dfae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    dfb2:	4a0a      	ldr	r2, [pc, #40]	; (dfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    dfb4:	9b01      	ldr	r3, [sp, #4]
    dfb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfba:	f003 0301 	and.w	r3, r3, #1
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	d106      	bne.n	dfd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    dfc2:	4a05      	ldr	r2, [pc, #20]	; (dfd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    dfc4:	9b01      	ldr	r3, [sp, #4]
    dfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d100      	bne.n	dfd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dfce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dfd0:	bf00      	nop
    dfd2:	b003      	add	sp, #12
    dfd4:	f85d fb04 	ldr.w	pc, [sp], #4
    dfd8:	1fff8fa0 	.word	0x1fff8fa0
    dfdc:	1fff8f9c 	.word	0x1fff8f9c

0000dfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    dfe0:	b500      	push	{lr}
    dfe2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfe4:	f7f3 fc42 	bl	186c <Sys_GetCoreID>
    dfe8:	4603      	mov	r3, r0
    dfea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    dfec:	4a10      	ldr	r2, [pc, #64]	; (e030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    dfee:	9b01      	ldr	r3, [sp, #4]
    dff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff4:	2b00      	cmp	r3, #0
    dff6:	d10d      	bne.n	e014 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dff8:	f7f2 fe4e 	bl	c98 <Adc_schm_read_msr>
    dffc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dffe:	9b00      	ldr	r3, [sp, #0]
    e000:	f003 0301 	and.w	r3, r3, #1
    e004:	2b00      	cmp	r3, #0
    e006:	d100      	bne.n	e00a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e008:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    e00a:	490a      	ldr	r1, [pc, #40]	; (e034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    e00c:	9b01      	ldr	r3, [sp, #4]
    e00e:	9a00      	ldr	r2, [sp, #0]
    e010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    e014:	4a06      	ldr	r2, [pc, #24]	; (e030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    e016:	9b01      	ldr	r3, [sp, #4]
    e018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01c:	1c5a      	adds	r2, r3, #1
    e01e:	4904      	ldr	r1, [pc, #16]	; (e030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    e020:	9b01      	ldr	r3, [sp, #4]
    e022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e026:	bf00      	nop
    e028:	b003      	add	sp, #12
    e02a:	f85d fb04 	ldr.w	pc, [sp], #4
    e02e:	bf00      	nop
    e030:	1fff8fa8 	.word	0x1fff8fa8
    e034:	1fff8fa4 	.word	0x1fff8fa4

0000e038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    e038:	b500      	push	{lr}
    e03a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e03c:	f7f3 fc16 	bl	186c <Sys_GetCoreID>
    e040:	4603      	mov	r3, r0
    e042:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    e044:	4a0d      	ldr	r2, [pc, #52]	; (e07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    e046:	9b01      	ldr	r3, [sp, #4]
    e048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e04c:	1e5a      	subs	r2, r3, #1
    e04e:	490b      	ldr	r1, [pc, #44]	; (e07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    e050:	9b01      	ldr	r3, [sp, #4]
    e052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    e056:	4a0a      	ldr	r2, [pc, #40]	; (e080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    e058:	9b01      	ldr	r3, [sp, #4]
    e05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e05e:	f003 0301 	and.w	r3, r3, #1
    e062:	2b00      	cmp	r3, #0
    e064:	d106      	bne.n	e074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    e066:	4a05      	ldr	r2, [pc, #20]	; (e07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    e068:	9b01      	ldr	r3, [sp, #4]
    e06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06e:	2b00      	cmp	r3, #0
    e070:	d100      	bne.n	e074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e072:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e074:	bf00      	nop
    e076:	b003      	add	sp, #12
    e078:	f85d fb04 	ldr.w	pc, [sp], #4
    e07c:	1fff8fa8 	.word	0x1fff8fa8
    e080:	1fff8fa4 	.word	0x1fff8fa4

0000e084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    e084:	b500      	push	{lr}
    e086:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e088:	f7f3 fbf0 	bl	186c <Sys_GetCoreID>
    e08c:	4603      	mov	r3, r0
    e08e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    e090:	4a10      	ldr	r2, [pc, #64]	; (e0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    e092:	9b01      	ldr	r3, [sp, #4]
    e094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e098:	2b00      	cmp	r3, #0
    e09a:	d10d      	bne.n	e0b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e09c:	f7f2 fdfc 	bl	c98 <Adc_schm_read_msr>
    e0a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0a2:	9b00      	ldr	r3, [sp, #0]
    e0a4:	f003 0301 	and.w	r3, r3, #1
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d100      	bne.n	e0ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    e0ae:	490a      	ldr	r1, [pc, #40]	; (e0d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    e0b0:	9b01      	ldr	r3, [sp, #4]
    e0b2:	9a00      	ldr	r2, [sp, #0]
    e0b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    e0b8:	4a06      	ldr	r2, [pc, #24]	; (e0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    e0ba:	9b01      	ldr	r3, [sp, #4]
    e0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0c0:	1c5a      	adds	r2, r3, #1
    e0c2:	4904      	ldr	r1, [pc, #16]	; (e0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    e0c4:	9b01      	ldr	r3, [sp, #4]
    e0c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e0ca:	bf00      	nop
    e0cc:	b003      	add	sp, #12
    e0ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e0d2:	bf00      	nop
    e0d4:	1fff8fb0 	.word	0x1fff8fb0
    e0d8:	1fff8fac 	.word	0x1fff8fac

0000e0dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    e0dc:	b500      	push	{lr}
    e0de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0e0:	f7f3 fbc4 	bl	186c <Sys_GetCoreID>
    e0e4:	4603      	mov	r3, r0
    e0e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    e0e8:	4a0d      	ldr	r2, [pc, #52]	; (e120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    e0ea:	9b01      	ldr	r3, [sp, #4]
    e0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f0:	1e5a      	subs	r2, r3, #1
    e0f2:	490b      	ldr	r1, [pc, #44]	; (e120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    e0f4:	9b01      	ldr	r3, [sp, #4]
    e0f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    e0fa:	4a0a      	ldr	r2, [pc, #40]	; (e124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    e0fc:	9b01      	ldr	r3, [sp, #4]
    e0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e102:	f003 0301 	and.w	r3, r3, #1
    e106:	2b00      	cmp	r3, #0
    e108:	d106      	bne.n	e118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    e10a:	4a05      	ldr	r2, [pc, #20]	; (e120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    e10c:	9b01      	ldr	r3, [sp, #4]
    e10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e112:	2b00      	cmp	r3, #0
    e114:	d100      	bne.n	e118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e116:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e118:	bf00      	nop
    e11a:	b003      	add	sp, #12
    e11c:	f85d fb04 	ldr.w	pc, [sp], #4
    e120:	1fff8fb0 	.word	0x1fff8fb0
    e124:	1fff8fac 	.word	0x1fff8fac

0000e128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    e128:	b500      	push	{lr}
    e12a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e12c:	f7f3 fb9e 	bl	186c <Sys_GetCoreID>
    e130:	4603      	mov	r3, r0
    e132:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    e134:	4a10      	ldr	r2, [pc, #64]	; (e178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    e136:	9b01      	ldr	r3, [sp, #4]
    e138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e13c:	2b00      	cmp	r3, #0
    e13e:	d10d      	bne.n	e15c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e140:	f7f2 fdaa 	bl	c98 <Adc_schm_read_msr>
    e144:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e146:	9b00      	ldr	r3, [sp, #0]
    e148:	f003 0301 	and.w	r3, r3, #1
    e14c:	2b00      	cmp	r3, #0
    e14e:	d100      	bne.n	e152 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e150:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    e152:	490a      	ldr	r1, [pc, #40]	; (e17c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	9a00      	ldr	r2, [sp, #0]
    e158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    e15c:	4a06      	ldr	r2, [pc, #24]	; (e178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    e15e:	9b01      	ldr	r3, [sp, #4]
    e160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e164:	1c5a      	adds	r2, r3, #1
    e166:	4904      	ldr	r1, [pc, #16]	; (e178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e16e:	bf00      	nop
    e170:	b003      	add	sp, #12
    e172:	f85d fb04 	ldr.w	pc, [sp], #4
    e176:	bf00      	nop
    e178:	1fff8fb8 	.word	0x1fff8fb8
    e17c:	1fff8fb4 	.word	0x1fff8fb4

0000e180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    e180:	b500      	push	{lr}
    e182:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e184:	f7f3 fb72 	bl	186c <Sys_GetCoreID>
    e188:	4603      	mov	r3, r0
    e18a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    e18c:	4a0d      	ldr	r2, [pc, #52]	; (e1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    e18e:	9b01      	ldr	r3, [sp, #4]
    e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e194:	1e5a      	subs	r2, r3, #1
    e196:	490b      	ldr	r1, [pc, #44]	; (e1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    e198:	9b01      	ldr	r3, [sp, #4]
    e19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    e19e:	4a0a      	ldr	r2, [pc, #40]	; (e1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    e1a0:	9b01      	ldr	r3, [sp, #4]
    e1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a6:	f003 0301 	and.w	r3, r3, #1
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d106      	bne.n	e1bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    e1ae:	4a05      	ldr	r2, [pc, #20]	; (e1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d100      	bne.n	e1bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e1ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e1bc:	bf00      	nop
    e1be:	b003      	add	sp, #12
    e1c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1c4:	1fff8fb8 	.word	0x1fff8fb8
    e1c8:	1fff8fb4 	.word	0x1fff8fb4

0000e1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    e1cc:	b500      	push	{lr}
    e1ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1d0:	f7f3 fb4c 	bl	186c <Sys_GetCoreID>
    e1d4:	4603      	mov	r3, r0
    e1d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    e1d8:	4a10      	ldr	r2, [pc, #64]	; (e21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    e1da:	9b01      	ldr	r3, [sp, #4]
    e1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1e0:	2b00      	cmp	r3, #0
    e1e2:	d10d      	bne.n	e200 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1e4:	f7f2 fd58 	bl	c98 <Adc_schm_read_msr>
    e1e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1ea:	9b00      	ldr	r3, [sp, #0]
    e1ec:	f003 0301 	and.w	r3, r3, #1
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d100      	bne.n	e1f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    e1f6:	490a      	ldr	r1, [pc, #40]	; (e220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	9a00      	ldr	r2, [sp, #0]
    e1fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    e200:	4a06      	ldr	r2, [pc, #24]	; (e21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    e202:	9b01      	ldr	r3, [sp, #4]
    e204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e208:	1c5a      	adds	r2, r3, #1
    e20a:	4904      	ldr	r1, [pc, #16]	; (e21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    e20c:	9b01      	ldr	r3, [sp, #4]
    e20e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e212:	bf00      	nop
    e214:	b003      	add	sp, #12
    e216:	f85d fb04 	ldr.w	pc, [sp], #4
    e21a:	bf00      	nop
    e21c:	1fff8fc0 	.word	0x1fff8fc0
    e220:	1fff8fbc 	.word	0x1fff8fbc

0000e224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    e224:	b500      	push	{lr}
    e226:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e228:	f7f3 fb20 	bl	186c <Sys_GetCoreID>
    e22c:	4603      	mov	r3, r0
    e22e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    e230:	4a0d      	ldr	r2, [pc, #52]	; (e268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    e232:	9b01      	ldr	r3, [sp, #4]
    e234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e238:	1e5a      	subs	r2, r3, #1
    e23a:	490b      	ldr	r1, [pc, #44]	; (e268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    e23c:	9b01      	ldr	r3, [sp, #4]
    e23e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    e242:	4a0a      	ldr	r2, [pc, #40]	; (e26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    e244:	9b01      	ldr	r3, [sp, #4]
    e246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e24a:	f003 0301 	and.w	r3, r3, #1
    e24e:	2b00      	cmp	r3, #0
    e250:	d106      	bne.n	e260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    e252:	4a05      	ldr	r2, [pc, #20]	; (e268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e25a:	2b00      	cmp	r3, #0
    e25c:	d100      	bne.n	e260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e25e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e260:	bf00      	nop
    e262:	b003      	add	sp, #12
    e264:	f85d fb04 	ldr.w	pc, [sp], #4
    e268:	1fff8fc0 	.word	0x1fff8fc0
    e26c:	1fff8fbc 	.word	0x1fff8fbc

0000e270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    e270:	b500      	push	{lr}
    e272:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e274:	f7f3 fafa 	bl	186c <Sys_GetCoreID>
    e278:	4603      	mov	r3, r0
    e27a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    e27c:	4a10      	ldr	r2, [pc, #64]	; (e2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    e27e:	9b01      	ldr	r3, [sp, #4]
    e280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e284:	2b00      	cmp	r3, #0
    e286:	d10d      	bne.n	e2a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e288:	f7f2 fd06 	bl	c98 <Adc_schm_read_msr>
    e28c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e28e:	9b00      	ldr	r3, [sp, #0]
    e290:	f003 0301 	and.w	r3, r3, #1
    e294:	2b00      	cmp	r3, #0
    e296:	d100      	bne.n	e29a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e298:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    e29a:	490a      	ldr	r1, [pc, #40]	; (e2c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    e29c:	9b01      	ldr	r3, [sp, #4]
    e29e:	9a00      	ldr	r2, [sp, #0]
    e2a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    e2a4:	4a06      	ldr	r2, [pc, #24]	; (e2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    e2a6:	9b01      	ldr	r3, [sp, #4]
    e2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ac:	1c5a      	adds	r2, r3, #1
    e2ae:	4904      	ldr	r1, [pc, #16]	; (e2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    e2b0:	9b01      	ldr	r3, [sp, #4]
    e2b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2b6:	bf00      	nop
    e2b8:	b003      	add	sp, #12
    e2ba:	f85d fb04 	ldr.w	pc, [sp], #4
    e2be:	bf00      	nop
    e2c0:	1fff8fc8 	.word	0x1fff8fc8
    e2c4:	1fff8fc4 	.word	0x1fff8fc4

0000e2c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    e2c8:	b500      	push	{lr}
    e2ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2cc:	f7f3 face 	bl	186c <Sys_GetCoreID>
    e2d0:	4603      	mov	r3, r0
    e2d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    e2d4:	4a0d      	ldr	r2, [pc, #52]	; (e30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    e2d6:	9b01      	ldr	r3, [sp, #4]
    e2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2dc:	1e5a      	subs	r2, r3, #1
    e2de:	490b      	ldr	r1, [pc, #44]	; (e30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    e2e0:	9b01      	ldr	r3, [sp, #4]
    e2e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    e2e6:	4a0a      	ldr	r2, [pc, #40]	; (e310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    e2e8:	9b01      	ldr	r3, [sp, #4]
    e2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ee:	f003 0301 	and.w	r3, r3, #1
    e2f2:	2b00      	cmp	r3, #0
    e2f4:	d106      	bne.n	e304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    e2f6:	4a05      	ldr	r2, [pc, #20]	; (e30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    e2f8:	9b01      	ldr	r3, [sp, #4]
    e2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2fe:	2b00      	cmp	r3, #0
    e300:	d100      	bne.n	e304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e302:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e304:	bf00      	nop
    e306:	b003      	add	sp, #12
    e308:	f85d fb04 	ldr.w	pc, [sp], #4
    e30c:	1fff8fc8 	.word	0x1fff8fc8
    e310:	1fff8fc4 	.word	0x1fff8fc4

0000e314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    e314:	b500      	push	{lr}
    e316:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e318:	f7f3 faa8 	bl	186c <Sys_GetCoreID>
    e31c:	4603      	mov	r3, r0
    e31e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    e320:	4a10      	ldr	r2, [pc, #64]	; (e364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    e322:	9b01      	ldr	r3, [sp, #4]
    e324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e328:	2b00      	cmp	r3, #0
    e32a:	d10d      	bne.n	e348 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e32c:	f7f2 fcb4 	bl	c98 <Adc_schm_read_msr>
    e330:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e332:	9b00      	ldr	r3, [sp, #0]
    e334:	f003 0301 	and.w	r3, r3, #1
    e338:	2b00      	cmp	r3, #0
    e33a:	d100      	bne.n	e33e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e33c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    e33e:	490a      	ldr	r1, [pc, #40]	; (e368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    e340:	9b01      	ldr	r3, [sp, #4]
    e342:	9a00      	ldr	r2, [sp, #0]
    e344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    e348:	4a06      	ldr	r2, [pc, #24]	; (e364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    e34a:	9b01      	ldr	r3, [sp, #4]
    e34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e350:	1c5a      	adds	r2, r3, #1
    e352:	4904      	ldr	r1, [pc, #16]	; (e364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    e354:	9b01      	ldr	r3, [sp, #4]
    e356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e35a:	bf00      	nop
    e35c:	b003      	add	sp, #12
    e35e:	f85d fb04 	ldr.w	pc, [sp], #4
    e362:	bf00      	nop
    e364:	1fff8fd0 	.word	0x1fff8fd0
    e368:	1fff8fcc 	.word	0x1fff8fcc

0000e36c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    e36c:	b500      	push	{lr}
    e36e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e370:	f7f3 fa7c 	bl	186c <Sys_GetCoreID>
    e374:	4603      	mov	r3, r0
    e376:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    e378:	4a0d      	ldr	r2, [pc, #52]	; (e3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    e37a:	9b01      	ldr	r3, [sp, #4]
    e37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e380:	1e5a      	subs	r2, r3, #1
    e382:	490b      	ldr	r1, [pc, #44]	; (e3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    e384:	9b01      	ldr	r3, [sp, #4]
    e386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    e38a:	4a0a      	ldr	r2, [pc, #40]	; (e3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    e38c:	9b01      	ldr	r3, [sp, #4]
    e38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e392:	f003 0301 	and.w	r3, r3, #1
    e396:	2b00      	cmp	r3, #0
    e398:	d106      	bne.n	e3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    e39a:	4a05      	ldr	r2, [pc, #20]	; (e3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    e39c:	9b01      	ldr	r3, [sp, #4]
    e39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a2:	2b00      	cmp	r3, #0
    e3a4:	d100      	bne.n	e3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3a8:	bf00      	nop
    e3aa:	b003      	add	sp, #12
    e3ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b0:	1fff8fd0 	.word	0x1fff8fd0
    e3b4:	1fff8fcc 	.word	0x1fff8fcc

0000e3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    e3b8:	b500      	push	{lr}
    e3ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3bc:	f7f3 fa56 	bl	186c <Sys_GetCoreID>
    e3c0:	4603      	mov	r3, r0
    e3c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    e3c4:	4a10      	ldr	r2, [pc, #64]	; (e408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    e3c6:	9b01      	ldr	r3, [sp, #4]
    e3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d10d      	bne.n	e3ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3d0:	f7f2 fc62 	bl	c98 <Adc_schm_read_msr>
    e3d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3d6:	9b00      	ldr	r3, [sp, #0]
    e3d8:	f003 0301 	and.w	r3, r3, #1
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d100      	bne.n	e3e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e3e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    e3e2:	490a      	ldr	r1, [pc, #40]	; (e40c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    e3e4:	9b01      	ldr	r3, [sp, #4]
    e3e6:	9a00      	ldr	r2, [sp, #0]
    e3e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    e3ec:	4a06      	ldr	r2, [pc, #24]	; (e408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    e3ee:	9b01      	ldr	r3, [sp, #4]
    e3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f4:	1c5a      	adds	r2, r3, #1
    e3f6:	4904      	ldr	r1, [pc, #16]	; (e408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    e3f8:	9b01      	ldr	r3, [sp, #4]
    e3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3fe:	bf00      	nop
    e400:	b003      	add	sp, #12
    e402:	f85d fb04 	ldr.w	pc, [sp], #4
    e406:	bf00      	nop
    e408:	1fff8fd8 	.word	0x1fff8fd8
    e40c:	1fff8fd4 	.word	0x1fff8fd4

0000e410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    e410:	b500      	push	{lr}
    e412:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e414:	f7f3 fa2a 	bl	186c <Sys_GetCoreID>
    e418:	4603      	mov	r3, r0
    e41a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    e41c:	4a0d      	ldr	r2, [pc, #52]	; (e454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    e41e:	9b01      	ldr	r3, [sp, #4]
    e420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e424:	1e5a      	subs	r2, r3, #1
    e426:	490b      	ldr	r1, [pc, #44]	; (e454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    e428:	9b01      	ldr	r3, [sp, #4]
    e42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    e42e:	4a0a      	ldr	r2, [pc, #40]	; (e458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    e430:	9b01      	ldr	r3, [sp, #4]
    e432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e436:	f003 0301 	and.w	r3, r3, #1
    e43a:	2b00      	cmp	r3, #0
    e43c:	d106      	bne.n	e44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    e43e:	4a05      	ldr	r2, [pc, #20]	; (e454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    e440:	9b01      	ldr	r3, [sp, #4]
    e442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e446:	2b00      	cmp	r3, #0
    e448:	d100      	bne.n	e44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e44a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e44c:	bf00      	nop
    e44e:	b003      	add	sp, #12
    e450:	f85d fb04 	ldr.w	pc, [sp], #4
    e454:	1fff8fd8 	.word	0x1fff8fd8
    e458:	1fff8fd4 	.word	0x1fff8fd4

0000e45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    e45c:	b500      	push	{lr}
    e45e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e460:	f7f3 fa04 	bl	186c <Sys_GetCoreID>
    e464:	4603      	mov	r3, r0
    e466:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    e468:	4a10      	ldr	r2, [pc, #64]	; (e4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    e46a:	9b01      	ldr	r3, [sp, #4]
    e46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e470:	2b00      	cmp	r3, #0
    e472:	d10d      	bne.n	e490 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e474:	f7f2 fc10 	bl	c98 <Adc_schm_read_msr>
    e478:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e47a:	9b00      	ldr	r3, [sp, #0]
    e47c:	f003 0301 	and.w	r3, r3, #1
    e480:	2b00      	cmp	r3, #0
    e482:	d100      	bne.n	e486 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e484:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    e486:	490a      	ldr	r1, [pc, #40]	; (e4b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	9a00      	ldr	r2, [sp, #0]
    e48c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    e490:	4a06      	ldr	r2, [pc, #24]	; (e4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    e492:	9b01      	ldr	r3, [sp, #4]
    e494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e498:	1c5a      	adds	r2, r3, #1
    e49a:	4904      	ldr	r1, [pc, #16]	; (e4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    e49c:	9b01      	ldr	r3, [sp, #4]
    e49e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4a2:	bf00      	nop
    e4a4:	b003      	add	sp, #12
    e4a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e4aa:	bf00      	nop
    e4ac:	1fff8fe0 	.word	0x1fff8fe0
    e4b0:	1fff8fdc 	.word	0x1fff8fdc

0000e4b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    e4b4:	b500      	push	{lr}
    e4b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b8:	f7f3 f9d8 	bl	186c <Sys_GetCoreID>
    e4bc:	4603      	mov	r3, r0
    e4be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    e4c0:	4a0d      	ldr	r2, [pc, #52]	; (e4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    e4c2:	9b01      	ldr	r3, [sp, #4]
    e4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c8:	1e5a      	subs	r2, r3, #1
    e4ca:	490b      	ldr	r1, [pc, #44]	; (e4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    e4cc:	9b01      	ldr	r3, [sp, #4]
    e4ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    e4d2:	4a0a      	ldr	r2, [pc, #40]	; (e4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    e4d4:	9b01      	ldr	r3, [sp, #4]
    e4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4da:	f003 0301 	and.w	r3, r3, #1
    e4de:	2b00      	cmp	r3, #0
    e4e0:	d106      	bne.n	e4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    e4e2:	4a05      	ldr	r2, [pc, #20]	; (e4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    e4e4:	9b01      	ldr	r3, [sp, #4]
    e4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	d100      	bne.n	e4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e4ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4f0:	bf00      	nop
    e4f2:	b003      	add	sp, #12
    e4f4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4f8:	1fff8fe0 	.word	0x1fff8fe0
    e4fc:	1fff8fdc 	.word	0x1fff8fdc

0000e500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    e500:	b500      	push	{lr}
    e502:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e504:	f7f3 f9b2 	bl	186c <Sys_GetCoreID>
    e508:	4603      	mov	r3, r0
    e50a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    e50c:	4a10      	ldr	r2, [pc, #64]	; (e550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    e50e:	9b01      	ldr	r3, [sp, #4]
    e510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e514:	2b00      	cmp	r3, #0
    e516:	d10d      	bne.n	e534 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e518:	f7f2 fbbe 	bl	c98 <Adc_schm_read_msr>
    e51c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e51e:	9b00      	ldr	r3, [sp, #0]
    e520:	f003 0301 	and.w	r3, r3, #1
    e524:	2b00      	cmp	r3, #0
    e526:	d100      	bne.n	e52a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e528:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    e52a:	490a      	ldr	r1, [pc, #40]	; (e554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    e52c:	9b01      	ldr	r3, [sp, #4]
    e52e:	9a00      	ldr	r2, [sp, #0]
    e530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    e534:	4a06      	ldr	r2, [pc, #24]	; (e550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    e536:	9b01      	ldr	r3, [sp, #4]
    e538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53c:	1c5a      	adds	r2, r3, #1
    e53e:	4904      	ldr	r1, [pc, #16]	; (e550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    e540:	9b01      	ldr	r3, [sp, #4]
    e542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e546:	bf00      	nop
    e548:	b003      	add	sp, #12
    e54a:	f85d fb04 	ldr.w	pc, [sp], #4
    e54e:	bf00      	nop
    e550:	1fff8fe8 	.word	0x1fff8fe8
    e554:	1fff8fe4 	.word	0x1fff8fe4

0000e558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    e558:	b500      	push	{lr}
    e55a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e55c:	f7f3 f986 	bl	186c <Sys_GetCoreID>
    e560:	4603      	mov	r3, r0
    e562:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    e564:	4a0d      	ldr	r2, [pc, #52]	; (e59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    e566:	9b01      	ldr	r3, [sp, #4]
    e568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e56c:	1e5a      	subs	r2, r3, #1
    e56e:	490b      	ldr	r1, [pc, #44]	; (e59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    e570:	9b01      	ldr	r3, [sp, #4]
    e572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    e576:	4a0a      	ldr	r2, [pc, #40]	; (e5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    e578:	9b01      	ldr	r3, [sp, #4]
    e57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e57e:	f003 0301 	and.w	r3, r3, #1
    e582:	2b00      	cmp	r3, #0
    e584:	d106      	bne.n	e594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    e586:	4a05      	ldr	r2, [pc, #20]	; (e59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    e588:	9b01      	ldr	r3, [sp, #4]
    e58a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e58e:	2b00      	cmp	r3, #0
    e590:	d100      	bne.n	e594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e592:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e594:	bf00      	nop
    e596:	b003      	add	sp, #12
    e598:	f85d fb04 	ldr.w	pc, [sp], #4
    e59c:	1fff8fe8 	.word	0x1fff8fe8
    e5a0:	1fff8fe4 	.word	0x1fff8fe4

0000e5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    e5a4:	b500      	push	{lr}
    e5a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5a8:	f7f3 f960 	bl	186c <Sys_GetCoreID>
    e5ac:	4603      	mov	r3, r0
    e5ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    e5b0:	4a10      	ldr	r2, [pc, #64]	; (e5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    e5b2:	9b01      	ldr	r3, [sp, #4]
    e5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	d10d      	bne.n	e5d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e5bc:	f7f2 fb6c 	bl	c98 <Adc_schm_read_msr>
    e5c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e5c2:	9b00      	ldr	r3, [sp, #0]
    e5c4:	f003 0301 	and.w	r3, r3, #1
    e5c8:	2b00      	cmp	r3, #0
    e5ca:	d100      	bne.n	e5ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e5cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    e5ce:	490a      	ldr	r1, [pc, #40]	; (e5f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    e5d0:	9b01      	ldr	r3, [sp, #4]
    e5d2:	9a00      	ldr	r2, [sp, #0]
    e5d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    e5d8:	4a06      	ldr	r2, [pc, #24]	; (e5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    e5da:	9b01      	ldr	r3, [sp, #4]
    e5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5e0:	1c5a      	adds	r2, r3, #1
    e5e2:	4904      	ldr	r1, [pc, #16]	; (e5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    e5e4:	9b01      	ldr	r3, [sp, #4]
    e5e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5ea:	bf00      	nop
    e5ec:	b003      	add	sp, #12
    e5ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e5f2:	bf00      	nop
    e5f4:	1fff8ff0 	.word	0x1fff8ff0
    e5f8:	1fff8fec 	.word	0x1fff8fec

0000e5fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    e5fc:	b500      	push	{lr}
    e5fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e600:	f7f3 f934 	bl	186c <Sys_GetCoreID>
    e604:	4603      	mov	r3, r0
    e606:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    e608:	4a0d      	ldr	r2, [pc, #52]	; (e640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    e60a:	9b01      	ldr	r3, [sp, #4]
    e60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e610:	1e5a      	subs	r2, r3, #1
    e612:	490b      	ldr	r1, [pc, #44]	; (e640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    e614:	9b01      	ldr	r3, [sp, #4]
    e616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    e61a:	4a0a      	ldr	r2, [pc, #40]	; (e644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    e61c:	9b01      	ldr	r3, [sp, #4]
    e61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e622:	f003 0301 	and.w	r3, r3, #1
    e626:	2b00      	cmp	r3, #0
    e628:	d106      	bne.n	e638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    e62a:	4a05      	ldr	r2, [pc, #20]	; (e640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    e62c:	9b01      	ldr	r3, [sp, #4]
    e62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e632:	2b00      	cmp	r3, #0
    e634:	d100      	bne.n	e638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e636:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e638:	bf00      	nop
    e63a:	b003      	add	sp, #12
    e63c:	f85d fb04 	ldr.w	pc, [sp], #4
    e640:	1fff8ff0 	.word	0x1fff8ff0
    e644:	1fff8fec 	.word	0x1fff8fec

0000e648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    e648:	b500      	push	{lr}
    e64a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e64c:	f7f3 f90e 	bl	186c <Sys_GetCoreID>
    e650:	4603      	mov	r3, r0
    e652:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    e654:	4a10      	ldr	r2, [pc, #64]	; (e698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    e656:	9b01      	ldr	r3, [sp, #4]
    e658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e65c:	2b00      	cmp	r3, #0
    e65e:	d10d      	bne.n	e67c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e660:	f7f2 fb1a 	bl	c98 <Adc_schm_read_msr>
    e664:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e666:	9b00      	ldr	r3, [sp, #0]
    e668:	f003 0301 	and.w	r3, r3, #1
    e66c:	2b00      	cmp	r3, #0
    e66e:	d100      	bne.n	e672 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e670:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    e672:	490a      	ldr	r1, [pc, #40]	; (e69c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    e674:	9b01      	ldr	r3, [sp, #4]
    e676:	9a00      	ldr	r2, [sp, #0]
    e678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    e67c:	4a06      	ldr	r2, [pc, #24]	; (e698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    e67e:	9b01      	ldr	r3, [sp, #4]
    e680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e684:	1c5a      	adds	r2, r3, #1
    e686:	4904      	ldr	r1, [pc, #16]	; (e698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    e688:	9b01      	ldr	r3, [sp, #4]
    e68a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e68e:	bf00      	nop
    e690:	b003      	add	sp, #12
    e692:	f85d fb04 	ldr.w	pc, [sp], #4
    e696:	bf00      	nop
    e698:	1fff8ff8 	.word	0x1fff8ff8
    e69c:	1fff8ff4 	.word	0x1fff8ff4

0000e6a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    e6a0:	b500      	push	{lr}
    e6a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6a4:	f7f3 f8e2 	bl	186c <Sys_GetCoreID>
    e6a8:	4603      	mov	r3, r0
    e6aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    e6ac:	4a0d      	ldr	r2, [pc, #52]	; (e6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    e6ae:	9b01      	ldr	r3, [sp, #4]
    e6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6b4:	1e5a      	subs	r2, r3, #1
    e6b6:	490b      	ldr	r1, [pc, #44]	; (e6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    e6b8:	9b01      	ldr	r3, [sp, #4]
    e6ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    e6be:	4a0a      	ldr	r2, [pc, #40]	; (e6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    e6c0:	9b01      	ldr	r3, [sp, #4]
    e6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6c6:	f003 0301 	and.w	r3, r3, #1
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d106      	bne.n	e6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    e6ce:	4a05      	ldr	r2, [pc, #20]	; (e6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    e6d0:	9b01      	ldr	r3, [sp, #4]
    e6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d6:	2b00      	cmp	r3, #0
    e6d8:	d100      	bne.n	e6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e6dc:	bf00      	nop
    e6de:	b003      	add	sp, #12
    e6e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e6e4:	1fff8ff8 	.word	0x1fff8ff8
    e6e8:	1fff8ff4 	.word	0x1fff8ff4

0000e6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    e6ec:	b500      	push	{lr}
    e6ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6f0:	f7f3 f8bc 	bl	186c <Sys_GetCoreID>
    e6f4:	4603      	mov	r3, r0
    e6f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    e6f8:	4a10      	ldr	r2, [pc, #64]	; (e73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    e6fa:	9b01      	ldr	r3, [sp, #4]
    e6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e700:	2b00      	cmp	r3, #0
    e702:	d10d      	bne.n	e720 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e704:	f7f2 fac8 	bl	c98 <Adc_schm_read_msr>
    e708:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e70a:	9b00      	ldr	r3, [sp, #0]
    e70c:	f003 0301 	and.w	r3, r3, #1
    e710:	2b00      	cmp	r3, #0
    e712:	d100      	bne.n	e716 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e714:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    e716:	490a      	ldr	r1, [pc, #40]	; (e740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    e718:	9b01      	ldr	r3, [sp, #4]
    e71a:	9a00      	ldr	r2, [sp, #0]
    e71c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    e720:	4a06      	ldr	r2, [pc, #24]	; (e73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    e722:	9b01      	ldr	r3, [sp, #4]
    e724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e728:	1c5a      	adds	r2, r3, #1
    e72a:	4904      	ldr	r1, [pc, #16]	; (e73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e732:	bf00      	nop
    e734:	b003      	add	sp, #12
    e736:	f85d fb04 	ldr.w	pc, [sp], #4
    e73a:	bf00      	nop
    e73c:	1fff9000 	.word	0x1fff9000
    e740:	1fff8ffc 	.word	0x1fff8ffc

0000e744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    e744:	b500      	push	{lr}
    e746:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e748:	f7f3 f890 	bl	186c <Sys_GetCoreID>
    e74c:	4603      	mov	r3, r0
    e74e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    e750:	4a0d      	ldr	r2, [pc, #52]	; (e788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    e752:	9b01      	ldr	r3, [sp, #4]
    e754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e758:	1e5a      	subs	r2, r3, #1
    e75a:	490b      	ldr	r1, [pc, #44]	; (e788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    e75c:	9b01      	ldr	r3, [sp, #4]
    e75e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    e762:	4a0a      	ldr	r2, [pc, #40]	; (e78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    e764:	9b01      	ldr	r3, [sp, #4]
    e766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e76a:	f003 0301 	and.w	r3, r3, #1
    e76e:	2b00      	cmp	r3, #0
    e770:	d106      	bne.n	e780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    e772:	4a05      	ldr	r2, [pc, #20]	; (e788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    e774:	9b01      	ldr	r3, [sp, #4]
    e776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d100      	bne.n	e780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e77e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e780:	bf00      	nop
    e782:	b003      	add	sp, #12
    e784:	f85d fb04 	ldr.w	pc, [sp], #4
    e788:	1fff9000 	.word	0x1fff9000
    e78c:	1fff8ffc 	.word	0x1fff8ffc

0000e790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    e790:	b500      	push	{lr}
    e792:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e794:	f7f3 f86a 	bl	186c <Sys_GetCoreID>
    e798:	4603      	mov	r3, r0
    e79a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    e79c:	4a10      	ldr	r2, [pc, #64]	; (e7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    e79e:	9b01      	ldr	r3, [sp, #4]
    e7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d10d      	bne.n	e7c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7a8:	f7f2 fa76 	bl	c98 <Adc_schm_read_msr>
    e7ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7ae:	9b00      	ldr	r3, [sp, #0]
    e7b0:	f003 0301 	and.w	r3, r3, #1
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d100      	bne.n	e7ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e7b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    e7ba:	490a      	ldr	r1, [pc, #40]	; (e7e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    e7bc:	9b01      	ldr	r3, [sp, #4]
    e7be:	9a00      	ldr	r2, [sp, #0]
    e7c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    e7c4:	4a06      	ldr	r2, [pc, #24]	; (e7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    e7c6:	9b01      	ldr	r3, [sp, #4]
    e7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7cc:	1c5a      	adds	r2, r3, #1
    e7ce:	4904      	ldr	r1, [pc, #16]	; (e7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    e7d0:	9b01      	ldr	r3, [sp, #4]
    e7d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7d6:	bf00      	nop
    e7d8:	b003      	add	sp, #12
    e7da:	f85d fb04 	ldr.w	pc, [sp], #4
    e7de:	bf00      	nop
    e7e0:	1fff9008 	.word	0x1fff9008
    e7e4:	1fff9004 	.word	0x1fff9004

0000e7e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    e7e8:	b500      	push	{lr}
    e7ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7ec:	f7f3 f83e 	bl	186c <Sys_GetCoreID>
    e7f0:	4603      	mov	r3, r0
    e7f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    e7f4:	4a0d      	ldr	r2, [pc, #52]	; (e82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    e7f6:	9b01      	ldr	r3, [sp, #4]
    e7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7fc:	1e5a      	subs	r2, r3, #1
    e7fe:	490b      	ldr	r1, [pc, #44]	; (e82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    e800:	9b01      	ldr	r3, [sp, #4]
    e802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    e806:	4a0a      	ldr	r2, [pc, #40]	; (e830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    e808:	9b01      	ldr	r3, [sp, #4]
    e80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e80e:	f003 0301 	and.w	r3, r3, #1
    e812:	2b00      	cmp	r3, #0
    e814:	d106      	bne.n	e824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    e816:	4a05      	ldr	r2, [pc, #20]	; (e82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    e818:	9b01      	ldr	r3, [sp, #4]
    e81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e81e:	2b00      	cmp	r3, #0
    e820:	d100      	bne.n	e824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e822:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e824:	bf00      	nop
    e826:	b003      	add	sp, #12
    e828:	f85d fb04 	ldr.w	pc, [sp], #4
    e82c:	1fff9008 	.word	0x1fff9008
    e830:	1fff9004 	.word	0x1fff9004

0000e834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    e834:	b500      	push	{lr}
    e836:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e838:	f7f3 f818 	bl	186c <Sys_GetCoreID>
    e83c:	4603      	mov	r3, r0
    e83e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    e840:	4a10      	ldr	r2, [pc, #64]	; (e884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    e842:	9b01      	ldr	r3, [sp, #4]
    e844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e848:	2b00      	cmp	r3, #0
    e84a:	d10d      	bne.n	e868 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e84c:	f7f2 fa24 	bl	c98 <Adc_schm_read_msr>
    e850:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e852:	9b00      	ldr	r3, [sp, #0]
    e854:	f003 0301 	and.w	r3, r3, #1
    e858:	2b00      	cmp	r3, #0
    e85a:	d100      	bne.n	e85e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e85c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    e85e:	490a      	ldr	r1, [pc, #40]	; (e888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    e860:	9b01      	ldr	r3, [sp, #4]
    e862:	9a00      	ldr	r2, [sp, #0]
    e864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    e868:	4a06      	ldr	r2, [pc, #24]	; (e884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    e86a:	9b01      	ldr	r3, [sp, #4]
    e86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e870:	1c5a      	adds	r2, r3, #1
    e872:	4904      	ldr	r1, [pc, #16]	; (e884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    e874:	9b01      	ldr	r3, [sp, #4]
    e876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e87a:	bf00      	nop
    e87c:	b003      	add	sp, #12
    e87e:	f85d fb04 	ldr.w	pc, [sp], #4
    e882:	bf00      	nop
    e884:	1fff9010 	.word	0x1fff9010
    e888:	1fff900c 	.word	0x1fff900c

0000e88c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    e88c:	b500      	push	{lr}
    e88e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e890:	f7f2 ffec 	bl	186c <Sys_GetCoreID>
    e894:	4603      	mov	r3, r0
    e896:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    e898:	4a0d      	ldr	r2, [pc, #52]	; (e8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    e89a:	9b01      	ldr	r3, [sp, #4]
    e89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8a0:	1e5a      	subs	r2, r3, #1
    e8a2:	490b      	ldr	r1, [pc, #44]	; (e8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    e8a4:	9b01      	ldr	r3, [sp, #4]
    e8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    e8aa:	4a0a      	ldr	r2, [pc, #40]	; (e8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    e8ac:	9b01      	ldr	r3, [sp, #4]
    e8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b2:	f003 0301 	and.w	r3, r3, #1
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	d106      	bne.n	e8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    e8ba:	4a05      	ldr	r2, [pc, #20]	; (e8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    e8bc:	9b01      	ldr	r3, [sp, #4]
    e8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d100      	bne.n	e8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e8c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e8c8:	bf00      	nop
    e8ca:	b003      	add	sp, #12
    e8cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d0:	1fff9010 	.word	0x1fff9010
    e8d4:	1fff900c 	.word	0x1fff900c

0000e8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    e8d8:	b500      	push	{lr}
    e8da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8dc:	f7f2 ffc6 	bl	186c <Sys_GetCoreID>
    e8e0:	4603      	mov	r3, r0
    e8e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    e8e4:	4a10      	ldr	r2, [pc, #64]	; (e928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    e8e6:	9b01      	ldr	r3, [sp, #4]
    e8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d10d      	bne.n	e90c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8f0:	f7f2 f9d2 	bl	c98 <Adc_schm_read_msr>
    e8f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8f6:	9b00      	ldr	r3, [sp, #0]
    e8f8:	f003 0301 	and.w	r3, r3, #1
    e8fc:	2b00      	cmp	r3, #0
    e8fe:	d100      	bne.n	e902 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e900:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    e902:	490a      	ldr	r1, [pc, #40]	; (e92c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    e904:	9b01      	ldr	r3, [sp, #4]
    e906:	9a00      	ldr	r2, [sp, #0]
    e908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    e90c:	4a06      	ldr	r2, [pc, #24]	; (e928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    e90e:	9b01      	ldr	r3, [sp, #4]
    e910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e914:	1c5a      	adds	r2, r3, #1
    e916:	4904      	ldr	r1, [pc, #16]	; (e928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    e918:	9b01      	ldr	r3, [sp, #4]
    e91a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e91e:	bf00      	nop
    e920:	b003      	add	sp, #12
    e922:	f85d fb04 	ldr.w	pc, [sp], #4
    e926:	bf00      	nop
    e928:	1fff9018 	.word	0x1fff9018
    e92c:	1fff9014 	.word	0x1fff9014

0000e930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    e930:	b500      	push	{lr}
    e932:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e934:	f7f2 ff9a 	bl	186c <Sys_GetCoreID>
    e938:	4603      	mov	r3, r0
    e93a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    e93c:	4a0d      	ldr	r2, [pc, #52]	; (e974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    e93e:	9b01      	ldr	r3, [sp, #4]
    e940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e944:	1e5a      	subs	r2, r3, #1
    e946:	490b      	ldr	r1, [pc, #44]	; (e974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    e948:	9b01      	ldr	r3, [sp, #4]
    e94a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    e94e:	4a0a      	ldr	r2, [pc, #40]	; (e978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    e950:	9b01      	ldr	r3, [sp, #4]
    e952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e956:	f003 0301 	and.w	r3, r3, #1
    e95a:	2b00      	cmp	r3, #0
    e95c:	d106      	bne.n	e96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    e95e:	4a05      	ldr	r2, [pc, #20]	; (e974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    e960:	9b01      	ldr	r3, [sp, #4]
    e962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e966:	2b00      	cmp	r3, #0
    e968:	d100      	bne.n	e96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e96a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e96c:	bf00      	nop
    e96e:	b003      	add	sp, #12
    e970:	f85d fb04 	ldr.w	pc, [sp], #4
    e974:	1fff9018 	.word	0x1fff9018
    e978:	1fff9014 	.word	0x1fff9014

0000e97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    e97c:	b500      	push	{lr}
    e97e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e980:	f7f2 ff74 	bl	186c <Sys_GetCoreID>
    e984:	4603      	mov	r3, r0
    e986:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    e988:	4a10      	ldr	r2, [pc, #64]	; (e9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    e98a:	9b01      	ldr	r3, [sp, #4]
    e98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e990:	2b00      	cmp	r3, #0
    e992:	d10d      	bne.n	e9b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e994:	f7f2 f980 	bl	c98 <Adc_schm_read_msr>
    e998:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e99a:	9b00      	ldr	r3, [sp, #0]
    e99c:	f003 0301 	and.w	r3, r3, #1
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d100      	bne.n	e9a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    e9a6:	490a      	ldr	r1, [pc, #40]	; (e9d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    e9a8:	9b01      	ldr	r3, [sp, #4]
    e9aa:	9a00      	ldr	r2, [sp, #0]
    e9ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    e9b0:	4a06      	ldr	r2, [pc, #24]	; (e9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    e9b2:	9b01      	ldr	r3, [sp, #4]
    e9b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b8:	1c5a      	adds	r2, r3, #1
    e9ba:	4904      	ldr	r1, [pc, #16]	; (e9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    e9bc:	9b01      	ldr	r3, [sp, #4]
    e9be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e9c2:	bf00      	nop
    e9c4:	b003      	add	sp, #12
    e9c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e9ca:	bf00      	nop
    e9cc:	1fff9020 	.word	0x1fff9020
    e9d0:	1fff901c 	.word	0x1fff901c

0000e9d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    e9d4:	b500      	push	{lr}
    e9d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d8:	f7f2 ff48 	bl	186c <Sys_GetCoreID>
    e9dc:	4603      	mov	r3, r0
    e9de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    e9e0:	4a0d      	ldr	r2, [pc, #52]	; (ea18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    e9e2:	9b01      	ldr	r3, [sp, #4]
    e9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e8:	1e5a      	subs	r2, r3, #1
    e9ea:	490b      	ldr	r1, [pc, #44]	; (ea18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    e9ec:	9b01      	ldr	r3, [sp, #4]
    e9ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    e9f2:	4a0a      	ldr	r2, [pc, #40]	; (ea1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    e9f4:	9b01      	ldr	r3, [sp, #4]
    e9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9fa:	f003 0301 	and.w	r3, r3, #1
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d106      	bne.n	ea10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    ea02:	4a05      	ldr	r2, [pc, #20]	; (ea18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    ea04:	9b01      	ldr	r3, [sp, #4]
    ea06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	d100      	bne.n	ea10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea10:	bf00      	nop
    ea12:	b003      	add	sp, #12
    ea14:	f85d fb04 	ldr.w	pc, [sp], #4
    ea18:	1fff9020 	.word	0x1fff9020
    ea1c:	1fff901c 	.word	0x1fff901c

0000ea20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    ea20:	b500      	push	{lr}
    ea22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea24:	f7f2 ff22 	bl	186c <Sys_GetCoreID>
    ea28:	4603      	mov	r3, r0
    ea2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    ea2c:	4a10      	ldr	r2, [pc, #64]	; (ea70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    ea2e:	9b01      	ldr	r3, [sp, #4]
    ea30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea34:	2b00      	cmp	r3, #0
    ea36:	d10d      	bne.n	ea54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea38:	f7f2 f92e 	bl	c98 <Adc_schm_read_msr>
    ea3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea3e:	9b00      	ldr	r3, [sp, #0]
    ea40:	f003 0301 	and.w	r3, r3, #1
    ea44:	2b00      	cmp	r3, #0
    ea46:	d100      	bne.n	ea4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    ea4a:	490a      	ldr	r1, [pc, #40]	; (ea74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	9a00      	ldr	r2, [sp, #0]
    ea50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    ea54:	4a06      	ldr	r2, [pc, #24]	; (ea70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    ea56:	9b01      	ldr	r3, [sp, #4]
    ea58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5c:	1c5a      	adds	r2, r3, #1
    ea5e:	4904      	ldr	r1, [pc, #16]	; (ea70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    ea60:	9b01      	ldr	r3, [sp, #4]
    ea62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea66:	bf00      	nop
    ea68:	b003      	add	sp, #12
    ea6a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea6e:	bf00      	nop
    ea70:	1fff9028 	.word	0x1fff9028
    ea74:	1fff9024 	.word	0x1fff9024

0000ea78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    ea78:	b500      	push	{lr}
    ea7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea7c:	f7f2 fef6 	bl	186c <Sys_GetCoreID>
    ea80:	4603      	mov	r3, r0
    ea82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    ea84:	4a0d      	ldr	r2, [pc, #52]	; (eabc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    ea86:	9b01      	ldr	r3, [sp, #4]
    ea88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea8c:	1e5a      	subs	r2, r3, #1
    ea8e:	490b      	ldr	r1, [pc, #44]	; (eabc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    ea90:	9b01      	ldr	r3, [sp, #4]
    ea92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    ea96:	4a0a      	ldr	r2, [pc, #40]	; (eac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    ea98:	9b01      	ldr	r3, [sp, #4]
    ea9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea9e:	f003 0301 	and.w	r3, r3, #1
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	d106      	bne.n	eab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    eaa6:	4a05      	ldr	r2, [pc, #20]	; (eabc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    eaa8:	9b01      	ldr	r3, [sp, #4]
    eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d100      	bne.n	eab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eab2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eab4:	bf00      	nop
    eab6:	b003      	add	sp, #12
    eab8:	f85d fb04 	ldr.w	pc, [sp], #4
    eabc:	1fff9028 	.word	0x1fff9028
    eac0:	1fff9024 	.word	0x1fff9024

0000eac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    eac4:	b500      	push	{lr}
    eac6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eac8:	f7f2 fed0 	bl	186c <Sys_GetCoreID>
    eacc:	4603      	mov	r3, r0
    eace:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    ead0:	4a10      	ldr	r2, [pc, #64]	; (eb14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    ead2:	9b01      	ldr	r3, [sp, #4]
    ead4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ead8:	2b00      	cmp	r3, #0
    eada:	d10d      	bne.n	eaf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eadc:	f7f2 f8dc 	bl	c98 <Adc_schm_read_msr>
    eae0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eae2:	9b00      	ldr	r3, [sp, #0]
    eae4:	f003 0301 	and.w	r3, r3, #1
    eae8:	2b00      	cmp	r3, #0
    eaea:	d100      	bne.n	eaee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eaec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    eaee:	490a      	ldr	r1, [pc, #40]	; (eb18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    eaf0:	9b01      	ldr	r3, [sp, #4]
    eaf2:	9a00      	ldr	r2, [sp, #0]
    eaf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    eaf8:	4a06      	ldr	r2, [pc, #24]	; (eb14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    eafa:	9b01      	ldr	r3, [sp, #4]
    eafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb00:	1c5a      	adds	r2, r3, #1
    eb02:	4904      	ldr	r1, [pc, #16]	; (eb14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    eb04:	9b01      	ldr	r3, [sp, #4]
    eb06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb0a:	bf00      	nop
    eb0c:	b003      	add	sp, #12
    eb0e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb12:	bf00      	nop
    eb14:	1fff9030 	.word	0x1fff9030
    eb18:	1fff902c 	.word	0x1fff902c

0000eb1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    eb1c:	b500      	push	{lr}
    eb1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb20:	f7f2 fea4 	bl	186c <Sys_GetCoreID>
    eb24:	4603      	mov	r3, r0
    eb26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    eb28:	4a0d      	ldr	r2, [pc, #52]	; (eb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    eb2a:	9b01      	ldr	r3, [sp, #4]
    eb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb30:	1e5a      	subs	r2, r3, #1
    eb32:	490b      	ldr	r1, [pc, #44]	; (eb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    eb34:	9b01      	ldr	r3, [sp, #4]
    eb36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    eb3a:	4a0a      	ldr	r2, [pc, #40]	; (eb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    eb3c:	9b01      	ldr	r3, [sp, #4]
    eb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb42:	f003 0301 	and.w	r3, r3, #1
    eb46:	2b00      	cmp	r3, #0
    eb48:	d106      	bne.n	eb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    eb4a:	4a05      	ldr	r2, [pc, #20]	; (eb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    eb4c:	9b01      	ldr	r3, [sp, #4]
    eb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb52:	2b00      	cmp	r3, #0
    eb54:	d100      	bne.n	eb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb58:	bf00      	nop
    eb5a:	b003      	add	sp, #12
    eb5c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb60:	1fff9030 	.word	0x1fff9030
    eb64:	1fff902c 	.word	0x1fff902c

0000eb68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    eb68:	b500      	push	{lr}
    eb6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb6c:	f7f2 fe7e 	bl	186c <Sys_GetCoreID>
    eb70:	4603      	mov	r3, r0
    eb72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    eb74:	4a10      	ldr	r2, [pc, #64]	; (ebb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    eb76:	9b01      	ldr	r3, [sp, #4]
    eb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d10d      	bne.n	eb9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb80:	f7f2 f88a 	bl	c98 <Adc_schm_read_msr>
    eb84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb86:	9b00      	ldr	r3, [sp, #0]
    eb88:	f003 0301 	and.w	r3, r3, #1
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d100      	bne.n	eb92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    eb92:	490a      	ldr	r1, [pc, #40]	; (ebbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    eb94:	9b01      	ldr	r3, [sp, #4]
    eb96:	9a00      	ldr	r2, [sp, #0]
    eb98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    eb9c:	4a06      	ldr	r2, [pc, #24]	; (ebb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    eb9e:	9b01      	ldr	r3, [sp, #4]
    eba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba4:	1c5a      	adds	r2, r3, #1
    eba6:	4904      	ldr	r1, [pc, #16]	; (ebb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebae:	bf00      	nop
    ebb0:	b003      	add	sp, #12
    ebb2:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb6:	bf00      	nop
    ebb8:	1fff9038 	.word	0x1fff9038
    ebbc:	1fff9034 	.word	0x1fff9034

0000ebc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    ebc0:	b500      	push	{lr}
    ebc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebc4:	f7f2 fe52 	bl	186c <Sys_GetCoreID>
    ebc8:	4603      	mov	r3, r0
    ebca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    ebcc:	4a0d      	ldr	r2, [pc, #52]	; (ec04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    ebce:	9b01      	ldr	r3, [sp, #4]
    ebd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebd4:	1e5a      	subs	r2, r3, #1
    ebd6:	490b      	ldr	r1, [pc, #44]	; (ec04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    ebd8:	9b01      	ldr	r3, [sp, #4]
    ebda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    ebde:	4a0a      	ldr	r2, [pc, #40]	; (ec08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    ebe0:	9b01      	ldr	r3, [sp, #4]
    ebe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebe6:	f003 0301 	and.w	r3, r3, #1
    ebea:	2b00      	cmp	r3, #0
    ebec:	d106      	bne.n	ebfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    ebee:	4a05      	ldr	r2, [pc, #20]	; (ec04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    ebf0:	9b01      	ldr	r3, [sp, #4]
    ebf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf6:	2b00      	cmp	r3, #0
    ebf8:	d100      	bne.n	ebfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ebfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ebfc:	bf00      	nop
    ebfe:	b003      	add	sp, #12
    ec00:	f85d fb04 	ldr.w	pc, [sp], #4
    ec04:	1fff9038 	.word	0x1fff9038
    ec08:	1fff9034 	.word	0x1fff9034

0000ec0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    ec0c:	b500      	push	{lr}
    ec0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec10:	f7f2 fe2c 	bl	186c <Sys_GetCoreID>
    ec14:	4603      	mov	r3, r0
    ec16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    ec18:	4a10      	ldr	r2, [pc, #64]	; (ec5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    ec1a:	9b01      	ldr	r3, [sp, #4]
    ec1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec20:	2b00      	cmp	r3, #0
    ec22:	d10d      	bne.n	ec40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec24:	f7f2 f838 	bl	c98 <Adc_schm_read_msr>
    ec28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec2a:	9b00      	ldr	r3, [sp, #0]
    ec2c:	f003 0301 	and.w	r3, r3, #1
    ec30:	2b00      	cmp	r3, #0
    ec32:	d100      	bne.n	ec36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    ec36:	490a      	ldr	r1, [pc, #40]	; (ec60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    ec38:	9b01      	ldr	r3, [sp, #4]
    ec3a:	9a00      	ldr	r2, [sp, #0]
    ec3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    ec40:	4a06      	ldr	r2, [pc, #24]	; (ec5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    ec42:	9b01      	ldr	r3, [sp, #4]
    ec44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec48:	1c5a      	adds	r2, r3, #1
    ec4a:	4904      	ldr	r1, [pc, #16]	; (ec5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    ec4c:	9b01      	ldr	r3, [sp, #4]
    ec4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec52:	bf00      	nop
    ec54:	b003      	add	sp, #12
    ec56:	f85d fb04 	ldr.w	pc, [sp], #4
    ec5a:	bf00      	nop
    ec5c:	1fff9040 	.word	0x1fff9040
    ec60:	1fff903c 	.word	0x1fff903c

0000ec64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    ec64:	b500      	push	{lr}
    ec66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec68:	f7f2 fe00 	bl	186c <Sys_GetCoreID>
    ec6c:	4603      	mov	r3, r0
    ec6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    ec70:	4a0d      	ldr	r2, [pc, #52]	; (eca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    ec72:	9b01      	ldr	r3, [sp, #4]
    ec74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec78:	1e5a      	subs	r2, r3, #1
    ec7a:	490b      	ldr	r1, [pc, #44]	; (eca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    ec7c:	9b01      	ldr	r3, [sp, #4]
    ec7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    ec82:	4a0a      	ldr	r2, [pc, #40]	; (ecac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    ec84:	9b01      	ldr	r3, [sp, #4]
    ec86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec8a:	f003 0301 	and.w	r3, r3, #1
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d106      	bne.n	eca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    ec92:	4a05      	ldr	r2, [pc, #20]	; (eca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    ec94:	9b01      	ldr	r3, [sp, #4]
    ec96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	d100      	bne.n	eca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eca0:	bf00      	nop
    eca2:	b003      	add	sp, #12
    eca4:	f85d fb04 	ldr.w	pc, [sp], #4
    eca8:	1fff9040 	.word	0x1fff9040
    ecac:	1fff903c 	.word	0x1fff903c

0000ecb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    ecb0:	b500      	push	{lr}
    ecb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecb4:	f7f2 fdda 	bl	186c <Sys_GetCoreID>
    ecb8:	4603      	mov	r3, r0
    ecba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    ecbc:	4a10      	ldr	r2, [pc, #64]	; (ed00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    ecbe:	9b01      	ldr	r3, [sp, #4]
    ecc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	d10d      	bne.n	ece4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ecc8:	f7f1 ffe6 	bl	c98 <Adc_schm_read_msr>
    eccc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ecce:	9b00      	ldr	r3, [sp, #0]
    ecd0:	f003 0301 	and.w	r3, r3, #1
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d100      	bne.n	ecda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ecd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    ecda:	490a      	ldr	r1, [pc, #40]	; (ed04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    ecdc:	9b01      	ldr	r3, [sp, #4]
    ecde:	9a00      	ldr	r2, [sp, #0]
    ece0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    ece4:	4a06      	ldr	r2, [pc, #24]	; (ed00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    ece6:	9b01      	ldr	r3, [sp, #4]
    ece8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecec:	1c5a      	adds	r2, r3, #1
    ecee:	4904      	ldr	r1, [pc, #16]	; (ed00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    ecf0:	9b01      	ldr	r3, [sp, #4]
    ecf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ecf6:	bf00      	nop
    ecf8:	b003      	add	sp, #12
    ecfa:	f85d fb04 	ldr.w	pc, [sp], #4
    ecfe:	bf00      	nop
    ed00:	1fff9048 	.word	0x1fff9048
    ed04:	1fff9044 	.word	0x1fff9044

0000ed08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    ed08:	b500      	push	{lr}
    ed0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed0c:	f7f2 fdae 	bl	186c <Sys_GetCoreID>
    ed10:	4603      	mov	r3, r0
    ed12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    ed14:	4a0d      	ldr	r2, [pc, #52]	; (ed4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    ed16:	9b01      	ldr	r3, [sp, #4]
    ed18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed1c:	1e5a      	subs	r2, r3, #1
    ed1e:	490b      	ldr	r1, [pc, #44]	; (ed4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    ed20:	9b01      	ldr	r3, [sp, #4]
    ed22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    ed26:	4a0a      	ldr	r2, [pc, #40]	; (ed50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    ed28:	9b01      	ldr	r3, [sp, #4]
    ed2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed2e:	f003 0301 	and.w	r3, r3, #1
    ed32:	2b00      	cmp	r3, #0
    ed34:	d106      	bne.n	ed44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    ed36:	4a05      	ldr	r2, [pc, #20]	; (ed4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    ed38:	9b01      	ldr	r3, [sp, #4]
    ed3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d100      	bne.n	ed44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed44:	bf00      	nop
    ed46:	b003      	add	sp, #12
    ed48:	f85d fb04 	ldr.w	pc, [sp], #4
    ed4c:	1fff9048 	.word	0x1fff9048
    ed50:	1fff9044 	.word	0x1fff9044

0000ed54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    ed54:	b500      	push	{lr}
    ed56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed58:	f7f2 fd88 	bl	186c <Sys_GetCoreID>
    ed5c:	4603      	mov	r3, r0
    ed5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    ed60:	4a10      	ldr	r2, [pc, #64]	; (eda4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    ed62:	9b01      	ldr	r3, [sp, #4]
    ed64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed68:	2b00      	cmp	r3, #0
    ed6a:	d10d      	bne.n	ed88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed6c:	f7f1 ff94 	bl	c98 <Adc_schm_read_msr>
    ed70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed72:	9b00      	ldr	r3, [sp, #0]
    ed74:	f003 0301 	and.w	r3, r3, #1
    ed78:	2b00      	cmp	r3, #0
    ed7a:	d100      	bne.n	ed7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    ed7e:	490a      	ldr	r1, [pc, #40]	; (eda8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    ed80:	9b01      	ldr	r3, [sp, #4]
    ed82:	9a00      	ldr	r2, [sp, #0]
    ed84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    ed88:	4a06      	ldr	r2, [pc, #24]	; (eda4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    ed8a:	9b01      	ldr	r3, [sp, #4]
    ed8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed90:	1c5a      	adds	r2, r3, #1
    ed92:	4904      	ldr	r1, [pc, #16]	; (eda4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    ed94:	9b01      	ldr	r3, [sp, #4]
    ed96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed9a:	bf00      	nop
    ed9c:	b003      	add	sp, #12
    ed9e:	f85d fb04 	ldr.w	pc, [sp], #4
    eda2:	bf00      	nop
    eda4:	1fff9050 	.word	0x1fff9050
    eda8:	1fff904c 	.word	0x1fff904c

0000edac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    edac:	b500      	push	{lr}
    edae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edb0:	f7f2 fd5c 	bl	186c <Sys_GetCoreID>
    edb4:	4603      	mov	r3, r0
    edb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    edb8:	4a0d      	ldr	r2, [pc, #52]	; (edf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    edba:	9b01      	ldr	r3, [sp, #4]
    edbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edc0:	1e5a      	subs	r2, r3, #1
    edc2:	490b      	ldr	r1, [pc, #44]	; (edf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    edc4:	9b01      	ldr	r3, [sp, #4]
    edc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    edca:	4a0a      	ldr	r2, [pc, #40]	; (edf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    edcc:	9b01      	ldr	r3, [sp, #4]
    edce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd2:	f003 0301 	and.w	r3, r3, #1
    edd6:	2b00      	cmp	r3, #0
    edd8:	d106      	bne.n	ede8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    edda:	4a05      	ldr	r2, [pc, #20]	; (edf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    eddc:	9b01      	ldr	r3, [sp, #4]
    edde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede2:	2b00      	cmp	r3, #0
    ede4:	d100      	bne.n	ede8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ede6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ede8:	bf00      	nop
    edea:	b003      	add	sp, #12
    edec:	f85d fb04 	ldr.w	pc, [sp], #4
    edf0:	1fff9050 	.word	0x1fff9050
    edf4:	1fff904c 	.word	0x1fff904c

0000edf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    edf8:	b500      	push	{lr}
    edfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edfc:	f7f2 fd36 	bl	186c <Sys_GetCoreID>
    ee00:	4603      	mov	r3, r0
    ee02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    ee04:	4a10      	ldr	r2, [pc, #64]	; (ee48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    ee06:	9b01      	ldr	r3, [sp, #4]
    ee08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee0c:	2b00      	cmp	r3, #0
    ee0e:	d10d      	bne.n	ee2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee10:	f7f1 ff42 	bl	c98 <Adc_schm_read_msr>
    ee14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee16:	9b00      	ldr	r3, [sp, #0]
    ee18:	f003 0301 	and.w	r3, r3, #1
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	d100      	bne.n	ee22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    ee22:	490a      	ldr	r1, [pc, #40]	; (ee4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	9a00      	ldr	r2, [sp, #0]
    ee28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    ee2c:	4a06      	ldr	r2, [pc, #24]	; (ee48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    ee2e:	9b01      	ldr	r3, [sp, #4]
    ee30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee34:	1c5a      	adds	r2, r3, #1
    ee36:	4904      	ldr	r1, [pc, #16]	; (ee48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    ee38:	9b01      	ldr	r3, [sp, #4]
    ee3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee3e:	bf00      	nop
    ee40:	b003      	add	sp, #12
    ee42:	f85d fb04 	ldr.w	pc, [sp], #4
    ee46:	bf00      	nop
    ee48:	1fff9058 	.word	0x1fff9058
    ee4c:	1fff9054 	.word	0x1fff9054

0000ee50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    ee50:	b500      	push	{lr}
    ee52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee54:	f7f2 fd0a 	bl	186c <Sys_GetCoreID>
    ee58:	4603      	mov	r3, r0
    ee5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    ee5c:	4a0d      	ldr	r2, [pc, #52]	; (ee94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    ee5e:	9b01      	ldr	r3, [sp, #4]
    ee60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee64:	1e5a      	subs	r2, r3, #1
    ee66:	490b      	ldr	r1, [pc, #44]	; (ee94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    ee68:	9b01      	ldr	r3, [sp, #4]
    ee6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    ee6e:	4a0a      	ldr	r2, [pc, #40]	; (ee98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    ee70:	9b01      	ldr	r3, [sp, #4]
    ee72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee76:	f003 0301 	and.w	r3, r3, #1
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d106      	bne.n	ee8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    ee7e:	4a05      	ldr	r2, [pc, #20]	; (ee94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee86:	2b00      	cmp	r3, #0
    ee88:	d100      	bne.n	ee8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee8c:	bf00      	nop
    ee8e:	b003      	add	sp, #12
    ee90:	f85d fb04 	ldr.w	pc, [sp], #4
    ee94:	1fff9058 	.word	0x1fff9058
    ee98:	1fff9054 	.word	0x1fff9054

0000ee9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    ee9c:	b500      	push	{lr}
    ee9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eea0:	f7f2 fce4 	bl	186c <Sys_GetCoreID>
    eea4:	4603      	mov	r3, r0
    eea6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    eea8:	4a10      	ldr	r2, [pc, #64]	; (eeec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    eeaa:	9b01      	ldr	r3, [sp, #4]
    eeac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d10d      	bne.n	eed0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eeb4:	f7f1 fef0 	bl	c98 <Adc_schm_read_msr>
    eeb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eeba:	9b00      	ldr	r3, [sp, #0]
    eebc:	f003 0301 	and.w	r3, r3, #1
    eec0:	2b00      	cmp	r3, #0
    eec2:	d100      	bne.n	eec6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eec4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    eec6:	490a      	ldr	r1, [pc, #40]	; (eef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    eec8:	9b01      	ldr	r3, [sp, #4]
    eeca:	9a00      	ldr	r2, [sp, #0]
    eecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    eed0:	4a06      	ldr	r2, [pc, #24]	; (eeec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    eed2:	9b01      	ldr	r3, [sp, #4]
    eed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed8:	1c5a      	adds	r2, r3, #1
    eeda:	4904      	ldr	r1, [pc, #16]	; (eeec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    eedc:	9b01      	ldr	r3, [sp, #4]
    eede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eee2:	bf00      	nop
    eee4:	b003      	add	sp, #12
    eee6:	f85d fb04 	ldr.w	pc, [sp], #4
    eeea:	bf00      	nop
    eeec:	1fff9060 	.word	0x1fff9060
    eef0:	1fff905c 	.word	0x1fff905c

0000eef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    eef4:	b500      	push	{lr}
    eef6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eef8:	f7f2 fcb8 	bl	186c <Sys_GetCoreID>
    eefc:	4603      	mov	r3, r0
    eefe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    ef00:	4a0d      	ldr	r2, [pc, #52]	; (ef38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    ef02:	9b01      	ldr	r3, [sp, #4]
    ef04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef08:	1e5a      	subs	r2, r3, #1
    ef0a:	490b      	ldr	r1, [pc, #44]	; (ef38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    ef0c:	9b01      	ldr	r3, [sp, #4]
    ef0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    ef12:	4a0a      	ldr	r2, [pc, #40]	; (ef3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    ef14:	9b01      	ldr	r3, [sp, #4]
    ef16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef1a:	f003 0301 	and.w	r3, r3, #1
    ef1e:	2b00      	cmp	r3, #0
    ef20:	d106      	bne.n	ef30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    ef22:	4a05      	ldr	r2, [pc, #20]	; (ef38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef2a:	2b00      	cmp	r3, #0
    ef2c:	d100      	bne.n	ef30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef30:	bf00      	nop
    ef32:	b003      	add	sp, #12
    ef34:	f85d fb04 	ldr.w	pc, [sp], #4
    ef38:	1fff9060 	.word	0x1fff9060
    ef3c:	1fff905c 	.word	0x1fff905c

0000ef40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    ef40:	b500      	push	{lr}
    ef42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef44:	f7f2 fc92 	bl	186c <Sys_GetCoreID>
    ef48:	4603      	mov	r3, r0
    ef4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    ef4c:	4a10      	ldr	r2, [pc, #64]	; (ef90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    ef4e:	9b01      	ldr	r3, [sp, #4]
    ef50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef54:	2b00      	cmp	r3, #0
    ef56:	d10d      	bne.n	ef74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef58:	f7f1 fe9e 	bl	c98 <Adc_schm_read_msr>
    ef5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef5e:	9b00      	ldr	r3, [sp, #0]
    ef60:	f003 0301 	and.w	r3, r3, #1
    ef64:	2b00      	cmp	r3, #0
    ef66:	d100      	bne.n	ef6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    ef6a:	490a      	ldr	r1, [pc, #40]	; (ef94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    ef6c:	9b01      	ldr	r3, [sp, #4]
    ef6e:	9a00      	ldr	r2, [sp, #0]
    ef70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    ef74:	4a06      	ldr	r2, [pc, #24]	; (ef90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    ef76:	9b01      	ldr	r3, [sp, #4]
    ef78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef7c:	1c5a      	adds	r2, r3, #1
    ef7e:	4904      	ldr	r1, [pc, #16]	; (ef90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    ef80:	9b01      	ldr	r3, [sp, #4]
    ef82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef86:	bf00      	nop
    ef88:	b003      	add	sp, #12
    ef8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ef8e:	bf00      	nop
    ef90:	1fff9068 	.word	0x1fff9068
    ef94:	1fff9064 	.word	0x1fff9064

0000ef98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    ef98:	b500      	push	{lr}
    ef9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef9c:	f7f2 fc66 	bl	186c <Sys_GetCoreID>
    efa0:	4603      	mov	r3, r0
    efa2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    efa4:	4a0d      	ldr	r2, [pc, #52]	; (efdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    efa6:	9b01      	ldr	r3, [sp, #4]
    efa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efac:	1e5a      	subs	r2, r3, #1
    efae:	490b      	ldr	r1, [pc, #44]	; (efdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    efb0:	9b01      	ldr	r3, [sp, #4]
    efb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    efb6:	4a0a      	ldr	r2, [pc, #40]	; (efe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    efb8:	9b01      	ldr	r3, [sp, #4]
    efba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efbe:	f003 0301 	and.w	r3, r3, #1
    efc2:	2b00      	cmp	r3, #0
    efc4:	d106      	bne.n	efd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    efc6:	4a05      	ldr	r2, [pc, #20]	; (efdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    efc8:	9b01      	ldr	r3, [sp, #4]
    efca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efce:	2b00      	cmp	r3, #0
    efd0:	d100      	bne.n	efd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    efd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    efd4:	bf00      	nop
    efd6:	b003      	add	sp, #12
    efd8:	f85d fb04 	ldr.w	pc, [sp], #4
    efdc:	1fff9068 	.word	0x1fff9068
    efe0:	1fff9064 	.word	0x1fff9064

0000efe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    efe4:	b500      	push	{lr}
    efe6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efe8:	f7f2 fc40 	bl	186c <Sys_GetCoreID>
    efec:	4603      	mov	r3, r0
    efee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    eff0:	4a10      	ldr	r2, [pc, #64]	; (f034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    eff2:	9b01      	ldr	r3, [sp, #4]
    eff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eff8:	2b00      	cmp	r3, #0
    effa:	d10d      	bne.n	f018 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    effc:	f7f1 fe4c 	bl	c98 <Adc_schm_read_msr>
    f000:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f002:	9b00      	ldr	r3, [sp, #0]
    f004:	f003 0301 	and.w	r3, r3, #1
    f008:	2b00      	cmp	r3, #0
    f00a:	d100      	bne.n	f00e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f00c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    f00e:	490a      	ldr	r1, [pc, #40]	; (f038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    f010:	9b01      	ldr	r3, [sp, #4]
    f012:	9a00      	ldr	r2, [sp, #0]
    f014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    f018:	4a06      	ldr	r2, [pc, #24]	; (f034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    f01a:	9b01      	ldr	r3, [sp, #4]
    f01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f020:	1c5a      	adds	r2, r3, #1
    f022:	4904      	ldr	r1, [pc, #16]	; (f034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    f024:	9b01      	ldr	r3, [sp, #4]
    f026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f02a:	bf00      	nop
    f02c:	b003      	add	sp, #12
    f02e:	f85d fb04 	ldr.w	pc, [sp], #4
    f032:	bf00      	nop
    f034:	1fff9070 	.word	0x1fff9070
    f038:	1fff906c 	.word	0x1fff906c

0000f03c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    f03c:	b500      	push	{lr}
    f03e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f040:	f7f2 fc14 	bl	186c <Sys_GetCoreID>
    f044:	4603      	mov	r3, r0
    f046:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    f048:	4a0d      	ldr	r2, [pc, #52]	; (f080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    f04a:	9b01      	ldr	r3, [sp, #4]
    f04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f050:	1e5a      	subs	r2, r3, #1
    f052:	490b      	ldr	r1, [pc, #44]	; (f080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    f054:	9b01      	ldr	r3, [sp, #4]
    f056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    f05a:	4a0a      	ldr	r2, [pc, #40]	; (f084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    f05c:	9b01      	ldr	r3, [sp, #4]
    f05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f062:	f003 0301 	and.w	r3, r3, #1
    f066:	2b00      	cmp	r3, #0
    f068:	d106      	bne.n	f078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    f06a:	4a05      	ldr	r2, [pc, #20]	; (f080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    f06c:	9b01      	ldr	r3, [sp, #4]
    f06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f072:	2b00      	cmp	r3, #0
    f074:	d100      	bne.n	f078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f076:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f078:	bf00      	nop
    f07a:	b003      	add	sp, #12
    f07c:	f85d fb04 	ldr.w	pc, [sp], #4
    f080:	1fff9070 	.word	0x1fff9070
    f084:	1fff906c 	.word	0x1fff906c

0000f088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    f088:	b500      	push	{lr}
    f08a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f08c:	f7f2 fbee 	bl	186c <Sys_GetCoreID>
    f090:	4603      	mov	r3, r0
    f092:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    f094:	4a10      	ldr	r2, [pc, #64]	; (f0d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    f096:	9b01      	ldr	r3, [sp, #4]
    f098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f09c:	2b00      	cmp	r3, #0
    f09e:	d10d      	bne.n	f0bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0a0:	f7f1 fdfa 	bl	c98 <Adc_schm_read_msr>
    f0a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0a6:	9b00      	ldr	r3, [sp, #0]
    f0a8:	f003 0301 	and.w	r3, r3, #1
    f0ac:	2b00      	cmp	r3, #0
    f0ae:	d100      	bne.n	f0b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    f0b2:	490a      	ldr	r1, [pc, #40]	; (f0dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    f0b4:	9b01      	ldr	r3, [sp, #4]
    f0b6:	9a00      	ldr	r2, [sp, #0]
    f0b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    f0bc:	4a06      	ldr	r2, [pc, #24]	; (f0d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    f0be:	9b01      	ldr	r3, [sp, #4]
    f0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c4:	1c5a      	adds	r2, r3, #1
    f0c6:	4904      	ldr	r1, [pc, #16]	; (f0d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    f0c8:	9b01      	ldr	r3, [sp, #4]
    f0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0ce:	bf00      	nop
    f0d0:	b003      	add	sp, #12
    f0d2:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d6:	bf00      	nop
    f0d8:	1fff9078 	.word	0x1fff9078
    f0dc:	1fff9074 	.word	0x1fff9074

0000f0e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    f0e0:	b500      	push	{lr}
    f0e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0e4:	f7f2 fbc2 	bl	186c <Sys_GetCoreID>
    f0e8:	4603      	mov	r3, r0
    f0ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    f0ec:	4a0d      	ldr	r2, [pc, #52]	; (f124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    f0ee:	9b01      	ldr	r3, [sp, #4]
    f0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f4:	1e5a      	subs	r2, r3, #1
    f0f6:	490b      	ldr	r1, [pc, #44]	; (f124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    f0f8:	9b01      	ldr	r3, [sp, #4]
    f0fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    f0fe:	4a0a      	ldr	r2, [pc, #40]	; (f128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    f100:	9b01      	ldr	r3, [sp, #4]
    f102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f106:	f003 0301 	and.w	r3, r3, #1
    f10a:	2b00      	cmp	r3, #0
    f10c:	d106      	bne.n	f11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    f10e:	4a05      	ldr	r2, [pc, #20]	; (f124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f116:	2b00      	cmp	r3, #0
    f118:	d100      	bne.n	f11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f11a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f11c:	bf00      	nop
    f11e:	b003      	add	sp, #12
    f120:	f85d fb04 	ldr.w	pc, [sp], #4
    f124:	1fff9078 	.word	0x1fff9078
    f128:	1fff9074 	.word	0x1fff9074

0000f12c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    f12c:	b500      	push	{lr}
    f12e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f130:	f7f2 fb9c 	bl	186c <Sys_GetCoreID>
    f134:	4603      	mov	r3, r0
    f136:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    f138:	4a10      	ldr	r2, [pc, #64]	; (f17c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    f13a:	9b01      	ldr	r3, [sp, #4]
    f13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f140:	2b00      	cmp	r3, #0
    f142:	d10d      	bne.n	f160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f144:	f7f1 fda8 	bl	c98 <Adc_schm_read_msr>
    f148:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f14a:	9b00      	ldr	r3, [sp, #0]
    f14c:	f003 0301 	and.w	r3, r3, #1
    f150:	2b00      	cmp	r3, #0
    f152:	d100      	bne.n	f156 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f154:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    f156:	490a      	ldr	r1, [pc, #40]	; (f180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    f158:	9b01      	ldr	r3, [sp, #4]
    f15a:	9a00      	ldr	r2, [sp, #0]
    f15c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    f160:	4a06      	ldr	r2, [pc, #24]	; (f17c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    f162:	9b01      	ldr	r3, [sp, #4]
    f164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f168:	1c5a      	adds	r2, r3, #1
    f16a:	4904      	ldr	r1, [pc, #16]	; (f17c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f172:	bf00      	nop
    f174:	b003      	add	sp, #12
    f176:	f85d fb04 	ldr.w	pc, [sp], #4
    f17a:	bf00      	nop
    f17c:	1fff9080 	.word	0x1fff9080
    f180:	1fff907c 	.word	0x1fff907c

0000f184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    f184:	b500      	push	{lr}
    f186:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f188:	f7f2 fb70 	bl	186c <Sys_GetCoreID>
    f18c:	4603      	mov	r3, r0
    f18e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    f190:	4a0d      	ldr	r2, [pc, #52]	; (f1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    f192:	9b01      	ldr	r3, [sp, #4]
    f194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f198:	1e5a      	subs	r2, r3, #1
    f19a:	490b      	ldr	r1, [pc, #44]	; (f1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    f19c:	9b01      	ldr	r3, [sp, #4]
    f19e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    f1a2:	4a0a      	ldr	r2, [pc, #40]	; (f1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    f1a4:	9b01      	ldr	r3, [sp, #4]
    f1a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1aa:	f003 0301 	and.w	r3, r3, #1
    f1ae:	2b00      	cmp	r3, #0
    f1b0:	d106      	bne.n	f1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    f1b2:	4a05      	ldr	r2, [pc, #20]	; (f1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ba:	2b00      	cmp	r3, #0
    f1bc:	d100      	bne.n	f1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1c0:	bf00      	nop
    f1c2:	b003      	add	sp, #12
    f1c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f1c8:	1fff9080 	.word	0x1fff9080
    f1cc:	1fff907c 	.word	0x1fff907c

0000f1d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    f1d0:	b500      	push	{lr}
    f1d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1d4:	f7f2 fb4a 	bl	186c <Sys_GetCoreID>
    f1d8:	4603      	mov	r3, r0
    f1da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    f1dc:	4a10      	ldr	r2, [pc, #64]	; (f220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    f1de:	9b01      	ldr	r3, [sp, #4]
    f1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d10d      	bne.n	f204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1e8:	f7f1 fd56 	bl	c98 <Adc_schm_read_msr>
    f1ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1ee:	9b00      	ldr	r3, [sp, #0]
    f1f0:	f003 0301 	and.w	r3, r3, #1
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	d100      	bne.n	f1fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    f1fa:	490a      	ldr	r1, [pc, #40]	; (f224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    f1fc:	9b01      	ldr	r3, [sp, #4]
    f1fe:	9a00      	ldr	r2, [sp, #0]
    f200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    f204:	4a06      	ldr	r2, [pc, #24]	; (f220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    f206:	9b01      	ldr	r3, [sp, #4]
    f208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f20c:	1c5a      	adds	r2, r3, #1
    f20e:	4904      	ldr	r1, [pc, #16]	; (f220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    f210:	9b01      	ldr	r3, [sp, #4]
    f212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f216:	bf00      	nop
    f218:	b003      	add	sp, #12
    f21a:	f85d fb04 	ldr.w	pc, [sp], #4
    f21e:	bf00      	nop
    f220:	1fff9088 	.word	0x1fff9088
    f224:	1fff9084 	.word	0x1fff9084

0000f228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    f228:	b500      	push	{lr}
    f22a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f22c:	f7f2 fb1e 	bl	186c <Sys_GetCoreID>
    f230:	4603      	mov	r3, r0
    f232:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    f234:	4a0d      	ldr	r2, [pc, #52]	; (f26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    f236:	9b01      	ldr	r3, [sp, #4]
    f238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f23c:	1e5a      	subs	r2, r3, #1
    f23e:	490b      	ldr	r1, [pc, #44]	; (f26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    f240:	9b01      	ldr	r3, [sp, #4]
    f242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    f246:	4a0a      	ldr	r2, [pc, #40]	; (f270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    f248:	9b01      	ldr	r3, [sp, #4]
    f24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f24e:	f003 0301 	and.w	r3, r3, #1
    f252:	2b00      	cmp	r3, #0
    f254:	d106      	bne.n	f264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    f256:	4a05      	ldr	r2, [pc, #20]	; (f26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    f258:	9b01      	ldr	r3, [sp, #4]
    f25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f25e:	2b00      	cmp	r3, #0
    f260:	d100      	bne.n	f264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f262:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f264:	bf00      	nop
    f266:	b003      	add	sp, #12
    f268:	f85d fb04 	ldr.w	pc, [sp], #4
    f26c:	1fff9088 	.word	0x1fff9088
    f270:	1fff9084 	.word	0x1fff9084

0000f274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    f274:	b500      	push	{lr}
    f276:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f278:	f7f2 faf8 	bl	186c <Sys_GetCoreID>
    f27c:	4603      	mov	r3, r0
    f27e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    f280:	4a10      	ldr	r2, [pc, #64]	; (f2c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    f282:	9b01      	ldr	r3, [sp, #4]
    f284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f288:	2b00      	cmp	r3, #0
    f28a:	d10d      	bne.n	f2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f28c:	f7f1 fd04 	bl	c98 <Adc_schm_read_msr>
    f290:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f292:	9b00      	ldr	r3, [sp, #0]
    f294:	f003 0301 	and.w	r3, r3, #1
    f298:	2b00      	cmp	r3, #0
    f29a:	d100      	bne.n	f29e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f29c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    f29e:	490a      	ldr	r1, [pc, #40]	; (f2c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	9a00      	ldr	r2, [sp, #0]
    f2a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    f2a8:	4a06      	ldr	r2, [pc, #24]	; (f2c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    f2aa:	9b01      	ldr	r3, [sp, #4]
    f2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2b0:	1c5a      	adds	r2, r3, #1
    f2b2:	4904      	ldr	r1, [pc, #16]	; (f2c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    f2b4:	9b01      	ldr	r3, [sp, #4]
    f2b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2ba:	bf00      	nop
    f2bc:	b003      	add	sp, #12
    f2be:	f85d fb04 	ldr.w	pc, [sp], #4
    f2c2:	bf00      	nop
    f2c4:	1fff9090 	.word	0x1fff9090
    f2c8:	1fff908c 	.word	0x1fff908c

0000f2cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    f2cc:	b500      	push	{lr}
    f2ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2d0:	f7f2 facc 	bl	186c <Sys_GetCoreID>
    f2d4:	4603      	mov	r3, r0
    f2d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    f2d8:	4a0d      	ldr	r2, [pc, #52]	; (f310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    f2da:	9b01      	ldr	r3, [sp, #4]
    f2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2e0:	1e5a      	subs	r2, r3, #1
    f2e2:	490b      	ldr	r1, [pc, #44]	; (f310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    f2e4:	9b01      	ldr	r3, [sp, #4]
    f2e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    f2ea:	4a0a      	ldr	r2, [pc, #40]	; (f314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    f2ec:	9b01      	ldr	r3, [sp, #4]
    f2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f2:	f003 0301 	and.w	r3, r3, #1
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d106      	bne.n	f308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    f2fa:	4a05      	ldr	r2, [pc, #20]	; (f310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    f2fc:	9b01      	ldr	r3, [sp, #4]
    f2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f302:	2b00      	cmp	r3, #0
    f304:	d100      	bne.n	f308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f306:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f308:	bf00      	nop
    f30a:	b003      	add	sp, #12
    f30c:	f85d fb04 	ldr.w	pc, [sp], #4
    f310:	1fff9090 	.word	0x1fff9090
    f314:	1fff908c 	.word	0x1fff908c

0000f318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    f318:	b500      	push	{lr}
    f31a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f31c:	f7f2 faa6 	bl	186c <Sys_GetCoreID>
    f320:	4603      	mov	r3, r0
    f322:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    f324:	4a10      	ldr	r2, [pc, #64]	; (f368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    f326:	9b01      	ldr	r3, [sp, #4]
    f328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f32c:	2b00      	cmp	r3, #0
    f32e:	d10d      	bne.n	f34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f330:	f7f1 fcb2 	bl	c98 <Adc_schm_read_msr>
    f334:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f336:	9b00      	ldr	r3, [sp, #0]
    f338:	f003 0301 	and.w	r3, r3, #1
    f33c:	2b00      	cmp	r3, #0
    f33e:	d100      	bne.n	f342 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f340:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    f342:	490a      	ldr	r1, [pc, #40]	; (f36c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    f344:	9b01      	ldr	r3, [sp, #4]
    f346:	9a00      	ldr	r2, [sp, #0]
    f348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    f34c:	4a06      	ldr	r2, [pc, #24]	; (f368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    f34e:	9b01      	ldr	r3, [sp, #4]
    f350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f354:	1c5a      	adds	r2, r3, #1
    f356:	4904      	ldr	r1, [pc, #16]	; (f368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    f358:	9b01      	ldr	r3, [sp, #4]
    f35a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f35e:	bf00      	nop
    f360:	b003      	add	sp, #12
    f362:	f85d fb04 	ldr.w	pc, [sp], #4
    f366:	bf00      	nop
    f368:	1fff9098 	.word	0x1fff9098
    f36c:	1fff9094 	.word	0x1fff9094

0000f370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    f370:	b500      	push	{lr}
    f372:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f374:	f7f2 fa7a 	bl	186c <Sys_GetCoreID>
    f378:	4603      	mov	r3, r0
    f37a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    f37c:	4a0d      	ldr	r2, [pc, #52]	; (f3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    f37e:	9b01      	ldr	r3, [sp, #4]
    f380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f384:	1e5a      	subs	r2, r3, #1
    f386:	490b      	ldr	r1, [pc, #44]	; (f3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    f388:	9b01      	ldr	r3, [sp, #4]
    f38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    f38e:	4a0a      	ldr	r2, [pc, #40]	; (f3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    f390:	9b01      	ldr	r3, [sp, #4]
    f392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f396:	f003 0301 	and.w	r3, r3, #1
    f39a:	2b00      	cmp	r3, #0
    f39c:	d106      	bne.n	f3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    f39e:	4a05      	ldr	r2, [pc, #20]	; (f3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    f3a0:	9b01      	ldr	r3, [sp, #4]
    f3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	d100      	bne.n	f3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3ac:	bf00      	nop
    f3ae:	b003      	add	sp, #12
    f3b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f3b4:	1fff9098 	.word	0x1fff9098
    f3b8:	1fff9094 	.word	0x1fff9094

0000f3bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    f3bc:	b500      	push	{lr}
    f3be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3c0:	f7f2 fa54 	bl	186c <Sys_GetCoreID>
    f3c4:	4603      	mov	r3, r0
    f3c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    f3c8:	4a10      	ldr	r2, [pc, #64]	; (f40c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    f3ca:	9b01      	ldr	r3, [sp, #4]
    f3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d10d      	bne.n	f3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3d4:	f7f1 fc60 	bl	c98 <Adc_schm_read_msr>
    f3d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3da:	9b00      	ldr	r3, [sp, #0]
    f3dc:	f003 0301 	and.w	r3, r3, #1
    f3e0:	2b00      	cmp	r3, #0
    f3e2:	d100      	bne.n	f3e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    f3e6:	490a      	ldr	r1, [pc, #40]	; (f410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    f3e8:	9b01      	ldr	r3, [sp, #4]
    f3ea:	9a00      	ldr	r2, [sp, #0]
    f3ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    f3f0:	4a06      	ldr	r2, [pc, #24]	; (f40c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    f3f2:	9b01      	ldr	r3, [sp, #4]
    f3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f8:	1c5a      	adds	r2, r3, #1
    f3fa:	4904      	ldr	r1, [pc, #16]	; (f40c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    f3fc:	9b01      	ldr	r3, [sp, #4]
    f3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f402:	bf00      	nop
    f404:	b003      	add	sp, #12
    f406:	f85d fb04 	ldr.w	pc, [sp], #4
    f40a:	bf00      	nop
    f40c:	1fff90a0 	.word	0x1fff90a0
    f410:	1fff909c 	.word	0x1fff909c

0000f414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    f414:	b500      	push	{lr}
    f416:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f418:	f7f2 fa28 	bl	186c <Sys_GetCoreID>
    f41c:	4603      	mov	r3, r0
    f41e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    f420:	4a0d      	ldr	r2, [pc, #52]	; (f458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    f422:	9b01      	ldr	r3, [sp, #4]
    f424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f428:	1e5a      	subs	r2, r3, #1
    f42a:	490b      	ldr	r1, [pc, #44]	; (f458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    f42c:	9b01      	ldr	r3, [sp, #4]
    f42e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    f432:	4a0a      	ldr	r2, [pc, #40]	; (f45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    f434:	9b01      	ldr	r3, [sp, #4]
    f436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f43a:	f003 0301 	and.w	r3, r3, #1
    f43e:	2b00      	cmp	r3, #0
    f440:	d106      	bne.n	f450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    f442:	4a05      	ldr	r2, [pc, #20]	; (f458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    f444:	9b01      	ldr	r3, [sp, #4]
    f446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f44a:	2b00      	cmp	r3, #0
    f44c:	d100      	bne.n	f450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f44e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f450:	bf00      	nop
    f452:	b003      	add	sp, #12
    f454:	f85d fb04 	ldr.w	pc, [sp], #4
    f458:	1fff90a0 	.word	0x1fff90a0
    f45c:	1fff909c 	.word	0x1fff909c

0000f460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    f460:	b500      	push	{lr}
    f462:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f464:	f7f2 fa02 	bl	186c <Sys_GetCoreID>
    f468:	4603      	mov	r3, r0
    f46a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    f46c:	4a10      	ldr	r2, [pc, #64]	; (f4b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    f46e:	9b01      	ldr	r3, [sp, #4]
    f470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f474:	2b00      	cmp	r3, #0
    f476:	d10d      	bne.n	f494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f478:	f7f1 fc0e 	bl	c98 <Adc_schm_read_msr>
    f47c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f47e:	9b00      	ldr	r3, [sp, #0]
    f480:	f003 0301 	and.w	r3, r3, #1
    f484:	2b00      	cmp	r3, #0
    f486:	d100      	bne.n	f48a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f488:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    f48a:	490a      	ldr	r1, [pc, #40]	; (f4b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    f48c:	9b01      	ldr	r3, [sp, #4]
    f48e:	9a00      	ldr	r2, [sp, #0]
    f490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    f494:	4a06      	ldr	r2, [pc, #24]	; (f4b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    f496:	9b01      	ldr	r3, [sp, #4]
    f498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f49c:	1c5a      	adds	r2, r3, #1
    f49e:	4904      	ldr	r1, [pc, #16]	; (f4b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    f4a0:	9b01      	ldr	r3, [sp, #4]
    f4a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4a6:	bf00      	nop
    f4a8:	b003      	add	sp, #12
    f4aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f4ae:	bf00      	nop
    f4b0:	1fff90a8 	.word	0x1fff90a8
    f4b4:	1fff90a4 	.word	0x1fff90a4

0000f4b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    f4b8:	b500      	push	{lr}
    f4ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4bc:	f7f2 f9d6 	bl	186c <Sys_GetCoreID>
    f4c0:	4603      	mov	r3, r0
    f4c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    f4c4:	4a0d      	ldr	r2, [pc, #52]	; (f4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    f4c6:	9b01      	ldr	r3, [sp, #4]
    f4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4cc:	1e5a      	subs	r2, r3, #1
    f4ce:	490b      	ldr	r1, [pc, #44]	; (f4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    f4d0:	9b01      	ldr	r3, [sp, #4]
    f4d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    f4d6:	4a0a      	ldr	r2, [pc, #40]	; (f500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    f4d8:	9b01      	ldr	r3, [sp, #4]
    f4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4de:	f003 0301 	and.w	r3, r3, #1
    f4e2:	2b00      	cmp	r3, #0
    f4e4:	d106      	bne.n	f4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    f4e6:	4a05      	ldr	r2, [pc, #20]	; (f4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	d100      	bne.n	f4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4f4:	bf00      	nop
    f4f6:	b003      	add	sp, #12
    f4f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f4fc:	1fff90a8 	.word	0x1fff90a8
    f500:	1fff90a4 	.word	0x1fff90a4

0000f504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    f504:	b500      	push	{lr}
    f506:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f508:	f7f2 f9b0 	bl	186c <Sys_GetCoreID>
    f50c:	4603      	mov	r3, r0
    f50e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    f510:	4a10      	ldr	r2, [pc, #64]	; (f554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    f512:	9b01      	ldr	r3, [sp, #4]
    f514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f518:	2b00      	cmp	r3, #0
    f51a:	d10d      	bne.n	f538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f51c:	f7f1 fbbc 	bl	c98 <Adc_schm_read_msr>
    f520:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f522:	9b00      	ldr	r3, [sp, #0]
    f524:	f003 0301 	and.w	r3, r3, #1
    f528:	2b00      	cmp	r3, #0
    f52a:	d100      	bne.n	f52e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f52c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    f52e:	490a      	ldr	r1, [pc, #40]	; (f558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    f530:	9b01      	ldr	r3, [sp, #4]
    f532:	9a00      	ldr	r2, [sp, #0]
    f534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    f538:	4a06      	ldr	r2, [pc, #24]	; (f554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    f53a:	9b01      	ldr	r3, [sp, #4]
    f53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f540:	1c5a      	adds	r2, r3, #1
    f542:	4904      	ldr	r1, [pc, #16]	; (f554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    f544:	9b01      	ldr	r3, [sp, #4]
    f546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f54a:	bf00      	nop
    f54c:	b003      	add	sp, #12
    f54e:	f85d fb04 	ldr.w	pc, [sp], #4
    f552:	bf00      	nop
    f554:	1fff90b0 	.word	0x1fff90b0
    f558:	1fff90ac 	.word	0x1fff90ac

0000f55c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    f55c:	b500      	push	{lr}
    f55e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f560:	f7f2 f984 	bl	186c <Sys_GetCoreID>
    f564:	4603      	mov	r3, r0
    f566:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    f568:	4a0d      	ldr	r2, [pc, #52]	; (f5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    f56a:	9b01      	ldr	r3, [sp, #4]
    f56c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f570:	1e5a      	subs	r2, r3, #1
    f572:	490b      	ldr	r1, [pc, #44]	; (f5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    f574:	9b01      	ldr	r3, [sp, #4]
    f576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    f57a:	4a0a      	ldr	r2, [pc, #40]	; (f5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    f57c:	9b01      	ldr	r3, [sp, #4]
    f57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f582:	f003 0301 	and.w	r3, r3, #1
    f586:	2b00      	cmp	r3, #0
    f588:	d106      	bne.n	f598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    f58a:	4a05      	ldr	r2, [pc, #20]	; (f5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    f58c:	9b01      	ldr	r3, [sp, #4]
    f58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f592:	2b00      	cmp	r3, #0
    f594:	d100      	bne.n	f598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f596:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f598:	bf00      	nop
    f59a:	b003      	add	sp, #12
    f59c:	f85d fb04 	ldr.w	pc, [sp], #4
    f5a0:	1fff90b0 	.word	0x1fff90b0
    f5a4:	1fff90ac 	.word	0x1fff90ac

0000f5a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    f5a8:	b500      	push	{lr}
    f5aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5ac:	f7f2 f95e 	bl	186c <Sys_GetCoreID>
    f5b0:	4603      	mov	r3, r0
    f5b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    f5b4:	4a10      	ldr	r2, [pc, #64]	; (f5f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    f5b6:	9b01      	ldr	r3, [sp, #4]
    f5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d10d      	bne.n	f5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5c0:	f7f1 fb6a 	bl	c98 <Adc_schm_read_msr>
    f5c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5c6:	9b00      	ldr	r3, [sp, #0]
    f5c8:	f003 0301 	and.w	r3, r3, #1
    f5cc:	2b00      	cmp	r3, #0
    f5ce:	d100      	bne.n	f5d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    f5d2:	490a      	ldr	r1, [pc, #40]	; (f5fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    f5d4:	9b01      	ldr	r3, [sp, #4]
    f5d6:	9a00      	ldr	r2, [sp, #0]
    f5d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    f5dc:	4a06      	ldr	r2, [pc, #24]	; (f5f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    f5de:	9b01      	ldr	r3, [sp, #4]
    f5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e4:	1c5a      	adds	r2, r3, #1
    f5e6:	4904      	ldr	r1, [pc, #16]	; (f5f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5ee:	bf00      	nop
    f5f0:	b003      	add	sp, #12
    f5f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f5f6:	bf00      	nop
    f5f8:	1fff90b8 	.word	0x1fff90b8
    f5fc:	1fff90b4 	.word	0x1fff90b4

0000f600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    f600:	b500      	push	{lr}
    f602:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f604:	f7f2 f932 	bl	186c <Sys_GetCoreID>
    f608:	4603      	mov	r3, r0
    f60a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    f60c:	4a0d      	ldr	r2, [pc, #52]	; (f644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    f60e:	9b01      	ldr	r3, [sp, #4]
    f610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f614:	1e5a      	subs	r2, r3, #1
    f616:	490b      	ldr	r1, [pc, #44]	; (f644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    f618:	9b01      	ldr	r3, [sp, #4]
    f61a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    f61e:	4a0a      	ldr	r2, [pc, #40]	; (f648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    f620:	9b01      	ldr	r3, [sp, #4]
    f622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f626:	f003 0301 	and.w	r3, r3, #1
    f62a:	2b00      	cmp	r3, #0
    f62c:	d106      	bne.n	f63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    f62e:	4a05      	ldr	r2, [pc, #20]	; (f644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    f630:	9b01      	ldr	r3, [sp, #4]
    f632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f636:	2b00      	cmp	r3, #0
    f638:	d100      	bne.n	f63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f63a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f63c:	bf00      	nop
    f63e:	b003      	add	sp, #12
    f640:	f85d fb04 	ldr.w	pc, [sp], #4
    f644:	1fff90b8 	.word	0x1fff90b8
    f648:	1fff90b4 	.word	0x1fff90b4

0000f64c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    f64c:	b500      	push	{lr}
    f64e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f650:	f7f2 f90c 	bl	186c <Sys_GetCoreID>
    f654:	4603      	mov	r3, r0
    f656:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    f658:	4a10      	ldr	r2, [pc, #64]	; (f69c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    f65a:	9b01      	ldr	r3, [sp, #4]
    f65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f660:	2b00      	cmp	r3, #0
    f662:	d10d      	bne.n	f680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f664:	f7f1 fb18 	bl	c98 <Adc_schm_read_msr>
    f668:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f66a:	9b00      	ldr	r3, [sp, #0]
    f66c:	f003 0301 	and.w	r3, r3, #1
    f670:	2b00      	cmp	r3, #0
    f672:	d100      	bne.n	f676 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f674:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    f676:	490a      	ldr	r1, [pc, #40]	; (f6a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	9a00      	ldr	r2, [sp, #0]
    f67c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    f680:	4a06      	ldr	r2, [pc, #24]	; (f69c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    f682:	9b01      	ldr	r3, [sp, #4]
    f684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f688:	1c5a      	adds	r2, r3, #1
    f68a:	4904      	ldr	r1, [pc, #16]	; (f69c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    f68c:	9b01      	ldr	r3, [sp, #4]
    f68e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f692:	bf00      	nop
    f694:	b003      	add	sp, #12
    f696:	f85d fb04 	ldr.w	pc, [sp], #4
    f69a:	bf00      	nop
    f69c:	1fff90c0 	.word	0x1fff90c0
    f6a0:	1fff90bc 	.word	0x1fff90bc

0000f6a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    f6a4:	b500      	push	{lr}
    f6a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6a8:	f7f2 f8e0 	bl	186c <Sys_GetCoreID>
    f6ac:	4603      	mov	r3, r0
    f6ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    f6b0:	4a0d      	ldr	r2, [pc, #52]	; (f6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    f6b2:	9b01      	ldr	r3, [sp, #4]
    f6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6b8:	1e5a      	subs	r2, r3, #1
    f6ba:	490b      	ldr	r1, [pc, #44]	; (f6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    f6bc:	9b01      	ldr	r3, [sp, #4]
    f6be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    f6c2:	4a0a      	ldr	r2, [pc, #40]	; (f6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    f6c4:	9b01      	ldr	r3, [sp, #4]
    f6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ca:	f003 0301 	and.w	r3, r3, #1
    f6ce:	2b00      	cmp	r3, #0
    f6d0:	d106      	bne.n	f6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    f6d2:	4a05      	ldr	r2, [pc, #20]	; (f6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    f6d4:	9b01      	ldr	r3, [sp, #4]
    f6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6da:	2b00      	cmp	r3, #0
    f6dc:	d100      	bne.n	f6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f6de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f6e0:	bf00      	nop
    f6e2:	b003      	add	sp, #12
    f6e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f6e8:	1fff90c0 	.word	0x1fff90c0
    f6ec:	1fff90bc 	.word	0x1fff90bc

0000f6f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    f6f0:	b500      	push	{lr}
    f6f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6f4:	f7f2 f8ba 	bl	186c <Sys_GetCoreID>
    f6f8:	4603      	mov	r3, r0
    f6fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    f6fc:	4a10      	ldr	r2, [pc, #64]	; (f740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    f6fe:	9b01      	ldr	r3, [sp, #4]
    f700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f704:	2b00      	cmp	r3, #0
    f706:	d10d      	bne.n	f724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f708:	f7f1 fac6 	bl	c98 <Adc_schm_read_msr>
    f70c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f70e:	9b00      	ldr	r3, [sp, #0]
    f710:	f003 0301 	and.w	r3, r3, #1
    f714:	2b00      	cmp	r3, #0
    f716:	d100      	bne.n	f71a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f718:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    f71a:	490a      	ldr	r1, [pc, #40]	; (f744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    f71c:	9b01      	ldr	r3, [sp, #4]
    f71e:	9a00      	ldr	r2, [sp, #0]
    f720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    f724:	4a06      	ldr	r2, [pc, #24]	; (f740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    f726:	9b01      	ldr	r3, [sp, #4]
    f728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f72c:	1c5a      	adds	r2, r3, #1
    f72e:	4904      	ldr	r1, [pc, #16]	; (f740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    f730:	9b01      	ldr	r3, [sp, #4]
    f732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f736:	bf00      	nop
    f738:	b003      	add	sp, #12
    f73a:	f85d fb04 	ldr.w	pc, [sp], #4
    f73e:	bf00      	nop
    f740:	1fff90c8 	.word	0x1fff90c8
    f744:	1fff90c4 	.word	0x1fff90c4

0000f748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    f748:	b500      	push	{lr}
    f74a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f74c:	f7f2 f88e 	bl	186c <Sys_GetCoreID>
    f750:	4603      	mov	r3, r0
    f752:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    f754:	4a0d      	ldr	r2, [pc, #52]	; (f78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    f756:	9b01      	ldr	r3, [sp, #4]
    f758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f75c:	1e5a      	subs	r2, r3, #1
    f75e:	490b      	ldr	r1, [pc, #44]	; (f78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    f760:	9b01      	ldr	r3, [sp, #4]
    f762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    f766:	4a0a      	ldr	r2, [pc, #40]	; (f790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    f768:	9b01      	ldr	r3, [sp, #4]
    f76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f76e:	f003 0301 	and.w	r3, r3, #1
    f772:	2b00      	cmp	r3, #0
    f774:	d106      	bne.n	f784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    f776:	4a05      	ldr	r2, [pc, #20]	; (f78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    f778:	9b01      	ldr	r3, [sp, #4]
    f77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f77e:	2b00      	cmp	r3, #0
    f780:	d100      	bne.n	f784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f782:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f784:	bf00      	nop
    f786:	b003      	add	sp, #12
    f788:	f85d fb04 	ldr.w	pc, [sp], #4
    f78c:	1fff90c8 	.word	0x1fff90c8
    f790:	1fff90c4 	.word	0x1fff90c4

0000f794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    f794:	b500      	push	{lr}
    f796:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f798:	f7f2 f868 	bl	186c <Sys_GetCoreID>
    f79c:	4603      	mov	r3, r0
    f79e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    f7a0:	4a10      	ldr	r2, [pc, #64]	; (f7e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    f7a2:	9b01      	ldr	r3, [sp, #4]
    f7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7a8:	2b00      	cmp	r3, #0
    f7aa:	d10d      	bne.n	f7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7ac:	f7f1 fa74 	bl	c98 <Adc_schm_read_msr>
    f7b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7b2:	9b00      	ldr	r3, [sp, #0]
    f7b4:	f003 0301 	and.w	r3, r3, #1
    f7b8:	2b00      	cmp	r3, #0
    f7ba:	d100      	bne.n	f7be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    f7be:	490a      	ldr	r1, [pc, #40]	; (f7e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    f7c0:	9b01      	ldr	r3, [sp, #4]
    f7c2:	9a00      	ldr	r2, [sp, #0]
    f7c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    f7c8:	4a06      	ldr	r2, [pc, #24]	; (f7e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    f7ca:	9b01      	ldr	r3, [sp, #4]
    f7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7d0:	1c5a      	adds	r2, r3, #1
    f7d2:	4904      	ldr	r1, [pc, #16]	; (f7e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    f7d4:	9b01      	ldr	r3, [sp, #4]
    f7d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7da:	bf00      	nop
    f7dc:	b003      	add	sp, #12
    f7de:	f85d fb04 	ldr.w	pc, [sp], #4
    f7e2:	bf00      	nop
    f7e4:	1fff90d0 	.word	0x1fff90d0
    f7e8:	1fff90cc 	.word	0x1fff90cc

0000f7ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    f7ec:	b500      	push	{lr}
    f7ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7f0:	f7f2 f83c 	bl	186c <Sys_GetCoreID>
    f7f4:	4603      	mov	r3, r0
    f7f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    f7f8:	4a0d      	ldr	r2, [pc, #52]	; (f830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    f7fa:	9b01      	ldr	r3, [sp, #4]
    f7fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f800:	1e5a      	subs	r2, r3, #1
    f802:	490b      	ldr	r1, [pc, #44]	; (f830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    f804:	9b01      	ldr	r3, [sp, #4]
    f806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    f80a:	4a0a      	ldr	r2, [pc, #40]	; (f834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    f80c:	9b01      	ldr	r3, [sp, #4]
    f80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f812:	f003 0301 	and.w	r3, r3, #1
    f816:	2b00      	cmp	r3, #0
    f818:	d106      	bne.n	f828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    f81a:	4a05      	ldr	r2, [pc, #20]	; (f830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    f81c:	9b01      	ldr	r3, [sp, #4]
    f81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f822:	2b00      	cmp	r3, #0
    f824:	d100      	bne.n	f828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f826:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f828:	bf00      	nop
    f82a:	b003      	add	sp, #12
    f82c:	f85d fb04 	ldr.w	pc, [sp], #4
    f830:	1fff90d0 	.word	0x1fff90d0
    f834:	1fff90cc 	.word	0x1fff90cc

0000f838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    f838:	b500      	push	{lr}
    f83a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f83c:	f7f2 f816 	bl	186c <Sys_GetCoreID>
    f840:	4603      	mov	r3, r0
    f842:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    f844:	4a10      	ldr	r2, [pc, #64]	; (f888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    f846:	9b01      	ldr	r3, [sp, #4]
    f848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f84c:	2b00      	cmp	r3, #0
    f84e:	d10d      	bne.n	f86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f850:	f7f1 fa22 	bl	c98 <Adc_schm_read_msr>
    f854:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f856:	9b00      	ldr	r3, [sp, #0]
    f858:	f003 0301 	and.w	r3, r3, #1
    f85c:	2b00      	cmp	r3, #0
    f85e:	d100      	bne.n	f862 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f860:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    f862:	490a      	ldr	r1, [pc, #40]	; (f88c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    f864:	9b01      	ldr	r3, [sp, #4]
    f866:	9a00      	ldr	r2, [sp, #0]
    f868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    f86c:	4a06      	ldr	r2, [pc, #24]	; (f888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    f86e:	9b01      	ldr	r3, [sp, #4]
    f870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f874:	1c5a      	adds	r2, r3, #1
    f876:	4904      	ldr	r1, [pc, #16]	; (f888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    f878:	9b01      	ldr	r3, [sp, #4]
    f87a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f87e:	bf00      	nop
    f880:	b003      	add	sp, #12
    f882:	f85d fb04 	ldr.w	pc, [sp], #4
    f886:	bf00      	nop
    f888:	1fff90d8 	.word	0x1fff90d8
    f88c:	1fff90d4 	.word	0x1fff90d4

0000f890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    f890:	b500      	push	{lr}
    f892:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f894:	f7f1 ffea 	bl	186c <Sys_GetCoreID>
    f898:	4603      	mov	r3, r0
    f89a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    f89c:	4a0d      	ldr	r2, [pc, #52]	; (f8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    f89e:	9b01      	ldr	r3, [sp, #4]
    f8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8a4:	1e5a      	subs	r2, r3, #1
    f8a6:	490b      	ldr	r1, [pc, #44]	; (f8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    f8a8:	9b01      	ldr	r3, [sp, #4]
    f8aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    f8ae:	4a0a      	ldr	r2, [pc, #40]	; (f8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    f8b0:	9b01      	ldr	r3, [sp, #4]
    f8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8b6:	f003 0301 	and.w	r3, r3, #1
    f8ba:	2b00      	cmp	r3, #0
    f8bc:	d106      	bne.n	f8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    f8be:	4a05      	ldr	r2, [pc, #20]	; (f8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    f8c0:	9b01      	ldr	r3, [sp, #4]
    f8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8c6:	2b00      	cmp	r3, #0
    f8c8:	d100      	bne.n	f8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8cc:	bf00      	nop
    f8ce:	b003      	add	sp, #12
    f8d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f8d4:	1fff90d8 	.word	0x1fff90d8
    f8d8:	1fff90d4 	.word	0x1fff90d4

0000f8dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    f8dc:	b500      	push	{lr}
    f8de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8e0:	f7f1 ffc4 	bl	186c <Sys_GetCoreID>
    f8e4:	4603      	mov	r3, r0
    f8e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    f8e8:	4a10      	ldr	r2, [pc, #64]	; (f92c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    f8ea:	9b01      	ldr	r3, [sp, #4]
    f8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8f0:	2b00      	cmp	r3, #0
    f8f2:	d10d      	bne.n	f910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8f4:	f7f1 f9d0 	bl	c98 <Adc_schm_read_msr>
    f8f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8fa:	9b00      	ldr	r3, [sp, #0]
    f8fc:	f003 0301 	and.w	r3, r3, #1
    f900:	2b00      	cmp	r3, #0
    f902:	d100      	bne.n	f906 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f904:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    f906:	490a      	ldr	r1, [pc, #40]	; (f930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    f908:	9b01      	ldr	r3, [sp, #4]
    f90a:	9a00      	ldr	r2, [sp, #0]
    f90c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    f910:	4a06      	ldr	r2, [pc, #24]	; (f92c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    f912:	9b01      	ldr	r3, [sp, #4]
    f914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f918:	1c5a      	adds	r2, r3, #1
    f91a:	4904      	ldr	r1, [pc, #16]	; (f92c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    f91c:	9b01      	ldr	r3, [sp, #4]
    f91e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f922:	bf00      	nop
    f924:	b003      	add	sp, #12
    f926:	f85d fb04 	ldr.w	pc, [sp], #4
    f92a:	bf00      	nop
    f92c:	1fff90e0 	.word	0x1fff90e0
    f930:	1fff90dc 	.word	0x1fff90dc

0000f934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    f934:	b500      	push	{lr}
    f936:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f938:	f7f1 ff98 	bl	186c <Sys_GetCoreID>
    f93c:	4603      	mov	r3, r0
    f93e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    f940:	4a0d      	ldr	r2, [pc, #52]	; (f978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    f942:	9b01      	ldr	r3, [sp, #4]
    f944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f948:	1e5a      	subs	r2, r3, #1
    f94a:	490b      	ldr	r1, [pc, #44]	; (f978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    f94c:	9b01      	ldr	r3, [sp, #4]
    f94e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    f952:	4a0a      	ldr	r2, [pc, #40]	; (f97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    f954:	9b01      	ldr	r3, [sp, #4]
    f956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f95a:	f003 0301 	and.w	r3, r3, #1
    f95e:	2b00      	cmp	r3, #0
    f960:	d106      	bne.n	f970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    f962:	4a05      	ldr	r2, [pc, #20]	; (f978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    f964:	9b01      	ldr	r3, [sp, #4]
    f966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f96a:	2b00      	cmp	r3, #0
    f96c:	d100      	bne.n	f970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f96e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f970:	bf00      	nop
    f972:	b003      	add	sp, #12
    f974:	f85d fb04 	ldr.w	pc, [sp], #4
    f978:	1fff90e0 	.word	0x1fff90e0
    f97c:	1fff90dc 	.word	0x1fff90dc

0000f980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    f980:	b500      	push	{lr}
    f982:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f984:	f7f1 ff72 	bl	186c <Sys_GetCoreID>
    f988:	4603      	mov	r3, r0
    f98a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    f98c:	4a10      	ldr	r2, [pc, #64]	; (f9d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    f98e:	9b01      	ldr	r3, [sp, #4]
    f990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f994:	2b00      	cmp	r3, #0
    f996:	d10d      	bne.n	f9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f998:	f7f1 f97e 	bl	c98 <Adc_schm_read_msr>
    f99c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f99e:	9b00      	ldr	r3, [sp, #0]
    f9a0:	f003 0301 	and.w	r3, r3, #1
    f9a4:	2b00      	cmp	r3, #0
    f9a6:	d100      	bne.n	f9aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    f9aa:	490a      	ldr	r1, [pc, #40]	; (f9d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    f9ac:	9b01      	ldr	r3, [sp, #4]
    f9ae:	9a00      	ldr	r2, [sp, #0]
    f9b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    f9b4:	4a06      	ldr	r2, [pc, #24]	; (f9d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    f9b6:	9b01      	ldr	r3, [sp, #4]
    f9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9bc:	1c5a      	adds	r2, r3, #1
    f9be:	4904      	ldr	r1, [pc, #16]	; (f9d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    f9c0:	9b01      	ldr	r3, [sp, #4]
    f9c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9c6:	bf00      	nop
    f9c8:	b003      	add	sp, #12
    f9ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f9ce:	bf00      	nop
    f9d0:	1fff90e8 	.word	0x1fff90e8
    f9d4:	1fff90e4 	.word	0x1fff90e4

0000f9d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    f9d8:	b500      	push	{lr}
    f9da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9dc:	f7f1 ff46 	bl	186c <Sys_GetCoreID>
    f9e0:	4603      	mov	r3, r0
    f9e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    f9e4:	4a0d      	ldr	r2, [pc, #52]	; (fa1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    f9e6:	9b01      	ldr	r3, [sp, #4]
    f9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ec:	1e5a      	subs	r2, r3, #1
    f9ee:	490b      	ldr	r1, [pc, #44]	; (fa1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    f9f0:	9b01      	ldr	r3, [sp, #4]
    f9f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    f9f6:	4a0a      	ldr	r2, [pc, #40]	; (fa20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    f9f8:	9b01      	ldr	r3, [sp, #4]
    f9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9fe:	f003 0301 	and.w	r3, r3, #1
    fa02:	2b00      	cmp	r3, #0
    fa04:	d106      	bne.n	fa14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    fa06:	4a05      	ldr	r2, [pc, #20]	; (fa1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    fa08:	9b01      	ldr	r3, [sp, #4]
    fa0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa0e:	2b00      	cmp	r3, #0
    fa10:	d100      	bne.n	fa14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa14:	bf00      	nop
    fa16:	b003      	add	sp, #12
    fa18:	f85d fb04 	ldr.w	pc, [sp], #4
    fa1c:	1fff90e8 	.word	0x1fff90e8
    fa20:	1fff90e4 	.word	0x1fff90e4

0000fa24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    fa24:	b500      	push	{lr}
    fa26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa28:	f7f1 ff20 	bl	186c <Sys_GetCoreID>
    fa2c:	4603      	mov	r3, r0
    fa2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    fa30:	4a10      	ldr	r2, [pc, #64]	; (fa74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    fa32:	9b01      	ldr	r3, [sp, #4]
    fa34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa38:	2b00      	cmp	r3, #0
    fa3a:	d10d      	bne.n	fa58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa3c:	f7f1 f92c 	bl	c98 <Adc_schm_read_msr>
    fa40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa42:	9b00      	ldr	r3, [sp, #0]
    fa44:	f003 0301 	and.w	r3, r3, #1
    fa48:	2b00      	cmp	r3, #0
    fa4a:	d100      	bne.n	fa4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    fa4e:	490a      	ldr	r1, [pc, #40]	; (fa78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    fa50:	9b01      	ldr	r3, [sp, #4]
    fa52:	9a00      	ldr	r2, [sp, #0]
    fa54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    fa58:	4a06      	ldr	r2, [pc, #24]	; (fa74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    fa5a:	9b01      	ldr	r3, [sp, #4]
    fa5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa60:	1c5a      	adds	r2, r3, #1
    fa62:	4904      	ldr	r1, [pc, #16]	; (fa74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    fa64:	9b01      	ldr	r3, [sp, #4]
    fa66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa6a:	bf00      	nop
    fa6c:	b003      	add	sp, #12
    fa6e:	f85d fb04 	ldr.w	pc, [sp], #4
    fa72:	bf00      	nop
    fa74:	1fff90f0 	.word	0x1fff90f0
    fa78:	1fff90ec 	.word	0x1fff90ec

0000fa7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    fa7c:	b500      	push	{lr}
    fa7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa80:	f7f1 fef4 	bl	186c <Sys_GetCoreID>
    fa84:	4603      	mov	r3, r0
    fa86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    fa88:	4a0d      	ldr	r2, [pc, #52]	; (fac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    fa8a:	9b01      	ldr	r3, [sp, #4]
    fa8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa90:	1e5a      	subs	r2, r3, #1
    fa92:	490b      	ldr	r1, [pc, #44]	; (fac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    fa94:	9b01      	ldr	r3, [sp, #4]
    fa96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    fa9a:	4a0a      	ldr	r2, [pc, #40]	; (fac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    fa9c:	9b01      	ldr	r3, [sp, #4]
    fa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faa2:	f003 0301 	and.w	r3, r3, #1
    faa6:	2b00      	cmp	r3, #0
    faa8:	d106      	bne.n	fab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    faaa:	4a05      	ldr	r2, [pc, #20]	; (fac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    faac:	9b01      	ldr	r3, [sp, #4]
    faae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab2:	2b00      	cmp	r3, #0
    fab4:	d100      	bne.n	fab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fab6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fab8:	bf00      	nop
    faba:	b003      	add	sp, #12
    fabc:	f85d fb04 	ldr.w	pc, [sp], #4
    fac0:	1fff90f0 	.word	0x1fff90f0
    fac4:	1fff90ec 	.word	0x1fff90ec

0000fac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    fac8:	b500      	push	{lr}
    faca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    facc:	f7f1 fece 	bl	186c <Sys_GetCoreID>
    fad0:	4603      	mov	r3, r0
    fad2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    fad4:	4a10      	ldr	r2, [pc, #64]	; (fb18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    fad6:	9b01      	ldr	r3, [sp, #4]
    fad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fadc:	2b00      	cmp	r3, #0
    fade:	d10d      	bne.n	fafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fae0:	f7f1 f8da 	bl	c98 <Adc_schm_read_msr>
    fae4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fae6:	9b00      	ldr	r3, [sp, #0]
    fae8:	f003 0301 	and.w	r3, r3, #1
    faec:	2b00      	cmp	r3, #0
    faee:	d100      	bne.n	faf2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    faf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    faf2:	490a      	ldr	r1, [pc, #40]	; (fb1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    faf4:	9b01      	ldr	r3, [sp, #4]
    faf6:	9a00      	ldr	r2, [sp, #0]
    faf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    fafc:	4a06      	ldr	r2, [pc, #24]	; (fb18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    fafe:	9b01      	ldr	r3, [sp, #4]
    fb00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb04:	1c5a      	adds	r2, r3, #1
    fb06:	4904      	ldr	r1, [pc, #16]	; (fb18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    fb08:	9b01      	ldr	r3, [sp, #4]
    fb0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb0e:	bf00      	nop
    fb10:	b003      	add	sp, #12
    fb12:	f85d fb04 	ldr.w	pc, [sp], #4
    fb16:	bf00      	nop
    fb18:	1fff90f8 	.word	0x1fff90f8
    fb1c:	1fff90f4 	.word	0x1fff90f4

0000fb20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    fb20:	b500      	push	{lr}
    fb22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb24:	f7f1 fea2 	bl	186c <Sys_GetCoreID>
    fb28:	4603      	mov	r3, r0
    fb2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    fb2c:	4a0d      	ldr	r2, [pc, #52]	; (fb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    fb2e:	9b01      	ldr	r3, [sp, #4]
    fb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb34:	1e5a      	subs	r2, r3, #1
    fb36:	490b      	ldr	r1, [pc, #44]	; (fb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    fb38:	9b01      	ldr	r3, [sp, #4]
    fb3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    fb3e:	4a0a      	ldr	r2, [pc, #40]	; (fb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    fb40:	9b01      	ldr	r3, [sp, #4]
    fb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb46:	f003 0301 	and.w	r3, r3, #1
    fb4a:	2b00      	cmp	r3, #0
    fb4c:	d106      	bne.n	fb5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    fb4e:	4a05      	ldr	r2, [pc, #20]	; (fb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    fb50:	9b01      	ldr	r3, [sp, #4]
    fb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb56:	2b00      	cmp	r3, #0
    fb58:	d100      	bne.n	fb5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb5c:	bf00      	nop
    fb5e:	b003      	add	sp, #12
    fb60:	f85d fb04 	ldr.w	pc, [sp], #4
    fb64:	1fff90f8 	.word	0x1fff90f8
    fb68:	1fff90f4 	.word	0x1fff90f4

0000fb6c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    fb6c:	b500      	push	{lr}
    fb6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb70:	f7f1 fe7c 	bl	186c <Sys_GetCoreID>
    fb74:	4603      	mov	r3, r0
    fb76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    fb78:	4a10      	ldr	r2, [pc, #64]	; (fbbc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    fb7a:	9b01      	ldr	r3, [sp, #4]
    fb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb80:	2b00      	cmp	r3, #0
    fb82:	d10d      	bne.n	fba0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb84:	f7f1 f891 	bl	caa <Dio_schm_read_msr>
    fb88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb8a:	9b00      	ldr	r3, [sp, #0]
    fb8c:	f003 0301 	and.w	r3, r3, #1
    fb90:	2b00      	cmp	r3, #0
    fb92:	d100      	bne.n	fb96 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    fb96:	490a      	ldr	r1, [pc, #40]	; (fbc0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    fb98:	9b01      	ldr	r3, [sp, #4]
    fb9a:	9a00      	ldr	r2, [sp, #0]
    fb9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    fba0:	4a06      	ldr	r2, [pc, #24]	; (fbbc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    fba2:	9b01      	ldr	r3, [sp, #4]
    fba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fba8:	1c5a      	adds	r2, r3, #1
    fbaa:	4904      	ldr	r1, [pc, #16]	; (fbbc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    fbac:	9b01      	ldr	r3, [sp, #4]
    fbae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fbb2:	bf00      	nop
    fbb4:	b003      	add	sp, #12
    fbb6:	f85d fb04 	ldr.w	pc, [sp], #4
    fbba:	bf00      	nop
    fbbc:	1fff9100 	.word	0x1fff9100
    fbc0:	1fff90fc 	.word	0x1fff90fc

0000fbc4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    fbc4:	b500      	push	{lr}
    fbc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbc8:	f7f1 fe50 	bl	186c <Sys_GetCoreID>
    fbcc:	4603      	mov	r3, r0
    fbce:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    fbd0:	4a0d      	ldr	r2, [pc, #52]	; (fc08 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    fbd2:	9b01      	ldr	r3, [sp, #4]
    fbd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbd8:	1e5a      	subs	r2, r3, #1
    fbda:	490b      	ldr	r1, [pc, #44]	; (fc08 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    fbdc:	9b01      	ldr	r3, [sp, #4]
    fbde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fbe2:	4a0a      	ldr	r2, [pc, #40]	; (fc0c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    fbe4:	9b01      	ldr	r3, [sp, #4]
    fbe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbea:	f003 0301 	and.w	r3, r3, #1
    fbee:	2b00      	cmp	r3, #0
    fbf0:	d106      	bne.n	fc00 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    fbf2:	4a05      	ldr	r2, [pc, #20]	; (fc08 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    fbf4:	9b01      	ldr	r3, [sp, #4]
    fbf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	d100      	bne.n	fc00 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc00:	bf00      	nop
    fc02:	b003      	add	sp, #12
    fc04:	f85d fb04 	ldr.w	pc, [sp], #4
    fc08:	1fff9100 	.word	0x1fff9100
    fc0c:	1fff90fc 	.word	0x1fff90fc

0000fc10 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    fc10:	b500      	push	{lr}
    fc12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc14:	f7f1 fe2a 	bl	186c <Sys_GetCoreID>
    fc18:	4603      	mov	r3, r0
    fc1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    fc1c:	4a10      	ldr	r2, [pc, #64]	; (fc60 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    fc1e:	9b01      	ldr	r3, [sp, #4]
    fc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc24:	2b00      	cmp	r3, #0
    fc26:	d10d      	bne.n	fc44 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc28:	f7f1 f83f 	bl	caa <Dio_schm_read_msr>
    fc2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc2e:	9b00      	ldr	r3, [sp, #0]
    fc30:	f003 0301 	and.w	r3, r3, #1
    fc34:	2b00      	cmp	r3, #0
    fc36:	d100      	bne.n	fc3a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    fc3a:	490a      	ldr	r1, [pc, #40]	; (fc64 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    fc3c:	9b01      	ldr	r3, [sp, #4]
    fc3e:	9a00      	ldr	r2, [sp, #0]
    fc40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    fc44:	4a06      	ldr	r2, [pc, #24]	; (fc60 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    fc46:	9b01      	ldr	r3, [sp, #4]
    fc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc4c:	1c5a      	adds	r2, r3, #1
    fc4e:	4904      	ldr	r1, [pc, #16]	; (fc60 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    fc50:	9b01      	ldr	r3, [sp, #4]
    fc52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc56:	bf00      	nop
    fc58:	b003      	add	sp, #12
    fc5a:	f85d fb04 	ldr.w	pc, [sp], #4
    fc5e:	bf00      	nop
    fc60:	1fff9108 	.word	0x1fff9108
    fc64:	1fff9104 	.word	0x1fff9104

0000fc68 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    fc68:	b500      	push	{lr}
    fc6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc6c:	f7f1 fdfe 	bl	186c <Sys_GetCoreID>
    fc70:	4603      	mov	r3, r0
    fc72:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    fc74:	4a0d      	ldr	r2, [pc, #52]	; (fcac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    fc76:	9b01      	ldr	r3, [sp, #4]
    fc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc7c:	1e5a      	subs	r2, r3, #1
    fc7e:	490b      	ldr	r1, [pc, #44]	; (fcac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    fc80:	9b01      	ldr	r3, [sp, #4]
    fc82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    fc86:	4a0a      	ldr	r2, [pc, #40]	; (fcb0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    fc88:	9b01      	ldr	r3, [sp, #4]
    fc8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc8e:	f003 0301 	and.w	r3, r3, #1
    fc92:	2b00      	cmp	r3, #0
    fc94:	d106      	bne.n	fca4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    fc96:	4a05      	ldr	r2, [pc, #20]	; (fcac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    fc98:	9b01      	ldr	r3, [sp, #4]
    fc9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc9e:	2b00      	cmp	r3, #0
    fca0:	d100      	bne.n	fca4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fca2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fca4:	bf00      	nop
    fca6:	b003      	add	sp, #12
    fca8:	f85d fb04 	ldr.w	pc, [sp], #4
    fcac:	1fff9108 	.word	0x1fff9108
    fcb0:	1fff9104 	.word	0x1fff9104

0000fcb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    fcb4:	b500      	push	{lr}
    fcb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcb8:	f7f1 fdd8 	bl	186c <Sys_GetCoreID>
    fcbc:	4603      	mov	r3, r0
    fcbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    fcc0:	4a10      	ldr	r2, [pc, #64]	; (fd04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    fcc2:	9b01      	ldr	r3, [sp, #4]
    fcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d10d      	bne.n	fce8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fccc:	f7f0 fff6 	bl	cbc <Mcu_schm_read_msr>
    fcd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fcd2:	9b00      	ldr	r3, [sp, #0]
    fcd4:	f003 0301 	and.w	r3, r3, #1
    fcd8:	2b00      	cmp	r3, #0
    fcda:	d100      	bne.n	fcde <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fcdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    fcde:	490a      	ldr	r1, [pc, #40]	; (fd08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    fce0:	9b01      	ldr	r3, [sp, #4]
    fce2:	9a00      	ldr	r2, [sp, #0]
    fce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    fce8:	4a06      	ldr	r2, [pc, #24]	; (fd04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    fcea:	9b01      	ldr	r3, [sp, #4]
    fcec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcf0:	1c5a      	adds	r2, r3, #1
    fcf2:	4904      	ldr	r1, [pc, #16]	; (fd04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    fcf4:	9b01      	ldr	r3, [sp, #4]
    fcf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fcfa:	bf00      	nop
    fcfc:	b003      	add	sp, #12
    fcfe:	f85d fb04 	ldr.w	pc, [sp], #4
    fd02:	bf00      	nop
    fd04:	1fff9110 	.word	0x1fff9110
    fd08:	1fff910c 	.word	0x1fff910c

0000fd0c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    fd0c:	b500      	push	{lr}
    fd0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd10:	f7f1 fdac 	bl	186c <Sys_GetCoreID>
    fd14:	4603      	mov	r3, r0
    fd16:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    fd18:	4a0d      	ldr	r2, [pc, #52]	; (fd50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    fd1a:	9b01      	ldr	r3, [sp, #4]
    fd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd20:	1e5a      	subs	r2, r3, #1
    fd22:	490b      	ldr	r1, [pc, #44]	; (fd50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    fd24:	9b01      	ldr	r3, [sp, #4]
    fd26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fd2a:	4a0a      	ldr	r2, [pc, #40]	; (fd54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    fd2c:	9b01      	ldr	r3, [sp, #4]
    fd2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd32:	f003 0301 	and.w	r3, r3, #1
    fd36:	2b00      	cmp	r3, #0
    fd38:	d106      	bne.n	fd48 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    fd3a:	4a05      	ldr	r2, [pc, #20]	; (fd50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    fd3c:	9b01      	ldr	r3, [sp, #4]
    fd3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd42:	2b00      	cmp	r3, #0
    fd44:	d100      	bne.n	fd48 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd48:	bf00      	nop
    fd4a:	b003      	add	sp, #12
    fd4c:	f85d fb04 	ldr.w	pc, [sp], #4
    fd50:	1fff9110 	.word	0x1fff9110
    fd54:	1fff910c 	.word	0x1fff910c

0000fd58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    fd58:	b500      	push	{lr}
    fd5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd5c:	f7f1 fd86 	bl	186c <Sys_GetCoreID>
    fd60:	4603      	mov	r3, r0
    fd62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    fd64:	4a10      	ldr	r2, [pc, #64]	; (fda8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    fd66:	9b01      	ldr	r3, [sp, #4]
    fd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd6c:	2b00      	cmp	r3, #0
    fd6e:	d10d      	bne.n	fd8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd70:	f7f0 ffa4 	bl	cbc <Mcu_schm_read_msr>
    fd74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd76:	9b00      	ldr	r3, [sp, #0]
    fd78:	f003 0301 	and.w	r3, r3, #1
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	d100      	bne.n	fd82 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    fd82:	490a      	ldr	r1, [pc, #40]	; (fdac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    fd84:	9b01      	ldr	r3, [sp, #4]
    fd86:	9a00      	ldr	r2, [sp, #0]
    fd88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    fd8c:	4a06      	ldr	r2, [pc, #24]	; (fda8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    fd8e:	9b01      	ldr	r3, [sp, #4]
    fd90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd94:	1c5a      	adds	r2, r3, #1
    fd96:	4904      	ldr	r1, [pc, #16]	; (fda8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    fd98:	9b01      	ldr	r3, [sp, #4]
    fd9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd9e:	bf00      	nop
    fda0:	b003      	add	sp, #12
    fda2:	f85d fb04 	ldr.w	pc, [sp], #4
    fda6:	bf00      	nop
    fda8:	1fff9118 	.word	0x1fff9118
    fdac:	1fff9114 	.word	0x1fff9114

0000fdb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    fdb0:	b500      	push	{lr}
    fdb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdb4:	f7f1 fd5a 	bl	186c <Sys_GetCoreID>
    fdb8:	4603      	mov	r3, r0
    fdba:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    fdbc:	4a0d      	ldr	r2, [pc, #52]	; (fdf4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    fdbe:	9b01      	ldr	r3, [sp, #4]
    fdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdc4:	1e5a      	subs	r2, r3, #1
    fdc6:	490b      	ldr	r1, [pc, #44]	; (fdf4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    fdc8:	9b01      	ldr	r3, [sp, #4]
    fdca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    fdce:	4a0a      	ldr	r2, [pc, #40]	; (fdf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    fdd0:	9b01      	ldr	r3, [sp, #4]
    fdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd6:	f003 0301 	and.w	r3, r3, #1
    fdda:	2b00      	cmp	r3, #0
    fddc:	d106      	bne.n	fdec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    fdde:	4a05      	ldr	r2, [pc, #20]	; (fdf4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    fde0:	9b01      	ldr	r3, [sp, #4]
    fde2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fde6:	2b00      	cmp	r3, #0
    fde8:	d100      	bne.n	fdec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fdea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fdec:	bf00      	nop
    fdee:	b003      	add	sp, #12
    fdf0:	f85d fb04 	ldr.w	pc, [sp], #4
    fdf4:	1fff9118 	.word	0x1fff9118
    fdf8:	1fff9114 	.word	0x1fff9114

0000fdfc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    fdfc:	b500      	push	{lr}
    fdfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe00:	f7f1 fd34 	bl	186c <Sys_GetCoreID>
    fe04:	4603      	mov	r3, r0
    fe06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    fe08:	4a10      	ldr	r2, [pc, #64]	; (fe4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    fe0a:	9b01      	ldr	r3, [sp, #4]
    fe0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe10:	2b00      	cmp	r3, #0
    fe12:	d10d      	bne.n	fe30 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe14:	f7f0 ff52 	bl	cbc <Mcu_schm_read_msr>
    fe18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe1a:	9b00      	ldr	r3, [sp, #0]
    fe1c:	f003 0301 	and.w	r3, r3, #1
    fe20:	2b00      	cmp	r3, #0
    fe22:	d100      	bne.n	fe26 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    fe26:	490a      	ldr	r1, [pc, #40]	; (fe50 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    fe28:	9b01      	ldr	r3, [sp, #4]
    fe2a:	9a00      	ldr	r2, [sp, #0]
    fe2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    fe30:	4a06      	ldr	r2, [pc, #24]	; (fe4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    fe32:	9b01      	ldr	r3, [sp, #4]
    fe34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe38:	1c5a      	adds	r2, r3, #1
    fe3a:	4904      	ldr	r1, [pc, #16]	; (fe4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    fe3c:	9b01      	ldr	r3, [sp, #4]
    fe3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe42:	bf00      	nop
    fe44:	b003      	add	sp, #12
    fe46:	f85d fb04 	ldr.w	pc, [sp], #4
    fe4a:	bf00      	nop
    fe4c:	1fff9120 	.word	0x1fff9120
    fe50:	1fff911c 	.word	0x1fff911c

0000fe54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    fe54:	b500      	push	{lr}
    fe56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe58:	f7f1 fd08 	bl	186c <Sys_GetCoreID>
    fe5c:	4603      	mov	r3, r0
    fe5e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    fe60:	4a0d      	ldr	r2, [pc, #52]	; (fe98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    fe62:	9b01      	ldr	r3, [sp, #4]
    fe64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe68:	1e5a      	subs	r2, r3, #1
    fe6a:	490b      	ldr	r1, [pc, #44]	; (fe98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    fe6c:	9b01      	ldr	r3, [sp, #4]
    fe6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    fe72:	4a0a      	ldr	r2, [pc, #40]	; (fe9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    fe74:	9b01      	ldr	r3, [sp, #4]
    fe76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe7a:	f003 0301 	and.w	r3, r3, #1
    fe7e:	2b00      	cmp	r3, #0
    fe80:	d106      	bne.n	fe90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    fe82:	4a05      	ldr	r2, [pc, #20]	; (fe98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    fe84:	9b01      	ldr	r3, [sp, #4]
    fe86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8a:	2b00      	cmp	r3, #0
    fe8c:	d100      	bne.n	fe90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe90:	bf00      	nop
    fe92:	b003      	add	sp, #12
    fe94:	f85d fb04 	ldr.w	pc, [sp], #4
    fe98:	1fff9120 	.word	0x1fff9120
    fe9c:	1fff911c 	.word	0x1fff911c

0000fea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    fea0:	b500      	push	{lr}
    fea2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fea4:	f7f1 fce2 	bl	186c <Sys_GetCoreID>
    fea8:	4603      	mov	r3, r0
    feaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    feac:	4a10      	ldr	r2, [pc, #64]	; (fef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    feae:	9b01      	ldr	r3, [sp, #4]
    feb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feb4:	2b00      	cmp	r3, #0
    feb6:	d10d      	bne.n	fed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    feb8:	f7f0 ff09 	bl	cce <Port_schm_read_msr>
    febc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    febe:	9b00      	ldr	r3, [sp, #0]
    fec0:	f003 0301 	and.w	r3, r3, #1
    fec4:	2b00      	cmp	r3, #0
    fec6:	d100      	bne.n	feca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fec8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    feca:	490a      	ldr	r1, [pc, #40]	; (fef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    fecc:	9b01      	ldr	r3, [sp, #4]
    fece:	9a00      	ldr	r2, [sp, #0]
    fed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    fed4:	4a06      	ldr	r2, [pc, #24]	; (fef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    fed6:	9b01      	ldr	r3, [sp, #4]
    fed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fedc:	1c5a      	adds	r2, r3, #1
    fede:	4904      	ldr	r1, [pc, #16]	; (fef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    fee0:	9b01      	ldr	r3, [sp, #4]
    fee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fee6:	bf00      	nop
    fee8:	b003      	add	sp, #12
    feea:	f85d fb04 	ldr.w	pc, [sp], #4
    feee:	bf00      	nop
    fef0:	1fff9128 	.word	0x1fff9128
    fef4:	1fff9124 	.word	0x1fff9124

0000fef8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    fef8:	b500      	push	{lr}
    fefa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fefc:	f7f1 fcb6 	bl	186c <Sys_GetCoreID>
    ff00:	4603      	mov	r3, r0
    ff02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    ff04:	4a0d      	ldr	r2, [pc, #52]	; (ff3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ff06:	9b01      	ldr	r3, [sp, #4]
    ff08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff0c:	1e5a      	subs	r2, r3, #1
    ff0e:	490b      	ldr	r1, [pc, #44]	; (ff3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ff10:	9b01      	ldr	r3, [sp, #4]
    ff12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ff16:	4a0a      	ldr	r2, [pc, #40]	; (ff40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    ff18:	9b01      	ldr	r3, [sp, #4]
    ff1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff1e:	f003 0301 	and.w	r3, r3, #1
    ff22:	2b00      	cmp	r3, #0
    ff24:	d106      	bne.n	ff34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    ff26:	4a05      	ldr	r2, [pc, #20]	; (ff3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ff28:	9b01      	ldr	r3, [sp, #4]
    ff2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff2e:	2b00      	cmp	r3, #0
    ff30:	d100      	bne.n	ff34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff34:	bf00      	nop
    ff36:	b003      	add	sp, #12
    ff38:	f85d fb04 	ldr.w	pc, [sp], #4
    ff3c:	1fff9128 	.word	0x1fff9128
    ff40:	1fff9124 	.word	0x1fff9124

0000ff44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    ff44:	b500      	push	{lr}
    ff46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff48:	f7f1 fc90 	bl	186c <Sys_GetCoreID>
    ff4c:	4603      	mov	r3, r0
    ff4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    ff50:	4a10      	ldr	r2, [pc, #64]	; (ff94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ff52:	9b01      	ldr	r3, [sp, #4]
    ff54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff58:	2b00      	cmp	r3, #0
    ff5a:	d10d      	bne.n	ff78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff5c:	f7f0 feb7 	bl	cce <Port_schm_read_msr>
    ff60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff62:	9b00      	ldr	r3, [sp, #0]
    ff64:	f003 0301 	and.w	r3, r3, #1
    ff68:	2b00      	cmp	r3, #0
    ff6a:	d100      	bne.n	ff6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ff6e:	490a      	ldr	r1, [pc, #40]	; (ff98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    ff70:	9b01      	ldr	r3, [sp, #4]
    ff72:	9a00      	ldr	r2, [sp, #0]
    ff74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    ff78:	4a06      	ldr	r2, [pc, #24]	; (ff94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ff7a:	9b01      	ldr	r3, [sp, #4]
    ff7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff80:	1c5a      	adds	r2, r3, #1
    ff82:	4904      	ldr	r1, [pc, #16]	; (ff94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ff84:	9b01      	ldr	r3, [sp, #4]
    ff86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff8a:	bf00      	nop
    ff8c:	b003      	add	sp, #12
    ff8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff92:	bf00      	nop
    ff94:	1fff9130 	.word	0x1fff9130
    ff98:	1fff912c 	.word	0x1fff912c

0000ff9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    ff9c:	b500      	push	{lr}
    ff9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffa0:	f7f1 fc64 	bl	186c <Sys_GetCoreID>
    ffa4:	4603      	mov	r3, r0
    ffa6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    ffa8:	4a0d      	ldr	r2, [pc, #52]	; (ffe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ffaa:	9b01      	ldr	r3, [sp, #4]
    ffac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb0:	1e5a      	subs	r2, r3, #1
    ffb2:	490b      	ldr	r1, [pc, #44]	; (ffe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ffb4:	9b01      	ldr	r3, [sp, #4]
    ffb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ffba:	4a0a      	ldr	r2, [pc, #40]	; (ffe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    ffbc:	9b01      	ldr	r3, [sp, #4]
    ffbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc2:	f003 0301 	and.w	r3, r3, #1
    ffc6:	2b00      	cmp	r3, #0
    ffc8:	d106      	bne.n	ffd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    ffca:	4a05      	ldr	r2, [pc, #20]	; (ffe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ffcc:	9b01      	ldr	r3, [sp, #4]
    ffce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffd2:	2b00      	cmp	r3, #0
    ffd4:	d100      	bne.n	ffd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffd8:	bf00      	nop
    ffda:	b003      	add	sp, #12
    ffdc:	f85d fb04 	ldr.w	pc, [sp], #4
    ffe0:	1fff9130 	.word	0x1fff9130
    ffe4:	1fff912c 	.word	0x1fff912c

0000ffe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    ffe8:	b500      	push	{lr}
    ffea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffec:	f7f1 fc3e 	bl	186c <Sys_GetCoreID>
    fff0:	4603      	mov	r3, r0
    fff2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    fff4:	4a10      	ldr	r2, [pc, #64]	; (10038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    fff6:	9b01      	ldr	r3, [sp, #4]
    fff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fffc:	2b00      	cmp	r3, #0
    fffe:	d10d      	bne.n	1001c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10000:	f7f0 fe65 	bl	cce <Port_schm_read_msr>
   10004:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10006:	9b00      	ldr	r3, [sp, #0]
   10008:	f003 0301 	and.w	r3, r3, #1
   1000c:	2b00      	cmp	r3, #0
   1000e:	d100      	bne.n	10012 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10010:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   10012:	490a      	ldr	r1, [pc, #40]	; (1003c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   10014:	9b01      	ldr	r3, [sp, #4]
   10016:	9a00      	ldr	r2, [sp, #0]
   10018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   1001c:	4a06      	ldr	r2, [pc, #24]	; (10038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1001e:	9b01      	ldr	r3, [sp, #4]
   10020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10024:	1c5a      	adds	r2, r3, #1
   10026:	4904      	ldr	r1, [pc, #16]	; (10038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   10028:	9b01      	ldr	r3, [sp, #4]
   1002a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1002e:	bf00      	nop
   10030:	b003      	add	sp, #12
   10032:	f85d fb04 	ldr.w	pc, [sp], #4
   10036:	bf00      	nop
   10038:	1fff9138 	.word	0x1fff9138
   1003c:	1fff9134 	.word	0x1fff9134

00010040 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   10040:	b500      	push	{lr}
   10042:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10044:	f7f1 fc12 	bl	186c <Sys_GetCoreID>
   10048:	4603      	mov	r3, r0
   1004a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   1004c:	4a0d      	ldr	r2, [pc, #52]	; (10084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   1004e:	9b01      	ldr	r3, [sp, #4]
   10050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10054:	1e5a      	subs	r2, r3, #1
   10056:	490b      	ldr	r1, [pc, #44]	; (10084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   10058:	9b01      	ldr	r3, [sp, #4]
   1005a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1005e:	4a0a      	ldr	r2, [pc, #40]	; (10088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   10060:	9b01      	ldr	r3, [sp, #4]
   10062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10066:	f003 0301 	and.w	r3, r3, #1
   1006a:	2b00      	cmp	r3, #0
   1006c:	d106      	bne.n	1007c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   1006e:	4a05      	ldr	r2, [pc, #20]	; (10084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   10070:	9b01      	ldr	r3, [sp, #4]
   10072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10076:	2b00      	cmp	r3, #0
   10078:	d100      	bne.n	1007c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1007a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1007c:	bf00      	nop
   1007e:	b003      	add	sp, #12
   10080:	f85d fb04 	ldr.w	pc, [sp], #4
   10084:	1fff9138 	.word	0x1fff9138
   10088:	1fff9134 	.word	0x1fff9134

0001008c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   1008c:	b500      	push	{lr}
   1008e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10090:	f7f1 fbec 	bl	186c <Sys_GetCoreID>
   10094:	4603      	mov	r3, r0
   10096:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   10098:	4a10      	ldr	r2, [pc, #64]	; (100dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1009a:	9b01      	ldr	r3, [sp, #4]
   1009c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100a0:	2b00      	cmp	r3, #0
   100a2:	d10d      	bne.n	100c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100a4:	f7f0 fe13 	bl	cce <Port_schm_read_msr>
   100a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100aa:	9b00      	ldr	r3, [sp, #0]
   100ac:	f003 0301 	and.w	r3, r3, #1
   100b0:	2b00      	cmp	r3, #0
   100b2:	d100      	bne.n	100b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   100b6:	490a      	ldr	r1, [pc, #40]	; (100e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   100b8:	9b01      	ldr	r3, [sp, #4]
   100ba:	9a00      	ldr	r2, [sp, #0]
   100bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   100c0:	4a06      	ldr	r2, [pc, #24]	; (100dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   100c2:	9b01      	ldr	r3, [sp, #4]
   100c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100c8:	1c5a      	adds	r2, r3, #1
   100ca:	4904      	ldr	r1, [pc, #16]	; (100dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   100cc:	9b01      	ldr	r3, [sp, #4]
   100ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100d2:	bf00      	nop
   100d4:	b003      	add	sp, #12
   100d6:	f85d fb04 	ldr.w	pc, [sp], #4
   100da:	bf00      	nop
   100dc:	1fff9140 	.word	0x1fff9140
   100e0:	1fff913c 	.word	0x1fff913c

000100e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   100e4:	b500      	push	{lr}
   100e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100e8:	f7f1 fbc0 	bl	186c <Sys_GetCoreID>
   100ec:	4603      	mov	r3, r0
   100ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   100f0:	4a0d      	ldr	r2, [pc, #52]	; (10128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   100f2:	9b01      	ldr	r3, [sp, #4]
   100f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100f8:	1e5a      	subs	r2, r3, #1
   100fa:	490b      	ldr	r1, [pc, #44]	; (10128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   100fc:	9b01      	ldr	r3, [sp, #4]
   100fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   10102:	4a0a      	ldr	r2, [pc, #40]	; (1012c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   10104:	9b01      	ldr	r3, [sp, #4]
   10106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1010a:	f003 0301 	and.w	r3, r3, #1
   1010e:	2b00      	cmp	r3, #0
   10110:	d106      	bne.n	10120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   10112:	4a05      	ldr	r2, [pc, #20]	; (10128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   10114:	9b01      	ldr	r3, [sp, #4]
   10116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1011a:	2b00      	cmp	r3, #0
   1011c:	d100      	bne.n	10120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1011e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10120:	bf00      	nop
   10122:	b003      	add	sp, #12
   10124:	f85d fb04 	ldr.w	pc, [sp], #4
   10128:	1fff9140 	.word	0x1fff9140
   1012c:	1fff913c 	.word	0x1fff913c

00010130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   10130:	b500      	push	{lr}
   10132:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10134:	f7f1 fb9a 	bl	186c <Sys_GetCoreID>
   10138:	4603      	mov	r3, r0
   1013a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   1013c:	4a10      	ldr	r2, [pc, #64]	; (10180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   1013e:	9b01      	ldr	r3, [sp, #4]
   10140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10144:	2b00      	cmp	r3, #0
   10146:	d10d      	bne.n	10164 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10148:	f7f0 fdc1 	bl	cce <Port_schm_read_msr>
   1014c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1014e:	9b00      	ldr	r3, [sp, #0]
   10150:	f003 0301 	and.w	r3, r3, #1
   10154:	2b00      	cmp	r3, #0
   10156:	d100      	bne.n	1015a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10158:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1015a:	490a      	ldr	r1, [pc, #40]	; (10184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   1015c:	9b01      	ldr	r3, [sp, #4]
   1015e:	9a00      	ldr	r2, [sp, #0]
   10160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   10164:	4a06      	ldr	r2, [pc, #24]	; (10180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   10166:	9b01      	ldr	r3, [sp, #4]
   10168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1016c:	1c5a      	adds	r2, r3, #1
   1016e:	4904      	ldr	r1, [pc, #16]	; (10180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   10170:	9b01      	ldr	r3, [sp, #4]
   10172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10176:	bf00      	nop
   10178:	b003      	add	sp, #12
   1017a:	f85d fb04 	ldr.w	pc, [sp], #4
   1017e:	bf00      	nop
   10180:	1fff9148 	.word	0x1fff9148
   10184:	1fff9144 	.word	0x1fff9144

00010188 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   10188:	b500      	push	{lr}
   1018a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1018c:	f7f1 fb6e 	bl	186c <Sys_GetCoreID>
   10190:	4603      	mov	r3, r0
   10192:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   10194:	4a0d      	ldr	r2, [pc, #52]	; (101cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   10196:	9b01      	ldr	r3, [sp, #4]
   10198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1019c:	1e5a      	subs	r2, r3, #1
   1019e:	490b      	ldr	r1, [pc, #44]	; (101cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   101a0:	9b01      	ldr	r3, [sp, #4]
   101a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   101a6:	4a0a      	ldr	r2, [pc, #40]	; (101d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   101a8:	9b01      	ldr	r3, [sp, #4]
   101aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101ae:	f003 0301 	and.w	r3, r3, #1
   101b2:	2b00      	cmp	r3, #0
   101b4:	d106      	bne.n	101c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   101b6:	4a05      	ldr	r2, [pc, #20]	; (101cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   101b8:	9b01      	ldr	r3, [sp, #4]
   101ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101be:	2b00      	cmp	r3, #0
   101c0:	d100      	bne.n	101c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101c4:	bf00      	nop
   101c6:	b003      	add	sp, #12
   101c8:	f85d fb04 	ldr.w	pc, [sp], #4
   101cc:	1fff9148 	.word	0x1fff9148
   101d0:	1fff9144 	.word	0x1fff9144

000101d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   101d4:	b500      	push	{lr}
   101d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101d8:	f7f1 fb48 	bl	186c <Sys_GetCoreID>
   101dc:	4603      	mov	r3, r0
   101de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   101e0:	4a10      	ldr	r2, [pc, #64]	; (10224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   101e2:	9b01      	ldr	r3, [sp, #4]
   101e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101e8:	2b00      	cmp	r3, #0
   101ea:	d10d      	bne.n	10208 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101ec:	f7f0 fd6f 	bl	cce <Port_schm_read_msr>
   101f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101f2:	9b00      	ldr	r3, [sp, #0]
   101f4:	f003 0301 	and.w	r3, r3, #1
   101f8:	2b00      	cmp	r3, #0
   101fa:	d100      	bne.n	101fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   101fe:	490a      	ldr	r1, [pc, #40]	; (10228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   10200:	9b01      	ldr	r3, [sp, #4]
   10202:	9a00      	ldr	r2, [sp, #0]
   10204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   10208:	4a06      	ldr	r2, [pc, #24]	; (10224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   1020a:	9b01      	ldr	r3, [sp, #4]
   1020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10210:	1c5a      	adds	r2, r3, #1
   10212:	4904      	ldr	r1, [pc, #16]	; (10224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   10214:	9b01      	ldr	r3, [sp, #4]
   10216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1021a:	bf00      	nop
   1021c:	b003      	add	sp, #12
   1021e:	f85d fb04 	ldr.w	pc, [sp], #4
   10222:	bf00      	nop
   10224:	1fff9150 	.word	0x1fff9150
   10228:	1fff914c 	.word	0x1fff914c

0001022c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   1022c:	b500      	push	{lr}
   1022e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10230:	f7f1 fb1c 	bl	186c <Sys_GetCoreID>
   10234:	4603      	mov	r3, r0
   10236:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   10238:	4a0d      	ldr	r2, [pc, #52]	; (10270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1023a:	9b01      	ldr	r3, [sp, #4]
   1023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10240:	1e5a      	subs	r2, r3, #1
   10242:	490b      	ldr	r1, [pc, #44]	; (10270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   10244:	9b01      	ldr	r3, [sp, #4]
   10246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1024a:	4a0a      	ldr	r2, [pc, #40]	; (10274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   1024c:	9b01      	ldr	r3, [sp, #4]
   1024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10252:	f003 0301 	and.w	r3, r3, #1
   10256:	2b00      	cmp	r3, #0
   10258:	d106      	bne.n	10268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   1025a:	4a05      	ldr	r2, [pc, #20]	; (10270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1025c:	9b01      	ldr	r3, [sp, #4]
   1025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10262:	2b00      	cmp	r3, #0
   10264:	d100      	bne.n	10268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10266:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10268:	bf00      	nop
   1026a:	b003      	add	sp, #12
   1026c:	f85d fb04 	ldr.w	pc, [sp], #4
   10270:	1fff9150 	.word	0x1fff9150
   10274:	1fff914c 	.word	0x1fff914c

00010278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   10278:	b500      	push	{lr}
   1027a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1027c:	f7f1 faf6 	bl	186c <Sys_GetCoreID>
   10280:	4603      	mov	r3, r0
   10282:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   10284:	4a10      	ldr	r2, [pc, #64]	; (102c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   10286:	9b01      	ldr	r3, [sp, #4]
   10288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1028c:	2b00      	cmp	r3, #0
   1028e:	d10d      	bne.n	102ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10290:	f7f0 fd1d 	bl	cce <Port_schm_read_msr>
   10294:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10296:	9b00      	ldr	r3, [sp, #0]
   10298:	f003 0301 	and.w	r3, r3, #1
   1029c:	2b00      	cmp	r3, #0
   1029e:	d100      	bne.n	102a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   102a2:	490a      	ldr	r1, [pc, #40]	; (102cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   102a4:	9b01      	ldr	r3, [sp, #4]
   102a6:	9a00      	ldr	r2, [sp, #0]
   102a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   102ac:	4a06      	ldr	r2, [pc, #24]	; (102c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   102ae:	9b01      	ldr	r3, [sp, #4]
   102b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102b4:	1c5a      	adds	r2, r3, #1
   102b6:	4904      	ldr	r1, [pc, #16]	; (102c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   102b8:	9b01      	ldr	r3, [sp, #4]
   102ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102be:	bf00      	nop
   102c0:	b003      	add	sp, #12
   102c2:	f85d fb04 	ldr.w	pc, [sp], #4
   102c6:	bf00      	nop
   102c8:	1fff9158 	.word	0x1fff9158
   102cc:	1fff9154 	.word	0x1fff9154

000102d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   102d0:	b500      	push	{lr}
   102d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102d4:	f7f1 faca 	bl	186c <Sys_GetCoreID>
   102d8:	4603      	mov	r3, r0
   102da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   102dc:	4a0d      	ldr	r2, [pc, #52]	; (10314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   102de:	9b01      	ldr	r3, [sp, #4]
   102e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102e4:	1e5a      	subs	r2, r3, #1
   102e6:	490b      	ldr	r1, [pc, #44]	; (10314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   102e8:	9b01      	ldr	r3, [sp, #4]
   102ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   102ee:	4a0a      	ldr	r2, [pc, #40]	; (10318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   102f0:	9b01      	ldr	r3, [sp, #4]
   102f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102f6:	f003 0301 	and.w	r3, r3, #1
   102fa:	2b00      	cmp	r3, #0
   102fc:	d106      	bne.n	1030c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   102fe:	4a05      	ldr	r2, [pc, #20]	; (10314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   10300:	9b01      	ldr	r3, [sp, #4]
   10302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10306:	2b00      	cmp	r3, #0
   10308:	d100      	bne.n	1030c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1030a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1030c:	bf00      	nop
   1030e:	b003      	add	sp, #12
   10310:	f85d fb04 	ldr.w	pc, [sp], #4
   10314:	1fff9158 	.word	0x1fff9158
   10318:	1fff9154 	.word	0x1fff9154

0001031c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   1031c:	b500      	push	{lr}
   1031e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10320:	f7f1 faa4 	bl	186c <Sys_GetCoreID>
   10324:	4603      	mov	r3, r0
   10326:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   10328:	4a10      	ldr	r2, [pc, #64]	; (1036c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1032a:	9b01      	ldr	r3, [sp, #4]
   1032c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10330:	2b00      	cmp	r3, #0
   10332:	d10d      	bne.n	10350 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10334:	f7f0 fccb 	bl	cce <Port_schm_read_msr>
   10338:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1033a:	9b00      	ldr	r3, [sp, #0]
   1033c:	f003 0301 	and.w	r3, r3, #1
   10340:	2b00      	cmp	r3, #0
   10342:	d100      	bne.n	10346 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10344:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   10346:	490a      	ldr	r1, [pc, #40]	; (10370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   10348:	9b01      	ldr	r3, [sp, #4]
   1034a:	9a00      	ldr	r2, [sp, #0]
   1034c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   10350:	4a06      	ldr	r2, [pc, #24]	; (1036c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   10352:	9b01      	ldr	r3, [sp, #4]
   10354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10358:	1c5a      	adds	r2, r3, #1
   1035a:	4904      	ldr	r1, [pc, #16]	; (1036c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1035c:	9b01      	ldr	r3, [sp, #4]
   1035e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10362:	bf00      	nop
   10364:	b003      	add	sp, #12
   10366:	f85d fb04 	ldr.w	pc, [sp], #4
   1036a:	bf00      	nop
   1036c:	1fff9160 	.word	0x1fff9160
   10370:	1fff915c 	.word	0x1fff915c

00010374 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   10374:	b500      	push	{lr}
   10376:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10378:	f7f1 fa78 	bl	186c <Sys_GetCoreID>
   1037c:	4603      	mov	r3, r0
   1037e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   10380:	4a0d      	ldr	r2, [pc, #52]	; (103b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   10382:	9b01      	ldr	r3, [sp, #4]
   10384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10388:	1e5a      	subs	r2, r3, #1
   1038a:	490b      	ldr	r1, [pc, #44]	; (103b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1038c:	9b01      	ldr	r3, [sp, #4]
   1038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   10392:	4a0a      	ldr	r2, [pc, #40]	; (103bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   10394:	9b01      	ldr	r3, [sp, #4]
   10396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1039a:	f003 0301 	and.w	r3, r3, #1
   1039e:	2b00      	cmp	r3, #0
   103a0:	d106      	bne.n	103b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   103a2:	4a05      	ldr	r2, [pc, #20]	; (103b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103aa:	2b00      	cmp	r3, #0
   103ac:	d100      	bne.n	103b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103b0:	bf00      	nop
   103b2:	b003      	add	sp, #12
   103b4:	f85d fb04 	ldr.w	pc, [sp], #4
   103b8:	1fff9160 	.word	0x1fff9160
   103bc:	1fff915c 	.word	0x1fff915c

000103c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   103c0:	b500      	push	{lr}
   103c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103c4:	f7f1 fa52 	bl	186c <Sys_GetCoreID>
   103c8:	4603      	mov	r3, r0
   103ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   103cc:	4a10      	ldr	r2, [pc, #64]	; (10410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   103ce:	9b01      	ldr	r3, [sp, #4]
   103d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103d4:	2b00      	cmp	r3, #0
   103d6:	d10d      	bne.n	103f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103d8:	f7f0 fc79 	bl	cce <Port_schm_read_msr>
   103dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103de:	9b00      	ldr	r3, [sp, #0]
   103e0:	f003 0301 	and.w	r3, r3, #1
   103e4:	2b00      	cmp	r3, #0
   103e6:	d100      	bne.n	103ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   103ea:	490a      	ldr	r1, [pc, #40]	; (10414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   103ec:	9b01      	ldr	r3, [sp, #4]
   103ee:	9a00      	ldr	r2, [sp, #0]
   103f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   103f4:	4a06      	ldr	r2, [pc, #24]	; (10410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   103f6:	9b01      	ldr	r3, [sp, #4]
   103f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103fc:	1c5a      	adds	r2, r3, #1
   103fe:	4904      	ldr	r1, [pc, #16]	; (10410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   10400:	9b01      	ldr	r3, [sp, #4]
   10402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10406:	bf00      	nop
   10408:	b003      	add	sp, #12
   1040a:	f85d fb04 	ldr.w	pc, [sp], #4
   1040e:	bf00      	nop
   10410:	1fff9168 	.word	0x1fff9168
   10414:	1fff9164 	.word	0x1fff9164

00010418 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   10418:	b500      	push	{lr}
   1041a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1041c:	f7f1 fa26 	bl	186c <Sys_GetCoreID>
   10420:	4603      	mov	r3, r0
   10422:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   10424:	4a0d      	ldr	r2, [pc, #52]	; (1045c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   10426:	9b01      	ldr	r3, [sp, #4]
   10428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1042c:	1e5a      	subs	r2, r3, #1
   1042e:	490b      	ldr	r1, [pc, #44]	; (1045c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   10430:	9b01      	ldr	r3, [sp, #4]
   10432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   10436:	4a0a      	ldr	r2, [pc, #40]	; (10460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   10438:	9b01      	ldr	r3, [sp, #4]
   1043a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1043e:	f003 0301 	and.w	r3, r3, #1
   10442:	2b00      	cmp	r3, #0
   10444:	d106      	bne.n	10454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   10446:	4a05      	ldr	r2, [pc, #20]	; (1045c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   10448:	9b01      	ldr	r3, [sp, #4]
   1044a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1044e:	2b00      	cmp	r3, #0
   10450:	d100      	bne.n	10454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10452:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10454:	bf00      	nop
   10456:	b003      	add	sp, #12
   10458:	f85d fb04 	ldr.w	pc, [sp], #4
   1045c:	1fff9168 	.word	0x1fff9168
   10460:	1fff9164 	.word	0x1fff9164

00010464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   10464:	b500      	push	{lr}
   10466:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10468:	f7f1 fa00 	bl	186c <Sys_GetCoreID>
   1046c:	4603      	mov	r3, r0
   1046e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   10470:	4a10      	ldr	r2, [pc, #64]	; (104b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   10472:	9b01      	ldr	r3, [sp, #4]
   10474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10478:	2b00      	cmp	r3, #0
   1047a:	d10d      	bne.n	10498 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1047c:	f7f0 fc27 	bl	cce <Port_schm_read_msr>
   10480:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10482:	9b00      	ldr	r3, [sp, #0]
   10484:	f003 0301 	and.w	r3, r3, #1
   10488:	2b00      	cmp	r3, #0
   1048a:	d100      	bne.n	1048e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1048c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1048e:	490a      	ldr	r1, [pc, #40]	; (104b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   10490:	9b01      	ldr	r3, [sp, #4]
   10492:	9a00      	ldr	r2, [sp, #0]
   10494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   10498:	4a06      	ldr	r2, [pc, #24]	; (104b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1049a:	9b01      	ldr	r3, [sp, #4]
   1049c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104a0:	1c5a      	adds	r2, r3, #1
   104a2:	4904      	ldr	r1, [pc, #16]	; (104b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   104a4:	9b01      	ldr	r3, [sp, #4]
   104a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104aa:	bf00      	nop
   104ac:	b003      	add	sp, #12
   104ae:	f85d fb04 	ldr.w	pc, [sp], #4
   104b2:	bf00      	nop
   104b4:	1fff9170 	.word	0x1fff9170
   104b8:	1fff916c 	.word	0x1fff916c

000104bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   104bc:	b500      	push	{lr}
   104be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104c0:	f7f1 f9d4 	bl	186c <Sys_GetCoreID>
   104c4:	4603      	mov	r3, r0
   104c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   104c8:	4a0d      	ldr	r2, [pc, #52]	; (10500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104d0:	1e5a      	subs	r2, r3, #1
   104d2:	490b      	ldr	r1, [pc, #44]	; (10500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   104d4:	9b01      	ldr	r3, [sp, #4]
   104d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   104da:	4a0a      	ldr	r2, [pc, #40]	; (10504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   104dc:	9b01      	ldr	r3, [sp, #4]
   104de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104e2:	f003 0301 	and.w	r3, r3, #1
   104e6:	2b00      	cmp	r3, #0
   104e8:	d106      	bne.n	104f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   104ea:	4a05      	ldr	r2, [pc, #20]	; (10500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   104ec:	9b01      	ldr	r3, [sp, #4]
   104ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104f2:	2b00      	cmp	r3, #0
   104f4:	d100      	bne.n	104f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104f8:	bf00      	nop
   104fa:	b003      	add	sp, #12
   104fc:	f85d fb04 	ldr.w	pc, [sp], #4
   10500:	1fff9170 	.word	0x1fff9170
   10504:	1fff916c 	.word	0x1fff916c

00010508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   10508:	b500      	push	{lr}
   1050a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1050c:	f7f1 f9ae 	bl	186c <Sys_GetCoreID>
   10510:	4603      	mov	r3, r0
   10512:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   10514:	4a10      	ldr	r2, [pc, #64]	; (10558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   10516:	9b01      	ldr	r3, [sp, #4]
   10518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1051c:	2b00      	cmp	r3, #0
   1051e:	d10d      	bne.n	1053c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10520:	f7f0 fbd5 	bl	cce <Port_schm_read_msr>
   10524:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10526:	9b00      	ldr	r3, [sp, #0]
   10528:	f003 0301 	and.w	r3, r3, #1
   1052c:	2b00      	cmp	r3, #0
   1052e:	d100      	bne.n	10532 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10530:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   10532:	490a      	ldr	r1, [pc, #40]	; (1055c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   10534:	9b01      	ldr	r3, [sp, #4]
   10536:	9a00      	ldr	r2, [sp, #0]
   10538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   1053c:	4a06      	ldr	r2, [pc, #24]	; (10558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1053e:	9b01      	ldr	r3, [sp, #4]
   10540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10544:	1c5a      	adds	r2, r3, #1
   10546:	4904      	ldr	r1, [pc, #16]	; (10558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   10548:	9b01      	ldr	r3, [sp, #4]
   1054a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1054e:	bf00      	nop
   10550:	b003      	add	sp, #12
   10552:	f85d fb04 	ldr.w	pc, [sp], #4
   10556:	bf00      	nop
   10558:	1fff9178 	.word	0x1fff9178
   1055c:	1fff9174 	.word	0x1fff9174

00010560 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   10560:	b500      	push	{lr}
   10562:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10564:	f7f1 f982 	bl	186c <Sys_GetCoreID>
   10568:	4603      	mov	r3, r0
   1056a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   1056c:	4a0d      	ldr	r2, [pc, #52]	; (105a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   1056e:	9b01      	ldr	r3, [sp, #4]
   10570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10574:	1e5a      	subs	r2, r3, #1
   10576:	490b      	ldr	r1, [pc, #44]	; (105a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   10578:	9b01      	ldr	r3, [sp, #4]
   1057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1057e:	4a0a      	ldr	r2, [pc, #40]	; (105a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   10580:	9b01      	ldr	r3, [sp, #4]
   10582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10586:	f003 0301 	and.w	r3, r3, #1
   1058a:	2b00      	cmp	r3, #0
   1058c:	d106      	bne.n	1059c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   1058e:	4a05      	ldr	r2, [pc, #20]	; (105a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   10590:	9b01      	ldr	r3, [sp, #4]
   10592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10596:	2b00      	cmp	r3, #0
   10598:	d100      	bne.n	1059c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1059a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1059c:	bf00      	nop
   1059e:	b003      	add	sp, #12
   105a0:	f85d fb04 	ldr.w	pc, [sp], #4
   105a4:	1fff9178 	.word	0x1fff9178
   105a8:	1fff9174 	.word	0x1fff9174

000105ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   105ac:	b500      	push	{lr}
   105ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105b0:	f7f1 f95c 	bl	186c <Sys_GetCoreID>
   105b4:	4603      	mov	r3, r0
   105b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   105b8:	4a10      	ldr	r2, [pc, #64]	; (105fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   105ba:	9b01      	ldr	r3, [sp, #4]
   105bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105c0:	2b00      	cmp	r3, #0
   105c2:	d10d      	bne.n	105e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105c4:	f7f0 fb83 	bl	cce <Port_schm_read_msr>
   105c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105ca:	9b00      	ldr	r3, [sp, #0]
   105cc:	f003 0301 	and.w	r3, r3, #1
   105d0:	2b00      	cmp	r3, #0
   105d2:	d100      	bne.n	105d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   105d6:	490a      	ldr	r1, [pc, #40]	; (10600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   105d8:	9b01      	ldr	r3, [sp, #4]
   105da:	9a00      	ldr	r2, [sp, #0]
   105dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   105e0:	4a06      	ldr	r2, [pc, #24]	; (105fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   105e2:	9b01      	ldr	r3, [sp, #4]
   105e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105e8:	1c5a      	adds	r2, r3, #1
   105ea:	4904      	ldr	r1, [pc, #16]	; (105fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   105ec:	9b01      	ldr	r3, [sp, #4]
   105ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105f2:	bf00      	nop
   105f4:	b003      	add	sp, #12
   105f6:	f85d fb04 	ldr.w	pc, [sp], #4
   105fa:	bf00      	nop
   105fc:	1fff9180 	.word	0x1fff9180
   10600:	1fff917c 	.word	0x1fff917c

00010604 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   10604:	b500      	push	{lr}
   10606:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10608:	f7f1 f930 	bl	186c <Sys_GetCoreID>
   1060c:	4603      	mov	r3, r0
   1060e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   10610:	4a0d      	ldr	r2, [pc, #52]	; (10648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   10612:	9b01      	ldr	r3, [sp, #4]
   10614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10618:	1e5a      	subs	r2, r3, #1
   1061a:	490b      	ldr	r1, [pc, #44]	; (10648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   1061c:	9b01      	ldr	r3, [sp, #4]
   1061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   10622:	4a0a      	ldr	r2, [pc, #40]	; (1064c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   10624:	9b01      	ldr	r3, [sp, #4]
   10626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1062a:	f003 0301 	and.w	r3, r3, #1
   1062e:	2b00      	cmp	r3, #0
   10630:	d106      	bne.n	10640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   10632:	4a05      	ldr	r2, [pc, #20]	; (10648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   10634:	9b01      	ldr	r3, [sp, #4]
   10636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1063a:	2b00      	cmp	r3, #0
   1063c:	d100      	bne.n	10640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1063e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10640:	bf00      	nop
   10642:	b003      	add	sp, #12
   10644:	f85d fb04 	ldr.w	pc, [sp], #4
   10648:	1fff9180 	.word	0x1fff9180
   1064c:	1fff917c 	.word	0x1fff917c

00010650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   10650:	b500      	push	{lr}
   10652:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10654:	f7f1 f90a 	bl	186c <Sys_GetCoreID>
   10658:	4603      	mov	r3, r0
   1065a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   1065c:	4a10      	ldr	r2, [pc, #64]	; (106a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1065e:	9b01      	ldr	r3, [sp, #4]
   10660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10664:	2b00      	cmp	r3, #0
   10666:	d10d      	bne.n	10684 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10668:	f7f0 fb31 	bl	cce <Port_schm_read_msr>
   1066c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1066e:	9b00      	ldr	r3, [sp, #0]
   10670:	f003 0301 	and.w	r3, r3, #1
   10674:	2b00      	cmp	r3, #0
   10676:	d100      	bne.n	1067a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10678:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1067a:	490a      	ldr	r1, [pc, #40]	; (106a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   1067c:	9b01      	ldr	r3, [sp, #4]
   1067e:	9a00      	ldr	r2, [sp, #0]
   10680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   10684:	4a06      	ldr	r2, [pc, #24]	; (106a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   10686:	9b01      	ldr	r3, [sp, #4]
   10688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1068c:	1c5a      	adds	r2, r3, #1
   1068e:	4904      	ldr	r1, [pc, #16]	; (106a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   10690:	9b01      	ldr	r3, [sp, #4]
   10692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10696:	bf00      	nop
   10698:	b003      	add	sp, #12
   1069a:	f85d fb04 	ldr.w	pc, [sp], #4
   1069e:	bf00      	nop
   106a0:	1fff9188 	.word	0x1fff9188
   106a4:	1fff9184 	.word	0x1fff9184

000106a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   106a8:	b500      	push	{lr}
   106aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106ac:	f7f1 f8de 	bl	186c <Sys_GetCoreID>
   106b0:	4603      	mov	r3, r0
   106b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   106b4:	4a0d      	ldr	r2, [pc, #52]	; (106ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   106b6:	9b01      	ldr	r3, [sp, #4]
   106b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106bc:	1e5a      	subs	r2, r3, #1
   106be:	490b      	ldr	r1, [pc, #44]	; (106ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   106c0:	9b01      	ldr	r3, [sp, #4]
   106c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   106c6:	4a0a      	ldr	r2, [pc, #40]	; (106f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   106c8:	9b01      	ldr	r3, [sp, #4]
   106ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106ce:	f003 0301 	and.w	r3, r3, #1
   106d2:	2b00      	cmp	r3, #0
   106d4:	d106      	bne.n	106e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   106d6:	4a05      	ldr	r2, [pc, #20]	; (106ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   106d8:	9b01      	ldr	r3, [sp, #4]
   106da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106de:	2b00      	cmp	r3, #0
   106e0:	d100      	bne.n	106e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   106e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106e4:	bf00      	nop
   106e6:	b003      	add	sp, #12
   106e8:	f85d fb04 	ldr.w	pc, [sp], #4
   106ec:	1fff9188 	.word	0x1fff9188
   106f0:	1fff9184 	.word	0x1fff9184

000106f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   106f4:	b500      	push	{lr}
   106f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106f8:	f7f1 f8b8 	bl	186c <Sys_GetCoreID>
   106fc:	4603      	mov	r3, r0
   106fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   10700:	4a10      	ldr	r2, [pc, #64]	; (10744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   10702:	9b01      	ldr	r3, [sp, #4]
   10704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10708:	2b00      	cmp	r3, #0
   1070a:	d10d      	bne.n	10728 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1070c:	f7f0 fadf 	bl	cce <Port_schm_read_msr>
   10710:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10712:	9b00      	ldr	r3, [sp, #0]
   10714:	f003 0301 	and.w	r3, r3, #1
   10718:	2b00      	cmp	r3, #0
   1071a:	d100      	bne.n	1071e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1071c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1071e:	490a      	ldr	r1, [pc, #40]	; (10748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   10720:	9b01      	ldr	r3, [sp, #4]
   10722:	9a00      	ldr	r2, [sp, #0]
   10724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   10728:	4a06      	ldr	r2, [pc, #24]	; (10744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   1072a:	9b01      	ldr	r3, [sp, #4]
   1072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10730:	1c5a      	adds	r2, r3, #1
   10732:	4904      	ldr	r1, [pc, #16]	; (10744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   10734:	9b01      	ldr	r3, [sp, #4]
   10736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1073a:	bf00      	nop
   1073c:	b003      	add	sp, #12
   1073e:	f85d fb04 	ldr.w	pc, [sp], #4
   10742:	bf00      	nop
   10744:	1fff9190 	.word	0x1fff9190
   10748:	1fff918c 	.word	0x1fff918c

0001074c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   1074c:	b500      	push	{lr}
   1074e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10750:	f7f1 f88c 	bl	186c <Sys_GetCoreID>
   10754:	4603      	mov	r3, r0
   10756:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   10758:	4a0d      	ldr	r2, [pc, #52]	; (10790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1075a:	9b01      	ldr	r3, [sp, #4]
   1075c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10760:	1e5a      	subs	r2, r3, #1
   10762:	490b      	ldr	r1, [pc, #44]	; (10790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   10764:	9b01      	ldr	r3, [sp, #4]
   10766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1076a:	4a0a      	ldr	r2, [pc, #40]	; (10794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   1076c:	9b01      	ldr	r3, [sp, #4]
   1076e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10772:	f003 0301 	and.w	r3, r3, #1
   10776:	2b00      	cmp	r3, #0
   10778:	d106      	bne.n	10788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   1077a:	4a05      	ldr	r2, [pc, #20]	; (10790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1077c:	9b01      	ldr	r3, [sp, #4]
   1077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10782:	2b00      	cmp	r3, #0
   10784:	d100      	bne.n	10788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10786:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10788:	bf00      	nop
   1078a:	b003      	add	sp, #12
   1078c:	f85d fb04 	ldr.w	pc, [sp], #4
   10790:	1fff9190 	.word	0x1fff9190
   10794:	1fff918c 	.word	0x1fff918c

00010798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   10798:	b500      	push	{lr}
   1079a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1079c:	f7f1 f866 	bl	186c <Sys_GetCoreID>
   107a0:	4603      	mov	r3, r0
   107a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   107a4:	4a10      	ldr	r2, [pc, #64]	; (107e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   107a6:	9b01      	ldr	r3, [sp, #4]
   107a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107ac:	2b00      	cmp	r3, #0
   107ae:	d10d      	bne.n	107cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   107b0:	f7f0 fa8d 	bl	cce <Port_schm_read_msr>
   107b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107b6:	9b00      	ldr	r3, [sp, #0]
   107b8:	f003 0301 	and.w	r3, r3, #1
   107bc:	2b00      	cmp	r3, #0
   107be:	d100      	bne.n	107c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   107c2:	490a      	ldr	r1, [pc, #40]	; (107ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   107c4:	9b01      	ldr	r3, [sp, #4]
   107c6:	9a00      	ldr	r2, [sp, #0]
   107c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   107cc:	4a06      	ldr	r2, [pc, #24]	; (107e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   107ce:	9b01      	ldr	r3, [sp, #4]
   107d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107d4:	1c5a      	adds	r2, r3, #1
   107d6:	4904      	ldr	r1, [pc, #16]	; (107e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   107d8:	9b01      	ldr	r3, [sp, #4]
   107da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   107de:	bf00      	nop
   107e0:	b003      	add	sp, #12
   107e2:	f85d fb04 	ldr.w	pc, [sp], #4
   107e6:	bf00      	nop
   107e8:	1fff9198 	.word	0x1fff9198
   107ec:	1fff9194 	.word	0x1fff9194

000107f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   107f0:	b500      	push	{lr}
   107f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107f4:	f7f1 f83a 	bl	186c <Sys_GetCoreID>
   107f8:	4603      	mov	r3, r0
   107fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   107fc:	4a0d      	ldr	r2, [pc, #52]	; (10834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   107fe:	9b01      	ldr	r3, [sp, #4]
   10800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10804:	1e5a      	subs	r2, r3, #1
   10806:	490b      	ldr	r1, [pc, #44]	; (10834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   10808:	9b01      	ldr	r3, [sp, #4]
   1080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1080e:	4a0a      	ldr	r2, [pc, #40]	; (10838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   10810:	9b01      	ldr	r3, [sp, #4]
   10812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10816:	f003 0301 	and.w	r3, r3, #1
   1081a:	2b00      	cmp	r3, #0
   1081c:	d106      	bne.n	1082c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   1081e:	4a05      	ldr	r2, [pc, #20]	; (10834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   10820:	9b01      	ldr	r3, [sp, #4]
   10822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10826:	2b00      	cmp	r3, #0
   10828:	d100      	bne.n	1082c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1082a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1082c:	bf00      	nop
   1082e:	b003      	add	sp, #12
   10830:	f85d fb04 	ldr.w	pc, [sp], #4
   10834:	1fff9198 	.word	0x1fff9198
   10838:	1fff9194 	.word	0x1fff9194

0001083c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   1083c:	b500      	push	{lr}
   1083e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10840:	f7f1 f814 	bl	186c <Sys_GetCoreID>
   10844:	4603      	mov	r3, r0
   10846:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   10848:	4a10      	ldr	r2, [pc, #64]	; (1088c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1084a:	9b01      	ldr	r3, [sp, #4]
   1084c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10850:	2b00      	cmp	r3, #0
   10852:	d10d      	bne.n	10870 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10854:	f7f0 fa3b 	bl	cce <Port_schm_read_msr>
   10858:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1085a:	9b00      	ldr	r3, [sp, #0]
   1085c:	f003 0301 	and.w	r3, r3, #1
   10860:	2b00      	cmp	r3, #0
   10862:	d100      	bne.n	10866 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10864:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   10866:	490a      	ldr	r1, [pc, #40]	; (10890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   10868:	9b01      	ldr	r3, [sp, #4]
   1086a:	9a00      	ldr	r2, [sp, #0]
   1086c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   10870:	4a06      	ldr	r2, [pc, #24]	; (1088c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   10872:	9b01      	ldr	r3, [sp, #4]
   10874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10878:	1c5a      	adds	r2, r3, #1
   1087a:	4904      	ldr	r1, [pc, #16]	; (1088c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1087c:	9b01      	ldr	r3, [sp, #4]
   1087e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10882:	bf00      	nop
   10884:	b003      	add	sp, #12
   10886:	f85d fb04 	ldr.w	pc, [sp], #4
   1088a:	bf00      	nop
   1088c:	1fff91a0 	.word	0x1fff91a0
   10890:	1fff919c 	.word	0x1fff919c

00010894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   10894:	b500      	push	{lr}
   10896:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10898:	f7f0 ffe8 	bl	186c <Sys_GetCoreID>
   1089c:	4603      	mov	r3, r0
   1089e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   108a0:	4a0d      	ldr	r2, [pc, #52]	; (108d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   108a2:	9b01      	ldr	r3, [sp, #4]
   108a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108a8:	1e5a      	subs	r2, r3, #1
   108aa:	490b      	ldr	r1, [pc, #44]	; (108d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   108ac:	9b01      	ldr	r3, [sp, #4]
   108ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   108b2:	4a0a      	ldr	r2, [pc, #40]	; (108dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   108b4:	9b01      	ldr	r3, [sp, #4]
   108b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ba:	f003 0301 	and.w	r3, r3, #1
   108be:	2b00      	cmp	r3, #0
   108c0:	d106      	bne.n	108d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   108c2:	4a05      	ldr	r2, [pc, #20]	; (108d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   108c4:	9b01      	ldr	r3, [sp, #4]
   108c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ca:	2b00      	cmp	r3, #0
   108cc:	d100      	bne.n	108d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108d0:	bf00      	nop
   108d2:	b003      	add	sp, #12
   108d4:	f85d fb04 	ldr.w	pc, [sp], #4
   108d8:	1fff91a0 	.word	0x1fff91a0
   108dc:	1fff919c 	.word	0x1fff919c

000108e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   108e0:	b500      	push	{lr}
   108e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108e4:	f7f0 ffc2 	bl	186c <Sys_GetCoreID>
   108e8:	4603      	mov	r3, r0
   108ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   108ec:	4a10      	ldr	r2, [pc, #64]	; (10930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   108ee:	9b01      	ldr	r3, [sp, #4]
   108f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108f4:	2b00      	cmp	r3, #0
   108f6:	d10d      	bne.n	10914 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108f8:	f7f0 f9e9 	bl	cce <Port_schm_read_msr>
   108fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108fe:	9b00      	ldr	r3, [sp, #0]
   10900:	f003 0301 	and.w	r3, r3, #1
   10904:	2b00      	cmp	r3, #0
   10906:	d100      	bne.n	1090a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10908:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1090a:	490a      	ldr	r1, [pc, #40]	; (10934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   1090c:	9b01      	ldr	r3, [sp, #4]
   1090e:	9a00      	ldr	r2, [sp, #0]
   10910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   10914:	4a06      	ldr	r2, [pc, #24]	; (10930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   10916:	9b01      	ldr	r3, [sp, #4]
   10918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1091c:	1c5a      	adds	r2, r3, #1
   1091e:	4904      	ldr	r1, [pc, #16]	; (10930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   10920:	9b01      	ldr	r3, [sp, #4]
   10922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10926:	bf00      	nop
   10928:	b003      	add	sp, #12
   1092a:	f85d fb04 	ldr.w	pc, [sp], #4
   1092e:	bf00      	nop
   10930:	1fff91a8 	.word	0x1fff91a8
   10934:	1fff91a4 	.word	0x1fff91a4

00010938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   10938:	b500      	push	{lr}
   1093a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1093c:	f7f0 ff96 	bl	186c <Sys_GetCoreID>
   10940:	4603      	mov	r3, r0
   10942:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   10944:	4a0d      	ldr	r2, [pc, #52]	; (1097c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   10946:	9b01      	ldr	r3, [sp, #4]
   10948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1094c:	1e5a      	subs	r2, r3, #1
   1094e:	490b      	ldr	r1, [pc, #44]	; (1097c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   10950:	9b01      	ldr	r3, [sp, #4]
   10952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   10956:	4a0a      	ldr	r2, [pc, #40]	; (10980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   10958:	9b01      	ldr	r3, [sp, #4]
   1095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1095e:	f003 0301 	and.w	r3, r3, #1
   10962:	2b00      	cmp	r3, #0
   10964:	d106      	bne.n	10974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   10966:	4a05      	ldr	r2, [pc, #20]	; (1097c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   10968:	9b01      	ldr	r3, [sp, #4]
   1096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1096e:	2b00      	cmp	r3, #0
   10970:	d100      	bne.n	10974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10972:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10974:	bf00      	nop
   10976:	b003      	add	sp, #12
   10978:	f85d fb04 	ldr.w	pc, [sp], #4
   1097c:	1fff91a8 	.word	0x1fff91a8
   10980:	1fff91a4 	.word	0x1fff91a4

00010984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   10984:	b500      	push	{lr}
   10986:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10988:	f7f0 ff70 	bl	186c <Sys_GetCoreID>
   1098c:	4603      	mov	r3, r0
   1098e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   10990:	4a10      	ldr	r2, [pc, #64]	; (109d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   10992:	9b01      	ldr	r3, [sp, #4]
   10994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10998:	2b00      	cmp	r3, #0
   1099a:	d10d      	bne.n	109b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1099c:	f7f0 f997 	bl	cce <Port_schm_read_msr>
   109a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109a2:	9b00      	ldr	r3, [sp, #0]
   109a4:	f003 0301 	and.w	r3, r3, #1
   109a8:	2b00      	cmp	r3, #0
   109aa:	d100      	bne.n	109ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   109ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   109ae:	490a      	ldr	r1, [pc, #40]	; (109d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   109b0:	9b01      	ldr	r3, [sp, #4]
   109b2:	9a00      	ldr	r2, [sp, #0]
   109b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   109b8:	4a06      	ldr	r2, [pc, #24]	; (109d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   109ba:	9b01      	ldr	r3, [sp, #4]
   109bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109c0:	1c5a      	adds	r2, r3, #1
   109c2:	4904      	ldr	r1, [pc, #16]	; (109d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   109c4:	9b01      	ldr	r3, [sp, #4]
   109c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109ca:	bf00      	nop
   109cc:	b003      	add	sp, #12
   109ce:	f85d fb04 	ldr.w	pc, [sp], #4
   109d2:	bf00      	nop
   109d4:	1fff91b0 	.word	0x1fff91b0
   109d8:	1fff91ac 	.word	0x1fff91ac

000109dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   109dc:	b500      	push	{lr}
   109de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109e0:	f7f0 ff44 	bl	186c <Sys_GetCoreID>
   109e4:	4603      	mov	r3, r0
   109e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   109e8:	4a0d      	ldr	r2, [pc, #52]	; (10a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   109ea:	9b01      	ldr	r3, [sp, #4]
   109ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109f0:	1e5a      	subs	r2, r3, #1
   109f2:	490b      	ldr	r1, [pc, #44]	; (10a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   109f4:	9b01      	ldr	r3, [sp, #4]
   109f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   109fa:	4a0a      	ldr	r2, [pc, #40]	; (10a24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   109fc:	9b01      	ldr	r3, [sp, #4]
   109fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a02:	f003 0301 	and.w	r3, r3, #1
   10a06:	2b00      	cmp	r3, #0
   10a08:	d106      	bne.n	10a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   10a0a:	4a05      	ldr	r2, [pc, #20]	; (10a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   10a0c:	9b01      	ldr	r3, [sp, #4]
   10a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a12:	2b00      	cmp	r3, #0
   10a14:	d100      	bne.n	10a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a18:	bf00      	nop
   10a1a:	b003      	add	sp, #12
   10a1c:	f85d fb04 	ldr.w	pc, [sp], #4
   10a20:	1fff91b0 	.word	0x1fff91b0
   10a24:	1fff91ac 	.word	0x1fff91ac

00010a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   10a28:	b500      	push	{lr}
   10a2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a2c:	f7f0 ff1e 	bl	186c <Sys_GetCoreID>
   10a30:	4603      	mov	r3, r0
   10a32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   10a34:	4a10      	ldr	r2, [pc, #64]	; (10a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   10a36:	9b01      	ldr	r3, [sp, #4]
   10a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a3c:	2b00      	cmp	r3, #0
   10a3e:	d10d      	bne.n	10a5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a40:	f7f0 f945 	bl	cce <Port_schm_read_msr>
   10a44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a46:	9b00      	ldr	r3, [sp, #0]
   10a48:	f003 0301 	and.w	r3, r3, #1
   10a4c:	2b00      	cmp	r3, #0
   10a4e:	d100      	bne.n	10a52 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   10a52:	490a      	ldr	r1, [pc, #40]	; (10a7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   10a54:	9b01      	ldr	r3, [sp, #4]
   10a56:	9a00      	ldr	r2, [sp, #0]
   10a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   10a5c:	4a06      	ldr	r2, [pc, #24]	; (10a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   10a5e:	9b01      	ldr	r3, [sp, #4]
   10a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a64:	1c5a      	adds	r2, r3, #1
   10a66:	4904      	ldr	r1, [pc, #16]	; (10a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   10a68:	9b01      	ldr	r3, [sp, #4]
   10a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a6e:	bf00      	nop
   10a70:	b003      	add	sp, #12
   10a72:	f85d fb04 	ldr.w	pc, [sp], #4
   10a76:	bf00      	nop
   10a78:	1fff91b8 	.word	0x1fff91b8
   10a7c:	1fff91b4 	.word	0x1fff91b4

00010a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   10a80:	b500      	push	{lr}
   10a82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a84:	f7f0 fef2 	bl	186c <Sys_GetCoreID>
   10a88:	4603      	mov	r3, r0
   10a8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   10a8c:	4a0d      	ldr	r2, [pc, #52]	; (10ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   10a8e:	9b01      	ldr	r3, [sp, #4]
   10a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a94:	1e5a      	subs	r2, r3, #1
   10a96:	490b      	ldr	r1, [pc, #44]	; (10ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   10a98:	9b01      	ldr	r3, [sp, #4]
   10a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   10a9e:	4a0a      	ldr	r2, [pc, #40]	; (10ac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   10aa0:	9b01      	ldr	r3, [sp, #4]
   10aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aa6:	f003 0301 	and.w	r3, r3, #1
   10aaa:	2b00      	cmp	r3, #0
   10aac:	d106      	bne.n	10abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   10aae:	4a05      	ldr	r2, [pc, #20]	; (10ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   10ab0:	9b01      	ldr	r3, [sp, #4]
   10ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ab6:	2b00      	cmp	r3, #0
   10ab8:	d100      	bne.n	10abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10aba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10abc:	bf00      	nop
   10abe:	b003      	add	sp, #12
   10ac0:	f85d fb04 	ldr.w	pc, [sp], #4
   10ac4:	1fff91b8 	.word	0x1fff91b8
   10ac8:	1fff91b4 	.word	0x1fff91b4

00010acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   10acc:	b500      	push	{lr}
   10ace:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ad0:	f7f0 fecc 	bl	186c <Sys_GetCoreID>
   10ad4:	4603      	mov	r3, r0
   10ad6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   10ad8:	4a10      	ldr	r2, [pc, #64]	; (10b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   10ada:	9b01      	ldr	r3, [sp, #4]
   10adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ae0:	2b00      	cmp	r3, #0
   10ae2:	d10d      	bne.n	10b00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ae4:	f7f0 f8f3 	bl	cce <Port_schm_read_msr>
   10ae8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10aea:	9b00      	ldr	r3, [sp, #0]
   10aec:	f003 0301 	and.w	r3, r3, #1
   10af0:	2b00      	cmp	r3, #0
   10af2:	d100      	bne.n	10af6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10af4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   10af6:	490a      	ldr	r1, [pc, #40]	; (10b20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   10af8:	9b01      	ldr	r3, [sp, #4]
   10afa:	9a00      	ldr	r2, [sp, #0]
   10afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   10b00:	4a06      	ldr	r2, [pc, #24]	; (10b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   10b02:	9b01      	ldr	r3, [sp, #4]
   10b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b08:	1c5a      	adds	r2, r3, #1
   10b0a:	4904      	ldr	r1, [pc, #16]	; (10b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   10b0c:	9b01      	ldr	r3, [sp, #4]
   10b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b12:	bf00      	nop
   10b14:	b003      	add	sp, #12
   10b16:	f85d fb04 	ldr.w	pc, [sp], #4
   10b1a:	bf00      	nop
   10b1c:	1fff91c0 	.word	0x1fff91c0
   10b20:	1fff91bc 	.word	0x1fff91bc

00010b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   10b24:	b500      	push	{lr}
   10b26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b28:	f7f0 fea0 	bl	186c <Sys_GetCoreID>
   10b2c:	4603      	mov	r3, r0
   10b2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   10b30:	4a0d      	ldr	r2, [pc, #52]	; (10b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   10b32:	9b01      	ldr	r3, [sp, #4]
   10b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b38:	1e5a      	subs	r2, r3, #1
   10b3a:	490b      	ldr	r1, [pc, #44]	; (10b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   10b3c:	9b01      	ldr	r3, [sp, #4]
   10b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   10b42:	4a0a      	ldr	r2, [pc, #40]	; (10b6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   10b44:	9b01      	ldr	r3, [sp, #4]
   10b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b4a:	f003 0301 	and.w	r3, r3, #1
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d106      	bne.n	10b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   10b52:	4a05      	ldr	r2, [pc, #20]	; (10b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   10b54:	9b01      	ldr	r3, [sp, #4]
   10b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b5a:	2b00      	cmp	r3, #0
   10b5c:	d100      	bne.n	10b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b60:	bf00      	nop
   10b62:	b003      	add	sp, #12
   10b64:	f85d fb04 	ldr.w	pc, [sp], #4
   10b68:	1fff91c0 	.word	0x1fff91c0
   10b6c:	1fff91bc 	.word	0x1fff91bc

00010b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   10b70:	b500      	push	{lr}
   10b72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b74:	f7f0 fe7a 	bl	186c <Sys_GetCoreID>
   10b78:	4603      	mov	r3, r0
   10b7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   10b7c:	4a10      	ldr	r2, [pc, #64]	; (10bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   10b7e:	9b01      	ldr	r3, [sp, #4]
   10b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b84:	2b00      	cmp	r3, #0
   10b86:	d10d      	bne.n	10ba4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b88:	f7f0 f8a1 	bl	cce <Port_schm_read_msr>
   10b8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b8e:	9b00      	ldr	r3, [sp, #0]
   10b90:	f003 0301 	and.w	r3, r3, #1
   10b94:	2b00      	cmp	r3, #0
   10b96:	d100      	bne.n	10b9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   10b9a:	490a      	ldr	r1, [pc, #40]	; (10bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   10b9c:	9b01      	ldr	r3, [sp, #4]
   10b9e:	9a00      	ldr	r2, [sp, #0]
   10ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   10ba4:	4a06      	ldr	r2, [pc, #24]	; (10bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   10ba6:	9b01      	ldr	r3, [sp, #4]
   10ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bac:	1c5a      	adds	r2, r3, #1
   10bae:	4904      	ldr	r1, [pc, #16]	; (10bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   10bb0:	9b01      	ldr	r3, [sp, #4]
   10bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10bb6:	bf00      	nop
   10bb8:	b003      	add	sp, #12
   10bba:	f85d fb04 	ldr.w	pc, [sp], #4
   10bbe:	bf00      	nop
   10bc0:	1fff91c8 	.word	0x1fff91c8
   10bc4:	1fff91c4 	.word	0x1fff91c4

00010bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   10bc8:	b500      	push	{lr}
   10bca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bcc:	f7f0 fe4e 	bl	186c <Sys_GetCoreID>
   10bd0:	4603      	mov	r3, r0
   10bd2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   10bd4:	4a0d      	ldr	r2, [pc, #52]	; (10c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   10bd6:	9b01      	ldr	r3, [sp, #4]
   10bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bdc:	1e5a      	subs	r2, r3, #1
   10bde:	490b      	ldr	r1, [pc, #44]	; (10c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   10be0:	9b01      	ldr	r3, [sp, #4]
   10be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10be6:	4a0a      	ldr	r2, [pc, #40]	; (10c10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   10be8:	9b01      	ldr	r3, [sp, #4]
   10bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bee:	f003 0301 	and.w	r3, r3, #1
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	d106      	bne.n	10c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   10bf6:	4a05      	ldr	r2, [pc, #20]	; (10c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   10bf8:	9b01      	ldr	r3, [sp, #4]
   10bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d100      	bne.n	10c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c04:	bf00      	nop
   10c06:	b003      	add	sp, #12
   10c08:	f85d fb04 	ldr.w	pc, [sp], #4
   10c0c:	1fff91c8 	.word	0x1fff91c8
   10c10:	1fff91c4 	.word	0x1fff91c4

00010c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   10c14:	b500      	push	{lr}
   10c16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c18:	f7f0 fe28 	bl	186c <Sys_GetCoreID>
   10c1c:	4603      	mov	r3, r0
   10c1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   10c20:	4a10      	ldr	r2, [pc, #64]	; (10c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   10c22:	9b01      	ldr	r3, [sp, #4]
   10c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c28:	2b00      	cmp	r3, #0
   10c2a:	d10d      	bne.n	10c48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c2c:	f7f0 f84f 	bl	cce <Port_schm_read_msr>
   10c30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c32:	9b00      	ldr	r3, [sp, #0]
   10c34:	f003 0301 	and.w	r3, r3, #1
   10c38:	2b00      	cmp	r3, #0
   10c3a:	d100      	bne.n	10c3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   10c3e:	490a      	ldr	r1, [pc, #40]	; (10c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   10c40:	9b01      	ldr	r3, [sp, #4]
   10c42:	9a00      	ldr	r2, [sp, #0]
   10c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   10c48:	4a06      	ldr	r2, [pc, #24]	; (10c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   10c4a:	9b01      	ldr	r3, [sp, #4]
   10c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c50:	1c5a      	adds	r2, r3, #1
   10c52:	4904      	ldr	r1, [pc, #16]	; (10c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   10c54:	9b01      	ldr	r3, [sp, #4]
   10c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c5a:	bf00      	nop
   10c5c:	b003      	add	sp, #12
   10c5e:	f85d fb04 	ldr.w	pc, [sp], #4
   10c62:	bf00      	nop
   10c64:	1fff91d0 	.word	0x1fff91d0
   10c68:	1fff91cc 	.word	0x1fff91cc

00010c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   10c6c:	b500      	push	{lr}
   10c6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c70:	f7f0 fdfc 	bl	186c <Sys_GetCoreID>
   10c74:	4603      	mov	r3, r0
   10c76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   10c78:	4a0d      	ldr	r2, [pc, #52]	; (10cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   10c7a:	9b01      	ldr	r3, [sp, #4]
   10c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c80:	1e5a      	subs	r2, r3, #1
   10c82:	490b      	ldr	r1, [pc, #44]	; (10cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   10c84:	9b01      	ldr	r3, [sp, #4]
   10c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   10c8a:	4a0a      	ldr	r2, [pc, #40]	; (10cb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   10c8c:	9b01      	ldr	r3, [sp, #4]
   10c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c92:	f003 0301 	and.w	r3, r3, #1
   10c96:	2b00      	cmp	r3, #0
   10c98:	d106      	bne.n	10ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   10c9a:	4a05      	ldr	r2, [pc, #20]	; (10cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   10c9c:	9b01      	ldr	r3, [sp, #4]
   10c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ca2:	2b00      	cmp	r3, #0
   10ca4:	d100      	bne.n	10ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ca6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ca8:	bf00      	nop
   10caa:	b003      	add	sp, #12
   10cac:	f85d fb04 	ldr.w	pc, [sp], #4
   10cb0:	1fff91d0 	.word	0x1fff91d0
   10cb4:	1fff91cc 	.word	0x1fff91cc

00010cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   10cb8:	b500      	push	{lr}
   10cba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cbc:	f7f0 fdd6 	bl	186c <Sys_GetCoreID>
   10cc0:	4603      	mov	r3, r0
   10cc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   10cc4:	4a10      	ldr	r2, [pc, #64]	; (10d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   10cc6:	9b01      	ldr	r3, [sp, #4]
   10cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ccc:	2b00      	cmp	r3, #0
   10cce:	d10d      	bne.n	10cec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cd0:	f7ef fffd 	bl	cce <Port_schm_read_msr>
   10cd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cd6:	9b00      	ldr	r3, [sp, #0]
   10cd8:	f003 0301 	and.w	r3, r3, #1
   10cdc:	2b00      	cmp	r3, #0
   10cde:	d100      	bne.n	10ce2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ce0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10ce2:	490a      	ldr	r1, [pc, #40]	; (10d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   10ce4:	9b01      	ldr	r3, [sp, #4]
   10ce6:	9a00      	ldr	r2, [sp, #0]
   10ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   10cec:	4a06      	ldr	r2, [pc, #24]	; (10d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   10cee:	9b01      	ldr	r3, [sp, #4]
   10cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cf4:	1c5a      	adds	r2, r3, #1
   10cf6:	4904      	ldr	r1, [pc, #16]	; (10d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   10cf8:	9b01      	ldr	r3, [sp, #4]
   10cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10cfe:	bf00      	nop
   10d00:	b003      	add	sp, #12
   10d02:	f85d fb04 	ldr.w	pc, [sp], #4
   10d06:	bf00      	nop
   10d08:	1fff91d8 	.word	0x1fff91d8
   10d0c:	1fff91d4 	.word	0x1fff91d4

00010d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   10d10:	b500      	push	{lr}
   10d12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d14:	f7f0 fdaa 	bl	186c <Sys_GetCoreID>
   10d18:	4603      	mov	r3, r0
   10d1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   10d1c:	4a0d      	ldr	r2, [pc, #52]	; (10d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   10d1e:	9b01      	ldr	r3, [sp, #4]
   10d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d24:	1e5a      	subs	r2, r3, #1
   10d26:	490b      	ldr	r1, [pc, #44]	; (10d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   10d28:	9b01      	ldr	r3, [sp, #4]
   10d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   10d2e:	4a0a      	ldr	r2, [pc, #40]	; (10d58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   10d30:	9b01      	ldr	r3, [sp, #4]
   10d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d36:	f003 0301 	and.w	r3, r3, #1
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	d106      	bne.n	10d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   10d3e:	4a05      	ldr	r2, [pc, #20]	; (10d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   10d40:	9b01      	ldr	r3, [sp, #4]
   10d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d46:	2b00      	cmp	r3, #0
   10d48:	d100      	bne.n	10d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d4c:	bf00      	nop
   10d4e:	b003      	add	sp, #12
   10d50:	f85d fb04 	ldr.w	pc, [sp], #4
   10d54:	1fff91d8 	.word	0x1fff91d8
   10d58:	1fff91d4 	.word	0x1fff91d4

00010d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   10d5c:	b500      	push	{lr}
   10d5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d60:	f7f0 fd84 	bl	186c <Sys_GetCoreID>
   10d64:	4603      	mov	r3, r0
   10d66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   10d68:	4a10      	ldr	r2, [pc, #64]	; (10dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   10d6a:	9b01      	ldr	r3, [sp, #4]
   10d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d70:	2b00      	cmp	r3, #0
   10d72:	d10d      	bne.n	10d90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d74:	f7ef ffab 	bl	cce <Port_schm_read_msr>
   10d78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d7a:	9b00      	ldr	r3, [sp, #0]
   10d7c:	f003 0301 	and.w	r3, r3, #1
   10d80:	2b00      	cmp	r3, #0
   10d82:	d100      	bne.n	10d86 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10d86:	490a      	ldr	r1, [pc, #40]	; (10db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   10d88:	9b01      	ldr	r3, [sp, #4]
   10d8a:	9a00      	ldr	r2, [sp, #0]
   10d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   10d90:	4a06      	ldr	r2, [pc, #24]	; (10dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   10d92:	9b01      	ldr	r3, [sp, #4]
   10d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d98:	1c5a      	adds	r2, r3, #1
   10d9a:	4904      	ldr	r1, [pc, #16]	; (10dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   10d9c:	9b01      	ldr	r3, [sp, #4]
   10d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10da2:	bf00      	nop
   10da4:	b003      	add	sp, #12
   10da6:	f85d fb04 	ldr.w	pc, [sp], #4
   10daa:	bf00      	nop
   10dac:	1fff91e0 	.word	0x1fff91e0
   10db0:	1fff91dc 	.word	0x1fff91dc

00010db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   10db4:	b500      	push	{lr}
   10db6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10db8:	f7f0 fd58 	bl	186c <Sys_GetCoreID>
   10dbc:	4603      	mov	r3, r0
   10dbe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   10dc0:	4a0d      	ldr	r2, [pc, #52]	; (10df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   10dc2:	9b01      	ldr	r3, [sp, #4]
   10dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dc8:	1e5a      	subs	r2, r3, #1
   10dca:	490b      	ldr	r1, [pc, #44]	; (10df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   10dcc:	9b01      	ldr	r3, [sp, #4]
   10dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10dd2:	4a0a      	ldr	r2, [pc, #40]	; (10dfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   10dd4:	9b01      	ldr	r3, [sp, #4]
   10dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dda:	f003 0301 	and.w	r3, r3, #1
   10dde:	2b00      	cmp	r3, #0
   10de0:	d106      	bne.n	10df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   10de2:	4a05      	ldr	r2, [pc, #20]	; (10df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   10de4:	9b01      	ldr	r3, [sp, #4]
   10de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dea:	2b00      	cmp	r3, #0
   10dec:	d100      	bne.n	10df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10dee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10df0:	bf00      	nop
   10df2:	b003      	add	sp, #12
   10df4:	f85d fb04 	ldr.w	pc, [sp], #4
   10df8:	1fff91e0 	.word	0x1fff91e0
   10dfc:	1fff91dc 	.word	0x1fff91dc

00010e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   10e00:	b500      	push	{lr}
   10e02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e04:	f7f0 fd32 	bl	186c <Sys_GetCoreID>
   10e08:	4603      	mov	r3, r0
   10e0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   10e0c:	4a10      	ldr	r2, [pc, #64]	; (10e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   10e0e:	9b01      	ldr	r3, [sp, #4]
   10e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e14:	2b00      	cmp	r3, #0
   10e16:	d10d      	bne.n	10e34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e18:	f7ef ff59 	bl	cce <Port_schm_read_msr>
   10e1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e1e:	9b00      	ldr	r3, [sp, #0]
   10e20:	f003 0301 	and.w	r3, r3, #1
   10e24:	2b00      	cmp	r3, #0
   10e26:	d100      	bne.n	10e2a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10e2a:	490a      	ldr	r1, [pc, #40]	; (10e54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   10e2c:	9b01      	ldr	r3, [sp, #4]
   10e2e:	9a00      	ldr	r2, [sp, #0]
   10e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   10e34:	4a06      	ldr	r2, [pc, #24]	; (10e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   10e36:	9b01      	ldr	r3, [sp, #4]
   10e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e3c:	1c5a      	adds	r2, r3, #1
   10e3e:	4904      	ldr	r1, [pc, #16]	; (10e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   10e40:	9b01      	ldr	r3, [sp, #4]
   10e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e46:	bf00      	nop
   10e48:	b003      	add	sp, #12
   10e4a:	f85d fb04 	ldr.w	pc, [sp], #4
   10e4e:	bf00      	nop
   10e50:	1fff91e8 	.word	0x1fff91e8
   10e54:	1fff91e4 	.word	0x1fff91e4

00010e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   10e58:	b500      	push	{lr}
   10e5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e5c:	f7f0 fd06 	bl	186c <Sys_GetCoreID>
   10e60:	4603      	mov	r3, r0
   10e62:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   10e64:	4a0d      	ldr	r2, [pc, #52]	; (10e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10e66:	9b01      	ldr	r3, [sp, #4]
   10e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e6c:	1e5a      	subs	r2, r3, #1
   10e6e:	490b      	ldr	r1, [pc, #44]	; (10e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10e70:	9b01      	ldr	r3, [sp, #4]
   10e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10e76:	4a0a      	ldr	r2, [pc, #40]	; (10ea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   10e78:	9b01      	ldr	r3, [sp, #4]
   10e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e7e:	f003 0301 	and.w	r3, r3, #1
   10e82:	2b00      	cmp	r3, #0
   10e84:	d106      	bne.n	10e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   10e86:	4a05      	ldr	r2, [pc, #20]	; (10e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10e88:	9b01      	ldr	r3, [sp, #4]
   10e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e8e:	2b00      	cmp	r3, #0
   10e90:	d100      	bne.n	10e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e94:	bf00      	nop
   10e96:	b003      	add	sp, #12
   10e98:	f85d fb04 	ldr.w	pc, [sp], #4
   10e9c:	1fff91e8 	.word	0x1fff91e8
   10ea0:	1fff91e4 	.word	0x1fff91e4

00010ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   10ea4:	b500      	push	{lr}
   10ea6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ea8:	f7f0 fce0 	bl	186c <Sys_GetCoreID>
   10eac:	4603      	mov	r3, r0
   10eae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   10eb0:	4a10      	ldr	r2, [pc, #64]	; (10ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   10eb2:	9b01      	ldr	r3, [sp, #4]
   10eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eb8:	2b00      	cmp	r3, #0
   10eba:	d10d      	bne.n	10ed8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ebc:	f7ef ff07 	bl	cce <Port_schm_read_msr>
   10ec0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ec2:	9b00      	ldr	r3, [sp, #0]
   10ec4:	f003 0301 	and.w	r3, r3, #1
   10ec8:	2b00      	cmp	r3, #0
   10eca:	d100      	bne.n	10ece <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ecc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10ece:	490a      	ldr	r1, [pc, #40]	; (10ef8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   10ed0:	9b01      	ldr	r3, [sp, #4]
   10ed2:	9a00      	ldr	r2, [sp, #0]
   10ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   10ed8:	4a06      	ldr	r2, [pc, #24]	; (10ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   10eda:	9b01      	ldr	r3, [sp, #4]
   10edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ee0:	1c5a      	adds	r2, r3, #1
   10ee2:	4904      	ldr	r1, [pc, #16]	; (10ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   10ee4:	9b01      	ldr	r3, [sp, #4]
   10ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10eea:	bf00      	nop
   10eec:	b003      	add	sp, #12
   10eee:	f85d fb04 	ldr.w	pc, [sp], #4
   10ef2:	bf00      	nop
   10ef4:	1fff91f0 	.word	0x1fff91f0
   10ef8:	1fff91ec 	.word	0x1fff91ec

00010efc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   10efc:	b500      	push	{lr}
   10efe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f00:	f7f0 fcb4 	bl	186c <Sys_GetCoreID>
   10f04:	4603      	mov	r3, r0
   10f06:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   10f08:	4a0d      	ldr	r2, [pc, #52]	; (10f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   10f0a:	9b01      	ldr	r3, [sp, #4]
   10f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f10:	1e5a      	subs	r2, r3, #1
   10f12:	490b      	ldr	r1, [pc, #44]	; (10f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   10f14:	9b01      	ldr	r3, [sp, #4]
   10f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10f1a:	4a0a      	ldr	r2, [pc, #40]	; (10f44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   10f1c:	9b01      	ldr	r3, [sp, #4]
   10f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f22:	f003 0301 	and.w	r3, r3, #1
   10f26:	2b00      	cmp	r3, #0
   10f28:	d106      	bne.n	10f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   10f2a:	4a05      	ldr	r2, [pc, #20]	; (10f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   10f2c:	9b01      	ldr	r3, [sp, #4]
   10f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f32:	2b00      	cmp	r3, #0
   10f34:	d100      	bne.n	10f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f38:	bf00      	nop
   10f3a:	b003      	add	sp, #12
   10f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   10f40:	1fff91f0 	.word	0x1fff91f0
   10f44:	1fff91ec 	.word	0x1fff91ec

00010f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   10f48:	b500      	push	{lr}
   10f4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f4c:	f7f0 fc8e 	bl	186c <Sys_GetCoreID>
   10f50:	4603      	mov	r3, r0
   10f52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   10f54:	4a10      	ldr	r2, [pc, #64]	; (10f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   10f56:	9b01      	ldr	r3, [sp, #4]
   10f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f5c:	2b00      	cmp	r3, #0
   10f5e:	d10d      	bne.n	10f7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f60:	f7ef feb5 	bl	cce <Port_schm_read_msr>
   10f64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f66:	9b00      	ldr	r3, [sp, #0]
   10f68:	f003 0301 	and.w	r3, r3, #1
   10f6c:	2b00      	cmp	r3, #0
   10f6e:	d100      	bne.n	10f72 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10f72:	490a      	ldr	r1, [pc, #40]	; (10f9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   10f74:	9b01      	ldr	r3, [sp, #4]
   10f76:	9a00      	ldr	r2, [sp, #0]
   10f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   10f7c:	4a06      	ldr	r2, [pc, #24]	; (10f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   10f7e:	9b01      	ldr	r3, [sp, #4]
   10f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f84:	1c5a      	adds	r2, r3, #1
   10f86:	4904      	ldr	r1, [pc, #16]	; (10f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   10f88:	9b01      	ldr	r3, [sp, #4]
   10f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f8e:	bf00      	nop
   10f90:	b003      	add	sp, #12
   10f92:	f85d fb04 	ldr.w	pc, [sp], #4
   10f96:	bf00      	nop
   10f98:	1fff91f8 	.word	0x1fff91f8
   10f9c:	1fff91f4 	.word	0x1fff91f4

00010fa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   10fa0:	b500      	push	{lr}
   10fa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fa4:	f7f0 fc62 	bl	186c <Sys_GetCoreID>
   10fa8:	4603      	mov	r3, r0
   10faa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   10fac:	4a0d      	ldr	r2, [pc, #52]	; (10fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10fae:	9b01      	ldr	r3, [sp, #4]
   10fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fb4:	1e5a      	subs	r2, r3, #1
   10fb6:	490b      	ldr	r1, [pc, #44]	; (10fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10fb8:	9b01      	ldr	r3, [sp, #4]
   10fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10fbe:	4a0a      	ldr	r2, [pc, #40]	; (10fe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   10fc0:	9b01      	ldr	r3, [sp, #4]
   10fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fc6:	f003 0301 	and.w	r3, r3, #1
   10fca:	2b00      	cmp	r3, #0
   10fcc:	d106      	bne.n	10fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   10fce:	4a05      	ldr	r2, [pc, #20]	; (10fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10fd0:	9b01      	ldr	r3, [sp, #4]
   10fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fd6:	2b00      	cmp	r3, #0
   10fd8:	d100      	bne.n	10fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10fda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10fdc:	bf00      	nop
   10fde:	b003      	add	sp, #12
   10fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   10fe4:	1fff91f8 	.word	0x1fff91f8
   10fe8:	1fff91f4 	.word	0x1fff91f4

00010fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   10fec:	b500      	push	{lr}
   10fee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ff0:	f7f0 fc3c 	bl	186c <Sys_GetCoreID>
   10ff4:	4603      	mov	r3, r0
   10ff6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   10ff8:	4a10      	ldr	r2, [pc, #64]	; (1103c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   10ffa:	9b01      	ldr	r3, [sp, #4]
   10ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11000:	2b00      	cmp	r3, #0
   11002:	d10d      	bne.n	11020 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11004:	f7ef fe63 	bl	cce <Port_schm_read_msr>
   11008:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1100a:	9b00      	ldr	r3, [sp, #0]
   1100c:	f003 0301 	and.w	r3, r3, #1
   11010:	2b00      	cmp	r3, #0
   11012:	d100      	bne.n	11016 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11014:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   11016:	490a      	ldr	r1, [pc, #40]	; (11040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   11018:	9b01      	ldr	r3, [sp, #4]
   1101a:	9a00      	ldr	r2, [sp, #0]
   1101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   11020:	4a06      	ldr	r2, [pc, #24]	; (1103c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   11022:	9b01      	ldr	r3, [sp, #4]
   11024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11028:	1c5a      	adds	r2, r3, #1
   1102a:	4904      	ldr	r1, [pc, #16]	; (1103c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1102c:	9b01      	ldr	r3, [sp, #4]
   1102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11032:	bf00      	nop
   11034:	b003      	add	sp, #12
   11036:	f85d fb04 	ldr.w	pc, [sp], #4
   1103a:	bf00      	nop
   1103c:	1fff9200 	.word	0x1fff9200
   11040:	1fff91fc 	.word	0x1fff91fc

00011044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   11044:	b500      	push	{lr}
   11046:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11048:	f7f0 fc10 	bl	186c <Sys_GetCoreID>
   1104c:	4603      	mov	r3, r0
   1104e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   11050:	4a0d      	ldr	r2, [pc, #52]	; (11088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   11052:	9b01      	ldr	r3, [sp, #4]
   11054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11058:	1e5a      	subs	r2, r3, #1
   1105a:	490b      	ldr	r1, [pc, #44]	; (11088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1105c:	9b01      	ldr	r3, [sp, #4]
   1105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   11062:	4a0a      	ldr	r2, [pc, #40]	; (1108c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   11064:	9b01      	ldr	r3, [sp, #4]
   11066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1106a:	f003 0301 	and.w	r3, r3, #1
   1106e:	2b00      	cmp	r3, #0
   11070:	d106      	bne.n	11080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   11072:	4a05      	ldr	r2, [pc, #20]	; (11088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   11074:	9b01      	ldr	r3, [sp, #4]
   11076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1107a:	2b00      	cmp	r3, #0
   1107c:	d100      	bne.n	11080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1107e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11080:	bf00      	nop
   11082:	b003      	add	sp, #12
   11084:	f85d fb04 	ldr.w	pc, [sp], #4
   11088:	1fff9200 	.word	0x1fff9200
   1108c:	1fff91fc 	.word	0x1fff91fc

00011090 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   11090:	bf00      	nop
   11092:	4770      	bx	lr

00011094 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   11094:	b510      	push	{r4, lr}
   11096:	b084      	sub	sp, #16
   11098:	4604      	mov	r4, r0
   1109a:	4608      	mov	r0, r1
   1109c:	4611      	mov	r1, r2
   1109e:	461a      	mov	r2, r3
   110a0:	4623      	mov	r3, r4
   110a2:	f8ad 3006 	strh.w	r3, [sp, #6]
   110a6:	4603      	mov	r3, r0
   110a8:	f88d 3005 	strb.w	r3, [sp, #5]
   110ac:	460b      	mov	r3, r1
   110ae:	f88d 3004 	strb.w	r3, [sp, #4]
   110b2:	4613      	mov	r3, r2
   110b4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110b8:	f7f0 fbd8 	bl	186c <Sys_GetCoreID>
   110bc:	4603      	mov	r3, r0
   110be:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   110c0:	490d      	ldr	r1, [pc, #52]	; (110f8 <Det_ReportError+0x64>)
   110c2:	9b03      	ldr	r3, [sp, #12]
   110c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   110c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   110cc:	4a0b      	ldr	r2, [pc, #44]	; (110fc <Det_ReportError+0x68>)
   110ce:	9b03      	ldr	r3, [sp, #12]
   110d0:	4413      	add	r3, r2
   110d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   110d6:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   110d8:	4a09      	ldr	r2, [pc, #36]	; (11100 <Det_ReportError+0x6c>)
   110da:	9b03      	ldr	r3, [sp, #12]
   110dc:	4413      	add	r3, r2
   110de:	f89d 2004 	ldrb.w	r2, [sp, #4]
   110e2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   110e4:	4a07      	ldr	r2, [pc, #28]	; (11104 <Det_ReportError+0x70>)
   110e6:	9b03      	ldr	r3, [sp, #12]
   110e8:	4413      	add	r3, r2
   110ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
   110ee:	701a      	strb	r2, [r3, #0]

    return E_OK;
   110f0:	2300      	movs	r3, #0
}
   110f2:	4618      	mov	r0, r3
   110f4:	b004      	add	sp, #16
   110f6:	bd10      	pop	{r4, pc}
   110f8:	1fff922c 	.word	0x1fff922c
   110fc:	1fff9204 	.word	0x1fff9204
   11100:	1fff9208 	.word	0x1fff9208
   11104:	1fff920c 	.word	0x1fff920c

00011108 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   11108:	b510      	push	{r4, lr}
   1110a:	b084      	sub	sp, #16
   1110c:	4604      	mov	r4, r0
   1110e:	4608      	mov	r0, r1
   11110:	4611      	mov	r1, r2
   11112:	461a      	mov	r2, r3
   11114:	4623      	mov	r3, r4
   11116:	f8ad 3006 	strh.w	r3, [sp, #6]
   1111a:	4603      	mov	r3, r0
   1111c:	f88d 3005 	strb.w	r3, [sp, #5]
   11120:	460b      	mov	r3, r1
   11122:	f88d 3004 	strb.w	r3, [sp, #4]
   11126:	4613      	mov	r3, r2
   11128:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1112c:	f7f0 fb9e 	bl	186c <Sys_GetCoreID>
   11130:	4603      	mov	r3, r0
   11132:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   11134:	490d      	ldr	r1, [pc, #52]	; (1116c <Det_ReportRuntimeError+0x64>)
   11136:	9b03      	ldr	r3, [sp, #12]
   11138:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1113c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   11140:	4a0b      	ldr	r2, [pc, #44]	; (11170 <Det_ReportRuntimeError+0x68>)
   11142:	9b03      	ldr	r3, [sp, #12]
   11144:	4413      	add	r3, r2
   11146:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1114a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   1114c:	4a09      	ldr	r2, [pc, #36]	; (11174 <Det_ReportRuntimeError+0x6c>)
   1114e:	9b03      	ldr	r3, [sp, #12]
   11150:	4413      	add	r3, r2
   11152:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11156:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   11158:	4a07      	ldr	r2, [pc, #28]	; (11178 <Det_ReportRuntimeError+0x70>)
   1115a:	9b03      	ldr	r3, [sp, #12]
   1115c:	4413      	add	r3, r2
   1115e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11162:	701a      	strb	r2, [r3, #0]

    return E_OK;
   11164:	2300      	movs	r3, #0
}
   11166:	4618      	mov	r0, r3
   11168:	b004      	add	sp, #16
   1116a:	bd10      	pop	{r4, pc}
   1116c:	1fff9230 	.word	0x1fff9230
   11170:	1fff9210 	.word	0x1fff9210
   11174:	1fff9214 	.word	0x1fff9214
   11178:	1fff9218 	.word	0x1fff9218

0001117c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   1117c:	b510      	push	{r4, lr}
   1117e:	b084      	sub	sp, #16
   11180:	4604      	mov	r4, r0
   11182:	4608      	mov	r0, r1
   11184:	4611      	mov	r1, r2
   11186:	461a      	mov	r2, r3
   11188:	4623      	mov	r3, r4
   1118a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1118e:	4603      	mov	r3, r0
   11190:	f88d 3005 	strb.w	r3, [sp, #5]
   11194:	460b      	mov	r3, r1
   11196:	f88d 3004 	strb.w	r3, [sp, #4]
   1119a:	4613      	mov	r3, r2
   1119c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111a0:	f7f0 fb64 	bl	186c <Sys_GetCoreID>
   111a4:	4603      	mov	r3, r0
   111a6:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   111a8:	490d      	ldr	r1, [pc, #52]	; (111e0 <Det_ReportTransientFault+0x64>)
   111aa:	9b03      	ldr	r3, [sp, #12]
   111ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   111b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   111b4:	4a0b      	ldr	r2, [pc, #44]	; (111e4 <Det_ReportTransientFault+0x68>)
   111b6:	9b03      	ldr	r3, [sp, #12]
   111b8:	4413      	add	r3, r2
   111ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
   111be:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   111c0:	4a09      	ldr	r2, [pc, #36]	; (111e8 <Det_ReportTransientFault+0x6c>)
   111c2:	9b03      	ldr	r3, [sp, #12]
   111c4:	4413      	add	r3, r2
   111c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   111ca:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   111cc:	4a07      	ldr	r2, [pc, #28]	; (111ec <Det_ReportTransientFault+0x70>)
   111ce:	9b03      	ldr	r3, [sp, #12]
   111d0:	4413      	add	r3, r2
   111d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   111d6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   111d8:	2300      	movs	r3, #0
}
   111da:	4618      	mov	r0, r3
   111dc:	b004      	add	sp, #16
   111de:	bd10      	pop	{r4, pc}
   111e0:	1fff9228 	.word	0x1fff9228
   111e4:	1fff921c 	.word	0x1fff921c
   111e8:	1fff9220 	.word	0x1fff9220
   111ec:	1fff9224 	.word	0x1fff9224

000111f0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   111f0:	bf00      	nop
   111f2:	4770      	bx	lr

000111f4 <Fls_ACEraseRomEnd>:
   111f4:	74747542 	.word	0x74747542
   111f8:	31206e6f 	.word	0x31206e6f
   111fc:	74636120 	.word	0x74636120
   11200:	3a6e6f69 	.word	0x3a6e6f69
   11204:	4e495320 	.word	0x4e495320
   11208:	5f454c47 	.word	0x5f454c47
   1120c:	43494c43 	.word	0x43494c43
   11210:	000a204b 	.word	0x000a204b
   11214:	20746f50 	.word	0x20746f50
   11218:	44412031 	.word	0x44412031
   1121c:	72203043 	.word	0x72203043
   11220:	73697365 	.word	0x73697365
   11224:	636e6174 	.word	0x636e6174
   11228:	61762065 	.word	0x61762065
   1122c:	2065756c 	.word	0x2065756c
   11230:	6f206e69 	.word	0x6f206e69
   11234:	3a736d68 	.word	0x3a736d68
   11238:	0a642520 	.word	0x0a642520
   1123c:	00000000 	.word	0x00000000
   11240:	74747542 	.word	0x74747542
   11244:	31206e6f 	.word	0x31206e6f
   11248:	74636120 	.word	0x74636120
   1124c:	3a6e6f69 	.word	0x3a6e6f69
   11250:	554f4420 	.word	0x554f4420
   11254:	5f454c42 	.word	0x5f454c42
   11258:	43494c43 	.word	0x43494c43
   1125c:	000a204b 	.word	0x000a204b
   11260:	20746f50 	.word	0x20746f50
   11264:	44412032 	.word	0x44412032
   11268:	72203043 	.word	0x72203043
   1126c:	73697365 	.word	0x73697365
   11270:	636e6174 	.word	0x636e6174
   11274:	61762065 	.word	0x61762065
   11278:	2065756c 	.word	0x2065756c
   1127c:	6f206e69 	.word	0x6f206e69
   11280:	3a736d68 	.word	0x3a736d68
   11284:	0a642520 	.word	0x0a642520
   11288:	00000000 	.word	0x00000000
   1128c:	74747542 	.word	0x74747542
   11290:	31206e6f 	.word	0x31206e6f
   11294:	74636120 	.word	0x74636120
   11298:	3a6e6f69 	.word	0x3a6e6f69
   1129c:	4c4f4820 	.word	0x4c4f4820
   112a0:	4c435f44 	.word	0x4c435f44
   112a4:	204b4349 	.word	0x204b4349
   112a8:	0000000a 	.word	0x0000000a
   112ac:	20746f50 	.word	0x20746f50
   112b0:	44412031 	.word	0x44412031
   112b4:	72203143 	.word	0x72203143
   112b8:	73697365 	.word	0x73697365
   112bc:	636e6174 	.word	0x636e6174
   112c0:	61762065 	.word	0x61762065
   112c4:	2065756c 	.word	0x2065756c
   112c8:	6f206e69 	.word	0x6f206e69
   112cc:	3a736d68 	.word	0x3a736d68
   112d0:	0a642520 	.word	0x0a642520
   112d4:	00000000 	.word	0x00000000
   112d8:	74747542 	.word	0x74747542
   112dc:	31206e6f 	.word	0x31206e6f
   112e0:	74636120 	.word	0x74636120
   112e4:	3a6e6f69 	.word	0x3a6e6f69
   112e8:	4c455220 	.word	0x4c455220
   112ec:	45534145 	.word	0x45534145
   112f0:	00000a20 	.word	0x00000a20
   112f4:	20746f50 	.word	0x20746f50
   112f8:	44412032 	.word	0x44412032
   112fc:	72203143 	.word	0x72203143
   11300:	73697365 	.word	0x73697365
   11304:	636e6174 	.word	0x636e6174
   11308:	61762065 	.word	0x61762065
   1130c:	2065756c 	.word	0x2065756c
   11310:	6f206e69 	.word	0x6f206e69
   11314:	3a736d68 	.word	0x3a736d68
   11318:	0a642520 	.word	0x0a642520
   1131c:	00000000 	.word	0x00000000
   11320:	74747542 	.word	0x74747542
   11324:	32206e6f 	.word	0x32206e6f
   11328:	74636120 	.word	0x74636120
   1132c:	3a6e6f69 	.word	0x3a6e6f69
   11330:	4e495320 	.word	0x4e495320
   11334:	5f454c47 	.word	0x5f454c47
   11338:	43494c43 	.word	0x43494c43
   1133c:	000a204b 	.word	0x000a204b
   11340:	74747542 	.word	0x74747542
   11344:	32206e6f 	.word	0x32206e6f
   11348:	74636120 	.word	0x74636120
   1134c:	3a6e6f69 	.word	0x3a6e6f69
   11350:	554f4420 	.word	0x554f4420
   11354:	5f454c42 	.word	0x5f454c42
   11358:	43494c43 	.word	0x43494c43
   1135c:	000a204b 	.word	0x000a204b
   11360:	74747542 	.word	0x74747542
   11364:	32206e6f 	.word	0x32206e6f
   11368:	74636120 	.word	0x74636120
   1136c:	3a6e6f69 	.word	0x3a6e6f69
   11370:	4c4f4820 	.word	0x4c4f4820
   11374:	4c435f44 	.word	0x4c435f44
   11378:	204b4349 	.word	0x204b4349
   1137c:	0000000a 	.word	0x0000000a
   11380:	74747542 	.word	0x74747542
   11384:	32206e6f 	.word	0x32206e6f
   11388:	74636120 	.word	0x74636120
   1138c:	3a6e6f69 	.word	0x3a6e6f69
   11390:	4c455220 	.word	0x4c455220
   11394:	45534145 	.word	0x45534145
   11398:	00000a20 	.word	0x00000a20
   1139c:	74747542 	.word	0x74747542
   113a0:	33206e6f 	.word	0x33206e6f
   113a4:	74636120 	.word	0x74636120
   113a8:	3a6e6f69 	.word	0x3a6e6f69
   113ac:	4e495320 	.word	0x4e495320
   113b0:	5f454c47 	.word	0x5f454c47
   113b4:	43494c43 	.word	0x43494c43
   113b8:	000a204b 	.word	0x000a204b
   113bc:	74747542 	.word	0x74747542
   113c0:	33206e6f 	.word	0x33206e6f
   113c4:	74636120 	.word	0x74636120
   113c8:	3a6e6f69 	.word	0x3a6e6f69
   113cc:	554f4420 	.word	0x554f4420
   113d0:	5f454c42 	.word	0x5f454c42
   113d4:	43494c43 	.word	0x43494c43
   113d8:	000a204b 	.word	0x000a204b
   113dc:	74747542 	.word	0x74747542
   113e0:	33206e6f 	.word	0x33206e6f
   113e4:	74636120 	.word	0x74636120
   113e8:	3a6e6f69 	.word	0x3a6e6f69
   113ec:	4c4f4820 	.word	0x4c4f4820
   113f0:	4c435f44 	.word	0x4c435f44
   113f4:	204b4349 	.word	0x204b4349
   113f8:	0000000a 	.word	0x0000000a
   113fc:	74747542 	.word	0x74747542
   11400:	33206e6f 	.word	0x33206e6f
   11404:	74636120 	.word	0x74636120
   11408:	3a6e6f69 	.word	0x3a6e6f69
   1140c:	4c455220 	.word	0x4c455220
   11410:	45534145 	.word	0x45534145
   11414:	00000a20 	.word	0x00000a20
   11418:	6d726554 	.word	0x6d726554
   1141c:	6c616e69 	.word	0x6c616e69
   11420:	00000000 	.word	0x00000000
   11424:	4c554e28 	.word	0x4c554e28
   11428:	0000294c 	.word	0x0000294c

0001142c <Clock_Ip_au8DividerCallbackIndex>:
   1142c:	0e0d0c00 06030201 0a070409 000b0805     ................

0001143c <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0001144c <Clock_Ip_au8XoscCallbackIndex>:
   1144c:	00000100 00000000 00000000 00000000     ................

0001145c <Clock_Ip_au8IrcoscCallbackIndex>:
   1145c:	03020100 00000004 00000000 00000000     ................

0001146c <Clock_Ip_au8GateCallbackIndex>:
   1146c:	06010200 01040301 00000500 00000000     ................

0001147c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0001148c <Clock_Ip_au8PllCallbackIndex>:
   1148c:	00000100 00000000 00000000 00000000     ................

0001149c <Clock_Ip_au8SelectorCallbackIndex>:
   1149c:	0a090800 03020109 07060504 00000000     ................

000114ac <Clock_Ip_au8PcfsCallbackIndex>:
	...

000114bc <Clock_Ip_au8CmuCallbackIndex>:
	...

000114cc <Clock_Ip_au8ClockFeatures>:
	...
   114dc:	01000000 00000000 00000000 00000002     ................
   114ec:	00000000 00000300 00000000 00040000     ................
   114fc:	00000000 05000000 00000000 00000000     ................
   1150c:	00000006 00000000 00000100 00000000     ................
   1151c:	00010000 00000000 04000000 00000000     ................
   1152c:	00000000 00000005 00000001 00000401     ................
   1153c:	00000200 00050100 00030000 04020000     ................
   1154c:	04000000 02000000 00000005 00000005     ................
   1155c:	00000403 00000600 00050300 00070000     ................
   1156c:	05000000 00000000 00000000 00000006     ................
	...
   115ac:	00050000 00000000 06000000 00000100     ................
   115bc:	00000000 00030007 00000000 00000000     ................
   115cc:	00000000 00060000 00000000 07000000     ................
   115dc:	00000100 00000000 00030008 00000000     ................
	...
   115f4:	00090000 00000000 0a000000 00000100     ................
   11604:	00000000 0003000b 00000000 00000000     ................
   11614:	00000000 000c0000 00000000 0d000000     ................
   11624:	00000100 00000000 0003000e 00000000     ................
   11634:	00000800 00000000 00090000 00000000     ................
   11644:	0a000000 00000000 00000000 0000000b     ................
   11654:	00000000 00000b01 00000000 000b0200     ................
   11664:	00000000 0b030000 00000000 00000000     ................
	...
   1167c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   1168c:	01000000 00000000 00000000 00000007     ................
   1169c:	00007300 00000700 00320000 00090000     .s........2.....
   116ac:	02000000 07000000 00000000 00000021     ............!...
   116bc:	00000009 00000400 00000900 00030000     ................
   116cc:	00070000 61000000 07000000 00000000     .......a........
   116dc:	00000024 00000007 00002500 00000700     $........%......
   116ec:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   116fc:	00000000 00000020 38000004 00003800     .... ......8.8..
   1170c:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   1171c:	04000000 00260000 00000026 66000004     ......&.&......f
   1172c:	00006600 00000400 00370037 00040000     .f......7.7.....
   1173c:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   1174c:	2e000004 00002e00 00000200 00404040     ............@@@.
   1175c:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   1176c:	0000006b 6c000004 00006c00 00000900     k......l.l......
   1177c:	00010000 00090000 00000000 07000000     ................
   1178c:	00000000 00000036 00000007 00003100     ....6........1..
   1179c:	00000700 00490000 00070000 4a000000     ......I........J
   117ac:	07000000 00000000 0000004b 00000007     ........K.......
   117bc:	00004c00 00000700 004d0000 00070000     .L........M.....
   117cc:	3d000000 03000000 00000000 00000000     ...=............

000117dc <Clock_Ip_au16SelectorEntryHardwareValue>:
   117dc:	01010a03 01010001 04040002 02000603     ................
   117ec:	00010810 02020100 00000000 00000007     ................
   117fc:	00000009 00000000 00000c0e 00000000     ................
	...

00011834 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   11834:	00020000 00000300 00000601 00000000     ................
	...

00011864 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   11864:	00000700 00000000 02020000 01010303     ................
   11874:	03020606 00000000 00000000 00000000     ................
	...

00011894 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   11894:	00000001 00000000 02020000 01010303     ................
   118a4:	03020606 00000000 00000000 00000000     ................
	...

000118c4 <Clock_Ip_au8DividerValueHardwareValue>:
   118c4:	00020100 00000003 00000004 00000000     ................
   118d4:	00000005 00000000 00000000 00000000     ................
   118e4:	00000006 00000000 00000000 00000000     ................
	...
   11904:	00000007                                ....

00011908 <Clock_Ip_apxScgPeriphAsyncDivs>:
   11908:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00011918 <Clock_Ip_aeSourceTypeClockName>:
   11918:	00000000 00000001 00000001 00000001     ................
   11928:	00000001 00000001 00000001 00000001     ................
   11938:	00000002 00000003 00000001 00000001     ................
   11948:	00000001 00000001 00000002 00000002     ................
   11958:	00000003 00000003 00000001 00000001     ................
   11968:	00000004 00000004 00000004 00000004     ................
	...

000119d4 <Clock_Ip_aeHwPllName>:
   119d4:	00000009                                ....

000119d8 <Clock_Ip_aeHwDfsName>:
   119d8:	00000057                                W...

000119dc <Clock_Ip_axDividerCallbacks>:
   119dc:	000038ad 000038b7 000038d1 000038eb     .8...8...8...8..
   119ec:	00003905 0000391f 00003939 00003953     .9...9..99..S9..
   119fc:	0000396d 00003987 000039a1 000039bb     m9...9...9...9..
   11a0c:	000039d5 000039ef 00003a09              .9...9...:..

00011a18 <Clock_Ip_axDividerTriggerCallbacks>:
   11a18:	00003d7d 00003d7d                       }=..}=..

00011a20 <Clock_Ip_axExtOscCallbacks>:
   11a20:	00003d89 00003d89 00003d89 00003d93     .=...=...=...=..
   11a30:	00003d89 00003d9d 00003db7 00003dd1     .=...=...=...=..
   11a40:	00003e55 00003e69                       U>..i>..

00011a48 <Clock_Ip_axFracDivCallbacks>:
   11a48:	00004029 00004029 00004033              )@..)@..3@..

00011a54 <Clock_Ip_axGateCallbacks>:
   11a54:	0000404d 00004057 00004157 00004171     M@..W@..WA..qA..
   11a64:	00004107 00004121 000040b7 000040d1     .A..!A...@...@..
   11a74:	00004067 00004081 000041a7 000041c1     g@...@...A...A..
   11a84:	000041f7 00004211                       .A...B..

00011a8c <Clock_Ip_axIntOscCallbacks>:
   11a8c:	000043bd 000043bd 000043c7 000043d1     .C...C...C...C..
   11a9c:	000043eb 00004405 00004419 00004433     .C...D...D..3D..
   11aac:	0000444d 00004461 0000447b 00004495     MD..aD..{D...D..
   11abc:	0000453d 00004557 00004571              =E..WE..qE..

00011ac8 <Clock_Ip_axCmuCallbacks>:
   11ac8:	00004b0d 00004b17 00004b23 00004b0d     .K...K..#K...K..

00011ad8 <Clock_Ip_axPllCallbacks>:
   11ad8:	00004b2d 00004b2d 00004b37 00004b2d     -K..-K..7K..-K..
   11ae8:	00004b43 00004b4d 00004b67 00004b81     CK..MK..gK...K..
   11af8:	00004c25 00004c11                       %L...L..

00011b00 <Clock_Ip_axPcfsCallbacks>:
   11b00:	00004d81                                .M..

00011b04 <Clock_Ip_axSelectorCallbacks>:
   11b04:	00004d8d 00004d8d 00004d97 00004db1     .M...M...M...M..
   11b14:	00004d8d 00004dcb 00004de5 00004dff     .M...M...M...M..
   11b24:	00004e19 00004e33 00004e4d 00004e67     .N..3N..MN..gN..
   11b34:	00004e81 00004e9b 00004eb5 00004ecf     .N...N...N...N..
   11b44:	00004ee9 00004f03 00004f1d 00004f37     .N...O...O..7O..
   11b54:	00004f51 00004f6b                       QO..kO..

00011b5c <ClockSource>:
   11b5c:	00000000 00000008 00000002 00000005     ................
	...
   11b74:	00000009                                ....

00011b78 <ResetReasonArray>:
   11b78:	00000000 00000001 00000002 00000003     ................
   11b88:	00000004 00000005 00000006 00000007     ................
   11b98:	00000008 00000009 0000000a 0000000b     ................
   11ba8:	0000000c 0000000d 0000000e              ............

00011bb4 <Port_au32PortCiPortBaseAddr>:
   11bb4:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   11bc4:	4004d000                                ...@

00011bc8 <Port_au32PortCiGpioBaseAddr>:
   11bc8:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   11bd8:	400ff100                                ...@

00011bdc <Adc_Ip_apxBase>:
   11bdc:	4003b000 40027000                       ...@.p.@

00011be4 <Pdb_Adc_Ip_apxBase>:
   11be4:	40036000 40031000                       .`.@...@

00011bec <ButtonsCfg>:
   11bec:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   11bfc:	0000000c 0000012c                       ....,...

00011c04 <LedsCfg>:
   11c04:	00000060 0000006f 00000070              `...o...p...

00011c10 <Task_Config>:
   11c10:	00000032 00000001 0000093d 00000064     2.......=...d...
   11c20:	00000001 00000949 000003e8 00000000     ....I...........
   11c30:	000016d1 00000bb8 00000000 000016d5     ................
   11c40:	00001388 00000000 000016d9 00000bb8     ................
   11c50:	00000000 000016dd                       ........

00011c58 <Timer_Config>:
	...

00011c64 <Queue_Config>:
   11c64:	00000002 0000000a 00000000              ............

00011c70 <Scheduler_Config>:
   11c70:	0000000a 00000006 00011c10 00000001     ................
   11c80:	00011c58 00000001 00011c64              X.......d...

00011c8c <AdcIpChansConfig_0>:
   11c8c:	00000000 00000005 00000000 00000001     ................
   11c9c:	00000008 00000000                       ........

00011ca4 <AdcIpChansConfig_1>:
   11ca4:	00000000 0000000f 00000000 00000001     ................
   11cb4:	00000008 00000000                       ........

00011cbc <AdcIpConfig_0>:
   11cbc:	00000000 00000003 00000000 0000000c     ................
   11ccc:	00000000 00000001 00000001 00000000     ................
	...
   11ce4:	00ff0000 00000000 00000000 00011c8c     ................
   11cf4:	0000b2bd                                ....

00011cf8 <AdcIpConfig_1>:
   11cf8:	00000000 00000003 00000000 0000000c     ................
   11d08:	00000000 00000001 00000001 00000000     ................
	...
   11d20:	00ff0000 00000000 00000000 00011ca4     ................
   11d30:	0000b2df                                ....

00011d34 <AdcIpwCfg>:
   11d34:	00011cbc 00011cf8 00012254 00012274     ........T"..t"..
   11d44:	01010100 00010001 00020002 0101ffff     ................
   11d54:	00000100                                ....

00011d58 <AdcIpwGroupConfig_0>:
   11d58:	00000001 00000000 000000c8 00010000     ................
   11d68:	00000000                                ....

00011d6c <AdcIpwGroupConfig_1>:
   11d6c:	00000001 00000000 000000c8 00010000     ................
   11d7c:	00000000                                ....

00011d80 <Adc_Group0_Assignment_0>:
   11d80:	00010000                                ....

00011d84 <Adc_Group1_Assignment_1>:
   11d84:	00010000                                ....

00011d88 <Adc_GroupsCfg>:
	...
   11da4:	00000001 00011d80 00080002 00000005     ................
   11db4:	00000000 00011d58 00010001 00000000     ....X...........
	...
   11dd8:	00000001 00011d84 000f0002 00000008     ................
   11de8:	00000000 00011d6c                       ....l...

00011df0 <Adc_au16GroupIdToIndexMap>:
   11df0:	00010000                                ....

00011df4 <Adc_Partition_Assignment>:
   11df4:	00000000                                ....

00011df8 <Adc_Config>:
   11df8:	00011d34 00011d88 00000002 00011df0     4...............
   11e08:	00000000 00011df4 00000001              ............

00011e14 <Mcu_aClockConfigPB>:
	...
   11e1c:	1c000002 04000010 01000029 00000002     ........).......
   11e2c:	01000001 00000001 00000005 00000001     ................
   11e3c:	00000000 00000057 00000000 00000000     ....W...........
	...
   11e54:	00000057 00000000 00000057 00000000     W.......W.......
	...
   11e7c:	00000019 00000005 0000001a 00000002     ................
   11e8c:	0000001b 00000005 0000002a 00000002     ........*.......
   11e9c:	00000028 0000000e 00000029 00000001     (.......).......
   11eac:	00000056 0000001c 00000032 0000002a     V.......2...*...
   11ebc:	0000002b 00000014 0000002c 00000014     +.......,.......
   11ecc:	0000002d 00000014 0000002e 00000014     -...............
   11edc:	0000003f 00000000 00000040 00000000     ?.......@.......
   11eec:	00000041 00000000 00000042 00000000     A.......B.......
   11efc:	00000031 0000000b 00000045 00000000     1.......E.......
   11f0c:	00000046 00000000 00000047 00000000     F.......G.......
   11f1c:	00000044 00000000 00000030 0000000b     D.......0.......
   11f2c:	0000003d 00000000 00000043 00000000     =.......C.......
   11f3c:	00000049 00000000 0000004a 00000000     I.......J.......
   11f4c:	0000004b 00000000 00000048 00000000     K.......H.......
   11f5c:	0000000a 00000001 00000000 0000000b     ................
   11f6c:	00000001 00000000 0000000c 00000001     ................
   11f7c:	00000000 0000000d 00000002 00000000     ................
   11f8c:	0000001d 00000001 00000000 0000001e     ................
   11f9c:	00000002 00000000 0000001f 00000001     ................
   11fac:	00000000 00000021 00000001 00000000     ....!...........
   11fbc:	00000022 00000002 00000000 00000023     "...........#...
   11fcc:	00000001 00000000 00000025 00000002     ........%.......
   11fdc:	00000000 00000026 00000004 00000000     ....&...........
   11fec:	00000027 00000002 00000000 00000032     '...........2...
   11ffc:	00000001 00000000 00000048 00000001     ........H.......
   1200c:	00000001 00000056 00000001 00000001     ....V...........
   1201c:	00000057 00000000 00000000 00000057     W...........W...
	...
   12034:	00000057 00000000 00000000 00000057     W...........W...
	...
   1204c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   12068:	00000014 00007d00 00000015 00007d00     .....}.......}..
   12078:	00000016 00007d00 00000017 00008000     .....}..........
   12088:	00000012 00000001 00000013 00000001     ................
   12098:	00000030 00000001 00000031 00000001     0.......1.......
   120a8:	00000032 00000000 00000033 00000000     2.......3.......
   120b8:	00000034 00000000 00000035 00000001     4.......5.......
   120c8:	00000036 00000000 00000037 00000001     6.......7.......
   120d8:	00000038 00000001 00000039 00000000     8.......9.......
   120e8:	0000003a 00000000 0000003b 00000000     :.......;.......
   120f8:	0000003c 00000000 0000003d 00000000     <.......=.......
   12108:	0000003e 00000000 0000003f 00000000     >.......?.......
   12118:	00000040 00000000 00000041 00000000     @.......A.......
   12128:	00000042 00000000 00000043 00000000     B.......C.......
   12138:	00000044 00000000 00000045 00000000     D.......E.......
   12148:	00000046 00000000 00000047 00000000     F.......G.......
   12158:	00000048 00000000 00000049 00000000     H.......I.......
   12168:	0000004a 00000000 0000004b 00000000     J.......K.......
   12178:	0000004c 00000001 0000004d 00000001     L.......M.......
   12188:	0000004e 00000001 0000004f 00000001     N.......O.......
   12198:	00000050 00000001 00000051 00000001     P.......Q.......
   121a8:	00000052 00000001 00000053 00000001     R.......S.......
   121b8:	00000054 00000001 00000055 00000000     T.......U.......
   121c8:	00000056 00000001 00000057 00000000     V.......W.......
   121d8:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0001220c <aIrqConfiguration>:
   1220c:	00000027 00000f01 00009c01 00000028     '...........(...
   1221c:	00000f01 00009c11                       ........

00012224 <intCtrlConfig>:
   12224:	00000002 0001220c                       ....."..

0001222c <Mcu_Config>:
   1222c:	0000005a 00000000 00000001 00000001     Z...............
   1223c:	00012580 00011e14 0001258c              .%.......%..

00012248 <OsIf_xPredefinedConfig>:
   12248:	00000000 02dc6c00                       .....l..

00012250 <OsIf_apxPredefinedConfig>:
   12250:	00012248                                H"..

00012254 <PdbAdcIpConfig_0>:
	...
   12260:	0000000f ffff0000 00000000 00000000     ................
   12270:	00000000                                ....

00012274 <PdbAdcIpConfig_1>:
	...
   12280:	0000000f ffff0000 00000000 00000000     ................
   12290:	00000000                                ....

00012294 <Platform_uConfiguration>:
   12294:	0001229c                                ."..

00012298 <Platform_Config>:
   12298:	00012294                                ."..

0001229c <ipwConfig>:
   1229c:	00012224 00000000                       $"......

000122a4 <g_pin_mux_InitConfigArr>:
   122a4:	4004c000 400ff0c0 00000010 00000002     ...@...@........
   122b4:	00000001 00000002 00000000 00000000     ................
   122c4:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   122d4:	00000011 00000002 00000001 00000001     ................
	...
   122f4:	4004c000 400ff0c0 0000000f 00000002     ...@...@........
   12304:	00000001 00000002 00000000 00000000     ................
   12314:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   12324:	00000000 00000002 00000001 00000002     ................
	...
   12340:	00000100 4004d000 400ff100 0000000c     .......@...@....
   12350:	00000002 00000001 00000001 00000000     ................
	...
   1236c:	40049000 400ff000 0000000c 00000002     ...@...@........
   1237c:	00000001 00000001 00000000 00000000     ................
	...
   12394:	4004a000 00000000 00000001 00000002     ...@............
   123a4:	00000000 00000001 00000000 00000000     ................
	...
   123bc:	4004a000 00000000 0000000d 00000002     ...@............
   123cc:	00000000 00000001 00000000 00000000     ................
	...

000123e4 <au8Port_PartitionList>:
   123e4:	00000001                                ....

000123e8 <au32Port_PinToPartitionMap>:
   123e8:	00000001 00000001 00000001 00000001     ................
   123f8:	00000001 00000001 00000001 00000001     ................

00012408 <Port_au16NoUnUsedPadsArrayDefault>:
   12408:	00010000 00030002 00070006 00090008     ................
   12418:	000d000b 000f000e 00110010 00220020     ............ .".
   12428:	00240023 00260025 00280027 002a0029     #.$.%.&.'.(.).*.
   12438:	002c002b 002f002e 00310030 00410040     +.,.../.0.1.@.A.
   12448:	00430042 00470046 00490048 004b004a     B.C.F.G.H.I.J.K.
   12458:	004d004c 004f004e 00510050 00620061     L.M.N.O.P.Q.a.b.
   12468:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
   12478:	006c006b 006e006d 00810080 00830082     k.l.m.n.........
   12488:	00850084 00870086 00890088 008b008a     ................
   12498:	008e008d 0090008f                       ........

000124a0 <Port_UnUsedPin>:
   124a0:	00000000 00000001 00000000              ............

000124ac <Port_aPinConfigDefault>:
   124ac:	00000070 00000100 00000001 00000002     p...............
   124bc:	00010001 00000071 00000100 00000000     ....q...........
   124cc:	00000001 00010001 0000006f 00000100     ........o.......
   124dc:	00000001 00000002 00010001 00000060     ............`...
   124ec:	00000100 00000001 00000002 00010001     ................
   124fc:	0000008c 00000100 00000000 00000001     ................
   1250c:	00010001 0000000c 00000100 00000000     ................
   1251c:	00000001 00010001 00000021 00000000     ........!.......
   1252c:	00000002 00000000 00010000 0000002d     ............-...
   1253c:	00000000 00000002 00000000 00010000     ................

0001254c <Port_Config>:
   1254c:	004c0008 00012408 000124a0 000124ac     ..L..$...$...$..
	...
   12564:	000123e8 000123e4 000122a4              .#...#..."..

00012570 <Power_Ip_RCM_ConfigPB>:
	...

00012578 <Power_Ip_PMC_ConfigPB>:
   12578:	00000000                                ....

0001257c <Power_Ip_SMC_ConfigPB>:
   1257c:	00000000                                ....

00012580 <Power_Ip_aModeConfigPB>:
	...

0001258c <Power_Ip_HwIPsConfigPB>:
   1258c:	00012570 00012578 0001257c              p%..x%..|%..

00012598 <_aInitStr.0>:
   12598:	00000000 54540000 45522052 53454747     ......TTR REGGES
   125a8:	00000000                                ....

000125ac <_aV2C.0>:
   125ac:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000125bc <__INIT_TABLE>:
   125bc:	00000002 	.word	0x00000002
   125c0:	1fff8b10 	.word	0x1fff8b10
   125c4:	000125e4 	.word	0x000125e4
   125c8:	00012618 	.word	0x00012618
   125cc:	1fff8800 	.word	0x1fff8800
   125d0:	00000000 	.word	0x00000000
   125d4:	00000310 	.word	0x00000310

000125d8 <__ZERO_TABLE>:
   125d8:	00000001 	.word	0x00000001
   125dc:	1fff8b50 	.word	0x1fff8b50
   125e0:	1fff9780 	.word	0x1fff9780
