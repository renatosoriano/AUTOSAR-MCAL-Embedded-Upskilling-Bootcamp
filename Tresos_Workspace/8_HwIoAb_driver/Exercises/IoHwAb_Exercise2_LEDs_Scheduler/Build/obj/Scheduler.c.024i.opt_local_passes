MemCopy (void * Dest, void * Src, uint32 Size)
{
  uint32 i;
  uint8 * SrcPtr;
  uint8 * DestPtr;
  uint8 * _1;
  uint8 * _2;
  unsigned char _3;

  <bb 2> :
  DestPtr_7 = Dest_6(D);
  SrcPtr_9 = Src_8(D);
  i_10 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = SrcPtr_9 + i_4;
  _2 = DestPtr_7 + i_4;
  _3 = *_1;
  *_2 = _3;
  i_14 = i_4 + 1;

  <bb 4> :
  # i_4 = PHI <i_10(2), i_14(3)>
  if (i_4 < Size_12(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Timers_Dispatch ()
{
  uint8 i;
  long unsigned int _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  const struct Scheduler_ConfigType * SchedulerLocal.27_5;
  long unsigned int _6;
  int _7;
  long unsigned int _8;
  int _9;
  long unsigned int _10;
  const struct Scheduler_ConfigType * SchedulerLocal.28_11;
  const struct Timer_ConfigType * _12;
  unsigned int _13;
  unsigned int _14;
  const struct Timer_ConfigType * _15;
  void (*<T4cc>) (void) _16;
  const struct Scheduler_ConfigType * SchedulerLocal.29_17;
  const struct Timer_ConfigType * _18;
  unsigned int _19;
  unsigned int _20;
  const struct Timer_ConfigType * _21;
  void (*<T4cc>) (void) _22;
  unsigned char i.30_23;
  const struct Scheduler_ConfigType * SchedulerLocal.31_24;
  unsigned char _25;

  <bb 2> :
  i_29 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = SchedulerControl.TimerFlags;
  _2 = Bfx_GetBit_u32u8_u8 (_1, i_26);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _3 = (int) i_26;
  _4 = SchedulerControl.TimerCount[_3];
  SchedulerLocal.27_5 = SchedulerLocal;
  _6 = SchedulerLocal.27_5->Tick;
  _7 = (int) i_26;
  _8 = _4 - _6;
  SchedulerControl.TimerCount[_7] = _8;
  _9 = (int) i_26;
  _10 = SchedulerControl.TimerCount[_9];
  if (_10 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  Bfx_ClrBit_u32u8 (&SchedulerControl.TimerFlags, i_26);
  SchedulerLocal.28_11 = SchedulerLocal;
  _12 = SchedulerLocal.28_11->TimerPtr;
  _13 = (unsigned int) i_26;
  _14 = _13 * 12;
  _15 = _12 + _14;
  _16 = _15->CallbackFunc;
  if (_16 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  SchedulerLocal.29_17 = SchedulerLocal;
  _18 = SchedulerLocal.29_17->TimerPtr;
  _19 = (unsigned int) i_26;
  _20 = _19 * 12;
  _21 = _18 + _20;
  _22 = _21->CallbackFunc;
  _22 ();

  <bb 7> :
  i.30_23 = i_26;
  i_35 = i.30_23 + 1;

  <bb 8> :
  # i_26 = PHI <i_29(2), i_35(7)>
  SchedulerLocal.31_24 = SchedulerLocal;
  _25 = SchedulerLocal.31_24->Timers;
  if (i_26 < _25)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Tasks_Dispatch ()
{
  uint8 i;
  long unsigned int _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  int _5;
  long unsigned int _6;
  int _7;
  const struct Scheduler_ConfigType * SchedulerLocal.23_8;
  const struct Task_ConfigType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Task_ConfigType * _12;
  void (*<T4cc>) (void) _13;
  int _14;
  long unsigned int _15;
  const struct Scheduler_ConfigType * SchedulerLocal.24_16;
  long unsigned int _17;
  int _18;
  long unsigned int _19;
  unsigned char i.25_20;
  const struct Scheduler_ConfigType * SchedulerLocal.26_21;
  unsigned char _22;

  <bb 2> :
  i_26 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = SchedulerControl.TaskFlags;
  _2 = Bfx_GetBit_u32u8_u8 (_1, i_23);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = (int) i_23;
  _4 = SchedulerControl.TaskElapsed[_3];
  _5 = (int) i_23;
  _6 = SchedulerControl.TaskPeriod[_5];
  if (_4 >= _6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = (int) i_23;
  SchedulerControl.TaskElapsed[_7] = 0;
  SchedulerLocal.23_8 = SchedulerLocal;
  _9 = SchedulerLocal.23_8->TaskPtr;
  _10 = (unsigned int) i_23;
  _11 = _10 * 12;
  _12 = _9 + _11;
  _13 = _12->TaskFunc;
  _13 ();

  <bb 6> :
  _14 = (int) i_23;
  _15 = SchedulerControl.TaskElapsed[_14];
  SchedulerLocal.24_16 = SchedulerLocal;
  _17 = SchedulerLocal.24_16->Tick;
  _18 = (int) i_23;
  _19 = _15 + _17;
  SchedulerControl.TaskElapsed[_18] = _19;
  i.25_20 = i_23;
  i_32 = i.25_20 + 1;

  <bb 7> :
  # i_23 = PHI <i_26(2), i_32(6)>
  SchedulerLocal.26_21 = SchedulerLocal;
  _22 = SchedulerLocal.26_21->Tasks;
  if (i_23 < _22)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Scheduler_GetStatusQueue (QueueType Queue, uint8 Status)
{
  uint8 Result;
  uint8 D.5888;
  long unsigned int _1;
  _Bool _2;
  long unsigned int _3;
  _Bool _4;
  uint8 _15;

  <bb 2> :
  Result_7 = 0;
  if (Status_8(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = SchedulerControl.QueueEmpties;
  _2 = Bfx_GetBit_u32u8_u8 (_1, Queue_10(D));
  Result_14 = (uint8) _2;
  goto <bb 6>; [INV]

  <bb 4> :
  if (Status_8(D) == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 = SchedulerControl.QueueFulls;
  _4 = Bfx_GetBit_u32u8_u8 (_3, Queue_10(D));
  Result_12 = (uint8) _4;

  <bb 6> :
  # Result_5 = PHI <Result_14(3), Result_7(4), Result_12(5)>
  _15 = Result_5;

  <bb 7> :
<L5>:
  return _15;

}


Scheduler_FlushQueue (QueueType Queue)
{
  Std_ReturnType Error;
  Std_ReturnType D.5881;
  long unsigned int _1;
  _Bool _2;
  int _3;
  int _4;
  Std_ReturnType _16;

  <bb 2> :
  Error_7 = 1;
  _1 = SchedulerControl.QueueFulls;
  _2 = Bfx_GetBit_u32u8_u8 (_1, Queue_9(D));
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) Queue_9(D);
  SchedulerControl.QueueHeads[_3] = 0;
  _4 = (int) Queue_9(D);
  SchedulerControl.QueueTails[_4] = 0;
  Bfx_SetBit_u32u8 (&SchedulerControl.QueueEmpties, Queue_9(D));
  Bfx_ClrBit_u32u8 (&SchedulerControl.QueueFulls, Queue_9(D));
  Error_15 = 0;

  <bb 4> :
  # Error_5 = PHI <Error_7(2), Error_15(3)>
  _16 = Error_5;

  <bb 5> :
<L2>:
  return _16;

}


Scheduler_ReadQueue (QueueType Queue, void * Data)
{
  uint8 Offset;
  Std_ReturnType Error;
  Std_ReturnType D.5877;
  long unsigned int _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  unsigned char _5;
  const struct Scheduler_ConfigType * SchedulerLocal.19_6;
  const struct Queue_ConfigType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Queue_ConfigType * _10;
  unsigned char _11;
  const struct Scheduler_ConfigType * SchedulerLocal.20_12;
  const struct Queue_ConfigType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Queue_ConfigType * _16;
  void * _17;
  sizetype _18;
  void * _19;
  const struct Scheduler_ConfigType * SchedulerLocal.21_20;
  const struct Queue_ConfigType * _21;
  unsigned int _22;
  unsigned int _23;
  const struct Queue_ConfigType * _24;
  unsigned char _25;
  long unsigned int _26;
  int _27;
  long unsigned int _28;
  long unsigned int _29;
  int _30;
  long unsigned int _31;
  const struct Scheduler_ConfigType * SchedulerLocal.22_32;
  const struct Queue_ConfigType * _33;
  unsigned int _34;
  unsigned int _35;
  const struct Queue_ConfigType * _36;
  long unsigned int _37;
  int _38;
  long unsigned int _39;
  int _40;
  long unsigned int _41;
  int _42;
  long unsigned int _43;
  Std_ReturnType _59;

  <bb 2> :
  Error_47 = 1;
  _1 = SchedulerControl.QueueEmpties;
  _2 = Bfx_GetBit_u32u8_u8 (_1, Queue_49(D));
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _3 = (int) Queue_49(D);
  _4 = SchedulerControl.QueueTails[_3];
  _5 = (unsigned char) _4;
  SchedulerLocal.19_6 = SchedulerLocal;
  _7 = SchedulerLocal.19_6->QueuePtr;
  _8 = (unsigned int) Queue_49(D);
  _9 = _8 * 12;
  _10 = _7 + _9;
  _11 = _10->Size;
  Offset_51 = _5 * _11;
  SchedulerLocal.20_12 = SchedulerLocal;
  _13 = SchedulerLocal.20_12->QueuePtr;
  _14 = (unsigned int) Queue_49(D);
  _15 = _14 * 12;
  _16 = _13 + _15;
  _17 = _16->Buffer;
  _18 = (sizetype) Offset_51;
  _19 = _17 + _18;
  SchedulerLocal.21_20 = SchedulerLocal;
  _21 = SchedulerLocal.21_20->QueuePtr;
  _22 = (unsigned int) Queue_49(D);
  _23 = _22 * 12;
  _24 = _21 + _23;
  _25 = _24->Size;
  _26 = (long unsigned int) _25;
  MemCopy (Data_52(D), _19, _26);
  Bfx_ClrBit_u32u8 (&SchedulerControl.QueueFulls, Queue_49(D));
  _27 = (int) Queue_49(D);
  _28 = SchedulerControl.QueueTails[_27];
  _29 = _28 + 1;
  SchedulerControl.QueueTails[_27] = _29;
  _30 = (int) Queue_49(D);
  _31 = SchedulerControl.QueueTails[_30];
  SchedulerLocal.22_32 = SchedulerLocal;
  _33 = SchedulerLocal.22_32->QueuePtr;
  _34 = (unsigned int) Queue_49(D);
  _35 = _34 * 12;
  _36 = _33 + _35;
  _37 = _36->Elements;
  _38 = (int) Queue_49(D);
  _39 = _31 % _37;
  SchedulerControl.QueueTails[_38] = _39;
  _40 = (int) Queue_49(D);
  _41 = SchedulerControl.QueueTails[_40];
  _42 = (int) Queue_49(D);
  _43 = SchedulerControl.QueueHeads[_42];
  if (_41 == _43)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Bfx_SetBit_u32u8 (&SchedulerControl.QueueEmpties, Queue_49(D));

  <bb 5> :
  Error_58 = 0;

  <bb 6> :
  # Error_44 = PHI <Error_47(2), Error_58(5)>
  _59 = Error_44;

  <bb 7> :
<L4>:
  return _59;

}


Scheduler_WriteQueue (QueueType Queue, void * Data)
{
  uint8 Offset;
  Std_ReturnType Error;
  Std_ReturnType D.5871;
  long unsigned int _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  unsigned char _5;
  const struct Scheduler_ConfigType * SchedulerLocal.15_6;
  const struct Queue_ConfigType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Queue_ConfigType * _10;
  unsigned char _11;
  const struct Scheduler_ConfigType * SchedulerLocal.16_12;
  const struct Queue_ConfigType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Queue_ConfigType * _16;
  void * _17;
  sizetype _18;
  void * _19;
  const struct Scheduler_ConfigType * SchedulerLocal.17_20;
  const struct Queue_ConfigType * _21;
  unsigned int _22;
  unsigned int _23;
  const struct Queue_ConfigType * _24;
  unsigned char _25;
  long unsigned int _26;
  int _27;
  long unsigned int _28;
  long unsigned int _29;
  int _30;
  long unsigned int _31;
  const struct Scheduler_ConfigType * SchedulerLocal.18_32;
  const struct Queue_ConfigType * _33;
  unsigned int _34;
  unsigned int _35;
  const struct Queue_ConfigType * _36;
  long unsigned int _37;
  int _38;
  long unsigned int _39;
  int _40;
  long unsigned int _41;
  int _42;
  long unsigned int _43;
  Std_ReturnType _59;

  <bb 2> :
  Error_47 = 1;
  _1 = SchedulerControl.QueueFulls;
  _2 = Bfx_GetBit_u32u8_u8 (_1, Queue_49(D));
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _3 = (int) Queue_49(D);
  _4 = SchedulerControl.QueueHeads[_3];
  _5 = (unsigned char) _4;
  SchedulerLocal.15_6 = SchedulerLocal;
  _7 = SchedulerLocal.15_6->QueuePtr;
  _8 = (unsigned int) Queue_49(D);
  _9 = _8 * 12;
  _10 = _7 + _9;
  _11 = _10->Size;
  Offset_51 = _5 * _11;
  SchedulerLocal.16_12 = SchedulerLocal;
  _13 = SchedulerLocal.16_12->QueuePtr;
  _14 = (unsigned int) Queue_49(D);
  _15 = _14 * 12;
  _16 = _13 + _15;
  _17 = _16->Buffer;
  _18 = (sizetype) Offset_51;
  _19 = _17 + _18;
  SchedulerLocal.17_20 = SchedulerLocal;
  _21 = SchedulerLocal.17_20->QueuePtr;
  _22 = (unsigned int) Queue_49(D);
  _23 = _22 * 12;
  _24 = _21 + _23;
  _25 = _24->Size;
  _26 = (long unsigned int) _25;
  MemCopy (_19, Data_52(D), _26);
  Bfx_ClrBit_u32u8 (&SchedulerControl.QueueEmpties, Queue_49(D));
  _27 = (int) Queue_49(D);
  _28 = SchedulerControl.QueueHeads[_27];
  _29 = _28 + 1;
  SchedulerControl.QueueHeads[_27] = _29;
  _30 = (int) Queue_49(D);
  _31 = SchedulerControl.QueueHeads[_30];
  SchedulerLocal.18_32 = SchedulerLocal;
  _33 = SchedulerLocal.18_32->QueuePtr;
  _34 = (unsigned int) Queue_49(D);
  _35 = _34 * 12;
  _36 = _33 + _35;
  _37 = _36->Elements;
  _38 = (int) Queue_49(D);
  _39 = _31 % _37;
  SchedulerControl.QueueHeads[_38] = _39;
  _40 = (int) Queue_49(D);
  _41 = SchedulerControl.QueueHeads[_40];
  _42 = (int) Queue_49(D);
  _43 = SchedulerControl.QueueTails[_42];
  if (_41 == _43)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Bfx_SetBit_u32u8 (&SchedulerControl.QueueFulls, Queue_49(D));

  <bb 5> :
  Error_58 = 0;

  <bb 6> :
  # Error_44 = PHI <Error_47(2), Error_58(5)>
  _59 = Error_44;

  <bb 7> :
<L4>:
  return _59;

}


Scheduler_StopTimer (TimerType Timer)
{
  Std_ReturnType Error;
  Std_ReturnType D.5865;
  const struct Scheduler_ConfigType * SchedulerLocal.14_1;
  unsigned char _2;
  Std_ReturnType _10;

  <bb 2> :
  Error_5 = 1;
  SchedulerLocal.14_1 = SchedulerLocal;
  _2 = SchedulerLocal.14_1->Timers;
  if (Timer_7(D) < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Bfx_ClrBit_u32u8 (&SchedulerControl.TimerFlags, Timer_7(D));
  Error_9 = 0;

  <bb 4> :
  # Error_3 = PHI <Error_5(2), Error_9(3)>
  _10 = Error_3;

  <bb 5> :
<L2>:
  return _10;

}


Scheduler_StartTimer (TimerType Timer)
{
  Std_ReturnType Error;
  Std_ReturnType D.5861;
  const struct Scheduler_ConfigType * SchedulerLocal.13_1;
  unsigned char _2;
  int _3;
  int _4;
  long unsigned int _5;
  Std_ReturnType _14;

  <bb 2> :
  Error_8 = 1;
  SchedulerLocal.13_1 = SchedulerLocal;
  _2 = SchedulerLocal.13_1->Timers;
  if (Timer_10(D) < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) Timer_10(D);
  _4 = (int) Timer_10(D);
  _5 = SchedulerControl.TimerTimeout[_3];
  SchedulerControl.TimerCount[_4] = _5;
  Bfx_SetBit_u32u8 (&SchedulerControl.TimerFlags, Timer_10(D));
  Error_13 = 0;

  <bb 4> :
  # Error_6 = PHI <Error_8(2), Error_13(3)>
  _14 = Error_6;

  <bb 5> :
<L2>:
  return _14;

}


Scheduler_ReloadTimer (TimerType Timer, uint32 NewTimeout)
{
  Std_ReturnType Error;
  Std_ReturnType D.5857;
  const struct Scheduler_ConfigType * SchedulerLocal.12_1;
  unsigned char _2;
  int _3;
  long unsigned int _4;
  _Bool _5;
  int _6;
  int _7;
  long unsigned int _8;
  Std_ReturnType _20;

  <bb 2> :
  Error_12 = 1;
  SchedulerLocal.12_1 = SchedulerLocal;
  _2 = SchedulerLocal.12_1->Timers;
  if (Timer_14(D) < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _3 = (int) Timer_14(D);
  SchedulerControl.TimerTimeout[_3] = NewTimeout_15(D);
  _4 = SchedulerControl.TimerFlags;
  _5 = Bfx_GetBit_u32u8_u8 (_4, Timer_14(D));
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) Timer_14(D);
  _7 = (int) Timer_14(D);
  _8 = SchedulerControl.TimerTimeout[_6];
  SchedulerControl.TimerCount[_7] = _8;

  <bb 5> :
  Error_19 = 0;

  <bb 6> :
  # Error_9 = PHI <Error_12(2), Error_19(5)>
  _20 = Error_9;

  <bb 7> :
<L4>:
  return _20;

}


Scheduler_GetTimer (TimerType Timer)
{
  uint32 Time;
  uint32 D.5851;
  const struct Scheduler_ConfigType * SchedulerLocal.11_1;
  unsigned char _2;
  int _3;
  uint32 _9;

  <bb 2> :
  Time_5 = 0;
  SchedulerLocal.11_1 = SchedulerLocal;
  _2 = SchedulerLocal.11_1->Timers;
  if (Timer_7(D) < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) Timer_7(D);
  Time_8 = SchedulerControl.TimerCount[_3];

  <bb 4> :
  # Time_4 = PHI <Time_5(2), Time_8(3)>
  _9 = Time_4;

  <bb 5> :
<L2>:
  return _9;

}


Scheduler_PeriodTask (TaskType Task, uint32 NewPeriod)
{
  Std_ReturnType Error;
  Std_ReturnType D.5847;
  const struct Scheduler_ConfigType * SchedulerLocal.10_1;
  unsigned char _2;
  int _3;
  int _4;
  Std_ReturnType _14;

  <bb 2> :
  Error_7 = 1;
  SchedulerLocal.10_1 = SchedulerLocal;
  _2 = SchedulerLocal.10_1->Tasks;
  if (Task_9(D) <= _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) Task_9(D);
  SchedulerControl.TaskPeriod[_3] = NewPeriod_10(D);
  _4 = (int) Task_9(D);
  SchedulerControl.TaskElapsed[_4] = NewPeriod_10(D);
  Error_13 = 0;

  <bb 4> :
  # Error_5 = PHI <Error_7(2), Error_13(3)>
  _14 = Error_5;

  <bb 5> :
<L2>:
  return _14;

}


Scheduler_StartTask (TaskType Task)
{
  Std_ReturnType Error;
  Std_ReturnType D.5843;
  const struct Scheduler_ConfigType * SchedulerLocal.9_1;
  unsigned char _2;
  Std_ReturnType _10;

  <bb 2> :
  Error_5 = 1;
  SchedulerLocal.9_1 = SchedulerLocal;
  _2 = SchedulerLocal.9_1->Tasks;
  if (Task_7(D) < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Bfx_SetBit_u32u8 (&SchedulerControl.TaskFlags, Task_7(D));
  Error_9 = 0;

  <bb 4> :
  # Error_3 = PHI <Error_5(2), Error_9(3)>
  _10 = Error_3;

  <bb 5> :
<L2>:
  return _10;

}


Scheduler_StopTask (TaskType Task)
{
  Std_ReturnType Error;
  Std_ReturnType D.5839;
  const struct Scheduler_ConfigType * SchedulerLocal.8_1;
  unsigned char _2;
  Std_ReturnType _10;

  <bb 2> :
  Error_5 = 1;
  SchedulerLocal.8_1 = SchedulerLocal;
  _2 = SchedulerLocal.8_1->Tasks;
  if (Task_7(D) < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Bfx_ClrBit_u32u8 (&SchedulerControl.TaskFlags, Task_7(D));
  Error_9 = 0;

  <bb 4> :
  # Error_3 = PHI <Error_5(2), Error_9(3)>
  _10 = Error_3;

  <bb 5> :
<L2>:
  return _10;

}


Scheduler_MainFunction ()
{
  uint32 ElapsedTime;
  uint32 SeedTick;
  uint32 Timeout;
  long unsigned int D.5834;
  const struct Scheduler_ConfigType * SchedulerLocal.7_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _16;

  <bb 2> :
  SchedulerLocal.7_1 = SchedulerLocal;
  _2 = SchedulerLocal.7_1->Tick;
  _3 = _2 * 1000;
  Timeout_11 = OsIf_MicrosToTicks (_3, 1);
  _4 = OsIf_GetCounter (1);
  SeedTick = _4;
  ElapsedTime_14 = 0;

  <bb 3> :
  # ElapsedTime_5 = PHI <ElapsedTime_14(2), ElapsedTime_6(5)>
  _16 = OsIf_GetElapsed (&SeedTick, 1);
  ElapsedTime_17 = _16 + ElapsedTime_5;
  if (ElapsedTime_17 >= Timeout_11)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ElapsedTime_18 = 0;
  Timers_Dispatch ();
  Tasks_Dispatch ();

  <bb 5> :
  # ElapsedTime_6 = PHI <ElapsedTime_17(3), ElapsedTime_18(4)>
  goto <bb 3>; [INV]

}


Scheduler_Init (const struct Scheduler_ConfigType * SchedulerPtr)
{
  uint8 i;
  uint8 i;
  uint8 i;
  int _1;
  const struct Task_ConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Task_ConfigType * _5;
  int _6;
  long unsigned int _7;
  const struct Task_ConfigType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Task_ConfigType * _11;
  unsigned char _12;
  _Bool _13;
  unsigned char i.4_14;
  unsigned char _15;
  int _16;
  const struct Timer_ConfigType * _17;
  unsigned int _18;
  unsigned int _19;
  const struct Timer_ConfigType * _20;
  int _21;
  long unsigned int _22;
  const struct Timer_ConfigType * _23;
  unsigned int _24;
  unsigned int _25;
  const struct Timer_ConfigType * _26;
  unsigned char _27;
  _Bool _28;
  unsigned char i.5_29;
  unsigned char _30;
  int _31;
  int _32;
  unsigned char i.6_33;
  unsigned char _34;

  <bb 2> :
  SchedulerControl.TaskFlags = 0;
  SchedulerControl.TimerFlags = 0;
  i_44 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) i_35;
  SchedulerControl.TaskElapsed[_1] = 0;
  _2 = SchedulerPtr_45(D)->TaskPtr;
  _3 = (unsigned int) i_35;
  _4 = _3 * 12;
  _5 = _2 + _4;
  _6 = (int) i_35;
  _7 = _5->InitPeriod;
  SchedulerControl.TaskPeriod[_6] = _7;
  _8 = SchedulerPtr_45(D)->TaskPtr;
  _9 = (unsigned int) i_35;
  _10 = _9 * 12;
  _11 = _8 + _10;
  _12 = _11->InitFlag;
  _13 = _12 != 0;
  Bfx_PutBit_u32u8u8 (&SchedulerControl.TaskFlags, i_35, _13);
  i.4_14 = i_35;
  i_61 = i.4_14 + 1;

  <bb 4> :
  # i_35 = PHI <i_44(2), i_61(3)>
  _15 = SchedulerPtr_45(D)->Tasks;
  if (i_35 < _15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i_46 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _16 = (int) i_36;
  SchedulerControl.TimerCount[_16] = 0;
  _17 = SchedulerPtr_45(D)->TimerPtr;
  _18 = (unsigned int) i_36;
  _19 = _18 * 12;
  _20 = _17 + _19;
  _21 = (int) i_36;
  _22 = _20->InitTimeout;
  SchedulerControl.TimerTimeout[_21] = _22;
  _23 = SchedulerPtr_45(D)->TimerPtr;
  _24 = (unsigned int) i_36;
  _25 = _24 * 12;
  _26 = _23 + _25;
  _27 = _26->InitFlag;
  _28 = _27 != 0;
  Bfx_PutBit_u32u8u8 (&SchedulerControl.TimerFlags, i_36, _28);
  i.5_29 = i_36;
  i_57 = i.5_29 + 1;

  <bb 7> :
  # i_36 = PHI <i_46(5), i_57(6)>
  _30 = SchedulerPtr_45(D)->Timers;
  if (i_36 < _30)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  i_47 = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _31 = (int) i_37;
  SchedulerControl.QueueHeads[_31] = 0;
  _32 = (int) i_37;
  SchedulerControl.QueueTails[_32] = 0;
  Bfx_SetBit_u32u8 (&SchedulerControl.QueueEmpties, i_37);
  Bfx_ClrBit_u32u8 (&SchedulerControl.QueueFulls, i_37);
  i.6_33 = i_37;
  i_53 = i.6_33 + 1;

  <bb 10> :
  # i_37 = PHI <i_47(8), i_53(9)>
  _34 = SchedulerPtr_45(D)->Queues;
  if (i_37 < _34)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  SchedulerLocal = SchedulerPtr_45(D);
  return;

}


Bfx_CountLeadingZeros_u32 (uint32 Data)
{
  uint32 BitChecker;
  uint8 Count;
  uint8 D.5832;
  unsigned char Count.3_1;
  long unsigned int _2;
  uint8 _8;

  <bb 2> :
  Count_5 = 0;
  BitChecker_6 = 2147483648;
  goto <bb 4>; [INV]

  <bb 3> :
  Count.3_1 = Count_3;
  Count_10 = Count.3_1 + 1;
  BitChecker_11 = BitChecker_4 >> 1;

  <bb 4> :
  # Count_3 = PHI <Count_5(2), Count_10(3)>
  # BitChecker_4 = PHI <BitChecker_6(2), BitChecker_11(3)>
  _2 = Data_7(D) & BitChecker_4;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _8 = Count_3;

  <bb 6> :
<L3>:
  return _8;

}


Bfx_CountLeadingSigns_s32 (sint32 Data)
{
  uint8 i;
  uint8 Count;
  uint8 D.5830;
  int _1;
  long int _2;
  int _3;
  int _4;
  long int _5;
  long int _6;
  long int _7;
  unsigned char Count.1_8;
  unsigned char i.2_9;
  uint8 _17;

  <bb 2> :
  Count_12 = 0;
  i_13 = 30;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = (int) i_11;
  _2 = Data_14(D) >> _1;
  _3 = (int) i_11;
  _4 = _3 + 1;
  _5 = Data_14(D) >> _4;
  _6 = _2 ^ _5;
  _7 = _6 & 1;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  Count.1_8 = Count_10;
  Count_15 = Count.1_8 + 1;
  i.2_9 = i_11;
  i_16 = i.2_9 + 255;

  <bb 6> :
  # Count_10 = PHI <Count_12(2), Count_15(5)>
  # i_11 = PHI <i_13(2), i_16(5)>
  if (i_11 <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _17 = Count_10;

  <bb 8> :
<L5>:
  return _17;

}


Bfx_CountLeadingOnes_u32 (uint32 Data)
{
  uint32 BitChecker;
  uint8 Count;
  uint8 D.5826;
  unsigned char Count.0_1;
  long unsigned int _2;
  uint8 _8;

  <bb 2> :
  Count_5 = 0;
  BitChecker_6 = 2147483648;
  goto <bb 4>; [INV]

  <bb 3> :
  Count.0_1 = Count_3;
  Count_10 = Count.0_1 + 1;
  BitChecker_11 = BitChecker_4 >> 1;

  <bb 4> :
  # Count_3 = PHI <Count_5(2), Count_10(3)>
  # BitChecker_4 = PHI <BitChecker_6(2), BitChecker_11(3)>
  _2 = Data_7(D) & BitChecker_4;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _8 = Count_3;

  <bb 6> :
<L3>:
  return _8;

}


Bfx_PutBit_u32u8u8 (uint32 * Data, uint8 BitPn, boolean Status)
{
  long unsigned int _1;
  int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  unsigned int _7;
  unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  if (Status_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = *Data_13(D);
  _2 = (int) BitPn_14(D);
  _3 = 1 << _2;
  _4 = _1 | _3;
  *Data_13(D) = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 = *Data_13(D);
  _6 = (int) BitPn_14(D);
  _7 = 1 << _6;
  _8 = ~_7;
  _9 = _5 & _8;
  *Data_13(D) = _9;

  <bb 5> :
  return;

}


Bfx_PutBitsMask_u32u32u32 (uint32 * Data, uint32 Pattern, uint32 Mask)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 = Pattern_6(D) & Mask_7(D);
  _2 = *Data_9(D);
  _3 = ~Mask_7(D);
  _4 = _2 & _3;
  _5 = _1 | _4;
  *Data_9(D) = _5;
  return;

}


Bfx_PutBits_u32u8u8u32 (uint32 * Data, uint8 BitStartPn, uint8 BitLn, uint32 Pattern)
{
  uint32 Mask;
  int _1;
  unsigned int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> :
  _1 = (int) BitLn_13(D);
  _2 = 1 << _1;
  Mask_14 = _2 + 4294967295;
  _3 = *Data_16(D);
  _4 = (int) BitStartPn_17(D);
  _5 = Mask_14 << _4;
  _6 = ~_5;
  _7 = _3 & _6;
  *Data_16(D) = _7;
  _8 = *Data_16(D);
  _9 = Pattern_19(D) & Mask_14;
  _10 = (int) BitStartPn_17(D);
  _11 = _9 << _10;
  _12 = _8 | _11;
  *Data_16(D) = _12;
  return;

}


Bfx_CopyBit_u32u8u32u8 (uint32 * DestinationData, uint8 DestinationPosition, uint32 SourceData, uint8 SourcePosition)
{
  int _1;
  unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  int _5;
  unsigned int _6;
  unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  int _10;
  unsigned int _11;
  long unsigned int _12;

  <bb 2> :
  _1 = (int) SourcePosition_14(D);
  _2 = 1 << _1;
  _3 = SourceData_15(D) & _2;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = *DestinationData_17(D);
  _5 = (int) DestinationPosition_18(D);
  _6 = 1 << _5;
  _7 = ~_6;
  _8 = _4 & _7;
  *DestinationData_17(D) = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = *DestinationData_17(D);
  _10 = (int) DestinationPosition_18(D);
  _11 = 1 << _10;
  _12 = _9 | _11;
  *DestinationData_17(D) = _12;

  <bb 5> :
  return;

}


Bfx_RotBitLt_u32u8 (uint32 * Data, uint8 ShiftCnt)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  _1 = *Data_10(D);
  _2 = (unsigned int) ShiftCnt_11(D);
  _3 = 32 - _2;
  _4 = _1 >> _3;
  _5 = *Data_10(D);
  _6 = (int) ShiftCnt_11(D);
  _7 = _5 << _6;
  _8 = _4 | _7;
  *Data_10(D) = _8;
  return;

}


Bfx_RotBitRt_u32u8 (uint32 * Data, uint8 ShiftCnt)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  _1 = *Data_10(D);
  _2 = (unsigned int) ShiftCnt_11(D);
  _3 = 32 - _2;
  _4 = _1 << _3;
  _5 = *Data_10(D);
  _6 = (int) ShiftCnt_11(D);
  _7 = _5 >> _6;
  _8 = _4 | _7;
  *Data_10(D) = _8;
  return;

}


Bfx_ShiftBitLt_u32u8 (uint32 * Data, uint8 ShiftCnt)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;

  <bb 2> :
  _1 = *Data_5(D);
  _2 = (int) ShiftCnt_6(D);
  _3 = _1 << _2;
  *Data_5(D) = _3;
  return;

}


Bfx_ShiftBitRt_u32u8 (uint32 * Data, uint8 ShiftCnt)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;

  <bb 2> :
  _1 = *Data_5(D);
  _2 = (int) ShiftCnt_6(D);
  _3 = _1 >> _2;
  *Data_5(D) = _3;
  return;

}


Bfx_ToggleBitMask_u32u32 (uint32 * Data, uint32 Mask)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = *Data_4(D);
  _2 = Mask_5(D) ^ _1;
  *Data_4(D) = _2;
  return;

}


Bfx_ToggleBits_u32 (uint32 * Data)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = *Data_4(D);
  _2 = ~_1;
  *Data_4(D) = _2;
  return;

}


Bfx_TstParityEven_u32_u8 (uint32 Data)
{
  uint32 Temp;
  uint8 Count;
  boolean D.5818;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  boolean _9;

  <bb 2> :
  Count_6 = 0;
  Temp_8 = Data_7(D);
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (unsigned char) Temp_5;
  _2 = _1 & 1;
  Count_11 = Count_4 + _2;
  Temp_12 = Temp_5 >> 1;

  <bb 4> :
  # Count_4 = PHI <Count_6(2), Count_11(3)>
  # Temp_5 = PHI <Temp_8(2), Temp_12(3)>
  if (Temp_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _3 = Count_4 & 1;
  _9 = _3 == 0;

  <bb 6> :
<L3>:
  return _9;

}


Bfx_TstBitLnMask_u32u32_u8 (uint32 Data, uint32 Mask)
{
  boolean D.5816;
  long unsigned int _1;
  boolean _4;

  <bb 2> :
  _1 = Data_2(D) & Mask_3(D);
  _4 = _1 != 0;

  <bb 3> :
<L0>:
  return _4;

}


Bfx_TstBitMask_u32u32_u8 (uint32 Data, uint32 Mask)
{
  boolean D.5814;
  long unsigned int _1;
  boolean _4;

  <bb 2> :
  _1 = Data_2(D) & Mask_3(D);
  _4 = Mask_3(D) == _1;

  <bb 3> :
<L0>:
  return _4;

}


Bfx_ClrBitMask_u32u32 (uint32 * Data, uint32 Mask)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 = *Data_5(D);
  _2 = ~Mask_6(D);
  _3 = _1 & _2;
  *Data_5(D) = _3;
  return;

}


Bfx_SetBitMask_u32u32 (uint32 * Data, uint32 Mask)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = *Data_4(D);
  _2 = Mask_5(D) | _1;
  *Data_4(D) = _2;
  return;

}


Bfx_GetBits_u32u8u8_u32 (uint32 Data, uint8 BitStartPn, uint8 BitLn)
{
  uint32 Bits;
  uint32 D.5812;
  int _1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  uint32 _10;

  <bb 2> :
  _1 = (int) BitStartPn_5(D);
  Bits_7 = Data_6(D) >> _1;
  _2 = (int) BitLn_8(D);
  _3 = 4294967295 << _2;
  _4 = ~_3;
  Bits_9 = Bits_7 & _4;
  _10 = Bits_9;

  <bb 3> :
<L0>:
  return _10;

}


Bfx_SetBits_u32u8u8u8 (uint32 * Data, uint8 BitStartPn, uint8 BitLn, uint8 Status)
{
  uint32 Mask;
  int _1;
  int _2;
  int _3;
  int _4;
  unsigned int _5;
  unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  _1 = (int) BitStartPn_13(D);
  Mask_14 = 4294967295 << _1;
  _2 = (int) BitStartPn_13(D);
  _3 = (int) BitLn_15(D);
  _4 = _2 + _3;
  _5 = 4294967295 << _4;
  _6 = ~_5;
  Mask_16 = Mask_14 & _6;
  if (Status_17(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = *Data_19(D);
  _8 = Mask_16 | _7;
  *Data_19(D) = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = *Data_19(D);
  _10 = ~Mask_16;
  _11 = _9 & _10;
  *Data_19(D) = _11;

  <bb 5> :
  return;

}


Bfx_GetBit_u32u8_u8 (uint32 Data, uint8 BitPn)
{
  boolean D.5807;
  int _1;
  unsigned int _2;
  long unsigned int _3;
  boolean _6;

  <bb 2> :
  _1 = (int) BitPn_4(D);
  _2 = 1 << _1;
  _3 = Data_5(D) & _2;
  _6 = _3 != 0;

  <bb 3> :
<L0>:
  return _6;

}


Bfx_ClrBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  long unsigned int _1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 = *Data_7(D);
  _2 = (int) BitPn_8(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  *Data_7(D) = _5;
  return;

}


Bfx_SetBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  long unsigned int _1;
  int _2;
  unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 = *Data_6(D);
  _2 = (int) BitPn_7(D);
  _3 = 1 << _2;
  _4 = _1 | _3;
  *Data_6(D) = _4;
  return;

}


